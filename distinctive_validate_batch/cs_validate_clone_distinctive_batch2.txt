$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
Gpt3D_Clone0_0.cs 1 13
Gpt3D_Clone0_0.cs 14 29
----------------------------------------

public bool PreFilterMessage (ref System.Windows.Forms.Message Msg) {
    const int WM_LBUTTONDOWN = 0x0201;
    if (Msg.Msg == WM_LBUTTONDOWN) {
        Control ClickedControl = System.Windows.Forms.Control.FromChildHandle (Msg.HWnd);
        if (ClickedControl != null) {
            Button ClickedButton = ClickedControl as Button;
            if (ClickedButton != null) {
                System.Diagnostics.Debug.WriteLine ("CLICK =  Form: " + ClickedButton.Parent.Text + "  Control: " + ClickedButton.Text);
            }
        }
    }
    return false;
}
----------------------------------------

 public bool PreFilterMessage (ref System.Windows.Forms.Message Msg) {
    const int WM_LBUTTONDOWN = 0x0201;
    if (Msg.Msg == WM_LBUTTONDOWN) {
        Control ClickedControl = System.Windows.Forms.Control.FromChildHandle (Msg.HWnd);
        if (ClickedControl != null) { 
            string controlType = ClickedControl.GetType().Name;
            if (controlType == "Button") {
                Console.WriteLine ("CLICK =  Form: " + ClickedControl.Parent.Text + "  Control: " + ClickedControl.Text);
            }
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
102
7
Gpt3D_Clone102_7.cs 1 14
Gpt3D_Clone102_7.cs 15 36
----------------------------------------

public static bool SiteExists (string path) {
    SPSite site;
    try {
        site = new SPSite (path);
    }
    catch (FileNotFoundException e) {
        return false;
    }
    finally {
        if (site != null)
            site.Dispose ();
    }
    return true;
}
----------------------------------------

 public static bool SiteExists (string path) {
    SPSite site = null;
    
    try {
        site = new SPSite(path);
        
        return true;
    }
    catch (FileNotFoundException e) 
    {
        return false;
    }
    finally 
    {
        if (site != null)
        {
            site.Dispose();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
103
0
Gpt3D_Clone103_0.cs 1 10
Gpt3D_Clone103_0.cs 11 22
----------------------------------------

private void timer_Elapsed (object sender, System.Timers.ElapsedEventArgs e) {
    _timer.Stop ();
    try {
        EventLog.WriteEntry (Program.EventLogName, "Checking emails " + _count ++);
    }
    catch (Exception ex) {
        EventLog.WriteEntry (Program.EventLogName, "This is my error " + ex.Message);
    }
    _timer.Start ();
}
----------------------------------------

 private void timer_Elapsed (object sender, System.Timers.ElapsedEventArgs e) {
    _timer.Enabled = false;
    try {
        EventLog.WriteEntry (Program.EventLogName, "Checking emails " + _count ++);
    }
    catch (Exception ex) {
        EventLog.WriteEntry (Program.EventLogName, "This is my error " + ex.Message);
    }
    _timer.Enabled = true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
107
0
Gpt3D_Clone107_0.cs 1 10
Gpt3D_Clone107_0.cs 11 26
----------------------------------------

private void dataGridView1_CellContentClick (object sender, DataGridViewCellEventArgs e) {
    if (e.ColumnIndex == dataGridView1.Columns ["Your Column Name"].Index) {
        dataGridView1.EndEdit ();
        if ((bool) dataGridView1.Rows [e.RowIndex].Cells ["Your Column Name"].Value) {
            int colIndex = e.ColumnIndex;
            int rowIndex = e.RowIndex;
            dataGridView1.Rows [colIndex].Cells [rowIndex].ReadOnly = true;
        }
    }
}
----------------------------------------

  private void dataGridView1_CellContentClick (object sender, DataGridViewCellEventArgs e)
    {
        if (e.ColumnIndex == dataGridView1.Columns ["Your Column Name"].Index)
        {
            dataGridView1.EndEdit ();
            bool isColumnSelected = (bool) dataGridView1.Rows [e.RowIndex].Cells ["Your Column Name"].Value;
            if (isColumnSelected)
            {
                int columnIndex = e.ColumnIndex;
                int rowIndex = e.RowIndex;
                dataGridView1.Rows [columnIndex].Cells [rowIndex].ReadOnly = true; 
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
107
1
Gpt3D_Clone107_1.cs 1 10
Gpt3D_Clone107_1.cs 11 26
----------------------------------------

private void dataGridView1_CellContentClick (object sender, DataGridViewCellEventArgs e) {
    if (e.ColumnIndex == dataGridView1.Columns ["Your Column Name"].Index) {
        dataGridView1.EndEdit ();
        if ((bool) dataGridView1.Rows [e.RowIndex].Cells ["Your Column Name"].Value) {
            int colIndex = e.ColumnIndex;
            int rowIndex = e.RowIndex;
            dataGridView1.Rows [colIndex].Cells [rowIndex].ReadOnly = true;
        }
    }
}
----------------------------------------

 private void dataGridView1_CellContentClick (object sender, DataGridViewCellEventArgs e)
    {
        if (dataGridView1.Columns ["Your Column Name"].Index == e.ColumnIndex)
        {
            dataGridView1.EndEdit ();
            bool isCellValueTrue = (bool) dataGridView1.Rows [e.RowIndex].Cells ["Your Column Name"].Value;
            if (isCellValueTrue)
            {
                int columnIndex = e.ColumnIndex;
                int rowIndex = e.RowIndex;
                dataGridView1.Rows [columnIndex].Cells [rowIndex].ReadOnly = true;
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
107
2
Gpt3D_Clone107_2.cs 1 10
Gpt3D_Clone107_2.cs 11 26
----------------------------------------

private void dataGridView1_CellContentClick (object sender, DataGridViewCellEventArgs e) {
    if (e.ColumnIndex == dataGridView1.Columns ["Your Column Name"].Index) {
        dataGridView1.EndEdit ();
        if ((bool) dataGridView1.Rows [e.RowIndex].Cells ["Your Column Name"].Value) {
            int colIndex = e.ColumnIndex;
            int rowIndex = e.RowIndex;
            dataGridView1.Rows [colIndex].Cells [rowIndex].ReadOnly = true;
        }
    }
}
----------------------------------------

  private void dataGridView1_CellContentClick (object sender, DataGridViewCellEventArgs e)
    {
        if (e.ColumnIndex == dataGridView1.Columns ["Your Column Name"].Index)
        {
            dataGridView1.EndEdit ();
            bool isColumnSelected = (bool) dataGridView1.Rows [e.RowIndex].Cells ["Your Column Name"].Value;
            if (isColumnSelected == true)
            {
                int colIndex = e.ColumnIndex;
                int rowIndex = e.RowIndex;
                dataGridView1.Rows [colIndex].Cells [rowIndex].ReadOnly = true;
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
107
3
Gpt3D_Clone107_3.cs 1 10
Gpt3D_Clone107_3.cs 11 26
----------------------------------------

private void dataGridView1_CellContentClick (object sender, DataGridViewCellEventArgs e) {
    if (e.ColumnIndex == dataGridView1.Columns ["Your Column Name"].Index) {
        dataGridView1.EndEdit ();
        if ((bool) dataGridView1.Rows [e.RowIndex].Cells ["Your Column Name"].Value) {
            int colIndex = e.ColumnIndex;
            int rowIndex = e.RowIndex;
            dataGridView1.Rows [colIndex].Cells [rowIndex].ReadOnly = true;
        }
    }
}
----------------------------------------

  private void dataGridView1_CellContentClick (object sender, DataGridViewCellEventArgs e)
    {
        if (e.ColumnIndex == dataGridView1.Columns ["Your Column Name"].Index)
        {
            dataGridView1.EndEdit ();
            bool isColumnSelected = (bool)dataGridView1.Rows [e.RowIndex].Cells ["Your Column Name"].Value;
            if (isColumnSelected == true)
            {
                int colIndex = e.ColumnIndex;
                int rowIndex = e.RowIndex;
                dataGridView1.Rows [colIndex].Cells [rowIndex].ReadOnly = true;
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
10
0
Gpt3D_Clone10_0.cs 1 9
Gpt3D_Clone10_0.cs 10 25
----------------------------------------

public Image RotateImage (Image img) {
    var bmp = new Bitmap (img);
    using (Graphics gfx = Graphics.FromImage (bmp))
    {
        gfx.Clear (Color.White);
        gfx.DrawImage (img, 0, 0, img.Width, img.Height);
    } bmp.RotateFlip (RotateFlipType.Rotate270FlipNone);
    return bmp;
}
----------------------------------------

 public Image RotateImage (Image img) {
    var bmp = new Bitmap (img);
    using (Graphics gfx = Graphics.FromImage (bmp))
    {
        Matrix m = new Matrix();
        m.RotateAt(270,new PointF(img.Width/2,img.Height/2));
        gfx.Transform = m;
        gfx.Clear (Color.White);
        gfx.DrawImage (img, 0, 0, img.Width, img.Height);
    } 
    return bmp;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
10
1
Gpt3D_Clone10_1.cs 1 9
Gpt3D_Clone10_1.cs 10 23
----------------------------------------

public Image RotateImage (Image img) {
    var bmp = new Bitmap (img);
    using (Graphics gfx = Graphics.FromImage (bmp))
    {
        gfx.Clear (Color.White);
        gfx.DrawImage (img, 0, 0, img.Width, img.Height);
    } bmp.RotateFlip (RotateFlipType.Rotate270FlipNone);
    return bmp;
}
----------------------------------------

 public Image RotateImage (Image img) {
    var bmp = new Bitmap (img);
    using (Graphics gfx = Graphics.FromImage (bmp))
    {
        Matrix m = new Matrix();
        m.RotateAt(270,new PointF(img.Width/2,img.Height/2));
        gfx.Transform = m;
        gfx.Clear (Color.White);
        gfx.DrawImage (img, 0, 0, img.Width, img.Height);
    } 
    return bmp;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
10
2
Gpt3D_Clone10_2.cs 1 9
Gpt3D_Clone10_2.cs 10 23
----------------------------------------

public Image RotateImage (Image img) {
    var bmp = new Bitmap (img);
    using (Graphics gfx = Graphics.FromImage (bmp))
    {
        gfx.Clear (Color.White);
        gfx.DrawImage (img, 0, 0, img.Width, img.Height);
    } bmp.RotateFlip (RotateFlipType.Rotate270FlipNone);
    return bmp;
}
----------------------------------------

 public Image RotateImage (Image img) {
    var bmp = new Bitmap (img);
    using (Graphics gfx = Graphics.FromImage (bmp))
    {
        gfx.Clear (Color.White);
        gfx.TranslateTransform(img.Width / 2, img.Height / 2);
        gfx.RotateTransform(270f);
        gfx.TranslateTransform(-img.Width / 2, -img.Height / 2);
        gfx.DrawImage (img, 0, 0);
    } 
    return bmp;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
10
3
Gpt3D_Clone10_3.cs 1 9
Gpt3D_Clone10_3.cs 10 22
----------------------------------------

public Image RotateImage (Image img) {
    var bmp = new Bitmap (img);
    using (Graphics gfx = Graphics.FromImage (bmp))
    {
        gfx.Clear (Color.White);
        gfx.DrawImage (img, 0, 0, img.Width, img.Height);
    } bmp.RotateFlip (RotateFlipType.Rotate270FlipNone);
    return bmp;
}
----------------------------------------

 public Image RotateImage (Image img) {
    var bmp = new Bitmap (img);
    using (Graphics gfx = Graphics.FromImage (bmp))
    {
        gfx.TranslateTransform(img.Width/2, img.Height/2);
        gfx.RotateTransform(270f);
        gfx.TranslateTransform(-(img.Width/2), -(img.Height/2));
        gfx.DrawImage (img, new PointF(0f,0f));
    } 
    return bmp;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
10
4
Gpt3D_Clone10_4.cs 1 9
Gpt3D_Clone10_4.cs 10 22
----------------------------------------

public Image RotateImage (Image img) {
    var bmp = new Bitmap (img);
    using (Graphics gfx = Graphics.FromImage (bmp))
    {
        gfx.Clear (Color.White);
        gfx.DrawImage (img, 0, 0, img.Width, img.Height);
    } bmp.RotateFlip (RotateFlipType.Rotate270FlipNone);
    return bmp;
}
----------------------------------------

 public Image RotateImage (Image img) {
    var bmp = new Bitmap(img);
    using (Graphics gfx = Graphics.FromImage (bmp))
    {
        gfx.TranslateTransform((float)bmp.Width / 2, (float)bmp.Height / 2);
        gfx.RotateTransform(270f);
        gfx.TranslateTransform(-(float)bmp.Width / 2, -(float)bmp.Height / 2);
        gfx.DrawImage (img, new PointF(0, 0));
    } 
    return bmp;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
10
5
Gpt3D_Clone10_5.cs 1 9
Gpt3D_Clone10_5.cs 10 22
----------------------------------------

public Image RotateImage (Image img) {
    var bmp = new Bitmap (img);
    using (Graphics gfx = Graphics.FromImage (bmp))
    {
        gfx.Clear (Color.White);
        gfx.DrawImage (img, 0, 0, img.Width, img.Height);
    } bmp.RotateFlip (RotateFlipType.Rotate270FlipNone);
    return bmp;
}
----------------------------------------

  public Image RotateImage (Image img) {
    var bmp = new Bitmap (img);
    using (Graphics gfx = Graphics.FromImage (bmp))
    {
        gfx.TranslateTransform(img.Width / 2, img.Height / 2);
        gfx.RotateTransform(270f);
        gfx.TranslateTransform(-img.Width / 2, -img.Height / 2);
        gfx.DrawImage (img, 0, 0, img.Width, img.Height);
    } 
    return bmp;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
10
6
Gpt3D_Clone10_6.cs 1 9
Gpt3D_Clone10_6.cs 10 21
----------------------------------------

public Image RotateImage (Image img) {
    var bmp = new Bitmap (img);
    using (Graphics gfx = Graphics.FromImage (bmp))
    {
        gfx.Clear (Color.White);
        gfx.DrawImage (img, 0, 0, img.Width, img.Height);
    } bmp.RotateFlip (RotateFlipType.Rotate270FlipNone);
    return bmp;
}
----------------------------------------

 public Image RotateImage (Image img) {
    var bmp = new Bitmap (img);
    using (Graphics gfx = Graphics.FromImage (bmp))
    {
        gfx.Clear(Color.White);
        gfx.RotateTransform(270f);
        gfx.DrawImage(img, 0f, 0f);
    }
    return bmp;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
10
7
Gpt3D_Clone10_7.cs 1 9
Gpt3D_Clone10_7.cs 10 21
----------------------------------------

public Image RotateImage (Image img) {
    var bmp = new Bitmap (img);
    using (Graphics gfx = Graphics.FromImage (bmp))
    {
        gfx.Clear (Color.White);
        gfx.DrawImage (img, 0, 0, img.Width, img.Height);
    } bmp.RotateFlip (RotateFlipType.Rotate270FlipNone);
    return bmp;
}
----------------------------------------

 public Image RotateImage (Image img) {
    var bmp = new Bitmap (img);
    using (Graphics gfx = Graphics.FromImage (bmp))
    {
        gfx.RotateTransform(270f);
        gfx.Clear(Color.White);
        gfx.DrawImage (img, 0, 0);
    } 
    return bmp;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
10
8
Gpt3D_Clone10_8.cs 1 9
Gpt3D_Clone10_8.cs 10 21
----------------------------------------

public Image RotateImage (Image img) {
    var bmp = new Bitmap (img);
    using (Graphics gfx = Graphics.FromImage (bmp))
    {
        gfx.Clear (Color.White);
        gfx.DrawImage (img, 0, 0, img.Width, img.Height);
    } bmp.RotateFlip (RotateFlipType.Rotate270FlipNone);
    return bmp;
}
----------------------------------------

 public Image RotateImage (Image img) {
    var bmp = new Bitmap(img);
    var temp = new Bitmap(img);
    using(Graphics gfx = Graphics.FromImage(temp))
    {
        gfx.RotateTransform(270f);
        gfx.DrawImage(img, new PointF(0f,0f));
    }
    return temp;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
10
9
Gpt3D_Clone10_9.cs 1 9
Gpt3D_Clone10_9.cs 10 20
----------------------------------------

public Image RotateImage (Image img) {
    var bmp = new Bitmap (img);
    using (Graphics gfx = Graphics.FromImage (bmp))
    {
        gfx.Clear (Color.White);
        gfx.DrawImage (img, 0, 0, img.Width, img.Height);
    } bmp.RotateFlip (RotateFlipType.Rotate270FlipNone);
    return bmp;
}
----------------------------------------

 public Image RotateImage (Image img) {
    var bmp = new Bitmap (img);
    using (Graphics gfx = Graphics.FromImage (bmp))
    {
        gfx.RotateTransform(270);
        gfx.DrawImage (img, 0, 0);
    } 
    return bmp;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
112
0
Gpt3D_Clone112_0.cs 1 18
Gpt3D_Clone112_0.cs 19 40
----------------------------------------

public static void OnWillCreateAsset (string path) {
    path = path.Replace (".meta", "");
    int index = path.LastIndexOf (".");
    if (index < 0)
        return;
    string file = path.Substring (index);
    if (file != ".cs" && file != ".js" && file != ".boo")
        return;
    index = Application.dataPath.LastIndexOf ("Assets");
    path = Application.dataPath.Substring (0, index) + path;
    file = System.IO.File.ReadAllText (path);
    string lastPart = path.Substring (path.IndexOf ("Assets"));
    string _namespace = lastPart.Substring (0, lastPart.LastIndexOf ('/'));
    _namespace = _namespace.Replace ('/', '.');
    file = file.Replace ("#NAMESPACE#", _namespace);
    System.IO.File.WriteAllText (path, file);
    AssetDatabase.Refresh ();
}
----------------------------------------

  public static void OnWillCreateAsset (string path) 
{
    path = path.Replace (".meta", "");
    int index = path.LastIndexOf (".");
    if (index < 0)
        return;
    string file = path.Substring (index);
    if (file != ".cs" && file != ".js" && file != ".boo")
        return;
    int assetIndex= Application.dataPath.LastIndexOf ("Assets");
    string destPath = Application.dataPath.Substring (0, assetIndex) + path;
    string source = System.IO.File.ReadAllText (destPath);
    int _index= path.IndexOf ("Assets");
    string filePath = path.Substring (_index);
    string namespacePath = filePath.Substring (0, filePath.LastIndexOf ('/'));
    namespacePath=namespacePath.Replace ('/', '.');
    source=source.Replace ("#NAMESPACE#", namespacePath);
    System.IO.File.WriteAllText (destPath, source);
    AssetDatabase.Refresh ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
112
1
Gpt3D_Clone112_1.cs 1 18
Gpt3D_Clone112_1.cs 19 40
----------------------------------------

public static void OnWillCreateAsset (string path) {
    path = path.Replace (".meta", "");
    int index = path.LastIndexOf (".");
    if (index < 0)
        return;
    string file = path.Substring (index);
    if (file != ".cs" && file != ".js" && file != ".boo")
        return;
    index = Application.dataPath.LastIndexOf ("Assets");
    path = Application.dataPath.Substring (0, index) + path;
    file = System.IO.File.ReadAllText (path);
    string lastPart = path.Substring (path.IndexOf ("Assets"));
    string _namespace = lastPart.Substring (0, lastPart.LastIndexOf ('/'));
    _namespace = _namespace.Replace ('/', '.');
    file = file.Replace ("#NAMESPACE#", _namespace);
    System.IO.File.WriteAllText (path, file);
    AssetDatabase.Refresh ();
}
----------------------------------------

 public static void OnWillCreateAsset (string path) 
{
    path = path.Replace (".meta", "");
    int index = path.LastIndexOf (".");
    if (index < 0)
        return;
    string file = path.Substring (index);
    if (file != ".cs" && file != ".js" && file != ".boo")
        return;
    int assetIndex= Application.dataPath.LastIndexOf ("Assets");
    string destPath = Application.dataPath.Substring (0, assetIndex) + path;
    string source = System.IO.File.ReadAllText (destPath);
    int _index= path.IndexOf ("Assets");
    string filePath = path.Substring (_index);
    string namespacePath = filePath.Substring (0, filePath.LastIndexOf ('/'));
    namespacePath=namespacePath.Replace ('/', ':');
    source=source.Replace ("#NAMESPACE#", namespacePath);
    System.IO.File.WriteAllText (destPath, source);
    AssetDatabase.Refresh ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
113
0
Gpt3D_Clone113_0.cs 1 8
Gpt3D_Clone113_0.cs 9 20
----------------------------------------

private void Dispose (bool disposing) {
    if (m_disposed)
        return;
    if (disposing) {
    }
    Close ();
    m_disposed = true;
}
----------------------------------------

 private void Dispose (bool disposing) {
    if (m_disposed)
        return;
    if (disposing) {
      CleanupManagedResources ();
    }
    Close ();
    CleanupUnmanagedResources ();
    m_disposed = true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
113
1
Gpt3D_Clone113_1.cs 1 8
Gpt3D_Clone113_1.cs 9 20
----------------------------------------

private void Dispose (bool disposing) {
    if (m_disposed)
        return;
    if (disposing) {
    }
    Close ();
    m_disposed = true;
}
----------------------------------------

 private void Dispose (bool disposing) {
    if (m_disposed)
        return;
    if (disposing) {
      ReleaseMemoryManagedResources ();
    }
    Close ();
    ReleaseMemoryUnmanagedResources ();
    m_disposed = true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
113
2
Gpt3D_Clone113_2.cs 1 8
Gpt3D_Clone113_2.cs 9 20
----------------------------------------

private void Dispose (bool disposing) {
    if (m_disposed)
        return;
    if (disposing) {
    }
    Close ();
    m_disposed = true;
}
----------------------------------------

 private void Dispose (bool disposing) {
    if (m_disposed)
        return;
    if (disposing) {
      DeleteManagedResources ();
    }
    Close ();
    DeleteUnmanagedResources ();
    m_disposed = true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
113
3
Gpt3D_Clone113_3.cs 1 8
Gpt3D_Clone113_3.cs 9 20
----------------------------------------

private void Dispose (bool disposing) {
    if (m_disposed)
        return;
    if (disposing) {
    }
    Close ();
    m_disposed = true;
}
----------------------------------------

 private void Dispose (bool disposing) {
    if (m_disposed)
        return;
    if (disposing) {
      UnloadManagedResources ();
    }
    Close ();
    UnloadUnmanagedResources ();
    m_disposed = true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
113
4
Gpt3D_Clone113_4.cs 1 8
Gpt3D_Clone113_4.cs 9 20
----------------------------------------

private void Dispose (bool disposing) {
    if (m_disposed)
        return;
    if (disposing) {
    }
    Close ();
    m_disposed = true;
}
----------------------------------------

 private void Dispose (bool disposing) {
    if (m_disposed)
        return;
    if (disposing) {
      FreeUpManagedResources ();
    }
    Close ();
    FreeUpUnmanagedResources ();
    m_disposed = true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
113
5
Gpt3D_Clone113_5.cs 1 8
Gpt3D_Clone113_5.cs 9 20
----------------------------------------

private void Dispose (bool disposing) {
    if (m_disposed)
        return;
    if (disposing) {
    }
    Close ();
    m_disposed = true;
}
----------------------------------------

 private void Dispose (bool disposing) {
    if (m_disposed)
        return;
    if (disposing) {
      ReleaseManagedResources ();
    }
    Close ();
    ReleaseUnmanagedResources ();
    m_disposed = true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
113
6
Gpt3D_Clone113_6.cs 1 8
Gpt3D_Clone113_6.cs 9 20
----------------------------------------

private void Dispose (bool disposing) {
    if (m_disposed)
        return;
    if (disposing) {
    }
    Close ();
    m_disposed = true;
}
----------------------------------------

 private void Dispose (bool disposing) {
    if (m_disposed)
        return;
    if (disposing) {
      DisposeManagedResources ();
    }
    Close ();
    DisposeUnmanagedResources ();
    m_disposed = true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
113
7
Gpt3D_Clone113_7.cs 1 8
Gpt3D_Clone113_7.cs 9 20
----------------------------------------

private void Dispose (bool disposing) {
    if (m_disposed)
        return;
    if (disposing) {
    }
    Close ();
    m_disposed = true;
}
----------------------------------------

 private void Dispose (bool disposing) {
    if (m_disposed)
        return;
    if (disposing) {
      CleanManagedResources ();
    }
    Close ();
    CleanUnmanagedResources ();
    m_disposed = true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
113
8
Gpt3D_Clone113_8.cs 1 8
Gpt3D_Clone113_8.cs 9 20
----------------------------------------

private void Dispose (bool disposing) {
    if (m_disposed)
        return;
    if (disposing) {
    }
    Close ();
    m_disposed = true;
}
----------------------------------------

 private void Dispose (bool disposing) {
    if (m_disposed)
        return;
    if (disposing) {
      DestroyManagedResources ();
    }
    Close ();
    DestroyUnmanagedResources ();
    m_disposed = true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
113
9
Gpt3D_Clone113_9.cs 1 8
Gpt3D_Clone113_9.cs 9 20
----------------------------------------

private void Dispose (bool disposing) {
    if (m_disposed)
        return;
    if (disposing) {
    }
    Close ();
    m_disposed = true;
}
----------------------------------------

 private void Dispose (bool disposing) {
    if (m_disposed)
        return;
    if (disposing) {
      FreeManagedResources ();
    }
    Close ();
    FreeUnmanagedResources ();
    m_disposed = true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
116
0
Gpt3D_Clone116_0.cs 1 21
Gpt3D_Clone116_0.cs 22 45
----------------------------------------

static void Main (string [] args) {
    List < Discount > list = new List < Discount > ();
    list.Add (new Discount {Id = 1, Title = "Adam"});
    list.Add (new Discount {Id = 2, Title = "Ben"});
    list.Add (new Discount {Id = 3, Title = "Alex"});
    list.Add (new Discount {Id = 4, Title = "Daniel"});
    list.Add (new Discount {Id = 5, Title = "Ethan"});
    list.Add (new Discount {Id = 6, Title = "Howard"});
    list.Add (new Discount {Id = 7, Title = "Peter"});
    list.Add (new Discount {Id = 8, Title = "Tazz"});
    list.Add (new Discount {Id = 9, Title = "Steve"});
    list.Add (new Discount {Id = 10, Title = "Lyle"});
    Dictionary < string, List < Discount > > dic = new Dictionary < string, List < Discount > > ();
    foreach (Discount d in list) {
        string range = GetRange (d.Title);
        if (dic.ContainsKey (range))
            dic [range].Add (d);
        else
            dic.Add (range, new List < Discount > {d});
    }
}
----------------------------------------

 
static void Main (string [] args)
{
    List<Discount> list = new List<Discount>();
    list.Add(new Discount{Id = 1, Title = "Adam"});
    list.Add(new Discount{Id = 2, Title = "Ben"});
    list.Add(new Discount{Id = 3, Title = "Alex"});
    list.Add(new Discount{Id = 4, Title = "Daniel"});
    list.Add(new Discount{Id = 5, Title = "Ethan"});
    list.Add(new Discount{Id = 6, Title = "Howard"});
    list.Add(new Discount{Id = 7, Title = "Peter"});
    list.Add(new Discount{Id = 8, Title = "Tazz"});
    list.Add(new Discount{Id = 9, Title = "Steve"});
    list.Add(new Discount{Id = 10, Title = "Lyle"});
    Dictionary<string, List<Discount>> dic = new Dictionary<string, List<Discount>>();
    var rangeGroups = list.GroupBy(d => d.Title[0]);
    foreach (var group in rangeGroups)
    {
        string rangeKey = group.Key.ToString();
        dic.Add(rangeKey, group.ToList());
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
118
0
Gpt3D_Clone118_0.cs 1 10
Gpt3D_Clone118_0.cs 11 28
----------------------------------------

static void Main (string [] args) {
    Vector3 vector = new Vector3 ();
    vector.x = 1;
    vector.y = 2;
    vector.z = 3;
    MemoryStream memoryStream = new MemoryStream ();
    BinaryFormatter binaryFormatter = new BinaryFormatter ();
    binaryFormatter.Serialize (memoryStream, vector);
    string str = System.Convert.ToBase64String (memoryStream.ToArray ());
}
----------------------------------------

 static void Main (string [] args) {//Creating an vector3 object and setting its x, y, and z values
Vector3 vector = new Vector3();
vector.x = 1;
vector.y = 2;
vector.z = 3;
//Creating a XmlWriter object
XmlWriter xmlWriter = XmlWriter.Create(new MemoryStream());
//Using XmlWriter to serialize vector to a MemoryStream
XmlSerializer xmlSerializer = new XmlSerializer(typeof(Vector3));
xmlSerializer.Serialize(xmlWriter, vector);
//Using System.Convert toBase64String to convert memorystream to a string
string str = System.Convert.ToBase64String(((MemoryStream)xmlWriter.BaseStream).ToArray());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
118
1
Gpt3D_Clone118_1.cs 1 10
Gpt3D_Clone118_1.cs 11 24
----------------------------------------

static void Main (string [] args) {
    Vector3 vector = new Vector3 ();
    vector.x = 1;
    vector.y = 2;
    vector.z = 3;
    MemoryStream memoryStream = new MemoryStream ();
    BinaryFormatter binaryFormatter = new BinaryFormatter ();
    binaryFormatter.Serialize (memoryStream, vector);
    string str = System.Convert.ToBase64String (memoryStream.ToArray ());
}
----------------------------------------

  static void Main (string [] args) { //Instantiate Vector3 object and set its x, y and z values
Vector3 vector = new Vector3();
vector.x = 1;
vector.y = 2;
vector.z = 3;
//Convert Vector3 to a byte array
byte[] vectorBytes = SerializeVector3ToBytes(vector);
//Using Convert.ToBase64String to convert byte array to a string
string str = System.Convert.ToBase64String(vectorBytes);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
118
2
Gpt3D_Clone118_2.cs 1 10
Gpt3D_Clone118_2.cs 11 24
----------------------------------------

static void Main (string [] args) {
    Vector3 vector = new Vector3 ();
    vector.x = 1;
    vector.y = 2;
    vector.z = 3;
    MemoryStream memoryStream = new MemoryStream ();
    BinaryFormatter binaryFormatter = new BinaryFormatter ();
    binaryFormatter.Serialize (memoryStream, vector);
    string str = System.Convert.ToBase64String (memoryStream.ToArray ());
}
----------------------------------------

  static void Main (string [] args) { //Creating an vector3 object and setting its x, y, and z values
Vector3 vector = new Vector3();
vector.x = 1;
vector.y = 2;
vector.z = 3;
//Using BinaryFormatter to serialize vector3 to a byte array
byte [] vectorBytes = BinaryFormatter.SerializeVector3ToBytes(vector);
//Using System.Convert to convert byte array to a string
string str = System.Convert.ToBase64String(vectorBytes);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
119
0
Gpt3D_Clone119_0.cs 1 12
Gpt3D_Clone119_0.cs 13 29
----------------------------------------

public void ProcessRequest (HttpContext context) {
    context.Response.ContentType = "application/x-javascript";
    HttpWebRequest request = (HttpWebRequest) WebRequest.Create ("http://widgets.twimg.com/j/2/widget.js");
    request.Accept = "application/javascript";
    request.KeepAlive = false;
    request.Method = "GET";
    HttpWebResponse webresponse = (HttpWebResponse) request.GetResponse ();
    Encoding enc = System.Text.Encoding.GetEncoding (1252);
    StreamReader loResponseStream = new StreamReader (webresponse.GetResponseStream (), enc);
    string Response = loResponseStream.ReadToEnd ();
    context.Response.Write (Response);
}
----------------------------------------

 public void ProcessRequest (HttpContext context) {
    context.Response.ContentType = "application/javascript";
    Uri url = new Uri("http://widgets.twimg.com/j/2/widget.js");
    HttpWebRequest request = (HttpWebRequest) WebRequest.Create (url);
    request.KeepAlive = false;
    request.Accept = "application/javascript";
    request.Method = "GET";
    HttpWebResponse response = (HttpWebResponse)request.GetResponse();
    Encoding encoding = System.Text.Encoding.GetEncoding(1252);
    using (StreamReader sr = new StreamReader(response.GetResponseStream(), encoding))
    {
        string data = sr.ReadToEnd();
        context.Response.Write(data);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
119
1
Gpt3D_Clone119_1.cs 1 12
Gpt3D_Clone119_1.cs 13 28
----------------------------------------

public void ProcessRequest (HttpContext context) {
    context.Response.ContentType = "application/x-javascript";
    HttpWebRequest request = (HttpWebRequest) WebRequest.Create ("http://widgets.twimg.com/j/2/widget.js");
    request.Accept = "application/javascript";
    request.KeepAlive = false;
    request.Method = "GET";
    HttpWebResponse webresponse = (HttpWebResponse) request.GetResponse ();
    Encoding enc = System.Text.Encoding.GetEncoding (1252);
    StreamReader loResponseStream = new StreamReader (webresponse.GetResponseStream (), enc);
    string Response = loResponseStream.ReadToEnd ();
    context.Response.Write (Response);
}
----------------------------------------

 public void ProcessRequest (HttpContext context) {
    context.Response.ContentType = "application/javascript";
    HttpWebRequest request = (HttpWebRequest) WebRequest.Create ("http://widgets.twimg.com/j/2/widget.js");
    request.Accept = "application/javascript";
    request.Method = "GET";
    request.KeepAlive = false; 
    using (HttpWebResponse response = (HttpWebResponse) request.GetResponse())
    using (Stream stream = response.GetResponseStream())
    using (StreamReader reader = new StreamReader (stream))
    {
        string content = reader.ReadToEnd ();
        context.Response.Write(content);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
119
2
Gpt3D_Clone119_2.cs 1 12
Gpt3D_Clone119_2.cs 13 28
----------------------------------------

public void ProcessRequest (HttpContext context) {
    context.Response.ContentType = "application/x-javascript";
    HttpWebRequest request = (HttpWebRequest) WebRequest.Create ("http://widgets.twimg.com/j/2/widget.js");
    request.Accept = "application/javascript";
    request.KeepAlive = false;
    request.Method = "GET";
    HttpWebResponse webresponse = (HttpWebResponse) request.GetResponse ();
    Encoding enc = System.Text.Encoding.GetEncoding (1252);
    StreamReader loResponseStream = new StreamReader (webresponse.GetResponseStream (), enc);
    string Response = loResponseStream.ReadToEnd ();
    context.Response.Write (Response);
}
----------------------------------------

 public void ProcessRequest (HttpContext context) {
    context.Response.ContentType = "application/javascript";
    HttpWebRequest request = (HttpWebRequest) WebRequest.Create ("http://widgets.twimg.com/j/2/widget.js");
    request.Accept = "application/javascript";
    request.Method = "GET";
    request.KeepAlive = false; 
    HttpWebResponse webresponse = (HttpWebResponse) request.GetResponse();
    using (var responseStream = webresponse.GetResponseStream())
    using (var streamReader = new StreamReader(responseStream))
    {
        var responseData = streamReader.ReadToEnd();
        context.Response.Write(responseData);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
119
3
Gpt3D_Clone119_3.cs 1 12
Gpt3D_Clone119_3.cs 13 27
----------------------------------------

public void ProcessRequest (HttpContext context) {
    context.Response.ContentType = "application/x-javascript";
    HttpWebRequest request = (HttpWebRequest) WebRequest.Create ("http://widgets.twimg.com/j/2/widget.js");
    request.Accept = "application/javascript";
    request.KeepAlive = false;
    request.Method = "GET";
    HttpWebResponse webresponse = (HttpWebResponse) request.GetResponse ();
    Encoding enc = System.Text.Encoding.GetEncoding (1252);
    StreamReader loResponseStream = new StreamReader (webresponse.GetResponseStream (), enc);
    string Response = loResponseStream.ReadToEnd ();
    context.Response.Write (Response);
}
----------------------------------------

 public void ProcessRequest (HttpContext context) {
    context.Response.ContentType = "application/javascript";
    WebRequest request = (HttpWebRequest)WebRequest.Create("http://widgets.twimg.com/j/2/widget.js");
    request.Method = "GET";
    request.ContentType = "application/javascript";
    request.KeepAlive = false;
    WebResponse response = request.GetResponse();
    StreamReader reader = new StreamReader(response.GetResponseStream());
    string data = reader.ReadToEnd();
    context.Response.Write(data);
    reader.Close();
    response.Close();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
119
5
Gpt3D_Clone119_5.cs 1 12
Gpt3D_Clone119_5.cs 13 26
----------------------------------------

public void ProcessRequest (HttpContext context) {
    context.Response.ContentType = "application/x-javascript";
    HttpWebRequest request = (HttpWebRequest) WebRequest.Create ("http://widgets.twimg.com/j/2/widget.js");
    request.Accept = "application/javascript";
    request.KeepAlive = false;
    request.Method = "GET";
    HttpWebResponse webresponse = (HttpWebResponse) request.GetResponse ();
    Encoding enc = System.Text.Encoding.GetEncoding (1252);
    StreamReader loResponseStream = new StreamReader (webresponse.GetResponseStream (), enc);
    string Response = loResponseStream.ReadToEnd ();
    context.Response.Write (Response);
}
----------------------------------------

 public void ProcessRequest (HttpContext context) {
    context.Response.ContentType = "application/javascript";
    HttpWebRequest request = WebRequest.CreateHttp("http://widgets.twimg.com/j/2/widget.js"); 
    request.Accept = "application/javascript"; 
    request.Method = "GET"; 
    request.KeepAlive = false; 
    HttpWebResponse response = (HttpWebResponse)request.GetResponse();
    StreamReader stream = new StreamReader (response.GetResponseStream());
    string data = stream.ReadToEnd();
    context.Response.Write(data);
    response.Close();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
119
6
Gpt3D_Clone119_6.cs 1 12
Gpt3D_Clone119_6.cs 13 26
----------------------------------------

public void ProcessRequest (HttpContext context) {
    context.Response.ContentType = "application/x-javascript";
    HttpWebRequest request = (HttpWebRequest) WebRequest.Create ("http://widgets.twimg.com/j/2/widget.js");
    request.Accept = "application/javascript";
    request.KeepAlive = false;
    request.Method = "GET";
    HttpWebResponse webresponse = (HttpWebResponse) request.GetResponse ();
    Encoding enc = System.Text.Encoding.GetEncoding (1252);
    StreamReader loResponseStream = new StreamReader (webresponse.GetResponseStream (), enc);
    string Response = loResponseStream.ReadToEnd ();
    context.Response.Write (Response);
}
----------------------------------------

 public void ProcessRequest (HttpContext context) {
    context.Response.ContentType = "application/javascript";
    HttpWebRequest request = WebRequest.CreateHttp("http://widgets.twimg.com/j/2/widget.js");
    request.Method = "GET";
    request.Accept = "application/javascript";
    request.KeepAlive = false;
    HttpWebResponse response = (HttpWebResponse)request.GetResponse();
    StreamReader reader = new StreamReader(response.GetResponseStream());
    string data = reader.ReadToEnd();
    context.Response.Write(data);
    response.Close();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
119
7
Gpt3D_Clone119_7.cs 1 12
Gpt3D_Clone119_7.cs 13 27
----------------------------------------

public void ProcessRequest (HttpContext context) {
    context.Response.ContentType = "application/x-javascript";
    HttpWebRequest request = (HttpWebRequest) WebRequest.Create ("http://widgets.twimg.com/j/2/widget.js");
    request.Accept = "application/javascript";
    request.KeepAlive = false;
    request.Method = "GET";
    HttpWebResponse webresponse = (HttpWebResponse) request.GetResponse ();
    Encoding enc = System.Text.Encoding.GetEncoding (1252);
    StreamReader loResponseStream = new StreamReader (webresponse.GetResponseStream (), enc);
    string Response = loResponseStream.ReadToEnd ();
    context.Response.Write (Response);
}
----------------------------------------

 public void ProcessRequest (HttpContext context) {
    context.Response.ContentType = "application/javascript";
    HttpWebRequest request = (HttpWebRequest) WebRequest.Create ("http://widgets.twimg.com/j/2/widget.js");
    request.Accept = "application/javascript";
    request.KeepAlive = false;
    request.Method = "GET";
    HttpWebResponse webresponse = (HttpWebResponse)request.GetResponse ();
    using (StreamReader reader = new StreamReader(webresponse.GetResponseStream()))
    {
        String content = reader.ReadToEnd();
        context.Response.Write(content);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
11
0
Gpt3D_Clone11_0.cs 1 11
Gpt3D_Clone11_0.cs 12 28
----------------------------------------

public static Image RotateImage (Image img, float rotationAngle) {
    Bitmap bmp = new Bitmap (img.Width, img.Height);
    Graphics gfx = Graphics.FromImage (bmp);
    gfx.TranslateTransform ((float) bmp.Width / 2, (float) bmp.Height / 2);
    gfx.RotateTransform (rotationAngle);
    gfx.TranslateTransform (- (float) bmp.Width / 2, - (float) bmp.Height / 2);
    gfx.InterpolationMode = InterpolationMode.HighQualityBicubic;
    gfx.DrawImage (img, new Point (0, 0));
    gfx.Dispose ();
    return bmp;
}
----------------------------------------

   public static Image RotateImage (Image img, float rotationAngle) { if (img==null)
        throw new ArgumentNullException();
    
      Bitmap rotationBmp = new Bitmap(img.Width, img.Height);
      using (Graphics gfx = Graphics.FromImage(rotationBmp))
      {
        gfx.TranslateTransform((float)bmp.Width/2, (float)bmp.Height/2);
        gfx.RotateTransform(rotationAngle);
        gfx.TranslateTransform(-(float)bmp.Width/2, -(float)bmp.Height/2);
        gfx.InterpolationMode = InterpolationMode.HighQualityBicubic;
        gfx.DrawImage(img, 0, 0);
        gfx.Dispose();
      }
      return rotationBmp;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
11
1
Gpt3D_Clone11_1.cs 1 11
Gpt3D_Clone11_1.cs 12 32
----------------------------------------

public static Image RotateImage (Image img, float rotationAngle) {
    Bitmap bmp = new Bitmap (img.Width, img.Height);
    Graphics gfx = Graphics.FromImage (bmp);
    gfx.TranslateTransform ((float) bmp.Width / 2, (float) bmp.Height / 2);
    gfx.RotateTransform (rotationAngle);
    gfx.TranslateTransform (- (float) bmp.Width / 2, - (float) bmp.Height / 2);
    gfx.InterpolationMode = InterpolationMode.HighQualityBicubic;
    gfx.DrawImage (img, new Point (0, 0));
    gfx.Dispose ();
    return bmp;
}
----------------------------------------

    public static Image RotateImage (Image img, float rotationAngle) {if (img == null)
        throw new ArgumentNullException();
        Bitmap rotatedBmp = new Bitmap(img.Width, img.Height);
        using (Graphics gr = Graphics.FromImage(rotatedBmp))
        {
        //Set the rotation point in the matrix
        gr.TranslateTransform((float)bmp.Width/2, (float)bmp.Height/2);
        //Rotate
        gr.RotateTransform(rotationAngle); 
        //Reset the rotation point in the matrix
        gr.TranslateTransform(-(float)bmp.Width/2, -(float)bmp.Height/2); 
        //Set the quality to high
        gr.InterpolationMode = InterpolationMode.HighQualityBicubic;
        //Draw the image
        gr.DrawImage(img, new PointF(0, 0)); 
        return rotatedBmp;
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
11
2
Gpt3D_Clone11_2.cs 1 11
Gpt3D_Clone11_2.cs 12 27
----------------------------------------

public static Image RotateImage (Image img, float rotationAngle) {
    Bitmap bmp = new Bitmap (img.Width, img.Height);
    Graphics gfx = Graphics.FromImage (bmp);
    gfx.TranslateTransform ((float) bmp.Width / 2, (float) bmp.Height / 2);
    gfx.RotateTransform (rotationAngle);
    gfx.TranslateTransform (- (float) bmp.Width / 2, - (float) bmp.Height / 2);
    gfx.InterpolationMode = InterpolationMode.HighQualityBicubic;
    gfx.DrawImage (img, new Point (0, 0));
    gfx.Dispose ();
    return bmp;
}
----------------------------------------

   public static Image RotateImage (Image img, float rotationAngle) {  Bitmap rotatedImg = new Bitmap (img.Width, img.Height);
        using (Graphics gr = Graphics.FromImage (rotatedImg))
        {
        // Set the rotation point to the center in the matrix
        gr.TranslateTransform ((float)bmp.Width / 2, (float)bmp.Height / 2);
        // Rotate
        gr.RotateTransform (rotationAngle);
        // Reset the rotation point in the matrix
        gr.TranslateTransform (-(float)bmp.Width / 2, -(float)bmp.Height / 2);
        // Draw the image on the bitmap
        gr.DrawImage (img, new PointF (0, 0));
        return rotatedImg;
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
11
3
Gpt3D_Clone11_3.cs 1 11
Gpt3D_Clone11_3.cs 12 27
----------------------------------------

public static Image RotateImage (Image img, float rotationAngle) {
    Bitmap bmp = new Bitmap (img.Width, img.Height);
    Graphics gfx = Graphics.FromImage (bmp);
    gfx.TranslateTransform ((float) bmp.Width / 2, (float) bmp.Height / 2);
    gfx.RotateTransform (rotationAngle);
    gfx.TranslateTransform (- (float) bmp.Width / 2, - (float) bmp.Height / 2);
    gfx.InterpolationMode = InterpolationMode.HighQualityBicubic;
    gfx.DrawImage (img, new Point (0, 0));
    gfx.Dispose ();
    return bmp;
}
----------------------------------------

    public static Image RotateImage (Image img, float rotationAngle) { Bitmap rotatedBmp = new Bitmap(img.Width, img.Height);
        using (Graphics gr = Graphics.FromImage(rotatedBmp))
        {
        // Set rotation point
        gr.TranslateTransform((float)bmp.Width/2, (float)bmp.Height/2);
        //Rotate
        gr.RotateTransform(rotationAngle);
        // Reset rotation point
        gr.TranslateTransform(-(float)bmp.Width/2, -(float)bmp.Height/2);
        // Draw the image
        gr.DrawImage(img, new PointF(0, 0)); 
        return rotatedBmp;
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
120
0
Gpt3D_Clone120_0.cs 1 11
Gpt3D_Clone120_0.cs 12 23
----------------------------------------

public static string GetFullPath (string fileName) {
    if (File.Exists (fileName))
        return Path.GetFullPath (fileName);
    var values = Environment.GetEnvironmentVariable ("PATH");
    foreach (var path in values.Split (';')) {
        var fullPath = Path.Combine (path, fileName);
        if (File.Exists (fullPath))
            return fullPath;
    }
    return null;
}
----------------------------------------

  public static string GetFullPath (string fileName) {
    if (File.Exists (fileName))
        return Path.GetFullPath (fileName);
    foreach (string drive in Directory.GetLogicalDrives()) {
        string path = Path.Combine(drive, "Users", Environment.UserName, fileName);
        if (File.Exists (path))
            return path;
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
120
1
Gpt3D_Clone120_1.cs 1 11
Gpt3D_Clone120_1.cs 12 23
----------------------------------------

public static string GetFullPath (string fileName) {
    if (File.Exists (fileName))
        return Path.GetFullPath (fileName);
    var values = Environment.GetEnvironmentVariable ("PATH");
    foreach (var path in values.Split (';')) {
        var fullPath = Path.Combine (path, fileName);
        if (File.Exists (fullPath))
            return fullPath;
    }
    return null;
}
----------------------------------------

  public static string GetFullPath (string fileName) {
    if (File.Exists (fileName))
        return Path.GetFullPath (fileName);
    foreach (string drive in Directory.GetLogicalDrives()) {
        string path = Path.Combine(drive, "Program Files", fileName);
        if (File.Exists (path))
            return path;
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
120
2
Gpt3D_Clone120_2.cs 1 11
Gpt3D_Clone120_2.cs 12 23
----------------------------------------

public static string GetFullPath (string fileName) {
    if (File.Exists (fileName))
        return Path.GetFullPath (fileName);
    var values = Environment.GetEnvironmentVariable ("PATH");
    foreach (var path in values.Split (';')) {
        var fullPath = Path.Combine (path, fileName);
        if (File.Exists (fullPath))
            return fullPath;
    }
    return null;
}
----------------------------------------

  public static string GetFullPath (string fileName) {
    if (File.Exists (fileName))
        return Path.GetFullPath (fileName);
    foreach (string drive in Directory.GetLogicalDrives()) {
        string path = Path.Combine(drive, fileName);
        if (File.Exists (path))
            return path;
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
120
3
Gpt3D_Clone120_3.cs 1 11
Gpt3D_Clone120_3.cs 12 23
----------------------------------------

public static string GetFullPath (string fileName) {
    if (File.Exists (fileName))
        return Path.GetFullPath (fileName);
    var values = Environment.GetEnvironmentVariable ("PATH");
    foreach (var path in values.Split (';')) {
        var fullPath = Path.Combine (path, fileName);
        if (File.Exists (fullPath))
            return fullPath;
    }
    return null;
}
----------------------------------------

  public static string GetFullPath (string fileName) {
    if (File.Exists (fileName))
        return Path.GetFullPath (fileName);
    foreach (string drive in Directory.GetLogicalDrives()) {
        string path = Path.Combine(drive, "Program Files (x86)", fileName);
        if (File.Exists (path))
            return path;
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
120
4
Gpt3D_Clone120_4.cs 1 11
Gpt3D_Clone120_4.cs 12 23
----------------------------------------

public static string GetFullPath (string fileName) {
    if (File.Exists (fileName))
        return Path.GetFullPath (fileName);
    var values = Environment.GetEnvironmentVariable ("PATH");
    foreach (var path in values.Split (';')) {
        var fullPath = Path.Combine (path, fileName);
        if (File.Exists (fullPath))
            return fullPath;
    }
    return null;
}
----------------------------------------

  public static string GetFullPath (string fileName) {
    if (File.Exists (fileName))
        return Path.GetFullPath (fileName);
    foreach (string drive in Directory.GetLogicalDrives()) {
        string path = Path.Combine(drive, "Windows", fileName);
        if (File.Exists (path))
            return path;
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
121
0
Gpt3D_Clone121_0.cs 1 25
Gpt3D_Clone121_0.cs 26 62
----------------------------------------

private static bool GetFileNameFromHandle (IntPtr handle, int processId, out string fileName) {
    IntPtr currentProcess = NativeMethods.GetCurrentProcess ();
    bool remote = (processId != NativeMethods.GetProcessId (currentProcess));
    SafeProcessHandle processHandle = null;
    SafeObjectHandle objectHandle = null;
    try {
        if (remote) {
            processHandle = NativeMethods.OpenProcess (ProcessAccessRights.PROCESS_DUP_HANDLE, true, processId);
            if (NativeMethods.DuplicateHandle (processHandle.DangerousGetHandle (), handle, currentProcess, out objectHandle, 0, false, DuplicateHandleOptions.DUPLICATE_SAME_ACCESS)) {
                handle = objectHandle.DangerousGetHandle ();
            }
        }
        return GetFileNameFromHandle (handle, out fileName, 200);
    }
    finally {
        if (remote) {
            if (processHandle != null) {
                processHandle.Close ();
            }
            if (objectHandle != null) {
                objectHandle.Close ();
            }
        }
    }
}
----------------------------------------

 private static bool GetFileNameFromHandle(IntPtr handle, int processId, out string fileName)
{
    IntPtr currentProcess = NativeMethods.GetCurrentProcess();
    bool remote = (processId != NativeMethods.GetProcessId(currentProcess));
    SafeProcessHandle processHandle = null;
    SafeObjectHandle objectHandle = null;
    try
    {
        if (remote)
        {
            processHandle = NativeMethods.OpenProcess(ProcessAccessRights.PROCESS_DUP_HANDLE, true, processId);
            if (NativeMethods.DuplicateHandle(processHandle.DangerousGetHandle(), handle, currentProcess, out objectHandle, 0, false, DuplicateHandleOptions.DUPLICATE_SAME_ACCESS))
            {
                handle = objectHandle.DangerousGetHandle();
            }
        }
        fileName = GetFileNameFromHandle(handle, 200);
        if (fileName == "")
        {
            return false;
        }
        else
        {
            return true;
        }
    }
    finally
    {
        if (remote)
        {
            processHandle?.Dispose();
            objectHandle?.Dispose();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
121
1
Gpt3D_Clone121_1.cs 1 25
Gpt3D_Clone121_1.cs 26 62
----------------------------------------

private static bool GetFileNameFromHandle (IntPtr handle, int processId, out string fileName) {
    IntPtr currentProcess = NativeMethods.GetCurrentProcess ();
    bool remote = (processId != NativeMethods.GetProcessId (currentProcess));
    SafeProcessHandle processHandle = null;
    SafeObjectHandle objectHandle = null;
    try {
        if (remote) {
            processHandle = NativeMethods.OpenProcess (ProcessAccessRights.PROCESS_DUP_HANDLE, true, processId);
            if (NativeMethods.DuplicateHandle (processHandle.DangerousGetHandle (), handle, currentProcess, out objectHandle, 0, false, DuplicateHandleOptions.DUPLICATE_SAME_ACCESS)) {
                handle = objectHandle.DangerousGetHandle ();
            }
        }
        return GetFileNameFromHandle (handle, out fileName, 200);
    }
    finally {
        if (remote) {
            if (processHandle != null) {
                processHandle.Close ();
            }
            if (objectHandle != null) {
                objectHandle.Close ();
            }
        }
    }
}
----------------------------------------

 private static bool GetFileNameFromHandle(IntPtr handle, int processId, out string fileName)
{
    IntPtr currentProcess = NativeMethods.GetCurrentProcess();
    bool remote = (processId != NativeMethods.GetProcessId(currentProcess));
    SafeProcessHandle processHandle = null;
    SafeObjectHandle objectHandle = null;
    try
    {
        if (remote)
        {
            processHandle = NativeMethods.OpenProcess(ProcessAccessRights.PROCESS_DUP_HANDLE, true, processId);
            if (NativeMethods.DuplicateHandle(processHandle.DangerousGetHandle(), handle, currentProcess, out objectHandle, 0, false, DuplicateHandleOptions.DUPLICATE_SAME_ACCESS))
            {
                handle = objectHandle.DangerousGetHandle();
            }
        }
        if (GetFileNameFromHandle(handle, out fileName, 200))
        {
            return true;
        }
        else
        {
            fileName = null;
            return false;
        }
    }
    finally
    {
        if (remote)
        { 
             processHandle?.Dispose();
             objectHandle?.Dispose();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
121
3
Gpt3D_Clone121_3.cs 1 25
Gpt3D_Clone121_3.cs 26 61
----------------------------------------

private static bool GetFileNameFromHandle (IntPtr handle, int processId, out string fileName) {
    IntPtr currentProcess = NativeMethods.GetCurrentProcess ();
    bool remote = (processId != NativeMethods.GetProcessId (currentProcess));
    SafeProcessHandle processHandle = null;
    SafeObjectHandle objectHandle = null;
    try {
        if (remote) {
            processHandle = NativeMethods.OpenProcess (ProcessAccessRights.PROCESS_DUP_HANDLE, true, processId);
            if (NativeMethods.DuplicateHandle (processHandle.DangerousGetHandle (), handle, currentProcess, out objectHandle, 0, false, DuplicateHandleOptions.DUPLICATE_SAME_ACCESS)) {
                handle = objectHandle.DangerousGetHandle ();
            }
        }
        return GetFileNameFromHandle (handle, out fileName, 200);
    }
    finally {
        if (remote) {
            if (processHandle != null) {
                processHandle.Close ();
            }
            if (objectHandle != null) {
                objectHandle.Close ();
            }
        }
    }
}
----------------------------------------

 private static bool GetFileNameFromHandle(IntPtr handle, int processId, out string fileName)
{
    IntPtr currentProcess = NativeMethods.GetCurrentProcess();
    bool remote = (processId != NativeMethods.GetProcessId(currentProcess));
    SafeProcessHandle processHandle = null;
    SafeObjectHandle objectHandle = null;
    try
    {
        if (remote)
        {
            processHandle = NativeMethods.OpenProcess(ProcessAccessRights.PROCESS_DUP_HANDLE, true, processId);
            if (NativeMethods.DuplicateHandle(processHandle.DangerousGetHandle(), handle, currentProcess, out objectHandle, 0, false, DuplicateHandleOptions.DUPLICATE_SAME_ACCESS))
            {
                handle = objectHandle.DangerousGetHandle();
            }
        }
        if (GetFileNameFromHandle(handle, out fileName, 200))
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    finally
    {
        if (remote)
        {
            processHandle?.ReleaseHandle();
            objectHandle?.ReleaseHandle();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
121
4
Gpt3D_Clone121_4.cs 1 25
Gpt3D_Clone121_4.cs 26 54
----------------------------------------

private static bool GetFileNameFromHandle (IntPtr handle, int processId, out string fileName) {
    IntPtr currentProcess = NativeMethods.GetCurrentProcess ();
    bool remote = (processId != NativeMethods.GetProcessId (currentProcess));
    SafeProcessHandle processHandle = null;
    SafeObjectHandle objectHandle = null;
    try {
        if (remote) {
            processHandle = NativeMethods.OpenProcess (ProcessAccessRights.PROCESS_DUP_HANDLE, true, processId);
            if (NativeMethods.DuplicateHandle (processHandle.DangerousGetHandle (), handle, currentProcess, out objectHandle, 0, false, DuplicateHandleOptions.DUPLICATE_SAME_ACCESS)) {
                handle = objectHandle.DangerousGetHandle ();
            }
        }
        return GetFileNameFromHandle (handle, out fileName, 200);
    }
    finally {
        if (remote) {
            if (processHandle != null) {
                processHandle.Close ();
            }
            if (objectHandle != null) {
                objectHandle.Close ();
            }
        }
    }
}
----------------------------------------

 private static bool GetFileNameFromHandle (IntPtr handle, int processId, out string fileName)
{
    IntPtr currentProcess = NativeMethods.GetCurrentProcess();
    bool remote = processId != NativeMethods.GetProcessId(currentProcess);
    SafeProcessHandle processHandle = null;
    SafeObjectHandle objectHandle = null;
    try
    {
        if (remote) {
            processHandle = NativeMethods.OpenProcess(ProcessAccessRights.PROCESS_DUP_HANDLE, true, processId);
            if (NativeMethods.DuplicateHandle(processHandle.DangerousGetHandle(), handle, currentProcess, out objectHandle, 0, false, DuplicateHandleOptions.DUPLICATE_SAME_ACCESS))
            {
                handle = objectHandle.DangerousGetHandle();
            }
        }
        bool result = GetFileNameFromHandle(handle, out fileName, 200);
        return result;
    }
    finally
    {
        if (remote)
        {
            processHandle?.Dispose();
            objectHandle?.Dispose();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
121
5
Gpt3D_Clone121_5.cs 1 25
Gpt3D_Clone121_5.cs 26 52
----------------------------------------

private static bool GetFileNameFromHandle (IntPtr handle, int processId, out string fileName) {
    IntPtr currentProcess = NativeMethods.GetCurrentProcess ();
    bool remote = (processId != NativeMethods.GetProcessId (currentProcess));
    SafeProcessHandle processHandle = null;
    SafeObjectHandle objectHandle = null;
    try {
        if (remote) {
            processHandle = NativeMethods.OpenProcess (ProcessAccessRights.PROCESS_DUP_HANDLE, true, processId);
            if (NativeMethods.DuplicateHandle (processHandle.DangerousGetHandle (), handle, currentProcess, out objectHandle, 0, false, DuplicateHandleOptions.DUPLICATE_SAME_ACCESS)) {
                handle = objectHandle.DangerousGetHandle ();
            }
        }
        return GetFileNameFromHandle (handle, out fileName, 200);
    }
    finally {
        if (remote) {
            if (processHandle != null) {
                processHandle.Close ();
            }
            if (objectHandle != null) {
                objectHandle.Close ();
            }
        }
    }
}
----------------------------------------

 private static bool GetFileNameFromHandle (IntPtr handle, int processId, out string fileName) 
{
    bool remote = (processId != NativeMethods.GetProcessId (NativeMethods.GetCurrentProcess())); 
    SafeProcessHandle processHandle = null; 
    SafeObjectHandle objectHandle = null; 
    
    try 
    { 
        if (remote) 
        { 
            processHandle = NativeMethods.OpenProcess(ProcessAccessRights.PROCESS_DUP_HANDLE, true, processId); 
            NativeMethods.DuplicateHandle (processHandle.DangerousGetHandle(), handle, NativeMethods.GetCurrentProcess(), out objectHandle, 0, false, DuplicateHandleOptions.DUPLICATE_SAME_ACCESS); 
            handle = objectHandle.DangerousGetHandle(); 
        } 
        return GetFileNameFromHandle(handle, out fileName, 200); 
    } 
    finally 
    { 
        if (remote) 
        {
            processHandle?.Dispose(); 
            objectHandle?.Dispose();  
        } 
    } 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
121
6
Gpt3D_Clone121_6.cs 1 25
Gpt3D_Clone121_6.cs 26 52
----------------------------------------

private static bool GetFileNameFromHandle (IntPtr handle, int processId, out string fileName) {
    IntPtr currentProcess = NativeMethods.GetCurrentProcess ();
    bool remote = (processId != NativeMethods.GetProcessId (currentProcess));
    SafeProcessHandle processHandle = null;
    SafeObjectHandle objectHandle = null;
    try {
        if (remote) {
            processHandle = NativeMethods.OpenProcess (ProcessAccessRights.PROCESS_DUP_HANDLE, true, processId);
            if (NativeMethods.DuplicateHandle (processHandle.DangerousGetHandle (), handle, currentProcess, out objectHandle, 0, false, DuplicateHandleOptions.DUPLICATE_SAME_ACCESS)) {
                handle = objectHandle.DangerousGetHandle ();
            }
        }
        return GetFileNameFromHandle (handle, out fileName, 200);
    }
    finally {
        if (remote) {
            if (processHandle != null) {
                processHandle.Close ();
            }
            if (objectHandle != null) {
                objectHandle.Close ();
            }
        }
    }
}
----------------------------------------

  private static bool GetFileNameFromHandle(IntPtr handle, int processId, out string fileName)
{
    bool remote = (processId != NativeMethods.GetProcessId(NativeMethods.GetCurrentProcess()));
    SafeProcessHandle processHandle = null;
    SafeObjectHandle objectHandle = null;
    try
    {
        if (remote)
        {
            processHandle = NativeMethods.OpenProcess(ProcessAccessRights.PROCESS_DUP_HANDLE, true, processId);
            NativeMethods.DuplicateHandle(processHandle.DangerousGetHandle(), handle, NativeMethods.GetCurrentProcess(), out objectHandle, 0, false, DuplicateHandleOptions.DUPLICATE_SAME_ACCESS);
            handle = objectHandle.DangerousGetHandle();
        }
        return GetFileNameFromHandle(handle, out fileName, 200);
    }
    finally
    {
        if (remote)
        { 
             processHandle?.Close();
             objectHandle?.Close();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
122
0
Gpt3D_Clone122_0.cs 1 25
Gpt3D_Clone122_0.cs 26 69
----------------------------------------

private static bool GetFileNameFromHandle (IntPtr handle, int processId, out string fileName) {
    IntPtr currentProcess = NativeMethods.GetCurrentProcess ();
    bool remote = (processId != NativeMethods.GetProcessId (currentProcess));
    SafeProcessHandle processHandle = null;
    SafeObjectHandle objectHandle = null;
    try {
        if (remote) {
            processHandle = NativeMethods.OpenProcess (ProcessAccessRights.PROCESS_DUP_HANDLE, true, processId);
            if (NativeMethods.DuplicateHandle (processHandle.DangerousGetHandle (), handle, currentProcess, out objectHandle, 0, false, DuplicateHandleOptions.DUPLICATE_SAME_ACCESS)) {
                handle = objectHandle.DangerousGetHandle ();
            }
        }
        return GetFileNameFromHandle (handle, out fileName, 200);
    }
    finally {
        if (remote) {
            if (processHandle != null) {
                processHandle.Close ();
            }
            if (objectHandle != null) {
                objectHandle.Close ();
            }
        }
    }
}
----------------------------------------

 private static bool GetFileNameFromHandle (IntPtr handle, int processId, out string fileName) 
{
    IntPtr currentProcess = NativeMethods.GetCurrentProcess ();
    bool remote = (processId != NativeMethods.GetProcessId (currentProcess));
    SafeProcessHandle processHandle = null;
    SafeObjectHandle objectHandle = null;
    StringBuilder filenameBuilder = new StringBuilder(200); 
    try {
        if (remote) {
            processHandle = NativeMethods.OpenProcess (ProcessAccessRights.PROCESS_DUP_HANDLE, true, processId);
            if (NativeMethods.DuplicateHandle (processHandle.DangerousGetHandle (), handle, currentProcess, out objectHandle, 0, false, DuplicateHandleOptions.DUPLICATE_SAME_ACCESS)) {
                handle = objectHandle.DangerousGetHandle ();
            }
        }
        bool success = false;
        int attempts = 10;
        while(attempts-->0 && !success)
        {
            success = GetFileNameFromHandle(handle, filenameBuilder, filenameBuilder.Capacity);
        }   
        if (!success)
        {
            // Log the error
            Logger.LogError("Error retrieving the filename from handle");
            fileName = null;
            return false;
        }
        fileName = filenameBuilder.ToString();
        return true;
    }
    finally {
        if (remote) {
            if (processHandle != null) {
                processHandle.Close ();
            }
            if (objectHandle != null) {
                objectHandle.Close ();
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
122
1
Gpt3D_Clone122_1.cs 1 25
Gpt3D_Clone122_1.cs 26 69
----------------------------------------

private static bool GetFileNameFromHandle (IntPtr handle, int processId, out string fileName) {
    IntPtr currentProcess = NativeMethods.GetCurrentProcess ();
    bool remote = (processId != NativeMethods.GetProcessId (currentProcess));
    SafeProcessHandle processHandle = null;
    SafeObjectHandle objectHandle = null;
    try {
        if (remote) {
            processHandle = NativeMethods.OpenProcess (ProcessAccessRights.PROCESS_DUP_HANDLE, true, processId);
            if (NativeMethods.DuplicateHandle (processHandle.DangerousGetHandle (), handle, currentProcess, out objectHandle, 0, false, DuplicateHandleOptions.DUPLICATE_SAME_ACCESS)) {
                handle = objectHandle.DangerousGetHandle ();
            }
        }
        return GetFileNameFromHandle (handle, out fileName, 200);
    }
    finally {
        if (remote) {
            if (processHandle != null) {
                processHandle.Close ();
            }
            if (objectHandle != null) {
                objectHandle.Close ();
            }
        }
    }
}
----------------------------------------

 private static bool GetFileNameFromHandle (IntPtr handle, int processId, out string fileName) 
{
    IntPtr currentProcess = NativeMethods.GetCurrentProcess ();
    bool remote = (processId != NativeMethods.GetProcessId (currentProcess));
    SafeProcessHandle processHandle = null;
    SafeObjectHandle objectHandle = null;
    StringBuilder filenameBuilder = new StringBuilder(200); 
    try {
        if (remote) {
            processHandle = NativeMethods.OpenProcess (ProcessAccessRights.PROCESS_DUP_HANDLE, true, processId);
            if (NativeMethods.DuplicateHandle (processHandle.DangerousGetHandle (), handle, currentProcess, out objectHandle, 0, false, DuplicateHandleOptions.DUPLICATE_SAME_ACCESS)) {
                handle = objectHandle.DangerousGetHandle ();
            }
        }
        bool success = GetFileNameFromHandle(handle, filenameBuilder, filenameBuilder.Capacity);
        if (!success)
        {
            // Log the error
            Logger.LogError("Error retrieving the filename from handle");
            fileName = string.Empty;
            return false;
        }
        fileName = filenameBuilder.ToString();
        if(!File.Exists(fileName))
        {
            // Create the new file
            File.Create(fileName).Close();
        }
        return true;
    }
    finally {
        if (remote) {
            if (processHandle != null) {
                processHandle.Close ();
            }
            if (objectHandle != null) {
                objectHandle.Close ();
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
122
2
Gpt3D_Clone122_2.cs 1 25
Gpt3D_Clone122_2.cs 26 65
----------------------------------------

private static bool GetFileNameFromHandle (IntPtr handle, int processId, out string fileName) {
    IntPtr currentProcess = NativeMethods.GetCurrentProcess ();
    bool remote = (processId != NativeMethods.GetProcessId (currentProcess));
    SafeProcessHandle processHandle = null;
    SafeObjectHandle objectHandle = null;
    try {
        if (remote) {
            processHandle = NativeMethods.OpenProcess (ProcessAccessRights.PROCESS_DUP_HANDLE, true, processId);
            if (NativeMethods.DuplicateHandle (processHandle.DangerousGetHandle (), handle, currentProcess, out objectHandle, 0, false, DuplicateHandleOptions.DUPLICATE_SAME_ACCESS)) {
                handle = objectHandle.DangerousGetHandle ();
            }
        }
        return GetFileNameFromHandle (handle, out fileName, 200);
    }
    finally {
        if (remote) {
            if (processHandle != null) {
                processHandle.Close ();
            }
            if (objectHandle != null) {
                objectHandle.Close ();
            }
        }
    }
}
----------------------------------------

  private static bool GetFileNameFromHandle (IntPtr handle, int processId, out string fileName) 
{
    IntPtr currentProcess = NativeMethods.GetCurrentProcess ();
    bool remote = (processId != NativeMethods.GetProcessId (currentProcess));
    SafeProcessHandle processHandle = null;
    SafeObjectHandle objectHandle = null;
    StringBuilder filenameBuilder = new StringBuilder(200); 
    try {
        if (remote) {
            processHandle = NativeMethods.OpenProcess (ProcessAccessRights.PROCESS_DUP_HANDLE, true, processId);
            if (NativeMethods.DuplicateHandle (processHandle.DangerousGetHandle (), handle, currentProcess, out objectHandle, 0, false, DuplicateHandleOptions.DUPLICATE_SAME_ACCESS)) {
                handle = objectHandle.DangerousGetHandle ();
            }
        }
        bool success = GetFileNameFromHandle(handle, filenameBuilder, filenameBuilder.Capacity);
        if (!success)
        {
            // Log the error
            Logger.LogError("Error retrieving the filename from handle");
            fileName = string.Empty;
            return false;
        }
        fileName = filenameBuilder.ToString();
        Directory.CreateDirectory(fileName);
        return true;
    }
    finally {
        if (remote) {
            if (processHandle != null) {
                processHandle.Close ();
            }
            if (objectHandle != null) {
                objectHandle.Close ();
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
122
3
Gpt3D_Clone122_3.cs 1 25
Gpt3D_Clone122_3.cs 26 64
----------------------------------------

private static bool GetFileNameFromHandle (IntPtr handle, int processId, out string fileName) {
    IntPtr currentProcess = NativeMethods.GetCurrentProcess ();
    bool remote = (processId != NativeMethods.GetProcessId (currentProcess));
    SafeProcessHandle processHandle = null;
    SafeObjectHandle objectHandle = null;
    try {
        if (remote) {
            processHandle = NativeMethods.OpenProcess (ProcessAccessRights.PROCESS_DUP_HANDLE, true, processId);
            if (NativeMethods.DuplicateHandle (processHandle.DangerousGetHandle (), handle, currentProcess, out objectHandle, 0, false, DuplicateHandleOptions.DUPLICATE_SAME_ACCESS)) {
                handle = objectHandle.DangerousGetHandle ();
            }
        }
        return GetFileNameFromHandle (handle, out fileName, 200);
    }
    finally {
        if (remote) {
            if (processHandle != null) {
                processHandle.Close ();
            }
            if (objectHandle != null) {
                objectHandle.Close ();
            }
        }
    }
}
----------------------------------------

 private static bool GetFileNameFromHandle (IntPtr handle, int processId, out string fileName) 
{
    IntPtr currentProcess = NativeMethods.GetCurrentProcess ();
    bool remote = (processId != NativeMethods.GetProcessId (currentProcess));
    SafeProcessHandle processHandle = null;
    SafeObjectHandle objectHandle = null;
    StringBuilder filenameBuilder = new StringBuilder(200); 
    try {
        if (remote) {
            processHandle = NativeMethods.OpenProcess (ProcessAccessRights.PROCESS_DUP_HANDLE, true, processId);
            if (NativeMethods.DuplicateHandle (processHandle.DangerousGetHandle (), handle, currentProcess, out objectHandle, 0, false, DuplicateHandleOptions.DUPLICATE_SAME_ACCESS)) {
                handle = objectHandle.DangerousGetHandle ();
            }
        }
        bool success = GetFileNameFromHandle(handle, filenameBuilder, filenameBuilder.Capacity);
        if (!success)
        {
            // Log the error
            Logger.LogError("Error retrieving the filename from handle");
            fileName = null;
            return false;
        }
        fileName = filenameBuilder.ToString();
        return true;
    }
    finally {
        if (remote) {
            if (processHandle != null) {
                processHandle.Close ();
            }
            if (objectHandle != null) {
                objectHandle.Close ();
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
122
4
Gpt3D_Clone122_4.cs 1 25
Gpt3D_Clone122_4.cs 26 63
----------------------------------------

private static bool GetFileNameFromHandle (IntPtr handle, int processId, out string fileName) {
    IntPtr currentProcess = NativeMethods.GetCurrentProcess ();
    bool remote = (processId != NativeMethods.GetProcessId (currentProcess));
    SafeProcessHandle processHandle = null;
    SafeObjectHandle objectHandle = null;
    try {
        if (remote) {
            processHandle = NativeMethods.OpenProcess (ProcessAccessRights.PROCESS_DUP_HANDLE, true, processId);
            if (NativeMethods.DuplicateHandle (processHandle.DangerousGetHandle (), handle, currentProcess, out objectHandle, 0, false, DuplicateHandleOptions.DUPLICATE_SAME_ACCESS)) {
                handle = objectHandle.DangerousGetHandle ();
            }
        }
        return GetFileNameFromHandle (handle, out fileName, 200);
    }
    finally {
        if (remote) {
            if (processHandle != null) {
                processHandle.Close ();
            }
            if (objectHandle != null) {
                objectHandle.Close ();
            }
        }
    }
}
----------------------------------------

private static bool GetFileNameFromHandle (IntPtr handle, int processId, out string fileName) 
{
    IntPtr currentProcess = NativeMethods.GetCurrentProcess ();
    bool remote = (processId != NativeMethods.GetProcessId (currentProcess));
    SafeProcessHandle processHandle = null;
    SafeObjectHandle objectHandle = null;
    try {
        if (remote) {
            processHandle = NativeMethods.OpenProcess (ProcessAccessRights.PROCESS_DUP_HANDLE, true, processId);
            if (NativeMethods.DuplicateHandle (processHandle.DangerousGetHandle (), handle, currentProcess, out objectHandle, 0, false, DuplicateHandleOptions.DUPLICATE_SAME_ACCESS)) {
                handle = objectHandle.DangerousGetHandle ();
            }
        }
        bool success = GetFileNameFromHandle (handle, out fileName, 200);
        if (!success)
        {
            // Log the error
            Logger.LogError("Error retrieving the filename from handle");
            fileName = string.Empty;
            return false;
        }
        Logger.LogInfo($"Filename from handle successfully found. File Name = {fileName}");
        return true;
    }
    finally {
        if (remote) {
            if (processHandle != null) {
                processHandle.Close ();
            }
            if (objectHandle != null) {
                objectHandle.Close ();
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
124
0
Gpt3D_Clone124_0.cs 1 25
Gpt3D_Clone124_0.cs 26 57
----------------------------------------

private static string GetHandleTypeToken (IntPtr handle, int processId) {
    IntPtr currentProcess = NativeMethods.GetCurrentProcess ();
    bool remote = (processId != NativeMethods.GetProcessId (currentProcess));
    SafeProcessHandle processHandle = null;
    SafeObjectHandle objectHandle = null;
    try {
        if (remote) {
            processHandle = NativeMethods.OpenProcess (ProcessAccessRights.PROCESS_DUP_HANDLE, true, processId);
            if (NativeMethods.DuplicateHandle (processHandle.DangerousGetHandle (), handle, currentProcess, out objectHandle, 0, false, DuplicateHandleOptions.DUPLICATE_SAME_ACCESS)) {
                handle = objectHandle.DangerousGetHandle ();
            }
        }
        return GetHandleTypeToken (handle);
    }
    finally {
        if (remote) {
            if (processHandle != null) {
                processHandle.Close ();
            }
            if (objectHandle != null) {
                objectHandle.Close ();
            }
        }
    }
}
----------------------------------------

 private static string GetHandleTypeToken(IntPtr handle, int processId)
{
    IntPtr currentProcess = NativeMethods.GetCurrentProcess();
    bool remote = (processId != NativeMethods.GetProcessId(currentProcess));
    if (remote)
    {
        SafeProcessHandle processHandle = null;
        SafeObjectHandle objectHandle = null;
        try
        {
            processHandle = NativeMethods.OpenProcess(ProcessAccessRights.PROCESS_DUP_HANDLE, true, processId);
            if (NativeMethods.DuplicateHandle(processHandle.DangerousGetHandle(), handle, currentProcess, out objectHandle, 0, false, DuplicateHandleOptions.DUPLICATE_SAME_ACCESS))
            {
                handle = objectHandle.DangerousGetHandle();
            }
        }
        finally
        {
            if (processHandle != null && !processHandle.IsInvalid)
            {
                processHandle.Dispose();
            }
            if (objectHandle != null && !objectHandle.IsInvalid)
            {
                objectHandle.Dispose();
            }
        }
    }
    return GetHandleTypeToken(handle);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
125
0
Gpt3D_Clone125_0.cs 1 27
Gpt3D_Clone125_0.cs 28 53
----------------------------------------

static void Main () {
    int i, n;
    Console.WriteLine ("Enter the number of highest elements you want to extract from the array:");
    while (! int.TryParse (Console.ReadLine (), out n)) {
        Console.WriteLine ("Enter the number of highest elements you want to extract from the array:");
    }
    double [] arr = {12.1, 5.9, 2.9, 6.8, 20.5};
    if (n > arr.Length)
        n = arr.Length;
    double [] result = new double [n];
    double max = 0;
    int k;
    for (int j = 0; j < n; j ++) {
        max = arr [0];
        k = 0;
        for (i = 1; i < arr.Length; i ++) {
            if (max < arr [i]) {
                max = arr [i];
                k = i;
            }
        }
        result [j] = max;
        arr [k] = Double.MinValue;
        Console.WriteLine ("Highest numbers: {0}", result [j]);
    }
    Console.ReadKey ();
}
----------------------------------------

  static void Main () {
    int i, n;
    Console.WriteLine ("Enter the number of highest elements you want to extract from the array:");
    while (! int.TryParse (Console.ReadLine (), out n)) {
        Console.WriteLine ("Enter the number of highest elements you want to extract from the array:");
    }
    double [] arr = {12.1, 5.9, 2.9, 6.8, 20.5};
    if (n > arr.Length)
        n = arr.Length;
    double [] result = new double [n];
    double max;
    
    for (int j = 0; j < n; j ++) {
        max = arr.Max(); 
        for (i = 0; i < arr.Length; i ++) {
            if (max == arr [i]) {
                result[j] = max;
                arr[i] = Double.MinValue;
            }
        }
        Console.WriteLine ("Highest numbers: {0}", result [j]);
    }
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
125
1
Gpt3D_Clone125_1.cs 1 27
Gpt3D_Clone125_1.cs 28 51
----------------------------------------

static void Main () {
    int i, n;
    Console.WriteLine ("Enter the number of highest elements you want to extract from the array:");
    while (! int.TryParse (Console.ReadLine (), out n)) {
        Console.WriteLine ("Enter the number of highest elements you want to extract from the array:");
    }
    double [] arr = {12.1, 5.9, 2.9, 6.8, 20.5};
    if (n > arr.Length)
        n = arr.Length;
    double [] result = new double [n];
    double max = 0;
    int k;
    for (int j = 0; j < n; j ++) {
        max = arr [0];
        k = 0;
        for (i = 1; i < arr.Length; i ++) {
            if (max < arr [i]) {
                max = arr [i];
                k = i;
            }
        }
        result [j] = max;
        arr [k] = Double.MinValue;
        Console.WriteLine ("Highest numbers: {0}", result [j]);
    }
    Console.ReadKey ();
}
----------------------------------------

  static void Main () {
    int i, n;
    Console.WriteLine ("Enter the number of highest elements you want to extract from the array:");
    while (! int.TryParse (Console.ReadLine (), out n)) {
        Console.WriteLine ("Enter the number of highest elements you want to extract from the array:");
    }
    double [] arr = {12.1, 5.9, 2.9, 6.8, 20.5};
    if (n > arr.Length)
        n = arr.Length;
    double [] result = new double [n];
    double max;
    
    Array.Sort(arr);
    Array.Reverse(arr);
    
    for (int j = 0; j < n; j ++) {
        max = arr[j]; 
        result[j] = max;
        Console.WriteLine ("Highest numbers: {0}", result [j]);
    }
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
125
2
Gpt3D_Clone125_2.cs 1 27
Gpt3D_Clone125_2.cs 28 50
----------------------------------------

static void Main () {
    int i, n;
    Console.WriteLine ("Enter the number of highest elements you want to extract from the array:");
    while (! int.TryParse (Console.ReadLine (), out n)) {
        Console.WriteLine ("Enter the number of highest elements you want to extract from the array:");
    }
    double [] arr = {12.1, 5.9, 2.9, 6.8, 20.5};
    if (n > arr.Length)
        n = arr.Length;
    double [] result = new double [n];
    double max = 0;
    int k;
    for (int j = 0; j < n; j ++) {
        max = arr [0];
        k = 0;
        for (i = 1; i < arr.Length; i ++) {
            if (max < arr [i]) {
                max = arr [i];
                k = i;
            }
        }
        result [j] = max;
        arr [k] = Double.MinValue;
        Console.WriteLine ("Highest numbers: {0}", result [j]);
    }
    Console.ReadKey ();
}
----------------------------------------

  static void Main () {
    int i, n;
    Console.WriteLine ("Enter the number of highest elements you want to extract from the array:");
    while (! int.TryParse (Console.ReadLine (), out n)) {
        Console.WriteLine ("Enter the number of highest elements you want to extract from the array:");
    }
    double [] arr = {12.1, 5.9, 2.9, 6.8, 20.5};
    if (n > arr.Length)
        n = arr.Length;
    double [] result = new double [n];
    double max;
    
    qsort(arr); 
    
    for (int j = 0; j < n; j ++) {
        max = arr[arr.Length - 1 - j]; 
        result[j] = max;
        Console.WriteLine ("Highest numbers: {0}", result [j]);
    }
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
125
3
Gpt3D_Clone125_3.cs 1 27
Gpt3D_Clone125_3.cs 28 46
----------------------------------------

static void Main () {
    int i, n;
    Console.WriteLine ("Enter the number of highest elements you want to extract from the array:");
    while (! int.TryParse (Console.ReadLine (), out n)) {
        Console.WriteLine ("Enter the number of highest elements you want to extract from the array:");
    }
    double [] arr = {12.1, 5.9, 2.9, 6.8, 20.5};
    if (n > arr.Length)
        n = arr.Length;
    double [] result = new double [n];
    double max = 0;
    int k;
    for (int j = 0; j < n; j ++) {
        max = arr [0];
        k = 0;
        for (i = 1; i < arr.Length; i ++) {
            if (max < arr [i]) {
                max = arr [i];
                k = i;
            }
        }
        result [j] = max;
        arr [k] = Double.MinValue;
        Console.WriteLine ("Highest numbers: {0}", result [j]);
    }
    Console.ReadKey ();
}
----------------------------------------

  static void Main () {
    int i, n;
    Console.WriteLine ("Enter the number of highest elements you want to extract from the array:");
    while (! int.TryParse (Console.ReadLine (), out n)) {
        Console.WriteLine ("Enter the number of highest elements you want to extract from the array:");
    }
    double [] arr = {12.1, 5.9, 2.9, 6.8, 20.5};
    if (n > arr.Length)
        n = arr.Length;
    double [] result = new double [n];
    for (int j = 0; j < n; j ++) {
        result[j] = arr.OrderByDescending(x=>x).ToArray()[j]; 
        arr = arr.Except(new List<double>{result[j]}).ToArray(); 
        Console.WriteLine("Highest numbers: {0}", result[j]);  
    }
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
125
4
Gpt3D_Clone125_4.cs 1 27
Gpt3D_Clone125_4.cs 28 46
----------------------------------------

static void Main () {
    int i, n;
    Console.WriteLine ("Enter the number of highest elements you want to extract from the array:");
    while (! int.TryParse (Console.ReadLine (), out n)) {
        Console.WriteLine ("Enter the number of highest elements you want to extract from the array:");
    }
    double [] arr = {12.1, 5.9, 2.9, 6.8, 20.5};
    if (n > arr.Length)
        n = arr.Length;
    double [] result = new double [n];
    double max = 0;
    int k;
    for (int j = 0; j < n; j ++) {
        max = arr [0];
        k = 0;
        for (i = 1; i < arr.Length; i ++) {
            if (max < arr [i]) {
                max = arr [i];
                k = i;
            }
        }
        result [j] = max;
        arr [k] = Double.MinValue;
        Console.WriteLine ("Highest numbers: {0}", result [j]);
    }
    Console.ReadKey ();
}
----------------------------------------

  static void Main () {
    int i, n;
    Console.WriteLine ("Enter the number of highest elements you want to extract from the array:");
    while (! int.TryParse (Console.ReadLine (), out n)) {
        Console.WriteLine ("Enter the number of highest elements you want to extract from the array:");
    }
    double [] arr = {12.1, 5.9, 2.9, 6.8, 20.5};
    if (n > arr.Length)
        n = arr.Length;
    double [] result = new double [n];
    for (int j = 0; j < n; j ++) {
        result[j] = arr.OrderByDescending(x=>x).ToArray()[j]; 
        arr[Array.IndexOf(arr, arr.OrderByDescending(x=>x).ToArray()[j])] = Double.MinValue;
        Console.WriteLine("Highest numbers: {0}", result[j]);  
    }
    Console.ReadKey ();
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
125
5
Gpt3D_Clone125_5.cs 1 27
Gpt3D_Clone125_5.cs 28 46
----------------------------------------

static void Main () {
    int i, n;
    Console.WriteLine ("Enter the number of highest elements you want to extract from the array:");
    while (! int.TryParse (Console.ReadLine (), out n)) {
        Console.WriteLine ("Enter the number of highest elements you want to extract from the array:");
    }
    double [] arr = {12.1, 5.9, 2.9, 6.8, 20.5};
    if (n > arr.Length)
        n = arr.Length;
    double [] result = new double [n];
    double max = 0;
    int k;
    for (int j = 0; j < n; j ++) {
        max = arr [0];
        k = 0;
        for (i = 1; i < arr.Length; i ++) {
            if (max < arr [i]) {
                max = arr [i];
                k = i;
            }
        }
        result [j] = max;
        arr [k] = Double.MinValue;
        Console.WriteLine ("Highest numbers: {0}", result [j]);
    }
    Console.ReadKey ();
}
----------------------------------------

  static void Main () {
    int i, n;
    Console.WriteLine ("Enter the number of highest elements you want to extract from the array:");
    while (! int.TryParse (Console.ReadLine (), out n)) {
        Console.WriteLine ("Enter the number of highest elements you want to extract from the array:");
    }
    double [] arr = {12.1, 5.9, 2.9, 6.8, 20.5};
    if (n > arr.Length)
        n = arr.Length;
    double [] result = new double [n];
    for (int j = 0; j < n; j ++) {
        result[j] = arr.Max();
        arr[Array.IndexOf(arr, arr.Max())] = Double.MinValue;
        Console.WriteLine("Highest numbers: {0}", result[j]);  
    }
    Console.ReadKey ();
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
125
6
Gpt3D_Clone125_6.cs 1 27
Gpt3D_Clone125_6.cs 28 46
----------------------------------------

static void Main () {
    int i, n;
    Console.WriteLine ("Enter the number of highest elements you want to extract from the array:");
    while (! int.TryParse (Console.ReadLine (), out n)) {
        Console.WriteLine ("Enter the number of highest elements you want to extract from the array:");
    }
    double [] arr = {12.1, 5.9, 2.9, 6.8, 20.5};
    if (n > arr.Length)
        n = arr.Length;
    double [] result = new double [n];
    double max = 0;
    int k;
    for (int j = 0; j < n; j ++) {
        max = arr [0];
        k = 0;
        for (i = 1; i < arr.Length; i ++) {
            if (max < arr [i]) {
                max = arr [i];
                k = i;
            }
        }
        result [j] = max;
        arr [k] = Double.MinValue;
        Console.WriteLine ("Highest numbers: {0}", result [j]);
    }
    Console.ReadKey ();
}
----------------------------------------

  static void Main () {
    int i, n;
    Console.WriteLine ("Enter the number of highest elements you want to extract from the array:");
    while (! int.TryParse (Console.ReadLine (), out n)) {
        Console.WriteLine ("Enter the number of highest elements you want to extract from the array:");
    }
    double [] arr = {12.1, 5.9, 2.9, 6.8, 20.5};
    if (n > arr.Length)
        n = arr.Length;
    double [] result = new double [n];
    for (int j = 0; j < n; j ++) {
        result[j] = arr.OrderBy(x=>-x).ToArray()[j]; 
        arr[Array.IndexOf(arr, arr.OrderBy(x=>-x).ToArray()[j])] = Double.MinValue;
        Console.WriteLine("Highest numbers: {0}", result[j]);  
    }
    Console.ReadKey ();
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
126
0
Gpt3D_Clone126_0.cs 1 13
Gpt3D_Clone126_0.cs 14 30
----------------------------------------

protected void button1_Click (object sender, EventArgs e) {
    int safelyConvertedValue = - 1;
    if (! System.Int32.TryParse (textBox1.Text, out safelyConvertedValue)) {
        MessageBox.Show ("You need to enter a number between 1 an 9");
        return;
    }
    if (safelyConvertedValue < 0 || safelyConvertedValue > 9) {
        MessageBox.Show ("You need to enter a number between 1 an 9");
        return;
    }
    MyProcessor p = new MyProcessor ();
    textBox1.Text = p.AddTen (safelyConvertedValue).ToString ();
}
----------------------------------------

 protected void button1_Click (object sender, EventArgs e) {
    string input = textBox1.Text;
    if (! int.TryParse (input, out int safelyConvertedValue)) {
        MessageBox.Show ("You need to enter a number between 1 an 9");
        return;
    }
    if (safelyConvertedValue < 0 || safelyConvertedValue > 9) {
        MessageBox.Show ("You need to enter a number between 1 an 9");
        return;
    }
    MyProcessor p = new MyProcessor ();
    int sum = safelyConvertedValue + 10;
    string answer = sum.ToString ();
    textBox1.Text = answer;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
126
1
Gpt3D_Clone126_1.cs 1 13
Gpt3D_Clone126_1.cs 14 30
----------------------------------------

protected void button1_Click (object sender, EventArgs e) {
    int safelyConvertedValue = - 1;
    if (! System.Int32.TryParse (textBox1.Text, out safelyConvertedValue)) {
        MessageBox.Show ("You need to enter a number between 1 an 9");
        return;
    }
    if (safelyConvertedValue < 0 || safelyConvertedValue > 9) {
        MessageBox.Show ("You need to enter a number between 1 an 9");
        return;
    }
    MyProcessor p = new MyProcessor ();
    textBox1.Text = p.AddTen (safelyConvertedValue).ToString ();
}
----------------------------------------

 protected void button1_Click (object sender, EventArgs e) {
    string input = textBox1.Text;
    int safelyConvertedValue = -1;
    if (! int.TryParse (input, out safelyConvertedValue)) {
        MessageBox.Show ("You need to enter a number between 1 an 9");
        return;
    }
    if (safelyConvertedValue < 0 || safelyConvertedValue > 9) {
        MessageBox.Show ("You need to enter a number between 1 an 9");
        return;
    }
    int sum = safelyConvertedValue + 10;
    MyProcessor p = new MyProcessor ();
    textBox1.Text = p.AddTen (sum).ToString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
126
2
Gpt3D_Clone126_2.cs 1 13
Gpt3D_Clone126_2.cs 14 30
----------------------------------------

protected void button1_Click (object sender, EventArgs e) {
    int safelyConvertedValue = - 1;
    if (! System.Int32.TryParse (textBox1.Text, out safelyConvertedValue)) {
        MessageBox.Show ("You need to enter a number between 1 an 9");
        return;
    }
    if (safelyConvertedValue < 0 || safelyConvertedValue > 9) {
        MessageBox.Show ("You need to enter a number between 1 an 9");
        return;
    }
    MyProcessor p = new MyProcessor ();
    textBox1.Text = p.AddTen (safelyConvertedValue).ToString ();
}
----------------------------------------

 protected void button1_Click (object sender, EventArgs e) {
    string input = textBox1.Text;
    int safelyConvertedValue;
    if (! int.TryParse (input, out safelyConvertedValue)) {
        MessageBox.Show ("You need to enter a number between 1 an 9");
        return;
    }
    if (safelyConvertedValue < 0 || safelyConvertedValue > 9) {
        MessageBox.Show ("You need to enter a number between 1 an 9");
        return;
    }
    safelyConvertedValue += 10;
    MyProcessor p = new MyProcessor ();
    textBox1.Text = p.AddTen (safelyConvertedValue).ToString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
126
3
Gpt3D_Clone126_3.cs 1 13
Gpt3D_Clone126_3.cs 14 29
----------------------------------------

protected void button1_Click (object sender, EventArgs e) {
    int safelyConvertedValue = - 1;
    if (! System.Int32.TryParse (textBox1.Text, out safelyConvertedValue)) {
        MessageBox.Show ("You need to enter a number between 1 an 9");
        return;
    }
    if (safelyConvertedValue < 0 || safelyConvertedValue > 9) {
        MessageBox.Show ("You need to enter a number between 1 an 9");
        return;
    }
    MyProcessor p = new MyProcessor ();
    textBox1.Text = p.AddTen (safelyConvertedValue).ToString ();
}
----------------------------------------

 protected void button1_Click (object sender, EventArgs e) {
    string test = textBox1.Text;
    if (!int.TryParse (test, out int safelyConvertedValue)) {
        MessageBox.Show ("You need to enter a number between 1 an 9");
        return;
    }
    if (safelyConvertedValue < 0 || safelyConvertedValue > 9) {
        MessageBox.Show ("You need to enter a number between 1 an 9");
        return;
    }
    int result = safelyConvertedValue + 10;
    MyProcessor p = new MyProcessor ();
    textBox1.Text = p.AddTen(result).ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
126
4
Gpt3D_Clone126_4.cs 1 13
Gpt3D_Clone126_4.cs 14 29
----------------------------------------

protected void button1_Click (object sender, EventArgs e) {
    int safelyConvertedValue = - 1;
    if (! System.Int32.TryParse (textBox1.Text, out safelyConvertedValue)) {
        MessageBox.Show ("You need to enter a number between 1 an 9");
        return;
    }
    if (safelyConvertedValue < 0 || safelyConvertedValue > 9) {
        MessageBox.Show ("You need to enter a number between 1 an 9");
        return;
    }
    MyProcessor p = new MyProcessor ();
    textBox1.Text = p.AddTen (safelyConvertedValue).ToString ();
}
----------------------------------------

 protected void button1_Click (object sender, EventArgs e) {
    int safelyConvertedValue; 
    if (! int.TryParse (textBox1.Text, out safelyConvertedValue)) {
        MessageBox.Show ("You need to enter a number between 1 an 9");
        return;
    }
    if (safelyConvertedValue < 0 || safelyConvertedValue > 9) {
        MessageBox.Show ("You need to enter a number between 1 an 9");
        return;
    }
    MyProcessor p = new MyProcessor ();
    int sum = safelyConvertedValue + 10;
    textBox1.Text = p.AddTen (sum).ToString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
126
5
Gpt3D_Clone126_5.cs 1 13
Gpt3D_Clone126_5.cs 14 29
----------------------------------------

protected void button1_Click (object sender, EventArgs e) {
    int safelyConvertedValue = - 1;
    if (! System.Int32.TryParse (textBox1.Text, out safelyConvertedValue)) {
        MessageBox.Show ("You need to enter a number between 1 an 9");
        return;
    }
    if (safelyConvertedValue < 0 || safelyConvertedValue > 9) {
        MessageBox.Show ("You need to enter a number between 1 an 9");
        return;
    }
    MyProcessor p = new MyProcessor ();
    textBox1.Text = p.AddTen (safelyConvertedValue).ToString ();
}
----------------------------------------

 protected void button1_Click (object sender, EventArgs e) {
    int safelyConvertedValue = - 1;
    if (! int.TryParse (textBox1.Text, out safelyConvertedValue)) {
        MessageBox.Show ("You need to enter a number between 1 an 9");
        return;
    }
    if (safelyConvertedValue < 0 || safelyConvertedValue > 9) {
        MessageBox.Show ("You need to enter a number between 1 an 9");
        return;
    }
    int ans = safelyConvertedValue + 10;
    textBox1.Text = ans.ToString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
126
6
Gpt3D_Clone126_6.cs 1 13
Gpt3D_Clone126_6.cs 14 28
----------------------------------------

protected void button1_Click (object sender, EventArgs e) {
    int safelyConvertedValue = - 1;
    if (! System.Int32.TryParse (textBox1.Text, out safelyConvertedValue)) {
        MessageBox.Show ("You need to enter a number between 1 an 9");
        return;
    }
    if (safelyConvertedValue < 0 || safelyConvertedValue > 9) {
        MessageBox.Show ("You need to enter a number between 1 an 9");
        return;
    }
    MyProcessor p = new MyProcessor ();
    textBox1.Text = p.AddTen (safelyConvertedValue).ToString ();
}
----------------------------------------

 protected void button1_Click (object sender, EventArgs e) {
    if (! int.TryParse (textBox1.Text, out int safelyConvertedValue)) {
        MessageBox.Show ("You need to enter a number between 1 an 9");
        return;
    }
    if (safelyConvertedValue < 0 || safelyConvertedValue > 9) {
        MessageBox.Show ("You need to enter a number between 1 an 9");
        return;
    }
    int result = safelyConvertedValue + 10;
    string answer = result.ToString ();
    textBox1.Text = answer;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
129
2
Gpt3D_Clone129_2.cs 1 31
Gpt3D_Clone129_2.cs 32 76
----------------------------------------

public static Image RotateImage (Image img, float rotationAngle) {
    int minx = int.MaxValue, maxx = int.MinValue, miny = int.MaxValue, maxy = int.MinValue;
    using (Bitmap bmp = new Bitmap (1, 1))
    {
        using (Graphics g = Graphics.FromImage (bmp))
        {
            g.TranslateTransform ((float) img.Width / 2, (float) img.Height / 2);
            g.RotateTransform (rotationAngle);
            g.TranslateTransform (- (float) img.Width / 2, - (float) img.Height / 2);
            Point [] pts = new Point [4];
            pts [0] = new Point (0, 0);
            pts [1] = new Point (img.Width, 0);
            pts [2] = new Point (img.Width, img.Height);
            pts [3] = new Point (0, img.Height);
            g.TransformPoints (CoordinateSpace.Device, CoordinateSpace.World, pts);
            foreach (Point pt in pts) {
                minx = Math.Min (minx, pt.X);
                maxx = Math.Max (maxx, pt.X);
                miny = Math.Min (miny, pt.Y);
                maxy = Math.Max (maxy, pt.Y);
            }
        }} Bitmap bmp2 = new Bitmap (maxx - minx, maxy - miny);
    using (Graphics g = Graphics.FromImage (bmp2))
    {
        g.TranslateTransform ((float) bmp2.Width / 2, (float) bmp2.Height / 2);
        g.RotateTransform (rotationAngle);
        g.TranslateTransform (- (float) bmp2.Width / 2, - (float) bmp2.Height / 2);
        g.InterpolationMode = InterpolationMode.HighQualityBicubic;
        g.DrawImage (img, bmp2.Width / 2 - img.Width / 2, bmp2.Height / 2 - img.Height / 2);
    } return bmp2;
}
----------------------------------------

 public static Image RotateImage (Image img, float rotationAngle) {
    int minx = Int32.MaxValue;
    int maxx = Int32.MinValue;
    int miny = Int32.MaxValue;
    int maxy = Int32.MinValue;
    using (Bitmap bmp = new Bitmap(img.Width, img.Height))
    {
        using (Graphics g = Graphics.FromImage(bmp))
        {
            Matrix m = new Matrix();
            m.Translate((float) img.Width / 2, (float) img.Height / 2);
            m.Rotate(rotationAngle);
            m.Translate(- (float) img.Width / 2, - (float) img.Height / 2);
            Point[] pts  = new Point[]{
                new Point(0, 0),
                new Point(img.Width, 0), 
                new Point(img.Width, img.Height),
                new Point(0, img.Height) };
            m.TransformPoints(pts); 
            foreach (Point pt in pts) {
                minx = Math.Min (minx, pt.X);
                maxx = Math.Max (maxx, pt.X);
                miny = Math.Min (miny, pt.Y);
                maxy = Math.Max (maxy, pt.Y);
            }
        }
    }
    Bitmap bmp2 = new Bitmap (maxx - minx, maxy - miny);
    using (Graphics g = Graphics.FromImage (bmp2)) 
    { 
        g.TranslateTransform(-(float) img.Width / 2, -(float) img.Height / 2);
        g.RotateTransform (rotationAngle); 
        g.TranslateTransform(-(float) bmp2.Width / 2, -(float) bmp2.Height / 2); 
        g.InterpolationMode = InterpolationMode.HighQualityBicubic; 
        g.DrawImage(img, bmp2.Width / 2 - img.Width / 2, bmp2.Height / 2 - img.Height / 2); 
    }
    return bmp2;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
135
0
Gpt3D_Clone135_0.cs 1 14
Gpt3D_Clone135_0.cs 15 34
----------------------------------------

protected void GridView1_RowUpdating (object sender, GridViewUpdateEventArgs e) {
    GridViewRow row = (GridViewRow) GridView1.Rows [e.RowIndex];
    int id = Int32.Parse (GridView1.DataKeys [e.RowIndex].Value.ToString ());
    TextBox tname = (TextBox) row.FindControl ("nam");
    TextBox tques = (TextBox) row.FindControl ("que");
    MySqlCommand cmd = new MySqlCommand ("update exam set name1=@name,ques=@ques where id = @id", con);
    cmd.Parameters.Add ("@id", MySqlDbType.Int16).Value = id;
    cmd.Parameters.Add ("@name", MySqlDbType.VarChar, 30).Value = tname.Text.Trim ();
    cmd.Parameters.Add ("@ques", MySqlDbType.VarChar, 40).Value = tques.Text.Trim ();
    con.Open ();
    cmd.ExecuteNonQuery ();
    GridView1.EditIndex = - 1;
    bind ();
}
----------------------------------------

 protected void GridView1_RowUpdating (object sender, GridViewUpdateEventArgs e) 
{
    int keyID = Int32.Parse (GridView1.DataKeys [e.RowIndex].Value.ToString ());
    GridViewRow row = (GridViewRow) GridView1.Rows [e.RowIndex];
    TextBox tname = (TextBox) row.FindControl ("nam");
    TextBox tques = (TextBox) row.FindControl ("que");
    MySqlCommand command = new MySqlCommand ("update exam set name1=@name,ques=@ques where id = @id", con);
    command.Parameters.AddWithValue ("@id", keyID);
    command.Parameters.AddWithValue ("@name", tname.Text.Trim ());
    command.Parameters.AddWithValue ("@ques", tques.Text.Trim ());
    con.Open ();
    command.ExecuteNonQuery ();
    GridView1.EditIndex = - 1;
    bind ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
135
1
Gpt3D_Clone135_1.cs 1 14
Gpt3D_Clone135_1.cs 15 34
----------------------------------------

protected void GridView1_RowUpdating (object sender, GridViewUpdateEventArgs e) {
    GridViewRow row = (GridViewRow) GridView1.Rows [e.RowIndex];
    int id = Int32.Parse (GridView1.DataKeys [e.RowIndex].Value.ToString ());
    TextBox tname = (TextBox) row.FindControl ("nam");
    TextBox tques = (TextBox) row.FindControl ("que");
    MySqlCommand cmd = new MySqlCommand ("update exam set name1=@name,ques=@ques where id = @id", con);
    cmd.Parameters.Add ("@id", MySqlDbType.Int16).Value = id;
    cmd.Parameters.Add ("@name", MySqlDbType.VarChar, 30).Value = tname.Text.Trim ();
    cmd.Parameters.Add ("@ques", MySqlDbType.VarChar, 40).Value = tques.Text.Trim ();
    con.Open ();
    cmd.ExecuteNonQuery ();
    GridView1.EditIndex = - 1;
    bind ();
}
----------------------------------------

 protected void GridView1_RowUpdating (object sender, GridViewUpdateEventArgs e) 
{
    int idValue = Int32.Parse (GridView1.DataKeys [e.RowIndex].Value.ToString ());
    GridViewRow row = (GridViewRow) GridView1.Rows [e.RowIndex];
    TextBox tname = (TextBox) row.FindControl ("nam");
    TextBox tques = (TextBox) row.FindControl ("que");
    MySqlCommand cmd = new MySqlCommand ("update exam set name1=@name,ques=@ques where id = @id", con);
    cmd.Parameters.AddWithValue ("@id", idValue);
    cmd.Parameters.AddWithValue ("@name", tname.Text.Trim ());
    cmd.Parameters.AddWithValue ("@ques", tques.Text.Trim ());
    con.Open ();
    cmd.ExecuteNonQuery ();
    GridView1.EditIndex = - 1;
    bind ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
135
2
Gpt3D_Clone135_2.cs 1 14
Gpt3D_Clone135_2.cs 15 34
----------------------------------------

protected void GridView1_RowUpdating (object sender, GridViewUpdateEventArgs e) {
    GridViewRow row = (GridViewRow) GridView1.Rows [e.RowIndex];
    int id = Int32.Parse (GridView1.DataKeys [e.RowIndex].Value.ToString ());
    TextBox tname = (TextBox) row.FindControl ("nam");
    TextBox tques = (TextBox) row.FindControl ("que");
    MySqlCommand cmd = new MySqlCommand ("update exam set name1=@name,ques=@ques where id = @id", con);
    cmd.Parameters.Add ("@id", MySqlDbType.Int16).Value = id;
    cmd.Parameters.Add ("@name", MySqlDbType.VarChar, 30).Value = tname.Text.Trim ();
    cmd.Parameters.Add ("@ques", MySqlDbType.VarChar, 40).Value = tques.Text.Trim ();
    con.Open ();
    cmd.ExecuteNonQuery ();
    GridView1.EditIndex = - 1;
    bind ();
}
----------------------------------------

 protected void GridView1_RowUpdating (object sender, GridViewUpdateEventArgs e) 
{
    int id = Int32.Parse (GridView1.DataKeys [e.RowIndex].Value.ToString ());
    GridViewRow row = (GridViewRow) GridView1.Rows [e.RowIndex];
    TextBox tname = (TextBox) row.FindControl ("nam");
    TextBox tques = (TextBox) row.FindControl ("que");
    MySqlCommand cmd = new MySqlCommand ("update exam set name1=@name,ques=@ques where id = @id", con);
    cmd.Parameters.AddWithValue ("@id", id);
    cmd.Parameters.AddWithValue ("@name", tname.Text.Trim ());
    cmd.Parameters.AddWithValue ("@ques", tques.Text.Trim ());
    con.Open ();
    cmd.ExecuteNonQuery ();
    GridView1.EditIndex = - 1;
    bind ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
138
1
Gpt3D_Clone138_1.cs 1 16
Gpt3D_Clone138_1.cs 17 38
----------------------------------------

public static void FlushLogs () {
    int queueCount;
    bool isProcessingLogs;
    while (true) {
        m_waitingThreadEvent.WaitOne ();
        lock (m_isProcessingLogsSync)
        {
            isProcessingLogs = m_isProcessingLogs;
        } lock (m_loggerQueueSync)
        {
            queueCount = m_loggerQueue.Count;
        } if (queueCount == 0 && ! isProcessingLogs)
            break;
        Thread.Sleep (400);
    }
}
----------------------------------------

  public static void FlushLogs () {
    int queueCount;
    bool isProcessingLogs;
    while (true) {
        m_waitingThreadEvent.WaitOne ();
        lock (m_loggerQueueSync)
        {
            queueCount = m_loggerQueue.Count;
            if (queueCount == 0)
            {
                lock (m_isProcessingLogsSync)
                {
                    isProcessingLogs = m_isProcessingLogs;
                    if (! isProcessingLogs) break;
                }
            }
        }
        Thread.Sleep (400);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
138
2
Gpt3D_Clone138_2.cs 1 16
Gpt3D_Clone138_2.cs 17 49
----------------------------------------

public static void FlushLogs () {
    int queueCount;
    bool isProcessingLogs;
    while (true) {
        m_waitingThreadEvent.WaitOne ();
        lock (m_isProcessingLogsSync)
        {
            isProcessingLogs = m_isProcessingLogs;
        } lock (m_loggerQueueSync)
        {
            queueCount = m_loggerQueue.Count;
        } if (queueCount == 0 && ! isProcessingLogs)
            break;
        Thread.Sleep (400);
    }
}
----------------------------------------

  public static void FlushLogs () {
    int queueCount;
    bool isProcessingLogs;
    while (true) {
        // Wait on to the event 
        m_waitingThreadEvent.WaitOne ();
        // try to acquire a lock on both objects 
        try 
        {
            Monitor.TryEnter(m_isProcessingLogsSync);
            // assign the status of isProcessingLogs
            isProcessingLogs = m_isProcessingLogs;
            Monitor.TryEnter(m_loggerQueueSync);
            // assign the amount of items in the queue
            queueCount = m_loggerQueue.Count;
            // if both checks are completed and valid, exit the loop
            if (queueCount == 0 && ! isProcessingLogs)
                break;
            // Sleep for 400 ms 
            Thread.Sleep (400);
        } 
        finally 
        {
            // release locks
            Monitor.Exit(m_isProcessingLogsSync);
            Monitor.Exit(m_loggerQueueSync);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
138
3
Gpt3D_Clone138_3.cs 1 16
Gpt3D_Clone138_3.cs 17 35
----------------------------------------

public static void FlushLogs () {
    int queueCount;
    bool isProcessingLogs;
    while (true) {
        m_waitingThreadEvent.WaitOne ();
        lock (m_isProcessingLogsSync)
        {
            isProcessingLogs = m_isProcessingLogs;
        } lock (m_loggerQueueSync)
        {
            queueCount = m_loggerQueue.Count;
        } if (queueCount == 0 && ! isProcessingLogs)
            break;
        Thread.Sleep (400);
    }
}
----------------------------------------

  public static void FlushLogs () {
    int queueCount = 0;
    bool isProcessingLogs = false;
    while (true) {
        m_waitingThreadEvent.WaitOne ();
        lock (m_loggerQueueSync)
        {
            queueCount = m_loggerQueue.Count;
        } lock (m_isProcessingLogsSync)
        {
            isProcessingLogs = m_isProcessingLogs;
        }
        if (queueCount == 0 && ! isProcessingLogs)
            break;
        Thread.Sleep (400);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
138
5
Gpt3D_Clone138_5.cs 1 16
Gpt3D_Clone138_5.cs 17 29
----------------------------------------

public static void FlushLogs () {
    int queueCount;
    bool isProcessingLogs;
    while (true) {
        m_waitingThreadEvent.WaitOne ();
        lock (m_isProcessingLogsSync)
        {
            isProcessingLogs = m_isProcessingLogs;
        } lock (m_loggerQueueSync)
        {
            queueCount = m_loggerQueue.Count;
        } if (queueCount == 0 && ! isProcessingLogs)
            break;
        Thread.Sleep (400);
    }
}
----------------------------------------

  public static void FlushLogs () {
    int queueCount;
    bool isProcessingLogs;
    m_waitingThreadEvent.WaitOne ();
    do {
        queueCount = m_loggerQueue.Count;
        if (m_loggerQueue.Count == 0 && ! m_isProcessingLogs)
            break;
        Thread.Sleep (400);
    } while (true);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
139
0
Gpt3D_Clone139_0.cs 1 17
Gpt3D_Clone139_0.cs 18 48
----------------------------------------

static void Main (string [] args) {
    string Path = @"C:\Abhishek\Documents";
    string filePath = @"C:\Abhishek\Documents.txt";
    bool isDirExists = Directory.Exists (Path);
    bool isFileExists = File.Exists (filePath);
    if (isDirExists) {
        Console.WriteLine ("Directory Exists");
    } else {
        Console.WriteLine ("Directory does not exists");
    }
    if (isFileExists) {
        Console.WriteLine ("File Exists");
    } else {
        Console.WriteLine ("File does not exists");
    }
    Console.ReadKey ();
}
----------------------------------------

  static void Main(string[] args) 
{ 
    bool isDirExists; 
    bool isFileExists; 
    string Path = @"C:\Abhishek\Documents"; 
    isDirExists = Directory.Exists(Path); 
    string filePath = @"C:\Abhishek\Documents.txt"; 
    isFileExists = File.Exists(filePath); 
    if (isDirExists) 
    { 
        Console.WriteLine("Directory Exists"); 
    } 
    else 
    { 
        Console.WriteLine("Directory does not exists"); 
    } 
    if (isFileExists) 
    { 
        Console.WriteLine("File Exists"); 
    } 
    else 
    { 
        Console.WriteLine("File does not exists"); 
    } 
    Console.ReadKey(); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
139
1
Gpt3D_Clone139_1.cs 1 17
Gpt3D_Clone139_1.cs 18 35
----------------------------------------

static void Main (string [] args) {
    string Path = @"C:\Abhishek\Documents";
    string filePath = @"C:\Abhishek\Documents.txt";
    bool isDirExists = Directory.Exists (Path);
    bool isFileExists = File.Exists (filePath);
    if (isDirExists) {
        Console.WriteLine ("Directory Exists");
    } else {
        Console.WriteLine ("Directory does not exists");
    }
    if (isFileExists) {
        Console.WriteLine ("File Exists");
    } else {
        Console.WriteLine ("File does not exists");
    }
    Console.ReadKey ();
}
----------------------------------------

  static void Main (string [] args) {
    string Path = @"C:\Abhishek\Documents";
    string filePath = @"C:\Abhishek\Documents.txt";
    
    if (Directory.Exists (Path)) {
        Console.WriteLine ("Directory Exists");
    } else {
        Console.WriteLine ("Directory does not exists");
    }
    if (File.Exists (filePath)) {
        Console.WriteLine ("File Exists");
    } else {
        Console.WriteLine ("File does not exists");
    }
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
141
1
Gpt3D_Clone141_1.cs 1 12
Gpt3D_Clone141_1.cs 13 25
----------------------------------------

public string GetResultsWithHyphen (string inText) {
    var counter = 0;
    var outString = string.Empty;
    while (counter < inText.Length) {
        if (counter % 4 == 0)
            outString = string.Format ("{0}-{1}", outString, inText.Substring (counter, 1));
        else
            outString += inText.Substring (counter, 1);
        counter ++;
    }
    return outString;
}
----------------------------------------

 public string GetResultsWithHyphen (string inText) {
    var outString = string.Empty;
    for(int i = 0; i < inText.Length; i++)
    {
        if (i % 4 == 0)
            outString += string.Format("-{0}{1}",inText.Substring (i, 1), outString);
        else
            outString += inText.Substring (i, 1);
    }
    return outString;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
141
3
Gpt3D_Clone141_3.cs 1 12
Gpt3D_Clone141_3.cs 13 25
----------------------------------------

public string GetResultsWithHyphen (string inText) {
    var counter = 0;
    var outString = string.Empty;
    while (counter < inText.Length) {
        if (counter % 4 == 0)
            outString = string.Format ("{0}-{1}", outString, inText.Substring (counter, 1));
        else
            outString += inText.Substring (counter, 1);
        counter ++;
    }
    return outString;
}
----------------------------------------

 public string GetResultsWithHyphen (string inText) {
    var outString = string.Empty;
    for(int i = 0; i < inText.Length; i++)
    {
        if (i % 4 == 0)
            outString += string.Format("-{0}",inText.Substring (i, 1));
        else
            outString += inText.Substring (i, 1);
    }
    return outString;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
141
5
Gpt3D_Clone141_5.cs 1 12
Gpt3D_Clone141_5.cs 13 25
----------------------------------------

public string GetResultsWithHyphen (string inText) {
    var counter = 0;
    var outString = string.Empty;
    while (counter < inText.Length) {
        if (counter % 4 == 0)
            outString = string.Format ("{0}-{1}", outString, inText.Substring (counter, 1));
        else
            outString += inText.Substring (counter, 1);
        counter ++;
    }
    return outString;
}
----------------------------------------

 public string GetResultsWithHyphen (string inText) {
    var outString = string.Empty;
    for (int i = 0; i < inText.Length; i++)
    {
        if (i % 4 == 0)
            outString += string.Format ("{1}-{0}", inText.Substring (i, 1), outString);
        else
            outString += inText.Substring (i, 1);
    }
    return outString;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
142
0
Gpt3D_Clone142_0.cs 1 18
Gpt3D_Clone142_0.cs 19 41
----------------------------------------

public int Compare (string x, string y) {
    string [] xs = x.Split ('.');
    string [] ys = y.Split ('.');
    int maxLoop = Math.Min (xs.Length, ys.Length);
    for (int i = 0; i < maxLoop; i ++) {
        if (int.Parse (xs [i]) > int.Parse (ys [i])) {
            return 1;
        } else if (int.Parse (xs [i]) < int.Parse (ys [i])) {
            return - 1;
        }
    }
    if (xs.Length > ys.Length) {
        return 1;
    } else if (xs.Length < ys.Length) {
        return - 1;
    }
    return 0;
}
----------------------------------------

  public int Compare (string x, string y) {
    string [] xs = x.Split ('.');
    string [] ys = y.Split ('.');
    int maxLoop = Math.Min (xs.Length, ys.Length);
    int compareResult = 0;
    for (int i = 0; i < maxLoop; i ++) {
        if (int.Parse (xs [i]) > int.Parse (ys [i])) {
            compareResult = 100000;
            break;
        } else if (int.Parse (xs [i]) < int.Parse (ys [i])) {
            compareResult = - 100000;
            break;
        }
    }
    if (xs.Length > ys.Length) {
        compareResult = 1;
    } else if (xs.Length < ys.Length) {
        compareResult = - 1;
    }
    return compareResult;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
142
1
Gpt3D_Clone142_1.cs 1 18
Gpt3D_Clone142_1.cs 19 41
----------------------------------------

public int Compare (string x, string y) {
    string [] xs = x.Split ('.');
    string [] ys = y.Split ('.');
    int maxLoop = Math.Min (xs.Length, ys.Length);
    for (int i = 0; i < maxLoop; i ++) {
        if (int.Parse (xs [i]) > int.Parse (ys [i])) {
            return 1;
        } else if (int.Parse (xs [i]) < int.Parse (ys [i])) {
            return - 1;
        }
    }
    if (xs.Length > ys.Length) {
        return 1;
    } else if (xs.Length < ys.Length) {
        return - 1;
    }
    return 0;
}
----------------------------------------

 public int Compare (string x, string y) {
    string [] xs = x.Split ('.');
    string [] ys = y.Split ('.');
    int maxLoop = Math.Min (xs.Length, ys.Length);
    int compareResult = 0;
    for (int i = 0; i < maxLoop; i ++) {
        if (int.Parse (xs [i]) > int.Parse (ys [i])) {
            compareResult = 11111;
            break;
        } else if (int.Parse (xs [i]) < int.Parse (ys [i])) {
            compareResult = - 11111;
            break;
        }
    }
    if (xs.Length > ys.Length) {
        compareResult = 1;
    } else if (xs.Length < ys.Length) {
        compareResult = - 1;
    }
    return compareResult;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
142
2
Gpt3D_Clone142_2.cs 1 18
Gpt3D_Clone142_2.cs 19 41
----------------------------------------

public int Compare (string x, string y) {
    string [] xs = x.Split ('.');
    string [] ys = y.Split ('.');
    int maxLoop = Math.Min (xs.Length, ys.Length);
    for (int i = 0; i < maxLoop; i ++) {
        if (int.Parse (xs [i]) > int.Parse (ys [i])) {
            return 1;
        } else if (int.Parse (xs [i]) < int.Parse (ys [i])) {
            return - 1;
        }
    }
    if (xs.Length > ys.Length) {
        return 1;
    } else if (xs.Length < ys.Length) {
        return - 1;
    }
    return 0;
}
----------------------------------------

 public int Compare (string x, string y) {
    string [] xs = x.Split ('.');
    string [] ys = y.Split ('.');
    int maxLoop = Math.Min (xs.Length, ys.Length);
    int compareResult = 0;
    for (int i = 0; i < maxLoop; i ++) {
        if (int.Parse (xs [i]) > int.Parse (ys [i])) {
            compareResult = 10000;
            break;
        } else if (int.Parse (xs [i]) < int.Parse (ys [i])) {
            compareResult = - 10000;
            break;
        }
    }
    if (xs.Length > ys.Length) {
        compareResult = 1;
    } else if (xs.Length < ys.Length) {
        compareResult = - 1;
    }
    return compareResult;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
142
3
Gpt3D_Clone142_3.cs 1 18
Gpt3D_Clone142_3.cs 19 41
----------------------------------------

public int Compare (string x, string y) {
    string [] xs = x.Split ('.');
    string [] ys = y.Split ('.');
    int maxLoop = Math.Min (xs.Length, ys.Length);
    for (int i = 0; i < maxLoop; i ++) {
        if (int.Parse (xs [i]) > int.Parse (ys [i])) {
            return 1;
        } else if (int.Parse (xs [i]) < int.Parse (ys [i])) {
            return - 1;
        }
    }
    if (xs.Length > ys.Length) {
        return 1;
    } else if (xs.Length < ys.Length) {
        return - 1;
    }
    return 0;
}
----------------------------------------

 public int Compare (string x, string y) {
    string [] xs = x.Split ('.');
    string [] ys = y.Split ('.');
    int maxLoop = Math.Min (xs.Length, ys.Length);
    int compareResult = 0;
    for (int i = 0; i < maxLoop; i ++) {
        if (int.Parse (xs [i]) > int.Parse (ys [i])) {
            compareResult = 99999;
            break;
        } else if (int.Parse (xs [i]) < int.Parse (ys [i])) {
            compareResult = - 99999;
            break;
        }
    }
    if (xs.Length > ys.Length) {
        compareResult = 99999;
    } else if (xs.Length < ys.Length) {
        compareResult = - 99999;
    }
    return compareResult;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
142
4
Gpt3D_Clone142_4.cs 1 18
Gpt3D_Clone142_4.cs 19 41
----------------------------------------

public int Compare (string x, string y) {
    string [] xs = x.Split ('.');
    string [] ys = y.Split ('.');
    int maxLoop = Math.Min (xs.Length, ys.Length);
    for (int i = 0; i < maxLoop; i ++) {
        if (int.Parse (xs [i]) > int.Parse (ys [i])) {
            return 1;
        } else if (int.Parse (xs [i]) < int.Parse (ys [i])) {
            return - 1;
        }
    }
    if (xs.Length > ys.Length) {
        return 1;
    } else if (xs.Length < ys.Length) {
        return - 1;
    }
    return 0;
}
----------------------------------------

 public int Compare (string x, string y) {
    string [] xs = x.Split ('.');
    string [] ys = y.Split ('.');
    int maxLoop = Math.Min (xs.Length, ys.Length);
    int compareResult = 0;
    for (int i = 0; i < maxLoop; i ++) {
        if (int.Parse (xs [i]) > int.Parse (ys [i])) {
            compareResult = 1;
            break;
        } else if (int.Parse (xs [i]) < int.Parse (ys [i])) {
            compareResult = - 1;
            break;
        }
    }
    if (xs.Length > ys.Length) {
        compareResult = 1;
    } else if (xs.Length < ys.Length) {
        compareResult = - 1;
    }
    return compareResult;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
142
5
Gpt3D_Clone142_5.cs 1 18
Gpt3D_Clone142_5.cs 19 41
----------------------------------------

public int Compare (string x, string y) {
    string [] xs = x.Split ('.');
    string [] ys = y.Split ('.');
    int maxLoop = Math.Min (xs.Length, ys.Length);
    for (int i = 0; i < maxLoop; i ++) {
        if (int.Parse (xs [i]) > int.Parse (ys [i])) {
            return 1;
        } else if (int.Parse (xs [i]) < int.Parse (ys [i])) {
            return - 1;
        }
    }
    if (xs.Length > ys.Length) {
        return 1;
    } else if (xs.Length < ys.Length) {
        return - 1;
    }
    return 0;
}
----------------------------------------

  public int Compare (string x, string y) {
    string [] xs = x.Split ('.');
    string [] ys = y.Split ('.');
    int maxLoop = Math.Min (xs.Length, ys.Length);
    int compareResult = 0;
    for (int i = 0; i < maxLoop; i ++) {
        if (int.Parse (xs [i]) > int.Parse (ys [i])) {
            compareResult = 1000;
            break;
        } else if (int.Parse (xs [i]) < int.Parse (ys [i])) {
            compareResult = - 1000;
            break;
        }
    }
    if (xs.Length > ys.Length) {
        compareResult = 1;
    } else if (xs.Length < ys.Length) {
        compareResult = - 1;
    }
    return compareResult;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
142
6
Gpt3D_Clone142_6.cs 1 18
Gpt3D_Clone142_6.cs 19 41
----------------------------------------

public int Compare (string x, string y) {
    string [] xs = x.Split ('.');
    string [] ys = y.Split ('.');
    int maxLoop = Math.Min (xs.Length, ys.Length);
    for (int i = 0; i < maxLoop; i ++) {
        if (int.Parse (xs [i]) > int.Parse (ys [i])) {
            return 1;
        } else if (int.Parse (xs [i]) < int.Parse (ys [i])) {
            return - 1;
        }
    }
    if (xs.Length > ys.Length) {
        return 1;
    } else if (xs.Length < ys.Length) {
        return - 1;
    }
    return 0;
}
----------------------------------------

 public int Compare (string x, string y) {
    string [] xs = x.Split ('.');
    string [] ys = y.Split ('.');
    int maxLoop = Math.Min (xs.Length, ys.Length);
    int compareResult = 0;
    for (int i = 0; i < maxLoop; i ++) {
        if (int.Parse (xs [i]) > int.Parse (ys [i])) {
            compareResult = 55555;
            break;
        } else if (int.Parse (xs [i]) < int.Parse (ys [i])) {
            compareResult = - 55555;
            break;
        }
    }
    if (xs.Length > ys.Length) {
        compareResult = 55555;
    } else if (xs.Length < ys.Length) {
        compareResult = - 55555;
    }
    return compareResult;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
143
4
Gpt3D_Clone143_4.cs 1 18
Gpt3D_Clone143_4.cs 19 50
----------------------------------------

public int Compare (string x, string y) {
    string [] xs = x.Split ('.');
    string [] ys = y.Split ('.');
    int maxLoop = Math.Min (xs.Length, ys.Length);
    for (int i = 0; i < maxLoop; i ++) {
        if (int.Parse (xs [i]) > int.Parse (ys [i])) {
            return 1;
        } else if (int.Parse (xs [i]) < int.Parse (ys [i])) {
            return - 1;
        }
    }
    if (xs.Length > ys.Length) {
        return 1;
    } else if (xs.Length < ys.Length) {
        return - 1;
    }
    return 0;
}
----------------------------------------

 public int Compare(string x, string y)
{
    string[] xSplit = x.Split('.');
    string[] ySplit = y.Split('.');
    int minLen = Math.Min(xSplit.Length, ySplit.Length);
    for (int i = 0; i < minLen; i++)
    {
        if (int.Parse(xSplit[i]) > int.Parse(ySplit[i]))
        {
            return 1;
        }
        else if (int.Parse(xSplit[i]) < int.Parse(ySplit[i]))
        {
            return -1;
        }
    }
    int xLen = xSplit.Length;
    int yLen = ySplit.Length;
    if (xLen > yLen)
    {
        return 1;
    }
    else if (xLen < yLen)
    {
        return -1;
    }
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
143
6
Gpt3D_Clone143_6.cs 1 18
Gpt3D_Clone143_6.cs 19 50
----------------------------------------

public int Compare (string x, string y) {
    string [] xs = x.Split ('.');
    string [] ys = y.Split ('.');
    int maxLoop = Math.Min (xs.Length, ys.Length);
    for (int i = 0; i < maxLoop; i ++) {
        if (int.Parse (xs [i]) > int.Parse (ys [i])) {
            return 1;
        } else if (int.Parse (xs [i]) < int.Parse (ys [i])) {
            return - 1;
        }
    }
    if (xs.Length > ys.Length) {
        return 1;
    } else if (xs.Length < ys.Length) {
        return - 1;
    }
    return 0;
}
----------------------------------------

 public int Compare(string x, string y)
{
    string[] xSplit = x.Split('.');
    string[] ySplit = y.Split('.');
    int xLen = xSplit.Length;
    int yLen = ySplit.Length;
    int minLen = Math.Min(xLen, yLen);
    for (int i = 0; i < minLen; i++)
    {
        if (int.Parse(xSplit[i]) > int.Parse(ySplit[i]))
        {
            return 1;
        }
        else if (int.Parse(xSplit[i]) < int.Parse(ySplit[i]))
        {
            return -1;
        }
    }
    if (xLen > yLen)
    {
        return 1;
    }
    else if (xLen < yLen)
    {
        return -1;
    }
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
143
7
Gpt3D_Clone143_7.cs 1 18
Gpt3D_Clone143_7.cs 19 50
----------------------------------------

public int Compare (string x, string y) {
    string [] xs = x.Split ('.');
    string [] ys = y.Split ('.');
    int maxLoop = Math.Min (xs.Length, ys.Length);
    for (int i = 0; i < maxLoop; i ++) {
        if (int.Parse (xs [i]) > int.Parse (ys [i])) {
            return 1;
        } else if (int.Parse (xs [i]) < int.Parse (ys [i])) {
            return - 1;
        }
    }
    if (xs.Length > ys.Length) {
        return 1;
    } else if (xs.Length < ys.Length) {
        return - 1;
    }
    return 0;
}
----------------------------------------

 public int Compare(string x, string y) 
{ 
    string[] xSplit = x.Split('.'); 
    string[] ySplit = y.Split('.'); 
    int minLen = Math.Min(xSplit.Length, ySplit.Length); 
    for (int i = 0; i < minLen; i++) 
    { 
        int xVal = int.Parse(xSplit[i]); 
        int yVal = int.Parse(ySplit[i]); 
        if (xVal > yVal) 
        { 
            return 1; 
        } 
        else if (xVal < yVal) 
        { 
            return -1; 
        } 
    } 
    if (xSplit.Length > ySplit.Length) 
    { 
        return 1; 
    } 
    else if (xSplit.Length < ySplit.Length) 
    { 
        return -1; 
    } 
    return 0; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
143
8
Gpt3D_Clone143_8.cs 1 18
Gpt3D_Clone143_8.cs 19 46
----------------------------------------

public int Compare (string x, string y) {
    string [] xs = x.Split ('.');
    string [] ys = y.Split ('.');
    int maxLoop = Math.Min (xs.Length, ys.Length);
    for (int i = 0; i < maxLoop; i ++) {
        if (int.Parse (xs [i]) > int.Parse (ys [i])) {
            return 1;
        } else if (int.Parse (xs [i]) < int.Parse (ys [i])) {
            return - 1;
        }
    }
    if (xs.Length > ys.Length) {
        return 1;
    } else if (xs.Length < ys.Length) {
        return - 1;
    }
    return 0;
}
----------------------------------------

 public int Compare(string x, string y) 
{ 
    string[] xSplit = x.Split('.'); 
    string[] ySplit = y.Split('.'); 
    int minLen = Math.Min(xSplit.Length, ySplit.Length); 
    for (int i = 0; i < minLen; i++) 
    { 
        int xNum = int.Parse(xSplit[i]); 
        int yNum = int.Parse(ySplit[i]); 
        if (xNum != yNum) 
        { 
            return (xNum > yNum) ? 1 : -1; 
        } 
    } 
    if (xSplit.Length > ySplit.Length) 
    { 
        return 1; 
    } 
    else if (xSplit.Length < ySplit.Length) 
    { 
        return -1; 
    } 
    return 0; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
144
3
Gpt3D_Clone144_3.cs 1 10
Gpt3D_Clone144_3.cs 11 25
----------------------------------------

private int Compare (string [] x, string [] y) {
    if (x.Length > y.Length)
        return - Compare (y, x);
    for (int i = 0; i != x.Length; ++ i) {
        int cmp = int.Parse (x [i]).CompareTo (int.Parse (y [i]));
        if (cmp != 0)
            return cmp;
    }
    return x.Length == y.Length ? 0 : - 1;
}
----------------------------------------

  private int Compare(string[] x, string[] y)
    {
        if (x.Length > y.Length)
            return -Compare(y, x);
        for (int i = 0; i < x.Length; i++)
        {
            int cmp = Convert.ToInt32(x[i]).CompareTo(Convert.ToInt32(y[i]));
            if (cmp != 0)
                return cmp;
        }
        return x.Length == y.Length ? 0 : -1;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
147
3
Gpt3D_Clone147_3.cs 1 15
Gpt3D_Clone147_3.cs 16 57
----------------------------------------

static int IndexOfLongestRun (string input) {
    int longestRunStart = - 1, longestRunLength = 0;
    for (int i = 0; i < input.Length;) {
        var runValue = input [i];
        int runStart = i;
        while (++ i < input.Length && input [i] == runValue) {
        }
        int runLength = i - runStart;
        if (longestRunLength < runLength) {
            longestRunStart = runStart;
            longestRunLength = runLength;
        }
    }
    return longestRunStart;
}
----------------------------------------

 static int IndexOfLongestRun(string s)
    {
        int currentRunStart = -1, longestRunStart = -1, longestRunLength = 0;
        for (int i = 0; i < s.Length;)
        {
            char currentRunSymbol = s[i];
            currentRunStart = i;
            for (int j = i + 1; j < s.Length && s[j] == currentRunSymbol; j++)
                i++;
            int currentRunLength = i - currentRunStart;
            if (longestRunLength < currentRunLength)
            {
                longestRunStart = currentRunStart;
                longestRunLength = currentRunLength;
            }
            i++;
        }
        return longestRunStart;
    }
 static int IndexOfLongestRun(string s)
{
    int longestRunStart = -1, longestRunEnd = -1;
    int longestRunLength = 0;
    for (int i = 0; i < s.Length; i++)
    {
        int runStart = i;
        char c = s[runStart];
        while (i + 1 < s.Length && s[i + 1] == c)
            i++;
        int runLength = i - runStart + 1;
        if (runLength > longestRunLength)
        {
            longestRunStart = runStart;
            longestRunEnd = i;
            longestRunLength = runLength;
        }
    }
    return longestRunStart;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
147
4
Gpt3D_Clone147_4.cs 1 15
Gpt3D_Clone147_4.cs 16 33
----------------------------------------

static int IndexOfLongestRun (string input) {
    int longestRunStart = - 1, longestRunLength = 0;
    for (int i = 0; i < input.Length;) {
        var runValue = input [i];
        int runStart = i;
        while (++ i < input.Length && input [i] == runValue) {
        }
        int runLength = i - runStart;
        if (longestRunLength < runLength) {
            longestRunStart = runStart;
            longestRunLength = runLength;
        }
    }
    return longestRunStart;
}
----------------------------------------

 static int IndexOfLongestRun (string input) {
    int longestRunStart = 0, longestRunLength = 0;
    for (int i = 0; i < input.Length; ++i) {
        var runValue = input [i];
        int runStart = i;
        while (i < input.Length && input[i] == runValue) {
            ++i;
        }
        int runLength = i - runStart;
        if (longestRunLength < runLength) {
            longestRunStart = runStart;
            longestRunLength = runLength;
        }
    }
    return longestRunStart;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
147
5
Gpt3D_Clone147_5.cs 1 15
Gpt3D_Clone147_5.cs 16 51
----------------------------------------

static int IndexOfLongestRun (string input) {
    int longestRunStart = - 1, longestRunLength = 0;
    for (int i = 0; i < input.Length;) {
        var runValue = input [i];
        int runStart = i;
        while (++ i < input.Length && input [i] == runValue) {
        }
        int runLength = i - runStart;
        if (longestRunLength < runLength) {
            longestRunStart = runStart;
            longestRunLength = runLength;
        }
    }
    return longestRunStart;
}
----------------------------------------

 static int IndexOfLongestRun(string s)  
    {             
        int longestRunStart = -1;  
        int longestRunLength = 0;
        for (int i = 0; i < s.Length; i++) {  
            int currRunStart = i;  
            char currRunSymbol = s[currRunStart];  
            while (i + 1 < s.Length && s[i + 1] == currRunSymbol)  
                i++;  
            int currRunLength = i - currRunStart + 1;  
            if (currRunLength > longestRunLength) {  
                longestRunStart = currRunStart;  
                longestRunLength = currRunLength;  
            }  
        }  
        return longestRunStart;  
    }  
 static int IndexOfLongestRun (string input) {
    int longestRunStart = -1, longestRunLength = 0;
    int i = 0;
    while (i < input.Length) {
        int runStart = i;
        char runValue = input[i];
        while (++i < input.Length && runValue == input[i]) {
        }
        int runLength = i - runStart;
        if (longestRunLength < runLength) {
            longestRunStart = runStart;
            longestRunLength = runLength;
        }
    }
    return longestRunStart;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
155
5
Gpt3D_Clone155_5.cs 1 10
Gpt3D_Clone155_5.cs 11 26
----------------------------------------

public override int Read (byte [] buffer, int offset, int count) {
    if (streams.Count == 0)
        return 0;
    int bytesRead = streams.Peek ().Read (buffer, offset, count);
    if (bytesRead == 0) {
        streams.Dequeue ().Dispose ();
        bytesRead += Read (buffer, offset + bytesRead, count - bytesRead);
    }
    return bytesRead;
}
----------------------------------------

 public override int Read (byte [] buffer, int offset, int count) {
    if (streams.Count == 0)
        return 0;
    int bytesRead = 0;
    while (bytesRead < count) {
        bytesRead += streams.Peek ().Read (buffer, offset+bytesRead, count-bytesRead);
        if (bytesRead == 0) {
            streams.Dequeue ().Dispose ();
        } else {
            break;
        }
    }
    return bytesRead;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
155
7
Gpt3D_Clone155_7.cs 1 10
Gpt3D_Clone155_7.cs 11 24
----------------------------------------

public override int Read (byte [] buffer, int offset, int count) {
    if (streams.Count == 0)
        return 0;
    int bytesRead = streams.Peek ().Read (buffer, offset, count);
    if (bytesRead == 0) {
        streams.Dequeue ().Dispose ();
        bytesRead += Read (buffer, offset + bytesRead, count - bytesRead);
    }
    return bytesRead;
}
----------------------------------------

 public override int Read (byte [] buffer, int offset, int count) {
    if (streams.Count == 0)
        return 0;
    int bytesRead = streams.Peek ().Read (buffer, offset, count);
    int _offset = 0;
    while (bytesRead == 0 && streams.Count > 0) {
        streams.Dequeue ().Dispose ();
        _offset = offset + bytesRead;
        bytesRead += streams.Peek ().Read (buffer, _offset, count - bytesRead);
    }
    return bytesRead;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
155
8
Gpt3D_Clone155_8.cs 1 10
Gpt3D_Clone155_8.cs 11 23
----------------------------------------

public override int Read (byte [] buffer, int offset, int count) {
    if (streams.Count == 0)
        return 0;
    int bytesRead = streams.Peek ().Read (buffer, offset, count);
    if (bytesRead == 0) {
        streams.Dequeue ().Dispose ();
        bytesRead += Read (buffer, offset + bytesRead, count - bytesRead);
    }
    return bytesRead;
}
----------------------------------------

 public override int Read (byte [] buffer, int offset, int count) {
    if (streams.Count == 0)
        return 0;
    int bytesRead = streams.Peek ().Read (buffer, offset, count);
    if (bytesRead > 0)
        return bytesRead;
    else {
        streams.Dequeue ().Dispose ();
        return Read (buffer, offset, count);
    }    
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
155
9
Gpt3D_Clone155_9.cs 1 10
Gpt3D_Clone155_9.cs 11 24
----------------------------------------

public override int Read (byte [] buffer, int offset, int count) {
    if (streams.Count == 0)
        return 0;
    int bytesRead = streams.Peek ().Read (buffer, offset, count);
    if (bytesRead == 0) {
        streams.Dequeue ().Dispose ();
        bytesRead += Read (buffer, offset + bytesRead, count - bytesRead);
    }
    return bytesRead;
}
----------------------------------------

 public override int Read (byte [] buffer, int offset, int count) {
    int bytesRead = 0;
    if (streams.Count > 0) {
        bytesRead = streams.Peek().Read(buffer, offset, count);
        if (bytesRead == 0) {
            streams.Dequeue().Dispose();
            bytesRead += Read(buffer, offset + bytesRead, count - bytesRead);
        }
    }
    return bytesRead;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
158
0
Gpt3D_Clone158_0.cs 1 11
Gpt3D_Clone158_0.cs 12 26
----------------------------------------

public void ResetFields (Control.ControlCollection Controls) {
    foreach (Control control in Controls) {
        if (control is TextBox) {
            control.Text = string.Empty;
        } else if (control is NumericUpDown) {
            ((NumericUpDown) control).Value = 3;
        } else if (control.Controls.Count > 0) {
            this.ResetFields (control.Controls);
        }
    }
}
----------------------------------------

  public void ResetFields (Control.ControlCollection Controls) {
    foreach (Control control in Controls) {
        if (control is TextBox) {
            control.Text = "";
        } else if (control is NumericUpDown) {
            ((NumericUpDown) control).Value = 3;
        } else if (control.Controls.Count > 0) {
            this.ResetFields (control.Controls);
        } else if (control is CheckBox) {
            ((CheckBox) control).Checked = false;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
158
1
Gpt3D_Clone158_1.cs 1 11
Gpt3D_Clone158_1.cs 12 26
----------------------------------------

public void ResetFields (Control.ControlCollection Controls) {
    foreach (Control control in Controls) {
        if (control is TextBox) {
            control.Text = string.Empty;
        } else if (control is NumericUpDown) {
            ((NumericUpDown) control).Value = 3;
        } else if (control.Controls.Count > 0) {
            this.ResetFields (control.Controls);
        }
    }
}
----------------------------------------

  public void ResetFields (Control.ControlCollection Controls) {
    foreach (Control control in Controls) {
        if (control is TextBox) {
            control.Text = "N/A";
        } else if (control is NumericUpDown) {
            ((NumericUpDown) control).Value = 0;
        } else if (control.Controls.Count > 0) {
            this.ResetFields (control.Controls);
        } else if (control is CheckBox) {
            ((CheckBox) control).Checked = true;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
158
2
Gpt3D_Clone158_2.cs 1 11
Gpt3D_Clone158_2.cs 12 26
----------------------------------------

public void ResetFields (Control.ControlCollection Controls) {
    foreach (Control control in Controls) {
        if (control is TextBox) {
            control.Text = string.Empty;
        } else if (control is NumericUpDown) {
            ((NumericUpDown) control).Value = 3;
        } else if (control.Controls.Count > 0) {
            this.ResetFields (control.Controls);
        }
    }
}
----------------------------------------

  public void ResetFields (Control.ControlCollection Controls) {
    foreach (Control control in Controls) {
        if (control is TextBox) {
            control.Text = "Not applicable";
        } else if (control is NumericUpDown) {
            ((NumericUpDown) control).Value = 5;
        } else if (control.Controls.Count > 0) {
            this.ResetFields (control.Controls);
        } else if (control is CheckBox) {
            ((CheckBox) control).Checked = false;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
158
3
Gpt3D_Clone158_3.cs 1 11
Gpt3D_Clone158_3.cs 12 26
----------------------------------------

public void ResetFields (Control.ControlCollection Controls) {
    foreach (Control control in Controls) {
        if (control is TextBox) {
            control.Text = string.Empty;
        } else if (control is NumericUpDown) {
            ((NumericUpDown) control).Value = 3;
        } else if (control.Controls.Count > 0) {
            this.ResetFields (control.Controls);
        }
    }
}
----------------------------------------

  public void ResetFields (Control.ControlCollection Controls) {
    foreach (Control control in Controls) {
        if (control is TextBox) {
            control.Text = " ";
        } else if (control is NumericUpDown) {
            ((NumericUpDown) control).Value = 0;
        } else if (control.Controls.Count > 0) {
            this.ResetFields (control.Controls);
        } else if (control is CheckBox) {
            ((CheckBox) control).Checked = false;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
158
4
Gpt3D_Clone158_4.cs 1 11
Gpt3D_Clone158_4.cs 12 26
----------------------------------------

public void ResetFields (Control.ControlCollection Controls) {
    foreach (Control control in Controls) {
        if (control is TextBox) {
            control.Text = string.Empty;
        } else if (control is NumericUpDown) {
            ((NumericUpDown) control).Value = 3;
        } else if (control.Controls.Count > 0) {
            this.ResetFields (control.Controls);
        }
    }
}
----------------------------------------

  public void ResetFields (Control.ControlCollection Controls) {
    foreach (Control control in Controls) {
        if (control is TextBox) {
            control.Text = "Not set";
        } else if (control is NumericUpDown) {
            ((NumericUpDown) control).Value = 6;
        } else if (control.Controls.Count > 0) {
            this.ResetFields (control.Controls);
        } else if (control is CheckBox) {
            ((CheckBox) control).Checked = false;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
158
5
Gpt3D_Clone158_5.cs 1 11
Gpt3D_Clone158_5.cs 12 26
----------------------------------------

public void ResetFields (Control.ControlCollection Controls) {
    foreach (Control control in Controls) {
        if (control is TextBox) {
            control.Text = string.Empty;
        } else if (control is NumericUpDown) {
            ((NumericUpDown) control).Value = 3;
        } else if (control.Controls.Count > 0) {
            this.ResetFields (control.Controls);
        }
    }
}
----------------------------------------

  public void ResetFields (Control.ControlCollection Controls) {
    foreach (Control control in Controls) {
        if (control is TextBox) {
            control.Text = null;
        } else if (control is NumericUpDown) {
            ((NumericUpDown) control).Value = 0;
        } else if (control.Controls.Count > 0) {
            this.ResetFields (control.Controls);
        } else if (control is CheckBox) {
            ((CheckBox) control).Checked = false;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
158
6
Gpt3D_Clone158_6.cs 1 11
Gpt3D_Clone158_6.cs 12 26
----------------------------------------

public void ResetFields (Control.ControlCollection Controls) {
    foreach (Control control in Controls) {
        if (control is TextBox) {
            control.Text = string.Empty;
        } else if (control is NumericUpDown) {
            ((NumericUpDown) control).Value = 3;
        } else if (control.Controls.Count > 0) {
            this.ResetFields (control.Controls);
        }
    }
}
----------------------------------------

  public void ResetFields (Control.ControlCollection Controls) {
    foreach (Control control in Controls) {
        if (control is TextBox) {
            control.Text = "";
        } else if (control is NumericUpDown) {
            ((NumericUpDown) control).Value = 1;
        } else if (control.Controls.Count > 0) {
            this.ResetFields (control.Controls);
        } else if (control is CheckBox) {
            ((CheckBox) control).Checked = true;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
158
7
Gpt3D_Clone158_7.cs 1 11
Gpt3D_Clone158_7.cs 12 26
----------------------------------------

public void ResetFields (Control.ControlCollection Controls) {
    foreach (Control control in Controls) {
        if (control is TextBox) {
            control.Text = string.Empty;
        } else if (control is NumericUpDown) {
            ((NumericUpDown) control).Value = 3;
        } else if (control.Controls.Count > 0) {
            this.ResetFields (control.Controls);
        }
    }
}
----------------------------------------

  public void ResetFields (Control.ControlCollection Controls) {
    foreach (Control control in Controls) {
        if (control is TextBox) {
            control.Text = "Unspecified";
        } else if (control is NumericUpDown) {
            ((NumericUpDown) control).Value = 8;
        } else if (control.Controls.Count > 0) {
            this.ResetFields (control.Controls);
        } else if (control is CheckBox) {
            ((CheckBox) control).Checked = false;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
158
8
Gpt3D_Clone158_8.cs 1 11
Gpt3D_Clone158_8.cs 12 26
----------------------------------------

public void ResetFields (Control.ControlCollection Controls) {
    foreach (Control control in Controls) {
        if (control is TextBox) {
            control.Text = string.Empty;
        } else if (control is NumericUpDown) {
            ((NumericUpDown) control).Value = 3;
        } else if (control.Controls.Count > 0) {
            this.ResetFields (control.Controls);
        }
    }
}
----------------------------------------

  public void ResetFields (Control.ControlCollection Controls) {
    foreach (Control control in Controls) {
        if (control is TextBox) {
            control.Text = "---";
        } else if (control is NumericUpDown) {
            ((NumericUpDown) control).Value = 10;
        } else if (control.Controls.Count > 0) {
            this.ResetFields (control.Controls);
        } else if (control is CheckBox) {
            ((CheckBox) control).Checked = false;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
158
9
Gpt3D_Clone158_9.cs 1 11
Gpt3D_Clone158_9.cs 12 26
----------------------------------------

public void ResetFields (Control.ControlCollection Controls) {
    foreach (Control control in Controls) {
        if (control is TextBox) {
            control.Text = string.Empty;
        } else if (control is NumericUpDown) {
            ((NumericUpDown) control).Value = 3;
        } else if (control.Controls.Count > 0) {
            this.ResetFields (control.Controls);
        }
    }
}
----------------------------------------

  public void ResetFields (Control.ControlCollection Controls) {
    foreach (Control control in Controls) {
        if (control is TextBox) {
            control.Text = "N/A";
        } else if (control is NumericUpDown) {
            ((NumericUpDown) control).Value = 5;
        } else if (control.Controls.Count > 0) {
            this.ResetFields (control.Controls);
        } else if (control is CheckBox) {
            ((CheckBox) control).Checked = true;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
159
5
Gpt3D_Clone159_5.cs 1 10
Gpt3D_Clone159_5.cs 11 26
----------------------------------------

public void Serialize (object i_objectToSerialize, Stream i_streamToSerializeTo) {
    StringWriter sw = new StringWriter ();
    this.m_regularXmlSerializer.Serialize (sw, i_objectToSerialize);
    XDocument objectXml = XDocument.Parse (sw.ToString ());
    sw.Dispose ();
    SerializeExtra (i_objectToSerialize, objectXml);
    string res = objectXml.ToString ();
    byte [] bytesToWrite = Encoding.UTF8.GetBytes (res);
    i_streamToSerializeTo.Write (bytesToWrite, 0, bytesToWrite.Length);
}
----------------------------------------

 public void Serialize (object i_objectToSerialize, Stream i_streamToSerializeTo)
{
    MemoryStream streamToSerializeTo = new MemoryStream();
    XmlDictionaryWriter xmlDictionaryWriter = XmlDictionaryWriter.CreateTextWriter(streamToSerializeTo);
    XDocument objectXml = new XDocument();
    this.m_regularXmlSerializer.Serialize(xmlDictionaryWriter, i_objectToSerialize);
    xmlDictionaryWriter.Flush();
    objectXml = XDocument.Load(streamToSerializeTo);
    SerializeExtra (i_objectToSerialize, objectXml);
    byte[] bytesToWrite = Encoding.UTF8.GetBytes(objectXml.ToString());
    i_streamToSerializeTo.Write (bytesToWrite, 0, bytesToWrite.Length);
    streamToSerializeTo.Close();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
15
0
Gpt3D_Clone15_0.cs 1 13
Gpt3D_Clone15_0.cs 14 28
----------------------------------------

protected void EndReceive (IAsyncResult async) {
    string msg = "";
    int bytesRead = SimNetSocket.EndReceive (async);
    try {
        msg = ByteArrayToString (ReadBuffer, bytesRead);
    }
    catch (Exception e) {
        Debug.LogError (e);
    }
    Debug.Log ("RAW RECEIVE: " + msg);
    MessageBuffer += msg;
    BeginReceive ();
}
----------------------------------------

 protected void EndReceive (IAsyncResult async) {
    string receivedMsg = "";
    int bytesRead = SimNetSocket.EndReceive (async);
    if (bytesRead > 0)
    {
        MemoryStream stream = new MemoryStream(ReadBuffer, 0, bytesRead);
        BinaryReader reader = new BinaryReader(stream);
        receivedMsg = reader.ReadString();
    }
    Debug.Log ("RAW RECEIVE: " + receivedMsg);
    MessageBuffer += receivedMsg;
    BeginReceive ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
15
1
Gpt3D_Clone15_1.cs 1 13
Gpt3D_Clone15_1.cs 14 26
----------------------------------------

protected void EndReceive (IAsyncResult async) {
    string msg = "";
    int bytesRead = SimNetSocket.EndReceive (async);
    try {
        msg = ByteArrayToString (ReadBuffer, bytesRead);
    }
    catch (Exception e) {
        Debug.LogError (e);
    }
    Debug.Log ("RAW RECEIVE: " + msg);
    MessageBuffer += msg;
    BeginReceive ();
}
----------------------------------------

 protected void EndReceive (IAsyncResult async) {
    string readData = "";
    int bytesRead = SimNetSocket.EndReceive (async);
    if (bytesRead > 0)
    {
        readData = System.Text.Encoding.Default.GetString (ReadBuffer, 0, bytesRead);
    }
    Debug.Log ("RAW RECEIVE: " + readData);
    MessageBuffer += readData;
    BeginReceive ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
15
2
Gpt3D_Clone15_2.cs 1 13
Gpt3D_Clone15_2.cs 14 26
----------------------------------------

protected void EndReceive (IAsyncResult async) {
    string msg = "";
    int bytesRead = SimNetSocket.EndReceive (async);
    try {
        msg = ByteArrayToString (ReadBuffer, bytesRead);
    }
    catch (Exception e) {
        Debug.LogError (e);
    }
    Debug.Log ("RAW RECEIVE: " + msg);
    MessageBuffer += msg;
    BeginReceive ();
}
----------------------------------------

 protected void EndReceive (IAsyncResult async) {
    string receivedData = "";
    int bytesRead = SimNetSocket.EndReceive (async);
    if (bytesRead > 0)
    {
		receivedData = System.Text.Encoding.UTF7.GetString(ReadBuffer, 0, bytesRead);
    }
    Debug.Log ("RAW RECEIVE: " + receivedData);
    MessageBuffer += receivedData;
    BeginReceive ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
15
3
Gpt3D_Clone15_3.cs 1 13
Gpt3D_Clone15_3.cs 14 26
----------------------------------------

protected void EndReceive (IAsyncResult async) {
    string msg = "";
    int bytesRead = SimNetSocket.EndReceive (async);
    try {
        msg = ByteArrayToString (ReadBuffer, bytesRead);
    }
    catch (Exception e) {
        Debug.LogError (e);
    }
    Debug.Log ("RAW RECEIVE: " + msg);
    MessageBuffer += msg;
    BeginReceive ();
}
----------------------------------------

protected void EndReceive (IAsyncResult async) {
    string msgReceived = "";
    int bytesRead = SimNetSocket.EndReceive (async);
    if (bytesRead > 0)
    {
        msgReceived = System.Text.Encoding.Unicode.GetString(ReadBuffer, 0, bytesRead);           
    }
    Debug.Log ("RAW RECEIVE: " + msgReceived);
    MessageBuffer += msgReceived;
    BeginReceive ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
15
5
Gpt3D_Clone15_5.cs 1 13
Gpt3D_Clone15_5.cs 14 26
----------------------------------------

protected void EndReceive (IAsyncResult async) {
    string msg = "";
    int bytesRead = SimNetSocket.EndReceive (async);
    try {
        msg = ByteArrayToString (ReadBuffer, bytesRead);
    }
    catch (Exception e) {
        Debug.LogError (e);
    }
    Debug.Log ("RAW RECEIVE: " + msg);
    MessageBuffer += msg;
    BeginReceive ();
}
----------------------------------------

 protected void EndReceive (IAsyncResult async) {
    string data = "";
    int bytesRead = SimNetSocket.EndReceive (async);
    if (bytesRead > 0)
    {
        data = System.Text.Encoding.GetEncoding("iso-8859-1").GetString(ReadBuffer, 0, bytesRead);
    }
    Debug.Log ("RAW RECEIVE: " + data);
    MessageBuffer += data;
    BeginReceive ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
15
6
Gpt3D_Clone15_6.cs 1 13
Gpt3D_Clone15_6.cs 14 26
----------------------------------------

protected void EndReceive (IAsyncResult async) {
    string msg = "";
    int bytesRead = SimNetSocket.EndReceive (async);
    try {
        msg = ByteArrayToString (ReadBuffer, bytesRead);
    }
    catch (Exception e) {
        Debug.LogError (e);
    }
    Debug.Log ("RAW RECEIVE: " + msg);
    MessageBuffer += msg;
    BeginReceive ();
}
----------------------------------------

protected void EndReceive (IAsyncResult async) {
    string output = "";
    int bytesRead = SimNetSocket.EndReceive (async);
    if (bytesRead > 0)
    {
        output = System.Text.Encoding.ASCII.GetString(ReadBuffer, 0, bytesRead); 
    }
    Debug.Log ("RAW RECEIVE: " + output);
    MessageBuffer += output;
    BeginReceive ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
15
7
Gpt3D_Clone15_7.cs 1 13
Gpt3D_Clone15_7.cs 14 26
----------------------------------------

protected void EndReceive (IAsyncResult async) {
    string msg = "";
    int bytesRead = SimNetSocket.EndReceive (async);
    try {
        msg = ByteArrayToString (ReadBuffer, bytesRead);
    }
    catch (Exception e) {
        Debug.LogError (e);
    }
    Debug.Log ("RAW RECEIVE: " + msg);
    MessageBuffer += msg;
    BeginReceive ();
}
----------------------------------------

 protected void EndReceive (IAsyncResult async) {
    string messageText = "";
    int bytesRead = SimNetSocket.EndReceive (async);
    if (bytesRead > 0)
    {
        messageText = Encoding.Unicode.GetString(ReadBuffer, 0, bytesRead);
    }
    Debug.Log ("RAW RECEIVE: " + messageText);
    MessageBuffer += messageText;
    BeginReceive ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
15
8
Gpt3D_Clone15_8.cs 1 13
Gpt3D_Clone15_8.cs 14 26
----------------------------------------

protected void EndReceive (IAsyncResult async) {
    string msg = "";
    int bytesRead = SimNetSocket.EndReceive (async);
    try {
        msg = ByteArrayToString (ReadBuffer, bytesRead);
    }
    catch (Exception e) {
        Debug.LogError (e);
    }
    Debug.Log ("RAW RECEIVE: " + msg);
    MessageBuffer += msg;
    BeginReceive ();
}
----------------------------------------

protected void EndReceive (IAsyncResult async) {
    string result = "";
    int bytesRead = SimNetSocket.EndReceive (async);
    if (bytesRead > 0)
    {
        result = System.Text.Encoding.UTF8.GetString(ReadBuffer, 0, bytesRead);
    }
    Debug.Log ("RAW RECEIVE: " + result);
    MessageBuffer += result;
    BeginReceive ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
15
9
Gpt3D_Clone15_9.cs 1 13
Gpt3D_Clone15_9.cs 14 26
----------------------------------------

protected void EndReceive (IAsyncResult async) {
    string msg = "";
    int bytesRead = SimNetSocket.EndReceive (async);
    try {
        msg = ByteArrayToString (ReadBuffer, bytesRead);
    }
    catch (Exception e) {
        Debug.LogError (e);
    }
    Debug.Log ("RAW RECEIVE: " + msg);
    MessageBuffer += msg;
    BeginReceive ();
}
----------------------------------------

protected void EndReceive (IAsyncResult async) {
    string stringMsg = "";
    int bytesRead = SimNetSocket.EndReceive (async);
    if (bytesRead > 0)
    {
        stringMsg = BitConverter.ToString(ReadBuffer).Replace("-", "").Substring(0, bytesRead * 2);
    }
    Debug.Log ("RAW RECEIVE: " + stringMsg);
    MessageBuffer += stringMsg;
    BeginReceive ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
161
0
Gpt3D_Clone161_0.cs 1 15
Gpt3D_Clone161_0.cs 16 39
----------------------------------------

protected void TextBox1_TextChanged1 (object sender, EventArgs e) {
    dt = g1.return_dt ("select name from tbl_data_show");
    if (dt.Rows.Count > 0) {
        if (TextBox1.Text == dt.Rows [0] ["name"]) {
            Label1.Text = "4";
            Label1.Visible = true;
        } else if (TextBox1.Text != dt.Rows [0] ["name"]) {
            Label2.Text = "5";
            Label2.Visible = true;
        } else {
            Label1.Visible = false;
            Label2.Visible = false;
        }
    }
}
----------------------------------------

 protected void TextBox1_TextChanged1 (object sender, EventArgs e) 
{
    DataSet ds = g1.Select("select name from tbl_data_show");
    if (ds != null && ds.Tables[0].Rows.Count > 0) 
    {
        if (TextBox1.Text == ds.Tables[0].Rows[0]["name"])
        {
            Label1.Text = "4";
            Label1.Visible = true;
        } 
        else if (TextBox1.Text != ds.Tables[0].Rows[0]["name"]) 
        {
            Label2.Text = "5";
            Label2.Visible = true;
        }
        else 
        {
            Label1.Visible = false;
            Label2.Visible = false;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
162
0
Gpt3D_Clone162_0.cs 1 15
Gpt3D_Clone162_0.cs 16 33
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    var token = JToken.Load (reader);
    var typeToken = token ["Type"];
    if (typeToken == null)
        throw new InvalidOperationException ("invalid object");
    var actualType = SubTypeClassBase.GetType (typeToken.ToObject < SubType > (serializer));
    if (existingValue == null || existingValue.GetType () != actualType) {
        var contract = serializer.ContractResolver.ResolveContract (actualType);
        existingValue = contract.DefaultCreator ();
    }
    using (var subReader = token.CreateReader ())
    {
        serializer.Populate (subReader, existingValue);
    } return existingValue;
}
----------------------------------------

 public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) 
{
    JObject json = JObject.Load (reader);
    JToken typeToken = json ["Type"];
    if (typeToken == null)
        throw new InvalidOperationException ("invalid object");
    SubType subtype = typeToken.ToObject<SubType> (serializer);
    Type actualType = SubTypeClassBase.GetType (subtype);
    if (existingValue == null || existingValue.GetType () != actualType) 
        existingValue = Activator.CreateInstance (actualType);
    using (var subReader = json.CreateReader ())
    {
        serializer.Populate (subReader, existingValue);
    }
    return existingValue;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
162
1
Gpt3D_Clone162_1.cs 1 15
Gpt3D_Clone162_1.cs 16 31
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    var token = JToken.Load (reader);
    var typeToken = token ["Type"];
    if (typeToken == null)
        throw new InvalidOperationException ("invalid object");
    var actualType = SubTypeClassBase.GetType (typeToken.ToObject < SubType > (serializer));
    if (existingValue == null || existingValue.GetType () != actualType) {
        var contract = serializer.ContractResolver.ResolveContract (actualType);
        existingValue = contract.DefaultCreator ();
    }
    using (var subReader = token.CreateReader ())
    {
        serializer.Populate (subReader, existingValue);
    } return existingValue;
}
----------------------------------------

 public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) 
{
    JObject json = JObject.Load (reader);
    JToken typeToken = json ["Type"];
    if (typeToken == null)
        throw new InvalidOperationException ("invalid object");
    Type actualType = SubTypeClassBase.GetType (typeToken.ToObject<SubType> ());
    object value = (existingValue == null) ? Activator.CreateInstance (actualType) : existingValue;
    using (var subReader = json.CreateReader ())
    {
        serializer.Populate (subReader, value);
    }
    return value;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
163
0
Gpt3D_Clone163_0.cs 1 10
Gpt3D_Clone163_0.cs 11 27
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    string w = "insert into checkmultiuser(username) values (@username)";
    c.Open ();
    using (SqlCommand cmd = new SqlCommand (w, c))
    {
        cmd.Parameters.Add ("@username", SqlDbType.VarChar);
        cmd.Parameters ["@username"].Value = textBox1.Text;
        cmd.ExecuteNonQuery ();
    }
}
----------------------------------------

 private void button1_Click (object sender, EventArgs e)
{
    string command = "INSERT INTO checkmultiuser (username) VALUES (@userNameValue)";
    using (SqlConnection con = new SqlConnection(connectionString))
    {
        using (SqlCommand sqlCommand = new SqlCommand(command, con))
        {
            con.Open();
            sqlCommand.Parameters.Add("@userNameValue", SqlDbType.VarChar);
            sqlCommand.Parameters["@userNameValue"].Value = textBox1.Text;
            sqlCommand.ExecuteNonQuery();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
163
1
Gpt3D_Clone163_1.cs 1 10
Gpt3D_Clone163_1.cs 11 26
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    string w = "insert into checkmultiuser(username) values (@username)";
    c.Open ();
    using (SqlCommand cmd = new SqlCommand (w, c))
    {
        cmd.Parameters.Add ("@username", SqlDbType.VarChar);
        cmd.Parameters ["@username"].Value = textBox1.Text;
        cmd.ExecuteNonQuery ();
    }
}
----------------------------------------

 private void button1_Click (object sender, EventArgs e)
{
    string queryString = "INSERT INTO checkmultiuser(username) VALUES (@username)";
    using(SqlConnection conn = new SqlConnection(connectionString))
    {
        using(SqlCommand cmd = new SqlCommand(queryString, conn))
        {
            conn.Open();
            cmd.Parameters.Add("@username",SqlDbType.VarChar);
            cmd.Parameters["@username"].Value = textBox1.Text;
            cmd.ExecuteNonQuery();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
163
2
Gpt3D_Clone163_2.cs 1 10
Gpt3D_Clone163_2.cs 11 28
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    string w = "insert into checkmultiuser(username) values (@username)";
    c.Open ();
    using (SqlCommand cmd = new SqlCommand (w, c))
    {
        cmd.Parameters.Add ("@username", SqlDbType.VarChar);
        cmd.Parameters ["@username"].Value = textBox1.Text;
        cmd.ExecuteNonQuery ();
    }
}
----------------------------------------

 private void button1_Click (object sender, EventArgs e)
{
    string sql = "INSERT INTO checkmultiuser(username) VALUES (@name)";
    using (SqlConnection con = new SqlConnection(connectionString))
    {
        con.Open();
        SqlCommand com = new SqlCommand(sql, con);
        com.Parameters.Add("@name", SqlDbType.VarChar);
        com.Parameters["@name"].Value = textBox1.Text;
        com.ExecuteNonQuery();
        con.Close();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
163
3
Gpt3D_Clone163_3.cs 1 10
Gpt3D_Clone163_3.cs 11 26
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    string w = "insert into checkmultiuser(username) values (@username)";
    c.Open ();
    using (SqlCommand cmd = new SqlCommand (w, c))
    {
        cmd.Parameters.Add ("@username", SqlDbType.VarChar);
        cmd.Parameters ["@username"].Value = textBox1.Text;
        cmd.ExecuteNonQuery ();
    }
}
----------------------------------------

 private void button1_Click (object sender, EventArgs e) 
{
    string sqlQuery = "INSERT INTO checkmultiuser(username) VALUES (@nameValue)";
    using(SqlConnection idk = new SqlConnection(connectionString))
    {
        idk.Open ();
        SqlCommand command = new SqlCommand(sqlQuery, idk);
        command.Parameters.Add("@nameValue", SqlDbType.VarChar);
        command.Parameters["@nameValue"].Value = textBox1.Text;
        command.ExecuteNonQuery ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
165
0
Gpt3D_Clone165_0.cs 1 11
Gpt3D_Clone165_0.cs 12 26
----------------------------------------

static void Main (string [] args) {
    try {
        using (TestClass t = new TestClass ())
        {
            Thread ts = new Thread (new ThreadStart (t.GetTest));
            ts.Start ();
        }}
    catch (Exception ex) {
        Console.WriteLine ("Error: " + ex.Message);
    }
}
----------------------------------------

	static void Main (string [] args)
{   
    TestClass t = null; 
    try{
        t = new TestClass ();
        Thread ts = new Thread (new ThreadStart (t.GetTest));
        ts.Start ();
    }
    catch (Exception ex) {
        try {t.Dispose();} catch {}
        Console.WriteLine ("Error: " + ex.Message);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
165
2
Gpt3D_Clone165_2.cs 1 11
Gpt3D_Clone165_2.cs 12 24
----------------------------------------

static void Main (string [] args) {
    try {
        using (TestClass t = new TestClass ())
        {
            Thread ts = new Thread (new ThreadStart (t.GetTest));
            ts.Start ();
        }}
    catch (Exception ex) {
        Console.WriteLine ("Error: " + ex.Message);
    }
}
----------------------------------------

	static void Main (string [] args)
{
    try{
        TestClass t = new TestClass ();
        Thread ts = t.GetTest.BeginThread ();
        ts.Start ();
    }
    catch (Exception ex) {
        Console.WriteLine ("Error: " + ex.Message);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
165
3
Gpt3D_Clone165_3.cs 1 11
Gpt3D_Clone165_3.cs 12 25
----------------------------------------

static void Main (string [] args) {
    try {
        using (TestClass t = new TestClass ())
        {
            Thread ts = new Thread (new ThreadStart (t.GetTest));
            ts.Start ();
        }}
    catch (Exception ex) {
        Console.WriteLine ("Error: " + ex.Message);
    }
}
----------------------------------------

	static void Main (string [] args)
{
    try {
        TestClass t = new TestClass ();
        Thread ts = new Thread (new ThreadStart (t.GetTest));
        ts.Start ();
    }
    catch (Exception ex) {
        Console.WriteLine ("Error: " + ex.Message);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
166
1
Gpt3D_Clone166_1.cs 1 11
Gpt3D_Clone166_1.cs 12 33
----------------------------------------

static void Main (string [] args) {
    HttpWebResponse response = new HttpWebResponse ();
    try {
        response.GetResponse ();
    }
    catch (Exception ex) {
    }
    finally {
        response.Dispose ();
    }
}
----------------------------------------

 static void Main(string[] args)
{
            HttpWebResponse response = new HttpWebResponse ();
            bool success = false;
            try 
            { 
                response.GetResponse (); 
                success = true;
            }
            catch (Exception ex)
            { 
            }
            finally 
            {
                if (!success)
                {
                    response.Dispose ();
                }
            }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
166
12
Gpt3D_Clone166_12.cs 1 11
Gpt3D_Clone166_12.cs 12 29
----------------------------------------

static void Main (string [] args) {
    HttpWebResponse response = new HttpWebResponse ();
    try {
        response.GetResponse ();
    }
    catch (Exception ex) {
    }
    finally {
        response.Dispose ();
    }
}
----------------------------------------

 static void Main(string[] args)
{ 
                AttemptToReadResource(new HttpWebResponse()); 
            }
            private static void AttemptToReadResource(HttpWebResponse response)
            {
                try
                { 
                    response.GetResponse (); 
                }
                finally
                {
                    response.Dispose ();
                }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
166
2
Gpt3D_Clone166_2.cs 1 11
Gpt3D_Clone166_2.cs 12 32
----------------------------------------

static void Main (string [] args) {
    HttpWebResponse response = new HttpWebResponse ();
    try {
        response.GetResponse ();
    }
    catch (Exception ex) {
    }
    finally {
        response.Dispose ();
    }
}
----------------------------------------

 static void Main(string[] args) 
{ 
            HttpWebResponse response = null; 
            try 
            { 
                response = new HttpWebResponse(); 
                response.GetResponse (); 
            } 
            catch (Exception ex) 
            { 
            } 
            finally 
            { 
                if (response !=null) 
                { 
                    response.Dispose (); 
                }
            } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
166
4
Gpt3D_Clone166_4.cs 1 11
Gpt3D_Clone166_4.cs 12 43
----------------------------------------

static void Main (string [] args) {
    HttpWebResponse response = new HttpWebResponse ();
    try {
        response.GetResponse ();
    }
    catch (Exception ex) {
    }
    finally {
        response.Dispose ();
    }
}
----------------------------------------

 static void Main(string[] args)
{ 
                    HttpWebResponse response = null; 
                    try 
                    { 
                        response = GetResource(); 
                    }
                    finally
                    { 
                        if (response != null)
                        {
                            response.Dispose ();
                        } 
                    }
                }
                private static HttpWebResponse GetResource() 
                {
                    try
                    { 
                        HttpWebResponse response = new HttpWebResponse();
                        response.GetResponse (); 
                        return response;
                    }
                    catch (Exception ex)
                    {
                        return null;
                    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
166
5
Gpt3D_Clone166_5.cs 1 11
Gpt3D_Clone166_5.cs 12 26
----------------------------------------

static void Main (string [] args) {
    HttpWebResponse response = new HttpWebResponse ();
    try {
        response.GetResponse ();
    }
    catch (Exception ex) {
    }
    finally {
        response.Dispose ();
    }
}
----------------------------------------

 static void Main(string[] args) 
{ 
            try 
            { 
                using (HttpWebResponse response = new HttpWebResponse ()) 
                { 
                    response.GetResponse (); 
                }  
            } 
            catch (Exception ex) 
            { 
            } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
166
6
Gpt3D_Clone166_6.cs 1 11
Gpt3D_Clone166_6.cs 12 26
----------------------------------------

static void Main (string [] args) {
    HttpWebResponse response = new HttpWebResponse ();
    try {
        response.GetResponse ();
    }
    catch (Exception ex) {
    }
    finally {
        response.Dispose ();
    }
}
----------------------------------------

 static void Main(string[] args) 
{ 
            using (var response = new HttpWebResponse()) 
            { 
                try 
                { 
                    response.GetResponse (); 
                } 
                catch (Exception ex) 
                { 
                } 
            }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
167
4
Gpt3D_Clone167_4.cs 1 8
Gpt3D_Clone167_4.cs 9 20
----------------------------------------

public bool btnRemoveCategory_IsVisible (Office.IRibbonControl ctl) {
    var item = ctl.Context as Inspector;
    var mailItem = item.CurrentItem as MailItem;
    if (item != null)
        return (item != null && HasMyCategory (item));
    else
        return false;
}
----------------------------------------

 public bool btnRemoveCategory_IsVisible (Office.IRibbonControl ctl) {
    var item = ctl.Context as Inspector;
    var mailItem = item.CurrentItem as MailItem;
    bool isVisible = false;
    if (mailItem != null) 
        isVisible = HasMyCategory(mailItem);
    
    return isVisible && item != null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
167
5
Gpt3D_Clone167_5.cs 1 8
Gpt3D_Clone167_5.cs 9 20
----------------------------------------

public bool btnRemoveCategory_IsVisible (Office.IRibbonControl ctl) {
    var item = ctl.Context as Inspector;
    var mailItem = item.CurrentItem as MailItem;
    if (item != null)
        return (item != null && HasMyCategory (item));
    else
        return false;
}
----------------------------------------

 public bool btnRemoveCategory_IsVisible (Office.IRibbonControl ctl) {
    var item = ctl.Context as Inspector;
    var mailItem = item.CurrentItem as MailItem;
    bool isVisible = false;
    if (item != null)
        isVisible = HasMyCategory(item);
    
    return isVisible;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
167
6
Gpt3D_Clone167_6.cs 1 8
Gpt3D_Clone167_6.cs 9 20
----------------------------------------

public bool btnRemoveCategory_IsVisible (Office.IRibbonControl ctl) {
    var item = ctl.Context as Inspector;
    var mailItem = item.CurrentItem as MailItem;
    if (item != null)
        return (item != null && HasMyCategory (item));
    else
        return false;
}
----------------------------------------

 public bool btnRemoveCategory_IsVisible (Office.IRibbonControl ctl) {
    var item = ctl.Context as Inspector;
    var mailItem = item.CurrentItem as MailItem;
    bool hasCategory = false;
    if (item != null)
        hasCategory = HasMyCategory(item);
    
    return (item != null && hasCategory == true);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
167
7
Gpt3D_Clone167_7.cs 1 8
Gpt3D_Clone167_7.cs 9 20
----------------------------------------

public bool btnRemoveCategory_IsVisible (Office.IRibbonControl ctl) {
    var item = ctl.Context as Inspector;
    var mailItem = item.CurrentItem as MailItem;
    if (item != null)
        return (item != null && HasMyCategory (item));
    else
        return false;
}
----------------------------------------

 public bool btnRemoveCategory_IsVisible (Office.IRibbonControl ctl) {
    var item = ctl.Context as Inspector;
    var mailItem = item.CurrentItem as MailItem;
    bool hasMyCategory = false;
    if (item != null)
        hasMyCategory = HasMyCategory(item);
    
    return (item != null) ? hasMyCategory : false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
167
9
Gpt3D_Clone167_9.cs 1 8
Gpt3D_Clone167_9.cs 9 20
----------------------------------------

public bool btnRemoveCategory_IsVisible (Office.IRibbonControl ctl) {
    var item = ctl.Context as Inspector;
    var mailItem = item.CurrentItem as MailItem;
    if (item != null)
        return (item != null && HasMyCategory (item));
    else
        return false;
}
----------------------------------------

 public bool btnRemoveCategory_IsVisible (Office.IRibbonControl ctl) {
    var item = ctl.Context as Inspector;
    var mailItem = item.CurrentItem as MailItem;
    bool hasCategory = false;
    if (item != null)
        hasCategory = HasMyCategory(item);
    
    return item != null && hasCategory;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
169
0
Gpt3D_Clone169_0.cs 1 11
Gpt3D_Clone169_0.cs 12 29
----------------------------------------

static void Main () {
    using (MemoryStream ms = new MemoryStream ())
    {
        WriteNext (ms, 123);
        WriteNext (ms, new Person {Name = "Fred"});
        WriteNext (ms, "abc");
        ms.Position = 0;
        while (ReadNext (ms)) {
        }
    }
}
----------------------------------------

 static void Main()
{
    using (MemoryStream ms = new MemoryStream())
    {
        using (BinaryWriter bw = new BinaryWriter(ms))
        {
            bw.Write((Int32)123);
            WritePerson(bw, new Person {Name = "Fred"});
            bw.Write("abc");
            bw.Flush();
            ms.Position = 0;
            while (ReadNext(ms)) {
            }
        }
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
169
3
Gpt3D_Clone169_3.cs 1 11
Gpt3D_Clone169_3.cs 12 24
----------------------------------------

static void Main () {
    using (MemoryStream ms = new MemoryStream ())
    {
        WriteNext (ms, 123);
        WriteNext (ms, new Person {Name = "Fred"});
        WriteNext (ms, "abc");
        ms.Position = 0;
        while (ReadNext (ms)) {
        }
    }
}
----------------------------------------

 static void Main()
{
    using (MemoryStream ms = new MemoryStream())
    {
        ms.WriteInt32(123);
        WritePerson(ms, new Person {Name = "Fred"});
        ms.WriteString("abc");
        ms.Position = 0;
        ReadAll(ms);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
169
4
Gpt3D_Clone169_4.cs 1 11
Gpt3D_Clone169_4.cs 12 24
----------------------------------------

static void Main () {
    using (MemoryStream ms = new MemoryStream ())
    {
        WriteNext (ms, 123);
        WriteNext (ms, new Person {Name = "Fred"});
        WriteNext (ms, "abc");
        ms.Position = 0;
        while (ReadNext (ms)) {
        }
    }
}
----------------------------------------

 static void Main()
{
    using (MemoryStream ms = new MemoryStream())
    {
        ms.WriteInt32(123);
        WritePerson(ms, new Person {Name = "Fred"});
        ms.WriteString("abc");
        ms.Position = 0;
        ReadAll(ms);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
169
5
Gpt3D_Clone169_5.cs 1 11
Gpt3D_Clone169_5.cs 12 24
----------------------------------------

static void Main () {
    using (MemoryStream ms = new MemoryStream ())
    {
        WriteNext (ms, 123);
        WriteNext (ms, new Person {Name = "Fred"});
        WriteNext (ms, "abc");
        ms.Position = 0;
        while (ReadNext (ms)) {
        }
    }
}
----------------------------------------

 static void Main()
{
    using (MemoryStream ms = new MemoryStream())
    {
        ms.WriteInt32(123);
        WritePerson(ms, new Person {Name = "Fred"});
        ms.WriteString("abc");
        ms.Position = 0;
        ReadAll(ms);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
170
0
Gpt3D_Clone170_0.cs 1 9
Gpt3D_Clone170_0.cs 10 23
----------------------------------------

public bool MoveNext () {
    if (idx == - 1) {
        idx = 0;
        current = 1;
    } else {
        current = current * 2;
    }
    return true;
}
----------------------------------------

 public bool MoveNext () {
            if(idx == -1){
            current = 0;
            idx++;
            current += 2;
        }
        else{
            current *= 2;
            idx++;
        }
        return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
170
1
Gpt3D_Clone170_1.cs 1 9
Gpt3D_Clone170_1.cs 10 23
----------------------------------------

public bool MoveNext () {
    if (idx == - 1) {
        idx = 0;
        current = 1;
    } else {
        current = current * 2;
    }
    return true;
}
----------------------------------------

 public bool MoveNext () {
            if (idx == -1){
            current = 0;
            idx++;
            current += 1;
        }
        else{
            current = current * 4;
            idx++;
        }
        return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
170
2
Gpt3D_Clone170_2.cs 1 9
Gpt3D_Clone170_2.cs 10 23
----------------------------------------

public bool MoveNext () {
    if (idx == - 1) {
        idx = 0;
        current = 1;
    } else {
        current = current * 2;
    }
    return true;
}
----------------------------------------

 public bool MoveNext () { 
            if (idx == -1){
            current = 0;
            idx++;
            current++;
        }
        else{
            current = current*3;
            idx++;
        }
        return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
170
3
Gpt3D_Clone170_3.cs 1 9
Gpt3D_Clone170_3.cs 10 23
----------------------------------------

public bool MoveNext () {
    if (idx == - 1) {
        idx = 0;
        current = 1;
    } else {
        current = current * 2;
    }
    return true;
}
----------------------------------------

 public bool MoveNext () {
            if (idx == -1) {
            current = 0;
            current++;
            idx++;
        }
        else {
            current = current * 2;
            idx++;
        } 
        return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
170
4
Gpt3D_Clone170_4.cs 1 9
Gpt3D_Clone170_4.cs 10 22
----------------------------------------

public bool MoveNext () {
    if (idx == - 1) {
        idx = 0;
        current = 1;
    } else {
        current = current * 2;
    }
    return true;
}
----------------------------------------

 public bool MoveNext () {
        if (idx == -1){
        current = 1;
        idx++;
    }
    else{
        current = current + current;
        idx++;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
170
5
Gpt3D_Clone170_5.cs 1 9
Gpt3D_Clone170_5.cs 10 22
----------------------------------------

public bool MoveNext () {
    if (idx == - 1) {
        idx = 0;
        current = 1;
    } else {
        current = current * 2;
    }
    return true;
}
----------------------------------------

 public bool MoveNext () {
            if(idx == -1){
            current = 2;
            idx++;
        }
        else{
            current *= 2;
            idx++;
        }
        return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
170
6
Gpt3D_Clone170_6.cs 1 9
Gpt3D_Clone170_6.cs 10 22
----------------------------------------

public bool MoveNext () {
    if (idx == - 1) {
        idx = 0;
        current = 1;
    } else {
        current = current * 2;
    }
    return true;
}
----------------------------------------

 public bool MoveNext () {
        if(idx == -1){
            current = 1;
                dx++;
            }
        else{
            current *= 3;
                idx++;
            }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
170
7
Gpt3D_Clone170_7.cs 1 9
Gpt3D_Clone170_7.cs 10 22
----------------------------------------

public bool MoveNext () {
    if (idx == - 1) {
        idx = 0;
        current = 1;
    } else {
        current = current * 2;
    }
    return true;
}
----------------------------------------

 public bool MoveNext () {
        if (idx == -1){
        current = 2;
        idx++;
    }
    else{
        current = current * current;
        idx++;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
170
8
Gpt3D_Clone170_8.cs 1 9
Gpt3D_Clone170_8.cs 10 22
----------------------------------------

public bool MoveNext () {
    if (idx == - 1) {
        idx = 0;
        current = 1;
    } else {
        current = current * 2;
    }
    return true;
}
----------------------------------------

 public bool MoveNext () {
            if(idx == -1){
            current = 1;
            idx++;
        }
        else{
            current = current + 2;
            idx++;
        }
        return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
170
9
Gpt3D_Clone170_9.cs 1 9
Gpt3D_Clone170_9.cs 10 22
----------------------------------------

public bool MoveNext () {
    if (idx == - 1) {
        idx = 0;
        current = 1;
    } else {
        current = current * 2;
    }
    return true;
}
----------------------------------------

 public bool MoveNext () {
            if(idx == -1){
            current = 2;
            idx++;
        }
        else{
            current += 2;
            idx++;
        }
        return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
171
2
Gpt3D_Clone171_2.cs 1 11
Gpt3D_Clone171_2.cs 12 29
----------------------------------------

private void btnAdd_Click (object sender, RoutedEventArgs e) {
    string customer = btnEditCustomer1.Text;
    string piece = btnPiece.Text;
    string material = txtMaterial.Text;
    int quantity = Convert.ToInt32 (txtQuantity.Text);
    float weight = float.Parse (txtWeight.Text);
    if (customer != null && piece != null && material != null) {
        var item = new Liste {Customer = customer, Piece = piece, Material = material, Quantity = quantity, Weight = weight};
        AllItems.Add (item);
    }
}
----------------------------------------

 private void btnAdd_Click (object sender, RoutedEventArgs e) {
     string customer = btnEditCustomer1.Text;
     string piece = btnPiece.Text;
     string material = txtMaterial.Text;
     if (string.IsNullOrEmpty(customer) || string.IsNullOrEmpty(piece) || string.IsNullOrEmpty(material))
         return;
 
     try
     {
         int quantity = Convert.ToInt32(txtQuantity.Text);
         float weight = float.Parse(txtWeight.Text);
         var item = new Liste {Customer = customer, Piece = piece, Material = material, Quantity = quantity, Weight = weight};
         AllItems.Add(item);
     }
     catch (FormatException) { }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
171
4
Gpt3D_Clone171_4.cs 1 11
Gpt3D_Clone171_4.cs 12 26
----------------------------------------

private void btnAdd_Click (object sender, RoutedEventArgs e) {
    string customer = btnEditCustomer1.Text;
    string piece = btnPiece.Text;
    string material = txtMaterial.Text;
    int quantity = Convert.ToInt32 (txtQuantity.Text);
    float weight = float.Parse (txtWeight.Text);
    if (customer != null && piece != null && material != null) {
        var item = new Liste {Customer = customer, Piece = piece, Material = material, Quantity = quantity, Weight = weight};
        AllItems.Add (item);
    }
}
----------------------------------------

 private void btnAdd_Click (object sender, RoutedEventArgs e) {
      string customer = btnEditCustomer1.Text;
      string piece = btnPiece.Text;
      string material = txtMaterial.Text;
      int quantity = 0;
      bool parseSuccess = Int32.TryParse(txtQuantity.Text, out quantity);
      float weight = 0;
      parseSuccess = float.TryParse(txtWeight.Text, out weight);
      if (!String.IsNullOrEmpty(customer) && !String.IsNullOrEmpty(piece) && !String.IsNullOrEmpty(material)) {
          var item = new Liste {Customer = customer, Piece = piece, Material = material, Quantity = quantity, Weight = weight};
          AllItems.Add (item);
      }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
171
5
Gpt3D_Clone171_5.cs 1 11
Gpt3D_Clone171_5.cs 12 32
----------------------------------------

private void btnAdd_Click (object sender, RoutedEventArgs e) {
    string customer = btnEditCustomer1.Text;
    string piece = btnPiece.Text;
    string material = txtMaterial.Text;
    int quantity = Convert.ToInt32 (txtQuantity.Text);
    float weight = float.Parse (txtWeight.Text);
    if (customer != null && piece != null && material != null) {
        var item = new Liste {Customer = customer, Piece = piece, Material = material, Quantity = quantity, Weight = weight};
        AllItems.Add (item);
    }
}
----------------------------------------

 private void btnAdd_Click (object sender, RoutedEventArgs e) {
    string customer = btnEditCustomer1.Text;
    string piece = btnPiece.Text;
    string material = txtMaterial.Text;
    try
    {
        int quantity = Convert.ToInt32(txtQuantity.Text);
        float weight = float.Parse(txtWeight.Text);
        if (!String.IsNullOrEmpty(customer) && !String.IsNullOrEmpty(piece) && !String.IsNullOrEmpty(material))
        {
            var item = new Liste {Customer = customer, Piece = piece, Material = material, Quantity = quantity, Weight = weight};
            AllItems.Add(item);
        }
    }
    catch (FormatException)
    {
        // handle exception
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
171
6
Gpt3D_Clone171_6.cs 1 11
Gpt3D_Clone171_6.cs 12 32
----------------------------------------

private void btnAdd_Click (object sender, RoutedEventArgs e) {
    string customer = btnEditCustomer1.Text;
    string piece = btnPiece.Text;
    string material = txtMaterial.Text;
    int quantity = Convert.ToInt32 (txtQuantity.Text);
    float weight = float.Parse (txtWeight.Text);
    if (customer != null && piece != null && material != null) {
        var item = new Liste {Customer = customer, Piece = piece, Material = material, Quantity = quantity, Weight = weight};
        AllItems.Add (item);
    }
}
----------------------------------------

 private void btnAdd_Click (object sender, RoutedEventArgs e) {
    try
    {
        string customer = btnEditCustomer1.Text;
        string piece = btnPiece.Text;
        string material = txtMaterial.Text;
        int quantity = Convert.ToInt32(txtQuantity.Text);
        float weight = float.Parse(txtWeight.Text);
        if (!String.IsNullOrEmpty(customer) && !String.IsNullOrEmpty(piece) && !String.IsNullOrEmpty(material))
        {
            var item = new Liste {Customer = customer, Piece = piece, Material = material, Quantity = quantity, Weight = weight};
            AllItems.Add(item);
        }
    }
    catch(FormatException)
    {
        // handle exception
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
171
7
Gpt3D_Clone171_7.cs 1 11
Gpt3D_Clone171_7.cs 12 26
----------------------------------------

private void btnAdd_Click (object sender, RoutedEventArgs e) {
    string customer = btnEditCustomer1.Text;
    string piece = btnPiece.Text;
    string material = txtMaterial.Text;
    int quantity = Convert.ToInt32 (txtQuantity.Text);
    float weight = float.Parse (txtWeight.Text);
    if (customer != null && piece != null && material != null) {
        var item = new Liste {Customer = customer, Piece = piece, Material = material, Quantity = quantity, Weight = weight};
        AllItems.Add (item);
    }
}
----------------------------------------

 private void btnAdd_Click (object sender, RoutedEventArgs e) {
      string customer = btnEditCustomer1.Text;
      string piece = btnPiece.Text;
      string material = txtMaterial.Text;
      int quantity = 0;
      bool parseSuccess = Int32.TryParse(txtQuantity.Text, out quantity);
      float weight = 0;
      parseSuccess = float.TryParse(txtWeight.Text, out weight);
      if (!String.IsNullOrEmpty(customer) && !String.IsNullOrEmpty(piece) && !String.IsNullOrEmpty(material)) {
          var item = new Liste {Customer = customer, Piece = piece, Material = material, Quantity = quantity, Weight = weight};
          AllItems.Add (item);
      }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
171
9
Gpt3D_Clone171_9.cs 1 11
Gpt3D_Clone171_9.cs 12 27
----------------------------------------

private void btnAdd_Click (object sender, RoutedEventArgs e) {
    string customer = btnEditCustomer1.Text;
    string piece = btnPiece.Text;
    string material = txtMaterial.Text;
    int quantity = Convert.ToInt32 (txtQuantity.Text);
    float weight = float.Parse (txtWeight.Text);
    if (customer != null && piece != null && material != null) {
        var item = new Liste {Customer = customer, Piece = piece, Material = material, Quantity = quantity, Weight = weight};
        AllItems.Add (item);
    }
}
----------------------------------------

 private void btnAdd_Click (object sender, RoutedEventArgs e) {
    string customer = btnEditCustomer1.Text;
    string piece = btnPiece.Text;
    string material = txtMaterial.Text;
    if (!string.IsNullOrWhiteSpace(customer) 
        && !string.IsNullOrWhiteSpace(piece) 
        && !string.IsNullOrWhiteSpace(material)
        && int.TryParse(txtQuantity.Text, out int quantity)
        && float.TryParse(txtWeight.Text, out float weight))
    {
        var item = new Liste {Customer = customer, Piece = piece, Material = material, Quantity = quantity, Weight = weight};
        AllItems.Add(item);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
173
1
Gpt3D_Clone173_1.cs 1 25
Gpt3D_Clone173_1.cs 26 56
----------------------------------------

internal static string GetIPAddress (HttpRequestBase request) {
    string forwarded = request.Headers ["Forwarded"];
    if (! String.IsNullOrEmpty (forwarded)) {
        foreach (string segment in forwarded.Split (',') [0].Split (';')) {
            string [] pair = segment.Trim ().Split ('=');
            if (pair.Length == 2 && pair [0].Equals ("for", StringComparison.OrdinalIgnoreCase)) {
                string ip = pair [1].Trim ('"');
                int left = ip.IndexOf ('['), right = ip.IndexOf (']');
                if (left == 0 && right > 0) {
                    return ip.Substring (1, right - 1);
                }
                int colon = ip.IndexOf (':');
                if (colon != - 1) {
                    return ip.Substring (0, colon);
                }
                return ip;
            }
        }
    }
    string xForwardedFor = request.Headers ["X-Forwarded-For"];
    if (! String.IsNullOrEmpty (xForwardedFor)) {
        return xForwardedFor.Split (',') [0];
    }
    return request.UserHostAddress;
}
----------------------------------------

	internal static string GetIPAddress (HttpRequestBase request) {
    string forwarded = request.Headers ["Forwarded"];
    if (! String.IsNullOrEmpty (forwarded)) {
        string[] segment = forwarded.Split (',') [0].Split (';');
        foreach (var item in segment) {
            string [] pair = item.Trim ().Split ('=');
            if (pair.Length == 2 && pair [0].Equals ("for", StringComparison.OrdinalIgnoreCase)) {
                string ip = pair [1].Trim ('"');
                int left = ip.IndexOf ('[');
                int right = ip.IndexOf (']');
                if (left == 0 && right > 0) {
                    ip = ip.Substring (1, right - 1);
                    return ip;
                }
                int colonIndex = ip.IndexOf (':');
                if (colonIndex > 0) {
                    ip = ip.Substring (0, colonIndex);
                    return ip;
                }
                return ip;
            }
        }
    }
    string xForwardedFor = request.Headers ["X-Forwarded-For"];
    if (!String.IsNullOrEmpty (xForwardedFor)) {
        return (xForwardedFor.Split (',') [0]);
    }
    return request.UserHostAddress;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
174
8
Gpt3D_Clone174_8.cs 1 7
Gpt3D_Clone174_8.cs 8 16
----------------------------------------

public static string GetIPAddress (this HttpRequest Request) {
    if (Request.Headers ["CF-CONNECTING-IP"] != null)
        return Request.Headers ["CF-CONNECTING-IP"].ToString ();
    if (Request.ServerVariables ["HTTP_X_FORWARDED_FOR"] != null)
        return Request.ServerVariables ["HTTP_X_FORWARDED_FOR"].ToString ();
    return Request.UserHostAddress;
}
----------------------------------------

 public static string GetIPAddress (this HttpRequest Request) {
    if (Request.Headers.AllKeys.Contains("CF-CONNECTING-IP"))
        return Request["CF-CONNECTING-IP"].ToString ();
    if (Request.ServerVariables ["HTTP_X_FORWARDED_FOR"] != null)
        return Request.ServerVariables ["HTTP_X_FORWARDED_FOR"].ToString ();
    return Request.UserHostAddress;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
174
9
Gpt3D_Clone174_9.cs 1 7
Gpt3D_Clone174_9.cs 8 16
----------------------------------------

public static string GetIPAddress (this HttpRequest Request) {
    if (Request.Headers ["CF-CONNECTING-IP"] != null)
        return Request.Headers ["CF-CONNECTING-IP"].ToString ();
    if (Request.ServerVariables ["HTTP_X_FORWARDED_FOR"] != null)
        return Request.ServerVariables ["HTTP_X_FORWARDED_FOR"].ToString ();
    return Request.UserHostAddress;
}
----------------------------------------

 public static string GetIPAddress (this HttpRequest Request) {
    if (Request.Headers.ContainsKey("CF-CONNECTING-IP") || Request.Headers.Contains("CF-CONNECTING-IP"))
        return Request.Headers ["CF-CONNECTING-IP"].ToString ();
    if (Request.ServerVariables.ContainsKey("HTTP_X_FORWARDED_FOR") || Request.ServerVariables.Contains("HTTP_X_FORWARDED_FOR"))
        return Request.ServerVariables ["HTTP_X_FORWARDED_FOR"].ToString ();
    return Request.UserHostAddress;
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
175
0
Gpt3D_Clone175_0.cs 1 23
Gpt3D_Clone175_0.cs 24 47
----------------------------------------

public static bool SetBrowserEmulationVersion (BrowserEmulationVersion browserEmulationVersion) {
    bool result;
    result = false;
    try {
        RegistryKey key;
        key = Registry.CurrentUser.OpenSubKey (BrowserEmulationKey, true);
        if (key != null) {
            string programName;
            programName = Path.GetFileName (Environment.GetCommandLineArgs () [0]);
            if (browserEmulationVersion != BrowserEmulationVersion.Default) {
                key.SetValue (programName, (int) browserEmulationVersion, RegistryValueKind.DWord);
            } else {
                key.DeleteValue (programName, false);
            }
            result = true;
        }
    }
    catch (SecurityException) {
    }
    catch (UnauthorizedAccessException) {
    }
    return result;
}
----------------------------------------

 public static boolean attemptSetBrowserEmulationVersion (BrowserEmulationVersion browserEmulationVersion) {
    boolean result;
    result = false;
    try {
        WithoutRegistryKey key;
        key = WithoutRegistry.CurrentUser.CreateSubKey (BrowserEmulationKey);
        if (key != null) {
            string programName;
            programName = Path.GetFileNameWithoutExtension (Environment.GetCommandLineArgs () [0]);
            if (browserEmulationVersion != BrowserEmulationVersion.Default) {
                key.SetValue (programName, (int) browserEmulationVersion);
            } else {
                key.DeleteValue (programName);
            }
            result = true;
        }
    }
    catch {
        result = false;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
175
1
Gpt3D_Clone175_1.cs 1 23
Gpt3D_Clone175_1.cs 24 47
----------------------------------------

public static bool SetBrowserEmulationVersion (BrowserEmulationVersion browserEmulationVersion) {
    bool result;
    result = false;
    try {
        RegistryKey key;
        key = Registry.CurrentUser.OpenSubKey (BrowserEmulationKey, true);
        if (key != null) {
            string programName;
            programName = Path.GetFileName (Environment.GetCommandLineArgs () [0]);
            if (browserEmulationVersion != BrowserEmulationVersion.Default) {
                key.SetValue (programName, (int) browserEmulationVersion, RegistryValueKind.DWord);
            } else {
                key.DeleteValue (programName, false);
            }
            result = true;
        }
    }
    catch (SecurityException) {
    }
    catch (UnauthorizedAccessException) {
    }
    return result;
}
----------------------------------------

 public static boolean attemptToSetBrowserEmulationVersion (BrowserEmulationVersion browserEmulationVersion) {
    boolean result;
    result = false;
    try {
        RegistryKey key;
        key = Registry.CurrentUser.OpenSubKey (BrowserEmulationKey, true);
        if (key != null) {
            string programName;
            programName = Path.GetFileNameWithoutExtension (Environment.GetCommandLineArgs () [0]);
            if (browserEmulationVersion != BrowserEmulationVersion.Default) {
                key.SetIntValue (programName, (int) browserEmulationVersion);
            } else {
                key.DeleteValue (programName, false);
            }
            result = true;
        }
    }
    catch {
        result = false;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
175
2
Gpt3D_Clone175_2.cs 1 23
Gpt3D_Clone175_2.cs 24 47
----------------------------------------

public static bool SetBrowserEmulationVersion (BrowserEmulationVersion browserEmulationVersion) {
    bool result;
    result = false;
    try {
        RegistryKey key;
        key = Registry.CurrentUser.OpenSubKey (BrowserEmulationKey, true);
        if (key != null) {
            string programName;
            programName = Path.GetFileName (Environment.GetCommandLineArgs () [0]);
            if (browserEmulationVersion != BrowserEmulationVersion.Default) {
                key.SetValue (programName, (int) browserEmulationVersion, RegistryValueKind.DWord);
            } else {
                key.DeleteValue (programName, false);
            }
            result = true;
        }
    }
    catch (SecurityException) {
    }
    catch (UnauthorizedAccessException) {
    }
    return result;
}
----------------------------------------

 public static boolean attemptSetBrowserEmulationVersion (BrowserEmulationVersion browserEmulationVersion) {
    boolean result;
    result = false;
    try {
        WithoutRegistryKey key;
        key = WithoutRegistry.CurrentUser.OpenSubKey (BrowserEmulationKey);
        if (key != null) {
            string programName;
            programName = Path.GetFileNameWithoutExtension (Environment.GetCommandLineArgs () [0]);
            if (browserEmulationVersion != BrowserEmulationVersion.Default) {
                key.SetIntValue (programName, (int) browserEmulationVersion);
            } else {
                key.RemoveValue (programName);
            }
            result = true;
        }
    }
    catch {
        result = false;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
175
3
Gpt3D_Clone175_3.cs 1 23
Gpt3D_Clone175_3.cs 24 47
----------------------------------------

public static bool SetBrowserEmulationVersion (BrowserEmulationVersion browserEmulationVersion) {
    bool result;
    result = false;
    try {
        RegistryKey key;
        key = Registry.CurrentUser.OpenSubKey (BrowserEmulationKey, true);
        if (key != null) {
            string programName;
            programName = Path.GetFileName (Environment.GetCommandLineArgs () [0]);
            if (browserEmulationVersion != BrowserEmulationVersion.Default) {
                key.SetValue (programName, (int) browserEmulationVersion, RegistryValueKind.DWord);
            } else {
                key.DeleteValue (programName, false);
            }
            result = true;
        }
    }
    catch (SecurityException) {
    }
    catch (UnauthorizedAccessException) {
    }
    return result;
}
----------------------------------------

 public static boolean SetupBrowserEmulationVersion (BrowserEmulationVersion browserEmulationVersion) {
    boolean result;
    result = false;
    try {
        WithoutRegistryKey key;
        key = WithoutRegistry.CurrentUser.OpenSubKey (BrowserEmulationKey);
        if (key != null) {
            string programName;
            programName = Path.GetFileNameWithoutExtension (Environment.GetCommandLineArgs () [0]);
            if (browserEmulationVersion != BrowserEmulationVersion.Default) {
                key.SetStringValue (programName, (int) browserEmulationVersion);
            } else {
                key.RemoveValue (programName);
            }
            result = true;
        }
    }
    catch {
        result = false;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
175
4
Gpt3D_Clone175_4.cs 1 23
Gpt3D_Clone175_4.cs 24 47
----------------------------------------

public static bool SetBrowserEmulationVersion (BrowserEmulationVersion browserEmulationVersion) {
    bool result;
    result = false;
    try {
        RegistryKey key;
        key = Registry.CurrentUser.OpenSubKey (BrowserEmulationKey, true);
        if (key != null) {
            string programName;
            programName = Path.GetFileName (Environment.GetCommandLineArgs () [0]);
            if (browserEmulationVersion != BrowserEmulationVersion.Default) {
                key.SetValue (programName, (int) browserEmulationVersion, RegistryValueKind.DWord);
            } else {
                key.DeleteValue (programName, false);
            }
            result = true;
        }
    }
    catch (SecurityException) {
    }
    catch (UnauthorizedAccessException) {
    }
    return result;
}
----------------------------------------

 public static boolean attemptToSetBrowserEmulationVersion (BrowserEmulationVersion browserEmulationVersion) {
    boolean result;
    result = false;
    try {
        WithoutRegistryKey key;
        key = WithoutRegistry.CurrentUser.CreateSubKey (BrowserEmulationKey);
        if (key != null) {
            string programName;
            programName = Path.GetFileName (Environment.GetCommandLineArgs () [0]);
            if (browserEmulationVersion != BrowserEmulationVersion.Default) {
                key.SetIntValue (programName, (int) browserEmulationVersion);
            } else {
                key.DeleteValue (programName);
            }
            result = true;
        }
    }
    catch {
        result = false;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
176
4
Gpt3D_Clone176_4.cs 1 12
Gpt3D_Clone176_4.cs 13 197
----------------------------------------

static void Main () {
    var moCollection = new ManagementClass ("Win32_LogicalDisk").GetInstances ();
    foreach (var mo in moCollection) {
        if (mo ["DeviceID"] != null && mo ["DriveType"] != null && mo ["Size"] != null && mo ["FreeSpace"] != null) {
            if (Convert.ToInt32 (mo ["DriveType"]) == 3) {
                Console.WriteLine ("Drive {0}", mo ["DeviceID"]);
                Console.WriteLine ("Size {0} bytes", mo ["Size"]);
                Console.WriteLine ("Free {0} bytes", mo ["FreeSpace"]);
            }
        }
    }
}
----------------------------------------

  using System;
    using System.Management;
    using System.Collections;
    using Microsoft.Win32;
    class ManagementClassExample
    {
        public static void main()
        {
            ManagementClass winLogicalDisk = new ManagementClass("Win32_LogicalDisk");
            ObjectQuery oq = new ObjectQuery(
                "SELECT * FROM Win32_LogicalDisk");
            ManagementObjectSearcher query = 
                new ManagementObjectSearcher(winLogicalDisk, oq);
            foreach (ManagementObject mo in query.Get())
            {
                if (mo["DeviceID"] != null && mo["DriveType"] != null && 
                    mo["Size"] != null && mo["FreeSpace"] != null)
                {
                    if (Convert.ToInt32(mo["DriveType"]) == 3)
                    {
                        Console.WriteLine("Drive {0}",
                            mo["DeviceID"]);
                        Console.WriteLine("Size {0} bytes",
                            mo["Size"]);
                        Console.WriteLine("Free {0} bytes",
                            mo["FreeSpace"]);
                    }
                }
            }
        }
    }
  using System;
    using System.Management;
    using System.Collections.Generic;
    using Microsoft.Win32;
    class ManagementClassExample
    {
        public static void main()
        {
            List<ManagementObject> moCollection = new List<ManagementObject>();
            using (ManagementClass winLogicalDisk = 
                new ManagementClass("Win32_LogicalDisk"))
            {
                foreach (ManagementObject mo in 
                    winLogicalDisk.GetInstances())
                {
                    moCollection.Add(mo);
                }
            }
            foreach (ManagementObject mo in moCollection)
            {
                if (mo["DeviceID"] != null && mo["DriveType"] != null && 
                    mo["Size"] != null && mo["FreeSpace"] != null)
                {
                    if (Convert.ToInt32(mo["DriveType"]) == 3)
                    {
                        Console.WriteLine("Drive {0}",
                            mo["DeviceID"]);
                        Console.WriteLine("Size {0} bytes",
                            mo["Size"]);
                        Console.WriteLine("Free {0} bytes",
                            mo["FreeSpace"]);
                    }
                }
            }
        }
    }
 using System;
    using System.Management;
    using System.Linq;
    class ManagementClassExample
    {
        public static void main()
        {
            var winLogicalDisk = new ManagementClass("Win32_LogicalDisk");
            var moCollection = winLogicalDisk.GetInstances();
            foreach (var mo in moCollection.OfType<ManagementObject>())
            {
                if (mo["DeviceID"] != null && mo["DriveType"] != null && 
                    mo["Size"] != null && mo["FreeSpace"] != null)
                {
                    if (Convert.ToInt32(mo["DriveType"]) == 3)
                    {
                        Console.WriteLine("Drive {0}",
                            mo["DeviceID"]);
                        Console.WriteLine("Size {0} bytes",
                            mo["Size"]);
                        Console.WriteLine("Free {0} bytes",
                            mo["FreeSpace"]);
                    }
                }
            }
        }
    }
  using System;
    using System.Management;
    using System.Collections.Generic;
    using System.Diagnostics;
    using Microsoft.Win32;
    class ManagementClassExample
    {
        public static void main()
        {
            List<ManagementObject> moCollection = new List<ManagementObject>();
            using (ManagementClass winLogicalDisk = 
                new ManagementClass("Win32_LogicalDisk"))
            {
                moCollection = 
                    winLogicalDisk.GetInstances().Cast<ManagementObject>
                        ().ToList();
            }
            foreach (ManagementObject mo in moCollection)
            {
                if (mo["DeviceID"] != null && mo["DriveType"] != null && 
                    mo["Size"] != null && mo["FreeSpace"] != null)
                {
                    if (Convert.ToInt32(mo["DriveType"]) == 3)
                    {
                        Console.WriteLine("Drive {0}",
                            mo["DeviceID"]);
                        Console.WriteLine("Size {0} bytes",
                            mo["Size"]);
                        Console.WriteLine("Free {0} bytes",
                            mo["FreeSpace"]);
                    }
                }
            }
        }
    }
  using System;
    using System.Management;
    using System.Collections.Generic;
    using System.Data;
    using Microsoft.Win32;
    class ManagementClassExample
    {
        public static void main()
        {
            DataTable moCollection = 
                new DataTable("Win32_LogicalDisk");
            ManagementObjectSearcher query = 
                new ManagementObjectSearcher("SELECT * FROM Win32_LogicalDisk");
            foreach (ManagementObject mo in query.Get())
            {
                moCollection.Rows.Add(mo["DeviceID"], mo["DriveType"], 
                    mo["Size"], mo["FreeSpace"]);
            }
            foreach (DataRow row in moCollection.Rows)
            {
                if (row["DeviceID"] != null && row["DriveType"] != null && 
                    row["Size"] != null && row["FreeSpace"] != null)
                {
                    if (Convert.ToInt32(row["DriveType"]) == 3)
                    {
                        Console.WriteLine("Drive {0}",
                            row["DeviceID"]);
                        Console.WriteLine("Size {0} bytes",
                            row["Size"]);
                        Console.WriteLine("Free {0} bytes",
                            row["FreeSpace"]);
                    }
                }
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
176
6
Gpt3D_Clone176_6.cs 1 12
Gpt3D_Clone176_6.cs 13 45
----------------------------------------

static void Main () {
    var moCollection = new ManagementClass ("Win32_LogicalDisk").GetInstances ();
    foreach (var mo in moCollection) {
        if (mo ["DeviceID"] != null && mo ["DriveType"] != null && mo ["Size"] != null && mo ["FreeSpace"] != null) {
            if (Convert.ToInt32 (mo ["DriveType"]) == 3) {
                Console.WriteLine ("Drive {0}", mo ["DeviceID"]);
                Console.WriteLine ("Size {0} bytes", mo ["Size"]);
                Console.WriteLine ("Free {0} bytes", mo ["FreeSpace"]);
            }
        }
    }
}
----------------------------------------

  using System;
    using System.Management;
    using System.Linq;
    class ManagementClassExample
    {
        public static void main()
        {
            var winLogicalDisk = new ManagementClass("Win32_LogicalDisk");
            var moCollection = from ManagementObject mo in
                    winLogicalDisk.GetInstances()
                            select mo;
            foreach (var mo in moCollection)
            {
                if (mo["DeviceID"] != null && mo["DriveType"] != null && 
                    mo["Size"] != null && mo["FreeSpace"] != null)
                {
                    if (Convert.ToInt32(mo["DriveType"]) == 3)
                    {
                        Console.WriteLine("Drive {0}",
                            mo["DeviceID"]);
                        Console.WriteLine("Size {0} bytes",
                            mo["Size"]);
                        Console.WriteLine("Free {0} bytes",
                            mo["FreeSpace"]);
                    }
                }
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
176
8
Gpt3D_Clone176_8.cs 1 12
Gpt3D_Clone176_8.cs 13 197
----------------------------------------

static void Main () {
    var moCollection = new ManagementClass ("Win32_LogicalDisk").GetInstances ();
    foreach (var mo in moCollection) {
        if (mo ["DeviceID"] != null && mo ["DriveType"] != null && mo ["Size"] != null && mo ["FreeSpace"] != null) {
            if (Convert.ToInt32 (mo ["DriveType"]) == 3) {
                Console.WriteLine ("Drive {0}", mo ["DeviceID"]);
                Console.WriteLine ("Size {0} bytes", mo ["Size"]);
                Console.WriteLine ("Free {0} bytes", mo ["FreeSpace"]);
            }
        }
    }
}
----------------------------------------

  using System;
    using System.Management;
    using System.Collections;
    using Microsoft.Win32;
    class ManagementClassExample
    {
        public static void main()
        {
            ManagementClass winLogicalDisk = new ManagementClass("Win32_LogicalDisk");
            ObjectQuery oq = new ObjectQuery(
                "SELECT * FROM Win32_LogicalDisk");
            ManagementObjectSearcher query = 
                new ManagementObjectSearcher(winLogicalDisk, oq);
            foreach (ManagementObject mo in query.Get())
            {
                if (mo["DeviceID"] != null && mo["DriveType"] != null && 
                    mo["Size"] != null && mo["FreeSpace"] != null)
                {
                    if (Convert.ToInt32(mo["DriveType"]) == 3)
                    {
                        Console.WriteLine("Drive {0}",
                            mo["DeviceID"]);
                        Console.WriteLine("Size {0} bytes",
                            mo["Size"]);
                        Console.WriteLine("Free {0} bytes",
                            mo["FreeSpace"]);
                    }
                }
            }
        }
    }
  using System;
    using System.Management;
    using System.Collections.Generic;
    using Microsoft.Win32;
    class ManagementClassExample
    {
        public static void main()
        {
            List<ManagementObject> moCollection = new List<ManagementObject>();
            using (ManagementClass winLogicalDisk = 
                new ManagementClass("Win32_LogicalDisk"))
            {
                foreach (ManagementObject mo in 
                    winLogicalDisk.GetInstances())
                {
                    moCollection.Add(mo);
                }
            }
            foreach (ManagementObject mo in moCollection)
            {
                if (mo["DeviceID"] != null && mo["DriveType"] != null && 
                    mo["Size"] != null && mo["FreeSpace"] != null)
                {
                    if (Convert.ToInt32(mo["DriveType"]) == 3)
                    {
                        Console.WriteLine("Drive {0}",
                            mo["DeviceID"]);
                        Console.WriteLine("Size {0} bytes",
                            mo["Size"]);
                        Console.WriteLine("Free {0} bytes",
                            mo["FreeSpace"]);
                    }
                }
            }
        }
    }
 using System;
    using System.Management;
    using System.Linq;
    class ManagementClassExample
    {
        public static void main()
        {
            var winLogicalDisk = new ManagementClass("Win32_LogicalDisk");
            var moCollection = winLogicalDisk.GetInstances();
            foreach (var mo in moCollection.OfType<ManagementObject>())
            {
                if (mo["DeviceID"] != null && mo["DriveType"] != null && 
                    mo["Size"] != null && mo["FreeSpace"] != null)
                {
                    if (Convert.ToInt32(mo["DriveType"]) == 3)
                    {
                        Console.WriteLine("Drive {0}",
                            mo["DeviceID"]);
                        Console.WriteLine("Size {0} bytes",
                            mo["Size"]);
                        Console.WriteLine("Free {0} bytes",
                            mo["FreeSpace"]);
                    }
                }
            }
        }
    }
  using System;
    using System.Management;
    using System.Collections.Generic;
    using System.Diagnostics;
    using Microsoft.Win32;
    class ManagementClassExample
    {
        public static void main()
        {
            List<ManagementObject> moCollection = new List<ManagementObject>();
            using (ManagementClass winLogicalDisk = 
                new ManagementClass("Win32_LogicalDisk"))
            {
                moCollection = 
                    winLogicalDisk.GetInstances().Cast<ManagementObject>
                        ().ToList();
            }
            foreach (ManagementObject mo in moCollection)
            {
                if (mo["DeviceID"] != null && mo["DriveType"] != null && 
                    mo["Size"] != null && mo["FreeSpace"] != null)
                {
                    if (Convert.ToInt32(mo["DriveType"]) == 3)
                    {
                        Console.WriteLine("Drive {0}",
                            mo["DeviceID"]);
                        Console.WriteLine("Size {0} bytes",
                            mo["Size"]);
                        Console.WriteLine("Free {0} bytes",
                            mo["FreeSpace"]);
                    }
                }
            }
        }
    }
  using System;
    using System.Management;
    using System.Collections.Generic;
    using System.Data;
    using Microsoft.Win32;
    class ManagementClassExample
    {
        public static void main()
        {
            DataTable moCollection = 
                new DataTable("Win32_LogicalDisk");
            ManagementObjectSearcher query = 
                new ManagementObjectSearcher("SELECT * FROM Win32_LogicalDisk");
            foreach (ManagementObject mo in query.Get())
            {
                moCollection.Rows.Add(mo["DeviceID"], mo["DriveType"], 
                    mo["Size"], mo["FreeSpace"]);
            }
            foreach (DataRow row in moCollection.Rows)
            {
                if (row["DeviceID"] != null && row["DriveType"] != null && 
                    row["Size"] != null && row["FreeSpace"] != null)
                {
                    if (Convert.ToInt32(row["DriveType"]) == 3)
                    {
                        Console.WriteLine("Drive {0}",
                            row["DeviceID"]);
                        Console.WriteLine("Size {0} bytes",
                            row["Size"]);
                        Console.WriteLine("Free {0} bytes",
                            row["FreeSpace"]);
                    }
                }
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
177
0
Gpt3D_Clone177_0.cs 1 11
Gpt3D_Clone177_0.cs 12 31
----------------------------------------

public static bool Set (string filePath, Style style) {
    bool Success = false;
    try {
        Image i = System.Drawing.Image.FromFile (Path.GetFullPath (filePath));
        Set (i, style);
        Success = true;
    }
    catch {
    }
    return Success;
}
----------------------------------------

 public static bool Set(string filePath, Style style) {
    bool success = false;
    try {
        using (Image i = System.Drawing.Image.FromFile(Path.GetFullPath(filePath)))
        {
            if (i != null)
            {
                Set(i, style);
                success = true;
            }
        }
    }
    catch (Exception ex)
    {
        success = false;
    }
    return success;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
177
1
Gpt3D_Clone177_1.cs 1 11
Gpt3D_Clone177_1.cs 12 33
----------------------------------------

public static bool Set (string filePath, Style style) {
    bool Success = false;
    try {
        Image i = System.Drawing.Image.FromFile (Path.GetFullPath (filePath));
        Set (i, style);
        Success = true;
    }
    catch {
    }
    return Success;
}
----------------------------------------

 public static bool Set(string filePath, Style style) 
{
    bool success = false;
    try 
    {
        using (SystemDrawingImage i = System.Drawing.Image.FromFile(Path.GetFullPath(filePath)))
        {
            if (i != null)
            {
                Set(i, style);
                success = true;
            }
        }
    }
    catch (IOException ex)
    {
        success = false;
    }
    return success;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
177
2
Gpt3D_Clone177_2.cs 1 11
Gpt3D_Clone177_2.cs 12 31
----------------------------------------

public static bool Set (string filePath, Style style) {
    bool Success = false;
    try {
        Image i = System.Drawing.Image.FromFile (Path.GetFullPath (filePath));
        Set (i, style);
        Success = true;
    }
    catch {
    }
    return Success;
}
----------------------------------------

 public static bool Set(string filePath, Style style) 
{
    bool success = false;
    try 
    {
        SystemDrawingImage i = System.Drawing.Image.FromFile(Path.GetFullPath(filePath));
        if (i != null)
        {
            Set(i, style);
            success = true;
        }
    }
    catch (SecurityException ex)
    {
        success = false;
    }
    return success;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
177
3
Gpt3D_Clone177_3.cs 1 11
Gpt3D_Clone177_3.cs 12 31
----------------------------------------

public static bool Set (string filePath, Style style) {
    bool Success = false;
    try {
        Image i = System.Drawing.Image.FromFile (Path.GetFullPath (filePath));
        Set (i, style);
        Success = true;
    }
    catch {
    }
    return Success;
}
----------------------------------------

 public static bool Set(string filePath, Style style) 
{
    bool success = false;
    try 
    {
        SystemDrawingImage i = System.Drawing.Image.FromFile(Path.GetFullPath(filePath));
        if(i != null)
        {
            Set(i, style);
            success = true;
        }
    }
    catch (IOException )
    {
        success = false;
    }
    return success;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
177
4
Gpt3D_Clone177_4.cs 1 11
Gpt3D_Clone177_4.cs 12 31
----------------------------------------

public static bool Set (string filePath, Style style) {
    bool Success = false;
    try {
        Image i = System.Drawing.Image.FromFile (Path.GetFullPath (filePath));
        Set (i, style);
        Success = true;
    }
    catch {
    }
    return Success;
}
----------------------------------------

 public static bool SetImage(string filePath, Style style)
 {
     bool success = false;
     try
     {
         Image img = System.Drawing.Image.FromFile(Path.GetFullPath(filePath));
         if(img != null)
         {
             SetImage(img, style);
             success = true;
         }
     }
     catch (ArgumentException ex)
     {
         success = false;
     }
     return success;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
177
5
Gpt3D_Clone177_5.cs 1 11
Gpt3D_Clone177_5.cs 12 31
----------------------------------------

public static bool Set (string filePath, Style style) {
    bool Success = false;
    try {
        Image i = System.Drawing.Image.FromFile (Path.GetFullPath (filePath));
        Set (i, style);
        Success = true;
    }
    catch {
    }
    return Success;
}
----------------------------------------

 public static bool setImage(string filePath, Style style) 
{
    bool success = false;
    try 
    {
        SystemDrawingImage img = System.Drawing.Image.FromFile(Path.GetFullPath(filePath));
        if (img != null)
        {
            setImage(img, style);
            success = true;
        }
    }
    catch (UnauthorizedAccessException ex)
    {
        success = false;
    }
    return success;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
178
0
Gpt3D_Clone178_0.cs 1 11
Gpt3D_Clone178_0.cs 12 28
----------------------------------------

public static bool Set (string filePath, Style style) {
    bool Success = false;
    try {
        Image i = System.Drawing.Image.FromFile (Path.GetFullPath (filePath));
        Set (i, style);
        Success = true;
    }
    catch {
    }
    return Success;
}
----------------------------------------

 public static bool Set (string filePath, Style style) {
    bool Success = false;
    try {
        Uri uri = new Uri(filePath);
        WebClient wc = new WebClient();
        byte[] bytes = wc.DownloadData(uri);
        MemoryStream ms = new MemoryStream(bytes);
        Image i = Image.FromStream(ms);
        Set(i, style);
        Success = true;
    }
    catch {
    }
    return Success;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
178
1
Gpt3D_Clone178_1.cs 1 11
Gpt3D_Clone178_1.cs 12 27
----------------------------------------

public static bool Set (string filePath, Style style) {
    bool Success = false;
    try {
        Image i = System.Drawing.Image.FromFile (Path.GetFullPath (filePath));
        Set (i, style);
        Success = true;
    }
    catch {
    }
    return Success;
}
----------------------------------------

 public static bool Set (string filePath, Style style) {
    bool Success = false;
    try {
        Image i = System.Drawing.Image.FromFile (Path.GetFullPath (filePath));
        using(FileStream fs = new FileStream(Path.GetFullPath (filePath), FileMode.Open, FileAccess.Write)) {
            i.Save(fs, ImageFormat.Jpeg);
        }
        Set (i, style);
        Success = true;
    }
    catch {
    }
    return Success;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
178
2
Gpt3D_Clone178_2.cs 1 11
Gpt3D_Clone178_2.cs 12 27
----------------------------------------

public static bool Set (string filePath, Style style) {
    bool Success = false;
    try {
        Image i = System.Drawing.Image.FromFile (Path.GetFullPath (filePath));
        Set (i, style);
        Success = true;
    }
    catch {
    }
    return Success;
}
----------------------------------------

public static bool Set (string filePath, Style style) {
    bool Success = false;
    try {
        string base64String = Convert.ToBase64String(File.ReadAllBytes(Path.GetFullPath (filePath)));
        byte[] bytes = Convert.FromBase64String(base64String);
        MemoryStream ms = new MemoryStream(bytes, 0, bytes.Length);
        Image i = Image.FromStream(ms);
        Set(i, style);
        Success = true;
    }
    catch {
    }
    return Success;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
178
3
Gpt3D_Clone178_3.cs 1 11
Gpt3D_Clone178_3.cs 12 26
----------------------------------------

public static bool Set (string filePath, Style style) {
    bool Success = false;
    try {
        Image i = System.Drawing.Image.FromFile (Path.GetFullPath (filePath));
        Set (i, style);
        Success = true;
    }
    catch {
    }
    return Success;
}
----------------------------------------

 public static bool Set (string filePath, Style style) {
    bool Success = false;
    try {
        string fileName = Path.GetFileNameWithoutExtension(filePath);
        ResourceManager rm = new ResourceManager(fileName, Assembly.GetExecutingAssembly());
        Image i = (Image)rm.GetObject(fileName);
        Set(i, style);
        Success = true;
    }
    catch {
    }
    return Success;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
17
0
Gpt3D_Clone17_0.cs 1 13
Gpt3D_Clone17_0.cs 14 35
----------------------------------------

void comboboxrefresh () {
    cnn.Open ();
    SqlCommand cmd = new SqlCommand ("SELECT EmployeeID,EmployeeFirstName,EmployeeLastName FROM Employees", cnn);
    SqlDataReader dr = cmd.ExecuteReader ();
    if (dr.HasRows) {
        combobox1.ValueMember = "Id";
        combobox1.DisplayMember = "FullName";
        while (dr.Read ()) {
            comboBox1.Items.Add (new {FullName = dr.GetString (1) + " " + dr.GetString (2), Id = dr.GetInt32 (0)});
        }
    }
    cnn.Close ();
}
----------------------------------------

 void comboboxrefresh()
{
    cnn.Open();
    SqlCommand cmd = new SqlCommand("SELECT EmployeeID,EmployeeFirstName,EmployeeLastName FROM Employees", cnn);
    SqlDataReader dr = cmd.ExecuteReader();
    if (dr.HasRows)
    {
        Dictionary<int, string> list = new Dictionary<int, string>();
        while (dr.Read())
        {
            int id = dr.GetInt32(0);
            string name = dr.GetString(1) + " " + dr.GetString(2);
            list.Add(id, name);
        }
        combobox1.DataSource = new BindingSource(list, null);
        combobox1.ValueMember = "Key";
        combobox1.DisplayMember = "Value";
    }
    cnn.Close();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
17
1
Gpt3D_Clone17_1.cs 1 13
Gpt3D_Clone17_1.cs 14 33
----------------------------------------

void comboboxrefresh () {
    cnn.Open ();
    SqlCommand cmd = new SqlCommand ("SELECT EmployeeID,EmployeeFirstName,EmployeeLastName FROM Employees", cnn);
    SqlDataReader dr = cmd.ExecuteReader ();
    if (dr.HasRows) {
        combobox1.ValueMember = "Id";
        combobox1.DisplayMember = "FullName";
        while (dr.Read ()) {
            comboBox1.Items.Add (new {FullName = dr.GetString (1) + " " + dr.GetString (2), Id = dr.GetInt32 (0)});
        }
    }
    cnn.Close ();
}
----------------------------------------

 void comboboxrefresh()
{
    cnn.Open();
    SqlCommand cmd = new SqlCommand("SELECT EmployeeID,EmployeeFirstName,EmployeeLastName FROM Employees", cnn);
    SqlDataReader dr = cmd.ExecuteReader();
    if (dr.HasRows)
    {
        List<KeyValuePair<int, string>> employees = new List<KeyValuePair<int, string>>();
        while (dr.Read())
        {
            employees.Add(new KeyValuePair<int, string>(dr.GetInt32(0), dr.GetString(1) + " " + dr.GetString(2)));
        }
        combobox1.DataSource = employees;
        combobox1.ValueMember = "Key";
        combobox1.DisplayMember = "Value";
    }
    cnn.Close();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
17
2
Gpt3D_Clone17_2.cs 1 13
Gpt3D_Clone17_2.cs 14 37
----------------------------------------

void comboboxrefresh () {
    cnn.Open ();
    SqlCommand cmd = new SqlCommand ("SELECT EmployeeID,EmployeeFirstName,EmployeeLastName FROM Employees", cnn);
    SqlDataReader dr = cmd.ExecuteReader ();
    if (dr.HasRows) {
        combobox1.ValueMember = "Id";
        combobox1.DisplayMember = "FullName";
        while (dr.Read ()) {
            comboBox1.Items.Add (new {FullName = dr.GetString (1) + " " + dr.GetString (2), Id = dr.GetInt32 (0)});
        }
    }
    cnn.Close ();
}
----------------------------------------

 void comboboxrefresh()
{
    cnn.Open();
    SqlCommand cmd = new SqlCommand("SELECT EmployeeID,EmployeeFirstName,EmployeeLastName FROM Employees", cnn);
    SqlDataReader dr = cmd.ExecuteReader();
    if (dr.HasRows)
    {
        List<EmployeeData> lstData = new List<EmployeeData>();
        while (dr.Read())
        {
            lstData.Add(new EmployeeData 
            { 
                Id = dr.GetInt32(0), 
                Name = dr.GetString(1) + " " + dr.GetString(2)
            });
        }
        combobox1.DataSource = lstData;
        combobox1.ValueMember = "Id";
        combobox1.DisplayMember = "Name";
    }
    cnn.Close();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
17
3
Gpt3D_Clone17_3.cs 1 13
Gpt3D_Clone17_3.cs 14 37
----------------------------------------

void comboboxrefresh () {
    cnn.Open ();
    SqlCommand cmd = new SqlCommand ("SELECT EmployeeID,EmployeeFirstName,EmployeeLastName FROM Employees", cnn);
    SqlDataReader dr = cmd.ExecuteReader ();
    if (dr.HasRows) {
        combobox1.ValueMember = "Id";
        combobox1.DisplayMember = "FullName";
        while (dr.Read ()) {
            comboBox1.Items.Add (new {FullName = dr.GetString (1) + " " + dr.GetString (2), Id = dr.GetInt32 (0)});
        }
    }
    cnn.Close ();
}
----------------------------------------

 void comboboxrefresh()
{
    cnn.Open();
    SqlCommand cmd = new SqlCommand("SELECT EmployeeID,EmployeeFirstName,EmployeeLastName FROM Employees", cnn);
    SqlDataReader dr = cmd.ExecuteReader();
    if (dr.HasRows)
    {
        List<Employee> employees = new List<Employee>();
        while (dr.Read())
        {
            employees.Add(new Employee 
            {
                Id = dr.GetInt32(0),
                Name= dr.GetString(1) + " " + dr.GetString(2)
            });
        }
        combobox1.DataSource = employees;
        combobox1.ValueMember = "Id";
        combobox1.DisplayMember = "Name";
    }
    cnn.Close();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
17
5
Gpt3D_Clone17_5.cs 1 13
Gpt3D_Clone17_5.cs 14 33
----------------------------------------

void comboboxrefresh () {
    cnn.Open ();
    SqlCommand cmd = new SqlCommand ("SELECT EmployeeID,EmployeeFirstName,EmployeeLastName FROM Employees", cnn);
    SqlDataReader dr = cmd.ExecuteReader ();
    if (dr.HasRows) {
        combobox1.ValueMember = "Id";
        combobox1.DisplayMember = "FullName";
        while (dr.Read ()) {
            comboBox1.Items.Add (new {FullName = dr.GetString (1) + " " + dr.GetString (2), Id = dr.GetInt32 (0)});
        }
    }
    cnn.Close ();
}
----------------------------------------

 void comboboxrefresh()
{
    cnn.Open();
    SqlCommand cmd = new SqlCommand("SELECT EmployeeID,EmployeeFirstName,EmployeeLastName FROM Employees", cnn);
    SqlDataReader dr = cmd.ExecuteReader();
    if (dr.HasRows)
    {
        List<string> employeeList = new List<string>();
        while (dr.Read())
        {
            employeeList.Add(dr.GetInt32(0).ToString() + ":" + dr.GetString(1) + " " + dr.GetString(2));
        }
        combobox1.DataSource = employeeList;
        combobox1.ValueMember = "0";
        combobox1.DisplayMember = "1";
    }
    cnn.Close();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
17
7
Gpt3D_Clone17_7.cs 1 13
Gpt3D_Clone17_7.cs 14 29
----------------------------------------

void comboboxrefresh () {
    cnn.Open ();
    SqlCommand cmd = new SqlCommand ("SELECT EmployeeID,EmployeeFirstName,EmployeeLastName FROM Employees", cnn);
    SqlDataReader dr = cmd.ExecuteReader ();
    if (dr.HasRows) {
        combobox1.ValueMember = "Id";
        combobox1.DisplayMember = "FullName";
        while (dr.Read ()) {
            comboBox1.Items.Add (new {FullName = dr.GetString (1) + " " + dr.GetString (2), Id = dr.GetInt32 (0)});
        }
    }
    cnn.Close ();
}
----------------------------------------

 void comboboxrefresh()
{
    cnn.Open();
    SqlCommand cmd = new SqlCommand("SELECT EmployeeID,EmployeeFirstName,EmployeeLastName FROM Employees", cnn);
    SqlDataReader dr = cmd.ExecuteReader();
    if (dr.HasRows)
    {
        while (dr.Read())
        {
            combobox1.Items.Add(dr.GetInt32(0).ToString() + ":" + dr.GetString(1) + " " + dr.GetString(2));
        }
    }
    cnn.Close();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
17
8
Gpt3D_Clone17_8.cs 1 13
Gpt3D_Clone17_8.cs 14 29
----------------------------------------

void comboboxrefresh () {
    cnn.Open ();
    SqlCommand cmd = new SqlCommand ("SELECT EmployeeID,EmployeeFirstName,EmployeeLastName FROM Employees", cnn);
    SqlDataReader dr = cmd.ExecuteReader ();
    if (dr.HasRows) {
        combobox1.ValueMember = "Id";
        combobox1.DisplayMember = "FullName";
        while (dr.Read ()) {
            comboBox1.Items.Add (new {FullName = dr.GetString (1) + " " + dr.GetString (2), Id = dr.GetInt32 (0)});
        }
    }
    cnn.Close ();
}
----------------------------------------

 void comboboxrefresh()
{
    cnn.Open();
    SqlCommand cmd = new SqlCommand("SELECT EmployeeID,EmployeeFirstName,EmployeeLastName FROM Employees", cnn);
    SqlDataReader dr = cmd.ExecuteReader();
    if (dr.HasRows)
    {
        while (dr.Read())
        {
            combobox1.Items.Add(new EmpData(dr.GetInt32(0), dr.GetString(1) + " " + dr.GetString(2)));
        }
    }
    cnn.Close();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
180
1
Gpt3D_Clone180_1.cs 1 21
Gpt3D_Clone180_1.cs 22 54
----------------------------------------

protected void Button1_Click (object sender, EventArgs e) {
    try {
        using (var conn = new SqlConnection (ConfigurationManager.ConnectionStrings ["RegistrationConnectionString"].ConnectionString))
        {
            using (var cmd = new SqlCommand ("spCheckUsernameForAnswer", conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add (new SqlParameter ("@username", TextBoxUN.Text));
                conn.Open ();
                var returnCode = Convert.ToInt32 (cmd.ExecuteScalar ());
                if (returnCode == 1) {
                    Label1.Text = "Username found";
                } else {
                    Label1.Text = "not found";
                    Register ();
                }
            }}}
    catch (Exception ex) {
        Response.Write ("Error:" + ex.ToString ());
    }
}
----------------------------------------

protected void Button1_Click (object sender, EventArgs e) {
    int code = 0;
    try {
        using (var conn = new SqlConnection (ConfigurationManager.ConnectionStrings ["RegistrationConnectionString"].ConnectionString))
        {
            using (var cmd = new SqlCommand ("spCheckUsernameForAnswer", conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add (new SqlParameter ("@username", TextBoxUN.Text));
                conn.Open ();
                using (SqlDataReader reader = cmd.ExecuteReader ()) {                      
                    if (reader.HasRows) {
                        while (reader.Read ()) {
                            code = reader.GetInt32 (0); // 0 is the ordinal index from the database                                               
                        } 
                    }
                }                
            }
        }
    }
    catch (Exception ex) {
        Response.Write ("Error:" + ex.ToString ());
    }
    
    if (code == 1) {
        Label1.Text = "Username found";
    } else {
        Label1.Text = "not found";
        Register ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
180
2
Gpt3D_Clone180_2.cs 1 21
Gpt3D_Clone180_2.cs 22 53
----------------------------------------

protected void Button1_Click (object sender, EventArgs e) {
    try {
        using (var conn = new SqlConnection (ConfigurationManager.ConnectionStrings ["RegistrationConnectionString"].ConnectionString))
        {
            using (var cmd = new SqlCommand ("spCheckUsernameForAnswer", conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add (new SqlParameter ("@username", TextBoxUN.Text));
                conn.Open ();
                var returnCode = Convert.ToInt32 (cmd.ExecuteScalar ());
                if (returnCode == 1) {
                    Label1.Text = "Username found";
                } else {
                    Label1.Text = "not found";
                    Register ();
                }
            }}}
    catch (Exception ex) {
        Response.Write ("Error:" + ex.ToString ());
    }
}
----------------------------------------

#8 
protected void Button1_Click (object sender, EventArgs e) {
    int code = 0;
    try {
        using (var conn = new SqlConnection (ConfigurationManager.ConnectionStrings ["RegistrationConnectionString"].ConnectionString))
        {
            using (var cmd = new SqlCommand ("spCheckUsernameForAnswer", conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add (new SqlParameter ("@username", TextBoxUN.Text));
                conn.Open ();
                SqlDataReader reader = cmd.ExecuteReader ();
                while (reader.Read ()) {                      
                    code = reader.GetInt32 (0); // 0 is the ordinal index from the database                                               
                }
                reader.Close ();
            }
        }
    }
    catch (Exception ex) {
        Response.Write ("Error:" + ex.ToString ());
    }
    
    if (code == 1) {
        Label1.Text = "Username found";
    } else {
        Label1.Text = "not found";
        Register ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
180
3
Gpt3D_Clone180_3.cs 1 21
Gpt3D_Clone180_3.cs 22 53
----------------------------------------

protected void Button1_Click (object sender, EventArgs e) {
    try {
        using (var conn = new SqlConnection (ConfigurationManager.ConnectionStrings ["RegistrationConnectionString"].ConnectionString))
        {
            using (var cmd = new SqlCommand ("spCheckUsernameForAnswer", conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add (new SqlParameter ("@username", TextBoxUN.Text));
                conn.Open ();
                var returnCode = Convert.ToInt32 (cmd.ExecuteScalar ());
                if (returnCode == 1) {
                    Label1.Text = "Username found";
                } else {
                    Label1.Text = "not found";
                    Register ();
                }
            }}}
    catch (Exception ex) {
        Response.Write ("Error:" + ex.ToString ());
    }
}
----------------------------------------

#6 
protected void Button1_Click (object sender, EventArgs e) {
    int code = 0;
    try {
        using (var conn = new SqlConnection (ConfigurationManager.ConnectionStrings ["RegistrationConnectionString"].ConnectionString))
        {
            using (var cmd = new SqlCommand ("spCheckUsernameForAnswer", conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add (new SqlParameter ("@username", TextBoxUN.Text));
                conn.Open ();
                using (SqlDataReader reader = cmd.ExecuteReader ()) {
                    if (reader.Read ()) {                      
                        code = reader.GetInt32 (0); // 0 is the ordinal index from the database                                               
                    } 
                }                
            }
        }
    }
    catch (Exception ex) {
        Response.Write ("Error:" + ex.ToString ());
    }
    
    if (code == 1) {
        Label1.Text = "Username found";
    } else {
        Label1.Text = "not found";
        Register ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
180
4
Gpt3D_Clone180_4.cs 1 21
Gpt3D_Clone180_4.cs 22 53
----------------------------------------

protected void Button1_Click (object sender, EventArgs e) {
    try {
        using (var conn = new SqlConnection (ConfigurationManager.ConnectionStrings ["RegistrationConnectionString"].ConnectionString))
        {
            using (var cmd = new SqlCommand ("spCheckUsernameForAnswer", conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add (new SqlParameter ("@username", TextBoxUN.Text));
                conn.Open ();
                var returnCode = Convert.ToInt32 (cmd.ExecuteScalar ());
                if (returnCode == 1) {
                    Label1.Text = "Username found";
                } else {
                    Label1.Text = "not found";
                    Register ();
                }
            }}}
    catch (Exception ex) {
        Response.Write ("Error:" + ex.ToString ());
    }
}
----------------------------------------

#10 
protected void Button1_Click (object sender, EventArgs e) {
    int code = 0;
    try {
        using (var conn = new SqlConnection (ConfigurationManager.ConnectionStrings ["RegistrationConnectionString"].ConnectionString))
        {
            using (var cmd = new SqlCommand ("spCheckUsernameForAnswer", conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add (new SqlParameter ("@username", TextBoxUN.Text));
                conn.Open ();
                using (SqlDataReader reader = cmd.ExecuteReader ()) {                      
                    if (reader.HasRows) {
                        code = Convert.ToInt32 (reader.GetValue (0)); // 0 is the ordinal index from the database                                               
                    }
                }                
            }
        }
    }
    catch (Exception ex) {
        Response.Write ("Error:" + ex.ToString ());
    }
    
    if (code == 1) {
        Label1.Text = "Username found";
    } else {
        Label1.Text = "not found";
        Register ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
180
5
Gpt3D_Clone180_5.cs 1 21
Gpt3D_Clone180_5.cs 22 53
----------------------------------------

protected void Button1_Click (object sender, EventArgs e) {
    try {
        using (var conn = new SqlConnection (ConfigurationManager.ConnectionStrings ["RegistrationConnectionString"].ConnectionString))
        {
            using (var cmd = new SqlCommand ("spCheckUsernameForAnswer", conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add (new SqlParameter ("@username", TextBoxUN.Text));
                conn.Open ();
                var returnCode = Convert.ToInt32 (cmd.ExecuteScalar ());
                if (returnCode == 1) {
                    Label1.Text = "Username found";
                } else {
                    Label1.Text = "not found";
                    Register ();
                }
            }}}
    catch (Exception ex) {
        Response.Write ("Error:" + ex.ToString ());
    }
}
----------------------------------------

#7
protected void Button1_Click (object sender, EventArgs e) {
    int code = 0;
    try {
        using (var conn = new SqlConnection (ConfigurationManager.ConnectionStrings ["RegistrationConnectionString"].ConnectionString))
        {
            using (var cmd = new SqlCommand ("spCheckUsernameForAnswer", conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add (new SqlParameter ("@username", TextBoxUN.Text));
                conn.Open ();
                using (SqlDataReader reader = cmd.ExecuteReader ()) {
                    while (reader.Read ()) {                      
                        code = reader.GetInt32 (0); // 0 is the ordinal index from the database                                               
                    } 
                }                
            }
        }
    }
    catch (Exception ex) {
        Response.Write ("Error:" + ex.ToString ());
    }
    
    if (code == 1) {
        Label1.Text = "Username found";
    } else {
        Label1.Text = "not found";
        Register ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
180
6
Gpt3D_Clone180_6.cs 1 21
Gpt3D_Clone180_6.cs 22 51
----------------------------------------

protected void Button1_Click (object sender, EventArgs e) {
    try {
        using (var conn = new SqlConnection (ConfigurationManager.ConnectionStrings ["RegistrationConnectionString"].ConnectionString))
        {
            using (var cmd = new SqlCommand ("spCheckUsernameForAnswer", conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add (new SqlParameter ("@username", TextBoxUN.Text));
                conn.Open ();
                var returnCode = Convert.ToInt32 (cmd.ExecuteScalar ());
                if (returnCode == 1) {
                    Label1.Text = "Username found";
                } else {
                    Label1.Text = "not found";
                    Register ();
                }
            }}}
    catch (Exception ex) {
        Response.Write ("Error:" + ex.ToString ());
    }
}
----------------------------------------

#4 
protected void Button1_Click (object sender, EventArgs e) {
    bool found = false;
    try {
        using (var conn = new SqlConnection (ConfigurationManager.ConnectionStrings ["RegistrationConnectionString"].ConnectionString))
        {
            using (var cmd = new SqlCommand ("spCheckUsernameForAnswer", conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add (new SqlParameter ("@username", TextBoxUN.Text));
                conn.Open ();
                object obj = cmd.ExecuteScalar ();
                if (obj != null) {
                    found = Convert.ToBoolean (obj);
                }
            }}
    }
    catch (Exception ex) {
        Response.Write ("Error:" + ex.ToString ());
    }
    
    if (found) {
        Label1.Text = "Username found";
    } else {
        Label1.Text = "not found";
        Register ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
180
7
Gpt3D_Clone180_7.cs 1 21
Gpt3D_Clone180_7.cs 22 50
----------------------------------------

protected void Button1_Click (object sender, EventArgs e) {
    try {
        using (var conn = new SqlConnection (ConfigurationManager.ConnectionStrings ["RegistrationConnectionString"].ConnectionString))
        {
            using (var cmd = new SqlCommand ("spCheckUsernameForAnswer", conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add (new SqlParameter ("@username", TextBoxUN.Text));
                conn.Open ();
                var returnCode = Convert.ToInt32 (cmd.ExecuteScalar ());
                if (returnCode == 1) {
                    Label1.Text = "Username found";
                } else {
                    Label1.Text = "not found";
                    Register ();
                }
            }}}
    catch (Exception ex) {
        Response.Write ("Error:" + ex.ToString ());
    }
}
----------------------------------------

#2 
protected void Button1_Click (object sender, EventArgs e) {
    int code = 0;
 
    using (var conn = new SqlConnection (ConfigurationManager.ConnectionStrings ["RegistrationConnectionString"].ConnectionString))
    {
        using (var cmd = new SqlCommand ("spCheckUsernameForAnswer", conn))
        {
            try {
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add (new SqlParameter ("@username", TextBoxUN.Text));
                conn.Open ();
                code = Convert.ToInt32 (cmd.ExecuteScalar ());
            }
            catch (Exception ex) {
                Response.Write ("Error:" + ex.ToString ());
            }
        }
    }
    
    if (code == 1) {
        Label1.Text = "Username found";
    } else {
        Label1.Text = "not found";
        Register ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
180
8
Gpt3D_Clone180_8.cs 1 21
Gpt3D_Clone180_8.cs 22 48
----------------------------------------

protected void Button1_Click (object sender, EventArgs e) {
    try {
        using (var conn = new SqlConnection (ConfigurationManager.ConnectionStrings ["RegistrationConnectionString"].ConnectionString))
        {
            using (var cmd = new SqlCommand ("spCheckUsernameForAnswer", conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add (new SqlParameter ("@username", TextBoxUN.Text));
                conn.Open ();
                var returnCode = Convert.ToInt32 (cmd.ExecuteScalar ());
                if (returnCode == 1) {
                    Label1.Text = "Username found";
                } else {
                    Label1.Text = "not found";
                    Register ();
                }
            }}}
    catch (Exception ex) {
        Response.Write ("Error:" + ex.ToString ());
    }
}
----------------------------------------

#5 
protected void Button1_Click (object sender, EventArgs e) {
    bool found = false;
    try {
        using (var conn = new SqlConnection (ConfigurationManager.ConnectionStrings ["RegistrationConnectionString"].ConnectionString))
        {
            using (var cmd = new SqlCommand ("spCheckUsernameForAnswer", conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add (new SqlParameter ("@username", TextBoxUN.Text));
                conn.Open ();
                found = Convert.ToBoolean (cmd.ExecuteScalar ());
            }}
    }
    catch (Exception ex) {
        Response.Write ("Error:" + ex.ToString ());
    }
    
    if (found) {
        Label1.Text = "Username found";
    } else {
        Label1.Text = "not found";
        Register ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
181
0
Gpt3D_Clone181_0.cs 1 15
Gpt3D_Clone181_0.cs 16 32
----------------------------------------

static void Main (string [] args) {
    var fsm = new FiniteStateMachine ();
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.PlugIn);
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.TurnOn);
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.TurnOff);
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.TurnOn);
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.RemovePower);
    Console.WriteLine (fsm.State);
    Console.ReadKey ();
}
----------------------------------------

	static void Main (string [] args) {
    FiniteStateMachine fsm = new FiniteStateMachine ();
    Console.WriteLine (fsm.GetCurrentState ());
    fsm.ProcessEvent (FiniteStateMachine.Events.PlugIn);
    Console.WriteLine (string.Format("State changed to {0}",fsm.GetCurrentState ()));
    fsm.ProcessEvent (FiniteStateMachine.Events.TurnOn);
    Console.WriteLine (string.Format("State changed to {0}",fsm.GetCurrentState ()));
    fsm.ProcessEvent (FiniteStateMachine.Events.TurnOff);
    Console.WriteLine (string.Format("State changed to {0}",fsm.GetCurrentState ()));
    fsm.ProcessEvent (FiniteStateMachine.Events.TurnOn);
    Console.WriteLine (string.Format("State changed to {0}",fsm.GetCurrentState ()));
    fsm.ProcessEvent (FiniteStateMachine.Events.RemovePower);
    Console.WriteLine (string.Format("State changed to {0}",fsm.GetCurrentState ()));
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
181
1
Gpt3D_Clone181_1.cs 1 15
Gpt3D_Clone181_1.cs 16 32
----------------------------------------

static void Main (string [] args) {
    var fsm = new FiniteStateMachine ();
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.PlugIn);
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.TurnOn);
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.TurnOff);
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.TurnOn);
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.RemovePower);
    Console.WriteLine (fsm.State);
    Console.ReadKey ();
}
----------------------------------------

	static void Main (string [] args) {
    FiniteStateMachine fsm = new FiniteStateMachine ();
    Console.WriteLine (fsm.GetCurrentStatus());
    fsm.InitiateEvent (FiniteStateMachine.Events.PlugIn);
    Console.WriteLine (string.Format("State changed to {0}",fsm.GetCurrentStatus()));
    fsm.InitiateEvent (FiniteStateMachine.Events.TurnOn);
    Console.WriteLine (string.Format("State changed to {0}",fsm.GetCurrentStatus()));
    fsm.InitiateEvent (FiniteStateMachine.Events.TurnOff);
    Console.WriteLine (string.Format("State changed to {0}",fsm.GetCurrentStatus()));
    fsm.InitiateEvent (FiniteStateMachine.Events.TurnOn);
    Console.WriteLine (string.Format("State changed to {0}",fsm.GetCurrentStatus()));
    fsm.InitiateEvent (FiniteStateMachine.Events.RemovePower);
    Console.WriteLine (string.Format("State changed to {0}",fsm.GetCurrentStatus()));
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
181
2
Gpt3D_Clone181_2.cs 1 15
Gpt3D_Clone181_2.cs 16 32
----------------------------------------

static void Main (string [] args) {
    var fsm = new FiniteStateMachine ();
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.PlugIn);
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.TurnOn);
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.TurnOff);
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.TurnOn);
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.RemovePower);
    Console.WriteLine (fsm.State);
    Console.ReadKey ();
}
----------------------------------------

	static void Main (string [] args) {
    FiniteStateMachine fsm = new FiniteStateMachine ();
    Console.WriteLine (fsm.GetFlag());
    fsm.PassEvent (FiniteStateMachine.Events.PlugIn);
    Console.WriteLine (string.Format("State changed to {0}",fsm.GetFlag()));
    fsm.PassEvent (FiniteStateMachine.Events.TurnOn);
    Console.WriteLine (string.Format("State changed to {0}",fsm.GetFlag()));
    fsm.PassEvent (FiniteStateMachine.Events.TurnOff);
    Console.WriteLine (string.Format("State changed to {0}",fsm.GetFlag()));
    fsm.PassEvent (FiniteStateMachine.Events.TurnOn);
    Console.WriteLine (string.Format("State changed to {0}",fsm.GetFlag()));
    fsm.PassEvent (FiniteStateMachine.Events.RemovePower);
    Console.WriteLine (string.Format("State changed to {0}",fsm.GetFlag()));
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
181
3
Gpt3D_Clone181_3.cs 1 15
Gpt3D_Clone181_3.cs 16 32
----------------------------------------

static void Main (string [] args) {
    var fsm = new FiniteStateMachine ();
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.PlugIn);
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.TurnOn);
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.TurnOff);
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.TurnOn);
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.RemovePower);
    Console.WriteLine (fsm.State);
    Console.ReadKey ();
}
----------------------------------------

static void Main (string [] args) {
    FiniteStateMachine fsm = new FiniteStateMachine ();
    Console.WriteLine (fsm.Status());
    fsm.DispatchEvent (FiniteStateMachine.Events.PlugIn);
    Console.WriteLine (string.Format("State changed to {0}",fsm.Status()));
    fsm.DispatchEvent (FiniteStateMachine.Events.TurnOn);
    Console.WriteLine (string.Format("State changed to {0}",fsm.Status()));
    fsm.DispatchEvent (FiniteStateMachine.Events.TurnOff);
    Console.WriteLine (string.Format("State changed to {0}",fsm.Status()));
    fsm.DispatchEvent (FiniteStateMachine.Events.TurnOn);
    Console.WriteLine (string.Format("State changed to {0}",fsm.Status()));
    fsm.DispatchEvent (FiniteStateMachine.Events.RemovePower);
    Console.WriteLine (string.Format("State changed to {0}",fsm.Status()));
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
181
4
Gpt3D_Clone181_4.cs 1 15
Gpt3D_Clone181_4.cs 16 32
----------------------------------------

static void Main (string [] args) {
    var fsm = new FiniteStateMachine ();
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.PlugIn);
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.TurnOn);
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.TurnOff);
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.TurnOn);
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.RemovePower);
    Console.WriteLine (fsm.State);
    Console.ReadKey ();
}
----------------------------------------

	static void Main (string [] args) {
    FiniteStateMachine fsm = new FiniteStateMachine ();
    Console.WriteLine (fsm.GetResult());
    fsm.GenerateEvent (FiniteStateMachine.Events.PlugIn);
    Console.WriteLine (string.Format("State changed to {0}",fsm.GetResult()));
    fsm.GenerateEvent (FiniteStateMachine.Events.TurnOn);
    Console.WriteLine (string.Format("State changed to {0}",fsm.GetResult()));
    fsm.GenerateEvent (FiniteStateMachine.Events.TurnOff);
    Console.WriteLine (string.Format("State changed to {0}",fsm.GetResult()));
    fsm.GenerateEvent (FiniteStateMachine.Events.TurnOn);
    Console.WriteLine (string.Format("State changed to {0}",fsm.GetResult()));
    fsm.GenerateEvent (FiniteStateMachine.Events.RemovePower);
    Console.WriteLine (string.Format("State changed to {0}",fsm.GetResult()));
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
181
5
Gpt3D_Clone181_5.cs 1 15
Gpt3D_Clone181_5.cs 16 32
----------------------------------------

static void Main (string [] args) {
    var fsm = new FiniteStateMachine ();
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.PlugIn);
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.TurnOn);
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.TurnOff);
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.TurnOn);
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.RemovePower);
    Console.WriteLine (fsm.State);
    Console.ReadKey ();
}
----------------------------------------

	static void Main (string [] args) {
    FiniteStateMachine fsm = new FiniteStateMachine ();
    Console.WriteLine (fsm.PrintState ());
    fsm.TransitionTo (FiniteStateMachine.Events.PlugIn);
    Console.WriteLine (string.Format("State changed to {0}",fsm.PrintState ()));
    fsm.TransitionTo (FiniteStateMachine.Events.TurnOn);
    Console.WriteLine (string.Format("State changed to {0}",fsm.PrintState ()));
    fsm.TransitionTo (FiniteStateMachine.Events.TurnOff);
    Console.WriteLine (string.Format("State changed to {0}",fsm.PrintState ()));
    fsm.TransitionTo (FiniteStateMachine.Events.TurnOn);
    Console.WriteLine (string.Format("State changed to {0}",fsm.PrintState ()));
    fsm.TransitionTo (FiniteStateMachine.Events.RemovePower);
    Console.WriteLine (string.Format("State changed to {0}",fsm.PrintState ()));
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
181
6
Gpt3D_Clone181_6.cs 1 15
Gpt3D_Clone181_6.cs 16 32
----------------------------------------

static void Main (string [] args) {
    var fsm = new FiniteStateMachine ();
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.PlugIn);
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.TurnOn);
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.TurnOff);
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.TurnOn);
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.RemovePower);
    Console.WriteLine (fsm.State);
    Console.ReadKey ();
}
----------------------------------------

 	static void Main (string [] args) {
    FiniteStateMachine fsm = new FiniteStateMachine ();
    Console.WriteLine (fsm.GetValue());
    fsm.PushEvent (FiniteStateMachine.Events.PlugIn);
    Console.WriteLine (string.Format("State changed to {0}",fsm.GetValue()));
    fsm.PushEvent (FiniteStateMachine.Events.TurnOn);
    Console.WriteLine (string.Format("State changed to {0}",fsm.GetValue()));
    fsm.PushEvent (FiniteStateMachine.Events.TurnOff);
    Console.WriteLine (string.Format("State changed to {0}",fsm.GetValue()));
    fsm.PushEvent (FiniteStateMachine.Events.TurnOn);
    Console.WriteLine (string.Format("State changed to {0}",fsm.GetValue()));
    fsm.PushEvent (FiniteStateMachine.Events.RemovePower);
    Console.WriteLine (string.Format("State changed to {0}",fsm.GetValue()));
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
181
7
Gpt3D_Clone181_7.cs 1 15
Gpt3D_Clone181_7.cs 16 32
----------------------------------------

static void Main (string [] args) {
    var fsm = new FiniteStateMachine ();
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.PlugIn);
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.TurnOn);
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.TurnOff);
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.TurnOn);
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.RemovePower);
    Console.WriteLine (fsm.State);
    Console.ReadKey ();
}
----------------------------------------

	static void Main (string [] args) {
    FiniteStateMachine fsm = new FiniteStateMachine ();
    Console.WriteLine (fsm.PresentState());
    fsm.HandleEvent (FiniteStateMachine.Events.PlugIn);
    Console.WriteLine (string.Format("State changed to {0}",fsm.PresentState()));
    fsm.HandleEvent (FiniteStateMachine.Events.TurnOn);
    Console.WriteLine (string.Format("State changed to {0}",fsm.PresentState()));
    fsm.HandleEvent (FiniteStateMachine.Events.TurnOff);
    Console.WriteLine (string.Format("State changed to {0}",fsm.PresentState()));
    fsm.HandleEvent (FiniteStateMachine.Events.TurnOn);
    Console.WriteLine (string.Format("State changed to {0}",fsm.PresentState()));
    fsm.HandleEvent (FiniteStateMachine.Events.RemovePower);
    Console.WriteLine (string.Format("State changed to {0}",fsm.PresentState()));
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
181
8
Gpt3D_Clone181_8.cs 1 15
Gpt3D_Clone181_8.cs 16 32
----------------------------------------

static void Main (string [] args) {
    var fsm = new FiniteStateMachine ();
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.PlugIn);
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.TurnOn);
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.TurnOff);
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.TurnOn);
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.RemovePower);
    Console.WriteLine (fsm.State);
    Console.ReadKey ();
}
----------------------------------------

	static void Main (string [] args) {
    FiniteStateMachine fsm = new FiniteStateMachine ();
    Console.WriteLine (fsm.CurrentState());
    fsm.ApplyEvent (FiniteStateMachine.Events.PlugIn);
    Console.WriteLine (string.Format("State changed to {0}",fsm.CurrentState()));
    fsm.ApplyEvent (FiniteStateMachine.Events.TurnOn);
    Console.WriteLine (string.Format("State changed to {0}",fsm.CurrentState()));
    fsm.ApplyEvent (FiniteStateMachine.Events.TurnOff);
    Console.WriteLine (string.Format("State changed to {0}",fsm.CurrentState()));
    fsm.ApplyEvent (FiniteStateMachine.Events.TurnOn);
    Console.WriteLine (string.Format("State changed to {0}",fsm.CurrentState()));
    fsm.ApplyEvent (FiniteStateMachine.Events.RemovePower);
    Console.WriteLine (string.Format("State changed to {0}",fsm.CurrentState()));
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
181
9
Gpt3D_Clone181_9.cs 1 15
Gpt3D_Clone181_9.cs 16 32
----------------------------------------

static void Main (string [] args) {
    var fsm = new FiniteStateMachine ();
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.PlugIn);
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.TurnOn);
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.TurnOff);
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.TurnOn);
    Console.WriteLine (fsm.State);
    fsm.ProcessEvent (FiniteStateMachine.Events.RemovePower);
    Console.WriteLine (fsm.State);
    Console.ReadKey ();
}
----------------------------------------

	static void Main (string [] args) {
    FiniteStateMachine fsm = new FiniteStateMachine ();
    Console.WriteLine (fsm.GetState());
    fsm.TriggerEvent (FiniteStateMachine.Events.PlugIn);
    Console.WriteLine (string.Format("State changed to {0}",fsm.GetState()));
    fsm.TriggerEvent (FiniteStateMachine.Events.TurnOn);
    Console.WriteLine (string.Format("State changed to {0}",fsm.GetState()));
    fsm.TriggerEvent (FiniteStateMachine.Events.TurnOff);
    Console.WriteLine (string.Format("State changed to {0}",fsm.GetState()));
    fsm.TriggerEvent (FiniteStateMachine.Events.TurnOn);
    Console.WriteLine (string.Format("State changed to {0}",fsm.GetState()));
    fsm.TriggerEvent (FiniteStateMachine.Events.RemovePower);
    Console.WriteLine (string.Format("State changed to {0}",fsm.GetState()));
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
183
0
Gpt3D_Clone183_0.cs 1 13
Gpt3D_Clone183_0.cs 14 37
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    if (! CanConvert (objectType)) {
        throw new NotSupportedException ();
    }
    if (reader.TokenType == JsonToken.Null) {
        reader.Skip ();
        return null;
    } else if (reader.TokenType == JsonToken.StartObject) {
        return new T [] {serializer.Deserialize < T > (reader)};
    } else {
        return serializer.Deserialize < T [] > (reader);
    }
}
----------------------------------------

 public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
            if (!CanConvert(objectType))
            {
               throw new NotSupportedException();
            } 
            if (reader.TokenType == JsonToken.Null)
            {
               reader.Skip();
               return null;
            } 
            else if (reader.TokenType == JsonToken.StartObject)
            {
               Type elementType = typeof(T);
               T[] array = (T[])Array.CreateInstance(elementType, 1);
               array[0] = serializer.Deserialize<T>(reader);
               return array;
            } 
            else
            {
               return serializer.Deserialize<T[]>(reader);
            }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
183
1
Gpt3D_Clone183_1.cs 1 13
Gpt3D_Clone183_1.cs 14 36
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    if (! CanConvert (objectType)) {
        throw new NotSupportedException ();
    }
    if (reader.TokenType == JsonToken.Null) {
        reader.Skip ();
        return null;
    } else if (reader.TokenType == JsonToken.StartObject) {
        return new T [] {serializer.Deserialize < T > (reader)};
    } else {
        return serializer.Deserialize < T [] > (reader);
    }
}
----------------------------------------

 public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
            if (!CanConvert(objectType))
            {
               throw new NotSupportedException();
            } 
            if (reader.TokenType == JsonToken.Null)
            {
               reader.Skip();
               return null;
            } 
            else if (reader.TokenType == JsonToken.StartObject)
            {
               var array = Array.CreateInstance(typeof(T), 1);
               array.SetValue(serializer.Deserialize<T>(reader), 0);
               return array;
            } 
            else
            {
               return serializer.Deserialize<T[]>(reader);
            }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
183
2
Gpt3D_Clone183_2.cs 1 13
Gpt3D_Clone183_2.cs 14 36
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    if (! CanConvert (objectType)) {
        throw new NotSupportedException ();
    }
    if (reader.TokenType == JsonToken.Null) {
        reader.Skip ();
        return null;
    } else if (reader.TokenType == JsonToken.StartObject) {
        return new T [] {serializer.Deserialize < T > (reader)};
    } else {
        return serializer.Deserialize < T [] > (reader);
    }
}
----------------------------------------

 public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
            if (!CanConvert(objectType))
            {
               throw new NotSupportedException();
            } 
            if (reader.TokenType == JsonToken.Null)
            {
               reader.Skip();
               return null;
            } 
            else if (reader.TokenType == JsonToken.StartObject)
            {
               dynamic array = new T[1];
               array[0] = serializer.Deserialize<T>(reader);
               return array;
            } 
            else
            {
               return serializer.Deserialize<T[]>(reader);
            }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
183
3
Gpt3D_Clone183_3.cs 1 13
Gpt3D_Clone183_3.cs 14 36
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    if (! CanConvert (objectType)) {
        throw new NotSupportedException ();
    }
    if (reader.TokenType == JsonToken.Null) {
        reader.Skip ();
        return null;
    } else if (reader.TokenType == JsonToken.StartObject) {
        return new T [] {serializer.Deserialize < T > (reader)};
    } else {
        return serializer.Deserialize < T [] > (reader);
    }
}
----------------------------------------

 public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
            if (!CanConvert(objectType))
            {
               throw new NotSupportedException();
            } 
            if (reader.TokenType == JsonToken.Null)
            {
               reader.Skip();
               return null;
            } 
            else if (reader.TokenType == JsonToken.StartObject)
            {
               var list = new List<T>();
               list.Add(serializer.Deserialize<T>(reader));
               return list.ToArray();
            } 
            else
            {
               return serializer.Deserialize<T[]>(reader);
            }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
183
4
Gpt3D_Clone183_4.cs 1 13
Gpt3D_Clone183_4.cs 14 36
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    if (! CanConvert (objectType)) {
        throw new NotSupportedException ();
    }
    if (reader.TokenType == JsonToken.Null) {
        reader.Skip ();
        return null;
    } else if (reader.TokenType == JsonToken.StartObject) {
        return new T [] {serializer.Deserialize < T > (reader)};
    } else {
        return serializer.Deserialize < T [] > (reader);
    }
}
----------------------------------------

 public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
         if (!CanConvert(objectType))
         {
            throw new NotSupportedException();
         } 
         if (reader.TokenType == JsonToken.Null)
         {
            reader.Skip();
            return null;
         } 
         else if (reader.TokenType == JsonToken.StartObject)
         {
            var array = new T[1];
            array[0] = serializer.Deserialize<T>(reader);
            return array;
         } 
         else
         {
            return serializer.Deserialize<T[]>(reader);
         }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
183
5
Gpt3D_Clone183_5.cs 1 13
Gpt3D_Clone183_5.cs 14 36
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    if (! CanConvert (objectType)) {
        throw new NotSupportedException ();
    }
    if (reader.TokenType == JsonToken.Null) {
        reader.Skip ();
        return null;
    } else if (reader.TokenType == JsonToken.StartObject) {
        return new T [] {serializer.Deserialize < T > (reader)};
    } else {
        return serializer.Deserialize < T [] > (reader);
    }
}
----------------------------------------

 public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
   
            if (!CanConvert(objectType))
            {
               throw new NotSupportedException();
            } 
            if (reader.TokenType == JsonToken.Null)
            {
               reader.Skip();
               return null;
            } 
            else if (reader.TokenType == JsonToken.StartObject)
            {
               var obj = serializer.Deserialize < T > (reader);
               return new T[] {obj};
            } 
            else
            {
               return serializer.Deserialize(reader, typeof(T[]));
            }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
184
0
Gpt3D_Clone184_0.cs 1 14
Gpt3D_Clone184_0.cs 15 32
----------------------------------------

public static void TrimWavFile (string inPath, string outPath, TimeSpan cutFromStart, TimeSpan cutFromEnd) {
    using (WaveFileReader reader = new WaveFileReader (inPath))
    {
        using (WaveFileWriter writer = new WaveFileWriter (outPath, reader.WaveFormat))
        {
            int bytesPerMillisecond = reader.WaveFormat.AverageBytesPerSecond / 1000;
            int startPos = (int) cutFromStart.TotalMilliseconds * bytesPerMillisecond;
            startPos = startPos - startPos % reader.WaveFormat.BlockAlign;
            int endBytes = (int) cutFromEnd.TotalMilliseconds * bytesPerMillisecond;
            endBytes = endBytes - endBytes % reader.WaveFormat.BlockAlign;
            int endPos = (int) reader.Length - endBytes;
            TrimWavFile (reader, writer, startPos, endPos);
        }}
}
----------------------------------------

 public static void TrimWavFile (string inPath, string outPath, TimeSpan cutFromStart, TimeSpan cutFromEnd) 
    {
        using (WaveFileReader reader = new WaveFileReader (inPath))
        {
            using (WaveFileWriter writer = new WaveFileWriter (outPath, reader.WaveFormat))
            {
                double bytesPerYear = reader.WaveFormat.AverageBytesPerSecond * 31556952;
                int startPos = (int) (cutFromStart.TotalDays/365 * bytesPerYear);
                startPos = startPos - startPos % reader.WaveFormat.BlockAlign;
                int endBytes = (int) (cutFromEnd.TotalDays/365 * bytesPerYear);
                endBytes = endBytes - endBytes % reader.WaveFormat.BlockAlign;
                int endPos = (int) reader.Length - endBytes;
                TrimWavFile (reader, writer, startPos, endPos);
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
184
1
Gpt3D_Clone184_1.cs 1 14
Gpt3D_Clone184_1.cs 15 32
----------------------------------------

public static void TrimWavFile (string inPath, string outPath, TimeSpan cutFromStart, TimeSpan cutFromEnd) {
    using (WaveFileReader reader = new WaveFileReader (inPath))
    {
        using (WaveFileWriter writer = new WaveFileWriter (outPath, reader.WaveFormat))
        {
            int bytesPerMillisecond = reader.WaveFormat.AverageBytesPerSecond / 1000;
            int startPos = (int) cutFromStart.TotalMilliseconds * bytesPerMillisecond;
            startPos = startPos - startPos % reader.WaveFormat.BlockAlign;
            int endBytes = (int) cutFromEnd.TotalMilliseconds * bytesPerMillisecond;
            endBytes = endBytes - endBytes % reader.WaveFormat.BlockAlign;
            int endPos = (int) reader.Length - endBytes;
            TrimWavFile (reader, writer, startPos, endPos);
        }}
}
----------------------------------------

 public static void TrimWavFile (string inPath, string outPath, TimeSpan cutFromStart, TimeSpan cutFromEnd) 
    {
        using (WaveFileReader reader = new WaveFileReader (inPath))
        {
            using (WaveFileWriter writer = new WaveFileWriter (outPath, reader.WaveFormat))
            {
                double bytesPerMillennium = reader.WaveFormat.AverageBytesPerSecond * 31556952000;
                int startPos = (int) (cutFromStart.TotalDays/365000 * bytesPerMillennium);
                startPos = startPos - startPos % reader.WaveFormat.BlockAlign;
                int endBytes = (int) (cutFromEnd.TotalDays/365000 * bytesPerMillennium);
                endBytes = endBytes - endBytes % reader.WaveFormat.BlockAlign;
                int endPos = (int) reader.Length - endBytes;
                TrimWavFile (reader, writer, startPos, endPos);
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
184
2
Gpt3D_Clone184_2.cs 1 14
Gpt3D_Clone184_2.cs 15 32
----------------------------------------

public static void TrimWavFile (string inPath, string outPath, TimeSpan cutFromStart, TimeSpan cutFromEnd) {
    using (WaveFileReader reader = new WaveFileReader (inPath))
    {
        using (WaveFileWriter writer = new WaveFileWriter (outPath, reader.WaveFormat))
        {
            int bytesPerMillisecond = reader.WaveFormat.AverageBytesPerSecond / 1000;
            int startPos = (int) cutFromStart.TotalMilliseconds * bytesPerMillisecond;
            startPos = startPos - startPos % reader.WaveFormat.BlockAlign;
            int endBytes = (int) cutFromEnd.TotalMilliseconds * bytesPerMillisecond;
            endBytes = endBytes - endBytes % reader.WaveFormat.BlockAlign;
            int endPos = (int) reader.Length - endBytes;
            TrimWavFile (reader, writer, startPos, endPos);
        }}
}
----------------------------------------

 public static void TrimWavFile (string inPath, string outPath, TimeSpan cutFromStart, TimeSpan cutFromEnd) 
    {
        using (WaveFileReader reader = new WaveFileReader (inPath))
        {
            using (WaveFileWriter writer = new WaveFileWriter (outPath, reader.WaveFormat))
            {
                double bytesPerMonth = reader.WaveFormat.AverageBytesPerSecond * 2592000;
                int startPos = (int) (cutFromStart.TotalDays/30 * bytesPerMonth);
                startPos = startPos - startPos % reader.WaveFormat.BlockAlign;
                int endBytes = (int) (cutFromEnd.TotalDays/30 * bytesPerMonth);
                endBytes = endBytes - endBytes % reader.WaveFormat.BlockAlign;
                int endPos = (int) reader.Length - endBytes;
                TrimWavFile (reader, writer, startPos, endPos);
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
184
3
Gpt3D_Clone184_3.cs 1 14
Gpt3D_Clone184_3.cs 15 32
----------------------------------------

public static void TrimWavFile (string inPath, string outPath, TimeSpan cutFromStart, TimeSpan cutFromEnd) {
    using (WaveFileReader reader = new WaveFileReader (inPath))
    {
        using (WaveFileWriter writer = new WaveFileWriter (outPath, reader.WaveFormat))
        {
            int bytesPerMillisecond = reader.WaveFormat.AverageBytesPerSecond / 1000;
            int startPos = (int) cutFromStart.TotalMilliseconds * bytesPerMillisecond;
            startPos = startPos - startPos % reader.WaveFormat.BlockAlign;
            int endBytes = (int) cutFromEnd.TotalMilliseconds * bytesPerMillisecond;
            endBytes = endBytes - endBytes % reader.WaveFormat.BlockAlign;
            int endPos = (int) reader.Length - endBytes;
            TrimWavFile (reader, writer, startPos, endPos);
        }}
}
----------------------------------------

 public static void TrimWavFile (string inPath, string outPath, TimeSpan cutFromStart, TimeSpan cutFromEnd) 
    {
        using (WaveFileReader reader = new WaveFileReader (inPath))
        {
            using (WaveFileWriter writer = new WaveFileWriter (outPath, reader.WaveFormat))
            {
                double bytesPerWeek = reader.WaveFormat.AverageBytesPerSecond * 604800;
                int startPos = (int) (cutFromStart.TotalDays/7 * bytesPerWeek);
                startPos = startPos - startPos % reader.WaveFormat.BlockAlign;
                int endBytes = (int) (cutFromEnd.TotalDays/7 * bytesPerWeek);
                endBytes = endBytes - endBytes % reader.WaveFormat.BlockAlign;
                int endPos = (int) reader.Length - endBytes;
                TrimWavFile (reader, writer, startPos, endPos);
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
186
0
Gpt3D_Clone186_0.cs 1 20
Gpt3D_Clone186_0.cs 21 39
----------------------------------------

static void Main (string [] args) {
    int integerSum = 0;
    int count = 0;
    while (true) {
        Console.WriteLine ("Please enter Integer {0} now.", (count + 1));
        string rawInput = Console.ReadLine ();
        int integerInput;
        bool isInteger = int.TryParse (rawInput, out integerInput);
        if (isInteger == false) {
            Console.WriteLine ("This is not a valid integer. Please enter a valid integer now:");
        } else {
            integerSum += integerInput;
            count ++;
        }
        if (count >= 5) {
            break;
        }
    }
    Console.WriteLine ("sum = " + integerSum);
}
----------------------------------------

 static void Main (string [] args) {
    int integerSum = 0;
    int count = 0;
    while (count < 5) {
        Console.WriteLine ("Please enter Integer {0} now.", (count + 1));
        string rawInput = Console.ReadLine ();
        int integerInput;
        bool isInteger = int.TryParse (rawInput, out integerInput);
        if (!isInteger || integerInput < 0) {
            Console.WriteLine ("This is not a valid integer. Please enter a valid integer now:");
        } else {
            integerSum += integerInput;
            count ++;
        }
    }
    Console.WriteLine ("sum = " + integerSum);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
186
1
Gpt3D_Clone186_1.cs 1 20
Gpt3D_Clone186_1.cs 21 38
----------------------------------------

static void Main (string [] args) {
    int integerSum = 0;
    int count = 0;
    while (true) {
        Console.WriteLine ("Please enter Integer {0} now.", (count + 1));
        string rawInput = Console.ReadLine ();
        int integerInput;
        bool isInteger = int.TryParse (rawInput, out integerInput);
        if (isInteger == false) {
            Console.WriteLine ("This is not a valid integer. Please enter a valid integer now:");
        } else {
            integerSum += integerInput;
            count ++;
        }
        if (count >= 5) {
            break;
        }
    }
    Console.WriteLine ("sum = " + integerSum);
}
----------------------------------------

  static void Main (string [] args) {
    int integerSum = 0;
    int count = 0;
    while (count < 5) {
        Console.WriteLine ("Please enter Integer {0} now.", (count + 1));
        string rawInput = Console.ReadLine ();
        int integerInput;
        if (!int.TryParse (rawInput, out integerInput)) {
            Console.WriteLine ("This is not a valid integer. Please enter a valid integer now:");
        } else {
            integerSum += integerInput;
            count ++;
        }
    }
    Console.WriteLine ("sum = " + integerSum);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
187
0
Gpt3D_Clone187_0.cs 1 10
Gpt3D_Clone187_0.cs 11 28
----------------------------------------

public override void OnException (ExceptionContext filterContext) {
    filterContext.HttpContext.Response.TrySkipIisCustomErrors = true;
    filterContext.ExceptionHandled = true;
    filterContext.HttpContext.Response.ClearContent ();
    var controllerName = (string) filterContext.RouteData.Values ["controller"];
    var actionName = (string) filterContext.RouteData.Values ["action"];
    var model = new HandleErrorInfo (filterContext.Exception, controllerName, actionName);
    filterContext.Result = new ViewResult {ViewName = View, MasterName = Master, ViewData = new ViewDataDictionary < HandleErrorInfo > (model), TempData = filterContext.Controller.TempData};
    filterContext.Exception = null;
}
----------------------------------------

 public override void OnException (ExceptionContext filterContext) {
    filterContext.HttpContext.Response.TrySkipIisCustomErrors = true;
    filterContext.ExceptionHandled = true;
    filterContext.HttpContext.Response.ClearContent();
    string controllerName = (string)filterContext.RouteData.Values["controller"];
    string actionName = (string)filterContext.RouteData.Values["action"];
    HandleErrorInfo model = new HandleErrorInfo(filterContext.Exception, controllerName, actionName);
    filterContext.Result = new ViewResult() 
    {
        ViewName = View, 
        MasterName = Master, 
        ViewData = new ViewDataDictionary<HandleErrorInfo>(model), 
        TempData = filterContext.Controller.TempData
    };
    filterContext.Exception = null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
188
0
Gpt3D_Clone188_0.cs 1 10
Gpt3D_Clone188_0.cs 11 26
----------------------------------------

public static void CopyTo (this Stream src, Stream dest) {
    int size = (src.CanSeek) ? Math.Min ((int) (src.Length - src.Position), 0x2000) : 0x2000;
    byte [] buffer = new byte [size];
    int n;
    do
        {
            n = src.Read (buffer, 0, buffer.Length);
            dest.Write (buffer, 0, n);
        } while (n != 0);
}
----------------------------------------

 public static void CopyTo (this Stream src, Stream dest) {
    int size;
    if (src.CanSeek) 
        size = Math.Max((int) (src.Length - src.Position), 0x2000);
    else
        size = 0x2000;
    byte [] buffer = new byte [size];
    int n;
    do
    {
        n = src.Read (buffer, 0, buffer.Length);
        dest.Write (buffer, 0, n);
    } while (n != 0);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
190
1
Gpt3D_Clone190_1.cs 1 10
Gpt3D_Clone190_1.cs 11 22
----------------------------------------

protected virtual void Dispose (bool disposing) {
    if (! _disposed) {
        if (disposing) {
            id = 0;
            name = String.Empty;
            pass = String.Empty;
        }
        _disposed = true;
    }
}
----------------------------------------

 protected virtual void Dispose (bool shallIDispose) {
    if (shallIDispose) {
        if ( _disposed == false) {
            id = 0;
            name = "";
            pass = "";
            _disposed = true;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
190
2
Gpt3D_Clone190_2.cs 1 10
Gpt3D_Clone190_2.cs 11 22
----------------------------------------

protected virtual void Dispose (bool disposing) {
    if (! _disposed) {
        if (disposing) {
            id = 0;
            name = String.Empty;
            pass = String.Empty;
        }
        _disposed = true;
    }
}
----------------------------------------

 protected virtual void Dispose (bool disposing) {
    if (disposing) {
        if (! _disposed) {
            id = 0;
            name = "";
            pass = "";
            _disposed = true;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
190
5
Gpt3D_Clone190_5.cs 1 10
Gpt3D_Clone190_5.cs 11 21
----------------------------------------

protected virtual void Dispose (bool disposing) {
    if (! _disposed) {
        if (disposing) {
            id = 0;
            name = String.Empty;
            pass = String.Empty;
        }
        _disposed = true;
    }
}
----------------------------------------

 protected virtual void Dispose (bool disposing) {
    if (! _disposed) {
        id = 0;
        name = "";
        pass = "";
        _disposed = true;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
191
0
Gpt3D_Clone191_0.cs 1 10
Gpt3D_Clone191_0.cs 11 25
----------------------------------------

static void Main (string [] args) {
    if (! Environment.UserInteractive) {
        ServiceBase [] ServicesToRun;
        ServicesToRun = new ServiceBase [] {new Service ()};
        ServiceBase.Run (ServicesToRun);
        return;
    }
    MainLib lib = new MainLib ();
    lib.Start ();
}
----------------------------------------

 static void Main (string [] args) {	
            if (!Environment.UserInteractive) {
                    using (Service serviceInstance = new Service())
                    {
                        ServiceBase.Run(serviceInstance);
                    }
                    return;
                }
                //run lib
                MainLib lib = new MainLib();
                lib.Start();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
191
1
Gpt3D_Clone191_1.cs 1 10
Gpt3D_Clone191_1.cs 11 24
----------------------------------------

static void Main (string [] args) {
    if (! Environment.UserInteractive) {
        ServiceBase [] ServicesToRun;
        ServicesToRun = new ServiceBase [] {new Service ()};
        ServiceBase.Run (ServicesToRun);
        return;
    }
    MainLib lib = new MainLib ();
    lib.Start ();
}
----------------------------------------

 static void Main (string [] args) {	
            if (!Environment.UserInteractive)
            {  
                ServiceBase[] servicesList ={new Service()};
                ServiceBase.Run(servicesList);
                return;
            }
            //run lib
            MainLib library = new MainLib();
            library.Start();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
191
2
Gpt3D_Clone191_2.cs 1 10
Gpt3D_Clone191_2.cs 11 25
----------------------------------------

static void Main (string [] args) {
    if (! Environment.UserInteractive) {
        ServiceBase [] ServicesToRun;
        ServicesToRun = new ServiceBase [] {new Service ()};
        ServiceBase.Run (ServicesToRun);
        return;
    }
    MainLib lib = new MainLib ();
    lib.Start ();
}
----------------------------------------

	static void Main (string [] args) {
            if (!Environment.UserInteractive)
            {  
                var instanceService = new Service();
                ServiceBase.Run(instanceService);
                return;
            }
            //run lib
            var libraryInstance = new MainLib();
            libraryInstance.Start();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
191
3
Gpt3D_Clone191_3.cs 1 10
Gpt3D_Clone191_3.cs 11 24
----------------------------------------

static void Main (string [] args) {
    if (! Environment.UserInteractive) {
        ServiceBase [] ServicesToRun;
        ServicesToRun = new ServiceBase [] {new Service ()};
        ServiceBase.Run (ServicesToRun);
        return;
    }
    MainLib lib = new MainLib ();
    lib.Start ();
}
----------------------------------------

	static void Main (string [] args) {
            if (!Environment.UserInteractive)
            {  
                var serviceInstance = new Service();
                ServiceBase.Run(serviceInstance);
                return;
            }
            //run lib
            var lib = new MainLib();
            lib.Start();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
191
4
Gpt3D_Clone191_4.cs 1 10
Gpt3D_Clone191_4.cs 11 24
----------------------------------------

static void Main (string [] args) {
    if (! Environment.UserInteractive) {
        ServiceBase [] ServicesToRun;
        ServicesToRun = new ServiceBase [] {new Service ()};
        ServiceBase.Run (ServicesToRun);
        return;
    }
    MainLib lib = new MainLib ();
    lib.Start ();
}
----------------------------------------

  static void Main (string [] args) {
    	if (!Environment.UserInteractive)
            { 
                ServiceBase[] servicesToRun = {new Service()};
                ServiceBase.Run(servicesToRun);
                return;
            }
            //run lib
            var library = new MainLib();
            library.Start();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
191
5
Gpt3D_Clone191_5.cs 1 10
Gpt3D_Clone191_5.cs 11 24
----------------------------------------

static void Main (string [] args) {
    if (! Environment.UserInteractive) {
        ServiceBase [] ServicesToRun;
        ServicesToRun = new ServiceBase [] {new Service ()};
        ServiceBase.Run (ServicesToRun);
        return;
    }
    MainLib lib = new MainLib ();
    lib.Start ();
}
----------------------------------------

  static void Main (string [] args) {
                if (!Environment.UserInteractive)
            { 
                ServiceBase[] servicesRun = new ServiceBase[] { new Service() };
                ServiceBase.Run(servicesRun);
                return;
            }
            //run lib
            MainLib instanceLib = new MainLib();
            instanceLib.Start();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
191
6
Gpt3D_Clone191_6.cs 1 10
Gpt3D_Clone191_6.cs 11 24
----------------------------------------

static void Main (string [] args) {
    if (! Environment.UserInteractive) {
        ServiceBase [] ServicesToRun;
        ServicesToRun = new ServiceBase [] {new Service ()};
        ServiceBase.Run (ServicesToRun);
        return;
    }
    MainLib lib = new MainLib ();
    lib.Start ();
}
----------------------------------------

 static void Main (string [] args) {
            if (!Environment.UserInteractive)
        {  
            var servicesRun = new ServiceBase[] { new Service() };
            ServiceBase.Run(servicesRun);
            return;
        }
        //run lib
        var library = new MainLib();
        library.Start();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
191
7
Gpt3D_Clone191_7.cs 1 10
Gpt3D_Clone191_7.cs 11 23
----------------------------------------

static void Main (string [] args) {
    if (! Environment.UserInteractive) {
        ServiceBase [] ServicesToRun;
        ServicesToRun = new ServiceBase [] {new Service ()};
        ServiceBase.Run (ServicesToRun);
        return;
    }
    MainLib lib = new MainLib ();
    lib.Start ();
}
----------------------------------------

 static void Main (string [] args) {
                if (!Environment.UserInteractive)
            { 
                ServiceBase.Run(new ServiceBase {new Service()});
                return;
            }
            //run lib
            var libraryInstance = new MainLib();
            libraryInstance.Start();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
191
8
Gpt3D_Clone191_8.cs 1 10
Gpt3D_Clone191_8.cs 11 23
----------------------------------------

static void Main (string [] args) {
    if (! Environment.UserInteractive) {
        ServiceBase [] ServicesToRun;
        ServicesToRun = new ServiceBase [] {new Service ()};
        ServiceBase.Run (ServicesToRun);
        return;
    }
    MainLib lib = new MainLib ();
    lib.Start ();
}
----------------------------------------

 static void Main (string [] args) {
            if (!Environment.UserInteractive)
        { 
            ServiceBase.Run(new ServiceBase[]{new Service()});
            return;
        }
        //run lib
        MainLib libInstance = new MainLib();
        libInstance.Start();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
192
0
Gpt3D_Clone192_0.cs 1 19
Gpt3D_Clone192_0.cs 20 58
----------------------------------------

static void Main (string [] args) {
    SelectQuery sQuery = new SelectQuery ("Win32_UserAccount", "Domain='mypcname'");
    try {
        ManagementObjectSearcher mSearcher = new ManagementObjectSearcher (sQuery);
        Console.WriteLine ("User Accounts");
        Console.WriteLine ();
        foreach (ManagementObject mObject in mSearcher.Get ()) {
            Console.WriteLine ("Account {0}", mObject ["Name"]);
            foreach (PropertyData prop in mObject.Properties) {
                Console.WriteLine ("Name: {0}\tValue: {1}", prop.Name, prop.Value);
            }
            Console.WriteLine ();
        }
    }
    catch (Exception ex) {
        Console.WriteLine (ex.ToString ());
    }
    Console.ReadKey ();
}
----------------------------------------

 static void Main (string [] args) 
{ 
    ConnectionOptions options = new ConnectionOptions();
    options.Username = "mypcname";
   
    ManagementScope scope = new ManagementScope(
      @"\\.\root\cimv2", options);
    scope.Connect();
    ObjectQuery query = new ObjectQuery("SELECT * FROM Win32_UserAccount");
    ManagementObjectSearcher searcher = 
        new ManagementObjectSearcher(scope, query);
   
    try
    {
        Console.WriteLine("User Accounts");
        Console.WriteLine();
        foreach(ManagementObject mObject in searcher.Get()) 
        {
            if(mObject["Domain"].ToString() == "mypcname")
            {
                Console.WriteLine ("Account Name : {0}", mObject ["Name"]);
                foreach (PropertyData prop in mObject.Properties) {
                    Console.WriteLine ("Name: {0}\tValue: {1}\tDomain Name : {2}", 
                        prop.Name, prop.Value, mObject["Domain"]);
                }
                Console.WriteLine ();
            }
        }
    }
    catch (Exception ex)
    {
      Console.WriteLine(ex.ToString());
    }
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
192
1
Gpt3D_Clone192_1.cs 1 19
Gpt3D_Clone192_1.cs 20 57
----------------------------------------

static void Main (string [] args) {
    SelectQuery sQuery = new SelectQuery ("Win32_UserAccount", "Domain='mypcname'");
    try {
        ManagementObjectSearcher mSearcher = new ManagementObjectSearcher (sQuery);
        Console.WriteLine ("User Accounts");
        Console.WriteLine ();
        foreach (ManagementObject mObject in mSearcher.Get ()) {
            Console.WriteLine ("Account {0}", mObject ["Name"]);
            foreach (PropertyData prop in mObject.Properties) {
                Console.WriteLine ("Name: {0}\tValue: {1}", prop.Name, prop.Value);
            }
            Console.WriteLine ();
        }
    }
    catch (Exception ex) {
        Console.WriteLine (ex.ToString ());
    }
    Console.ReadKey ();
}
----------------------------------------

 static void Main (string [] args) 
{ 
    ConnectionOptions options = new ConnectionOptions();
    options.Username = "mypcname";
   
    ManagementScope scope = new ManagementScope(
      @"\\.\root\cimv2", options);
    scope.Connect();
    ObjectQuery query = new ObjectQuery("SELECT * FROM Win32_UserAccount");
    ManagementObjectSearcher searcher = 
        new ManagementObjectSearcher(scope, query);
   
    try
    {
        Console.WriteLine("User Accounts");
        Console.WriteLine();
        foreach(ManagementObject mObject in searcher.Get()) 
        {
            if(mObject["Domain"].ToString() == "mypcname")
            {
                Console.WriteLine ("Account {0}", mObject ["Name"]);
                foreach (PropertyData prop in mObject.Properties) {
                    Console.WriteLine ("Name: {0}\tValue: {1}", prop.Name, prop.Value);
                }
                Console.WriteLine ();
            }
        }
    }
    catch (Exception ex)
    {
      Console.WriteLine(ex.ToString());
    }
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
192
2
Gpt3D_Clone192_2.cs 1 19
Gpt3D_Clone192_2.cs 20 55
----------------------------------------

static void Main (string [] args) {
    SelectQuery sQuery = new SelectQuery ("Win32_UserAccount", "Domain='mypcname'");
    try {
        ManagementObjectSearcher mSearcher = new ManagementObjectSearcher (sQuery);
        Console.WriteLine ("User Accounts");
        Console.WriteLine ();
        foreach (ManagementObject mObject in mSearcher.Get ()) {
            Console.WriteLine ("Account {0}", mObject ["Name"]);
            foreach (PropertyData prop in mObject.Properties) {
                Console.WriteLine ("Name: {0}\tValue: {1}", prop.Name, prop.Value);
            }
            Console.WriteLine ();
        }
    }
    catch (Exception ex) {
        Console.WriteLine (ex.ToString ());
    }
    Console.ReadKey ();
}
----------------------------------------

  static void Main (string [] args) 
{ 
   ConnectionOptions options = new ConnectionOptions();
   options.Username = "mypcname";
   
   ManagementScope scope = new ManagementScope(
     @"\\.\root\cimv2", options);
   scope.Connect();
   
   ObjectQuery query = new ObjectQuery(
     "SELECT * FROM Win32_UserAccount");
   ManagementObjectSearcher searcher = 
        new ManagementObjectSearcher(scope, query);
   
   try
   {
      Console.WriteLine("User Accounts");
      Console.WriteLine();
     
      foreach(ManagementObject queryObj in searcher.Get()) 
      {
           Console.WriteLine("Account {0}", queryObj["Name"]);
           foreach (PropertyData prop in queryObj.Properties) {
                Console.WriteLine("Name: {0}\tValue: {1}", prop.Name, prop.Value);
            }
            Console.WriteLine();
      }
    }
    catch (Exception ex)
    {
      Console.WriteLine(ex.ToString());
    }
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
193
0
Gpt3D_Clone193_0.cs 1 12
Gpt3D_Clone193_0.cs 13 31
----------------------------------------

private Update BuildMetaData (MetaData [] nvPairs) {
    Update update = new Update ();
    var ip = new List < InputProperty > ();
    foreach (var nvPair in nvPairs) {
        if (nvPair == null)
            break;
        var inputProp = new InputProperty {Name = "udf:" + nvPair.Name, Val = nvPair.Value};
        ip.Add (inputProp);
    }
    update.Items = ip.ToArray ();
    return update;
}
----------------------------------------

 private Update BuildMetaData(MetaData[] nvPairs) 
{
    Update update = new Update();
    List<InputProperty> ip = new List<InputProperty>();
    nvPairs.ToList().ForEach(nv => {
        if (nv == null) 
            return;
        var inputProp = new InputProperty {Name = "udf:" + nv.Name, Val = nv.Value};
        ip.Add(inputProp);
    });
    
    update.Items = ip.ToArray();
    return update;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
193
1
Gpt3D_Clone193_1.cs 1 12
Gpt3D_Clone193_1.cs 13 31
----------------------------------------

private Update BuildMetaData (MetaData [] nvPairs) {
    Update update = new Update ();
    var ip = new List < InputProperty > ();
    foreach (var nvPair in nvPairs) {
        if (nvPair == null)
            break;
        var inputProp = new InputProperty {Name = "udf:" + nvPair.Name, Val = nvPair.Value};
        ip.Add (inputProp);
    }
    update.Items = ip.ToArray ();
    return update;
}
----------------------------------------

 private Update BuildMetaData(MetaData[] nvPairs) 
{
    Update update = new Update();
    List<InputProperty> ip = new List<InputProperty>();
    for(int i = 0; i < nvPairs.Length; i++) 
    {
        if(nvPairs[i] == null)
            break;
        var nvObj = nvPairs[i];
        var inputProp = new InputProperty {Name = "udf:" + nvObj.Name, Val = nvObj.Value};
        ip.Add(inputProp);
    }
    update.Items = ip.ToArray();
    return update;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
193
2
Gpt3D_Clone193_2.cs 1 12
Gpt3D_Clone193_2.cs 13 31
----------------------------------------

private Update BuildMetaData (MetaData [] nvPairs) {
    Update update = new Update ();
    var ip = new List < InputProperty > ();
    foreach (var nvPair in nvPairs) {
        if (nvPair == null)
            break;
        var inputProp = new InputProperty {Name = "udf:" + nvPair.Name, Val = nvPair.Value};
        ip.Add (inputProp);
    }
    update.Items = ip.ToArray ();
    return update;
}
----------------------------------------

 private Update BuildMetaData(MetaData[] nvPairs) 
{
    Update update = new Update();
    List<InputProperty> ipList = new List<InputProperty>();
    Array.ForEach<MetaData>(nvPairs, nv => {
        if (nv == null) 
            return;
        var inputProp = new InputProperty {Name = "udf:" + nv.Name, Val = nv.Value};
        ipList.Add(inputProp);
    });
    
    update.Items = ipList.ToArray();
    return update;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
193
5
Gpt3D_Clone193_5.cs 1 12
Gpt3D_Clone193_5.cs 13 31
----------------------------------------

private Update BuildMetaData (MetaData [] nvPairs) {
    Update update = new Update ();
    var ip = new List < InputProperty > ();
    foreach (var nvPair in nvPairs) {
        if (nvPair == null)
            break;
        var inputProp = new InputProperty {Name = "udf:" + nvPair.Name, Val = nvPair.Value};
        ip.Add (inputProp);
    }
    update.Items = ip.ToArray ();
    return update;
}
----------------------------------------

 private Update BuildMetaData(MetaData[] nvPairs)
{
    Update update = new Update();
    IList<InputProperty> ip = new List<InputProperty>();
    for(int i = 0; i < nvPairs.Length; i++)
    {
        if(nvPairs[i] == null)
            break;
        var inputProp = new InputProperty {Name = "udf:" + nvPairs[i].Name, Val = nvPairs[i].Value};
        ip.Add(inputProp);
    }
    update.Items = ip.ToArray();
    return update;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
195
0
Gpt3D_Clone195_0.cs 1 11
Gpt3D_Clone195_0.cs 12 28
----------------------------------------

protected override void WndProc (ref Message m) {
    base.WndProc (ref m);
    if (m.Msg == WM_CLIPBOARDUPDATE) {
        IDataObject iData = Clipboard.GetDataObject ();
        if (iData.GetDataPresent (DataFormats.Text)) {
            string text = (string) iData.GetData (DataFormats.Text);
        } else if (iData.GetDataPresent (DataFormats.Bitmap)) {
            Bitmap image = (Bitmap) iData.GetData (DataFormats.Bitmap);
        }
    }
}
----------------------------------------

 protected override void WndProc (ref Message m) {
    base.WndProc (ref m);
    if (m.Msg == WM_CLIPBOARDUPDATE) {
        IDataObject iData = Clipboard.GetDataObject ();
        if (iData.GetDataPresent (DataFormats.Text)) {
            string clipboarddata = iData.GetData (DataFormats.Text).ToString();
            byte[] byteArray = System.Text.Encoding.Unicode.GetBytes(clipboarddata);
            MemoryStream stream = new MemoryStream(byteArray);
            StreamReader reader = new StreamReader(stream);
            string text = reader.ReadToEnd();
        } else if (iData.GetDataPresent (DataFormats.Bitmap)) {
            Bitmap image = (Bitmap) iData.GetData (DataFormats.Bitmap);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
195
1
Gpt3D_Clone195_1.cs 1 11
Gpt3D_Clone195_1.cs 12 28
----------------------------------------

protected override void WndProc (ref Message m) {
    base.WndProc (ref m);
    if (m.Msg == WM_CLIPBOARDUPDATE) {
        IDataObject iData = Clipboard.GetDataObject ();
        if (iData.GetDataPresent (DataFormats.Text)) {
            string text = (string) iData.GetData (DataFormats.Text);
        } else if (iData.GetDataPresent (DataFormats.Bitmap)) {
            Bitmap image = (Bitmap) iData.GetData (DataFormats.Bitmap);
        }
    }
}
----------------------------------------

protected override void WndProc (ref Message m) {
    base.WndProc (ref m);
    if (m.Msg == WM_CLIPBOARDUPDATE) {
        IDataObject iData = Clipboard.GetDataObject ();
        if (iData.GetDataPresent (DataFormats.Text)) {
            string text=Path.GetTempFileName();
            using (StreamWriter sw = new StreamWriter(text))
            {
                sw.Write(iData.GetData (DataFormats.Text).ToString());
            }
        } else if (iData.GetDataPresent (DataFormats.Bitmap)) {
            Bitmap image = (Bitmap) iData.GetData (DataFormats.Bitmap);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
195
2
Gpt3D_Clone195_2.cs 1 11
Gpt3D_Clone195_2.cs 12 26
----------------------------------------

protected override void WndProc (ref Message m) {
    base.WndProc (ref m);
    if (m.Msg == WM_CLIPBOARDUPDATE) {
        IDataObject iData = Clipboard.GetDataObject ();
        if (iData.GetDataPresent (DataFormats.Text)) {
            string text = (string) iData.GetData (DataFormats.Text);
        } else if (iData.GetDataPresent (DataFormats.Bitmap)) {
            Bitmap image = (Bitmap) iData.GetData (DataFormats.Bitmap);
        }
    }
}
----------------------------------------

 protected override void WndProc (ref Message m) {
    base.WndProc (ref m);
    if (m.Msg == WM_CLIPBOARDUPDATE) {
        IDataObject iData = Clipboard.GetDataObject ();
        if (iData.GetDataPresent (DataFormats.Text)) {
            Stream st = (Stream)iData.GetData (DataFormats.Text);
            StreamReader sr = new StreamReader(st);
            string text = sr.ReadToEnd();
        } else if (iData.GetDataPresent (DataFormats.Bitmap)) {
            Bitmap image = (Bitmap) iData.GetData (DataFormats.Bitmap);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
195
3
Gpt3D_Clone195_3.cs 1 11
Gpt3D_Clone195_3.cs 12 26
----------------------------------------

protected override void WndProc (ref Message m) {
    base.WndProc (ref m);
    if (m.Msg == WM_CLIPBOARDUPDATE) {
        IDataObject iData = Clipboard.GetDataObject ();
        if (iData.GetDataPresent (DataFormats.Text)) {
            string text = (string) iData.GetData (DataFormats.Text);
        } else if (iData.GetDataPresent (DataFormats.Bitmap)) {
            Bitmap image = (Bitmap) iData.GetData (DataFormats.Bitmap);
        }
    }
}
----------------------------------------

  protected override void WndProc (ref Message m) {
    base.WndProc (ref m);
    if (m.Msg == WM_CLIPBOARDUPDATE) {
        IDataObject iData = Clipboard.GetDataObject ();
        if (iData.GetDataPresent (DataFormats.Text)) {
            MemoryStream ms = (MemoryStream)iData.GetData (DataFormats.Text);
            StreamReader sr = new StreamReader(ms);
            string text = sr.ReadToEnd();
        } else if (iData.GetDataPresent (DataFormats.Bitmap)) {
            Bitmap image = (Bitmap) iData.GetData (DataFormats.Bitmap);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
195
4
Gpt3D_Clone195_4.cs 1 11
Gpt3D_Clone195_4.cs 12 28
----------------------------------------

protected override void WndProc (ref Message m) {
    base.WndProc (ref m);
    if (m.Msg == WM_CLIPBOARDUPDATE) {
        IDataObject iData = Clipboard.GetDataObject ();
        if (iData.GetDataPresent (DataFormats.Text)) {
            string text = (string) iData.GetData (DataFormats.Text);
        } else if (iData.GetDataPresent (DataFormats.Bitmap)) {
            Bitmap image = (Bitmap) iData.GetData (DataFormats.Bitmap);
        }
    }
}
----------------------------------------

  protected override void WndProc (ref Message m) {
    base.WndProc (ref m);
    if (m.Msg == WM_CLIPBOARDUPDATE) {
        IDataObject iData = Clipboard.GetDataObject ();
        if (iData.GetDataPresent (DataFormats.Text)) {
            object clipData = (object)iData.GetData (DataFormats.Text);
            if (clipData != null)
            {
                string text = clipData.ToString();
            }
        } else if (iData.GetDataPresent (DataFormats.Bitmap)) {
            Bitmap image = (Bitmap) iData.GetData (DataFormats.Bitmap);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
196
2
Gpt3D_Clone196_2.cs 1 11
Gpt3D_Clone196_2.cs 12 32
----------------------------------------

protected override void WndProc (ref Message m) {
    base.WndProc (ref m);
    if (m.Msg == WM_CLIPBOARDUPDATE) {
        IDataObject iData = Clipboard.GetDataObject ();
        if (iData.GetDataPresent (DataFormats.Text)) {
            string text = (string) iData.GetData (DataFormats.Text);
        } else if (iData.GetDataPresent (DataFormats.Bitmap)) {
            Bitmap image = (Bitmap) iData.GetData (DataFormats.Bitmap);
        }
    }
}
----------------------------------------

 protected override void WndProc (ref Message m) 
{
    if (m.Msg == WM_CLIPBOARDUPDATE) {
        IDataObject iData = Clipboard.GetDataObject ();
        if (iData.GetDataPresent (DataFormats.Text)) {
            string text = (string) iData.GetData (DataFormats.Text);
            ProcessClipboardText(text);
        } 
        else if (iData.GetDataPresent (DataFormats.Bitmap)) {
            Bitmap image = (Bitmap) iData.GetData (DataFormats.Bitmap);
            ProcessClipboardImage(image);
        }
    }
    else
    {
        base.WndProc (ref m); 
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
196
3
Gpt3D_Clone196_3.cs 1 11
Gpt3D_Clone196_3.cs 12 30
----------------------------------------

protected override void WndProc (ref Message m) {
    base.WndProc (ref m);
    if (m.Msg == WM_CLIPBOARDUPDATE) {
        IDataObject iData = Clipboard.GetDataObject ();
        if (iData.GetDataPresent (DataFormats.Text)) {
            string text = (string) iData.GetData (DataFormats.Text);
        } else if (iData.GetDataPresent (DataFormats.Bitmap)) {
            Bitmap image = (Bitmap) iData.GetData (DataFormats.Bitmap);
        }
    }
}
----------------------------------------

 protected override void WndProc (ref Message m) 
{
    if (m.Msg == WM_CLIPBOARDUPDATE) 
    {
        IDataObject iData = Clipboard.GetDataObject ();
         if (iData.GetDataPresent (DataFormats.Text)) {
            string text = (string) iData.GetData (DataFormats.Text);
            ProcessClipboardText(text);
        } 
        else if (iData.GetDataPresent (DataFormats.Bitmap)) {
            Bitmap image = (Bitmap) iData.GetData (DataFormats.Bitmap);
            ProcessClipboardImage(image);
        }
    }
    base.WndProc(m); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
196
5
Gpt3D_Clone196_5.cs 1 11
Gpt3D_Clone196_5.cs 12 28
----------------------------------------

protected override void WndProc (ref Message m) {
    base.WndProc (ref m);
    if (m.Msg == WM_CLIPBOARDUPDATE) {
        IDataObject iData = Clipboard.GetDataObject ();
        if (iData.GetDataPresent (DataFormats.Text)) {
            string text = (string) iData.GetData (DataFormats.Text);
        } else if (iData.GetDataPresent (DataFormats.Bitmap)) {
            Bitmap image = (Bitmap) iData.GetData (DataFormats.Bitmap);
        }
    }
}
----------------------------------------

 protected override void WndProc (ref Message m)
{
    if (m.Msg == WM_CLIPBOARDUPDATE) {
        IDataObject iData = Clipboard.GetDataObject ();
        if (iData.GetDataPresent (DataFormats.Text)) {
            string text = (string) iData.GetData (DataFormats.Text);
            UpdateClipboardText(text);
        } else if (iData.GetDataPresent (DataFormats.Bitmap)) {
            Bitmap image = (Bitmap) iData.GetData (DataFormats.Bitmap);
            UpdateClipboardImage(image);
        } 
    } 
    base.WndProc (ref m);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
196
6
Gpt3D_Clone196_6.cs 1 11
Gpt3D_Clone196_6.cs 12 29
----------------------------------------

protected override void WndProc (ref Message m) {
    base.WndProc (ref m);
    if (m.Msg == WM_CLIPBOARDUPDATE) {
        IDataObject iData = Clipboard.GetDataObject ();
        if (iData.GetDataPresent (DataFormats.Text)) {
            string text = (string) iData.GetData (DataFormats.Text);
        } else if (iData.GetDataPresent (DataFormats.Bitmap)) {
            Bitmap image = (Bitmap) iData.GetData (DataFormats.Bitmap);
        }
    }
}
----------------------------------------

 protected override void WndProc (ref Message m) 
{
    if (m.Msg == WM_CLIPBOARDUPDATE) {
        IDataObject iData = Clipboard.GetDataObject ();
        if (iData.GetDataPresent (DataFormats.Text)) {
            string text = (string) iData.GetData (DataFormats.Text);
            ProcessClipboardText(text);
        } 
        else if (iData.GetDataPresent (DataFormats.Bitmap)) {
            Bitmap image = (Bitmap) iData.GetData (DataFormats.Bitmap);
            ProcessClipboardImage(image);
        }
    }
    base.WndProc (ref m);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
197
0
Gpt3D_Clone197_0.cs 1 11
Gpt3D_Clone197_0.cs 12 29
----------------------------------------

protected override void WndProc (ref Message m) {
    base.WndProc (ref m);
    if (m.Msg == WM_CLIPBOARDUPDATE) {
        IDataObject iData = Clipboard.GetDataObject ();
        if (iData.GetDataPresent (DataFormats.Text)) {
            string text = (string) iData.GetData (DataFormats.Text);
        } else if (iData.GetDataPresent (DataFormats.Bitmap)) {
            Bitmap image = (Bitmap) iData.GetData (DataFormats.Bitmap);
        }
    }
}
----------------------------------------

protected override void WndProc (ref Message m) {
    base.WndProc (ref m);
    if (m.Msg == WM_CLIPBOARDUPDATE) {
        IDataObject iData = Clipboard.GetDataObject ();
        string[] formats = iData.GetFormats();
        foreach (string format in formats)
        {
            if (format == DataFormats.Text) {
                string text = (string) iData.GetData (DataFormats.Text);
            }
            if (format == DataFormats.Bitmap) {
                Bitmap image = (Bitmap) iData.GetData (DataFormats.Bitmap);
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
197
1
Gpt3D_Clone197_1.cs 1 11
Gpt3D_Clone197_1.cs 12 28
----------------------------------------

protected override void WndProc (ref Message m) {
    base.WndProc (ref m);
    if (m.Msg == WM_CLIPBOARDUPDATE) {
        IDataObject iData = Clipboard.GetDataObject ();
        if (iData.GetDataPresent (DataFormats.Text)) {
            string text = (string) iData.GetData (DataFormats.Text);
        } else if (iData.GetDataPresent (DataFormats.Bitmap)) {
            Bitmap image = (Bitmap) iData.GetData (DataFormats.Bitmap);
        }
    }
}
----------------------------------------

protected override void WndProc (ref Message m) {
    base.WndProc (ref m);
    if (m.Msg == WM_CLIPBOARDUPDATE) {
        IDataObject iData = Clipboard.GetDataObject ();
        foreach (string format in iData.GetDataPresent())
        {
            if (format == DataFormats.Text) {
                string text = (string) iData.GetData (DataFormats.Text);
            }
            if (format == DataFormats.Bitmap) {
                Bitmap image = (Bitmap) iData.GetData (DataFormats.Bitmap);
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
202
0
Gpt3D_Clone202_0.cs 1 19
Gpt3D_Clone202_0.cs 20 50
----------------------------------------

public bool removeStock (string user_name, string stock_symbol) {
    user_name = user_name.Trim ();
    stock_symbol = stock_symbol.Trim ();
    string statement = "DELETE FROM users_stocks 
                          WHERE user_name = '" + user_name + "' 
                          AND stock_symbol = '" + stock_symbol + "'";
    SqlCommand cmdnon = new SqlCommand (statement, connection);
    try {
        connection.Open ();
        int num = cmdnon.ExecuteNonQuery ();
        connection.Close ();
        return true;
    }
    catch (SqlException ex) {
        Console.WriteLine (ex.ToString ());
        connection.Close ();
        return false;
    }
}
----------------------------------------

 public bool removeStock (string user_name, string stock_symbol){
    user_name = user_name.Trim();
    stock_symbol = stock_symbol.Trim();
    string querystring = "DELETE FROM [dbo].[users_stocks] 
WHERE user_name=@user_name 
AND stock_symbol=@stock_symbol";
    try {
        connection.Open ();
        SqlTransaction transaction = connection.BeginTransaction();
        SqlCommand cmd = new SqlCommand(querystring , connection);
        cmd.Transaction = transaction;
        SqlParameter param1 = new SqlParameter("@user_name", user_name);
        SqlParameter param2 = new SqlParameter("@stock_symbol", stock_symbol);
        cmd.Parameters.Add(param1);
        cmd.Parameters.Add(param2);
       
        cmd.ExecuteNonQuery();
        transaction.Commit();
        connection.Close ();
        return true;
    }
    catch (SqlException ex) {
        Console.WriteLine (ex.ToString ());
        connection.Close ();
        return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
202
1
Gpt3D_Clone202_1.cs 1 19
Gpt3D_Clone202_1.cs 20 43
----------------------------------------

public bool removeStock (string user_name, string stock_symbol) {
    user_name = user_name.Trim ();
    stock_symbol = stock_symbol.Trim ();
    string statement = "DELETE FROM users_stocks 
                          WHERE user_name = '" + user_name + "' 
                          AND stock_symbol = '" + stock_symbol + "'";
    SqlCommand cmdnon = new SqlCommand (statement, connection);
    try {
        connection.Open ();
        int num = cmdnon.ExecuteNonQuery ();
        connection.Close ();
        return true;
    }
    catch (SqlException ex) {
        Console.WriteLine (ex.ToString ());
        connection.Close ();
        return false;
    }
}
----------------------------------------

 public bool removeStock (string user_name, string stock_symbol){
    user_name = user_name.Trim();
    stock_symbol = stock_symbol.Trim();
    string statement = "DELETE FROM users_stocks 
WHERE user_name = @user_name AND stock_symbol = @stock_symbol";
    SqlCommand cmdnon = new SqlCommand (statement, connection);
    cmdnon.Parameters.Add("@user_name", user_name);
    cmdnon.Parameters.Add("@stock_symbol", stock_symbol);
    try {
        connection.Open ();
        SqlDataAdapter adapter = new SqlDataAdapter();
        adapter.DeleteCommand = cmdnon;
        int num = cmdnon.ExecuteNonQuery ();
        connection.Close ();
        return true;
    }
    catch (SqlException ex) {
        Console.WriteLine (ex.ToString ());
        connection.Close ();
        return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
202
2
Gpt3D_Clone202_2.cs 1 19
Gpt3D_Clone202_2.cs 20 47
----------------------------------------

public bool removeStock (string user_name, string stock_symbol) {
    user_name = user_name.Trim ();
    stock_symbol = stock_symbol.Trim ();
    string statement = "DELETE FROM users_stocks 
                          WHERE user_name = '" + user_name + "' 
                          AND stock_symbol = '" + stock_symbol + "'";
    SqlCommand cmdnon = new SqlCommand (statement, connection);
    try {
        connection.Open ();
        int num = cmdnon.ExecuteNonQuery ();
        connection.Close ();
        return true;
    }
    catch (SqlException ex) {
        Console.WriteLine (ex.ToString ());
        connection.Close ();
        return false;
    }
}
----------------------------------------

 public bool removeStock (string user_name, string stock_symbol){
    user_name = user_name.Trim();
    stock_symbol = stock_symbol.Trim();
    string querystring = "DELETE FROM [dbo].[users_stocks] 
WHERE user_name=@user_name 
AND stock_symbol=@stock_symbol";
    try {
        connection.Open ();
        SqlCommand cmd = new SqlCommand(querystring , connection);
        SqlParameter param1 = new SqlParameter("@user_name", user_name);
        SqlParameter param2 = new SqlParameter("@stock_symbol", stock_symbol);
        cmd.Parameters.Add(param1);
        cmd.Parameters.Add(param2);
       
        cmd.ExecuteNonQuery();
        connection.Close ();
        return true;
    }
    catch (SqlException ex) {
        Console.WriteLine (ex.ToString ());
        connection.Close ();
        return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
202
3
Gpt3D_Clone202_3.cs 1 19
Gpt3D_Clone202_3.cs 20 42
----------------------------------------

public bool removeStock (string user_name, string stock_symbol) {
    user_name = user_name.Trim ();
    stock_symbol = stock_symbol.Trim ();
    string statement = "DELETE FROM users_stocks 
                          WHERE user_name = '" + user_name + "' 
                          AND stock_symbol = '" + stock_symbol + "'";
    SqlCommand cmdnon = new SqlCommand (statement, connection);
    try {
        connection.Open ();
        int num = cmdnon.ExecuteNonQuery ();
        connection.Close ();
        return true;
    }
    catch (SqlException ex) {
        Console.WriteLine (ex.ToString ());
        connection.Close ();
        return false;
    }
}
----------------------------------------

 public bool removeStock (string user_name, string stock_symbol){
   user_name = user_name.Trim();
   stock_symbol = stock_symbol.Trim();
   string statement = "DELETE FROM users_stocks 
WHERE user_name = @user_name AND stock_symbol = @stock_symbol";
   try {
       connection.Open ();
       using(var sqlCmd = new SqlCommand(statement , connection)){
           sqlCmd.Parameters.AddWithValue("@user_name", user_name);
           sqlCmd.Parameters.AddWithValue("@stock_symbol", stock_symbol);
           int noRows = sqlCmd.ExecuteNonQuery();
           connection.Close ();
           return true;
       }
   }
   catch (SqlException ex) {
       Console.WriteLine (ex.ToString ());
       connection.Close ();
       return false;
   }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
203
0
Gpt3D_Clone203_0.cs 1 19
Gpt3D_Clone203_0.cs 20 44
----------------------------------------

public bool removeStock (string user_name, string stock_symbol) {
    user_name = user_name.Trim ();
    stock_symbol = stock_symbol.Trim ();
    string statement = "DELETE FROM users_stocks " + "WHERE user_name = @name AND stock_symbol = @stock";
    SqlCommand cmdnon = new SqlCommand (statement, connection);
    try {
        cmdnon.Parameters.AddWithValue ("@name", user_name);
        cmdnon.Parameters.AddWithValue ("@stock", stock_symbol);
        connection.Open ();
        int num = cmdnon.ExecuteNonQuery ();
        connection.Close ();
        return true;
    }
    catch (SqlException ex) {
        Console.WriteLine (ex.ToString ());
        connection.Close ();
        return false;
    }
}
----------------------------------------

 public bool removeStock (string user_name, string stock_symbol) {
    user_name = user_name.Trim ();
    stock_symbol = stock_symbol.Trim ();
    string statement = "DELETE FROM users_stocks WHERE user_name = @name AND stock_symbol = @stock";
    SqlCommand cmdnon = new SqlCommand (statement, connection);
    bool success = false;
    try {
        cmdnon.Parameters.AddWithValue ("@name", user_name);
        cmdnon.Parameters.AddWithValue ("@stock", stock_symbol);
        connection.Open ();
        int num = cmdnon.ExecuteNonQuery ();
        if (num > 0) {
            success = true;
        }
        connection.Close ();
        return success;
    }
    catch (SqlException ex) {
        Console.WriteLine (ex.ToString ());
        connection.Close ();
        return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
203
1
Gpt3D_Clone203_1.cs 1 19
Gpt3D_Clone203_1.cs 20 47
----------------------------------------

public bool removeStock (string user_name, string stock_symbol) {
    user_name = user_name.Trim ();
    stock_symbol = stock_symbol.Trim ();
    string statement = "DELETE FROM users_stocks " + "WHERE user_name = @name AND stock_symbol = @stock";
    SqlCommand cmdnon = new SqlCommand (statement, connection);
    try {
        cmdnon.Parameters.AddWithValue ("@name", user_name);
        cmdnon.Parameters.AddWithValue ("@stock", stock_symbol);
        connection.Open ();
        int num = cmdnon.ExecuteNonQuery ();
        connection.Close ();
        return true;
    }
    catch (SqlException ex) {
        Console.WriteLine (ex.ToString ());
        connection.Close ();
        return false;
    }
}
----------------------------------------

 public bool removeStock (string user_name, string stock_symbol) {
    user_name = user_name.Trim ();
    stock_symbol = stock_symbol.Trim ();
    string statement = "DELETE FROM users_stocks WHERE user_name = @name AND stock_symbol = @stock";
    SqlCommand cmdnon = new SqlCommand (statement, connection);
    try {
        cmdnon.Parameters.AddWithValue ("@name", user_name);
        cmdnon.Parameters.AddWithValue ("@stock", stock_symbol);
        connection.Open ();
        int num = cmdnon.ExecuteNonQuery ();
        if (num == 0) 
        {
            return false;
        }
        else
        {
            return true;
        }
        connection.Close ();
    }
    catch (SqlException ex) {
        Console.WriteLine (ex.ToString ());
        connection.Close ();
        return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
203
2
Gpt3D_Clone203_2.cs 1 19
Gpt3D_Clone203_2.cs 20 43
----------------------------------------

public bool removeStock (string user_name, string stock_symbol) {
    user_name = user_name.Trim ();
    stock_symbol = stock_symbol.Trim ();
    string statement = "DELETE FROM users_stocks " + "WHERE user_name = @name AND stock_symbol = @stock";
    SqlCommand cmdnon = new SqlCommand (statement, connection);
    try {
        cmdnon.Parameters.AddWithValue ("@name", user_name);
        cmdnon.Parameters.AddWithValue ("@stock", stock_symbol);
        connection.Open ();
        int num = cmdnon.ExecuteNonQuery ();
        connection.Close ();
        return true;
    }
    catch (SqlException ex) {
        Console.WriteLine (ex.ToString ());
        connection.Close ();
        return false;
    }
}
----------------------------------------

 public bool removeStock (string user_name, string stock_symbol) {
    user_name = user_name.Trim ();
    stock_symbol = stock_symbol.Trim ();
    string statement = "DELETE FROM users_stocks WHERE user_name = @name AND stock_symbol = @stock";
    SqlCommand cmdnon = new SqlCommand (statement, connection);
    bool success = false;
    try {
        cmdnon.Parameters.AddWithValue ("@name", user_name);
        cmdnon.Parameters.AddWithValue ("@stock", stock_symbol);
        connection.Open ();
        if (cmdnon.ExecuteNonQuery () == 1) {
            success = true;
        }
        connection.Close ();
        return success;
    }
    catch (SqlException ex) {
        Console.WriteLine (ex.ToString ());
        connection.Close ();
        return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
203
3
Gpt3D_Clone203_3.cs 1 19
Gpt3D_Clone203_3.cs 20 43
----------------------------------------

public bool removeStock (string user_name, string stock_symbol) {
    user_name = user_name.Trim ();
    stock_symbol = stock_symbol.Trim ();
    string statement = "DELETE FROM users_stocks " + "WHERE user_name = @name AND stock_symbol = @stock";
    SqlCommand cmdnon = new SqlCommand (statement, connection);
    try {
        cmdnon.Parameters.AddWithValue ("@name", user_name);
        cmdnon.Parameters.AddWithValue ("@stock", stock_symbol);
        connection.Open ();
        int num = cmdnon.ExecuteNonQuery ();
        connection.Close ();
        return true;
    }
    catch (SqlException ex) {
        Console.WriteLine (ex.ToString ());
        connection.Close ();
        return false;
    }
}
----------------------------------------

 public bool removeStock (string user_name, string stock_symbol) {
    user_name = user_name.Trim ();
    stock_symbol = stock_symbol.Trim ();
    string statement = "DELETE FROM users_stocks WHERE user_name = @name AND stock_symbol = @stock";
    SqlCommand cmdnon = new SqlCommand (statement, connection);
    bool status = false;
    try {
        cmdnon.Parameters.AddWithValue ("@name", user_name);
        cmdnon.Parameters.AddWithValue ("@stock", stock_symbol);
        connection.Open ();
        if (cmdnon.ExecuteNonQuery () == 1){
            status = true;
        }
        connection.Close ();
        return status;
    }
    catch (SqlException ex) {
        Console.WriteLine (ex.ToString ());
        connection.Close ();
        return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
203
4
Gpt3D_Clone203_4.cs 1 19
Gpt3D_Clone203_4.cs 20 45
----------------------------------------

public bool removeStock (string user_name, string stock_symbol) {
    user_name = user_name.Trim ();
    stock_symbol = stock_symbol.Trim ();
    string statement = "DELETE FROM users_stocks " + "WHERE user_name = @name AND stock_symbol = @stock";
    SqlCommand cmdnon = new SqlCommand (statement, connection);
    try {
        cmdnon.Parameters.AddWithValue ("@name", user_name);
        cmdnon.Parameters.AddWithValue ("@stock", stock_symbol);
        connection.Open ();
        int num = cmdnon.ExecuteNonQuery ();
        connection.Close ();
        return true;
    }
    catch (SqlException ex) {
        Console.WriteLine (ex.ToString ());
        connection.Close ();
        return false;
    }
}
----------------------------------------

 public bool removeStock (string user_name, string stock_symbol) {
    user_name = user_name.Trim ();
    stock_symbol = stock_symbol.Trim ();
    string statement = "DELETE FROM users_stocks WHERE user_name = @name AND stock_symbol = @stock";
    using (SqlConnection conn = new SqlConnection(connection))
    {
        using(SqlCommand cmd = new SqlCommand(statement, conn))
        {
            try
            {
                cmd.Parameters.AddWithValue ("@name", user_name);
                cmd.Parameters.AddWithValue ("@stock", stock_symbol);
                conn.Open ();
                int num = cmd.ExecuteNonQuery();
                return true;
            }
            catch(SqlException ex)
            {
                Console.WriteLine(ex.ToString());
                return false;
            }
        }
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
205
0
Gpt3D_Clone205_0.cs 1 9
Gpt3D_Clone205_0.cs 10 31
----------------------------------------

public string GetResultPIN () {
    StringBuilder sb = new StringBuilder ();
    sb.Append (mIPAD.pin.KSN);
    sb.Append ("," + mIPAD.pin.EPB);
    sb.Append ("," + mIPAD.getStatusCode ());
    sb.Append ("\r\n");
    Thread.Sleep (20 * 1000);
    return sb.ToString ();
}
----------------------------------------

 public string GetResultPIN()
{
    StringBuilder sb = new StringBuilder();
    try
    {
        sb.Append(mIPAD.pin.KSN);
        sb.Append("," + mIPAD.pin.EPB);
        sb.Append("," + mIPAD.getStatusCode());
        sb.Append("\r\n");
        System.Threading.Thread.Sleep(20000);
    }
    catch
    {
        Messagebox.Show("Error!");
    }
    return sb.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
209
1
Gpt3D_Clone209_1.cs 1 9
Gpt3D_Clone209_1.cs 10 20
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = k * k * norm;
    A1 = 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients () {
    var TanAngle = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1/ (1 + TanAngle / Q + TanAngle * TanAnglee); 
    A0 = TanAngle * TanAngle * norm;
    A1 = 2 * A0;
    A2 = A0; 
    B1 = 2 * (TanAngle * TanAngle - 1) * norm;
    B2 = (1 - TanAngle / Q + TanAngle * TanAngle) * norm;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
209
3
Gpt3D_Clone209_3.cs 1 9
Gpt3D_Clone209_3.cs 10 20
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = k * k * norm;
    A1 = 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients () {
    var tanAngle = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1/(1 + tanAngle/Q + tanAngle*tanAngle);
    A0 = tanAngle * tanAngle * norm;
    A1 = A0 * 2;
    A2 = A0;
    B1 = 2 * (tanAngle * tanAngle - 1) * norm;
    B2 = (1 - tanAngle / Q + tanAngle * tanAngle) * norm;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
210
3
Gpt3D_Clone210_3.cs 1 9
Gpt3D_Clone210_3.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = k * k * norm;
    A1 = 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients() 
    {
        double k = Math.Tan(Math.PI * Frequency / SampleRate);
        double normalize = 1 / (1 + (k/Q) + (k*k));
        A0 = k*k * normalize;
        A1 = A0 * 2;
        A2 = A0;
        B1 = 2 * (k*k - 1) * normalize;
        B2 = (1 - (k/Q) + (k*k)) * normalize;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
212
0
Gpt3D_Clone212_0.cs 1 9
Gpt3D_Clone212_0.cs 10 22
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = 1 * norm;
    A1 = - 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

  protected override void CalculateBiQuadCoefficients() 
{ 
    double k = Math.Tan(Math.PI * Frequency / SampleRate); 
    var norm = 1 / (1 + (k * k)); 
    A0 = 1 * norm; 
    A1 = -2 * A0; 
    A2 = A0; 
    B1 = 2 * (1 - (k * k)) * norm; 
    B2 = (1 + k / Q + k * k) * norm; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
212
1
Gpt3D_Clone212_1.cs 1 9
Gpt3D_Clone212_1.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = 1 * norm;
    A1 = - 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients() 
{ 
    double k = Math.Tan(Math.PI * Frequency / SampleRate); 
    var norm = 1 / (1 + (Math.Pow(k, 4) / (Q * Q))); 
    A0 = 1 * norm; 
    A1 = -2 * A0; 
    A2 = A0; 
    B1 = 2 * (1 - (Math.Pow(k, 4) / (Q * Q))) * norm; 
    B2 = (1 + k / Q + Math.Pow(k, 4)) * norm; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
212
2
Gpt3D_Clone212_2.cs 1 9
Gpt3D_Clone212_2.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = 1 * norm;
    A1 = - 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients() 
{ 
    double k = Math.Tan(Math.PI * Frequency / SampleRate); 
    var norm = 1 / (1 + (Math.Pow(k, 5) / (Q * Q * Q))); 
    A0 = 1 * norm; 
    A1 = -2 * A0; 
    A2 = A0; 
    B1 = 2 * (1 - (Math.Pow(k, 5) / (Q * Q * Q))) * norm; 
    B2 = (1 + k / Q + Math.Pow(k, 5)) * norm; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
212
3
Gpt3D_Clone212_3.cs 1 9
Gpt3D_Clone212_3.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = 1 * norm;
    A1 = - 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients() 
{ 
    double k = Math.Tan(Math.PI * Frequency / SampleRate); 
    var norm = 1 / (1 + (Math.Pow(k, 3) / Q)); 
    A0 = 1 * norm; 
    A1 = -2 * A0; 
    A2 = A0; 
    B1 = 2 * (1 - (Math.Pow(k, 3) / Q)) * norm; 
    B2 = (1 + k / Q + Math.Pow(k, 3)) * norm; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
212
4
Gpt3D_Clone212_4.cs 1 9
Gpt3D_Clone212_4.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = 1 * norm;
    A1 = - 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients()
{
    double k = Math.Tan(Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + (Math.Sin(k) / Q));
    A0 = 1 * norm;
    A1 = -2 * A0;
    A2 = A0;
    B1 = 2 * (1 - (Math.Sin(k) / Q)) * norm;
    B2 = (1 + k / Q + Math.Sin(k)) * norm;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
212
5
Gpt3D_Clone212_5.cs 1 9
Gpt3D_Clone212_5.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = 1 * norm;
    A1 = - 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients() 
{ 
    double k = Math.Tan(Math.PI * Frequency / SampleRate); 
    var norm = 1 / (1 + ((k * k) / Q)); 
    A0 = 1 * norm; 
    A1 = -2 * A0; 
    A2 = A0; 
    B1 = 2 * (1 - ((k * k) / Q)) * norm; 
    B2 = (1 + (k / Q) + (k * k)) * norm; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
212
6
Gpt3D_Clone212_6.cs 1 9
Gpt3D_Clone212_6.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = 1 * norm;
    A1 = - 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients() 
{ 
    double k = Math.Tan(Math.PI * Frequency / SampleRate); 
    var norm = 1 / (1 + (Math.Pow(k, 6) / (Q * Q * Q * Q))); 
    A0 = 1 * norm; 
    A1 = -2 * A0; 
    A2 = A0; 
    B1 = 2 * (1 - (Math.Pow(k, 6) / (Q * Q * Q * Q))) * norm; 
    B2 = (1 + k / Q + Math.Pow(k, 6)) * norm; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
212
7
Gpt3D_Clone212_7.cs 1 9
Gpt3D_Clone212_7.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = 1 * norm;
    A1 = - 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients() 
{ 
    double k = Math.Tan(Math.PI * Frequency / SampleRate); 
    var norm = 1 / (1 + (Math.Pow(k, 2) / Q)); 
    A0 = 1 * norm; 
    A1 = -2 * A0; 
    A2 = A0; 
    B1 = 2 * (1 - (Math.Pow(k, 2) / Q)) * norm; 
    B2 = (1 + k / Q + Math.Pow(k, 2)) * norm; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
212
8
Gpt3D_Clone212_8.cs 1 9
Gpt3D_Clone212_8.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = 1 * norm;
    A1 = - 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients() 
{ 
    double k = Math.Tan(Math.PI * Frequency / SampleRate); 
    var norm = 1 / (1 + ((k * k) / (Q * Q * Q))); 
    A0 = 1 * norm; 
    A1 = -2 * A0; 
    A2 = A0; 
    B1 = 2 * (1 - ((k * k) / (Q * Q * Q))) * norm; 
    B2 = (1 + k / Q + (k * k)) * norm; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
212
9
Gpt3D_Clone212_9.cs 1 9
Gpt3D_Clone212_9.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = 1 * norm;
    A1 = - 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients() 
{ 
    double k = Math.Tan(Math.PI * Frequency / SampleRate); 
    var norm = 1 / (1 + ((k * k) / (Q * Q))); 
    A0 = 1 * norm; 
    A1 = -2 * A0; 
    A2 = A0; 
    B1 = 2 * (1 - ((k * k) / (Q * Q))) * norm; 
    B2 = (1 + k / Q + (k * k)) * norm; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
215
1
Gpt3D_Clone215_1.cs 1 9
Gpt3D_Clone215_1.cs 10 22
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = k / Q * norm;
    A1 = 0;
    A2 = - A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients () {
    double frequencyDouble = (double)Frequency;
    double sampleRateDouble = (double)SampleRate;
    double k = Math.Tan (Math.PI * frequencyDouble / sampleRateDouble);
    double normFactor = 1 / (1 + k / Q + k * k);
    A0 = k / Q * normFactor;
    A1 = 0;
    A2 = -A0;
    B1 = (2 * (k * k - 1)) * normFactor;
    B2 = (1 - k / Q + (k * k)) * normFactor;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
215
3
Gpt3D_Clone215_3.cs 1 9
Gpt3D_Clone215_3.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = k / Q * norm;
    A1 = 0;
    A2 = - A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients () {
    double Q2 = Q * Q;
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = (Q2 * k) * norm;
    A1 = 0;
    A2 = - A0;
    B1 = 2 * (Q2 * (k * k - 1)) * norm;
    B2 = (Q2 - k / Q + k * k) * norm;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
215
4
Gpt3D_Clone215_4.cs 1 9
Gpt3D_Clone215_4.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = k / Q * norm;
    A1 = 0;
    A2 = - A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients () {
    double tanFq = Math.Tan (Math.PI * Frequency / SampleRate);
    double denom = (1 + tanFq / Q + tanFq * tanFq);
    double normalization = 1 / denom;
    A0 = (tanFq / Q) * normalization;
    A1 = 0;
    A2 = - A0;
    B1 = (2 * (tanFq * tanFq - 1)) * normalization;
    B2 = (1 - tanFq / Q + tanFq * tanFq) * normalization;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
217
0
Gpt3D_Clone217_0.cs 1 9
Gpt3D_Clone217_0.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = k / Q * norm;
    A1 = 0;
    A2 = - A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

  protected override void CalculateBiQuadCoefficients() 
{ 
    double k = Math.Sin(Math.PI * Frequency / SampleRate); 
    double norm = 1 / (1 + k / Q + Math.Pow(k, 2)); 
    A0 = k / Q * norm; 
    A1 = 0; 
    A2 = -A0; 
    B1 = 2 * (Math.Pow(k, 2) - 1) * norm; 
    B2 = (1 - k / Q + Math.Pow(k, 2)) * norm;
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
217
1
Gpt3D_Clone217_1.cs 1 9
Gpt3D_Clone217_1.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = k / Q * norm;
    A1 = 0;
    A2 = - A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients() 
{ 
    double k = Math.Asin (Math.PI * Frequency / SampleRate); 
    double norm = 1 / (1 + k / Q + Math.Pow(k, 2)); 
    A0 = k / Q * norm; 
    A1 = 0; 
    A2 = -A0; 
    B1 = 2 * (Math.Pow(k, 2) - 1) * norm; 
    B2 = (1 - k / Q + Math.Pow(k, 2)) * norm;
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
217
2
Gpt3D_Clone217_2.cs 1 9
Gpt3D_Clone217_2.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = k / Q * norm;
    A1 = 0;
    A2 = - A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients() 
{ 
    double k = Math.Acos (Math.PI * Frequency / SampleRate); 
    double norm = 1 / (1 + k / Q + Math.Pow(k, 2)); 
    A0 = k / Q * norm; 
    A1 = 0; 
    A2 = -A0; 
    B1 = 2 * (Math.Pow(k, 2) - 1) * norm; 
    B2 = (1 - k / Q + Math.Pow(k, 2)) * norm;
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
217
3
Gpt3D_Clone217_3.cs 1 9
Gpt3D_Clone217_3.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = k / Q * norm;
    A1 = 0;
    A2 = - A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients() 
{ 
    double k = Math.Cosh (Math.PI * Frequency / SampleRate); 
    double norm = 1 / (1 + k / Q + Math.Pow(k, 2)); 
    A0 = k / Q * norm; 
    A1 = 0; 
    A2 = -A0; 
    B1 = 2 * (Math.Pow(k, 2) - 1) * norm; 
    B2 = (1 - k / Q + Math.Pow(k, 2)) * norm;
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
217
4
Gpt3D_Clone217_4.cs 1 9
Gpt3D_Clone217_4.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = k / Q * norm;
    A1 = 0;
    A2 = - A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients() 
{ 
    double k = Math.Cbrt (Math.PI * Frequency / SampleRate); 
    double norm = 1 / (1 + k / Q + Math.Pow(k, 2)); 
    A0 = k / Q * norm; 
    A1 = 0; 
    A2 = -A0; 
    B1 = 2 * (Math.Pow(k, 2) - 1) * norm; 
    B2 = (1 - k / Q + Math.Pow(k, 2)) * norm;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
217
5
Gpt3D_Clone217_5.cs 1 9
Gpt3D_Clone217_5.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = k / Q * norm;
    A1 = 0;
    A2 = - A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

  protected override void CalculateBiQuadCoefficients() 
{ 
    double k = Math.Cos(Math.PI * Frequency / SampleRate); 
    double norm = 1 / (1 + k / Q + Math.Pow(k, 2)); 
    A0 = k / Q * norm; 
    A1 = 0; 
    A2 = -A0; 
    B1 = 2 * (Math.Pow(k, 2) - 1) * norm; 
    B2 = (1 - k / Q + Math.Pow(k, 2)) * norm;
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
217
6
Gpt3D_Clone217_6.cs 1 9
Gpt3D_Clone217_6.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = k / Q * norm;
    A1 = 0;
    A2 = - A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients() 
{ 
    double k = Math.Atan2 (Math.PI * Frequency / SampleRate); 
    double norm = 1 / (1 + k / Q + Math.Pow(k, 2)); 
    A0 = k / Q * norm; 
    A1 = 0; 
    A2 = -A0; 
    B1 = 2 * (Math.Pow(k, 2) - 1) * norm; 
    B2 = (1 - k / Q + Math.Pow(k, 2)) * norm;
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
217
7
Gpt3D_Clone217_7.cs 1 9
Gpt3D_Clone217_7.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = k / Q * norm;
    A1 = 0;
    A2 = - A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients() 
{ 
    double k = Math.Sinh (Math.PI * Frequency / SampleRate); 
    double norm = 1 / (1 + k / Q + Math.Pow(k, 2)); 
    A0 = k / Q * norm; 
    A1 = 0; 
    A2 = -A0; 
    B1 = 2 * (Math.Pow(k, 2) - 1) * norm; 
    B2 = (1 - k / Q + Math.Pow(k, 2)) * norm;
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
217
8
Gpt3D_Clone217_8.cs 1 9
Gpt3D_Clone217_8.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = k / Q * norm;
    A1 = 0;
    A2 = - A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients() 
{ 
    double k = Math.Atan (Math.PI * Frequency / SampleRate); 
    double norm = 1 / (1 + k / Q + Math.Pow(k, 2)); 
    A0 = k / Q * norm; 
    A1 = 0; 
    A2 = -A0; 
    B1 = 2 * (Math.Pow(k, 2) - 1) * norm; 
    B2 = (1 - k / Q + Math.Pow(k, 2)) * norm;
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
217
9
Gpt3D_Clone217_9.cs 1 9
Gpt3D_Clone217_9.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = k / Q * norm;
    A1 = 0;
    A2 = - A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients() 
{ 
    double k = Math.Tanh (Math.PI * Frequency / SampleRate); 
    double norm = 1 / (1 + k / Q + Math.Pow(k, 2)); 
    A0 = k / Q * norm; 
    A1 = 0; 
    A2 = -A0; 
    B1 = 2 * (Math.Pow(k, 2) - 1) * norm; 
    B2 = (1 - k / Q + Math.Pow(k, 2)) * norm;
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
225
1
Gpt3D_Clone225_1.cs 1 18
Gpt3D_Clone225_1.cs 19 40
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId = 0;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                }
            }
        }
    }
    return stakeholderId;
}
----------------------------------------

 private long GetStakeholderId()
{
    string currentUserId = _userManager.GetUserId(User);
    long stakeholderId = 0;
    foreach(var user in _userManager.Users)
    {
        if(user.Email == currentUserId)
        {
            foreach(var stakeholder in _context.Stakeholders)
            {
                if(stakeholder.IdentityId == user.Id)
                {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                }
            }
        }
    }
    return stakeholderId;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
226
0
Gpt3D_Clone226_0.cs 1 21
Gpt3D_Clone226_0.cs 22 42
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                } else {
                    return 0;
                }
            }
        }
        return 0;
    }
    return 0;
}
----------------------------------------

 private long GetStakeholderId  () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    var stakeholders = _context.Stakeholders;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var tmpStakeholder = stakeholders.FirstOrDefault(s => s.IdentityId == idForStakeholder);
            if (tmpStakeholder != null){
                stakeholderId = tmpStakeholder.StakeholderId;
                return stakeholderId;
            } else {
                return 0;
            }
        }
    }
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
226
2
Gpt3D_Clone226_2.cs 1 21
Gpt3D_Clone226_2.cs 22 41
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                } else {
                    return 0;
                }
            }
        }
        return 0;
    }
    return 0;
}
----------------------------------------

 private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders.Where(s => s.IdentityId == idForStakeholder);
            if (stakeholders.Any() && stakeholders.Count() > 0) {
                stakeholderId = stakeholders.FirstOrDefault().StakeholderId;
                return stakeholderId;
            } else {
                return 0;
            }
        }
    } 
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
226
3
Gpt3D_Clone226_3.cs 1 21
Gpt3D_Clone226_3.cs 22 50
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                } else {
                    return 0;
                }
            }
        }
        return 0;
    }
    return 0;
}
----------------------------------------

 private long GetStakeholderId() {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var user = _context.Users.FirstOrDefault(u => u.Email == currentUserId);
    var stakeholders = _context.Stakeholders;
    if (user != null) {
        var idForStakeholder = user.Id;
        var tmpStakeholder = stakeholders.FirstOrDefault(s => s.IdentityId == idForStakeholder);
        if (tmpStakeholder != null){
            stakeholderId = tmpStakeholder.StakeholderId;
            return stakeholderId;
        } else {
            return 0;
        }
    }
    return 0; 
}    
 private long GetStakeholderId() {
    string currentUserId = _userManager.GetUserId(User);
    long stakeholderId = 0;
    var user = _context.Users.FirstOrDefault(u => u.Email == currentUserId);
    if (user != null) {
        stakeholderId = _context.Stakeholders.FirstOrDefault(s => s.IdentityId == user.Id)?.StakeholderId ?? 0;
    }
    return stakeholderId;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
227
0
Gpt3D_Clone227_0.cs 1 19
Gpt3D_Clone227_0.cs 20 38
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                }
            }
            return 0;
        }
    }
    return 0;
}
----------------------------------------

  private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    var stakeholders = _context.Stakeholders;
    foreach (var user in users)
    {
        foreach(var stakeholder in stakeholders)
        {
            if (user.Email == currentUserId && stakeholder.IdentityId == user.Id) {
                stakeholderId = stakeholder.StakeholderId;
                return stakeholderId;
            }
        }
    }
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
227
2
Gpt3D_Clone227_2.cs 1 19
Gpt3D_Clone227_2.cs 20 49
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                }
            }
            return 0;
        }
    }
    return 0;
}
----------------------------------------

 private long GetStakeholderId()
    {
        string currentUserId = _userManager.GetUserId(User);
        long stakeholderId;
        var user = _userManager.Users.FirstOrDefault(x => x.Email == currentUserId);
        if (user != null)
        {
            stakeholderId = _context.Stakeholders.FirstOrDefault(x => x.IdentityId == user.Id).StakeholderId;
            return stakeholderId;
        }
        return 0;
    }
 private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    var stakeholders = _context.Stakeholders;
    foreach (var user in users.Where(u => u.Email == currentUserId))
    {
        foreach(var stakeholder in stakeholders.Where(s => s.IdentityId == user.Id))
        {
                stakeholderId = stakeholder.StakeholderId;
                return stakeholderId;
        }
    }
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
229
0
Gpt3D_Clone229_0.cs 1 9
Gpt3D_Clone229_0.cs 10 21
----------------------------------------

private void LoadGroup (TGroup group, string groupName, TGrid grid) {
    VList < T > returnList = FetchInformation (group);
    if (Session [groupName] != null) {
        List < T > tempList = (List < T >) Session [groupName];
        returnList.AddRange (tempList);
    }
    grid.DataSource = returnList;
    grid.DataBind ();
}
----------------------------------------

  private void LoadGroup (TGroup group, string groupName, TGrid grid) {
    IEnumerable<T> returnList = FetchInformation (group).AsEnumerable();
    if (Session [groupName] != null) {
        IEnumerable<T> tempList = (IEnumerable<T>) Session [groupName];
        returnList = returnList.Concat(tempList);
    }
    grid.DataSource = returnList;
    grid.DataBind ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
229
1
Gpt3D_Clone229_1.cs 1 9
Gpt3D_Clone229_1.cs 10 20
----------------------------------------

private void LoadGroup (TGroup group, string groupName, TGrid grid) {
    VList < T > returnList = FetchInformation (group);
    if (Session [groupName] != null) {
        List < T > tempList = (List < T >) Session [groupName];
        returnList.AddRange (tempList);
    }
    grid.DataSource = returnList;
    grid.DataBind ();
}
----------------------------------------

 private void LoadGroup (TGroup group, string groupName, TGrid grid) {
    Queue<T> returnList = FetchInformation (group).ToQueue();
    if (Session [groupName] != null) {
        Queue<T> tempList = (Queue<T>) Session [groupName];
        tempList.CopyTo(returnList);
    }
    grid.DataSource = returnList.ToList();
    grid.DataBind ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
229
2
Gpt3D_Clone229_2.cs 1 9
Gpt3D_Clone229_2.cs 10 20
----------------------------------------

private void LoadGroup (TGroup group, string groupName, TGrid grid) {
    VList < T > returnList = FetchInformation (group);
    if (Session [groupName] != null) {
        List < T > tempList = (List < T >) Session [groupName];
        returnList.AddRange (tempList);
    }
    grid.DataSource = returnList;
    grid.DataBind ();
}
----------------------------------------

 private void LoadGroup (TGroup group, string groupName, TGrid grid) {
    Stack<T> returnList = FetchInformation (group).ToStack();
    if (Session [groupName] != null) {
        Stack<T> tempList = (Stack<T>) Session [groupName];
        tempList.CopyTo(returnList);
    }
    grid.DataSource = returnList.ToList();
    grid.DataBind ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
229
3
Gpt3D_Clone229_3.cs 1 9
Gpt3D_Clone229_3.cs 10 20
----------------------------------------

private void LoadGroup (TGroup group, string groupName, TGrid grid) {
    VList < T > returnList = FetchInformation (group);
    if (Session [groupName] != null) {
        List < T > tempList = (List < T >) Session [groupName];
        returnList.AddRange (tempList);
    }
    grid.DataSource = returnList;
    grid.DataBind ();
}
----------------------------------------

 private void LoadGroup (TGroup group, string groupName, TGrid grid) {
    List<T> returnList = FetchInformation (group).ToList();
    if (Session [groupName] != null) {
        List<T> tempList = (List<T>) Session [groupName];
        returnList.AddRange(tempList);
    }
    grid.DataSource = returnList.ToArray();
    grid.DataBind ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
229
4
Gpt3D_Clone229_4.cs 1 9
Gpt3D_Clone229_4.cs 10 20
----------------------------------------

private void LoadGroup (TGroup group, string groupName, TGrid grid) {
    VList < T > returnList = FetchInformation (group);
    if (Session [groupName] != null) {
        List < T > tempList = (List < T >) Session [groupName];
        returnList.AddRange (tempList);
    }
    grid.DataSource = returnList;
    grid.DataBind ();
}
----------------------------------------

  private void LoadGroup (TGroup group, string groupName, TGrid grid) {
    IEnumerable<T> returnList = FetchInformation (group).ToList();
    if (Session [groupName] != null) {
        IEnumerable<T> tempList = (IEnumerable<T>) Session [groupName];
        returnList = returnList.Concat(tempList);
    }
    grid.DataSource = returnList.ToList();
    grid.DataBind ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
22
0
Gpt3D_Clone22_0.cs 1 16
Gpt3D_Clone22_0.cs 17 47
----------------------------------------

static void Main (string [] args) {
    List < double > enteredNubers = new List < double > ();
    Console.WriteLine ("Enter number(s) or 0 to end: ");
    while (true) {
        string userinput = Console.ReadLine ().Trim ();
        if (userinput == "0")
            break;
        double num;
        if (double.TryParse (userinput, out num)) {
            enteredNubers.Add (num);
        } else
            Console.WriteLine ("Wrong input. Please enter number or 0 to end");
    }
    Average (enteredNubers);
    Console.ReadKey ();
}
----------------------------------------

 static void Main (string [] args) 
    {
        List<double> enteredNubers = new List<double>();
        bool finished = false;
        do
        {
            Console.WriteLine("Enter number(s) or 0 to end: ");
            string userinput = Console.ReadLine().Trim();
            if (userinput == "0")
            {
                finished = true;
            }
            else
            {
                double num;
                if (double.TryParse(userinput, out num))
                {
                    enteredNubers.Add(num);
                }
                else
                {
                    Console.WriteLine("Wrong input. Please enter number or 0 to end");
                }
            }
        }while(!finished);
        Average(enteredNubers);
        Console.ReadKey();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
22
2
Gpt3D_Clone22_2.cs 1 16
Gpt3D_Clone22_2.cs 17 47
----------------------------------------

static void Main (string [] args) {
    List < double > enteredNubers = new List < double > ();
    Console.WriteLine ("Enter number(s) or 0 to end: ");
    while (true) {
        string userinput = Console.ReadLine ().Trim ();
        if (userinput == "0")
            break;
        double num;
        if (double.TryParse (userinput, out num)) {
            enteredNubers.Add (num);
        } else
            Console.WriteLine ("Wrong input. Please enter number or 0 to end");
    }
    Average (enteredNubers);
    Console.ReadKey ();
}
----------------------------------------

 static void Main (string [] args)
    {
        List<double> enteredNubers = new List<double>();
        bool allNumsAccepted = false;
        Console.WriteLine("Enter number(s) or 0 to end: ");
        while (!allNumsAccepted)
        {
            string userinput = Console.ReadLine().Trim();
            if (userinput == "0")
            {
                allNumsAccepted = true;
            }
            else
            {
                double num;
                if (double.TryParse(userinput, out num))
                {
                    enteredNubers.Add(num);
                }
                else
                {
                    Console.WriteLine("Wrong input. Please enter number or 0 to end");
                }
            }
        }
        Average(enteredNubers);
        Console.ReadKey();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
22
3
Gpt3D_Clone22_3.cs 1 16
Gpt3D_Clone22_3.cs 17 47
----------------------------------------

static void Main (string [] args) {
    List < double > enteredNubers = new List < double > ();
    Console.WriteLine ("Enter number(s) or 0 to end: ");
    while (true) {
        string userinput = Console.ReadLine ().Trim ();
        if (userinput == "0")
            break;
        double num;
        if (double.TryParse (userinput, out num)) {
            enteredNubers.Add (num);
        } else
            Console.WriteLine ("Wrong input. Please enter number or 0 to end");
    }
    Average (enteredNubers);
    Console.ReadKey ();
}
----------------------------------------

  static void Main (string [] args) 
    {
        List<double> enteredNubers = new List<double>();
        bool done = false;
        while (!done) 
        {
            Console.WriteLine("Enter number(s) or 0 to end: ");
            string userinput = Console.ReadLine().Trim();
            if (userinput == "0")
            {
                done = true;
            }
            else
            {
                double num;
                if (double.TryParse(userinput, out num))
                {
                    enteredNubers.Add(num);
                }
                else
                {
                    Console.WriteLine("Wrong input. Please enter number or 0 to end");
                }
            }
        }
        Average(enteredNubers);
        Console.ReadKey();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
22
4
Gpt3D_Clone22_4.cs 1 16
Gpt3D_Clone22_4.cs 17 39
----------------------------------------

static void Main (string [] args) {
    List < double > enteredNubers = new List < double > ();
    Console.WriteLine ("Enter number(s) or 0 to end: ");
    while (true) {
        string userinput = Console.ReadLine ().Trim ();
        if (userinput == "0")
            break;
        double num;
        if (double.TryParse (userinput, out num)) {
            enteredNubers.Add (num);
        } else
            Console.WriteLine ("Wrong input. Please enter number or 0 to end");
    }
    Average (enteredNubers);
    Console.ReadKey ();
}
----------------------------------------

  static void Main(string[] args)
    {
    	double[] enteredNubers = new double[100];
    	Console.WriteLine("Enter number(s) or 0 to end: ");
    	int count=0;
    	while (true)
    	{
       	 	string userinput = Console.ReadLine().Trim();
        	if (userinput == "0")
            	break;
        	double num;
        	if (double.TryParse(userinput, out num))
        	{
        	    enteredNubers[count++] = num;
       		}
        	else
            	Console.WriteLine("Wrong input. Please enter number or 0 to end");
    	}
    	Average(enteredNubers, count);
    	Console.ReadKey();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
22
5
Gpt3D_Clone22_5.cs 1 16
Gpt3D_Clone22_5.cs 17 43
----------------------------------------

static void Main (string [] args) {
    List < double > enteredNubers = new List < double > ();
    Console.WriteLine ("Enter number(s) or 0 to end: ");
    while (true) {
        string userinput = Console.ReadLine ().Trim ();
        if (userinput == "0")
            break;
        double num;
        if (double.TryParse (userinput, out num)) {
            enteredNubers.Add (num);
        } else
            Console.WriteLine ("Wrong input. Please enter number or 0 to end");
    }
    Average (enteredNubers);
    Console.ReadKey ();
}
----------------------------------------

  static void Main (string [] args) 
    { 
        List<double> enteredNubers = new List<double>();
        bool endProgram = false;
        Console.WriteLine ("Enter number(s) or 0 to end: ");
        while (endProgram == false) 
        {
            string userinput = Console.ReadLine ().Trim ();
            if (userinput == "0")
            {
                endProgram = true;
            }
            double num;
            if (double.TryParse (userinput, out num)) 
            { 
                enteredNubers.Add (num); 
            } 
            else
            {
                Console.WriteLine ("Wrong input. Please enter number or 0 to end"); 
            } 
        }
        Average (enteredNubers);
        Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
22
6
Gpt3D_Clone22_6.cs 1 16
Gpt3D_Clone22_6.cs 17 44
----------------------------------------

static void Main (string [] args) {
    List < double > enteredNubers = new List < double > ();
    Console.WriteLine ("Enter number(s) or 0 to end: ");
    while (true) {
        string userinput = Console.ReadLine ().Trim ();
        if (userinput == "0")
            break;
        double num;
        if (double.TryParse (userinput, out num)) {
            enteredNubers.Add (num);
        } else
            Console.WriteLine ("Wrong input. Please enter number or 0 to end");
    }
    Average (enteredNubers);
    Console.ReadKey ();
}
----------------------------------------

 static void Main(string[] args) 
    {
        double[] numbers = new double[100];
        int index = 0;
        Console.WriteLine("Enter number(s) or 0 to end: ");
        
        while (true)
        {
            string userInput = Console.ReadLine().Trim();
            if (userInput == "0") 
            { 
                break; 
            }
            double number;
            if (double.TryParse(userInput, out number))
            {
                numbers[index++] = number;
            }
            else
            {
                Console.WriteLine("Wrong input. Please enter numbers or 0 to end");
            }
        }
        Average(numbers, index);
        Console.ReadKey();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
230
4
Gpt3D_Clone230_4.cs 1 8
Gpt3D_Clone230_4.cs 9 22
----------------------------------------

void ICollection.CopyTo (Array array, int index) {
    if (array == null)
        throw new ArgumentNullException ("array");
    PlcParameter [] ppArray = array as PlcParameter [];
    if (ppArray == null)
        throw new ArgumentException ();
    ((ICollection < PlcParameter >) this).CopyTo (ppArray, index);
}
----------------------------------------

 void ICollection.CopyTo (Array array, int index) {
    if (array == null)
        throw new ArgumentNullException ("array");
    PlcParameter [] ppArray = array as PlcParameter [];
    if (ppArray == null)
        throw new ArgumentException ("Array should be of PlcParameter type");
    foreach (var item in this)
    {
        ppArray[index] = item;
        index++; 
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
230
5
Gpt3D_Clone230_5.cs 1 8
Gpt3D_Clone230_5.cs 9 22
----------------------------------------

void ICollection.CopyTo (Array array, int index) {
    if (array == null)
        throw new ArgumentNullException ("array");
    PlcParameter [] ppArray = array as PlcParameter [];
    if (ppArray == null)
        throw new ArgumentException ();
    ((ICollection < PlcParameter >) this).CopyTo (ppArray, index);
}
----------------------------------------

 void ICollection.CopyTo (Array array, int index) {
    if (array == null)
        throw new ArgumentNullException ("array");
    PlcParameter [] ppArray = array as PlcParameter [];
    if (ppArray == null)
        throw new ArgumentException ("Array should be of PlcParameter type");
    foreach (PlcParameter item in this)
    {
        ppArray[index] = item;
        index++; 
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
230
6
Gpt3D_Clone230_6.cs 1 8
Gpt3D_Clone230_6.cs 9 21
----------------------------------------

void ICollection.CopyTo (Array array, int index) {
    if (array == null)
        throw new ArgumentNullException ("array");
    PlcParameter [] ppArray = array as PlcParameter [];
    if (ppArray == null)
        throw new ArgumentException ();
    ((ICollection < PlcParameter >) this).CopyTo (ppArray, index);
}
----------------------------------------

 void ICollection.CopyTo (Array array, int index) {
    if (array == null)
        throw new ArgumentNullException ("array");
    PlcParameter [] ppArray = array as PlcParameter [];
    if (ppArray == null)
        throw new ArgumentException ("Array should be of PlcParameter type");
    for(int i = 0 ; i < this.Count; i++)
    {
        ppArray[i+index] = this.ElementAt(i) as PlcParameter;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
230
7
Gpt3D_Clone230_7.cs 1 8
Gpt3D_Clone230_7.cs 9 19
----------------------------------------

void ICollection.CopyTo (Array array, int index) {
    if (array == null)
        throw new ArgumentNullException ("array");
    PlcParameter [] ppArray = array as PlcParameter [];
    if (ppArray == null)
        throw new ArgumentException ();
    ((ICollection < PlcParameter >) this).CopyTo (ppArray, index);
}
----------------------------------------

 void ICollection.CopyTo (Array array, int index) {
    if (array == null)
        throw new ArgumentNullException ("array");
    PlcParameter [] ppArray = array as PlcParameter [];
    if (ppArray == null)
        throw new ArgumentException ("Array should be of PlcParameter type");
    List<PlcParameter> ppList = this.Cast<PlcParameter>().ToList();
    ppList.CopyTo(ppArray, index);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
230
8
Gpt3D_Clone230_8.cs 1 8
Gpt3D_Clone230_8.cs 9 18
----------------------------------------

void ICollection.CopyTo (Array array, int index) {
    if (array == null)
        throw new ArgumentNullException ("array");
    PlcParameter [] ppArray = array as PlcParameter [];
    if (ppArray == null)
        throw new ArgumentException ();
    ((ICollection < PlcParameter >) this).CopyTo (ppArray, index);
}
----------------------------------------

 void ICollection.CopyTo (Array array, int index) {
    if (array == null)
        throw new ArgumentNullException ("array");
    PlcParameter [] ppArray = array.ConvertAll(x => (PlcParameter) x).ToArray();
    if (ppArray == null)
        throw new ArgumentException ("Array should be of PlcParameter type");
    Array.Copy(this.ToArray(),ppArray,this.Count);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
230
9
Gpt3D_Clone230_9.cs 1 8
Gpt3D_Clone230_9.cs 9 18
----------------------------------------

void ICollection.CopyTo (Array array, int index) {
    if (array == null)
        throw new ArgumentNullException ("array");
    PlcParameter [] ppArray = array as PlcParameter [];
    if (ppArray == null)
        throw new ArgumentException ();
    ((ICollection < PlcParameter >) this).CopyTo (ppArray, index);
}
----------------------------------------

 void ICollection.CopyTo (Array array, int index) {
    if (array == null)
        throw new ArgumentNullException ("array");
    PlcParameter [] ppArray = array.Cast<PlcParameter>().ToArray();
    if (ppArray == null)
        throw new ArgumentException ("Array should be of PlcParameter type");
    ppArray = this.ToArray();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
234
0
Gpt3D_Clone234_0.cs 1 19
Gpt3D_Clone234_0.cs 20 39
----------------------------------------

public static void Main (string [] args) {
    int ? first = null, second = null;
    int first_i = 0, second_i = 0;
    while (! first.HasValue) {
        Console.WriteLine ("enter first number");
        if (int.TryParse (Console.ReadLine (), out first_i)) {
            first = first_i;
        }
    }
    while (! second.HasValue) {
        Console.WriteLine ("enter second number");
        if (int.TryParse (Console.ReadLine (), out second_i)) {
            second = first_i;
        }
    }
    int product = computeProd1 (first_i, second_i);
    Console.WriteLine ("Their product is:\t" + product);
    Console.Read ();
}
----------------------------------------

 public static void Main (string [] args) {
    int firstVal = 0, secondVal = 0;
    while (firstVal == 0) {
        Console.WriteLine ("enter first number");
        if (int.TryParse (Console.ReadLine (), out firstVal)) {
            break;
        }
    }
    while (secondVal == 0) {
        Console.WriteLine ("enter second number");
        if (int.TryParse (Console.ReadLine (), out secondVal)) {
            break;
        }
    }
    double product = computeProd6 (firstVal, secondVal);
    Console.WriteLine ("Their product is:\t" + product);
    Console.Read ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
234
1
Gpt3D_Clone234_1.cs 1 19
Gpt3D_Clone234_1.cs 20 39
----------------------------------------

public static void Main (string [] args) {
    int ? first = null, second = null;
    int first_i = 0, second_i = 0;
    while (! first.HasValue) {
        Console.WriteLine ("enter first number");
        if (int.TryParse (Console.ReadLine (), out first_i)) {
            first = first_i;
        }
    }
    while (! second.HasValue) {
        Console.WriteLine ("enter second number");
        if (int.TryParse (Console.ReadLine (), out second_i)) {
            second = first_i;
        }
    }
    int product = computeProd1 (first_i, second_i);
    Console.WriteLine ("Their product is:\t" + product);
    Console.Read ();
}
----------------------------------------

 public static void Main (string [] args) {
    int firstInp = 0, secondInp = 0;
    while (firstInp == 0) {
        Console.WriteLine ("enter first number");
        if (int.TryParse (Console.ReadLine (), out firstInp)) {
            break;
        }
    }
    while (secondInp == 0) {
        Console.WriteLine ("enter second number");
        if (int.TryParse (Console.ReadLine (), out secondInp)) {
            break;
        }
    }
    float product = computeProd10 (firstInp, secondInp);
    Console.WriteLine ("Their product is:\t" + product);
    Console.Read ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
234
2
Gpt3D_Clone234_2.cs 1 19
Gpt3D_Clone234_2.cs 20 39
----------------------------------------

public static void Main (string [] args) {
    int ? first = null, second = null;
    int first_i = 0, second_i = 0;
    while (! first.HasValue) {
        Console.WriteLine ("enter first number");
        if (int.TryParse (Console.ReadLine (), out first_i)) {
            first = first_i;
        }
    }
    while (! second.HasValue) {
        Console.WriteLine ("enter second number");
        if (int.TryParse (Console.ReadLine (), out second_i)) {
            second = first_i;
        }
    }
    int product = computeProd1 (first_i, second_i);
    Console.WriteLine ("Their product is:\t" + product);
    Console.Read ();
}
----------------------------------------

 public static void Main (string [] args) {
    int inputOne = 0, inputTwo = 0;
    while (inputOne == 0) {
        Console.WriteLine ("enter first number");
        if (int.TryParse (Console.ReadLine (), out inputOne)) {
            break;
        }
    }
    while (inputTwo == 0) {
        Console.WriteLine ("enter second number");
        if (int.TryParse (Console.ReadLine (), out inputTwo)) {
            break;
        }
    }
    long product = computeProd9 (inputOne, inputTwo);
    Console.WriteLine ("Their product is:\t" + product);
    Console.Read ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
236
1
Gpt3D_Clone236_1.cs 1 11
Gpt3D_Clone236_1.cs 12 42
----------------------------------------

private bool CheckConnection () {
    WebClient client = new WebClient ();
    try {
        using (client.OpenRead ("http://www.google.com"))
        {
        } return true;
    }
    catch (WebException) {
        return false;
    }
}
----------------------------------------

  private bool CheckConnection() {
        HttpWebRequest req = (HttpWebRequest)WebRequest.Create("http://www.google.com");
        try 
        {
            HttpWebResponse resp = (HttpWebResponse)req.GetResponse();
            if (resp.StatusCode == HttpStatusCode.OK) 
            {
                resp.Close();
                return true;
            }
        }
        catch (WebException) 
        {
            return false;
        }
        return false;
    }
 private bool CheckConnection() { 
	try { 
        using (WebClient client = new WebClient()) 
		{ 
			client.DownloadString("http://www.google.com"); 
			return true; 
		} 
	} catch (WebException) { 
		return false; 
	} 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
237
4
Gpt3D_Clone237_4.cs 1 18
Gpt3D_Clone237_4.cs 19 36
----------------------------------------

public RegionContext GetContext (string regionCode) {
    RegionContext temp = null;
    RegionContext rc = null;
    try {
        if (! this.contextCache.TryGetValue (regionCode.ToUpper (), out rc)) {
            temp = new RegionContext (regionCode);
            this.contextCache.Add (regionCode.ToUpper (), temp);
            rc = temp;
            temp = null;
        }
        return rc;
    }
    finally {
        if (temp != null) {
            temp.Dispose ();
        }
    }
}
----------------------------------------

 public RegionContext GetContext (string regionCode) {
    RegionContext temp = null;
    RegionContext rc = null;
    if (!this.contextCache.TryGetValue (regionCode.ToUpper(), out rc)) {
        lock (this.contextCache) {
            if (!this.contextCache.TryGetValue (regionCode.ToUpper(), out rc)) {
                temp = new RegionContext (regionCode);
                this.contextCache.Add (regionCode.ToUpper(), temp);
                rc = temp;
                temp = null;
            }
        }
    }
    return rc;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
237
7
Gpt3D_Clone237_7.cs 1 18
Gpt3D_Clone237_7.cs 19 33
----------------------------------------

public RegionContext GetContext (string regionCode) {
    RegionContext temp = null;
    RegionContext rc = null;
    try {
        if (! this.contextCache.TryGetValue (regionCode.ToUpper (), out rc)) {
            temp = new RegionContext (regionCode);
            this.contextCache.Add (regionCode.ToUpper (), temp);
            rc = temp;
            temp = null;
        }
        return rc;
    }
    finally {
        if (temp != null) {
            temp.Dispose ();
        }
    }
}
----------------------------------------

 public RegionContext GetContext (string regionCode) {
    RegionContext temp = null;
    RegionContext rc = null;
    if (! this.contextCache.TryGetValue (regionCode.ToUpper (), out rc)) {
        temp = new RegionContext (regionCode);
        lock (this.contextCache) {
            this.contextCache.Add (regionCode.ToUpper (), temp);
        }
        rc = temp;
        temp = null;
    }
    return rc;
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
238
0
Gpt3D_Clone238_0.cs 1 18
Gpt3D_Clone238_0.cs 19 45
----------------------------------------

private DataSet ExecuteDataset (string query) {
    var conn = new SqlConnection ("Data Source=" + Server + ";Initial Catalog=" + Database + ";User Id=" + Username + ";Password=" + Password + ";");
    DataSet ds;
    try {
        conn.Open ();
        ds = new DataSet ();
        var da = new SqlDataAdapter (query, conn);
        da.Fill (ds);
    }
    catch (Exception) {
        throw;
    }
    finally {
        conn.Dispose ();
        conn.Close ();
    }
    return ds;
}
----------------------------------------

 private DataSet ExecuteDataset(string query)
{
        SqlConnection connection = new SqlConnection("Data Source=" + Server + ";Initial Catalog=" + Database + ";User Id=" + Username + ";Password=" + Password + ";");
        DataSet dataSet = null;
        SqlCommand command = new SqlCommand(query);
        command.Connection = connection;
        try
        {
            connection.Open();
            SqlDataAdapter adapter = new SqlDataAdapter(command);
            dataSet = new DataSet();
            adapter.Fill(dataSet);
        }
        catch (Exception)
        {
            throw;
        }
        finally
        {
            connection.Close();
            command.Dispose();
        }
        return dataSet;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
238
1
Gpt3D_Clone238_1.cs 1 18
Gpt3D_Clone238_1.cs 19 46
----------------------------------------

private DataSet ExecuteDataset (string query) {
    var conn = new SqlConnection ("Data Source=" + Server + ";Initial Catalog=" + Database + ";User Id=" + Username + ";Password=" + Password + ";");
    DataSet ds;
    try {
        conn.Open ();
        ds = new DataSet ();
        var da = new SqlDataAdapter (query, conn);
        da.Fill (ds);
    }
    catch (Exception) {
        throw;
    }
    finally {
        conn.Dispose ();
        conn.Close ();
    }
    return ds;
}
----------------------------------------

  private DataSet ExecuteDataset(string query)
{
        var connectionString = "Data Source=" + Server + ";Initial Catalog=" + Database + ";User Id=" + Username + ";Password=" + Password + ";";
        DataSet ds = null;
        using (SqlConnection conn = new SqlConnection(connectionString))
        {
            try
            {
                conn.Open();
                ds = new DataSet();
                var cmd = new SqlCommand(query, conn);
                var da = new SqlDataAdapter(cmd);
                da.Fill(ds);
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                conn.Dispose();
            }
            return ds;
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
238
2
Gpt3D_Clone238_2.cs 1 18
Gpt3D_Clone238_2.cs 19 46
----------------------------------------

private DataSet ExecuteDataset (string query) {
    var conn = new SqlConnection ("Data Source=" + Server + ";Initial Catalog=" + Database + ";User Id=" + Username + ";Password=" + Password + ";");
    DataSet ds;
    try {
        conn.Open ();
        ds = new DataSet ();
        var da = new SqlDataAdapter (query, conn);
        da.Fill (ds);
    }
    catch (Exception) {
        throw;
    }
    finally {
        conn.Dispose ();
        conn.Close ();
    }
    return ds;
}
----------------------------------------

 private DataSet ExecuteDataset(string query)
{
        DataSet ds = null;
        using (SqlConnection connection = new SqlConnection("Data Source=" + Server + ";Initial Catalog=" + Database + ";User Id=" + Username + ";Password=" + Password + ";"))
        {
            connection.Open();
            try
            {
                ds = new DataSet();
                using (SqlDataAdapter da = new SqlDataAdapter(query, connection))
                {
                    da.Fill(ds);
                }
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                connection.Dispose();
            }
            return ds;
        }
       
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
238
3
Gpt3D_Clone238_3.cs 1 18
Gpt3D_Clone238_3.cs 19 45
----------------------------------------

private DataSet ExecuteDataset (string query) {
    var conn = new SqlConnection ("Data Source=" + Server + ";Initial Catalog=" + Database + ";User Id=" + Username + ";Password=" + Password + ";");
    DataSet ds;
    try {
        conn.Open ();
        ds = new DataSet ();
        var da = new SqlDataAdapter (query, conn);
        da.Fill (ds);
    }
    catch (Exception) {
        throw;
    }
    finally {
        conn.Dispose ();
        conn.Close ();
    }
    return ds;
}
----------------------------------------

 private DataSet ExecuteDataset(string query)
{
        var conString = "Data Source=" + Server + ";Initial Catalog=" + Database + ";User Id=" + Username + ";Password=" + Password + ";";
        DataSet ds = null;
        try
        {
            using (SqlConnection connection = new SqlConnection(conString))
            {
                connection.Open();
                using (SqlCommand command = new SqlCommand(query, connection))
                {
                    ds = new DataSet();
                    SqlDataAdapter adapter = new SqlDataAdapter(command);
                    adapter.Fill(ds);
                }
            }
        }
        catch (Exception)
        {
            throw;
        }
        return ds;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
238
4
Gpt3D_Clone238_4.cs 1 18
Gpt3D_Clone238_4.cs 19 43
----------------------------------------

private DataSet ExecuteDataset (string query) {
    var conn = new SqlConnection ("Data Source=" + Server + ";Initial Catalog=" + Database + ";User Id=" + Username + ";Password=" + Password + ";");
    DataSet ds;
    try {
        conn.Open ();
        ds = new DataSet ();
        var da = new SqlDataAdapter (query, conn);
        da.Fill (ds);
    }
    catch (Exception) {
        throw;
    }
    finally {
        conn.Dispose ();
        conn.Close ();
    }
    return ds;
}
----------------------------------------

 private DataSet ExecuteDataset(string query)
{
        var connStr = "Data Source=" + Server + ";Initial Catalog=" + Database + ";User Id=" + Username + ";Password=" + Password + ";";
        DataSet ds = null;
        try
        {
            using (SqlConnection sqConn = new SqlConnection(connStr))
            {
                sqConn.Open();
                ds = new DataSet();
                SqlDataAdapter adapter = new SqlDataAdapter();
                adapter.SelectCommand = new SqlCommand(query, sqConn);
                adapter.Fill(ds);
            }
        }
        catch (Exception)
        {
            throw;
        }
        return ds;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
238
5
Gpt3D_Clone238_5.cs 1 18
Gpt3D_Clone238_5.cs 19 39
----------------------------------------

private DataSet ExecuteDataset (string query) {
    var conn = new SqlConnection ("Data Source=" + Server + ";Initial Catalog=" + Database + ";User Id=" + Username + ";Password=" + Password + ";");
    DataSet ds;
    try {
        conn.Open ();
        ds = new DataSet ();
        var da = new SqlDataAdapter (query, conn);
        da.Fill (ds);
    }
    catch (Exception) {
        throw;
    }
    finally {
        conn.Dispose ();
        conn.Close ();
    }
    return ds;
}
----------------------------------------

 private DataSet ExecuteDataset(string query)
{
        var conn = new SqlConnection("Data Source=" + Server + ";Initial Catalog=" + Database + ";User Id=" + Username + ";Password=" + Password + ";");
        DataSet ds;
        using (conn)
        {
            conn.Open();
            using (SqlDataAdapter da = new SqlDataAdapter(query, conn))
            {
                ds = new DataSet();
                da.Fill(ds);
            }
            conn.Dispose();
            conn.Close();
        }
        return ds;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
238
6
Gpt3D_Clone238_6.cs 1 18
Gpt3D_Clone238_6.cs 19 41
----------------------------------------

private DataSet ExecuteDataset (string query) {
    var conn = new SqlConnection ("Data Source=" + Server + ";Initial Catalog=" + Database + ";User Id=" + Username + ";Password=" + Password + ";");
    DataSet ds;
    try {
        conn.Open ();
        ds = new DataSet ();
        var da = new SqlDataAdapter (query, conn);
        da.Fill (ds);
    }
    catch (Exception) {
        throw;
    }
    finally {
        conn.Dispose ();
        conn.Close ();
    }
    return ds;
}
----------------------------------------

 private DataSet ExecuteDataset(string query)
{
        var connectionString = "Data Source=" + Server + ";Initial Catalog=" + Database + ";User Id=" + Username + ";Password=" + Password + ";";
        DataSet dataset = new DataSet();
        try
        {
            using (SqlConnection connection = new SqlConnection(connectionString)) 
            {
                connection.Open();
                SqlDataAdapter adapter = new SqlDataAdapter(query, connection);
                adapter.Fill(dataset);
            }
        }
        catch (Exception) 
        {
            throw;
        }
        return dataset;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
240
0
Gpt3D_Clone240_0.cs 1 21
Gpt3D_Clone240_0.cs 22 47
----------------------------------------

public override int Read (byte [] buffer, int offset, int count) {
    int len = 0, c = count;
    while (c > 0 && ! bExit) {
        try {
            len = stream.Read (buffer, offset, c);
        }
        catch (Exception e) {
            if (e.HResult == - 2146232800) {
                continue;
            } else {
                break;
            }
        }
        if (! client.Connected || len == 0) {
            return 0;
        }
        offset += len;
        c -= len;
    }
    return count;
}
----------------------------------------

	public override int Read (byte [] buffer, int offset, int count) {
    int len = 0, c = 0;
    while (c < count && ! bExit) {
        try {
            len = stream.Read (buffer, offset, c);
        }
        catch {
            if (e.HResult == -2146232800) {
                if (client.Connected) {
                    return 0;
                }
                else {
                    continue;
                }
            }
            else {
                break;
            }
        }
        offset += len;
        c += len;
    }
    return count;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
240
1
Gpt3D_Clone240_1.cs 1 21
Gpt3D_Clone240_1.cs 22 44
----------------------------------------

public override int Read (byte [] buffer, int offset, int count) {
    int len = 0, c = count;
    while (c > 0 && ! bExit) {
        try {
            len = stream.Read (buffer, offset, c);
        }
        catch (Exception e) {
            if (e.HResult == - 2146232800) {
                continue;
            } else {
                break;
            }
        }
        if (! client.Connected || len == 0) {
            return 0;
        }
        offset += len;
        c -= len;
    }
    return count;
}
----------------------------------------

	public override int Read (byte [] buffer, int offset, int count) {
    int len = 0, c = 0;
    while (c < count && ! bExit) {
        try {
            len = stream.Read (buffer, offset, c);
        }
        catch {
            if (e.HResult == -2146232800) {
                continue;
            } else {
                break;
            }
        }
        if (! client.Connected || len == 0) {
            return 0;
        }
        offset += len;
        c += len;
    }
    return count;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
240
2
Gpt3D_Clone240_2.cs 1 21
Gpt3D_Clone240_2.cs 22 44
----------------------------------------

public override int Read (byte [] buffer, int offset, int count) {
    int len = 0, c = count;
    while (c > 0 && ! bExit) {
        try {
            len = stream.Read (buffer, offset, c);
        }
        catch (Exception e) {
            if (e.HResult == - 2146232800) {
                continue;
            } else {
                break;
            }
        }
        if (! client.Connected || len == 0) {
            return 0;
        }
        offset += len;
        c -= len;
    }
    return count;
}
----------------------------------------

	public override int Read (byte [] buffer, int offset, int count) {
    int len = 0, c = count;
    while (c > 0 && !bExit) {
        try {
            len = stream.Read (buffer, offset, c);
        }
        catch (IOException e) {
            if (e.HResult != -2146232800) {
                throw;
            }
        }
        if (len == 0 && client.Connected) {
            return 0;
        }
        else {
            offset += len;
            c -= len;
        }
    }
    return count;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
240
3
Gpt3D_Clone240_3.cs 1 21
Gpt3D_Clone240_3.cs 22 42
----------------------------------------

public override int Read (byte [] buffer, int offset, int count) {
    int len = 0, c = count;
    while (c > 0 && ! bExit) {
        try {
            len = stream.Read (buffer, offset, c);
        }
        catch (Exception e) {
            if (e.HResult == - 2146232800) {
                continue;
            } else {
                break;
            }
        }
        if (! client.Connected || len == 0) {
            return 0;
        }
        offset += len;
        c -= len;
    }
    return count;
}
----------------------------------------

	public override int Read (byte [] buffer, int offset, int count) {
    int len = 0, c = count;
    while (c > 0 && ! bExit) {
        try {
            len = stream.Read (buffer, offset, c);
        }
        catch (IOException e) {
            if (e.HResult != - 2146232800) {
                throw;
            }
        }
        if (! client.Connected || len == 0) {
            return 0;
        }
        offset += len;
        c -= len;
    }
    return count;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
241
0
Gpt3D_Clone241_0.cs 1 11
Gpt3D_Clone241_0.cs 12 26
----------------------------------------

public static IList ToAnonymousList (this IEnumerable enumerable) {
    var enumerator = enumerable.GetEnumerator ();
    if (! enumerator.MoveNext ())
        throw new Exception ("?? No elements??");
    var value = enumerator.Current;
    var returnList = (IList) typeof (List < >).MakeGenericType (value.GetType ()).GetConstructor (Type.EmptyTypes).Invoke (null);
    returnList.Add (value);
    while (enumerator.MoveNext ())
        returnList.Add (enumerator.Current);
    return returnList;
}
----------------------------------------

 public static IList ToAnonymousList (this IEnumerable enumerable) {
    var enumerator = enumerable.GetEnumerator ();
    if (! enumerator.MoveNext ())
        throw new Exception ("?? No elements??");
    var value = enumerator.Current;
    var typeArray = new Type[] { value.GetType() };
    var genericType = typeof(List<>).MakeGenericType(typeArray);
    var returnList = (IList)Activator.CreateInstance(genericType);
    returnList.Add (value);
    while (enumerator.MoveNext ())
        returnList.Add (enumerator.Current);
    return returnList;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
242
0
Gpt3D_Clone242_0.cs 1 23
Gpt3D_Clone242_0.cs 24 59
----------------------------------------

static void Main (string [] args) {
    try {
        try {
            try {
                CallAndThrow ();
            }
            catch (Exception ex) {
                var dispatchException = ExceptionDispatchInfo.Capture (ex);
                dispatchException.Throw ();
            }
        }
        catch (Exception ex) {
            var dispatchException = ExceptionDispatchInfo.Capture (ex);
            dispatchException.Throw ();
        }
    }
    catch (Exception ex) {
        Console.WriteLine (ex.Message);
        Console.WriteLine (ex.InnerException.Message);
        Console.WriteLine (ex.StackTrace);
    }
    Console.ReadLine ();
}
----------------------------------------

 
static void Main(string[] args)
{
    try
    {
        Func<object, Exception> captureExceptionAndThrowIt = ex =>
        {
            ExceptionDispatchInfo.Capture(ex).Throw();
            return ex;
        };
        try
        {
            try
            {
                captureExceptionAndThrowIt(CallAndThrow());
            }
            catch (Exception ex)
            {
                captureExceptionAndThrowIt(ex);
            }
        }
        catch (Exception ex)
        {
            captureExceptionAndThrowIt(ex);
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex.Message);
        Console.WriteLine(ex.InnerException.Message);
        Console.WriteLine(ex.StackTrace);
    }
    Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
242
1
Gpt3D_Clone242_1.cs 1 23
Gpt3D_Clone242_1.cs 24 60
----------------------------------------

static void Main (string [] args) {
    try {
        try {
            try {
                CallAndThrow ();
            }
            catch (Exception ex) {
                var dispatchException = ExceptionDispatchInfo.Capture (ex);
                dispatchException.Throw ();
            }
        }
        catch (Exception ex) {
            var dispatchException = ExceptionDispatchInfo.Capture (ex);
            dispatchException.Throw ();
        }
    }
    catch (Exception ex) {
        Console.WriteLine (ex.Message);
        Console.WriteLine (ex.InnerException.Message);
        Console.WriteLine (ex.StackTrace);
    }
    Console.ReadLine ();
}
----------------------------------------

 
static void Main(string[] args)
{
    try
    {
        Func<object, Exception> captureException = ex =>
        {
            ExceptionDispatchInfo.Capture(ex);
            return ex;
        };
        try
        {
            try
            {
                captureException(CallAndThrow()).Throw();
            }
            catch (Exception ex)
            {
                captureException(ex).Throw();
            }
        }
        catch (Exception ex)
        {
            captureException(ex).Throw();
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex.Message);
        Console.WriteLine(ex.InnerException.Message);
        Console.WriteLine(ex.StackTrace);
    }
    Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
242
2
Gpt3D_Clone242_2.cs 1 23
Gpt3D_Clone242_2.cs 24 60
----------------------------------------

static void Main (string [] args) {
    try {
        try {
            try {
                CallAndThrow ();
            }
            catch (Exception ex) {
                var dispatchException = ExceptionDispatchInfo.Capture (ex);
                dispatchException.Throw ();
            }
        }
        catch (Exception ex) {
            var dispatchException = ExceptionDispatchInfo.Capture (ex);
            dispatchException.Throw ();
        }
    }
    catch (Exception ex) {
        Console.WriteLine (ex.Message);
        Console.WriteLine (ex.InnerException.Message);
        Console.WriteLine (ex.StackTrace);
    }
    Console.ReadLine ();
}
----------------------------------------

 
static void Main(string[] args)
{
    try
    {
        Func<object, Exception> captureAndThrow = ex =>
        {
            ExceptionDispatchInfo.Capture(ex).Throw();
            return ex;
        };
        try
        {
            try
            {
                captureAndThrow(CallAndThrow());
            }
            catch (Exception ex)
            {
                captureAndThrow(ex);
            }
        }
        catch (Exception ex)
        {
            captureAndThrow(ex);
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex.Message);
        Console.WriteLine(ex.InnerException.Message);
        Console.WriteLine(ex.StackTrace);
    }
    Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
242
3
Gpt3D_Clone242_3.cs 1 23
Gpt3D_Clone242_3.cs 24 59
----------------------------------------

static void Main (string [] args) {
    try {
        try {
            try {
                CallAndThrow ();
            }
            catch (Exception ex) {
                var dispatchException = ExceptionDispatchInfo.Capture (ex);
                dispatchException.Throw ();
            }
        }
        catch (Exception ex) {
            var dispatchException = ExceptionDispatchInfo.Capture (ex);
            dispatchException.Throw ();
        }
    }
    catch (Exception ex) {
        Console.WriteLine (ex.Message);
        Console.WriteLine (ex.InnerException.Message);
        Console.WriteLine (ex.StackTrace);
    }
    Console.ReadLine ();
}
----------------------------------------

 
static void Main(string[] args)
{
    try
    {
        Action<object> captureExceptionAndThrowIt = ex =>
        {
            ExceptionDispatchInfo.Capture(ex).Throw();
        };
        try
        {
            try
            {
                captureExceptionAndThrowIt(CallAndThrow());
            }
            catch (Exception ex)
            {
                captureExceptionAndThrowIt(ex);
            }
        }
        catch (Exception ex)
        {
            captureExceptionAndThrowIt(ex);
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex.Message);
        Console.WriteLine(ex.InnerException.Message);
        Console.WriteLine(ex.StackTrace);
    }
    Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
242
4
Gpt3D_Clone242_4.cs 1 23
Gpt3D_Clone242_4.cs 24 59
----------------------------------------

static void Main (string [] args) {
    try {
        try {
            try {
                CallAndThrow ();
            }
            catch (Exception ex) {
                var dispatchException = ExceptionDispatchInfo.Capture (ex);
                dispatchException.Throw ();
            }
        }
        catch (Exception ex) {
            var dispatchException = ExceptionDispatchInfo.Capture (ex);
            dispatchException.Throw ();
        }
    }
    catch (Exception ex) {
        Console.WriteLine (ex.Message);
        Console.WriteLine (ex.InnerException.Message);
        Console.WriteLine (ex.StackTrace);
    }
    Console.ReadLine ();
}
----------------------------------------

 
static void Main(string[] args)
{
    try
    {
        Func<object, Exception> captureAndThrow = ex =>
        {
            return ExceptionDispatchInfo.Capture(ex).Throw();
        };
        try
        {
            try
            {
                captureAndThrow(CallAndThrow());
            }
            catch (Exception ex)
            {
                captureAndThrow(ex);
            }
        }
        catch (Exception ex)
        {
            captureAndThrow(ex);
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex.Message);
        Console.WriteLine(ex.InnerException.Message);
        Console.WriteLine(ex.StackTrace);
    }
    Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
242
5
Gpt3D_Clone242_5.cs 1 23
Gpt3D_Clone242_5.cs 24 59
----------------------------------------

static void Main (string [] args) {
    try {
        try {
            try {
                CallAndThrow ();
            }
            catch (Exception ex) {
                var dispatchException = ExceptionDispatchInfo.Capture (ex);
                dispatchException.Throw ();
            }
        }
        catch (Exception ex) {
            var dispatchException = ExceptionDispatchInfo.Capture (ex);
            dispatchException.Throw ();
        }
    }
    catch (Exception ex) {
        Console.WriteLine (ex.Message);
        Console.WriteLine (ex.InnerException.Message);
        Console.WriteLine (ex.StackTrace);
    }
    Console.ReadLine ();
}
----------------------------------------

 
static void Main(string[] args)
{
    try
    {
        Action<Exception> throwCapturedException = ex =>
        {
            ExceptionDispatchInfo.Capture(ex).Throw();
        };
        try
        {
            try
            {
                throwCapturedException(CallAndThrow());
            }
            catch (Exception ex)
            {
                throwCapturedException(ex);
            }
        }
        catch (Exception ex)
        {
            throwCapturedException(ex);
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex.Message);
        Console.WriteLine(ex.InnerException.Message);
        Console.WriteLine(ex.StackTrace);
    }
    Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
242
6
Gpt3D_Clone242_6.cs 1 23
Gpt3D_Clone242_6.cs 24 59
----------------------------------------

static void Main (string [] args) {
    try {
        try {
            try {
                CallAndThrow ();
            }
            catch (Exception ex) {
                var dispatchException = ExceptionDispatchInfo.Capture (ex);
                dispatchException.Throw ();
            }
        }
        catch (Exception ex) {
            var dispatchException = ExceptionDispatchInfo.Capture (ex);
            dispatchException.Throw ();
        }
    }
    catch (Exception ex) {
        Console.WriteLine (ex.Message);
        Console.WriteLine (ex.InnerException.Message);
        Console.WriteLine (ex.StackTrace);
    }
    Console.ReadLine ();
}
----------------------------------------

 
static void Main(string[] args)
{
    try
    {
        Func<object, Exception> captureExceptionFuncAndThrow = ex =>
        {
            return ExceptionDispatchInfo.Capture(ex).Throw();
        };
        try
        {
            try
            {
                captureExceptionFuncAndThrow(CallAndThrow());
            }
            catch (Exception ex)
            {
                captureExceptionFuncAndThrow(ex);
            }
        }
        catch (Exception ex)
        {
            captureExceptionFuncAndThrow(ex);
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex.Message);
        Console.WriteLine(ex.InnerException.Message);
        Console.WriteLine(ex.StackTrace);
    }
    Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
242
7
Gpt3D_Clone242_7.cs 1 23
Gpt3D_Clone242_7.cs 24 59
----------------------------------------

static void Main (string [] args) {
    try {
        try {
            try {
                CallAndThrow ();
            }
            catch (Exception ex) {
                var dispatchException = ExceptionDispatchInfo.Capture (ex);
                dispatchException.Throw ();
            }
        }
        catch (Exception ex) {
            var dispatchException = ExceptionDispatchInfo.Capture (ex);
            dispatchException.Throw ();
        }
    }
    catch (Exception ex) {
        Console.WriteLine (ex.Message);
        Console.WriteLine (ex.InnerException.Message);
        Console.WriteLine (ex.StackTrace);
    }
    Console.ReadLine ();
}
----------------------------------------

 
static void Main(string[] args)
{
    try
    {
        Action<object> captureAndThrowIt = ex =>
        {
            ExceptionDispatchInfo.Capture(ex).Throw();
        };
        try
        {
            try
            {
                captureAndThrowIt(CallAndThrow());
            }
            catch (Exception ex)
            {
                captureAndThrowIt(ex);
            }
        }
        catch (Exception ex)
        {
            captureAndThrowIt(ex);
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex.Message);
        Console.WriteLine(ex.InnerException.Message);
        Console.WriteLine(ex.StackTrace);
    }
    Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
242
8
Gpt3D_Clone242_8.cs 1 23
Gpt3D_Clone242_8.cs 24 59
----------------------------------------

static void Main (string [] args) {
    try {
        try {
            try {
                CallAndThrow ();
            }
            catch (Exception ex) {
                var dispatchException = ExceptionDispatchInfo.Capture (ex);
                dispatchException.Throw ();
            }
        }
        catch (Exception ex) {
            var dispatchException = ExceptionDispatchInfo.Capture (ex);
            dispatchException.Throw ();
        }
    }
    catch (Exception ex) {
        Console.WriteLine (ex.Message);
        Console.WriteLine (ex.InnerException.Message);
        Console.WriteLine (ex.StackTrace);
    }
    Console.ReadLine ();
}
----------------------------------------

 
static void Main(string[] args)
{
    try
    {
        Action<Exception> captureExceptionAndThrow = ex =>
        {
            ExceptionDispatchInfo.Capture(ex).Throw();
        };
        try
        {
            try
            {
                captureExceptionAndThrow(CallAndThrow());
            }
            catch (Exception ex)
            {
                captureExceptionAndThrow(ex);
            }
        }
        catch (Exception ex)
        {
            captureExceptionAndThrow(ex);
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex.Message);
        Console.WriteLine(ex.InnerException.Message);
        Console.WriteLine(ex.StackTrace);
    }
    Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
242
9
Gpt3D_Clone242_9.cs 1 23
Gpt3D_Clone242_9.cs 24 59
----------------------------------------

static void Main (string [] args) {
    try {
        try {
            try {
                CallAndThrow ();
            }
            catch (Exception ex) {
                var dispatchException = ExceptionDispatchInfo.Capture (ex);
                dispatchException.Throw ();
            }
        }
        catch (Exception ex) {
            var dispatchException = ExceptionDispatchInfo.Capture (ex);
            dispatchException.Throw ();
        }
    }
    catch (Exception ex) {
        Console.WriteLine (ex.Message);
        Console.WriteLine (ex.InnerException.Message);
        Console.WriteLine (ex.StackTrace);
    }
    Console.ReadLine ();
}
----------------------------------------

 
static void Main(string[] args)
{
    try
    {
        Func<object, Exception> captureExceptionAndThrow = ex =>
        {
            return ExceptionDispatchInfo.Capture(ex).Throw();
        };
        try
        {
            try
            {
                captureExceptionAndThrow(CallAndThrow());
            }
            catch (Exception ex)
            {
                captureExceptionAndThrow(ex);
            }
        }
        catch (Exception ex)
        {
            captureExceptionAndThrow(ex);
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex.Message);
        Console.WriteLine(ex.InnerException.Message);
        Console.WriteLine(ex.StackTrace);
    }
    Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
243
5
Gpt3D_Clone243_5.cs 1 9
Gpt3D_Clone243_5.cs 10 24
----------------------------------------

public void ShotHit (Point shot, bool sunk) {
    HitShots.AddLast (shot);
    MissCount = 0;
    EndPoints [1] = shot;
    if (EndPoints [0] == null)
        EndPoints [0] = shot;
    if (sunk)
        NullOutTarget ();
}
----------------------------------------

 public void ShotHit (Point shot, bool sunk) {
      HitShots.PushBack(shot);
      MissCount = 0;
      EndPoints[1] = shot;
      if (EndPoints[0] == null) {
        EndPoints[0] = shot;
      }
      if (sunk) {
        for (int i=0; i<EndPoints.length; i++) {
          EndPoints[i] = new Point(0, 0);
        }
      }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
243
6
Gpt3D_Clone243_6.cs 1 9
Gpt3D_Clone243_6.cs 10 23
----------------------------------------

public void ShotHit (Point shot, bool sunk) {
    HitShots.AddLast (shot);
    MissCount = 0;
    EndPoints [1] = shot;
    if (EndPoints [0] == null)
        EndPoints [0] = shot;
    if (sunk)
        NullOutTarget ();
}
----------------------------------------

 public void ShotHit (Point shot, bool sunk) {
      HitShots.AddLast(shot);
      MissCount = 0;
      EndPoints[1] = shot;
      if (EndPoints[0] == null) {
        EndPoints[0] = shot;
      }
      if (sunk) {
        EndPoints[0] = null;
        EndPoints[1] = null;
      }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
243
7
Gpt3D_Clone243_7.cs 1 9
Gpt3D_Clone243_7.cs 10 23
----------------------------------------

public void ShotHit (Point shot, bool sunk) {
    HitShots.AddLast (shot);
    MissCount = 0;
    EndPoints [1] = shot;
    if (EndPoints [0] == null)
        EndPoints [0] = shot;
    if (sunk)
        NullOutTarget ();
}
----------------------------------------

 public void ShotHit (Point shot, bool sunk) {
      HitShots.Append(shot);
      MissCount = 0;
      EndPoints[1] = shot;
      if (EndPoints[0] == null) {
        EndPoints[0] = shot;
      }
      if (sunk) {
        EndPoints[0] = new Point();
        EndPoints[1] = new Point(); 
      }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
243
8
Gpt3D_Clone243_8.cs 1 9
Gpt3D_Clone243_8.cs 10 22
----------------------------------------

public void ShotHit (Point shot, bool sunk) {
    HitShots.AddLast (shot);
    MissCount = 0;
    EndPoints [1] = shot;
    if (EndPoints [0] == null)
        EndPoints [0] = shot;
    if (sunk)
        NullOutTarget ();
}
----------------------------------------

 public void ShotHit (Point shot, bool sunk) {
        HitShots.Push(shot);
        MissCount = 0;
        EndPoints[1] = shot;
        if (EndPoints[0] == null) {
          EndPoints[0] = shot;
        }
        if (sunk) {
          SetTargetNull();
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
245
0
Gpt3D_Clone245_0.cs 1 23
Gpt3D_Clone245_0.cs 24 61
----------------------------------------

public Point GetShot () {
    Point p = new Point ();
    if (attackVector.Count () > 0) {
        p = ExtendShot ();
        return p;
    }
    Board potential = new Board (size);
    for (p.Y = 0; p.Y < size.Height; ++ p.Y) {
        for (p.X = 0; p.X < size.Width; ++ p.X) {
            if (shotBoard.ShotAt (p)) {
                potential [p] = 0;
                continue;
            }
            foreach (HunterBoard b in targetBoards) {
                potential [p] += b.GetWeightAt (p);
            }
        }
    }
    Point shot;
    shot = potential.GetWeightedRandom (rand.NextDouble ());
    shotBoard [shot] = Shot.Unresolved;
    return shot;
}
----------------------------------------

 public Point GetShot()
{
    Point p = new Point();
    Board potential = new Board(size);
    if (attackVector.Count() > 0)
    {
        return ExtendShot();
    }
        
    // compute the weights
    for (p.Y = 0; p.Y < size.Height; ++ p.Y) 
    {
        for (p.X = 0; p.X < size.Width; ++ p.X) 
        {
            if (shotBoard.ShotAt(p))
            {
                potential[p] = 0;
                continue;
            }
            double totalWeight = 0.0; 
            foreach (HunterBoard b in targetBoards) 
            {
                totalWeight += b.GetWeightAt(p); 
            }
            potential[p] = totalWeight;
        }
    }
    
    //get weighted random point from board potential
    Point shot;
    shot = potential.GetWeightedRandom(rand.NextDouble());
    shotBoard[shot] = Shot.Unresolved;
    return shot;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
245
1
Gpt3D_Clone245_1.cs 1 23
Gpt3D_Clone245_1.cs 24 55
----------------------------------------

public Point GetShot () {
    Point p = new Point ();
    if (attackVector.Count () > 0) {
        p = ExtendShot ();
        return p;
    }
    Board potential = new Board (size);
    for (p.Y = 0; p.Y < size.Height; ++ p.Y) {
        for (p.X = 0; p.X < size.Width; ++ p.X) {
            if (shotBoard.ShotAt (p)) {
                potential [p] = 0;
                continue;
            }
            foreach (HunterBoard b in targetBoards) {
                potential [p] += b.GetWeightAt (p);
            }
        }
    }
    Point shot;
    shot = potential.GetWeightedRandom (rand.NextDouble ());
    shotBoard [shot] = Shot.Unresolved;
    return shot;
}
----------------------------------------

 public Point GetShot()
{
	Point p = new Point();
    Board potential = new Board(size);
	double totalWeight = 0.0;
    if (attackVector.Count() > 0) {
        return ExtendShot();
    }
    
    // compute the weights
    for (p.Y = 0; p.Y < size.Height; ++p.Y) {
        for (p.X = 0; p.X < size.Width; ++p.X) {
            if (shotBoard.ShotAt(p)) {
                potential[p] = 0;
                continue;
            }
            foreach (HunterBoard b in targetBoards) {
                totalWeight = b.GetWeightAt(p);
                potential[p] += totalWeight;
            }
        }
    }
    
    //get weighted random point from board potential
    Point shot;
    shot = potential.GetWeightedRandom(rand.NextDouble());
    shotBoard[shot] = Shot.Unresolved;
    return shot;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
245
2
Gpt3D_Clone245_2.cs 1 23
Gpt3D_Clone245_2.cs 24 61
----------------------------------------

public Point GetShot () {
    Point p = new Point ();
    if (attackVector.Count () > 0) {
        p = ExtendShot ();
        return p;
    }
    Board potential = new Board (size);
    for (p.Y = 0; p.Y < size.Height; ++ p.Y) {
        for (p.X = 0; p.X < size.Width; ++ p.X) {
            if (shotBoard.ShotAt (p)) {
                potential [p] = 0;
                continue;
            }
            foreach (HunterBoard b in targetBoards) {
                potential [p] += b.GetWeightAt (p);
            }
        }
    }
    Point shot;
    shot = potential.GetWeightedRandom (rand.NextDouble ());
    shotBoard [shot] = Shot.Unresolved;
    return shot;
}
----------------------------------------

 public Point GetShot() 
{
    Point p = new Point();
    Board potential = new Board();
    double totalWeight = 0.0;
    if (attackVector.Count() > 0)
    {
        return ExtendShot();
    }
    // compute the weights
    for (p.Y = 0; p.Y < size.Height; ++ p.Y) 
    {
        for (p.X = 0; p.X < size.Width; ++ p.X) 
        {
            if (shotBoard.ShotAt(p))
            {
                potential[p] = 0;
                continue;
            }
            foreach (HunterBoard b in targetBoards) 
            {
                totalWeight += b.GetWeightAt(p); 
            }
            potential[p] = totalWeight;
        }
    }
    
    //get weighted random point from board potential
    Point shot;
    shot = potential.GetWeightedRandom(rand.NextDouble());
    shotBoard[shot] = Shot.Unresolved;
    return shot;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
245
3
Gpt3D_Clone245_3.cs 1 23
Gpt3D_Clone245_3.cs 24 59
----------------------------------------

public Point GetShot () {
    Point p = new Point ();
    if (attackVector.Count () > 0) {
        p = ExtendShot ();
        return p;
    }
    Board potential = new Board (size);
    for (p.Y = 0; p.Y < size.Height; ++ p.Y) {
        for (p.X = 0; p.X < size.Width; ++ p.X) {
            if (shotBoard.ShotAt (p)) {
                potential [p] = 0;
                continue;
            }
            foreach (HunterBoard b in targetBoards) {
                potential [p] += b.GetWeightAt (p);
            }
        }
    }
    Point shot;
    shot = potential.GetWeightedRandom (rand.NextDouble ());
    shotBoard [shot] = Shot.Unresolved;
    return shot;
}
----------------------------------------

 public Point GetShot()
{
    Point p = new Point();
    Board potential = new Board(size);
    double totalWeight = 0.0;
    if (attackVector.Count() > 0)
    {
        return ExtendShot();
    }
    
    // compute the weights
    for (p.Y = 0; p.Y < size.Height; ++ p.Y) 
    {
        for (p.X = 0; p.X < size.Width; ++ p.X) 
        {
            potential[p] = 0;
            if (!shotBoard.ShotAt(p))
            {
                foreach (HunterBoard b in targetBoards) 
                {
                    totalWeight += b.GetWeightAt(p); 
                }
                potential[p] = totalWeight;
            }
        }
    }
    //get weighted random point from board potential
    Point shot;
    shot = potential.GetWeightedRandom(rand.NextDouble());
    shotBoard[shot] = Shot.Unresolved;
    return shot;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
245
4
Gpt3D_Clone245_4.cs 1 23
Gpt3D_Clone245_4.cs 24 59
----------------------------------------

public Point GetShot () {
    Point p = new Point ();
    if (attackVector.Count () > 0) {
        p = ExtendShot ();
        return p;
    }
    Board potential = new Board (size);
    for (p.Y = 0; p.Y < size.Height; ++ p.Y) {
        for (p.X = 0; p.X < size.Width; ++ p.X) {
            if (shotBoard.ShotAt (p)) {
                potential [p] = 0;
                continue;
            }
            foreach (HunterBoard b in targetBoards) {
                potential [p] += b.GetWeightAt (p);
            }
        }
    }
    Point shot;
    shot = potential.GetWeightedRandom (rand.NextDouble ());
    shotBoard [shot] = Shot.Unresolved;
    return shot;
}
----------------------------------------

 public Point GetShot() 
{
    Point p = new Point();
    Board potential = new Board();
    double totalWeight = 0.0;
    if (attackVector.Count() > 0)
    {
        return ExtendShot();
    }
    // compute the weights
    for (p.Y = 0; p.Y < size.Height; ++ p.Y) 
    {
        for (p.X = 0; p.X < size.Width; ++ p.X) 
        {
            potential[p] = 0;
            if (!shotBoard.ShotAt(p))
            {
                foreach (HunterBoard b in targetBoards) 
                {
                    totalWeight += b.GetWeightAt(p); 
                }
                potential[p] = totalWeight;
            }
        }
    }
    
    //get weighted random point from board potential
    Point shot;
    shot = potential.GetWeightedRandom(rand.NextDouble());
    shotBoard[shot] = Shot.Unresolved;
    return shot;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
245
5
Gpt3D_Clone245_5.cs 1 23
Gpt3D_Clone245_5.cs 24 55
----------------------------------------

public Point GetShot () {
    Point p = new Point ();
    if (attackVector.Count () > 0) {
        p = ExtendShot ();
        return p;
    }
    Board potential = new Board (size);
    for (p.Y = 0; p.Y < size.Height; ++ p.Y) {
        for (p.X = 0; p.X < size.Width; ++ p.X) {
            if (shotBoard.ShotAt (p)) {
                potential [p] = 0;
                continue;
            }
            foreach (HunterBoard b in targetBoards) {
                potential [p] += b.GetWeightAt (p);
            }
        }
    }
    Point shot;
    shot = potential.GetWeightedRandom (rand.NextDouble ());
    shotBoard [shot] = Shot.Unresolved;
    return shot;
}
----------------------------------------

  public Point GetShot()
{
    Point p = new Point();
    Board potential = new Board(size);
    if (attackVector.Count() > 0)
    {
        return ExtendShot();
    }
        
    // compute the weights
    for (p.Y = 0; p.Y < size.Height; ++ p.Y) 
    {
        for (p.X = 0; p.X < size.Width; ++ p.X) 
        {
            if (shotBoard.ShotAt(p))
            {
                potential[p] = 0;
                continue;
            }
            potential[p] = ComputeWeight(p);
        }
    }
    
    //get weighted random point from board potential
    Point shot;
    shot = potential.GetWeightedRandom(rand.NextDouble());
    shotBoard[shot] = Shot.Unresolved;
    return shot;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
245
6
Gpt3D_Clone245_6.cs 1 23
Gpt3D_Clone245_6.cs 24 57
----------------------------------------

public Point GetShot () {
    Point p = new Point ();
    if (attackVector.Count () > 0) {
        p = ExtendShot ();
        return p;
    }
    Board potential = new Board (size);
    for (p.Y = 0; p.Y < size.Height; ++ p.Y) {
        for (p.X = 0; p.X < size.Width; ++ p.X) {
            if (shotBoard.ShotAt (p)) {
                potential [p] = 0;
                continue;
            }
            foreach (HunterBoard b in targetBoards) {
                potential [p] += b.GetWeightAt (p);
            }
        }
    }
    Point shot;
    shot = potential.GetWeightedRandom (rand.NextDouble ());
    shotBoard [shot] = Shot.Unresolved;
    return shot;
}
----------------------------------------

 public Point GetShot()
{
    Point p = new Point();
    Board potential = new Board(size);
    if (attackVector.Count() > 0)
    {
        return ExtendShot();
    }
        
    // compute the weights
    for (p.Y = 0; p.Y < size.Height; ++ p.Y) 
    {
        for (p.X = 0; p.X < size.Width; ++ p.X) 
        {
            potential[p] = 0;
            if (!shotBoard.ShotAt(p))
            {
                foreach (HunterBoard b in targetBoards) 
                {
                    potential[p] += b.GetWeightAt(p); 
                }
            }
        }
    }
    //get weighted random point from board potential
    Point shot;
    shot = potential.GetWeightedRandom(rand.NextDouble());
    shotBoard[shot] = Shot.Unresolved;
    return shot;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
245
7
Gpt3D_Clone245_7.cs 1 23
Gpt3D_Clone245_7.cs 24 56
----------------------------------------

public Point GetShot () {
    Point p = new Point ();
    if (attackVector.Count () > 0) {
        p = ExtendShot ();
        return p;
    }
    Board potential = new Board (size);
    for (p.Y = 0; p.Y < size.Height; ++ p.Y) {
        for (p.X = 0; p.X < size.Width; ++ p.X) {
            if (shotBoard.ShotAt (p)) {
                potential [p] = 0;
                continue;
            }
            foreach (HunterBoard b in targetBoards) {
                potential [p] += b.GetWeightAt (p);
            }
        }
    }
    Point shot;
    shot = potential.GetWeightedRandom (rand.NextDouble ());
    shotBoard [shot] = Shot.Unresolved;
    return shot;
}
----------------------------------------

 public Point GetShot()
{
    Point p = new Point();
    Board potential = new Board();
    if (attackVector.Count() > 0)
    {
        return ExtendShot();
    }
    
    // compute the weights
    for (p.Y = 0; p.Y < size.Height; ++ p.Y) 
    {
        for (p.X = 0; p.X < size.Width; ++ p.X) 
        {
            if (shotBoard.ShotAt(p))
            {
                potential[p] = 0;
                continue;
            }
            potential[p] = SumWeight(p);
        }
    }
    //get weighted random point from board potential
    Point shot;
    shot = potential.GetWeightedRandom(rand.NextDouble());
    shotBoard[shot] = Shot.Unresolved;
    return shot;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
245
8
Gpt3D_Clone245_8.cs 1 23
Gpt3D_Clone245_8.cs 24 54
----------------------------------------

public Point GetShot () {
    Point p = new Point ();
    if (attackVector.Count () > 0) {
        p = ExtendShot ();
        return p;
    }
    Board potential = new Board (size);
    for (p.Y = 0; p.Y < size.Height; ++ p.Y) {
        for (p.X = 0; p.X < size.Width; ++ p.X) {
            if (shotBoard.ShotAt (p)) {
                potential [p] = 0;
                continue;
            }
            foreach (HunterBoard b in targetBoards) {
                potential [p] += b.GetWeightAt (p);
            }
        }
    }
    Point shot;
    shot = potential.GetWeightedRandom (rand.NextDouble ());
    shotBoard [shot] = Shot.Unresolved;
    return shot;
}
----------------------------------------

 public Point GetShot() 
{
    Point p = new Point();
    Board potential = new Board();
    if (attackVector.Count() > 0)
    {
        return ExtendShot();
    }
    // compute the weights
    for (p.Y = 0; p.Y < size.Height; ++ p.Y) 
    {
        for (p.X = 0; p.X < size.Width; ++ p.X) 
        {
            potential[p] = 0;
            if (!shotBoard.ShotAt(p))
            {
                potential[p] = ComputeWeightAtAllBoards(p);
            }
        }
    }
    
    //get weighted random point from board potential
    Point shot;
    shot = potential.GetWeightedRandom(rand.NextDouble());
    shotBoard[shot] = Shot.Unresolved;
    return shot;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
246
0
Gpt3D_Clone246_0.cs 1 15
Gpt3D_Clone246_0.cs 16 39
----------------------------------------

public void ShotHit (Point shot, bool sunk) {
    shotBoard [shot] = Shot.Hit;
    if (! sunk) {
        if (attackVector.Count == 0) {
            attackVector.Push (new Attack (this, shot));
        } else {
            attackVector.Peek ().AddHit (shot);
        }
    }
    if (sunk) {
        if (attackVector.Count > 0) {
            attackVector.Pop ();
        }
    }
}
----------------------------------------

 public void ShotHit (Point shot, bool sunk) 
{
    shotBoard.replace(shot, Shot.Hit);
    if (!sunk) 
    {
        if (attackVector.Count == 0)
        {
            attackVector.PushAt(new Attack(this, shot),0);
        }
        else 
        {
            attackVector.ElementAt(0).AddHit(shot);
        }
    }
    if (sunk) 
    {
        if (attackVector.Count > 0) 
        {
            attackVector.Delete(0);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
248
0
Gpt3D_Clone248_0.cs 1 14
Gpt3D_Clone248_0.cs 15 29
----------------------------------------

public override String ToString () {
    String output = String.Format ("Target size is {0}\n", Target.Length);
    String horzDiv = "   +----+----+----+----+----+----+----+----+----+----+\n";
    int x, y;
    output += "      A    B    C    D    E    F    G    H    I    J    \n" + horzDiv;
    for (y = 0; y < size.Height; ++ y) {
        output += String.Format ("{0} ", y + 1).PadLeft (3);
        for (x = 0; x < size.Width; ++ x) {
            output += String.Format ("| {0} ", grid [x, y].ToString ().PadLeft (2));
        }
        output += "|\n" + horzDiv;
    }
    return output;
}
----------------------------------------

	public override String ToString () {
  String output = String.Format ("Target size is {0}\n", Target.Length);
  int x, y;
  output += "      A   B   C   D   E   F   G   H   I   J    \n";
 for (y = 0; y < size.Height; ++ y) {
        output += String.Format ("{0} ", y + 1).PadLeft (3);
        for (x = 0; x < size.Width; ++ x) {
            output += String.Format ("|{0}|", grid [x, y].ToString ().PadLeft (3));
        }
        output += "\n";
    }
    return output;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
248
1
Gpt3D_Clone248_1.cs 1 14
Gpt3D_Clone248_1.cs 15 29
----------------------------------------

public override String ToString () {
    String output = String.Format ("Target size is {0}\n", Target.Length);
    String horzDiv = "   +----+----+----+----+----+----+----+----+----+----+\n";
    int x, y;
    output += "      A    B    C    D    E    F    G    H    I    J    \n" + horzDiv;
    for (y = 0; y < size.Height; ++ y) {
        output += String.Format ("{0} ", y + 1).PadLeft (3);
        for (x = 0; x < size.Width; ++ x) {
            output += String.Format ("| {0} ", grid [x, y].ToString ().PadLeft (2));
        }
        output += "|\n" + horzDiv;
    }
    return output;
}
----------------------------------------

	public override String ToString () {
  String output = String.Format ("Target size is {0}\n", Target.Length);
  int x, y;
  output += "    1  2  3  4  5  6  7  8  9 10 \n";
 for (y = 0; y < size.Height; ++ y) {
        output += String.Format ("{0}  ", y + 1).PadLeft (3);
        for (x = 0; x < size.Width; ++ x) {
            output += String.Format (" {0} ", grid [x, y].ToString ().PadLeft (2));
        }
        output += "\n";
    }
    return output;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
248
2
Gpt3D_Clone248_2.cs 1 14
Gpt3D_Clone248_2.cs 15 29
----------------------------------------

public override String ToString () {
    String output = String.Format ("Target size is {0}\n", Target.Length);
    String horzDiv = "   +----+----+----+----+----+----+----+----+----+----+\n";
    int x, y;
    output += "      A    B    C    D    E    F    G    H    I    J    \n" + horzDiv;
    for (y = 0; y < size.Height; ++ y) {
        output += String.Format ("{0} ", y + 1).PadLeft (3);
        for (x = 0; x < size.Width; ++ x) {
            output += String.Format ("| {0} ", grid [x, y].ToString ().PadLeft (2));
        }
        output += "|\n" + horzDiv;
    }
    return output;
}
----------------------------------------

	public override String ToString () {
  String output = String.Format ("Target size is {0}\n", Target.Length);
  int x, y;
  output += "      A    B    C    D    E    F    G    H    I    J    \n";
 for (y = 0; y < size.Height; ++ y) {
        output += String.Format ("{0} ", y + 1).PadLeft (3);
        for (x = 0; x < size.Width; ++ x) {
            output += String.Format (" {0}  ", grid [x, y].ToString ().PadLeft (2));
        }
        output += "\n";
    }
    return output;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
248
3
Gpt3D_Clone248_3.cs 1 14
Gpt3D_Clone248_3.cs 15 29
----------------------------------------

public override String ToString () {
    String output = String.Format ("Target size is {0}\n", Target.Length);
    String horzDiv = "   +----+----+----+----+----+----+----+----+----+----+\n";
    int x, y;
    output += "      A    B    C    D    E    F    G    H    I    J    \n" + horzDiv;
    for (y = 0; y < size.Height; ++ y) {
        output += String.Format ("{0} ", y + 1).PadLeft (3);
        for (x = 0; x < size.Width; ++ x) {
            output += String.Format ("| {0} ", grid [x, y].ToString ().PadLeft (2));
        }
        output += "|\n" + horzDiv;
    }
    return output;
}
----------------------------------------

	public override String ToString () {
  String output = String.Format ("Target size is {0}\n", Target.Length);
  int x, y;
  output += "   A B C D E F G H I J \n";
 for (y = 0; y < size.Height; ++ y) {
        output += String.Format ("{0} ", y + 1).PadLeft (3);
        for (x = 0; x < size.Width; ++ x) {
            output += String.Format (" {0} ", grid [x, y].ToString ().PadLeft (3));
        }
        output += "\n";
    }
    return output;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
248
4
Gpt3D_Clone248_4.cs 1 14
Gpt3D_Clone248_4.cs 15 29
----------------------------------------

public override String ToString () {
    String output = String.Format ("Target size is {0}\n", Target.Length);
    String horzDiv = "   +----+----+----+----+----+----+----+----+----+----+\n";
    int x, y;
    output += "      A    B    C    D    E    F    G    H    I    J    \n" + horzDiv;
    for (y = 0; y < size.Height; ++ y) {
        output += String.Format ("{0} ", y + 1).PadLeft (3);
        for (x = 0; x < size.Width; ++ x) {
            output += String.Format ("| {0} ", grid [x, y].ToString ().PadLeft (2));
        }
        output += "|\n" + horzDiv;
    }
    return output;
}
----------------------------------------

	public override String ToString () {
  String output = String.Format ("Target size is {0}\n", Target.Length);
  int x, y;
  output += "   A B C D E F G H I J \n";
 for (y = 0; y < size.Height; ++ y) {
        output += String.Format ("{0} ", y + 1).PadLeft (3);
        for (x = 0; x < size.Width; ++ x) {
            output += String.Format ("[{0}]", grid [x, y].ToString ().PadLeft (2));
        }
        output += "\n";
    }
    return output;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
248
5
Gpt3D_Clone248_5.cs 1 14
Gpt3D_Clone248_5.cs 15 29
----------------------------------------

public override String ToString () {
    String output = String.Format ("Target size is {0}\n", Target.Length);
    String horzDiv = "   +----+----+----+----+----+----+----+----+----+----+\n";
    int x, y;
    output += "      A    B    C    D    E    F    G    H    I    J    \n" + horzDiv;
    for (y = 0; y < size.Height; ++ y) {
        output += String.Format ("{0} ", y + 1).PadLeft (3);
        for (x = 0; x < size.Width; ++ x) {
            output += String.Format ("| {0} ", grid [x, y].ToString ().PadLeft (2));
        }
        output += "|\n" + horzDiv;
    }
    return output;
}
----------------------------------------

	public override String ToString () {
  String output = String.Format ("Target size is {0}\n", Target.Length);
  int x, y;
  output += "      A  B  C  D  E  F  G  H  I  J    \n";
 for (y = 0; y < size.Height; ++ y) {
        output += String.Format ("{0} ", y + 1).PadLeft (3);
        for (x = 0; x < size.Width; ++ x) {
            output += String.Format (" {0} ", grid [x, y].ToString ().PadLeft (2));
        }
        output += "\n";
    }
    return output;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
24
4
Gpt3D_Clone24_4.cs 1 15
Gpt3D_Clone24_4.cs 16 39
----------------------------------------

static void Main (string [] args) {
    var assemblyFilename = args.FirstOrDefault ();
    if (assemblyFilename != null && File.Exists (assemblyFilename)) {
        try {
            var assembly = Assembly.ReflectionOnlyLoadFrom (assemblyFilename);
            var name = assembly.GetName ();
            using (var file = File.AppendText ("C:\\AssemblyInfo.txt"))
            {
                file.WriteLine ("{0} - {1}", name.FullName, name.Version);
            }}
        catch (Exception ex) {
            throw;
        }
    }
}
----------------------------------------

 static void Main(string[] args) 
{
    if (args != null && args.Any() && File.Exists(args[0])) 
    {
        try 
        {
            Assembly assembly = Assembly.ReflectionOnlyLoadFrom(args[0]);
            AssemblyName name = assembly.GetName();
            using (FileStream fs = new FileStream("C:\\AssemblyInfo.txt", FileMode.Append))
            {
                using (StreamWriter writer = new StreamWriter(fs))
                {
                    writer.WriteLine("{0} - {1}", name.FullName, name.Version);
                }
            }
        }
        catch (Exception ex)
        {
            throw;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
24
5
Gpt3D_Clone24_5.cs 1 15
Gpt3D_Clone24_5.cs 16 37
----------------------------------------

static void Main (string [] args) {
    var assemblyFilename = args.FirstOrDefault ();
    if (assemblyFilename != null && File.Exists (assemblyFilename)) {
        try {
            var assembly = Assembly.ReflectionOnlyLoadFrom (assemblyFilename);
            var name = assembly.GetName ();
            using (var file = File.AppendText ("C:\\AssemblyInfo.txt"))
            {
                file.WriteLine ("{0} - {1}", name.FullName, name.Version);
            }}
        catch (Exception ex) {
            throw;
        }
    }
}
----------------------------------------

 static void Main (string[] args) 
{
    if (args != null && args.Any() && File.Exists(args[0])) 
    {
        try 
        {
            Assembly assembly = Assembly.ReflectionOnlyLoadFrom(args[0]);
            AssemblyName name = assembly.GetName();
            FileStream fileStream = File.Open("C:\\AssemblyInfo.txt", FileMode.Append);
            using (StreamWriter writer = new StreamWriter(fileStream))
            {
                writer.WriteLine("{0} - {1}", name.FullName, name.Version);
            }
        }
        catch (Exception ex)
        {
            throw;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
24
6
Gpt3D_Clone24_6.cs 1 15
Gpt3D_Clone24_6.cs 16 36
----------------------------------------

static void Main (string [] args) {
    var assemblyFilename = args.FirstOrDefault ();
    if (assemblyFilename != null && File.Exists (assemblyFilename)) {
        try {
            var assembly = Assembly.ReflectionOnlyLoadFrom (assemblyFilename);
            var name = assembly.GetName ();
            using (var file = File.AppendText ("C:\\AssemblyInfo.txt"))
            {
                file.WriteLine ("{0} - {1}", name.FullName, name.Version);
            }}
        catch (Exception ex) {
            throw;
        }
    }
}
----------------------------------------

 static void Main(string[] args)
{
    if (args.Length > 0 && File.Exists(args[0]))
    {
        try
        {
            Assembly assembly = Assembly.ReflectionOnlyLoadFrom(args[0]);
            AssemblyName name = assembly.GetName();
            using (StreamWriter writer = File.AppendText("C:\\AssemblyInfo.txt"))
            {
                writer.WriteLine("{0} - {1}", name.FullName, name.Version);
            }
        }
        catch (Exception ex)
        {
            throw;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
24
7
Gpt3D_Clone24_7.cs 1 15
Gpt3D_Clone24_7.cs 16 32
----------------------------------------

static void Main (string [] args) {
    var assemblyFilename = args.FirstOrDefault ();
    if (assemblyFilename != null && File.Exists (assemblyFilename)) {
        try {
            var assembly = Assembly.ReflectionOnlyLoadFrom (assemblyFilename);
            var name = assembly.GetName ();
            using (var file = File.AppendText ("C:\\AssemblyInfo.txt"))
            {
                file.WriteLine ("{0} - {1}", name.FullName, name.Version);
            }}
        catch (Exception ex) {
            throw;
        }
    }
}
----------------------------------------

 static void Main (string [] args) {
    if (args.Any() && File.Exists (args[0])) {
        try {
            var assembly = Assembly.ReflectionOnlyLoadFrom (args[0]);
            var name = assembly.GetName ();
            using (var writer = File.AppendText ("C:\\AssemblyInfo.txt"))
            {
                writer.WriteLine ("{0} - {1}", name.FullName, name.Version);
            }
        }
        catch (Exception ex) {
            throw;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
24
8
Gpt3D_Clone24_8.cs 1 15
Gpt3D_Clone24_8.cs 16 36
----------------------------------------

static void Main (string [] args) {
    var assemblyFilename = args.FirstOrDefault ();
    if (assemblyFilename != null && File.Exists (assemblyFilename)) {
        try {
            var assembly = Assembly.ReflectionOnlyLoadFrom (assemblyFilename);
            var name = assembly.GetName ();
            using (var file = File.AppendText ("C:\\AssemblyInfo.txt"))
            {
                file.WriteLine ("{0} - {1}", name.FullName, name.Version);
            }}
        catch (Exception ex) {
            throw;
        }
    }
}
----------------------------------------

 static void Main(string[] args)
{
    if (args != null && args.Length > 0 && File.Exists(args[0]))
    {
        try
        {
            Assembly assembly = Assembly.ReflectionOnlyLoadFrom(args[0]);
            AssemblyName name = assembly.GetName();
            using (var file = new StreamWriter(File.Open("C:\\AssemblyInfo.txt", FileMode.Append)))
            {
                file.WriteLine("{0} - {1}", name.FullName, name.Version);
           }
        }
        catch (Exception ex)
        {
            throw;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
24
9
Gpt3D_Clone24_9.cs 1 15
Gpt3D_Clone24_9.cs 16 36
----------------------------------------

static void Main (string [] args) {
    var assemblyFilename = args.FirstOrDefault ();
    if (assemblyFilename != null && File.Exists (assemblyFilename)) {
        try {
            var assembly = Assembly.ReflectionOnlyLoadFrom (assemblyFilename);
            var name = assembly.GetName ();
            using (var file = File.AppendText ("C:\\AssemblyInfo.txt"))
            {
                file.WriteLine ("{0} - {1}", name.FullName, name.Version);
            }}
        catch (Exception ex) {
            throw;
        }
    }
}
----------------------------------------

 static void Main(string[] args)
{
    if (args != null && args.Length > 0 && File.Exists(args[0]))
    {
        try
        {
            Assembly assembly = Assembly.ReflectionOnlyLoadFrom(args[0]);
            AssemblyName name = assembly.GetName();
            using (StreamWriter writer = new StreamWriter("C:\\AssemblyInfo.txt", append: true))
            {
                writer.WriteLine("{0} - {1}", name.FullName, name.Version);
            }
        }
        catch (Exception ex)
        {
            throw;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
254
2
Gpt3D_Clone254_2.cs 1 12
Gpt3D_Clone254_2.cs 13 26
----------------------------------------

static void Main (string [] args) {
    Test1 ("just a little test string.");
    GC.Collect ();
    GC.WaitForPendingFinalizers ();
    Stopwatch timer = new Stopwatch ();
    timer.Start ();
    for (int i = 0; i < 10000; i ++) {
        Test1 ("just a little test string.");
    }
    timer.Stop ();
    Console.WriteLine (timer.Elapsed);
}
----------------------------------------

 static void Main (string[] args) {
            Test1 ("just a little test string.");
            GC.Collect ();
            GC.WaitForPendingFinalizers ();
            PerformanceCounter perfCounter = new PerformanceCounter("Processor","Processor Time");
            float start = perfCounter.NextValue();
            for (int i = 0; i < 10000; i++) {
                Test1 ("just a little test string.");
            }
            float end = perfCounter.NextValue();
            Console.WriteLine ((end - start)*1000);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
254
3
Gpt3D_Clone254_3.cs 1 12
Gpt3D_Clone254_3.cs 13 26
----------------------------------------

static void Main (string [] args) {
    Test1 ("just a little test string.");
    GC.Collect ();
    GC.WaitForPendingFinalizers ();
    Stopwatch timer = new Stopwatch ();
    timer.Start ();
    for (int i = 0; i < 10000; i ++) {
        Test1 ("just a little test string.");
    }
    timer.Stop ();
    Console.WriteLine (timer.Elapsed);
}
----------------------------------------

 static void Main (string[] args) {
            Test1 ("just a little test string.");
            GC.Collect ();
            GC.WaitForPendingFinalizers ();
            
            long startTime = MyFunctions.GetTickCount();
            for (int i = 0; i < 10000; i++) {
                Test1 ("just a little test string.");
            }
            long endTime = MyFunctions.GetTickCount();
            Console.WriteLine ((endTime - startTime));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
254
4
Gpt3D_Clone254_4.cs 1 12
Gpt3D_Clone254_4.cs 13 25
----------------------------------------

static void Main (string [] args) {
    Test1 ("just a little test string.");
    GC.Collect ();
    GC.WaitForPendingFinalizers ();
    Stopwatch timer = new Stopwatch ();
    timer.Start ();
    for (int i = 0; i < 10000; i ++) {
        Test1 ("just a little test string.");
    }
    timer.Stop ();
    Console.WriteLine (timer.Elapsed);
}
----------------------------------------

 static void Main (string[] args) {
            Test1 ("just a little test string.");
            GC.Collect ();
            GC.WaitForPendingFinalizers ();
            long startTime = System.Diagnostics.Stopwatch.GetTimestamp();
            for (int i = 0; i < 10000; i++) {
                Test1 ("just a little test string.");
            }
            double elapsedSeconds = (double)(System.Diagnostics.Stopwatch.GetTimestamp() - startTime)/System.Diagnostics.Stopwatch.Frequency;
            Console.WriteLine (elapsedSeconds);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
254
5
Gpt3D_Clone254_5.cs 1 12
Gpt3D_Clone254_5.cs 13 25
----------------------------------------

static void Main (string [] args) {
    Test1 ("just a little test string.");
    GC.Collect ();
    GC.WaitForPendingFinalizers ();
    Stopwatch timer = new Stopwatch ();
    timer.Start ();
    for (int i = 0; i < 10000; i ++) {
        Test1 ("just a little test string.");
    }
    timer.Stop ();
    Console.WriteLine (timer.Elapsed);
}
----------------------------------------

 static void Main (string[] args) {
            Test1 ("just a little test string.");
            GC.Collect ();
            GC.WaitForPendingFinalizers ();
            long startTime = System.Environment.TickCount;
            for (int i = 0; i < 10000; i ++) {
                Test1 ("just a little test string.");
            }
            TimeSpan timeElapsed = TimeSpan.FromMilliseconds(System.Environment.TickCount - startTime);
            Console.WriteLine (timeElapsed);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
254
6
Gpt3D_Clone254_6.cs 1 12
Gpt3D_Clone254_6.cs 13 25
----------------------------------------

static void Main (string [] args) {
    Test1 ("just a little test string.");
    GC.Collect ();
    GC.WaitForPendingFinalizers ();
    Stopwatch timer = new Stopwatch ();
    timer.Start ();
    for (int i = 0; i < 10000; i ++) {
        Test1 ("just a little test string.");
    }
    timer.Stop ();
    Console.WriteLine (timer.Elapsed);
}
----------------------------------------

 static void Main (string[] args) {
            Test1 ("just a little test string.");
            GC.Collect ();
            GC.WaitForPendingFinalizers ();
            long startTime = DateTime.Now.Ticks;
            for (int i = 0; i < 10000; i ++) {
                Test1 ("just a little test string.");
            }
            TimeSpan timeElapsed = TimeSpan.FromTicks(DateTime.Now.Ticks - startTime);
            Console.WriteLine (timeElapsed);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
254
7
Gpt3D_Clone254_7.cs 1 12
Gpt3D_Clone254_7.cs 13 25
----------------------------------------

static void Main (string [] args) {
    Test1 ("just a little test string.");
    GC.Collect ();
    GC.WaitForPendingFinalizers ();
    Stopwatch timer = new Stopwatch ();
    timer.Start ();
    for (int i = 0; i < 10000; i ++) {
        Test1 ("just a little test string.");
    }
    timer.Stop ();
    Console.WriteLine (timer.Elapsed);
}
----------------------------------------

  static void Main (string[] args) {
            Test1 ("just a little test string.");
            GC.Collect ();
            GC.WaitForPendingFinalizers ();
            DateTime startTime = DateTime.Now;
            for (int i = 0; i < 10000; i ++) {
                Test1 ("just a little test string.");
            }
            TimeSpan timeElapsed = DateTime.Now - startTime;
            Console.WriteLine (timeElapsed);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
256
0
Gpt3D_Clone256_0.cs 1 20
Gpt3D_Clone256_0.cs 21 43
----------------------------------------

private void dataGridDetail_EditingControlShowing (object sender, DataGridViewEditingControlShowingEventArgs e) {
    if (dataGridDetail.EditingControl.GetType () == typeof (DataGridViewTextBoxEditingControl)) {
        TextBox prodCode = e.Control as TextBox;
        if (dataGridDetail.CurrentCell.ColumnIndex == 2) {
            var source = new AutoCompleteStringCollection ();
            String [] stringArray = Array.ConvertAll < DataRow, String > (products.Select (), delegate (DataRow row) {
                return (String) row ["code"];
            });
            source.AddRange (stringArray);
            TextBox prodCode = e.Control as TextBox;
            if (prodCode != null) {
                prodCode.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
                prodCode.AutoCompleteCustomSource = source;
                prodCode.AutoCompleteSource = AutoCompleteSource.CustomSource;
            }
        } else {
            prodCode.AutoCompleteCustomSource = null;
        }
    }
}
----------------------------------------

  private void dataGridDetail_EditingControlShowing (object sender, DataGridViewEditingControlShowingEventArgs e) { 
    if(dataGridDetail.EditingControl.GetType () == typeof (DataGridViewTextBoxEditingControl)){ 
        TextBox prodCode = e.Control as TextBox; 
        if (dataGridDetail.CurrentCell.ColumnIndex == 2) { 
            var source = new AutoCompleteStringCollection(); 
            IDataReader dataRowReader = products.Select().CreateDataReader();
            while (dataRowReader.Read()){ 
                source.Add((String)dataRowReader["code"]); 
            } 
             TextBox prodCode = e.Control as TextBox; 
            if (prodCode != null) { 
                prodCode.AutoCompleteMode = AutoCompleteMode.SuggestAppend; 
                prodCode.AutoCompleteCustomSource = source; 
                prodCode.AutoCompleteSource = AutoCompleteSource.CustomSource; 
            } 
        } 
        else { 
            prodCode.AutoCompleteCustomSource = null; 
        } 
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
256
1
Gpt3D_Clone256_1.cs 1 20
Gpt3D_Clone256_1.cs 21 43
----------------------------------------

private void dataGridDetail_EditingControlShowing (object sender, DataGridViewEditingControlShowingEventArgs e) {
    if (dataGridDetail.EditingControl.GetType () == typeof (DataGridViewTextBoxEditingControl)) {
        TextBox prodCode = e.Control as TextBox;
        if (dataGridDetail.CurrentCell.ColumnIndex == 2) {
            var source = new AutoCompleteStringCollection ();
            String [] stringArray = Array.ConvertAll < DataRow, String > (products.Select (), delegate (DataRow row) {
                return (String) row ["code"];
            });
            source.AddRange (stringArray);
            TextBox prodCode = e.Control as TextBox;
            if (prodCode != null) {
                prodCode.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
                prodCode.AutoCompleteCustomSource = source;
                prodCode.AutoCompleteSource = AutoCompleteSource.CustomSource;
            }
        } else {
            prodCode.AutoCompleteCustomSource = null;
        }
    }
}
----------------------------------------

  private void dataGridDetail_EditingControlShowing (object sender, DataGridViewEditingControlShowingEventArgs e) { 
    if(dataGridDetail.EditingControl.GetType () == typeof (DataGridViewTextBoxEditingControl)){ 
        TextBox prodCode = e.Control as TextBox; 
        if (dataGridDetail.CurrentCell.ColumnIndex == 2) { 
            var source = new AutoCompleteStringCollection(); 
            DataTableReader dataRowTableReader = products.Select().CreateDataReader();
            while (dataRowTableReader.Read()){ 
                source.Add((String)dataRowTableReader["code"]); 
            } 
             TextBox prodCode = e.Control as TextBox; 
            if (prodCode != null) { 
                prodCode.AutoCompleteMode = AutoCompleteMode.SuggestAppend; 
                prodCode.AutoCompleteCustomSource = source; 
                prodCode.AutoCompleteSource = AutoCompleteSource.CustomSource; 
            } 
        } 
        else { 
            prodCode.AutoCompleteCustomSource = null; 
        } 
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
256
2
Gpt3D_Clone256_2.cs 1 20
Gpt3D_Clone256_2.cs 21 43
----------------------------------------

private void dataGridDetail_EditingControlShowing (object sender, DataGridViewEditingControlShowingEventArgs e) {
    if (dataGridDetail.EditingControl.GetType () == typeof (DataGridViewTextBoxEditingControl)) {
        TextBox prodCode = e.Control as TextBox;
        if (dataGridDetail.CurrentCell.ColumnIndex == 2) {
            var source = new AutoCompleteStringCollection ();
            String [] stringArray = Array.ConvertAll < DataRow, String > (products.Select (), delegate (DataRow row) {
                return (String) row ["code"];
            });
            source.AddRange (stringArray);
            TextBox prodCode = e.Control as TextBox;
            if (prodCode != null) {
                prodCode.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
                prodCode.AutoCompleteCustomSource = source;
                prodCode.AutoCompleteSource = AutoCompleteSource.CustomSource;
            }
        } else {
            prodCode.AutoCompleteCustomSource = null;
        }
    }
}
----------------------------------------

  private void dataGridDetail_EditingControlShowing (object sender, DataGridViewEditingControlShowingEventArgs e) { 
    if(dataGridDetail.EditingControl.GetType () == typeof (DataGridViewTextBoxEditingControl)){ 
        TextBox prodCode = e.Control as TextBox; 
        if (dataGridDetail.CurrentCell.ColumnIndex == 2) { 
            var source = new AutoCompleteStringCollection(); 
            IEnumerable dataRowEnumerable = products.Select();
            foreach(DataRow row in dataRowEnumerable){ 
                source.Add((String)row["code"]); 
            } 
             TextBox prodCode = e.Control as TextBox; 
            if (prodCode != null) { 
                prodCode.AutoCompleteMode = AutoCompleteMode.SuggestAppend; 
                prodCode.AutoCompleteCustomSource = source; 
                prodCode.AutoCompleteSource = AutoCompleteSource.CustomSource; 
            } 
        } 
        else { 
            prodCode.AutoCompleteCustomSource = null; 
        } 
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
256
3
Gpt3D_Clone256_3.cs 1 20
Gpt3D_Clone256_3.cs 21 43
----------------------------------------

private void dataGridDetail_EditingControlShowing (object sender, DataGridViewEditingControlShowingEventArgs e) {
    if (dataGridDetail.EditingControl.GetType () == typeof (DataGridViewTextBoxEditingControl)) {
        TextBox prodCode = e.Control as TextBox;
        if (dataGridDetail.CurrentCell.ColumnIndex == 2) {
            var source = new AutoCompleteStringCollection ();
            String [] stringArray = Array.ConvertAll < DataRow, String > (products.Select (), delegate (DataRow row) {
                return (String) row ["code"];
            });
            source.AddRange (stringArray);
            TextBox prodCode = e.Control as TextBox;
            if (prodCode != null) {
                prodCode.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
                prodCode.AutoCompleteCustomSource = source;
                prodCode.AutoCompleteSource = AutoCompleteSource.CustomSource;
            }
        } else {
            prodCode.AutoCompleteCustomSource = null;
        }
    }
}
----------------------------------------

  private void dataGridDetail_EditingControlShowing (object sender, DataGridViewEditingControlShowingEventArgs e) { 
    if(dataGridDetail.EditingControl.GetType () == typeof (DataGridViewTextBoxEditingControl)){ 
        TextBox prodCode = e.Control as TextBox; 
        if (dataGridDetail.CurrentCell.ColumnIndex == 2) { 
            var source = new AutoCompleteStringCollection(); 
            DataRow[] drs= products.Select();
            foreach (DataRow row in drs){ 
                source.Add((String)row["code"]); 
            } 
             TextBox prodCode = e.Control as TextBox; 
            if (prodCode != null) { 
                prodCode.AutoCompleteMode = AutoCompleteMode.SuggestAppend; 
                prodCode.AutoCompleteCustomSource = source; 
                prodCode.AutoCompleteSource = AutoCompleteSource.CustomSource; 
            } 
        } 
        else { 
            prodCode.AutoCompleteCustomSource = null; 
        } 
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
256
4
Gpt3D_Clone256_4.cs 1 20
Gpt3D_Clone256_4.cs 21 43
----------------------------------------

private void dataGridDetail_EditingControlShowing (object sender, DataGridViewEditingControlShowingEventArgs e) {
    if (dataGridDetail.EditingControl.GetType () == typeof (DataGridViewTextBoxEditingControl)) {
        TextBox prodCode = e.Control as TextBox;
        if (dataGridDetail.CurrentCell.ColumnIndex == 2) {
            var source = new AutoCompleteStringCollection ();
            String [] stringArray = Array.ConvertAll < DataRow, String > (products.Select (), delegate (DataRow row) {
                return (String) row ["code"];
            });
            source.AddRange (stringArray);
            TextBox prodCode = e.Control as TextBox;
            if (prodCode != null) {
                prodCode.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
                prodCode.AutoCompleteCustomSource = source;
                prodCode.AutoCompleteSource = AutoCompleteSource.CustomSource;
            }
        } else {
            prodCode.AutoCompleteCustomSource = null;
        }
    }
}
----------------------------------------

  private void dataGridDetail_EditingControlShowing (object sender, DataGridViewEditingControlShowingEventArgs e) { 
    if(dataGridDetail.EditingControl.GetType () == typeof (DataGridViewTextBoxEditingControl)){ 
        TextBox prodCode = e.Control as TextBox; 
        if (dataGridDetail.CurrentCell.ColumnIndex == 2) { 
            var source = new AutoCompleteStringCollection(); 
            DataView dataView = products.Select().DefaultView;
            foreach(DataRowView row in dataView){ 
                source.Add((String)row["code"]); 
            } 
             TextBox prodCode = e.Control as TextBox; 
            if (prodCode != null) { 
                prodCode.AutoCompleteMode = AutoCompleteMode.SuggestAppend; 
                prodCode.AutoCompleteCustomSource = source; 
                prodCode.AutoCompleteSource = AutoCompleteSource.CustomSource; 
            } 
        } 
        else { 
            prodCode.AutoCompleteCustomSource = null; 
        } 
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
256
5
Gpt3D_Clone256_5.cs 1 20
Gpt3D_Clone256_5.cs 21 43
----------------------------------------

private void dataGridDetail_EditingControlShowing (object sender, DataGridViewEditingControlShowingEventArgs e) {
    if (dataGridDetail.EditingControl.GetType () == typeof (DataGridViewTextBoxEditingControl)) {
        TextBox prodCode = e.Control as TextBox;
        if (dataGridDetail.CurrentCell.ColumnIndex == 2) {
            var source = new AutoCompleteStringCollection ();
            String [] stringArray = Array.ConvertAll < DataRow, String > (products.Select (), delegate (DataRow row) {
                return (String) row ["code"];
            });
            source.AddRange (stringArray);
            TextBox prodCode = e.Control as TextBox;
            if (prodCode != null) {
                prodCode.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
                prodCode.AutoCompleteCustomSource = source;
                prodCode.AutoCompleteSource = AutoCompleteSource.CustomSource;
            }
        } else {
            prodCode.AutoCompleteCustomSource = null;
        }
    }
}
----------------------------------------

  private void dataGridDetail_EditingControlShowing (object sender, DataGridViewEditingControlShowingEventArgs e) { 
    if(dataGridDetail.EditingControl.GetType () == typeof (DataGridViewTextBoxEditingControl)){ 
        TextBox prodCode = e.Control as TextBox; 
        if (dataGridDetail.CurrentCell.ColumnIndex == 2) { 
            var source = new AutoCompleteStringCollection(); 
            CustomEnumerable customEnumerable = products.Select();
            foreach(DataRow row in customEnumerable){ 
                source.Add((String)row["code"]); 
            } 
             TextBox prodCode = e.Control as TextBox; 
            if (prodCode != null) { 
                prodCode.AutoCompleteMode = AutoCompleteMode.SuggestAppend; 
                prodCode.AutoCompleteCustomSource = source; 
                prodCode.AutoCompleteSource = AutoCompleteSource.CustomSource; 
            } 
        } 
        else { 
            prodCode.AutoCompleteCustomSource = null; 
        } 
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
256
6
Gpt3D_Clone256_6.cs 1 20
Gpt3D_Clone256_6.cs 21 43
----------------------------------------

private void dataGridDetail_EditingControlShowing (object sender, DataGridViewEditingControlShowingEventArgs e) {
    if (dataGridDetail.EditingControl.GetType () == typeof (DataGridViewTextBoxEditingControl)) {
        TextBox prodCode = e.Control as TextBox;
        if (dataGridDetail.CurrentCell.ColumnIndex == 2) {
            var source = new AutoCompleteStringCollection ();
            String [] stringArray = Array.ConvertAll < DataRow, String > (products.Select (), delegate (DataRow row) {
                return (String) row ["code"];
            });
            source.AddRange (stringArray);
            TextBox prodCode = e.Control as TextBox;
            if (prodCode != null) {
                prodCode.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
                prodCode.AutoCompleteCustomSource = source;
                prodCode.AutoCompleteSource = AutoCompleteSource.CustomSource;
            }
        } else {
            prodCode.AutoCompleteCustomSource = null;
        }
    }
}
----------------------------------------

  private void dataGridDetail_EditingControlShowing (object sender, DataGridViewEditingControlShowingEventArgs e) { 
    if(dataGridDetail.EditingControl.GetType () == typeof (DataGridViewTextBoxEditingControl)){ 
        TextBox prodCode = e.Control as TextBox; 
        if (dataGridDetail.CurrentCell.ColumnIndex == 2) { 
            var source = new AutoCompleteStringCollection(); 
            DataTable dt= products.Select().CopyToDataTable();
            foreach (DataRow row in dt.Rows){ 
                source.Add((String)row["code"]); 
            } 
             TextBox prodCode = e.Control as TextBox; 
            if (prodCode != null) { 
                prodCode.AutoCompleteMode = AutoCompleteMode.SuggestAppend; 
                prodCode.AutoCompleteCustomSource = source; 
                prodCode.AutoCompleteSource = AutoCompleteSource.CustomSource; 
            } 
        } 
        else { 
            prodCode.AutoCompleteCustomSource = null; 
        } 
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
256
7
Gpt3D_Clone256_7.cs 1 20
Gpt3D_Clone256_7.cs 21 43
----------------------------------------

private void dataGridDetail_EditingControlShowing (object sender, DataGridViewEditingControlShowingEventArgs e) {
    if (dataGridDetail.EditingControl.GetType () == typeof (DataGridViewTextBoxEditingControl)) {
        TextBox prodCode = e.Control as TextBox;
        if (dataGridDetail.CurrentCell.ColumnIndex == 2) {
            var source = new AutoCompleteStringCollection ();
            String [] stringArray = Array.ConvertAll < DataRow, String > (products.Select (), delegate (DataRow row) {
                return (String) row ["code"];
            });
            source.AddRange (stringArray);
            TextBox prodCode = e.Control as TextBox;
            if (prodCode != null) {
                prodCode.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
                prodCode.AutoCompleteCustomSource = source;
                prodCode.AutoCompleteSource = AutoCompleteSource.CustomSource;
            }
        } else {
            prodCode.AutoCompleteCustomSource = null;
        }
    }
}
----------------------------------------

  private void dataGridDetail_EditingControlShowing (object sender, DataGridViewEditingControlShowingEventArgs e) { 
    if(dataGridDetail.EditingControl.GetType () == typeof (DataGridViewTextBoxEditingControl)){ 
        TextBox prodCode = e.Control as TextBox; 
        if (dataGridDetail.CurrentCell.ColumnIndex == 2) { 
            var source = new AutoCompleteStringCollection(); 
            Array dataRowArray = products.Select();
            foreach(DataRow row in dataRowArray){ 
                source.Add((String)row["code"]); 
            } 
             TextBox prodCode = e.Control as TextBox; 
            if (prodCode != null) { 
                prodCode.AutoCompleteMode = AutoCompleteMode.SuggestAppend; 
                prodCode.AutoCompleteCustomSource = source; 
                prodCode.AutoCompleteSource = AutoCompleteSource.CustomSource; 
            } 
        } 
        else { 
            prodCode.AutoCompleteCustomSource = null; 
        } 
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
256
8
Gpt3D_Clone256_8.cs 1 20
Gpt3D_Clone256_8.cs 21 43
----------------------------------------

private void dataGridDetail_EditingControlShowing (object sender, DataGridViewEditingControlShowingEventArgs e) {
    if (dataGridDetail.EditingControl.GetType () == typeof (DataGridViewTextBoxEditingControl)) {
        TextBox prodCode = e.Control as TextBox;
        if (dataGridDetail.CurrentCell.ColumnIndex == 2) {
            var source = new AutoCompleteStringCollection ();
            String [] stringArray = Array.ConvertAll < DataRow, String > (products.Select (), delegate (DataRow row) {
                return (String) row ["code"];
            });
            source.AddRange (stringArray);
            TextBox prodCode = e.Control as TextBox;
            if (prodCode != null) {
                prodCode.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
                prodCode.AutoCompleteCustomSource = source;
                prodCode.AutoCompleteSource = AutoCompleteSource.CustomSource;
            }
        } else {
            prodCode.AutoCompleteCustomSource = null;
        }
    }
}
----------------------------------------

  private void dataGridDetail_EditingControlShowing (object sender, DataGridViewEditingControlShowingEventArgs e) { 
    if(dataGridDetail.EditingControl.GetType () == typeof (DataGridViewTextBoxEditingControl)){ 
        TextBox prodCode = e.Control as TextBox; 
        if (dataGridDetail.CurrentCell.ColumnIndex == 2) { 
            var source = new AutoCompleteStringCollection(); 
            List<DataRow> dataRowList = products.Select().ToList();
            foreach(DataRow row in dataRowList){ 
                source.Add((String)row["code"]); 
            } 
             TextBox prodCode = e.Control as TextBox; 
            if (prodCode != null) { 
                prodCode.AutoCompleteMode = AutoCompleteMode.SuggestAppend; 
                prodCode.AutoCompleteCustomSource = source; 
                prodCode.AutoCompleteSource = AutoCompleteSource.CustomSource; 
            } 
        } 
        else { 
            prodCode.AutoCompleteCustomSource = null; 
        } 
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
256
9
Gpt3D_Clone256_9.cs 1 20
Gpt3D_Clone256_9.cs 21 42
----------------------------------------

private void dataGridDetail_EditingControlShowing (object sender, DataGridViewEditingControlShowingEventArgs e) {
    if (dataGridDetail.EditingControl.GetType () == typeof (DataGridViewTextBoxEditingControl)) {
        TextBox prodCode = e.Control as TextBox;
        if (dataGridDetail.CurrentCell.ColumnIndex == 2) {
            var source = new AutoCompleteStringCollection ();
            String [] stringArray = Array.ConvertAll < DataRow, String > (products.Select (), delegate (DataRow row) {
                return (String) row ["code"];
            });
            source.AddRange (stringArray);
            TextBox prodCode = e.Control as TextBox;
            if (prodCode != null) {
                prodCode.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
                prodCode.AutoCompleteCustomSource = source;
                prodCode.AutoCompleteSource = AutoCompleteSource.CustomSource;
            }
        } else {
            prodCode.AutoCompleteCustomSource = null;
        }
    }
}
----------------------------------------

  private void dataGridDetail_EditingControlShowing (object sender, DataGridViewEditingControlShowingEventArgs e) { 
    if(dataGridDetail.EditingControl.GetType () == typeof (DataGridViewTextBoxEditingControl)){ 
        TextBox prodCode = e.Control as TextBox; 
        if (dataGridDetail.CurrentCell.ColumnIndex == 2) { 
            var source = new AutoCompleteStringCollection(); 
            foreach(DataRow row in products.Select()){ 
                source.Add((String)row["code"]); 
            } 
             TextBox prodCode = e.Control as TextBox; 
            if (prodCode != null) { 
                prodCode.AutoCompleteMode = AutoCompleteMode.SuggestAppend; 
                prodCode.AutoCompleteCustomSource = source; 
                prodCode.AutoCompleteSource = AutoCompleteSource.CustomSource; 
            } 
        } 
        else { 
            prodCode.AutoCompleteCustomSource = null; 
        } 
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
258
1
Gpt3D_Clone258_1.cs 1 8
Gpt3D_Clone258_1.cs 9 21
----------------------------------------

internal static MyEnum [] GetFlags (this MyEnum modKey) {
    List < MyEnum > flags = new List < MyEnum > ();
    foreach (var flag in Enum.GetValues (typeof (MyEnum))) {
        if (modKey & flag == flag)
            flags.Add ((MyEnum) flag);
    }
    return flags.ToArray ();
}
----------------------------------------

 internal static MyEnum[] GetFlags(this MyEnum modKey)
{
    List<MyEnum> flags = new List<MyEnum>();
    int flagValue = (int)modKey;
    foreach (int i in Enum.GetValues(typeof(MyEnum)))
    {
        if ((flagValue & i) == i)
            flags.Add((MyEnum)i);
    }
    return flags.ToArray();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
258
2
Gpt3D_Clone258_2.cs 1 8
Gpt3D_Clone258_2.cs 9 22
----------------------------------------

internal static MyEnum [] GetFlags (this MyEnum modKey) {
    List < MyEnum > flags = new List < MyEnum > ();
    foreach (var flag in Enum.GetValues (typeof (MyEnum))) {
        if (modKey & flag == flag)
            flags.Add ((MyEnum) flag);
    }
    return flags.ToArray ();
}
----------------------------------------

 internal static MyEnum[] GetFlags(this MyEnum modKey)
{
    List<MyEnum> flags = new List<MyEnum>();
    int num = (int) Enum.GetValues(typeof(MyEnum)).Cast<MyEnum>()
            .Max(x => (int)x);
    for (int i = 1; i <= num; i <<= 1)
    {
        if ((modKey & (MyEnum) i) == (MyEnum) i)
            flags.Add((MyEnum) i);
    }
    return flags.ToArray();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
258
3
Gpt3D_Clone258_3.cs 1 8
Gpt3D_Clone258_3.cs 9 20
----------------------------------------

internal static MyEnum [] GetFlags (this MyEnum modKey) {
    List < MyEnum > flags = new List < MyEnum > ();
    foreach (var flag in Enum.GetValues (typeof (MyEnum))) {
        if (modKey & flag == flag)
            flags.Add ((MyEnum) flag);
    }
    return flags.ToArray ();
}
----------------------------------------

 internal static MyEnum[] GetFlags(this MyEnum modKey)
{
    List<MyEnum> flags = new List<MyEnum>();
    foreach (MyEnum enumValue in Enum.GetValues(typeof(MyEnum)))
    {
        if (modKey.HasFlag(enumValue))
            flags.Add(enumValue);
    }
    return flags.ToArray();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
258
4
Gpt3D_Clone258_4.cs 1 8
Gpt3D_Clone258_4.cs 9 20
----------------------------------------

internal static MyEnum [] GetFlags (this MyEnum modKey) {
    List < MyEnum > flags = new List < MyEnum > ();
    foreach (var flag in Enum.GetValues (typeof (MyEnum))) {
        if (modKey & flag == flag)
            flags.Add ((MyEnum) flag);
    }
    return flags.ToArray ();
}
----------------------------------------

 internal static MyEnum[] GetFlags(this MyEnum modKey)
{
    List<MyEnum> flags = new List<MyEnum>();
    foreach (MyEnum enumValue in Enum.GetValues(typeof(MyEnum)))
    {
        if (BitwiseAnd(modKey, enumValue) == enumValue)
            flags.Add(enumValue);
    }
    return flags.ToArray();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
258
5
Gpt3D_Clone258_5.cs 1 8
Gpt3D_Clone258_5.cs 9 20
----------------------------------------

internal static MyEnum [] GetFlags (this MyEnum modKey) {
    List < MyEnum > flags = new List < MyEnum > ();
    foreach (var flag in Enum.GetValues (typeof (MyEnum))) {
        if (modKey & flag == flag)
            flags.Add ((MyEnum) flag);
    }
    return flags.ToArray ();
}
----------------------------------------

 internal static MyEnum[] GetFlags(this MyEnum modKey) 
{
    List<MyEnum> flags = new List<MyEnum>();
    foreach (object flag in Enum.GetValues(typeof(MyEnum)))
	{
		if (modKey.HasFlag((MyEnum)flag))
			flags.Add((MyEnum)flag); 
	}
	return flags.ToArray();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
259
2
Gpt3D_Clone259_2.cs 1 20
Gpt3D_Clone259_2.cs 21 40
----------------------------------------

public string IntToString (int a) {
    if (a == 0)
        return "0";
    if (a == int.MinValue)
        return "-2147483648";
    var isNegative = false;
    if (a < 0) {
        a = - a;
        isNegative = true;
    }
    var stack = new Stack < char > ();
    while (a != 0) {
        var c = a % 10 + '0';
        stack.Push ((char) c);
        a /= 10;
    }
    if (isNegative)
        stack.Push ('-');
    return new string (stack.ToArray ());
}
----------------------------------------

 public string IntToString (int a) {
            if (a == 0)
                return "0";
            if (a == int.MinValue)
                return "-2147483648";
            var isNegative = (a < 0);
            a = Math.Abs (a);
            var array = new List < char > ();
            while (a != 0) {
                var rem = a % 10;
                array.Add ((char)(rem + '0'));
                a /= 10;
            }
            if (isNegative)
                array.Add ('-');
            array.Reverse ();
            return new string (array.ToArray ());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
263
0
Gpt3D_Clone263_0.cs 1 9
Gpt3D_Clone263_0.cs 10 22
----------------------------------------

public PointF ? Intersect (LineSegment other) {
    var p = line.Intersect (other.line);
    if (p == null)
        return null;
    if (bindingRectangle.Contains (p.Value) && other.bindingRectangle.Contains (p.Value)) {
        return p;
    }
    return null;
}
----------------------------------------

  public PointF? Intersect (LineSegment other)
{
    var p = line.Intersect(other.line);
    if (p == null)
        return null;
    if (!(bindingRectangle.Contains(p.Value) || other.bindingRectangle.Contains(p.Value)))
        return null;
    if (bindingRectangle.IntersectsWith(other.bindingRectangle))
        return p;
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
263
1
Gpt3D_Clone263_1.cs 1 9
Gpt3D_Clone263_1.cs 10 28
----------------------------------------

public PointF ? Intersect (LineSegment other) {
    var p = line.Intersect (other.line);
    if (p == null)
        return null;
    if (bindingRectangle.Contains (p.Value) && other.bindingRectangle.Contains (p.Value)) {
        return p;
    }
    return null;
}
----------------------------------------

  public PointF? Intersect (LineSegment other)
{
    var p = line.Intersect(other.line);
    if (p == null)
        return null;
    if (bindingRectangle.Contains(p.Value))
    {
        if (other.bindingRectangle.Contains(p.Value))
        {
            if (bindingRectangle.IntersectsWith(other.bindingRectangle))
            {
                return p;
            }
        }
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
263
2
Gpt3D_Clone263_2.cs 1 9
Gpt3D_Clone263_2.cs 10 20
----------------------------------------

public PointF ? Intersect (LineSegment other) {
    var p = line.Intersect (other.line);
    if (p == null)
        return null;
    if (bindingRectangle.Contains (p.Value) && other.bindingRectangle.Contains (p.Value)) {
        return p;
    }
    return null;
}
----------------------------------------

  public PointF? Intersect (LineSegment other)
{
    var p = line.Intersect(other.line);
    if (p == null || !(bindingRectangle.Contains(p.Value) && other.bindingRectangle.Contains(p.Value)))
        return null;
    if (bindingRectangle.IntersectsWith(other.bindingRectangle))
        return p;
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
263
3
Gpt3D_Clone263_3.cs 1 9
Gpt3D_Clone263_3.cs 10 20
----------------------------------------

public PointF ? Intersect (LineSegment other) {
    var p = line.Intersect (other.line);
    if (p == null)
        return null;
    if (bindingRectangle.Contains (p.Value) && other.bindingRectangle.Contains (p.Value)) {
        return p;
    }
    return null;
}
----------------------------------------

  public PointF? Intersect (LineSegment other)
{
    var p = line.Intersect(other.line);
    if (p == null || !bindingRectangle.Contains(p.Value) || !other.bindingRectangle.Contains(p.Value))
        return null;
    if (bindingRectangle.IntersectsWith(other.bindingRectangle))
        return p;
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
264
0
Gpt3D_Clone264_0.cs 1 9
Gpt3D_Clone264_0.cs 10 23
----------------------------------------

public PointF ? Intersect (LineSegment other) {
    var p = line.Intersect (other.line);
    if (p == null)
        return null;
    if (bindingRectangle.Contains (p.Value) && other.bindingRectangle.Contains (p.Value)) {
        return p;
    }
    return null;
}
----------------------------------------

 public PointF ? Intersect (LineSegment other) {
    var p = line.Intersect (other.line);
    if (p == null)
        return null;
    PointF pointF = p.Value;
    bool intersects = RectangularCheckOverlap(bindingRectangle, pointF)
        && RectangularCheckOverlap (other.bindingRectangle, pointF);
    if (intersects) {
        return p;
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
264
1
Gpt3D_Clone264_1.cs 1 9
Gpt3D_Clone264_1.cs 10 22
----------------------------------------

public PointF ? Intersect (LineSegment other) {
    var p = line.Intersect (other.line);
    if (p == null)
        return null;
    if (bindingRectangle.Contains (p.Value) && other.bindingRectangle.Contains (p.Value)) {
        return p;
    }
    return null;
}
----------------------------------------

 public PointF ? Intersect (LineSegment other) {
    var p = line.Intersect (other.line);
    if (p == null)
        return null;
    bool pointInRect = IsPointInRectangle (bindingRectangle, p.Value) 
        && IsPointInRectangle (other.bindingRectangle, p.Value);
    if (pointInRect) {
        return p;
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
264
2
Gpt3D_Clone264_2.cs 1 9
Gpt3D_Clone264_2.cs 10 22
----------------------------------------

public PointF ? Intersect (LineSegment other) {
    var p = line.Intersect (other.line);
    if (p == null)
        return null;
    if (bindingRectangle.Contains (p.Value) && other.bindingRectangle.Contains (p.Value)) {
        return p;
    }
    return null;
}
----------------------------------------

 public PointF ? Intersect (LineSegment other) {
    var p = line.Intersect (other.line);
    if (p == null)
        return null;
    bool intersects = RectangleContainsPoint (bindingRectangle, p.Value) 
        && RectangleContainsPoint (other.bindingRectangle, p.Value);
    if (intersects) {
        return p;
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
265
5
Gpt3D_Clone265_5.cs 1 12
Gpt3D_Clone265_5.cs 13 30
----------------------------------------

public PointF ? Intersect (LineEquation other) {
    if (isVertical && other.isVertical)
        return null;
    if (a == other.a)
        return null;
    if (isVertical)
        return other.Intersect (xConstForVertical);
    if (other.isVertical)
        return Intersect (other.xConstForVertical);
    var x = (b - other.b) / (other.a - a);
    return Intersect (x);
}
----------------------------------------

  public PointF? Intersect (LineEquation other) {
    if (isVertical && other.isVertical)
        return null;
    if (a == other.a)
        return null;
    
    double x;
    if (isVertical)
        x = xConstForVertical;
    else if (other.isVertical)
        x = other.xConstForVertical;
    else
        x = (b - other.b) / (other.a - a);
    
    return Intersect(x);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
265
6
Gpt3D_Clone265_6.cs 1 12
Gpt3D_Clone265_6.cs 13 29
----------------------------------------

public PointF ? Intersect (LineEquation other) {
    if (isVertical && other.isVertical)
        return null;
    if (a == other.a)
        return null;
    if (isVertical)
        return other.Intersect (xConstForVertical);
    if (other.isVertical)
        return Intersect (other.xConstForVertical);
    var x = (b - other.b) / (other.a - a);
    return Intersect (x);
}
----------------------------------------

   public PointF? Intersect (LineEquation other) {
    if (isVertical && other.isVertical)
        return null;
    else if (a == other.a)
        return null;
    else if (isVertical) {
        return other.Intersect(xConstForVertical);
    }
    else if (other.isVertical) {
        return Intersect(other.xConstForVertical);
    }
    
    float x = (b - other.b) / (other.a - a);
    return Intersect(x);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
265
9
Gpt3D_Clone265_9.cs 1 12
Gpt3D_Clone265_9.cs 13 27
----------------------------------------

public PointF ? Intersect (LineEquation other) {
    if (isVertical && other.isVertical)
        return null;
    if (a == other.a)
        return null;
    if (isVertical)
        return other.Intersect (xConstForVertical);
    if (other.isVertical)
        return Intersect (other.xConstForVertical);
    var x = (b - other.b) / (other.a - a);
    return Intersect (x);
}
----------------------------------------

   public PointF? Intersect (LineEquation other) {
    if (isVertical && other.isVertical)
        return null;
    else if (a == other.a)
        return null;
    else if (isVertical)
        return other.Intersect(xConstForVertical);
    else if (other.isVertical)
        return Intersect(other.xConstForVertical);
    
    double x = (b - other.b) / (other.a - a);
    return Intersect(x);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
266
1
Gpt3D_Clone266_1.cs 1 15
Gpt3D_Clone266_1.cs 16 33
----------------------------------------

public static string GetUa (HttpRequest hr) {
    try {
        string originalBrowser = hr.ServerVariables ["X-OperaMini-Phone-UA"];
        string anotherOriginalBrowser = hr.ServerVariables ["X-Device-User-Agent"];
        if (! String.IsNullOrEmpty (originalBrowser))
            return "OPERAMINI " + originalBrowser;
        else if (! String.IsNullOrEmpty (anotherOriginalBrowser))
            return "NOVARRA " + anotherOriginalBrowser;
        else
            return hr.UserAgent.ToString ();
    }
    catch {
        return "No UA Found";
    }
}
----------------------------------------

 public static string GetUa (HttpRequest hr) {
    string originalBrowser = hr.ServerVariables["X-OperaMini-Phone-UA"];
    string anotherOriginalBrowser = hr.ServerVariables["X-Device-User-Agent"];
    
    if (originalBrowser != null)
        return "OPERAMINI " + originalBrowser;
    else if (anotherOriginalBrowser != null)
        return "NOVARRA " + anotherOriginalBrowser;
    else
        try {
            return hr.UserAgent.ToString() ?? "No UA Found";
        }
        catch {
            return "No UA Found";
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
266
5
Gpt3D_Clone266_5.cs 1 15
Gpt3D_Clone266_5.cs 16 30
----------------------------------------

public static string GetUa (HttpRequest hr) {
    try {
        string originalBrowser = hr.ServerVariables ["X-OperaMini-Phone-UA"];
        string anotherOriginalBrowser = hr.ServerVariables ["X-Device-User-Agent"];
        if (! String.IsNullOrEmpty (originalBrowser))
            return "OPERAMINI " + originalBrowser;
        else if (! String.IsNullOrEmpty (anotherOriginalBrowser))
            return "NOVARRA " + anotherOriginalBrowser;
        else
            return hr.UserAgent.ToString ();
    }
    catch {
        return "No UA Found";
    }
}
----------------------------------------

 public static string GetUa (HttpRequest hr) {
    string originalBrowser = hr.ServerVariables["X-OperaMini-Phone-UA"];
    string anotherOriginalBrowser = hr.ServerVariables["X-Device-User-Agent"];
    string currentBrowser = hr.UserAgent.ToString();
    if (!String.IsNullOrEmpty(originalBrowser))
        return "OPERAMINI " + originalBrowser;
    else if (!String.IsNullOrEmpty(anotherOriginalBrowser))
        return "NOVARRA " + anotherOriginalBrowser;
    else if (!String.IsNullOrEmpty(currentBrowser))
        return currentBrowser;
    else
        return "No UA Found";
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
266
7
Gpt3D_Clone266_7.cs 1 15
Gpt3D_Clone266_7.cs 16 33
----------------------------------------

public static string GetUa (HttpRequest hr) {
    try {
        string originalBrowser = hr.ServerVariables ["X-OperaMini-Phone-UA"];
        string anotherOriginalBrowser = hr.ServerVariables ["X-Device-User-Agent"];
        if (! String.IsNullOrEmpty (originalBrowser))
            return "OPERAMINI " + originalBrowser;
        else if (! String.IsNullOrEmpty (anotherOriginalBrowser))
            return "NOVARRA " + anotherOriginalBrowser;
        else
            return hr.UserAgent.ToString ();
    }
    catch {
        return "No UA Found";
    }
}
----------------------------------------

 public static string GetUa (HttpRequest hr) {
    string originalBrowser = hr.ServerVariables["X-OperaMini-Phone-UA"];
    string anotherOriginalBrowser = hr.ServerVariables["X-Device-User-Agent"];
    
    if (originalBrowser != null && originalBrowser != "")
        return "OPERAMINI " + originalBrowser;
    else if (anotherOriginalBrowser != null && anotherOriginalBrowser != "")
        return "NOVARRA " + anotherOriginalBrowser;
    else
        try {
            return hr.UserAgent.ToString() ?? "No UA Found";
        }
        catch {
            return "No UA Found";
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
267
1
Gpt3D_Clone267_1.cs 1 13
Gpt3D_Clone267_1.cs 14 29
----------------------------------------

public static string GetServByPort (short port, ProtocolType proto) {
    StringBuilder ans = new StringBuilder ();
    switch (proto) {
        case ProtocolType.Tcp :
            ans.Append ((TcpServices) port);
            break;
        case ProtocolType.Udp :
            ans.Append ((UdpServices) port);
            break;
    }
    ans.Append ("(").Append (port).Append (")");
    return ans.ToString ();
}
----------------------------------------

	public static string GetServByPort (short port, ProtocolType proto) {
    string ans = "";
    switch (proto)
    {
        case ProtocolType.Tcp:
            ans += TcpServices.GetName(typeof(TcpServices), port);
            break;
        case ProtocolType.Udp :
            ans += UdpServices.GetName(typeof(UdpServices), port);
            break;
    }
    ans += "(" + port + ")";
    return ans;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
267
2
Gpt3D_Clone267_2.cs 1 13
Gpt3D_Clone267_2.cs 14 29
----------------------------------------

public static string GetServByPort (short port, ProtocolType proto) {
    StringBuilder ans = new StringBuilder ();
    switch (proto) {
        case ProtocolType.Tcp :
            ans.Append ((TcpServices) port);
            break;
        case ProtocolType.Udp :
            ans.Append ((UdpServices) port);
            break;
    }
    ans.Append ("(").Append (port).Append (")");
    return ans.ToString ();
}
----------------------------------------

	public static string GetServByPort(short port, ProtocolType proto) 
{
    string result = "";
    switch (proto)
    { 
    case ProtocolType.Tcp:
        result = Encoding.ASCII.GetString(BitConverter.GetBytes(port)) + "(" + port + ")";
        break;
    case ProtocolType.Udp:
        result = Enum.GetName(typeof(UdpServices), port) + "(" + port + ")";
        break;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
267
3
Gpt3D_Clone267_3.cs 1 13
Gpt3D_Clone267_3.cs 14 29
----------------------------------------

public static string GetServByPort (short port, ProtocolType proto) {
    StringBuilder ans = new StringBuilder ();
    switch (proto) {
        case ProtocolType.Tcp :
            ans.Append ((TcpServices) port);
            break;
        case ProtocolType.Udp :
            ans.Append ((UdpServices) port);
            break;
    }
    ans.Append ("(").Append (port).Append (")");
    return ans.ToString ();
}
----------------------------------------

	public static string GetServByPort(short port, ProtocolType proto) 
{
    string result = "";
    switch (proto)
    { 
    case ProtocolType.Tcp:
        result = Enum.GetName(typeof(TcpServices), port) + "(" + port + ")";
        break;
    case ProtocolType.Udp:
        result = Enum.GetName(typeof(UdpServices), port) + "(" + port + ")";
        break;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
267
4
Gpt3D_Clone267_4.cs 1 13
Gpt3D_Clone267_4.cs 14 27
----------------------------------------

public static string GetServByPort (short port, ProtocolType proto) {
    StringBuilder ans = new StringBuilder ();
    switch (proto) {
        case ProtocolType.Tcp :
            ans.Append ((TcpServices) port);
            break;
        case ProtocolType.Udp :
            ans.Append ((UdpServices) port);
            break;
    }
    ans.Append ("(").Append (port).Append (")");
    return ans.ToString ();
}
----------------------------------------

	public static string GetServByPort (short port, ProtocolType proto) {
    string ans = "";
    switch (proto) {
        case ProtocolType.Tcp :
            ans += ((TcpServices)port).ToString() + "(" + port + ")";
            break;
        case ProtocolType.Udp :
            ans += ((UdpServices)port).ToString() + "(" + port + ")";
            break;
    }
    return ans;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
267
5
Gpt3D_Clone267_5.cs 1 13
Gpt3D_Clone267_5.cs 14 29
----------------------------------------

public static string GetServByPort (short port, ProtocolType proto) {
    StringBuilder ans = new StringBuilder ();
    switch (proto) {
        case ProtocolType.Tcp :
            ans.Append ((TcpServices) port);
            break;
        case ProtocolType.Udp :
            ans.Append ((UdpServices) port);
            break;
    }
    ans.Append ("(").Append (port).Append (")");
    return ans.ToString ();
}
----------------------------------------

	public static string GetServByPort (short port, ProtocolType proto) 
{
    string result = "";
    switch (proto)
    { 
    case ProtocolType.Tcp:
        result = Convert.ToString((TcpServices)port) + "(" + port + ")";
        break;
    case ProtocolType.Udp:
        result = Convert.ToString((UdpServices)port) + "(" + port + ")";
        break;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
267
6
Gpt3D_Clone267_6.cs 1 13
Gpt3D_Clone267_6.cs 14 29
----------------------------------------

public static string GetServByPort (short port, ProtocolType proto) {
    StringBuilder ans = new StringBuilder ();
    switch (proto) {
        case ProtocolType.Tcp :
            ans.Append ((TcpServices) port);
            break;
        case ProtocolType.Udp :
            ans.Append ((UdpServices) port);
            break;
    }
    ans.Append ("(").Append (port).Append (")");
    return ans.ToString ();
}
----------------------------------------

	public static string GetServByPort (short port, ProtocolType proto) 
{
    string result = "";
    switch (proto)
    { 
    case ProtocolType.Tcp:
        result = TcpServices.GetType() + "(" + port + ")";
        break;
    case ProtocolType.Udp:
        result = UdpServices.GetType() + "(" + port + ")";
        break;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
267
7
Gpt3D_Clone267_7.cs 1 13
Gpt3D_Clone267_7.cs 14 28
----------------------------------------

public static string GetServByPort (short port, ProtocolType proto) {
    StringBuilder ans = new StringBuilder ();
    switch (proto) {
        case ProtocolType.Tcp :
            ans.Append ((TcpServices) port);
            break;
        case ProtocolType.Udp :
            ans.Append ((UdpServices) port);
            break;
    }
    ans.Append ("(").Append (port).Append (")");
    return ans.ToString ();
}
----------------------------------------

 public static string GetServByPort (short port, ProtocolType proto) {
    String result = "";
    switch (proto)
    {
        case ProtocolType.Tcp :
            result = ((TcpServices)port).ToString() + "(" + port.ToString() + ")";
            break;
        case ProtocolType.Udp:
            result = ((UdpServices)port).ToString() + "(" + port.ToString() + ")";
            break;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
268
0
Gpt3D_Clone268_0.cs 1 12
Gpt3D_Clone268_0.cs 13 29
----------------------------------------

static void Main () {
    HiResTimer timer = new HiResTimer ();
    Int64 counterAtStart = timer.Value;
    for (int count = 0; count < 10000; count ++) {
        count ++;
        count --;
    }
    Int64 counterAtEnd = timer.Value;
    Int64 timeElapsedInTicks = counterAtEnd - counterAtStart;
    Int64 timeElapseInTenthsOfMilliseconds = (timeElapsedInTicks * 10000) / timer.Frequency;
    MessageBox.Show ("Time Spent in operation (tenths of ms) " + timeElapseInTenthsOfMilliseconds + "\nCounter Value At Start: " + counterAtStart + "\nCounter Value At End : " + counterAtEnd + "\nCounter Frequency : " + timer.Frequency);
}
----------------------------------------

  static void Main() 
{ 
    DateTime start = DateTime.Now; 
    Int64 counterAtStart = start.Ticks; 
    for (int count = 0; count < 10000; count++) 
    { 
        count++; 
        count--; 
    } 
    DateTime end = DateTime.Now; 
    Int64 counterAtEnd = end.Ticks; 
    Int64 timeElapsedInTicks = counterAtEnd - counterAtStart; 
    Int64 timeElapsedInTenthsOfMilliseconds = (timeElapsedInTicks*10000)/DateTime.TicksPerSecond; 
    MessageBox.Show("Time Spent in operation (tenths of ms) : " + timeElapsedInTenthsOfMilliseconds); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
268
1
Gpt3D_Clone268_1.cs 1 12
Gpt3D_Clone268_1.cs 13 29
----------------------------------------

static void Main () {
    HiResTimer timer = new HiResTimer ();
    Int64 counterAtStart = timer.Value;
    for (int count = 0; count < 10000; count ++) {
        count ++;
        count --;
    }
    Int64 counterAtEnd = timer.Value;
    Int64 timeElapsedInTicks = counterAtEnd - counterAtStart;
    Int64 timeElapseInTenthsOfMilliseconds = (timeElapsedInTicks * 10000) / timer.Frequency;
    MessageBox.Show ("Time Spent in operation (tenths of ms) " + timeElapseInTenthsOfMilliseconds + "\nCounter Value At Start: " + counterAtStart + "\nCounter Value At End : " + counterAtEnd + "\nCounter Frequency : " + timer.Frequency);
}
----------------------------------------

  static void Main() 
{ 
    DateTime time = DateTime.Now; 
    Int64 counterAtStart = time.Ticks; 
    for (int count = 0; count < 10000; count++) 
    { 
        count++; 
        count--; 
    } 
    DateTime endTime = DateTime.Now; 
    Int64 counterAtEnd = endTime.Ticks; 
    Int64 timeElapsedInTicks = counterAtEnd - counterAtStart; 
    Int64 timeElapsedInTenthsOfMilliseconds = (timeElapsedInTicks*10000)/DateTime.TicksPerSecond; 
    MessageBox.Show("Time Spent in operation (tenths of ms) : " + timeElapsedInTenthsOfMilliseconds); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
268
2
Gpt3D_Clone268_2.cs 1 12
Gpt3D_Clone268_2.cs 13 28
----------------------------------------

static void Main () {
    HiResTimer timer = new HiResTimer ();
    Int64 counterAtStart = timer.Value;
    for (int count = 0; count < 10000; count ++) {
        count ++;
        count --;
    }
    Int64 counterAtEnd = timer.Value;
    Int64 timeElapsedInTicks = counterAtEnd - counterAtStart;
    Int64 timeElapseInTenthsOfMilliseconds = (timeElapsedInTicks * 10000) / timer.Frequency;
    MessageBox.Show ("Time Spent in operation (tenths of ms) " + timeElapseInTenthsOfMilliseconds + "\nCounter Value At Start: " + counterAtStart + "\nCounter Value At End : " + counterAtEnd + "\nCounter Frequency : " + timer.Frequency);
}
----------------------------------------

  static void Main() 
{ 
    System.Diagnostics.Stopwatch watch = new System.Diagnostics.Stopwatch(); 
    Int64 counterAtStart = watch.GetTimestamp(); 
    for (int count = 0; count < 10000; count++) 
    { 
        count++; 
        count--; 
    } 
    Int64 counterAtEnd = watch.GetTimestamp(); 
    Int64 timeElapsedInTicks = counterAtEnd - counterAtStart; 
    Int64 timeElapsedInTenthsOfMilliseconds = (timeElapsedInTicks*1000)/Stopwatch.Frequency; 
    MessageBox.Show("Time Spent in operation (tenths of ms) : " + (timeElapsedInMilliseconds/10)); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
268
3
Gpt3D_Clone268_3.cs 1 12
Gpt3D_Clone268_3.cs 13 28
----------------------------------------

static void Main () {
    HiResTimer timer = new HiResTimer ();
    Int64 counterAtStart = timer.Value;
    for (int count = 0; count < 10000; count ++) {
        count ++;
        count --;
    }
    Int64 counterAtEnd = timer.Value;
    Int64 timeElapsedInTicks = counterAtEnd - counterAtStart;
    Int64 timeElapseInTenthsOfMilliseconds = (timeElapsedInTicks * 10000) / timer.Frequency;
    MessageBox.Show ("Time Spent in operation (tenths of ms) " + timeElapseInTenthsOfMilliseconds + "\nCounter Value At Start: " + counterAtStart + "\nCounter Value At End : " + counterAtEnd + "\nCounter Frequency : " + timer.Frequency);
}
----------------------------------------

  static void Main() 
{ 
    Stopwatch watch = new Stopwatch(); 
    Int64 counterAtStart = watch.GetTimestamp(); 
    for (int count = 0; count < 10000; count++) 
    { 
        count++; 
        count--; 
    } 
    Int64 counterStartEnd = watch.GetTimestamp(); 
    Int64 timeElapsedInTicks = counterStartEnd - counterAtStart; 
    Int64 timeElapsedInTenthsOfMilliseconds = (timeElapsedInTicks*1000)/Stopwatch.Frequency; 
    MessageBox.Show("Time Spent in operation (tenths of ms) : " + (timeElapsedInMilliseconds/10)); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
269
0
Gpt3D_Clone269_0.cs 1 13
Gpt3D_Clone269_0.cs 14 32
----------------------------------------

protected override void WndProc (ref Message m) {
    switch (m.Msg) {
        case 0xf :
            {
                g = Graphics.FromHwnd (this.Handle);
                Rectangle r = GetWndRect (this.Handle);
                g.DrawRectangle (p, r);
                Trace.WriteLine ("WM_PAINT: " + r.ToString ());
            } break;
    }
    Trace.WriteLine ("handled");
    base.WndProc (ref m);
}
----------------------------------------

 protected override void WndProc (ref Message m) {
    switch (m.Msg) {
        case 0xf :
            {
                Pen p1 = new Pen(Color.Crimson, 4);
                Rectangle r = GetWndRect(this.Handle);
                using (var g = Graphics.FromHwnd(this.Handle))
                {
                    g.DrawEllipse(p1, r);
                    Trace.WriteLine("WM_PAINT: " + r.ToString());
                }
                break;
            }
    }
    Trace.WriteLine("handled");
    base.WndProc(ref m);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
269
1
Gpt3D_Clone269_1.cs 1 13
Gpt3D_Clone269_1.cs 14 32
----------------------------------------

protected override void WndProc (ref Message m) {
    switch (m.Msg) {
        case 0xf :
            {
                g = Graphics.FromHwnd (this.Handle);
                Rectangle r = GetWndRect (this.Handle);
                g.DrawRectangle (p, r);
                Trace.WriteLine ("WM_PAINT: " + r.ToString ());
            } break;
    }
    Trace.WriteLine ("handled");
    base.WndProc (ref m);
}
----------------------------------------

 protected override void WndProc (ref Message m) {
    switch (m.Msg) {
        case 0xf :
            {
                Pen p1 = new Pen(Color.Chocolate, 1);
                Rectangle r = GetWndRect(this.Handle);
                using (var g = Graphics.FromHwnd(this.Handle))
                {
                    g.DrawEllipse(p1, r);
                    Trace.WriteLine("WM_PAINT: " + r.ToString());
                }
                break;
            }
    }
    Trace.WriteLine("handled");
    base.WndProc(ref m);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
269
2
Gpt3D_Clone269_2.cs 1 13
Gpt3D_Clone269_2.cs 14 32
----------------------------------------

protected override void WndProc (ref Message m) {
    switch (m.Msg) {
        case 0xf :
            {
                g = Graphics.FromHwnd (this.Handle);
                Rectangle r = GetWndRect (this.Handle);
                g.DrawRectangle (p, r);
                Trace.WriteLine ("WM_PAINT: " + r.ToString ());
            } break;
    }
    Trace.WriteLine ("handled");
    base.WndProc (ref m);
}
----------------------------------------

  protected override void WndProc (ref Message m) {
    switch (m.Msg){
        case 0xf :
            {
                Pen p1 = new Pen(Color.CadetBlue, 2);
                Rectangle r = GetWndRect(this.Handle);
                using (var g = Graphics.FromHwnd(this.Handle))
                {
                    g.DrawEllipse(p1, r);
                    Trace.WriteLine("WM_PAINT: " + r.ToString());
                }
                break;
            }
    }
    Trace.WriteLine("handled");
    base.WndProc(ref m);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
269
3
Gpt3D_Clone269_3.cs 1 13
Gpt3D_Clone269_3.cs 14 30
----------------------------------------

protected override void WndProc (ref Message m) {
    switch (m.Msg) {
        case 0xf :
            {
                g = Graphics.FromHwnd (this.Handle);
                Rectangle r = GetWndRect (this.Handle);
                g.DrawRectangle (p, r);
                Trace.WriteLine ("WM_PAINT: " + r.ToString ());
            } break;
    }
    Trace.WriteLine ("handled");
    base.WndProc (ref m);
}
----------------------------------------

 protected override void WndProc (ref Message m) {
    switch (m.Msg) {
        case 0xf :
            {
                using (Graphics g = Graphics.FromHwnd (this.Handle))
                {
                    Rectangle r = GetWndRect(this.Handle);
                    g.DrawRectangle(p, r);
                    Trace.WriteLine("WM_PAINT: " + r.ToString());
                } break;
            }
    }
    Trace.WriteLine("handled");
    base.WndProc(ref m);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
270
0
Gpt3D_Clone270_0.cs 1 19
Gpt3D_Clone270_0.cs 20 43
----------------------------------------

public FileStreamResult DownloadPDF () {
    MemoryStream workStream = new MemoryStream ();
    ZipFile zip = new ZipFile ();
    foreach (Bla bla in Blas) {
        MemoryStream pdfStream = new MemoryStream ();
        Document document = new Document ();
        PdfWriter.GetInstance (document, pdfStream).CloseStream = false;
        document.Open ();
        document.Close ();
        byte [] pdfByteInfo = pdfStream.ToArray ();
        zip.AddEntry (bla.filename + ".pdf", pdfByteInfo);
        pdfStream.Close ();
    }
    zip.Save (workStream);
    workStream.Position = 0;
    FileStreamResult fileResult = new FileStreamResult (workStream, System.Net.Mime.MediaTypeNames.Application.Zip);
    fileResult.FileDownloadName = "MultiplePDFs.zip";
    return fileResult;
}
----------------------------------------

 public FileStreamResult DownloadPDF () {
    MemoryStream workStream = new MemoryStream ();
    using (var zipArchive = new ZipArchive (workStream, ZipArchiveMode.Create)) {
        foreach (Bla bla in Blas) {
            MemoryStream pdfStream = new MemoryStream ();
            PdfDocument document = new PdfDocument ();
            PdfWriter.GetInstance (document, pdfStream).CloseStream = false;
            document.Open ();
            document.Close ();
            byte [] pdfByteInfo = pdfStream.ToArray ();
            var zipEntry = zipArchive.CreateEntry (bla.filename + ".pdf", CompressionLevel.Optimal);
            using (var zipOutputStream = zipEntry.Open ()) {
                zipOutputStream.Write (pdfByteInfo, 0, pdfByteInfo.Length);
            }
            pdfStream.Close ();
        }
        workStream.Position = 0;
        FileStreamResult fileResult = new FileStreamResult (workStream, System.Net.Mime.MediaTypeNames.Application.Zip);
        fileResult.FileDownloadName = "MultiplePDFs.zip";
        return fileResult;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
270
1
Gpt3D_Clone270_1.cs 1 19
Gpt3D_Clone270_1.cs 20 42
----------------------------------------

public FileStreamResult DownloadPDF () {
    MemoryStream workStream = new MemoryStream ();
    ZipFile zip = new ZipFile ();
    foreach (Bla bla in Blas) {
        MemoryStream pdfStream = new MemoryStream ();
        Document document = new Document ();
        PdfWriter.GetInstance (document, pdfStream).CloseStream = false;
        document.Open ();
        document.Close ();
        byte [] pdfByteInfo = pdfStream.ToArray ();
        zip.AddEntry (bla.filename + ".pdf", pdfByteInfo);
        pdfStream.Close ();
    }
    zip.Save (workStream);
    workStream.Position = 0;
    FileStreamResult fileResult = new FileStreamResult (workStream, System.Net.Mime.MediaTypeNames.Application.Zip);
    fileResult.FileDownloadName = "MultiplePDFs.zip";
    return fileResult;
}
----------------------------------------

 public FileStreamResult DownloadPDF () {
    MemoryStream workStream = new MemoryStream ();
    SharpZipLib.Zip.ZipOutputStream zip = new ZipOutputStream (workStream);
    foreach (Bla bla in Blas) {
        MemoryStream pdfStream = new MemoryStream ();
        Document document = new Document ();
        PdfWriter.GetInstance (document, pdfStream).CloseStream = false;
        document.Open ();
        document.Close ();
        byte [] pdfByteInfo = pdfStream.ToArray ();
        zip.PutNextEntry (new Sharpmzlib.Zip.ZipEntry (bla.filename + ".pdf"));
        zip.Write (pdfByteInfo, 0, pdfByteInfo.Length);
        pdfStream.Close ();
    }
    zip.Finish ();
    zip.Close ();
    workStream.Position = 0;
    FileStreamResult fileResult = new FileStreamResult (workStream, System.Net.Mime.MediaTypeNames.Application.Zip);
    fileResult.FileDownloadName = "MultiplePDFs.zip";
    return fileResult;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
271
0
Gpt3D_Clone271_0.cs 1 18
Gpt3D_Clone271_0.cs 19 46
----------------------------------------

static void Main (string [] args) {
    ArrayList siteList = new ArrayList ();
    ArrayList deserealizedArray = DeserializeArray ();
    foreach (var item in deserealizedArray) {
        Console.WriteLine (item);
    }
    Console.WriteLine ("---");
    siteList.Add ("Test 1");
    siteList.Add ("Test 2");
    foreach (var item in siteList) {
        Console.WriteLine (item);
    }
    SerializeArray (siteList);
    if (siteList.Contains ("Test 2")) {
        Console.WriteLine ("Test 2 exists!");
        Console.Read ();
    }
}
----------------------------------------

  static void Main(string[] args)
{
    ArrayList siteList = new ArrayList();
    ArrayList deserealizedArray = DeserializeArray();
    int deserealizedCount = deserealizedArray.Count;
    for (int i = 0; i < deserealizedCount; i++) 
    {
        object item = deserealizedArray[i];
        string value = item.ToString();
        Console.WriteLine(value);
    }
    Console.WriteLine("---");
    siteList.Add("Test 1");
    siteList.Add("Test 2");
    IEnumerable listEnumerable = siteList;
    foreach (string item in listEnumerable) 
    {
        Console.WriteLine(item);
    }
    SerializeArray(siteList);
    if (siteList.Contains("Test 2")) 
    {
        Console.WriteLine("Test 2 exists!");
        Console.Read();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
271
1
Gpt3D_Clone271_1.cs 1 18
Gpt3D_Clone271_1.cs 19 47
----------------------------------------

static void Main (string [] args) {
    ArrayList siteList = new ArrayList ();
    ArrayList deserealizedArray = DeserializeArray ();
    foreach (var item in deserealizedArray) {
        Console.WriteLine (item);
    }
    Console.WriteLine ("---");
    siteList.Add ("Test 1");
    siteList.Add ("Test 2");
    foreach (var item in siteList) {
        Console.WriteLine (item);
    }
    SerializeArray (siteList);
    if (siteList.Contains ("Test 2")) {
        Console.WriteLine ("Test 2 exists!");
        Console.Read ();
    }
}
----------------------------------------

  static void Main(string[] args)
{
    ArrayList siteList = new ArrayList();
    ArrayList deserealizedArray = DeserializeArray();
    int deserealizedArrayLength = deserealizedArray.Count;
    for (int i = 0; i < deserealizedArrayLength; i++) 
    {
        object item = deserealizedArray[i];
        Console.WriteLine(item);
    }
    Console.WriteLine("---");
    siteList.Add("Test 1");
    siteList.Add("Test 2");
    int listCount = siteList.Count;
    for (int i = 0; i < listCount; i++) 
    {
        object item = siteList[i];
        Console.WriteLine(item);
    }
    SerializeArray(siteList);
    if (siteList.Contains("Test 2")) 
    {
        Console.WriteLine("Test 2 exists!");
        Console.Read();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
271
2
Gpt3D_Clone271_2.cs 1 18
Gpt3D_Clone271_2.cs 19 48
----------------------------------------

static void Main (string [] args) {
    ArrayList siteList = new ArrayList ();
    ArrayList deserealizedArray = DeserializeArray ();
    foreach (var item in deserealizedArray) {
        Console.WriteLine (item);
    }
    Console.WriteLine ("---");
    siteList.Add ("Test 1");
    siteList.Add ("Test 2");
    foreach (var item in siteList) {
        Console.WriteLine (item);
    }
    SerializeArray (siteList);
    if (siteList.Contains ("Test 2")) {
        Console.WriteLine ("Test 2 exists!");
        Console.Read ();
    }
}
----------------------------------------

  static void Main(string[] args)
{
    ArrayList siteList = new ArrayList();
    ArrayList deserealizedArray = DeserializeArray();
    int deserealizedLength = deserealizedArray.Count;
    
    for (int i = 0; i < deserealizedLength; i++) 
    {
        string item = deserealizedArray[i].ToString();
        Console.WriteLine(item);
    }
    Console.WriteLine("---");
    siteList.Add("Test 1");
    siteList.Add("Test 2");
    int listLength = siteList.Count;
    for(int i = 0; i < listLength; i++)
    {
        string item = siteList[i].ToString();
        Console.WriteLine(item);
    }
    SerializeArray(siteList);
    if (siteList.Contains("Test 2")) 
    {
        Console.WriteLine("Test 2 exists!");
        Console.Read();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
271
3
Gpt3D_Clone271_3.cs 1 18
Gpt3D_Clone271_3.cs 19 44
----------------------------------------

static void Main (string [] args) {
    ArrayList siteList = new ArrayList ();
    ArrayList deserealizedArray = DeserializeArray ();
    foreach (var item in deserealizedArray) {
        Console.WriteLine (item);
    }
    Console.WriteLine ("---");
    siteList.Add ("Test 1");
    siteList.Add ("Test 2");
    foreach (var item in siteList) {
        Console.WriteLine (item);
    }
    SerializeArray (siteList);
    if (siteList.Contains ("Test 2")) {
        Console.WriteLine ("Test 2 exists!");
        Console.Read ();
    }
}
----------------------------------------

  static void Main(string[] args)
{
    ArrayList siteList = new ArrayList();
    ArrayList deserealizedArray = DeserializeArray();
    for (int i = 0; i < deserealizedArray.Count; i++) 
    {
        var item = deserealizedArray[i];
        Console.WriteLine(item.ToString());
    }
    Console.WriteLine("---");
    siteList.Add("Test 1");
    siteList.Add("Test 2");
    for (int i = 0; i < siteList.Count; i++) 
    {
        var item = siteList[i];
        Console.WriteLine(item.ToString());
    }
    SerializeArray(siteList);
    if (siteList.Contains("Test 2")) 
    {
        Console.WriteLine("Test 2 exists!");
        Console.Read();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
271
4
Gpt3D_Clone271_4.cs 1 18
Gpt3D_Clone271_4.cs 19 44
----------------------------------------

static void Main (string [] args) {
    ArrayList siteList = new ArrayList ();
    ArrayList deserealizedArray = DeserializeArray ();
    foreach (var item in deserealizedArray) {
        Console.WriteLine (item);
    }
    Console.WriteLine ("---");
    siteList.Add ("Test 1");
    siteList.Add ("Test 2");
    foreach (var item in siteList) {
        Console.WriteLine (item);
    }
    SerializeArray (siteList);
    if (siteList.Contains ("Test 2")) {
        Console.WriteLine ("Test 2 exists!");
        Console.Read ();
    }
}
----------------------------------------

 static void Main(string[] args)
{
    ArrayList siteList = new ArrayList();
    ArrayList deserealizedArray = DeserializeArray();
    IEnumerable sitesCollection = deserealizedArray;
    foreach (var item in sitesCollection) 
    {
        Console.WriteLine(item);
    }
    Console.WriteLine("---");
    siteList.Add("Test 1");
    siteList.Add("Test 2");
    IEnumerator listEnumerator = siteList.GetEnumerator();
    while(listEnumerator.MoveNext())
    {
        Console.WriteLine(listEnumerator.Current.ToString());
    }
    SerializeArray(siteList);
    if (siteList.Contains("Test 2")) 
    {
        Console.WriteLine("Test 2 exists!");
        Console.Read();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
271
5
Gpt3D_Clone271_5.cs 1 18
Gpt3D_Clone271_5.cs 19 44
----------------------------------------

static void Main (string [] args) {
    ArrayList siteList = new ArrayList ();
    ArrayList deserealizedArray = DeserializeArray ();
    foreach (var item in deserealizedArray) {
        Console.WriteLine (item);
    }
    Console.WriteLine ("---");
    siteList.Add ("Test 1");
    siteList.Add ("Test 2");
    foreach (var item in siteList) {
        Console.WriteLine (item);
    }
    SerializeArray (siteList);
    if (siteList.Contains ("Test 2")) {
        Console.WriteLine ("Test 2 exists!");
        Console.Read ();
    }
}
----------------------------------------

  static void Main(string[] args)
{
    ArrayList siteList = new ArrayList();
    ArrayList deserealizedArray = DeserializeArray();
    for(int i = 0; i < deserealizedArray.Count; i++)
    {
        string item = (string)deserealizedArray[i];
        Console.WriteLine(item);
    }
    Console.WriteLine("---");
    siteList.Add("Test 1");
    siteList.Add("Test 2");
    for(int i = 0; i < siteList.Count; i++)
    {
        string item = (string)siteList[i];
        Console.WriteLine(item);
    }
    SerializeArray(siteList);
    if (siteList.Contains("Test 2")) 
    {
        Console.WriteLine("Test 2 exists!");
        Console.Read();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
271
6
Gpt3D_Clone271_6.cs 1 18
Gpt3D_Clone271_6.cs 19 43
----------------------------------------

static void Main (string [] args) {
    ArrayList siteList = new ArrayList ();
    ArrayList deserealizedArray = DeserializeArray ();
    foreach (var item in deserealizedArray) {
        Console.WriteLine (item);
    }
    Console.WriteLine ("---");
    siteList.Add ("Test 1");
    siteList.Add ("Test 2");
    foreach (var item in siteList) {
        Console.WriteLine (item);
    }
    SerializeArray (siteList);
    if (siteList.Contains ("Test 2")) {
        Console.WriteLine ("Test 2 exists!");
        Console.Read ();
    }
}
----------------------------------------

  static void Main(string[] args)
{
    ArrayList siteList = new ArrayList();
    ArrayList deserealizedArray = DeserializeArray();
    foreach (var item in deserealizedArray) 
    {
        Console.WriteLine("{0}", item);
    }
    Console.WriteLine("---");
    siteList.Add("Test 1");
    siteList.Add("Test 2");
    IEnumerator listEnumerator = siteList.GetEnumerator();
    while(listEnumerator.MoveNext())
    {
        Console.WriteLine("{0}", listEnumerator.Current.ToString());
    }
    SerializeArray(siteList);
    if (siteList.Contains("Test 2")) 
    {
        Console.WriteLine("Test 2 exists!");
        Console.Read();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
271
7
Gpt3D_Clone271_7.cs 1 18
Gpt3D_Clone271_7.cs 19 43
----------------------------------------

static void Main (string [] args) {
    ArrayList siteList = new ArrayList ();
    ArrayList deserealizedArray = DeserializeArray ();
    foreach (var item in deserealizedArray) {
        Console.WriteLine (item);
    }
    Console.WriteLine ("---");
    siteList.Add ("Test 1");
    siteList.Add ("Test 2");
    foreach (var item in siteList) {
        Console.WriteLine (item);
    }
    SerializeArray (siteList);
    if (siteList.Contains ("Test 2")) {
        Console.WriteLine ("Test 2 exists!");
        Console.Read ();
    }
}
----------------------------------------

  static void Main(string[] args)
{
    ArrayList siteList = new ArrayList();
    ArrayList deserealizedArray = DeserializeArray();
    foreach (object item in deserealizedArray)
    {
        Console.WriteLine(item);
    }
    Console.WriteLine("---");
    siteList.Add("Test 1");
    siteList.Add("Test 2");
    IEnumerator listEnumerator = siteList.GetEnumerator();
    while(listEnumerator.MoveNext())
    {
        Console.WriteLine(listEnumerator.Current);
    }
    SerializeArray(siteList);
    if (siteList.Contains("Test 2")) 
    {
        Console.WriteLine("Test 2 exists!");
        Console.Read();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
271
8
Gpt3D_Clone271_8.cs 1 18
Gpt3D_Clone271_8.cs 19 44
----------------------------------------

static void Main (string [] args) {
    ArrayList siteList = new ArrayList ();
    ArrayList deserealizedArray = DeserializeArray ();
    foreach (var item in deserealizedArray) {
        Console.WriteLine (item);
    }
    Console.WriteLine ("---");
    siteList.Add ("Test 1");
    siteList.Add ("Test 2");
    foreach (var item in siteList) {
        Console.WriteLine (item);
    }
    SerializeArray (siteList);
    if (siteList.Contains ("Test 2")) {
        Console.WriteLine ("Test 2 exists!");
        Console.Read ();
    }
}
----------------------------------------

  static void Main(string[] args)
{
    ArrayList siteList = new ArrayList();
    ArrayList deserealizedArray = DeserializeArray();
    for (int i = 0; i < deserealizedArray.Count; i++) 
    {
        Console.WriteLine(deserealizedArray[i]);
    }
    Console.WriteLine("---");
    siteList.Add("Test 1");
    siteList.Add("Test 2");
    int listCount = siteList.Count;
    for (int i = 0; i < listCount; i++) 
    {
        Console.WriteLine(siteList[i]);
    }
    SerializeArray(siteList);
    if (siteList.Contains("Test 2"))
    {
        Console.WriteLine("Test 2 exists!");
        Console.Read();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
273
0
Gpt3D_Clone273_0.cs 1 11
Gpt3D_Clone273_0.cs 12 24
----------------------------------------

private static void GetUserData (string userName, UserSession user) {
    using (Entities ctx = CommonSERT.GetContext ())
    {
        var result = (from ur in ctx.datUserRoles
            where ur.AccountName.Equals (userName, StringComparison.CurrentCultureIgnoreCase)
            select new {Active = ur.active, ID = ur.ID,}).FirstOrDefault ();
        if (result != null)
            user.UserActive = result.Active;
        user.UserID = result.ID;
    }
}
----------------------------------------

  private static void GetUserData (string userName, UserSession user) {
    using (Entities ctx = CommonSERT.GetContext ())
    {
        var userData = ctx.datUserRoles
                .Where(x => x.AccountName.Equals (userName, StringComparison.CurrentCultureIgnoreCase))
                .FirstOrDefault();
        if (userData != null)
            user.UserActive = userData.Active;
        user.UserID = userData.ID;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
273
1
Gpt3D_Clone273_1.cs 1 11
Gpt3D_Clone273_1.cs 12 24
----------------------------------------

private static void GetUserData (string userName, UserSession user) {
    using (Entities ctx = CommonSERT.GetContext ())
    {
        var result = (from ur in ctx.datUserRoles
            where ur.AccountName.Equals (userName, StringComparison.CurrentCultureIgnoreCase)
            select new {Active = ur.active, ID = ur.ID,}).FirstOrDefault ();
        if (result != null)
            user.UserActive = result.Active;
        user.UserID = result.ID;
    }
}
----------------------------------------

  private static void GetUserData (string userName, UserSession user) {
    using (Entities ctx = CommonSERT.GetContext ())
    {
        var userData = ctx.datUserRoles.Where(x => x.AccountName.Equals (userName, StringComparison.CurrentCultureIgnoreCase))
            .Select(x => new {x.Active, x.ID})
            .FirstOrDefault();
        if (userData != null)
            user.UserActive = userData.Active;
        user.UserID = userData.ID;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
273
2
Gpt3D_Clone273_2.cs 1 11
Gpt3D_Clone273_2.cs 12 25
----------------------------------------

private static void GetUserData (string userName, UserSession user) {
    using (Entities ctx = CommonSERT.GetContext ())
    {
        var result = (from ur in ctx.datUserRoles
            where ur.AccountName.Equals (userName, StringComparison.CurrentCultureIgnoreCase)
            select new {Active = ur.active, ID = ur.ID,}).FirstOrDefault ();
        if (result != null)
            user.UserActive = result.Active;
        user.UserID = result.ID;
    }
}
----------------------------------------

  private static void GetUserData (string userName, UserSession user) {
    using (Entities ctx = CommonSERT.GetContext ())
    {
        var userData = ctx.datUserRoles
            .Where(x => x.AccountName.Equals (userName, StringComparison.CurrentCultureIgnoreCase))
            .Select(x => new {x.Active, x.ID})
            .FirstOrDefault();
        if (userData != null)
            user.UserActive = userData.Active;
        user.UserID = userData.ID;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
273
3
Gpt3D_Clone273_3.cs 1 11
Gpt3D_Clone273_3.cs 12 29
----------------------------------------

private static void GetUserData (string userName, UserSession user) {
    using (Entities ctx = CommonSERT.GetContext ())
    {
        var result = (from ur in ctx.datUserRoles
            where ur.AccountName.Equals (userName, StringComparison.CurrentCultureIgnoreCase)
            select new {Active = ur.active, ID = ur.ID,}).FirstOrDefault ();
        if (result != null)
            user.UserActive = result.Active;
        user.UserID = result.ID;
    }
}
----------------------------------------

  private static void GetUserData (string userName, UserSession user) {
    using (Entities ctx = CommonSERT.GetContext ())
    {
        var userData = ctx.datUserRoles
            .Where(x => x.AccountName.Equals (userName, StringComparison.CurrentCultureIgnoreCase))
            .Select(x => new 
                        {
                            Active = x.Active, 
                            ID = x.ID
                        })
            .FirstOrDefault();
        if (userData != null)
            user.UserActive = userData.Active;
        user.UserID = userData.ID;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
275
2
Gpt3D_Clone275_2.cs 1 10
Gpt3D_Clone275_2.cs 11 22
----------------------------------------

static void Main (string [] args) {
    Process process = new Process ();
    process.StartInfo.FileName = @"C:\my test folder\my test.bat";
    StringBuilder cmdLine = new StringBuilder ();
    cmdLine.Append (process.StartInfo.FileName);
    STARTUPINFO lpStartupInfo = new STARTUPINFO ();
    PROCESS_INFORMATION lpProcessInformation = new PROCESS_INFORMATION ();
    string workingDirectory = @"C:\my test folder\";
    CreateProcess (null, cmdLine, null, null, true, 0, IntPtr.Zero, workingDirectory, lpStartupInfo, lpProcessInformation);
}
----------------------------------------

 static void Main (string [] args) {
    Process process = new Process ();
    process.StartInfo.FileName = @"C:\my test folder\my test.bat";
    process.StartInfo.Arguments = "";
    process.Start();
    STARTUPINFO lpStartupInfo = new STARTUPINFO ();
    PROCESS_INFORMATION lpProcessInformation = new PROCESS_INFORMATION ();
    string workingDirectory = @"C:\my test folder\";
    CreateProcess (null, process.StartInfo.FileName, null, null, true, 0, IntPtr.Zero, workingDirectory, lpStartupInfo, lpProcessInformation);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
275
5
Gpt3D_Clone275_5.cs 1 10
Gpt3D_Clone275_5.cs 11 21
----------------------------------------

static void Main (string [] args) {
    Process process = new Process ();
    process.StartInfo.FileName = @"C:\my test folder\my test.bat";
    StringBuilder cmdLine = new StringBuilder ();
    cmdLine.Append (process.StartInfo.FileName);
    STARTUPINFO lpStartupInfo = new STARTUPINFO ();
    PROCESS_INFORMATION lpProcessInformation = new PROCESS_INFORMATION ();
    string workingDirectory = @"C:\my test folder\";
    CreateProcess (null, cmdLine, null, null, true, 0, IntPtr.Zero, workingDirectory, lpStartupInfo, lpProcessInformation);
}
----------------------------------------

 static void Main (string [] args) {
    Process process = new Process ();
    process.StartInfo.UseShellExectue = true; 
	process.StartInfo.FileName = @"C:\my test folder\my test.bat";
    STARTUPINFO lpStartupInfo = new STARTUPINFO ();
    PROCESS_INFORMATION lpProcessInformation = new PROCESS_INFORMATION ();
    string workingDirectory = @"C:\my test folder\";
    CreateProcess (null, process.StartInfo.FileName, null, null, true, 0, IntPtr.Zero, workingDirectory, lpStartupInfo, lpProcessInformation);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
276
1
Gpt3D_Clone276_1.cs 1 13
Gpt3D_Clone276_1.cs 14 39
----------------------------------------

public static void ExitWindows (RestartOptions how, bool force) {
    switch (how) {
        case RestartOptions.Suspend :
            SuspendSystem (false, force);
            break;
        case RestartOptions.Hibernate :
            SuspendSystem (true, force);
            break;
        default :
            ExitWindows ((int) how, force);
            break;
    }
}
----------------------------------------

 public static void ExitWindows(RestartOptions how, bool force)
{
            {
                switch (how)
                {
                    case RestartOptions.Suspend :
                    {
                    SuspendSystem(false, force);
                    break;
                    }
                    case RestartOptions.Hibernate :
                    {
                        SuspendSystem(true, force);
                        break;
                    }
                    default :
                    {
                    ExitWindows((int) how, force);
                    break;
                    }
                }
            }
            return;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
278
0
Gpt3D_Clone278_0.cs 1 13
Gpt3D_Clone278_0.cs 14 33
----------------------------------------

[Test] public static void Main (string [] args) {
    var method = typeof (Program).GetMethod ("Main");
    var type = typeof (Program);
    SomeValue = 1;
    Console.WriteLine (method.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    SomeValue = 2;
    Console.WriteLine (method.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    SomeValue = 3;
    Console.WriteLine (type.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    SomeValue = 4;
    Console.WriteLine (type.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    Console.ReadLine ();
}
----------------------------------------

 
[Test] public static void Main (string [] args) {
    var method = typeof (Program).GetMethod ("Main");
    var type = typeof (Program);
    int myValue = 1;
    method.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue = myValue;
    Console.WriteLine (method.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    myValue = 2;
    method.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue = myValue;
    Console.WriteLine (method.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    myValue = 3;
    type.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue = myValue;
    Console.WriteLine (type.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    myValue = 4;
    type.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue = myValue;
    Console.WriteLine (type.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
278
1
Gpt3D_Clone278_1.cs 1 13
Gpt3D_Clone278_1.cs 14 29
----------------------------------------

[Test] public static void Main (string [] args) {
    var method = typeof (Program).GetMethod ("Main");
    var type = typeof (Program);
    SomeValue = 1;
    Console.WriteLine (method.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    SomeValue = 2;
    Console.WriteLine (method.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    SomeValue = 3;
    Console.WriteLine (type.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    SomeValue = 4;
    Console.WriteLine (type.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    Console.ReadLine ();
}
----------------------------------------

 
[Test] public static void Main (string [] args) {
    var method = typeof (Program).GetMethod ("Main");
    var type = typeof (Program);
    Program.ChangeValue (1);
    Console.WriteLine (method.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    Program.ChangeValue (2);
    Console.WriteLine (method.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    Program.ChangeValue (3);
    Console.WriteLine (type.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    Program.ChangeValue (4);
    Console.WriteLine (type.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
278
2
Gpt3D_Clone278_2.cs 1 13
Gpt3D_Clone278_2.cs 14 29
----------------------------------------

[Test] public static void Main (string [] args) {
    var method = typeof (Program).GetMethod ("Main");
    var type = typeof (Program);
    SomeValue = 1;
    Console.WriteLine (method.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    SomeValue = 2;
    Console.WriteLine (method.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    SomeValue = 3;
    Console.WriteLine (type.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    SomeValue = 4;
    Console.WriteLine (type.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    Console.ReadLine ();
}
----------------------------------------

 
[Test] public static void Main (string [] args) {
    var method = typeof (Program).GetMethod ("Main");
    var type = typeof (Program);
    UpdateValue(1);
    Console.WriteLine (method.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    UpdateValue(2);
    Console.WriteLine (method.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    UpdateValue(3);
    Console.WriteLine (type.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    UpdateValue(4);
    Console.WriteLine (type.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
278
3
Gpt3D_Clone278_3.cs 1 13
Gpt3D_Clone278_3.cs 14 29
----------------------------------------

[Test] public static void Main (string [] args) {
    var method = typeof (Program).GetMethod ("Main");
    var type = typeof (Program);
    SomeValue = 1;
    Console.WriteLine (method.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    SomeValue = 2;
    Console.WriteLine (method.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    SomeValue = 3;
    Console.WriteLine (type.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    SomeValue = 4;
    Console.WriteLine (type.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    Console.ReadLine ();
}
----------------------------------------

[Test] public static void Main (string [] args) {
    var method = typeof (Program).GetMethod ("Main");
    var type = typeof (Program);
    SetValue(1);
    Console.WriteLine (method.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    SetValue(2);
    Console.WriteLine (method.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    SetValue(3);
    Console.WriteLine (type.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    SetValue(4);
    Console.WriteLine (type.GetCustomAttributes (false).OfType < TestAttribute > ().First ().SomeValue);
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
279
0
Gpt3D_Clone279_0.cs 1 23
Gpt3D_Clone279_0.cs 24 49
----------------------------------------

public static string Verify (string valueToBind, object dataSource) {
    Type type = dataSource.GetType ();
    MethodInfo select = type.GetMethod ("Select");
    PropertyInfo parameters = type.GetProperty ("Parameters");
    PropertyInfo parameterGetter = null;
    object parametersInstance = null;
    if (parameters != null) {
        parametersInstance = parameters.GetValue (dataSource, null);
        type = parametersInstance.GetType ();
        parameterGetter = type.GetProperty ("Item");
    }
    if (select != null && parameters != null && parameterGetter != null) {
        if (ListContainsValue (baseInstance.GetEntityList (), valueToBind))
            return valueToBind;
        CustomParameter p = parameterGetter.GetValue (parametersInstance, new object [] {"WhereClause"}) as CustomParameter;
        if (p != null) {
            p.Value = "IsActive=true OR Id=" + valueToBind;
            select.Invoke (dataSource, null);
            return valueToBind;
        }
    }
    return string.Empty;
}
----------------------------------------

 public static string Verify (string valueToBind, object dataSource) {
            Type type = dataSource.GetType ();
            MethodInfo select = type.GetMethod ("Select");
            if (ListContainsValue (baseInstance.GetEntityList (), valueToBind))
                return valueToBind;
            PropertyInfo parameters = type.GetProperty ("Parameters");
            if (parameters == null)
                return string.Empty;
            
            object parametersInstance = parameters.GetValue (dataSource, null);
            Type typeParams = parametersInstance.GetType ();
            PropertyInfo parameterGetter = typeParams.GetProperty ("Item");
            if (select != null && parameterGetter != null) {
                CustomParameter p = parameterGetter.GetValue (parametersInstance, new object [] {"WhereClause"}) as CustomParameter;
                if (p != null) {
                    p.Value = "IsActive=true OR Id=" + valueToBind;
                    select.Invoke (dataSource, null);
                    return valueToBind;
                }
            }
            return string.Empty;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
279
1
Gpt3D_Clone279_1.cs 1 23
Gpt3D_Clone279_1.cs 24 51
----------------------------------------

public static string Verify (string valueToBind, object dataSource) {
    Type type = dataSource.GetType ();
    MethodInfo select = type.GetMethod ("Select");
    PropertyInfo parameters = type.GetProperty ("Parameters");
    PropertyInfo parameterGetter = null;
    object parametersInstance = null;
    if (parameters != null) {
        parametersInstance = parameters.GetValue (dataSource, null);
        type = parametersInstance.GetType ();
        parameterGetter = type.GetProperty ("Item");
    }
    if (select != null && parameters != null && parameterGetter != null) {
        if (ListContainsValue (baseInstance.GetEntityList (), valueToBind))
            return valueToBind;
        CustomParameter p = parameterGetter.GetValue (parametersInstance, new object [] {"WhereClause"}) as CustomParameter;
        if (p != null) {
            p.Value = "IsActive=true OR Id=" + valueToBind;
            select.Invoke (dataSource, null);
            return valueToBind;
        }
    }
    return string.Empty;
}
----------------------------------------

 public static string Verify (string valueToBind, object dataSource) {
            Type type = dataSource.GetType();
            MethodInfo select = type.GetMethod("Select");
            PropertyInfo parameters = type.GetProperty("Parameters");
            if (ListContainsValue(baseInstance.GetEntityList(), valueToBind)) {
                return valueToBind;
            }
            if (select != null && parameters != null) {
                object parametersInstance = parameters.GetValue(dataSource, null);
                Type typeParams = parametersInstance.GetType();
                PropertyInfo parameterGetter = typeParams.GetProperty("Item");
                if (parameterGetter != null) {
                    CustomParameter p = parameterGetter.GetValue(parametersInstance, new object[] { "WhereClause" }) as CustomParameter;
                    if (p != null) {
                        p.Value = "IsActive=true OR Id=" + valueToBind;
                        select.Invoke(dataSource, null);
                        return valueToBind;
                    }
                }
            }
            return string.Empty;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
279
2
Gpt3D_Clone279_2.cs 1 23
Gpt3D_Clone279_2.cs 24 49
----------------------------------------

public static string Verify (string valueToBind, object dataSource) {
    Type type = dataSource.GetType ();
    MethodInfo select = type.GetMethod ("Select");
    PropertyInfo parameters = type.GetProperty ("Parameters");
    PropertyInfo parameterGetter = null;
    object parametersInstance = null;
    if (parameters != null) {
        parametersInstance = parameters.GetValue (dataSource, null);
        type = parametersInstance.GetType ();
        parameterGetter = type.GetProperty ("Item");
    }
    if (select != null && parameters != null && parameterGetter != null) {
        if (ListContainsValue (baseInstance.GetEntityList (), valueToBind))
            return valueToBind;
        CustomParameter p = parameterGetter.GetValue (parametersInstance, new object [] {"WhereClause"}) as CustomParameter;
        if (p != null) {
            p.Value = "IsActive=true OR Id=" + valueToBind;
            select.Invoke (dataSource, null);
            return valueToBind;
        }
    }
    return string.Empty;
}
----------------------------------------

 public static string Verify (string valueToBind, object dataSource) {
            Type type = dataSource.GetType();
            if (ListContainsValue(baseInstance.GetEntityList(), valueToBind)) {
                return valueToBind;
            }
            MethodInfo select = type.GetMethod("Select");
            PropertyInfo parameters = type.GetProperty("Parameters");
            if (parameters != null && select != null) {
                object parametersInstance = parameters.GetValue(dataSource, null);
                Type typeParams = parametersInstance.GetType();
                PropertyInfo parameterGetter = typeParams.GetProperty("Item");
                if (parameterGetter != null) {
                    CustomParameter p = parameterGetter.GetValue(parametersInstance, new object[] { "WhereClause" }) as CustomParameter;
                    if (p != null) {
                        p.Value = "IsActive=true OR Id=" + valueToBind;
                        select.Invoke(dataSource, null);
                        return valueToBind;
                    }
                }
            }
            return string.Empty;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
279
3
Gpt3D_Clone279_3.cs 1 23
Gpt3D_Clone279_3.cs 24 50
----------------------------------------

public static string Verify (string valueToBind, object dataSource) {
    Type type = dataSource.GetType ();
    MethodInfo select = type.GetMethod ("Select");
    PropertyInfo parameters = type.GetProperty ("Parameters");
    PropertyInfo parameterGetter = null;
    object parametersInstance = null;
    if (parameters != null) {
        parametersInstance = parameters.GetValue (dataSource, null);
        type = parametersInstance.GetType ();
        parameterGetter = type.GetProperty ("Item");
    }
    if (select != null && parameters != null && parameterGetter != null) {
        if (ListContainsValue (baseInstance.GetEntityList (), valueToBind))
            return valueToBind;
        CustomParameter p = parameterGetter.GetValue (parametersInstance, new object [] {"WhereClause"}) as CustomParameter;
        if (p != null) {
            p.Value = "IsActive=true OR Id=" + valueToBind;
            select.Invoke (dataSource, null);
            return valueToBind;
        }
    }
    return string.Empty;
}
----------------------------------------

 
public static string Verify(string valueToBind, object dataSource) {
            Type type = dataSource.GetType();
            if (ListContainsValue(baseInstance.GetEntityList(), valueToBind)) {
                return valueToBind;
            }
            MethodInfo select = type.GetMethod("Select");
            PropertyInfo parameters = type.GetProperty("Parameters");
            if (select != null && parameters != null) {
                object parametersInstance = parameters.GetValue(dataSource, null);
                Type typeParams = parametersInstance.GetType();
                PropertyInfo parameterGetter = typeParams.GetProperty("Item");
                if (parameterGetter != null) {
                    var p = parameterGetter.GetValue(parametersInstance, new object[]{"WhereClause"}) as CustomParameter;
                    if (p != null) {
                        p.Value = "IsActive=true OR Id=" + valueToBind;
                        select.Invoke(dataSource, null);
                        return valueToBind;
                    }
                }
            }
            return string.Empty;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
279
4
Gpt3D_Clone279_4.cs 1 23
Gpt3D_Clone279_4.cs 24 47
----------------------------------------

public static string Verify (string valueToBind, object dataSource) {
    Type type = dataSource.GetType ();
    MethodInfo select = type.GetMethod ("Select");
    PropertyInfo parameters = type.GetProperty ("Parameters");
    PropertyInfo parameterGetter = null;
    object parametersInstance = null;
    if (parameters != null) {
        parametersInstance = parameters.GetValue (dataSource, null);
        type = parametersInstance.GetType ();
        parameterGetter = type.GetProperty ("Item");
    }
    if (select != null && parameters != null && parameterGetter != null) {
        if (ListContainsValue (baseInstance.GetEntityList (), valueToBind))
            return valueToBind;
        CustomParameter p = parameterGetter.GetValue (parametersInstance, new object [] {"WhereClause"}) as CustomParameter;
        if (p != null) {
            p.Value = "IsActive=true OR Id=" + valueToBind;
            select.Invoke (dataSource, null);
            return valueToBind;
        }
    }
    return string.Empty;
}
----------------------------------------

 public static string Verify (string valueToBind, object dataSource) {
        Type type = dataSource.GetType();
        MethodInfo select = type.GetMethod("Select");
        PropertyInfo parameters = type.GetProperty("Parameters");
        object parameterInstance = parameters.GetValue(dataSource, null);
        Type typeParams = parameterInstance.GetType();
        if (ListContainsValue(baseInstance.GetEntityList(), valueToBind)) {
            return valueToBind;
        }
        PropertyInfo paramGetter = typeParams.GetProperty("Item");
        if (paramGetter != null) {
            CustomParameter p = paramGetter.GetValue(parameterInstance, new object[]{"WhereClause"}) as CustomParameter;
            if (p != null) {
            p.Value = "IsActive=true OR Id=" + valueToBind;
            select.Invoke(dataSource, null);
            return valueToBind;
            }
        }
        return string.Empty;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
279
5
Gpt3D_Clone279_5.cs 1 23
Gpt3D_Clone279_5.cs 24 47
----------------------------------------

public static string Verify (string valueToBind, object dataSource) {
    Type type = dataSource.GetType ();
    MethodInfo select = type.GetMethod ("Select");
    PropertyInfo parameters = type.GetProperty ("Parameters");
    PropertyInfo parameterGetter = null;
    object parametersInstance = null;
    if (parameters != null) {
        parametersInstance = parameters.GetValue (dataSource, null);
        type = parametersInstance.GetType ();
        parameterGetter = type.GetProperty ("Item");
    }
    if (select != null && parameters != null && parameterGetter != null) {
        if (ListContainsValue (baseInstance.GetEntityList (), valueToBind))
            return valueToBind;
        CustomParameter p = parameterGetter.GetValue (parametersInstance, new object [] {"WhereClause"}) as CustomParameter;
        if (p != null) {
            p.Value = "IsActive=true OR Id=" + valueToBind;
            select.Invoke (dataSource, null);
            return valueToBind;
        }
    }
    return string.Empty;
}
----------------------------------------

 
public static string Verify (string valueToBind, object dataSource) {
            Type type = dataSource.GetType();
            MethodInfo select = type.GetMethod("Select");
            PropertyInfo parameters = type.GetProperty("Parameters");
            object parameterInstance = parameters?.GetValue(dataSource, null);
            Type typeParams = parameterInstance?.GetType();
            PropertyInfo parameterGetter = typeParams?.GetProperty("Item");
            if (ListContainsValue(baseInstance.GetEntityList(), valueToBind))
                return valueToBind;
            if (select != null && parameterGetter != null) {
                CustomParameter p = parameterGetter.GetValue(parameterInstance, new object[] {"WhereClause"}) as CustomParameter;
                if (p != null) {
                    p.Value = "IsActive=true OR Id=" + valueToBind;
                    select.Invoke(dataSource, null);
                    return valueToBind;
                }
            }
            return string.Empty;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
279
6
Gpt3D_Clone279_6.cs 1 23
Gpt3D_Clone279_6.cs 24 48
----------------------------------------

public static string Verify (string valueToBind, object dataSource) {
    Type type = dataSource.GetType ();
    MethodInfo select = type.GetMethod ("Select");
    PropertyInfo parameters = type.GetProperty ("Parameters");
    PropertyInfo parameterGetter = null;
    object parametersInstance = null;
    if (parameters != null) {
        parametersInstance = parameters.GetValue (dataSource, null);
        type = parametersInstance.GetType ();
        parameterGetter = type.GetProperty ("Item");
    }
    if (select != null && parameters != null && parameterGetter != null) {
        if (ListContainsValue (baseInstance.GetEntityList (), valueToBind))
            return valueToBind;
        CustomParameter p = parameterGetter.GetValue (parametersInstance, new object [] {"WhereClause"}) as CustomParameter;
        if (p != null) {
            p.Value = "IsActive=true OR Id=" + valueToBind;
            select.Invoke (dataSource, null);
            return valueToBind;
        }
    }
    return string.Empty;
}
----------------------------------------

 
public static string Verify (string valueToBind, object dataSource) {
            Type type = dataSource.GetType ();
            MethodInfo select = type.GetMethod ("Select");
            PropertyInfo parameters = type.GetProperty ("Parameters");
            object parameterInstance = parameters?.GetValue (dataSource, null); // Get parameters
            Type typeParams = parameterInstance?.GetType (); //Get parameters type
            PropertyInfo parameterGetter = typeParams?.GetProperty ("Item"); // Get parameters property info
            if (ListContainsValue (baseInstance.GetEntityList (), valueToBind)) { // Check if list contains value
                return valueToBind;
            }
            if (select != null && parameterGetter != null) { //if select and parametergetter exists
                CustomParameter p = parameterGetter.GetValue (parameterInstance, new object [] {"WhereClause"}) as CustomParameter; // Get parameter
                if (p != null) {
                    p.Value = "IsActive=true OR Id=" + valueToBind; // Set parameter
                    select.Invoke (dataSource, null); // Invoke the select method
                    return valueToBind;
                }
            }
            return string.Empty;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
279
8
Gpt3D_Clone279_8.cs 1 23
Gpt3D_Clone279_8.cs 24 47
----------------------------------------

public static string Verify (string valueToBind, object dataSource) {
    Type type = dataSource.GetType ();
    MethodInfo select = type.GetMethod ("Select");
    PropertyInfo parameters = type.GetProperty ("Parameters");
    PropertyInfo parameterGetter = null;
    object parametersInstance = null;
    if (parameters != null) {
        parametersInstance = parameters.GetValue (dataSource, null);
        type = parametersInstance.GetType ();
        parameterGetter = type.GetProperty ("Item");
    }
    if (select != null && parameters != null && parameterGetter != null) {
        if (ListContainsValue (baseInstance.GetEntityList (), valueToBind))
            return valueToBind;
        CustomParameter p = parameterGetter.GetValue (parametersInstance, new object [] {"WhereClause"}) as CustomParameter;
        if (p != null) {
            p.Value = "IsActive=true OR Id=" + valueToBind;
            select.Invoke (dataSource, null);
            return valueToBind;
        }
    }
    return string.Empty;
}
----------------------------------------

 public static string Verify (string valueToBind, object dataSource) {
            Type type = dataSource.GetType();
            MethodInfo select = type.GetMethod("Select");
            PropertyInfo parameters = type.GetProperty("Parameters");
            object parameterInstance = parameters?.GetValue(dataSource, null);
            Type typeParams = parameterInstance?.GetType();
            PropertyInfo parameterGetter = typeParams?.GetProperty("Item");
            if (ListContainsValue(baseInstance.GetEntityList(), valueToBind)) {
                return valueToBind;
            }
            if (select != null && parameterGetter != null) {
                CustomParameter p = parameterGetter.GetValue(parameterInstance, new object[] { "WhereClause" }) as CustomParameter;
                if (p != null) {
                    p.Value = "IsActive=true OR Id=" + valueToBind;
                    select.Invoke(dataSource, null);
                    return valueToBind;
                }
            }
            return string.Empty;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
281
1
Gpt3D_Clone281_1.cs 1 9
Gpt3D_Clone281_1.cs 10 20
----------------------------------------

public override int Read (byte [] buffer, int offset, int count) {
    if (m_buffer == null) {
        m_dataReady.Reset ();
        m_dataReady.WaitOne ();
    }
    Buffer.BlockCopy (m_buffer, m_offset, buffer, offset, (count < m_count) ? count : m_count);
    m_buffer = null;
    return (count < m_count) ? count : m_count;
}
----------------------------------------

  public override int Read (byte [] buffer, int offset, int count) {
        if (m_buffer == null) {
            m_dataReady.WaitOne ();
            ResetDataReadyEvent();
        }
        CopyBytes(m_buffer, m_offset, buffer, offset, count);
        m_buffer = null;
        return (count < m_count) ? count : m_count;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
281
2
Gpt3D_Clone281_2.cs 1 9
Gpt3D_Clone281_2.cs 10 19
----------------------------------------

public override int Read (byte [] buffer, int offset, int count) {
    if (m_buffer == null) {
        m_dataReady.Reset ();
        m_dataReady.WaitOne ();
    }
    Buffer.BlockCopy (m_buffer, m_offset, buffer, offset, (count < m_count) ? count : m_count);
    m_buffer = null;
    return (count < m_count) ? count : m_count;
}
----------------------------------------

  public override int Read (byte [] buffer, int offset, int count) {         
        if (!m_dataReady.WaitOne (0))
            m_dataReady.WaitOne ();
        ResetDataReadyEvent();
        CopyBytes(m_buffer, m_offset, buffer, offset, count);
        m_buffer = null;
        return (count < m_count) ? count : m_count;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
281
3
Gpt3D_Clone281_3.cs 1 9
Gpt3D_Clone281_3.cs 10 20
----------------------------------------

public override int Read (byte [] buffer, int offset, int count) {
    if (m_buffer == null) {
        m_dataReady.Reset ();
        m_dataReady.WaitOne ();
    }
    Buffer.BlockCopy (m_buffer, m_offset, buffer, offset, (count < m_count) ? count : m_count);
    m_buffer = null;
    return (count < m_count) ? count : m_count;
}
----------------------------------------

  public override int Read (byte [] buffer, int offset, int count) {
        while (m_buffer == null) {
            m_dataReady.WaitOne (0);
            m_dataReady.Reset ();
        }
        CopyBytes(m_buffer, m_offset, buffer, offset, count);
        m_buffer = null;
        return (count < m_count) ? count : m_count;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
281
5
Gpt3D_Clone281_5.cs 1 9
Gpt3D_Clone281_5.cs 10 18
----------------------------------------

public override int Read (byte [] buffer, int offset, int count) {
    if (m_buffer == null) {
        m_dataReady.Reset ();
        m_dataReady.WaitOne ();
    }
    Buffer.BlockCopy (m_buffer, m_offset, buffer, offset, (count < m_count) ? count : m_count);
    m_buffer = null;
    return (count < m_count) ? count : m_count;
}
----------------------------------------

  public override int Read (byte [] buffer, int offset, int count) {
        m_dataReady.WaitOne ();
        ReleaseDataReadyEvent();
        CopyBytes(m_buffer, m_offset, buffer, offset, count);
        m_buffer = null;
        return (count < m_count) ? count : m_count;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
281
6
Gpt3D_Clone281_6.cs 1 9
Gpt3D_Clone281_6.cs 10 18
----------------------------------------

public override int Read (byte [] buffer, int offset, int count) {
    if (m_buffer == null) {
        m_dataReady.Reset ();
        m_dataReady.WaitOne ();
    }
    Buffer.BlockCopy (m_buffer, m_offset, buffer, offset, (count < m_count) ? count : m_count);
    m_buffer = null;
    return (count < m_count) ? count : m_count;
}
----------------------------------------

 public override int Read (byte [] buffer, int offset, int count) {         
        m_dataReady.WaitOne ();
        ReleaseDataReadyEvent();
        CopyBytes(m_buffer, m_offset, buffer, offset, count);
        m_buffer = null;
        return (count < m_count) ? count : m_count;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
285
2
Gpt3D_Clone285_2.cs 1 11
Gpt3D_Clone285_2.cs 12 34
----------------------------------------

public VideoFile GetVideoInfo (string inputPath) {
    VideoFile vf = null;
    try {
        vf = new VideoFile (inputPath);
    }
    catch (Exception ex) {
        throw ex;
    }
    GetVideoInfo (vf);
    return vf;
}
----------------------------------------

  public VideoFile GetVideoInfo (string inputPath) 
{
    if (!string.IsNullOrWhiteSpace(inputPath))
    {
        VideoFile vf = null;
        try
        {
            vf = new VideoFile(inputPath);
            GetVideoInfo (vf);
            return vf;
        }
        catch (Exception ex)
        {
            throw new Exception("Error creating file object.", ex);
        }
    }
    else
    {
        throw new ArgumentException("Input path is invalid");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
285
3
Gpt3D_Clone285_3.cs 1 11
Gpt3D_Clone285_3.cs 12 28
----------------------------------------

public VideoFile GetVideoInfo (string inputPath) {
    VideoFile vf = null;
    try {
        vf = new VideoFile (inputPath);
    }
    catch (Exception ex) {
        throw ex;
    }
    GetVideoInfo (vf);
    return vf;
}
----------------------------------------

  public VideoFile GetVideoInfo (string inputPath) 
{
    VideoFile vf;
    try 
    {
        vf = new VideoFile(inputPath);
    } 
    catch (Exception ex) 
    {
        throw new Exception("Error creating file object.", ex);
    }
 
    GetVideoInfo (vf);
    return vf;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
285
5
Gpt3D_Clone285_5.cs 1 11
Gpt3D_Clone285_5.cs 12 27
----------------------------------------

public VideoFile GetVideoInfo (string inputPath) {
    VideoFile vf = null;
    try {
        vf = new VideoFile (inputPath);
    }
    catch (Exception ex) {
        throw ex;
    }
    GetVideoInfo (vf);
    return vf;
}
----------------------------------------

  public VideoFile GetVideoInfo (string inputPath) 
{
    VideoFile vf = null;
    try 
    {
        vf = new VideoFile (inputPath);
        GetVideoInfo (vf);
    }
    catch (Exception ex) 
    {
        throw new Exception("Error getting video info.", ex);
    }
    return vf;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
285
7
Gpt3D_Clone285_7.cs 1 11
Gpt3D_Clone285_7.cs 12 20
----------------------------------------

public VideoFile GetVideoInfo (string inputPath) {
    VideoFile vf = null;
    try {
        vf = new VideoFile (inputPath);
    }
    catch (Exception ex) {
        throw ex;
    }
    GetVideoInfo (vf);
    return vf;
}
----------------------------------------

  public VideoFile GetVideoInfo (string inputPath)
{
    VideoFile vf = null;
    vf = new VideoFile(inputPath);
    GetVideoInfo (vf);
    return vf;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
287
1
Gpt3D_Clone287_1.cs 1 17
Gpt3D_Clone287_1.cs 18 36
----------------------------------------

public static string GetFriendlyName (this Type type) {
    string friendlyName = type.Name;
    if (type.IsGenericType) {
        int iBacktick = friendlyName.IndexOf ('`');
        if (iBacktick > 0) {
            friendlyName = friendlyName.Remove (iBacktick);
        }
        friendlyName += "<";
        Type [] typeParameters = type.GetGenericArguments ();
        for (int i = 0; i < typeParameters.Length; ++ i) {
            string typeParamName = GetFriendlyName (typeParameters [i]);
            friendlyName += (i == 0 ? typeParamName : "," + typeParamName);
        }
        friendlyName += "><![CDATA[";
    }
    return friendlyName;
}
----------------------------------------

 public static string GetFriendlyName(this Type type) 
{ 
    string friendlyName = type.ToString(); 
    if (type.IsGenericType) 
    { 
        friendlyName = friendlyName.Substring(0, friendlyName.IndexOf('`')); 
        friendlyName += "<"; 
        Type[] typeParameters = type.GetGenericArguments(); 
        for (int i = 0; i < typeParameters.Length; ++i) 
        { 
            string typeParamName = GetFriendlyName(typeParameters[i]); 
            friendlyName += (i == 0 ? typeParamName : ", " + typeParamName); 
        } 
        friendlyName += "><![CDATA["; 
    } 
    return friendlyName; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
288
0
Gpt3D_Clone288_0.cs 1 12
Gpt3D_Clone288_0.cs 13 29
----------------------------------------

static void Main (string [] args) {
    Random rand = new Random ();
    int number = rand.Next (1, 1000);
    byte [] intBytes = BitConverter.GetBytes (number);
    string answer = "";
    for (int i = 0; i < intBytes.Length; i ++) {
        answer += intBytes [i] + @"\";
    }
    Console.WriteLine (answer);
    Console.WriteLine (number);
    Console.ReadKey ();
}
----------------------------------------

 static void Main (string [] args) {
    Random rand = new Random ();
    int number = rand.Next (1, 1000);
    byte [] intBytes = BitConverter.GetBytes (number);
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < intBytes.Length; i++)
    {
        sb.Append(intBytes[i]);
        sb.Append('\\');
    }
    string answer = sb.ToString().TrimEnd('\\');
    Console.WriteLine (answer);
    Console.WriteLine (number);
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
288
1
Gpt3D_Clone288_1.cs 1 12
Gpt3D_Clone288_1.cs 13 23
----------------------------------------

static void Main (string [] args) {
    Random rand = new Random ();
    int number = rand.Next (1, 1000);
    byte [] intBytes = BitConverter.GetBytes (number);
    string answer = "";
    for (int i = 0; i < intBytes.Length; i ++) {
        answer += intBytes [i] + @"\";
    }
    Console.WriteLine (answer);
    Console.WriteLine (number);
    Console.ReadKey ();
}
----------------------------------------

 static void Main (string [] args) {
    Random rand = new Random ();
    int number = rand.Next (1, 1000);
    byte [] intBytes = BitConverter.GetBytes (number);
    string answer = Io.SeekBinaryString(intBytes);
    Console.WriteLine (answer);
    Console.WriteLine (number);
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
288
2
Gpt3D_Clone288_2.cs 1 12
Gpt3D_Clone288_2.cs 13 23
----------------------------------------

static void Main (string [] args) {
    Random rand = new Random ();
    int number = rand.Next (1, 1000);
    byte [] intBytes = BitConverter.GetBytes (number);
    string answer = "";
    for (int i = 0; i < intBytes.Length; i ++) {
        answer += intBytes [i] + @"\";
    }
    Console.WriteLine (answer);
    Console.WriteLine (number);
    Console.ReadKey ();
}
----------------------------------------

 static void Main (string [] args) {
    Random rand = new Random ();
    int number = rand.Next (1, 1000);
    byte [] intBytes = BitConverter.GetBytes (number);
    string answer = string.Concat(intBytes.Select(e => e + @"\")); 
    Console.WriteLine (answer);
    Console.WriteLine (number);
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
288
3
Gpt3D_Clone288_3.cs 1 12
Gpt3D_Clone288_3.cs 13 23
----------------------------------------

static void Main (string [] args) {
    Random rand = new Random ();
    int number = rand.Next (1, 1000);
    byte [] intBytes = BitConverter.GetBytes (number);
    string answer = "";
    for (int i = 0; i < intBytes.Length; i ++) {
        answer += intBytes [i] + @"\";
    }
    Console.WriteLine (answer);
    Console.WriteLine (number);
    Console.ReadKey ();
}
----------------------------------------

 static void Main (string [] args) {
    Random rand = new Random ();
    int number = rand.Next (1, 1000);
    byte [] intBytes = BitConverter.GetBytes (number);
    String answer = String.Join(@"\", intBytes.Select(e => e.ToString()).ToArray());
    Console.WriteLine (answer);
    Console.WriteLine (number);
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
288
4
Gpt3D_Clone288_4.cs 1 12
Gpt3D_Clone288_4.cs 13 25
----------------------------------------

static void Main (string [] args) {
    Random rand = new Random ();
    int number = rand.Next (1, 1000);
    byte [] intBytes = BitConverter.GetBytes (number);
    string answer = "";
    for (int i = 0; i < intBytes.Length; i ++) {
        answer += intBytes [i] + @"\";
    }
    Console.WriteLine (answer);
    Console.WriteLine (number);
    Console.ReadKey ();
}
----------------------------------------

 static void Main (string [] args) {
    Random rand = new Random ();
    int number = rand.Next (1, 1000);
    byte [] intBytes = BitConverter.GetBytes (number);
    string answer = intBytes
        .Select(x => x.ToString())
        .Aggregate((x,y) => string.Format("{0}{1}\\",x,y));
    Console.WriteLine (answer);
    Console.WriteLine (number);
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
288
5
Gpt3D_Clone288_5.cs 1 12
Gpt3D_Clone288_5.cs 13 23
----------------------------------------

static void Main (string [] args) {
    Random rand = new Random ();
    int number = rand.Next (1, 1000);
    byte [] intBytes = BitConverter.GetBytes (number);
    string answer = "";
    for (int i = 0; i < intBytes.Length; i ++) {
        answer += intBytes [i] + @"\";
    }
    Console.WriteLine (answer);
    Console.WriteLine (number);
    Console.ReadKey ();
}
----------------------------------------

 static void Main (string [] args) {
    Random rand = new Random ();
    int number = rand.Next (1, 1000);
    byte [] intBytes = BitConverter.GetBytes (number);
    string answer = string.Join("\\", intBytes.Select(x => x.ToString()).ToArray());
    Console.WriteLine (answer);
    Console.WriteLine (number);
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
28
0
Gpt3D_Clone28_0.cs 1 11
Gpt3D_Clone28_0.cs 12 27
----------------------------------------

protected override void OnPaint (PaintEventArgs e) {
    LinearGradientBrush brush = null;
    Rectangle rec = new Rectangle (0, 0, this.Width, this.Height);
    double scaleFactor = (((double) Value - (double) Minimum) / ((double) Maximum - (double) Minimum));
    if (ProgressBarRenderer.IsSupported)
        ProgressBarRenderer.DrawHorizontalBar (e.Graphics, rec);
    rec.Width = (int) ((rec.Width * scaleFactor) - 4);
    rec.Height -= 4;
    brush = new LinearGradientBrush (rec, this.ForeColor, this.BackColor, LinearGradientMode.Vertical);
    e.Graphics.FillRectangle (brush, 2, 2, rec.Width, rec.Height);
}
----------------------------------------

 protected override void OnPaint (PaintEventArgs e) {
       Rectangle rec = new Rectangle (0, 0, this.Width, this.Height);
       double scaleFactor = (((double) Value - (double) Minimum) / ((double) Maximum - (double) Minimum));
       if (ProgressBarRenderer.IsSupported)
           ProgressBarRenderer.DrawHorizontalBar (e.Graphics, rec);
       rec.Width = (int) ((rec.Width * scaleFactor) - 4);
       rec.Height -= 4;
       var colorBlend = new ColorBlend();
       colorBlend.IntegralColors(this.ForeColor,this.BackColor);
       using (Brush brush = new System.Drawing.Drawing2D.LinearGradientBrush(rec, colorBlend.Length))
            {
                e.Graphics.FillRectangle(brush, rec);
            }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
28
1
Gpt3D_Clone28_1.cs 1 11
Gpt3D_Clone28_1.cs 12 27
----------------------------------------

protected override void OnPaint (PaintEventArgs e) {
    LinearGradientBrush brush = null;
    Rectangle rec = new Rectangle (0, 0, this.Width, this.Height);
    double scaleFactor = (((double) Value - (double) Minimum) / ((double) Maximum - (double) Minimum));
    if (ProgressBarRenderer.IsSupported)
        ProgressBarRenderer.DrawHorizontalBar (e.Graphics, rec);
    rec.Width = (int) ((rec.Width * scaleFactor) - 4);
    rec.Height -= 4;
    brush = new LinearGradientBrush (rec, this.ForeColor, this.BackColor, LinearGradientMode.Vertical);
    e.Graphics.FillRectangle (brush, 2, 2, rec.Width, rec.Height);
}
----------------------------------------

 protected override void OnPaint (PaintEventArgs e) {
        Rectangle rec = new Rectangle (0, 0, this.Width, this.Height);
        double scaleFactor = (((double) Value - (double) Minimum) / ((double) Maximum - (double) Minimum));
        if (ProgressBarRenderer.IsSupported)
            ProgressBarRenderer.DrawHorizontalBar (e.Graphics, rec);
        rec.Width = (int) ((rec.Width * scaleFactor) - 4);
        rec.Height -= 4;
        Color frontColor = Color.FromArgb(255, this.ForeColor.R, this.ForeColor.G, this.ForeColor.B);
        Color backColor = Color.FromArgb(255, this.BackColor.R, this.BackColor.G, this.BackColor.B);
        using (Brush brush = new System.Drawing.Drawing2D.LinearGradientBrush(rec, frontColor, backColor, LinearGradientMode.Vertical))
        {
            e.Graphics.FillRectangle(brush, 2, 2, rec.Width, rec.Height);
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
28
2
Gpt3D_Clone28_2.cs 1 11
Gpt3D_Clone28_2.cs 12 27
----------------------------------------

protected override void OnPaint (PaintEventArgs e) {
    LinearGradientBrush brush = null;
    Rectangle rec = new Rectangle (0, 0, this.Width, this.Height);
    double scaleFactor = (((double) Value - (double) Minimum) / ((double) Maximum - (double) Minimum));
    if (ProgressBarRenderer.IsSupported)
        ProgressBarRenderer.DrawHorizontalBar (e.Graphics, rec);
    rec.Width = (int) ((rec.Width * scaleFactor) - 4);
    rec.Height -= 4;
    brush = new LinearGradientBrush (rec, this.ForeColor, this.BackColor, LinearGradientMode.Vertical);
    e.Graphics.FillRectangle (brush, 2, 2, rec.Width, rec.Height);
}
----------------------------------------

 protected override void OnPaint (PaintEventArgs e) {
        Rectangle rec = new Rectangle (0, 0, this.Width, this.Height);
        double scaleFactor = (((double) Value - (double) Minimum) / ((double) Maximum - (double) Minimum));
        if (ProgressBarRenderer.IsSupported)
            ProgressBarRenderer.DrawHorizontalBar (e.Graphics, rec);
        rec.Width = (int) ((rec.Width * scaleFactor) - 4);
        rec.Height -= 4;
        var colorBlend = new ColorBlend();
        colorBlend.IntegralColors(this.ForeColor,this.BackColor);
        using (Brush brush = new System.Drawing.Drawing2D.LinearGradientBrush(rec, colorBlend.Length))
        {
            e.Graphics.FillRectangle(brush, 2, 2, rec.Width, rec.Height);
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
292
1
Gpt3D_Clone292_1.cs 1 11
Gpt3D_Clone292_1.cs 12 42
----------------------------------------

public override void WriteJson (JsonWriter writer, object value, JsonSerializer serializer) {
    JToken t = JToken.FromObject (value);
    if (t.Type != JTokenType.Object) {
        t.WriteTo (writer);
        return;
    }
    JObject o = (JObject) t;
    writer.WriteStartObject ();
    WriteJson (writer, o);
    writer.WriteEndObject ();
}
----------------------------------------

 public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
{
    JToken t = JToken.FromObject(value);
    if (t.Type != JTokenType.Object)
    {
        t.WriteTo(writer);
        return;
    }
    JObject o = (JObject)t;
 
    // mark the output for easy debugging
    writer.WriteStartObject();
    string prefix = "obj" + Guid.NewGuid().ToString().Substring(0, 4);
    writer.WritePropertyName(prefix);
    // write inner contents
    if (o.Count > 0)
    {
        writer.WriteStartObject();
        WriteJson(writer, o);
        writer.WriteEndObject();
    }
    else
    {
        writer.WriteNull();
    }
    writer.WriteEndObject();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
292
2
Gpt3D_Clone292_2.cs 1 11
Gpt3D_Clone292_2.cs 12 39
----------------------------------------

public override void WriteJson (JsonWriter writer, object value, JsonSerializer serializer) {
    JToken t = JToken.FromObject (value);
    if (t.Type != JTokenType.Object) {
        t.WriteTo (writer);
        return;
    }
    JObject o = (JObject) t;
    writer.WriteStartObject ();
    WriteJson (writer, o);
    writer.WriteEndObject ();
}
----------------------------------------

 public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) 
{ 
    JToken t = JToken.FromObject(value); 
    if(t.Type != JTokenType.Object) 
    { 
        t.WriteTo(writer); 
        return; 
    }
    JObject o = (JObject)t; 
    
    writer.WriteStartObject(); 
    
    // get all property names
    var propertyNames = o.Properties().Select(x => x.Name);
    
    // create a list of unique property names
    var uniquePropertyNames = propertyNames.Distinct();
    
    // add each unique property name to the json writer
    foreach (string name in uniquePropertyNames)
    { 
         writer.WritePropertyName(name); 
         o[name].WriteTo(writer); 
    } 
    writer.WriteEndObject(); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
292
3
Gpt3D_Clone292_3.cs 1 11
Gpt3D_Clone292_3.cs 12 33
----------------------------------------

public override void WriteJson (JsonWriter writer, object value, JsonSerializer serializer) {
    JToken t = JToken.FromObject (value);
    if (t.Type != JTokenType.Object) {
        t.WriteTo (writer);
        return;
    }
    JObject o = (JObject) t;
    writer.WriteStartObject ();
    WriteJson (writer, o);
    writer.WriteEndObject ();
}
----------------------------------------

 public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
{
    JToken t = JToken.FromObject(value);
    if (t.Type != JTokenType.Object) 
    { 
        t.WriteTo(writer); 
        return; 
    }
    JObject o = (JObject)t; 
    writer.WriteStartObject(); 
 
    var sortedProps = o.Properties().OrderBy(p => p.Name); 
    foreach (var prop in sortedProps) 
    { 
        writer.WritePropertyName(prop.Name); 
        prop.Value.WriteTo(writer); 
    } 
    writer.WriteEndObject();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
292
4
Gpt3D_Clone292_4.cs 1 11
Gpt3D_Clone292_4.cs 12 32
----------------------------------------

public override void WriteJson (JsonWriter writer, object value, JsonSerializer serializer) {
    JToken t = JToken.FromObject (value);
    if (t.Type != JTokenType.Object) {
        t.WriteTo (writer);
        return;
    }
    JObject o = (JObject) t;
    writer.WriteStartObject ();
    WriteJson (writer, o);
    writer.WriteEndObject ();
}
----------------------------------------

 public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) 
{ 
    JToken t = JToken.FromObject(value); 
    if(t.Type != JTokenType.Object) 
    { 
        t.WriteTo(writer); 
        return; 
    }
  
    JObject o = (JObject)t;  
    writer.WriteStartObject(); 
    // for each key and value
    for (int i = 0; i < o.Properties().Count(); i++) 
    { 
        writer.WritePropertyName(o.Properties().ElementAt(i).Name); 
        o.Properties().ElementAt(i).Value.WriteTo(writer); 
    } 
    writer.WriteEndObject(); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
292
5
Gpt3D_Clone292_5.cs 1 11
Gpt3D_Clone292_5.cs 12 31
----------------------------------------

public override void WriteJson (JsonWriter writer, object value, JsonSerializer serializer) {
    JToken t = JToken.FromObject (value);
    if (t.Type != JTokenType.Object) {
        t.WriteTo (writer);
        return;
    }
    JObject o = (JObject) t;
    writer.WriteStartObject ();
    WriteJson (writer, o);
    writer.WriteEndObject ();
}
----------------------------------------

 public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) 
{ 
    JToken t = JToken.FromObject(value); 
    if(t.Type != JTokenType.Object) 
    { 
        t.WriteTo(writer); 
        return; 
    }
  
    JObject o = (JObject)t; 
    writer.WriteStartObject(); 
    foreach (var prop in o.Properties()) 
    { 
         writer.WritePropertyName(prop.Name); 
         prop.Value.WriteTo(writer); 
    } 
    writer.WriteEndObject(); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
292
6
Gpt3D_Clone292_6.cs 1 11
Gpt3D_Clone292_6.cs 12 40
----------------------------------------

public override void WriteJson (JsonWriter writer, object value, JsonSerializer serializer) {
    JToken t = JToken.FromObject (value);
    if (t.Type != JTokenType.Object) {
        t.WriteTo (writer);
        return;
    }
    JObject o = (JObject) t;
    writer.WriteStartObject ();
    WriteJson (writer, o);
    writer.WriteEndObject ();
}
----------------------------------------

 public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
{
    JToken t = JToken.FromObject(value);
    // Check if current token is an object
    if (t.Type != JTokenType.Object)
    {
        t.WriteTo(writer);
        return;
    }
    JObject o = (JObject)t;
    
    // Start writing object
    writer.WriteStartObject();
    foreach (var prop in o.Properties().OrderBy(x => x.Name))
    {
        // Write property name
        writer.WritePropertyName(prop.Name);
       
        // Write property value
        prop.Value.WriteTo(writer);
    }
    // End writing object
    writer.WriteEndObject();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
293
0
Gpt3D_Clone293_0.cs 1 17
Gpt3D_Clone293_0.cs 18 39
----------------------------------------

public static void MoveUp (this TreeNode node) {
    TreeNode parent = node.Parent;
    TreeView view = node.TreeView;
    if (parent != null) {
        int index = parent.Nodes.IndexOf (node);
        if (index > 0) {
            parent.Nodes.RemoveAt (index);
            parent.Nodes.Insert (index - 1, node);
        }
    } else if (node.TreeView.Nodes.Contains (node)) {
        int index = view.Nodes.IndexOf (node);
        if (index > 0) {
            view.Nodes.RemoveAt (index);
            view.Nodes.Insert (index - 1, node);
        }
    }
}
----------------------------------------

public static void MoveUp (this TreeNode node) {
    TreeNode parent = node.Parent;
    TreeView view = node.TreeView;
    if (parent != null) {
        int index = parent.Nodes.IndexOf (node);
        if (index > 0) {
            TreeNode prevNode = parent.Nodes[index - 1];
            parent.Nodes[index-1] = node;
            parent.Nodes[index] = prevNode;
        }
    } else if (view.Nodes.Contains (node)) {
        int index = view.Nodes.IndexOf (node);
        if (index > 0) {
            TreeNode prevNode = view.Nodes[index-1];
            view.Nodes[index - 1] = node;
            view.Nodes[index] = prevNode;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
293
1
Gpt3D_Clone293_1.cs 1 17
Gpt3D_Clone293_1.cs 18 39
----------------------------------------

public static void MoveUp (this TreeNode node) {
    TreeNode parent = node.Parent;
    TreeView view = node.TreeView;
    if (parent != null) {
        int index = parent.Nodes.IndexOf (node);
        if (index > 0) {
            parent.Nodes.RemoveAt (index);
            parent.Nodes.Insert (index - 1, node);
        }
    } else if (node.TreeView.Nodes.Contains (node)) {
        int index = view.Nodes.IndexOf (node);
        if (index > 0) {
            view.Nodes.RemoveAt (index);
            view.Nodes.Insert (index - 1, node);
        }
    }
}
----------------------------------------

public static void MoveUp (this TreeNode node) {
    TreeNode parent = node.Parent;
    TreeView view = node.TreeView;
    if (parent != null) {
        int index = parent.Nodes.IndexOf (node);
        if (index > 0) {
            TreeNode temp = node;
            parent.Nodes[index] = parent.Nodes[index - 1];
            parent.Nodes[index - 1] = temp;
        }
    } else if (view.Nodes.Contains(node)) {
        int index = view.Nodes.IndexOf (node);
        if (index > 0) {
            TreeNode temp = node;
            view.Nodes[index] = view.Nodes[index - 1];
            view.Nodes[index - 1] = temp;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
294
0
Gpt3D_Clone294_0.cs 1 17
Gpt3D_Clone294_0.cs 18 48
----------------------------------------

public static void MoveDown (this TreeNode node) {
    TreeNode parent = node.Parent;
    TreeView view = node.TreeView;
    if (parent != null) {
        int index = parent.Nodes.IndexOf (node);
        if (index < parent.Nodes.Count - 1) {
            parent.Nodes.RemoveAt (index);
            parent.Nodes.Insert (index + 1, node);
        }
    } else if (view != null && view.Nodes.Contains (node)) {
        int index = view.Nodes.IndexOf (node);
        if (index < view.Nodes.Count - 1) {
            view.Nodes.RemoveAt (index);
            view.Nodes.Insert (index + 1, node);
        }
    }
}
----------------------------------------

 public static void MoveDown (this TreeNode node) {
    TreeNode parent = node.Parent;
    TreeView view = node.TreeView;
    if (parent != null)
    {
        int index = parent.Nodes.IndexOf (node);
        if (index < parent.Nodes.Count - 1)
        {
            TreeNode tempNode = parent.Nodes[index+1];
            parent.Nodes.RemoveAt(index);
            parent.Nodes.Insert(index + 1, node);
            parent.Nodes.RemoveAt(index+2);
            parent.Nodes.Insert(index, tempNode);
        }
    }
    else if (view != null && view.Nodes.Contains(node))
    {
        int index = view.Nodes.IndexOf(node);
        if (index < view.Nodes.Count - 1)
        {
            TreeNode tempNode = view.Nodes[index+1];
            view.Nodes.RemoveAt(index);
            view.Nodes.Insert(index + 1, node);
            view.Nodes.RemoveAt(index+2);
            view.Nodes.Insert(index, tempNode);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
295
0
Gpt3D_Clone295_0.cs 1 11
Gpt3D_Clone295_0.cs 12 32
----------------------------------------

static void xn () {
    double r = 3.9;
    double [] xr_arr = new double [100];
    for (double x = 0; x <= 1; x += 0.01) {
        double xr = r * x * (1 - x);
        xr_arr [x] = xr;
        for (int y = 0; y < 23; y ++) {
            Console.WriteLine (xr_arr [y]);
        }
    }
}
----------------------------------------

 static void xn()
{
    double r = 3.9;
    int xr_arr_length = 101;
    double startval = 0;
    double[] xr_arr = new double[xr_arr_length];
    for (int i = 0; i < xr_arr_length; i++)
    {
        double xr = r * startval * (1 - startval);
        xr_arr[i] = xr; 
        startval = startval + 0.01;
    }
    for (int y = 0; y < 23; y++)
    {
        Console.WriteLine(xr_arr[y]);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
295
1
Gpt3D_Clone295_1.cs 1 11
Gpt3D_Clone295_1.cs 12 31
----------------------------------------

static void xn () {
    double r = 3.9;
    double [] xr_arr = new double [100];
    for (double x = 0; x <= 1; x += 0.01) {
        double xr = r * x * (1 - x);
        xr_arr [x] = xr;
        for (int y = 0; y < 23; y ++) {
            Console.WriteLine (xr_arr [y]);
        }
    }
}
----------------------------------------

 static void xn()
{
    double r = 3.9;
    double startval = 0;
    int xr_arr_length = 101;
    double[] xr_arr = new double[xr_arr_length];
    for (int i = 0; i < xr_arr_length; i++)
    {
        double xr = r * startval * (1 - startval);
        xr_arr[i] = xr;
        startval += 0.01;
    }
    for (int y = 0; y < 23; y++)
    {
        Console.WriteLine(xr_arr[y]);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
295
2
Gpt3D_Clone295_2.cs 1 11
Gpt3D_Clone295_2.cs 12 30
----------------------------------------

static void xn () {
    double r = 3.9;
    double [] xr_arr = new double [100];
    for (double x = 0; x <= 1; x += 0.01) {
        double xr = r * x * (1 - x);
        xr_arr [x] = xr;
        for (int y = 0; y < 23; y ++) {
            Console.WriteLine (xr_arr [y]);
        }
    }
}
----------------------------------------

 static void xn()
{
    double r = 3.9;
    int xr_arr_length = 101;
    double startval = 0;
    double[] xr_arr = new double[xr_arr_length];
    for (int i = 0; i < xr_arr_length; i++)
    {
        double xr = r * startval * (1 - startval);
        xr_arr[i] = xr;
        startval = startval + 0.01;
    }
    for(int y = 0; y < 23; y ++)
    {
        Console.WriteLine(xr_arr[y]);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
295
3
Gpt3D_Clone295_3.cs 1 11
Gpt3D_Clone295_3.cs 12 30
----------------------------------------

static void xn () {
    double r = 3.9;
    double [] xr_arr = new double [100];
    for (double x = 0; x <= 1; x += 0.01) {
        double xr = r * x * (1 - x);
        xr_arr [x] = xr;
        for (int y = 0; y < 23; y ++) {
            Console.WriteLine (xr_arr [y]);
        }
    }
}
----------------------------------------

 static void xn()
{
    double r = 3.9;
    double x = 0;
    int xr_arr_length = 101;
    double[] xr_arr = new double[xr_arr_length];
    for (int i = 0; i < xr_arr_length; i++)
    {
        double xr = r * x * (1 - x);
        xr_arr[i] = xr;
        x += 0.01;
    }
    for (int y = 0; y < 23; y++)
    {
        Console.WriteLine(xr_arr[y]);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
295
4
Gpt3D_Clone295_4.cs 1 11
Gpt3D_Clone295_4.cs 12 30
----------------------------------------

static void xn () {
    double r = 3.9;
    double [] xr_arr = new double [100];
    for (double x = 0; x <= 1; x += 0.01) {
        double xr = r * x * (1 - x);
        xr_arr [x] = xr;
        for (int y = 0; y < 23; y ++) {
            Console.WriteLine (xr_arr [y]);
        }
    }
}
----------------------------------------

 static void xn()
{
    double r = 3.9;
    int xr_arr_length = 101;
    double startval = 0;
    double[] xr_arr = new double[xr_arr_length];
    for (int i = 0; i < xr_arr_length; i ++)
    {
        double xr = r * startval * (1 - startval);
        xr_arr[i] = xr;
        startval += 0.01;
    }
    for (int y = 0; y < 23; y++)
    {
        Console.WriteLine(xr_arr[y]);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
299
3
Gpt3D_Clone299_3.cs 1 10
Gpt3D_Clone299_3.cs 11 23
----------------------------------------

public static string CombinePaths (params string [] paths) {
    if (paths == null) {
        return null;
    }
    string currentPath = paths [0];
    for (int i = 1; i < paths.Length; i ++) {
        currentPath = Path.Combine (currentPath, paths [i]);
    }
    return currentPath;
}
----------------------------------------

 public static string CombinePaths ( params string [] paths) {
    if (paths == null) {
        return null;
    }
    string finalPath = "";
    for(int i = 0; i < paths.Length; i++) {
      finalPath += paths[i] + "->";
    }
    finalPath = finalPath.Trim('->');
    return finalPath;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
300
5
Gpt3D_Clone300_5.cs 1 16
Gpt3D_Clone300_5.cs 17 41
----------------------------------------

public static bool HasFlag (this Enum e, Enum flag) {
    if (flag == null) {
        throw new ArgumentNullException ("flag");
    }
    if (e.GetType () != (flag.GetType ())) {
        throw new ArgumentException (string.Format ("The type of the given flag is not of type {0}", e.GetType ()), "flag");
    }
    var typeCode = e.GetTypeCode ();
    if (typeCode == TypeCode.SByte || typeCode == TypeCode.Int16 || typeCode == TypeCode.Int32 || typeCode == TypeCode.Int64) {
        return (Convert.ToInt64 (e) & Convert.ToInt64 (flag)) != 0;
    }
    if (typeCode == TypeCode.Byte || typeCode == TypeCode.UInt16 || typeCode == TypeCode.UInt32 || typeCode == TypeCode.UInt64) {
        return (Convert.ToUInt64 (e) & Convert.ToUInt64 (flag)) != 0;
    }
    throw new Exception (string.Format ("The comparison of the type {0} is not implemented.", e.GetType ().Name));
}
----------------------------------------

 public static bool HasFlag (this Enum e, Enum flag) {
    if (flag == null) {
        throw new ArgumentNullException ("flag");
    }
    if (e.GetType () != flag.GetType ()) {
        throw new ArgumentException (string.Format ("The type of the given flag is not of type {0}", e.GetType ()), "flag");
    }
    if ((e.GetTypeCode () == TypeCode.SByte) || (e.GetTypeCode () == TypeCode.Int16) ||
        (e.GetTypeCode () == TypeCode.Int32) || (e.GetTypeCode () == TypeCode.Int64)) 
    {
        return (Convert.ToInt64 (e) & Convert.ToInt64 (flag)) != 0;
    }
    else if ((e.GetTypeCode () == TypeCode.Byte) || (e.GetTypeCode () == TypeCode.UInt16) ||
             (e.GetTypeCode () == TypeCode.UInt32) || (e.GetTypeCode () == TypeCode.UInt64)) 
    {
        return (Convert.ToUInt64 (e) & Convert.ToUInt64 (flag)) != 0;
    }
    else {
        throw new Exception (string.Format ("The comparison of the type {0} is not implemented.", e.GetType ().Name));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
300
6
Gpt3D_Clone300_6.cs 1 16
Gpt3D_Clone300_6.cs 17 42
----------------------------------------

public static bool HasFlag (this Enum e, Enum flag) {
    if (flag == null) {
        throw new ArgumentNullException ("flag");
    }
    if (e.GetType () != (flag.GetType ())) {
        throw new ArgumentException (string.Format ("The type of the given flag is not of type {0}", e.GetType ()), "flag");
    }
    var typeCode = e.GetTypeCode ();
    if (typeCode == TypeCode.SByte || typeCode == TypeCode.Int16 || typeCode == TypeCode.Int32 || typeCode == TypeCode.Int64) {
        return (Convert.ToInt64 (e) & Convert.ToInt64 (flag)) != 0;
    }
    if (typeCode == TypeCode.Byte || typeCode == TypeCode.UInt16 || typeCode == TypeCode.UInt32 || typeCode == TypeCode.UInt64) {
        return (Convert.ToUInt64 (e) & Convert.ToUInt64 (flag)) != 0;
    }
    throw new Exception (string.Format ("The comparison of the type {0} is not implemented.", e.GetType ().Name));
}
----------------------------------------

 public static bool HasFlag (this Enum e, Enum flag) {
    if (flag == null) {
        throw new ArgumentNullException ("flag");
    }
    if (e.GetType () != flag.GetType ()) {
        throw new ArgumentException (string.Format ("The type of the given flag is not of type {0}", e.GetType ()), "flag");
    }
    switch (e.GetTypeCode ()) {
        case TypeCode.SByte:
        case TypeCode.Int16:
        case TypeCode.Int32:
        case TypeCode.Int64:        
            return (Convert.ToInt64 (e) & Convert.ToInt64 (flag)) != 0;
        case TypeCode.Byte:
        case TypeCode.UInt16:
        case TypeCode.UInt32:
        case TypeCode.UInt64:
            return (Convert.ToUInt64 (e) & Convert.ToUInt64 (flag)) != 0;
    }
    throw new Exception (string.Format ("The comparison of the type {0} is not implemented.", e.GetType ().Name));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
300
7
Gpt3D_Clone300_7.cs 1 16
Gpt3D_Clone300_7.cs 17 35
----------------------------------------

public static bool HasFlag (this Enum e, Enum flag) {
    if (flag == null) {
        throw new ArgumentNullException ("flag");
    }
    if (e.GetType () != (flag.GetType ())) {
        throw new ArgumentException (string.Format ("The type of the given flag is not of type {0}", e.GetType ()), "flag");
    }
    var typeCode = e.GetTypeCode ();
    if (typeCode == TypeCode.SByte || typeCode == TypeCode.Int16 || typeCode == TypeCode.Int32 || typeCode == TypeCode.Int64) {
        return (Convert.ToInt64 (e) & Convert.ToInt64 (flag)) != 0;
    }
    if (typeCode == TypeCode.Byte || typeCode == TypeCode.UInt16 || typeCode == TypeCode.UInt32 || typeCode == TypeCode.UInt64) {
        return (Convert.ToUInt64 (e) & Convert.ToUInt64 (flag)) != 0;
    }
    throw new Exception (string.Format ("The comparison of the type {0} is not implemented.", e.GetType ().Name));
}
----------------------------------------

 public static bool HasFlag (this Enum e, Enum flag) {
    if (flag == null) {
        throw new ArgumentNullException ("flag");
    }
    if (e.GetType () != flag.GetType ()) {
        throw new ArgumentException (string.Format ("The type of the given flag is not of type {0}", e.GetType ()), "flag");
    }
     if (e.GetTypeCode () == TypeCode.SByte || e.GetTypeCode () == TypeCode.Int16 || 
         e.GetTypeCode () == TypeCode.Int32 || e.GetTypeCode () == TypeCode.Int64){
        return (Convert.ToInt64 (e) & Convert.ToInt64 (flag)) != 0;
     } else if (e.GetTypeCode () == TypeCode.Byte || e.GetTypeCode () == TypeCode.UInt16 || 
                e.GetTypeCode () == TypeCode.UInt32 || e.GetTypeCode () == TypeCode.UInt64){
        return (Convert.ToUInt64 (e) & Convert.ToUInt64 (flag)) != 0;
     }
     throw new Exception (string.Format ("The comparison of the type {0} is not implemented.", e.GetType ().Name));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
301
0
Gpt3D_Clone301_0.cs 1 19
Gpt3D_Clone301_0.cs 20 37
----------------------------------------

protected void Button1_Click (object sender, EventArgs e) {
    try {
        using (MySqlCommand SelectCommand = new MySqlCommand ("select count(*) from films.user where user_name=@username AND password = @password", cs))
        {
            SelectCommand.Parameters.AddWithValue ("@username", username.Text);
            SelectCommand.Parameters.AddWithValue ("@password", password.Text);
            cs.Open ();
            int count = (int) SelectCommand.ExecuteScalar ();
            if (count == 1) {
                Response.Write (@"<script language='javascript'>alert('wow your in !!');</script>");
            } else if (count > 1) {
                Response.Write (@"<script language='javascript'>alert('duplicate');</script>");
            } else
                Response.Write (@"<script language='javascript'>alert('wrong password');</script>");
        }}
    catch (Exception ex) {
        Response.Write (@"<script language='javascript'>alert(ex.message);</script>");
    }
}
----------------------------------------

 protected void Button1_Click (object sender, EventArgs e) {
        using (MySqlCommand SelectCommand = new MySqlCommand ("SELECT COUNT(*) FROM films.user WHERE user_name = @username AND password = @password", cs))
        {
            SelectCommand.Parameters.AddWithValue ("@username", username.Text);
            SelectCommand.Parameters.AddWithValue ("@password", password.Text);
            cs.Open ();
            int count = (int) SelectCommand.ExecuteScalar ();
            if (count == 1) {
                Toast.MakeText(this,"Wow you're in!", ToastLength.Short).Show();
            } else if (count > 1) {
                Toast.MakeText(this,"Duplicates", ToastLength.Short).Show();
            } else
                Toast.MakeText(this,"Wrong Password!", ToastLength.Short).Show();
        }
        
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
301
1
Gpt3D_Clone301_1.cs 1 19
Gpt3D_Clone301_1.cs 20 37
----------------------------------------

protected void Button1_Click (object sender, EventArgs e) {
    try {
        using (MySqlCommand SelectCommand = new MySqlCommand ("select count(*) from films.user where user_name=@username AND password = @password", cs))
        {
            SelectCommand.Parameters.AddWithValue ("@username", username.Text);
            SelectCommand.Parameters.AddWithValue ("@password", password.Text);
            cs.Open ();
            int count = (int) SelectCommand.ExecuteScalar ();
            if (count == 1) {
                Response.Write (@"<script language='javascript'>alert('wow your in !!');</script>");
            } else if (count > 1) {
                Response.Write (@"<script language='javascript'>alert('duplicate');</script>");
            } else
                Response.Write (@"<script language='javascript'>alert('wrong password');</script>");
        }}
    catch (Exception ex) {
        Response.Write (@"<script language='javascript'>alert(ex.message);</script>");
    }
}
----------------------------------------

 protected void Button1_Click (object sender, EventArgs e) {
        using (MySqlCommand SelectCommand = new MySqlCommand ("SELECT COUNT(*) FROM films.user WHERE user_name = @username AND password = @password", cs))
        {
            SelectCommand.Parameters.AddWithValue ("@username", username.Text);
            SelectCommand.Parameters.AddWithValue ("@password", password.Text);
            cs.Open ();
            int count = (int) SelectCommand.ExecuteScalar ();
            if (count == 1) {
                System.Windows.Forms.MessageBox.Show("Wow! You're in!");
            } else if (count > 1) {
                System.Windows.Forms.MessageBox.Show("Duplicate!");
            } else
                System.Windows.Forms.MessageBox.Show("Wrong password!");
        }
        
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
301
2
Gpt3D_Clone301_2.cs 1 19
Gpt3D_Clone301_2.cs 20 36
----------------------------------------

protected void Button1_Click (object sender, EventArgs e) {
    try {
        using (MySqlCommand SelectCommand = new MySqlCommand ("select count(*) from films.user where user_name=@username AND password = @password", cs))
        {
            SelectCommand.Parameters.AddWithValue ("@username", username.Text);
            SelectCommand.Parameters.AddWithValue ("@password", password.Text);
            cs.Open ();
            int count = (int) SelectCommand.ExecuteScalar ();
            if (count == 1) {
                Response.Write (@"<script language='javascript'>alert('wow your in !!');</script>");
            } else if (count > 1) {
                Response.Write (@"<script language='javascript'>alert('duplicate');</script>");
            } else
                Response.Write (@"<script language='javascript'>alert('wrong password');</script>");
        }}
    catch (Exception ex) {
        Response.Write (@"<script language='javascript'>alert(ex.message);</script>");
    }
}
----------------------------------------

  protected void Button1_Click (object sender, EventArgs e) {
        using (MySqlCommand SelectCommand = new MySqlCommand ("SELECT COUNT(*) FROM films.user WHERE user_name = @username AND password = @password", cs))
        {
            SelectCommand.Parameters.AddWithValue ("@username", username.Text);
            SelectCommand.Parameters.AddWithValue ("@password", password.Text);
            cs.Open ();
            int count = (int) SelectCommand.ExecuteScalar ();
            if (count == 1) {
                MessageBox.Show ("Wow you're in!", "Success!");
            } else if (count > 1) {
                MessageBox.Show ("Duplicates", "Error!");
            } else
                MessageBox.Show ("Wrong Password!", "Error!");
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
301
3
Gpt3D_Clone301_3.cs 1 19
Gpt3D_Clone301_3.cs 20 37
----------------------------------------

protected void Button1_Click (object sender, EventArgs e) {
    try {
        using (MySqlCommand SelectCommand = new MySqlCommand ("select count(*) from films.user where user_name=@username AND password = @password", cs))
        {
            SelectCommand.Parameters.AddWithValue ("@username", username.Text);
            SelectCommand.Parameters.AddWithValue ("@password", password.Text);
            cs.Open ();
            int count = (int) SelectCommand.ExecuteScalar ();
            if (count == 1) {
                Response.Write (@"<script language='javascript'>alert('wow your in !!');</script>");
            } else if (count > 1) {
                Response.Write (@"<script language='javascript'>alert('duplicate');</script>");
            } else
                Response.Write (@"<script language='javascript'>alert('wrong password');</script>");
        }}
    catch (Exception ex) {
        Response.Write (@"<script language='javascript'>alert(ex.message);</script>");
    }
}
----------------------------------------

 protected void Button1_Click (object sender, EventArgs e) {
        using (MySqlCommand SelectCommand = new MySqlCommand ("SELECT COUNT(*) FROM films.user WHERE user_name = @username AND password = @password", cs))
        {
            SelectCommand.Parameters.AddWithValue ("@username", username.Text);
            SelectCommand.Parameters.AddWithValue ("@password", password.Text);
            cs.Open ();
            int count = (int) SelectCommand.ExecuteScalar ();
            if (count == 1) {
                Snackbar.make(view, "Wow You're In!", Snackbar.LENGTH_SHORT).show();
            } else if (count > 1) {
                Snackbar.make(view, "Duplicates", Snackbar.LENGTH_SHORT).show();
            } else
                Snackbar.make(view, "Wrong Password!", Snackbar.LENGTH_SHORT).show();
        }
        
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
301
4
Gpt3D_Clone301_4.cs 1 19
Gpt3D_Clone301_4.cs 20 36
----------------------------------------

protected void Button1_Click (object sender, EventArgs e) {
    try {
        using (MySqlCommand SelectCommand = new MySqlCommand ("select count(*) from films.user where user_name=@username AND password = @password", cs))
        {
            SelectCommand.Parameters.AddWithValue ("@username", username.Text);
            SelectCommand.Parameters.AddWithValue ("@password", password.Text);
            cs.Open ();
            int count = (int) SelectCommand.ExecuteScalar ();
            if (count == 1) {
                Response.Write (@"<script language='javascript'>alert('wow your in !!');</script>");
            } else if (count > 1) {
                Response.Write (@"<script language='javascript'>alert('duplicate');</script>");
            } else
                Response.Write (@"<script language='javascript'>alert('wrong password');</script>");
        }}
    catch (Exception ex) {
        Response.Write (@"<script language='javascript'>alert(ex.message);</script>");
    }
}
----------------------------------------

 protected void Button1_Click (object sender, EventArgs e) {
        using (MySqlCommand SelectCommand = new MySqlCommand ("SELECT COUNT(*) FROM films.user WHERE user_name = @username AND password = @password", cs))
        {
            SelectCommand.Parameters.AddWithValue ("@username", username.Text);
            SelectCommand.Parameters.AddWithValue ("@password", password.Text);
            cs.Open ();
            int count = (int) SelectCommand.ExecuteScalar ();
            if (count == 1) {
                ShowMessageDialog ("Wow you're in!");
            } else if (count > 1) {
                ShowMessageDialog ("Duplicates");
            } else
                ShowMessageDialog ("Wrong Password!");
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
301
5
Gpt3D_Clone301_5.cs 1 19
Gpt3D_Clone301_5.cs 20 36
----------------------------------------

protected void Button1_Click (object sender, EventArgs e) {
    try {
        using (MySqlCommand SelectCommand = new MySqlCommand ("select count(*) from films.user where user_name=@username AND password = @password", cs))
        {
            SelectCommand.Parameters.AddWithValue ("@username", username.Text);
            SelectCommand.Parameters.AddWithValue ("@password", password.Text);
            cs.Open ();
            int count = (int) SelectCommand.ExecuteScalar ();
            if (count == 1) {
                Response.Write (@"<script language='javascript'>alert('wow your in !!');</script>");
            } else if (count > 1) {
                Response.Write (@"<script language='javascript'>alert('duplicate');</script>");
            } else
                Response.Write (@"<script language='javascript'>alert('wrong password');</script>");
        }}
    catch (Exception ex) {
        Response.Write (@"<script language='javascript'>alert(ex.message);</script>");
    }
}
----------------------------------------

 protected void Button1_Click (object sender, EventArgs e) {
        using (MySqlCommand SelectCommand = new MySqlCommand ("SELECT COUNT(*) FROM films.user WHERE user_name = @username AND password = @password", cs))
        {
            SelectCommand.Parameters.AddWithValue ("@username", username.Text);
            SelectCommand.Parameters.AddWithValue ("@password", password.Text);
            cs.Open ();
            int count = (int) SelectCommand.ExecuteScalar ();
            if (count == 1) {
                System.Windows.Forms.MessageBox.Show("Wow you're in!");
            } else if (count > 1) {
                System.Windows.Forms.MessageBox.Show("Duplicates");
            } else
                System.Windows.Forms.MessageBox.Show("Wrong Password!");
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
303
1
Gpt3D_Clone303_1.cs 1 22
Gpt3D_Clone303_1.cs 23 72
----------------------------------------

public static bool AreSame (Type sourceType, Type destinationType) {
    if (sourceType == null || destinationType == null) {
        return false;
    }
    if (sourceType == destinationType) {
        return true;
    }
    Type tempDestinationType = destinationType;
    while (tempDestinationType.BaseType != typeof (object)) {
        tempDestinationType = tempDestinationType.BaseType;
    }
    if (tempDestinationType.IsAssignableFrom (sourceType)) {
        return true;
    }
    var query = from d in destinationType.GetInterfaces ()
        join s in sourceType.GetInterfaces () on d.Name equals s.Name
        select s;
    if (query != Enumerable.Empty < Type > ()) {
        return true;
    }
    return false;
}
----------------------------------------

 public static bool AreSame(Type sourceType, Type destinationType)
{
    // Check if the two types are null.
    if (sourceType == null || destinationType == null)
    {
        return false;
    }
 
    // Check if the two types are the same type.
    if (sourceType == destinationType)
    {
        return true;
    }
 
    // Check if destination type is assignable from source type.
    if (destinationType.IsAssignableFrom(sourceType))
    {
        return true;
    }
 
    // Iterate through source and destination types.
    Type tempTypeSrc = sourceType;
    Type tempTypeDest = destinationType;
 
    // Check if base type of source and destination types are the same.
    while (tempTypeSrc.BaseType != typeof(object))
    {
        if (tempTypeSrc == tempTypeDest)
        {
            return true;
        }
        tempTypeSrc = tempTypeSrc.BaseType;
    }
 
    // Check if interfaces of source and destination types are the same.
    foreach (Type typeSource in sourceType.GetInterfaces())
    {
        foreach (Type typeDestination in destinationType.GetInterfaces())
        {
            // Check if name of interface of source and destination are the same.
            if (typeSource.Name == typeDestination.Name)
            {
                return true;
            }
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
303
2
Gpt3D_Clone303_2.cs 1 22
Gpt3D_Clone303_2.cs 23 57
----------------------------------------

public static bool AreSame (Type sourceType, Type destinationType) {
    if (sourceType == null || destinationType == null) {
        return false;
    }
    if (sourceType == destinationType) {
        return true;
    }
    Type tempDestinationType = destinationType;
    while (tempDestinationType.BaseType != typeof (object)) {
        tempDestinationType = tempDestinationType.BaseType;
    }
    if (tempDestinationType.IsAssignableFrom (sourceType)) {
        return true;
    }
    var query = from d in destinationType.GetInterfaces ()
        join s in sourceType.GetInterfaces () on d.Name equals s.Name
        select s;
    if (query != Enumerable.Empty < Type > ()) {
        return true;
    }
    return false;
}
----------------------------------------

 public static bool AreSame(Type sourceType, Type destinationType)
{
    if (sourceType == null || destinationType == null) 
    {
        return false;
    }
    if (sourceType == destinationType) 
    {
        return true;
    }
    Type dType = destinationType;
    while (dType.BaseType != typeof(object)) 
    {
        if (dType.BaseType == sourceType) 
        {
            return true;
        }
        dType = dType.BaseType;
    }
    Type[] sourceInterfaces = sourceType.GetInterfaces();
    Type[] destInterfaces = destinationType.GetInterfaces();
    foreach (Type sType in sourceInterfaces) 
    {
        foreach (Type dType in destInterfaces) 
        {
            if (sType.Name == dType.Name) 
            {
                return true;
            }
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
303
4
Gpt3D_Clone303_4.cs 1 22
Gpt3D_Clone303_4.cs 23 53
----------------------------------------

public static bool AreSame (Type sourceType, Type destinationType) {
    if (sourceType == null || destinationType == null) {
        return false;
    }
    if (sourceType == destinationType) {
        return true;
    }
    Type tempDestinationType = destinationType;
    while (tempDestinationType.BaseType != typeof (object)) {
        tempDestinationType = tempDestinationType.BaseType;
    }
    if (tempDestinationType.IsAssignableFrom (sourceType)) {
        return true;
    }
    var query = from d in destinationType.GetInterfaces ()
        join s in sourceType.GetInterfaces () on d.Name equals s.Name
        select s;
    if (query != Enumerable.Empty < Type > ()) {
        return true;
    }
    return false;
}
----------------------------------------

 public static bool AreSame(Type sourceType, Type destinationType)
{
    if (sourceType == null || destinationType == null)
    {
        return false;
    }
    if (sourceType == destinationType)
    {
        return true;
    }
    Type tempDestinationType = destinationType;
    while (tempDestinationType.BaseType != typeof(object))
    {
        if (sourceType == tempDestinationType.BaseType)
        {
            return true;
        }
        tempDestinationType = tempDestinationType.BaseType;
    }
    Type[] interfaces = destinationType.GetInterfaces();
    foreach (Type type in interfaces)
    {
        if (sourceType.GetInterfaces().Contains(type) == true)
        {
            return true;
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
307
1
Gpt3D_Clone307_1.cs 1 9
Gpt3D_Clone307_1.cs 10 21
----------------------------------------

public static void Main () {
    int a = 1234;
    int b = 4321;
    Console.WriteLine ("Before: a {0} and b {1}", a, b);
    b = b - a;
    a = a + b;
    b = a - b;
    Console.WriteLine ("After: a {0} and b {1}", a, b);
}
----------------------------------------

 public static void Main () {
         int a = 1234;
         int b = 4321;
         Console.WriteLine ("Before: a {0} and b {1}", a, b);
         b = b - a;
         a = a ^ b;
         b = a ^ b;
         a = a ^ b;
         Console.WriteLine ("After: a {0} and b {1}", a, b);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
307
2
Gpt3D_Clone307_2.cs 1 9
Gpt3D_Clone307_2.cs 10 20
----------------------------------------

public static void Main () {
    int a = 1234;
    int b = 4321;
    Console.WriteLine ("Before: a {0} and b {1}", a, b);
    b = b - a;
    a = a + b;
    b = a - b;
    Console.WriteLine ("After: a {0} and b {1}", a, b);
}
----------------------------------------

 public static void Main () {
         int a = 1234;
         int b = 4321;
         Console.WriteLine ("Before: a {0} and b {1}", a, b);
         a *= 2;
         b = (a - b) / 2;
         a = a - b;
         Console.WriteLine ("After: a {0} and b {1}", a, b);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
307
3
Gpt3D_Clone307_3.cs 1 9
Gpt3D_Clone307_3.cs 10 20
----------------------------------------

public static void Main () {
    int a = 1234;
    int b = 4321;
    Console.WriteLine ("Before: a {0} and b {1}", a, b);
    b = b - a;
    a = a + b;
    b = a - b;
    Console.WriteLine ("After: a {0} and b {1}", a, b);
}
----------------------------------------

 public static void Main () {
         int a = 1234;
         int b = 4321;
         Console.WriteLine ("Before: a {0} and b {1}", a, b);
         b = b^a;//this is using bitwise XOR
         a = a^b;
         b = a^b;
         Console.WriteLine ("After: a {0} and b {1}", a, b);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
307
4
Gpt3D_Clone307_4.cs 1 9
Gpt3D_Clone307_4.cs 10 19
----------------------------------------

public static void Main () {
    int a = 1234;
    int b = 4321;
    Console.WriteLine ("Before: a {0} and b {1}", a, b);
    b = b - a;
    a = a + b;
    b = a - b;
    Console.WriteLine ("After: a {0} and b {1}", a, b);
}
----------------------------------------

 public static void Main () {
         int a = 1234;
         int b = 4321;
         Console.WriteLine ("Before: a {0} and b {1}", a, b);
         b = b - (a*2 -b);
         a = a + (b*2 - a);
         Console.WriteLine ("After: a {0} and b {1}", a, b);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
307
5
Gpt3D_Clone307_5.cs 1 9
Gpt3D_Clone307_5.cs 10 19
----------------------------------------

public static void Main () {
    int a = 1234;
    int b = 4321;
    Console.WriteLine ("Before: a {0} and b {1}", a, b);
    b = b - a;
    a = a + b;
    b = a - b;
    Console.WriteLine ("After: a {0} and b {1}", a, b);
}
----------------------------------------

 public static void Main () {
         int a = 1234;
         int b = 4321;
         Console.WriteLine ("Before: a {0} and b {1}", a, b);
         b = a * b / a;
         a = a * b / b;
         Console.WriteLine ("After: a {0} and b {1}", a, b);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
307
6
Gpt3D_Clone307_6.cs 1 9
Gpt3D_Clone307_6.cs 10 19
----------------------------------------

public static void Main () {
    int a = 1234;
    int b = 4321;
    Console.WriteLine ("Before: a {0} and b {1}", a, b);
    b = b - a;
    a = a + b;
    b = a - b;
    Console.WriteLine ("After: a {0} and b {1}", a, b);
}
----------------------------------------

 public static void Main () {
         int a = 1234;
         int b = 4321;
         Console.WriteLine ("Before: a {0} and b {1}", a, b);
         b = b * a / a;
         a = a * b / b;
         Console.WriteLine ("After: a {0} and b {1}", a, b);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
307
7
Gpt3D_Clone307_7.cs 1 9
Gpt3D_Clone307_7.cs 10 18
----------------------------------------

public static void Main () {
    int a = 1234;
    int b = 4321;
    Console.WriteLine ("Before: a {0} and b {1}", a, b);
    b = b - a;
    a = a + b;
    b = a - b;
    Console.WriteLine ("After: a {0} and b {1}", a, b);
}
----------------------------------------

 public static void Main () {
         int a = 1234;
         int b = 4321;
         Console.WriteLine ("Before: a {0} and b {1}", a, b);
         b = b + (a = a + b) - b;
         Console.WriteLine ("After: a {0} and b {1}", a, b);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
309
4
Gpt3D_Clone309_4.cs 1 11
Gpt3D_Clone309_4.cs 12 26
----------------------------------------

public override void WriteJson (JsonWriter writer, object value, JsonSerializer serializer) {
    var contextBase = value as ContextBase;
    var valueToken = JToken.FromObject (value, new ForcedObjectSerializer ());
    if (contextBase.Properties != null) {
        var propertiesToken = JToken.FromObject (contextBase.Properties);
        foreach (var property in propertiesToken.Children < JProperty > ()) {
            valueToken [property.Name] = property.Value;
        }
    }
    valueToken.WriteTo (writer);
}
----------------------------------------

 public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
{
            var contextBase = value as ContextBase;
            if (contextBase.Properties != null) 
            {
                var jsonObject = JObject.FromObject(contextBase.Properties);
                foreach (var property in contextBase.Properties)
                {
                    jsonObject.Add(property.Name, JToken.FromObject(property.Value, serializer)); 
                }
                jsonObject.WriteTo(writer);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
309
5
Gpt3D_Clone309_5.cs 1 11
Gpt3D_Clone309_5.cs 12 26
----------------------------------------

public override void WriteJson (JsonWriter writer, object value, JsonSerializer serializer) {
    var contextBase = value as ContextBase;
    var valueToken = JToken.FromObject (value, new ForcedObjectSerializer ());
    if (contextBase.Properties != null) {
        var propertiesToken = JToken.FromObject (contextBase.Properties);
        foreach (var property in propertiesToken.Children < JProperty > ()) {
            valueToken [property.Name] = property.Value;
        }
    }
    valueToken.WriteTo (writer);
}
----------------------------------------

 public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
{
            var contextBase = value as ContextBase;
            var valueToken = JToken.FromObject(value, new ForcedObjectSerializer());
            if (contextBase.Properties != null) 
            {
                foreach (var property in contextBase.Properties)
                {
                    valueToken[property.Name] = property.Value;
                }
                serializer.Serialize(writer, valueToken);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
309
9
Gpt3D_Clone309_9.cs 1 11
Gpt3D_Clone309_9.cs 12 25
----------------------------------------

public override void WriteJson (JsonWriter writer, object value, JsonSerializer serializer) {
    var contextBase = value as ContextBase;
    var valueToken = JToken.FromObject (value, new ForcedObjectSerializer ());
    if (contextBase.Properties != null) {
        var propertiesToken = JToken.FromObject (contextBase.Properties);
        foreach (var property in propertiesToken.Children < JProperty > ()) {
            valueToken [property.Name] = property.Value;
        }
    }
    valueToken.WriteTo (writer);
}
----------------------------------------

 public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
{
                var contextBase = value as ContextBase;
                if (contextBase.Properties != null) 
                {
                    var propertiesToken = JToken.FromObject(contextBase.Properties);
                    foreach (var property in propertiesToken.Children<JProperty>())
                    {
                        serializer.Serialize(writer, contextBase.Properties[property.Name] = property.Value);
                    }
                }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
311
4
Gpt3D_Clone311_4.cs 1 20
Gpt3D_Clone311_4.cs 21 36
----------------------------------------

public static string Encrypt (string strPlainText) {
    System.Text.Encoding enc = System.Text.Encoding.UTF8;
    System.Security.Cryptography.RijndaelManaged objRijndael = new System.Security.Cryptography.RijndaelManaged ();
    byte [] baCipherTextBuffer = null;
    byte [] baPlainTextBuffer = null;
    byte [] baEncryptionKey = null;
    byte [] baInitializationVector = null;
    objRijndael.Key = HexStringToByteArray (strKey);
    objRijndael.IV = HexStringToByteArray (strIV);
    baEncryptionKey = objRijndael.Key;
    baInitializationVector = objRijndael.IV;
    System.Security.Cryptography.ICryptoTransform ifaceAESencryptor = objRijndael.CreateEncryptor (baEncryptionKey, baInitializationVector);
    System.IO.MemoryStream msEncrypt = new System.IO.MemoryStream ();
    System.Security.Cryptography.CryptoStream csEncrypt = new System.Security.Cryptography.CryptoStream (msEncrypt, ifaceAESencryptor, System.Security.Cryptography.CryptoStreamMode.Write);
    baPlainTextBuffer = enc.GetBytes (strPlainText);
    csEncrypt.Write (baPlainTextBuffer, 0, baPlainTextBuffer.Length);
    csEncrypt.FlushFinalBlock ();
    baCipherTextBuffer = msEncrypt.ToArray ();
    return ByteArrayToHexString (baCipherTextBuffer);
}
----------------------------------------

 public static string Encrypt (string strPlainText) {
     System.Text.Encoding enc = System.Text.Encoding.UTF8;
     System.Security.Cryptography.RijndaelManaged objRijndael = new System.Security.Cryptography.RijndaelManaged();
     byte[] baPlainTextBuffer = enc.GetBytes(strPlainText);
     objRijndael.Key = HexStringToByteArray(strKey);
     objRijndael.IV = HexStringToByteArray(strIV);
     System.Security.Cryptography.ICryptoTransform ifaceAESencryptor = objRijndael.CreateEncryptor(objRijndael.Key, objRijndael.IV);
     System.IO.MemoryStream msEncrypt = new System.IO.MemoryStream();
     System.Security.Cryptography.CryptoStream csEncrypt = new System.Security.Cryptography.CryptoStream(msEncrypt, ifaceAESencryptor, System.Security.Cryptography.CryptoStreamMode.Write);
     csEncrypt.Write(baPlainTextBuffer, 0, baPlainTextBuffer.Length);
     csEncrypt.FlushFinalBlock();
     byte[] baCipherTextBuffer = msEncrypt.ToArray();
     return ByteArrayToHexString(baCipherTextBuffer);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
313
7
Gpt3D_Clone313_7.cs 1 9
Gpt3D_Clone313_7.cs 10 24
----------------------------------------

public static double Pow (double basevalue, int exponentvalue) {
    if (exponentvalue == 0) {
        return 1;
    }
    if (exponentvalue == 1) {
        return baseValue;
    }
    return baseValue * Pow (basevalue, exponentvalue - 1);
}
----------------------------------------

  public static double Pow (double baseValue, int exponentValue) {
    if (exponentValue == 0) {
        return 1;
    }
    if (exponentValue == 1) {
        return baseValue;
    }
    double result = 1;
    for (int i = 0; i < exponentValue; i++) {
        result *= baseValue;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
317
2
Gpt3D_Clone317_2.cs 1 12
Gpt3D_Clone317_2.cs 13 30
----------------------------------------

public bool IsCompletedBy (Keys key) {
    if (key == _code [_index]) {
        if (_index == _code.Length - 1) {
            _index = 0;
            return true;
        }
        ++ _index;
    } else {
        _index = 0;
    }
    return false;
}
----------------------------------------

 public bool IsCompletedBy (Keys key)
 {
        if (key == _code[_index])
        {
            if(_index == _code.Length - 1)
                _index = 0;
            else
            _index++;
            
            return true;
        }
        else
        _index = 0;
        
        return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
318
0
Gpt3D_Clone318_0.cs 1 12
Gpt3D_Clone318_0.cs 13 30
----------------------------------------

public bool IsCompletedBy (Keys key) {
    if (key == _code [_index]) {
        if (_index == _code.Length - 1) {
            _index = 0;
            return true;
        }
        ++ _index;
    } else {
        _index = 0;
    }
    return false;
}
----------------------------------------

	public bool IsCompletedBy(Keys key){
    if(_code[_index] == key){
        if(_index == _code.Length -1){
            _index = 0;
            return true;
        }
        else {
            _index++;
        }
    }
    else {
        _index = 0;
        return false;
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
318
1
Gpt3D_Clone318_1.cs 1 12
Gpt3D_Clone318_1.cs 13 30
----------------------------------------

public bool IsCompletedBy (Keys key) {
    if (key == _code [_index]) {
        if (_index == _code.Length - 1) {
            _index = 0;
            return true;
        }
        ++ _index;
    } else {
        _index = 0;
    }
    return false;
}
----------------------------------------

	public bool IsCompletedBy(Keys key){
    if(_code[_index] == key){
        if(_index == _code.Length - 1){
            _index = 0;
            return true;
        }
        else {
            _index++;
        }
    }
    else{
        _index = 0;
        return false;
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
318
2
Gpt3D_Clone318_2.cs 1 12
Gpt3D_Clone318_2.cs 13 30
----------------------------------------

public bool IsCompletedBy (Keys key) {
    if (key == _code [_index]) {
        if (_index == _code.Length - 1) {
            _index = 0;
            return true;
        }
        ++ _index;
    } else {
        _index = 0;
    }
    return false;
}
----------------------------------------

	public bool IsCompletedBy(Keys key){
    if (key == _code[_index]){
        if(_index == _code.Length - 1){
            _index = 0;
            return true;
        }
        else{
            _index++;
        }
    }
    else {
        _index = 0;
        return false;
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
318
3
Gpt3D_Clone318_3.cs 1 12
Gpt3D_Clone318_3.cs 13 30
----------------------------------------

public bool IsCompletedBy (Keys key) {
    if (key == _code [_index]) {
        if (_index == _code.Length - 1) {
            _index = 0;
            return true;
        }
        ++ _index;
    } else {
        _index = 0;
    }
    return false;
}
----------------------------------------

	public bool IsCompletedBy(Keys key){
    if(_code[_index] == key){
        if(_index == _code.Length - 1){
            _index = 0;
            return true;
        }
        else{
            _index += 1;
        }
    }
    else{
        _index = 0;
        return false;
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
318
4
Gpt3D_Clone318_4.cs 1 12
Gpt3D_Clone318_4.cs 13 30
----------------------------------------

public bool IsCompletedBy (Keys key) {
    if (key == _code [_index]) {
        if (_index == _code.Length - 1) {
            _index = 0;
            return true;
        }
        ++ _index;
    } else {
        _index = 0;
    }
    return false;
}
----------------------------------------

	public bool IsCompletedBy(Keys key){
    if (key == _code[_index]){
        if(_index == _code.Length - 1){
            _index = 0;
            return true;
        }
        else{
            _index++;
        }
    }
    else{
        _index = 0;
        return false;
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
319
0
Gpt3D_Clone319_0.cs 1 15
Gpt3D_Clone319_0.cs 16 36
----------------------------------------

public bool IsCompletedBy (Keys key) {
    if (Keys [Position + 1] == key) {
        Position ++;
    } else if (Position == 1 && key == System.Windows.Forms.Keys.Up) {
    } else if (Keys [0] == key) {
        Position = 0;
    } else {
        Position = - 1;
    }
    if (Position == Keys.Count - 1) {
        Position = - 1;
        return true;
    }
    return false;
}
----------------------------------------

 public bool IsCompletedBy(Keys key) {
    bool complete = false;
    if (Position + 1 < Keys.Count){
        if (key == Keys[Position + 1]) {
            Position++;
        } else if (Position == 1 && key == System.Windows.Forms.Keys.Up){
            Position = 0;
        } else if (key == Keys[0]){
            Position = 0;
        } else {
            Position = -1;
        }
        if (Position == Keys.Count - 1){
            complete = true;
            Position = -1;
        }
    }
    return complete;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
319
1
Gpt3D_Clone319_1.cs 1 15
Gpt3D_Clone319_1.cs 16 42
----------------------------------------

public bool IsCompletedBy (Keys key) {
    if (Keys [Position + 1] == key) {
        Position ++;
    } else if (Position == 1 && key == System.Windows.Forms.Keys.Up) {
    } else if (Keys [0] == key) {
        Position = 0;
    } else {
        Position = - 1;
    }
    if (Position == Keys.Count - 1) {
        Position = - 1;
        return true;
    }
    return false;
}
----------------------------------------

 public bool IsCompletedBy(Keys key) {
    if (Keys[Position + 1] == key) {
        Position++;
    }
    
    else if (Position == 1 && key == System.Windows.Forms.Keys.Up) {
        Position = 0;
    }
    else if (key == Keys[0]) {
        Position = 0;
    }
    
    else {
        Position = -1;
    }
    
    bool result = false;
    
    if (Position == Keys.Count - 1) {
        Position = -1;
        result = true; 
    } 
    
    return result; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
319
2
Gpt3D_Clone319_2.cs 1 15
Gpt3D_Clone319_2.cs 16 39
----------------------------------------

public bool IsCompletedBy (Keys key) {
    if (Keys [Position + 1] == key) {
        Position ++;
    } else if (Position == 1 && key == System.Windows.Forms.Keys.Up) {
    } else if (Keys [0] == key) {
        Position = 0;
    } else {
        Position = - 1;
    }
    if (Position == Keys.Count - 1) {
        Position = - 1;
        return true;
    }
    return false;
}
----------------------------------------

 public bool IsCompletedBy(Keys key) {
    bool keys_are_same = false;
    if (key == Keys[Position + 1]) {
        Position++;
    }
    else if (Position == 1 && key == System.Windows.Forms.Keys.Up) {
        Position = 0;
    }
    else if (key == Keys[0]) {
        Position = 0;
    }
    else {
        Position = -1;
    }
    if (Position == Keys.Count - 1){
        Position = -1;
        keys_are_same = true;
    }
    return keys_are_same;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
319
4
Gpt3D_Clone319_4.cs 1 15
Gpt3D_Clone319_4.cs 16 40
----------------------------------------

public bool IsCompletedBy (Keys key) {
    if (Keys [Position + 1] == key) {
        Position ++;
    } else if (Position == 1 && key == System.Windows.Forms.Keys.Up) {
    } else if (Keys [0] == key) {
        Position = 0;
    } else {
        Position = - 1;
    }
    if (Position == Keys.Count - 1) {
        Position = - 1;
        return true;
    }
    return false;
}
----------------------------------------

 public bool IsCompletedBy(Keys key) {
    bool completed = false;
    if (Keys[Position + 1] == key) {
        Position++;
    }
    else if (Position == 1 && key == System.Windows.Forms.Keys.Up) {
        Position = 0;
    }
    else if (key == Keys[0]) {
        Position = 0;
    }
    else {
        Position = -1;
    }
    if (Position == Keys.Count - 1) {
        Position = -1;
        completed = true;
    }
    return completed;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
319
6
Gpt3D_Clone319_6.cs 1 15
Gpt3D_Clone319_6.cs 16 34
----------------------------------------

public bool IsCompletedBy (Keys key) {
    if (Keys [Position + 1] == key) {
        Position ++;
    } else if (Position == 1 && key == System.Windows.Forms.Keys.Up) {
    } else if (Keys [0] == key) {
        Position = 0;
    } else {
        Position = - 1;
    }
    if (Position == Keys.Count - 1) {
        Position = - 1;
        return true;
    }
    return false;
}
----------------------------------------

 public bool IsCompletedBy(Keys key) {
    if ( (Position == 1 && key == System.Windows.Forms.Keys.Up) || (key == Keys[0]) ) {
        Position = 0;
    } 
    else if (Keys[Position + 1] == key) {
        Position++;
    }
    else {
        Position = -1;
    }
    if (Position == Keys.Count - 1) {
        Position = -1;
        return true;
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
31
0
Gpt3D_Clone31_0.cs 1 10
Gpt3D_Clone31_0.cs 11 22
----------------------------------------

protected override void OnPaint (PaintEventArgs e) {
    if (brush == null || brush.Color != this.ForeColor)
        brush = new SolidBrush (this.ForeColor);
    Rectangle rec = new Rectangle (0, 0, this.Width, this.Height);
    if (ProgressBarRenderer.IsSupported)
        ProgressBarRenderer.DrawHorizontalBar (e.Graphics, rec);
    rec.Width = (int) (rec.Width * ((double) Value / Maximum)) - 4;
    rec.Height = rec.Height - 4;
    e.Graphics.FillRectangle (brush, 2, 2, rec.Width, rec.Height);
}
----------------------------------------

 protected override void OnPaint (PaintEventArgs e) {
    if (brush == null || brush.Color != this.ForeColor)
        brush = new SolidBrush (this.ForeColor);
    Rectangle rec = new Rectangle (0, 0, this.Width, this.Height);
    if (ProgressBarRenderer.IsSupported)
        ProgressBarRenderer.DrawHorizontalBar (e.Graphics, rec);
    int width = (int) (rec.Width * ((double) Value / Maximum)) - 4;
    int height = rec.Height - 4;
    e.Graphics.FillRectangle (brush, (this.Width/2) - (width/2) + 1, (this.Height/2) - (height/2) + 1, width, height);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
31
1
Gpt3D_Clone31_1.cs 1 10
Gpt3D_Clone31_1.cs 11 22
----------------------------------------

protected override void OnPaint (PaintEventArgs e) {
    if (brush == null || brush.Color != this.ForeColor)
        brush = new SolidBrush (this.ForeColor);
    Rectangle rec = new Rectangle (0, 0, this.Width, this.Height);
    if (ProgressBarRenderer.IsSupported)
        ProgressBarRenderer.DrawHorizontalBar (e.Graphics, rec);
    rec.Width = (int) (rec.Width * ((double) Value / Maximum)) - 4;
    rec.Height = rec.Height - 4;
    e.Graphics.FillRectangle (brush, 2, 2, rec.Width, rec.Height);
}
----------------------------------------

 protected override void OnPaint (PaintEventArgs e) {
    if (brush == null || brush.Color != this.ForeColor)
        brush = new SolidBrush (this.ForeColor);
    Rectangle rec = new Rectangle (0, 0, this.Width, this.Height);
    if (ProgressBarRenderer.IsSupported)
        ProgressBarRenderer.DrawHorizontalBar (e.Graphics, rec);
    int width = (int) (rec.Width * ((double) Value / Maximum)) - 4;
    int height = rec.Height - 4;
    e.Graphics.FillRectangle (brush, 4, 4, width, height);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
320
1
Gpt3D_Clone320_1.cs 1 26
Gpt3D_Clone320_1.cs 27 54
----------------------------------------

private static void AppendToDocument (string sourcePdfPath1, string sourcePdfPath2, string outputPdfPath) {
    using (var sourceDocumentStream1 = new FileStream (sourcePdfPath1, FileMode.Open))
    {
        using (var sourceDocumentStream2 = new FileStream (sourcePdfPath2, FileMode.Open))
        {
            using (var destinationDocumentStream = new FileStream (outputPdfPath, FileMode.Create))
            {
                var pdfConcat = new PdfConcatenate (destinationDocumentStream);
                var pdfReader = new PdfReader (sourceDocumentStream1);
                var pages = new List < int > ();
                for (int i = 0; i < pdfReader.NumberOfPages; i ++) {
                    pages.Add (i);
                }
                pdfReader.SelectPages (pages);
                pdfConcat.AddPages (pdfReader);
                pdfReader = new PdfReader (sourceDocumentStream2);
                pages = new List < int > ();
                for (int i = 0; i < pdfReader.NumberOfPages; i ++) {
                    pages.Add (i);
                }
                pdfReader.SelectPages (pages);
                pdfConcat.AddPages (pdfReader);
                pdfReader.Close ();
                pdfConcat.Close ();
            }}}
}
----------------------------------------

 private static void AppendToDocument(string sourcePdfPath1, string sourcePdfPath2, string outputPdfPath) {
    using (var sourceDocumentStream1 = new FileStream (sourcePdfPath1, FileMode.Open))
    {
        using (var sourceDocumentStream2 = new FileStream (sourcePdfPath2, FileMode.Open))
        {
            using (var destinationDocumentStream = new FileStream (outputPdfPath, FileMode.Create))
            {
                var pdfConcat = new PdfConcatenate (destinationDocumentStream);
                var pdfReader1 = new PdfReader (sourceDocumentStream1);
                var allPageList1 = ReadAllPageLists(pdfReader1);
                pdfReader1.SelectPages (allPageList1);
                pdfConcat.AddPages (pdfReader1);
                var pdfReader2 = new PdfReader (sourceDocumentStream2);
                var allPageList2 = ReadAllPageLists(pdfReader2);
                pdfReader2.SelectPages (allPageList2);
                pdfConcat.AddPages (pdfReader2);
                pdfReader1.Close ();
                pdfReader2.Close ();
                pdfConcat.Close ();
            }}}}
private static List<int> ReadAllPageLists (PdfReader reader){
    return Enumerable.Range(0, reader.NumberOfPages).ToList();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
320
2
Gpt3D_Clone320_2.cs 1 26
Gpt3D_Clone320_2.cs 27 53
----------------------------------------

private static void AppendToDocument (string sourcePdfPath1, string sourcePdfPath2, string outputPdfPath) {
    using (var sourceDocumentStream1 = new FileStream (sourcePdfPath1, FileMode.Open))
    {
        using (var sourceDocumentStream2 = new FileStream (sourcePdfPath2, FileMode.Open))
        {
            using (var destinationDocumentStream = new FileStream (outputPdfPath, FileMode.Create))
            {
                var pdfConcat = new PdfConcatenate (destinationDocumentStream);
                var pdfReader = new PdfReader (sourceDocumentStream1);
                var pages = new List < int > ();
                for (int i = 0; i < pdfReader.NumberOfPages; i ++) {
                    pages.Add (i);
                }
                pdfReader.SelectPages (pages);
                pdfConcat.AddPages (pdfReader);
                pdfReader = new PdfReader (sourceDocumentStream2);
                pages = new List < int > ();
                for (int i = 0; i < pdfReader.NumberOfPages; i ++) {
                    pages.Add (i);
                }
                pdfReader.SelectPages (pages);
                pdfConcat.AddPages (pdfReader);
                pdfReader.Close ();
                pdfConcat.Close ();
            }}}
}
----------------------------------------

 private static void AppendToDocument(string sourcePdfPath1, string sourcePdfPath2, string outputPdfPath)
{
            using (var sourceDocumentStream1 = new FileStream(sourcePdfPath1, FileMode.Open))
            using (var sourceDocumentStream2 = new FileStream(sourcePdfPath2, FileMode.Open))
            using (var destinationDocumentStream = new FileStream(outputPdfPath, FileMode.Create))
            { 
                var pdfConcatenate = new PdfConcatenate(destinationDocumentStream);
                var pdfReader1 = new PdfReader(sourceDocumentStream1);
                var allPagesList1 = Enumerable.Range(0, pdfReader1.NumberOfPages).ToList();
                pdfReader1.SelectPages(allPagesList1);
                pdfConcatenate.AddPages(pdfReader1);
                var pdfReader2 = new PdfReader(sourceDocumentStream2);
                var allPagesList2 = Enumerable.Range(0, pdfReader2.NumberOfPages).ToList();
                pdfReader2.SelectPages(allPagesList2);
                pdfConcatenate.AddPages(pdfReader2);
                pdfReader1.Close();
                pdfReader2.Close();
                pdfConcatenate.Close();
            }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
320
3
Gpt3D_Clone320_3.cs 1 26
Gpt3D_Clone320_3.cs 27 55
----------------------------------------

private static void AppendToDocument (string sourcePdfPath1, string sourcePdfPath2, string outputPdfPath) {
    using (var sourceDocumentStream1 = new FileStream (sourcePdfPath1, FileMode.Open))
    {
        using (var sourceDocumentStream2 = new FileStream (sourcePdfPath2, FileMode.Open))
        {
            using (var destinationDocumentStream = new FileStream (outputPdfPath, FileMode.Create))
            {
                var pdfConcat = new PdfConcatenate (destinationDocumentStream);
                var pdfReader = new PdfReader (sourceDocumentStream1);
                var pages = new List < int > ();
                for (int i = 0; i < pdfReader.NumberOfPages; i ++) {
                    pages.Add (i);
                }
                pdfReader.SelectPages (pages);
                pdfConcat.AddPages (pdfReader);
                pdfReader = new PdfReader (sourceDocumentStream2);
                pages = new List < int > ();
                for (int i = 0; i < pdfReader.NumberOfPages; i ++) {
                    pages.Add (i);
                }
                pdfReader.SelectPages (pages);
                pdfConcat.AddPages (pdfReader);
                pdfReader.Close ();
                pdfConcat.Close ();
            }}}
}
----------------------------------------

 private static void AppendToDocument(string sourcePdfPath1, string sourcePdfPath2, string outputPdfPath)
{
    using (var sourceDocumentStream1 = new FileStream(sourcePdfPath1, FileMode.Open))
    using (var sourceDocumentStream2 = new FileStream(sourcePdfPath2, FileMode.Open))
    using (var destinationDocumentStream = new FileStream(outputPdfPath, FileMode.Create))
    {
        var pdfConcat = new PdfConcatenate(destinationDocumentStream);
        var sourceDoc1 = new PdfReader(sourceDocumentStream1);
        var allPages1 = GetAllPages(sourceDoc1);
        sourceDoc1.SelectPages(allPages1);
        pdfConcat.AddPages(sourceDoc1);
        var sourceDoc2 = new PdfReader(sourceDocumentStream2);
        var allPages2 = GetAllPages(sourceDoc2);
        sourceDoc2.SelectPages(allPages2);
        pdfConcat.AddPages(sourceDoc2);
        sourceDoc1.Close();
        sourceDoc2.Close();
        pdfConcat.Close();
    }}
            private static List<int> GetAllPages(PdfReader reader)
            {
                return Enumerable.Range(0, reader.NumberOfPages).ToList();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
320
4
Gpt3D_Clone320_4.cs 1 26
Gpt3D_Clone320_4.cs 27 55
----------------------------------------

private static void AppendToDocument (string sourcePdfPath1, string sourcePdfPath2, string outputPdfPath) {
    using (var sourceDocumentStream1 = new FileStream (sourcePdfPath1, FileMode.Open))
    {
        using (var sourceDocumentStream2 = new FileStream (sourcePdfPath2, FileMode.Open))
        {
            using (var destinationDocumentStream = new FileStream (outputPdfPath, FileMode.Create))
            {
                var pdfConcat = new PdfConcatenate (destinationDocumentStream);
                var pdfReader = new PdfReader (sourceDocumentStream1);
                var pages = new List < int > ();
                for (int i = 0; i < pdfReader.NumberOfPages; i ++) {
                    pages.Add (i);
                }
                pdfReader.SelectPages (pages);
                pdfConcat.AddPages (pdfReader);
                pdfReader = new PdfReader (sourceDocumentStream2);
                pages = new List < int > ();
                for (int i = 0; i < pdfReader.NumberOfPages; i ++) {
                    pages.Add (i);
                }
                pdfReader.SelectPages (pages);
                pdfConcat.AddPages (pdfReader);
                pdfReader.Close ();
                pdfConcat.Close ();
            }}}
}
----------------------------------------

 private static void AppendToDocument(string sourcePdfPath1, string sourcePdfPath2, string outputPdfPath)
{
            using (var sourceDocumentStream1 = new FileStream(sourcePdfPath1, FileMode.Open))
            using (var sourceDocumentStream2 = new FileStream(sourcePdfPath2, FileMode.Open))
            using (var destinationDocumentStream = new FileStream(outputPdfPath, FileMode.Create))
            {
                var pdfConcat = new PdfConcatenate(destinationDocumentStream);
                var allPageList1 = ReadAllPages(sourceDocumentStream1);
                var pdfReader1 = new PdfReader(sourceDocumentStream1);
                pdfReader1.SelectPages(allPageList1);
                pdfConcat.AddPages(pdfReader1);
                var allPageList2 = ReadAllPages(sourceDocumentStream2);
                var pdfReader2 = new PdfReader(sourceDocumentStream2);
                pdfReader2.SelectPages(allPageList2);
                pdfConcat.AddPages(pdfReader2);
                pdfReader1.Close();
                pdfReader2.Close();
                pdfConcat.Close();
            }}
    private static List<int> ReadAllPages(FileStream fs)
    {
        var pdfReader = new PdfReader(fs);
        return Enumerable.Range(0, pdfReader.NumberOfPages).ToList();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
320
5
Gpt3D_Clone320_5.cs 1 26
Gpt3D_Clone320_5.cs 27 60
----------------------------------------

private static void AppendToDocument (string sourcePdfPath1, string sourcePdfPath2, string outputPdfPath) {
    using (var sourceDocumentStream1 = new FileStream (sourcePdfPath1, FileMode.Open))
    {
        using (var sourceDocumentStream2 = new FileStream (sourcePdfPath2, FileMode.Open))
        {
            using (var destinationDocumentStream = new FileStream (outputPdfPath, FileMode.Create))
            {
                var pdfConcat = new PdfConcatenate (destinationDocumentStream);
                var pdfReader = new PdfReader (sourceDocumentStream1);
                var pages = new List < int > ();
                for (int i = 0; i < pdfReader.NumberOfPages; i ++) {
                    pages.Add (i);
                }
                pdfReader.SelectPages (pages);
                pdfConcat.AddPages (pdfReader);
                pdfReader = new PdfReader (sourceDocumentStream2);
                pages = new List < int > ();
                for (int i = 0; i < pdfReader.NumberOfPages; i ++) {
                    pages.Add (i);
                }
                pdfReader.SelectPages (pages);
                pdfConcat.AddPages (pdfReader);
                pdfReader.Close ();
                pdfConcat.Close ();
            }}}
}
----------------------------------------

private static void AppendToDocument(string sourcePdfPath1, string sourcePdfPath2, string outputPdfPath) 
{
    using (var sourceDocumentStream1 = new FileStream(sourcePdfPath1, FileMode.Open))
    using (var sourceDocumentStream2 = new FileStream(sourcePdfPath2, FileMode.Open))
    using (var destinationDocumentStream = new FileStream(outputPdfPath, FileMode.Create))
    { 
        var pdfConcatenate = new PdfConcatenate(destinationDocumentStream);
        var pdfReader1 = new PdfReader(sourceDocumentStream1);
        var pageList1 = ReadPages(pdfReader1);
        pdfReader1.SelectPages(pageList1);
        pdfConcatenate.AddPages(pdfReader1);
        var pdfReader2 = new PdfReader(sourceDocumentStream2);
        var pageList2 = ReadPages(pdfReader2);
        pdfReader2.SelectPages(pageList2);
        pdfConcatenate.AddPages(pdfReader2);
        pdfReader1.Close();
        pdfReader2.Close();
        pdfConcatenate.Close();
    }}
        private static List<int> ReadPages(PdfReader reader)
        {
            var pageList = new List<int>();
            for (int i = 0; i < reader.NumberOfPages; i++)
            {
                pageList.Add(i);
            }
            return pageList;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
321
0
Gpt3D_Clone321_0.cs 1 9
Gpt3D_Clone321_0.cs 10 22
----------------------------------------

public void FindPath () {
    ManagementObjectSearcher entity = new ManagementObjectSearcher ("SELECT * FROM Win32_DiskDrive");
    foreach (ManagementObject obj in entity.Get ()) {
        if (obj ["PNPDeviceID"].ToString ().Contains ("USBSTOR")) {
            if (! USBobjects.Contains (obj ["PNPDeviceID"].ToString ()))
                USBobjects.Add (obj ["PNPDeviceID"].ToString ());
        }
    }
}
----------------------------------------

   public void FindPath () {
     ManagementObjectSearcher searcher = new ManagementObjectSearcher("Select * from Win32_DiskDrive");
     foreach (ManagementObject obj in searcher.Get()){
         if (obj["PNPDeviceID"].ToString().Contains("USBSTOR")){
             string usbDevices = obj["PNPDeviceID"].ToString();
             if (! USBobjects.Contains(usbDevices)){
                 USBobjects.Add(usbDevices);
             }
         }
     }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
321
1
Gpt3D_Clone321_1.cs 1 9
Gpt3D_Clone321_1.cs 10 22
----------------------------------------

public void FindPath () {
    ManagementObjectSearcher entity = new ManagementObjectSearcher ("SELECT * FROM Win32_DiskDrive");
    foreach (ManagementObject obj in entity.Get ()) {
        if (obj ["PNPDeviceID"].ToString ().Contains ("USBSTOR")) {
            if (! USBobjects.Contains (obj ["PNPDeviceID"].ToString ()))
                USBobjects.Add (obj ["PNPDeviceID"].ToString ());
        }
    }
}
----------------------------------------

 public void FindPath () {
    ManagementObjectSearcher diskDevices = new ManagementObjectSearcher ("SELECT * FROM Win32_DiskDrive");
    foreach (ManagementObject obj in diskDevices.Get ()) {
        if (obj["PNPDeviceID"].ToString().Contains("USBSTOR")) {
            string usbDevicesList = obj["PNPDeviceID"].ToString();
            if (USBobjects.Find(match => match == usbDevicesList) == null){
                USBobjects.Add(usbDevicesList);
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
322
2
Gpt3D_Clone322_2.cs 1 15
Gpt3D_Clone322_2.cs 16 33
----------------------------------------

public object Convert (object value, Type targetType, object parameter, string language) {
    if (value != null) {
        string source = value.ToString ();
        var ims = new InMemoryRandomAccessStream ();
        var bytes = Convert.FromBase64String (source);
        var dataWriter = new DataWriter (ims);
        dataWriter.WriteBytes (bytes);
        dataWriter.StoreAsync ();
        ims.Seek (0);
        var img = new BitmapImage ();
        img.SetSource (ims);
        return img;
    }
    return null;
}
----------------------------------------

 public object Convert (object value, Type targetType, object parameter, string language) { 
    if (value != null) { 
        byte[] bytes = Convert.FromBase64String(value.ToString()); 
        InMemoryRandomAccessStream ms = new InMemoryRandomAccessStream(); 
        using (DataWriter writer = new DataWriter(ms.GetOutputStreamAt(0))) 
        { 
            writer.WriteBytes(bytes); 
            writer.StoreAsync().GetResults(); 
            ms.FlushAsync().GetResults(); 
        } 
        BitmapImage image = new BitmapImage(); 
        image.SetSource(ms); 
        return image; 
    } 
    return null; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
322
3
Gpt3D_Clone322_3.cs 1 15
Gpt3D_Clone322_3.cs 16 31
----------------------------------------

public object Convert (object value, Type targetType, object parameter, string language) {
    if (value != null) {
        string source = value.ToString ();
        var ims = new InMemoryRandomAccessStream ();
        var bytes = Convert.FromBase64String (source);
        var dataWriter = new DataWriter (ims);
        dataWriter.WriteBytes (bytes);
        dataWriter.StoreAsync ();
        ims.Seek (0);
        var img = new BitmapImage ();
        img.SetSource (ims);
        return img;
    }
    return null;
}
----------------------------------------

 public object Convert (object value, Type targetType, object parameter, string language) { 
    if (value != null) { 
        byte[] bytes = System.Convert.FromBase64String (value.ToString ()); 
        InMemoryRandomAccessStream ras = new InMemoryRandomAccessStream (); 
        DataWriter writer = new DataWriter (ras); 
        writer.WriteBytes (bytes); 
        writer.StoreAsync ().GetResults (); 
        ras.FlushAsync ().GetResults (); 
        BitmapImage image = new BitmapImage (); 
        image.SetSource (ras); 
        return image; 
    } 
    return null; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
322
7
Gpt3D_Clone322_7.cs 1 15
Gpt3D_Clone322_7.cs 16 29
----------------------------------------

public object Convert (object value, Type targetType, object parameter, string language) {
    if (value != null) {
        string source = value.ToString ();
        var ims = new InMemoryRandomAccessStream ();
        var bytes = Convert.FromBase64String (source);
        var dataWriter = new DataWriter (ims);
        dataWriter.WriteBytes (bytes);
        dataWriter.StoreAsync ();
        ims.Seek (0);
        var img = new BitmapImage ();
        img.SetSource (ims);
        return img;
    }
    return null;
}
----------------------------------------

 public object Convert (object value, Type targetType, object parameter, string language) { 
    if (value != null) { 
        byte[] bytes = System.Convert.FromBase64String (value.ToString ()); 
        var img = new BitmapImage (); 
        var ms = new InMemoryRandomAccessStream (); 
        ms.WriteAsync (bytes.AsBuffer ()); 
        ms.FlushAsync ().GetResults (); 
        img.SetSource (ms); 
        return img; 
    } 
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
324
1
Gpt3D_Clone324_1.cs 1 10
Gpt3D_Clone324_1.cs 11 25
----------------------------------------

public static bool InheritsFrom (this Type t, Type baseType) {
    Type cur = t.BaseType;
    while (cur != null) {
        if (cur.Equals (baseType)) {
            return true;
        }
        cur = cur.BaseType;
    }
    return false;
}
----------------------------------------

 public static bool InheritsFrom(this Type t, Type baseType) 
{ 
    if (baseType == null) {
        return false; 
    } 
    Type cur = t;
    while (cur != null) { 
        if (baseType.IsAssignableFrom(cur))
            return true; 
        cur = cur.BaseType; 
    } 
    return false; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
324
2
Gpt3D_Clone324_2.cs 1 10
Gpt3D_Clone324_2.cs 11 27
----------------------------------------

public static bool InheritsFrom (this Type t, Type baseType) {
    Type cur = t.BaseType;
    while (cur != null) {
        if (cur.Equals (baseType)) {
            return true;
        }
        cur = cur.BaseType;
    }
    return false;
}
----------------------------------------

 public static bool InheritsFrom(this Type t, Type baseType) 
{ 
    if (t == baseType) 
    { 
        return true; 
    } 
    Type cur = t.BaseType; 
    while (cur !=null) 
    { 
        if (cur.Equals(baseType))
            return true;
        cur = cur.BaseType; 
    } 
    return false; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
324
3
Gpt3D_Clone324_3.cs 1 10
Gpt3D_Clone324_3.cs 11 25
----------------------------------------

public static bool InheritsFrom (this Type t, Type baseType) {
    Type cur = t.BaseType;
    while (cur != null) {
        if (cur.Equals (baseType)) {
            return true;
        }
        cur = cur.BaseType;
    }
    return false;
}
----------------------------------------

  public static bool InheritsFrom(this Type t, Type baseType) 
{ 
    Type cur = t.BaseType;
    if (cur==baseType)
        return true;
    while (cur!=null)
    {
        cur = cur.BaseType;
        if (cur.Equals(baseType)) 
            return true;
    } 
    return false; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
324
4
Gpt3D_Clone324_4.cs 1 10
Gpt3D_Clone324_4.cs 11 27
----------------------------------------

public static bool InheritsFrom (this Type t, Type baseType) {
    Type cur = t.BaseType;
    while (cur != null) {
        if (cur.Equals (baseType)) {
            return true;
        }
        cur = cur.BaseType;
    }
    return false;
}
----------------------------------------

 public static bool InheritsFrom(this Type t, Type baseType) 
{ 
    if (baseType == null) 
    { 
        return false; 
    } 
    Type cur = t; 
    while (cur != null) 
    { 
        if (cur == baseType) 
            return true; 
        cur = cur.BaseType; 
    } 
    return false; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
324
5
Gpt3D_Clone324_5.cs 1 10
Gpt3D_Clone324_5.cs 11 25
----------------------------------------

public static bool InheritsFrom (this Type t, Type baseType) {
    Type cur = t.BaseType;
    while (cur != null) {
        if (cur.Equals (baseType)) {
            return true;
        }
        cur = cur.BaseType;
    }
    return false;
}
----------------------------------------

  public static bool InheritsFrom(this Type t, Type baseType) 
{ 
    Type cur = t.BaseType;
    if (ReferenceEquals(cur, baseType))
        return true;
    while (cur!=null)
    {
        cur = cur.BaseType;
        if (cur == baseType) 
            return true;
    } 
    return false; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
324
7
Gpt3D_Clone324_7.cs 1 10
Gpt3D_Clone324_7.cs 11 25
----------------------------------------

public static bool InheritsFrom (this Type t, Type baseType) {
    Type cur = t.BaseType;
    while (cur != null) {
        if (cur.Equals (baseType)) {
            return true;
        }
        cur = cur.BaseType;
    }
    return false;
}
----------------------------------------

  public static bool InheritsFrom(this Type t, Type baseType) 
{ 
    Type cur = t;
    while (cur != null) 
    { 
        if (cur == baseType) 
        { 
            return true; 
        } 
        cur = cur.BaseType; 
    } 
    return false; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
324
8
Gpt3D_Clone324_8.cs 1 10
Gpt3D_Clone324_8.cs 11 25
----------------------------------------

public static bool InheritsFrom (this Type t, Type baseType) {
    Type cur = t.BaseType;
    while (cur != null) {
        if (cur.Equals (baseType)) {
            return true;
        }
        cur = cur.BaseType;
    }
    return false;
}
----------------------------------------

 public static bool InheritsFrom(this Type t, Type baseType) 
{ 
    Type cur = t;
    while (cur != null) 
    { 
        if (ReferenceEquals(cur, baseType)) 
        { 
            return true; 
        } 
        cur = cur.BaseType; 
    } 
    return false; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
325
6
Gpt3D_Clone325_6.cs 1 15
Gpt3D_Clone325_6.cs 16 43
----------------------------------------

[RequireHttps] [HttpPost] public ActionResult LogOn (LogOnModel model, string returnUrl) {
    if (ModelState.IsValid) {
        UserProfile profile = UserProfile.GetUserProfile (model.UserName);
        if (profile != null && ! profile.IsLockedOut) {
            if (MembershipService.ValidateUser (model.UserName, model.Password)) {
                FormsService.SignIn (model.UserName, model.RememberMe);
            } else {
                ModelState.AddModelError ("", "The user name or password provided is incorrect.");
            }
        } else {
            ModelState.AddModelError ("", "The user account does not exist or has been locked out.");
        }
    }
    return View (model);
}
----------------------------------------

 [RequireHttps] [HttpPost] public ActionResult LogOn (LogOnModel model, string returnUrl) 
{
    if (ModelState.IsValid)
    {
        UserProfile profile = UserProfile.GetUserProfile(model.UserName);
        if (profile != null)
        {
            if (profile.IsLockedOut)
            {
                ModelState.AddModelError("", "The user account has been locked out.");
                return View(model);
            }
            if (MembershipService.ValidateUser(model.UserName, model.Password))
                FormsService.SignIn(model.UserName, model.RememberMe);
            else
                ModelState.AddModelError("", "The user name or password provided is incorrect.");
        }
        else
        {
            ModelState.AddModelError("", "The user account does not exist.");
        }
    }
    
    return View(model);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
325
7
Gpt3D_Clone325_7.cs 1 15
Gpt3D_Clone325_7.cs 16 72
----------------------------------------

[RequireHttps] [HttpPost] public ActionResult LogOn (LogOnModel model, string returnUrl) {
    if (ModelState.IsValid) {
        UserProfile profile = UserProfile.GetUserProfile (model.UserName);
        if (profile != null && ! profile.IsLockedOut) {
            if (MembershipService.ValidateUser (model.UserName, model.Password)) {
                FormsService.SignIn (model.UserName, model.RememberMe);
            } else {
                ModelState.AddModelError ("", "The user name or password provided is incorrect.");
            }
        } else {
            ModelState.AddModelError ("", "The user account does not exist or has been locked out.");
        }
    }
    return View (model);
}
----------------------------------------

 [RequireHttps] [HttpPost] public ActionResult LogOn (LogOnModel model, string returnUrl) 
{
    if (ModelState.IsValid)
    {
        UserProfile profile = UserProfile.GetUserProfile(model.UserName);
        if (profile != null) 
        {
            if (profile.IsLockedOut)
            {
                ModelState.AddModelError("", "The user account has been locked out.");
                return View(model);
            }
            if (MembershipService.ValidateUser(model.UserName, model.Password))
            {
                FormsService.SignIn(model.UserName, model.RememberMe);
            }
            else
            {
                ModelState.AddModelError("", "The user name or password provided is incorrect.");
            }
        }
        else
        {
            ModelState.AddModelError("", "The user account does not exist.");
        }
    }
    
    return View(model);
    }
 [RequireHttps] [HttpPost] public ActionResult LogOn (LogOnModel model, string returnUrl) 
{
    if (!ModelState.IsValid)
        return View(model);
    var profile = UserProfile.GetUserProfile(model.UserName);
    if (profile is null || profile.IsLockedOut)
    {
        if (profile is null)
            ModelState.AddModelError("", "The user account does not exist.");
        else
            ModelState.AddModelError("", "The user account has been locked out.");
        return View(model);
    }
    if (!MembershipService.ValidateUser(model.UserName, model.Password))
    {
        ModelState.AddModelError("", "The user name or password provided is incorrect.");
        return View(model);
    }
    FormsService.SignIn(model.UserName, model.RememberMe);
    return View(model);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
326
5
Gpt3D_Clone326_5.cs 1 10
Gpt3D_Clone326_5.cs 11 24
----------------------------------------

public static void MultiplyDigitArrays (int [] lhs, int [] rhs, int [] result) {
    var n1 = BigInteger.Parse (string.Join ("", lhs));
    var n2 = BigInteger.Parse (string.Join ("", rhs));
    var resultBi = BigInteger.Multiply (n1, n2);
    Array.Clear (result, 0, result.Length);
    var stResult = resultBi.ToString ().PadLeft (result.Length, '0');
    for (int i = 0; i < stResult.Length; i ++) {
        result [(stResult.Length - 1) - i] = int.Parse (stResult [i].ToString ());
    }
}
----------------------------------------

 public static void MultiplyDigitArrays (int [] lhs, int [] rhs, int [] result) 
{
    BigInteger n1 = BigInteger.Parse(string.Join("", lhs));
    BigInteger n2 = BigInteger.Parse(string.Join("", rhs));
    BigInteger resultBi = BigInteger.Multiply(n1, n2);
    Array.Clear(result, 0, result.Length);
    string stResult = resultBi.ToString().PadLeft(result.Length, '0');
    List<int> resultList = stResult.Select(x => int.Parse(x.ToString())).ToList();
    resultList.Reverse();
    result = resultList.ToArray();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
326
6
Gpt3D_Clone326_6.cs 1 10
Gpt3D_Clone326_6.cs 11 24
----------------------------------------

public static void MultiplyDigitArrays (int [] lhs, int [] rhs, int [] result) {
    var n1 = BigInteger.Parse (string.Join ("", lhs));
    var n2 = BigInteger.Parse (string.Join ("", rhs));
    var resultBi = BigInteger.Multiply (n1, n2);
    Array.Clear (result, 0, result.Length);
    var stResult = resultBi.ToString ().PadLeft (result.Length, '0');
    for (int i = 0; i < stResult.Length; i ++) {
        result [(stResult.Length - 1) - i] = int.Parse (stResult [i].ToString ());
    }
}
----------------------------------------

 public static void MultiplyDigitArrays (int [] lhs, int [] rhs, int [] result) 
{
    BigInteger n1 = BigInteger.Parse(string.Concat(lhs));
    BigInteger n2 = BigInteger.Parse(string.Concat(rhs));
    BigInteger resultBi = BigInteger.Multiply(n1, n2);
    Array.Clear(result, 0, result.Length);
    string stResult = resultBi.ToString().PadLeft(result.Length, '0');
    for (int i = 0; i < stResult.Length; i++) 
    {
        result[(stResult.Length - 1) - i] = int.Parse(stResult[i].ToString());
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
326
7
Gpt3D_Clone326_7.cs 1 10
Gpt3D_Clone326_7.cs 11 24
----------------------------------------

public static void MultiplyDigitArrays (int [] lhs, int [] rhs, int [] result) {
    var n1 = BigInteger.Parse (string.Join ("", lhs));
    var n2 = BigInteger.Parse (string.Join ("", rhs));
    var resultBi = BigInteger.Multiply (n1, n2);
    Array.Clear (result, 0, result.Length);
    var stResult = resultBi.ToString ().PadLeft (result.Length, '0');
    for (int i = 0; i < stResult.Length; i ++) {
        result [(stResult.Length - 1) - i] = int.Parse (stResult [i].ToString ());
    }
}
----------------------------------------

 public static void MultiplyDigitArrays (int [] lhs, int [] rhs, int [] result) 
{
    var n1 = lhs.Select(x => (BigInteger)x).Aggregate((total, x) => total * 10 + x);
    var n2 = rhs.Select(x => (BigInteger)x).Aggregate((total, x) => total * 10 + x);
    var resultBi = BigInteger.Multiply(n1, n2);
    Array.Clear(result, 0, result.Length);
    var stResult = resultBi.ToString().PadLeft(result.Length, '0');
    for (int i = 0; i < stResult.Length; i ++) 
    {
        result [(stResult.Length - 1) - i] = Int.Parse(stResult [i].ToString());
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
328
2
Gpt3D_Clone328_2.cs 1 8
Gpt3D_Clone328_2.cs 9 22
----------------------------------------

private static void getDiscount (int [] items, int [] discount, ref int itemsbought, ref int discountItem) {
    for (int i = 0; itemsbought > items [i];) {
        discountItem = discount [i];
        i ++;
        if (i >= items.Length)
            break;
    }
}
----------------------------------------

 private static void getDiscount(int[] items, int[] discount, ref int itemsBought, ref int discountItem)
{
	int i = 0;
	
	while(itemsBought > items[i])
	{
		discountItem = discount[i];
		i++;
		if (i == items.Length)
			break;
	}
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
328
3
Gpt3D_Clone328_3.cs 1 8
Gpt3D_Clone328_3.cs 9 23
----------------------------------------

private static void getDiscount (int [] items, int [] discount, ref int itemsbought, ref int discountItem) {
    for (int i = 0; itemsbought > items [i];) {
        discountItem = discount [i];
        i ++;
        if (i >= items.Length)
            break;
    }
}
----------------------------------------

 private static void getDiscount(int[] items, int[] discount, ref int itemsBought, ref int discountItem)
{
	int i = 0;
	while (itemsBought > items[i])
	{
		discountItem = discount[i];
		i++;
		if (i >= items.Length)
		{
			break;
		}
	}
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
333
5
Gpt3D_Clone333_5.cs 1 9
Gpt3D_Clone333_5.cs 10 23
----------------------------------------

protected void btnAdd_Click (object sender, EventArgs e) {
    for (Int32 i = lstAvailableColors.Items.Count; i >= 0; i --) {
        ListItem item = lstAvailableColors.Items [i];
        if (item.Selected) {
            lstSelectedColors.Items.Add (item);
            lstAvailableColors.Items.Remove (item);
        }
    }
}
----------------------------------------

protected void btnAdd_Click (object sender, EventArgs e) {
    ListItem[] itemsToBeMoved = new ListItem[lstAvailableColors.Items.Count];
    lstAvailableColors.Items.CopyTo(itemsToBeMoved, 0);
    foreach (ListItem item in itemsToBeMoved)
    {
        if (item.Selected)
        {
            lstSelectedColors.Items.Add(item);
            lstAvailableColors.Items.Remove(item);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
333
6
Gpt3D_Clone333_6.cs 1 9
Gpt3D_Clone333_6.cs 10 20
----------------------------------------

protected void btnAdd_Click (object sender, EventArgs e) {
    for (Int32 i = lstAvailableColors.Items.Count; i >= 0; i --) {
        ListItem item = lstAvailableColors.Items [i];
        if (item.Selected) {
            lstSelectedColors.Items.Add (item);
            lstAvailableColors.Items.Remove (item);
        }
    }
}
----------------------------------------

protected void btnAdd_Click (object sender, EventArgs e) {
    for (Int32 i = 0; i < lstAvailableColors.Items.Count; i ++) {
        ListItem item = lstAvailableColors.Items [i];
        if (item.Selected) {
            lstSelectedColors.Items.Add (item);
            lstAvailableColors.Items.RemoveAt(i--);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
333
7
Gpt3D_Clone333_7.cs 1 9
Gpt3D_Clone333_7.cs 10 20
----------------------------------------

protected void btnAdd_Click (object sender, EventArgs e) {
    for (Int32 i = lstAvailableColors.Items.Count; i >= 0; i --) {
        ListItem item = lstAvailableColors.Items [i];
        if (item.Selected) {
            lstSelectedColors.Items.Add (item);
            lstAvailableColors.Items.Remove (item);
        }
    }
}
----------------------------------------

protected void btnAdd_Click (object sender, EventArgs e) {
    for (int i = 0; i < lstAvailableColors.Items.Count; i++) {  
        ListItem item = lstAvailableColors.Items [i];
        if (item.Selected) {
            lstSelectedColors.Items.Add(item);
            lstAvailableColors.Items.RemoveAt(i--);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
334
1
Gpt3D_Clone334_1.cs 1 11
Gpt3D_Clone334_1.cs 12 32
----------------------------------------

public static bool init_access (string file_path) {
    if (File.Exists (file_path)) {
        int counter = 0;
        foreach (string line in File.ReadAllLines (file_path)) {
            counter ++;
            Console.WriteLine (counter + " " + line);
        }
        return true;
    }
    return false;
}
----------------------------------------

 public static bool init_access(string file_path)
{
    if (File.Exists(file_path))
    {
        string line;
        int lineCount = 1;
        StreamReader file = new StreamReader(file_path);   
        while ((line = file.ReadLine()) != null)
        {
            Console.WriteLine(lineCount + " " + line);
            lineCount++;
        }
        file.Close();
        return true;
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
334
4
Gpt3D_Clone334_4.cs 1 11
Gpt3D_Clone334_4.cs 12 28
----------------------------------------

public static bool init_access (string file_path) {
    if (File.Exists (file_path)) {
        int counter = 0;
        foreach (string line in File.ReadAllLines (file_path)) {
            counter ++;
            Console.WriteLine (counter + " " + line);
        }
        return true;
    }
    return false;
}
----------------------------------------

 public static bool init_access (string file_path)
{
    if(File.Exists(file_path))
    {
        int counter = 0; 
        List<string> rawText =	File.ReadLines(file_path).ToList<string>();
       	rawText.ForEach(item => {
            counter +=  1;
            Console.WriteLine(counter + " " + item);
        });
        return true;
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
334
8
Gpt3D_Clone334_8.cs 1 11
Gpt3D_Clone334_8.cs 12 26
----------------------------------------

public static bool init_access (string file_path) {
    if (File.Exists (file_path)) {
        int counter = 0;
        foreach (string line in File.ReadAllLines (file_path)) {
            counter ++;
            Console.WriteLine (counter + " " + line);
        }
        return true;
    }
    return false;
}
----------------------------------------

 public static bool init_access (string file_path) 
{
    if (!File.Exists (file_path)) {
        return false;
    }
    string[] lineArray = File.ReadAllLines (file_path);
    int counter = 0;
    foreach (string line in lineArray) {
        counter ++;
        Console.WriteLine (counter + " " + line);
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
336
0
Gpt3D_Clone336_0.cs 1 13
Gpt3D_Clone336_0.cs 14 29
----------------------------------------

protected void DiasShow () {
    var getFiles = Directory.GetFiles (HttpContext.Current.Server.MapPath ("/CSS/Design/Page_Design/Dias/1920x1080/"));
    var random = RandomiseList (getFiles);
    var txt = new StringBuilder ();
    foreach (var randomFileName in random) {
        var fileType = System.IO.Path.GetExtension (randomFileName).ToUpper ();
        if ((fileType == ".JPG") || (fileType == ".JPEG")) {
            var imageName = System.IO.Path.GetFileName (randomFileName);
            txt.Append ("<img src=\"CSS/Design/Page_Design/Dias/1920x1080/" + imageName + "\" />");
        }
    }
    lbl_Dias.Text += txt.ToString ();
}
----------------------------------------

  protected void DiasShow() { 
                var getFiles =  Directory.GetFiles(HttpContext.Current.Server.MapPath("/CSS/Design/Page_Design/Dias/1920x1080/")); 
                var randomFileNames = GetRandomFiles(getFiles); 
                string[] acceptedFileTypes = new string[] { ".jpg", ".jpeg" }; 
                StringBuilder outputString = new StringBuilder(); 
                foreach (var randomFileName in randomFileNames) { 
                    string fileType = System.IO.Path.GetExtension(randomFileName).ToUpper(); 
                    if (acceptedFileTypes.Contains(fileType)) { 
                        string imageName = System.IO.Path.GetFileName(randomFileName); 
                        outputString.Append("<img src=\"CSS/Design/Page_Design/Dias/1920x1080/" + imageName + "\" />"); 
                    } 
                } 
                lbl_Dias.Text += outputString.ToString(); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
336
1
Gpt3D_Clone336_1.cs 1 13
Gpt3D_Clone336_1.cs 14 45
----------------------------------------

protected void DiasShow () {
    var getFiles = Directory.GetFiles (HttpContext.Current.Server.MapPath ("/CSS/Design/Page_Design/Dias/1920x1080/"));
    var random = RandomiseList (getFiles);
    var txt = new StringBuilder ();
    foreach (var randomFileName in random) {
        var fileType = System.IO.Path.GetExtension (randomFileName).ToUpper ();
        if ((fileType == ".JPG") || (fileType == ".JPEG")) {
            var imageName = System.IO.Path.GetFileName (randomFileName);
            txt.Append ("<img src=\"CSS/Design/Page_Design/Dias/1920x1080/" + imageName + "\" />");
        }
    }
    lbl_Dias.Text += txt.ToString ();
}
----------------------------------------

  protected void DiasShow() { 
                    var getFiles =  Directory.GetFiles(HttpContext.Current.Server.MapPath("/CSS/Design/Page_Design/Dias/1920x1080/")); 
                    var randomFileNames = RandomizeFileNames(getFiles); 
                    StringBuilder html = new StringBuilder(); 
                    string[] acceptedFormats = {".jpg", ".jpeg"}; 
                    foreach (var randomFileName in randomFileNames) { 
                        string fileType = System.IO.Path.GetExtension(randomFileName).ToUpper(); 
                        if (acceptedFormats.Contains(fileType)) { 
                            string imageName = System.IO.Path.GetFileName(randomFileName); 
                            html.Append($"<img src=\"CSS/Design/Page_Design/Dias/1920x1080/{imageName}\" />"); 
                        } 
                    } 
                    lbl_Dias.Text += html.ToString(); 
                } 
                IEnumerable<T> RandomizeFileNames<T>(IEnumerable<T> source)
                {
                    Random random = new Random();
                    List<T> randomizedList = source.ToList();
                    int index = randomizedList.Count;
                    while (index > 1)
                    {
                        index--;
                        int index2 = random.Next(index + 1);
                        T tempValue = randomizedList[index];
                        randomizedList[index] = randomizedList[index2];
                        randomizedList[index2] = tempValue;
                    }
                    return randomizedList;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
336
10
Gpt3D_Clone336_10.cs 1 13
Gpt3D_Clone336_10.cs 14 45
----------------------------------------

protected void DiasShow () {
    var getFiles = Directory.GetFiles (HttpContext.Current.Server.MapPath ("/CSS/Design/Page_Design/Dias/1920x1080/"));
    var random = RandomiseList (getFiles);
    var txt = new StringBuilder ();
    foreach (var randomFileName in random) {
        var fileType = System.IO.Path.GetExtension (randomFileName).ToUpper ();
        if ((fileType == ".JPG") || (fileType == ".JPEG")) {
            var imageName = System.IO.Path.GetFileName (randomFileName);
            txt.Append ("<img src=\"CSS/Design/Page_Design/Dias/1920x1080/" + imageName + "\" />");
        }
    }
    lbl_Dias.Text += txt.ToString ();
}
----------------------------------------

  protected void DiasShow () { 
                    var getFiles = Directory.GetFiles (HttpContext.Current.Server.MapPath ("/CSS/Design/Page_Design/Dias/1920x1080/")); 
                    var randomFileNameList = GetRandomFileNames(getFiles); 
                    StringBuilder outputText = new StringBuilder();
                    foreach (var randomFileName in randomFileNameList) { 
                        string fileType = System.IO.Path.GetExtension(randomFileName).ToUpper(); 
                        if ((fileType.Equals(".JPG") || fileType.Equals(".JPEG")) && !string.IsNullOrEmpty (fileType)) { 
                            string imageName = System.IO.Path.GetFileName(randomFileName); 
                            outputText.Append($"<img src=\"CSS/Design/Page_Design/Dias/1920x1080/{imageName}\" />"); 
                        } 
                    } 
                    lbl_Dias.Text += outputText.ToString(); 
                } 
                
                IEnumerable<T> GetRandomFileNames<T>(IEnumerable<T> source)
                {
                    Random random = new Random();
                    List<T> randomFileNames = source.ToList();
                    int index = randomFileNames.Count;
                    while (index > 1)
                    {
                        index--;
                        int index2 = random.Next(index + 1);
                        T tmpValue = randomFileNames[index];
                        randomFileNames[index] = randomFileNames[index2];
                        randomFileNames[index2] = tmpValue;
                    }
                    return randomFileNames;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
336
11
Gpt3D_Clone336_11.cs 1 13
Gpt3D_Clone336_11.cs 14 28
----------------------------------------

protected void DiasShow () {
    var getFiles = Directory.GetFiles (HttpContext.Current.Server.MapPath ("/CSS/Design/Page_Design/Dias/1920x1080/"));
    var random = RandomiseList (getFiles);
    var txt = new StringBuilder ();
    foreach (var randomFileName in random) {
        var fileType = System.IO.Path.GetExtension (randomFileName).ToUpper ();
        if ((fileType == ".JPG") || (fileType == ".JPEG")) {
            var imageName = System.IO.Path.GetFileName (randomFileName);
            txt.Append ("<img src=\"CSS/Design/Page_Design/Dias/1920x1080/" + imageName + "\" />");
        }
    }
    lbl_Dias.Text += txt.ToString ();
}
----------------------------------------

  protected void DiasShow() { 
                var getFiles =  Directory.GetFiles(HttpContext.Current.Server.MapPath("/CSS/Design/Page_Design/Dias/1920x1080/")); 
                var randomFileNames = GetRandomFiles(getFiles); 
                StringBuilder outputString = new StringBuilder(); 
                foreach (var randomFileName in randomFileNames) { 
                    string fileType = System.IO.Path.GetExtension(randomFileName).ToUpper(); 
                    if (fileType.Equals(".jpg", StringComparison.OrdinalIgnoreCase) || fileType.Equals(".jpeg", StringComparison.OrdinalIgnoreCase)) { 
                        string imageName = System.IO.Path.GetFileName(randomFileName); 
                        outputString.Append("<img src=\"CSS/Design/Page_Design/Dias/1920x1080/" + imageName + "\" />"); 
                    } 
                } 
                lbl_Dias.Text += outputString.ToString(); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
336
12
Gpt3D_Clone336_12.cs 1 13
Gpt3D_Clone336_12.cs 14 35
----------------------------------------

protected void DiasShow () {
    var getFiles = Directory.GetFiles (HttpContext.Current.Server.MapPath ("/CSS/Design/Page_Design/Dias/1920x1080/"));
    var random = RandomiseList (getFiles);
    var txt = new StringBuilder ();
    foreach (var randomFileName in random) {
        var fileType = System.IO.Path.GetExtension (randomFileName).ToUpper ();
        if ((fileType == ".JPG") || (fileType == ".JPEG")) {
            var imageName = System.IO.Path.GetFileName (randomFileName);
            txt.Append ("<img src=\"CSS/Design/Page_Design/Dias/1920x1080/" + imageName + "\" />");
        }
    }
    lbl_Dias.Text += txt.ToString ();
}
----------------------------------------

 protected void DiasShow() {
                    var getFiles = Directory.GetFiles(HttpContext.Current.Server.MapPath("/CSS/Design/Page_Design/Dias/1920x1080/"));
                    var randomisedFiles = ShuffleSeededRandom(getFiles);
                    StringBuilder text = new StringBuilder();
                    foreach (string randomFile in randomisedFiles) {
                        string fileExtension = System.IO.Path.GetExtension(randomFile).ToUpper();
                        if (fileExtension == ".JPG" || fileExtension == ".JPEG") {
                            string fileName = System.IO.Path.GetFileName(randomFile);
                            text.Append("<img src=\"CSS/Design/Page_Design/Dias/1920x1080/" + fileName + "\" />");
                        }
                    }
                    lbl_Dias.Text += text.ToString();
                }
                public string[] ShuffleSeededRandom(string[] arrayToShuffle) {
                    Random random = new Random();
                    string[] shuffledArray = arrayToShuffle.OrderBy(x => random.Next()).ToArray();
                    return shuffledArray;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
336
5
Gpt3D_Clone336_5.cs 1 13
Gpt3D_Clone336_5.cs 14 48
----------------------------------------

protected void DiasShow () {
    var getFiles = Directory.GetFiles (HttpContext.Current.Server.MapPath ("/CSS/Design/Page_Design/Dias/1920x1080/"));
    var random = RandomiseList (getFiles);
    var txt = new StringBuilder ();
    foreach (var randomFileName in random) {
        var fileType = System.IO.Path.GetExtension (randomFileName).ToUpper ();
        if ((fileType == ".JPG") || (fileType == ".JPEG")) {
            var imageName = System.IO.Path.GetFileName (randomFileName);
            txt.Append ("<img src=\"CSS/Design/Page_Design/Dias/1920x1080/" + imageName + "\" />");
        }
    }
    lbl_Dias.Text += txt.ToString ();
}
----------------------------------------

    
  protected void DiasShow () {
                    var getFiles = Directory.GetFiles (HttpContext.Current.Server.MapPath ("/CSS/Design/Page_Design/Dias/1920x1080/"));
                    var randomFiles = GetRandomizedFiles (getFiles);
                    var htmlContent = new StringBuilder ();
                    string[] acceptedFileTypes = { ".jpg", ".jpeg" };
                    foreach (var randomFileName in randomFiles) {
                        string fileType = System.IO.Path.GetExtension(randomFileName).ToUpper();
                        if (acceptedFileTypes.Contains(fileType)) {
                            string imageName = System.IO.Path.GetFileName(randomFileName);
                            htmlContent.Append($"<img src=\"CSS/Design/Page_Design/Dias/1920x1080/{imageName}\" />");
                        }
                    }
                    lbl_Dias.Text += htmlContent.ToString();
                }
                IEnumerable<T> GetRandomizedFiles<T>(IEnumerable<T> source)
                {
                    Random random = new Random();
                    List<T> randomizedList = source.ToList();
                    int index = randomizedList.Count;
                    while (index > 1)
                    {
                        index--;
                        int index2 = random.Next(index + 1);
                        T tempValue = randomizedList[index];
                        randomizedList[index] = randomizedList[index2];
                        randomizedList[index2] = tempValue;
                    }
                    return randomizedList;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
336
9
Gpt3D_Clone336_9.cs 1 13
Gpt3D_Clone336_9.cs 14 46
----------------------------------------

protected void DiasShow () {
    var getFiles = Directory.GetFiles (HttpContext.Current.Server.MapPath ("/CSS/Design/Page_Design/Dias/1920x1080/"));
    var random = RandomiseList (getFiles);
    var txt = new StringBuilder ();
    foreach (var randomFileName in random) {
        var fileType = System.IO.Path.GetExtension (randomFileName).ToUpper ();
        if ((fileType == ".JPG") || (fileType == ".JPEG")) {
            var imageName = System.IO.Path.GetFileName (randomFileName);
            txt.Append ("<img src=\"CSS/Design/Page_Design/Dias/1920x1080/" + imageName + "\" />");
        }
    }
    lbl_Dias.Text += txt.ToString ();
}
----------------------------------------

 protected void DiasShow() { 
                    var getFiles =  Directory.GetFiles(HttpContext.Current.Server.MapPath("/CSS/Design/Page_Design/Dias/1920x1080/")); 
                    var randomisedFileNames = RandomisedFiles(getFiles); 
                    StringBuilder outputHTML = new StringBuilder(); 
                    foreach (var randomFileName in randomisedFileNames) { 
                        string fileType = System.IO.Path.GetExtension(randomFileName).ToUpper(); 
                        if (fileType == ".JPG" || fileType == ".JPEG") { 
                            string imageName = System.IO.Path.GetFileName(randomFileName); 
                            outputHTML.Append($"<img src=\"CSS/Design/Page_Design/Dias/1920x1080/{imageName}\" />"); 
                        } 
                    } 
                    lbl_Dias.Text += outputHTML.ToString(); 
                }
                IEnumerable<T> RandomisedFiles<T>(IEnumerable<T> source)
                {
                    Random random = new Random();
                    List<T> randomisedFiles = source.ToList();
                    int index = randomisedFiles.Count;
                    while (index > 1)
                    {
                        index--;
                        int index2 = random.Next(index + 1);
                        T tmpValue = randomisedFiles[index];
                        randomisedFiles[index] = randomisedFiles[index2];
                        randomisedFiles[index2] = tmpValue;
                    }
                    return randomisedFiles;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
339
3
Gpt3D_Clone339_3.cs 1 22
Gpt3D_Clone339_3.cs 23 49
----------------------------------------

public static unsafe Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) {
    var result = new Bitmap (srcBitmap.Width, srcBitmap.Height, targetPixelFormat);
    var bmpBounds = new Rectangle (0, 0, srcBitmap.Width, srcBitmap.Height);
    var srcData = srcBitmap.LockBits (bmpBounds, ImageLockMode.ReadOnly, srcBitmap.PixelFormat);
    var destData = result.LockBits (bmpBounds, ImageLockMode.ReadOnly, targetPixelFormat);
    var srcDataPtr = (byte *) srcData.Scan0;
    var destDataPtr = (byte *) destData.Scan0;
    try {
        for (int y = 0; y <= srcData.Height - 1; y ++) {
            for (int x = 0; x <= srcData.Width - 1; x ++) {
                var position = srcData.Stride * y + 4 * x;
                var position2 = destData.Stride * y + 4 * x;
                memcpy (destDataPtr + position2, srcDataPtr + position, (UIntPtr) 4);
            }
        }
    }
    finally {
        srcBitmap.UnlockBits (srcData);
        result.UnlockBits (destData);
    }
    return result;
}
----------------------------------------

 public static unsafe Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) { 
    var width = srcBitmap.Width; 
    var height = srcBitmap.Height; 
 
    var result = new Bitmap (width, height, targetPixelFormat); 
    var bmpBounds = new Rectangle (0, 0, width, height); 
 
    var srcData = srcBitmap.LockBits (bmpBounds, ImageLockMode.ReadOnly, srcBitmap.PixelFormat); 
    var destData = result.LockBits (bmpBounds, ImageLockMode.WriteOnly, targetPixelFormat); 
 
    var srcDataPtr = (byte*) srcData.Scan0; 
    var destDataPtr = (byte*) destData.Scan0; 
 
    for (int y = 0; y <= srcData.Height - 1; y ++) { 
        for (int x = 0; x <= srcData.Width - 1; x ++) { 
            var position = srcData.Stride * y + 4 * x; 
            var position2 = destData.Stride * y + 4 * x; 
            Marshal.Copy (srcDataPtr + position, destDataPtr + position2, 0,4); 
        } 
    } 
 
    srcBitmap.UnlockBits (srcData); 
    result.UnlockBits (destData); 
    return result; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
339
5
Gpt3D_Clone339_5.cs 1 22
Gpt3D_Clone339_5.cs 23 43
----------------------------------------

public static unsafe Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) {
    var result = new Bitmap (srcBitmap.Width, srcBitmap.Height, targetPixelFormat);
    var bmpBounds = new Rectangle (0, 0, srcBitmap.Width, srcBitmap.Height);
    var srcData = srcBitmap.LockBits (bmpBounds, ImageLockMode.ReadOnly, srcBitmap.PixelFormat);
    var destData = result.LockBits (bmpBounds, ImageLockMode.ReadOnly, targetPixelFormat);
    var srcDataPtr = (byte *) srcData.Scan0;
    var destDataPtr = (byte *) destData.Scan0;
    try {
        for (int y = 0; y <= srcData.Height - 1; y ++) {
            for (int x = 0; x <= srcData.Width - 1; x ++) {
                var position = srcData.Stride * y + 4 * x;
                var position2 = destData.Stride * y + 4 * x;
                memcpy (destDataPtr + position2, srcDataPtr + position, (UIntPtr) 4);
            }
        }
    }
    finally {
        srcBitmap.UnlockBits (srcData);
        result.UnlockBits (destData);
    }
    return result;
}
----------------------------------------

  public static Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) 
    { 
        var width = srcBitmap.Width; 
        var height = srcBitmap.Height; 
        
        var result = new Bitmap(width, height, targetPixelFormat); 
        var bmpBounds = new Rectangle(0, 0, width, height); 
       
        for (int y = 0; y < height; y++) 
        { 
            for (int x = 0; x < width; x++) 
            { 
                Color srcPixel = srcBitmap.GetPixel(x, y); 
                result.SetPixel(x, y, Color.FromArgb(srcPixel.A, srcPixel.R, srcPixel.G, srcPixel.B)); 
            } 
        } 
        
        return result; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
33
0
Gpt3D_Clone33_0.cs 1 16
Gpt3D_Clone33_0.cs 17 32
----------------------------------------

public static void Main () {
    Serializer.PrepareSerializer < Test > ();
    var dico = new Dictionary < long, uint > ();
    for (long i = 0; i < 7500000; i ++) {
        dico.Add (i, (uint) i);
    }
    var data = new Test {Data = dico};
    using (var stream = File.OpenWrite ("data.dat"))
    {
        Serializer.Serialize (stream, data);
    } dico.Clear ();
    using (var stream = File.OpenRead ("data.dat"))
    {
        Serializer.Merge < Test > (stream, data);
    }
}
----------------------------------------

 public static void Main () {
    var binaryWriter = new BinaryWriter(File.OpenWrite("data.dat"));
    var dico = new Dictionary < long, uint > ();
    for (long i = 0; i < 7500000; i ++){
        dico.Add (i, (uint) i);
    }
    var data = new Test {Data = dico}; 
    binaryWriter.Write (data.ToByteArray ());
    dico.Clear ();
    using (var binaryReader = new BinaryReader(File.Open("data.dat"))) {
        data = Test.FromByteArray (binaryReader.ReadBytes ((int) binaryReader.BaseStream.Length));
    }
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
340
0
Gpt3D_Clone340_0.cs 1 18
Gpt3D_Clone340_0.cs 19 41
----------------------------------------

public static Control GetAnyControlAt (TableLayoutPanel pp, int col, int row) {
    bool fnd = false;
    Control sendCC = null;
    foreach (Control cc in pp.Controls) {
        if (pp.GetCellPosition (cc).Column == col) {
            if (pp.GetCellPosition (cc).Row == row) {
                sendCC = cc;
                fnd = true;
                break;
            }
        }
    }
    if (fnd == true) {
        return sendCC;
    } else {
        return null;
    }
}
----------------------------------------

 public static Control GetAnyControlAt(TableLayoutPanel pp, int col, int row)
{
    bool fnd = false;
    Control sendCC = null;
    for (int i = 0; i < pp.Controls.Count; i++)
    {
        if (pp.GetCellPosition(pp.Controls[i]).Column == col)
        {
            if (pp.GetCellPosition(pp.Controls[i]).Row == row)
            {
                sendCC = pp.Controls[i];
                fnd = true;
                break;
            }
        }
    }
    if (fnd)
        return sendCC;
    else
        return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
349
0
Gpt3D_Clone349_0.cs 1 19
Gpt3D_Clone349_0.cs 20 46
----------------------------------------

static void Main (string [] args) {
    IPAddress localAdd = IPAddress.Parse (SERVER_IP);
    TcpListener listener = new TcpListener (localAdd, PORT_NO);
    Console.WriteLine ("Listening...");
    listener.Start ();
    while (true) {
        TcpClient client = listener.AcceptTcpClient ();
        NetworkStream nwStream = client.GetStream ();
        byte [] buffer = new byte [client.ReceiveBufferSize];
        int bytesRead = nwStream.Read (buffer, 0, client.ReceiveBufferSize);
        string dataReceived = Encoding.ASCII.GetString (buffer, 0, bytesRead);
        Console.WriteLine ("Received : " + dataReceived);
        Console.WriteLine ("Sending back : " + dataReceived);
        nwStream.Write (buffer, 0, bytesRead);
        client.Close ();
    }
    listener.Stop ();
    Console.ReadLine ();
}
----------------------------------------

 static void Main (string [] args)
    {
        IPAddress localAdd = IPAddress.Parse (SERVER_IP);
        TcpListener listener = new TcpListener (localAdd, PORT_NO);
        Console.WriteLine ("Listening...");
        listener.Start ();
        while (true)
        {
            TcpClient client = listener.AcceptTcpClient ();
            Task receiveTask = Task.Factory.StartNew(() => {
                using (NetworkStream nwStream = client.GetStream ()) {
                    byte [] buffer = new byte [client.ReceiveBufferSize];
                    int bytesRead = nwStream.Read (buffer, 0, client.ReceiveBufferSize);
                    string dataReceived = Encoding.ASCII.GetString (buffer, 0, bytesRead);
                    Console.WriteLine ("Received : " + dataReceived);
                    Console.WriteLine ("Sending back : " + dataReceived);
                    nwStream.Write (buffer, 0, bytesRead);
                    client.Close ();
                }
            });
        }
        listener.Stop ();
        Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
349
1
Gpt3D_Clone349_1.cs 1 19
Gpt3D_Clone349_1.cs 20 49
----------------------------------------

static void Main (string [] args) {
    IPAddress localAdd = IPAddress.Parse (SERVER_IP);
    TcpListener listener = new TcpListener (localAdd, PORT_NO);
    Console.WriteLine ("Listening...");
    listener.Start ();
    while (true) {
        TcpClient client = listener.AcceptTcpClient ();
        NetworkStream nwStream = client.GetStream ();
        byte [] buffer = new byte [client.ReceiveBufferSize];
        int bytesRead = nwStream.Read (buffer, 0, client.ReceiveBufferSize);
        string dataReceived = Encoding.ASCII.GetString (buffer, 0, bytesRead);
        Console.WriteLine ("Received : " + dataReceived);
        Console.WriteLine ("Sending back : " + dataReceived);
        nwStream.Write (buffer, 0, bytesRead);
        client.Close ();
    }
    listener.Stop ();
    Console.ReadLine ();
}
----------------------------------------

  static void Main(string[] args)
    {
        IPAddress localAdd = IPAddress.Parse(SERVER_IP);
        TcpListener listener = new TcpListener(localAdd, PORT_NO);
        Console.WriteLine("Listening...");
        listener.Start();
        while (true)
        {
            TcpClient client = listener.AcceptTcpClient();
            Task receiveTask = Task.Run(() =>
            {
                using (NetworkStream nwStream = client.GetStream())
                {
                    int bufferSize = client.ReceiveBufferSize;
                    byte[] buffer = new byte[bufferSize];
                    nwStream.Read(buffer, 0, bufferSize);
                    string dataReceived = Encoding.ASCII.GetString(buffer, 0, buffer.Length);
                    Console.WriteLine("Received : " + dataReceived);
                    Console.WriteLine("Sending back : " + dataReceived);
                    nwStream.Write(buffer, 0, buffer.Length);
                }
                client.Close();
            });
        }
        listener.Stop();
        Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
349
2
Gpt3D_Clone349_2.cs 1 19
Gpt3D_Clone349_2.cs 20 44
----------------------------------------

static void Main (string [] args) {
    IPAddress localAdd = IPAddress.Parse (SERVER_IP);
    TcpListener listener = new TcpListener (localAdd, PORT_NO);
    Console.WriteLine ("Listening...");
    listener.Start ();
    while (true) {
        TcpClient client = listener.AcceptTcpClient ();
        NetworkStream nwStream = client.GetStream ();
        byte [] buffer = new byte [client.ReceiveBufferSize];
        int bytesRead = nwStream.Read (buffer, 0, client.ReceiveBufferSize);
        string dataReceived = Encoding.ASCII.GetString (buffer, 0, bytesRead);
        Console.WriteLine ("Received : " + dataReceived);
        Console.WriteLine ("Sending back : " + dataReceived);
        nwStream.Write (buffer, 0, bytesRead);
        client.Close ();
    }
    listener.Stop ();
    Console.ReadLine ();
}
----------------------------------------

 static void Main (string [] args) {
    IPAddress localAdd = IPAddress.Parse (SERVER_IP);
    TcpListener listener = new TcpListener (localAdd, PORT_NO);
    Console.WriteLine ("Listening...");
    Task listenTask = Task.Factory.StartNew(() => {
        listener.Start ();
        while (true) {
            using (TcpClient client = listener.AcceptTcpClient ())
            using (NetworkStream nwStream = client.GetStream ()) {
                byte [] buffer = new byte [client.ReceiveBufferSize];
                int bytesRead = nwStream.Read (buffer, 0, client.ReceiveBufferSize);
                string dataReceived = Encoding.ASCII.GetString (buffer, 0, bytesRead);
                Console.WriteLine ("Received : " + dataReceived);
                Console.WriteLine ("Sending back : " + dataReceived);
                nwStream.Write (buffer, 0, bytesRead);
            }
        }
    });
    listenTask.Wait();
    listener.Stop ();
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
349
3
Gpt3D_Clone349_3.cs 1 19
Gpt3D_Clone349_3.cs 20 49
----------------------------------------

static void Main (string [] args) {
    IPAddress localAdd = IPAddress.Parse (SERVER_IP);
    TcpListener listener = new TcpListener (localAdd, PORT_NO);
    Console.WriteLine ("Listening...");
    listener.Start ();
    while (true) {
        TcpClient client = listener.AcceptTcpClient ();
        NetworkStream nwStream = client.GetStream ();
        byte [] buffer = new byte [client.ReceiveBufferSize];
        int bytesRead = nwStream.Read (buffer, 0, client.ReceiveBufferSize);
        string dataReceived = Encoding.ASCII.GetString (buffer, 0, bytesRead);
        Console.WriteLine ("Received : " + dataReceived);
        Console.WriteLine ("Sending back : " + dataReceived);
        nwStream.Write (buffer, 0, bytesRead);
        client.Close ();
    }
    listener.Stop ();
    Console.ReadLine ();
}
----------------------------------------

  static void Main(string[] args)
    {
        IPAddress localAdd = IPAddress.Parse(SERVER_IP);
        TcpListener listener = new TcpListener(localAdd, PORT_NO);
        Console.WriteLine("Listening...");
        listener.Start();
        while (true)
        {
            TcpClient client = listener.AcceptTcpClient();
            Task receiveTask = Task.Run(() =>
            {
                using (NetworkStream nwStream = client.GetStream())
                {
                    int bufferSize = client.ReceiveBufferSize;
                    byte[] buffer = new byte[bufferSize];
                    nwStream.Read(buffer, 0, bufferSize);
                    string dataReceived = Encoding.ASCII.GetString(buffer, 0, buffer.Length);
                    Console.WriteLine("Received : " + dataReceived);
                    Console.WriteLine("Sending back : " + dataReceived);
                    nwStream.Write(buffer, 0, buffer.Length);
                }
                client.Close();
            });
        }
        listener.Stop();
        Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
349
4
Gpt3D_Clone349_4.cs 1 19
Gpt3D_Clone349_4.cs 20 47
----------------------------------------

static void Main (string [] args) {
    IPAddress localAdd = IPAddress.Parse (SERVER_IP);
    TcpListener listener = new TcpListener (localAdd, PORT_NO);
    Console.WriteLine ("Listening...");
    listener.Start ();
    while (true) {
        TcpClient client = listener.AcceptTcpClient ();
        NetworkStream nwStream = client.GetStream ();
        byte [] buffer = new byte [client.ReceiveBufferSize];
        int bytesRead = nwStream.Read (buffer, 0, client.ReceiveBufferSize);
        string dataReceived = Encoding.ASCII.GetString (buffer, 0, bytesRead);
        Console.WriteLine ("Received : " + dataReceived);
        Console.WriteLine ("Sending back : " + dataReceived);
        nwStream.Write (buffer, 0, bytesRead);
        client.Close ();
    }
    listener.Stop ();
    Console.ReadLine ();
}
----------------------------------------

   static void Main(string[] args)
    {
        IPAddress localAdd = IPAddress.Parse(SERVER_IP);
        TcpListener listener = new TcpListener(localAdd, PORT_NO);
        Console.WriteLine("Listening...");
        listener.Start();
        TcpClient client = listener.AcceptTcpClient();
        while (true)
        {
            NetworkStream nwStream = client.GetStream();
            byte[] buffer = new byte[client.ReceiveBufferSize];
            int bytesRead = nwStream.Read(buffer, 0, client.ReceiveBufferSize);
            string dataReceived = Encoding.ASCII.GetString(buffer, 0, bytesRead);
            Console.WriteLine("Received : " + dataReceived);
            Console.WriteLine("Sending back : " + dataReceived);
            nwStream.Write(buffer, 0, bytesRead);
            client.Close();
        }
        listener.Stop();
        Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
349
5
Gpt3D_Clone349_5.cs 1 19
Gpt3D_Clone349_5.cs 20 42
----------------------------------------

static void Main (string [] args) {
    IPAddress localAdd = IPAddress.Parse (SERVER_IP);
    TcpListener listener = new TcpListener (localAdd, PORT_NO);
    Console.WriteLine ("Listening...");
    listener.Start ();
    while (true) {
        TcpClient client = listener.AcceptTcpClient ();
        NetworkStream nwStream = client.GetStream ();
        byte [] buffer = new byte [client.ReceiveBufferSize];
        int bytesRead = nwStream.Read (buffer, 0, client.ReceiveBufferSize);
        string dataReceived = Encoding.ASCII.GetString (buffer, 0, bytesRead);
        Console.WriteLine ("Received : " + dataReceived);
        Console.WriteLine ("Sending back : " + dataReceived);
        nwStream.Write (buffer, 0, bytesRead);
        client.Close ();
    }
    listener.Stop ();
    Console.ReadLine ();
}
----------------------------------------

 static void Main (string [] args) {
    IPAddress localAdd = IPAddress.Parse (SERVER_IP);
    TcpListener listener = new TcpListener (localAdd, PORT_NO);
    Console.WriteLine ("Listening...");
    listener.Start ();
    while (true) {
        using (TcpClient client = listener.AcceptTcpClient ())
        using (NetworkStream nwStream = client.GetStream ()) {
            int bufferSize = client.ReceiveBufferSize;
            int bytesRead = nwStream.Read (buffer, 0, bufferSize);
            string dataReceived = Encoding.ASCII.GetString (buffer, 0, bytesRead);
            Console.WriteLine ("Received : " + dataReceived);
            Console.WriteLine ("Sending back : " + dataReceived);
            nwStream.Write (buffer, 0, bytesRead);
        }
    }
    listener.Stop ();
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
350
4
Gpt3D_Clone350_4.cs 1 11
Gpt3D_Clone350_4.cs 12 33
----------------------------------------

public override void WellKnownBinary (Stream sout) {
    sout.WriteByte (BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0);
    sout.Write (GeoBase.PolygonWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.Rings.Count), 0, 4);
    foreach (var ring in this.Rings) {
        sout.Write (BitConverter.GetBytes (ring.Count), 0, 4);
        foreach (var position in ring) {
            position.WellKnownBinary (sout);
        }
    }
}
----------------------------------------

  public override void WellKnownBinary (Stream sout) {
    sout.WriteByte (BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0);
    sout.Write (GeoBase.PolygonWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.Rings.Count), 0, 4);
    foreach (var ring in this.Rings) {
        // Writing bytes in Reverse order
        byte[] byteArrayIn = BitConverter.GetBytes (ring.Count);
        byte[] resReversed = new byte[4];
        for (int i = 0; i < byteArrayIn.Length; i++)
        {
            byte b = byteArrayIn[i];
            resReversed[3 - i] = b;
        }
        sout.Write (resReversed, 0, 4);
        foreach (var position in ring) {
            position.WellKnownBinary (sout);
        }  
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
350
5
Gpt3D_Clone350_5.cs 1 11
Gpt3D_Clone350_5.cs 12 30
----------------------------------------

public override void WellKnownBinary (Stream sout) {
    sout.WriteByte (BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0);
    sout.Write (GeoBase.PolygonWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.Rings.Count), 0, 4);
    foreach (var ring in this.Rings) {
        sout.Write (BitConverter.GetBytes (ring.Count), 0, 4);
        foreach (var position in ring) {
            position.WellKnownBinary (sout);
        }
    }
}
----------------------------------------

 public override void WellKnownBinary (Stream sout) {
    sout.WriteByte (BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0);
    sout.Write (GeoBase.PolygonWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.Rings.Count), 0, 4);
    // Writing bytes using Buffer.BlockCopy
    foreach (var ring in this.Rings) {
        byte[] byteArrayIn = BitConverter.GetBytes (ring.Count);
        byte[] res = new byte[4];
        Buffer.BlockCopy(byteArrayIn, 0, res, 0, 4);
        sout.Write (res, 0, 4);
        
        foreach (var position in ring) {
            position.WellKnownBinary (sout);
        }  
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
350
6
Gpt3D_Clone350_6.cs 1 11
Gpt3D_Clone350_6.cs 12 28
----------------------------------------

public override void WellKnownBinary (Stream sout) {
    sout.WriteByte (BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0);
    sout.Write (GeoBase.PolygonWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.Rings.Count), 0, 4);
    foreach (var ring in this.Rings) {
        sout.Write (BitConverter.GetBytes (ring.Count), 0, 4);
        foreach (var position in ring) {
            position.WellKnownBinary (sout);
        }
    }
}
----------------------------------------

  public override void WellKnownBinary (Stream sout) {
    sout.WriteByte (BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0);
    sout.Write (GeoBase.PolygonWkbs, 0, 4);
    //Using BinarySearch
    int[] tempArray = new int[this.Rings.Count];
    this.Rings.CopyTo(tempArray, 0);
    Array.Sort(tempArray);
    int index = Array.BinarySearch(tempArray, this.Rings.Count);
    sout.Write ( BitConverter.GetBytes ( index ), 0, 4);
    foreach (var ring in this.Rings) {
        foreach (var position in ring) {
            position.WellKnownBinary (sout);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
350
7
Gpt3D_Clone350_7.cs 1 11
Gpt3D_Clone350_7.cs 12 27
----------------------------------------

public override void WellKnownBinary (Stream sout) {
    sout.WriteByte (BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0);
    sout.Write (GeoBase.PolygonWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.Rings.Count), 0, 4);
    foreach (var ring in this.Rings) {
        sout.Write (BitConverter.GetBytes (ring.Count), 0, 4);
        foreach (var position in ring) {
            position.WellKnownBinary (sout);
        }
    }
}
----------------------------------------

  public override void WellKnownBinary (Stream sout) {
    sout.WriteByte (BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0);
    sout.Write (GeoBase.PolygonWkbs, 0, 4);
    // Using Wavelete transformation
    int[] tempArray = new int[this.Rings.Count];
    this.Rings.CopyTo(tempArray, 0);
    int[] result = WaveletTransform.Transform(tempArray);
    sout.Write ( BitConverter.GetBytes ( result.Length ), 0, 4);
    foreach (var ring in this.Rings) {
        foreach (var position in ring) {
            position.WellKnownBinary (sout);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
350
8
Gpt3D_Clone350_8.cs 1 11
Gpt3D_Clone350_8.cs 12 26
----------------------------------------

public override void WellKnownBinary (Stream sout) {
    sout.WriteByte (BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0);
    sout.Write (GeoBase.PolygonWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.Rings.Count), 0, 4);
    foreach (var ring in this.Rings) {
        sout.Write (BitConverter.GetBytes (ring.Count), 0, 4);
        foreach (var position in ring) {
            position.WellKnownBinary (sout);
        }
    }
}
----------------------------------------

  public override void WellKnownBinary (Stream sout) {
    sout.WriteByte (BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0);
    sout.Write (GeoBase.PolygonWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.Rings.Count), 0, 4);
    foreach (var ring in this.Rings) {
        // Using Parallel.ForEach
        Parallel.ForEach(ring, position => {
            position.WellKnownBinary (sout);  
        });
        sout.Write (BitConverter.GetBytes (ring.Count), 0, 4);
      }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
351
8
Gpt3D_Clone351_8.cs 1 11
Gpt3D_Clone351_8.cs 12 26
----------------------------------------

public override void WellKnownBinary (Stream sout) {
    sout.WriteByte (BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0);
    sout.Write (GeoBase.PolygonWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.Rings.Count), 0, 4);
    foreach (var ring in this.Rings) {
        sout.Write (BitConverter.GetBytes (ring.Count), 0, 4);
        foreach (var position in ring) {
            position.WellKnownBinary (sout);
        }
    }
}
----------------------------------------

 public override void WellKnownBinary (Stream sout){
                byte[] littleEndian = {0x01};
                byte[] bigEndian = {0x00};
                sout.Write (BitConverter.IsLittleEndian ? littleEndian : bigEndian, 0, 1);
                sout.Write (GeoBase.PolygonWkbs, 0, 4);
                sout.Write (BitConverter.GetBytes (this.Rings.Count), 0, 4);
                foreach (var ring in this.Rings) {
                    sout.Write (BitConverter.GetBytes (ring.Count), 0, 4);
                    foreach (var position in ring) {
                        position.WellKnownBinary (sout);
                    }
                } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
352
2
Gpt3D_Clone352_2.cs 1 11
Gpt3D_Clone352_2.cs 12 26
----------------------------------------

public override void WellKnownBinary (Stream sout) {
    byte order = BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0;
    sout.WriteByte (order);
    sout.Write (GeoBase.MultiPointWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.Points.Count), 0, 4);
    foreach (var point in this.Points) {
        sout.WriteByte (order);
        sout.Write (GeoBase.PointWkbs, 0, 4);
        point.WellKnownBinary (sout);
    }
}
----------------------------------------

	public override void WellKnownBinary (Stream sout) {
    byte order = BitConverter.IsLittleEndian ? (byte) 0 : (byte) 1;
    sout.WriteByte (order);
    sout.Write (GeoBase.MultiPointWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.Points.Count), 0, 4);
    int i = 0;
    while(i < this.Points.Count) {
        sout.WriteByte (order);
        sout.Write (GeoBase.PointWkbs, 0, 4);
        this.Points[i].WellKnownBinary(sout);
        i++;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
352
3
Gpt3D_Clone352_3.cs 1 11
Gpt3D_Clone352_3.cs 12 33
----------------------------------------

public override void WellKnownBinary (Stream sout) {
    byte order = BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0;
    sout.WriteByte (order);
    sout.Write (GeoBase.MultiPointWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.Points.Count), 0, 4);
    foreach (var point in this.Points) {
        sout.WriteByte (order);
        sout.Write (GeoBase.PointWkbs, 0, 4);
        point.WellKnownBinary (sout);
    }
}
----------------------------------------

	public override void WellKnownBinary (Stream sout) {
    // Determine ordering for bytes
    byte order = BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0;
    sout.WriteByte (order);
    // Write MultiPoint WKB
    sout.Write (GeoBase.MultiPointWkbs, 0, 4);
    // Write point count as array of bytes
    sout.Write (BitConverter.GetBytes (this.Points.Count), 0, 4);
    // Iterate through points and write Point WKBs
    int i = 0;
    while(this.Points.Count>i) {
        sout.WriteByte (order);
        sout.Write (GeoBase.PointWkbs, 0, 4);
        this.Points[i].WellKnownBinary(sout);
        i++;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
352
4
Gpt3D_Clone352_4.cs 1 11
Gpt3D_Clone352_4.cs 12 30
----------------------------------------

public override void WellKnownBinary (Stream sout) {
    byte order = BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0;
    sout.WriteByte (order);
    sout.Write (GeoBase.MultiPointWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.Points.Count), 0, 4);
    foreach (var point in this.Points) {
        sout.WriteByte (order);
        sout.Write (GeoBase.PointWkbs, 0, 4);
        point.WellKnownBinary (sout);
    }
}
----------------------------------------

	public override void WellKnownBinary (Stream sout) {
    // Determine ordering for bytes
    byte order = (BitConverter.IsLittleEndian) ? (byte)1 : (byte)0;
    // Write MultiPoint WKB
    sout.Write(GeoBase.MultiPointWkbs, 0, 4);
    // Write point count as array of bytes
    sout.Write(BitConverter.GetBytes(this.Points.Count), 0, 4);
    // Iterate through points and write Point WKBs
    this.Points.ForEach(point => {
        sout.Write(order);
        sout.Write(GeoBase.PointWkbs, 0, 4);
        point.WellKnownBinary(sout);
    });
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
352
5
Gpt3D_Clone352_5.cs 1 11
Gpt3D_Clone352_5.cs 12 27
----------------------------------------

public override void WellKnownBinary (Stream sout) {
    byte order = BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0;
    sout.WriteByte (order);
    sout.Write (GeoBase.MultiPointWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.Points.Count), 0, 4);
    foreach (var point in this.Points) {
        sout.WriteByte (order);
        sout.Write (GeoBase.PointWkbs, 0, 4);
        point.WellKnownBinary (sout);
    }
}
----------------------------------------

	public override void WellKnownBinary (Stream sout) {
        // Determine ordering for bytes
    byte order = (BitConverter.IsLittleEndian) ? (byte)1 : (byte)0;
    
    sout.Write(order);
    sout.Write(GeoBase.MultiPointWkbs, 0, 4);
    sout.Write(BitConverter.GetBytes(this.Points.Count), 0, 4);
    
    for (int i=0; i<this.Points.Count; i++) {
        sout.Write(order);
        sout.Write(GeoBase.PointWkbs, 0, 4);
        this.Points[i].WellKnownBinary(sout);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
352
6
Gpt3D_Clone352_6.cs 1 11
Gpt3D_Clone352_6.cs 12 27
----------------------------------------

public override void WellKnownBinary (Stream sout) {
    byte order = BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0;
    sout.WriteByte (order);
    sout.Write (GeoBase.MultiPointWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.Points.Count), 0, 4);
    foreach (var point in this.Points) {
        sout.WriteByte (order);
        sout.Write (GeoBase.PointWkbs, 0, 4);
        point.WellKnownBinary (sout);
    }
}
----------------------------------------

	public override void WellKnownBinary (Stream sout) {
    // Determine ordering for bytes
    byte order = (BitConverter.IsLittleEndian) ? (byte)1 : (byte)0;
    // Write MultiPoint WKB
    sout.Write(GeoBase.MultiPointWkbs, 0, 4);
    // Write point count as array of bytes
    sout.Write(BitConverter.GetBytes(this.Points.Count), 0, 4);
    // Use For loop to iterate over points
    for (int i = 0; i < Points.Count; i++) {
        sout.Write(order);
        sout.Write(GeoBase.PointWkbs, 0, 4);
        Points[i].WellKnownBinary(sout);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
352
7
Gpt3D_Clone352_7.cs 1 11
Gpt3D_Clone352_7.cs 12 29
----------------------------------------

public override void WellKnownBinary (Stream sout) {
    byte order = BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0;
    sout.WriteByte (order);
    sout.Write (GeoBase.MultiPointWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.Points.Count), 0, 4);
    foreach (var point in this.Points) {
        sout.WriteByte (order);
        sout.Write (GeoBase.PointWkbs, 0, 4);
        point.WellKnownBinary (sout);
    }
}
----------------------------------------

	public override void WellKnownBinary (Stream sout) {
    // Determine Ordering for bytes
    byte order = (BitConverter.IsLittleEndian) ? (byte) 1 : (byte) 0;
    // Write MultiPoint WKB
    sout.Write(GeoBase.MultiPointWkbs, 0, 4);
    // Write point count as array of bytes
    sout.Write(BitConverter.GetBytes(this.Points.Count), 0, 4);
    for (int i = 0; i < this.Points.Count; i++)
    {
        sout.WriteByte(order);
        sout.Write(GeoBase.PointWkbs, 0, 4);
        this.Points[i].WellKnownBinary(sout);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
353
0
Gpt3D_Clone353_0.cs 1 11
Gpt3D_Clone353_0.cs 12 24
----------------------------------------

public override void WellKnownBinary (Stream sout) {
    byte order = BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0;
    sout.WriteByte (order);
    sout.Write (GeoBase.MultiPointWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.Points.Count), 0, 4);
    foreach (var point in this.Points) {
        sout.WriteByte (order);
        sout.Write (GeoBase.PointWkbs, 0, 4);
        point.WellKnownBinary (sout);
    }
}
----------------------------------------

  public override void WellKnownBinary (Stream sout) {
        byte endianOrder = BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0;
        sout.Write(endianOrder);
        sout.Write(GeoBase.MultiPointWkbs);
        sout.Write(BitConverter.GetBytes(this.Points.Count));
        foreach (var point in this.Points) {
            sout.Write(endianOrder);
            sout.Write(GeoBase.PointWkbs);
            point.WellKnownBinary (sout);
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
353
1
Gpt3D_Clone353_1.cs 1 11
Gpt3D_Clone353_1.cs 12 24
----------------------------------------

public override void WellKnownBinary (Stream sout) {
    byte order = BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0;
    sout.WriteByte (order);
    sout.Write (GeoBase.MultiPointWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.Points.Count), 0, 4);
    foreach (var point in this.Points) {
        sout.WriteByte (order);
        sout.Write (GeoBase.PointWkbs, 0, 4);
        point.WellKnownBinary (sout);
    }
}
----------------------------------------

  public override void WellKnownBinary(Stream sout) {
        byte flag = BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0;
        sout.Write(flag);
        sout.Write(GeoBase.MultiPointWkbs);
        sout.Write(BitConverter.GetBytes(this.Points.Count));
        foreach (var point in this.Points) {
            sout.Write(flag);
            sout.Write(GeoBase.PointWkbs);
            point.WellKnownBinary (sout);
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
361
0
Gpt3D_Clone361_0.cs 1 21
Gpt3D_Clone361_0.cs 22 57
----------------------------------------

public void ReadXml (System.Xml.XmlReader reader) {
    XmlSerializer keySerializer = new XmlSerializer (typeof (TKey));
    XmlSerializer valueSerializer = new XmlSerializer (typeof (TValue));
    bool wasEmpty = reader.IsEmptyElement;
    reader.Read ();
    if (wasEmpty)
        return;
    while (reader.NodeType != System.Xml.XmlNodeType.EndElement) {
        reader.ReadStartElement ("item");
        reader.ReadStartElement ("key");
        TKey key = (TKey) keySerializer.Deserialize (reader);
        reader.ReadEndElement ();
        reader.ReadStartElement ("value");
        TValue value = (TValue) valueSerializer.Deserialize (reader);
        reader.ReadEndElement ();
        this.Add (key, value);
        reader.ReadEndElement ();
        reader.MoveToContent ();
    }
    reader.ReadEndElement ();
}
----------------------------------------

  public void ReadXml (System.Xml.XmlReader reader) {
    int count = 0;
    XmlSerializer keySerializer = new XmlSerializer (typeof (TKey));
    XmlSerializer valueSerializer = new XmlSerializer (typeof (TValue));
    bool wasEmpty = reader.IsEmptyElement;
    reader.Read ();
    if (wasEmpty) {
        return;
    }
    while (reader.NodeType != System.Xml.XmlNodeType.EndElement) {
        reader.ReadStartElement ("item");
        reader.ReadStartElement ("key");
        TKey key = (TKey) keySerializer.Deserialize (reader);
        reader.ReadEndElement ();
        reader.ReadStartElement ("value");
        TValue value = (TValue) valueSerializer.Deserialize (reader);
        reader.ReadEndElement ();
        bool isValid = false;
        if(key.GetType() == typeof(string)) {
            if(!string.IsNullOrEmpty((string)key)) {
                isValid = true;
            }
        } else {
            isValid = true;
        }
        if(isValid) {
            this.Add (key, value);
            count++;
        }
        reader.ReadEndElement ();
        reader.MoveToContent ();
    }
    reader.ReadEndElement ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
361
1
Gpt3D_Clone361_1.cs 1 21
Gpt3D_Clone361_1.cs 22 49
----------------------------------------

public void ReadXml (System.Xml.XmlReader reader) {
    XmlSerializer keySerializer = new XmlSerializer (typeof (TKey));
    XmlSerializer valueSerializer = new XmlSerializer (typeof (TValue));
    bool wasEmpty = reader.IsEmptyElement;
    reader.Read ();
    if (wasEmpty)
        return;
    while (reader.NodeType != System.Xml.XmlNodeType.EndElement) {
        reader.ReadStartElement ("item");
        reader.ReadStartElement ("key");
        TKey key = (TKey) keySerializer.Deserialize (reader);
        reader.ReadEndElement ();
        reader.ReadStartElement ("value");
        TValue value = (TValue) valueSerializer.Deserialize (reader);
        reader.ReadEndElement ();
        this.Add (key, value);
        reader.ReadEndElement ();
        reader.MoveToContent ();
    }
    reader.ReadEndElement ();
}
----------------------------------------

  public void ReadXml (System.Xml.XmlReader reader) {
    Dictionary<TKey, TValue> tempDict = new Dictionary<TKey, TValue>();
    XmlSerializer keySerializer = new XmlSerializer (typeof(TKey));
    XmlSerializer valueSerializer = new XmlSerializer (typeof(TValue));
    bool wasEmpty = reader.IsEmptyElement;
    reader.Read();
    if (wasEmpty)
        return;
    while (reader.NodeType != System.Xml.XmlNodeType.EndElement) {
        reader.ReadStartElement("item");
        reader.ReadStartElement("key");
        TKey key = (TKey)keySerializer.Deserialize(reader);
        reader.ReadEndElement();
        reader.ReadStartElement("value");
        TValue value = (TValue)valueSerializer.Deserialize(reader);
        reader.ReadEndElement();
        if (tempDict.ContainsKey(key))
            tempDict[key] = value;
        else
            tempDict.Add(key, value);
        reader.ReadEndElement();
        reader.MoveToContent();
    }
    reader.ReadEndElement();
    this.AddRange(tempDict);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
362
0
Gpt3D_Clone362_0.cs 1 15
Gpt3D_Clone362_0.cs 16 28
----------------------------------------

public void WriteXml (System.Xml.XmlWriter writer) {
    XmlSerializer keySerializer = new XmlSerializer (typeof (TKey));
    XmlSerializer valueSerializer = new XmlSerializer (typeof (TValue));
    foreach (TKey key in this.Keys) {
        writer.WriteStartElement ("item");
        writer.WriteStartElement ("key");
        keySerializer.Serialize (writer, key);
        writer.WriteEndElement ();
        writer.WriteStartElement ("value");
        TValue value = this [key];
        valueSerializer.Serialize (writer, value);
        writer.WriteEndElement ();
        writer.WriteEndElement ();
    }
}
----------------------------------------

	public void ExportXml (System.Xml.XmlWriter writer) {
    XmlSerializer keySerializer = new XmlSerializer (typeof (TKey));
    XmlSerializer valueSerializer = new XmlSerializer (typeof (TValue));
    foreach (TKey key in this.Keys) {
        writer.WriteStartElement ("Element");
        writer.WriteElementString ("Key", keySerializer.Serialize (key).ToString ());
        TValue value = this [key];
        writer.WriteElementString ("Value", valueSerializer.Serialize (value).ToString ());
        writer.WriteEndElement ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
362
1
Gpt3D_Clone362_1.cs 1 15
Gpt3D_Clone362_1.cs 16 28
----------------------------------------

public void WriteXml (System.Xml.XmlWriter writer) {
    XmlSerializer keySerializer = new XmlSerializer (typeof (TKey));
    XmlSerializer valueSerializer = new XmlSerializer (typeof (TValue));
    foreach (TKey key in this.Keys) {
        writer.WriteStartElement ("item");
        writer.WriteStartElement ("key");
        keySerializer.Serialize (writer, key);
        writer.WriteEndElement ();
        writer.WriteStartElement ("value");
        TValue value = this [key];
        valueSerializer.Serialize (writer, value);
        writer.WriteEndElement ();
        writer.WriteEndElement ();
    }
}
----------------------------------------

	public void SerializeXml (System.Xml.XmlWriter writer) {
    XmlSerializer keySerializer = new XmlSerializer (typeof (TKey));
    XmlSerializer valueSerializer = new XmlSerializer (typeof (TValue));
    foreach (TKey key in this.Keys) {
        writer.WriteStartElement ("Node");
        writer.WriteNode (keySerializer.Serialize (key), true);
        TValue value = this [key];
        writer.WriteNode (valueSerializer.Serialize (value), true);
        writer.WriteEndElement ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
362
2
Gpt3D_Clone362_2.cs 1 15
Gpt3D_Clone362_2.cs 16 28
----------------------------------------

public void WriteXml (System.Xml.XmlWriter writer) {
    XmlSerializer keySerializer = new XmlSerializer (typeof (TKey));
    XmlSerializer valueSerializer = new XmlSerializer (typeof (TValue));
    foreach (TKey key in this.Keys) {
        writer.WriteStartElement ("item");
        writer.WriteStartElement ("key");
        keySerializer.Serialize (writer, key);
        writer.WriteEndElement ();
        writer.WriteStartElement ("value");
        TValue value = this [key];
        valueSerializer.Serialize (writer, value);
        writer.WriteEndElement ();
        writer.WriteEndElement ();
    }
}
----------------------------------------

	public void GenerateXmlFile (System.Xml.XmlWriter writer) {
    XmlSerializer keySerializer = new XmlSerializer (typeof (TKey));
    XmlSerializer valueSerializer = new XmlSerializer (typeof (TValue));
    foreach (TKey key in this.Keys) {
        writer.WriteStartElement ("DictionaryItem");
        writer.WriteAttributeString ("Key", keySerializer.Serialize (key).ToString ());
        TValue value = this [key];
        writer.WriteAttributeString ("Value", valueSerializer.Serialize (value).ToString ());
        writer.WriteEndElement ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
362
3
Gpt3D_Clone362_3.cs 1 15
Gpt3D_Clone362_3.cs 16 28
----------------------------------------

public void WriteXml (System.Xml.XmlWriter writer) {
    XmlSerializer keySerializer = new XmlSerializer (typeof (TKey));
    XmlSerializer valueSerializer = new XmlSerializer (typeof (TValue));
    foreach (TKey key in this.Keys) {
        writer.WriteStartElement ("item");
        writer.WriteStartElement ("key");
        keySerializer.Serialize (writer, key);
        writer.WriteEndElement ();
        writer.WriteStartElement ("value");
        TValue value = this [key];
        valueSerializer.Serialize (writer, value);
        writer.WriteEndElement ();
        writer.WriteEndElement ();
    }
}
----------------------------------------

	public void SaveXml (System.Xml.XmlWriter writer) {
    XmlSerializer keySerializer = new XmlSerializer (typeof (TKey));
    XmlSerializer valueSerializer = new XmlSerializer (typeof (TValue));
    foreach (TKey key in this.Keys) {
        writer.WriteStartElement ("Pair");
        writer.WriteAttributeString ("key", keySerializer.Serialize (key).ToString ());
        TValue value = this [key];
        writer.WriteAttributeString ("value", valueSerializer.Serialize (value).ToString ());
        writer.WriteEndElement ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
363
0
Gpt3D_Clone363_0.cs 1 21
Gpt3D_Clone363_0.cs 22 49
----------------------------------------

internal void Pop () {
    Debug.Assert (_count != 0);
    if (_count > 0) {
        -- _count;
        int ix = 0;
        while (ix < _count / 2) {
            int smallestChild = HeapLeftChild (ix);
            int rightChild = HeapRightFromLeft (smallestChild);
            if (rightChild < _count - 1 && _comparer.Compare (_heap [rightChild], _heap [smallestChild]) < 0) {
                smallestChild = rightChild;
            }
            if (_comparer.Compare (_heap [_count], _heap [smallestChild]) <= 0) {
                break;
            }
            _heap [ix] = _heap [smallestChild];
            ix = smallestChild;
        }
        _heap [ix] = _heap [_count];
        _heap [_count] = default (T);
    }
}
----------------------------------------

  internal void Pop () {
    Debug.Assert (_count != 0);
    if (_count > 0) {
        -- _count;
        int ix = 0;
        int smallestChild = 0;
        int rightChild = 0;
        while (ix < _count / 2) {
            smallestChild = HeapLeftChild (ix);
            rightChild = HeapRightFromLeft (smallestChild);
            if (rightChild < _count - 1 && _comparer.Compare (_heap [rightChild], _heap [smallestChild]) < 0) {
                smallestChild = rightChild;
            }
            if (_comparer.Compare (_heap [_count], _heap [smallestChild]) <= 0) {
                break;
            }
            else {
             _heap [ix] = _heap [smallestChild];
            ix = smallestChild;
            }
            
        }
        _heap [ix] = _heap [_count];
        _heap [_count] = default (T);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
363
1
Gpt3D_Clone363_1.cs 1 21
Gpt3D_Clone363_1.cs 22 49
----------------------------------------

internal void Pop () {
    Debug.Assert (_count != 0);
    if (_count > 0) {
        -- _count;
        int ix = 0;
        while (ix < _count / 2) {
            int smallestChild = HeapLeftChild (ix);
            int rightChild = HeapRightFromLeft (smallestChild);
            if (rightChild < _count - 1 && _comparer.Compare (_heap [rightChild], _heap [smallestChild]) < 0) {
                smallestChild = rightChild;
            }
            if (_comparer.Compare (_heap [_count], _heap [smallestChild]) <= 0) {
                break;
            }
            _heap [ix] = _heap [smallestChild];
            ix = smallestChild;
        }
        _heap [ix] = _heap [_count];
        _heap [_count] = default (T);
    }
}
----------------------------------------

 internal void Pop () {
    Debug.Assert (_count != 0);
    if (_count > 0) {
        -- _count;
        int ix = 0;
        int left = HeapLeftChild (ix);
        int lrChild;
        while (ix < _count / 2) {
            lrChild = HeapRightFromLeft (left);
            if (lrChild < _count && _comparer.Compare (_heap [lrChild], _heap [left]) < 0) {
                left = lrChild;
            }
            if (_comparer.Compare (_heap [_count], _heap [left]) <= 0) {
                break;
            }
            else {
             _heap [ix] = _heap [left];
            ix = left;
            left = HeapLeftChild (ix);
            }
            
        }
        _heap [ix] = _heap [_count];
        _heap [_count] = default (T);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
363
2
Gpt3D_Clone363_2.cs 1 21
Gpt3D_Clone363_2.cs 22 48
----------------------------------------

internal void Pop () {
    Debug.Assert (_count != 0);
    if (_count > 0) {
        -- _count;
        int ix = 0;
        while (ix < _count / 2) {
            int smallestChild = HeapLeftChild (ix);
            int rightChild = HeapRightFromLeft (smallestChild);
            if (rightChild < _count - 1 && _comparer.Compare (_heap [rightChild], _heap [smallestChild]) < 0) {
                smallestChild = rightChild;
            }
            if (_comparer.Compare (_heap [_count], _heap [smallestChild]) <= 0) {
                break;
            }
            _heap [ix] = _heap [smallestChild];
            ix = smallestChild;
        }
        _heap [ix] = _heap [_count];
        _heap [_count] = default (T);
    }
}
----------------------------------------

 internal void Pop () {
    Debug.Assert (_count != 0);
    if (_count > 0) {
        -- _count;
        int ix = 0;
        int smallestChild;
        int rightChild;
        while (ix < _count / 2) {
            smallestChild = HeapLeftChild (ix);
            rightChild = HeapRightFromLeft (smallestChild);
            if (rightChild < _count && _comparer.Compare (_heap [rightChild], _heap [smallestChild]) < 0) {
                smallestChild = rightChild;
            }
            if (_comparer.Compare (_heap [_count], _heap [smallestChild]) <= 0) {
                break;
            }
            else {
            _heap [ix] = _heap [smallestChild];
            ix = smallestChild;
            }
        }
        _heap [ix] = _heap [_count];
        _heap [_count] = default (T);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
363
3
Gpt3D_Clone363_3.cs 1 21
Gpt3D_Clone363_3.cs 22 48
----------------------------------------

internal void Pop () {
    Debug.Assert (_count != 0);
    if (_count > 0) {
        -- _count;
        int ix = 0;
        while (ix < _count / 2) {
            int smallestChild = HeapLeftChild (ix);
            int rightChild = HeapRightFromLeft (smallestChild);
            if (rightChild < _count - 1 && _comparer.Compare (_heap [rightChild], _heap [smallestChild]) < 0) {
                smallestChild = rightChild;
            }
            if (_comparer.Compare (_heap [_count], _heap [smallestChild]) <= 0) {
                break;
            }
            _heap [ix] = _heap [smallestChild];
            ix = smallestChild;
        }
        _heap [ix] = _heap [_count];
        _heap [_count] = default (T);
    }
}
----------------------------------------

 internal void Pop () {
    Debug.Assert (_count != 0);
    if (_count > 0) {
        -- _count;
        int ix = 0;
        int smallestChild;
        int rightChild;
        while (ix < _count / 2) {
            smallestChild = HeapLeftChild (ix);
            rightChild = HeapRightFromLeft (smallestChild);
            if (rightChild < _count && _comparer.Compare (_heap [rightChild], _heap [smallestChild]) < 0) {
                smallestChild = rightChild;
            }
            if (_comparer.Compare (_heap [_count], _heap [smallestChild]) <= 0) {
                break;
            }
            else {
            _heap [ix] = _heap [smallestChild];
            ix = smallestChild;
            }
        }
        _heap [ix] = _heap [_count];
        _heap [_count] = default (T);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
363
4
Gpt3D_Clone363_4.cs 1 21
Gpt3D_Clone363_4.cs 22 49
----------------------------------------

internal void Pop () {
    Debug.Assert (_count != 0);
    if (_count > 0) {
        -- _count;
        int ix = 0;
        while (ix < _count / 2) {
            int smallestChild = HeapLeftChild (ix);
            int rightChild = HeapRightFromLeft (smallestChild);
            if (rightChild < _count - 1 && _comparer.Compare (_heap [rightChild], _heap [smallestChild]) < 0) {
                smallestChild = rightChild;
            }
            if (_comparer.Compare (_heap [_count], _heap [smallestChild]) <= 0) {
                break;
            }
            _heap [ix] = _heap [smallestChild];
            ix = smallestChild;
        }
        _heap [ix] = _heap [_count];
        _heap [_count] = default (T);
    }
}
----------------------------------------

 internal void Pop () {
    Debug.Assert (_count != 0);
    if (_count > 0) {
        -- _count;
        int ix = 0;
        int left = HeapLeftChild (ix);
        int right = HeapRightFromLeft (left);
        while (ix < _count / 2) {
            if (right < _count && _comparer.Compare (_heap [right], _heap [left]) < 0) {
                left = right;
            }
            if (_comparer.Compare (_heap [_count], _heap [left]) <= 0) {
                break;
            }
            else {
             _heap [ix] = _heap [left];
            ix = left;
            left = HeapLeftChild (ix);
            right = HeapRightFromLeft (left);
            }
            
        }
        _heap [ix] = _heap [_count];
        _heap [_count] = default (T);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
363
5
Gpt3D_Clone363_5.cs 1 21
Gpt3D_Clone363_5.cs 22 48
----------------------------------------

internal void Pop () {
    Debug.Assert (_count != 0);
    if (_count > 0) {
        -- _count;
        int ix = 0;
        while (ix < _count / 2) {
            int smallestChild = HeapLeftChild (ix);
            int rightChild = HeapRightFromLeft (smallestChild);
            if (rightChild < _count - 1 && _comparer.Compare (_heap [rightChild], _heap [smallestChild]) < 0) {
                smallestChild = rightChild;
            }
            if (_comparer.Compare (_heap [_count], _heap [smallestChild]) <= 0) {
                break;
            }
            _heap [ix] = _heap [smallestChild];
            ix = smallestChild;
        }
        _heap [ix] = _heap [_count];
        _heap [_count] = default (T);
    }
}
----------------------------------------

 internal void Pop () {
    Debug.Assert (_count != 0);
    if (_count > 0) {
        -- _count;
        int ix = 0;
        int smallestChild;
        while (ix < _count / 2) {
            smallestChild = HeapLeftChild (ix);
            if (HeapRightFromLeft(smallestChild) < _count - 1 && 
            _comparer.Compare (_heap [HeapRightFromLeft(smallestChild)], _heap [smallestChild]) < 0){
                smallestChild = HeapRightFromLeft(smallestChild);
            }           
            if (_comparer.Compare (_heap [_count], _heap [smallestChild]) <= 0) {
                break;
            }
            else {
             _heap [ix] = _heap [smallestChild];
            ix = smallestChild;
            }
            
        }
        _heap [ix] = _heap [_count];
        _heap [_count] = default (T);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
363
6
Gpt3D_Clone363_6.cs 1 21
Gpt3D_Clone363_6.cs 22 45
----------------------------------------

internal void Pop () {
    Debug.Assert (_count != 0);
    if (_count > 0) {
        -- _count;
        int ix = 0;
        while (ix < _count / 2) {
            int smallestChild = HeapLeftChild (ix);
            int rightChild = HeapRightFromLeft (smallestChild);
            if (rightChild < _count - 1 && _comparer.Compare (_heap [rightChild], _heap [smallestChild]) < 0) {
                smallestChild = rightChild;
            }
            if (_comparer.Compare (_heap [_count], _heap [smallestChild]) <= 0) {
                break;
            }
            _heap [ix] = _heap [smallestChild];
            ix = smallestChild;
        }
        _heap [ix] = _heap [_count];
        _heap [_count] = default (T);
    }
}
----------------------------------------

 internal void Pop () {
    Debug.Assert (_count != 0);
    if (_count > 0) {
        -- _count;
        int ix = 0;
        int smallestChild;
        while (ix < _count / 2) {
            smallestChild = HeapLeftChild (ix);
            if (HeapRightFromLeft(smallestChild) < _count && 
            _comparer.Compare (_heap [HeapRightFromLeft(smallestChild)], _heap [smallestChild]) < 0){
                smallestChild = HeapRightFromLeft(smallestChild);
            }           
            if (_comparer.Compare (_heap [_count], _heap [smallestChild]) <= 0) {
                break;
            }
            _heap [ix] = _heap [smallestChild];
            ix = smallestChild;
        }
        _heap [ix] = _heap [_count];
        _heap [_count] = default (T);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
365
0
Gpt3D_Clone365_0.cs 1 24
Gpt3D_Clone365_0.cs 25 46
----------------------------------------

protected override void WndProc (ref Message m) {
    const int WM_NCLBUTTONDOWN = 0x00A1;
    const int WM_NCLBUTTONUP = 0x00A2;
    const int HTCLOSE = 20;
    if (m.Msg == WM_NCLBUTTONDOWN) {
        switch ((int) m.WParam) {
            case HTCLOSE :
                break;
            default :
                base.WndProc (ref m);
                break;
        }
    } else {
        if (m.Msg == WM_NCLBUTTONUP) {
            switch ((int) m.WParam) {
                case HTCLOSE :
                    Trace.WriteLine ("Close Button clicked");
                    Close ();
                    break;
            }
        }
        base.WndProc (ref m);
    }
}
----------------------------------------

 protected override void WndProc (ref Message m) {
    const int WM_NCLBUTTONDOWN = 0x00A1;
    const int WM_NCLBUTTONUP = 0x00A2;
    const int HTCLOSE = 20;
    switch (m.Msg) {
        case WM_NCLBUTTONDOWN:
            if ((int)m.WParam == HTCLOSE) 
                Trace.WriteLine("Close Button clicked");
                Close();
            break;
        case WM_NCBUTTONUP:
            if ((int)m.WParam == HTCLOSE)
                Trace.WriteLine("Close Button clicked");
                Close();
            break;
        default: 
            base.WndProc (ref m);
            break;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
365
1
Gpt3D_Clone365_1.cs 1 24
Gpt3D_Clone365_1.cs 25 46
----------------------------------------

protected override void WndProc (ref Message m) {
    const int WM_NCLBUTTONDOWN = 0x00A1;
    const int WM_NCLBUTTONUP = 0x00A2;
    const int HTCLOSE = 20;
    if (m.Msg == WM_NCLBUTTONDOWN) {
        switch ((int) m.WParam) {
            case HTCLOSE :
                break;
            default :
                base.WndProc (ref m);
                break;
        }
    } else {
        if (m.Msg == WM_NCLBUTTONUP) {
            switch ((int) m.WParam) {
                case HTCLOSE :
                    Trace.WriteLine ("Close Button clicked");
                    Close ();
                    break;
            }
        }
        base.WndProc (ref m);
    }
}
----------------------------------------

 protected override void WndProc (ref Message m) {
    const int WM_NCLBUTTONDOWN = 0x00A1;
    const int WM_NCLBUTTONUP = 0x00A2;
    const int HTCLOSE = 20;
    switch (m.Msg) {
        case WM_NCLBUTTONDOWN:
            if (m.WParam == HTCLOSE) 
                Trace.WriteLine("Close Button clicked");
                Close();
            break;
        case WM_NCBUTTONUP:
            if (m.WParam == HTCLOSE)
                Trace.WriteLine("Close Button clicked");
                Close();
            break;
        default: 
            base.WndProc (ref m);
            break;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
366
0
Gpt3D_Clone366_0.cs 1 12
Gpt3D_Clone366_0.cs 13 44
----------------------------------------

public static string Flatten (this ExpandoObject expando) {
    StringBuilder sb = new StringBuilder ();
    List < string > contents = new List < string > ();
    var d = expando as IDictionary < string, object >;
    sb.Append ("{");
    foreach (KeyValuePair < string, object > kvp in d) {
        contents.Add (String.Format ("{0}: {1}", kvp.Key, JsonConvert.SerializeObject (kvp.Value)));
    }
    sb.Append (String.Join (",", contents.ToArray ()));
    sb.Append ("}");
    return sb.ToString ();
}
----------------------------------------

 public static string Flatten (this ExpandoObject expando)
{
   StringBuilder sb = new StringBuilder();
   List<string> listOfContents = new List<string>();
   // convert expando object to dictionary 
   IDictionary<string, object> dictExpando = expando as IDictionary<string, object>;
   
   // add opening bracket 
   sb.Append("{");
   // iterate through each key value pair
   foreach (KeyValuePair<string, object> kvp in dictExpando)
   {
       // add the key and serialized value to the list
       listOfContents.Add(string.Format("{0}: {1}", kvp.Key, JsonConvert.SerializeObject(kvp.Value)));
   }
   // join all the list elements to a single string
   string strContents = string.Join(",", listOfContents.ToArray());
   
   // append the string to stringbuilder
   sb.Append(strContents);
   // add closing bracket
   sb.Append("}");
   // return the result
   return sb.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
366
1
Gpt3D_Clone366_1.cs 1 12
Gpt3D_Clone366_1.cs 13 45
----------------------------------------

public static string Flatten (this ExpandoObject expando) {
    StringBuilder sb = new StringBuilder ();
    List < string > contents = new List < string > ();
    var d = expando as IDictionary < string, object >;
    sb.Append ("{");
    foreach (KeyValuePair < string, object > kvp in d) {
        contents.Add (String.Format ("{0}: {1}", kvp.Key, JsonConvert.SerializeObject (kvp.Value)));
    }
    sb.Append (String.Join (",", contents.ToArray ()));
    sb.Append ("}");
    return sb.ToString ();
}
----------------------------------------

 public static string Flatten(this ExpandoObject expando)
{
    // create a string builder and list
    StringBuilder sb = new StringBuilder();
    List<string> contents = new List<string>();
    // cast expando as a dictionary
    IDictionary<string, object> dictExpando = expando as IDictionary<string, object>;
    // add opening bracket
    sb.Append("{");
    // iterate through each key and value
    foreach (KeyValuePair<string, object> kvp in dictExpando)
    {
        // add a serialized string of key and value to the list 
        contents.Add(string.Format("{0}: {1}", kvp.Key, JsonConvert.SerializeObject(kvp.Value)));
    }
    // join the contents together
    string strContents = string.Join(",", contents);
    // add the contents to the string builder
    sb.Append(strContents);
     // add closing bracket
    sb.Append("}");
    // return the result 
    return sb.ToString();
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
366
2
Gpt3D_Clone366_2.cs 1 12
Gpt3D_Clone366_2.cs 13 44
----------------------------------------

public static string Flatten (this ExpandoObject expando) {
    StringBuilder sb = new StringBuilder ();
    List < string > contents = new List < string > ();
    var d = expando as IDictionary < string, object >;
    sb.Append ("{");
    foreach (KeyValuePair < string, object > kvp in d) {
        contents.Add (String.Format ("{0}: {1}", kvp.Key, JsonConvert.SerializeObject (kvp.Value)));
    }
    sb.Append (String.Join (",", contents.ToArray ()));
    sb.Append ("}");
    return sb.ToString ();
}
----------------------------------------

 public static string Flatten(this ExpandoObject expando)
{
    // create the stringbuilder
    StringBuilder sb = new StringBuilder();
    // cast the expandoobject to a dictionary
    IDictionary<string, object> dictExpando = expando as IDictionary<string, object>;
    // append the opening bracket
    sb.Append("{");
    // iterate through each element
    foreach (KeyValuePair<string, object> kvp in dictExpando)
    {
        // add the key and serialized value to the stringbuilder
        sb.Append(string.Format("{0}: {1}", kvp.Key, JsonConvert.SerializeObject(kvp.Value)));
        // add a comma for next element
        sb.Append(",");
    }
    // remove the last comma
    sb.Length--;
    // append the closing bracket
    sb.Append("}");
    // return the result 
    return sb.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
366
3
Gpt3D_Clone366_3.cs 1 12
Gpt3D_Clone366_3.cs 13 44
----------------------------------------

public static string Flatten (this ExpandoObject expando) {
    StringBuilder sb = new StringBuilder ();
    List < string > contents = new List < string > ();
    var d = expando as IDictionary < string, object >;
    sb.Append ("{");
    foreach (KeyValuePair < string, object > kvp in d) {
        contents.Add (String.Format ("{0}: {1}", kvp.Key, JsonConvert.SerializeObject (kvp.Value)));
    }
    sb.Append (String.Join (",", contents.ToArray ()));
    sb.Append ("}");
    return sb.ToString ();
}
----------------------------------------

 public static string Flatten (this ExpandoObject expando)
{
    // Initialize the stringbuilder
    StringBuilder sb = new StringBuilder();
    // Convert expando object to dictionary
    var d = expando as IDictionary<string, object>;
    // Append opening bracket
    sb.Append("{");
    // Iterate through the expando object
    foreach (KeyValuePair<string, object> kvp in d)
    {
        // Add serialized values to the stringbuilder
        sb.Append(string.Format("{0}: {1}", kvp.Key, JsonConvert.SerializeObject(kvp.Value)));
        // Add a comma for next entry
        sb.Append(",");
    }
    
    // remove the last comma
    sb.Length--;
    // append the closing bracket
    sb.Append("}");
    // return the result
    return sb.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
366
4
Gpt3D_Clone366_4.cs 1 12
Gpt3D_Clone366_4.cs 13 44
----------------------------------------

public static string Flatten (this ExpandoObject expando) {
    StringBuilder sb = new StringBuilder ();
    List < string > contents = new List < string > ();
    var d = expando as IDictionary < string, object >;
    sb.Append ("{");
    foreach (KeyValuePair < string, object > kvp in d) {
        contents.Add (String.Format ("{0}: {1}", kvp.Key, JsonConvert.SerializeObject (kvp.Value)));
    }
    sb.Append (String.Join (",", contents.ToArray ()));
    sb.Append ("}");
    return sb.ToString ();
}
----------------------------------------

 public static string Flatten(this ExpandoObject expando)
{
    // Initialize the stringbuilder
    StringBuilder sb = new StringBuilder();
    // Convert expando object to dictionary
    IDictionary<string, object> dictExpando = expando as IDictionary<string, object>;
    // Add opening bracket
    sb.Append("{");
    // Iterate through each element
    foreach (KeyValuePair<string, object> kvp in dictExpando)
    {
        // Append key and serialized value to the stringbuilder
        sb.Append(string.Format("{0}: {1}", kvp.Key, JsonConvert.SerializeObject(kvp.Value)));
        // Append a comma for next entry
        sb.Append(",");
    }
    // Remove the last comma
    sb.Length--;
    // Append the closing bracket
    sb.Append("}");
    // Return the result
    return sb.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
366
5
Gpt3D_Clone366_5.cs 1 12
Gpt3D_Clone366_5.cs 13 43
----------------------------------------

public static string Flatten (this ExpandoObject expando) {
    StringBuilder sb = new StringBuilder ();
    List < string > contents = new List < string > ();
    var d = expando as IDictionary < string, object >;
    sb.Append ("{");
    foreach (KeyValuePair < string, object > kvp in d) {
        contents.Add (String.Format ("{0}: {1}", kvp.Key, JsonConvert.SerializeObject (kvp.Value)));
    }
    sb.Append (String.Join (",", contents.ToArray ()));
    sb.Append ("}");
    return sb.ToString ();
}
----------------------------------------

public static string Flatten(this ExpandoObject expando) {
    // create stringbuilder
    StringBuilder sb = new StringBuilder();
    // convert expando to dictionary
    var d = expando as IDictionary<string, object>;
    // add opening bracket
    sb.Append("{");
    // iterate through each key value pair
    foreach (KeyValuePair<string, object> kvp in d)
    {
        // add key and serialized value to stringbuilder
        sb.Append(string.Format("{0}: {1}", kvp.Key, JsonConvert.SerializeObject(kvp.Value)));
        // add a comma for next entry 
        sb.Append(",");
    }
    // remove the last comma
    sb.Length--;
    // add closing bracket
    sb.Append("}");
    // return the result
    return sb.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
366
6
Gpt3D_Clone366_6.cs 1 12
Gpt3D_Clone366_6.cs 13 44
----------------------------------------

public static string Flatten (this ExpandoObject expando) {
    StringBuilder sb = new StringBuilder ();
    List < string > contents = new List < string > ();
    var d = expando as IDictionary < string, object >;
    sb.Append ("{");
    foreach (KeyValuePair < string, object > kvp in d) {
        contents.Add (String.Format ("{0}: {1}", kvp.Key, JsonConvert.SerializeObject (kvp.Value)));
    }
    sb.Append (String.Join (",", contents.ToArray ()));
    sb.Append ("}");
    return sb.ToString ();
}
----------------------------------------

 public static string Flatten(this ExpandoObject expando)
{
    // Initialize the string builder
    StringBuilder sb = new StringBuilder();
    // Convert expando object to dictionary
    var d = expando as IDictionary<string, object>;
    // Add opening bracket to the string builder
    sb.Append("{");
    // Iterate through each element
    foreach (KeyValuePair<string, object> kvp in d) 
    {
        // Add key and serialized value to string builder
        sb.Append(string.Format("{0}: {1}", kvp.Key, JsonConvert.SerializeObject(kvp.Value)));
        // Append a comma for next entry
        sb.Append(",");
    }
    // Remove the last comma
    sb.Length--;
    // Add closing bracket to the string builder
    sb.Append("}");
    // Return the result
    return sb.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
366
7
Gpt3D_Clone366_7.cs 1 12
Gpt3D_Clone366_7.cs 13 44
----------------------------------------

public static string Flatten (this ExpandoObject expando) {
    StringBuilder sb = new StringBuilder ();
    List < string > contents = new List < string > ();
    var d = expando as IDictionary < string, object >;
    sb.Append ("{");
    foreach (KeyValuePair < string, object > kvp in d) {
        contents.Add (String.Format ("{0}: {1}", kvp.Key, JsonConvert.SerializeObject (kvp.Value)));
    }
    sb.Append (String.Join (",", contents.ToArray ()));
    sb.Append ("}");
    return sb.ToString ();
}
----------------------------------------

 public static string Flatten(this ExpandoObject expando)
{
    // Initialize the string builder
    StringBuilder sb = new StringBuilder();
    // Convert expando object to dictionary
    var d = expando as IDictionary<string, object>;
    // Add opening bracket to the string builder
    sb.Append("{");
    // Iterate through key value pair
    foreach (KeyValuePair<string, object> kvp in d) 
    {
        // Append key and serialized value to the string builder
        sb.Append(string.Format("{0}: {1}", kvp.Key, JsonConvert.SerializeObject(kvp.Value)));
        // Append a comma for next entry
        sb.Append(",");
    }
    // Remove the last comma
    sb.Length--;
    // Append closing bracket to the string builder
    sb.Append("}");
    // Return the result
    return sb.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
366
8
Gpt3D_Clone366_8.cs 1 12
Gpt3D_Clone366_8.cs 13 44
----------------------------------------

public static string Flatten (this ExpandoObject expando) {
    StringBuilder sb = new StringBuilder ();
    List < string > contents = new List < string > ();
    var d = expando as IDictionary < string, object >;
    sb.Append ("{");
    foreach (KeyValuePair < string, object > kvp in d) {
        contents.Add (String.Format ("{0}: {1}", kvp.Key, JsonConvert.SerializeObject (kvp.Value)));
    }
    sb.Append (String.Join (",", contents.ToArray ()));
    sb.Append ("}");
    return sb.ToString ();
}
----------------------------------------

 public static string Flatten(this ExpandoObject expando)
{
    // Initialize the string builder
    StringBuilder sb = new StringBuilder();
    // Convert expando object to dictionary
    var d = expando as IDictionary<string, object>;
    // Add opening bracket to the string builder
    sb.Append("{");
    // Iterate through each element
    foreach (KeyValuePair<string, object> kvp in d)
    {
        // Add key and serialized value to the string builder
        sb.Append(string.Format("{0}: {1}", kvp.Key, JsonConvert.SerializeObject(kvp.Value)));
        // Append a comma for next entry
        sb.Append(",");
    }
    // Remove the last comma
    sb.Length--;
    // Append closing bracket to the string builder
    sb.Append("}");
    // Return the result
    return sb.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
367
0
Gpt3D_Clone367_0.cs 1 12
Gpt3D_Clone367_0.cs 13 28
----------------------------------------

static void Main (string [] args) {
    int value = 997;
    string [,] arrValues = new string [5, 5];
    for (int i = 0; i < arrValues.GetLength (0); i ++) {
        for (int j = 0; j < arrValues.GetLength (1); j ++) {
            value ++;
            arrValues [i, j] = value.ToString ();
        }
    }
    ArrayPrinter.PrintToConsole (arrValues);
    Console.ReadLine ();
}
----------------------------------------

 static void Main (string [] args) {
    int value = 997;
    string [,] arrValues = new string [5, 5];
    for (int i = arrValues.GetLength (0) - 1; i >= 0; i --) {
        for (int j = arrValues.GetLength (1) - 1; j >= 0; j --) {
            if (i % 2 == 1) {
                value ++;
            }
            arrValues [i, j] = value.ToString ();
        }
    }
    ArrayPrinter.PrintToConsole (arrValues);
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
368
1
Gpt3D_Clone368_1.cs 1 22
Gpt3D_Clone368_1.cs 23 47
----------------------------------------

private static int Encode (int value, byte [] buffer, int index) {
    byte temp;
    bool leading = true;
    temp = (value > > 24) & 0xFF;
    if (temp > 0) {
        buffer [index ++] = temp;
        leading = false;
    }
    temp = (value > > 16) & 0xFF;
    if (temp > 0 || leading == false) {
        buffer [index ++] = temp;
        leading = false;
    }
    temp = (value > > 8) & 0xFF;
    if (temp > 0 || leading == false) {
        buffer [index ++] = temp;
        leading = false;
    }
    temp = value & 0xFF;
    buffer [index ++] = temp;
    return index;
}
----------------------------------------

  private static int Encode (int value, byte [] buffer, int index) {
        byte temp;
        bool leading = true;
        temp = (byte)(value & 0xFF);
        buffer [index ++] = temp;
        temp = (byte)((value >> 8) & 0xFF);
        if (temp > 0 || leading == false) {
            buffer [index ++] = temp;
            leading = false;
        }
        temp = (byte)((value >> 16) & 0xFF);
        if (temp > 0 || leading == false) {
            buffer [index ++] = temp;
            leading = false;
        }
        temp = (byte)((value >> 24) & 0xFF);
        if (temp > 0)
        {
            buffer [index ++] = temp;
            leading = false;
        }
        return index;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
371
2
Gpt3D_Clone371_2.cs 1 11
Gpt3D_Clone371_2.cs 12 39
----------------------------------------

static void Main (string [] args) {
    var x = new Example ();
    x.DoStuff = MethodForDelecate;
    x.DoStuffWithParameter = MethodForDelecate;
    x.DoStuffWithReturnValue = MethodWithReturnValue;
    x.DoStuff ();
    x.DoStuffWithParameter (10);
    int value = x.DoStuffWithReturnValue ();
    Console.WriteLine ("Return value " + value);
    Console.ReadLine ();
}
----------------------------------------

 static void Main (string [] args) {
                var x = new Example ();
                SetDoStuff(x);
                SetDoStuffWithParameter(x);
                SetDoStuffWithReturnValue(x);
                x.DoStuff ();
                x.DoStuffWithParameter (10);
                int value = x.DoStuffWithReturnValue ();
                Console.WriteLine ("Return value " + value);
                Console.ReadLine ();
            }
            private void SetDoStuff(Example x)
            {
                x.DoStuff = MethodForDelegate;
                }
                private void SetDoStuffWithParameter(Example x)
                {
                    x.DoStuffWithParameter = MethodForDelegate;
                }
                private void SetDoStuffWithReturnValue(Example x)
                {
                    x.DoStuffWithReturnValue = MethodWithReturnValue;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
371
3
Gpt3D_Clone371_3.cs 1 11
Gpt3D_Clone371_3.cs 12 24
----------------------------------------

static void Main (string [] args) {
    var x = new Example ();
    x.DoStuff = MethodForDelecate;
    x.DoStuffWithParameter = MethodForDelecate;
    x.DoStuffWithReturnValue = MethodWithReturnValue;
    x.DoStuff ();
    x.DoStuffWithParameter (10);
    int value = x.DoStuffWithReturnValue ();
    Console.WriteLine ("Return value " + value);
    Console.ReadLine ();
}
----------------------------------------

 static void Main (string [] args) {
    var x = new Example ();
    x.DoStuff = new DoStuff<Object> (MethodForDelegeate);
    x.DoStuffWithParameter = new DoStuff<int>(MethodForDelegeate);
    x.DoStuffWithReturnValue =  new Func<int>(MethodWithReturnValue);
    x.DoStuff ();
    x.DoStuffWithParameter (10);
    int value = x.DoStuffWithReturnValue ();
    Console.WriteLine ("Return value " + value);
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
371
4
Gpt3D_Clone371_4.cs 1 11
Gpt3D_Clone371_4.cs 12 29
----------------------------------------

static void Main (string [] args) {
    var x = new Example ();
    x.DoStuff = MethodForDelecate;
    x.DoStuffWithParameter = MethodForDelecate;
    x.DoStuffWithReturnValue = MethodWithReturnValue;
    x.DoStuff ();
    x.DoStuffWithParameter (10);
    int value = x.DoStuffWithReturnValue ();
    Console.WriteLine ("Return value " + value);
    Console.ReadLine ();
}
----------------------------------------

 static void Main (string [] args) {
                        var x = new Example ();
                        SetDoStuff(x, MethodForDelegate, MethodWithReturnValue);
                        x.DoStuff ();
                        x.DoStuffWithParameter (10);
                        int value = x.DoStuffWithReturnValue ();
                        Console.WriteLine ("Return value " + value);
                        Console.ReadLine ();
                    }
                        private void SetDoStuff(Example x, Action delegateMethod, Func<int> funcReturnMethod)
                        {
                            x.DoStuff = delegateMethod;
                            x.DoStuffWithParameter = delegateMethod;
                            x.DoStuffWithReturnValue = funcReturnMethod;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
372
0
Gpt3D_Clone372_0.cs 1 9
Gpt3D_Clone372_0.cs 10 24
----------------------------------------

public void doWork () {
    int h = 0;
    do
        {
            Thread.Sleep (3000);
            h.Dump ();
            h ++;
        } while (true);
}
----------------------------------------

public void doWork() {
    int h = 0;
    do {
        try {
            Thread.Sleep(3000);
        } catch (ThreadInterruptedException e) {
            Console.WriteLine("Interrupted Exception");
        } finally {
            h.Dump();
            h++;
        }
    } while(true);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
372
1
Gpt3D_Clone372_1.cs 1 9
Gpt3D_Clone372_1.cs 10 23
----------------------------------------

public void doWork () {
    int h = 0;
    do
        {
            Thread.Sleep (3000);
            h.Dump ();
            h ++;
        } while (true);
}
----------------------------------------

public void doWork() {
    int h = 0;
    bool keepRunning = true;
    while(keepRunning) {
        Thread.Sleep(3000);
        h.Dump();
        h++;
        if(h == 10) {
            keepRunning = false;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
372
4
Gpt3D_Clone372_4.cs 1 9
Gpt3D_Clone372_4.cs 10 19
----------------------------------------

public void doWork () {
    int h = 0;
    do
        {
            Thread.Sleep (3000);
            h.Dump ();
            h ++;
        } while (true);
}
----------------------------------------

public void doWork() {
    int h = 0;
    while(h < 10) {
        Thread.Sleep(3000);
        h.Dump();
        h++;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
372
5
Gpt3D_Clone372_5.cs 1 9
Gpt3D_Clone372_5.cs 10 19
----------------------------------------

public void doWork () {
    int h = 0;
    do
        {
            Thread.Sleep (3000);
            h.Dump ();
            h ++;
        } while (true);
}
----------------------------------------

public void doWork() {
    int h = 0;
    while(h <= 10) {
        Thread.Sleep(3000);
        h.Dump();
        h++;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
372
6
Gpt3D_Clone372_6.cs 1 9
Gpt3D_Clone372_6.cs 10 19
----------------------------------------

public void doWork () {
    int h = 0;
    do
        {
            Thread.Sleep (3000);
            h.Dump ();
            h ++;
        } while (true);
}
----------------------------------------

 public void doWork() {
    int h = 0;
    while(true) {
        Thread.Sleep(3000);
        h.Dump();
        h++;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
373
0
Gpt3D_Clone373_0.cs 1 11
Gpt3D_Clone373_0.cs 12 24
----------------------------------------

public bool PreFilterMessage (ref Message m) {
    if (m.Msg == 0x20a) {
        Point pos = new Point (m.LParam.ToInt32 () & 0xffff, m.LParam.ToInt32 () > > 16);
        IntPtr hWnd = WindowFromPoint (pos);
        if (hWnd != IntPtr.Zero && hWnd != m.HWnd && Control.FromHandle (hWnd) != null) {
            SendMessage (hWnd, m.Msg, m.WParam, m.LParam);
            return true;
        }
    }
    return false;
}
----------------------------------------

  public bool PreFilterMessage (ref Message m) {
    if (m.Msg == 0x20a) {
        Point pos = new Point ((int)m.LParam & 0xffff, (int)m.LParam >> 16);
        IntPtr hWnd = Win32.WindowFromPoint (pos);
        if (hWnd != IntPtr.Zero && hWnd != m.HWnd && Control.FromHandle (hWnd) != null) {
            Win32.SendMessage (hWnd, m.Msg, m.WParam, m.LParam);
            return true;
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
373
1
Gpt3D_Clone373_1.cs 1 11
Gpt3D_Clone373_1.cs 12 24
----------------------------------------

public bool PreFilterMessage (ref Message m) {
    if (m.Msg == 0x20a) {
        Point pos = new Point (m.LParam.ToInt32 () & 0xffff, m.LParam.ToInt32 () > > 16);
        IntPtr hWnd = WindowFromPoint (pos);
        if (hWnd != IntPtr.Zero && hWnd != m.HWnd && Control.FromHandle (hWnd) != null) {
            SendMessage (hWnd, m.Msg, m.WParam, m.LParam);
            return true;
        }
    }
    return false;
}
----------------------------------------

  public bool PreFilterMessage (ref Message m) {
    if (m.Msg == 0x20a) {
        Point pos = new Point (m.LParam.ToInt32 () & 0xffff, (int)m.LParam >> 16);
        IntPtr hWnd = WinAPI.WindowFromPoint (pos);
        if (hWnd != IntPtr.Zero && hWnd != m.HWnd && Control.FromHandle (hWnd) != null) {
            WinAPI.SendMessage (hWnd, m.Msg, m.WParam, m.LParam);
            return true;
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
373
2
Gpt3D_Clone373_2.cs 1 11
Gpt3D_Clone373_2.cs 12 24
----------------------------------------

public bool PreFilterMessage (ref Message m) {
    if (m.Msg == 0x20a) {
        Point pos = new Point (m.LParam.ToInt32 () & 0xffff, m.LParam.ToInt32 () > > 16);
        IntPtr hWnd = WindowFromPoint (pos);
        if (hWnd != IntPtr.Zero && hWnd != m.HWnd && Control.FromHandle (hWnd) != null) {
            SendMessage (hWnd, m.Msg, m.WParam, m.LParam);
            return true;
        }
    }
    return false;
}
----------------------------------------

  public bool PreFilterMessage (ref Message m) {
    if (m.Msg == 0x20a) {
        Point pos = new Point (m.LParam.ToInt32 () & 0xffff, (int)m.LParam >> 16);
        IntPtr hWnd = PlatformInvoke.WindowFromPoint (pos);
        if (hWnd != IntPtr.Zero && hWnd != m.HWnd && Control.FromHandle (hWnd) != null) {
            PlatformInvoke.SendMessage (hWnd, m.Msg, m.WParam, m.LParam);
            return true;
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
373
3
Gpt3D_Clone373_3.cs 1 11
Gpt3D_Clone373_3.cs 12 24
----------------------------------------

public bool PreFilterMessage (ref Message m) {
    if (m.Msg == 0x20a) {
        Point pos = new Point (m.LParam.ToInt32 () & 0xffff, m.LParam.ToInt32 () > > 16);
        IntPtr hWnd = WindowFromPoint (pos);
        if (hWnd != IntPtr.Zero && hWnd != m.HWnd && Control.FromHandle (hWnd) != null) {
            SendMessage (hWnd, m.Msg, m.WParam, m.LParam);
            return true;
        }
    }
    return false;
}
----------------------------------------

  public bool PreFilterMessage (ref Message m) {
    if (m.Msg == 0x20a) {
        Point pos = new Point ((int)m.LParam & 0xffff, m.LParam.ToInt32 () > > 16);
        IntPtr hWnd = Interop.WindowFromPoint (pos);
        if (hWnd != IntPtr.Zero && hWnd != m.HWnd && Control.FromHandle (hWnd) != null) {
            Interop.SendMessage (hWnd, m.Msg, m.WParam, m.LParam);
            return true;
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
373
4
Gpt3D_Clone373_4.cs 1 11
Gpt3D_Clone373_4.cs 12 24
----------------------------------------

public bool PreFilterMessage (ref Message m) {
    if (m.Msg == 0x20a) {
        Point pos = new Point (m.LParam.ToInt32 () & 0xffff, m.LParam.ToInt32 () > > 16);
        IntPtr hWnd = WindowFromPoint (pos);
        if (hWnd != IntPtr.Zero && hWnd != m.HWnd && Control.FromHandle (hWnd) != null) {
            SendMessage (hWnd, m.Msg, m.WParam, m.LParam);
            return true;
        }
    }
    return false;
}
----------------------------------------

  public bool PreFilterMessage (ref Message m) {
    if (m.Msg == 0x20a) {
        Point pos = new Point ((int)m.LParam & 0xffff, m.LParam.ToInt32 () >> 16);
        IntPtr hWnd = WinNT.WindowFromPoint (pos);
        if (hWnd != IntPtr.Zero && hWnd != m.HWnd && Control.FromHandle (hWnd) != null) {
            WinNT.SendMessage (hWnd, m.Msg, m.WParam, m.LParam);
            return true;
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
373
5
Gpt3D_Clone373_5.cs 1 11
Gpt3D_Clone373_5.cs 12 24
----------------------------------------

public bool PreFilterMessage (ref Message m) {
    if (m.Msg == 0x20a) {
        Point pos = new Point (m.LParam.ToInt32 () & 0xffff, m.LParam.ToInt32 () > > 16);
        IntPtr hWnd = WindowFromPoint (pos);
        if (hWnd != IntPtr.Zero && hWnd != m.HWnd && Control.FromHandle (hWnd) != null) {
            SendMessage (hWnd, m.Msg, m.WParam, m.LParam);
            return true;
        }
    }
    return false;
}
----------------------------------------

 public bool PreFilterMessage (ref Message m) {
    if (m.Msg == 0x20a) {
        Point pos = new Point ((int)m.LParam & 0xffff, (int)m.LParam >> 16);
        IntPtr hWnd = NativeMethods.WindowFromPoint (pos);
        if (hWnd != IntPtr.Zero && hWnd != m.HWnd && Control.FromHandle (hWnd) != null) {
            NativeMethods.SendMessage (hWnd, m.Msg, m.WParam, m.LParam);
            return true;
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
373
6
Gpt3D_Clone373_6.cs 1 11
Gpt3D_Clone373_6.cs 12 24
----------------------------------------

public bool PreFilterMessage (ref Message m) {
    if (m.Msg == 0x20a) {
        Point pos = new Point (m.LParam.ToInt32 () & 0xffff, m.LParam.ToInt32 () > > 16);
        IntPtr hWnd = WindowFromPoint (pos);
        if (hWnd != IntPtr.Zero && hWnd != m.HWnd && Control.FromHandle (hWnd) != null) {
            SendMessage (hWnd, m.Msg, m.WParam, m.LParam);
            return true;
        }
    }
    return false;
}
----------------------------------------

  public bool PreFilterMessage (ref Message m) {
    if (m.Msg == 0x20a) {
        Point pos = new Point (m.LParam.ToInt32 () & 0xffff, (int)m.LParam >> 16);
        IntPtr hWnd = Win32Interface.WindowFromPoint (pos);
        if (hWnd != IntPtr.Zero && hWnd != m.HWnd && Control.FromHandle (hWnd) != null) {
            Win32Interface.SendMessage (hWnd, m.Msg, m.WParam, m.LParam);
            return true;
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
373
7
Gpt3D_Clone373_7.cs 1 11
Gpt3D_Clone373_7.cs 12 24
----------------------------------------

public bool PreFilterMessage (ref Message m) {
    if (m.Msg == 0x20a) {
        Point pos = new Point (m.LParam.ToInt32 () & 0xffff, m.LParam.ToInt32 () > > 16);
        IntPtr hWnd = WindowFromPoint (pos);
        if (hWnd != IntPtr.Zero && hWnd != m.HWnd && Control.FromHandle (hWnd) != null) {
            SendMessage (hWnd, m.Msg, m.WParam, m.LParam);
            return true;
        }
    }
    return false;
}
----------------------------------------

  public bool PreFilterMessage (ref Message m) {
    if (m.Msg == 0x20a) {
        Point pos = new Point (m.LParam.ToInt32 () & 0xffff, (int)m.LParam >> 16);
        IntPtr hWnd = PInvoke.WindowFromPoint (pos);
        if (hWnd != IntPtr.Zero && hWnd != m.HWnd && Control.FromHandle (hWnd) != null) {
            PInvoke.SendMessage (hWnd, m.Msg, m.WParam, m.LParam);
            return true;
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
373
8
Gpt3D_Clone373_8.cs 1 11
Gpt3D_Clone373_8.cs 12 24
----------------------------------------

public bool PreFilterMessage (ref Message m) {
    if (m.Msg == 0x20a) {
        Point pos = new Point (m.LParam.ToInt32 () & 0xffff, m.LParam.ToInt32 () > > 16);
        IntPtr hWnd = WindowFromPoint (pos);
        if (hWnd != IntPtr.Zero && hWnd != m.HWnd && Control.FromHandle (hWnd) != null) {
            SendMessage (hWnd, m.Msg, m.WParam, m.LParam);
            return true;
        }
    }
    return false;
}
----------------------------------------

  public bool PreFilterMessage (ref Message m) {
    if (m.Msg == 0x20a) {
        Point pos = new Point (m.LParam.ToInt32 () & 0xffff, (int)m.LParam >> 16);
        IntPtr hWnd = Kernel32.WindowFromPoint (pos);
        if (hWnd != IntPtr.Zero && hWnd != m.HWnd && Control.FromHandle (hWnd) != null) {
            Kernel32.SendMessage (hWnd, m.Msg, m.WParam, m.LParam);
            return true;
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
373
9
Gpt3D_Clone373_9.cs 1 11
Gpt3D_Clone373_9.cs 12 24
----------------------------------------

public bool PreFilterMessage (ref Message m) {
    if (m.Msg == 0x20a) {
        Point pos = new Point (m.LParam.ToInt32 () & 0xffff, m.LParam.ToInt32 () > > 16);
        IntPtr hWnd = WindowFromPoint (pos);
        if (hWnd != IntPtr.Zero && hWnd != m.HWnd && Control.FromHandle (hWnd) != null) {
            SendMessage (hWnd, m.Msg, m.WParam, m.LParam);
            return true;
        }
    }
    return false;
}
----------------------------------------

 public bool PreFilterMessage (ref Message m) {
    if (m.Msg == 0x20a) {
        Point pos = new Point ((int)m.LParam & 0xffff, m.LParam.ToInt32 () >> 16);
        IntPtr hWnd = WinForms.WindowFromPoint (pos);
        if (hWnd != IntPtr.Zero && hWnd != m.HWnd && Control.FromHandle (hWnd) != null) {
            WinForms.SendMessage (hWnd, m.Msg, m.WParam, m.LParam);
            return true;
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
377
1
Gpt3D_Clone377_1.cs 1 8
Gpt3D_Clone377_1.cs 9 19
----------------------------------------

protected override void OnCollectionChanged (NotifyCollectionChangedEventArgs e) {
    if (suppressNotification)
        return;
    base.OnCollectionChanged (e);
    if (CollectionChanged != null) {
        CollectionChanged.Invoke (this, e);
    }
}
----------------------------------------

 protected override void OnCollectionChanged (NotifyCollectionChangedEventArgs e)
{
    if (suppressNotification)
        return; 
    base.OnCollectionChanged(e);
    if (CollectionChanged == null)
        return; 
    CollectionChanged(this, e);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
377
3
Gpt3D_Clone377_3.cs 1 8
Gpt3D_Clone377_3.cs 9 18
----------------------------------------

protected override void OnCollectionChanged (NotifyCollectionChangedEventArgs e) {
    if (suppressNotification)
        return;
    base.OnCollectionChanged (e);
    if (CollectionChanged != null) {
        CollectionChanged.Invoke (this, e);
    }
}
----------------------------------------

 protected override void OnCollectionChanged (NotifyCollectionChangedEventArgs e) 
{
    if (suppressNotification)
        return;
    base.OnCollectionChanged (e);
    var handler = CollectionChanged as NotifyCollectionChangedEventHandler;
    handler?.Invoke(this, e);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
377
5
Gpt3D_Clone377_5.cs 1 8
Gpt3D_Clone377_5.cs 9 16
----------------------------------------

protected override void OnCollectionChanged (NotifyCollectionChangedEventArgs e) {
    if (suppressNotification)
        return;
    base.OnCollectionChanged (e);
    if (CollectionChanged != null) {
        CollectionChanged.Invoke (this, e);
    }
}
----------------------------------------

 protected override void OnCollectionChanged(NotifyCollectionChangedEventArgs e) {
    if (suppressNotification)
        return;
    base.OnCollectionChanged(e);
    CollectionChanged?.Invoke(this, e);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
377
6
Gpt3D_Clone377_6.cs 1 8
Gpt3D_Clone377_6.cs 9 16
----------------------------------------

protected override void OnCollectionChanged (NotifyCollectionChangedEventArgs e) {
    if (suppressNotification)
        return;
    base.OnCollectionChanged (e);
    if (CollectionChanged != null) {
        CollectionChanged.Invoke (this, e);
    }
}
----------------------------------------

 protected override void OnCollectionChanged (NotifyCollectionChangedEventArgs e) {
    if (suppressNotification)
        return;
    base.OnCollectionChanged(e);
    CollectionChanged?.InvokeAsync(this, e);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
377
7
Gpt3D_Clone377_7.cs 1 8
Gpt3D_Clone377_7.cs 9 16
----------------------------------------

protected override void OnCollectionChanged (NotifyCollectionChangedEventArgs e) {
    if (suppressNotification)
        return;
    base.OnCollectionChanged (e);
    if (CollectionChanged != null) {
        CollectionChanged.Invoke (this, e);
    }
}
----------------------------------------

 protected override void OnCollectionChanged (NotifyCollectionChangedEventArgs e) {
    if (suppressNotification)
        return;
    base.OnCollectionChanged (e);
    CollectionChanged?.BeginInvoke (this, e, null, null);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
378
0
Gpt3D_Clone378_0.cs 1 7
Gpt3D_Clone378_0.cs 8 21
----------------------------------------

private void Dispose (bool disposing) {
    if (this.disposed)
        return;
    if (disposing && this.stream != null)
        this.stream.Dispose ();
    this.disposed = true;
}
----------------------------------------

 private void Dispose (bool disposing) {
    lock (this.disposedLock) {
        if (this.disposed) 
            return; 
        try {
            if (disposing && this.stream != null)
                this.stream.Dispose ();
        } finally {
            this.disposed = true;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
378
3
Gpt3D_Clone378_3.cs 1 7
Gpt3D_Clone378_3.cs 8 19
----------------------------------------

private void Dispose (bool disposing) {
    if (this.disposed)
        return;
    if (disposing && this.stream != null)
        this.stream.Dispose ();
    this.disposed = true;
}
----------------------------------------

 private void Dispose (bool disposing) {
    if (this.disposed) 
        return; 
    try {
        if (disposing && this.stream != null)
            this.stream.Dispose ();
    } finally {
        this.disposed = true;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
378
4
Gpt3D_Clone378_4.cs 1 7
Gpt3D_Clone378_4.cs 8 19
----------------------------------------

private void Dispose (bool disposing) {
    if (this.disposed)
        return;
    if (disposing && this.stream != null)
        this.stream.Dispose ();
    this.disposed = true;
}
----------------------------------------

 private void Dispose (bool disposing) {
    try {
        if (this.disposed) 
            return; 
        else if (disposing && this.stream != null)
            this.stream.Dispose (); 
    } finally {
        this.disposed = true;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
378
5
Gpt3D_Clone378_5.cs 1 7
Gpt3D_Clone378_5.cs 8 19
----------------------------------------

private void Dispose (bool disposing) {
    if (this.disposed)
        return;
    if (disposing && this.stream != null)
        this.stream.Dispose ();
    this.disposed = true;
}
----------------------------------------

 private void Dispose (bool disposing) {
    if (this.disposed) 
        return; 
    if (disposing && this.stream != null) 
        try {
            this.stream.Dispose ();   
        } finally {
            this.disposed = true;
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
378
7
Gpt3D_Clone378_7.cs 1 7
Gpt3D_Clone378_7.cs 8 22
----------------------------------------

private void Dispose (bool disposing) {
    if (this.disposed)
        return;
    if (disposing && this.stream != null)
        this.stream.Dispose ();
    this.disposed = true;
}
----------------------------------------

 private void Dispose (bool disposing) {
    // Check if the object has already been disposed
    if (!this.disposed) {
        try {
            // Dispose of any managed resources
            if (disposing && this.stream != null)
                this.stream.Dispose ();
        } finally {
            // Set the object to a disposed state
            this.disposed = true;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
378
8
Gpt3D_Clone378_8.cs 1 7
Gpt3D_Clone378_8.cs 8 18
----------------------------------------

private void Dispose (bool disposing) {
    if (this.disposed)
        return;
    if (disposing && this.stream != null)
        this.stream.Dispose ();
    this.disposed = true;
}
----------------------------------------

 private void Dispose (bool disposing) {
    // If the object has not been disposed, then run the disposing logic
    if (!this.disposed) {
        if (disposing && this.stream != null)
            this.stream.Dispose ();
    }
    // Set the object to a disposed state
    this.disposed = true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
379
0
Gpt3D_Clone379_0.cs 1 12
Gpt3D_Clone379_0.cs 13 29
----------------------------------------

void btnApplica_Click_Scelta_Campi_Etichetta (object sender, EventArgs e) {
    Debug.Print ("btnApplica_Click_Scelta_Campi_Etichetta START");
    string id;
    if (sender.GetType () == typeof (ImageButton)) {
        ImageButton button = (ImageButton) sender;
        id = button.ID;
    }
    SPWeb contextWeb = SPContext.Current.Web;
    string url = contextWeb.Url;
    string link = url + "/ARXEIA WEBPART/Carica documento.aspx?mode=scelta_campi_facoltativi_etichetta&obj=" + obj;
    SPUtility.Redirect (link, SPRedirectFlags.Default, Context);
}
----------------------------------------

 void btnApplica_Click_Scelta_Campi_Etichetta (object sender, EventArgs e) {
    Debug.Print ("btnApplica_Click_Scelta_Campi_Etichetta START");
    string id;
    if (sender.GetType () == typeof (ImageButton)) {
        ImageButton button = (ImageButton) sender;
        id = button.ID;
    }
    SPWeb contextWeb = SPContext.Current.Web;
    string url = contextWeb.Url;
    string link = url + "/ARXEIA WEBPART/Carica documento.aspx?mode=scelta_campi_facoltativi_etichetta&obj=" + obj;
    HttpContext.Current.Response.ClearHeaders();
    HttpContext.Current.Response.AddHeader("Location", link);
    HttpContext.Current.Response.Status = "301 Moved Permanently";
    HttpContext.Current.Response.End();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
379
1
Gpt3D_Clone379_1.cs 1 12
Gpt3D_Clone379_1.cs 13 29
----------------------------------------

void btnApplica_Click_Scelta_Campi_Etichetta (object sender, EventArgs e) {
    Debug.Print ("btnApplica_Click_Scelta_Campi_Etichetta START");
    string id;
    if (sender.GetType () == typeof (ImageButton)) {
        ImageButton button = (ImageButton) sender;
        id = button.ID;
    }
    SPWeb contextWeb = SPContext.Current.Web;
    string url = contextWeb.Url;
    string link = url + "/ARXEIA WEBPART/Carica documento.aspx?mode=scelta_campi_facoltativi_etichetta&obj=" + obj;
    SPUtility.Redirect (link, SPRedirectFlags.Default, Context);
}
----------------------------------------

 void btnApplica_Click_Scelta_Campi_Etichetta (object sender, EventArgs e) {
    Debug.Print ("btnApplica_Click_Scelta_Campi_Etichetta START");
    string id;
    if (sender.GetType () == typeof (ImageButton)) {
        ImageButton button = (ImageButton) sender;
        id = button.ID;
    }
    SPWeb contextWeb = SPContext.Current.Web;
    string url = contextWeb.Url;
    string link = url + "/ARXEIA WEBPART/Carica documento.aspx?mode=scelta_campi_facoltativi_etichetta&obj=" + obj;
    HttpContext.Current.Response.Clear();
    HttpContext.Current.Response.BufferOutput = false;
	HttpContext.Current.Response.Redirect(link, false);	
    HttpContext.Current.Response.End();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
379
2
Gpt3D_Clone379_2.cs 1 12
Gpt3D_Clone379_2.cs 13 28
----------------------------------------

void btnApplica_Click_Scelta_Campi_Etichetta (object sender, EventArgs e) {
    Debug.Print ("btnApplica_Click_Scelta_Campi_Etichetta START");
    string id;
    if (sender.GetType () == typeof (ImageButton)) {
        ImageButton button = (ImageButton) sender;
        id = button.ID;
    }
    SPWeb contextWeb = SPContext.Current.Web;
    string url = contextWeb.Url;
    string link = url + "/ARXEIA WEBPART/Carica documento.aspx?mode=scelta_campi_facoltativi_etichetta&obj=" + obj;
    SPUtility.Redirect (link, SPRedirectFlags.Default, Context);
}
----------------------------------------

 void btnApplica_Click_Scelta_Campi_Etichetta (object sender, EventArgs e) {
    Debug.Print ("btnApplica_Click_Scelta_Campi_Etichetta START");
    string id;
    if (sender.GetType () == typeof (ImageButton)) {
        ImageButton button = (ImageButton) sender;
        id = button.ID;
    }
    SPWeb contextWeb = SPContext.Current.Web;
    string url = contextWeb.Url;
    string link = url + "/ARXEIA WEBPART/Carica documento.aspx?mode=scelta_campi_facoltativi_etichetta&obj=" + obj;
    HttpContext.Current.Response.AddHeader("Location", link);
    HttpContext.Current.Response.StatusCode = 301;
    HttpContext.Current.Response.End();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
379
3
Gpt3D_Clone379_3.cs 1 12
Gpt3D_Clone379_3.cs 13 28
----------------------------------------

void btnApplica_Click_Scelta_Campi_Etichetta (object sender, EventArgs e) {
    Debug.Print ("btnApplica_Click_Scelta_Campi_Etichetta START");
    string id;
    if (sender.GetType () == typeof (ImageButton)) {
        ImageButton button = (ImageButton) sender;
        id = button.ID;
    }
    SPWeb contextWeb = SPContext.Current.Web;
    string url = contextWeb.Url;
    string link = url + "/ARXEIA WEBPART/Carica documento.aspx?mode=scelta_campi_facoltativi_etichetta&obj=" + obj;
    SPUtility.Redirect (link, SPRedirectFlags.Default, Context);
}
----------------------------------------

void btnApplica_Click_Scelta_Campi_Etichetta (object sender, EventArgs e) {
    Debug.Print ("btnApplica_Click_Scelta_Campi_Etichetta START");
    string id;
    if (sender.GetType () == typeof (ImageButton)) {
        ImageButton button = (ImageButton) sender;
        id = button.ID;
    }
    using(SPWeb contextWeb = SPContext.Current.Web) 
    {
        string url = contextWeb.Url;
        string link = url + "/ARXEIA WEBPART/Carica documento.aspx?mode=scelta_campi_facoltativi_etichetta&obj=" + obj;
        HttpContext.Current.Response.Redirect(link);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
37
4
Gpt3D_Clone37_4.cs 1 11
Gpt3D_Clone37_4.cs 12 26
----------------------------------------

public static DateTime AddBusinessDays (this DateTime current, int days) {
    var sign = Math.Sign (days);
    var unsignedDays = Math.Abs (days);
    for (var i = 0; i < unsignedDays; i ++) {
        do
            {
                current = current.AddDays (sign);
            } while (current.DayOfWeek == DayOfWeek.Saturday || current.DayOfWeek == DayOfWeek.Sunday);
    }
    return current;
}
----------------------------------------

 public static DateTime AddBusinessDays (this DateTime current, int days) {
    while(Math.Abs(days) > 0)
    {
        do
        {
            current = current.AddDays(Math.Sign(days));
        }
        while (current.DayOfWeek == DayOfWeek.Saturday || current.DayOfWeek == DayOfWeek.Sunday);
        days -= Math.Sign(days);
    }
    return current;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
381
1
Gpt3D_Clone381_1.cs 1 13
Gpt3D_Clone381_1.cs 14 36
----------------------------------------

protected void ddlcountry_SelectedIndexChanged (object sender, EventArgs e) {
    if (ddlcountry.Text != string.Empty) {
        MySqlCommand cd = new MySqlCommand (string.Format ("SELECT * FROM {0}_Animals", ddlcountry.Text), cs);
        cs.Open ();
        MySqlDataReader ddlSpecie = cd.ExecuteReader ();
        DdPetPist.DataSource = ddlSpecie;
        DdPetPist.DataValueField = "Specie";
        DdPetPist.DataTextField = "Specie";
        DdPetPist.DataBind ();
        cs.Close ();
        cs.Dispose ();
    }
}
----------------------------------------

protected void ddlcountry_SelectedIndexChanged (object sender, EventArgs e)
{
    if (ddlcountry.Text != string.Empty)
    {
        MySqlConnection con = new MySqlConnection(cs);
        string query = string.Format ("SELECT * FROM {0}_Animals", ddlcountry.Text);
        con.Open();
        MySqlCommand cm = new MySqlCommand(query, con);
        MySqlDataAdapter da = new MySqlDataAdapter(cm);
        DataTable dt = new DataTable();
        da.Fill(dt);
        DdPetPist.DataSource = dt;
        DdPetPist.DataValueField = "Specie";
        DdPetPist.DataTextField = "Specie";
        DdPetPist.DataBind();
        con.Close();
        con.Dispose();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
381
2
Gpt3D_Clone381_2.cs 1 13
Gpt3D_Clone381_2.cs 14 33
----------------------------------------

protected void ddlcountry_SelectedIndexChanged (object sender, EventArgs e) {
    if (ddlcountry.Text != string.Empty) {
        MySqlCommand cd = new MySqlCommand (string.Format ("SELECT * FROM {0}_Animals", ddlcountry.Text), cs);
        cs.Open ();
        MySqlDataReader ddlSpecie = cd.ExecuteReader ();
        DdPetPist.DataSource = ddlSpecie;
        DdPetPist.DataValueField = "Specie";
        DdPetPist.DataTextField = "Specie";
        DdPetPist.DataBind ();
        cs.Close ();
        cs.Dispose ();
    }
}
----------------------------------------

 protected void ddlcountry_SelectedIndexChanged (object sender, EventArgs e)
{
    if (ddlcountry.Text != string.Empty)
    {
        MySqlConnection con = new MySqlConnection(cs);
        con.Open();
        string query = string.Format("SELECT * FROM {0}_Animals", ddlcountry.Text);
        MySqlCommand cmd = new MySqlCommand(query, con);
        MySqlDataAdapter da = new MySqlDataAdapter(cmd);
        DataTable dt = new DataTable();
        da.Fill(dt);
        DdPetPist.DataSource = dt;
        DdPetPist.DataValueField = "Specie";
        DdPetPist.DataTextField = "Specie";
        DdPetPist.DataBind();
        con.Close();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
381
5
Gpt3D_Clone381_5.cs 1 13
Gpt3D_Clone381_5.cs 14 33
----------------------------------------

protected void ddlcountry_SelectedIndexChanged (object sender, EventArgs e) {
    if (ddlcountry.Text != string.Empty) {
        MySqlCommand cd = new MySqlCommand (string.Format ("SELECT * FROM {0}_Animals", ddlcountry.Text), cs);
        cs.Open ();
        MySqlDataReader ddlSpecie = cd.ExecuteReader ();
        DdPetPist.DataSource = ddlSpecie;
        DdPetPist.DataValueField = "Specie";
        DdPetPist.DataTextField = "Specie";
        DdPetPist.DataBind ();
        cs.Close ();
        cs.Dispose ();
    }
}
----------------------------------------

 protected void ddlcountry_SelectedIndexChanged (object sender, EventArgs e)
{
    if (ddlcountry.Text != string.Empty)
    {
        string query = string.Format ("SELECT * FROM {0}_Animals", ddlcountry.Text);
        MySqlCommand cmd = new MySqlCommand (query, cs);
        cs.Open();
        MySqlDataReader reader = cmd.ExecuteReader();
        while (reader.Read())
        {
            string species= reader["Specie"].ToString();
            DdPetPist.Items.Add(new ListItem(species, species));
        }
        cs.Close();
        cs.Dispose();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
381
6
Gpt3D_Clone381_6.cs 1 13
Gpt3D_Clone381_6.cs 14 29
----------------------------------------

protected void ddlcountry_SelectedIndexChanged (object sender, EventArgs e) {
    if (ddlcountry.Text != string.Empty) {
        MySqlCommand cd = new MySqlCommand (string.Format ("SELECT * FROM {0}_Animals", ddlcountry.Text), cs);
        cs.Open ();
        MySqlDataReader ddlSpecie = cd.ExecuteReader ();
        DdPetPist.DataSource = ddlSpecie;
        DdPetPist.DataValueField = "Specie";
        DdPetPist.DataTextField = "Specie";
        DdPetPist.DataBind ();
        cs.Close ();
        cs.Dispose ();
    }
}
----------------------------------------

 protected void ddlcountry_SelectedIndexChanged (object sender, EventArgs e)
{
    if (ddlcountry.Text != string.Empty)
    {
        MySqlDataAdapter adp = new MySqlDataAdapter(string.Format("SELECT * FROM {0}_Animals", ddlcountry.Text), cs);
        adp.SelectCommand.CommandTimeout=600;
        DataTable dt = new DataTable();
        adp.Fill(dt);
        DdPetPist.DataSource = dt;
        DdPetPist.DataValueField = "Specie";
        DdPetPist.DataTextField = "Specie";
        DdPetPist.DataBind();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
381
7
Gpt3D_Clone381_7.cs 1 13
Gpt3D_Clone381_7.cs 14 30
----------------------------------------

protected void ddlcountry_SelectedIndexChanged (object sender, EventArgs e) {
    if (ddlcountry.Text != string.Empty) {
        MySqlCommand cd = new MySqlCommand (string.Format ("SELECT * FROM {0}_Animals", ddlcountry.Text), cs);
        cs.Open ();
        MySqlDataReader ddlSpecie = cd.ExecuteReader ();
        DdPetPist.DataSource = ddlSpecie;
        DdPetPist.DataValueField = "Specie";
        DdPetPist.DataTextField = "Specie";
        DdPetPist.DataBind ();
        cs.Close ();
        cs.Dispose ();
    }
}
----------------------------------------

 protected void ddlcountry_SelectedIndexChanged (object sender, EventArgs e)
{
    if (ddlcountry.Text != string.Empty)
    {
        string sql = string.Format("SELECT * FROM {0}_Animals", ddlcountry.Text);
        MySqlDataAdapter da = new MySqlDataAdapter(sql, cs);
        DataSet ds = new DataSet();
        da.Fill(ds);
        DdPetPist.DataSource = ds;
        DdPetPist.DataValueField = "Specie";
        DdPetPist.DataTextField = "Specie";
        DdPetPist.DataBind();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
381
8
Gpt3D_Clone381_8.cs 1 13
Gpt3D_Clone381_8.cs 14 28
----------------------------------------

protected void ddlcountry_SelectedIndexChanged (object sender, EventArgs e) {
    if (ddlcountry.Text != string.Empty) {
        MySqlCommand cd = new MySqlCommand (string.Format ("SELECT * FROM {0}_Animals", ddlcountry.Text), cs);
        cs.Open ();
        MySqlDataReader ddlSpecie = cd.ExecuteReader ();
        DdPetPist.DataSource = ddlSpecie;
        DdPetPist.DataValueField = "Specie";
        DdPetPist.DataTextField = "Specie";
        DdPetPist.DataBind ();
        cs.Close ();
        cs.Dispose ();
    }
}
----------------------------------------

 protected void ddlcountry_SelectedIndexChanged (object sender, EventArgs e)
{
    if (ddlcountry.Text != string.Empty)
    {
        MySqlDataAdapter da = new MySqlDataAdapter(string.Format ("SELECT * FROM {0}_Animals", ddlcountry.Text), cs);
        DataTable dt = new DataTable();
        da.Fill(dt);
        DdPetPist.DataSource = dt;
        DdPetPist.DataValueField = "Specie";
        DdPetPist.DataTextField = "Specie";
        DdPetPist.DataBind();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
381
9
Gpt3D_Clone381_9.cs 1 13
Gpt3D_Clone381_9.cs 14 28
----------------------------------------

protected void ddlcountry_SelectedIndexChanged (object sender, EventArgs e) {
    if (ddlcountry.Text != string.Empty) {
        MySqlCommand cd = new MySqlCommand (string.Format ("SELECT * FROM {0}_Animals", ddlcountry.Text), cs);
        cs.Open ();
        MySqlDataReader ddlSpecie = cd.ExecuteReader ();
        DdPetPist.DataSource = ddlSpecie;
        DdPetPist.DataValueField = "Specie";
        DdPetPist.DataTextField = "Specie";
        DdPetPist.DataBind ();
        cs.Close ();
        cs.Dispose ();
    }
}
----------------------------------------

  protected void ddlcountry_SelectedIndexChanged (object sender, EventArgs e)
{
    if (ddlcountry.Text != string.Empty)
    {
        MySqlDataAdapter adp = new MySqlDataAdapter(string.Format ("SELECT * FROM {0}_Animals", ddlcountry.Text), cs);
        DataTable dt = new DataTable();
        adp.Fill(dt);
        DdPetPist.DataSource = dt;
        DdPetPist.DataValueField = "Specie";
        DdPetPist.DataTextField = "Specie";
        DdPetPist.DataBind();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
387
0
Gpt3D_Clone387_0.cs 1 13
Gpt3D_Clone387_0.cs 14 45
----------------------------------------

static void Main () {
    int total = 0;
    var vowels = new HashSet < char > {'a', 'e', 'i', 'o', 'u'};
    Console.WriteLine ("Enter a Sentence");
    string sentence = Console.ReadLine ().ToLower ();
    for (int i = 0; i < sentence.Length; i ++) {
        if (vowels.Contains (sentence [i])) {
            total ++;
        }
    }
    Console.WriteLine ("Your total number of vowels is: {0}", total);
    Console.ReadLine ();
}
----------------------------------------

  static void Main() 
    {
        int totalVowel = 0;
        HashSet<char> vowelSet = new HashSet<char> { 'a', 'e', 'i', 'o', 'u' };
        Console.WriteLine("Enter a sentence:");
        string sentence = Console.ReadLine().ToLower();
        foreach(char letter in sentence) 
        { 
          if(vowelSet.Contains(letter)) 
          { 
            totalVowel++; 
          } 
        } 
        Console.WriteLine("Your total number of vowels is: {0}", totalVowel);
        Console.ReadLine();
    }
 static void Main() 
    {
        int vowelCnt = 0;
        var vowelList = new List<char>{ 'a', 'e', 'i', 'o', 'u' };
        Console.WriteLine("Enter a Sentence");
        string sentence = Console.ReadLine().ToLowerInvariant();
        for (int i = 0; i < sentence.Length; i++){
            if (vowelList.Contains(sentence[i])) 
                vowelCnt++;
        }
        Console.WriteLine("Your total number of vowels is: {0}", vowelCnt);
        Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
387
1
Gpt3D_Clone387_1.cs 1 13
Gpt3D_Clone387_1.cs 14 30
----------------------------------------

static void Main () {
    int total = 0;
    var vowels = new HashSet < char > {'a', 'e', 'i', 'o', 'u'};
    Console.WriteLine ("Enter a Sentence");
    string sentence = Console.ReadLine ().ToLower ();
    for (int i = 0; i < sentence.Length; i ++) {
        if (vowels.Contains (sentence [i])) {
            total ++;
        }
    }
    Console.WriteLine ("Your total number of vowels is: {0}", total);
    Console.ReadLine ();
}
----------------------------------------

 static void Main() 
{
    int vCount = 0;
    List<char> vowels = new List<char>{'a', 'e', 'i', 'o', 'u'};
    Console.WriteLine("Enter a Sentence");
    string sentence = Console.ReadLine().ToLowerInvariant();
    foreach (char letter in sentence) 
    {
        if (vowels.Contains(letter)) 
            vCount++;
    }
    Console.WriteLine("Your total number of vowels is: {0}", vCount);
    Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
388
0
Gpt3D_Clone388_0.cs 1 19
Gpt3D_Clone388_0.cs 20 42
----------------------------------------

public void UpdateDescription (DataTable dataTable) {
    if (dataTable != null && dataTable.Rows.Count > 0) {
        foreach (DataRow dr in dataTable.Rows) {
            String dataDesc = dr ["DataDesc"].ToString ();
            if (! dr.IsNull ("DataDesc")) {
                if (dataDesc.Contains ("STATE")) {
                    dataDesc = dataDesc.Replace ("STATE", "").Trim ();
                }
                if (dataDesc.Contains ("HELLO ALL")) {
                    dataDesc = dataDesc.Replace ("HELLO ALL", "").Trim ();
                }
                if (dataDesc.Contains ("(")) {
                    dataDesc = dataDesc.Remove (dataDesc.IndexOf ("(")).Trim ();
                }
            }
            dr ["DataDesc"] = dataDesc;
        }
    }
}
----------------------------------------

 public void UpdateDescription (DataTable dataTable) {
    if (dataTable != null && dataTable.Rows.Count > 0) {
        foreach (DataRow dr in dataTable.Rows) {
            String dataDesc = dr ["DataDesc"].ToString ();
            if (! dr.IsNull ("DataDesc")) {
                if (dataDesc.Contains ("STATE")) {
                    dataDesc = dataDesc.Replace ("STATE", "");
                }
                if (dataDesc.Contains ("HELLO ALL")) {
                    dataDesc = dataDesc.Replace ("HELLO ALL", "");
                }
                int index = dataDesc.IndexOf('(');
                if (index > -1)
                {
                   dataDesc = dataDesc.Remove(index);
                }
            }
            dr ["DataDesc"] = dataDesc.Trim();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
388
1
Gpt3D_Clone388_1.cs 1 19
Gpt3D_Clone388_1.cs 20 40
----------------------------------------

public void UpdateDescription (DataTable dataTable) {
    if (dataTable != null && dataTable.Rows.Count > 0) {
        foreach (DataRow dr in dataTable.Rows) {
            String dataDesc = dr ["DataDesc"].ToString ();
            if (! dr.IsNull ("DataDesc")) {
                if (dataDesc.Contains ("STATE")) {
                    dataDesc = dataDesc.Replace ("STATE", "").Trim ();
                }
                if (dataDesc.Contains ("HELLO ALL")) {
                    dataDesc = dataDesc.Replace ("HELLO ALL", "").Trim ();
                }
                if (dataDesc.Contains ("(")) {
                    dataDesc = dataDesc.Remove (dataDesc.IndexOf ("(")).Trim ();
                }
            }
            dr ["DataDesc"] = dataDesc;
        }
    }
}
----------------------------------------

 public void UpdateDescription (DataTable dataTable) {
    if (dataTable != null && dataTable.Rows.Count > 0) {
        foreach (DataRow dr in dataTable.Rows) {
            String dataDesc = dr ["DataDesc"].ToString ();
            if (! dr.IsNull ("DataDesc")) {
                if (dataDesc.Contains ("STATE")) {
                    dataDesc = dataDesc.Remove (dataDesc.IndexOf ("STATE"), 6);
                }
                if (dataDesc.Contains ("HELLO ALL")) {
                    dataDesc = dataDesc.Remove (dataDesc.IndexOf ("HELLO ALL"), 9);
                }
                if (dataDesc.Contains ("(")) {
                    dataDesc = dataDesc.Remove (dataDesc.IndexOf ("("), 1);
                }
            }
            dr ["DataDesc"] = dataDesc.Trim();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
388
2
Gpt3D_Clone388_2.cs 1 19
Gpt3D_Clone388_2.cs 20 36
----------------------------------------

public void UpdateDescription (DataTable dataTable) {
    if (dataTable != null && dataTable.Rows.Count > 0) {
        foreach (DataRow dr in dataTable.Rows) {
            String dataDesc = dr ["DataDesc"].ToString ();
            if (! dr.IsNull ("DataDesc")) {
                if (dataDesc.Contains ("STATE")) {
                    dataDesc = dataDesc.Replace ("STATE", "").Trim ();
                }
                if (dataDesc.Contains ("HELLO ALL")) {
                    dataDesc = dataDesc.Replace ("HELLO ALL", "").Trim ();
                }
                if (dataDesc.Contains ("(")) {
                    dataDesc = dataDesc.Remove (dataDesc.IndexOf ("(")).Trim ();
                }
            }
            dr ["DataDesc"] = dataDesc;
        }
    }
}
----------------------------------------

 public void UpdateDescription (DataTable dataTable) {
    if (dataTable != null && dataTable.Rows.Count > 0) {
        foreach (DataRow dr in dataTable.Rows) {
            String dataDesc = dr ["DataDesc"].ToString ();
            if (! dr.IsNull ("DataDesc")) {
                dataDesc = dataDesc.Replace("STATE ", "").Trim();
                dataDesc = dataDesc.Replace("HELLO ALL ", "").Trim();
                if (dataDesc.Contains ("(")) {
                    dataDesc = dataDesc.Split(new Char[] {'('})[0].Trim();
                }
            }
            dr ["DataDesc"] = dataDesc;
        }
    }
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
393
2
Gpt3D_Clone393_2.cs 1 27
Gpt3D_Clone393_2.cs 28 93
----------------------------------------

public override bool Equals (object obj) {
    if (obj == null) {
        return false;
    }
    RuntimeType type = (RuntimeType) base.GetType ();
    RuntimeType type2 = (RuntimeType) obj.GetType ();
    if (type2 != type) {
        return false;
    }
    object a = this;
    if (CanCompareBits (this)) {
        return FastEqualsCheck (a, obj);
    }
    FieldInfo [] fields = type.GetFields (BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);
    for (int i = 0; i < fields.Length; i ++) {
        object obj3 = ((RtFieldInfo) fields [i]).UnsafeGetValue (a);
        object obj4 = ((RtFieldInfo) fields [i]).UnsafeGetValue (obj);
        if (obj3 == null) {
            if (obj4 != null) {
                return false;
            }
        } else if (! obj3.Equals (obj4)) {
            return false;
        }
    }
    return true;
}
----------------------------------------

 public override bool Equals(object obj)
{
    //Check if the object is null
    if (obj == null || !(obj is RuntimeType))
    {
        return false;
    }
    //Assign the Reference type
    RuntimeType type1 = (RuntimeType)base.GetType();
    RuntimeType type2 = (RuntimeType)obj.GetType();
    //Compare type
    if (!type1.Equals(type2))
    {
        return false;
    }
    else 
    {
        object a = this;
        //Compare bits
        if (CanCompareBits(this))
        {
            return FastEqualsCheck(a, obj);
        }
        else 
        {
            //Create fields array
            FieldInfo[] fields1 = type1.GetFields(BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);
            FieldInfo[] fields2 = type2.GetFields(BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);
            //Check length
            if (fields1.Length != fields2.Length)
            {
                return false;
            }
            //Compare objects
            for  (int i = 0; i < fields1.Length; i++)
            {
                RtFieldInfo rtf1 = (RtFieldInfo)fields1[i];
                RtFieldInfo rtf2 = (RtFieldInfo)fields2[i];	
                object obj1 = rtf1.UnsafeGetValue(a);
                object obj2 = rtf2.UnsafeGetValue(obj);
 
                //Null check
                if (obj1 == null)
                {
                    if (obj2 != null)
                    {
                        return false;
                    }
                }
                else if(!obj1.Equals(obj2)) //Test for equality
                {
                    return false;
                }
            }
            return true;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
393
6
Gpt3D_Clone393_6.cs 1 27
Gpt3D_Clone393_6.cs 28 79
----------------------------------------

public override bool Equals (object obj) {
    if (obj == null) {
        return false;
    }
    RuntimeType type = (RuntimeType) base.GetType ();
    RuntimeType type2 = (RuntimeType) obj.GetType ();
    if (type2 != type) {
        return false;
    }
    object a = this;
    if (CanCompareBits (this)) {
        return FastEqualsCheck (a, obj);
    }
    FieldInfo [] fields = type.GetFields (BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);
    for (int i = 0; i < fields.Length; i ++) {
        object obj3 = ((RtFieldInfo) fields [i]).UnsafeGetValue (a);
        object obj4 = ((RtFieldInfo) fields [i]).UnsafeGetValue (obj);
        if (obj3 == null) {
            if (obj4 != null) {
                return false;
            }
        } else if (! obj3.Equals (obj4)) {
            return false;
        }
    }
    return true;
}
----------------------------------------

 public override bool Equals(object obj)
{
    if (obj == null || !(obj is RuntimeType)) {
        return false;
    }
    //Assign the Reference type
    RuntimeType type1 = (RuntimeType)base.GetType();
    RuntimeType type2 = (RuntimeType)obj.GetType();
    //Compare type
    if (!type1.Equals(type2)) {
        return false;
    }
    object a = this;
    //Compare bits
    if (CanCompareBits(this)) {
        return FastEqualsCheck(a, obj);
    }
    //Create fields array
    FieldInfo[] fields1 = type1.GetFields(BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);
    FieldInfo[] fields2 = type2.GetFields(BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);
    //Calculate length
    if (fields1.Length != fields2.Length) {
        return false;
    }
    //Compares objects
    for (int i = 0; i < fields1.Length; i++) {
        RtFieldInfo rtf1 = (RtFieldInfo)fields1[i];
        RtFieldInfo rtf2 = (RtFieldInfo)fields2[i];	
        object obj1 = rtf1.UnsafeGetValue(a);
        object obj2 = rtf2.UnsafeGetValue(obj);
        //Null check
        if (obj1 == null) {
            if (obj2 != null) {
                return false;
            }
        } else if(!obj1.Equals(obj2)) { //Test for equality
            return false;
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
393
7
Gpt3D_Clone393_7.cs 1 27
Gpt3D_Clone393_7.cs 28 76
----------------------------------------

public override bool Equals (object obj) {
    if (obj == null) {
        return false;
    }
    RuntimeType type = (RuntimeType) base.GetType ();
    RuntimeType type2 = (RuntimeType) obj.GetType ();
    if (type2 != type) {
        return false;
    }
    object a = this;
    if (CanCompareBits (this)) {
        return FastEqualsCheck (a, obj);
    }
    FieldInfo [] fields = type.GetFields (BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);
    for (int i = 0; i < fields.Length; i ++) {
        object obj3 = ((RtFieldInfo) fields [i]).UnsafeGetValue (a);
        object obj4 = ((RtFieldInfo) fields [i]).UnsafeGetValue (obj);
        if (obj3 == null) {
            if (obj4 != null) {
                return false;
            }
        } else if (! obj3.Equals (obj4)) {
            return false;
        }
    }
    return true;
}
----------------------------------------

 public override bool Equals(object obj)
{
    //Check forNull object
    if (obj == null || !(obj is RuntimeType))
        return false;
    //Comparison between two objects
    RuntimeType type1 = (RuntimeType)base.GetType();
    RuntimeType type2 = (RuntimeType)obj.GetType();
    if (!type1.Equals(type2))
        return false;
    object a = this; // Store reference
    //Compare bits
    if (CanCompareBits(this))
        return FastEqualsCheck(a, obj);
    //Get fields
    FieldInfo[] fields1 = type1.GetFields(BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);
    FieldInfo[] fields2 = type2.GetFields(BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);
    //Return false if lengths are different
    if (fields1.Length != fields2.Length)
        return false;
    //Compare objects
    for (int i = 0; i < fields1.Length; i++)
    {
        RtFieldInfo rtf1 = (RtFieldInfo)fields1[i];
        RtFieldInfo rtf2 = (RtFieldInfo)fields2[i];
        object obj1 = rtf1.UnsafeGetValue(a);
        object obj2 = rtf2.UnsafeGetValue(obj);
        //Null check
        if (obj1 == null)
        {
            if (obj2 != null)
                return false;
        }
        //Test for equality
        else if (!obj1.Equals(obj2))
            return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
395
0
Gpt3D_Clone395_0.cs 1 14
Gpt3D_Clone395_0.cs 15 45
----------------------------------------

public bool DoThisJob (string job, int numberOfShifts) {
    if (! String.IsNullOrEmpty (currentJob)) {
        return false;
    }
    for (int i = 0; i < jobsICanDo.Length; i ++) {
        if (jobsICanDo [i] == job) {
            currentJob = job;
            this.shiftsToWork = numberOfShifts;
            shiftsWorked = 0;
            return true;
        }
    }
    return false;
}
----------------------------------------

 public bool DoThisJob (string job, int numberOfShifts)
{
                if (String.IsNullOrEmpty(currentJob)) 
                {
                    int jobFoundAtIndex = -1;
                    for (int i = 0; i < jobsICanDo.Length; i++)
                    {
                        if(jobsICanDo[i] == job)
                        {
                            jobFoundAtIndex = i;
                            break;
                        }
                    }
                    if(jobFoundAtIndex != -1) 
                    {
                        currentJob = job;
                        this.shiftsToWork = numberOfShifts;
                        shiftsWorked = 0;
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
                return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
395
3
Gpt3D_Clone395_3.cs 1 14
Gpt3D_Clone395_3.cs 15 35
----------------------------------------

public bool DoThisJob (string job, int numberOfShifts) {
    if (! String.IsNullOrEmpty (currentJob)) {
        return false;
    }
    for (int i = 0; i < jobsICanDo.Length; i ++) {
        if (jobsICanDo [i] == job) {
            currentJob = job;
            this.shiftsToWork = numberOfShifts;
            shiftsWorked = 0;
            return true;
        }
    }
    return false;
}
----------------------------------------

 public bool DoThisJob (string job, int numberOfShifts) 
{
                if (String.IsNullOrEmpty(currentJob))
                {
                    bool returnValue = false; 
                    for (int i = 0; i < jobsICanDo.Length; i++)
                    {
                        if (jobsICanDo[i].Equals(job))
                        {
                            currentJob = job;
                            this.shiftsToWork = numberOfShifts;
                            shiftsWorked = 0;
                            returnValue = true;
                        }
                    }
                    return returnValue;
                }
                return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
395
4
Gpt3D_Clone395_4.cs 1 14
Gpt3D_Clone395_4.cs 15 38
----------------------------------------

public bool DoThisJob (string job, int numberOfShifts) {
    if (! String.IsNullOrEmpty (currentJob)) {
        return false;
    }
    for (int i = 0; i < jobsICanDo.Length; i ++) {
        if (jobsICanDo [i] == job) {
            currentJob = job;
            this.shiftsToWork = numberOfShifts;
            shiftsWorked = 0;
            return true;
        }
    }
    return false;
}
----------------------------------------

 public bool DoThisJob (string job, int numberOfShifts)
{
                if (string.IsNullOrWhiteSpace(currentJob)) 
                {
                    for (int i = 0; i < jobsICanDo.Length; i++)
                    {
                        if (jobsICanDo[i] == job)
                        {
                            currentJob = job;
                            this.shiftsToWork = numberOfShifts;
                            shiftsWorked = 0;
                            return true;
                        }
                    }
                    return false;
                }
                else
                {
                    return false;
                }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
395
5
Gpt3D_Clone395_5.cs 1 14
Gpt3D_Clone395_5.cs 15 36
----------------------------------------

public bool DoThisJob (string job, int numberOfShifts) {
    if (! String.IsNullOrEmpty (currentJob)) {
        return false;
    }
    for (int i = 0; i < jobsICanDo.Length; i ++) {
        if (jobsICanDo [i] == job) {
            currentJob = job;
            this.shiftsToWork = numberOfShifts;
            shiftsWorked = 0;
            return true;
        }
    }
    return false;
}
----------------------------------------

 public bool DoThisJob (string job, int numberOfShifts) 
{
                if (string.IsNullOrEmpty(currentJob)) 
                {
                    int index = Array.IndexOf(jobsICanDo, job);
                    if (index >= 0)
                    {
                        currentJob = job;
                        this.shiftsToWork = numberOfShifts;
                        shiftsWorked = 0;
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
                return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
395
6
Gpt3D_Clone395_6.cs 1 14
Gpt3D_Clone395_6.cs 15 30
----------------------------------------

public bool DoThisJob (string job, int numberOfShifts) {
    if (! String.IsNullOrEmpty (currentJob)) {
        return false;
    }
    for (int i = 0; i < jobsICanDo.Length; i ++) {
        if (jobsICanDo [i] == job) {
            currentJob = job;
            this.shiftsToWork = numberOfShifts;
            shiftsWorked = 0;
            return true;
        }
    }
    return false;
}
----------------------------------------

 public bool DoThisJob (string job, int numberOfShifts) {
                if (String.IsNullOrEmpty(currentJob)) 
                {
                    int index = Array.FindIndex (jobsICanDo, j => j == job);
                    if (index >= 0)
                    {
                        currentJob = job;
                        this.shiftsToWork = numberOfShifts;
                        shiftsWorked = 0;
                        return true;
                    }
                }
                return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
396
0
Gpt3D_Clone396_0.cs 1 20
Gpt3D_Clone396_0.cs 21 46
----------------------------------------

public static void d (Exception e) {
    try {
        MethodBase site = e.TargetSite;
        string methodName = site == null ? "" : site.Name;
        methodName = ExtractBracketed (methodName);
        StackTrace stkTrace = new System.Diagnostics.StackTrace (e, true);
        for (int i = 0; i < 3; i ++) {
            var frame = stkTrace.GetFrame (i);
            int lineNum = frame.GetFileLineNumber ();
            int colNum = frame.GetFileColumnNumber ();
            string className = ExtractBracketed (frame.GetMethod ().ReflectedType.FullName);
            Trace.WriteLine (ThreadAndDateInfo + "Exception: " + className + "." + methodName + ", Ln " + lineNum + " Col " + colNum + ": " + e.Message);
            if (lineNum + colNum > 0)
                break;
        }
    }
    catch (Exception ee) {
        Console.WriteLine ("Tracing exception in d(Exception e)" + ee.Message);
    }
}
----------------------------------------

	public static void d (Exception e) {
    try {
        MethodBase site = e.TargetSite;
        string methodName = site == null ? "" : site.Name;
        methodName = ExtractBracketed (methodName);
        StackTrace stkTrace = new System.Diagnostics.StackTrace (e, true);
        for (int i = 0; i < 3; i ++) {
            var frame = stkTrace.GetFrame (i);
            int lineNum = frame.GetFileLineNumber ();
            int colNum = frame.GetFileColumnNumber ();
            string className = ExtractBracketed (frame.GetMethod ().ReflectedType.FullName);
            TelemetryClient tc = new TelemetryClient();
            var exceptionTelemetry = new ExceptionTelemetry();
            exceptionTelemetry.Timestamp = DateTime.Now;
            exceptionTelemetry.Message = ThreadAndDateInfo + "Exception: " + className + "." + methodName + ", Ln " + lineNum + " Col " + colNum + ": " + e.Message;
            tc.TrackException(exceptionTelemetry);
            if (lineNum + colNum > 0)
                break;
        }
    }
    catch (Exception ee) {
        Console.WriteLine ("Tracing exception in d(Exception e)" + ee.Message);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
397
2
Gpt3D_Clone397_2.cs 1 26
Gpt3D_Clone397_2.cs 27 51
----------------------------------------

public static int Asc (char String) {
    int num1 = Convert.ToInt32 (String);
    if (num1 < 128)
        return num1;
    try {
        Encoding fileIoEncoding = Utils.GetFileIOEncoding ();
        char [] chars = new char [1] {String};
        if (fileIoEncoding.IsSingleByte) {
            byte [] bytes = new byte [1];
            fileIoEncoding.GetBytes (chars, 0, 1, bytes, 0);
            return (int) bytes [0];
        }
        byte [] bytes1 = new byte [2];
        if (fileIoEncoding.GetBytes (chars, 0, 1, bytes1, 0) == 1)
            return (int) bytes1 [0];
        if (BitConverter.IsLittleEndian) {
            byte num2 = bytes1 [0];
            bytes1 [0] = bytes1 [1];
            bytes1 [1] = num2;
        }
        return (int) BitConverter.ToInt16 (bytes1, 0);
    }
    catch (Exception ex) {
        throw ex;
    }
}
----------------------------------------

  public static int Asc (char input) 
 { 
            int number = (int)input; 
            if (number < 128) 
            return number; 
            Encoding encoding = Utils.GetFileIOEncoding(); 
            char[] characters = new char[] {input}; 
            if (encoding.IsSingleByte) 
            { 
            byte[] bytes = new byte[1]; 
            encoding.GetBytes(characters, 0, 1, bytes, 0); 
            return (int)bytes[0]; 
            } 
            byte[] bytes1 = new byte[2];
            encoding.GetBytes(characters, 0, 1, bytes1,0); 
            if (BitConverter.IsLittleEndian)
            { 
            byte num = bytes1[0]; 
            bytes1[0] = bytes1[1]; 
            bytes1[1] = num; 
            } 
            return (int)BitConverter.ToInt16(bytes1, 0); 
 } 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
3
0
Gpt3D_Clone3_0.cs 1 22
Gpt3D_Clone3_0.cs 23 47
----------------------------------------

public bool ReflectiveEquals (object first, object second) {
    if (first == null && second == null) {
        return true;
    }
    if (first == null || second == null) {
        return false;
    }
    Type firstType = first.GetType ();
    if (second.GetType () != firstType) {
        return false;
    }
    foreach (PropertyInfo propertyInfo in firstType.GetProperties ()) {
        if (propertyInfo.CanRead) {
            object firstValue = propertyInfo.GetValue (first, null);
            object secondValue = propertyInfo.GetValue (second, null);
            if (! object.Equals (firstValue, secondValue)) {
                return false;
            }
        }
    }
    return true;
}
----------------------------------------

  public bool ReflectiveEquals (dynamic first, dynamic second) {
    if (first == null && second == null) {
        return true;
    }
    if (first == null || second == null) {
        return false;
    }
    Type firstType = first.GetType ();
    Type secondType = second.GetType ();
    if (firstType != secondType) {
        return false;
    }
    foreach (PropertyInfo propertyInfo in firstType.GetProperties ()) {
        if (propertyInfo.CanRead) {
            dynamic firstValue = propertyInfo.GetValue (first, null);
            dynamic secondValue = propertyInfo.GetValue (second, null);
            if (! object.Equals (firstValue, secondValue)) {
                return false;
            }
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
3
1
Gpt3D_Clone3_1.cs 1 22
Gpt3D_Clone3_1.cs 23 47
----------------------------------------

public bool ReflectiveEquals (object first, object second) {
    if (first == null && second == null) {
        return true;
    }
    if (first == null || second == null) {
        return false;
    }
    Type firstType = first.GetType ();
    if (second.GetType () != firstType) {
        return false;
    }
    foreach (PropertyInfo propertyInfo in firstType.GetProperties ()) {
        if (propertyInfo.CanRead) {
            object firstValue = propertyInfo.GetValue (first, null);
            object secondValue = propertyInfo.GetValue (second, null);
            if (! object.Equals (firstValue, secondValue)) {
                return false;
            }
        }
    }
    return true;
}
----------------------------------------

 public bool SameProperties (object first, object second) {
    if (first == null && second == null) {
        return true;
    }
    if (first == null || second == null) {
        return false;
    }
    Type firstType = first.GetType ();
    Type secondType = second.GetType ();
    if (secondType != firstType) {
        return false;
    }
    foreach (PropertyInfo propertyInfo in firstType.GetProperties ()) {
        if (propertyInfo.CanRead) {
            dynamic firstValue = propertyInfo.GetValue (first, null);
            dynamic secondValue = propertyInfo.GetValue (second, null);
            if (! object.Equals (firstValue, secondValue)) {
                return false;
            }
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
3
2
Gpt3D_Clone3_2.cs 1 22
Gpt3D_Clone3_2.cs 23 47
----------------------------------------

public bool ReflectiveEquals (object first, object second) {
    if (first == null && second == null) {
        return true;
    }
    if (first == null || second == null) {
        return false;
    }
    Type firstType = first.GetType ();
    if (second.GetType () != firstType) {
        return false;
    }
    foreach (PropertyInfo propertyInfo in firstType.GetProperties ()) {
        if (propertyInfo.CanRead) {
            object firstValue = propertyInfo.GetValue (first, null);
            object secondValue = propertyInfo.GetValue (second, null);
            if (! object.Equals (firstValue, secondValue)) {
                return false;
            }
        }
    }
    return true;
}
----------------------------------------

 public bool ReflectionCheck (object first, object second) {
    if (first == null && second == null) {
        return true;
    }
    if (first == null || second == null) {
        return false;
    }
    Type firstType = first.GetType ();
    Type secondType = second.GetType ();
    if (secondType != firstType) {
        return false;
    }
    foreach (PropertyInfo propertyInfo in firstType.GetProperties ()) {
        if (propertyInfo.CanRead) {
            dynamic firstValue = propertyInfo.GetValue (first, null);
            dynamic secondValue = propertyInfo.GetValue (second, null);
            if (! object.Equals (firstValue, secondValue)) {
                return false;
            }
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
3
3
Gpt3D_Clone3_3.cs 1 22
Gpt3D_Clone3_3.cs 23 47
----------------------------------------

public bool ReflectiveEquals (object first, object second) {
    if (first == null && second == null) {
        return true;
    }
    if (first == null || second == null) {
        return false;
    }
    Type firstType = first.GetType ();
    if (second.GetType () != firstType) {
        return false;
    }
    foreach (PropertyInfo propertyInfo in firstType.GetProperties ()) {
        if (propertyInfo.CanRead) {
            object firstValue = propertyInfo.GetValue (first, null);
            object secondValue = propertyInfo.GetValue (second, null);
            if (! object.Equals (firstValue, secondValue)) {
                return false;
            }
        }
    }
    return true;
}
----------------------------------------

 public bool ReflectProperties (object first, object second) {
    if (first == null && second == null) {
        return true;
    }
    if (first == null || second == null) {
        return false;
    }
    Type firstType = first.GetType ();
    Type secondType = second.GetType ();
    if (secondType != firstType) {
        return false;
    }
    foreach (PropertyInfo propertyInfo in firstType.GetProperties ()) {
        if (propertyInfo.CanRead) {
            dynamic firstValue = propertyInfo.GetValue (first, null);
            dynamic secondValue = propertyInfo.GetValue (second, null);
            if (! object.Equals (firstValue, secondValue)) {
                return false;
            }
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
3
4
Gpt3D_Clone3_4.cs 1 22
Gpt3D_Clone3_4.cs 23 47
----------------------------------------

public bool ReflectiveEquals (object first, object second) {
    if (first == null && second == null) {
        return true;
    }
    if (first == null || second == null) {
        return false;
    }
    Type firstType = first.GetType ();
    if (second.GetType () != firstType) {
        return false;
    }
    foreach (PropertyInfo propertyInfo in firstType.GetProperties ()) {
        if (propertyInfo.CanRead) {
            object firstValue = propertyInfo.GetValue (first, null);
            object secondValue = propertyInfo.GetValue (second, null);
            if (! object.Equals (firstValue, secondValue)) {
                return false;
            }
        }
    }
    return true;
}
----------------------------------------

 public bool AnalyzeEquals (object first, object second) {
    if (first == null && second == null) {
        return true;
    }
    if (first == null || second == null) {
        return false;
    }
    Type firstType = first.GetType ();
    Type secondType = second.GetType ();
    if (secondType != firstType) {
        return false;
    }
    foreach (PropertyInfo propertyInfo in firstType.GetProperties ()) {
        if (propertyInfo.CanRead) {
            dynamic firstValue = propertyInfo.GetValue (first, null);
            dynamic secondValue = propertyInfo.GetValue (second, null);
            if (! object.Equals (firstValue, secondValue)) {
                return false;
            }
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
3
5
Gpt3D_Clone3_5.cs 1 22
Gpt3D_Clone3_5.cs 23 47
----------------------------------------

public bool ReflectiveEquals (object first, object second) {
    if (first == null && second == null) {
        return true;
    }
    if (first == null || second == null) {
        return false;
    }
    Type firstType = first.GetType ();
    if (second.GetType () != firstType) {
        return false;
    }
    foreach (PropertyInfo propertyInfo in firstType.GetProperties ()) {
        if (propertyInfo.CanRead) {
            object firstValue = propertyInfo.GetValue (first, null);
            object secondValue = propertyInfo.GetValue (second, null);
            if (! object.Equals (firstValue, secondValue)) {
                return false;
            }
        }
    }
    return true;
}
----------------------------------------

 public bool ReflectiveEquals (object first, object second) {
    if (first == null && second == null) {
        return true;
    }
    if (first == null || second == null) {
        return false;
    }
    Type secondType = second.GetType ();
    Type firstType = first.GetType ();
    if (secondType != firstType) {
        return false;
    }
    foreach (PropertyInfo propertyInfo in firstType.GetProperties ()) {
        if (propertyInfo.CanRead) {
            dynamic firstValue = propertyInfo.GetValue (first, null);
            dynamic secondValue = propertyInfo.GetValue (second, null);
            if (! object.Equals (firstValue, secondValue)) {
                return false;
            }
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
3
6
Gpt3D_Clone3_6.cs 1 22
Gpt3D_Clone3_6.cs 23 47
----------------------------------------

public bool ReflectiveEquals (object first, object second) {
    if (first == null && second == null) {
        return true;
    }
    if (first == null || second == null) {
        return false;
    }
    Type firstType = first.GetType ();
    if (second.GetType () != firstType) {
        return false;
    }
    foreach (PropertyInfo propertyInfo in firstType.GetProperties ()) {
        if (propertyInfo.CanRead) {
            object firstValue = propertyInfo.GetValue (first, null);
            object secondValue = propertyInfo.GetValue (second, null);
            if (! object.Equals (firstValue, secondValue)) {
                return false;
            }
        }
    }
    return true;
}
----------------------------------------

 public bool EqualProperties (object first, object second) {
    if (first == null && second == null) {
        return true;
    }
    if (first == null || second == null) {
        return false;
    }
    Type firstType = first.GetType ();
    Type secondType = second.GetType ();
    if (secondType != firstType) {
        return false;
    }
    foreach (PropertyInfo propertyInfo in firstType.GetProperties ()) {
        if (propertyInfo.CanRead) {
            dynamic firstValue = propertyInfo.GetValue (first, null);
            dynamic secondValue = propertyInfo.GetValue (second, null);
            if (! object.Equals (firstValue, secondValue)) {
                return false;
            }
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
3
7
Gpt3D_Clone3_7.cs 1 22
Gpt3D_Clone3_7.cs 23 47
----------------------------------------

public bool ReflectiveEquals (object first, object second) {
    if (first == null && second == null) {
        return true;
    }
    if (first == null || second == null) {
        return false;
    }
    Type firstType = first.GetType ();
    if (second.GetType () != firstType) {
        return false;
    }
    foreach (PropertyInfo propertyInfo in firstType.GetProperties ()) {
        if (propertyInfo.CanRead) {
            object firstValue = propertyInfo.GetValue (first, null);
            object secondValue = propertyInfo.GetValue (second, null);
            if (! object.Equals (firstValue, secondValue)) {
                return false;
            }
        }
    }
    return true;
}
----------------------------------------

 public bool ArePropsEqual (object first, object second) {
    if (first == null && second == null) {
        return true;
    }
    if (first == null || second == null) {
        return false;
    }
    Type firstType = first.GetType ();
    Type secondType = second.GetType ();
    if (secondType != firstType) {
        return false;
    }
    foreach (PropertyInfo propertyInfo in firstType.GetProperties ()) {
        if (propertyInfo.CanRead) {
            dynamic firstValue = propertyInfo.GetValue (first, null);
            dynamic secondValue = propertyInfo.GetValue (second, null);
            if (! object.Equals (firstValue, secondValue)) {
                return false;
            }
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
3
8
Gpt3D_Clone3_8.cs 1 22
Gpt3D_Clone3_8.cs 23 47
----------------------------------------

public bool ReflectiveEquals (object first, object second) {
    if (first == null && second == null) {
        return true;
    }
    if (first == null || second == null) {
        return false;
    }
    Type firstType = first.GetType ();
    if (second.GetType () != firstType) {
        return false;
    }
    foreach (PropertyInfo propertyInfo in firstType.GetProperties ()) {
        if (propertyInfo.CanRead) {
            object firstValue = propertyInfo.GetValue (first, null);
            object secondValue = propertyInfo.GetValue (second, null);
            if (! object.Equals (firstValue, secondValue)) {
                return false;
            }
        }
    }
    return true;
}
----------------------------------------

 public bool CompareObjects (object first, object second) {
    if (first == null && second == null) {
        return true;
    }
    if (first == null || second == null) {
        return false;
    }
    Type firstType = first.GetType ();
    Type secondType = second.GetType ();
    if (secondType != firstType) {
        return false;
    }
    foreach (PropertyInfo propertyInfo in firstType.GetProperties ()) {
        if (propertyInfo.CanRead) {
            dynamic firstValue = propertyInfo.GetValue (first, null);
            dynamic secondValue = propertyInfo.GetValue (second, null);
            if (! object.Equals (firstValue, secondValue)) {
                return false;
            }
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
3
9
Gpt3D_Clone3_9.cs 1 22
Gpt3D_Clone3_9.cs 23 47
----------------------------------------

public bool ReflectiveEquals (object first, object second) {
    if (first == null && second == null) {
        return true;
    }
    if (first == null || second == null) {
        return false;
    }
    Type firstType = first.GetType ();
    if (second.GetType () != firstType) {
        return false;
    }
    foreach (PropertyInfo propertyInfo in firstType.GetProperties ()) {
        if (propertyInfo.CanRead) {
            object firstValue = propertyInfo.GetValue (first, null);
            object secondValue = propertyInfo.GetValue (second, null);
            if (! object.Equals (firstValue, secondValue)) {
                return false;
            }
        }
    }
    return true;
}
----------------------------------------

 public bool PropertiesEqual (object first, object second) {
    if (first == null && second == null) {
        return true;
    }
    if (first == null || second == null) {
        return false;
    }
    Type secondType = second.GetType ();
    Type firstType = first.GetType ();
    if (secondType != firstType) {
        return false;
    }
    foreach (PropertyInfo propertyInfo in firstType.GetProperties ()) {
        if (propertyInfo.CanRead) {
            dynamic firstValue = propertyInfo.GetValue (first, null);
            dynamic secondValue = propertyInfo.GetValue (second, null);
            if (! object.Equals (firstValue, secondValue)) {
                return false;
            }
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
400
7
Gpt3D_Clone400_7.cs 1 12
Gpt3D_Clone400_7.cs 13 37
----------------------------------------

public Bitmap BitmapFromSource (System.Windows.Media.Imaging.BitmapSource bitmapsource) {
    var src = new System.Windows.Media.Imaging.FormatConvertedBitmap ();
    src.BeginInit ();
    src.Source = bitmapsource;
    src.DestinationFormat = System.Windows.Media.PixelFormats.Bgra32;
    src.EndInit ();
    Bitmap bitmap = new Bitmap (src.PixelWidth, src.PixelHeight, System.Drawing.Imaging.PixelFormat.Format32bppArgb);
    var data = bitmap.LockBits (new Rectangle (Point.Empty, bitmap.Size), System.Drawing.Imaging.ImageLockMode.WriteOnly, System.Drawing.Imaging.PixelFormat.Format32bppArgb);
    src.CopyPixels (System.Windows.Int32Rect.Empty, data.Scan0, data.Height * data.Stride, data.Stride);
    bitmap.UnlockBits (data);
    return bitmap;
}
----------------------------------------

 public Bitmap BitmapFromSource (System.Windows.Media.Imaging.BitmapSource bitmapsource)
    {
        var src = new System.Windows.Media.Imaging.FormatConvertedBitmap ();
        src.BeginInit ();
        src.Source = bitmapsource;
        src.DestinationFormat = System.Windows.Media.PixelFormats.Bgra32;
        src.EndInit ();
        Bitmap bitmap = new Bitmap (src.PixelWidth, src.PixelHeight, System.Drawing.Imaging.PixelFormat.Format32bppArgb);
        var data = bitmap.LockBits (new Rectangle (Point.Empty, bitmap.Size), System.Drawing.Imaging.ImageLockMode.WriteOnly, System.Drawing.Imaging.PixelFormat.Format32bppArgb);
        for (int i = 0; i < data.Height; ++i)
        {
            int dstStride = src.PixelWidth * 4;
            int srcStride = src.GetPixelBytesPerRow() * 4;
            int size = Math.Min(dstStride, srcStride);
            var dst = (byte*)data.Scan0.ToPointer() + i * data.Stride;
            var src2 = (byte*)src.PixelBuffer.ToPointer() + i * srcStride;
            Buffer.MemoryCopy(src2, dst, size, size);
        }
        bitmap.UnlockBits (data);
        return bitmap;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
402
0
Gpt3D_Clone402_0.cs 1 11
Gpt3D_Clone402_0.cs 12 32
----------------------------------------

private static void DetectCollisions (string file) {
    try {
        Assembly assembly = Assembly.LoadFrom (file);
        foreach (var method in FindExtensionMethods (assembly)) {
            DetectCollisions (method);
        }
    }
    catch (Exception e) {
        Console.WriteLine ("Error detecting collisions: {0}", e.Message);
    }
}
----------------------------------------

  private static void DetectCollisions (string file)
{
    try
    {
        Assembly assembly = Assembly.LoadFrom (file);
        foreach (TypeInfo type in assembly.DefinedTypes)
        {
            IEnumerable<MethodInfo> methods = type.DeclaredMethods.Where (x => Attribute.IsDefined (x, typeof (ExtensionAttribute)));
            foreach (var method in methods)
            {
                DetectCollisions (method);
            }
        }
    }
    catch (Exception e)
    {
        Console.WriteLine ("Error detecting collisions: {0}", e.Message);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
402
1
Gpt3D_Clone402_1.cs 1 11
Gpt3D_Clone402_1.cs 12 33
----------------------------------------

private static void DetectCollisions (string file) {
    try {
        Assembly assembly = Assembly.LoadFrom (file);
        foreach (var method in FindExtensionMethods (assembly)) {
            DetectCollisions (method);
        }
    }
    catch (Exception e) {
        Console.WriteLine ("Error detecting collisions: {0}", e.Message);
    }
}
----------------------------------------

  private static void DetectCollisions (string file)
{
    try
    {
        Assembly assembly = Assembly.LoadFrom (file);
        foreach (Type type in assembly.GetTypes ())
        {
            var collMethods = type.GetMethods (BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic).Where (x => x.GetCustomAttributes (false).Length > 0);
            foreach (var method in collMethods)
            {
                DetectCollisions (method);
            }
        }
    }
    catch (Exception e)
    {
        Console.WriteLine ("Error detecting collisions: {0}", e.Message);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
402
2
Gpt3D_Clone402_2.cs 1 11
Gpt3D_Clone402_2.cs 12 32
----------------------------------------

private static void DetectCollisions (string file) {
    try {
        Assembly assembly = Assembly.LoadFrom (file);
        foreach (var method in FindExtensionMethods (assembly)) {
            DetectCollisions (method);
        }
    }
    catch (Exception e) {
        Console.WriteLine ("Error detecting collisions: {0}", e.Message);
    }
}
----------------------------------------

  private static void DetectCollisions (string file)
{
    try
    {
        Assembly assembly = Assembly.LoadFrom (file);
        foreach (Type type in assembly.GetTypes ())
        {
            var methods = type.GetMethods (BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic);
            foreach (var method in methods.Where (x => Attribute.IsDefined (x, typeof (ExtensionAttribute))))
            {
                DetectCollisions (method);
            }
        }
    }
    catch (Exception e)
    {
        Console.WriteLine ("Error detecting collisions: {0}", e.Message);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
402
3
Gpt3D_Clone402_3.cs 1 11
Gpt3D_Clone402_3.cs 12 37
----------------------------------------

private static void DetectCollisions (string file) {
    try {
        Assembly assembly = Assembly.LoadFrom (file);
        foreach (var method in FindExtensionMethods (assembly)) {
            DetectCollisions (method);
        }
    }
    catch (Exception e) {
        Console.WriteLine ("Error detecting collisions: {0}", e.Message);
    }
}
----------------------------------------

  private static void DetectCollisions (string file)
{
    try
    {
        Assembly assembly = Assembly.LoadFrom (file);
        foreach (Type type in assembly.GetTypes ())
        {
            IEnumerable<MemberInfo> methods = type.FindMembers (MemberTypes.Method,
                                                        BindingFlags.Static |
                                                        BindingFlags.Public |
                                                        BindingFlags.NonPublic,
                                                        (x, y) => true, null);
            foreach (var method in methods)
            {
                DetectCollisions (method);
            }
        }
    }
    catch (Exception e)
    {
        Console.WriteLine ("Error detecting collisions: {0}", e.Message);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
402
4
Gpt3D_Clone402_4.cs 1 11
Gpt3D_Clone402_4.cs 12 32
----------------------------------------

private static void DetectCollisions (string file) {
    try {
        Assembly assembly = Assembly.LoadFrom (file);
        foreach (var method in FindExtensionMethods (assembly)) {
            DetectCollisions (method);
        }
    }
    catch (Exception e) {
        Console.WriteLine ("Error detecting collisions: {0}", e.Message);
    }
}
----------------------------------------

  private static void DetectCollisions (string file)
{
    try
    {
        Assembly assembly = Assembly.LoadFrom (file);           
        foreach (Type type in assembly.GetTypes ())
        {
            MethodInfo[] methods = type.GetMethods (BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic);
            foreach (var method in methods)
            {
                DetectCollisions (method);
            }
        }
    }
    catch (Exception e)
    {
        Console.WriteLine ("Error detecting collisions: {0}", e.Message);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
402
5
Gpt3D_Clone402_5.cs 1 11
Gpt3D_Clone402_5.cs 12 31
----------------------------------------

private static void DetectCollisions (string file) {
    try {
        Assembly assembly = Assembly.LoadFrom (file);
        foreach (var method in FindExtensionMethods (assembly)) {
            DetectCollisions (method);
        }
    }
    catch (Exception e) {
        Console.WriteLine ("Error detecting collisions: {0}", e.Message);
    }
}
----------------------------------------

  private static void DetectCollisions (string file)
{
    try
    {
        Assembly assembly = Assembly.LoadFrom (file);
        foreach (var type in assembly.GetTypes ())
        {
            foreach (var method in type.GetMethods ())
            {
                DetectCollisions (method);
            }
        }
    }
    catch (Exception e)
    {
        Console.WriteLine ("Error detecting collisions: {0}", e.Message);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
402
6
Gpt3D_Clone402_6.cs 1 11
Gpt3D_Clone402_6.cs 12 31
----------------------------------------

private static void DetectCollisions (string file) {
    try {
        Assembly assembly = Assembly.LoadFrom (file);
        foreach (var method in FindExtensionMethods (assembly)) {
            DetectCollisions (method);
        }
    }
    catch (Exception e) {
        Console.WriteLine ("Error detecting collisions: {0}", e.Message);
    }
}
----------------------------------------

  private static void DetectCollisions (string file)
{
    try
    {
        Assembly assembly = Assembly.LoadFrom (file);
        foreach (Type type in assembly.GetTypes ())
        {
            foreach (MethodInfo method in type.GetRuntimeMethods ())
            {
                DetectCollisions (method);
            }
        }
    }
    catch (Exception e)
    {
        Console.WriteLine ("Error detecting collisions: {0}", e.Message);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
402
7
Gpt3D_Clone402_7.cs 1 11
Gpt3D_Clone402_7.cs 12 31
----------------------------------------

private static void DetectCollisions (string file) {
    try {
        Assembly assembly = Assembly.LoadFrom (file);
        foreach (var method in FindExtensionMethods (assembly)) {
            DetectCollisions (method);
        }
    }
    catch (Exception e) {
        Console.WriteLine ("Error detecting collisions: {0}", e.Message);
    }
}
----------------------------------------

  private static void DetectCollisions (string file)
{
    try
    {
        Assembly assembly = Assembly.LoadFrom (file);
        foreach (TypeInfo type in assembly.DefinedTypes)
        {
            foreach (MethodInfo method in type.DeclaredMethods)
            {
                DetectCollisions (method);
            }
        }
    }
    catch (Exception e)
    {
        Console.WriteLine ("Error detecting collisions: {0}", e.Message);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
402
8
Gpt3D_Clone402_8.cs 1 11
Gpt3D_Clone402_8.cs 12 31
----------------------------------------

private static void DetectCollisions (string file) {
    try {
        Assembly assembly = Assembly.LoadFrom (file);
        foreach (var method in FindExtensionMethods (assembly)) {
            DetectCollisions (method);
        }
    }
    catch (Exception e) {
        Console.WriteLine ("Error detecting collisions: {0}", e.Message);
    }
}
----------------------------------------

  private static void DetectCollisions (string file)
{
    try
    {
        Assembly assembly = Assembly.LoadFrom (file);
        foreach (Type type in assembly.GetExportedTypes ())
        {
            foreach (MethodInfo method in type.GetMethods (BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic))
            {
                DetectCollisions (method);
            }
        }
    }
    catch (Exception e)
    {
        Console.WriteLine ("Error detecting collisions: {0}", e.Message);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
406
0
Gpt3D_Clone406_0.cs 1 10
Gpt3D_Clone406_0.cs 11 29
----------------------------------------

public static void Main () {
    try {
        Console.WriteLine ("Before throwing");
        throw new Exception ("Exception!");
    }
    finally {
        Console.WriteLine ("In finally");
        Console.ReadLine ();
    }
}
----------------------------------------

 public static void Main () {
            try
        {
            Console.WriteLine("Before throwing");
            throw new Exception("Exception!");
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex.Message);
            throw ex;
        }
        finally
        {
            Console.WriteLine("In finally");
            Console.ReadLine();
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
406
1
Gpt3D_Clone406_1.cs 1 10
Gpt3D_Clone406_1.cs 11 29
----------------------------------------

public static void Main () {
    try {
        Console.WriteLine ("Before throwing");
        throw new Exception ("Exception!");
    }
    finally {
        Console.WriteLine ("In finally");
        Console.ReadLine ();
    }
}
----------------------------------------

 public static void Main () {
                try
            {
                Console.WriteLine("Before throwing");
                throw new Exception("Exception!");
            }
            catch(Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
            finally
            {
                Console.WriteLine("In finally");
                Thread.Sleep(5000); // Sleep for 5 seconds
                Console.ReadLine();
            }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
406
2
Gpt3D_Clone406_2.cs 1 10
Gpt3D_Clone406_2.cs 11 29
----------------------------------------

public static void Main () {
    try {
        Console.WriteLine ("Before throwing");
        throw new Exception ("Exception!");
    }
    finally {
        Console.WriteLine ("In finally");
        Console.ReadLine ();
    }
}
----------------------------------------

 public static void Main () {
            try
        {
            Console.WriteLine("Before throwing");
            throw new Exception("Exception!");
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex.Message);
            throw;
        }
        finally
        {
            Console.WriteLine("In finally");
            Console.ReadLine();
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
406
3
Gpt3D_Clone406_3.cs 1 10
Gpt3D_Clone406_3.cs 11 29
----------------------------------------

public static void Main () {
    try {
        Console.WriteLine ("Before throwing");
        throw new Exception ("Exception!");
    }
    finally {
        Console.WriteLine ("In finally");
        Console.ReadLine ();
    }
}
----------------------------------------

 public static void Main(string[] args)
        {
            try
            {
                Console.WriteLine("Before throwing");
                throw new Exception("Exception!");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Exception: {ex.Message}");
            }
            finally
            {
                Console.WriteLine("In finally");
                Console.ReadLine();
            }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
406
4
Gpt3D_Clone406_4.cs 1 10
Gpt3D_Clone406_4.cs 11 29
----------------------------------------

public static void Main () {
    try {
        Console.WriteLine ("Before throwing");
        throw new Exception ("Exception!");
    }
    finally {
        Console.WriteLine ("In finally");
        Console.ReadLine ();
    }
}
----------------------------------------

 public static void Main()
{
    try
    {
        Console.WriteLine("Before throwing");
        throw new Exception("Exception!");
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex.Message);
    }
    finally
    {
        Console.WriteLine("In finally");
        Environment.Exit(0);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
406
5
Gpt3D_Clone406_5.cs 1 10
Gpt3D_Clone406_5.cs 11 28
----------------------------------------

public static void Main () {
    try {
        Console.WriteLine ("Before throwing");
        throw new Exception ("Exception!");
    }
    finally {
        Console.WriteLine ("In finally");
        Console.ReadLine ();
    }
}
----------------------------------------

 public static void Main () {
            try
        {
            Console.WriteLine("Before throwing");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            Console.WriteLine("In finally");
            throw new Exception("Exception!");
            Console.ReadLine();
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
409
0
Gpt3D_Clone409_0.cs 1 9
Gpt3D_Clone409_0.cs 10 25
----------------------------------------

static void Main (string [] args) {
    Stopwatch stopWatch = new Stopwatch ();
    stopWatch.Start ();
    Thread.Sleep (10000);
    stopWatch.Stop ();
    TimeSpan ts = stopWatch.Elapsed;
    string elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}.{3:00}", ts.Hours, ts.Minutes, ts.Seconds, ts.Milliseconds / 10);
    Console.WriteLine ("RunTime " + elapsedTime);
}
----------------------------------------

 static void Main (string [] args) {
    Stopwatch stopWatch = new Stopwatch ();
    stopWatch.Start ();
    long currentTime = 0; 
    while(currentTime< 10000)
    {
       // spin
       currentTime = stopWatch.ElapsedMilliseconds;
    }
    stopWatch.Stop ();
    TimeSpan ts = stopWatch.Elapsed;
    string elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}.{3:00}", ts.Hours, ts.Minutes, ts.Seconds, ts.Milliseconds / 10);
    Console.WriteLine ("RunTime " + elapsedTime);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
409
1
Gpt3D_Clone409_1.cs 1 9
Gpt3D_Clone409_1.cs 10 22
----------------------------------------

static void Main (string [] args) {
    Stopwatch stopWatch = new Stopwatch ();
    stopWatch.Start ();
    Thread.Sleep (10000);
    stopWatch.Stop ();
    TimeSpan ts = stopWatch.Elapsed;
    string elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}.{3:00}", ts.Hours, ts.Minutes, ts.Seconds, ts.Milliseconds / 10);
    Console.WriteLine ("RunTime " + elapsedTime);
}
----------------------------------------

  static void Main (string [] args) {
    Stopwatch stopWatch = new Stopwatch ();
    while (ts.TotalMilliseconds < 10000)
    {
        ts = stopWatch.Elapsed;
    }
    stopWatch.Stop ();
    TimeSpan ts = stopWatch.Elapsed;
    string elapsedTime = String.Format ("{0:00}:{1:00}:{2:00}.{3:00}", ts.Hours, ts.Minutes, ts.Seconds, ts.Milliseconds / 10);
    Console.WriteLine ("RunTime " + elapsedTime);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
40
0
Gpt3D_Clone40_0.cs 1 11
Gpt3D_Clone40_0.cs 12 28
----------------------------------------

[TestMethod] public void Test_ThatMyEventIsRaised () {
    List < string > receivedEvents = new List < string > ();
    MyClass myClass = new MyClass ();
    myClass.PropertyChanged += delegate (object sender, PropertyChangedEventArgs e) {
        receivedEvents.Add (e.PropertyName);
    };
    myClass.MyProperty = "testing";
    Assert.AreEqual (2, receivedEvents.Count);
    Assert.AreEqual ("MyProperty", receivedEvents [0]);
    Assert.AreEqual ("MyOtherProperty", receivedEvents [1]);
}
----------------------------------------

 [TestMethod] public void Test_ThatMyEventIsRaised() 
{
    List<string> receivedEvents = new List<string> ();
    MyClass myClass = new MyClass();
    myClass.PropertyChanged += (sender, e) => {
        if(e.PropertyName == "MyProperty")
            receivedEvents.Add(e.PropertyName);
        if(e.PropertyName == "MyOtherProperty")
            receivedEvents.Add(e.PropertyName);
    }; 
    myClass.MyProperty = "testing";
    Assert.AreEqual(2, receivedEvents.Count);
    Assert.AreEqual("MyProperty", receivedEvents[0]);
    Assert.AreEqual("MyOtherProperty", receivedEvents[1]);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
40
1
Gpt3D_Clone40_1.cs 1 11
Gpt3D_Clone40_1.cs 12 27
----------------------------------------

[TestMethod] public void Test_ThatMyEventIsRaised () {
    List < string > receivedEvents = new List < string > ();
    MyClass myClass = new MyClass ();
    myClass.PropertyChanged += delegate (object sender, PropertyChangedEventArgs e) {
        receivedEvents.Add (e.PropertyName);
    };
    myClass.MyProperty = "testing";
    Assert.AreEqual (2, receivedEvents.Count);
    Assert.AreEqual ("MyProperty", receivedEvents [0]);
    Assert.AreEqual ("MyOtherProperty", receivedEvents [1]);
}
----------------------------------------

 [TestMethod] public void Test_ThatMyEventIsRaised() 
{
    List<string> receivedEvents = new List<string>();
    MyClass myClass = new MyClass();
                myClass.OnPropertyChanged += MyClass_OnPropertyChanged;
                myClass.MyProperty = "testing";
                Assert.AreEqual(2, receivedEvents.Count);
                Assert.AreEqual("MyProperty", receivedEvents[0]);
                Assert.AreEqual("MyOtherProperty", receivedEvents[1]);
            }
            private void MyClass_OnPropertyChanged(object sender, PropertyChangedEventArgs e)
            {
                receivedEvents.Add(e.PropertyName);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
40
2
Gpt3D_Clone40_2.cs 1 11
Gpt3D_Clone40_2.cs 12 30
----------------------------------------

[TestMethod] public void Test_ThatMyEventIsRaised () {
    List < string > receivedEvents = new List < string > ();
    MyClass myClass = new MyClass ();
    myClass.PropertyChanged += delegate (object sender, PropertyChangedEventArgs e) {
        receivedEvents.Add (e.PropertyName);
    };
    myClass.MyProperty = "testing";
    Assert.AreEqual (2, receivedEvents.Count);
    Assert.AreEqual ("MyProperty", receivedEvents [0]);
    Assert.AreEqual ("MyOtherProperty", receivedEvents [1]);
}
----------------------------------------

 [TestMethod] public void Test_ThatMyEventIsRaised() 
{
                    List<string> receivedEvents = new List<string> ();
                    MyClass myClass = new MyClass ();
                    myClass.PropertyChanged += OnPropertyChanged;
                    myClass.MyProperty = "testing";
                    Assert.AreEqual(2, receivedEvents.Count);
                    Assert.AreEqual("MyProperty", receivedEvents[0]);
                    Assert.AreEqual("MyOtherProperty", receivedEvents[1]);
                }
                private void OnPropertyChanged(object sender, PropertyChangedEventArgs e)
                {
                if (e.PropertyName == "MyProperty" || e.PropertyName == "MyOtherProperty")   
                    receivedEvents.Add(e.PropertyName);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
40
3
Gpt3D_Clone40_3.cs 1 11
Gpt3D_Clone40_3.cs 12 28
----------------------------------------

[TestMethod] public void Test_ThatMyEventIsRaised () {
    List < string > receivedEvents = new List < string > ();
    MyClass myClass = new MyClass ();
    myClass.PropertyChanged += delegate (object sender, PropertyChangedEventArgs e) {
        receivedEvents.Add (e.PropertyName);
    };
    myClass.MyProperty = "testing";
    Assert.AreEqual (2, receivedEvents.Count);
    Assert.AreEqual ("MyProperty", receivedEvents [0]);
    Assert.AreEqual ("MyOtherProperty", receivedEvents [1]);
}
----------------------------------------

 [TestMethod] public void Test_ThatMyEventIsRaised() 
{
    List<string> receivedEvents = new List<string> ();
    MyClass myClass = new MyClass ();
    myClass.PropertyChanged += new PropertyChangedEventHandler(MyPropertyChangedHandler);
    myClass.MyProperty = "testing";
    Assert.AreEqual(2, receivedEvents.Count);
    Assert.AreEqual("MyProperty", receivedEvents[0]);
    Assert.AreEqual("MyOtherProperty", receivedEvents[1]);
            }
            private void MyPropertyChangedHandler(object sender, PropertyChangedEventArgs e)
            {
                receivedEvents.Add(e.PropertyName);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
40
4
Gpt3D_Clone40_4.cs 1 11
Gpt3D_Clone40_4.cs 12 23
----------------------------------------

[TestMethod] public void Test_ThatMyEventIsRaised () {
    List < string > receivedEvents = new List < string > ();
    MyClass myClass = new MyClass ();
    myClass.PropertyChanged += delegate (object sender, PropertyChangedEventArgs e) {
        receivedEvents.Add (e.PropertyName);
    };
    myClass.MyProperty = "testing";
    Assert.AreEqual (2, receivedEvents.Count);
    Assert.AreEqual ("MyProperty", receivedEvents [0]);
    Assert.AreEqual ("MyOtherProperty", receivedEvents [1]);
}
----------------------------------------

 [TestMethod] public void Test_ThatMyEventIsRaised() 
{
    List<string> receivedEvents = new List<string> ();
    MyClass myClass = new MyClass();
    myClass.PropertyChanged += (sender, e) => receivedEvents.Add(e.PropertyName); 
    myClass.MyProperty = "testing";
    Assert.AreEqual(2, receivedEvents.Count);
    Assert.AreEqual("MyProperty", receivedEvents[0]);
    Assert.AreEqual("MyOtherProperty", receivedEvents[1]);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
40
5
Gpt3D_Clone40_5.cs 1 11
Gpt3D_Clone40_5.cs 12 27
----------------------------------------

[TestMethod] public void Test_ThatMyEventIsRaised () {
    List < string > receivedEvents = new List < string > ();
    MyClass myClass = new MyClass ();
    myClass.PropertyChanged += delegate (object sender, PropertyChangedEventArgs e) {
        receivedEvents.Add (e.PropertyName);
    };
    myClass.MyProperty = "testing";
    Assert.AreEqual (2, receivedEvents.Count);
    Assert.AreEqual ("MyProperty", receivedEvents [0]);
    Assert.AreEqual ("MyOtherProperty", receivedEvents [1]);
}
----------------------------------------

 [TestMethod] public void Test_ThatMyEventIsRaised() 
{
    List<string> receivedEvents = new List<string>();
    MyClass myClass = new MyClass();
    myClass.PropertyChanged += MyClass_PropertyChanged;
    myClass.MyProperty = "testing";
    Assert.AreEqual(2, receivedEvents.Count);
    Assert.AreEqual("MyProperty", receivedEvents[0]);
    Assert.AreEqual("MyOtherProperty", receivedEvents[1]);
            }
                private void MyClass_PropertyChanged(object sender, PropertyChangedEventArgs e)
                {
                    receivedEvents.Add(e.PropertyName);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
40
6
Gpt3D_Clone40_6.cs 1 11
Gpt3D_Clone40_6.cs 12 29
----------------------------------------

[TestMethod] public void Test_ThatMyEventIsRaised () {
    List < string > receivedEvents = new List < string > ();
    MyClass myClass = new MyClass ();
    myClass.PropertyChanged += delegate (object sender, PropertyChangedEventArgs e) {
        receivedEvents.Add (e.PropertyName);
    };
    myClass.MyProperty = "testing";
    Assert.AreEqual (2, receivedEvents.Count);
    Assert.AreEqual ("MyProperty", receivedEvents [0]);
    Assert.AreEqual ("MyOtherProperty", receivedEvents [1]);
}
----------------------------------------

 [TestMethod] public void Test_ThatMyEventIsRaised() 
{
                    List<string> receivedEvents = new List<string> ();
                    MyClass myClass = new MyClass ();
                    myClass.PropertyChanged += EventHandler;
                    myClass.MyProperty = "testing";
                    Assert.AreEqual(2, receivedEvents.Count);
                    Assert.AreEqual("MyProperty", receivedEvents[0]);
                    Assert.AreEqual("MyOtherProperty", receivedEvents[1]);
                }
                private void EventHandler(object sender, PropertyChangedEventArgs e)
                {
                    if (e.PropertyName == "MyProperty" || e.PropertyName == "MyOtherProperty")
                        receivedEvents.Add(e.PropertyName);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
415
4
Gpt3D_Clone415_4.cs 1 9
Gpt3D_Clone415_4.cs 10 26
----------------------------------------

public Boolean TryGetValue (TKey key, out TValue value) {
    internalLock.AcquireReaderLock (Timeout.Infine);
    try {
        return dictionary.TryGetValue (key, out value);
    }
    finally {
        internalLock.ReleaseReaderLock ();
    }
}
----------------------------------------

 public Boolean TryGetValue (TKey key, out TValue value) {
    if(internalLock.TryAcquireReaderLock (Timeout.Infine))
    {
        try {
            return dictionary.TryGetValue (key, out value);
        }
        finally {
            internalLock.ReleaseReaderLock ();
        }
    }
    else
    {
        return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
415
5
Gpt3D_Clone415_5.cs 1 9
Gpt3D_Clone415_5.cs 10 20
----------------------------------------

public Boolean TryGetValue (TKey key, out TValue value) {
    internalLock.AcquireReaderLock (Timeout.Infine);
    try {
        return dictionary.TryGetValue (key, out value);
    }
    finally {
        internalLock.ReleaseReaderLock ();
    }
}
----------------------------------------

 public Boolean TryGetValue (TKey key, out TValue value) {
    Monitor.Enter(internalLock);
    try {
        return dictionary.TryGetValue (key, out value);
    }
    finally {
        Monitor.Exit(internalLock);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
41
0
Gpt3D_Clone41_0.cs 1 12
Gpt3D_Clone41_0.cs 13 27
----------------------------------------

static void Main (string [] args) {
    Stopwatch sw = new Stopwatch ();
    sw.Start ();
    int count = 0;
    for (uint i = 0; i < 1000000000; ++ i) {
        var isMultipleOf16 = i % 16 == 0;
        count += isMultipleOf16 ? 1 : 0;
    }
    sw.Stop ();
    Console.WriteLine (string.Format ("Ellapsed {0}, count {1}", sw.Elapsed, count));
    Console.ReadKey ();
}
----------------------------------------

 static void Main (string [] args) {
   Stopwatch sw = new Stopwatch ();
   sw.Start ();
   int count = 0;
    for (uint i = 0; i < 1000000000; i ++) {
        if(i<<4 == 0){
            count ++;
        }
    }
   sw.Stop ();
   Console.WriteLine (string.Format ("Ellapsed {0}, count {1}", sw.Elapsed, count));
   Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
41
1
Gpt3D_Clone41_1.cs 1 12
Gpt3D_Clone41_1.cs 13 27
----------------------------------------

static void Main (string [] args) {
    Stopwatch sw = new Stopwatch ();
    sw.Start ();
    int count = 0;
    for (uint i = 0; i < 1000000000; ++ i) {
        var isMultipleOf16 = i % 16 == 0;
        count += isMultipleOf16 ? 1 : 0;
    }
    sw.Stop ();
    Console.WriteLine (string.Format ("Ellapsed {0}, count {1}", sw.Elapsed, count));
    Console.ReadKey ();
}
----------------------------------------

 static void Main (string [] args) {
   Stopwatch sw = new Stopwatch ();
   sw.Start ();
   long count = 0;
    for (uint i = 0; i < 1000000000; i ++) {
        if(i & 15 == 0){
            count ++;
        }
    }
   sw.Stop ();
   Console.WriteLine (string.Format ("Ellapsed {0}, count {1}", sw.Elapsed, count));
   Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
41
2
Gpt3D_Clone41_2.cs 1 12
Gpt3D_Clone41_2.cs 13 27
----------------------------------------

static void Main (string [] args) {
    Stopwatch sw = new Stopwatch ();
    sw.Start ();
    int count = 0;
    for (uint i = 0; i < 1000000000; ++ i) {
        var isMultipleOf16 = i % 16 == 0;
        count += isMultipleOf16 ? 1 : 0;
    }
    sw.Stop ();
    Console.WriteLine (string.Format ("Ellapsed {0}, count {1}", sw.Elapsed, count));
    Console.ReadKey ();
}
----------------------------------------

 static void Main (string [] args) {
   Stopwatch sw = new Stopwatch ();
   sw.Start ();
   int count = 0;
    for (uint i = 0; i < 1000000000; i +=16 ) {
        if ((i/16)%2 == 0){
            count ++;
        }
    }
   sw.Stop ();
   Console.WriteLine (string.Format ("Ellapsed {0}, count {1}", sw.Elapsed, count));
   Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
41
3
Gpt3D_Clone41_3.cs 1 12
Gpt3D_Clone41_3.cs 13 27
----------------------------------------

static void Main (string [] args) {
    Stopwatch sw = new Stopwatch ();
    sw.Start ();
    int count = 0;
    for (uint i = 0; i < 1000000000; ++ i) {
        var isMultipleOf16 = i % 16 == 0;
        count += isMultipleOf16 ? 1 : 0;
    }
    sw.Stop ();
    Console.WriteLine (string.Format ("Ellapsed {0}, count {1}", sw.Elapsed, count));
    Console.ReadKey ();
}
----------------------------------------

 static void Main (string [] args) {
   Stopwatch sw = new Stopwatch ();
   sw.Start ();
   int count = 0;
    for (uint i = 0; i < 1000000000; i ++) {
        if(i%16 == 0){
            count ++;
        }
    }
   sw.Stop ();
   Console.WriteLine (string.Format ("Ellapsed {0}, count {1}", sw.Elapsed, count));
   Console.ReadKey ();
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
41
4
Gpt3D_Clone41_4.cs 1 12
Gpt3D_Clone41_4.cs 13 25
----------------------------------------

static void Main (string [] args) {
    Stopwatch sw = new Stopwatch ();
    sw.Start ();
    int count = 0;
    for (uint i = 0; i < 1000000000; ++ i) {
        var isMultipleOf16 = i % 16 == 0;
        count += isMultipleOf16 ? 1 : 0;
    }
    sw.Stop ();
    Console.WriteLine (string.Format ("Ellapsed {0}, count {1}", sw.Elapsed, count));
    Console.ReadKey ();
}
----------------------------------------

  static void Main (string [] args) {
   Stopwatch sw = new Stopwatch ();
   sw.Start ();
   int count = 0;
    for (uint i = 15; i < 1000000000; i += 16) {
        count ++;
    }
   sw.Stop ();
   Console.WriteLine (string.Format ("Ellapsed {0}, count {1}", sw.Elapsed, count));
   Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
41
5
Gpt3D_Clone41_5.cs 1 12
Gpt3D_Clone41_5.cs 13 25
----------------------------------------

static void Main (string [] args) {
    Stopwatch sw = new Stopwatch ();
    sw.Start ();
    int count = 0;
    for (uint i = 0; i < 1000000000; ++ i) {
        var isMultipleOf16 = i % 16 == 0;
        count += isMultipleOf16 ? 1 : 0;
    }
    sw.Stop ();
    Console.WriteLine (string.Format ("Ellapsed {0}, count {1}", sw.Elapsed, count));
    Console.ReadKey ();
}
----------------------------------------

 static void Main (string [] args) {
   Stopwatch sw = new Stopwatch ();
   sw.Start ();
   long count = 0;
    for (uint i = 0; i < 1000000000; i ++) {
        count += (i >> 4) << 4 == i  ? 1 : 0;
    }
   sw.Stop ();
   Console.WriteLine (string.Format ("Ellapsed {0}, count {1}", sw.Elapsed, count));
   Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
422
3
Gpt3D_Clone422_3.cs 1 13
Gpt3D_Clone422_3.cs 14 29
----------------------------------------

static void Main (string [] args) {
    var ListOfFoo = new List < Foo > ();
    ListOfFoo.Add (new Foo (1));
    ListOfFoo.Add (new Foo (2));
    ListOfFoo.Add (new Foo (3));
    ListOfFoo.Add (new Foo (4));
    var threads = new List < Thread > ();
    foreach (Foo f in ListOfFoo) {
        Thread thread = new Thread(()=>f.DoSomething());
        threads.Add (thread);
        thread.Start ();
    }
}
----------------------------------------

 static void Main (string [] args) {
    var ListOfFoo = new List < Foo > ();
    int maxNumber = 4;
    while (maxNumber > 0){
        ListOfFoo.Add (new Foo (maxNumber));
        maxNumber--;
    }
    var threads = new List < Thread > ();
    foreach (Foo f in ListOfFoo) {
        Thread thread = new Thread(()=>f.DoSomething());
        threads.Add (thread);
        thread.Start ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
422
4
Gpt3D_Clone422_4.cs 1 13
Gpt3D_Clone422_4.cs 14 29
----------------------------------------

static void Main (string [] args) {
    var ListOfFoo = new List < Foo > ();
    ListOfFoo.Add (new Foo (1));
    ListOfFoo.Add (new Foo (2));
    ListOfFoo.Add (new Foo (3));
    ListOfFoo.Add (new Foo (4));
    var threads = new List < Thread > ();
    foreach (Foo f in ListOfFoo) {
        Thread thread = new Thread(()=>f.DoSomething());
        threads.Add (thread);
        thread.Start ();
    }
}
----------------------------------------

 static void Main (string [] args) {
    var ListOfFoo = new List < Foo > ();
    int[] numList = new int[]{1,2,3,4};
    for (int i = 0; i < numList.Length; i++)
    ListOfFoo.Add (new Foo (numList[i]));
    var threads = new List < Thread > ();
    for (int a = 0; a < ListOfFoo.Count; a++){
        Foo f = ListOfFoo[a];
        Thread thread = new Thread(()=>f.DoSomething());
        threads.Add (thread);
        thread.Start ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
422
6
Gpt3D_Clone422_6.cs 1 13
Gpt3D_Clone422_6.cs 14 28
----------------------------------------

static void Main (string [] args) {
    var ListOfFoo = new List < Foo > ();
    ListOfFoo.Add (new Foo (1));
    ListOfFoo.Add (new Foo (2));
    ListOfFoo.Add (new Foo (3));
    ListOfFoo.Add (new Foo (4));
    var threads = new List < Thread > ();
    foreach (Foo f in ListOfFoo) {
        Thread thread = new Thread(()=>f.DoSomething());
        threads.Add (thread);
        thread.Start ();
    }
}
----------------------------------------

 static void Main (string [] args) {
    var ListOfFoo = new List < Foo > ();
    int[] numList = {1, 2, 3, 4};
    foreach (int n in numList){
        ListOfFoo.Add (new Foo (n));
    }
    var threads = new List < Thread > ();
    foreach (Foo f in ListOfFoo) {
        Thread thread = new Thread(()=>f.DoSomething());
        threads.Add (thread);
        thread.Start ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
422
7
Gpt3D_Clone422_7.cs 1 13
Gpt3D_Clone422_7.cs 14 28
----------------------------------------

static void Main (string [] args) {
    var ListOfFoo = new List < Foo > ();
    ListOfFoo.Add (new Foo (1));
    ListOfFoo.Add (new Foo (2));
    ListOfFoo.Add (new Foo (3));
    ListOfFoo.Add (new Foo (4));
    var threads = new List < Thread > ();
    foreach (Foo f in ListOfFoo) {
        Thread thread = new Thread(()=>f.DoSomething());
        threads.Add (thread);
        thread.Start ();
    }
}
----------------------------------------

 static void Main (string [] args) {
    var ListOfFoo = new List < Foo > ();
    int maxNumber = 4;
    for (int i = 1; i <= maxNumber;i++){
        ListOfFoo.Add (new Foo (i));
    }
    var threads = new List < Thread > ();
    foreach (Foo f in ListOfFoo) {
        Thread thread = new Thread(()=>f.DoSomething());
        threads.Add (thread);
        thread.Start ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
423
3
Gpt3D_Clone423_3.cs 1 14
Gpt3D_Clone423_3.cs 15 90
----------------------------------------

public static IntPtr EnsureHandle (this WindowInteropHelper helper) {
    if (helper == null)
        throw new ArgumentNullException ("helper");
    if (helper.Handle == IntPtr.Zero) {
        var window = (Window) typeof (WindowInteropHelper).InvokeMember ("_window", BindingFlags.GetField | BindingFlags.Instance | BindingFlags.NonPublic, null, helper, null);
        try {
            typeof (Window).InvokeMember ("SafeCreateWindow", BindingFlags.InvokeMethod | BindingFlags.Instance | BindingFlags.NonPublic, null, window, null);
        }
        catch (MissingMethodException) {
            typeof (Window).InvokeMember ("CreateSourceWindow", BindingFlags.InvokeMethod | BindingFlags.Instance | BindingFlags.NonPublic, null, window, new object [] {false});
        }
    }
    return helper.Handle;
}
----------------------------------------

  public static IntPtr EnsureHandle (this WindowInteropHelper helper) 
    {
        if (helper == null)
        {
            throw new ArgumentNullException("helper");
        }
        if (helper.Handle == IntPtr.Zero) 
        {
            var window = (Window)typeof(WindowInteropHelper).InvokeMember("_window",
                                            BindingFlags.GetField | BindingFlags.Instance | BindingFlags.NonPublic,
                                            null, helper, null);
            try
            {
                typeof(Window).InvokeMember("SafeCreateWindow", 
                                            BindingFlags.InvokeMethod | BindingFlags.Instance | BindingFlags.NonPublic,
                                            null, window, null);
            }
            catch (MissingMethodException) 
            {
                typeof(Window).InvokeMember("CreateSourceWindow", 
                                            BindingFlags.InvokeMethod | BindingFlags.Instance | BindingFlags.NonPublic,
                                            null, window, new object[] { false });
            }
        }
        return helper.Handle;
    }
 public static IntPtr EnsureHandle (this WindowInteropHelper helper)
    {
        if (helper == null)
        {
            throw new ArgumentNullException("helper");
        }
        if (helper.Handle == IntPtr.Zero)
        {
            FieldInfo windowField = typeof(WindowInteropHelper).GetField("_window", BindingFlags.Instance | BindingFlags.NonPublic);
            var window = (Window) windowField.GetValue(helper);
            try {
                typeof(Window).InvokeMember("SafeCreateWindow", 
                                    BindingFlags.InvokeMethod | BindingFlags.Instance | BindingFlags.NonPublic, 
                                    null, window, null);
            }
            catch(MissingMethodException e)
            {
                typeof(Window).InvokeMember("CreateSourceWindow", 
                                    BindingFlags.InvokeMethod | BindingFlags.Instance | BindingFlags.NonPublic, 
                                    null, window, new object[] {false});
            }
        }
        return helper.Handle;
    }
 public static IntPtr EnsureHandle(this WindowInteropHelper helper)
{
    if(helper == null)
        throw new ArgumentNullException("helper");
    if(helper.Handle == IntPtr.Zero)
    {
        var window = (Window) typeof(WindowInteropHelper).GetField("_window", BindingFlags.Instance | BindingFlags.NonPublic).GetValue(helper);
        try
        {
            MethodInfo safeCreateWindow = typeof(Window).GetMethod("SafeCreateWindow", BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);
            safeCreateWindow.Invoke(window, null);
        }
        catch(MissingMethodException ex)
        {
            MethodInfo createSourceWindow = typeof(Window).GetMethod("CreateSourceWindow", BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);
            createSourceWindow.Invoke(window, new object[]{false});
        }
    }
    return helper.Handle;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
423
4
Gpt3D_Clone423_4.cs 1 14
Gpt3D_Clone423_4.cs 15 40
----------------------------------------

public static IntPtr EnsureHandle (this WindowInteropHelper helper) {
    if (helper == null)
        throw new ArgumentNullException ("helper");
    if (helper.Handle == IntPtr.Zero) {
        var window = (Window) typeof (WindowInteropHelper).InvokeMember ("_window", BindingFlags.GetField | BindingFlags.Instance | BindingFlags.NonPublic, null, helper, null);
        try {
            typeof (Window).InvokeMember ("SafeCreateWindow", BindingFlags.InvokeMethod | BindingFlags.Instance | BindingFlags.NonPublic, null, window, null);
        }
        catch (MissingMethodException) {
            typeof (Window).InvokeMember ("CreateSourceWindow", BindingFlags.InvokeMethod | BindingFlags.Instance | BindingFlags.NonPublic, null, window, new object [] {false});
        }
    }
    return helper.Handle;
}
----------------------------------------

 public static IntPtr EnsureHandle(this WindowInteropHelper helper)
{
    if (helper == null)
    {
        throw new ArgumentNullException(nameof(helper));
    }
    
    if (helper.Handle == IntPtr.Zero)
    {
        var windowField = typeof(WindowInteropHelper).GetField("_window", BindingFlags.Instance | BindingFlags.NonPublic);
        var window = (Window)windowField.GetValue(helper);
        try
        {
            typeof(Window).InvokeMember("SafeCreateWindow", BindingFlags.InvokeMethod | BindingFlags.Instance | BindingFlags.NonPublic, null, window, null);
        }
        catch (MissingMethodException)
        {
            typeof(Window).InvokeMember("CreateSourceWindow", BindingFlags.InvokeMethod | BindingFlags.Instance | BindingFlags.NonPublic, null, window, new object[] { false });
        }
    }
    return helper.Handle;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
423
5
Gpt3D_Clone423_5.cs 1 14
Gpt3D_Clone423_5.cs 15 37
----------------------------------------

public static IntPtr EnsureHandle (this WindowInteropHelper helper) {
    if (helper == null)
        throw new ArgumentNullException ("helper");
    if (helper.Handle == IntPtr.Zero) {
        var window = (Window) typeof (WindowInteropHelper).InvokeMember ("_window", BindingFlags.GetField | BindingFlags.Instance | BindingFlags.NonPublic, null, helper, null);
        try {
            typeof (Window).InvokeMember ("SafeCreateWindow", BindingFlags.InvokeMethod | BindingFlags.Instance | BindingFlags.NonPublic, null, window, null);
        }
        catch (MissingMethodException) {
            typeof (Window).InvokeMember ("CreateSourceWindow", BindingFlags.InvokeMethod | BindingFlags.Instance | BindingFlags.NonPublic, null, window, new object [] {false});
        }
    }
    return helper.Handle;
}
----------------------------------------

  public static IntPtr EnsureHandle (this WindowInteropHelper helper)
{
    if(helper == null)
        throw new ArgumentNullException("helper");
    if(helper.Handle == IntPtr.Zero)
    {
        var window = (Window)typeof(WindowInteropHelper).GetField("_window",
            BindingFlags.Instance | BindingFlags.NonPublic).GetValue(helper);
        try
        {
            window.SafeCreateWindow();
        }
        catch(MissingMethodException ex)
        {
            window.CreateSourceWindow(false);
        }
    }
    return helper.Handle;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
423
6
Gpt3D_Clone423_6.cs 1 14
Gpt3D_Clone423_6.cs 15 43
----------------------------------------

public static IntPtr EnsureHandle (this WindowInteropHelper helper) {
    if (helper == null)
        throw new ArgumentNullException ("helper");
    if (helper.Handle == IntPtr.Zero) {
        var window = (Window) typeof (WindowInteropHelper).InvokeMember ("_window", BindingFlags.GetField | BindingFlags.Instance | BindingFlags.NonPublic, null, helper, null);
        try {
            typeof (Window).InvokeMember ("SafeCreateWindow", BindingFlags.InvokeMethod | BindingFlags.Instance | BindingFlags.NonPublic, null, window, null);
        }
        catch (MissingMethodException) {
            typeof (Window).InvokeMember ("CreateSourceWindow", BindingFlags.InvokeMethod | BindingFlags.Instance | BindingFlags.NonPublic, null, window, new object [] {false});
        }
    }
    return helper.Handle;
}
----------------------------------------

 public static IntPtr EnsureHandle (this WindowInteropHelper helper)
{
    if (helper == null)
    {
        throw new ArgumentNullException("helper");
    }
    if (helper.Handle == IntPtr.Zero)
    {
        var window = (Window)typeof(WindowInteropHelper).GetField("_window",
                                            BindingFlags.Instance | BindingFlags.NonPublic).GetValue(helper);
        try
        {
            typeof(Window).InvokeMember("SafeCreateWindow",
                                        BindingFlags.InvokeMethod | BindingFlags.Instance | BindingFlags.NonPublic,
                                        null, window, null);
        }
        catch (MissingMethodException ex)
        {
            typeof(Window).InvokeMember("CreateSourceWindow", 
                                    BindingFlags.InvokeMethod | BindingFlags.Instance | BindingFlags.NonPublic,
                                     null, window, new object[] { false });
        }
    }
    return helper.Handle;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
433
3
Gpt3D_Clone433_3.cs 1 19
Gpt3D_Clone433_3.cs 20 38
----------------------------------------

public static int IndexPosition (this XElement element) {
    if (element == null) {
        throw new ArgumentNullException ("element");
    }
    if (element.Parent == null) {
        return - 1;
    }
    if (element.Parent.Elements (element.Name).Count () == 1) {
        return - 2;
    }
    int i = 1;
    foreach (var sibling in element.Parent.Elements (element.Name)) {
        if (sibling == element) {
            return i;
        }
        i ++;
    }
    throw new InvalidOperationException ("element has been removed from its parent.");
}
----------------------------------------

 public static int IndexPosition (this XElement element) {
    if (element == null) {
        throw new ArgumentNullException ("element");
    }
    if (element.Parent == null) {
        return -1;
    }
     
    int index = -1;
    foreach (XElement sibling in element.Parent.Elements(element.Name)) {
        index++;
        if (sibling == element) {
           break; 
        }
    }
    return index;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
433
5
Gpt3D_Clone433_5.cs 1 19
Gpt3D_Clone433_5.cs 20 41
----------------------------------------

public static int IndexPosition (this XElement element) {
    if (element == null) {
        throw new ArgumentNullException ("element");
    }
    if (element.Parent == null) {
        return - 1;
    }
    if (element.Parent.Elements (element.Name).Count () == 1) {
        return - 2;
    }
    int i = 1;
    foreach (var sibling in element.Parent.Elements (element.Name)) {
        if (sibling == element) {
            return i;
        }
        i ++;
    }
    throw new InvalidOperationException ("element has been removed from its parent.");
}
----------------------------------------

 public static int IndexPosition (this XElement element)
{
    if (element == null)
    {
        throw new ArgumentNullException("element");
    }
    if (element.Parent == null)
    {
        return -1;
    }
    var siblings = element.Parent.Elements(element.Name).ToList();
    for (int i = 0; i < siblings.Count(); i++)
    {
        if (siblings.ElementAt(i).Equals(element))
        {
            return i;
        }
    }
    throw new InvalidOperationException("element has been removed from its parent.");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
433
6
Gpt3D_Clone433_6.cs 1 19
Gpt3D_Clone433_6.cs 20 38
----------------------------------------

public static int IndexPosition (this XElement element) {
    if (element == null) {
        throw new ArgumentNullException ("element");
    }
    if (element.Parent == null) {
        return - 1;
    }
    if (element.Parent.Elements (element.Name).Count () == 1) {
        return - 2;
    }
    int i = 1;
    foreach (var sibling in element.Parent.Elements (element.Name)) {
        if (sibling == element) {
            return i;
        }
        i ++;
    }
    throw new InvalidOperationException ("element has been removed from its parent.");
}
----------------------------------------

 public static int IndexPosition (this XElement element) {
    if (element == null) {
        throw new ArgumentNullException ("element");
    }
    if (element.Parent == null) {
        return -1;
    }
    var array = element.Parent.Elements(element.Name).ToArray();
    for (int i = 0; i < array.Length; i++)
    {
        if (array[i] == element)
        {
            return i;
        }
    }
    throw new InvalidOperationException ("element has been removed from its parent.");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
433
7
Gpt3D_Clone433_7.cs 1 19
Gpt3D_Clone433_7.cs 20 41
----------------------------------------

public static int IndexPosition (this XElement element) {
    if (element == null) {
        throw new ArgumentNullException ("element");
    }
    if (element.Parent == null) {
        return - 1;
    }
    if (element.Parent.Elements (element.Name).Count () == 1) {
        return - 2;
    }
    int i = 1;
    foreach (var sibling in element.Parent.Elements (element.Name)) {
        if (sibling == element) {
            return i;
        }
        i ++;
    }
    throw new InvalidOperationException ("element has been removed from its parent.");
}
----------------------------------------

  public static int IndexPosition (this XElement element) 
{
    if (element == null) 
    {
        throw new ArgumentNullException("element");
    }
    if (element.Parent == null)
    {
        return -1;
    }
    int position = 0;
    for (int i = 0; i < element.Parent.Elements(element.Name).Count(); i++)
    {
        if (element.Parent.Elements(element.Name).ElementAt(i).Equals(element))
        {
            position = i;
        }
    }
    return position;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
434
1
Gpt3D_Clone434_1.cs 1 9
Gpt3D_Clone434_1.cs 10 22
----------------------------------------

protected override void OnMouseMove (MouseEventArgs e) {
    if (e.Button == MouseButtons.Left) {
        rec.Width = e.X - rec.X;
        rec.Height = e.Y - rec.Y;
    } else if (e.Button == MouseButtons.Right) {
        rec.X = e.X - MouseDownLocation.X;
        rec.Y = e.Y - MouseDownLocation.Y;
    }
}
----------------------------------------

   protected override void OnMouseMove (MouseEventArgs e) {
    if (e.Button == MouseButtons.Left) {
        int width = e.X - MouseDownLocation.X;
        int height = e.Y - MouseDownLocation.Y;
        rec.Location = MouseDownLocation;
        rec.Size = new Size (width, height);
    } else if (e.Button == MouseButtons.Right) {
        rec.X = e.X - MouseDownLocation.X;
        rec.Y = e.Y - MouseDownLocation.Y;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
434
2
Gpt3D_Clone434_2.cs 1 9
Gpt3D_Clone434_2.cs 10 22
----------------------------------------

protected override void OnMouseMove (MouseEventArgs e) {
    if (e.Button == MouseButtons.Left) {
        rec.Width = e.X - rec.X;
        rec.Height = e.Y - rec.Y;
    } else if (e.Button == MouseButtons.Right) {
        rec.X = e.X - MouseDownLocation.X;
        rec.Y = e.Y - MouseDownLocation.Y;
    }
}
----------------------------------------

  protected override void OnMouseMove (MouseEventArgs e) {
    if (e.Button == MouseButtons.Left) {
        rec.X = MouseDownLocation.X;
        rec.Y = MouseDownLocation.Y;
        rec.Width = Math.Abs(e.X - MouseDownLocation.X);
        rec.Height = Math.Abs(e.Y - MouseDownLocation.Y);
    } else if (e.Button == MouseButtons.Right) {
        rec.X = e.X - MouseDownLocation.X;
        rec.Y = e.Y - MouseDownLocation.Y;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
434
3
Gpt3D_Clone434_3.cs 1 9
Gpt3D_Clone434_3.cs 10 20
----------------------------------------

protected override void OnMouseMove (MouseEventArgs e) {
    if (e.Button == MouseButtons.Left) {
        rec.Width = e.X - rec.X;
        rec.Height = e.Y - rec.Y;
    } else if (e.Button == MouseButtons.Right) {
        rec.X = e.X - MouseDownLocation.X;
        rec.Y = e.Y - MouseDownLocation.Y;
    }
}
----------------------------------------

 protected override void OnMouseMove (MouseEventArgs e) {
    if (e.Button == MouseButtons.Left) {
        rec.Width = Math.Max(0, e.X - rec.X);
        rec.Height = Math.Max(0, e.Y - rec.Y);
    } else if (e.Button == MouseButtons.Right) {
        rec.X = e.X - MouseDownLocation.X;
        rec.Y = e.Y - MouseDownLocation.Y;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
436
0
Gpt3D_Clone436_0.cs 1 9
Gpt3D_Clone436_0.cs 10 24
----------------------------------------

private static void Test (Action toTest) {
    for (int i = 0; i < 100; i ++) {
        var sw = Stopwatch.StartNew ();
        toTest ();
        sw.Stop ();
        Console.WriteLine ("costs {0}", sw.ElapsedMilliseconds);
        sw.Reset ();
    }
}
----------------------------------------

  private static void Test (Action toTest) {
    var minTime = long.MaxValue;
    var maxTime = long.MinValue;
    for (int i = 0; i < 100; i ++) {
        var sw = Stopwatch.StartNew ();
        toTest ();
        sw.Stop ();
        minTime = Math.Min (minTime, sw.ElapsedMilliseconds);
        maxTime = Math.Max (maxTime, sw.ElapsedMilliseconds);
        sw.Reset ();
    }
    Console.WriteLine ("min costs {0}, max costs {1}", minTime, maxTime);  
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
436
3
Gpt3D_Clone436_3.cs 1 9
Gpt3D_Clone436_3.cs 10 22
----------------------------------------

private static void Test (Action toTest) {
    for (int i = 0; i < 100; i ++) {
        var sw = Stopwatch.StartNew ();
        toTest ();
        sw.Stop ();
        Console.WriteLine ("costs {0}", sw.ElapsedMilliseconds);
        sw.Reset ();
    }
}
----------------------------------------

 private static void Test (Action toTest) {
    var totalTime = 0L;
    for (int i = 0; i < 100; i ++) {
        var sw = Stopwatch.StartNew ();
        toTest ();
        sw.Stop ();
        totalTime += sw.Elapsed;
        sw.Reset ();
    }
    Console.WriteLine ("costs {0}", totalTime / 100);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
436
4
Gpt3D_Clone436_4.cs 1 9
Gpt3D_Clone436_4.cs 10 22
----------------------------------------

private static void Test (Action toTest) {
    for (int i = 0; i < 100; i ++) {
        var sw = Stopwatch.StartNew ();
        toTest ();
        sw.Stop ();
        Console.WriteLine ("costs {0}", sw.ElapsedMilliseconds);
        sw.Reset ();
    }
}
----------------------------------------

 private static void Test (Action toTest) {
    var times = new long[100] ;
    for (int i = 0; i < 100; i ++) {
        var sw = Stopwatch.StartNew ();
        toTest ();
        sw.Stop ();
        times[i] = sw.ElapsedMilliseconds;
        sw.Reset ();
    }
    Console.WriteLine("avg costs: {0}, min costs {1}, max costs {2}", times.Average(), times.Min(), times.Max());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
436
5
Gpt3D_Clone436_5.cs 1 9
Gpt3D_Clone436_5.cs 10 23
----------------------------------------

private static void Test (Action toTest) {
    for (int i = 0; i < 100; i ++) {
        var sw = Stopwatch.StartNew ();
        toTest ();
        sw.Stop ();
        Console.WriteLine ("costs {0}", sw.ElapsedMilliseconds);
        sw.Reset ();
    }
}
----------------------------------------

  private static void Test (Action toTest) {
    var totalTime = 0L;
    for (int i = 0; i < 100; i ++) {
        var sw = Stopwatch.StartNew ();
        toTest ();
        sw.Stop ();
        totalTime += sw.ElapsedMilliseconds;
        sw.Reset ();
    }
    Console.WriteLine ("costs {0}", totalTime / 100);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
436
6
Gpt3D_Clone436_6.cs 1 9
Gpt3D_Clone436_6.cs 10 22
----------------------------------------

private static void Test (Action toTest) {
    for (int i = 0; i < 100; i ++) {
        var sw = Stopwatch.StartNew ();
        toTest ();
        sw.Stop ();
        Console.WriteLine ("costs {0}", sw.ElapsedMilliseconds);
        sw.Reset ();
    }
}
----------------------------------------

 private static void Test (Action toTest) {
    var times = new List<long>();
    for (int i = 0; i < 100; i ++) {
        var sw = Stopwatch.StartNew ();
        toTest ();
        sw.Stop ();
        times.Add(sw.ElapsedMilliseconds);
        sw.Reset ();
    }
    Console.WriteLine("avg costs: {0}, min costs {1}, max costs {2}", times.Average(), times.Min(), times.Max());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
436
9
Gpt3D_Clone436_9.cs 1 9
Gpt3D_Clone436_9.cs 10 21
----------------------------------------

private static void Test (Action toTest) {
    for (int i = 0; i < 100; i ++) {
        var sw = Stopwatch.StartNew ();
        toTest ();
        sw.Stop ();
        Console.WriteLine ("costs {0}", sw.ElapsedMilliseconds);
        sw.Reset ();
    }
}
----------------------------------------

 private static void Test (Action toTest) {
    var sw = new Stopwatch ();
    for (int i = 0; i < 100; i ++) {
        sw.Start ();
        toTest ();
        sw.Stop ();
        Console.WriteLine ("costs {0}", sw.ElapsedMilliseconds);
        sw.Reset ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
438
1
Gpt3D_Clone438_1.cs 1 16
Gpt3D_Clone438_1.cs 17 36
----------------------------------------

public static void Rename (this FileSystemInfo item, string newName) {
    if (item == null) {
        throw new ArgumentNullException ("item");
    }
    FileInfo fileInfo = item as FileInfo;
    if (fileInfo != null) {
        fileInfo.Rename (newName);
        return;
    }
    DirectoryInfo directoryInfo = item as DirectoryInfo;
    if (directoryInfo != null) {
        directoryInfo.Rename (newName);
        return;
    }
    throw new ArgumentException ("Item", "Unexpected subclass of FileSystemInfo " + item.GetType ());
}
----------------------------------------

 public static void Rename (this FileSystemInfo item, string newName) {
    if (item == null) {
        throw new ArgumentNullException ("item");
    }
    FileInfo fileInfo = item as FileInfo;
    if (fileInfo != null) {
        fileInfo.Rename (newName);
    }
    else {
        DirectoryInfo directoryInfo = item as DirectoryInfo;
        if (directoryInfo != null) {
            directoryInfo.Rename (newName);
        }
        else {
            throw new ArgumentException ("Unexpected subclass of FileSystemInfo " + item.GetType ());
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
439
0
Gpt3D_Clone439_0.cs 1 16
Gpt3D_Clone439_0.cs 17 38
----------------------------------------

public static void Rename (this FileSystemInfo item, string newName) {
    if (item == null) {
        throw new ArgumentNullException ("item");
    }
    FileInfo fileInfo = item as FileInfo;
    if (fileInfo != null) {
        fileInfo.Rename (newName);
        return;
    }
    DirectoryInfo directoryInfo = item as DirectoryInfo;
    if (directoryInfo != null) {
        directoryInfo.Rename (newName);
        return;
    }
    throw new ArgumentException ("Item", "Unexpected subclass of FileSystemInfo " + item.GetType ());
}
----------------------------------------

	public static void Rename (this FileSystemInfo item, string newName) {
    if (item == null) {
        throw new ArgumentNullException ("item");
    }
    FileInfo fileInfo = item as FileInfo;
    if (fileInfo != null) {
        File.Move(fileInfo.FullName, Path.Combine(fileInfo.DirectoryName, newName));
        return;
    }
    DirectoryInfo directoryInfo = item as DirectoryInfo;
    if (directoryInfo != null) {
        string fullPath = directoryInfo.FullName;
        string directory = Path.GetDirectoryName(fullPath);
        string newFullPath = Path.Combine(directory, newName);
        Directory.Move(fullPath, newFullPath);
    }
    else {
        throw new ArgumentException ("Item", "Unexpected subclass of FileSystemInfo " + item.GetType ());
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
43
1
Gpt3D_Clone43_1.cs 1 11
Gpt3D_Clone43_1.cs 12 29
----------------------------------------

public T Dequeue () {
    lock (q)
    {
        for (;;) {
            if (q.Count > 0) {
                return q.Dequeue ();
            }
            System.Threading.Monitor.Wait (q);
        }
    }
}
----------------------------------------

 public T Dequeue() 
{
   lock (q)
   {
       while (true)
       {
           if (q.Count > 0)
           {
               break;
           }
           Monitor.Wait(q);
       }
       return q.Dequeue();
   }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
43
3
Gpt3D_Clone43_3.cs 1 11
Gpt3D_Clone43_3.cs 12 24
----------------------------------------

public T Dequeue () {
    lock (q)
    {
        for (;;) {
            if (q.Count > 0) {
                return q.Dequeue ();
            }
            System.Threading.Monitor.Wait (q);
        }
    }
}
----------------------------------------

 public T Dequeue() 
{
   lock (q)
   {
       while (q.IsEmpty)
       {
          Monitor.Wait(q, TimeSpan.FromMilliseconds(500));
       }
       return q.Dequeue();
   }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
43
4
Gpt3D_Clone43_4.cs 1 11
Gpt3D_Clone43_4.cs 12 24
----------------------------------------

public T Dequeue () {
    lock (q)
    {
        for (;;) {
            if (q.Count > 0) {
                return q.Dequeue ();
            }
            System.Threading.Monitor.Wait (q);
        }
    }
}
----------------------------------------

 public T Dequeue() 
{
   lock (q)
   {
       while (q.Count == 0)
       {
          Monitor.Wait(q, 100);
       }
       return q.Dequeue();
   }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
43
5
Gpt3D_Clone43_5.cs 1 11
Gpt3D_Clone43_5.cs 12 24
----------------------------------------

public T Dequeue () {
    lock (q)
    {
        for (;;) {
            if (q.Count > 0) {
                return q.Dequeue ();
            }
            System.Threading.Monitor.Wait (q);
        }
    }
}
----------------------------------------

 public T Dequeue() 
{
   lock (q)
   {
       while (q.Count <= 0)
       {
          WaitHandle.WaitAny(new [] { q });
       }
       return q.Dequeue();
   }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
43
6
Gpt3D_Clone43_6.cs 1 11
Gpt3D_Clone43_6.cs 12 24
----------------------------------------

public T Dequeue () {
    lock (q)
    {
        for (;;) {
            if (q.Count > 0) {
                return q.Dequeue ();
            }
            System.Threading.Monitor.Wait (q);
        }
    }
}
----------------------------------------

 public T Dequeue() 
{
   lock (q)
   {
       while (q.Count == 0)
       {
          Monitor.Wait(q, TimeSpan.FromSeconds(10));
       }
       return q.Dequeue();
   }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
43
7
Gpt3D_Clone43_7.cs 1 11
Gpt3D_Clone43_7.cs 12 25
----------------------------------------

public T Dequeue () {
    lock (q)
    {
        for (;;) {
            if (q.Count > 0) {
                return q.Dequeue ();
            }
            System.Threading.Monitor.Wait (q);
        }
    }
}
----------------------------------------

 public T Dequeue() 
{
   lock (q)
   {
       while (q.Count == 0)
       {
          System.Threading.Monitor.Wait(q);
       }
       return q.Dequeue();
   }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
43
8
Gpt3D_Clone43_8.cs 1 11
Gpt3D_Clone43_8.cs 12 23
----------------------------------------

public T Dequeue () {
    lock (q)
    {
        for (;;) {
            if (q.Count > 0) {
                return q.Dequeue ();
            }
            System.Threading.Monitor.Wait (q);
        }
    }
}
----------------------------------------

 public T Dequeue() 
{
   lock (q)
   {
       while (q.Count == 0 || !Monitor.Wait(q, TimeSpan.FromMilliseconds(50)))
       {
       }
       return q.Dequeue();
   }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
440
0
Gpt3D_Clone440_0.cs 1 26
Gpt3D_Clone440_0.cs 27 57
----------------------------------------

private void DefineGeometry () {
    var points = PointCollection;
    _figure.Segments.Clear ();
    if (points.Any ()) {
        _figure.StartPoint = points [0];
        if (points.Count > 1) {
            for (int i = 1; i < (points.Count - 1); i ++) {
                var v1 = (Point) points [i] - points [i - 1];
                var v2 = (Point) points [i + 1] - points [i];
                var radius = (points [i].Radius ?? Radius) ?? 0;
                radius = Math.Min (Math.Min (v1.Length, v2.Length) / 2, radius);
                double len = v1.Length;
                v1.Normalize ();
                v1 *= (len - radius);
                var line = new LineSegment ((Point) points [i - 1] + v1, true);
                _figure.Segments.Add (line);
                v2.Normalize ();
                v2 *= radius;
                var direction = (Vector.AngleBetween (v1, v2) > 0) ? SweepDirection.Clockwise : SweepDirection.Counterclockwise;
                var arc = new ArcSegment ((Point) points [i] + v2, new Size (radius, radius), 0, false, direction, true);
                _figure.Segments.Add (arc);
            }
            _figure.Segments.Add (new LineSegment (points [points.Count - 1], true));
        }
    }
}
----------------------------------------

  private void DefineGeometry() {
    var points = PointCollection;
    _figure.Segments.Clear();
    if (points.Any()) {
        _figure.StartPoint = points[0];
        if (points.Count > 1) {
            for (int i = 1; i < (points.Count - 1); i++) {
                var p1 = (Point)points[i - 1];
                var p2 = (Point)points[i];
                var p3 = (Point)points[i + 1];
                var v1 = (Point)p2 - p1;
                var v2 = (Point)p3 - p2;
                var radius = (points[i].Radius ?? Radius) ?? 0;
                radius = Math.Min(Math.Min(v1.Length, v2.Length) / 2, radius);
                double len = v1.Length;
                v1.Normalize();
                v1 *= (len - radius);
                var line = new LineSegment(p1 + v1, true);
                _figure.Segments.Add(line);
                v2.Normalize();
                v2 *= radius;
                var direction = (Vector.AngleBetween(v1, v2) > 0) ? SweepDirection.Clockwise : SweepDirection.Counterclockwise;
                var arc = new ArcSegment((Point)p2 + v2, new Size(radius, radius), 0, false, direction, true);
                _figure.Segments.Add(arc);
            }
            _figure.Segments.Add(new LineSegment(points[points.Count - 1], true));
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
440
1
Gpt3D_Clone440_1.cs 1 26
Gpt3D_Clone440_1.cs 27 55
----------------------------------------

private void DefineGeometry () {
    var points = PointCollection;
    _figure.Segments.Clear ();
    if (points.Any ()) {
        _figure.StartPoint = points [0];
        if (points.Count > 1) {
            for (int i = 1; i < (points.Count - 1); i ++) {
                var v1 = (Point) points [i] - points [i - 1];
                var v2 = (Point) points [i + 1] - points [i];
                var radius = (points [i].Radius ?? Radius) ?? 0;
                radius = Math.Min (Math.Min (v1.Length, v2.Length) / 2, radius);
                double len = v1.Length;
                v1.Normalize ();
                v1 *= (len - radius);
                var line = new LineSegment ((Point) points [i - 1] + v1, true);
                _figure.Segments.Add (line);
                v2.Normalize ();
                v2 *= radius;
                var direction = (Vector.AngleBetween (v1, v2) > 0) ? SweepDirection.Clockwise : SweepDirection.Counterclockwise;
                var arc = new ArcSegment ((Point) points [i] + v2, new Size (radius, radius), 0, false, direction, true);
                _figure.Segments.Add (arc);
            }
            _figure.Segments.Add (new LineSegment (points [points.Count - 1], true));
        }
    }
}
----------------------------------------

  private void DefineGeometry() {
    var points = PointCollection;
    _figure.Segments.Clear();
    if (points.Any()) {
        _figure.StartPoint = points[0];
        if (points.Count > 1) {
            for (int i = 1; i < (points.Count - 1); i++) {
                var segmentStart = (Point)points[i - 1];
                var v1 = (Point)points[i] - points[i - 1];
                var v2 = (Point)points[i + 1] - points[i];
                var radius = (points[i].Radius ?? Radius) ?? 0;
                radius = Math.Min(Math.Min(v1.Length, v2.Length) / 2, radius);
                double len = v1.Length;
                v1.Normalize();
                v1 *= (len - radius);
                var segmentEnd = (Point)points[i - 1] + v1;
                AddSegment(segmentStart, segmentEnd);
                v2.Normalize();
                v2 *= radius;
                segmentStart = (Point)points[i] + v2;
                var direction = (Vector.AngleBetween(v1, v2) > 0) ? SweepDirection.Clockwise : SweepDirection.Counterclockwise;
                AddCircularSegment(segmentStart, radius, direction);
            }
            AddSegment(points[points.Count - 1], points[points.Count - 1]);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
440
4
Gpt3D_Clone440_4.cs 1 26
Gpt3D_Clone440_4.cs 27 58
----------------------------------------

private void DefineGeometry () {
    var points = PointCollection;
    _figure.Segments.Clear ();
    if (points.Any ()) {
        _figure.StartPoint = points [0];
        if (points.Count > 1) {
            for (int i = 1; i < (points.Count - 1); i ++) {
                var v1 = (Point) points [i] - points [i - 1];
                var v2 = (Point) points [i + 1] - points [i];
                var radius = (points [i].Radius ?? Radius) ?? 0;
                radius = Math.Min (Math.Min (v1.Length, v2.Length) / 2, radius);
                double len = v1.Length;
                v1.Normalize ();
                v1 *= (len - radius);
                var line = new LineSegment ((Point) points [i - 1] + v1, true);
                _figure.Segments.Add (line);
                v2.Normalize ();
                v2 *= radius;
                var direction = (Vector.AngleBetween (v1, v2) > 0) ? SweepDirection.Clockwise : SweepDirection.Counterclockwise;
                var arc = new ArcSegment ((Point) points [i] + v2, new Size (radius, radius), 0, false, direction, true);
                _figure.Segments.Add (arc);
            }
            _figure.Segments.Add (new LineSegment (points [points.Count - 1], true));
        }
    }
}
----------------------------------------

  private void DefineGeometry() {
    var points = PointCollection;
    _figure.Segments.Clear();
    if (points.Any()) {
        _figure.StartPoint = points[0];
        if (points.Count > 1) {
            for (int i = 1; i < (points.Count - 1); i++) {
                // Vector from previous point to current point.
                Vector v1 = (Point)(points[i] - points[i - 1]);
                // Vector from current point to next point.
                Vector v2 = (Point)(points[i + 1] - points[i]);
                // Set radius.
                double radius = (points[i].Radius ?? Radius) ?? 0;
                radius = Math.Min(Math.Min(v1.Length, v2.Length) / 2, radius);
                // Create line segment from previous point to current point.
                LineSegment line = new LineSegment((Point)points[i - 1] + (v1.Normalize() * (v1.Length - radius)), true);
                _figure.Segments.Add(line);
                // Create arc segment from current point to next point.
                SweepDirection direction = (Vector.AngleBetween(v1, v2) > 0) ? SweepDirection.Clockwise : SweepDirection.Counterclockwise;
                ArcSegment arc = new ArcSegment((Point)points[i] + (v2.Normalize() * radius), new Size(radius, radius), 0, false, direction, true);
                _figure.Segments.Add(arc);
            }
            _figure.Segments.Add(new LineSegment(points[points.Count - 1], true));
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
441
3
Gpt3D_Clone441_3.cs 1 11
Gpt3D_Clone441_3.cs 12 25
----------------------------------------

public static String dt2JSON (DataTable dt) {
    var rows = new List < Object > ();
    foreach (DataRow row in dt.Rows) {
        var rowData = new Dictionary < string, object > ();
        foreach (DataColumn col in dt.Columns)
            rowData [col.ColumnName] = row [col];
        rows.Add (rowData);
    }
    var js = new JavaScriptSerializer ();
    return js.Serialize (new {rows = rows});
}
----------------------------------------

  public static String dt2JSON (DataTable dt) {
        List<object> rows = new List<object>();
    
        foreach (DataRow row in dt.Rows) {
            var rowData = new Dictionary<string, object>();
            foreach (DataColumn col in dt.Columns)
                rowData[col.ColumnName] = row[col];
            rows.Add(rowData);
        }
        var jsonString = JsonConvert.SerializeObject(rows);
        return jsonString;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
441
5
Gpt3D_Clone441_5.cs 1 11
Gpt3D_Clone441_5.cs 12 26
----------------------------------------

public static String dt2JSON (DataTable dt) {
    var rows = new List < Object > ();
    foreach (DataRow row in dt.Rows) {
        var rowData = new Dictionary < string, object > ();
        foreach (DataColumn col in dt.Columns)
            rowData [col.ColumnName] = row [col];
        rows.Add (rowData);
    }
    var js = new JavaScriptSerializer ();
    return js.Serialize (new {rows = rows});
}
----------------------------------------

  public static String dt2JSON (DataTable dt) {
        List<string[]> rows = new List<string[]>();
        foreach (DataRow row in dt.Rows) {
            string[] dataRow = new string[dt.Columns.Count];
            for (int i = 0; i < dt.Columns.Count; i++) {
                dataRow[i] = row[i].ToString();
            }
            rows.Add(dataRow);
        }
        var js = new JavaScriptSerializer ();
        return js.Serialize (new {rows = rows});
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
441
6
Gpt3D_Clone441_6.cs 1 11
Gpt3D_Clone441_6.cs 12 25
----------------------------------------

public static String dt2JSON (DataTable dt) {
    var rows = new List < Object > ();
    foreach (DataRow row in dt.Rows) {
        var rowData = new Dictionary < string, object > ();
        foreach (DataColumn col in dt.Columns)
            rowData [col.ColumnName] = row [col];
        rows.Add (rowData);
    }
    var js = new JavaScriptSerializer ();
    return js.Serialize (new {rows = rows});
}
----------------------------------------

  public static String dt2JSON (DataTable dt) {
        var rows = new List<Object>();
        foreach (DataRow row in dt.Rows) { 
            var rowData = new Dictionary<string, object>();
            foreach (DataColumn col in dt.Columns) 
                rowData.Add(col.ColumnName, row[col]);
            rows.Add(rowData);
        }
    
        var json = JObject.FromObject(new {rows = rows}).ToString();
        return json;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
441
7
Gpt3D_Clone441_7.cs 1 11
Gpt3D_Clone441_7.cs 12 24
----------------------------------------

public static String dt2JSON (DataTable dt) {
    var rows = new List < Object > ();
    foreach (DataRow row in dt.Rows) {
        var rowData = new Dictionary < string, object > ();
        foreach (DataColumn col in dt.Columns)
            rowData [col.ColumnName] = row [col];
        rows.Add (rowData);
    }
    var js = new JavaScriptSerializer ();
    return js.Serialize (new {rows = rows});
}
----------------------------------------

  public static String dt2JSON (DataTable dt){
        var rows = new List<IEnumerable>();
        foreach (DataRow row in dt.Rows)
        {
            var rowData = new List<object>();
            foreach (DataColumn col in dt.Columns)
                rowData.Add(row[col]);
            rows.Add(rowData);
        }
        return JsonConvert.SerializeObject(rows);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
443
1
Gpt3D_Clone443_1.cs 1 10
Gpt3D_Clone443_1.cs 11 25
----------------------------------------

private static void Main (string [] args) {
    Thread t = new Thread (ReaderFunc);
    t.Start ();
    int index = 0;
    while (! StopWriting.WaitOne (Timeout.Infinite)) {
        ++ index;
        Console.WriteLine (index.ToString ());
    }
    t.Join ();
}
----------------------------------------

 private static void Main (string [] args) {
    // Using Interrup()
    ReaderFunc x = new ReaderFunc ();
    Thread t = new Thread (ReaderFunc);
    t.Start (x);
    int index = 0;
    while (t.IsAlive) {
        ++ index;
        Console.WriteLine (index.ToString ());
        t.Interrupt ();
    }
    t.Join ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
444
2
Gpt3D_Clone444_2.cs 1 11
Gpt3D_Clone444_2.cs 12 33
----------------------------------------

static void Main () {
    Bitmap mask = new Bitmap (@"mask.bmp");
    Bitmap bmp = new Bitmap (@"test.jpg");
    int width = bmp.Width;
    int height = bmp.Height;
    for (int x = 0; x < width; x ++)
        for (int y = 0; y < height; y ++)
            if (mask.GetPixel (x, y).R < 250)
                bmp.SetPixel (x, y, mask.GetPixel (x, y));
    bmp.Save (@"test3.jpg");
}
----------------------------------------

 static void Main(){
    Bitmap mask = new Bitmap(@"mask.bmp");
    Bitmap bmp = new Bitmap(@"test.jpg");
    int width = bmp.Width;
    int height = bmp.Height;
    for (int x = 0; x < width; x++)
    {
        for (int y = 0; y < height; y++)
        {
            Color currentPixel = mask.GetPixel(x, y);
            if (currentPixel.R < 250)
            {
                byte red = (byte)(mask.GetPixel(x, y).R % 250);
                bmp.SetPixel(x, y, Color.FromArgb(red, currentPixel));
            }
        }
    }
    bmp.Save(@"test3.jpg");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
444
5
Gpt3D_Clone444_5.cs 1 11
Gpt3D_Clone444_5.cs 12 29
----------------------------------------

static void Main () {
    Bitmap mask = new Bitmap (@"mask.bmp");
    Bitmap bmp = new Bitmap (@"test.jpg");
    int width = bmp.Width;
    int height = bmp.Height;
    for (int x = 0; x < width; x ++)
        for (int y = 0; y < height; y ++)
            if (mask.GetPixel (x, y).R < 250)
                bmp.SetPixel (x, y, mask.GetPixel (x, y));
    bmp.Save (@"test3.jpg");
}
----------------------------------------

 static void Main(){
    Bitmap mask = new Bitmap(@"mask.bmp");
    Bitmap bmp = new Bitmap(@"test.jpg");
    int width = bmp.Width;
    int height = bmp.Height;
    for (int x = 0; x < width; x++){
        for (int y = 0; y < height; y++){
            Color currentPixel = mask.GetPixel(x,y);
            if (currentPixel.R < 250){
                bmp.SetPixel(x,y, Color.FromArgb(currentPixel.A, currentPixel.R, currentPixel.G, currentPixel.B));
            }
        }
    }
    bmp.Save(@"test3.jpg");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
444
6
Gpt3D_Clone444_6.cs 1 11
Gpt3D_Clone444_6.cs 12 32
----------------------------------------

static void Main () {
    Bitmap mask = new Bitmap (@"mask.bmp");
    Bitmap bmp = new Bitmap (@"test.jpg");
    int width = bmp.Width;
    int height = bmp.Height;
    for (int x = 0; x < width; x ++)
        for (int y = 0; y < height; y ++)
            if (mask.GetPixel (x, y).R < 250)
                bmp.SetPixel (x, y, mask.GetPixel (x, y));
    bmp.Save (@"test3.jpg");
}
----------------------------------------

 static void Main(){
    Bitmap mask = new Bitmap(@"mask.bmp");
    Bitmap bmp = new Bitmap(@"test.jpg");
    int width = bmp.Width;
    int height = bmp.Height;
    for (int x = 0; x < width; x++)
    {
        for (int y = 0; y < height; y++)
        {
            Color currentPixel = mask.GetPixel(x, y);
            if (currentPixel.R < 250)
            {
                bmp.SetPixel(x, y, Color.FromArgb(currentPixel.A, currentPixel.R, currentPixel.G, currentPixel.B));
            }
        }
    }
    bmp.Save(@"test3.jpg");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
444
7
Gpt3D_Clone444_7.cs 1 11
Gpt3D_Clone444_7.cs 12 30
----------------------------------------

static void Main () {
    Bitmap mask = new Bitmap (@"mask.bmp");
    Bitmap bmp = new Bitmap (@"test.jpg");
    int width = bmp.Width;
    int height = bmp.Height;
    for (int x = 0; x < width; x ++)
        for (int y = 0; y < height; y ++)
            if (mask.GetPixel (x, y).R < 250)
                bmp.SetPixel (x, y, mask.GetPixel (x, y));
    bmp.Save (@"test3.jpg");
}
----------------------------------------

 static void Main(){
    Bitmap mask = new Bitmap(@"mask.bmp");
    Bitmap bmp = new Bitmap(@"test.jpg");
    int width = bmp.Width;
    int height = bmp.Height;
    for (int x = 0; x < width; x++){
        for (int y = 0; y < height; y++){
            Color currentPixel = mask.GetPixel(x, y);
            if (currentPixel.R < 250)
            {
                bmp.SetPixel(x, y, Color.FromArgb(currentPixel.A, currentPixel.R, currentPixel.G, currentPixel.B));
            }
        }
    }
    bmp.Save(@"test3.jpg");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
444
8
Gpt3D_Clone444_8.cs 1 11
Gpt3D_Clone444_8.cs 12 29
----------------------------------------

static void Main () {
    Bitmap mask = new Bitmap (@"mask.bmp");
    Bitmap bmp = new Bitmap (@"test.jpg");
    int width = bmp.Width;
    int height = bmp.Height;
    for (int x = 0; x < width; x ++)
        for (int y = 0; y < height; y ++)
            if (mask.GetPixel (x, y).R < 250)
                bmp.SetPixel (x, y, mask.GetPixel (x, y));
    bmp.Save (@"test3.jpg");
}
----------------------------------------

 static void Main(){
    Bitmap mask = new Bitmap(@"mask.bmp");
    Bitmap bmp = new Bitmap(@"test.jpg");
    int width = bmp.Width;
    int height = bmp.Height;
    for (int x = 0; x < width; x++){
        for (int y = 0; y < height; y++){
            int pixelValue = mask.GetPixel(x, y).R;
            if (pixelValue < 250){
                bmp.SetPixel(x, y, mask.GetPixel(x, y));
            }
        }
    }
    bmp.Save(@"test3.jpg");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
444
9
Gpt3D_Clone444_9.cs 1 11
Gpt3D_Clone444_9.cs 12 32
----------------------------------------

static void Main () {
    Bitmap mask = new Bitmap (@"mask.bmp");
    Bitmap bmp = new Bitmap (@"test.jpg");
    int width = bmp.Width;
    int height = bmp.Height;
    for (int x = 0; x < width; x ++)
        for (int y = 0; y < height; y ++)
            if (mask.GetPixel (x, y).R < 250)
                bmp.SetPixel (x, y, mask.GetPixel (x, y));
    bmp.Save (@"test3.jpg");
}
----------------------------------------

 static void Main(){
    Bitmap mask = new Bitmap(@"mask.bmp");
    Bitmap bmp = new Bitmap(@"test.jpg");
    int width = bmp.Width;
    int height = bmp.Height;
    for (int x = 0; x < width; x++)
    {
        for (int y = 0; y < height; y++)
        {
            Color currentPixel = mask.GetPixel(x,y);
            if (currentPixel.R < 250)
            {
                bmp.SetPixel(x,y,currentPixel);
            }
        }
    }
    bmp.Save(@"test3.jpg");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
445
0
Gpt3D_Clone445_0.cs 1 14
Gpt3D_Clone445_0.cs 15 28
----------------------------------------

private void Dispose (bool disposing) {
    if (! disposedValue) {
        if (disposing) {
        }
        if (m_freeStack != null) {
            SharpDX.Direct3D11.Texture2D texture;
            while (m_freeStack.TryPop (out texture)) {
                texture.Dispose ();
            }
            m_freeStack = null;
        }
        disposedValue = true;
    }
}
----------------------------------------

 private void Dispose (bool disposing) {
    if (! disposedValue && disposing) {
        if (m_freeStack != null) {
            SharpDX.Direct3D11.Texture2D texture;
            while (m_freeStack.TryPop(out texture)) {
                texture.Dispose ();
            }
            m_freeStack?.Dispose();
        }
        disposedValue = true;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
445
1
Gpt3D_Clone445_1.cs 1 14
Gpt3D_Clone445_1.cs 15 28
----------------------------------------

private void Dispose (bool disposing) {
    if (! disposedValue) {
        if (disposing) {
        }
        if (m_freeStack != null) {
            SharpDX.Direct3D11.Texture2D texture;
            while (m_freeStack.TryPop (out texture)) {
                texture.Dispose ();
            }
            m_freeStack = null;
        }
        disposedValue = true;
    }
}
----------------------------------------

 private void Dispose (bool disposing) {
    if (! disposedValue && disposing) {
        if (m_freeStack != null) {
            SharpDX.Direct3D11.Texture2D texture;
            while (m_freeStack.TryPopOut(out texture)) {
                texture?.Dispose ();
            }
            m_freeStack.TryDispose();
        }
        disposedValue = true;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
445
2
Gpt3D_Clone445_2.cs 1 14
Gpt3D_Clone445_2.cs 15 28
----------------------------------------

private void Dispose (bool disposing) {
    if (! disposedValue) {
        if (disposing) {
        }
        if (m_freeStack != null) {
            SharpDX.Direct3D11.Texture2D texture;
            while (m_freeStack.TryPop (out texture)) {
                texture.Dispose ();
            }
            m_freeStack = null;
        }
        disposedValue = true;
    }
}
----------------------------------------

 private void Dispose (bool disposing) {
    if (! disposedValue && disposing) {
        if (m_freeStack != null) {
            SharpDX.Direct3D11.Texture2D texture;
            while (m_freeStack.TryPop (ref texture)) {
                texture?.Dispose ();
            }
            m_freeStack = null;
        }
        disposedValue = true;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
445
3
Gpt3D_Clone445_3.cs 1 14
Gpt3D_Clone445_3.cs 15 28
----------------------------------------

private void Dispose (bool disposing) {
    if (! disposedValue) {
        if (disposing) {
        }
        if (m_freeStack != null) {
            SharpDX.Direct3D11.Texture2D texture;
            while (m_freeStack.TryPop (out texture)) {
                texture.Dispose ();
            }
            m_freeStack = null;
        }
        disposedValue = true;
    }
}
----------------------------------------

 private void Dispose (bool disposing) {
    if (! disposedValue && disposing) {
        if (m_freeStack != null) {
            SharpDX.Direct3D11.Texture2D texture;
            while (m_freeStack.TryPop (out texture)) {
                texture?.Dispose ();
            }
            m_freeStack.Clear();
        }
        disposedValue = true;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
445
4
Gpt3D_Clone445_4.cs 1 14
Gpt3D_Clone445_4.cs 15 28
----------------------------------------

private void Dispose (bool disposing) {
    if (! disposedValue) {
        if (disposing) {
        }
        if (m_freeStack != null) {
            SharpDX.Direct3D11.Texture2D texture;
            while (m_freeStack.TryPop (out texture)) {
                texture.Dispose ();
            }
            m_freeStack = null;
        }
        disposedValue = true;
    }
}
----------------------------------------

 private void Dispose (bool disposing) {
    if (! disposedValue && disposing) {
        if (m_freeStack != null) {
            SharpDX.Direct3D11.Texture2D texture;
            while (m_freeStack.TryPop (out texture)) {
                texture?.Dispose ();
            }
            m_freeStack.TryDispose();
        }
        disposedValue = true;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
452
0
Gpt3D_Clone452_0.cs 1 9
Gpt3D_Clone452_0.cs 10 20
----------------------------------------

public static void Main (string [] args) {
    var KP = Console.ReadKey ();
    if (KP.Key == ConsoleKey.F2) {
        return;
    }
    string UserName = KP.KeyChar + Console.ReadLine ();
    Console.WriteLine (UserName);
    Console.ReadLine ();
}
----------------------------------------

 public static void Main (string [] args) {
    char ch = Console.ReadLine ()[0];
    if (ch == 'F2') {
        return;
    }
    string UserName = ch + Console.ReadLine ();
    Console.WriteLine (UserName);
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
452
2
Gpt3D_Clone452_2.cs 1 9
Gpt3D_Clone452_2.cs 10 20
----------------------------------------

public static void Main (string [] args) {
    var KP = Console.ReadKey ();
    if (KP.Key == ConsoleKey.F2) {
        return;
    }
    string UserName = KP.KeyChar + Console.ReadLine ();
    Console.WriteLine (UserName);
    Console.ReadLine ();
}
----------------------------------------

 public static void Main (string [] args) {
    ConsoleKeyInfo KP = Console.ReadKey ();
    if (KP.Key != ConsoleKey.F2) {
        Console.WriteLine ("Please enter your name: ");
        string UserName = KP.KeyChar.ToString () + Console.ReadLine ();
        Console.WriteLine (UserName);
    }
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
452
3
Gpt3D_Clone452_3.cs 1 9
Gpt3D_Clone452_3.cs 10 19
----------------------------------------

public static void Main (string [] args) {
    var KP = Console.ReadKey ();
    if (KP.Key == ConsoleKey.F2) {
        return;
    }
    string UserName = KP.KeyChar + Console.ReadLine ();
    Console.WriteLine (UserName);
    Console.ReadLine ();
}
----------------------------------------

 public static void Main (string [] args) {
    var KP = Console.ReadKey ();
    if (KP.Key != ConsoleKey.F2) {
        string UserName = KP.KeyChar + Console.ReadLine ();
        Console.WriteLine (UserName);
    }
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
452
5
Gpt3D_Clone452_5.cs 1 9
Gpt3D_Clone452_5.cs 10 19
----------------------------------------

public static void Main (string [] args) {
    var KP = Console.ReadKey ();
    if (KP.Key == ConsoleKey.F2) {
        return;
    }
    string UserName = KP.KeyChar + Console.ReadLine ();
    Console.WriteLine (UserName);
    Console.ReadLine ();
}
----------------------------------------

 public static void Main (string [] args) {
    var KP = Console.ReadKey ();
    if (KP.Key != ConsoleKey.F2) {
        string UserName = KP.KeyChar + Console.ReadLine ();
        Console.WriteLine (String.Format("Your name is {0}",UserName));
    }
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
452
6
Gpt3D_Clone452_6.cs 1 9
Gpt3D_Clone452_6.cs 10 19
----------------------------------------

public static void Main (string [] args) {
    var KP = Console.ReadKey ();
    if (KP.Key == ConsoleKey.F2) {
        return;
    }
    string UserName = KP.KeyChar + Console.ReadLine ();
    Console.WriteLine (UserName);
    Console.ReadLine ();
}
----------------------------------------

 public static void Main (string [] args) {
    var KP = Console.ReadKey ();
    if (KP.KeyChar != 'F') {
        string UserName = KP.KeyChar + Console.ReadLine ();
        Console.WriteLine (UserName);
    }
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
452
7
Gpt3D_Clone452_7.cs 1 9
Gpt3D_Clone452_7.cs 10 19
----------------------------------------

public static void Main (string [] args) {
    var KP = Console.ReadKey ();
    if (KP.Key == ConsoleKey.F2) {
        return;
    }
    string UserName = KP.KeyChar + Console.ReadLine ();
    Console.WriteLine (UserName);
    Console.ReadLine ();
}
----------------------------------------

 public static void Main (string [] args) {
    ConsoleKeyInfo KP = Console.ReadKey ();
    if (KP.Key != ConsoleKey.F2) {
        string UserName = KP.KeyChar.ToString () + Console.ReadLine ();
        Console.WriteLine (UserName);
    }
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
455
0
Gpt3D_Clone455_0.cs 1 11
Gpt3D_Clone455_0.cs 12 32
----------------------------------------

private void trvAvailableFiles_AfterCheck (object sender, TreeViewEventArgs e) {
    if (! _isCheckingInProgress) {
        _isCheckingInProgress = true;
        try {
            GetAvailableFiles ();
        }
        catch {
        }
        _isCheckingInProgress = false;
    }
}
----------------------------------------

 private void trvAvailableFiles_AfterCheck (object sender, TreeViewEventArgs e) {
     bool checkLocked = false;
     lock (checkLock)
     {
         if (!_isCheckingInProgress)
         {
             checkLocked = true;
             _isCheckingInProgress = true;
         }
     }
     if (checkLocked)
     {
         try {
             GetAvailableFiles ();
         }catch {   
         }
         _isCheckingInProgress = false;
     }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
455
2
Gpt3D_Clone455_2.cs 1 11
Gpt3D_Clone455_2.cs 12 30
----------------------------------------

private void trvAvailableFiles_AfterCheck (object sender, TreeViewEventArgs e) {
    if (! _isCheckingInProgress) {
        _isCheckingInProgress = true;
        try {
            GetAvailableFiles ();
        }
        catch {
        }
        _isCheckingInProgress = false;
    }
}
----------------------------------------

 private void trvAvailableFiles_AfterCheck (object sender, TreeViewEventArgs e) {
    lock(_lock)
    {
        if(!_isCheckingInProgress) 
        {
            _isCheckingInProgress = true;
            try
            {
                GetAvailableFiles ();
            }
            catch {
            }
            _isCheckingInProgress = false;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
455
4
Gpt3D_Clone455_4.cs 1 11
Gpt3D_Clone455_4.cs 12 23
----------------------------------------

private void trvAvailableFiles_AfterCheck (object sender, TreeViewEventArgs e) {
    if (! _isCheckingInProgress) {
        _isCheckingInProgress = true;
        try {
            GetAvailableFiles ();
        }
        catch {
        }
        _isCheckingInProgress = false;
    }
}
----------------------------------------

 private void trvAvailableFiles_AfterCheck (object sender, TreeViewEventArgs e) {
    if (! _isCheckingInProgress) {
        try {
            _isCheckingInProgress = true;
            GetAvailableFiles ();
        } finally {
            _isCheckingInProgress = false;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
455
5
Gpt3D_Clone455_5.cs 1 11
Gpt3D_Clone455_5.cs 12 23
----------------------------------------

private void trvAvailableFiles_AfterCheck (object sender, TreeViewEventArgs e) {
    if (! _isCheckingInProgress) {
        _isCheckingInProgress = true;
        try {
            GetAvailableFiles ();
        }
        catch {
        }
        _isCheckingInProgress = false;
    }
}
----------------------------------------

 private void trvAvailableFiles_AfterCheck (object sender, TreeViewEventArgs e) {
    if (! _isCheckingInProgress) {
        try {
            _isCheckingInProgress = true;
            GetAvailableFiles ();
        } catch (Exception ex) {
            _isCheckingInProgress = false;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
455
6
Gpt3D_Clone455_6.cs 1 11
Gpt3D_Clone455_6.cs 12 20
----------------------------------------

private void trvAvailableFiles_AfterCheck (object sender, TreeViewEventArgs e) {
    if (! _isCheckingInProgress) {
        _isCheckingInProgress = true;
        try {
            GetAvailableFiles ();
        }
        catch {
        }
        _isCheckingInProgress = false;
    }
}
----------------------------------------

  private void trvAvailableFiles_AfterCheck (object sender, TreeViewEventArgs e) {
    if (! _isCheckingInProgress) {
        _isCheckingInProgress = true;
        GetAvailableFiles ();
        _isCheckingInProgress = false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
458
0
Gpt3D_Clone458_0.cs 1 24
Gpt3D_Clone458_0.cs 25 63
----------------------------------------

private TreeNode findValueStartingAtNode (TreeNode node, IComparable value) {
    Console.WriteLine ("looking for value {0}", value);
    if (node == null) {
        Console.WriteLine ("node is null -- returning null");
        return null;
    } else if (value.CompareTo (node.data) == 0) {
        Console.WriteLine ("value found at current node");
        Console.WriteLine ("current node data is {0}", node.data);
        Console.WriteLine ("done and returning node");
        return node;
    } else {
        Console.WriteLine ("checking left child");
        TreeNode left = findValueStartingAtNode (node.left_child, value);
        if (left != null)
            return left;
        Console.WriteLine ("checking right child");
        TreeNode right = findValueStartingAtNode (node.right_child, value);
        if (right != null)
            return right;
        Console.WriteLine ("value not found in either child");
        Console.WriteLine ("current node data is {0}", node.data);
        return null;
    }
}
----------------------------------------

  private TreeNode findValueStartingAtNode (TreeNode node, IComparable value) {
    Console.WriteLine ("looking for value {0}", value);
    if (node == null) {
        Console.WriteLine ("node is null -- returning null");
        return null;
    }
    if (value.CompareTo (node.data) == 0) {
        Console.WriteLine ("value found at current node");
        Console.WriteLine ("current node data is {0}", node.data);
        Console.WriteLine ("done and returning node");
        return node;
    } 
    
    else if (valule.CompareTo(node.data) == -1) {
    Console.WriteLine ("checking left child");
    TreeNode left = findValueStartingAtNode (node.left_child, value);
    
    if (left != null) {
        Console.WriteLine ("value found in left child");
        return left;
        }
    }
    
    else {
    Console.WriteLine ("checking right child");
    TreeNode right = findValueStartingAtNode (node.right_child, value);
    if (right != null) {
        Console.WriteLine ("value found in right child");
        return right;
    }
    
    }
    Console.WriteLine ("value not found in either child");
    Console.WriteLine ("current node data is {0}", node.data);
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
458
1
Gpt3D_Clone458_1.cs 1 24
Gpt3D_Clone458_1.cs 25 49
----------------------------------------

private TreeNode findValueStartingAtNode (TreeNode node, IComparable value) {
    Console.WriteLine ("looking for value {0}", value);
    if (node == null) {
        Console.WriteLine ("node is null -- returning null");
        return null;
    } else if (value.CompareTo (node.data) == 0) {
        Console.WriteLine ("value found at current node");
        Console.WriteLine ("current node data is {0}", node.data);
        Console.WriteLine ("done and returning node");
        return node;
    } else {
        Console.WriteLine ("checking left child");
        TreeNode left = findValueStartingAtNode (node.left_child, value);
        if (left != null)
            return left;
        Console.WriteLine ("checking right child");
        TreeNode right = findValueStartingAtNode (node.right_child, value);
        if (right != null)
            return right;
        Console.WriteLine ("value not found in either child");
        Console.WriteLine ("current node data is {0}", node.data);
        return null;
    }
}
----------------------------------------

  private TreeNode findValueStartingAtNode (TreeNode node, IComparable value) {
    Console.WriteLine ("looking for value {0}", value);
    if (node == null) {
        Console.WriteLine ("node is null -- returning null");
        return null;
    }
    if (value.CompareTo (node.data) == 0) {
        Console.WriteLine ("value found at current node");
        Console.WriteLine ("current node data is {0}", node.data);
        Console.WriteLine ("done and returning node");
        return node;
    } 
    
    TreeNode left = findValueStartingAtNode (node.left_child, value);
    TreeNode right = findValueStartingAtNode (node.right_child, value);
    
    if (left != null || right != null)
        return (left == null)? right : left;
    Console.WriteLine ("value not found in either child");
    Console.WriteLine ("current node data is {0}", node.data);
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
459
1
Gpt3D_Clone459_1.cs 1 10
Gpt3D_Clone459_1.cs 11 19
----------------------------------------

public override bool IsValid (DateTime value) {
    DateTime today = DateTime.Today;
    int age = today.Year - value.Year;
    if (value > today.AddYears (- age))
        age --;
    if (age < 18) {
        return false;
    }
    return true;
}
----------------------------------------

  public override bool IsValid (DateTime value) {
    DateTime today = DateTime.Today;
    int age = today.Year - value.Year;
    if (value > today.AddYears(-age))
        age--;
    return (age < 18) ? false : true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
459
2
Gpt3D_Clone459_2.cs 1 10
Gpt3D_Clone459_2.cs 11 19
----------------------------------------

public override bool IsValid (DateTime value) {
    DateTime today = DateTime.Today;
    int age = today.Year - value.Year;
    if (value > today.AddYears (- age))
        age --;
    if (age < 18) {
        return false;
    }
    return true;
}
----------------------------------------

  public override bool IsValid (DateTime value) {
    DateTime today = DateTime.Today;
    int age = today.Year - value.Year;
    if (value > today.AddYears(-age)) 
        age--;
    return age < 18 ? false : true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
459
3
Gpt3D_Clone459_3.cs 1 10
Gpt3D_Clone459_3.cs 11 19
----------------------------------------

public override bool IsValid (DateTime value) {
    DateTime today = DateTime.Today;
    int age = today.Year - value.Year;
    if (value > today.AddYears (- age))
        age --;
    if (age < 18) {
        return false;
    }
    return true;
}
----------------------------------------

 public override bool IsValid (DateTime value) {
    DateTime today = DateTime.Today;
    int age = today.Year - value.Year;
    if (value > today.AddYears(-age)) 
        age--;
    return age >= 18 ? true : false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
459
4
Gpt3D_Clone459_4.cs 1 10
Gpt3D_Clone459_4.cs 11 19
----------------------------------------

public override bool IsValid (DateTime value) {
    DateTime today = DateTime.Today;
    int age = today.Year - value.Year;
    if (value > today.AddYears (- age))
        age --;
    if (age < 18) {
        return false;
    }
    return true;
}
----------------------------------------

 public override bool IsValid (DateTime value) {
    DateTime today = DateTime.Today;
    int age = today.Year - value.Year;
    if (value > today.AddYears(-age))
        age--;
    return age >= 18;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
459
5
Gpt3D_Clone459_5.cs 1 10
Gpt3D_Clone459_5.cs 11 19
----------------------------------------

public override bool IsValid (DateTime value) {
    DateTime today = DateTime.Today;
    int age = today.Year - value.Year;
    if (value > today.AddYears (- age))
        age --;
    if (age < 18) {
        return false;
    }
    return true;
}
----------------------------------------

 public override bool IsValid (DateTime value) {
    DateTime today = DateTime.Today; 
    int age = today.Year - value.Year;
    if (value > today.AddYears(-age))
        age--;
    return age < 18 ? false : true; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
459
6
Gpt3D_Clone459_6.cs 1 10
Gpt3D_Clone459_6.cs 11 19
----------------------------------------

public override bool IsValid (DateTime value) {
    DateTime today = DateTime.Today;
    int age = today.Year - value.Year;
    if (value > today.AddYears (- age))
        age --;
    if (age < 18) {
        return false;
    }
    return true;
}
----------------------------------------

 public override bool IsValid (DateTime value) {
    DateTime today = DateTime.Today;
    int age = today.Year - value.Year;
    if (value > today.AddYears(-age)) 
        age--;
    return ! (age < 18);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
460
0
Gpt3D_Clone460_0.cs 1 14
Gpt3D_Clone460_0.cs 15 34
----------------------------------------

public static void Main (string [] args) {
    int result = 1;
    int numToCheck = 141234;
    boolean found = false;
    for (int i = 0; i < 15; i ++) {
        if (numToCheck == result) {
            found = true;
            break;
        }
        result *= 2;
    }
    if (found)
        Console.WriteLine ("Awesome");
}
----------------------------------------

  public static void Main (string [] args) {
    int result = 1;
    int numToCheck = 141234;
    boolean found = false;
    int i = 0;
    while(i < 15){
        if (numToCheck == result) {
            found = true;
            break;
        }
        result = result*2;
        if (result > Math.Pow(2,15))
            break;
        i++;
    }
    if (found)
        Console.WriteLine ("Awesome");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
460
1
Gpt3D_Clone460_1.cs 1 14
Gpt3D_Clone460_1.cs 15 32
----------------------------------------

public static void Main (string [] args) {
    int result = 1;
    int numToCheck = 141234;
    boolean found = false;
    for (int i = 0; i < 15; i ++) {
        if (numToCheck == result) {
            found = true;
            break;
        }
        result *= 2;
    }
    if (found)
        Console.WriteLine ("Awesome");
}
----------------------------------------

  public static void Main (string [] args) {
    int result = 1;
    int numToCheck = 141234;
    boolean found = false;
    int i = 0;
    do{
        if (numToCheck == result) {
            found = true;
            break;
        }
        result *= 2;
        i++;
    } while (i < 15 && found == false);
    if (found)
        Console.WriteLine ("Awesome");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
460
2
Gpt3D_Clone460_2.cs 1 14
Gpt3D_Clone460_2.cs 15 30
----------------------------------------

public static void Main (string [] args) {
    int result = 1;
    int numToCheck = 141234;
    boolean found = false;
    for (int i = 0; i < 15; i ++) {
        if (numToCheck == result) {
            found = true;
            break;
        }
        result *= 2;
    }
    if (found)
        Console.WriteLine ("Awesome");
}
----------------------------------------

  public static void Main (string [] args) {
    int result = 1;
    int numToCheck = 141234;
    boolean found = false;
    do {
        if (numToCheck == result) {
            found = true;
        }
        result *= 2;
    } while (found == false && result < Math.Pow(2,15));
    if (found)
        Console.WriteLine ("Awesome");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
461
2
Gpt3D_Clone461_2.cs 1 11
Gpt3D_Clone461_2.cs 12 52
----------------------------------------

public static string CreateZip (string stDirToZip) {
    try {
        DirectoryInfo di = new DirectoryInfo (stDirToZip);
        string stZipPath = di.Parent.FullName + "\\" + di.Name + ".zip";
        CreateZip (stZipPath, stDirToZip);
        return stZipPath;
    }
    catch (Exception) {
        throw;
    }
}
----------------------------------------

 public static string CreateZip (string stDirToZip) {
                    try {
                        DirectoryInfo di = new DirectoryInfo (stDirToZip);
                        string stZipPath = Path.Combine(di.Parent.FullName, di.Name + ".zip");
                        using (FileStream fileStream = new FileStream(stZipPath, FileMode.Create)){
                            using (ZipOutputStream zipOutputStream = new ZipOutputStream(fileStream)){
                                CompressRecursive(di, zipOutputStream);
                            }
                        }
                        return stZipPath;
                    }
                    catch (Exception) {
                        throw;
                    }
                }
                private static void CompressRecursive(DirectoryInfo di, ZipOutputStream zipOutputStream)
                {
                    foreach (FileInfo fi in di.GetFiles())
                    {
                        ZipEntry entry = new ZipEntry(fi.FullName);
                        entry.DateTime = fi.LastWriteTime;
                        entry.Size = fi.Length;
                        zipOutputStream.PutNextEntry(entry);
                        byte[] buffer = new byte[4096];
                        using (FileStream streamReader = fi.OpenRead())
                        {
                            StreamUtils.Copy(streamReader, zipOutputStream, buffer);
                        }
                        //wipe buffer
                        for (int i=0; i<buffer.Length; i++)
                            buffer[i] = 0;
                        zipOutputStream.CloseEntry();
                    }
                    foreach (DirectoryInfo ChildFolder in di.GetDirectories())
                    {
                        CompressRecursive(ChildFolder, zipOutputStream);
                    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
461
5
Gpt3D_Clone461_5.cs 1 11
Gpt3D_Clone461_5.cs 12 38
----------------------------------------

public static string CreateZip (string stDirToZip) {
    try {
        DirectoryInfo di = new DirectoryInfo (stDirToZip);
        string stZipPath = di.Parent.FullName + "\\" + di.Name + ".zip";
        CreateZip (stZipPath, stDirToZip);
        return stZipPath;
    }
    catch (Exception) {
        throw;
    }
}
----------------------------------------

 public static string CreateZip (string stDirToZip) {
                        try {
                            string stZipPath = stDirToZip + ".zip";
                            using (ZipArchive zipArchive = ZipFile.Open(stZipPath, ZipArchiveMode.Create)) {
                                CompressFolderContent(stDirToZip, zipArchive); // Call to a new method.
                            }
                            return stZipPath;
                        }
                        catch (Exception) {
                            throw;
                        }
                    }
                    public static void CompressFolderContent(string sDir, ZipArchive zipArchive) 
                    {
                        foreach (string file in Directory.GetFiles(sDir))
                        {
                            zipArchive.CreateEntryFromFile(file, Path.GetFileName(file), CompressionLevel.Fastest);
                        }
                    
                        foreach (string directory in Directory.GetDirectories(sDir))
                        {
                            CompressFolderContent(directory, zipArchive);
                        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
461
6
Gpt3D_Clone461_6.cs 1 11
Gpt3D_Clone461_6.cs 12 25
----------------------------------------

public static string CreateZip (string stDirToZip) {
    try {
        DirectoryInfo di = new DirectoryInfo (stDirToZip);
        string stZipPath = di.Parent.FullName + "\\" + di.Name + ".zip";
        CreateZip (stZipPath, stDirToZip);
        return stZipPath;
    }
    catch (Exception) {
        throw;
    }
}
----------------------------------------

 public static string CreateZip (string stDirToZip) {
    try {
        string stZipPath = Path.Combine(Path.GetDirectoryName(stDirToZip), Path.GetFileName(stDirToZip)) + ".zip";
        using(ZipArchive zipArchive = ZipFile.Open(stZipPath, ZipArchiveMode.Create)) {
            ZipFile.CreateFromDirectory(stDirToZip, stZipPath);
        }
        return stZipPath;
    }
    catch (Exception) {
        throw;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
461
7
Gpt3D_Clone461_7.cs 1 11
Gpt3D_Clone461_7.cs 12 24
----------------------------------------

public static string CreateZip (string stDirToZip) {
    try {
        DirectoryInfo di = new DirectoryInfo (stDirToZip);
        string stZipPath = di.Parent.FullName + "\\" + di.Name + ".zip";
        CreateZip (stZipPath, stDirToZip);
        return stZipPath;
    }
    catch (Exception) {
        throw;
    }
}
----------------------------------------

  public static string CreateZip (string srcDir) {
    try {
        string destDir = srcDir + ".zip";
        DirectoryInfo di = new DirectoryInfo(srcDir);
        ZipFile.CreateFromDirectory(di.FullName, destDir);
        return destDir;
    }
    catch (Exception) {
        throw;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
461
9
Gpt3D_Clone461_9.cs 1 11
Gpt3D_Clone461_9.cs 12 34
----------------------------------------

public static string CreateZip (string stDirToZip) {
    try {
        DirectoryInfo di = new DirectoryInfo (stDirToZip);
        string stZipPath = di.Parent.FullName + "\\" + di.Name + ".zip";
        CreateZip (stZipPath, stDirToZip);
        return stZipPath;
    }
    catch (Exception) {
        throw;
    }
}
----------------------------------------

 public static string CreateZip (string stDirToZip) {
                            try {
                                string stZipPath = stDirToZip + ".zip";
                                CompressFolder(stDirToZip, stZipPath);
                                return stZipPath;
                            }
                            catch (Exception) {
                                throw;
                            }
                        }
                        private static void CompressFolder(string sDir, string zipFileName) 
                        {
                        using (ZipArchive zip = ZipFile.Open(zipFileName, ZipArchiveMode.Update))
                        {
                            foreach (string file in Directory.GetFiles(sDir))
                            {
                            zip.CreateEntryFromFile(file, Path.GetFileName(file), CompressionLevel.Fastest);
                            }
                        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
462
0
Gpt3D_Clone462_0.cs 1 14
Gpt3D_Clone462_0.cs 15 91
----------------------------------------

static void CompareRows (DataTable original, DataTable modified) {
    foreach (DataRow row1 in modified.Rows) {
        bool isModified = true;
        var array1 = row1.ItemArray;
        foreach (DataRow row2 in original.Rows) {
            var array2 = row2.ItemArray;
            if (array1.SequenceEqual (array2)) {
                isModified = false;
            }
        }
        if (isModified)
            row1.SetModified ();
    }
}
----------------------------------------

  static void CompareRows (DataTable original, DataTable modified) {
        foreach (DataRow row1 in modified.Rows) {
            bool isModified = true;
            var array1 = row1.ItemArray;
            foreach (DataRow row2 in original.Rows) {
                var array2 = row2.ItemArray;
                if (array1.Intersect(array2).Count() == array1.Length) {
                    isModified = false;
                }
            }
            if (isModified)
                row1.SetModified ();
        }
    }
  static void CompareRows (DataTable original, DataTable modified) {
        foreach (DataRow row1 in modified.Rows) {
            bool isModified = true;
            var array1 = row1.ItemArray;
            foreach (DataRow row2 in original.Rows) {
                var array2 = row2.ItemArray;
                int count = 0;
                for (int i = 0; i < array1.Length; i++) {
                    if(array1[i].Equals(array2[i])) {
                        count++;
                    }
                }
                
                if (array1.Length == count) {
                    isModified = false;
                }
            }
            if (isModified)
                row1.SetModified ();
        }
    }
  static void CompareRows (DataTable original, DataTable modified) {
        foreach (DataRow row1 in modified.Rows) {
            bool isModified = true;
            var array1 = row1.ItemArray;
            foreach (DataRow row2 in original.Rows) {
                var array2 = row2.ItemArray;
                int count = 0;
                for (int i = 0; i < array1.Length; i++) {
                    if(array1[i] == (int)array2[i] || array1[i].Equals(array2[i]) ) {
                        count++;
                    }
                }
                
                if (array1.Length == count) {
                    isModified = false;
                }
            }
            if (isModified)
                row1.SetModified ();
        }
    } 
  static void CompareRows (DataTable original, DataTable modified) {
    foreach (DataRow modifiedRow in modified.Rows) {
        bool isModified = true;
        List<Object> dataDifferences = modifiedRow.ItemArray.ToList();
        foreach (DataRow originalRow in original.Rows) {
            List<Object> dataOriginals = originalRow.ItemArray.ToList();
            dataDifferences    = dataDifferences.Except(dataOriginals).ToList();
            if (dataDifferences.Count == 0) {
                isModified = false;
            }
        }
        if (isModified)
            modifiedRow.SetModified();
    }
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
462
1
Gpt3D_Clone462_1.cs 1 14
Gpt3D_Clone462_1.cs 15 91
----------------------------------------

static void CompareRows (DataTable original, DataTable modified) {
    foreach (DataRow row1 in modified.Rows) {
        bool isModified = true;
        var array1 = row1.ItemArray;
        foreach (DataRow row2 in original.Rows) {
            var array2 = row2.ItemArray;
            if (array1.SequenceEqual (array2)) {
                isModified = false;
            }
        }
        if (isModified)
            row1.SetModified ();
    }
}
----------------------------------------

  static void CompareRows (DataTable original, DataTable modified) {
        foreach (DataRow row1 in modified.Rows) {
            bool isModified = true;
            var array1 = row1.ItemArray;
            foreach (DataRow row2 in original.Rows) {
                var array2 = row2.ItemArray;
                if (array1.Intersect(array2).Count() == array1.Length) {
                    isModified = false;
                }
            }
            if (isModified)
                row1.SetModified ();
        }
    }
  static void CompareRows (DataTable original, DataTable modified) {
        foreach (DataRow row1 in modified.Rows) {
            bool isModified = true;
            var array1 = row1.ItemArray;
            foreach (DataRow row2 in original.Rows) {
                var array2 = row2.ItemArray;
                int count = 0;
                for (int i = 0; i < array1.Length; i++) {
                    if(array1[i].Equals(array2[i])) {
                        count++;
                    }
                }
                
                if (array1.Length == count) {
                    isModified = false;
                }
            }
            if (isModified)
                row1.SetModified ();
        }
    }
  static void CompareRows (DataTable original, DataTable modified) {
        foreach (DataRow row1 in modified.Rows) {
            bool isModified = true;
            var array1 = row1.ItemArray;
            foreach (DataRow row2 in original.Rows) {
                var array2 = row2.ItemArray;
                int count = 0;
                for (int i = 0; i < array1.Length; i++) {
                    if(array1[i] == (int)array2[i] || array1[i].Equals(array2[i]) ) {
                        count++;
                    }
                }
                
                if (array1.Length == count) {
                    isModified = false;
                }
            }
            if (isModified)
                row1.SetModified ();
        }
    } 
  static void CompareRows (DataTable original, DataTable modified) {
    foreach (DataRow modifiedRow in modified.Rows) {
        bool isModified = true;
        List<Object> dataDifferences = modifiedRow.ItemArray.ToList();
        foreach (DataRow originalRow in original.Rows) {
            List<Object> dataOriginals = originalRow.ItemArray.ToList();
            dataDifferences    = dataDifferences.Except(dataOriginals).ToList();
            if (dataDifferences.Count == 0) {
                isModified = false;
            }
        }
        if (isModified)
            modifiedRow.SetModified();
    }
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
462
2
Gpt3D_Clone462_2.cs 1 14
Gpt3D_Clone462_2.cs 15 91
----------------------------------------

static void CompareRows (DataTable original, DataTable modified) {
    foreach (DataRow row1 in modified.Rows) {
        bool isModified = true;
        var array1 = row1.ItemArray;
        foreach (DataRow row2 in original.Rows) {
            var array2 = row2.ItemArray;
            if (array1.SequenceEqual (array2)) {
                isModified = false;
            }
        }
        if (isModified)
            row1.SetModified ();
    }
}
----------------------------------------

  static void CompareRows (DataTable original, DataTable modified) {
        foreach (DataRow row1 in modified.Rows) {
            bool isModified = true;
            var array1 = row1.ItemArray;
            foreach (DataRow row2 in original.Rows) {
                var array2 = row2.ItemArray;
                if (array1.Intersect(array2).Count() == array1.Length) {
                    isModified = false;
                }
            }
            if (isModified)
                row1.SetModified ();
        }
    }
  static void CompareRows (DataTable original, DataTable modified) {
        foreach (DataRow row1 in modified.Rows) {
            bool isModified = true;
            var array1 = row1.ItemArray;
            foreach (DataRow row2 in original.Rows) {
                var array2 = row2.ItemArray;
                int count = 0;
                for (int i = 0; i < array1.Length; i++) {
                    if(array1[i].Equals(array2[i])) {
                        count++;
                    }
                }
                
                if (array1.Length == count) {
                    isModified = false;
                }
            }
            if (isModified)
                row1.SetModified ();
        }
    }
  static void CompareRows (DataTable original, DataTable modified) {
        foreach (DataRow row1 in modified.Rows) {
            bool isModified = true;
            var array1 = row1.ItemArray;
            foreach (DataRow row2 in original.Rows) {
                var array2 = row2.ItemArray;
                int count = 0;
                for (int i = 0; i < array1.Length; i++) {
                    if(array1[i] == (int)array2[i] || array1[i].Equals(array2[i]) ) {
                        count++;
                    }
                }
                
                if (array1.Length == count) {
                    isModified = false;
                }
            }
            if (isModified)
                row1.SetModified ();
        }
    } 
  static void CompareRows (DataTable original, DataTable modified) {
    foreach (DataRow modifiedRow in modified.Rows) {
        bool isModified = true;
        List<Object> dataDifferences = modifiedRow.ItemArray.ToList();
        foreach (DataRow originalRow in original.Rows) {
            List<Object> dataOriginals = originalRow.ItemArray.ToList();
            dataDifferences    = dataDifferences.Except(dataOriginals).ToList();
            if (dataDifferences.Count == 0) {
                isModified = false;
            }
        }
        if (isModified)
            modifiedRow.SetModified();
    }
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
462
3
Gpt3D_Clone462_3.cs 1 14
Gpt3D_Clone462_3.cs 15 41
----------------------------------------

static void CompareRows (DataTable original, DataTable modified) {
    foreach (DataRow row1 in modified.Rows) {
        bool isModified = true;
        var array1 = row1.ItemArray;
        foreach (DataRow row2 in original.Rows) {
            var array2 = row2.ItemArray;
            if (array1.SequenceEqual (array2)) {
                isModified = false;
            }
        }
        if (isModified)
            row1.SetModified ();
    }
}
----------------------------------------

  static void CompareRows (DataTable original, DataTable modified) {
    foreach (DataRow row1 in modified.Rows) {
        bool isModified = true;
        foreach (DataRow row2 in original.Rows) {
            if (DataRow.AreEqual(row1, row2)) {
                isModified = false;
            }
        }
        if (isModified)
            row1.SetModified ();
    }
}  
 static void CompareRows (DataTable original, DataTable modified) {
    foreach (DataRow row1 in modified.Rows) {
        bool isModified = true;
        foreach (DataRow row2 in original.Rows) {
            if (row1.ItemArray.SequenceEqual(row2.ItemArray)) {
                isModified = false;
            }
        }
        if (isModified)
            row1.SetModified ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
462
4
Gpt3D_Clone462_4.cs 1 14
Gpt3D_Clone462_4.cs 15 41
----------------------------------------

static void CompareRows (DataTable original, DataTable modified) {
    foreach (DataRow row1 in modified.Rows) {
        bool isModified = true;
        var array1 = row1.ItemArray;
        foreach (DataRow row2 in original.Rows) {
            var array2 = row2.ItemArray;
            if (array1.SequenceEqual (array2)) {
                isModified = false;
            }
        }
        if (isModified)
            row1.SetModified ();
    }
}
----------------------------------------

  static void CompareRows (DataTable original, DataTable modified) {
    foreach (DataRow row1 in modified.Rows) {
        bool isModified = true;
        foreach (DataRow row2 in original.Rows) {
            if (DataRow.AreEqual(row1, row2)) {
                isModified = false;
            }
        }
        if (isModified)
            row1.SetModified ();
    }
}  
 static void CompareRows (DataTable original, DataTable modified) {
    foreach (DataRow row1 in modified.Rows) {
        bool isModified = true;
        foreach (DataRow row2 in original.Rows) {
            if (row1.ItemArray.SequenceEqual(row2.ItemArray)) {
                isModified = false;
            }
        }
        if (isModified)
            row1.SetModified ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
463
1
Gpt3D_Clone463_1.cs 1 14
Gpt3D_Clone463_1.cs 15 29
----------------------------------------

private void CheckLog () {
    bool found = false;
    while (! found) {
        while ((s = sr.ReadLine ()) != null) {
            if (s.Contains ("test")) {
                _found = true;
                break;
            }
        }
        if (found) {
        } else {
        }
    }
}
----------------------------------------

 private void CheckLog () {
    bool found = false;
    while (!found) {
        s = sr.ReadLine ();
        if (s != null && s.Contains("test")) {
            found = true;
            break;
        }
    }
    if (!found) {
        return;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
465
0
Gpt3D_Clone465_0.cs 1 17
Gpt3D_Clone465_0.cs 18 34
----------------------------------------

static void Main (string [] args) {
    int requiredMonths = 6;
    int weekDays = 7;
    DateTime date = new DateTime (2018, 2, 5);
    DateTime [] result = new DateTime [requiredMonths];
    for (int i = 0; i < requiredMonths; i ++) {
        DateTime firstDayOfNextMonth = date.AddMonths (i).AddDays (- date.Day + 1);
        for (int j = 0; j < weekDays; j ++) {
            if (firstDayOfNextMonth.AddDays (j).DayOfWeek.Equals (DayOfWeek.Monday)) {
                result [i] = firstDayOfNextMonth.AddDays (j);
            }
        }
    }
    foreach (var item in result) {
        Console.WriteLine (item);
    }
}
----------------------------------------

 static void Main (string [] args) {
    int requiredMonths = 6;
    int weekDays = 7;
    DateTime date = new DateTime (2018, 2, 5);
    List<DateTime> result = new List<DateTime>();
    for (int i = 0; i < requiredMonths; i ++) {
        DateTime firstDayOfNextMonth = date.AddMonths (i).AddDays (- date.Day + 1);
        for (int j = 0; j < weekDays; j ++) {
            if (firstDayOfNextMonth.AddDays (j).DayOfWeek.Equals (DayOfWeek.Monday)) {
                result.Add(firstDayOfNextMonth.AddDays (j));
            }
        }
    }
    result.ForEach(Console.WriteLine);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
468
0
Gpt3D_Clone468_0.cs 1 12
Gpt3D_Clone468_0.cs 13 30
----------------------------------------

public static byte [] ConvertBitmapSourceToByteArray (BitmapEncoder encoder, ImageSource imageSource) {
    byte [] bytes = null;
    var bitmapSource = imageSource as BitmapSource;
    if (bitmapSource != null) {
        encoder.Frames.Add (BitmapFrame.Create (bitmapSource));
        using (var stream = new MemoryStream ())
        {
            encoder.Save (stream);
            bytes = stream.ToArray ();
        }}
    return bytes;
}
----------------------------------------

 public static byte [] ConvertBitmapSourceToByteArray (BitmapEncoder encoder, ImageSource imageSource) {
    byte [] bytes = null;
    var bitmapSource = imageSource as BitmapSource;
    if (bitmapSource != null) {
        encoder.Frames.Add (BitmapFrame.Create (bitmapSource));
        using (var ms = new MemoryStream ())
        {
            encoder.Save (ms);
            long len =  ms.Length;
            byte[] bytesBuffer = new Byte[len];
            ms.Read(bytesBuffer, 0, (int)len);
            bytes = new byte[len];
            Array.Copy(bytesBuffer, bytes, len);
        }}
    return bytes;
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
468
1
Gpt3D_Clone468_1.cs 1 12
Gpt3D_Clone468_1.cs 13 30
----------------------------------------

public static byte [] ConvertBitmapSourceToByteArray (BitmapEncoder encoder, ImageSource imageSource) {
    byte [] bytes = null;
    var bitmapSource = imageSource as BitmapSource;
    if (bitmapSource != null) {
        encoder.Frames.Add (BitmapFrame.Create (bitmapSource));
        using (var stream = new MemoryStream ())
        {
            encoder.Save (stream);
            bytes = stream.ToArray ();
        }}
    return bytes;
}
----------------------------------------

 public static byte [] ConvertBitmapSourceToByteArray (BitmapEncoder encoder, ImageSource imageSource) {
    byte [] bytes = null;
    var bitmapSource = imageSource as BitmapSource;
    if (bitmapSource != null) {
        encoder.Frames.Add (BitmapFrame.Create (bitmapSource));
        using (var ms = new MemoryStream ())
        {
            encoder.Save (ms);
            long len =  ms.Length;
            byte[] data = new Byte[len];
            ms.Position = 0;
            ms.Read(data, 0, (int)len);
            bytes = data;
        }}
    return bytes;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
468
2
Gpt3D_Clone468_2.cs 1 12
Gpt3D_Clone468_2.cs 13 29
----------------------------------------

public static byte [] ConvertBitmapSourceToByteArray (BitmapEncoder encoder, ImageSource imageSource) {
    byte [] bytes = null;
    var bitmapSource = imageSource as BitmapSource;
    if (bitmapSource != null) {
        encoder.Frames.Add (BitmapFrame.Create (bitmapSource));
        using (var stream = new MemoryStream ())
        {
            encoder.Save (stream);
            bytes = stream.ToArray ();
        }}
    return bytes;
}
----------------------------------------

 public static byte [] ConvertBitmapSourceToByteArray (BitmapEncoder encoder, ImageSource imageSource) {
    byte [] bytes = null;
    var bitmapSource = imageSource as BitmapSource;
    if (bitmapSource != null) {
        encoder.Frames.Add (BitmapFrame.Create (bitmapSource));
        using (var ms = new MemoryStream ())
        {
            encoder.Save (ms);
            long len =  ms.Length;
            byte[] buffer = new Byte[len];
            ms.Read(buffer, 0, (int)len);
            Array.Copy(buffer, bytes, len);
        }}
    return bytes;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
468
3
Gpt3D_Clone468_3.cs 1 12
Gpt3D_Clone468_3.cs 13 29
----------------------------------------

public static byte [] ConvertBitmapSourceToByteArray (BitmapEncoder encoder, ImageSource imageSource) {
    byte [] bytes = null;
    var bitmapSource = imageSource as BitmapSource;
    if (bitmapSource != null) {
        encoder.Frames.Add (BitmapFrame.Create (bitmapSource));
        using (var stream = new MemoryStream ())
        {
            encoder.Save (stream);
            bytes = stream.ToArray ();
        }}
    return bytes;
}
----------------------------------------

 public static byte [] ConvertBitmapSourceToByteArray (BitmapEncoder encoder, ImageSource imageSource) {
    byte [] bytes = null;
    var bitmapSource = imageSource as BitmapSource;
    if (bitmapSource != null) {
        encoder.Frames.Add (BitmapFrame.Create (bitmapSource));
        using (var ms = new MemoryStream ())
        {
            encoder.Save (ms);
            int len =  (int)ms.Length;
            byte[] bytesBuffer = new Byte[len];
            ms.Read(bytesBuffer, 0, len);
            bytes = bytesBuffer;
        }}
    return bytes;
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
468
4
Gpt3D_Clone468_4.cs 1 12
Gpt3D_Clone468_4.cs 13 29
----------------------------------------

public static byte [] ConvertBitmapSourceToByteArray (BitmapEncoder encoder, ImageSource imageSource) {
    byte [] bytes = null;
    var bitmapSource = imageSource as BitmapSource;
    if (bitmapSource != null) {
        encoder.Frames.Add (BitmapFrame.Create (bitmapSource));
        using (var stream = new MemoryStream ())
        {
            encoder.Save (stream);
            bytes = stream.ToArray ();
        }}
    return bytes;
}
----------------------------------------

  public static byte [] ConvertBitmapSourceToByteArray (BitmapEncoder encoder, ImageSource imageSource) {
    byte [] bytes = null;
    var bitmapSource = imageSource as BitmapSource;
    if (bitmapSource != null) {
        encoder.Frames.Add (BitmapFrame.Create (bitmapSource));
        using (var ms = new MemoryStream ())
        {
            encoder.Save (ms);
            int len = (int)ms.Length;
            byte[] buffer = new byte[len];
            ms.Read(buffer, 0, len);
            bytes = buffer;
        }}
    return bytes;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
468
5
Gpt3D_Clone468_5.cs 1 12
Gpt3D_Clone468_5.cs 13 28
----------------------------------------

public static byte [] ConvertBitmapSourceToByteArray (BitmapEncoder encoder, ImageSource imageSource) {
    byte [] bytes = null;
    var bitmapSource = imageSource as BitmapSource;
    if (bitmapSource != null) {
        encoder.Frames.Add (BitmapFrame.Create (bitmapSource));
        using (var stream = new MemoryStream ())
        {
            encoder.Save (stream);
            bytes = stream.ToArray ();
        }}
    return bytes;
}
----------------------------------------

 public static byte [] ConvertBitmapSourceToByteArray (BitmapEncoder encoder, ImageSource imageSource) {
    byte [] bytes = null;
    var bitmapSource = imageSource as BitmapSource;
    if (bitmapSource != null) {
        encoder.Frames.Add (BitmapFrame.Create (bitmapSource));
        using (var ms = new MemoryStream ())
        {
            encoder.Save (ms);
            var buffer = ms.ToArray();
            bytes = new Byte[buffer.Length];
            Buffer.BlockCopy(buffer, 0, bytes, 0, buffer.Length);
        }}
    return bytes;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
468
6
Gpt3D_Clone468_6.cs 1 12
Gpt3D_Clone468_6.cs 13 28
----------------------------------------

public static byte [] ConvertBitmapSourceToByteArray (BitmapEncoder encoder, ImageSource imageSource) {
    byte [] bytes = null;
    var bitmapSource = imageSource as BitmapSource;
    if (bitmapSource != null) {
        encoder.Frames.Add (BitmapFrame.Create (bitmapSource));
        using (var stream = new MemoryStream ())
        {
            encoder.Save (stream);
            bytes = stream.ToArray ();
        }}
    return bytes;
}
----------------------------------------

 public static byte [] ConvertBitmapSourceToByteArray (BitmapEncoder encoder, ImageSource imageSource) {
    byte [] bytes = null;
    var bitmapSource = imageSource as BitmapSource;
    if (bitmapSource != null) {
        encoder.Frames.Add (BitmapFrame.Create (bitmapSource));
        using (var ms = new MemoryStream ())
        {
            encoder.Save (ms);
            int length = (int)ms.Length;
            bytes = new Byte[length];
            ms.Read(bytes, 0, length);
        }}
    return bytes;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
469
0
Gpt3D_Clone469_0.cs 1 12
Gpt3D_Clone469_0.cs 13 29
----------------------------------------

public static byte [] ConvertBitmapSourceToByteArray (BitmapEncoder encoder, ImageSource imageSource) {
    byte [] bytes = null;
    var bitmapSource = imageSource as BitmapSource;
    if (bitmapSource != null) {
        encoder.Frames.Add (BitmapFrame.Create (bitmapSource));
        using (var stream = new MemoryStream ())
        {
            encoder.Save (stream);
            bytes = stream.ToArray ();
        }}
    return bytes;
}
----------------------------------------

 public static byte [] ConvertBitmapSourceToByteArray (BitmapEncoder encoder, ImageSource imageSource) {
    if (imageSource is BitmapSource) {
        byte[] bytes;
        BitmapSource source = (BitmapSource)imageSource;
        encoder.Frames.Add(BitmapFrame.Create(source));
        using (MemoryStream stream = new MemoryStream())
        {
            encoder.Save(stream);
            bytes = stream.ToArray();
        }
        return bytes;
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
469
1
Gpt3D_Clone469_1.cs 1 12
Gpt3D_Clone469_1.cs 13 27
----------------------------------------

public static byte [] ConvertBitmapSourceToByteArray (BitmapEncoder encoder, ImageSource imageSource) {
    byte [] bytes = null;
    var bitmapSource = imageSource as BitmapSource;
    if (bitmapSource != null) {
        encoder.Frames.Add (BitmapFrame.Create (bitmapSource));
        using (var stream = new MemoryStream ())
        {
            encoder.Save (stream);
            bytes = stream.ToArray ();
        }}
    return bytes;
}
----------------------------------------

  public static byte [] ConvertBitmapSourceToByteArray (BitmapEncoder encoder, ImageSource imageSource) {
    BitmapSource bitmapSource = imageSource as BitmapSource;
    if (bitmapSource != null) {
        using (MemoryStream stream = new MemoryStream())
        {
            encoder.Frames.Add(BitmapFrame.Create(bitmapSource));
            encoder.Save(stream);
            byte [] bytes = stream.ToArray();
            return bytes;
        }
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
469
2
Gpt3D_Clone469_2.cs 1 12
Gpt3D_Clone469_2.cs 13 31
----------------------------------------

public static byte [] ConvertBitmapSourceToByteArray (BitmapEncoder encoder, ImageSource imageSource) {
    byte [] bytes = null;
    var bitmapSource = imageSource as BitmapSource;
    if (bitmapSource != null) {
        encoder.Frames.Add (BitmapFrame.Create (bitmapSource));
        using (var stream = new MemoryStream ())
        {
            encoder.Save (stream);
            bytes = stream.ToArray ();
        }}
    return bytes;
}
----------------------------------------

 public static byte[] ConvertBitmapSourceToByteArray (BitmapEncoder encoder, ImageSource imageSource) 
{
    byte[] bytes = null;
    if (imageSource is BitmapSource)
    {
        BitmapSource bitmapSource = (BitmapSource)imageSource;
        encoder.Frames.Add(BitmapFrame.Create(bitmapSource));
        using (MemoryStream stream = new MemoryStream())
        {
            encoder.Save(stream);
            bytes = stream.GetBuffer();
        }
    }
    return bytes;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
469
3
Gpt3D_Clone469_3.cs 1 12
Gpt3D_Clone469_3.cs 13 29
----------------------------------------

public static byte [] ConvertBitmapSourceToByteArray (BitmapEncoder encoder, ImageSource imageSource) {
    byte [] bytes = null;
    var bitmapSource = imageSource as BitmapSource;
    if (bitmapSource != null) {
        encoder.Frames.Add (BitmapFrame.Create (bitmapSource));
        using (var stream = new MemoryStream ())
        {
            encoder.Save (stream);
            bytes = stream.ToArray ();
        }}
    return bytes;
}
----------------------------------------

 public static byte[] ConvertBitmapSourceToByteArray (BitmapEncoder encoder, ImageSource imageSource) 
{
    byte[] bytes = null;
    if (imageSource is BitmapSource)
    {
        BitmapSource bitmapSource = (BitmapSource)imageSource;
        encoder.Frames.Add(BitmapFrame.Create(bitmapSource));
        MemoryStream stream = new MemoryStream();
        encoder.Save(stream);
        bytes = stream.ToArray();
    }
    return bytes;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
469
4
Gpt3D_Clone469_4.cs 1 12
Gpt3D_Clone469_4.cs 13 29
----------------------------------------

public static byte [] ConvertBitmapSourceToByteArray (BitmapEncoder encoder, ImageSource imageSource) {
    byte [] bytes = null;
    var bitmapSource = imageSource as BitmapSource;
    if (bitmapSource != null) {
        encoder.Frames.Add (BitmapFrame.Create (bitmapSource));
        using (var stream = new MemoryStream ())
        {
            encoder.Save (stream);
            bytes = stream.ToArray ();
        }}
    return bytes;
}
----------------------------------------

 public static byte[] ConvertBitmapSourceToByteArray (BitmapEncoder encoder, ImageSource imageSource) 
{
    byte[] bytes = null;
    if (imageSource is BitmapSource bmpSource)
    {
        using (MemoryStream stream = new MemoryStream())
        {
            encoder.Frames.Add(BitmapFrame.Create(bmpSource));
            encoder.Save(stream);
            bytes = stream.ToArray();
        }
    }
    return bytes;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
469
5
Gpt3D_Clone469_5.cs 1 12
Gpt3D_Clone469_5.cs 13 31
----------------------------------------

public static byte [] ConvertBitmapSourceToByteArray (BitmapEncoder encoder, ImageSource imageSource) {
    byte [] bytes = null;
    var bitmapSource = imageSource as BitmapSource;
    if (bitmapSource != null) {
        encoder.Frames.Add (BitmapFrame.Create (bitmapSource));
        using (var stream = new MemoryStream ())
        {
            encoder.Save (stream);
            bytes = stream.ToArray ();
        }}
    return bytes;
}
----------------------------------------

 public static byte[] ConvertBitmapSourceToByteArray (BitmapEncoder encoder, ImageSource imageSource) 
{
    byte[] bytes = null;
    if (imageSource is BitmapSource bmpSource)
    {
        encoder.Frames.Add(BitmapFrame.Create(bmpSource));
        using (MemoryStream stream = new MemoryStream())
        {
            encoder.Save(stream);
            bytes = stream.ToArray();
        }
    }
    return bytes;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
469
6
Gpt3D_Clone469_6.cs 1 12
Gpt3D_Clone469_6.cs 13 29
----------------------------------------

public static byte [] ConvertBitmapSourceToByteArray (BitmapEncoder encoder, ImageSource imageSource) {
    byte [] bytes = null;
    var bitmapSource = imageSource as BitmapSource;
    if (bitmapSource != null) {
        encoder.Frames.Add (BitmapFrame.Create (bitmapSource));
        using (var stream = new MemoryStream ())
        {
            encoder.Save (stream);
            bytes = stream.ToArray ();
        }}
    return bytes;
}
----------------------------------------

 public static byte[] ConvertBitmapSourceToByteArray (BitmapEncoder encoder, ImageSource imageSource) 
{
    byte[] bytes = null;
    if (imageSource is BitmapSource)
    {
        BitmapSource bitmapSource = (BitmapSource)imageSource;
        MemoryStream stream = new MemoryStream();
        encoder.Frames.Add(BitmapFrame.Create(bitmapSource));
        encoder.Save(stream);
        bytes = stream.ToArray();
    }
    return bytes;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
469
8
Gpt3D_Clone469_8.cs 1 12
Gpt3D_Clone469_8.cs 13 28
----------------------------------------

public static byte [] ConvertBitmapSourceToByteArray (BitmapEncoder encoder, ImageSource imageSource) {
    byte [] bytes = null;
    var bitmapSource = imageSource as BitmapSource;
    if (bitmapSource != null) {
        encoder.Frames.Add (BitmapFrame.Create (bitmapSource));
        using (var stream = new MemoryStream ())
        {
            encoder.Save (stream);
            bytes = stream.ToArray ();
        }}
    return bytes;
}
----------------------------------------

 public static byte[] ConvertBitmapSourceToByteArray (BitmapEncoder encoder, ImageSource imageSource) 
{
    byte[] bytes = null;
    if (imageSource is BitmapSource bmpSource)
    {
        encoder.Frames.Add(BitmapFrame.Create(bmpSource));
        MemoryStream stream = new MemoryStream();
        encoder.Save(stream);
        bytes = stream.GetBuffer();
    }
    return bytes;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
470
0
Gpt3D_Clone470_0.cs 1 12
Gpt3D_Clone470_0.cs 13 30
----------------------------------------

public static byte [] ConvertBitmapSourceToByteArray (BitmapEncoder encoder, ImageSource imageSource) {
    byte [] bytes = null;
    var bitmapSource = imageSource as BitmapSource;
    if (bitmapSource != null) {
        encoder.Frames.Add (BitmapFrame.Create (bitmapSource));
        using (var stream = new MemoryStream ())
        {
            encoder.Save (stream);
            bytes = stream.ToArray ();
        }}
    return bytes;
}
----------------------------------------

 public static byte[] ConvertBitmapSourceToByteArray (BitmapEncoder encoder, ImageSource imageSource) {
    byte[] bytes = null;
    if ( imageSource is BitmapSource bitmapSource) {
        BitmapFrame frame = BitmapFrame.Create (bitmapSource);
        encoder.Frames.Add(frame);
        using (var stream = new MemoryStream())
        {
            encoder.Save(stream);
            bytes = stream.ToArray();
        }
    }
    return bytes;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
470
1
Gpt3D_Clone470_1.cs 1 12
Gpt3D_Clone470_1.cs 13 32
----------------------------------------

public static byte [] ConvertBitmapSourceToByteArray (BitmapEncoder encoder, ImageSource imageSource) {
    byte [] bytes = null;
    var bitmapSource = imageSource as BitmapSource;
    if (bitmapSource != null) {
        encoder.Frames.Add (BitmapFrame.Create (bitmapSource));
        using (var stream = new MemoryStream ())
        {
            encoder.Save (stream);
            bytes = stream.ToArray ();
        }}
    return bytes;
}
----------------------------------------

 public static byte[] ConvertBitmapSourceToByteArray (BitmapEncoder encoder, ImageSource imageSource) {
byte[] bytes = null;
  if (imageSource is BitmapSource bitmapSource) {
    BitmapFrame frame = BitmapFrame.Create (bitmapSource);
    encoder.Frames.Add(frame);
      using (Core.Streams.MemoryStream ms = new Core.Streams.MemoryStream())
        {
          encoder.Save(ms);
          bytes = ms.GetBuffer();
        }
    }
    return bytes;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
470
2
Gpt3D_Clone470_2.cs 1 12
Gpt3D_Clone470_2.cs 13 29
----------------------------------------

public static byte [] ConvertBitmapSourceToByteArray (BitmapEncoder encoder, ImageSource imageSource) {
    byte [] bytes = null;
    var bitmapSource = imageSource as BitmapSource;
    if (bitmapSource != null) {
        encoder.Frames.Add (BitmapFrame.Create (bitmapSource));
        using (var stream = new MemoryStream ())
        {
            encoder.Save (stream);
            bytes = stream.ToArray ();
        }}
    return bytes;
}
----------------------------------------

 public static byte[] ConvertBitmapSourceToByteArray (BitmapEncoder encoder, ImageSource imageSource) {
    byte[] bytes = null;
    if (imageSource is BitmapSource bitmapSource) {
        BitmapFrame frame = BitmapFrame.Create (bitmapSource);
        encoder.Frames.Add(frame);
        using (var ms = new MemoryStream()) {
            encoder.Save(ms);
            bytes = ms.ToArray();
        }
    }
    return bytes;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
470
3
Gpt3D_Clone470_3.cs 1 12
Gpt3D_Clone470_3.cs 13 29
----------------------------------------

public static byte [] ConvertBitmapSourceToByteArray (BitmapEncoder encoder, ImageSource imageSource) {
    byte [] bytes = null;
    var bitmapSource = imageSource as BitmapSource;
    if (bitmapSource != null) {
        encoder.Frames.Add (BitmapFrame.Create (bitmapSource));
        using (var stream = new MemoryStream ())
        {
            encoder.Save (stream);
            bytes = stream.ToArray ();
        }}
    return bytes;
}
----------------------------------------

 public static byte[] ConvertBitmapSourceToByteArray (BitmapEncoder encoder, ImageSource imageSource) {
    byte[] bytes = null;
    
    if (imageSource is BitmapSource source)
    {
        BitmapFrame frame = BitmapFrame.Create (source);
        encoder.Frames.Add (frame);
        using (Core.Streams.MemoryStream ms = new Core.Streams.MemoryStream())
        {
            encoder.Save(ms);
            bytes = ms.GetBuffer();
        }
    }
    return bytes;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
470
4
Gpt3D_Clone470_4.cs 1 12
Gpt3D_Clone470_4.cs 13 27
----------------------------------------

public static byte [] ConvertBitmapSourceToByteArray (BitmapEncoder encoder, ImageSource imageSource) {
    byte [] bytes = null;
    var bitmapSource = imageSource as BitmapSource;
    if (bitmapSource != null) {
        encoder.Frames.Add (BitmapFrame.Create (bitmapSource));
        using (var stream = new MemoryStream ())
        {
            encoder.Save (stream);
            bytes = stream.ToArray ();
        }}
    return bytes;
}
----------------------------------------

 public static byte[] ConvertBitmapSourceToByteArray (BitmapEncoder encoder, ImageSource imageSource) {
    byte[] bytes = null;
    if (imageSource is BitmapSource source)
    {
        encoder.Frames.Add (BitmapFrame.Create (source));
        using (Core.Streams.MemoryStream ms = new Core.Streams.MemoryStream())
        {
            encoder.Save(ms);
            bytes = ms.GetBuffer();
        }
    }
    return bytes;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
471
0
Gpt3D_Clone471_0.cs 1 12
Gpt3D_Clone471_0.cs 13 30
----------------------------------------

public static byte [] ConvertBitmapSourceToByteArray (BitmapEncoder encoder, ImageSource imageSource) {
    byte [] bytes = null;
    var bitmapSource = imageSource as BitmapSource;
    if (bitmapSource != null) {
        encoder.Frames.Add (BitmapFrame.Create (bitmapSource));
        using (var stream = new MemoryStream ())
        {
            encoder.Save (stream);
            bytes = stream.ToArray ();
        }}
    return bytes;
}
----------------------------------------

 public static byte[] ConvertBitmapSourceToByteArray(BitmapEncoder encoder, ImageSource imageSource) 
{
	byte[] result = null;
	 
	if (imageSource is BitmapSource bs) 
	{
		encoder.Frames.Add(BitmapFrame.Create(bs));
		using (MemoryStream stream = new MemoryStream())
		{ 
			encoder.Save(stream);           
			result = stream.ToArray();
		}
	}
		
	return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
471
1
Gpt3D_Clone471_1.cs 1 12
Gpt3D_Clone471_1.cs 13 29
----------------------------------------

public static byte [] ConvertBitmapSourceToByteArray (BitmapEncoder encoder, ImageSource imageSource) {
    byte [] bytes = null;
    var bitmapSource = imageSource as BitmapSource;
    if (bitmapSource != null) {
        encoder.Frames.Add (BitmapFrame.Create (bitmapSource));
        using (var stream = new MemoryStream ())
        {
            encoder.Save (stream);
            bytes = stream.ToArray ();
        }}
    return bytes;
}
----------------------------------------

 public static byte [] ConvertBitmapSourceToByteArray (BitmapEncoder encoder, ImageSource imageSource) 
{
    byte [] bytes = null;
    
    if (imageSource is BitmapSource bs) {
        encoder.Frames.Add (BitmapFrame.Create(bs));
        
        using (MemoryStream stream = new MemoryStream()) {
            encoder.Save (stream);
            bytes = stream.ToArray();
        }
    }
    return bytes;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
473
7
Gpt3D_Clone473_7.cs 1 10
Gpt3D_Clone473_7.cs 11 20
----------------------------------------

public void WriteXml (XmlWriter writer) {
    using (MemoryStream ms = new MemoryStream ())
    {
        using (XmlWriter innerWriter = XmlWriter.Create (ms, new XmlWriterSettings {OmitXmlDeclaration = true}))
        {
            shipmentInfoSerializer.Serialize (innerWriter, this.Shipment);
            innerWriter.Flush ();
            writer.WriteCData (Encoding.UTF8.GetString (ms.ToArray ()));
        }}
}
----------------------------------------

 public void WriteXml (XmlWriter writer) {
    using (StringWriter stringWriter = new StringWriter())
    {
        shipmentInfoSerializer.Serialize(stringWriter, this.shipment);
        stringWriter.Flush();
        writer.WriteCData(stringWriter.ToString());
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
474
0
Gpt3D_Clone474_0.cs 1 23
Gpt3D_Clone474_0.cs 24 44
----------------------------------------

public static bool SetBrowserEmulationVersion (BrowserEmulationVersion browserEmulationVersion) {
    bool result;
    result = false;
    try {
        RegistryKey key;
        key = Registry.CurrentUser.OpenSubKey (BrowserEmulationKey, true);
        if (key != null) {
            string programName;
            programName = Path.GetFileName (Environment.GetCommandLineArgs () [0]);
            if (browserEmulationVersion != BrowserEmulationVersion.Default) {
                key.SetValue (programName, (int) browserEmulationVersion, RegistryValueKind.DWord);
            } else {
                key.DeleteValue (programName, false);
            }
            result = true;
        }
    }
    catch (SecurityException) {
    }
    catch (UnauthorizedAccessException) {
    }
    return result;
}
----------------------------------------

 public static boolean SetBrowserEmulationVersion(BrowserEmulationVersion browserEmulationVersion)
    {
        boolean result = false;
        try {
            RegistryKey key = Registry.CurrentUser.OpenSubKey(BrowserEmulationKey, true);
            if(key != null){
                String programName = Path.GetFileName(Environment.GetCommandLineArgs()[0]);
                if(browserEmulationVersion != BrowserEmulationVersion.Default) {
                    key.SetValue(programName, (int)browserEmulationVersion, RegistryValueKind.DWord);
                }
                else {
                    key.DeleteValue(programName, false);
                }
                result = true;
            }
        } catch (SecurityException) {
        } catch (UnauthorizedAccessException) {
        } return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
474
1
Gpt3D_Clone474_1.cs 1 23
Gpt3D_Clone474_1.cs 24 53
----------------------------------------

public static bool SetBrowserEmulationVersion (BrowserEmulationVersion browserEmulationVersion) {
    bool result;
    result = false;
    try {
        RegistryKey key;
        key = Registry.CurrentUser.OpenSubKey (BrowserEmulationKey, true);
        if (key != null) {
            string programName;
            programName = Path.GetFileName (Environment.GetCommandLineArgs () [0]);
            if (browserEmulationVersion != BrowserEmulationVersion.Default) {
                key.SetValue (programName, (int) browserEmulationVersion, RegistryValueKind.DWord);
            } else {
                key.DeleteValue (programName, false);
            }
            result = true;
        }
    }
    catch (SecurityException) {
    }
    catch (UnauthorizedAccessException) {
    }
    return result;
}
----------------------------------------

public static boolean SetBrowserEmulationVersion(BrowserEmulationVersion browserEmulationVersion)
{
    boolean result = false;
    try 
    {
        RegistryKey key = Registry.CurrentUser.OpenSubKey(BrowserEmulationKey, true);
        if(key != null) 
        {
            String programName = Path.GetFileName(Environment.GetCommandLineArgs()[0]);
            if (browserEmulationVersion != BrowserEmulationVersion.Default) 
            {
                key.SetValue(programName, (int)browserEmulationVersion, RegistryValueKind.DWord);
                result = true;
            }
            else 
            {
                key.DeleteValue(programName, false);
            }
        }
    } 
    catch (SecurityException) 
    {
    } 
    catch (UnauthorizedAccessException) 
    {
    } 
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
474
2
Gpt3D_Clone474_2.cs 1 23
Gpt3D_Clone474_2.cs 24 49
----------------------------------------

public static bool SetBrowserEmulationVersion (BrowserEmulationVersion browserEmulationVersion) {
    bool result;
    result = false;
    try {
        RegistryKey key;
        key = Registry.CurrentUser.OpenSubKey (BrowserEmulationKey, true);
        if (key != null) {
            string programName;
            programName = Path.GetFileName (Environment.GetCommandLineArgs () [0]);
            if (browserEmulationVersion != BrowserEmulationVersion.Default) {
                key.SetValue (programName, (int) browserEmulationVersion, RegistryValueKind.DWord);
            } else {
                key.DeleteValue (programName, false);
            }
            result = true;
        }
    }
    catch (SecurityException) {
    }
    catch (UnauthorizedAccessException) {
    }
    return result;
}
----------------------------------------

public static bool SetBrowserEmulationVersion(BrowserEmulationVersion browserEmulationVersion)
{
    bool success = false;
    try
    {
        RegistryKey key = Registry.CurrentUser.OpenSubKey(BrowserEmulationKey, true);
        if (key != null)
        {
            string programName = Path.GetFileName(Environment.GetCommandLineArgs()[0]);
            if (browserEmulationVersion != BrowserEmulationVersion.Default)
            {
                key.SetValue(programName, (int)browserEmulationVersion, RegistryValueKind.DWord);
            }
            else
            {
                key.DeleteValue(programName, false);
            }
            success = true;
        }
    }
    catch (SecurityException) { }
    catch (UnauthorizedAccessException) { }
    return success;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
474
3
Gpt3D_Clone474_3.cs 1 23
Gpt3D_Clone474_3.cs 24 51
----------------------------------------

public static bool SetBrowserEmulationVersion (BrowserEmulationVersion browserEmulationVersion) {
    bool result;
    result = false;
    try {
        RegistryKey key;
        key = Registry.CurrentUser.OpenSubKey (BrowserEmulationKey, true);
        if (key != null) {
            string programName;
            programName = Path.GetFileName (Environment.GetCommandLineArgs () [0]);
            if (browserEmulationVersion != BrowserEmulationVersion.Default) {
                key.SetValue (programName, (int) browserEmulationVersion, RegistryValueKind.DWord);
            } else {
                key.DeleteValue (programName, false);
            }
            result = true;
        }
    }
    catch (SecurityException) {
    }
    catch (UnauthorizedAccessException) {
    }
    return result;
}
----------------------------------------

 public static bool SetBrowserEmulationVersion(BrowserEmulationVersion browserEmulationVersion)
{
    bool result = false;
    try
    {
        RegistryKey key = Registry.CurrentUser.OpenSubKey(BrowserEmulationKey, true);
        if (key != null)
        {
            string programName = Path.GetFileName(Environment.GetCommandLineArgs()[0]);
            if (browserEmulationVersion != BrowserEmulationVersion.Default)
            {
                key.SetValue(programName, (int)browserEmulationVersion, RegistryValueKind.DWord);
            }
            else
            {
                key.DeleteValue(programName, false);
            }
            result = true;
        }
    }
    catch (SecurityException) { }
    catch (UnauthorizedAccessException) { }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
475
0
Gpt3D_Clone475_0.cs 1 9
Gpt3D_Clone475_0.cs 10 24
----------------------------------------

public void Add (Type type) {
    if (! type.IsVisible) {
        return;
    }
    var members = type.GetMembers (BindingFlags.Instance | BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.Public);
    foreach (var member in members) {
        Add (type, member);
    }
}
----------------------------------------

 public void Add(Type type)
{
    if (type.IsVisible == false)
    {
        return;
    }
    var bindingFlags = BindingFlags.Instance | BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.Public;
    var members = type.GetMembers(bindingFlags);
    foreach (var member in members) 
    {
        Add(type, member);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
475
1
Gpt3D_Clone475_1.cs 1 9
Gpt3D_Clone475_1.cs 10 24
----------------------------------------

public void Add (Type type) {
    if (! type.IsVisible) {
        return;
    }
    var members = type.GetMembers (BindingFlags.Instance | BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.Public);
    foreach (var member in members) {
        Add (type, member);
    }
}
----------------------------------------

 public void Add(Type type) 
{
    if (type.IsVisible != true)
    {
        return;
    }
    BindingFlags frame = BindingFlags.Instance | BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.Public;
    var list = type.GetMembers(frame);
    foreach (var member in list) 
    {
        Add(type, member);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
475
2
Gpt3D_Clone475_2.cs 1 9
Gpt3D_Clone475_2.cs 10 24
----------------------------------------

public void Add (Type type) {
    if (! type.IsVisible) {
        return;
    }
    var members = type.GetMembers (BindingFlags.Instance | BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.Public);
    foreach (var member in members) {
        Add (type, member);
    }
}
----------------------------------------

 public void Add(Type type)
{
    if (type.IsVisible == false)
    {
        return;
    }
    var flags = BindingFlags.Instance | BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.Public;
    var members = type.GetMembers(flags);
    foreach(var member in members)
    {
        Add(type, member);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
475
3
Gpt3D_Clone475_3.cs 1 9
Gpt3D_Clone475_3.cs 10 28
----------------------------------------

public void Add (Type type) {
    if (! type.IsVisible) {
        return;
    }
    var members = type.GetMembers (BindingFlags.Instance | BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.Public);
    foreach (var member in members) {
        Add (type, member);
    }
}
----------------------------------------

 public void Add(Type type)
{
    if (type.IsVisible == false)
    {
        return;
    }
    var bFlags = 
        BindingFlags.Instance
        | BindingFlags.Static
        | BindingFlags.NonPublic
        | BindingFlags.Public;
    var members = type.GetMembers(bFlags);
    foreach(var member in members)
    {
        Add(type, member);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
475
4
Gpt3D_Clone475_4.cs 1 9
Gpt3D_Clone475_4.cs 10 28
----------------------------------------

public void Add (Type type) {
    if (! type.IsVisible) {
        return;
    }
    var members = type.GetMembers (BindingFlags.Instance | BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.Public);
    foreach (var member in members) {
        Add (type, member);
    }
}
----------------------------------------

 public void Add(Type type)
{
    if (!type.IsVisible)
    {
        return;
    }
    var bFlags = 
        BindingFlags.Instance
        | BindingFlags.Static
        | BindingFlags.NonPublic
        | BindingFlags.Public;
    var members = type.GetMembers(bFlags);
    foreach (var member in members) 
    {
        this.Add(type, member);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
475
5
Gpt3D_Clone475_5.cs 1 9
Gpt3D_Clone475_5.cs 10 25
----------------------------------------

public void Add (Type type) {
    if (! type.IsVisible) {
        return;
    }
    var members = type.GetMembers (BindingFlags.Instance | BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.Public);
    foreach (var member in members) {
        Add (type, member);
    }
}
----------------------------------------

 public void Add(Type type)
{
    if (!type.IsVisible)
    {
        return;
    }
    BindingFlags bindingFlags = BindingFlags.Instance | BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.Public;
    foreach(var member in type.GetMembers(bindingFlags))
    {
        Add(type, member);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
475
6
Gpt3D_Clone475_6.cs 1 9
Gpt3D_Clone475_6.cs 10 22
----------------------------------------

public void Add (Type type) {
    if (! type.IsVisible) {
        return;
    }
    var members = type.GetMembers (BindingFlags.Instance | BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.Public);
    foreach (var member in members) {
        Add (type, member);
    }
}
----------------------------------------

 public void Add (Type type)
{
    if (! type.IsVisible)
    {
        return;
    }
    foreach(var member in type.GetMembers(BindingFlags.Instance | BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.Public))
    {
        Add(type, member);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
47
0
Gpt3D_Clone47_0.cs 1 19
Gpt3D_Clone47_0.cs 20 44
----------------------------------------

private static void OneTimeSetup () {
    Type stackFrameHelperType = typeof (object).Assembly.GetType ("System.Diagnostics.StackFrameHelper");
    MethodInfo getStackFramesInternal = Type.GetType ("System.Diagnostics.StackTrace, mscorlib").GetMethod ("GetStackFramesInternal", BindingFlags.Static | BindingFlags.NonPublic);
    DynamicMethod dynamicMethod = new DynamicMethod ("GetStackFrameHelper", typeof (object), new Type [0], typeof (StackTrace), true);
    ILGenerator generator = dynamicMethod.GetILGenerator ();
    generator.DeclareLocal (stackFrameHelperType);
    generator.Emit (OpCodes.Ldc_I4_0);
    generator.Emit (OpCodes.Ldnull);
    generator.Emit (OpCodes.Newobj, stackFrameHelperType.GetConstructor (new Type [] {typeof (bool), typeof (Thread)}));
    generator.Emit (OpCodes.Stloc_0);
    generator.Emit (OpCodes.Ldloc_0);
    generator.Emit (OpCodes.Ldc_I4_0);
    generator.Emit (OpCodes.Ldnull);
    generator.Emit (OpCodes.Call, getStackFramesInternal);
    generator.Emit (OpCodes.Ldloc_0);
    generator.Emit (OpCodes.Ret);
    _getStackFrameHelper = (DGetStackFrameHelper) dynamicMethod.CreateDelegate (typeof (DGetStackFrameHelper));
    _frameCount = stackFrameHelperType.GetField ("iFrameCount", BindingFlags.NonPublic | BindingFlags.Instance);
}
----------------------------------------

private static void OneTimeSetup() 
{ 
    Type stackFrameHelperType = typeof(StackTrace).Assembly.GetType("System.Diagnostics.StackFrameHelper"); 
    MethodInfo getStackFramesInternal = Type.GetType("System.Diagnostics.StackTrace, mscorlib").GetMethod("GetStackFramesInternal", BindingFlags.Static | BindingFlags.NonPublic); 
    DynamicMethod dynamicMethod = new DynamicMethod("GetStackFrameHelper", typeof(object), new Type[0], typeof(StackTrace), true); 
    ILGenerator generator = dynamicMethod.GetILGenerator(); 
    generator.DeclareLocal(stackFrameHelperType); 
    generator.Emit(OpCodes.Ldc_I4_0); 
    generator.Emit(OpCodes.Ldnull); 
    ConstructorInfo ci = stackFrameHelperType.GetConstructor(new Type[] { typeof(bool), typeof(Thread) }); 
    generator.Emit(OpCodes.Newobj, ci); 
    generator.Emit(OpCodes.Stloc_0); 
    generator.Emit(OpCodes.Ldloc_0); 
    generator.Emit(OpCodes.Ldc_I4_0); 
    generator.Emit(OpCodes.Ldnull); 
    MethodInfo mi = getStackFramesInternal; 
    generator.EmitCall(OpCodes.Call, mi, null); 
    generator.Emit(OpCodes.Ldloc_0); 
    generator.Emit(OpCodes.Ret); 
    _getStackFrameHelper = (DGetStackFrameHelper)dynamicMethod.CreateDelegate(typeof(DGetStackFrameHelper)); 
    _frameCount = stackFrameHelperType.GetField("iFrameCount", BindingFlags.NonPublic | BindingFlags.Instance); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
47
1
Gpt3D_Clone47_1.cs 1 19
Gpt3D_Clone47_1.cs 20 44
----------------------------------------

private static void OneTimeSetup () {
    Type stackFrameHelperType = typeof (object).Assembly.GetType ("System.Diagnostics.StackFrameHelper");
    MethodInfo getStackFramesInternal = Type.GetType ("System.Diagnostics.StackTrace, mscorlib").GetMethod ("GetStackFramesInternal", BindingFlags.Static | BindingFlags.NonPublic);
    DynamicMethod dynamicMethod = new DynamicMethod ("GetStackFrameHelper", typeof (object), new Type [0], typeof (StackTrace), true);
    ILGenerator generator = dynamicMethod.GetILGenerator ();
    generator.DeclareLocal (stackFrameHelperType);
    generator.Emit (OpCodes.Ldc_I4_0);
    generator.Emit (OpCodes.Ldnull);
    generator.Emit (OpCodes.Newobj, stackFrameHelperType.GetConstructor (new Type [] {typeof (bool), typeof (Thread)}));
    generator.Emit (OpCodes.Stloc_0);
    generator.Emit (OpCodes.Ldloc_0);
    generator.Emit (OpCodes.Ldc_I4_0);
    generator.Emit (OpCodes.Ldnull);
    generator.Emit (OpCodes.Call, getStackFramesInternal);
    generator.Emit (OpCodes.Ldloc_0);
    generator.Emit (OpCodes.Ret);
    _getStackFrameHelper = (DGetStackFrameHelper) dynamicMethod.CreateDelegate (typeof (DGetStackFrameHelper));
    _frameCount = stackFrameHelperType.GetField ("iFrameCount", BindingFlags.NonPublic | BindingFlags.Instance);
}
----------------------------------------

 
private static void OneTimeSetup() 
{ 
    Type stackFrameHelperType = typeof(StackTrace).Assembly.GetType("System.Diagnostics.StackFrameHelper"); 
    MethodInfo getStackFramesInternal = Type.GetType("System.Diagnostics.StackTrace, mscorlib").GetMethod("GetStackFramesInternal", BindingFlags.Static | BindingFlags.NonPublic); 
    DynamicMethod dynamicMethod = new DynamicMethod("GetStackFrameHelper", typeof(object), new Type[0], typeof(StackTrace), true); 
    ILGenerator generator = dynamicMethod.GetILGenerator(); 
    generator.DeclareLocal(stackFrameHelperType); 
    generator.Emit(OpCodes.Ldc_I4_0); 
    generator.Emit(OpCodes.Ldnull); 
    ConstructorInfo ci = stackFrameHelperType.GetConstructor(new Type[] { typeof(bool), typeof(Thread) }); 
    generator.Emit(OpCodes.Newobj, ci); 
    generator.Emit(OpCodes.Stloc_0); 
    generator.Emit(OpCodes.Ldloc_0); 
    generator.Emit(OpCodes.Ldc_I4_0); 
    generator.Emit(OpCodes.Ldnull); 
    MethodInfo mi = stackFrameHelperType.GetMethod("SetStackFrames", BindingFlags.Public | BindingFlags.Instance); 
    generator.EmitCall(OpCodes.Call, mi, null); 
    generator.Emit(OpCodes.Ldloc_0); 
    generator.Emit(OpCodes.Ret); 
    _getStackFrameHelper = (DGetStackFrameHelper)dynamicMethod.CreateDelegate(typeof(DGetStackFrameHelper)); 
    _frameCount = stackFrameHelperType.GetField("iFrameCount", BindingFlags.NonPublic | BindingFlags.Instance); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
481
0
Gpt3D_Clone481_0.cs 1 29
Gpt3D_Clone481_0.cs 30 69
----------------------------------------

private static void note () {
    int [] i = new int [1];
    do
        {
            Console.WriteLine ("Please enter test result");
            bool result = int.TryParse (Console.ReadLine (), out i [0]);
            if (! result) {
                Console.WriteLine ("Please enter a number");
                continue;
            }
            if (i [0] == 999) {
                Console.WriteLine ("You entered 999 to stop");
                break;
            } else if (i [0] < 0 || i [0] > 100) {
                Console.WriteLine ("Enter a value between 0 and 100");
            } else if (i [0] >= 90) {
                Console.WriteLine ("note is A");
            } else if (i [0] >= 80) {
                Console.WriteLine ("note is B");
            } else if (i [0] >= 70) {
                Console.WriteLine ("note is C");
            } else if (i [0] >= 60) {
                Console.WriteLine ("note is D");
            } else if (i [0] < 60) {
                Console.WriteLine ("Failure");
            }
            Console.WriteLine ("Your result is:" + i [0]);
        } while (true);
}
----------------------------------------

 private static void note(){ 
	int[] i = new int[1]; 
	int x = 0; 
	do{ 
		Console.WriteLine("Please enter a test result"); 
		bool result = int.TryParse(Console.ReadLine(), out i[x]); 
		if(!result){ 
			Console.WriteLine("Please enter a number"); 
			continue; 
		} 
		if(i[x] == 999){ 
			Console.WriteLine("You entered 999 to stop."); 
			break; 
		} 
		else if(i[x] < 0 || i[x] > 100){ 
			Console.WriteLine("Enter a value between 0 and 100"); 
		} 
		else if(i[x] >= 90){ 
			Console.WriteLine("Note is A"); 
		} 
		else if(i[x] >= 80){ 
			Console.WriteLine("Note is B"); 
		} 
		else if(i[x] >= 70){ 
			Console.WriteLine("Note is C"); 
		} 
		else if(i[x] >= 60){ 
			Console.WriteLine("Note is D"); 
		} 
		else{ 
			Console.WriteLine("Failure"); 
		} 
		Console.WriteLine("Your result is: " + i[x]); 
		x++; 
	} 
	while(true); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
481
1
Gpt3D_Clone481_1.cs 1 29
Gpt3D_Clone481_1.cs 30 115
----------------------------------------

private static void note () {
    int [] i = new int [1];
    do
        {
            Console.WriteLine ("Please enter test result");
            bool result = int.TryParse (Console.ReadLine (), out i [0]);
            if (! result) {
                Console.WriteLine ("Please enter a number");
                continue;
            }
            if (i [0] == 999) {
                Console.WriteLine ("You entered 999 to stop");
                break;
            } else if (i [0] < 0 || i [0] > 100) {
                Console.WriteLine ("Enter a value between 0 and 100");
            } else if (i [0] >= 90) {
                Console.WriteLine ("note is A");
            } else if (i [0] >= 80) {
                Console.WriteLine ("note is B");
            } else if (i [0] >= 70) {
                Console.WriteLine ("note is C");
            } else if (i [0] >= 60) {
                Console.WriteLine ("note is D");
            } else if (i [0] < 60) {
                Console.WriteLine ("Failure");
            }
            Console.WriteLine ("Your result is:" + i [0]);
        } while (true);
}
----------------------------------------

 private static void note()
    {
        // define an array 
        int[] i = new int[1]; 
       
        do
        {
            // prompt the user to enter the test result
            Console.WriteLine("Please enter test result");
            int result = Int32.Parse(Console.ReadLine());
           
            // exit the loop if 999 is entered
            if (result == 999)
            {
                Console.WriteLine("You entered 999 to stop");
                break;
            }
           
            // continue to prompt the user if the value is not between 0 and 100
            if (result < 0 || result > 100)
            {
                Console.WriteLine("Enter a value between 0 and 100");
                continue;
            }
           
            // evaluate the result and display the message
            if (result >= 90)
            {
                Console.WriteLine("mark is A");
            }
            else if (result >= 80)
            {
                Console.WriteLine("mark is B");
            }
            else if (result >= 70)
            {
                Console.WriteLine("mark is C");
            }
            else if (result >= 60)
            {
                Console.WriteLine("mark is D");
            }
            else
            {
                Console.WriteLine("Failure");
            }
           
            Console.WriteLine("Your result is:" + result);
        }
        while (true);
    }
 private static void note(){ 
	int [] i = new int[1]; 
	do{ 
		Console.WriteLine("Please enter test result"); 
		int result = Int32.Parse(Console.ReadLine()); 
		if(result == 999){ 
			Console.WriteLine("You have entered 999 to exit"); 
			break; 
		} 
		if(result < 0 || result > 100){ 
			Console.WriteLine("Please enter a valid value between 0 and 100"); 
			continue; 
		} 
		if(result >= 90){ 
			Console.WriteLine("The result is A"); 
		} 
		else if(result >= 80){ 
			Console.WriteLine("The result is B"); 
		} 
		else if(result >= 70){ 
			Console.WriteLine("The result is C"); 
		} 
		else if(result >= 60){ 
			Console.WriteLine("The result is D"); 
		} 
		else{ 
			Console.WriteLine("Failure"); 
		} 
		Console.WriteLine("Your result is: " + result); 
	} 
	while(true); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
481
2
Gpt3D_Clone481_2.cs 1 29
Gpt3D_Clone481_2.cs 30 115
----------------------------------------

private static void note () {
    int [] i = new int [1];
    do
        {
            Console.WriteLine ("Please enter test result");
            bool result = int.TryParse (Console.ReadLine (), out i [0]);
            if (! result) {
                Console.WriteLine ("Please enter a number");
                continue;
            }
            if (i [0] == 999) {
                Console.WriteLine ("You entered 999 to stop");
                break;
            } else if (i [0] < 0 || i [0] > 100) {
                Console.WriteLine ("Enter a value between 0 and 100");
            } else if (i [0] >= 90) {
                Console.WriteLine ("note is A");
            } else if (i [0] >= 80) {
                Console.WriteLine ("note is B");
            } else if (i [0] >= 70) {
                Console.WriteLine ("note is C");
            } else if (i [0] >= 60) {
                Console.WriteLine ("note is D");
            } else if (i [0] < 60) {
                Console.WriteLine ("Failure");
            }
            Console.WriteLine ("Your result is:" + i [0]);
        } while (true);
}
----------------------------------------

 private static void note()
    {
        // define an array 
        int[] i = new int[1]; 
       
        do
        {
            // prompt the user to enter the test result
            Console.WriteLine("Please enter test result");
            int result = Int32.Parse(Console.ReadLine());
           
            // exit the loop if 999 is entered
            if (result == 999)
            {
                Console.WriteLine("You entered 999 to stop");
                break;
            }
           
            // continue to prompt the user if the value is not between 0 and 100
            if (result < 0 || result > 100)
            {
                Console.WriteLine("Enter a value between 0 and 100");
                continue;
            }
           
            // evaluate the result and display the message
            if (result >= 90)
            {
                Console.WriteLine("mark is A");
            }
            else if (result >= 80)
            {
                Console.WriteLine("mark is B");
            }
            else if (result >= 70)
            {
                Console.WriteLine("mark is C");
            }
            else if (result >= 60)
            {
                Console.WriteLine("mark is D");
            }
            else
            {
                Console.WriteLine("Failure");
            }
           
            Console.WriteLine("Your result is:" + result);
        }
        while (true);
    }
 private static void note(){ 
	int [] i = new int[1]; 
	do{ 
		Console.WriteLine("Please enter test result"); 
		int result = Int32.Parse(Console.ReadLine()); 
		if(result == 999){ 
			Console.WriteLine("You have entered 999 to exit"); 
			break; 
		} 
		if(result < 0 || result > 100){ 
			Console.WriteLine("Please enter a valid value between 0 and 100"); 
			continue; 
		} 
		if(result >= 90){ 
			Console.WriteLine("The result is A"); 
		} 
		else if(result >= 80){ 
			Console.WriteLine("The result is B"); 
		} 
		else if(result >= 70){ 
			Console.WriteLine("The result is C"); 
		} 
		else if(result >= 60){ 
			Console.WriteLine("The result is D"); 
		} 
		else{ 
			Console.WriteLine("Failure"); 
		} 
		Console.WriteLine("Your result is: " + result); 
	} 
	while(true); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
481
3
Gpt3D_Clone481_3.cs 1 29
Gpt3D_Clone481_3.cs 30 62
----------------------------------------

private static void note () {
    int [] i = new int [1];
    do
        {
            Console.WriteLine ("Please enter test result");
            bool result = int.TryParse (Console.ReadLine (), out i [0]);
            if (! result) {
                Console.WriteLine ("Please enter a number");
                continue;
            }
            if (i [0] == 999) {
                Console.WriteLine ("You entered 999 to stop");
                break;
            } else if (i [0] < 0 || i [0] > 100) {
                Console.WriteLine ("Enter a value between 0 and 100");
            } else if (i [0] >= 90) {
                Console.WriteLine ("note is A");
            } else if (i [0] >= 80) {
                Console.WriteLine ("note is B");
            } else if (i [0] >= 70) {
                Console.WriteLine ("note is C");
            } else if (i [0] >= 60) {
                Console.WriteLine ("note is D");
            } else if (i [0] < 60) {
                Console.WriteLine ("Failure");
            }
            Console.WriteLine ("Your result is:" + i [0]);
        } while (true);
}
----------------------------------------

 private static void note(){
	int[] i = new int[1];
	do{
		Console.WriteLine("Please enter test result: ");
		int result = Int32.Parse(Console.ReadLine());
		if(result == 999){
			Console.WriteLine("You have entered 999 to exit");
			break;
		}
		if(result < 0 || result > 100){
			Console.WriteLine("Please enter a number between 0 and 100");
			continue;
		}
		if(result >= 90){
			Console.WriteLine("Note is A");
		}
		else if(result >= 80){
			Console.WriteLine("Note is B");
		}
		else if(result >= 70){
			Console.WriteLine("Note is C");
		}
		else if(result >= 60){
			Console.WriteLine("Note is D");
		}
		else {
			Console.WriteLine("Failure");
		}
		Console.WriteLine("Your result is: " + result);
	} while(true);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
481
4
Gpt3D_Clone481_4.cs 1 29
Gpt3D_Clone481_4.cs 30 70
----------------------------------------

private static void note () {
    int [] i = new int [1];
    do
        {
            Console.WriteLine ("Please enter test result");
            bool result = int.TryParse (Console.ReadLine (), out i [0]);
            if (! result) {
                Console.WriteLine ("Please enter a number");
                continue;
            }
            if (i [0] == 999) {
                Console.WriteLine ("You entered 999 to stop");
                break;
            } else if (i [0] < 0 || i [0] > 100) {
                Console.WriteLine ("Enter a value between 0 and 100");
            } else if (i [0] >= 90) {
                Console.WriteLine ("note is A");
            } else if (i [0] >= 80) {
                Console.WriteLine ("note is B");
            } else if (i [0] >= 70) {
                Console.WriteLine ("note is C");
            } else if (i [0] >= 60) {
                Console.WriteLine ("note is D");
            } else if (i [0] < 60) {
                Console.WriteLine ("Failure");
            }
            Console.WriteLine ("Your result is:" + i [0]);
        } while (true);
}
----------------------------------------

 private static void note(){
	// Create an Integer array with size 1 
	int[] i = new int[1]; 
	// Start do-while loop
	do{ 
		// Ask the user to enter the test result 
		Console.WriteLine("Please enter test result"); 
		int result = Int32.Parse(Console.ReadLine()); 
		// If the user enters 999, break out of the loop 
		if(result == 999){ 
			Console.WriteLine("You entered 999 to stop"); 
			break; 
		} 
		// If the result is not between 0 and 100, ask the user to enter a valid value 
		if(result < 0 || result > 100){ 
			Console.WriteLine("Enter a value between 0 and 100"); 
			continue; 
		}
		// Display the result based on the entered value 
		if(result >= 90){ 
			Console.WriteLine("Score is A"); 
		} 
		else if(result >= 80){ 
			Console.WriteLine("Score is B"); 
		} 
		else if(result >= 70){ 
			Console.WriteLine("Score is C"); 
		} 
		else if(result >= 60){ 
			Console.WriteLine("Score is D"); 
		} 
		else{ 
			Console.WriteLine("Failure"); 
		} 
		// Display the result given by the user 
		Console.WriteLine("Your result is:" + result); 
	} 
	while(true);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
481
5
Gpt3D_Clone481_5.cs 1 29
Gpt3D_Clone481_5.cs 30 63
----------------------------------------

private static void note () {
    int [] i = new int [1];
    do
        {
            Console.WriteLine ("Please enter test result");
            bool result = int.TryParse (Console.ReadLine (), out i [0]);
            if (! result) {
                Console.WriteLine ("Please enter a number");
                continue;
            }
            if (i [0] == 999) {
                Console.WriteLine ("You entered 999 to stop");
                break;
            } else if (i [0] < 0 || i [0] > 100) {
                Console.WriteLine ("Enter a value between 0 and 100");
            } else if (i [0] >= 90) {
                Console.WriteLine ("note is A");
            } else if (i [0] >= 80) {
                Console.WriteLine ("note is B");
            } else if (i [0] >= 70) {
                Console.WriteLine ("note is C");
            } else if (i [0] >= 60) {
                Console.WriteLine ("note is D");
            } else if (i [0] < 60) {
                Console.WriteLine ("Failure");
            }
            Console.WriteLine ("Your result is:" + i [0]);
        } while (true);
}
----------------------------------------

 private static void note(){ 
	int [] i = new int[1]; 
	do{ 
		Console.WriteLine("Please enter test result"); 
		int result = Int32.Parse(Console.ReadLine()); 
		if(result == 999){ 
			Console.WriteLine("You have entered 999 to stop"); 
			break; 
		} 
		if(result < 0){ 
			Console.WriteLine("Enter a value between 0 and 100"); 
			continue; 
		} 
		if(result >= 90){ 
			Console.WriteLine("Grade is A"); 
		} 
		else if(result >= 80){ 
			Console.WriteLine("Grade is B"); 
		} 
		else if(result >= 70){ 
			Console.WriteLine("Grade is C"); 
		} 
		else if(result >= 60){ 
			Console.WriteLine("Grade is D"); 
		} 
		else{ 
			Console.WriteLine("Failure"); 
		} 
		Console.WriteLine("Your Result is: " + result); 
	} 
	while(true);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
481
6
Gpt3D_Clone481_6.cs 1 29
Gpt3D_Clone481_6.cs 30 59
----------------------------------------

private static void note () {
    int [] i = new int [1];
    do
        {
            Console.WriteLine ("Please enter test result");
            bool result = int.TryParse (Console.ReadLine (), out i [0]);
            if (! result) {
                Console.WriteLine ("Please enter a number");
                continue;
            }
            if (i [0] == 999) {
                Console.WriteLine ("You entered 999 to stop");
                break;
            } else if (i [0] < 0 || i [0] > 100) {
                Console.WriteLine ("Enter a value between 0 and 100");
            } else if (i [0] >= 90) {
                Console.WriteLine ("note is A");
            } else if (i [0] >= 80) {
                Console.WriteLine ("note is B");
            } else if (i [0] >= 70) {
                Console.WriteLine ("note is C");
            } else if (i [0] >= 60) {
                Console.WriteLine ("note is D");
            } else if (i [0] < 60) {
                Console.WriteLine ("Failure");
            }
            Console.WriteLine ("Your result is:" + i [0]);
        } while (true);
}
----------------------------------------

 private static void note(){ 
	int [] i = new int[1]; 
	do{ 
		Console.WriteLine("Please enter test result:"); 
		int result = Int32.Parse(Console.ReadLine()); 
		if(result == 999){ 
			Console.WriteLine("You have entered 999 to stop"); 
			break; 
		} 
		if(result < 0 || result > 100){ 
			Console.WriteLine("Please enter a valid value between 0 and 100"); 
			continue; 
		} 
		if(result >= 90){ 
			Console.WriteLine("The grade is A"); 
		} else if(result >= 80){ 
			Console.WriteLine("The grade is B"); 
		} else if(result >= 70){ 
			Console.WriteLine("The grade is C"); 
		} else if(result >= 60){ 
			Console.WriteLine("The grade is D"); 
		} else { 
			Console.WriteLine("Failure"); 
		} 
		Console.WriteLine("Your result is: " + result); 
	} 
	while(true); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
481
7
Gpt3D_Clone481_7.cs 1 29
Gpt3D_Clone481_7.cs 30 62
----------------------------------------

private static void note () {
    int [] i = new int [1];
    do
        {
            Console.WriteLine ("Please enter test result");
            bool result = int.TryParse (Console.ReadLine (), out i [0]);
            if (! result) {
                Console.WriteLine ("Please enter a number");
                continue;
            }
            if (i [0] == 999) {
                Console.WriteLine ("You entered 999 to stop");
                break;
            } else if (i [0] < 0 || i [0] > 100) {
                Console.WriteLine ("Enter a value between 0 and 100");
            } else if (i [0] >= 90) {
                Console.WriteLine ("note is A");
            } else if (i [0] >= 80) {
                Console.WriteLine ("note is B");
            } else if (i [0] >= 70) {
                Console.WriteLine ("note is C");
            } else if (i [0] >= 60) {
                Console.WriteLine ("note is D");
            } else if (i [0] < 60) {
                Console.WriteLine ("Failure");
            }
            Console.WriteLine ("Your result is:" + i [0]);
        } while (true);
}
----------------------------------------

 private static void note(){
	int [] i = new int[1];
	do
		{
			Console.WriteLine ("Please enter test result");
			int result = Int32.Parse(Console.ReadLine ());
			if (result == 999) {
				Console.WriteLine ("You entered 999 to stop");
				break;
			}
			else if (result < 0 || result > 100) {
				Console.WriteLine("Enter a value between 0 and 100");
			}
			else if (result >= 90) {
				Console.WriteLine("Score is A");
			}
			else if (result >= 80) {
				Console.WriteLine("Score is B");
			}
			else if (result >= 70) {
				Console.WriteLine("Score is C");
			}
			else if (result >= 60) {
				Console.WriteLine("Score is D");
			}
			else {
				Console.WriteLine("Failure");
			}
			Console.WriteLine("Your result is:" + result);
		} while (true);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
481
8
Gpt3D_Clone481_8.cs 1 29
Gpt3D_Clone481_8.cs 30 62
----------------------------------------

private static void note () {
    int [] i = new int [1];
    do
        {
            Console.WriteLine ("Please enter test result");
            bool result = int.TryParse (Console.ReadLine (), out i [0]);
            if (! result) {
                Console.WriteLine ("Please enter a number");
                continue;
            }
            if (i [0] == 999) {
                Console.WriteLine ("You entered 999 to stop");
                break;
            } else if (i [0] < 0 || i [0] > 100) {
                Console.WriteLine ("Enter a value between 0 and 100");
            } else if (i [0] >= 90) {
                Console.WriteLine ("note is A");
            } else if (i [0] >= 80) {
                Console.WriteLine ("note is B");
            } else if (i [0] >= 70) {
                Console.WriteLine ("note is C");
            } else if (i [0] >= 60) {
                Console.WriteLine ("note is D");
            } else if (i [0] < 60) {
                Console.WriteLine ("Failure");
            }
            Console.WriteLine ("Your result is:" + i [0]);
        } while (true);
}
----------------------------------------

 private static void note(){
	int [] i = new int[1];
	do
		{
			Console.WriteLine ("Please enter test result");
			int result = Int32.Parse(Console.ReadLine ());
			if (result == 999) {
				Console.WriteLine ("You entered 999 to stop");
				break;
			}
			else if (result < 0 || result > 100) {
				Console.WriteLine("Enter a value between 0 and 100");
			}
			else if (result >= 90) {
				Console.WriteLine("Grade is A");
			}
			else if (result >= 80) {
				Console.WriteLine("Grade is B");
			}
			else if (result >= 70) {
				Console.WriteLine("Grade is C");
			}
			else if (result >= 60) {
				Console.WriteLine("Grade is D");
			}
			else {
				Console.WriteLine("Failure");
			}
			Console.WriteLine("Your result is:" + result);
		} while (true);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
482
2
Gpt3D_Clone482_2.cs 1 10
Gpt3D_Clone482_2.cs 11 23
----------------------------------------

public static int Next (int min, int max) {
    if (min >= max) {
        throw new ArgumentException ("Min value is greater or equals than Max value.");
    }
    byte [] intBytes = new byte [4];
    using (RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ())
    {
        rng.GetNonZeroBytes (intBytes);
    } return min + Math.Abs (BitConverter.ToInt32 (intBytes, 0)) % (max - min + 1);
}
----------------------------------------

 public static int Next (int min, int max) {
    if (min >= max) {
        throw new ArgumentException ("Min value is greater or equals than Max value.");
    }
    int range = max - min + 1;
    byte [] intBytes = new byte [4];
    Random rand = new Random();
    rand.NextBytes(intBytes);
    int randomNumber = min + Math.Abs (BitConverter.ToInt32 (intBytes, 0)) % range; 
    return randomNumber; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
482
3
Gpt3D_Clone482_3.cs 1 10
Gpt3D_Clone482_3.cs 11 21
----------------------------------------

public static int Next (int min, int max) {
    if (min >= max) {
        throw new ArgumentException ("Min value is greater or equals than Max value.");
    }
    byte [] intBytes = new byte [4];
    using (RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ())
    {
        rng.GetNonZeroBytes (intBytes);
    } return min + Math.Abs (BitConverter.ToInt32 (intBytes, 0)) % (max - min + 1);
}
----------------------------------------

 public static int Next (int min, int max) {
    if (min >= max) {
        throw new ArgumentException ("Min value is greater or equals than Max value.");
    }
    byte [] intBytes = new byte [4];
    Random rand = new Random();
    rand.NextBytes(intBytes);
    return min + Math.Abs (BitConverter.ToInt32 (intBytes, 0)) % (max - min + 1); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
482
4
Gpt3D_Clone482_4.cs 1 10
Gpt3D_Clone482_4.cs 11 22
----------------------------------------

public static int Next (int min, int max) {
    if (min >= max) {
        throw new ArgumentException ("Min value is greater or equals than Max value.");
    }
    byte [] intBytes = new byte [4];
    using (RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ())
    {
        rng.GetNonZeroBytes (intBytes);
    } return min + Math.Abs (BitConverter.ToInt32 (intBytes, 0)) % (max - min + 1);
}
----------------------------------------

 public static int Next (int min, int max) {
    if (min >= max) {
        throw new ArgumentException ("Min value is greater or equals than Max value.");
    }
    byte [] intBytes = new byte [4];
    RandomNumberGenerator rng = new RNGCryptoServiceProvider();
    rng.GetBytes(intBytes);
    return min + Math.Abs (BitConverter.ToInt32 (intBytes, 0)) % (max - min + 1); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
482
5
Gpt3D_Clone482_5.cs 1 10
Gpt3D_Clone482_5.cs 11 21
----------------------------------------

public static int Next (int min, int max) {
    if (min >= max) {
        throw new ArgumentException ("Min value is greater or equals than Max value.");
    }
    byte [] intBytes = new byte [4];
    using (RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ())
    {
        rng.GetNonZeroBytes (intBytes);
    } return min + Math.Abs (BitConverter.ToInt32 (intBytes, 0)) % (max - min + 1);
}
----------------------------------------

 public static int Next (int min, int max) {
    if (min >= max) {
        throw new ArgumentException ("Min value is greater or equals than Max value.");
    }
    SecureRandom random = new SecureRandom();
    byte [] intBytes = new byte [4];
    random.NextBytes(intBytes);
    return min + Math.Abs (BitConverter.ToInt32 (intBytes, 0)) % (max - min + 1); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
484
0
Gpt3D_Clone484_0.cs 1 14
Gpt3D_Clone484_0.cs 15 31
----------------------------------------

[WebMethod (EnableSession = true)] [ScriptMethod (ResponseFormat = ResponseFormat.Json)] public dynamic update () {
    if (Session ["user"] == null) {
        Session.Add ("user", new User ());
    }
    User user = (User) Session ["user"];
    user.responseModel = new ResponseModel ();
    if (user.updateListeners.Count > 0) {
        foreach (var updateMethod in user.updateListeners) {
            updateMethod.run ();
        }
        return JSON.Serialize (user.responseModel);
    }
    return null;
}
----------------------------------------

 [WebMethod (EnableSession = true)] [ScriptMethod (ResponseFormat = ResponseFormat.Json)] public dynamic  MyUpdate_9 () {
    if (Session ["user"] == null) {
        Session.Add ("user", new User ());
    }
    User user = (User) Session ["user"];
    user.responseModel = new ResponseModel ();
    int upSize = user.updateListeners.Count;
    if (upSize > 0) {
        for (int i = 0; i <upSize; i++) {
            user.updateListeners[i]().run();
        }
        return JSON.Serialize (user.responseModel);
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
484
1
Gpt3D_Clone484_1.cs 1 14
Gpt3D_Clone484_1.cs 15 31
----------------------------------------

[WebMethod (EnableSession = true)] [ScriptMethod (ResponseFormat = ResponseFormat.Json)] public dynamic update () {
    if (Session ["user"] == null) {
        Session.Add ("user", new User ());
    }
    User user = (User) Session ["user"];
    user.responseModel = new ResponseModel ();
    if (user.updateListeners.Count > 0) {
        foreach (var updateMethod in user.updateListeners) {
            updateMethod.run ();
        }
        return JSON.Serialize (user.responseModel);
    }
    return null;
}
----------------------------------------

 [WebMethod (EnableSession = true)] [ScriptMethod (ResponseFormat = ResponseFormat.Json)] public dynamic  MyUpdate_5 () {
    if (Session ["user"] == null) {
        Session.Add ("user", new User ());
    }
    User user = (User) Session ["user"];
    user.responseModel = new ResponseModel ();
    int numMethods = user.updateListeners.Count;
    if (numMethods > 0) {
        for (int i = 0; i < numMethods; i++) {
            user.updateListeners[i]();
        }
        return JSON.Serialize (user.responseModel);
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
484
2
Gpt3D_Clone484_2.cs 1 14
Gpt3D_Clone484_2.cs 15 31
----------------------------------------

[WebMethod (EnableSession = true)] [ScriptMethod (ResponseFormat = ResponseFormat.Json)] public dynamic update () {
    if (Session ["user"] == null) {
        Session.Add ("user", new User ());
    }
    User user = (User) Session ["user"];
    user.responseModel = new ResponseModel ();
    if (user.updateListeners.Count > 0) {
        foreach (var updateMethod in user.updateListeners) {
            updateMethod.run ();
        }
        return JSON.Serialize (user.responseModel);
    }
    return null;
}
----------------------------------------

 [WebMethod (EnableSession = true)] [ScriptMethod (ResponseFormat = ResponseFormat.Json)] public dynamic  MyUpdate_8 () {
    if (!Session.ContainsKey("user")) {
        Session["user"] = new User ();
    }
    User user = (User) Session ["user"];
    user.responseModel = new ResponseModel ();
    int numUpdates = user.updateListeners.Count;
    if (numUpdates > 0) {
        foreach( var updateMethod in user.updateListeners)  {
            updateMethod.run();
        }
        return JSON.Serialize (user.responseModel);
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
484
3
Gpt3D_Clone484_3.cs 1 14
Gpt3D_Clone484_3.cs 15 31
----------------------------------------

[WebMethod (EnableSession = true)] [ScriptMethod (ResponseFormat = ResponseFormat.Json)] public dynamic update () {
    if (Session ["user"] == null) {
        Session.Add ("user", new User ());
    }
    User user = (User) Session ["user"];
    user.responseModel = new ResponseModel ();
    if (user.updateListeners.Count > 0) {
        foreach (var updateMethod in user.updateListeners) {
            updateMethod.run ();
        }
        return JSON.Serialize (user.responseModel);
    }
    return null;
}
----------------------------------------

 [WebMethod (EnableSession = true)] [ScriptMethod (ResponseFormat = ResponseFormat.Json)] public dynamic  MyUpdate_6 () {
    if (!Session.ContainsKey("user")) {
        Session.Add ("user", new User ());
    }
    User user = (User) Session ["user"];
    user.responseModel = new ResponseModel ();
    int listSize = user.updateListeners.Count;
    if (listSize > 0) {
        for (int i = 0; i < listSize; i++) {
            user.updateListeners[i]();
        }
        return JSON.Serialize (user.responseModel);
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
484
4
Gpt3D_Clone484_4.cs 1 14
Gpt3D_Clone484_4.cs 15 31
----------------------------------------

[WebMethod (EnableSession = true)] [ScriptMethod (ResponseFormat = ResponseFormat.Json)] public dynamic update () {
    if (Session ["user"] == null) {
        Session.Add ("user", new User ());
    }
    User user = (User) Session ["user"];
    user.responseModel = new ResponseModel ();
    if (user.updateListeners.Count > 0) {
        foreach (var updateMethod in user.updateListeners) {
            updateMethod.run ();
        }
        return JSON.Serialize (user.responseModel);
    }
    return null;
}
----------------------------------------

 [WebMethod (EnableSession = true)] [ScriptMethod (ResponseFormat = ResponseFormat.Json)] public dynamic  MyUpdate_10 () {
    if (!Session.ContainsKey("user")) {
        Session["user"] = new User ();
    }
    User user = (User) Session ["user"];
    user.responseModel = new ResponseModel ();
    int updateCount = user.updateListeners.Count;
    if (updateCount > 0) {
        for (int i = 0; i < updateCount; i++) {
            user.updateListeners[i]().run();
        }
        return JSON.Serialize (user.responseModel);
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
484
5
Gpt3D_Clone484_5.cs 1 14
Gpt3D_Clone484_5.cs 15 31
----------------------------------------

[WebMethod (EnableSession = true)] [ScriptMethod (ResponseFormat = ResponseFormat.Json)] public dynamic update () {
    if (Session ["user"] == null) {
        Session.Add ("user", new User ());
    }
    User user = (User) Session ["user"];
    user.responseModel = new ResponseModel ();
    if (user.updateListeners.Count > 0) {
        foreach (var updateMethod in user.updateListeners) {
            updateMethod.run ();
        }
        return JSON.Serialize (user.responseModel);
    }
    return null;
}
----------------------------------------

 [WebMethod (EnableSession = true)] [ScriptMethod (ResponseFormat = ResponseFormat.Json)] public dynamic  MyUpdate_2 () {
    if (!Session.ContainsKey("user")) {
        Session.Add ("user", new User ());
    }
    User user = (User) Session ["user"];
    user.responseModel = new ResponseModel ();
    int size = user.updateListeners.Count;
    if (size > 0) {
        for (int i = 0; i < size; i++) {
            user.updateListeners[i].run ();
        }
        return JSON.Serialize (user.responseModel);
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
484
6
Gpt3D_Clone484_6.cs 1 14
Gpt3D_Clone484_6.cs 15 28
----------------------------------------

[WebMethod (EnableSession = true)] [ScriptMethod (ResponseFormat = ResponseFormat.Json)] public dynamic update () {
    if (Session ["user"] == null) {
        Session.Add ("user", new User ());
    }
    User user = (User) Session ["user"];
    user.responseModel = new ResponseModel ();
    if (user.updateListeners.Count > 0) {
        foreach (var updateMethod in user.updateListeners) {
            updateMethod.run ();
        }
        return JSON.Serialize (user.responseModel);
    }
    return null;
}
----------------------------------------

 [WebMethod (EnableSession = true)] [ScriptMethod (ResponseFormat = ResponseFormat.Json)] public dynamic  MyUpdate_7 () {
    if (Session ["user"] == null) {
        Session["user"] = new User ();
    }
    User user = (User) Session ["user"];
    user.responseModel = new ResponseModel ();
    if (user.updateListeners.Count > 0) {
        user.updateListeners.ForEach(method => method.run());
        return JSON.Serialize (user.responseModel);
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
484
7
Gpt3D_Clone484_7.cs 1 14
Gpt3D_Clone484_7.cs 15 28
----------------------------------------

[WebMethod (EnableSession = true)] [ScriptMethod (ResponseFormat = ResponseFormat.Json)] public dynamic update () {
    if (Session ["user"] == null) {
        Session.Add ("user", new User ());
    }
    User user = (User) Session ["user"];
    user.responseModel = new ResponseModel ();
    if (user.updateListeners.Count > 0) {
        foreach (var updateMethod in user.updateListeners) {
            updateMethod.run ();
        }
        return JSON.Serialize (user.responseModel);
    }
    return null;
}
----------------------------------------

 [WebMethod (EnableSession = true)] [ScriptMethod (ResponseFormat = ResponseFormat.Json)] public dynamic  MyUpdate_4 () {
    if (!Session.ContainsKey("user")) {
        Session["user"] = new User ();
    }
    User user = (User) Session ["user"];
    user.responseModel = new ResponseModel ();
    if (user.updateListeners.Count > 0) {
        user.updateListeners.ForEach(updateMethod => updateMethod());
        return JSON.Serialize (user.responseModel);
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
484
8
Gpt3D_Clone484_8.cs 1 14
Gpt3D_Clone484_8.cs 15 28
----------------------------------------

[WebMethod (EnableSession = true)] [ScriptMethod (ResponseFormat = ResponseFormat.Json)] public dynamic update () {
    if (Session ["user"] == null) {
        Session.Add ("user", new User ());
    }
    User user = (User) Session ["user"];
    user.responseModel = new ResponseModel ();
    if (user.updateListeners.Count > 0) {
        foreach (var updateMethod in user.updateListeners) {
            updateMethod.run ();
        }
        return JSON.Serialize (user.responseModel);
    }
    return null;
}
----------------------------------------

 [WebMethod (EnableSession = true)] [ScriptMethod (ResponseFormat = ResponseFormat.Json)] public dynamic  MyUpdate_3 () {
    if (Session ["user"] == null) {
        Session["user"] = new User ();
    }
    User user = (User) Session ["user"];
    user.responseModel = new ResponseModel ();
    if (user.updateListeners.Count > 0) {
        user.updateListeners.ForEach(updateMethod => updateMethod.run());
        return JSON.Serialize (user.responseModel);
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
485
0
Gpt3D_Clone485_0.cs 1 29
Gpt3D_Clone485_0.cs 30 61
----------------------------------------

public void Send () {
    if (String.IsNullOrEmpty (Server)) {
        throw new PreferenceNotSetException ("Server not set");
    }
    if (String.IsNullOrEmpty (From)) {
        throw new PreferenceNotSetException ("Sender's E-Mail address not set.");
    }
    if (String.IsNullOrEmpty (To)) {
        throw new PreferenceNotSetException ("Recipient's E-Mail address not set.");
    }
    using (MailMessage message = new MailMessage (From, To, Subject, FormattedText))
    {
        message.IsBodyHtml = true;
        using (SmtpClient client = new SmtpClient (Server))
        {
            client.DeliveryMethod = SmtpDeliveryMethod.Network;
            int temp = ServicePointManager.MaxServicePointIdleTime;
            ServicePointManager.MaxServicePointIdleTime = 1;
            try {
                client.Send (message);
            }
            catch (Exception ex) {
                MessageBox.Show (ex.ToString ());
            }
            finally {
                ServicePointManager.MaxServicePointIdleTime = temp;
            }
        }}
}
----------------------------------------

 public void Send () {
    string serverName = Server;
    string fromAddress = From;
    string toAddress = To;
    if(String.IsNullOrEmpty(serverName)) {
        throw new PreferenceNotSetException("Server not set");
    }
    if (String.IsNullOrEmpty(fromAddress)){
        throw new PreferenceNotSetException("Sender's E-Mail address not set.");
    }
    if (String.IsNullOrEmpty(toAddress)){
        throw new PreferenceNotSetException("Recipient's E-Mail address not set.");
    }
    using (MailMessage mail = new MailMessage(fromAddress, toAddress, Subject, FormattedText)) {
        int maxServicePointIdleTime = ServicePointManager.MaxServicePointIdleTime;
        ServicePointManager.MaxServicePointIdleTime = 1;
        try {
            mail.IsBodyHtml = true;
            using (SmtpClient client = new SmtpClient(serverName)) {
                client.DeliveryMethod = SmtpDeliveryMethod.Network;
                client.Send(mail);
            }
        } catch (Exception ex) {
            MessageBox.Show(ex.ToString());
        } finally {
            ServicePointManager.MaxServicePointIdleTime = maxServicePointIdleTime;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
485
1
Gpt3D_Clone485_1.cs 1 29
Gpt3D_Clone485_1.cs 30 57
----------------------------------------

public void Send () {
    if (String.IsNullOrEmpty (Server)) {
        throw new PreferenceNotSetException ("Server not set");
    }
    if (String.IsNullOrEmpty (From)) {
        throw new PreferenceNotSetException ("Sender's E-Mail address not set.");
    }
    if (String.IsNullOrEmpty (To)) {
        throw new PreferenceNotSetException ("Recipient's E-Mail address not set.");
    }
    using (MailMessage message = new MailMessage (From, To, Subject, FormattedText))
    {
        message.IsBodyHtml = true;
        using (SmtpClient client = new SmtpClient (Server))
        {
            client.DeliveryMethod = SmtpDeliveryMethod.Network;
            int temp = ServicePointManager.MaxServicePointIdleTime;
            ServicePointManager.MaxServicePointIdleTime = 1;
            try {
                client.Send (message);
            }
            catch (Exception ex) {
                MessageBox.Show (ex.ToString ());
            }
            finally {
                ServicePointManager.MaxServicePointIdleTime = temp;
            }
        }}
}
----------------------------------------

 public void Send()
    {
        if(String.IsNullOrEmpty(Server))
            throw new PreferenceNotSetException("Server not set");
        if (String.IsNullOrEmpty(From))
            throw new PreferenceNotSetException("Sender's E-Mail address not set.");
        if (String.IsNullOrEmpty(To))
            throw new PreferenceNotSetException("Recipient's E-Mail address not set.");
        
        using (MailMessage message = new MailMessage(From, To, Subject, FormattedText))
        {
            try
            {
                message.IsBodyHtml = true;
                SmtpClient client = new SmtpClient(Server);
                client.DeliveryMethod = SmtpDeliveryMethod.Network;
                client.Send(message);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
485
2
Gpt3D_Clone485_2.cs 1 29
Gpt3D_Clone485_2.cs 30 60
----------------------------------------

public void Send () {
    if (String.IsNullOrEmpty (Server)) {
        throw new PreferenceNotSetException ("Server not set");
    }
    if (String.IsNullOrEmpty (From)) {
        throw new PreferenceNotSetException ("Sender's E-Mail address not set.");
    }
    if (String.IsNullOrEmpty (To)) {
        throw new PreferenceNotSetException ("Recipient's E-Mail address not set.");
    }
    using (MailMessage message = new MailMessage (From, To, Subject, FormattedText))
    {
        message.IsBodyHtml = true;
        using (SmtpClient client = new SmtpClient (Server))
        {
            client.DeliveryMethod = SmtpDeliveryMethod.Network;
            int temp = ServicePointManager.MaxServicePointIdleTime;
            ServicePointManager.MaxServicePointIdleTime = 1;
            try {
                client.Send (message);
            }
            catch (Exception ex) {
                MessageBox.Show (ex.ToString ());
            }
            finally {
                ServicePointManager.MaxServicePointIdleTime = temp;
            }
        }}
}
----------------------------------------

 public void Send()
    {
        if(String.IsNullOrEmpty(Server))
            throw new PreferenceNotSetException("Server not set");
        if (String.IsNullOrEmpty(From))
            throw new PreferenceNotSetException("Sender's E-Mail address not set.");
        if (String.IsNullOrEmpty(To))
            throw new PreferenceNotSetException("Recipient's E-Mail address not set.");
        
        using (MailMessage message = new MailMessage(From, To, Subject, FormattedText))
        {
            try
            {
                message.IsBodyHtml = true;
                using (SmtpClient client = new SmtpClient(Server))
                {
                    client.DeliveryMethod = SmtpDeliveryMethod.Network;
                    ServicePointManager.MaxServicePointIdleTime  = 1;
                    client.Send(message);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
485
3
Gpt3D_Clone485_3.cs 1 29
Gpt3D_Clone485_3.cs 30 66
----------------------------------------

public void Send () {
    if (String.IsNullOrEmpty (Server)) {
        throw new PreferenceNotSetException ("Server not set");
    }
    if (String.IsNullOrEmpty (From)) {
        throw new PreferenceNotSetException ("Sender's E-Mail address not set.");
    }
    if (String.IsNullOrEmpty (To)) {
        throw new PreferenceNotSetException ("Recipient's E-Mail address not set.");
    }
    using (MailMessage message = new MailMessage (From, To, Subject, FormattedText))
    {
        message.IsBodyHtml = true;
        using (SmtpClient client = new SmtpClient (Server))
        {
            client.DeliveryMethod = SmtpDeliveryMethod.Network;
            int temp = ServicePointManager.MaxServicePointIdleTime;
            ServicePointManager.MaxServicePointIdleTime = 1;
            try {
                client.Send (message);
            }
            catch (Exception ex) {
                MessageBox.Show (ex.ToString ());
            }
            finally {
                ServicePointManager.MaxServicePointIdleTime = temp;
            }
        }}
}
----------------------------------------

 public void Send ()
{
    if(String.IsNullOrEmpty(Server))
        throw new PreferenceNotSetException("Server not set");
    if (String.IsNullOrEmpty(From))
        throw new PreferenceNotSetException("Sender's E-Mail address not set.");
    if (String.IsNullOrEmpty(To))
        throw new PreferenceNotSetException("Recipient's E-Mail address not set.");
    
    using (MailMessage message = new MailMessage(From, To, Subject, FormattedText))
    {
        int temp = ServicePointManager.MaxServicePointIdleTime;
        try
        {
            message.IsBodyHtml = true;
            using (SmtpClient client = new SmtpClient(Server))
            {
                ServicePointManager.MaxServicePointIdleTime = 1;
                client.DeliveryMethod = SmtpDeliveryMethod.Network;
                client.Send(message);
            }
        }
        catch (Exception ex)
        {
            MessageBox.Show(ex.ToString());
        }
        finally
        {
            ServicePointManager.MaxServicePointIdleTime = temp;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
485
4
Gpt3D_Clone485_4.cs 1 29
Gpt3D_Clone485_4.cs 30 61
----------------------------------------

public void Send () {
    if (String.IsNullOrEmpty (Server)) {
        throw new PreferenceNotSetException ("Server not set");
    }
    if (String.IsNullOrEmpty (From)) {
        throw new PreferenceNotSetException ("Sender's E-Mail address not set.");
    }
    if (String.IsNullOrEmpty (To)) {
        throw new PreferenceNotSetException ("Recipient's E-Mail address not set.");
    }
    using (MailMessage message = new MailMessage (From, To, Subject, FormattedText))
    {
        message.IsBodyHtml = true;
        using (SmtpClient client = new SmtpClient (Server))
        {
            client.DeliveryMethod = SmtpDeliveryMethod.Network;
            int temp = ServicePointManager.MaxServicePointIdleTime;
            ServicePointManager.MaxServicePointIdleTime = 1;
            try {
                client.Send (message);
            }
            catch (Exception ex) {
                MessageBox.Show (ex.ToString ());
            }
            finally {
                ServicePointManager.MaxServicePointIdleTime = temp;
            }
        }}
}
----------------------------------------

 public void Send()
    {
        if(String.IsNullOrEmpty(Server))
            throw new PreferenceNotSetException("Server not set");
        if (String.IsNullOrEmpty(From))
            throw new PreferenceNotSetException("Sender's E-Mail address not set.");
        if (String.IsNullOrEmpty(To))
            throw new PreferenceNotSetException("Recipient's E-Mail address not set.");
        
        using (MailMessage message = new MailMessage(From, To, Subject, FormattedText))
        {
            try
            {
                message.IsBodyHtml = true;
                using (SmtpClient client = new SmtpClient(Server))
                {
                    client.DeliveryMethod = SmtpDeliveryMethod.Network;
                    ServicePointManager.MaxServicePointIdleTime  = 1;
                    client.Send(message);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
485
5
Gpt3D_Clone485_5.cs 1 29
Gpt3D_Clone485_5.cs 30 57
----------------------------------------

public void Send () {
    if (String.IsNullOrEmpty (Server)) {
        throw new PreferenceNotSetException ("Server not set");
    }
    if (String.IsNullOrEmpty (From)) {
        throw new PreferenceNotSetException ("Sender's E-Mail address not set.");
    }
    if (String.IsNullOrEmpty (To)) {
        throw new PreferenceNotSetException ("Recipient's E-Mail address not set.");
    }
    using (MailMessage message = new MailMessage (From, To, Subject, FormattedText))
    {
        message.IsBodyHtml = true;
        using (SmtpClient client = new SmtpClient (Server))
        {
            client.DeliveryMethod = SmtpDeliveryMethod.Network;
            int temp = ServicePointManager.MaxServicePointIdleTime;
            ServicePointManager.MaxServicePointIdleTime = 1;
            try {
                client.Send (message);
            }
            catch (Exception ex) {
                MessageBox.Show (ex.ToString ());
            }
            finally {
                ServicePointManager.MaxServicePointIdleTime = temp;
            }
        }}
}
----------------------------------------

 public void Send()
    {
        if(String.IsNullOrEmpty(Server))
            throw new PreferenceNotSetException("Server not set");
        if (String.IsNullOrEmpty(From))
            throw new PreferenceNotSetException("Sender's E-Mail address not set.");
        if (String.IsNullOrEmpty(To))
            throw new PreferenceNotSetException("Recipient's E-Mail address not set.");
        
        using (MailMessage message = new MailMessage(From, To, Subject, FormattedText))
        {
            try
            {
                message.IsBodyHtml = true;
                SmtpClient client = new SmtpClient(Server);
                client.DeliveryMethod = SmtpDeliveryMethod.Network;
                client.Send(message);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
485
6
Gpt3D_Clone485_6.cs 1 29
Gpt3D_Clone485_6.cs 30 62
----------------------------------------

public void Send () {
    if (String.IsNullOrEmpty (Server)) {
        throw new PreferenceNotSetException ("Server not set");
    }
    if (String.IsNullOrEmpty (From)) {
        throw new PreferenceNotSetException ("Sender's E-Mail address not set.");
    }
    if (String.IsNullOrEmpty (To)) {
        throw new PreferenceNotSetException ("Recipient's E-Mail address not set.");
    }
    using (MailMessage message = new MailMessage (From, To, Subject, FormattedText))
    {
        message.IsBodyHtml = true;
        using (SmtpClient client = new SmtpClient (Server))
        {
            client.DeliveryMethod = SmtpDeliveryMethod.Network;
            int temp = ServicePointManager.MaxServicePointIdleTime;
            ServicePointManager.MaxServicePointIdleTime = 1;
            try {
                client.Send (message);
            }
            catch (Exception ex) {
                MessageBox.Show (ex.ToString ());
            }
            finally {
                ServicePointManager.MaxServicePointIdleTime = temp;
            }
        }}
}
----------------------------------------

 public void Send () 
{
    if(String.IsNullOrEmpty (Server)) 
    {
        throw new PreferenceNotSetException("Server not set");
    }
    if (String.IsNullOrEmpty (From)) 
    {
        throw new PreferenceNotSetException("Sender's E-Mail address not set.");
    }
    if (String.IsNullOrEmpty (To)) 
    {
        throw new PreferenceNotSetException("Recipient's E-Mail address not set.");
    }
    MailMessage message = new MailMessage(From, To, Subject, FormattedText);
    try {
            message.IsBodyHtml = true;
            SmtpClient client = new SmtpClient(Server);
            client.DeliveryMethod = SmtpDeliveryMethod.Network;
            client.Send(message);
    }
    catch (Exception ex)
    {
        MessageBox.Show(ex.ToString());
    }
        
    
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
489
0
Gpt3D_Clone489_0.cs 1 17
Gpt3D_Clone489_0.cs 18 47
----------------------------------------

[HttpGet] [Route ("api/{Controller}")] public IHttpActionResult Post (TEntity entity) {
    if (! ModelState.IsValid) {
        return BadRequest (ModelState);
    }
    try {
        var primaryKeyValue = GetPrimaryKeyValue (entity);
        var primaryKeyName = GetPrimaryKeyName (entity);
        var existing = db.Set < TEntity > ().Find (primaryKeyValue);
        ReflectionHelper.Copy (entity, existing, primaryKeyName);
        db.Entry < TEntity > (existing).State = EntityState.Modified;
        db.SaveChanges ();
        return Ok (entity);
    }
    catch (Exception ex) {
        return InternalServerError (ex);
    }
}
----------------------------------------

 [HttpPut] [Route("api/{Controller}")] public IHttpActionResult Put(TEntity entity) {
    try {
        if (!ModelState.IsValid) {
            return BadRequest(ModelState);
        }
        var primaryKeyValue = GetPrimaryKeyValue(entity);
        TEntity existingEntity = db.Set<TEntity>().Find(primaryKeyValue);
        var newProperties = entity.GetType().GetProperties();
        var oldProperties = existingEntity.GetType().GetProperties();
        foreach (var newProp in newProperties)
        {
            foreach (var oldProp in oldProperties)
            {
                if (newProp.Name == oldProp.Name && newProp.PropertyType == oldProp.PropertyType)
                {
                    oldProp.SetValue(existingEntity, newProp.GetValue(entity));
                    break;
                }
            }
        }
        db.Entry(existingEntity).State = EntityState.Modified;
        db.SaveChanges();
        return Ok(existingEntity);
    }
    catch (Exception ex) {
        return InternalServerError(ex);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
489
1
Gpt3D_Clone489_1.cs 1 17
Gpt3D_Clone489_1.cs 18 41
----------------------------------------

[HttpGet] [Route ("api/{Controller}")] public IHttpActionResult Post (TEntity entity) {
    if (! ModelState.IsValid) {
        return BadRequest (ModelState);
    }
    try {
        var primaryKeyValue = GetPrimaryKeyValue (entity);
        var primaryKeyName = GetPrimaryKeyName (entity);
        var existing = db.Set < TEntity > ().Find (primaryKeyValue);
        ReflectionHelper.Copy (entity, existing, primaryKeyName);
        db.Entry < TEntity > (existing).State = EntityState.Modified;
        db.SaveChanges ();
        return Ok (entity);
    }
    catch (Exception ex) {
        return InternalServerError (ex);
    }
}
----------------------------------------

 [HttpPut] [Route("api/{Controller}")] public IHttpActionResult Put(TEntity entity) {
    if (!ModelState.IsValid) {
        return BadRequest(ModelState);
    }
    try {
        TEntity existingEntity = db.Set<TEntity>().SingleOrDefault(e => e.Id == entity.Id);
        if (existingEntity == null) {
            entity.Id = GenerateId();
            db.Set<TEntity>().Add(entity);
        }
        else {
            existingEntity = entity;
            db.Entry(existingEntity).State = EntityState.Modified;
        }
        db.SaveChanges();
        return Ok(entity);
    }
    catch (Exception ex) {
        return InternalServerError(ex);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
489
2
Gpt3D_Clone489_2.cs 1 17
Gpt3D_Clone489_2.cs 18 43
----------------------------------------

[HttpGet] [Route ("api/{Controller}")] public IHttpActionResult Post (TEntity entity) {
    if (! ModelState.IsValid) {
        return BadRequest (ModelState);
    }
    try {
        var primaryKeyValue = GetPrimaryKeyValue (entity);
        var primaryKeyName = GetPrimaryKeyName (entity);
        var existing = db.Set < TEntity > ().Find (primaryKeyValue);
        ReflectionHelper.Copy (entity, existing, primaryKeyName);
        db.Entry < TEntity > (existing).State = EntityState.Modified;
        db.SaveChanges ();
        return Ok (entity);
    }
    catch (Exception ex) {
        return InternalServerError (ex);
    }
}
----------------------------------------

 [HttpPut] [Route("api/{Controller}")] public IHttpActionResult Put(TEntity entity) {
    if (!ModelState.IsValid) {
        return BadRequest(ModelState);
    }
    try {
        var primaryKeyValue = GetPrimaryKeyValue(entity);
        var existingEntity = db.Set<TEntity>().Find(primaryKeyValue);
        var propertyMap = existingEntity.GetType().GetProperties()
            .ToDictionary(prop => prop.Name, prop => prop);
        var entityProperties = entity.GetType().GetProperties();
        foreach (var property in entityProperties)
        {
            if (propertyMap.ContainsKey(property.Name))
            {
                propertyMap[property.Name].SetValue(existingEntity, property.GetValue(entity));
            }
        }
        db.SaveChanges();
        return Ok(entity);
    }
    catch (Exception ex) {
        return InternalServerError(ex);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
48
0
Gpt3D_Clone48_0.cs 1 13
Gpt3D_Clone48_0.cs 14 32
----------------------------------------

void Update () {
    if (triggerActive) {
        timecountdown -= Time.deltaTime;
        if (timecountdown <= 0.0f) {
            timecountdown = 8.0f;
            teleport = 1;
            triggerActive = false;
        }
    } else {
        teleport = 0;
        timecountdown = 8.0f;
    }
}
----------------------------------------

 void Update () {
    if (triggerActive) {
        timecountdown -= Time.deltaTime;
        if (timecountdown <= 0.0f) {
            timecountdown = 8.0f;
            teleport = 1;
            triggerActive = false;
        }
    }
    else {
        teleport = 0;
        timecountdown = Mathf.Clamp(timecountdown, 0.0f, 8.0f);
        if (timecountdown < 8f) {
            timecountdown += Time.deltaTime;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
490
0
Gpt3D_Clone490_0.cs 1 17
Gpt3D_Clone490_0.cs 18 36
----------------------------------------

[HttpGet] [Route ("api/{Controller}/{id}")] public IHttpActionResult Put (int id, TEntity entity) {
    try {
        if (! ModelState.IsValid) {
            return BadRequest (ModelState);
        }
        var existing = db.Set < TEntity > ().Find (id);
        if (entity == null) {
            return NotFound ();
        }
        ReflectionHelper.Copy (entity, existing);
        db.SaveChanges ();
        return Ok (entity);
    }
    catch (Exception ex) {
        return InternalServerError (ex);
    }
}
----------------------------------------

 [HttpPut] [Route ("api/{Controller}/{id}")] public IHttpActionResult Put ([FromUri]int id, [FromBody]TEntity entity) {
    try {
        if (! ModelState.IsValid) {
            return BadRequest (ModelState);
        }
        var existing = db.Set < TEntity > ().Find (id);
        if (entity == null) {
            return NotFound ();
        }
        db.Entry (existing).CurrentValues.SetValues (entity);
        db.SaveChanges ();
        return Ok (entity);
    }
    catch (Exception ex) {
        return InternalServerError (ex);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
490
1
Gpt3D_Clone490_1.cs 1 17
Gpt3D_Clone490_1.cs 18 41
----------------------------------------

[HttpGet] [Route ("api/{Controller}/{id}")] public IHttpActionResult Put (int id, TEntity entity) {
    try {
        if (! ModelState.IsValid) {
            return BadRequest (ModelState);
        }
        var existing = db.Set < TEntity > ().Find (id);
        if (entity == null) {
            return NotFound ();
        }
        ReflectionHelper.Copy (entity, existing);
        db.SaveChanges ();
        return Ok (entity);
    }
    catch (Exception ex) {
        return InternalServerError (ex);
    }
}
----------------------------------------

 [HttpPut] [Route ("api/{Controller}/{id}")] public async Task<IHttpActionResult> PutAsync(int id, TEntity entity)
{
    try 
    {
        if (! ModelState.IsValid)
        {
            return BadRequest (ModelState);
        }
        var existing = await db.Set <TEntity> ().FindAsync(id);
        if (entity ==null) 
        {
            return NotFound ();
        }
        db.Entry(existing).CurrentValues.SetValues(entity);
        await db.SaveChangesAsync();
        return Ok(entity);
    }
    catch (Exception ex)
    {
        return InternalServerError (ex); 
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
490
2
Gpt3D_Clone490_2.cs 1 17
Gpt3D_Clone490_2.cs 18 36
----------------------------------------

[HttpGet] [Route ("api/{Controller}/{id}")] public IHttpActionResult Put (int id, TEntity entity) {
    try {
        if (! ModelState.IsValid) {
            return BadRequest (ModelState);
        }
        var existing = db.Set < TEntity > ().Find (id);
        if (entity == null) {
            return NotFound ();
        }
        ReflectionHelper.Copy (entity, existing);
        db.SaveChanges ();
        return Ok (entity);
    }
    catch (Exception ex) {
        return InternalServerError (ex);
    }
}
----------------------------------------

 [HttpPut] [Route ("api/{Controller}/{id}")] public IHttpActionResult Put (int id, [FromBody]TEntity entity) {
    try {
        if (! ModelState.IsValid) {
            return BadRequest (ModelState);
        }
        var existing = db.Set < TEntity > ().FirstOrDefault (e => e.Id == id);
        if (entity == null) {
            return NotFound ();
        }
        db.Entry (existing).CurrentValues.SetValues (entity);
        db.SaveChanges ();
        return Ok (entity);
    }
    catch (Exception ex) {
        return InternalServerError (ex);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
491
0
Gpt3D_Clone491_0.cs 1 12
Gpt3D_Clone491_0.cs 13 28
----------------------------------------

public int Compare (Object stringA, Object stringB) {
    string [] valueA = stringA.ToString ().Split ('/');
    string [] valueB = stringB.ToString ().Split ('/');
    if (valueA.Length != 2 || valueB.Length != 2) {
        stringA.ToString ().CompareTo (stringB.ToString ());
    }
    if (valueA [0] == valueB [0]) {
        return int.Parse (valueA [1]).CompareTo (int.Parse (valueB [1]));
    } else {
        return int.Parse (valueA [0]).CompareTo (int.Parse (valueB [0]));
    }
}
----------------------------------------

 public int Compare (Object stringA, Object stringB) {
    string [] valueA = stringA.ToString ().Split ('/');
    string [] valueB = stringB.ToString ().Split ('/');
    if (valueA.Length != 2 || valueB.Length != 2) {
        return stringA.ToString ().CompareToIgnoreCase (stringB.ToString ());
    }
    int val1 = int.Parse (valueA [0]);
    int val2 = int.Parse (valueB [0]);
    if (val1 == val2) {
        return int.Parse (valueA [1]).CompareTo (int.Parse (valueB [1]));
    } else {
        return val1.CompareTo (val2);
    }
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
492
3
Gpt3D_Clone492_3.cs 1 8
Gpt3D_Clone492_3.cs 9 18
----------------------------------------

static public void HideColumn (GridView gv, int columnIndex) {
    if (gv.HeaderRow != null)
        gv.HeaderRow.Cells [columnIndex].Style.Add ("display", "none");
    foreach (GridViewRow row in gv.Rows) {
        if (row.RowType == DataControlRowType.DataRow)
            row.Cells [columnIndex].Style.Add ("display", "none");
    }
}
----------------------------------------

 static public void HideColumn (GridView gv, int columnIndex) {
    if (gv.HeaderRow != null)
        gv.HeaderRow.Cells [columnIndex].Visible = false;
    foreach (GridViewRow row in gv.Rows) {
        if (row.RowType == DataControlRowType.DataRow)
            row.Cells [columnIndex].Visible = false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
492
4
Gpt3D_Clone492_4.cs 1 8
Gpt3D_Clone492_4.cs 9 18
----------------------------------------

static public void HideColumn (GridView gv, int columnIndex) {
    if (gv.HeaderRow != null)
        gv.HeaderRow.Cells [columnIndex].Style.Add ("display", "none");
    foreach (GridViewRow row in gv.Rows) {
        if (row.RowType == DataControlRowType.DataRow)
            row.Cells [columnIndex].Style.Add ("display", "none");
    }
}
----------------------------------------

 static public void HideColumn (GridView gv, int columnIndex) {
    if (gv.HeaderRow != null)
        gv.HeaderRow.Cells [columnIndex].CssClass = "hideColumn";
    foreach (GridViewRow row in gv.Rows) {
        if (row.RowType == DataControlRowType.DataRow)
            row.Cells [columnIndex].CssClass = "hideColumn";
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
492
5
Gpt3D_Clone492_5.cs 1 8
Gpt3D_Clone492_5.cs 9 18
----------------------------------------

static public void HideColumn (GridView gv, int columnIndex) {
    if (gv.HeaderRow != null)
        gv.HeaderRow.Cells [columnIndex].Style.Add ("display", "none");
    foreach (GridViewRow row in gv.Rows) {
        if (row.RowType == DataControlRowType.DataRow)
            row.Cells [columnIndex].Style.Add ("display", "none");
    }
}
----------------------------------------

 static public void HideColumn (GridView gv, int columnIndex) {
    if (gv.HeaderRow != null)
        gv.HeaderRow.Cells [columnIndex].Style ["display"] = "none";
    foreach (GridViewRow row in gv.Rows) {
        if (row.RowType == DataControlRowType.DataRow)
            row.Cells [columnIndex].Style ["display"] = "none";
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
493
1
Gpt3D_Clone493_1.cs 1 12
Gpt3D_Clone493_1.cs 13 32
----------------------------------------

private void fillTheListBox (string filePath) {
    List < string > results = new List < string > ();
    string currentLine = string.Empty;
    using (StreamReader sr = new StreamReader (filePath))
    {
        while ((currentLine = sr.ReadLine ()) != null) {
            foreach (string item in currentLine.Split (',')) {
                results.Add (item);
            }
        }
    } lstbx.DataSource = results;
}
----------------------------------------

 private void fillTheListBox (string filePath)
{
    List < string > results = new List < string > ();
    string currentLine = string.Empty;
    using (StreamReader sr = new StreamReader (filePath))
    {
        while ((currentLine = sr.ReadLine ()) != null) 
        {
            string[] values = Regex.Split (currentLine, ",");
            for (int i = 0; i < values.Length; i++)
            {
                results.Add (values[i]);
            }
        }
    } 
    lstbx.DataSource = results;
    lstbx.DataBind();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
493
4
Gpt3D_Clone493_4.cs 1 12
Gpt3D_Clone493_4.cs 13 32
----------------------------------------

private void fillTheListBox (string filePath) {
    List < string > results = new List < string > ();
    string currentLine = string.Empty;
    using (StreamReader sr = new StreamReader (filePath))
    {
        while ((currentLine = sr.ReadLine ()) != null) {
            foreach (string item in currentLine.Split (',')) {
                results.Add (item);
            }
        }
    } lstbx.DataSource = results;
}
----------------------------------------

 private void fillTheListBox (string filePath)
{
    List < string > results = new List < string > ();
    String line;  
    using (StreamReader sr = new StreamReader (filePath))
    {
        while ((line = sr.ReadLine()) != null) 
        { 
            String[] elements = line.Split (','); 
            foreach(String element in elements) 
            {
                results.Add (element); 
            }
        }
    }
    lstbx.DataSource = results; 
    lstbx.DataBind();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
493
5
Gpt3D_Clone493_5.cs 1 12
Gpt3D_Clone493_5.cs 13 32
----------------------------------------

private void fillTheListBox (string filePath) {
    List < string > results = new List < string > ();
    string currentLine = string.Empty;
    using (StreamReader sr = new StreamReader (filePath))
    {
        while ((currentLine = sr.ReadLine ()) != null) {
            foreach (string item in currentLine.Split (',')) {
                results.Add (item);
            }
        }
    } lstbx.DataSource = results;
}
----------------------------------------

 private void fillTheListBox (string filePath) 
{
    List < string > results = new List < string > ();
    string currentLine = string.Empty;
    using (StreamReader sr = new StreamReader (filePath))
    {
        while ((currentLine = sr.ReadLine ()) != null) 
        {
            string[] values = currentLine.Split (',');
            for (int i = 0; i < values.Length; i++)
            {
                results.Add (values[i]);
            }
        }
    } 
    lstbx.DataSource = results;
    lstbx.DataBind();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
493
6
Gpt3D_Clone493_6.cs 1 12
Gpt3D_Clone493_6.cs 13 32
----------------------------------------

private void fillTheListBox (string filePath) {
    List < string > results = new List < string > ();
    string currentLine = string.Empty;
    using (StreamReader sr = new StreamReader (filePath))
    {
        while ((currentLine = sr.ReadLine ()) != null) {
            foreach (string item in currentLine.Split (',')) {
                results.Add (item);
            }
        }
    } lstbx.DataSource = results;
}
----------------------------------------

 private void fillTheListBox (string filePath) 
{
    List < string > results = new List < string > ();
    string currentLine = string.Empty;
    using (StreamReader sr = new StreamReader (filePath))
    {
        while ((currentLine = sr.ReadLine ()) != null) 
        {
            string[] tokens = currentLine.Split (',');
            for (int i = 0; i < tokens.Length; i++)
            {
                results.Add (tokens[i]);
            }
        }
    }
    lstbx.DataSource = results;
    lstbx.DataBind();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
499
0
Gpt3D_Clone499_0.cs 1 22
Gpt3D_Clone499_0.cs 23 46
----------------------------------------

static void Main (string [] args) {
    var EDGES = new List < Edge > ();
    EDGES.Add (new Edge (new Point (5, 50), new Point (20, 100)));
    EDGES.Add (new Edge (new Point (20, 100), new Point (30, 50)));
    EDGES.Add (new Edge (new Point (30, 50), new Point (10, 0)));
    EDGES.Add (new Edge (new Point (5, 50), new Point (30, 50)));
    EDGES.Add (new Edge (new Point (5, 50), new Point (10, 0)));
    EDGES.Add (new Edge (new Point (20, 100), new Point (80, 100)));
    EDGES.Add (new Edge (new Point (10, 0), new Point (80, 100)));
    var POINTS = new List < double [] > (EDGES.Count * 2);
    FillPoints (EDGES, ref POINTS);
    for (int i = 0; i < POINTS.Count; i ++) {
        Console.WriteLine ("{0} {1} {2}", i, POINTS [i] [0], POINTS [i] [1]);
    }
    Console.WriteLine ();
    var edgeIndices = new int [EDGES.Count, 2];
    FillEdges (EDGES, POINTS, ref edgeIndices);
    for (int i = 0; i < edgeIndices.GetLength (0); i ++) {
        Console.WriteLine ("({0}, {1})", edgeIndices [i, 0], edgeIndices [i, 1]);
    }
    Console.ReadKey (true);
}
----------------------------------------

 static void Main (string [] args) {
    var EDGES = new Dictionary<int, Edge>();
    EDGES.Add (0, new Edge (new Point (5, 50), new Point (20, 100)));
    EDGES.Add (1, new Edge (new Point (20, 100), new Point (30, 50)));
    EDGES.Add (2, new Edge (new Point (30, 50), new Point (10, 0)));
    EDGES.Add (3, new Edge (new Point (5, 50), new Point (30, 50)));
    EDGES.Add (4, new Edge (new Point (5, 50), new Point (10, 0)));
    EDGES.Add (5, new Edge (new Point (20, 100), new Point (80, 100)));
    EDGES.Add (6, new Edge (new Point (10, 0), new Point (80, 100)));
    var POINTS = new List < double [] > (EDGES.Count * 2);
    FillPoints (EDGES, ref POINTS);
    for (int i = 0; i < POINTS.Count; i ++) {
        Console.WriteLine ("{0} {1} {2}", i, POINTS [i] [0], POINTS [i] [1]);
    }
    Console.WriteLine ();
    var edgeIndices = new int [EDGES.Count, 2];
    FillEdges (EDGES, POINTS, ref edgeIndices);
    for (int i = 0; i < edgeIndices.GetLength (0); i ++) {
        Console.WriteLine ("({0}, {1})", edgeIndices [i, 0], edgeIndices [i, 1]);
    }
    Console.ReadKey (true);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
4
2
Gpt3D_Clone4_2.cs 1 9
Gpt3D_Clone4_2.cs 10 22
----------------------------------------

public static long fibo_n (long N) {
    if (N <= 0)
        return 0;
    if (N == 1)
        return 1;
    if (N <= 4)
        return N - 1;
    return fibo_n (N - 1) + fibo_n (N - 2);
}
----------------------------------------

 public static long fibo_n (long N) {
    if (N <= 0) 
        return 0;
    if (N == 1 || N == 2) 
        return 1;
    if (N == 3)
        return 2;
    if (N == 4) 
        return 3;
    return fibo_n (N - 1) + fibo_n (N - 2);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
4
5
Gpt3D_Clone4_5.cs 1 9
Gpt3D_Clone4_5.cs 10 22
----------------------------------------

public static long fibo_n (long N) {
    if (N <= 0)
        return 0;
    if (N == 1)
        return 1;
    if (N <= 4)
        return N - 1;
    return fibo_n (N - 1) + fibo_n (N - 2);
}
----------------------------------------

 public static long fibo_n (long N) {
    if (N <= 0)
        return 0;
    if (N == 1 || N == 2) 
        return 1;
    if (N == 3) 
        return 2;
    if (N == 4)
        return 3;
    return fibo_n (N - 1) + fibo_n (N - 2);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
502
0
Gpt3D_Clone502_0.cs 1 10
Gpt3D_Clone502_0.cs 11 32
----------------------------------------

static void Main (string [] args) {
    List < string > color1 = new List < string > {"blue", "green", "mother", "black", "gray"};
    List < string > color2 = new List < string > {"mother", "green", "father", "black", "gray"};
    string rd = GetRandom (color1);
    if (color2.Contains (rd)) {
        Console.WriteLine (rd);
    } else {
    }
    Console.Read ();
}
----------------------------------------

static void Main (string [] args)
{
    List<string> color1 = new List<string> {"blue", "green", "mother", "black", "gray"};
    List<string> color2 = new List<string> {"mother", "green", "father", "black", "gray"};
    Random number = new Random();
    int size = color1.Count;
    int pick = number.Next(size);
    string rd = color1[pick];
    if (color2.Contains(rd))
    {
        Console.WriteLine(rd);
    }
    else
    {
    }
    Console.Read();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
502
1
Gpt3D_Clone502_1.cs 1 10
Gpt3D_Clone502_1.cs 11 31
----------------------------------------

static void Main (string [] args) {
    List < string > color1 = new List < string > {"blue", "green", "mother", "black", "gray"};
    List < string > color2 = new List < string > {"mother", "green", "father", "black", "gray"};
    string rd = GetRandom (color1);
    if (color2.Contains (rd)) {
        Console.WriteLine (rd);
    } else {
    }
    Console.Read ();
}
----------------------------------------

static void Main(string[] args)
{
    List<string> color1 = new List<string> {"blue", "green", "mother", "black", "gray"};
    List<string> color2 = new List<string> {"mother", "green", "father", "black", "gray"};
    Random selection = new Random();
    int size = color1.Count;
    int index = selection.Next(size);
    string rd = color1[index];
   if(color2.Contains(rd))
    {
        Console.WriteLine(rd);
    }
    else
    {
    }
    Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
502
2
Gpt3D_Clone502_2.cs 1 10
Gpt3D_Clone502_2.cs 11 32
----------------------------------------

static void Main (string [] args) {
    List < string > color1 = new List < string > {"blue", "green", "mother", "black", "gray"};
    List < string > color2 = new List < string > {"mother", "green", "father", "black", "gray"};
    string rd = GetRandom (color1);
    if (color2.Contains (rd)) {
        Console.WriteLine (rd);
    } else {
    }
    Console.Read ();
}
----------------------------------------

static void Main(string[] args)
{
    List<string> color1 = new List<string> { "blue", "green", "mother", "black", "gray" };
    List<string> color2 = new List<string> { "mother", "green", "father", "black", "gray" };
    int size = color1.Count;
    Random random = new Random();
    int selection = random.Next(size);
    string rd = color1[selection];
    if(color2.Contains(rd))
    {
        Console.WriteLine(rd);
    }
    else
    {
    }
    Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
502
3
Gpt3D_Clone502_3.cs 1 10
Gpt3D_Clone502_3.cs 11 32
----------------------------------------

static void Main (string [] args) {
    List < string > color1 = new List < string > {"blue", "green", "mother", "black", "gray"};
    List < string > color2 = new List < string > {"mother", "green", "father", "black", "gray"};
    string rd = GetRandom (color1);
    if (color2.Contains (rd)) {
        Console.WriteLine (rd);
    } else {
    }
    Console.Read ();
}
----------------------------------------

    static void Main (string [] args)
{
    List<string> color1 = new List<string> {"blue", "green", "mother", "black", "gray"};
    List<string> color2 = new List<string> {"mother", "green", "father", "black", "gray"};
    int size = color1.Count;
    Random random = new Random();
    int pick = random.Next(size);
    string rd = color1[pick];
    if (color2.Contains(rd))
    {
        Console.WriteLine(rd);
    }
    else
    {
    }
    Console.Read();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
502
4
Gpt3D_Clone502_4.cs 1 10
Gpt3D_Clone502_4.cs 11 33
----------------------------------------

static void Main (string [] args) {
    List < string > color1 = new List < string > {"blue", "green", "mother", "black", "gray"};
    List < string > color2 = new List < string > {"mother", "green", "father", "black", "gray"};
    string rd = GetRandom (color1);
    if (color2.Contains (rd)) {
        Console.WriteLine (rd);
    } else {
    }
    Console.Read ();
}
----------------------------------------

static void Main (string [] args) 
{
    List < string > color1 = new List < string > {"blue", "green", "mother", "black", "gray"};
    List < string > color2 = new List < string >{"mother", "green", "father", "black", "gray"};
    
    System.Random n = new System.Random();
    int size = color1.Count;
    int i = n.Next(size);
    string rd = color1[i];
    if (color2.Contains(rd))
    {
        Console.WriteLine(rd);
    }
    else 
    {
    }
    Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
502
5
Gpt3D_Clone502_5.cs 1 10
Gpt3D_Clone502_5.cs 11 33
----------------------------------------

static void Main (string [] args) {
    List < string > color1 = new List < string > {"blue", "green", "mother", "black", "gray"};
    List < string > color2 = new List < string > {"mother", "green", "father", "black", "gray"};
    string rd = GetRandom (color1);
    if (color2.Contains (rd)) {
        Console.WriteLine (rd);
    } else {
    }
    Console.Read ();
}
----------------------------------------

static void Main (string [] args) 
{
    List < string > color1 = new List < string > {"blue", "green", "mother", "black", "gray"};
    List < string > color2 = new List < string > {"mother", "green", "father", "black", "gray"};
    
    System.Random rand = new System.Random();
    int size = color1.Count;
    int seed = rand.Next(size);
    string rd = color1[seed];
    if (color2.Contains(rd))
    {
        Console.WriteLine(rd);
    }
    else 
    {
    }
    Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
502
6
Gpt3D_Clone502_6.cs 1 10
Gpt3D_Clone502_6.cs 11 33
----------------------------------------

static void Main (string [] args) {
    List < string > color1 = new List < string > {"blue", "green", "mother", "black", "gray"};
    List < string > color2 = new List < string > {"mother", "green", "father", "black", "gray"};
    string rd = GetRandom (color1);
    if (color2.Contains (rd)) {
        Console.WriteLine (rd);
    } else {
    }
    Console.Read ();
}
----------------------------------------

static void Main (string [] args) 
{
    List < string > color1 = new List < string > {"blue", "green", "mother", "black", "gray"};
    List < string > color2 = new List < string > {"mother", "green", "father", "black", "gray"};
    
    System.Random rnd = new System.Random();
    int size = color1.Count;
    int i = rnd.Next(size);
    string rd = color1[i];
    if (color2.Contains(rd))
    {
        Console.WriteLine(rd);
    }
    else 
    {
    }
    Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
502
7
Gpt3D_Clone502_7.cs 1 10
Gpt3D_Clone502_7.cs 11 29
----------------------------------------

static void Main (string [] args) {
    List < string > color1 = new List < string > {"blue", "green", "mother", "black", "gray"};
    List < string > color2 = new List < string > {"mother", "green", "father", "black", "gray"};
    string rd = GetRandom (color1);
    if (color2.Contains (rd)) {
        Console.WriteLine (rd);
    } else {
    }
    Console.Read ();
}
----------------------------------------

static void Main(string[] args) 
{
    List<string> color1 = new List<string>{"blue", "green", "mother", "black", "gray"};
    List<string> color2 = new List<string>{"mother", "green", "father", "black", "gray"};
    var random = new Random();
    int index = random.Next(color1.Count);
    if (color2.Contains(color1[index]))
    {
        Console.WriteLine(color1[index]);
    }
    else 
    {
    }
    Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
505
0
Gpt3D_Clone505_0.cs 1 10
Gpt3D_Clone505_0.cs 11 26
----------------------------------------

[HttpPost] public ActionResult Create (CreateOrderViewModel model) {
    try {
        var newOrder = new Order {OrderDate = DateTime.Now, OrderProduct = new OrderProduct {ProductId = SelectedProductId}};
        db.Orders.AddObject (newOrder);
        return RedirectToAction ("Index");
    }
    catch {
        return View ();
    }
}
----------------------------------------

 [HttpPost] 
public ActionResult Create(CreateOrderViewModel model){
    try{
        var productId = model.SelectedProductId;
        var dateTime = DateTime.Now;
        var order = new Order(productId, dateTime);
        db.Orders.AddObject(order);
        db.SaveChanges();
        return RedirectToAction("Index");
    }
    catch{
        return View();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
505
1
Gpt3D_Clone505_1.cs 1 10
Gpt3D_Clone505_1.cs 11 26
----------------------------------------

[HttpPost] public ActionResult Create (CreateOrderViewModel model) {
    try {
        var newOrder = new Order {OrderDate = DateTime.Now, OrderProduct = new OrderProduct {ProductId = SelectedProductId}};
        db.Orders.AddObject (newOrder);
        return RedirectToAction ("Index");
    }
    catch {
        return View ();
    }
}
----------------------------------------

 [HttpPost] 
public ActionResult Create(CreateOrderViewModel model){
    try{
        var productId = model.SelectedProductId;
        var orderDate = DateTime.Now;
        var order = new Order(productId, orderDate);
        db.Orders.InsertOnSubmit(order);
        db.SubmitChanges();
        return RedirectToAction("Index");
    }
    catch{
        return View();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
505
2
Gpt3D_Clone505_2.cs 1 10
Gpt3D_Clone505_2.cs 11 26
----------------------------------------

[HttpPost] public ActionResult Create (CreateOrderViewModel model) {
    try {
        var newOrder = new Order {OrderDate = DateTime.Now, OrderProduct = new OrderProduct {ProductId = SelectedProductId}};
        db.Orders.AddObject (newOrder);
        return RedirectToAction ("Index");
    }
    catch {
        return View ();
    }
}
----------------------------------------

 [HttpPost] 
public ActionResult Create(CreateOrderViewModel model){
    try{
        var orderProduct = new OrderProduct {ProductId = model.SelectedProductId};
        var orderDate = DateTime.UtcNow;
        var newOrder = new Order(orderProduct, orderDate);
        db.Orders.AddObject(newOrder);
        db.SaveChanges();
        return RedirectToAction("Index");
    }
    catch{
        return View();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
505
3
Gpt3D_Clone505_3.cs 1 10
Gpt3D_Clone505_3.cs 11 25
----------------------------------------

[HttpPost] public ActionResult Create (CreateOrderViewModel model) {
    try {
        var newOrder = new Order {OrderDate = DateTime.Now, OrderProduct = new OrderProduct {ProductId = SelectedProductId}};
        db.Orders.AddObject (newOrder);
        return RedirectToAction ("Index");
    }
    catch {
        return View ();
    }
}
----------------------------------------

 [HttpPost] 
public ActionResult Create(CreateOrderViewModel model){
    try{
        var today = DateTime.Today;
        var newOrder = new Order {OrderDate = today, OrderProduct = new OrderProduct {ProductId = model.SelectedProductId}};
        db.Orders.InsertOnSubmit(newOrder);
        db.SubmitChanges();
        return RedirectToAction("Index");
    }
    catch{
        return View();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
505
4
Gpt3D_Clone505_4.cs 1 10
Gpt3D_Clone505_4.cs 11 25
----------------------------------------

[HttpPost] public ActionResult Create (CreateOrderViewModel model) {
    try {
        var newOrder = new Order {OrderDate = DateTime.Now, OrderProduct = new OrderProduct {ProductId = SelectedProductId}};
        db.Orders.AddObject (newOrder);
        return RedirectToAction ("Index");
    }
    catch {
        return View ();
    }
}
----------------------------------------

 [HttpPost] 
public ActionResult Create(CreateOrderViewModel model){
  try{
      var today = DateTime.UtcNow;
        var newOrder = new Order {OrderDate = today, OrderProduct = new OrderProduct {ProductId = model.SelectedProductId}};
        db.Orders.InsertOnSubmit(newOrder);
        db.SubmitChanges();
        return RedirectToAction("Index");
    }
    catch{
        return View();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
505
5
Gpt3D_Clone505_5.cs 1 10
Gpt3D_Clone505_5.cs 11 28
----------------------------------------

[HttpPost] public ActionResult Create (CreateOrderViewModel model) {
    try {
        var newOrder = new Order {OrderDate = DateTime.Now, OrderProduct = new OrderProduct {ProductId = SelectedProductId}};
        db.Orders.AddObject (newOrder);
        return RedirectToAction ("Index");
    }
    catch {
        return View ();
    }
}
----------------------------------------

public ActionResult Create(CreateOrderViewModel model)
{
    var orderProductId = SelectedProductId;
    var orderDateTime = DateTime.Now;
    try
    {
        var newOrder = new Order {OrderDateTime = orderDateTime, OrderProductId = orderProductId};
        db.Orders.AddObject(newOrder);
        db.SaveChanges();
        return RedirectToAction("Index");
    }
    catch
    {
        return View();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
505
6
Gpt3D_Clone505_6.cs 1 10
Gpt3D_Clone505_6.cs 11 25
----------------------------------------

[HttpPost] public ActionResult Create (CreateOrderViewModel model) {
    try {
        var newOrder = new Order {OrderDate = DateTime.Now, OrderProduct = new OrderProduct {ProductId = SelectedProductId}};
        db.Orders.AddObject (newOrder);
        return RedirectToAction ("Index");
    }
    catch {
        return View ();
    }
}
----------------------------------------

public ActionResult Create(CreateOrderViewModel model){
    try{
        var orderDate = DateTime.Today;
        var newOrder = new Order (orderDate, model.SelectedProductId);
        db.Orders.AddObject(newOrder);
        db.SaveChanges();
        return RedirectToAction("Index");
    }
    catch{
        return View();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
506
1
Gpt3D_Clone506_1.cs 1 13
Gpt3D_Clone506_1.cs 14 34
----------------------------------------

private Bitmap GetSprite (bool anim, int tsIndex, int tileIdx) {
    Rectangle cloneRect;
    string prefix = (anim) ? "A" : "S";
    using (Bitmap b = new Bitmap (prefix + tsIndex.ToString () + ".png"))
    {
        if (anim) {
            cloneRect = new Rectangle (BaseObjects.A_AnimSpriteSets [tsIndex].StaticRecs [tileIdx].X, BaseObjects.A_AnimSpriteSets [tsIndex].StaticRecs [tileIdx].Y, BaseObjects.A_AnimSpriteSets [tsIndex].RecWidth, BaseObjects.A_AnimSpriteSets [tsIndex].RecHeight);
        } else {
            cloneRect = new Rectangle (BaseObjects.A_StaticSpriteSets [tsIndex].StaticRecs [tileIdx].X, BaseObjects.A_StaticSpriteSets [tsIndex].StaticRecs [tileIdx].Y, BaseObjects.A_StaticSpriteSets [tsIndex].RecWidth, BaseObjects.A_StaticSpriteSets [tsIndex].RecHeight);
        }
        return b.Clone (cloneRect, b.PixelFormat);
    }
}
----------------------------------------

 private Bitmap GetSprite(bool anim, int tsIndex, int tileIdx)
{
    Rectangle cloneRect;
    string prefix = anim ? "A" : "S";
    using (Bitmap b = new Bitmap (prefix + tsIndex.ToString() + ".png"))
    {
        if (anim)
        {
            cloneRect = new Rectangle(BaseObjects.A_AnimSpriteSets[tsIndex].StaticRecs[tileIdx].X, BaseObjects.A_AnimSpriteSets[tsIndex].StaticRecs[tileIdx].Y, BaseObjects.A_AnimSpriteSets[tsIndex].RecWidth, BaseObjects.A_AnimSpriteSets[tsIndex].RecHeight);
        }
        else
        {
            cloneRect = new Rectangle(BaseObjects.A_StaticSpriteSets[tsIndex].StaticRecs[tileIdx].X, BaseObjects.A_StaticSpriteSets[tsIndex].StaticRecs[tileIdx].Y, BaseObjects.A_StaticSpriteSets[tsIndex].RecWidth, BaseObjects.A_StaticSpriteSets[tsIndex].RecHeight);
        }
        
        Bitmap bClone = b.Clone(cloneRect, b.PixelFormat);
        return bClone;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
506
2
Gpt3D_Clone506_2.cs 1 13
Gpt3D_Clone506_2.cs 14 28
----------------------------------------

private Bitmap GetSprite (bool anim, int tsIndex, int tileIdx) {
    Rectangle cloneRect;
    string prefix = (anim) ? "A" : "S";
    using (Bitmap b = new Bitmap (prefix + tsIndex.ToString () + ".png"))
    {
        if (anim) {
            cloneRect = new Rectangle (BaseObjects.A_AnimSpriteSets [tsIndex].StaticRecs [tileIdx].X, BaseObjects.A_AnimSpriteSets [tsIndex].StaticRecs [tileIdx].Y, BaseObjects.A_AnimSpriteSets [tsIndex].RecWidth, BaseObjects.A_AnimSpriteSets [tsIndex].RecHeight);
        } else {
            cloneRect = new Rectangle (BaseObjects.A_StaticSpriteSets [tsIndex].StaticRecs [tileIdx].X, BaseObjects.A_StaticSpriteSets [tsIndex].StaticRecs [tileIdx].Y, BaseObjects.A_StaticSpriteSets [tsIndex].RecWidth, BaseObjects.A_StaticSpriteSets [tsIndex].RecHeight);
        }
        return b.Clone (cloneRect, b.PixelFormat);
    }
}
----------------------------------------

 private Bitmap GetSprite (bool anim, int tsIndex, int tileIdx) {
    Rectangle cloneRect;
    string prefix = anim ? "A" : "S";
    Bitmap b;
    if (anim) {
        cloneRect = new Rectangle (BaseObjects.A_AnimSpriteSets[tsIndex].StaticRecs[tileIdx].X, BaseObjects.A_AnimSpriteSets[tsIndex].StaticRecs[tileIdx].Y, BaseObjects.A_AnimSpriteSets[tsIndex].RecWidth, BaseObjects.A_AnimSpriteSets[tsIndex].RecHeight);
        b = new Bitmap (prefix + tsIndex.ToString () + ".png");
    } else {
        cloneRect = new Rectangle (BaseObjects.A_StaticSpriteSets[tsIndex].StaticRecs[tileIdx].X, BaseObjects.A_StaticSpriteSets[tsIndex].StaticRecs[tileIdx].Y, BaseObjects.A_StaticSpriteSets[tsIndex].RecWidth, BaseObjects.A_StaticSpriteSets[tsIndex].RecHeight);
        b = new Bitmap (prefix + tsIndex.ToString () + ".png");
    }
    return b.Clone (cloneRect, b.PixelFormat);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
506
3
Gpt3D_Clone506_3.cs 1 13
Gpt3D_Clone506_3.cs 14 29
----------------------------------------

private Bitmap GetSprite (bool anim, int tsIndex, int tileIdx) {
    Rectangle cloneRect;
    string prefix = (anim) ? "A" : "S";
    using (Bitmap b = new Bitmap (prefix + tsIndex.ToString () + ".png"))
    {
        if (anim) {
            cloneRect = new Rectangle (BaseObjects.A_AnimSpriteSets [tsIndex].StaticRecs [tileIdx].X, BaseObjects.A_AnimSpriteSets [tsIndex].StaticRecs [tileIdx].Y, BaseObjects.A_AnimSpriteSets [tsIndex].RecWidth, BaseObjects.A_AnimSpriteSets [tsIndex].RecHeight);
        } else {
            cloneRect = new Rectangle (BaseObjects.A_StaticSpriteSets [tsIndex].StaticRecs [tileIdx].X, BaseObjects.A_StaticSpriteSets [tsIndex].StaticRecs [tileIdx].Y, BaseObjects.A_StaticSpriteSets [tsIndex].RecWidth, BaseObjects.A_StaticSpriteSets [tsIndex].RecHeight);
        }
        return b.Clone (cloneRect, b.PixelFormat);
    }
}
----------------------------------------

 private Bitmap GetSprite (bool anim, int tsIndex, int tileIdx) {
    Rectangle cloneRect;
    string prefix = anim ? "A" : "S";
    Bitmap b;
    using (b = new Bitmap (prefix + tsIndex.ToString () + ".png"))
    {
        if (anim) {
            cloneRect = new Rectangle (BaseObjects.A_AnimSpriteSets [tsIndex].StaticRecs [tileIdx].X, BaseObjects.A_AnimSpriteSets [tsIndex].StaticRecs [tileIdx].Y, BaseObjects.A_AnimSpriteSets [tsIndex].RecWidth, BaseObjects.A_AnimSpriteSets [tsIndex].RecHeight);
        } else {
            cloneRect = new Rectangle (BaseObjects.A_StaticSpriteSets [tsIndex].StaticRecs [tileIdx].X, BaseObjects.A_StaticSpriteSets [tsIndex].StaticRecs [tileIdx].Y, BaseObjects.A_StaticSpriteSets [tsIndex].RecWidth, BaseObjects.A_StaticSpriteSets [tsIndex].RecHeight);
        }
    }
    return b.Clone (cloneRect, b.PixelFormat);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
506
4
Gpt3D_Clone506_4.cs 1 13
Gpt3D_Clone506_4.cs 14 28
----------------------------------------

private Bitmap GetSprite (bool anim, int tsIndex, int tileIdx) {
    Rectangle cloneRect;
    string prefix = (anim) ? "A" : "S";
    using (Bitmap b = new Bitmap (prefix + tsIndex.ToString () + ".png"))
    {
        if (anim) {
            cloneRect = new Rectangle (BaseObjects.A_AnimSpriteSets [tsIndex].StaticRecs [tileIdx].X, BaseObjects.A_AnimSpriteSets [tsIndex].StaticRecs [tileIdx].Y, BaseObjects.A_AnimSpriteSets [tsIndex].RecWidth, BaseObjects.A_AnimSpriteSets [tsIndex].RecHeight);
        } else {
            cloneRect = new Rectangle (BaseObjects.A_StaticSpriteSets [tsIndex].StaticRecs [tileIdx].X, BaseObjects.A_StaticSpriteSets [tsIndex].StaticRecs [tileIdx].Y, BaseObjects.A_StaticSpriteSets [tsIndex].RecWidth, BaseObjects.A_StaticSpriteSets [tsIndex].RecHeight);
        }
        return b.Clone (cloneRect, b.PixelFormat);
    }
}
----------------------------------------

 private Bitmap GetSprite (bool anim, int tsIndex, int tileIdx) {
    string prefix = anim ? "A" : "S";
    Rectangle cloneRect;
    using (Bitmap b = new Bitmap ($"{prefix}{tsIndex}.png"))
    {
        if (anim) {
            cloneRect = GetAnimRectangle(tsIndex, tileIdx);
        } else {
            cloneRect = GetStaticRectangle(tsIndex, tileIdx);
        }
        return b.Clone (cloneRect, b.PixelFormat);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
506
5
Gpt3D_Clone506_5.cs 1 13
Gpt3D_Clone506_5.cs 14 28
----------------------------------------

private Bitmap GetSprite (bool anim, int tsIndex, int tileIdx) {
    Rectangle cloneRect;
    string prefix = (anim) ? "A" : "S";
    using (Bitmap b = new Bitmap (prefix + tsIndex.ToString () + ".png"))
    {
        if (anim) {
            cloneRect = new Rectangle (BaseObjects.A_AnimSpriteSets [tsIndex].StaticRecs [tileIdx].X, BaseObjects.A_AnimSpriteSets [tsIndex].StaticRecs [tileIdx].Y, BaseObjects.A_AnimSpriteSets [tsIndex].RecWidth, BaseObjects.A_AnimSpriteSets [tsIndex].RecHeight);
        } else {
            cloneRect = new Rectangle (BaseObjects.A_StaticSpriteSets [tsIndex].StaticRecs [tileIdx].X, BaseObjects.A_StaticSpriteSets [tsIndex].StaticRecs [tileIdx].Y, BaseObjects.A_StaticSpriteSets [tsIndex].RecWidth, BaseObjects.A_StaticSpriteSets [tsIndex].RecHeight);
        }
        return b.Clone (cloneRect, b.PixelFormat);
    }
}
----------------------------------------

 private Bitmap GetSprite (bool anim, int tsIndex, int tileIdx) {
    string prefix = anim ? "A" : "S";
    Rectangle cloneRect;
    using (Bitmap b = new Bitmap ($"{prefix}{tsIndex}.png"))
    {
        if (anim) {
            cloneRect = GetAnimRectangle(tsIndex, tileIdx);
        } else {
            cloneRect = GetStaticRectangle(tsIndex, tileIdx);
        }
        return b.Clone (cloneRect, b.PixelFormat);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
506
6
Gpt3D_Clone506_6.cs 1 13
Gpt3D_Clone506_6.cs 14 28
----------------------------------------

private Bitmap GetSprite (bool anim, int tsIndex, int tileIdx) {
    Rectangle cloneRect;
    string prefix = (anim) ? "A" : "S";
    using (Bitmap b = new Bitmap (prefix + tsIndex.ToString () + ".png"))
    {
        if (anim) {
            cloneRect = new Rectangle (BaseObjects.A_AnimSpriteSets [tsIndex].StaticRecs [tileIdx].X, BaseObjects.A_AnimSpriteSets [tsIndex].StaticRecs [tileIdx].Y, BaseObjects.A_AnimSpriteSets [tsIndex].RecWidth, BaseObjects.A_AnimSpriteSets [tsIndex].RecHeight);
        } else {
            cloneRect = new Rectangle (BaseObjects.A_StaticSpriteSets [tsIndex].StaticRecs [tileIdx].X, BaseObjects.A_StaticSpriteSets [tsIndex].StaticRecs [tileIdx].Y, BaseObjects.A_StaticSpriteSets [tsIndex].RecWidth, BaseObjects.A_StaticSpriteSets [tsIndex].RecHeight);
        }
        return b.Clone (cloneRect, b.PixelFormat);
    }
}
----------------------------------------

 private Bitmap GetSprite (bool anim, int tsIndex, int tileIdx) {
    string prefix = anim ? "A" : "S";
    Rectangle cloneRect;
    using (Bitmap b = new Bitmap ($"{prefix}{tsIndex}.png"))
    {
        if (anim) {
            cloneRect = GetAnimRectangle(tsIndex, tileIdx);
        } else {
            cloneRect = GetStaticRectangle(tsIndex, tileIdx);
        }
        return b.Clone (cloneRect, b.PixelFormat);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
506
7
Gpt3D_Clone506_7.cs 1 13
Gpt3D_Clone506_7.cs 14 33
----------------------------------------

private Bitmap GetSprite (bool anim, int tsIndex, int tileIdx) {
    Rectangle cloneRect;
    string prefix = (anim) ? "A" : "S";
    using (Bitmap b = new Bitmap (prefix + tsIndex.ToString () + ".png"))
    {
        if (anim) {
            cloneRect = new Rectangle (BaseObjects.A_AnimSpriteSets [tsIndex].StaticRecs [tileIdx].X, BaseObjects.A_AnimSpriteSets [tsIndex].StaticRecs [tileIdx].Y, BaseObjects.A_AnimSpriteSets [tsIndex].RecWidth, BaseObjects.A_AnimSpriteSets [tsIndex].RecHeight);
        } else {
            cloneRect = new Rectangle (BaseObjects.A_StaticSpriteSets [tsIndex].StaticRecs [tileIdx].X, BaseObjects.A_StaticSpriteSets [tsIndex].StaticRecs [tileIdx].Y, BaseObjects.A_StaticSpriteSets [tsIndex].RecWidth, BaseObjects.A_StaticSpriteSets [tsIndex].RecHeight);
        }
        return b.Clone (cloneRect, b.PixelFormat);
    }
}
----------------------------------------

 private Bitmap GetSprite (bool anim, int tsIndex, int tileIdx) {
    // Create a clone rect of the correct sprite size
    Rectangle cloneRect;
    string prefix = anim ? "A" : "S"; 
    
    // Create a new bitmap
    Bitmap b = new Bitmap(prefix + tsIndex.ToString() + ".png");
    
    // Get the the sprite size from either the animation sprite set or the static sprite set according to the bool
    if(anim){
        cloneRect = new Rectangle(BaseObjects.A_AnimSpriteSets[tsIndex].StaticRecs[tileIdx].X, BaseObjects.A_AnimSpriteSets[tsIndex].StaticRecs[tileIdx].Y, BaseObjects.A_AnimSpriteSets[tsIndex].RecWidth, BaseObjects.A_AnimSpriteSets[tsIndex].RecHeight);
    } else {
        cloneRect = new Rectangle(BaseObjects.A_StaticSpriteSets[tsIndex].StaticRecs[tileIdx].X, BaseObjects.A_StaticSpriteSets[tsIndex].StaticRecs[tileIdx].Y, BaseObjects.A_StaticSpriteSets[tsIndex].RecWidth, BaseObjects.A_StaticSpriteSets[tsIndex].RecHeight);
    }
    
    // Return the cloned bitmap of the correct sprite
    return b.Clone(cloneRect, b.PixelFormat);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
508
1
Gpt3D_Clone508_1.cs 1 10
Gpt3D_Clone508_1.cs 11 31
----------------------------------------

public override void PreBuildUp (IBuilderContext context) {
    if (context.BuildKey.Type != typeof (Logger)) {
        var loggerPolicy = context.Policies.Get < ILoggerPolicy > (LoggerExtension.LoggerBuildKey);
        if (loggerPolicy == null) {
            loggerPolicy = new LoggerPolicy ();
            context.Policies.Set < ILoggerPolicy > (loggerPolicy, LoggerExtension.LoggerBuildKey);
        }
        loggerPolicy.Push (context.BuildKey.Type);
    }
}
----------------------------------------

  public override void PreBuildUp(IBuilderContext context)
{
    if(context.BuildKey.Type != typeof(Logger))
    {
        // Check if the policy exists
        if(context.Policies.ContainsKey(LoggerExtension.LoggerBuildKey))
        {
            // Get the existing policy
            var loggerPolicy = context.Policies.Get<ILoggerPolicy>(LoggerExtension.LoggerBuildKey);
            loggerPolicy.Push(context.BuildKey.Type);
        }
        else // Create a new policy if the policy does not exist
        {
            var loggerPolicy = new LoggerPolicy();
            context.Policies.Set<ILoggerPolicy>(loggerPolicy, LoggerExtension.LoggerBuildKey);
            loggerPolicy.Push(context.BuildKey.Type);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
508
2
Gpt3D_Clone508_2.cs 1 10
Gpt3D_Clone508_2.cs 11 24
----------------------------------------

public override void PreBuildUp (IBuilderContext context) {
    if (context.BuildKey.Type != typeof (Logger)) {
        var loggerPolicy = context.Policies.Get < ILoggerPolicy > (LoggerExtension.LoggerBuildKey);
        if (loggerPolicy == null) {
            loggerPolicy = new LoggerPolicy ();
            context.Policies.Set < ILoggerPolicy > (loggerPolicy, LoggerExtension.LoggerBuildKey);
        }
        loggerPolicy.Push (context.BuildKey.Type);
    }
}
----------------------------------------

  public override void PreBuildUp(IBuilderContext context)
{
    if(context.BuildKey.Type == typeof(Logger)) return;
    var loggerPolicy = context.Policies.Get<ILoggerPolicy>(LoggerExtension.LoggerBuildKey);
    if (loggerPolicy is null)
    {
        loggerPolicy = new LoggerPolicy();
        context.Policies.Set<ILoggerPolicy>(loggerPolicy, LoggerExtension.LoggerBuildKey);
    }
    loggerPolicy.Push(context.BuildKey.Type);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
508
3
Gpt3D_Clone508_3.cs 1 10
Gpt3D_Clone508_3.cs 11 25
----------------------------------------

public override void PreBuildUp (IBuilderContext context) {
    if (context.BuildKey.Type != typeof (Logger)) {
        var loggerPolicy = context.Policies.Get < ILoggerPolicy > (LoggerExtension.LoggerBuildKey);
        if (loggerPolicy == null) {
            loggerPolicy = new LoggerPolicy ();
            context.Policies.Set < ILoggerPolicy > (loggerPolicy, LoggerExtension.LoggerBuildKey);
        }
        loggerPolicy.Push (context.BuildKey.Type);
    }
}
----------------------------------------

  public override void PreBuildUp(IBuilderContext context)
{
    if(context.BuildKey.Type != typeof(Logger))
    {
        var loggerPolicy = context.Policies.Get<ILoggerPolicy>(LoggerExtension.LoggerBuildKey);
        if (loggerPolicy is null)
        {
            loggerPolicy = new LoggerPolicy();
            context.Policies.Set<ILoggerPolicy>(loggerPolicy, LoggerExtension.LoggerBuildKey);
        }
        loggerPolicy?.Push(context.BuildKey.Type);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
508
4
Gpt3D_Clone508_4.cs 1 10
Gpt3D_Clone508_4.cs 11 25
----------------------------------------

public override void PreBuildUp (IBuilderContext context) {
    if (context.BuildKey.Type != typeof (Logger)) {
        var loggerPolicy = context.Policies.Get < ILoggerPolicy > (LoggerExtension.LoggerBuildKey);
        if (loggerPolicy == null) {
            loggerPolicy = new LoggerPolicy ();
            context.Policies.Set < ILoggerPolicy > (loggerPolicy, LoggerExtension.LoggerBuildKey);
        }
        loggerPolicy.Push (context.BuildKey.Type);
    }
}
----------------------------------------

  public override void PreBuildUp(IBuilderContext context)
{
    if(context.BuildKey.Type != typeof(Logger))
    {
        ILoggerPolicy loggerPolicy;
        if(context.Policies.TryGetValue(LoggerExtension.LoggerBuildKey, out loggerPolicy))
        {
            loggerPolicy = new LoggerPolicy();
            context.Policies.Set<ILoggerPolicy>(loggerPolicy, LoggerExtension.LoggerBuildKey);
        }
        loggerPolicy.Push(context.BuildKey.Type);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
508
5
Gpt3D_Clone508_5.cs 1 10
Gpt3D_Clone508_5.cs 11 25
----------------------------------------

public override void PreBuildUp (IBuilderContext context) {
    if (context.BuildKey.Type != typeof (Logger)) {
        var loggerPolicy = context.Policies.Get < ILoggerPolicy > (LoggerExtension.LoggerBuildKey);
        if (loggerPolicy == null) {
            loggerPolicy = new LoggerPolicy ();
            context.Policies.Set < ILoggerPolicy > (loggerPolicy, LoggerExtension.LoggerBuildKey);
        }
        loggerPolicy.Push (context.BuildKey.Type);
    }
}
----------------------------------------

  public override void PreBuildUp(IBuilderContext context)
{
    if(context.BuildKey.Type != typeof(Logger))
    {
        ILoggerPolicy loggerPolicy;
        if(!context.Policies.TryGetValue(LoggerExtension.LoggerBuildKey, out loggerPolicy))
        {
            loggerPolicy = new LoggerPolicy();
            context.Policies.Set<ILoggerPolicy>(loggerPolicy, LoggerExtension.LoggerBuildKey);
        }
        loggerPolicy.Push(context.BuildKey.Type);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
509
9
Gpt3D_Clone509_9.cs 1 16
Gpt3D_Clone509_9.cs 17 39
----------------------------------------

public static bool IsQueueAvailable (string queueName) {
    MessageQueue queue;
    try {
        queue = new MessageQueue (queueName);
        queue.Peek (new TimeSpan (0, 0, 5));
        return true;
    }
    catch (Exception ex) {
        if (ex is ArgumentException) {
            return false;
        } else if (ex is MessageQueueException) {
            return (((MessageQueueException) ex).MessageQueueErrorCode == MessageQueueErrorCode.IOTimeout);
        }
        return false;
    }
}
----------------------------------------

 public static bool IsQueueAvailable (string queueName) 
{
    MessageQueue queue;
    try 
    {
        queue = new MessageQueue (queueName);
        queue.Peek(new TimeSpan (0, 0, 5));
        return true;
    }
    catch (ArgumentException)
    {
        return false;
    }
    catch (MessageQueueException ex)
    {
        if (ex.MessageQueueErrorCode == MessageQueueErrorCode.IOTimeout)
            return true;
        else
            return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
510
2
Gpt3D_Clone510_2.cs 1 19
Gpt3D_Clone510_2.cs 20 39
----------------------------------------

public DataTable MethodName (string Param) {
    DataRow dr;
    DataTable dt = new DataTable ();
    dt.Columns.Add ("Order", Type.GetType ("System.Int32"));
    dt.Columns.Add ("Driver", Type.GetType ("System.Int32"));
    dr = dt.NewRow ();
    if (AnotherMethod1 (Param)) {
        dr ["Order"] = 1;
    } else {
        dr ["Order"] = 0;
    }
    if (AnotherMethod2 (Param)) {
        dr ["Driver"] = 1;
    } else {
        dr ["Driver"] = 0;
    }
    dt.Rows.Add (dr);
    return dt;
}
----------------------------------------

 public DataTable MethodName (string Param) {
      DataTable dt = new DataTable ();
      dt.Columns.Add ("Order", Type.GetType ("System.Int32"));
      dt.Columns.Add ("Driver", Type.GetType ("System.Int32"));
      DataRow dr = dt.NewRow();
      if (AnotherMethod1 (Param)) {
          dt.Columns["Order"].DefaultValue  = 1;
      } else {
          dt.Columns["Order"].DefaultValue  = 0;
      } 
      if (AnotherMethod2 (Param)) {
          dt.Columns["Driver"].DefaultValue  = 1;
      } else {
          dt.Columns["Driver"].DefaultValue  = 0;
      }
      dt.Rows.Add(dr);
      return dt;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
510
3
Gpt3D_Clone510_3.cs 1 19
Gpt3D_Clone510_3.cs 20 39
----------------------------------------

public DataTable MethodName (string Param) {
    DataRow dr;
    DataTable dt = new DataTable ();
    dt.Columns.Add ("Order", Type.GetType ("System.Int32"));
    dt.Columns.Add ("Driver", Type.GetType ("System.Int32"));
    dr = dt.NewRow ();
    if (AnotherMethod1 (Param)) {
        dr ["Order"] = 1;
    } else {
        dr ["Order"] = 0;
    }
    if (AnotherMethod2 (Param)) {
        dr ["Driver"] = 1;
    } else {
        dr ["Driver"] = 0;
    }
    dt.Rows.Add (dr);
    return dt;
}
----------------------------------------

 public DataTable MethodName (string Param) {
      DataRow dr;
      DataTable dt = new DataTable ();
      dt.Columns.Add ("Order", Type.GetType ("System.Int32"));
      dt.Columns.Add ("Driver", Type.GetType ("System.Int32"));
      dr = dt.NewRow ();
      if (AnotherMethod1 (Param)) {
          dt.Rows.Add (dr["Order"] = 1);
      } else {
          dt.Rows.Add (dr["Order"] = 0);
      } 
      if (AnotherMethod2 (Param)) {
          dt.Rows.Add (dr["Driver"] = 1);
      } else {
          dt.Rows.Add (dr["Driver"] = 0);
      }
      return dt;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
510
4
Gpt3D_Clone510_4.cs 1 19
Gpt3D_Clone510_4.cs 20 37
----------------------------------------

public DataTable MethodName (string Param) {
    DataRow dr;
    DataTable dt = new DataTable ();
    dt.Columns.Add ("Order", Type.GetType ("System.Int32"));
    dt.Columns.Add ("Driver", Type.GetType ("System.Int32"));
    dr = dt.NewRow ();
    if (AnotherMethod1 (Param)) {
        dr ["Order"] = 1;
    } else {
        dr ["Order"] = 0;
    }
    if (AnotherMethod2 (Param)) {
        dr ["Driver"] = 1;
    } else {
        dr ["Driver"] = 0;
    }
    dt.Rows.Add (dr);
    return dt;
}
----------------------------------------

 public DataTable MethodName (string Param) {
      DataTable dt  = new DataTable ();
      dt.Columns.Add ("Order", Type.GetType ("System.Int32"));
      dt.Columns.Add ("Driver", Type.GetType ("System.Int32"));
      if (AnotherMethod1 (Param)) {
          dt.Rows.Add (1);
      } else {
          dt.Rows.Add (0);
      } 
      if (AnotherMethod2 (Param)) {
          dt.Rows.Add (1);
      } else {
          dt.Rows.Add (0);
      }
      return dt;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
510
5
Gpt3D_Clone510_5.cs 1 19
Gpt3D_Clone510_5.cs 20 37
----------------------------------------

public DataTable MethodName (string Param) {
    DataRow dr;
    DataTable dt = new DataTable ();
    dt.Columns.Add ("Order", Type.GetType ("System.Int32"));
    dt.Columns.Add ("Driver", Type.GetType ("System.Int32"));
    dr = dt.NewRow ();
    if (AnotherMethod1 (Param)) {
        dr ["Order"] = 1;
    } else {
        dr ["Order"] = 0;
    }
    if (AnotherMethod2 (Param)) {
        dr ["Driver"] = 1;
    } else {
        dr ["Driver"] = 0;
    }
    dt.Rows.Add (dr);
    return dt;
}
----------------------------------------

 public DataTable MethodName (string Param) {
      DataTable dt = new DataTable ();
      dt.Columns.Add("Order", Type.GetType("System.Int32"));
      dt.Columns.Add("Driver", Type.GetType("System.Int32"));
      if (AnotherMethod1 (Param)) {
          dt.Rows.Add(new Object[] {1, null});
      } else {
          dt.Rows.Add(new Object[] {0, null});
      }
      if (AnotherMethod2 (Param)) {
          dt.Rows.Add(new Object[] {null, 1});
      } else {
          dt.Rows.Add(new Object[] {null, 0});
      }
      return dt;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
512
0
Gpt3D_Clone512_0.cs 1 9
Gpt3D_Clone512_0.cs 10 58
----------------------------------------

public override int ReadBlock (char [] buffer, int index, int count) {
    var ret = base.ReadBlock (buffer, index, count);
    for (int i = 0; i < ret; i ++) {
        int idx = index + i;
        if (! XmlConvert.IsXmlChar (buffer [idx]))
            buffer [idx] = ' ';
    }
    return ret;
}
----------------------------------------

 public override int ReadBlock (char [] buffer, int index, int count) 
{ 
    int ret = base.ReadBlock (buffer, index, count); 
    for (int i = 0; i < ret; i++) 
    { 
        int idx = index + i; 
        if (!XmlConvert.IsXmlChar(buffer[idx])) 
            buffer[idx] = (char)0x21; 
    } 
    return ret; 
}  
 public override int ReadBlock (char [] buffer, int index, int count) 
{ 
    int ret = base.ReadBlock (buffer, index, count); 
    for (int i = 0; i < ret; i++) 
    { 
        int idx = index + i; 
        if (!XmlConvert.IsXmlChar(buffer[idx])) 
            buffer[idx] = '\uFFFE'; 
    } 
    return ret; 
}  
 public override int ReadBlock (char [] buffer, int index, int count) 
{ 
    int ret = base.ReadBlock (buffer, index, count); 
    for (int i = 0; i < ret; i++) 
    { 
        int idx = index + i; 
        if (!XmlConvert.IsXmlChar(buffer[idx])) 
            buffer[idx] = '\uFFFF'; 
    } 
    return ret; 
}  
 public override int ReadBlock (char [] buffer, int index, int count) 
{ 
    int ret = base.ReadBlock (buffer, index, count); 
    for (int i = 0; i < ret; i++) 
    { 
        int idx = index + i; 
        if (!XmlConvert.IsXmlChar(buffer[idx])) 
            buffer[idx] = '\u0020'; 
    } 
    return ret; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
512
1
Gpt3D_Clone512_1.cs 1 9
Gpt3D_Clone512_1.cs 10 22
----------------------------------------

public override int ReadBlock (char [] buffer, int index, int count) {
    var ret = base.ReadBlock (buffer, index, count);
    for (int i = 0; i < ret; i ++) {
        int idx = index + i;
        if (! XmlConvert.IsXmlChar (buffer [idx]))
            buffer [idx] = ' ';
    }
    return ret;
}
----------------------------------------

 public override int ReadBlock (char [] buffer, int index, int count) 
{ 
    int ret = base.ReadBlock (buffer, index, count); 
    for (int i = 0; i < ret; i++) 
    { 
        int idx = index + i; 
        if (!XmlConvert.IsXmlChar(buffer[idx])) 
            Replace_Character(buffer[idx], "!"); 
    } 
    return ret; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
512
2
Gpt3D_Clone512_2.cs 1 9
Gpt3D_Clone512_2.cs 10 22
----------------------------------------

public override int ReadBlock (char [] buffer, int index, int count) {
    var ret = base.ReadBlock (buffer, index, count);
    for (int i = 0; i < ret; i ++) {
        int idx = index + i;
        if (! XmlConvert.IsXmlChar (buffer [idx]))
            buffer [idx] = ' ';
    }
    return ret;
}
----------------------------------------

 public override int ReadBlock (char [] buffer, int index, int count) 
{ 
    int ret = base.ReadBlock (buffer, index, count); 
    for (int i = 0; i < ret; i++) 
    { 
        int idx = index + i; 
        if (!XmlConvert.IsXmlChar(buffer[idx])) 
            Replace_Character(buffer[idx], "~"); 
    } 
    return ret; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
512
3
Gpt3D_Clone512_3.cs 1 9
Gpt3D_Clone512_3.cs 10 22
----------------------------------------

public override int ReadBlock (char [] buffer, int index, int count) {
    var ret = base.ReadBlock (buffer, index, count);
    for (int i = 0; i < ret; i ++) {
        int idx = index + i;
        if (! XmlConvert.IsXmlChar (buffer [idx]))
            buffer [idx] = ' ';
    }
    return ret;
}
----------------------------------------

 public override int ReadBlock (char [] buffer, int index, int count) 
{ 
    int ret = base.ReadBlock (buffer, index, count); 
    for (int i = 0; i < ret; i++) 
    { 
        int idx = index + i; 
        if (!XmlConvert.IsXmlChar(buffer[idx])) 
            Replace_Character(buffer[idx], "\u2717"); 
    } 
    return ret; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
512
4
Gpt3D_Clone512_4.cs 1 9
Gpt3D_Clone512_4.cs 10 22
----------------------------------------

public override int ReadBlock (char [] buffer, int index, int count) {
    var ret = base.ReadBlock (buffer, index, count);
    for (int i = 0; i < ret; i ++) {
        int idx = index + i;
        if (! XmlConvert.IsXmlChar (buffer [idx]))
            buffer [idx] = ' ';
    }
    return ret;
}
----------------------------------------

 public override int ReadBlock (char [] buffer, int index, int count) 
{ 
    int ret = base.ReadBlock (buffer, index, count); 
    for (int i = 0; i < ret; i++) 
    { 
        int idx = index + i; 
        if (!XmlConvert.IsXmlChar(buffer[idx])) 
            Replace_Character(buffer[idx], "\u25cf"); 
    } 
    return ret; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
514
3
Gpt3D_Clone514_3.cs 1 10
Gpt3D_Clone514_3.cs 11 25
----------------------------------------

private Bitmap RotateImage (Bitmap bmp, float angle) {
    Bitmap rotatedImage = new Bitmap (bmp.Width, bmp.Height);
    using (Graphics g = Graphics.FromImage (rotatedImage))
    {
        g.TranslateTransform (bmp.Width / 2, bmp.Height / 2);
        g.RotateTransform (angle);
        g.TranslateTransform (- bmp.Width / 2, - bmp.Height / 2);
        g.DrawImage (bmp, new Point (0, 0));
    } return rotatedImage;
}
----------------------------------------

 private Bitmap RotateImage (Bitmap bmp, float angle) {
    Bitmap rotatedImage = new Bitmap (bmp.Width, bmp.Height);
    using (Matrix transform = new Matrix())
    {
        transform.RotateAt(angle, new PointF(bmp.Width/2,bmp.Height/2));
        using (Graphics g = Graphics.FromImage(rotatedImage))
        {
            g.Transform = transform;
            g.DrawImage(bmp, new Point(0, 0));
        }
    }
    return rotatedImage;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
514
4
Gpt3D_Clone514_4.cs 1 10
Gpt3D_Clone514_4.cs 11 23
----------------------------------------

private Bitmap RotateImage (Bitmap bmp, float angle) {
    Bitmap rotatedImage = new Bitmap (bmp.Width, bmp.Height);
    using (Graphics g = Graphics.FromImage (rotatedImage))
    {
        g.TranslateTransform (bmp.Width / 2, bmp.Height / 2);
        g.RotateTransform (angle);
        g.TranslateTransform (- bmp.Width / 2, - bmp.Height / 2);
        g.DrawImage (bmp, new Point (0, 0));
    } return rotatedImage;
}
----------------------------------------

  private static Bitmap RotateImage (Bitmap bmp, float angle) {
     Bitmap rotatedImage = new Bitmap(bmp.Width, bmp.Height);
     using (Graphics g = Graphics.FromImage(rotatedImage))
     {
         g.TranslateTransform(bmp.Width / 2, bmp.Height / 2);
         g.RotateTransform(angle);
         g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;
         g.DrawImage(bmp, -bmp.Width / 2, -bmp.Height / 2);
     }
     return rotatedImage;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
514
5
Gpt3D_Clone514_5.cs 1 10
Gpt3D_Clone514_5.cs 11 23
----------------------------------------

private Bitmap RotateImage (Bitmap bmp, float angle) {
    Bitmap rotatedImage = new Bitmap (bmp.Width, bmp.Height);
    using (Graphics g = Graphics.FromImage (rotatedImage))
    {
        g.TranslateTransform (bmp.Width / 2, bmp.Height / 2);
        g.RotateTransform (angle);
        g.TranslateTransform (- bmp.Width / 2, - bmp.Height / 2);
        g.DrawImage (bmp, new Point (0, 0));
    } return rotatedImage;
}
----------------------------------------

 private static Bitmap RotateImage (Bitmap bmp, float angle) {
    Bitmap rotatedImage = new Bitmap(bmp.Width, bmp.Height);
    using (Graphics g = Graphics.FromImage(rotatedImage))
    {
        g.TranslateTransform((float)bmp.Width / 2, (float)bmp.Height / 2);
        g.RotateTransform(angle);
        g.TranslateTransform(-(float)bmp.Width / 2, -(float)bmp.Height / 2);
        g.DrawImage(bmp, new PointF(0, 0));
    }
    return rotatedImage;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
514
6
Gpt3D_Clone514_6.cs 1 10
Gpt3D_Clone514_6.cs 11 21
----------------------------------------

private Bitmap RotateImage (Bitmap bmp, float angle) {
    Bitmap rotatedImage = new Bitmap (bmp.Width, bmp.Height);
    using (Graphics g = Graphics.FromImage (rotatedImage))
    {
        g.TranslateTransform (bmp.Width / 2, bmp.Height / 2);
        g.RotateTransform (angle);
        g.TranslateTransform (- bmp.Width / 2, - bmp.Height / 2);
        g.DrawImage (bmp, new Point (0, 0));
    } return rotatedImage;
}
----------------------------------------

 private static Bitmap RotateImage (Bitmap bmp, float angle) {
    Bitmap rotatedImage = new Bitmap (bmp.Width, bmp.Height);
    using (Graphics g = Graphics.FromImage (rotatedImage)){
        g.RotateTransform (angle);
        g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;
        g.DrawImage (bmp, 0, 0);
    }
    return rotatedImage;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
515
0
Gpt3D_Clone515_0.cs 1 15
Gpt3D_Clone515_0.cs 16 38
----------------------------------------

public override object BindModel (ControllerContext controllerContext, ModelBindingContext bindingContext) {
    if (! (bindingContext.ModelType == typeof (Guid)))
        return base.BindModel (controllerContext, bindingContext);
    if (! bindingContext.ValueProvider.ContainsPrefix (bindingContext.ModelName))
        return null;
    string input = bindingContext.ValueProvider.GetValue (bindingContext.ModelName).AttemptedValue;
    if (string.IsNullOrEmpty (input))
        return null;
    Guid g;
    if (Guid.TryParse (input, out g))
        return g;
    var bytes = HttpServerUtility.UrlTokenDecode (s);
    var result = new Guid (bytes);
    return result;
}
----------------------------------------

 public override object BindModel (ControllerContext controllerContext, ModelBindingContext bindingContext) {
     if (! (bindingContext.ModelType == typeof (Guid)))
        return base.BindModel (controllerContext, bindingContext);
    if (! bindingContext.ValueProvider.ContainsPrefix (bindingContext.ModelName))
        return null;
    string input = bindingContext.ValueProvider.GetValue (bindingContext.ModelName).AttemptedValue;
    if (string.IsNullOrEmpty (input))
        return null;
    Guid g;
    if (Guid.TryParse (input, out g))
        return g;
    byte[] b = new byte[16];
    int i = 0;
    foreach (char ch in input)
    {
        b[i] = (byte)ch;
        i++;
    }
    var result = new Guid (b);
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
515
1
Gpt3D_Clone515_1.cs 1 15
Gpt3D_Clone515_1.cs 16 35
----------------------------------------

public override object BindModel (ControllerContext controllerContext, ModelBindingContext bindingContext) {
    if (! (bindingContext.ModelType == typeof (Guid)))
        return base.BindModel (controllerContext, bindingContext);
    if (! bindingContext.ValueProvider.ContainsPrefix (bindingContext.ModelName))
        return null;
    string input = bindingContext.ValueProvider.GetValue (bindingContext.ModelName).AttemptedValue;
    if (string.IsNullOrEmpty (input))
        return null;
    Guid g;
    if (Guid.TryParse (input, out g))
        return g;
    var bytes = HttpServerUtility.UrlTokenDecode (s);
    var result = new Guid (bytes);
    return result;
}
----------------------------------------

  public override object BindModel (ControllerContext controllerContext, ModelBindingContext bindingContext) { 
    if (! (bindingContext.ModelType == typeof (Guid)))
        return base.BindModel (controllerContext, bindingContext);
    if (! bindingContext.ValueProvider.ContainsPrefix (bindingContext.ModelName))
        return null;
    string input = bindingContext.ValueProvider.GetValue (bindingContext.ModelName).AttemptedValue;
    if (string.IsNullOrEmpty (input))
    {
        return null;
    }
    Guid g;
    if (Guid.TryParseExact(input, "D", out g))
    {
        return g;
    }
    var bytes = HttpServerUtility.UrlTokenDecode (input);
    return new Guid (bytes);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
521
0
Gpt3D_Clone521_0.cs 1 8
Gpt3D_Clone521_0.cs 9 19
----------------------------------------

public new bool Equals (object x, object y) {
    if (x is string)
        return x == y;
    else if (x is Guid)
        return x == y;
    else
        return EqualityComparer < object >.Default.Equals (x, y);
}
----------------------------------------

 public new bool Equals (object x, object y) {
        if (y is typeof(x)) {
            return x == y;
        }       
        else if (x is Guid)
            return x == y;
        else
            return EqualityComparer < object >.Default.Equals (x, y);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
521
1
Gpt3D_Clone521_1.cs 1 8
Gpt3D_Clone521_1.cs 9 18
----------------------------------------

public new bool Equals (object x, object y) {
    if (x is string)
        return x == y;
    else if (x is Guid)
        return x == y;
    else
        return EqualityComparer < object >.Default.Equals (x, y);
}
----------------------------------------

 public new bool Equals (object x, object y) {
        if (x is StringBuilder)
            return x.Equals (y);
        else if (x is Guid)
            return x.Equals (y);
        else
            return EqualityComparer < object >.Default.Equals (x, y);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
521
2
Gpt3D_Clone521_2.cs 1 8
Gpt3D_Clone521_2.cs 9 18
----------------------------------------

public new bool Equals (object x, object y) {
    if (x is string)
        return x == y;
    else if (x is Guid)
        return x == y;
    else
        return EqualityComparer < object >.Default.Equals (x, y);
}
----------------------------------------

 public new bool Equals (object x, object y) {
        if (x is DBNull)
            return x == y;
        else if (x is Guid)
            return x == y;
        else
            return x == y;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
521
4
Gpt3D_Clone521_4.cs 1 8
Gpt3D_Clone521_4.cs 9 18
----------------------------------------

public new bool Equals (object x, object y) {
    if (x is string)
        return x == y;
    else if (x is Guid)
        return x == y;
    else
        return EqualityComparer < object >.Default.Equals (x, y);
}
----------------------------------------

 public new bool Equals (object x, object y) {
        if (x is float)
            return x == y;
        else if (x is double)
            return x == y;
        else
            return EqualityComparer < object >.Default.Equals (x, y);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
521
5
Gpt3D_Clone521_5.cs 1 8
Gpt3D_Clone521_5.cs 9 18
----------------------------------------

public new bool Equals (object x, object y) {
    if (x is string)
        return x == y;
    else if (x is Guid)
        return x == y;
    else
        return EqualityComparer < object >.Default.Equals (x, y);
}
----------------------------------------

 public new bool Equals (object x, object y) {
        if (x is long)
            return x == y;
        else if (x is Guid)
            return x == y;
        else
            return x == y;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
524
0
Gpt3D_Clone524_0.cs 1 10
Gpt3D_Clone524_0.cs 11 24
----------------------------------------

public object AfterReceiveRequest (ref Message request, IClientChannel channel, InstanceContext instanceContext) {
    try {
        Guid tokenId = request.Headers.GetHeader < Guid > ("Token", "System");
        Console.WriteLine ("Token: {0}", tokenId);
    }
    catch (Exception e) {
        Console.WriteLine ("{0}: {1}", e.GetType ().FullName, e.Message);
    }
    return null;
}
----------------------------------------

 public object AfterReceiveRequest (ref Message request, IClientChannel channel, InstanceContext instanceContext) {
            try
        {
            Guid tokenId;
            Guid.TryParse(request.Headers["Token"].ToString(), out tokenId);
            Console.WriteLine("Token: {0}", tokenId);
        }
        catch (Exception e)
        {
            Console.WriteLine("{0}: {1}", e.GetType().FullName, e.Message);
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
524
1
Gpt3D_Clone524_1.cs 1 10
Gpt3D_Clone524_1.cs 11 23
----------------------------------------

public object AfterReceiveRequest (ref Message request, IClientChannel channel, InstanceContext instanceContext) {
    try {
        Guid tokenId = request.Headers.GetHeader < Guid > ("Token", "System");
        Console.WriteLine ("Token: {0}", tokenId);
    }
    catch (Exception e) {
        Console.WriteLine ("{0}: {1}", e.GetType ().FullName, e.Message);
    }
    return null;
}
----------------------------------------

 public object AfterReceiveRequest (ref Message request, IClientChannel channel, InstanceContext instanceContext) {
            try 
        { 
            var tokenId = request.Headers.GetHeader<Guid>("Token"); 
            Console.WriteLine("Token: {0}", tokenId); 
        } 
        catch (Exception e) 
        { 
            Console.WriteLine("{0}: {1}", e.GetType().FullName, e.Message); 
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
524
2
Gpt3D_Clone524_2.cs 1 10
Gpt3D_Clone524_2.cs 11 23
----------------------------------------

public object AfterReceiveRequest (ref Message request, IClientChannel channel, InstanceContext instanceContext) {
    try {
        Guid tokenId = request.Headers.GetHeader < Guid > ("Token", "System");
        Console.WriteLine ("Token: {0}", tokenId);
    }
    catch (Exception e) {
        Console.WriteLine ("{0}: {1}", e.GetType ().FullName, e.Message);
    }
    return null;
}
----------------------------------------

 public object AfterReceiveRequest (ref Message request, IClientChannel channel, InstanceContext instanceContext) {
            try 
        { 
            Guid tokenId = (Guid)request.Headers.GetHeader("Token", "System"); 
            Console.WriteLine("Token: {0}", tokenId); 
        } 
        catch (Exception e) 
        { 
            Console.WriteLine("{0}: {1}", e.GetType().FullName, e.Message); 
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
524
3
Gpt3D_Clone524_3.cs 1 10
Gpt3D_Clone524_3.cs 11 23
----------------------------------------

public object AfterReceiveRequest (ref Message request, IClientChannel channel, InstanceContext instanceContext) {
    try {
        Guid tokenId = request.Headers.GetHeader < Guid > ("Token", "System");
        Console.WriteLine ("Token: {0}", tokenId);
    }
    catch (Exception e) {
        Console.WriteLine ("{0}: {1}", e.GetType ().FullName, e.Message);
    }
    return null;
}
----------------------------------------

 public object AfterReceiveRequest (ref Message request, IClientChannel channel, InstanceContext instanceContext) {
            try
        {
            Guid tokenId = request.Headers.GetHeader<Guid>("Token", default(Guid));
            Console.WriteLine("Token {0}", tokenId);
        }
        catch (Exception e)
        {
            Console.WriteLine("{0}: {1}", e.GetType().FullName, e.Message);
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
524
4
Gpt3D_Clone524_4.cs 1 10
Gpt3D_Clone524_4.cs 11 21
----------------------------------------

public object AfterReceiveRequest (ref Message request, IClientChannel channel, InstanceContext instanceContext) {
    try {
        Guid tokenId = request.Headers.GetHeader < Guid > ("Token", "System");
        Console.WriteLine ("Token: {0}", tokenId);
    }
    catch (Exception e) {
        Console.WriteLine ("{0}: {1}", e.GetType ().FullName, e.Message);
    }
    return null;
}
----------------------------------------

 public object AfterReceiveRequest (ref Message request, IClientChannel channel, InstanceContext instanceContext) {
        try {
        var tokenId = request.Headers["Token"]?.ToString();
        Console.WriteLine("Token: {0}", tokenId);
    }
    catch (Exception e) {
        Console.WriteLine("{0}: {1}", e.GetType().FullName, e.Message);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
524
5
Gpt3D_Clone524_5.cs 1 10
Gpt3D_Clone524_5.cs 11 23
----------------------------------------

public object AfterReceiveRequest (ref Message request, IClientChannel channel, InstanceContext instanceContext) {
    try {
        Guid tokenId = request.Headers.GetHeader < Guid > ("Token", "System");
        Console.WriteLine ("Token: {0}", tokenId);
    }
    catch (Exception e) {
        Console.WriteLine ("{0}: {1}", e.GetType ().FullName, e.Message);
    }
    return null;
}
----------------------------------------

 public object AfterReceiveRequest (ref Message request, IClientChannel channel, InstanceContext instanceContext) {
            try 
        { 
            var tokenId = (Guid)request.Headers["Token"].ToString(); 
            Console.WriteLine("Token: {0}", tokenId); 
        } 
        catch (Exception e) 
        { 
            Console.WriteLine("{0}: {1}", e.GetType().FullName, e.Message); 
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
524
6
Gpt3D_Clone524_6.cs 1 10
Gpt3D_Clone524_6.cs 11 21
----------------------------------------

public object AfterReceiveRequest (ref Message request, IClientChannel channel, InstanceContext instanceContext) {
    try {
        Guid tokenId = request.Headers.GetHeader < Guid > ("Token", "System");
        Console.WriteLine ("Token: {0}", tokenId);
    }
    catch (Exception e) {
        Console.WriteLine ("{0}: {1}", e.GetType ().FullName, e.Message);
    }
    return null;
}
----------------------------------------

 public object AfterReceiveRequest (ref Message request, IClientChannel channel, InstanceContext instanceContext) {
            try {
            var tokenId = request.Headers["Token"].ToString();
            Console.WriteLine("Token: {0}", tokenId);
        }
        catch (Exception e) {
            Console.WriteLine("{0}: {1}", e.GetType().FullName, e.Message);
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
524
7
Gpt3D_Clone524_7.cs 1 10
Gpt3D_Clone524_7.cs 11 21
----------------------------------------

public object AfterReceiveRequest (ref Message request, IClientChannel channel, InstanceContext instanceContext) {
    try {
        Guid tokenId = request.Headers.GetHeader < Guid > ("Token", "System");
        Console.WriteLine ("Token: {0}", tokenId);
    }
    catch (Exception e) {
        Console.WriteLine ("{0}: {1}", e.GetType ().FullName, e.Message);
    }
    return null;
}
----------------------------------------

 public object AfterReceiveRequest (ref Message request, IClientChannel channel, InstanceContext instanceContext) {
            try{
            Guid tokenId = request.Headers["Token"].ToString();
            Console.WriteLine("Token: {0}", tokenId);
            }
            catch(Exception e) {
            Console.WriteLine("{0}: {1}", e.GetType().FullName, e.Message);
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
524
8
Gpt3D_Clone524_8.cs 1 10
Gpt3D_Clone524_8.cs 11 21
----------------------------------------

public object AfterReceiveRequest (ref Message request, IClientChannel channel, InstanceContext instanceContext) {
    try {
        Guid tokenId = request.Headers.GetHeader < Guid > ("Token", "System");
        Console.WriteLine ("Token: {0}", tokenId);
    }
    catch (Exception e) {
        Console.WriteLine ("{0}: {1}", e.GetType ().FullName, e.Message);
    }
    return null;
}
----------------------------------------

 public object AfterReceiveRequest (ref Message request, IClientChannel channel, InstanceContext instanceContext) {
            try {
            dynamic tokenId = request.Headers["Token"];
            Console.WriteLine("Token: {0}", tokenId);
        }
        catch (Exception e) {
            Console.WriteLine("{0}: {1}", e.GetType().FullName, e.Message);
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
526
0
Gpt3D_Clone526_0.cs 1 21
Gpt3D_Clone526_0.cs 22 49
----------------------------------------

public bool Seq_Check (int [] elems, int k) {
    for (int i = elems.Length; i > 0; i --) {
        if (elems [i] == k) {
            int curr = k - 1;
            for (; i > 0 && curr > 0; i --) {
                if (elems [i] != curr) {
                    if (elems [i] == k) {
                        curr = k - 1;
                        continue;
                    }
                    break;
                }
                curr --;
            }
            if (curr == 0) {
                return true;
            }
        }
    }
    return false;
}
----------------------------------------

 public bool Seq_Check (int [] elems, int k)
{
    bool found = false; 
    int len = elems.Length - 1; 
    while(len >= 0){
        if(elems[len] == k){
            found = true;
            int curr = k - 1;
            while(len >= 0 && curr > 0){
                if(elems[len] != curr){
                    if(elems[len] == k){
                        found = false;
                    }
                    break;
                }
                curr--;
            }
            if(found == true){
                return true;
            }
        }
        len--;
    }
    
    return false; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
526
1
Gpt3D_Clone526_1.cs 1 21
Gpt3D_Clone526_1.cs 22 53
----------------------------------------

public bool Seq_Check (int [] elems, int k) {
    for (int i = elems.Length; i > 0; i --) {
        if (elems [i] == k) {
            int curr = k - 1;
            for (; i > 0 && curr > 0; i --) {
                if (elems [i] != curr) {
                    if (elems [i] == k) {
                        curr = k - 1;
                        continue;
                    }
                    break;
                }
                curr --;
            }
            if (curr == 0) {
                return true;
            }
        }
    }
    return false;
}
----------------------------------------

 public bool Seq_Check (int [] elems, int k) 
{ 
    int len = elems.Length; 
  
    for (int i = len; i > 0; i--) { 
        // Iterate the array, 
        // and check if k is found or not. 
        // If k is found, check if the previous  
        // elements are consecutive. 
        if (elems[i] == k) { 
            int curr = k - 1; 
  
            for (; i > 0 && curr > 0; i--) { 
                if (elems[i] != curr) { 
                    // Reset the counter if k is found  
                    // again in the array. 
                    if (elems[i] == k)  
                        curr = k - 1;  
  
                    break; 
                } 
                curr--; 
            } 
            if (curr == 0) 
                return true; 
        } 
    } 
  
    return false; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
526
2
Gpt3D_Clone526_2.cs 1 21
Gpt3D_Clone526_2.cs 22 50
----------------------------------------

public bool Seq_Check (int [] elems, int k) {
    for (int i = elems.Length; i > 0; i --) {
        if (elems [i] == k) {
            int curr = k - 1;
            for (; i > 0 && curr > 0; i --) {
                if (elems [i] != curr) {
                    if (elems [i] == k) {
                        curr = k - 1;
                        continue;
                    }
                    break;
                }
                curr --;
            }
            if (curr == 0) {
                return true;
            }
        }
    }
    return false;
}
----------------------------------------

 public bool Seq_Check (int [] elems, int k) 
{
    int len = elems.Length - 1;
    for(int i=0; i<len; i++)
    {
        if(elems[i] == k)
        {
            int checker = k-1;
            while(i>0 && checker>0)
            {
                if(elems[i]!=checker)
                {
                    // Allowing multiple instances of k
                    if(elems[i] == k)
                        checker = k-1;
                    
                    break;
                }
                checker--;
            }
            if(checker == 0)
                return true;
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
527
0
Gpt3D_Clone527_0.cs 1 10
Gpt3D_Clone527_0.cs 11 24
----------------------------------------

static void Main (string [] args) {
    using (StreamReader sr = new StreamReader (args [0], Encoding.UTF8))
    using (StreamWriter sw = new StreamWriter (args [1], false, Encoding.Unicode))
    {
        string line;
        while ((line = sr.ReadLine ()) != null) {
            sw.WriteLine (line);
        }
    }
}
----------------------------------------

 static void Main(string[] args)
{
    using (var reader = new StreamReader(args[0], Encoding.UTF8))
    using (var writer = new StreamWriter(args[1], false, Encoding.Unicode))
    {
        string line;
        while ((line = reader.ReadLine()) != null)
        {
            writer.WriteLine(line);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
527
1
Gpt3D_Clone527_1.cs 1 10
Gpt3D_Clone527_1.cs 11 24
----------------------------------------

static void Main (string [] args) {
    using (StreamReader sr = new StreamReader (args [0], Encoding.UTF8))
    using (StreamWriter sw = new StreamWriter (args [1], false, Encoding.Unicode))
    {
        string line;
        while ((line = sr.ReadLine ()) != null) {
            sw.WriteLine (line);
        }
    }
}
----------------------------------------

 static void Main(string[] args)
{
    using (var streamReader = new StreamReader(args[0], Encoding.UTF8))
    using (var streamWriter = new StreamWriter(args[1], false, Encoding.Unicode))
    {
        string line;
        while ((line = streamReader.ReadLine()) != null)
        {
            streamWriter.WriteLine(line);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
527
2
Gpt3D_Clone527_2.cs 1 10
Gpt3D_Clone527_2.cs 11 24
----------------------------------------

static void Main (string [] args) {
    using (StreamReader sr = new StreamReader (args [0], Encoding.UTF8))
    using (StreamWriter sw = new StreamWriter (args [1], false, Encoding.Unicode))
    {
        string line;
        while ((line = sr.ReadLine ()) != null) {
            sw.WriteLine (line);
        }
    }
}
----------------------------------------

 static void Main(string[] args)
{
    using (var sr = new StreamReader(args[0], Encoding.UTF8))
    using (var sw = new StreamWriter(args[1], false, Encoding.Unicode))
    {
        string line;
        while ((line = sr.ReadLine()) != null)
        {
            sw.WriteLine(line);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
530
0
Gpt3D_Clone530_0.cs 1 12
Gpt3D_Clone530_0.cs 13 28
----------------------------------------

private static void Main () {
    _serialPortBytes = Encoding.ASCII.GetBytes ("Mimic a bunch of bytes from the serial port");
    _streamOfBytesFromPort = new MemoryStream (_serialPortBytes);
    _streamOfBytesFromPort.Position = 0;
    _cancelTaskSignalSource = new CancellationTokenSource ();
    _cancelTaskSignal = _cancelTaskSignalSource.Token;
    var readFromSerialPort = Task.Factory.StartNew (ReadStream, _cancelTaskSignal);
    readFromSerialPort.Wait (3000);
    Console.WriteLine ("Press enter to cancel the task");
    _cancelTaskSignalSource.Cancel ();
    Console.ReadLine ();
}
----------------------------------------

private static void Main () {
    _serialPortBytes = Encoding.ASCII.GetBytes ("Mimic a bunch of bytes from the serial port");
    _streamOfBytesFromPort = new MemoryStream (_serialPortBytes);
    _streamOfBytesFromPort.Position = 0;
    _cancelTaskSignalSource = new CancellationTokenSource ();
    CancellationToken _cancelTaskSignal = _cancelTaskSignalSource.Token;
    Barrier barrier = new Barrier(2);
    var readTask = Task.Factory.StartNew(() => ReadStream(_cancelTaskSignal, barrier));
    barrier.SignalAndWait(3000);
    Console.WriteLine ("Press enter to cancel the task");
    _cancelTaskSignalSource.Cancel ();
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
530
1
Gpt3D_Clone530_1.cs 1 12
Gpt3D_Clone530_1.cs 13 28
----------------------------------------

private static void Main () {
    _serialPortBytes = Encoding.ASCII.GetBytes ("Mimic a bunch of bytes from the serial port");
    _streamOfBytesFromPort = new MemoryStream (_serialPortBytes);
    _streamOfBytesFromPort.Position = 0;
    _cancelTaskSignalSource = new CancellationTokenSource ();
    _cancelTaskSignal = _cancelTaskSignalSource.Token;
    var readFromSerialPort = Task.Factory.StartNew (ReadStream, _cancelTaskSignal);
    readFromSerialPort.Wait (3000);
    Console.WriteLine ("Press enter to cancel the task");
    _cancelTaskSignalSource.Cancel ();
    Console.ReadLine ();
}
----------------------------------------

 
private static void Main () {
     _serialPortBytes = Encoding.ASCII.GetBytes ("Mimic a bunch of bytes from the serial port");
    _streamOfBytesFromPort = new MemoryStream (_serialPortBytes);
    _streamOfBytesFromPort.Position = 0;
    CountdownEvent _countdownEvent = new CountdownEvent(1);
    _cancelTaskSignalSource = new CancellationTokenSource ();
    CancellationToken _cancelTaskSignal = _cancelTaskSignalSource.Token;
    var readTask = Task.Factory.StartNew(() => ReadStream(_cancelTaskSignal, _countdownEvent));
    _countdownEvent.Wait(3000);
    Console.WriteLine ("Press enter to cancel the task");
    _cancelTaskSignalSource.Cancel ();
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
530
2
Gpt3D_Clone530_2.cs 1 12
Gpt3D_Clone530_2.cs 13 28
----------------------------------------

private static void Main () {
    _serialPortBytes = Encoding.ASCII.GetBytes ("Mimic a bunch of bytes from the serial port");
    _streamOfBytesFromPort = new MemoryStream (_serialPortBytes);
    _streamOfBytesFromPort.Position = 0;
    _cancelTaskSignalSource = new CancellationTokenSource ();
    _cancelTaskSignal = _cancelTaskSignalSource.Token;
    var readFromSerialPort = Task.Factory.StartNew (ReadStream, _cancelTaskSignal);
    readFromSerialPort.Wait (3000);
    Console.WriteLine ("Press enter to cancel the task");
    _cancelTaskSignalSource.Cancel ();
    Console.ReadLine ();
}
----------------------------------------

 
private static void Main () {
    _serialPortBytes = Encoding.ASCII.GetBytes ("Mimic a bunch of bytes from the serial port");
    _streamOfBytesFromPort = new MemoryStream (_serialPortBytes);
    _streamOfBytesFromPort.Position = 0;
    _cancelTaskSignalSource = new CancellationTokenSource ();
    CancellationToken _cancelTaskSignal = _cancelTaskSignalSource.Token;
    ManualResetEventSlim _resetEventSlim = new ManualResetEventSlim(false);
    var readTask = Task.Factory.StartNew(() => ReadStream(_cancelTaskSignal, _resetEventSlim));
    _resetEventSlim.Wait(3000);
    Console.WriteLine ("Press enter to cancel the task");
    _cancelTaskSignalSource.Cancel ();
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
530
3
Gpt3D_Clone530_3.cs 1 12
Gpt3D_Clone530_3.cs 13 28
----------------------------------------

private static void Main () {
    _serialPortBytes = Encoding.ASCII.GetBytes ("Mimic a bunch of bytes from the serial port");
    _streamOfBytesFromPort = new MemoryStream (_serialPortBytes);
    _streamOfBytesFromPort.Position = 0;
    _cancelTaskSignalSource = new CancellationTokenSource ();
    _cancelTaskSignal = _cancelTaskSignalSource.Token;
    var readFromSerialPort = Task.Factory.StartNew (ReadStream, _cancelTaskSignal);
    readFromSerialPort.Wait (3000);
    Console.WriteLine ("Press enter to cancel the task");
    _cancelTaskSignalSource.Cancel ();
    Console.ReadLine ();
}
----------------------------------------

 
private static void Main () {
    _serialPortBytes = Encoding.ASCII.GetBytes ("Mimic a bunch of bytes from the serial port");
    _streamOfBytesFromPort = new MemoryStream (_serialPortBytes);
    _streamOfBytesFromPort.Position = 0;
    _cancelTaskSignalSource = new CancellationTokenSource ();
    CancellationToken _cancelTaskSignal = _cancelTaskSignalSource.Token;
    ReadStreamDelegate del = new ReadStreamDelegate(ReadStream);
    IAsyncResult ar = del.BeginInvoke(_cancelTaskSignal, null, null);
    ar.AsyncWaitHandle.WaitOne(3000);
    Console.WriteLine ("Press enter to cancel the task");
    _cancelTaskSignalSource.Cancel ();
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
530
4
Gpt3D_Clone530_4.cs 1 12
Gpt3D_Clone530_4.cs 13 28
----------------------------------------

private static void Main () {
    _serialPortBytes = Encoding.ASCII.GetBytes ("Mimic a bunch of bytes from the serial port");
    _streamOfBytesFromPort = new MemoryStream (_serialPortBytes);
    _streamOfBytesFromPort.Position = 0;
    _cancelTaskSignalSource = new CancellationTokenSource ();
    _cancelTaskSignal = _cancelTaskSignalSource.Token;
    var readFromSerialPort = Task.Factory.StartNew (ReadStream, _cancelTaskSignal);
    readFromSerialPort.Wait (3000);
    Console.WriteLine ("Press enter to cancel the task");
    _cancelTaskSignalSource.Cancel ();
    Console.ReadLine ();
}
----------------------------------------

 
private static void Main () {
    _serialPortBytes = Encoding.ASCII.GetBytes ("Mimic a bunch of bytes from the serial port");
    _streamOfBytesFromPort = new MemoryStream (_serialPortBytes);
    _streamOfBytesFromPort.Position = 0;
    TaskCompletionSource<bool> tcs = new TaskCompletionSource<bool>();
    _cancelTaskSignalSource = new CancellationTokenSource ();
    CancellationToken _cancelTaskSignal = _cancelTaskSignalSource.Token;
    var readTask = Task.Factory.StartNew(() => ReadStream(_cancelTaskSignal, tcs));
    tcs.Task.Wait(3000);
    Console.WriteLine ("Press enter to cancel the task");
    _cancelTaskSignalSource.Cancel ();
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
532
5
Gpt3D_Clone532_5.cs 1 14
Gpt3D_Clone532_5.cs 15 34
----------------------------------------

private void AddNode (int valueToBeInserted, Node current) {
    if (valueToBeInserted < current.value) {
        if (current.left == null)
            current.left = new Node (valueToBeInserted);
        else
            AddNode (valueToBeInserted, current.left);
    }
    if (valueToBeInserted > current.value) {
        if (current.right == null)
            current.right = new Node (valueToBeInserted);
        else
            AddNode (valueToBeInserted, current.right);
    }
}
----------------------------------------

  private void AddNode(int valueToBeInserted, Node current)
    {
        Node newNode = new Node(valueToBeInserted);
        if (valueToBeInserted < current.value)
        {
            if (current.left == null)
                current.left = newNode;
            else
                AddNode(valueToBeInserted, current.left);
        }
        else if (valueToBeInserted > current.value)
        {
            if (current.right == null)
                current.right = newNode;
            else
                AddNode(valueToBeInserted, current.right);
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
532
6
Gpt3D_Clone532_6.cs 1 14
Gpt3D_Clone532_6.cs 15 41
----------------------------------------

private void AddNode (int valueToBeInserted, Node current) {
    if (valueToBeInserted < current.value) {
        if (current.left == null)
            current.left = new Node (valueToBeInserted);
        else
            AddNode (valueToBeInserted, current.left);
    }
    if (valueToBeInserted > current.value) {
        if (current.right == null)
            current.right = new Node (valueToBeInserted);
        else
            AddNode (valueToBeInserted, current.right);
    }
}
----------------------------------------

  private void AddNode(int valueToBeInserted, Node current)
    {
        if (valueToBeInserted < current.value)
        {
            if (current.left == null)
            {
                current.left = new Node(valueToBeInserted);
            }
            else
            {
                AddNode(valueToBeInserted, current.left);
            }
        }
        else if (valueToBeInserted > current.value)
        {
            if (current.right == null)
            {
                current.right = new Node(valueToBeInserted);
            }
            else
            {
                AddNode(valueToBeInserted, current.right);
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
532
7
Gpt3D_Clone532_7.cs 1 14
Gpt3D_Clone532_7.cs 15 37
----------------------------------------

private void AddNode (int valueToBeInserted, Node current) {
    if (valueToBeInserted < current.value) {
        if (current.left == null)
            current.left = new Node (valueToBeInserted);
        else
            AddNode (valueToBeInserted, current.left);
    }
    if (valueToBeInserted > current.value) {
        if (current.right == null)
            current.right = new Node (valueToBeInserted);
        else
            AddNode (valueToBeInserted, current.right);
    }
}
----------------------------------------

 private void AddNode(int valueToBeInserted, Node current)
    {
        if (valueToBeInserted < current.value)
        {
            if (current.left == null)
            {
                current.left = new Node(valueToBeInserted);
                return;
            }
            AddNode(valueToBeInserted, current.left);
        }
        else if (valueToBeInserted > current.value)
        {
            if (current.right == null)
            {
                current.right = new Node(valueToBeInserted);
                return;
            }
            AddNode(valueToBeInserted, current.right);
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
533
0
Gpt3D_Clone533_0.cs 1 11
Gpt3D_Clone533_0.cs 12 29
----------------------------------------

public static void Main (string [] args) {
    int ctr = 0;
    string fileName = args [0];
    string result = "Checking data ";
    do
        {
            ctr += 1;
            result += ctr.ToString () + "...";
        } while (! File.Exists (fileName) && ctr <= 3);
    Console.WriteLine (result);
}
----------------------------------------

 public static void Main (string [] args) {
    int ctr = 0;
    string fileName = args [0];
    string result = "Checking data ";
    do {
        ctr += 1;
        if (ctr > 3)
            break;
        if (File.Exists (fileName))
            break;
        result += ctr.ToString () + "...";
    } 
    while (ctr < 3);
    Console.WriteLine (result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
533
1
Gpt3D_Clone533_1.cs 1 11
Gpt3D_Clone533_1.cs 12 28
----------------------------------------

public static void Main (string [] args) {
    int ctr = 0;
    string fileName = args [0];
    string result = "Checking data ";
    do
        {
            ctr += 1;
            result += ctr.ToString () + "...";
        } while (! File.Exists (fileName) && ctr <= 3);
    Console.WriteLine (result);
}
----------------------------------------

 public static void Main (string [] args) {
    int ctr = 0;
    string fileName = args [0];
    string result = "Checking data ";
    while (true)
        {
            ctr += 1;
            if (ctr > 3)
                break;
            result += ctr.ToString () + "...";
            if (File.Exists (fileName))
                break;
        }
    Console.WriteLine (result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
533
2
Gpt3D_Clone533_2.cs 1 11
Gpt3D_Clone533_2.cs 12 28
----------------------------------------

public static void Main (string [] args) {
    int ctr = 0;
    string fileName = args [0];
    string result = "Checking data ";
    do
        {
            ctr += 1;
            result += ctr.ToString () + "...";
        } while (! File.Exists (fileName) && ctr <= 3);
    Console.WriteLine (result);
}
----------------------------------------

 public static void Main (string [] args) {
    int ctr = 0;
    string fileName = args [0];
    string result = "Checking data ";
    while (true)
        {
            if (File.Exists (fileName))
                break;
            if (ctr == 3)
                break;
            ctr += 1;
            result += ctr.ToString () + "...";
        }
    Console.WriteLine (result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
533
3
Gpt3D_Clone533_3.cs 1 11
Gpt3D_Clone533_3.cs 12 26
----------------------------------------

public static void Main (string [] args) {
    int ctr = 0;
    string fileName = args [0];
    string result = "Checking data ";
    do
        {
            ctr += 1;
            result += ctr.ToString () + "...";
        } while (! File.Exists (fileName) && ctr <= 3);
    Console.WriteLine (result);
}
----------------------------------------

 public static void Main (string [] args) {
    int ctr = 0;
    string fileName = args [0];
    string result = "Checking data ";
    while (ctr <= 3)
        {
            if (File.Exists (fileName))
                break;
            ctr += 1;
            result += ctr.ToString () + "...";
        }
    Console.WriteLine (result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
533
4
Gpt3D_Clone533_4.cs 1 11
Gpt3D_Clone533_4.cs 12 26
----------------------------------------

public static void Main (string [] args) {
    int ctr = 0;
    string fileName = args [0];
    string result = "Checking data ";
    do
        {
            ctr += 1;
            result += ctr.ToString () + "...";
        } while (! File.Exists (fileName) && ctr <= 3);
    Console.WriteLine (result);
}
----------------------------------------

 public static void Main (string [] args) {
    int ctr = 1;
    string fileName = args [0];
    string result = "Checking data ";
    while (ctr <= 3)
        {
            result += ctr.ToString () + "...";
            if (File.Exists (fileName))
            break;
            ctr += 1;
        }
    Console.WriteLine (result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
533
5
Gpt3D_Clone533_5.cs 1 11
Gpt3D_Clone533_5.cs 12 27
----------------------------------------

public static void Main (string [] args) {
    int ctr = 0;
    string fileName = args [0];
    string result = "Checking data ";
    do
        {
            ctr += 1;
            result += ctr.ToString () + "...";
        } while (! File.Exists (fileName) && ctr <= 3);
    Console.WriteLine (result);
}
----------------------------------------

 public static void Main (string [] args) {
    int ctr = 0;
    string fileName = args [0];
    string result = "Checking data ";
    while (ctr < 3)
        {
            ctr += 1;
            if (File.Exists (fileName))
                break;
            result += ctr.ToString () + "...";
        }
    Console.WriteLine (result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
533
6
Gpt3D_Clone533_6.cs 1 11
Gpt3D_Clone533_6.cs 12 26
----------------------------------------

public static void Main (string [] args) {
    int ctr = 0;
    string fileName = args [0];
    string result = "Checking data ";
    do
        {
            ctr += 1;
            result += ctr.ToString () + "...";
        } while (! File.Exists (fileName) && ctr <= 3);
    Console.WriteLine (result);
}
----------------------------------------

 public static void Main (string [] args) {
    int ctr = 0;
    string fileName = args [0];
    string result = "Checking data ";
    while (! File.Exists (fileName))
        {
            ctr += 1;
            if (ctr == 3)
                break;
            result += ctr.ToString () + "...";
        }
    Console.WriteLine (result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
533
7
Gpt3D_Clone533_7.cs 1 11
Gpt3D_Clone533_7.cs 12 25
----------------------------------------

public static void Main (string [] args) {
    int ctr = 0;
    string fileName = args [0];
    string result = "Checking data ";
    do
        {
            ctr += 1;
            result += ctr.ToString () + "...";
        } while (! File.Exists (fileName) && ctr <= 3);
    Console.WriteLine (result);
}
----------------------------------------

 public static void Main (string [] args) {
    int ctr = 0;
    string fileName = args [0];
    string result = "Checking data ";
    for (ctr = 1; ctr <= 3; ctr++)
        {
            result += ctr.ToString () + "...";
            if (File.Exists (fileName))
            break;
        }
    Console.WriteLine (result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
533
8
Gpt3D_Clone533_8.cs 1 11
Gpt3D_Clone533_8.cs 12 24
----------------------------------------

public static void Main (string [] args) {
    int ctr = 0;
    string fileName = args [0];
    string result = "Checking data ";
    do
        {
            ctr += 1;
            result += ctr.ToString () + "...";
        } while (! File.Exists (fileName) && ctr <= 3);
    Console.WriteLine (result);
}
----------------------------------------

 public static void Main (string [] args) {
    int ctr = 0;
    string fileName = args [0];
    string result = "Checking data ";
    while (ctr < 3 && ! File.Exists (fileName))
        {
            ctr += 1;
            result += ctr.ToString () + "...";
        }
    Console.WriteLine (result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
537
0
Gpt3D_Clone537_0.cs 1 24
Gpt3D_Clone537_0.cs 25 59
----------------------------------------

public static void Dispose (this MethodBuilder mb) {
    if (mb == null)
        return;
    Type mbType = typeof (MethodBuilder);
    FieldInfo mbILGen = mbType.GetField ("m_ilGenerator", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbMod = mbType.GetField ("m_module", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbContType = mbType.GetField ("m_containingType", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbLocSigHelp = mbType.GetField ("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbSigHelp = mbType.GetField ("m_signature", BindingFlags.Instance | BindingFlags.NonPublic);
    ILGenerator tempIlGen = mbILGen.GetValue (mb) as ILGenerator;
    tempIlGen.Dispose ();
    SignatureHelper tempmbSigHelp = mbLocSigHelp.GetValue (mb) as SignatureHelper;
    tempmbSigHelp.Dispose ();
    tempmbSigHelp = mbSigHelp.GetValue (mb) as SignatureHelper;
    tempmbSigHelp.Dispose ();
    ModuleBuilder tempMod = mbMod.GetValue (mb) as ModuleBuilder;
    tempMod.Dispose ();
    mbMod.SetValue (mb, null);
    mbILGen.SetValue (mb, null);
    mbContType.SetValue (mb, null);
    mbLocSigHelp.SetValue (mb, null);
    mbSigHelp.SetValue (mb, null);
    mbMod.SetValue (mb, null);
}
----------------------------------------

 public static void Dispose (this MethodBuilder mb) {
    if (mb == null)
        return;
    Type mbType = typeof (MethodBuilder);
    FieldInfo mbILGen = mbType.GetField ("m_ilGenerator", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbMod = mbType.GetField ("m_module", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbContType = mbType.GetField ("m_containingType", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbLocSigHelp = mbType.GetField ("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbSigHelp = mbType.GetField ("m_signature", BindingFlags.Instance | BindingFlags.NonPublic);
    ILGenerator tempIlGen;
    tempIlGen = mbILGen.GetValue (mb) as ILGenerator;
    if (tempIlGen != null) tempIlGen.Dispose ();
    SignatureHelper tempmbSigHelp;
    tempmbSigHelp = mbLocSigHelp.GetValue (mb) as SignatureHelper;
    if (tempmbSigHelp != null) tempmbSigHelp.Dispose ();
    tempmbSigHelp = mbSigHelp.GetValue (mb) as SignatureHelper;
    if (tempmbSigHelp != null) tempmbSigHelp.Dispose ();
    ModuleBuilder tempMod;
    tempMod = mbMod.GetValue (mb) as ModuleBuilder;
    if (tempMod != null) tempMod.Dispose ();
    mbILGen.SetValue (mb, null);
    mbMod.SetValue (mb, null);
    mbContType.SetValue (mb, null);
    mbLocSigHelp.SetValue (mb, null);
    mbSigHelp.SetValue (mb, null);
    mbMod.SetValue (mb, null);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
537
1
Gpt3D_Clone537_1.cs 1 24
Gpt3D_Clone537_1.cs 25 61
----------------------------------------

public static void Dispose (this MethodBuilder mb) {
    if (mb == null)
        return;
    Type mbType = typeof (MethodBuilder);
    FieldInfo mbILGen = mbType.GetField ("m_ilGenerator", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbMod = mbType.GetField ("m_module", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbContType = mbType.GetField ("m_containingType", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbLocSigHelp = mbType.GetField ("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbSigHelp = mbType.GetField ("m_signature", BindingFlags.Instance | BindingFlags.NonPublic);
    ILGenerator tempIlGen = mbILGen.GetValue (mb) as ILGenerator;
    tempIlGen.Dispose ();
    SignatureHelper tempmbSigHelp = mbLocSigHelp.GetValue (mb) as SignatureHelper;
    tempmbSigHelp.Dispose ();
    tempmbSigHelp = mbSigHelp.GetValue (mb) as SignatureHelper;
    tempmbSigHelp.Dispose ();
    ModuleBuilder tempMod = mbMod.GetValue (mb) as ModuleBuilder;
    tempMod.Dispose ();
    mbMod.SetValue (mb, null);
    mbILGen.SetValue (mb, null);
    mbContType.SetValue (mb, null);
    mbLocSigHelp.SetValue (mb, null);
    mbSigHelp.SetValue (mb, null);
    mbMod.SetValue (mb, null);
}
----------------------------------------

 public static void Dispose (this MethodBuilder mb) {
    if (mb == null)
        return;
    Type mbType = typeof (MethodBuilder);
    FieldInfo mbILGen = mbType.GetField ("m_ilGenerator", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbMod = mbType.GetField ("m_module", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbContType = mbType.GetField ("m_containingType", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbLocSigHelp = mbType.GetField ("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbSigHelp = mbType.GetField ("m_signature", BindingFlags.Instance | BindingFlags.NonPublic);
    ILGenerator ilGenValue = (ILGenerator) mbILGen.GetValue (mb);
    if(ilGenValue != null){
        ilGenValue.Dispose();
    }
    SignatureHelper locSigValue = (SignatureHelper) mbLocSigHelp.GetValue (mb);
    if(locSigValue != null){
        locSigValue.Dispose();
    }
    SignatureHelper sigValue = (SignatureHelper) mbSigHelp.GetValue (mb);
    if(sigValue != null){
        sigValue.Dispose();
    }
    ModuleBuilder modValue = (ModuleBuilder) mbMod.GetValue (mb);
    if(modValue != null){
        modValue.Dispose();
    }
    mbILGen.SetValue (mb, null);
    mbMod.SetValue (mb, null);
    mbContType.SetValue (mb, null);
    mbLocSigHelp.SetValue (mb, null);
    mbSigHelp.SetValue (mb, null);
    mbMod.SetValue (mb, null);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
537
2
Gpt3D_Clone537_2.cs 1 24
Gpt3D_Clone537_2.cs 25 56
----------------------------------------

public static void Dispose (this MethodBuilder mb) {
    if (mb == null)
        return;
    Type mbType = typeof (MethodBuilder);
    FieldInfo mbILGen = mbType.GetField ("m_ilGenerator", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbMod = mbType.GetField ("m_module", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbContType = mbType.GetField ("m_containingType", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbLocSigHelp = mbType.GetField ("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbSigHelp = mbType.GetField ("m_signature", BindingFlags.Instance | BindingFlags.NonPublic);
    ILGenerator tempIlGen = mbILGen.GetValue (mb) as ILGenerator;
    tempIlGen.Dispose ();
    SignatureHelper tempmbSigHelp = mbLocSigHelp.GetValue (mb) as SignatureHelper;
    tempmbSigHelp.Dispose ();
    tempmbSigHelp = mbSigHelp.GetValue (mb) as SignatureHelper;
    tempmbSigHelp.Dispose ();
    ModuleBuilder tempMod = mbMod.GetValue (mb) as ModuleBuilder;
    tempMod.Dispose ();
    mbMod.SetValue (mb, null);
    mbILGen.SetValue (mb, null);
    mbContType.SetValue (mb, null);
    mbLocSigHelp.SetValue (mb, null);
    mbSigHelp.SetValue (mb, null);
    mbMod.SetValue (mb, null);
}
----------------------------------------

 public static void Dispose (this MethodBuilder mb) {
    if (mb == null)
        return;
    Type mbType = mb.GetType ();
    FieldInfo mbILGenField = mbType.GetField ("m_ilGenerator", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbModField = mbType.GetField ("m_module", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbContTypeField = mbType.GetField ("m_containingType", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbLocSigHelpField = mbType.GetField ("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbSigHelpField = mbType.GetField ("m_signature", BindingFlags.Instance | BindingFlags.NonPublic);
    ILGenerator mbILGen = (ILGenerator) mbILGenField.GetValue (mb);
    if (mbILGen != null) mbILGen.Dispose ();
    SignatureHelper mbLocSigHelp = (SignatureHelper) mbLocSigHelpField.GetValue (mb);
    if (mbLocSigHelp != null) mbLocSigHelp.Dispose ();
    SignatureHelper mbSigHelp = (SignatureHelper) mbSigHelpField.GetValue (mb);
    if (mbSigHelp != null) mbSigHelp.Dispose ();
    ModuleBuilder mbMod = (ModuleBuilder) mbModField.GetValue (mb);
    if (mbMod != null) mbMod.Dispose ();
    mbILGenField.SetValue (mb, null);
    mbModField.SetValue (mb, null);
    mbContTypeField.SetValue (mb, null);
    mbLocSigHelpField.SetValue (mb, null);
    mbSigHelpField.SetValue (mb, null);
    mbModField.SetValue (mb, null);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
537
3
Gpt3D_Clone537_3.cs 1 24
Gpt3D_Clone537_3.cs 25 51
----------------------------------------

public static void Dispose (this MethodBuilder mb) {
    if (mb == null)
        return;
    Type mbType = typeof (MethodBuilder);
    FieldInfo mbILGen = mbType.GetField ("m_ilGenerator", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbMod = mbType.GetField ("m_module", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbContType = mbType.GetField ("m_containingType", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbLocSigHelp = mbType.GetField ("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbSigHelp = mbType.GetField ("m_signature", BindingFlags.Instance | BindingFlags.NonPublic);
    ILGenerator tempIlGen = mbILGen.GetValue (mb) as ILGenerator;
    tempIlGen.Dispose ();
    SignatureHelper tempmbSigHelp = mbLocSigHelp.GetValue (mb) as SignatureHelper;
    tempmbSigHelp.Dispose ();
    tempmbSigHelp = mbSigHelp.GetValue (mb) as SignatureHelper;
    tempmbSigHelp.Dispose ();
    ModuleBuilder tempMod = mbMod.GetValue (mb) as ModuleBuilder;
    tempMod.Dispose ();
    mbMod.SetValue (mb, null);
    mbILGen.SetValue (mb, null);
    mbContType.SetValue (mb, null);
    mbLocSigHelp.SetValue (mb, null);
    mbSigHelp.SetValue (mb, null);
    mbMod.SetValue (mb, null);
}
----------------------------------------

 public static void Dispose (this MethodBuilder mb) {
    if (mb == null)
        return;
    Type mbType = typeof (MethodBuilder);
    FieldInfo mbILGen = mbType.GetField ("m_ilGenerator", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbMod = mbType.GetField ("m_module", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbContType = mbType.GetField ("m_containingType", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbLocSigHelp = mbType.GetField ("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbSigHelp = mbType.GetField ("m_signature", BindingFlags.Instance | BindingFlags.NonPublic);
    ILGenerator tempIlGen = (ILGenerator) mbILGen.GetValue (mb);
    tempIlGen?.Dispose ();
    SignatureHelper tempmbLocSigHelp = (SignatureHelper) mbLocSigHelp.GetValue (mb);
    tempmbLocSigHelp?.Dispose ();
    SignatureHelper tempmbSigHelp = (SignatureHelper) mbSigHelp.GetValue (mb);
    tempmbSigHelp?.Dispose ();
    ModuleBuilder tempMod = (ModuleBuilder) mbMod.GetValue (mb);
    tempMod?.Dispose ();
    mbILGen.SetValue (mb, null);
    mbMod.SetValue (mb, null);
    mbContType.SetValue (mb, null);
    mbLocSigHelp.SetValue (mb, null);
    mbSigHelp.SetValue (mb, null);
    mbMod.SetValue (mb, null);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
538
1
Gpt3D_Clone538_1.cs 1 24
Gpt3D_Clone538_1.cs 25 58
----------------------------------------

public static void Dispose (this MethodBuilder mb) {
    if (mb == null)
        return;
    Type mbType = typeof (MethodBuilder);
    FieldInfo mbILGen = mbType.GetField ("m_ilGenerator", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbMod = mbType.GetField ("m_module", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbContType = mbType.GetField ("m_containingType", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbLocSigHelp = mbType.GetField ("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbSigHelp = mbType.GetField ("m_signature", BindingFlags.Instance | BindingFlags.NonPublic);
    ILGenerator tempIlGen = mbILGen.GetValue (mb) as ILGenerator;
    tempIlGen.Dispose ();
    SignatureHelper tempmbSigHelp = mbLocSigHelp.GetValue (mb) as SignatureHelper;
    tempmbSigHelp.Dispose ();
    tempmbSigHelp = mbSigHelp.GetValue (mb) as SignatureHelper;
    tempmbSigHelp.Dispose ();
    ModuleBuilder tempMod = mbMod.GetValue (mb) as ModuleBuilder;
    tempMod.Dispose ();
    mbMod.SetValue (mb, null);
    mbILGen.SetValue (mb, null);
    mbContType.SetValue (mb, null);
    mbLocSigHelp.SetValue (mb, null);
    mbSigHelp.SetValue (mb, null);
    mbMod.SetValue (mb, null);
}
----------------------------------------

 public static void Dispose (this MethodBuilder mb) { 
    if (mb == null)
        return;
    
    Type mbType = typeof (MethodBuilder);
    FieldInfo mbILGen = mbType.GetField ("m_ilGenerator", BindingFlags.Instance | BindingFlags.NonPublic);
    ILGenerator tempIlGen = (ILGenerator) mbILGen.GetValue (mb);
    tempIlGen.Dispose ();
    FieldInfo mbMod = mbType.GetField ("m_module", BindingFlags.Instance | BindingFlags.NonPublic);
    ModuleBuilder tempMod = (ModuleBuilder) mbMod.GetValue (mb);
    tempMod.Dispose ();
    mbMod.SetValue (mb, null);
    mbILGen.SetValue (mb, null);
    FieldInfo mbContType = mbType.GetField ("m_containingType", BindingFlags.Instance | BindingFlags.NonPublic);
    mbContType.SetValue (mb, null);
    FieldInfo mbLocSigHelp = mbType.GetField ("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic);
    SignatureHelper tempmbSigHelp1 = (SignatureHelper) mbLocSigHelp.GetValue (mb);
    tempmbSigHelp1.Dispose ();
    FieldInfo mbSigHelp = mbType.GetField ("m_signature", BindingFlags.Instance | BindingFlags.NonPublic);
    SignatureHelper tempmbSigHelp2 = (SignatureHelper) mbSigHelp.GetValue (mb);
    tempmbSigHelp2.Dispose ();
    
    mbLocSigHelp.SetValue (mb, null);
    mbSigHelp.SetValue (mb, null);
    mbMod.SetValue (mb, null);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
538
2
Gpt3D_Clone538_2.cs 1 24
Gpt3D_Clone538_2.cs 25 58
----------------------------------------

public static void Dispose (this MethodBuilder mb) {
    if (mb == null)
        return;
    Type mbType = typeof (MethodBuilder);
    FieldInfo mbILGen = mbType.GetField ("m_ilGenerator", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbMod = mbType.GetField ("m_module", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbContType = mbType.GetField ("m_containingType", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbLocSigHelp = mbType.GetField ("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbSigHelp = mbType.GetField ("m_signature", BindingFlags.Instance | BindingFlags.NonPublic);
    ILGenerator tempIlGen = mbILGen.GetValue (mb) as ILGenerator;
    tempIlGen.Dispose ();
    SignatureHelper tempmbSigHelp = mbLocSigHelp.GetValue (mb) as SignatureHelper;
    tempmbSigHelp.Dispose ();
    tempmbSigHelp = mbSigHelp.GetValue (mb) as SignatureHelper;
    tempmbSigHelp.Dispose ();
    ModuleBuilder tempMod = mbMod.GetValue (mb) as ModuleBuilder;
    tempMod.Dispose ();
    mbMod.SetValue (mb, null);
    mbILGen.SetValue (mb, null);
    mbContType.SetValue (mb, null);
    mbLocSigHelp.SetValue (mb, null);
    mbSigHelp.SetValue (mb, null);
    mbMod.SetValue (mb, null);
}
----------------------------------------

 public static void Dispose (this MethodBuilder mb) {
    if (mb == null)
        return;
    Type mbType = typeof (MethodBuilder);
    FieldInfo mbILGen = mbType.GetField ("m_ilGenerator", BindingFlags.Instance | BindingFlags.NonPublic);
    ILGenerator tempIlGen = (ILGenerator) mbILGen.GetValue (mb);
    tempIlGen.Dispose ();
    FieldInfo mbMod = mbType.GetField ("m_module", BindingFlags.Instance | BindingFlags.NonPublic);
    ModuleBuilder tempMod = (ModuleBuilder) mbMod.GetValue (mb);
    tempMod.Dispose ();
    mbMod.SetValue (mb, null);
    mbILGen.SetValue (mb, null);
    
    FieldInfo mbContType = mbType.GetField ("m_containingType", BindingFlags.Instance | BindingFlags.NonPublic);
    mbContType.SetValue (mb, null);
    FieldInfo mbLocSigHelp = mbType.GetField ("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic);
    SignatureHelper tempmbSigHelp1 = (SignatureHelper) mbLocSigHelp.GetValue (mb);
    tempmbSigHelp1.Dispose ();
    FieldInfo mbSigHelp = mbType.GetField ("m_signature", BindingFlags.Instance | BindingFlags.NonPublic);
    SignatureHelper tempmbSigHelp2 = (SignatureHelper) mbSigHelp.GetValue (mb);
    tempmbSigHelp2.Dispose ();
    mbLocSigHelp.SetValue (mb, null);
    mbSigHelp.SetValue (mb, null);
    mbMod.SetValue (mb, null);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
538
3
Gpt3D_Clone538_3.cs 1 24
Gpt3D_Clone538_3.cs 25 58
----------------------------------------

public static void Dispose (this MethodBuilder mb) {
    if (mb == null)
        return;
    Type mbType = typeof (MethodBuilder);
    FieldInfo mbILGen = mbType.GetField ("m_ilGenerator", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbMod = mbType.GetField ("m_module", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbContType = mbType.GetField ("m_containingType", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbLocSigHelp = mbType.GetField ("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbSigHelp = mbType.GetField ("m_signature", BindingFlags.Instance | BindingFlags.NonPublic);
    ILGenerator tempIlGen = mbILGen.GetValue (mb) as ILGenerator;
    tempIlGen.Dispose ();
    SignatureHelper tempmbSigHelp = mbLocSigHelp.GetValue (mb) as SignatureHelper;
    tempmbSigHelp.Dispose ();
    tempmbSigHelp = mbSigHelp.GetValue (mb) as SignatureHelper;
    tempmbSigHelp.Dispose ();
    ModuleBuilder tempMod = mbMod.GetValue (mb) as ModuleBuilder;
    tempMod.Dispose ();
    mbMod.SetValue (mb, null);
    mbILGen.SetValue (mb, null);
    mbContType.SetValue (mb, null);
    mbLocSigHelp.SetValue (mb, null);
    mbSigHelp.SetValue (mb, null);
    mbMod.SetValue (mb, null);
}
----------------------------------------

 public static void Dispose (this MethodBuilder mb) {
    if (mb == null)
        return;
    Type mbType = typeof (MethodBuilder);
    FieldInfo mbILGen = mbType.GetField ("m_ilGenerator", BindingFlags.Instance | BindingFlags.NonPublic);
    ILGenerator tempIlGen = (ILGenerator) mbILGen.GetValue (mb);
    tempIlGen.Dispose ();
    FieldInfo mbMod = mbType.GetField ("m_module", BindingFlags.Instance | BindingFlags.NonPublic);
    ModuleBuilder tempMod = (ModuleBuilder) mbMod.GetValue (mb);
    tempMod.Dispose ();
    mbILGen.SetValue (mb, null);
    mbMod.SetValue (mb, null);
    
    FieldInfo mbContType = mbType.GetField ("m_containingType", BindingFlags.Instance | BindingFlags.NonPublic);
    mbContType.SetValue (mb, null);
    FieldInfo mbSigLoc = mbType.GetField ("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic);
    SignatureHelper tempmbLocSigHelp = (SignatureHelper) mbSigLoc.GetValue (mb);
    tempmbLocSigHelp.Dispose ();
    FieldInfo mbSig = mbType.GetField ("m_signature", BindingFlags.Instance | BindingFlags.NonPublic);
    SignatureHelper tempmbSigHelp = (SignatureHelper) mbSig.GetValue (mb);
    tempmbSigHelp.Dispose ();
    mbSigLoc.SetValue (mb, null);
    mbSig.SetValue (mb, null);
    mbMod.SetValue (mb, null);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
538
4
Gpt3D_Clone538_4.cs 1 24
Gpt3D_Clone538_4.cs 25 58
----------------------------------------

public static void Dispose (this MethodBuilder mb) {
    if (mb == null)
        return;
    Type mbType = typeof (MethodBuilder);
    FieldInfo mbILGen = mbType.GetField ("m_ilGenerator", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbMod = mbType.GetField ("m_module", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbContType = mbType.GetField ("m_containingType", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbLocSigHelp = mbType.GetField ("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbSigHelp = mbType.GetField ("m_signature", BindingFlags.Instance | BindingFlags.NonPublic);
    ILGenerator tempIlGen = mbILGen.GetValue (mb) as ILGenerator;
    tempIlGen.Dispose ();
    SignatureHelper tempmbSigHelp = mbLocSigHelp.GetValue (mb) as SignatureHelper;
    tempmbSigHelp.Dispose ();
    tempmbSigHelp = mbSigHelp.GetValue (mb) as SignatureHelper;
    tempmbSigHelp.Dispose ();
    ModuleBuilder tempMod = mbMod.GetValue (mb) as ModuleBuilder;
    tempMod.Dispose ();
    mbMod.SetValue (mb, null);
    mbILGen.SetValue (mb, null);
    mbContType.SetValue (mb, null);
    mbLocSigHelp.SetValue (mb, null);
    mbSigHelp.SetValue (mb, null);
    mbMod.SetValue (mb, null);
}
----------------------------------------

 public static void Dispose (this MethodBuilder mb) {
    if (mb == null)
        return;
    Type mbType = typeof (MethodBuilder);
    FieldInfo mbILGen = mbType.GetField ("m_ilGenerator", BindingFlags.Instance | BindingFlags.NonPublic);
    ILGenerator tempIlGen = (ILGenerator) mbILGen.GetValue (mb);
    tempIlGen.Dispose ();
    FieldInfo mbMod = mbType.GetField ("m_module", BindingFlags.Instance | BindingFlags.NonPublic);
    ModuleBuilder tempMod = (ModuleBuilder) mbMod.GetValue (mb);
    tempMod.Dispose ();
    mbMod.SetValue (mb, null);
    mbILGen.SetValue (mb, null);
    
    FieldInfo mbContType = mbType.GetField ("m_containingType", BindingFlags.Instance | BindingFlags.NonPublic);
    mbContType.SetValue (mb, null);
    FieldInfo mbLocalSign = mbType.GetField ("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic);
    SignatureHelper tempmbLocSigHelp = (SignatureHelper) mbLocalSign.GetValue (mb);
    tempmbLocSigHelp.Dispose ();
    FieldInfo mbSign = mbType.GetField ("m_signature", BindingFlags.Instance | BindingFlags.NonPublic);
    SignatureHelper tempmbSigHelp = (SignatureHelper) mbSign.GetValue (mb);
    tempmbSigHelp.Dispose ();
    mbLocalSign.SetValue (mb, null);
    mbSign.SetValue (mb, null);
    mbMod.SetValue (mb, null);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
538
5
Gpt3D_Clone538_5.cs 1 24
Gpt3D_Clone538_5.cs 25 58
----------------------------------------

public static void Dispose (this MethodBuilder mb) {
    if (mb == null)
        return;
    Type mbType = typeof (MethodBuilder);
    FieldInfo mbILGen = mbType.GetField ("m_ilGenerator", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbMod = mbType.GetField ("m_module", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbContType = mbType.GetField ("m_containingType", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbLocSigHelp = mbType.GetField ("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbSigHelp = mbType.GetField ("m_signature", BindingFlags.Instance | BindingFlags.NonPublic);
    ILGenerator tempIlGen = mbILGen.GetValue (mb) as ILGenerator;
    tempIlGen.Dispose ();
    SignatureHelper tempmbSigHelp = mbLocSigHelp.GetValue (mb) as SignatureHelper;
    tempmbSigHelp.Dispose ();
    tempmbSigHelp = mbSigHelp.GetValue (mb) as SignatureHelper;
    tempmbSigHelp.Dispose ();
    ModuleBuilder tempMod = mbMod.GetValue (mb) as ModuleBuilder;
    tempMod.Dispose ();
    mbMod.SetValue (mb, null);
    mbILGen.SetValue (mb, null);
    mbContType.SetValue (mb, null);
    mbLocSigHelp.SetValue (mb, null);
    mbSigHelp.SetValue (mb, null);
    mbMod.SetValue (mb, null);
}
----------------------------------------

 public static void Dispose (this MethodBuilder mb) { 
    if (mb == null)
        return;
    
    Type mbType = typeof (MethodBuilder);
    FieldInfo mbILGen = mbType.GetField ("m_ilGenerator", BindingFlags.Instance | BindingFlags.NonPublic);
    ILGenerator tempIlGen = (ILGenerator) mbILGen.GetValue (mb);
    tempIlGen.Dispose ();
    FieldInfo mbMod = mbType.GetField ("m_module", BindingFlags.Instance | BindingFlags.NonPublic);
    ModuleBuilder tempMod = (ModuleBuilder) mbMod.GetValue (mb);
    tempMod.Dispose ();
    mbILGen.SetValue (mb, null);
    mbMod.SetValue (mb, null);
    FieldInfo mbContType = mbType.GetField ("m_containingType", BindingFlags.Instance | BindingFlags.NonPublic);
    mbContType.SetValue (mb, null);
    FieldInfo mbLocSigHelp = mbType.GetField ("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic);
    SignatureHelper tempmbSigHelp = (SignatureHelper) mbLocSigHelp.GetValue (mb);
    tempmbSigHelp.Dispose ();
    FieldInfo mbSigHelp = mbType.GetField ("m_signature", BindingFlags.Instance | BindingFlags.NonPublic);
    tempmbSigHelp = (SignatureHelper) mbSigHelp.GetValue (mb);
    tempmbSigHelp.Dispose ();
    
    mbLocSigHelp.SetValue (mb, null);
    mbSigHelp.SetValue (mb, null);
    mbMod.SetValue (mb, null);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
538
6
Gpt3D_Clone538_6.cs 1 24
Gpt3D_Clone538_6.cs 25 56
----------------------------------------

public static void Dispose (this MethodBuilder mb) {
    if (mb == null)
        return;
    Type mbType = typeof (MethodBuilder);
    FieldInfo mbILGen = mbType.GetField ("m_ilGenerator", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbMod = mbType.GetField ("m_module", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbContType = mbType.GetField ("m_containingType", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbLocSigHelp = mbType.GetField ("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbSigHelp = mbType.GetField ("m_signature", BindingFlags.Instance | BindingFlags.NonPublic);
    ILGenerator tempIlGen = mbILGen.GetValue (mb) as ILGenerator;
    tempIlGen.Dispose ();
    SignatureHelper tempmbSigHelp = mbLocSigHelp.GetValue (mb) as SignatureHelper;
    tempmbSigHelp.Dispose ();
    tempmbSigHelp = mbSigHelp.GetValue (mb) as SignatureHelper;
    tempmbSigHelp.Dispose ();
    ModuleBuilder tempMod = mbMod.GetValue (mb) as ModuleBuilder;
    tempMod.Dispose ();
    mbMod.SetValue (mb, null);
    mbILGen.SetValue (mb, null);
    mbContType.SetValue (mb, null);
    mbLocSigHelp.SetValue (mb, null);
    mbSigHelp.SetValue (mb, null);
    mbMod.SetValue (mb, null);
}
----------------------------------------

 public static void Dispose (this MethodBuilder mb) { 
      if (mb == null)
        return;
    
      Type mbType = typeof (MethodBuilder);
      FieldInfo mbILGen = mbType.GetField ("m_ilGenerator", BindingFlags.Instance | BindingFlags.NonPublic);
      ILGenerator tempIlGen = (ILGenerator) mbILGen.GetValue (mb);
      tempIlGen.Dispose ();
      FieldInfo mbMod = mbType.GetField ("m_module", BindingFlags.Instance | BindingFlags.NonPublic);
      ModuleBuilder tempMod = (ModuleBuilder) mbMod.GetValue (mb);
      tempMod.Dispose ();
      FieldInfo mbContType = mbType.GetField ("m_containingType", BindingFlags.Instance | BindingFlags.NonPublic);
      mbContType.SetValue (mb, null);
      FieldInfo mbLocSigHelp = mbType.GetField ("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic);
      SignatureHelper tempmbSigHelp = (SignatureHelper) mbLocSigHelp.GetValue (mb);
      tempmbSigHelp.Dispose ();
      FieldInfo mbSigHelp = mbType.GetField ("m_signature", BindingFlags.Instance | BindingFlags.NonPublic);
      tempmbSigHelp = (SignatureHelper) mbSigHelp.GetValue (mb);
      tempmbSigHelp.Dispose ();
      mbILGen.SetValue (mb, null);
      mbLocSigHelp.SetValue (mb, null);
      mbSigHelp.SetValue (mb, null);
      mbMod.SetValue (mb, null);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
539
0
Gpt3D_Clone539_0.cs 1 9
Gpt3D_Clone539_0.cs 10 21
----------------------------------------

public static void Dispose (this ILGenerator ilGen) {
    if (ilGen == null)
        return;
    Type ilGenType = typeof (ILGenerator);
    FieldInfo ilSigHelp = ilGenType.GetField ("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic);
    SignatureHelper sigTemp = ilSigHelp.GetValue (ilGen) as SignatureHelper;
    sigTemp.Dispose ();
    ilSigHelp.SetValue (ilGen, null);
}
----------------------------------------

 public static void Dispose (this ILGenerator ilGen) {
    if (ilGen == null)
        return;
    BindingFlags tileFlags = BindingFlags.Instance | BindingFlags.NonPublic;
    Type ilGenType = ilGen.GetType();
    FieldInfo fieldInfo = ilGenType.GetField("m_localSignature", tileFlags);
    SignatureHelper signatureHelper = fieldInfo.GetValue(ilGen) as SignatureHelper;
    signatureHelper?.Dispose();
    fieldInfo.SetValue(ilGen, null);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
539
1
Gpt3D_Clone539_1.cs 1 9
Gpt3D_Clone539_1.cs 10 21
----------------------------------------

public static void Dispose (this ILGenerator ilGen) {
    if (ilGen == null)
        return;
    Type ilGenType = typeof (ILGenerator);
    FieldInfo ilSigHelp = ilGenType.GetField ("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic);
    SignatureHelper sigTemp = ilSigHelp.GetValue (ilGen) as SignatureHelper;
    sigTemp.Dispose ();
    ilSigHelp.SetValue (ilGen, null);
}
----------------------------------------

 public static void Dispose (this ILGenerator ilGen) {
    if (ilGen == null) 
        return;
    var ilGenType = typeof (ILGenerator);
    var ilSigHelp = ilGenType.GetField ("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic);
    var sigHelp = (SignatureHelper)ilSigHelp.GetValue (ilGen);
    sigHelp?.Dispose();
    ilSigHelp.SetValue (ilGen, null);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
539
2
Gpt3D_Clone539_2.cs 1 9
Gpt3D_Clone539_2.cs 10 21
----------------------------------------

public static void Dispose (this ILGenerator ilGen) {
    if (ilGen == null)
        return;
    Type ilGenType = typeof (ILGenerator);
    FieldInfo ilSigHelp = ilGenType.GetField ("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic);
    SignatureHelper sigTemp = ilSigHelp.GetValue (ilGen) as SignatureHelper;
    sigTemp.Dispose ();
    ilSigHelp.SetValue (ilGen, null);
}
----------------------------------------

 public static void Dispose (this ILGenerator ilGen) {
    if (ilGen == null)
        return;
    Type ilGenType = typeof (ILGenerator);
    FieldInfo ilSigHelp = ilGenType.GetField ("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic);
    var sigHelp = (SignatureHelper)ilSigHelp.GetValue (ilGen);
    sigHelp?.Dispose();
    ilSigHelp.SetValue (ilGen, null);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
539
3
Gpt3D_Clone539_3.cs 1 9
Gpt3D_Clone539_3.cs 10 20
----------------------------------------

public static void Dispose (this ILGenerator ilGen) {
    if (ilGen == null)
        return;
    Type ilGenType = typeof (ILGenerator);
    FieldInfo ilSigHelp = ilGenType.GetField ("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic);
    SignatureHelper sigTemp = ilSigHelp.GetValue (ilGen) as SignatureHelper;
    sigTemp.Dispose ();
    ilSigHelp.SetValue (ilGen, null);
}
----------------------------------------

 public static void Dispose(this ILGenerator ilGen) {
    if (ilGen == null) 
        return;
    var ilGenType = ilGen.GetType();
    var fieldInfo = ilGenType.GetField("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic);
    var sigHelper = fieldInfo.GetValue(ilGen) as SignatureHelper;
    sigHelper?.Dispose();
    fieldInfo.SetValue(ilGen, null);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
539
4
Gpt3D_Clone539_4.cs 1 9
Gpt3D_Clone539_4.cs 10 20
----------------------------------------

public static void Dispose (this ILGenerator ilGen) {
    if (ilGen == null)
        return;
    Type ilGenType = typeof (ILGenerator);
    FieldInfo ilSigHelp = ilGenType.GetField ("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic);
    SignatureHelper sigTemp = ilSigHelp.GetValue (ilGen) as SignatureHelper;
    sigTemp.Dispose ();
    ilSigHelp.SetValue (ilGen, null);
}
----------------------------------------

 public static void Dispose (this ILGenerator ilGen) {
    if (ilGen == null) 
        return;
    Type ilGenType = typeof (ILGenerator);
    FieldInfo ilSigHelp = ilGenType.GetField ("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic);
    var sigHelp = (SignatureHelper)ilSigHelp.GetValue (ilGen);
    sigHelp?.Dispose();
    ilSigHelp.SetValue (ilGen, null);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
539
5
Gpt3D_Clone539_5.cs 1 9
Gpt3D_Clone539_5.cs 10 20
----------------------------------------

public static void Dispose (this ILGenerator ilGen) {
    if (ilGen == null)
        return;
    Type ilGenType = typeof (ILGenerator);
    FieldInfo ilSigHelp = ilGenType.GetField ("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic);
    SignatureHelper sigTemp = ilSigHelp.GetValue (ilGen) as SignatureHelper;
    sigTemp.Dispose ();
    ilSigHelp.SetValue (ilGen, null);
}
----------------------------------------

 public static void Dispose (this ILGenerator ilGen) {
    if (ilGen == null) 
        return;
    Type ilGenType = ilGen.GetType();
    FieldInfo fieldInfo = ilGenType.GetField("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic);
    SignatureHelper signatureHelper = fieldInfo.GetValue(ilGen) as SignatureHelper;
    signatureHelper?.Dispose();
    fieldInfo.SetValue(ilGen, null);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
539
6
Gpt3D_Clone539_6.cs 1 9
Gpt3D_Clone539_6.cs 10 20
----------------------------------------

public static void Dispose (this ILGenerator ilGen) {
    if (ilGen == null)
        return;
    Type ilGenType = typeof (ILGenerator);
    FieldInfo ilSigHelp = ilGenType.GetField ("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic);
    SignatureHelper sigTemp = ilSigHelp.GetValue (ilGen) as SignatureHelper;
    sigTemp.Dispose ();
    ilSigHelp.SetValue (ilGen, null);
}
----------------------------------------

 public static void Dispose (this ILGenerator ilGen) {
    if (ilGen != null) {
        var type = typeof (ILGenerator);
        var fieldInfo = type.GetField("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic);
        var sigHelper = fieldInfo.GetValue(ilGen) as SignatureHelper;
        sigHelper?.Dispose();
        fieldInfo.SetValue(ilGen, null);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
539
7
Gpt3D_Clone539_7.cs 1 9
Gpt3D_Clone539_7.cs 10 21
----------------------------------------

public static void Dispose (this ILGenerator ilGen) {
    if (ilGen == null)
        return;
    Type ilGenType = typeof (ILGenerator);
    FieldInfo ilSigHelp = ilGenType.GetField ("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic);
    SignatureHelper sigTemp = ilSigHelp.GetValue (ilGen) as SignatureHelper;
    sigTemp.Dispose ();
    ilSigHelp.SetValue (ilGen, null);
}
----------------------------------------

 public static void Dispose (this ILGenerator ilGen) {
    if (ilGen != null)
    {
        Type ilGenType = typeof(ILGenerator);
        FieldInfo ilSigHelp = ilGenType.GetField("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic);
        SignatureHelper sigTemp = ilSigHelp.GetValue(ilGen) as SignatureHelper;
        sigTemp?.Dispose();
        ilSigHelp.SetValue(ilGen, null);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
0
Gpt3D_Clone53_0.cs 1 13
Gpt3D_Clone53_0.cs 14 27
----------------------------------------

protected override void OnStartup (StartupEventArgs e) {
    MainWindow mw = new MainWindow ();
    if (e.Args != null && e.Args.Count () > 0) {
        this.Properties ["ArbitraryArgName"] = e.Args [0];
    }
    if (Application.Current.Properties ["ArbitraryArgName"] != null) {
        string fname = Application.Current.Properties ["ArbitraryArgName"].ToString ();
        mw.Show ();
        mw.readVcard (fname);
    } else if (e.Args.Count () == 0) {
        mw.Show ();
    }
}
----------------------------------------

  protected override void OnStartup (StartupEventArgs e) {
    MainWindow mw = new MainWindow ();
    string argument = "";
    if (e.Args != null && e.Args.Count () > 0) {
            argument = e.Args[0];
            this.Properties ["ArbitraryArgName"] = argument;
            mw.Show ();
            mw.readVcard (argument);
    } else if (e.Args.Count () == 0) {
            mw.Show ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
1
Gpt3D_Clone53_1.cs 1 13
Gpt3D_Clone53_1.cs 14 27
----------------------------------------

protected override void OnStartup (StartupEventArgs e) {
    MainWindow mw = new MainWindow ();
    if (e.Args != null && e.Args.Count () > 0) {
        this.Properties ["ArbitraryArgName"] = e.Args [0];
    }
    if (Application.Current.Properties ["ArbitraryArgName"] != null) {
        string fname = Application.Current.Properties ["ArbitraryArgName"].ToString ();
        mw.Show ();
        mw.readVcard (fname);
    } else if (e.Args.Count () == 0) {
        mw.Show ();
    }
}
----------------------------------------

  protected override void OnStartup (StartupEventArgs e) {
    MainWindow mw = new MainWindow ();
    string argument = "";
    if (e.Args != null && e.Args.Count () > 0) {
           argument = Application.Current.Properties ["ArbitraryArgName"].ToString ();
           this.Properties ["ArbitraryArgName"] = argument;
           mw.Show ();
           mw.readVcard (argument); 
    } else if (e.Args.Count () == 0) {
           mw.Show ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
2
Gpt3D_Clone53_2.cs 1 13
Gpt3D_Clone53_2.cs 14 26
----------------------------------------

protected override void OnStartup (StartupEventArgs e) {
    MainWindow mw = new MainWindow ();
    if (e.Args != null && e.Args.Count () > 0) {
        this.Properties ["ArbitraryArgName"] = e.Args [0];
    }
    if (Application.Current.Properties ["ArbitraryArgName"] != null) {
        string fname = Application.Current.Properties ["ArbitraryArgName"].ToString ();
        mw.Show ();
        mw.readVcard (fname);
    } else if (e.Args.Count () == 0) {
        mw.Show ();
    }
}
----------------------------------------

  protected override void OnStartup (StartupEventArgs e) {
    MainWindow mw = new MainWindow ();
    if (e.Args != null && e.Args.Count () > 0) {
            string fname = e.Args[0];
            this.Properties ["ArbitraryArg"] = fname;
            mw.Show ();
            mw.readVcard (fname);
    } else if (e.Args.Count () == 0) {
            mw.Show ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
3
Gpt3D_Clone53_3.cs 1 13
Gpt3D_Clone53_3.cs 14 26
----------------------------------------

protected override void OnStartup (StartupEventArgs e) {
    MainWindow mw = new MainWindow ();
    if (e.Args != null && e.Args.Count () > 0) {
        this.Properties ["ArbitraryArgName"] = e.Args [0];
    }
    if (Application.Current.Properties ["ArbitraryArgName"] != null) {
        string fname = Application.Current.Properties ["ArbitraryArgName"].ToString ();
        mw.Show ();
        mw.readVcard (fname);
    } else if (e.Args.Count () == 0) {
        mw.Show ();
    }
}
----------------------------------------

  protected override void OnStartup (StartupEventArgs e) {
    MainWindow mw = new MainWindow ();
    if (e.Args != null && e.Args.Count () > 0) {
           string fname = e.Args[0];
           this.Properties ["ArbitraryArgName"] = fname;
           mw.Show ();
           mw.readVcard (fname); 
    } else if (e.Args.Count () == 0) {
           mw.Show ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
4
Gpt3D_Clone53_4.cs 1 13
Gpt3D_Clone53_4.cs 14 26
----------------------------------------

protected override void OnStartup (StartupEventArgs e) {
    MainWindow mw = new MainWindow ();
    if (e.Args != null && e.Args.Count () > 0) {
        this.Properties ["ArbitraryArgName"] = e.Args [0];
    }
    if (Application.Current.Properties ["ArbitraryArgName"] != null) {
        string fname = Application.Current.Properties ["ArbitraryArgName"].ToString ();
        mw.Show ();
        mw.readVcard (fname);
    } else if (e.Args.Count () == 0) {
        mw.Show ();
    }
}
----------------------------------------

  protected override void OnStartup (StartupEventArgs e) {
    MainWindow mw = new MainWindow ();
    if (e.Args != null && e.Args.Count () > 0) {
            string filename = e.Args[0];
            this.Properties ["Filename"] = filename;
            mw.Show ();
            mw.readVcard (filename);
    } else if (e.Args.Count () == 0) {
            mw.Show ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
5
Gpt3D_Clone53_5.cs 1 13
Gpt3D_Clone53_5.cs 14 26
----------------------------------------

protected override void OnStartup (StartupEventArgs e) {
    MainWindow mw = new MainWindow ();
    if (e.Args != null && e.Args.Count () > 0) {
        this.Properties ["ArbitraryArgName"] = e.Args [0];
    }
    if (Application.Current.Properties ["ArbitraryArgName"] != null) {
        string fname = Application.Current.Properties ["ArbitraryArgName"].ToString ();
        mw.Show ();
        mw.readVcard (fname);
    } else if (e.Args.Count () == 0) {
        mw.Show ();
    }
}
----------------------------------------

  protected override void OnStartup (StartupEventArgs e) {
    MainWindow mw = new MainWindow ();
    if (e.Args != null && e.Args.Count () > 0) {
           string fname = e.Args[0];
           this.Properties ["ArgumentName"] = fname;
           mw.Show ();
           mw.readVcard (fname); 
    } else if (e.Args.Count () == 0) {
           mw.Show ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
6
Gpt3D_Clone53_6.cs 1 13
Gpt3D_Clone53_6.cs 14 26
----------------------------------------

protected override void OnStartup (StartupEventArgs e) {
    MainWindow mw = new MainWindow ();
    if (e.Args != null && e.Args.Count () > 0) {
        this.Properties ["ArbitraryArgName"] = e.Args [0];
    }
    if (Application.Current.Properties ["ArbitraryArgName"] != null) {
        string fname = Application.Current.Properties ["ArbitraryArgName"].ToString ();
        mw.Show ();
        mw.readVcard (fname);
    } else if (e.Args.Count () == 0) {
        mw.Show ();
    }
}
----------------------------------------

  protected override void OnStartup (StartupEventArgs e) {
    MainWindow mw = new MainWindow ();
    if (e.Args != null && e.Args.Count () > 0) {
            string fname = e.Args[0];
            this.Properties ["UniqueArg"] = fname;
            mw.Show ();
            mw.readVcard (fname);
    } else if (e.Args.Count () == 0) {
            mw.Show ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
540
2
Gpt3D_Clone540_2.cs 1 12
Gpt3D_Clone540_2.cs 13 31
----------------------------------------

private static void Compile () {
    if (_assembly == null) {
        StringBuilder src = new StringBuilder (CodeStart);
        foreach (KeyValuePair < string, string > kvp in _conditionSnippet)
            src.AppendFormat (ConditionTemplate, DynamicConditionPrefix, kvp.Key, kvp.Value);
        foreach (KeyValuePair < string, string > kvp in _methodSnippet)
            src.AppendFormat (MethodTemplate, kvp.Key, kvp.Value);
        src.Append (CodeEnd);
        Trace.TraceError ("SOURCE\r\n{0}", src);
        _assembly = Compile (src.ToString ());
    }
}
----------------------------------------

 private static void Compile()
{
    if (_assembly == null)
    {
        StringBuilder sourceCode = new StringBuilder();
        sourceCode.Append(CodeStart);
        foreach (KeyValuePair < string, string > kvp in _conditionSnippet)
            sourceCode.AppendFormat(ConditionTemplate, DynamicConditionPrefix, kvp.Key, kvp.Value);
        foreach (KeyValuePair < string, string > kvp in _methodSnippet)
            sourceCode.AppendFormat(MethodTemplate, kvp.Key, kvp.Value);
        sourceCode.Append(CodeEnd);
        Trace.TraceError("SOURCE\r\n{0}", sourceCode);
        _assembly = Parser.Compile(sourceCode.ToString());
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
541
0
Gpt3D_Clone541_0.cs 1 15
Gpt3D_Clone541_0.cs 16 35
----------------------------------------

public override System.Windows.Controls.ValidationResult Validate (object value, System.Globalization.CultureInfo cultureInfo) {
    int myInt = 0;
    try {
        if (((string) value).Length > 0)
            myInt = int.Parse ((String) value);
    }
    catch (Exception e) {
        return new ValidationResult (false, "Illegal characters or " + e.Message);
    }
    if (myInt < 0 || myInt > 20) {
        return new ValidationResult (false, "Please enter a number in the range: 0 - 20");
    } else {
        return new ValidationResult (true, null);
    }
}
----------------------------------------

 public override System.Windows.Controls.ValidationResult Validate (object value, System.Globalization.CultureInfo cultureInfo) {
    int myInt = 0;
    if (!(value is string)) {
        return new ValidationResult (false, "Value must be a string");
    }
    if (((string) value).Length > 0) {
        try {
            myInt = Int32.Parse((String) value);
        } catch (Exception e) {
            return new ValidationResult (false, "Illegal characters or " + e.Message);
        }
    }
    if (myInt < 0 || myInt > 20) {
        return new ValidationResult (false, "Please enter a number in the range: 0 - 20");
    } else {
        return new ValidationResult (true, null);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
541
1
Gpt3D_Clone541_1.cs 1 15
Gpt3D_Clone541_1.cs 16 33
----------------------------------------

public override System.Windows.Controls.ValidationResult Validate (object value, System.Globalization.CultureInfo cultureInfo) {
    int myInt = 0;
    try {
        if (((string) value).Length > 0)
            myInt = int.Parse ((String) value);
    }
    catch (Exception e) {
        return new ValidationResult (false, "Illegal characters or " + e.Message);
    }
    if (myInt < 0 || myInt > 20) {
        return new ValidationResult (false, "Please enter a number in the range: 0 - 20");
    } else {
        return new ValidationResult (true, null);
    }
}
----------------------------------------

 public override System.Windows.Controls.ValidationResult Validate (object value, System.Globalization.CultureInfo cultureInfo) {
    int myInt = 0;
    bool isValidInt = false;
    try {
        if (((string)value).Length > 0)
            isValidInt = Int32.TryParse((string)value, out myInt);
    }
    catch (Exception e) {
        return new ValidationResult (false, "Illegal characters or " + e.Message);
    }
    if (!isValidInt || (myInt < 0 || myInt > 20)) {
        return new ValidationResult (false, "Please enter a number in the range: 0 - 20");
    } else {
        return new ValidationResult (true, null);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
541
3
Gpt3D_Clone541_3.cs 1 15
Gpt3D_Clone541_3.cs 16 31
----------------------------------------

public override System.Windows.Controls.ValidationResult Validate (object value, System.Globalization.CultureInfo cultureInfo) {
    int myInt = 0;
    try {
        if (((string) value).Length > 0)
            myInt = int.Parse ((String) value);
    }
    catch (Exception e) {
        return new ValidationResult (false, "Illegal characters or " + e.Message);
    }
    if (myInt < 0 || myInt > 20) {
        return new ValidationResult (false, "Please enter a number in the range: 0 - 20");
    } else {
        return new ValidationResult (true, null);
    }
}
----------------------------------------

 public override System.Windows.Controls.ValidationResult Validate (object value, System.Globalization.CultureInfo cultureInfo) {
    int myInt = 0;
    try {
        if (((string) value).Length > 0 && int.TryParse((string) value, out myInt)) { 
            if (myInt > 0 && myInt <= 20) {
                return new ValidationResult (true, null); 
            }
        }
    }
    catch (Exception e) {
        return new ValidationResult (false, "Illegal characters or " + e.Message);
    }
    return new ValidationResult (false, "Please enter a number in the range: 0 - 20");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
543
1
Gpt3D_Clone543_1.cs 1 17
Gpt3D_Clone543_1.cs 18 46
----------------------------------------

public Message WrapA (int a, int millisecondsTimeout) {
    int ? b;
    int count = 0;
    while ((b = Interlocked.Exchange (ref pendingB, EMPTY)) == EMPTY) {
        if (count % 7 == 0) {
            Thread.Sleep (0);
        } else if (count % 23 == 0) {
            Thread.Sleep (1);
        } else {
            Thread.Yield ();
        }
        if (++ count == 480) {
            return new Message (a, null);
        }
    }
    return new Message (a, b);
}
----------------------------------------

 public Message WrapA (int a, int millisecondsTimeout) {
    int ? b;
    int count = 0;
    while ((b = Interlocked.Exchange (ref pendingB, EMPTY)) == EMPTY) {
        if (count%7 == 0) {
            CountDownLatch latch = new CountDownLatch(millisecondsTimeout);
            try {
                latch.await(millisecondsTimeout, TimeUnit.MILLISECONDS);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        } else if (count % 23 == 0) {
            CountDownLatch latch = new CountDownLatch(millisecondsTimeout);
            try {
                latch.await(millisecondsTimeout, TimeUnit.MILLISECONDS);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        } else {
            Thread.Yield ();
        }
        if (++ count == 480) {
            return new Message (a, null);
        }
    }
    return new Message (a, b);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
543
2
Gpt3D_Clone543_2.cs 1 17
Gpt3D_Clone543_2.cs 18 46
----------------------------------------

public Message WrapA (int a, int millisecondsTimeout) {
    int ? b;
    int count = 0;
    while ((b = Interlocked.Exchange (ref pendingB, EMPTY)) == EMPTY) {
        if (count % 7 == 0) {
            Thread.Sleep (0);
        } else if (count % 23 == 0) {
            Thread.Sleep (1);
        } else {
            Thread.Yield ();
        }
        if (++ count == 480) {
            return new Message (a, null);
        }
    }
    return new Message (a, b);
}
----------------------------------------

  public Message WrapA (int a, int millisecondsTimeout) {
    int ? b;
    int count = 0;
    while ((b = Interlocked.Exchange (ref pendingB, EMPTY)) == EMPTY) {
        if (count%7 == 0) {
            // Execute count-dependent operation with millisecondsTimeout delay
            try {
                Thread.sleep(millisecondsTimeout);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        } else if (count % 23 == 0) {
            // Execute count-dependent operation with millisecondsTimeout delay
            try {
                Thread.sleep(millisecondsTimeout);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        } else {
            Thread.Yield ();
        }
        if (++ count == 480) {
            return new Message (a, null);
        }
    }
    return new Message (a, b);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
543
3
Gpt3D_Clone543_3.cs 1 17
Gpt3D_Clone543_3.cs 18 44
----------------------------------------

public Message WrapA (int a, int millisecondsTimeout) {
    int ? b;
    int count = 0;
    while ((b = Interlocked.Exchange (ref pendingB, EMPTY)) == EMPTY) {
        if (count % 7 == 0) {
            Thread.Sleep (0);
        } else if (count % 23 == 0) {
            Thread.Sleep (1);
        } else {
            Thread.Yield ();
        }
        if (++ count == 480) {
            return new Message (a, null);
        }
    }
    return new Message (a, b);
}
----------------------------------------

 public Message WrapA (int a, int millisecondsTimeout) {
    int ? b;
    int count = 0;
    while ((b = Interlocked.Exchange (ref pendingB, EMPTY)) == EMPTY) {
        if (count%7 == 0) {
            Clock clock= Clock.systemUTC();
            long ms= clock.millisSync(clock.instant());
            while(ms < millisecondsTimeout) {
                Clock.millisSync(clock.instant());
            }
        } else if (count % 23 == 0) {
            Clock clock= Clock.systemUTC();
            long ms= clock.millisSync(clock.instant());
            while(ms < millisecondsTimeout) {
                Clock.millisSync(clock.instant());
            }
        } else {
            Thread.Yield ();
        }
        if (++ count == 480) {
            return new Message (a, null);
        }
    }
    return new Message (a, b);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
543
4
Gpt3D_Clone543_4.cs 1 17
Gpt3D_Clone543_4.cs 18 40
----------------------------------------

public Message WrapA (int a, int millisecondsTimeout) {
    int ? b;
    int count = 0;
    while ((b = Interlocked.Exchange (ref pendingB, EMPTY)) == EMPTY) {
        if (count % 7 == 0) {
            Thread.Sleep (0);
        } else if (count % 23 == 0) {
            Thread.Sleep (1);
        } else {
            Thread.Yield ();
        }
        if (++ count == 480) {
            return new Message (a, null);
        }
    }
    return new Message (a, b);
}
----------------------------------------

 public Message WrapA (int a, int millisecondsTimeout) {
    int ? b;
    int count = 0;
    while ((b = Interlocked.Exchange (ref pendingB, EMPTY)) == EMPTY) {
        if (count%7 == 0) {
            Stopwatch sw = new Stopwatch();
            sw.start();
            while (sw.getElapsedTimeMillis() < millisecondsTimeout) { /* do nothing */ }
        } else if (count % 23 == 0) {
            Stopwatch sw = new Stopwatch();
            sw.start();
            while (sw.getElapsedTimeMillis() < millisecondsTimeout) { /* do nothing */ }
        } else {
            Thread.Yield ();
        }
        if (++ count == 480) {
            return new Message (a, null);
        }
    }
    return new Message (a, b);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
543
5
Gpt3D_Clone543_5.cs 1 17
Gpt3D_Clone543_5.cs 18 43
----------------------------------------

public Message WrapA (int a, int millisecondsTimeout) {
    int ? b;
    int count = 0;
    while ((b = Interlocked.Exchange (ref pendingB, EMPTY)) == EMPTY) {
        if (count % 7 == 0) {
            Thread.Sleep (0);
        } else if (count % 23 == 0) {
            Thread.Sleep (1);
        } else {
            Thread.Yield ();
        }
        if (++ count == 480) {
            return new Message (a, null);
        }
    }
    return new Message (a, b);
}
----------------------------------------

  public Message WrapA (int a, int millisecondsTimeout) {
    int b;
    int count = 0;
    while ((b = Interlocked.Exchange (ref pendingB, EMPTY)) == -1) {
        if (count%7 == 0) {
            // Spin-lock with millisecondsTimeout period
            while (count < (millisecondsTimeout/7)) {
                count++;
            }
        } else if (count % 23 == 0) {
            // Spin-lock with millisecondsTimeout period
            while (count < (millisecondsTimeout/23)) {
                count++;
            }
        } else {
            Thread.Yield ();
        }
        if (++ count == 480) {
            return new Message (a, null);
        }
    }
    return new Message (a, b);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
544
6
Gpt3D_Clone544_6.cs 1 17
Gpt3D_Clone544_6.cs 18 40
----------------------------------------

public Message WrapB (int b, int millisecondsTimeout) {
    int count = 0;
    while (Interlocked.CompareExchange (ref pendingB, b, EMPTY) != EMPTY) {
        Thread.SpinWait ((4 << count ++));
        if (count > 10) {
            return new Message (null, b);
        }
    }
    while (Interlocked.CompareExchange (ref pendingB, EMPTY, EMPTY) == b) {
        Thread.SpinWait ((4 << count ++));
        if (count > 20) {
            int payload = Interlocked.CompareExchange (ref pendingB, EMPTY, b);
            return payload == b ? new Message (null, b) : null;
        }
    }
    return null;
}
----------------------------------------

 public Message WrapB (int b, int millisecondsTimeout) {
    int count = 0;
    while (SpinLock.TryEnter (ref pendingB)) {
        if (Interlocked.CompareExchange (ref pendingB, b, EMPTY) != EMPTY) {
            SpinWait.Wait ((4 << count ++));
            if (count > 10) {
                return new Message (null, b);
            }
        }
    }
    while (SpinLock.TryEnter (ref pendingB)) {
        if (Interlocked.CompareExchange (ref pendingB, EMPTY, EMPTY) == b) {
            SpinWait.Wait ((4 << count ++));
            if (count > 20) {
                int payload = Interlocked.CompareExchange (ref pendingB, EMPTY, b);
                return payload == b ? new Message (null, b) : null;
            }
        }
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
545
0
Gpt3D_Clone545_0.cs 1 17
Gpt3D_Clone545_0.cs 18 38
----------------------------------------

public Message WrapB (int b, int millisecondsTimeout) {
    int count = 0;
    while (Interlocked.CompareExchange (ref pendingB, b, EMPTY) != EMPTY) {
        Thread.SpinWait ((4 << count ++));
        if (count > 10) {
            return new Message (null, b);
        }
    }
    while (Interlocked.CompareExchange (ref pendingB, EMPTY, EMPTY) == b) {
        Thread.SpinWait ((4 << count ++));
        if (count > 20) {
            int payload = Interlocked.CompareExchange (ref pendingB, EMPTY, b);
            return payload == b ? new Message (null, b) : null;
        }
    }
    return null;
}
----------------------------------------

 public Message WrapB (int b, int millisecondsTimeout) {
    int count = 0;
    while (Interlocked.CompareExchange (ref pendingB, b, EMPTY) != EMPTY) {
        busyloop(count); 
        if (count > 10) {
            return new Message (null, b);
        }
        count++;
    }
    while (Interlocked.CompareExchange (ref pendingB, EMPTY, EMPTY) == b) {
        busyloop (count);
        if (count > 20) {
            int payload = Interlocked.CompareExchange (ref pendingB, EMPTY, b);
            return payload == b ? new Message (null, b) : null;
        }
        count++;
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
545
1
Gpt3D_Clone545_1.cs 1 17
Gpt3D_Clone545_1.cs 18 38
----------------------------------------

public Message WrapB (int b, int millisecondsTimeout) {
    int count = 0;
    while (Interlocked.CompareExchange (ref pendingB, b, EMPTY) != EMPTY) {
        Thread.SpinWait ((4 << count ++));
        if (count > 10) {
            return new Message (null, b);
        }
    }
    while (Interlocked.CompareExchange (ref pendingB, EMPTY, EMPTY) == b) {
        Thread.SpinWait ((4 << count ++));
        if (count > 20) {
            int payload = Interlocked.CompareExchange (ref pendingB, EMPTY, b);
            return payload == b ? new Message (null, b) : null;
        }
    }
    return null;
}
----------------------------------------

 public Message WrapB (int b, int millisecondsTimeout) {
    int count = 0;
    while (Interlocked.CompareExchange (ref pendingB, b, EMPTY) != EMPTY) {
        Monitor.Wait(object,50 * count); 
        if (count > 10) {
            return new Message (null, b);
        }
        count++;
    }
    while (Interlocked.CompareExchange (ref pendingB, EMPTY, EMPTY) == b) {
        Monitor.Wait(object,50 * count); 
        if (count > 20) {
            int payload = Interlocked.CompareExchange (ref pendingB, EMPTY, b);
            return payload == b ? new Message (null, b) : null;
        }
        count++;
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
545
2
Gpt3D_Clone545_2.cs 1 17
Gpt3D_Clone545_2.cs 18 38
----------------------------------------

public Message WrapB (int b, int millisecondsTimeout) {
    int count = 0;
    while (Interlocked.CompareExchange (ref pendingB, b, EMPTY) != EMPTY) {
        Thread.SpinWait ((4 << count ++));
        if (count > 10) {
            return new Message (null, b);
        }
    }
    while (Interlocked.CompareExchange (ref pendingB, EMPTY, EMPTY) == b) {
        Thread.SpinWait ((4 << count ++));
        if (count > 20) {
            int payload = Interlocked.CompareExchange (ref pendingB, EMPTY, b);
            return payload == b ? new Message (null, b) : null;
        }
    }
    return null;
}
----------------------------------------

 public Message WrapB (int b, int millisecondsTimeout) {
    int count = 0;
    while (Interlocked.CompareExchange (ref pendingB, b, EMPTY) != EMPTY) {
        Thread.CurrentThread.BeginCriticalRegion(); 
        if (count > 10) {
            return new Message (null, b);
        }
        count++;
    }
    while (Interlocked.CompareExchange (ref pendingB, EMPTY, EMPTY) == b) {
        Thread.CurrentThread.BeginCriticalRegion(); 
        if (count > 20) {
            int payload = Interlocked.CompareExchange (ref pendingB, EMPTY, b);
            return payload == b ? new Message (null, b) : null;
        }
        count++;
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
545
3
Gpt3D_Clone545_3.cs 1 17
Gpt3D_Clone545_3.cs 18 38
----------------------------------------

public Message WrapB (int b, int millisecondsTimeout) {
    int count = 0;
    while (Interlocked.CompareExchange (ref pendingB, b, EMPTY) != EMPTY) {
        Thread.SpinWait ((4 << count ++));
        if (count > 10) {
            return new Message (null, b);
        }
    }
    while (Interlocked.CompareExchange (ref pendingB, EMPTY, EMPTY) == b) {
        Thread.SpinWait ((4 << count ++));
        if (count > 20) {
            int payload = Interlocked.CompareExchange (ref pendingB, EMPTY, b);
            return payload == b ? new Message (null, b) : null;
        }
    }
    return null;
}
----------------------------------------

 public Message WrapB (int b, int millisecondsTimeout) {
    int count = 0;
    while (Interlocked.CompareExchange (ref pendingB, b, EMPTY) != EMPTY) {
        Thread.SpinWait (4 << (int) Math.Pow(2, count)); 
        if (count > 10) {
            return new Message (null, b);
        }
        count++;
    }
    while (Interlocked.CompareExchange (ref pendingB, EMPTY, EMPTY) == b) {
        Thread.SpinWait (4 << (int) Math.Pow(2, count)); 
        if (count > 20) {
            int payload = Interlocked.CompareExchange (ref pendingB, EMPTY, b);
            return payload == b ? new Message (null, b) : null;
        }
        count++;
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
545
4
Gpt3D_Clone545_4.cs 1 17
Gpt3D_Clone545_4.cs 18 38
----------------------------------------

public Message WrapB (int b, int millisecondsTimeout) {
    int count = 0;
    while (Interlocked.CompareExchange (ref pendingB, b, EMPTY) != EMPTY) {
        Thread.SpinWait ((4 << count ++));
        if (count > 10) {
            return new Message (null, b);
        }
    }
    while (Interlocked.CompareExchange (ref pendingB, EMPTY, EMPTY) == b) {
        Thread.SpinWait ((4 << count ++));
        if (count > 20) {
            int payload = Interlocked.CompareExchange (ref pendingB, EMPTY, b);
            return payload == b ? new Message (null, b) : null;
        }
    }
    return null;
}
----------------------------------------

 public Message WrapB (int b, int millisecondsTimeout) {
    int count = 0;
    while (Interlocked.CompareExchange (ref pendingB, b, EMPTY) != EMPTY) {
        Lock (mutex);
        if (count > 10) {
            return new Message (null, b);
        }
        count++;
    }
    while (Interlocked.CompareExchange (ref pendingB, EMPTY, EMPTY) == b) {
        Lock (mutex);
        if (count > 20) {
            int payload = Interlocked.CompareExchange (ref pendingB, EMPTY, b);
            return payload == b ? new Message (null, b) : null;
        }
        count++;
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
545
5
Gpt3D_Clone545_5.cs 1 17
Gpt3D_Clone545_5.cs 18 38
----------------------------------------

public Message WrapB (int b, int millisecondsTimeout) {
    int count = 0;
    while (Interlocked.CompareExchange (ref pendingB, b, EMPTY) != EMPTY) {
        Thread.SpinWait ((4 << count ++));
        if (count > 10) {
            return new Message (null, b);
        }
    }
    while (Interlocked.CompareExchange (ref pendingB, EMPTY, EMPTY) == b) {
        Thread.SpinWait ((4 << count ++));
        if (count > 20) {
            int payload = Interlocked.CompareExchange (ref pendingB, EMPTY, b);
            return payload == b ? new Message (null, b) : null;
        }
    }
    return null;
}
----------------------------------------

 public Message WrapB (int b, int millisecondsTimeout) {
    int count = 0;
    while (Interlocked.CompareExchange (ref pendingB, b, EMPTY) != EMPTY) {
        Thread.Yield ();
        if (count > 10) {
            return new Message (null, b);
        }
        count++;
    }
    while (Interlocked.CompareExchange (ref pendingB, EMPTY, EMPTY) == b) {
        Thread.Yield ();
        if (count > 20) {
            int payload = Interlocked.CompareExchange (ref pendingB, EMPTY, b);
            return payload == b ? new Message (null, b) : null;
        }
        count++;
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
545
6
Gpt3D_Clone545_6.cs 1 17
Gpt3D_Clone545_6.cs 18 38
----------------------------------------

public Message WrapB (int b, int millisecondsTimeout) {
    int count = 0;
    while (Interlocked.CompareExchange (ref pendingB, b, EMPTY) != EMPTY) {
        Thread.SpinWait ((4 << count ++));
        if (count > 10) {
            return new Message (null, b);
        }
    }
    while (Interlocked.CompareExchange (ref pendingB, EMPTY, EMPTY) == b) {
        Thread.SpinWait ((4 << count ++));
        if (count > 20) {
            int payload = Interlocked.CompareExchange (ref pendingB, EMPTY, b);
            return payload == b ? new Message (null, b) : null;
        }
    }
    return null;
}
----------------------------------------

 public Message WrapB (int b, int millisecondsTimeout) {
    int count = 0;
    while (Interlocked.CompareExchange (ref pendingB, b, EMPTY) != EMPTY) {
        SynchronizationContext.SetSynchronizationContext(new SynchronizationContext()); 
        if (count > 10) {
            return new Message (null, b);
        }
        count++;
    }
    while (Interlocked.CompareExchange (ref pendingB, EMPTY, EMPTY) == b) {
        SynchronizationContext.SetSynchronizationContext(new SynchronizationContext()); 
        if (count > 20) {
            int payload = Interlocked.CompareExchange (ref pendingB, EMPTY, b);
            return payload == b ? new Message (null, b) : null;
        }
        count++;
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
545
7
Gpt3D_Clone545_7.cs 1 17
Gpt3D_Clone545_7.cs 18 38
----------------------------------------

public Message WrapB (int b, int millisecondsTimeout) {
    int count = 0;
    while (Interlocked.CompareExchange (ref pendingB, b, EMPTY) != EMPTY) {
        Thread.SpinWait ((4 << count ++));
        if (count > 10) {
            return new Message (null, b);
        }
    }
    while (Interlocked.CompareExchange (ref pendingB, EMPTY, EMPTY) == b) {
        Thread.SpinWait ((4 << count ++));
        if (count > 20) {
            int payload = Interlocked.CompareExchange (ref pendingB, EMPTY, b);
            return payload == b ? new Message (null, b) : null;
        }
    }
    return null;
}
----------------------------------------

 public Message WrapB (int b, int millisecondsTimeout) {
    int count = 0;
    while (Interlocked.CompareExchange (ref pendingB, b, EMPTY) != EMPTY) {
        Thread.MemoryBarrier(); 
        if (count > 10) {
            return new Message (null, b);
        }
        count++;
    }
    while (Interlocked.CompareExchange (ref pendingB, EMPTY, EMPTY) == b) {
        Thread.MemoryBarrier(); 
        if (count > 20) {
            int payload = Interlocked.CompareExchange (ref pendingB, EMPTY, b);
            return payload == b ? new Message (null, b) : null;
        }
        count++;
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
545
8
Gpt3D_Clone545_8.cs 1 17
Gpt3D_Clone545_8.cs 18 38
----------------------------------------

public Message WrapB (int b, int millisecondsTimeout) {
    int count = 0;
    while (Interlocked.CompareExchange (ref pendingB, b, EMPTY) != EMPTY) {
        Thread.SpinWait ((4 << count ++));
        if (count > 10) {
            return new Message (null, b);
        }
    }
    while (Interlocked.CompareExchange (ref pendingB, EMPTY, EMPTY) == b) {
        Thread.SpinWait ((4 << count ++));
        if (count > 20) {
            int payload = Interlocked.CompareExchange (ref pendingB, EMPTY, b);
            return payload == b ? new Message (null, b) : null;
        }
    }
    return null;
}
----------------------------------------

 public Message WrapB (int b, int millisecondsTimeout) {
    int count = 0;
    while (Interlocked.CompareExchange (ref pendingB, b, EMPTY) != EMPTY) {
        WaitForSingleObjectEx(handle, millisecondsTimeout * count); 
        if (count > 10) {
            return new Message (null, b);
        }
        count++;
    }
    while (Interlocked.CompareExchange (ref pendingB, EMPTY, EMPTY) == b) {
        WaitForSingleObjectEx(handle, millisecondsTimeout * count); 
        if (count > 20) {
            int payload = Interlocked.CompareExchange (ref pendingB, EMPTY, b);
            return payload == b ? new Message (null, b) : null;
        }
        count++;
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
546
0
Gpt3D_Clone546_0.cs 1 14
Gpt3D_Clone546_0.cs 15 40
----------------------------------------

public Message WrapA (int a, int millisecondsTimeout) {
    Message returnMessage = null;
    bool lockTaken = false;
    Monitor.TryEnter (gate, 100, ref lockTaken);
    if (lockTaken) {
        returnMessage = new Message (a, pendingB);
        pendingB = null;
        Monitor.Pulse (gate);
        Monitor.Exit (gate);
    } else {
        returnMessage = new Message (a, null);
    }
    return returnMessage;
}
----------------------------------------

 public Message WrapA (int a, int millisecondsTimeout) { 
    bool lockTaken = false;
    CountdownEvent cde = new CountdownEvent(1);   
    Message returnMessage = null;
     System.Threading.ThreadPool.RegisterWaitForSingleObject (cde.WaitHandle, 
     delegate
     {
         lockTaken = true;
         cde.Signal();
     }, null, millisecondsTimeout, false);  
    if (lockTaken) 
    {
        returnMessage = new Message (a, pendingB);
        pendingB = null;
        Monitor.Pulse (gate);
    } 
    else 
    {
        returnMessage = new Message (a, null);
    }
    return returnMessage;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
546
1
Gpt3D_Clone546_1.cs 1 14
Gpt3D_Clone546_1.cs 15 35
----------------------------------------

public Message WrapA (int a, int millisecondsTimeout) {
    Message returnMessage = null;
    bool lockTaken = false;
    Monitor.TryEnter (gate, 100, ref lockTaken);
    if (lockTaken) {
        returnMessage = new Message (a, pendingB);
        pendingB = null;
        Monitor.Pulse (gate);
        Monitor.Exit (gate);
    } else {
        returnMessage = new Message (a, null);
    }
    return returnMessage;
}
----------------------------------------

 public Message WrapA (int a, int millisecondsTimeout) { 
    bool lockTaken = false;
    SpinLock spinlock = new SpinLock(false);
    Message returnMessage = null;
    spinlock.enter (ref lockTaken);
   
    if (lockTaken) 
    { 
        returnMessage = new Message (a, pendingB);
        pendingB = null;
        Monitor.Pulse (gate);
    }
    else
    {
        returnMessage = new Message (a, null);
    }
    spinlock.exit(); 
    return returnMessage;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
546
2
Gpt3D_Clone546_2.cs 1 14
Gpt3D_Clone546_2.cs 15 39
----------------------------------------

public Message WrapA (int a, int millisecondsTimeout) {
    Message returnMessage = null;
    bool lockTaken = false;
    Monitor.TryEnter (gate, 100, ref lockTaken);
    if (lockTaken) {
        returnMessage = new Message (a, pendingB);
        pendingB = null;
        Monitor.Pulse (gate);
        Monitor.Exit (gate);
    } else {
        returnMessage = new Message (a, null);
    }
    return returnMessage;
}
----------------------------------------

 public Message WrapA (int a, int millisecondsTimeout) { 
    Message returnMessage = null;
    Object lockObject = new Object();
    
    try
    {
        Monitor.TryEnter(lockObject, millisecondsTimeout, ref lockTaken);
        if (lockTaken) 
        {
            returnMessage = new Message (a, pendingB);
            pendingB = null;
        } 
        else 
        {
            returnMessage = new Message (a, null);
        }
    }
    finally
    {
        Monitor.Exit(lockObject);
    }
    return returnMessage;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
546
3
Gpt3D_Clone546_3.cs 1 14
Gpt3D_Clone546_3.cs 15 38
----------------------------------------

public Message WrapA (int a, int millisecondsTimeout) {
    Message returnMessage = null;
    bool lockTaken = false;
    Monitor.TryEnter (gate, 100, ref lockTaken);
    if (lockTaken) {
        returnMessage = new Message (a, pendingB);
        pendingB = null;
        Monitor.Pulse (gate);
        Monitor.Exit (gate);
    } else {
        returnMessage = new Message (a, null);
    }
    return returnMessage;
}
----------------------------------------

 public Message WrapA (int a, int millisecondsTimeout) { 
    bool lockTaken = false;
    Mutex mutex = new Mutex();
    Message returnMessage = null;
    try
    {
        if(mutex.WaitOne(millisecondsTimeout))
        {
            returnMessage = new Message (a, pendingB);
            pendingB = null;
        }
        else
        {
            returnMessage = new Message (a, null);
        }
    }
    finally
    {
        mutex.ReleaseMutex();
    }
    return returnMessage;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
546
5
Gpt3D_Clone546_5.cs 1 14
Gpt3D_Clone546_5.cs 15 31
----------------------------------------

public Message WrapA (int a, int millisecondsTimeout) {
    Message returnMessage = null;
    bool lockTaken = false;
    Monitor.TryEnter (gate, 100, ref lockTaken);
    if (lockTaken) {
        returnMessage = new Message (a, pendingB);
        pendingB = null;
        Monitor.Pulse (gate);
        Monitor.Exit (gate);
    } else {
        returnMessage = new Message (a, null);
    }
    return returnMessage;
}
----------------------------------------

 public Message WrapA (int a, int millisecondsTimeout) { 
    bool lockTaken = false;
    SemaphoreSlim semaphore = new SemaphoreSlim(1, 1);
    Message returnMessage = null;
    if (semaphore.Wait(millisecondsTimeout)) {
        returnMessage = new Message (a, pendingB);
        pendingB = null;
    }
    else
    {
        returnMessage = new Message (a, null);
    }
    semaphore.Release();
    return returnMessage;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
546
7
Gpt3D_Clone546_7.cs 1 14
Gpt3D_Clone546_7.cs 15 33
----------------------------------------

public Message WrapA (int a, int millisecondsTimeout) {
    Message returnMessage = null;
    bool lockTaken = false;
    Monitor.TryEnter (gate, 100, ref lockTaken);
    if (lockTaken) {
        returnMessage = new Message (a, pendingB);
        pendingB = null;
        Monitor.Pulse (gate);
        Monitor.Exit (gate);
    } else {
        returnMessage = new Message (a, null);
    }
    return returnMessage;
}
----------------------------------------

 public Message WrapA (int a, int millisecondsTimeout) { 
    Message returnMessage = null;
    lock (gate) 
    {
        if (Monitor.Wait(gate, millisecondsTimeout)) 
        {
            returnMessage = new Message (a, pendingB);
            pendingB = null;
            Monitor.Pulse(gate);
        }
        else
        {
            returnMessage = new Message (a, null);
        }
    }
    return returnMessage;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
546
8
Gpt3D_Clone546_8.cs 1 14
Gpt3D_Clone546_8.cs 15 30
----------------------------------------

public Message WrapA (int a, int millisecondsTimeout) {
    Message returnMessage = null;
    bool lockTaken = false;
    Monitor.TryEnter (gate, 100, ref lockTaken);
    if (lockTaken) {
        returnMessage = new Message (a, pendingB);
        pendingB = null;
        Monitor.Pulse (gate);
        Monitor.Exit (gate);
    } else {
        returnMessage = new Message (a, null);
    }
    return returnMessage;
}
----------------------------------------

 public Message WrapA (int a, int millisecondsTimeout) {
    Message returnMessage = null;
    lock (gate) {
        if (Monitor.Wait(gate, millisecondsTimeout)) {
            returnMessage = new Message (a, pendingB);
            pendingB = null;
            Monitor.PulseAll(gate);
        } else {
            returnMessage = new Message (a, null);
        }
    }
    
    return returnMessage;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
546
9
Gpt3D_Clone546_9.cs 1 14
Gpt3D_Clone546_9.cs 15 31
----------------------------------------

public Message WrapA (int a, int millisecondsTimeout) {
    Message returnMessage = null;
    bool lockTaken = false;
    Monitor.TryEnter (gate, 100, ref lockTaken);
    if (lockTaken) {
        returnMessage = new Message (a, pendingB);
        pendingB = null;
        Monitor.Pulse (gate);
        Monitor.Exit (gate);
    } else {
        returnMessage = new Message (a, null);
    }
    return returnMessage;
}
----------------------------------------

 public Message WrapA (int a, int millisecondsTimeout) { 
    bool lockTaken = false;
    AutoResetEvent waitHandle = new AutoResetEvent(false);
    Message returnMessage = null;
    
    if ( waitHandle.WaitOne(millisecondsTimeout, false) ) {
        returnMessage = new Message (a, pendingB);
        pendingB = null;
    } 
    else 
    {
        returnMessage = new Message (a, null);
    }
    return returnMessage;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
547
0
Gpt3D_Clone547_0.cs 1 24
Gpt3D_Clone547_0.cs 25 54
----------------------------------------

public Message WrapB (int b, int millisecondsTimeout) {
    Message returnMessage = null;
    bool lockTaken = false;
    Monitor.TryEnter (gate, 100, ref lockTaken);
    if (lockTaken) {
        if (pendingB != null) {
            Monitor.Wait (gate, 100);
        }
        if (pendingB != null) {
            returnMessage = new Message (null, b);
        } else {
            pendingB = b;
            if (! Monitor.Wait (gate, millisecondsTimeout)) {
                pendingB = null;
                Monitor.Pulse (gate);
                returnMessage = new Message (null, b);
            }
        }
        Monitor.Exit (gate);
    } else {
        returnMessage = new Message (null, b);
    }
    return returnMessage;
}
----------------------------------------

 public Message WrapB (int b, int millisecondsTimeout) { 
    Message returnMessage = null; 
    bool lockTaken = false; 
    lockTaken = Monitor.TryEnter (gate, 100); 
    if (lockTaken) { 
        if (pendingB == b) { 
            Monitor.Wait (gate, 100); 
        } 
        if (pendingB == b) { 
            pendingB = b; 
            if (! Monitor.Wait (gate, millisecondsTimeout)) { 
                pendingB = null; 
                Monitor.Pulse (gate); 
                returnMessage = new Message (null, b); 
            } 
        } 
        else 
        { 
            returnMessage = new Message (null, b); 
        } 
        Monitor.Exit (gate); 
    } 
    else 
    { 
        returnMessage = new Message (null, b); 
    } 
    return returnMessage; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
547
1
Gpt3D_Clone547_1.cs 1 24
Gpt3D_Clone547_1.cs 25 59
----------------------------------------

public Message WrapB (int b, int millisecondsTimeout) {
    Message returnMessage = null;
    bool lockTaken = false;
    Monitor.TryEnter (gate, 100, ref lockTaken);
    if (lockTaken) {
        if (pendingB != null) {
            Monitor.Wait (gate, 100);
        }
        if (pendingB != null) {
            returnMessage = new Message (null, b);
        } else {
            pendingB = b;
            if (! Monitor.Wait (gate, millisecondsTimeout)) {
                pendingB = null;
                Monitor.Pulse (gate);
                returnMessage = new Message (null, b);
            }
        }
        Monitor.Exit (gate);
    } else {
        returnMessage = new Message (null, b);
    }
    return returnMessage;
}
----------------------------------------

 public Message WrapB (int b, int millisecondsTimeout)
{
    Message returnMessage = null;
    bool lockTaken = false;
    Monitor.TryEnter(gate, millisecondsTimeout, ref lockTaken);
    if (lockTaken)
    {
        if (pendingB == b)
        {
            Monitor.Wait(gate, millisecondsTimeout);
        }
        if (pendingB == b)
        {
            pendingB = b;
            if (!Monitor.Wait(gate, millisecondsTimeout))
            {
                pendingB = null;
                Monitor.Pulse(gate);
                returnMessage = new Message(null, b);
            }
        }
        else
        {
            returnMessage = new Message(null, b);
        }
        Monitor.Exit (gate);
    }
    else
    {
        returnMessage = new Message(null, b);
    }
    return returnMessage;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
547
2
Gpt3D_Clone547_2.cs 1 24
Gpt3D_Clone547_2.cs 25 55
----------------------------------------

public Message WrapB (int b, int millisecondsTimeout) {
    Message returnMessage = null;
    bool lockTaken = false;
    Monitor.TryEnter (gate, 100, ref lockTaken);
    if (lockTaken) {
        if (pendingB != null) {
            Monitor.Wait (gate, 100);
        }
        if (pendingB != null) {
            returnMessage = new Message (null, b);
        } else {
            pendingB = b;
            if (! Monitor.Wait (gate, millisecondsTimeout)) {
                pendingB = null;
                Monitor.Pulse (gate);
                returnMessage = new Message (null, b);
            }
        }
        Monitor.Exit (gate);
    } else {
        returnMessage = new Message (null, b);
    }
    return returnMessage;
}
----------------------------------------

 public Message WrapB (int b, int millisecondsTimeout)
{
    Message returnMessage = null;
    bool lockTaken = false;
    lockTaken = Monitor.TryEnter (gate, millisecondsTimeout);
    if (lockTaken)
    {
        if (pendingB == b)
        {
            Monitor.Wait (gate, millisecondsTimeout);
        }
        if (pendingB != b)
        {
            pendingB = b;
            if (!Monitor.Wait(gate, millisecondsTimeout))
            {
                pendingB = null;
                Monitor.PulseAll(gate);
                returnMessage = new Message(null, b);
            }
        }
        Monitor.Exit (gate);
    }
    else
    {
        returnMessage = new Message(null, b);
    }
    return returnMessage;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
547
3
Gpt3D_Clone547_3.cs 1 24
Gpt3D_Clone547_3.cs 25 55
----------------------------------------

public Message WrapB (int b, int millisecondsTimeout) {
    Message returnMessage = null;
    bool lockTaken = false;
    Monitor.TryEnter (gate, 100, ref lockTaken);
    if (lockTaken) {
        if (pendingB != null) {
            Monitor.Wait (gate, 100);
        }
        if (pendingB != null) {
            returnMessage = new Message (null, b);
        } else {
            pendingB = b;
            if (! Monitor.Wait (gate, millisecondsTimeout)) {
                pendingB = null;
                Monitor.Pulse (gate);
                returnMessage = new Message (null, b);
            }
        }
        Monitor.Exit (gate);
    } else {
        returnMessage = new Message (null, b);
    }
    return returnMessage;
}
----------------------------------------

 public Message WrapB (int b, int millisecondsTimeout)
{
    Message returnMessage = null;
    bool lockTaken = false;
    Monitor.TryEnter(gate, millisecondsTimeout, ref lockTaken);
    if (lockTaken)
    {
        if (pendingB != null)
        {
            Monitor.Wait(gate, millisecondsTimeout);
        }
        if (pendingB == null)
        {
            pendingB = b;
            if (!Monitor.Wait(gate, millisecondsTimeout))
            {
                pendingB = null;
                Monitor.Pulse(gate);
                returnMessage = new Message(null, b);
            }
        }
        Monitor.Exit (gate);
    }
    else
    {
        returnMessage = new Message(null, b);
    }
    return returnMessage;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
547
4
Gpt3D_Clone547_4.cs 1 24
Gpt3D_Clone547_4.cs 25 55
----------------------------------------

public Message WrapB (int b, int millisecondsTimeout) {
    Message returnMessage = null;
    bool lockTaken = false;
    Monitor.TryEnter (gate, 100, ref lockTaken);
    if (lockTaken) {
        if (pendingB != null) {
            Monitor.Wait (gate, 100);
        }
        if (pendingB != null) {
            returnMessage = new Message (null, b);
        } else {
            pendingB = b;
            if (! Monitor.Wait (gate, millisecondsTimeout)) {
                pendingB = null;
                Monitor.Pulse (gate);
                returnMessage = new Message (null, b);
            }
        }
        Monitor.Exit (gate);
    } else {
        returnMessage = new Message (null, b);
    }
    return returnMessage;
}
----------------------------------------

 public Message WrapB (int b, int millisecondsTimeout)
{
    Message returnMessage = null;
    bool lockTaken = false;
    lockTaken = Monitor.TryEnter(gate, millisecondsTimeout);
    if (lockTaken)
    {
        if (pendingB == null)
        {
            Monitor.Wait(gate, millisecondsTimeout);
        }
        if (pendingB == null)
        {
            pendingB = b;
            if (!Monitor.Wait(gate, millisecondsTimeout))
            {
                pendingB = b;
                Monitor.PulseAll(gate);
                returnMessage = new Message(null, b);
            }
        }
        Monitor.Exit (gate);
    }
    else
    {
        returnMessage = new Message(null, b);
    }
    return returnMessage;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
547
5
Gpt3D_Clone547_5.cs 1 24
Gpt3D_Clone547_5.cs 25 55
----------------------------------------

public Message WrapB (int b, int millisecondsTimeout) {
    Message returnMessage = null;
    bool lockTaken = false;
    Monitor.TryEnter (gate, 100, ref lockTaken);
    if (lockTaken) {
        if (pendingB != null) {
            Monitor.Wait (gate, 100);
        }
        if (pendingB != null) {
            returnMessage = new Message (null, b);
        } else {
            pendingB = b;
            if (! Monitor.Wait (gate, millisecondsTimeout)) {
                pendingB = null;
                Monitor.Pulse (gate);
                returnMessage = new Message (null, b);
            }
        }
        Monitor.Exit (gate);
    } else {
        returnMessage = new Message (null, b);
    }
    return returnMessage;
}
----------------------------------------

 public Message WrapB (int b, int millisecondsTimeout)
{
    Message returnMessage = null;
    bool lockTaken = false;
    lockTaken = Monitor.TryEnter(gate, millisecondsTimeout);
    if (lockTaken)
    {
        if (pendingB == b)
        {
            Monitor.Wait(gate, millisecondsTimeout);
        }
        if (pendingB != b)
        {
            pendingB = b;
            if (!Monitor.Wait(gate, millisecondsTimeout))
            {
                pendingB = null;
                Monitor.PulseAll(gate);
                returnMessage = new Message(null, b);
            }
        }
        Monitor.Exit (gate);
    }
    else
    {
        returnMessage = new Message(null, b);
    }
    return returnMessage;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
547
6
Gpt3D_Clone547_6.cs 1 24
Gpt3D_Clone547_6.cs 25 48
----------------------------------------

public Message WrapB (int b, int millisecondsTimeout) {
    Message returnMessage = null;
    bool lockTaken = false;
    Monitor.TryEnter (gate, 100, ref lockTaken);
    if (lockTaken) {
        if (pendingB != null) {
            Monitor.Wait (gate, 100);
        }
        if (pendingB != null) {
            returnMessage = new Message (null, b);
        } else {
            pendingB = b;
            if (! Monitor.Wait (gate, millisecondsTimeout)) {
                pendingB = null;
                Monitor.Pulse (gate);
                returnMessage = new Message (null, b);
            }
        }
        Monitor.Exit (gate);
    } else {
        returnMessage = new Message (null, b);
    }
    return returnMessage;
}
----------------------------------------

 public Message WrapB (int b, int millisecondsTimeout) { 
    Message returnMessage = null; 
    bool lockTaken = false; 
    lockTaken = Monitor.TryEnter (gate, 100); 
    if (lockTaken) { 
        if (pendingB == b) { 
            Monitor.Wait (gate, 100); 
        } 
        if (pendingB != b) { 
            pendingB = b; 
            if (! Monitor.Wait (gate, millisecondsTimeout)) { 
                pendingB = null; 
                Monitor.Pulse (gate); 
                returnMessage = new Message (null, b); 
            } 
        } 
        Monitor.Exit (gate); 
    } else { 
        returnMessage = new Message (null, b); 
    } 
    return returnMessage; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
547
7
Gpt3D_Clone547_7.cs 1 24
Gpt3D_Clone547_7.cs 25 48
----------------------------------------

public Message WrapB (int b, int millisecondsTimeout) {
    Message returnMessage = null;
    bool lockTaken = false;
    Monitor.TryEnter (gate, 100, ref lockTaken);
    if (lockTaken) {
        if (pendingB != null) {
            Monitor.Wait (gate, 100);
        }
        if (pendingB != null) {
            returnMessage = new Message (null, b);
        } else {
            pendingB = b;
            if (! Monitor.Wait (gate, millisecondsTimeout)) {
                pendingB = null;
                Monitor.Pulse (gate);
                returnMessage = new Message (null, b);
            }
        }
        Monitor.Exit (gate);
    } else {
        returnMessage = new Message (null, b);
    }
    return returnMessage;
}
----------------------------------------

 public Message WrapB (int b, int millisecondsTimeout) { 
    Message returnMessage = null; 
    bool lockTaken = false; 
    lockTaken = Monitor.TryEnter (gate, millisecondsTimeout); 
    if (lockTaken) { 
        if (pendingB != b) { 
            Monitor.Wait (gate, millisecondsTimeout); 
        } 
        if (pendingB != b) { 
            pendingB = b; 
            if (! Monitor.Wait (gate, millisecondsTimeout)) { 
                pendingB = null; 
                Monitor.Pulse (gate); 
                returnMessage = new Message (null, b); 
            } 
        } 
        Monitor.Exit (gate); 
    } else { 
        returnMessage = new Message (null, b); 
    } 
    return returnMessage; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
547
8
Gpt3D_Clone547_8.cs 1 24
Gpt3D_Clone547_8.cs 25 49
----------------------------------------

public Message WrapB (int b, int millisecondsTimeout) {
    Message returnMessage = null;
    bool lockTaken = false;
    Monitor.TryEnter (gate, 100, ref lockTaken);
    if (lockTaken) {
        if (pendingB != null) {
            Monitor.Wait (gate, 100);
        }
        if (pendingB != null) {
            returnMessage = new Message (null, b);
        } else {
            pendingB = b;
            if (! Monitor.Wait (gate, millisecondsTimeout)) {
                pendingB = null;
                Monitor.Pulse (gate);
                returnMessage = new Message (null, b);
            }
        }
        Monitor.Exit (gate);
    } else {
        returnMessage = new Message (null, b);
    }
    return returnMessage;
}
----------------------------------------

 public Message WrapB (int b, int millisecondsTimeout) { 
    Message returnMessage = null; 
    bool lockTaken = false; 
    lockTaken = Monitor.TryEnter (gate, 100); 
    if (lockTaken) { 
        if (pendingB != b) { 
            Monitor.Wait (gate, 100); 
        } 
        if (pendingB != b) { 
            pendingB = b; 
            if (! Monitor.Wait (gate, millisecondsTimeout)) { 
                pendingB = null; 
                Monitor.Pulse (gate); 
                returnMessage = new Message (null, b); 
            } 
        } 
        Monitor.Exit (gate); 
    } else { 
        returnMessage = new Message (null, b); 
    } 
    return returnMessage; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
549
0
Gpt3D_Clone549_0.cs 1 18
Gpt3D_Clone549_0.cs 19 38
----------------------------------------

private void btnAddDriver_Click (object sender, RoutedEventArgs e) {
    double tempPolicy = policy;
    if (cmbOccupation.SelectedItem.ToString () == Occumpation.Chauffeur.ToString ()) {
        tempPolicy = (tempPolicy + tempPolicy * Chauffeur);
        txtPolicy.Text = tempPolicy.ToString ();
    } else if (cmbOccupation.SelectedItem.ToString () == Occumpation.Accountant.ToString ()) {
        tempPolicy = (tempPolicy - tempPolicy * Accountant);
        txtPolicy.Text = tempPolicy.ToString ();
    }
    DateTime birthDate = Convert.ToDateTime (dpkDOB.SelectedDate);
    if (birthDate.Age ().Years () > 21 && birthDate.Age ().Years () < 26) {
        tempPolicy = (tempPolicy + tempPolicy * age2125);
        txtPolicy.Text = tempPolicy.ToString ();
    } else if (birthDate.Age ().Years () > 26 && birthDate.Age ().Years () < 76) {
        tempPolicy = (tempPolicy - tempPolicy * age2675);
        txtPolicy.Text = tempPolicy.ToString ();
    }
}
----------------------------------------

  private void btnAddDriver_Click (object sender, RoutedEventArgs e) {
    double tempPolicy = policy;
    if (cmbOccupation.SelectedValue == Occumpation.Chauffeur) {
        tempPolicy = (tempPolicy + tempPolicy * Chauffeur);
        txtPolicy.Text = tempPolicy.ToString ();
    } else if (cmbOccupation.SelectedValue == Occumpation.Accountant) {
        tempPolicy = (tempPolicy - tempPolicy * Accountant);
        txtPolicy.Text = tempPolicy.ToString ();
    }
    var ageInYears = DateTime.Today.Year - dpkDOB.SelectedDate.Year;
    if (ageInYears > 21 && ageInYears < 26) {
        tempPolicy = (tempPolicy + tempPolicy * age2125);
        txtPolicy.Text = tempPolicy.ToString ();
    } else if (ageInYears > 26 && ageInYears < 76) {
        tempPolicy = (tempPolicy - tempPolicy * age2675);
        txtPolicy.Text = tempPolicy.ToString ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
557
4
Gpt3D_Clone557_4.cs 1 12
Gpt3D_Clone557_4.cs 13 34
----------------------------------------

static byte [] StreamToByteArray (Stream inputStream) {
    if (! inputStream.CanRead) {
        throw new ArgumentException ();
    }
    if (inputStream.CanSeek) {
        inputStream.Seek (0, SeekOrigin.Begin);
    }
    byte [] output = new byte [inputStream.Length];
    int bytesRead = inputStream.Read (output, 0, output.Length);
    Debug.Assert (bytesRead == output.Length, "Bytes read from stream matches stream length");
    return output;
}
----------------------------------------

 static byte[] StreamToByteArray(Stream inputStream)
{
    if (!inputStream.CanRead)
    {
        throw new ArgumentException();
    }
    if (inputStream.CanSeek)
    {
        inputStream.Seek(0, SeekOrigin.Begin);
    }
    byte[] output = new byte[inputStream.Length];
    int curPos = 0;
    while(curPos < inputStream.Length)
    {
        int bytesRead = inputStream.Read(output, curPos, output.Length - curPos);
        curPos += bytesRead;
    }
    Debug.Assert (curPos == output.Length, "Bytes read from stream matches stream length");
    return output;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
559
0
Gpt3D_Clone559_0.cs 1 23
Gpt3D_Clone559_0.cs 24 52
----------------------------------------

private void SetTableDescriptions (Type tableType) {
    string fullTableName = context.GetTableName (tableType);
    Regex regex = new Regex (@"(\[\w+\]\.)?\[(?<table>.*)\]");
    Match match = regex.Match (fullTableName);
    string tableName;
    if (match.Success)
        tableName = match.Groups ["table"].Value;
    else
        tableName = fullTableName;
    var tableAttrs = tableType.GetCustomAttributes (typeof (TableAttribute), false);
    if (tableAttrs.Length > 0)
        tableName = ((TableAttribute) tableAttrs [0]).Name;
    var table_attrs = tableType.GetCustomAttributes (typeof (DescriptionAttribute), false);
    if (table_attrs != null && table_attrs.Length > 0)
        SetTableDescription (tableName, ((DescriptionAttribute) table_attrs [0]).Description);
    foreach (var prop in tableType.GetProperties (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance)) {
        if (prop.PropertyType.IsClass && prop.PropertyType != typeof (string))
            continue;
        var attrs = prop.GetCustomAttributes (typeof (DescriptionAttribute), false);
        if (attrs != null && attrs.Length > 0)
            SetColumnDescription (tableName, prop.Name, ((DescriptionAttribute) attrs [0]).Description);
    }
}
----------------------------------------

  private void SetTableDescriptions (Type tableType) {
    string fullTableName = context.GetTableName (tableType);
    Regex regex = new Regex (@"(\[\w+\]\.)?\[(?<table>.*)\]");
    Match match = regex.Match (fullTableName);
    string tableName;
    if (match.Success)
        tableName = match.Groups ["table"].Value;
    else
        tableName = fullTableName;
    var tableAttrs = tableType.GetCustomAttributes (typeof (TableAttribute), false);
    if (tableAttrs.Length > 0)
        tableName = ((TableAttribute) tableAttrs [0]).Name;
    var tableDescriptionAttr = tableType.GetCustomAttribute<DescriptionAttribute>();
    if (tableDescriptionAttr != null) {
        SetTableDescription(tableName, tableDescriptionAttr.Description);
    }
    // Get the column descriptions
    foreach (var prop in tableType.GetProperties (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance)) {
        if (prop.PropertyType.IsClass && prop.PropertyType != typeof (string))
            continue;
        var attrs = prop.GetCustomAttributes (typeof (DescriptionAttribute), false);
        if (attrs != null && attrs.Length > 0) {
            var descriptionAttr = attrs[0] as DescriptionAttribute;
            SetColumnDescription (tableName, prop.Name, descriptionAttr.Description);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
560
1
Gpt3D_Clone560_1.cs 1 11
Gpt3D_Clone560_1.cs 12 28
----------------------------------------

public static void DeleteEmptyDirs (this DirectoryInfo dir) {
    foreach (DirectoryInfo d in dir.GetDirectories ())
        d.DeleteEmptyDirs ();
    try {
        dir.Delete ();
    }
    catch (IOException) {
    }
    catch (UnauthorizedAccessException) {
    }
}
----------------------------------------

 public static void DeleteEmptyDirs (this DirectoryInfo dir, bool suppressErrors = true) {
    foreach (DirectoryInfo d in dir.GetDirectories ())
        d.DeleteEmptyDirs ();
    try {
        dir.Delete ();
    }
    catch (IOException) {
        if (!suppressErrors)
            throw;
    }
    catch (UnauthorizedAccessException) {
        if (!suppressErrors)
            throw;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
560
2
Gpt3D_Clone560_2.cs 1 11
Gpt3D_Clone560_2.cs 12 28
----------------------------------------

public static void DeleteEmptyDirs (this DirectoryInfo dir) {
    foreach (DirectoryInfo d in dir.GetDirectories ())
        d.DeleteEmptyDirs ();
    try {
        dir.Delete ();
    }
    catch (IOException) {
    }
    catch (UnauthorizedAccessException) {
    }
}
----------------------------------------

 public static void DeleteEmptyDirs (this DirectoryInfo dir, string[] directoriesToIgnore, IList<string> deletedDirs) {
    foreach (DirectoryInfo d in dir.GetDirectories ())
        d.DeleteEmptyDirs (directoriesToIgnore, deletedDirs);
    if (!directoriesToIgnore.Contains(dir.Name))
    {
        try {
            dir.Delete ();
            deletedDirs.Add(dir.FullName);
        }
        catch (IOException) {
        }
        catch (UnauthorizedAccessException) {
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
560
3
Gpt3D_Clone560_3.cs 1 11
Gpt3D_Clone560_3.cs 12 28
----------------------------------------

public static void DeleteEmptyDirs (this DirectoryInfo dir) {
    foreach (DirectoryInfo d in dir.GetDirectories ())
        d.DeleteEmptyDirs ();
    try {
        dir.Delete ();
    }
    catch (IOException) {
    }
    catch (UnauthorizedAccessException) {
    }
}
----------------------------------------

 public static void DeleteEmptyDirs(this DirectoryInfo dir, string[] directoriesToIgnore, ref int totalDeletedDirs) {
    foreach (DirectoryInfo d in dir.GetDirectories ())
        d.DeleteEmptyDirs (directoriesToIgnore, ref totalDeletedDirs);
    if (!directoriesToIgnore.Contains(dir.Name))
    {
        try {
            dir.Delete ();
            totalDeletedDirs++;
        }
        catch (IOException) {
        }
        catch (UnauthorizedAccessException) {
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
560
4
Gpt3D_Clone560_4.cs 1 11
Gpt3D_Clone560_4.cs 12 27
----------------------------------------

public static void DeleteEmptyDirs (this DirectoryInfo dir) {
    foreach (DirectoryInfo d in dir.GetDirectories ())
        d.DeleteEmptyDirs ();
    try {
        dir.Delete ();
    }
    catch (IOException) {
    }
    catch (UnauthorizedAccessException) {
    }
}
----------------------------------------

 public static void DeleteEmptyDirs(this DirectoryInfo dir, params string[] directoryNamesToIgnore) {
    foreach (DirectoryInfo d in dir.GetDirectories ())
        d.DeleteEmptyDirs (directoryNamesToIgnore);
    if (!directoryNamesToIgnore.Contains(dir.Name))
    { 
        try {
            dir.Delete ();
        }
        catch (IOException) {
        }
        catch (UnauthorizedAccessException) {
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
560
5
Gpt3D_Clone560_5.cs 1 11
Gpt3D_Clone560_5.cs 12 25
----------------------------------------

public static void DeleteEmptyDirs (this DirectoryInfo dir) {
    foreach (DirectoryInfo d in dir.GetDirectories ())
        d.DeleteEmptyDirs ();
    try {
        dir.Delete ();
    }
    catch (IOException) {
    }
    catch (UnauthorizedAccessException) {
    }
}
----------------------------------------

 public static void DeleteEmptyDirs(this DirectoryInfo dir, IList<string> deletedDirs) {
    foreach (DirectoryInfo d in dir.GetDirectories ())
        d.DeleteEmptyDirs (deletedDirs);
    try {
        dir.Delete ();
        deletedDirs.Add(dir.FullName);
    }
    catch (IOException) {
    }
    catch (UnauthorizedAccessException) {
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
560
6
Gpt3D_Clone560_6.cs 1 11
Gpt3D_Clone560_6.cs 12 27
----------------------------------------

public static void DeleteEmptyDirs (this DirectoryInfo dir) {
    foreach (DirectoryInfo d in dir.GetDirectories ())
        d.DeleteEmptyDirs ();
    try {
        dir.Delete ();
    }
    catch (IOException) {
    }
    catch (UnauthorizedAccessException) {
    }
}
----------------------------------------

 public static void DeleteEmptyDirs(this DirectoryInfo dir, List<string> directoryNamesToIgnore) {
    foreach (DirectoryInfo d in dir.GetDirectories ())
        d.DeleteEmptyDirs (directoryNamesToIgnore);
    if (!directoryNamesToIgnore.Contains(dir.Name))
    {
        try {
            dir.Delete ();
        }
        catch (IOException) {
        }
        catch (UnauthorizedAccessException) {
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
560
7
Gpt3D_Clone560_7.cs 1 11
Gpt3D_Clone560_7.cs 12 25
----------------------------------------

public static void DeleteEmptyDirs (this DirectoryInfo dir) {
    foreach (DirectoryInfo d in dir.GetDirectories ())
        d.DeleteEmptyDirs ();
    try {
        dir.Delete ();
    }
    catch (IOException) {
    }
    catch (UnauthorizedAccessException) {
    }
}
----------------------------------------

 public static void DeleteEmptyDirs(this DirectoryInfo dir, ref int totalDeletedDirs) {
    foreach (DirectoryInfo d in dir.GetDirectories ())
        d.DeleteEmptyDirs (ref totalDeletedDirs);
    try {
        dir.Delete ();
        totalDeletedDirs++;
    }
    catch (IOException) {
    }
    catch (UnauthorizedAccessException) {
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
560
8
Gpt3D_Clone560_8.cs 1 11
Gpt3D_Clone560_8.cs 12 27
----------------------------------------

public static void DeleteEmptyDirs (this DirectoryInfo dir) {
    foreach (DirectoryInfo d in dir.GetDirectories ())
        d.DeleteEmptyDirs ();
    try {
        dir.Delete ();
    }
    catch (IOException) {
    }
    catch (UnauthorizedAccessException) {
    }
}
----------------------------------------

 public static void DeleteEmptyDirs (this DirectoryInfo dir, Func<string, bool> shouldDelete) {
    foreach (DirectoryInfo d in dir.GetDirectories ())
        d.DeleteEmptyDirs ();
    if (shouldDelete?.Invoke (dir.FullName) == true)
    {
        try {
            dir.Delete ();
        }
        catch (IOException) {
        }
        catch (UnauthorizedAccessException) {
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
560
9
Gpt3D_Clone560_9.cs 1 11
Gpt3D_Clone560_9.cs 12 25
----------------------------------------

public static void DeleteEmptyDirs (this DirectoryInfo dir) {
    foreach (DirectoryInfo d in dir.GetDirectories ())
        d.DeleteEmptyDirs ();
    try {
        dir.Delete ();
    }
    catch (IOException) {
    }
    catch (UnauthorizedAccessException) {
    }
}
----------------------------------------

 public static void DeleteEmptyDirs (this DirectoryInfo dir, Action<string> onDirDeleted) {
    foreach (DirectoryInfo d in dir.GetDirectories ())
        d.DeleteEmptyDirs ();
    try {
        dir.Delete ();
        onDirDeleted?.Invoke (dir.FullName);
    }
    catch (IOException) {
    }
    catch (UnauthorizedAccessException) {
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
566
0
Gpt3D_Clone566_0.cs 1 25
Gpt3D_Clone566_0.cs 26 56
----------------------------------------

public Image ResizeImage (Image source, RectangleF destinationBounds) {
    RectangleF sourceBounds = new RectangleF (0.0f, 0.0f, (float) source.Width, (float) source.Height);
    RectangleF scaleBounds = new RectangleF ();
    Image destinationImage = new Bitmap ((int) destinationBounds.Width, (int) destinationBounds.Height);
    Graphics graph = Graphics.FromImage (destinationImage);
    graph.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;
    graph.FillRectangle (new SolidBrush (System.Drawing.Color.White), destinationBounds);
    float resizeRatio, sourceRatio;
    float scaleWidth, scaleHeight;
    sourceRatio = (float) source.Width / (float) source.Height;
    if (sourceRatio >= 1.0f) {
        resizeRatio = destinationBounds.Width / sourceBounds.Width;
        scaleWidth = destinationBounds.Width;
        scaleHeight = sourceBounds.Height * resizeRatio;
        float trimValue = destinationBounds.Height - scaleHeight;
        graph.DrawImage (source, 0, (trimValue / 2), destinationBounds.Width, scaleHeight);
    } else {
        resizeRatio = destinationBounds.Height / sourceBounds.Height;
        scaleWidth = sourceBounds.Width * resizeRatio;
        scaleHeight = destinationBounds.Height;
        float trimValue = destinationBounds.Width - scaleWidth;
        graph.DrawImage (source, (trimValue / 2), 0, scaleWidth, destinationBounds.Height);
    }
    return destinationImage;
}
----------------------------------------

 public Image ResizeImage (Image source, RectangleF destinationBounds) {
    RectangleF sourceBounds = new RectangleF (0.0f, 0.0f, (float) source.Width, (float) source.Height);
    RectangleF scaleBounds = new RectangleF ();
    Image destinationImage = new Bitmap ((int) destinationBounds.Width, (int) destinationBounds.Height);
    Graphics graph = Graphics.FromImage (destinationImage);
    graph.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;
    graph.FillRectangle (new SolidBrush (System.Drawing.Color.White), destinationBounds);
    float resizeRatio, sourceRatio;
    float scaleX, scaleY;
    sourceRatio = (float) source.Width / (float) source.Height;
    if (sourceRatio >= 1.0f) {
        scaleX = destinationBounds.Width / sourceBounds.Width;
        scaleY = destinationBounds.Height / sourceBounds.Height;
        resizeRatio = Math.Min(scaleX, scaleY);
        scaleX = sourceBounds.Width * resizeRatio;
        scaleY = sourceBounds.Height * resizeRatio;
        float trimValue = destinationBounds.Width - scaleX;
        graph.DrawImage (source, trimValue/2,0, scaleX, scaleY );
    } else {
        scaleX = destinationBounds.Width / sourceBounds.Width;
        scaleY = destinationBounds.Height / sourceBounds.Height;
        resizeRatio = Math.Min(scaleX, scaleY);
        scaleX = sourceBounds.Width * resizeRatio;
        scaleY = sourceBounds.Height * resizeRatio;
        float trimValue = destinationBounds.Height - scaleY;
        graph.DrawImage (source, 0, trimValue/2 , scaleX, scaleY); 
    }
    return destinationImage;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
566
1
Gpt3D_Clone566_1.cs 1 25
Gpt3D_Clone566_1.cs 26 56
----------------------------------------

public Image ResizeImage (Image source, RectangleF destinationBounds) {
    RectangleF sourceBounds = new RectangleF (0.0f, 0.0f, (float) source.Width, (float) source.Height);
    RectangleF scaleBounds = new RectangleF ();
    Image destinationImage = new Bitmap ((int) destinationBounds.Width, (int) destinationBounds.Height);
    Graphics graph = Graphics.FromImage (destinationImage);
    graph.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;
    graph.FillRectangle (new SolidBrush (System.Drawing.Color.White), destinationBounds);
    float resizeRatio, sourceRatio;
    float scaleWidth, scaleHeight;
    sourceRatio = (float) source.Width / (float) source.Height;
    if (sourceRatio >= 1.0f) {
        resizeRatio = destinationBounds.Width / sourceBounds.Width;
        scaleWidth = destinationBounds.Width;
        scaleHeight = sourceBounds.Height * resizeRatio;
        float trimValue = destinationBounds.Height - scaleHeight;
        graph.DrawImage (source, 0, (trimValue / 2), destinationBounds.Width, scaleHeight);
    } else {
        resizeRatio = destinationBounds.Height / sourceBounds.Height;
        scaleWidth = sourceBounds.Width * resizeRatio;
        scaleHeight = destinationBounds.Height;
        float trimValue = destinationBounds.Width - scaleWidth;
        graph.DrawImage (source, (trimValue / 2), 0, scaleWidth, destinationBounds.Height);
    }
    return destinationImage;
}
----------------------------------------

 public Image ResizeImage (Image source, RectangleF destinationBounds) {
    RectangleF sourceBounds = new RectangleF (0.0f, 0.0f, (float) source.Width, (float) source.Height);
    RectangleF scaleBounds = new RectangleF ();
    Image destinationImage = new Bitmap ((int) destinationBounds.Width, (int) destinationBounds.Height);
    Graphics graph = Graphics.FromImage (destinationImage);
    graph.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;
    graph.FillRectangle (new SolidBrush (System.Drawing.Color.White), destinationBounds);
    float resizeRatio, sourceRatio;
    float scaleDx, scaleDy;
    sourceRatio = (float) source.Width / (float) source.Height;
    if (sourceRatio >= 1.0f) {
        scaleDx = destinationBounds.Width / sourceBounds.Width;
        scaleDy = destinationBounds.Height / sourceBounds.Height;
        resizeRatio = Math.Max(scaleDx, scaleDy);
        scaleDx = sourceBounds.Width * resizeRatio;
        scaleDy = sourceBounds.Height * resizeRatio;
        float trimValue = destinationBounds.Width - scaleDx;
        graph.DrawImage (source, trimValue/2,0, scaleDx, scaleDy );
    } else {
        scaleDx = destinationBounds.Width / sourceBounds.Width;
        scaleDy = destinationBounds.Height / sourceBounds.Height;
        resizeRatio = Math.Max(scaleDx, scaleDy);
        scaleDx = sourceBounds.Width * resizeRatio;
        scaleDy = sourceBounds.Height * resizeRatio;
        float trimValue = destinationBounds.Height - scaleDy;
        graph.DrawImage (source, 0, trimValue/2 , scaleDx, scaleDy); 
    }
    return destinationImage;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
566
2
Gpt3D_Clone566_2.cs 1 25
Gpt3D_Clone566_2.cs 26 56
----------------------------------------

public Image ResizeImage (Image source, RectangleF destinationBounds) {
    RectangleF sourceBounds = new RectangleF (0.0f, 0.0f, (float) source.Width, (float) source.Height);
    RectangleF scaleBounds = new RectangleF ();
    Image destinationImage = new Bitmap ((int) destinationBounds.Width, (int) destinationBounds.Height);
    Graphics graph = Graphics.FromImage (destinationImage);
    graph.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;
    graph.FillRectangle (new SolidBrush (System.Drawing.Color.White), destinationBounds);
    float resizeRatio, sourceRatio;
    float scaleWidth, scaleHeight;
    sourceRatio = (float) source.Width / (float) source.Height;
    if (sourceRatio >= 1.0f) {
        resizeRatio = destinationBounds.Width / sourceBounds.Width;
        scaleWidth = destinationBounds.Width;
        scaleHeight = sourceBounds.Height * resizeRatio;
        float trimValue = destinationBounds.Height - scaleHeight;
        graph.DrawImage (source, 0, (trimValue / 2), destinationBounds.Width, scaleHeight);
    } else {
        resizeRatio = destinationBounds.Height / sourceBounds.Height;
        scaleWidth = sourceBounds.Width * resizeRatio;
        scaleHeight = destinationBounds.Height;
        float trimValue = destinationBounds.Width - scaleWidth;
        graph.DrawImage (source, (trimValue / 2), 0, scaleWidth, destinationBounds.Height);
    }
    return destinationImage;
}
----------------------------------------

 public Image ResizeImage (Image source, RectangleF destinationBounds) {
    RectangleF sourceBounds = new RectangleF (0.0f, 0.0f, (float) source.Width, (float) source.Height);
    RectangleF scaleBounds = new RectangleF ();
    Image destinationImage = new Bitmap ((int) destinationBounds.Width, (int) destinationBounds.Height);
    Graphics graph = Graphics.FromImage (destinationImage);
    graph.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;
    graph.FillRectangle (new SolidBrush (System.Drawing.Color.White), destinationBounds);
    float resizeRatio, sourceRatio;
    float scaleDx, scaleDy;
    sourceRatio = (float) source.Width / (float) source.Height;
    if (sourceRatio >= 1.0f) {
        scaleDx = destinationBounds.Width / sourceBounds.Width;
        scaleDy = destinationBounds.Height / sourceBounds.Height;
        resizeRatio = Math.Min(scaleDx, scaleDy);
        scaleDx = sourceBounds.Width * resizeRatio;
        scaleDy = sourceBounds.Height * resizeRatio;
        float trimValue = destinationBounds.Width - scaleDx;
        graph.DrawImage (source, trimValue/2,0, scaleDx, scaleDy );
    } else {
        scaleDx = destinationBounds.Width / sourceBounds.Width;
        scaleDy = destinationBounds.Height / sourceBounds.Height;
        resizeRatio = Math.Min(scaleDx, scaleDy);
        scaleDx = sourceBounds.Width * resizeRatio;
        scaleDy = sourceBounds.Height * resizeRatio;
        float trimValue = destinationBounds.Height - scaleDy;
        graph.DrawImage (source, 0, trimValue/2 , scaleDx, scaleDy); 
    }
    return destinationImage;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
566
3
Gpt3D_Clone566_3.cs 1 25
Gpt3D_Clone566_3.cs 26 57
----------------------------------------

public Image ResizeImage (Image source, RectangleF destinationBounds) {
    RectangleF sourceBounds = new RectangleF (0.0f, 0.0f, (float) source.Width, (float) source.Height);
    RectangleF scaleBounds = new RectangleF ();
    Image destinationImage = new Bitmap ((int) destinationBounds.Width, (int) destinationBounds.Height);
    Graphics graph = Graphics.FromImage (destinationImage);
    graph.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;
    graph.FillRectangle (new SolidBrush (System.Drawing.Color.White), destinationBounds);
    float resizeRatio, sourceRatio;
    float scaleWidth, scaleHeight;
    sourceRatio = (float) source.Width / (float) source.Height;
    if (sourceRatio >= 1.0f) {
        resizeRatio = destinationBounds.Width / sourceBounds.Width;
        scaleWidth = destinationBounds.Width;
        scaleHeight = sourceBounds.Height * resizeRatio;
        float trimValue = destinationBounds.Height - scaleHeight;
        graph.DrawImage (source, 0, (trimValue / 2), destinationBounds.Width, scaleHeight);
    } else {
        resizeRatio = destinationBounds.Height / sourceBounds.Height;
        scaleWidth = sourceBounds.Width * resizeRatio;
        scaleHeight = destinationBounds.Height;
        float trimValue = destinationBounds.Width - scaleWidth;
        graph.DrawImage (source, (trimValue / 2), 0, scaleWidth, destinationBounds.Height);
    }
    return destinationImage;
}
----------------------------------------

 public Image ResizeImage (Image source, RectangleF destinationBounds) {
    RectangleF sourceBounds = new RectangleF (0.0f, 0.0f, (float) source.Width, (float) source.Height);
    RectangleF scaleBounds = new RectangleF ();
    Image destinationImage = new Bitmap ((int) destinationBounds.Width, (int) destinationBounds.Height);
    Graphics graph = Graphics.FromImage (destinationImage);
    graph.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;
    graph.FillRectangle (new SolidBrush (System.Drawing.Color.White), destinationBounds);
    float resizeRatio, sourceRatio;
    float scaleDx, scaleDy;
    sourceRatio = (float) source.Width / (float) source.Height;
    float widthScale = destinationBounds.Width / sourceBounds.Width;
    float heightScale = destinationBounds.Height / sourceBounds.Height;
    graph.DrawImage (source, 0,0, destinationBounds.Width, destinationBounds.Height); 
    if (sourceRatio >= 1.0f) {
        resizeRatio = Math.Min(widthScale, heightScale);
        scaleDx = sourceBounds.Width * resizeRatio;
        scaleDy = sourceBounds.Height * resizeRatio;
        float trimValue = destinationBounds.Width - scaleDx;
        graph.DrawImage (source, trimValue/2,0, scaleDx, scaleDy );
    } else {
        resizeRatio = Math.Min(widthScale, heightScale);
        scaleDx = sourceBounds.Width * resizeRatio;
        scaleDy = sourceBounds.Height * resizeRatio;
        float trimValue = destinationBounds.Height - scaleDy;
        graph.DrawImage (source, 0, trimValue/2 , scaleDx, scaleDy); 
    }
    return destinationImage;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
566
4
Gpt3D_Clone566_4.cs 1 25
Gpt3D_Clone566_4.cs 26 54
----------------------------------------

public Image ResizeImage (Image source, RectangleF destinationBounds) {
    RectangleF sourceBounds = new RectangleF (0.0f, 0.0f, (float) source.Width, (float) source.Height);
    RectangleF scaleBounds = new RectangleF ();
    Image destinationImage = new Bitmap ((int) destinationBounds.Width, (int) destinationBounds.Height);
    Graphics graph = Graphics.FromImage (destinationImage);
    graph.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;
    graph.FillRectangle (new SolidBrush (System.Drawing.Color.White), destinationBounds);
    float resizeRatio, sourceRatio;
    float scaleWidth, scaleHeight;
    sourceRatio = (float) source.Width / (float) source.Height;
    if (sourceRatio >= 1.0f) {
        resizeRatio = destinationBounds.Width / sourceBounds.Width;
        scaleWidth = destinationBounds.Width;
        scaleHeight = sourceBounds.Height * resizeRatio;
        float trimValue = destinationBounds.Height - scaleHeight;
        graph.DrawImage (source, 0, (trimValue / 2), destinationBounds.Width, scaleHeight);
    } else {
        resizeRatio = destinationBounds.Height / sourceBounds.Height;
        scaleWidth = sourceBounds.Width * resizeRatio;
        scaleHeight = destinationBounds.Height;
        float trimValue = destinationBounds.Width - scaleWidth;
        graph.DrawImage (source, (trimValue / 2), 0, scaleWidth, destinationBounds.Height);
    }
    return destinationImage;
}
----------------------------------------

 public Image ResizeImage (Image source, RectangleF destinationBounds) {
    RectangleF sourceBounds = new RectangleF (0.0f, 0.0f, (float) source.Width, (float) source.Height);
    RectangleF scaleBounds = new RectangleF ();
    Image destinationImage = new Bitmap ((int) destinationBounds.Width, (int) destinationBounds.Height);
    Graphics graph = Graphics.FromImage (destinationImage);
    graph.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;
    graph.FillRectangle (new SolidBrush (System.Drawing.Color.White), destinationBounds);
    float resizeRatio, sourceRatio;
    float scaleScalar;
    sourceRatio = (float) source.Width / (float) source.Height;
    if (sourceRatio >= 1.0f) {
        scaleScalar = destinationBounds.Width / sourceBounds.Width;
        resizeRatio = Math.Min(scaleScalar, destBounds.height/sourceBounds.height);
        float scaleWidth = sourceBounds.Width * resizeRatio;
        float scaleHeight = sourceBounds.height * resizeRatio;
        float trimValue = destinationBounds.Width - scaleWidth;
        graph.DrawImage (source, trimValue/2,0, scaleWidth, scaleHeight );
    } else {
        scaleScalar = destinationBounds.Height / sourceBounds.Height;
        resizeRatio = Math.Min(scaleScalar, destBounds.width/sourceBounds.width);
        float scaleWidth = sourceBounds.Width * resizeRatio;
        float scaleHeight = sourceBounds.height * resizeRatio;
        float trimValue = destinationBounds.Height - scaleHeight;
        graph.DrawImage (source, 0, trimValue/2 , scaleWidth, scaleHeight); 
    }
    return destinationImage;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
56
0
Gpt3D_Clone56_0.cs 1 9
Gpt3D_Clone56_0.cs 10 21
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    textBox2.Clear ();
    float result;
    if (float.TryParse (textBox1.Text, out result)) {
        textBox2.AppendText (Math.Sin (result).ToString ());
    } else {
        textBox2.Text = "Invalid Input";
    }
}
----------------------------------------

  private void button1_Click (object sender, EventArgs e){
    textBox2.Clear ();
    float result;
    if (float.TryParse (textBox1.Text, out result)) {
        result = Convert.ToSingle(Math.Sin (result));
        textBox2.Text += result.ToString ("N2");
    } else {
        textBox2.Text = "Invalid Input";
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
56
1
Gpt3D_Clone56_1.cs 1 9
Gpt3D_Clone56_1.cs 10 21
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    textBox2.Clear ();
    float result;
    if (float.TryParse (textBox1.Text, out result)) {
        textBox2.AppendText (Math.Sin (result).ToString ());
    } else {
        textBox2.Text = "Invalid Input";
    }
}
----------------------------------------

  private void button1_Click (object sender, EventArgs e) {
    textBox2.Clear ();
    float result;
    if (float.TryParse (textBox1.Text, out result)) {
        result = Convert.ToSingle(Math.Sin(result).ToString("#.##"));
        textBox2.Text += result;
    } else {
        textBox2.Text = "Invalid Input";
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
56
2
Gpt3D_Clone56_2.cs 1 9
Gpt3D_Clone56_2.cs 10 21
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    textBox2.Clear ();
    float result;
    if (float.TryParse (textBox1.Text, out result)) {
        textBox2.AppendText (Math.Sin (result).ToString ());
    } else {
        textBox2.Text = "Invalid Input";
    }
}
----------------------------------------

  private void button1_Click (object sender, EventArgs e) {
    textBox2.Clear ();
    float result;
    if (float.TryParse (textBox1.Text, out result)) {
        result = (float)Math.Sin (result);
        textBox2.AppendText (string.Format("{0:N2}",result));
    } else {
        textBox2.Text = "Invalid Input";
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
56
5
Gpt3D_Clone56_5.cs 1 9
Gpt3D_Clone56_5.cs 10 20
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    textBox2.Clear ();
    float result;
    if (float.TryParse (textBox1.Text, out result)) {
        textBox2.AppendText (Math.Sin (result).ToString ());
    } else {
        textBox2.Text = "Invalid Input";
    }
}
----------------------------------------

  private void button1_Click (object sender, EventArgs e) {
    textBox2.Clear ();
    double result;
    if (double.TryParse (textBox1.Text, out result)) {
        textBox2.Text += Math.Sin (result).ToString ("N2");
    } else {
        textBox2.Text = "Invalid Input";
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
56
6
Gpt3D_Clone56_6.cs 1 9
Gpt3D_Clone56_6.cs 10 20
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    textBox2.Clear ();
    float result;
    if (float.TryParse (textBox1.Text, out result)) {
        textBox2.AppendText (Math.Sin (result).ToString ());
    } else {
        textBox2.Text = "Invalid Input";
    }
}
----------------------------------------

  private void button1_Click (object sender, EventArgs e) {
    textBox2.Clear ();
    decimal result;
    if (decimal.TryParse (textBox1.Text, out result)) {
        textBox2.AppendText (Math.Sin (Convert.ToDouble (result)).ToString ());
    } else {
        textBox2.Text = "Invalid Input";
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
56
7
Gpt3D_Clone56_7.cs 1 9
Gpt3D_Clone56_7.cs 10 20
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    textBox2.Clear ();
    float result;
    if (float.TryParse (textBox1.Text, out result)) {
        textBox2.AppendText (Math.Sin (result).ToString ());
    } else {
        textBox2.Text = "Invalid Input";
    }
}
----------------------------------------

  private void button1_Click (object sender, EventArgs e) {
    textBox2.Clear ();
    double result;
    if (double.TryParse (textBox1.Text, out result)) {
        textBox2.Text += Math.Sin (Convert.ToDouble (textBox1.Text)).ToString ("N2");
    } else {
        textBox2.Text = "Invalid Input";
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
570
1
Gpt3D_Clone570_1.cs 1 12
Gpt3D_Clone570_1.cs 13 41
----------------------------------------

public string Export () {
    StringBuilder sb = new StringBuilder ();
    foreach (string field in fields)
        sb.Append (field).Append (delim);
    sb.AppendLine ();
    foreach (Dictionary < string, object > row in rows) {
        foreach (string field in fields)
            sb.Append (MakeValueCsvFriendly (row [field])).Append (delim);
        sb.AppendLine ();
    }
    return sb.ToString ();
}
----------------------------------------

 public string Export () {
        StringBuilder result = new StringBuilder ();
        foreach (string field in fields)
            result.Append (field).Append (delim);
        result.Append ('\n');
        foreach (Dictionary < string, object > row in rows) {
            foreach (string field in fields)
                result.Append (MakeValueCsvFriendly (row [field])).Append (delim);
            result.Append ('\n');
        }
        return result.ToString ();
    }
 public string Export () 
{
    var sb = new StringBuilder();
    foreach (var item in fields)
        sb.Append($"{item}{delim}");
    sb.AppendLine();
    foreach (var rowDict in rows) 
    {
        foreach (var propName in fields)
            sb.Append(MakeValueCsvFriendly(rowDict[propName])).Append(delim);
        sb.AppendLine();
    }
    return sb.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
570
2
Gpt3D_Clone570_2.cs 1 12
Gpt3D_Clone570_2.cs 13 28
----------------------------------------

public string Export () {
    StringBuilder sb = new StringBuilder ();
    foreach (string field in fields)
        sb.Append (field).Append (delim);
    sb.AppendLine ();
    foreach (Dictionary < string, object > row in rows) {
        foreach (string field in fields)
            sb.Append (MakeValueCsvFriendly (row [field])).Append (delim);
        sb.AppendLine ();
    }
    return sb.ToString ();
}
----------------------------------------

 public string Export()
{
    var sb = new StringBuilder();
    foreach (var field in fields)
        sb.Append($"{field}{delim}");
    sb.AppendLine();
    foreach (var row in rows)
    {
        foreach (var field in fields)
            sb.Append(MakeValueCsvFriendly(row[field])).Append(delim);
        sb.AppendLine();
    }
    return sb.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
570
3
Gpt3D_Clone570_3.cs 1 12
Gpt3D_Clone570_3.cs 13 29
----------------------------------------

public string Export () {
    StringBuilder sb = new StringBuilder ();
    foreach (string field in fields)
        sb.Append (field).Append (delim);
    sb.AppendLine ();
    foreach (Dictionary < string, object > row in rows) {
        foreach (string field in fields)
            sb.Append (MakeValueCsvFriendly (row [field])).Append (delim);
        sb.AppendLine ();
    }
    return sb.ToString ();
}
----------------------------------------

 public string Export () 
{
    var createdString = new StringBuilder();
    foreach (var theField in fields)
        createdString.Append($"{theField}{delim}");
    createdString.AppendLine();
    foreach (var theRow in rows)
    {
        foreach (var theField in fields)
            createdString.Append(MakeValueCsvFriendly(theRow[theField]))
                         .Append(delim);
        createdString.AppendLine();
    }
    return createdString.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
570
4
Gpt3D_Clone570_4.cs 1 12
Gpt3D_Clone570_4.cs 13 29
----------------------------------------

public string Export () {
    StringBuilder sb = new StringBuilder ();
    foreach (string field in fields)
        sb.Append (field).Append (delim);
    sb.AppendLine ();
    foreach (Dictionary < string, object > row in rows) {
        foreach (string field in fields)
            sb.Append (MakeValueCsvFriendly (row [field])).Append (delim);
        sb.AppendLine ();
    }
    return sb.ToString ();
}
----------------------------------------

 public string Export()
{
    var outputString = new StringBuilder();
    foreach (var currentField in fields)
        outputString.Append($"{currentField}{delim}");
    outputString.AppendLine();
    foreach (var currentRow in rows)
    {
        foreach (var currentField in fields)
            outputString.Append(MakeValueCsvFriendly(currentRow[currentField]))
                        .Append(delim);
        outputString.AppendLine();
    }
    return outputString.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
570
5
Gpt3D_Clone570_5.cs 1 12
Gpt3D_Clone570_5.cs 13 29
----------------------------------------

public string Export () {
    StringBuilder sb = new StringBuilder ();
    foreach (string field in fields)
        sb.Append (field).Append (delim);
    sb.AppendLine ();
    foreach (Dictionary < string, object > row in rows) {
        foreach (string field in fields)
            sb.Append (MakeValueCsvFriendly (row [field])).Append (delim);
        sb.AppendLine ();
    }
    return sb.ToString ();
}
----------------------------------------

 public string Export()
{
    var stringBuilder = new StringBuilder();
    foreach (var field in fields)
        stringBuilder.Append($"{field}{delim}");
    stringBuilder.AppendLine();
    foreach (var row in rows)
    {
        foreach (var field in fields)
            stringBuilder.Append(MakeValueCsvFriendly(row[field]))
                          .Append(delim);
        stringBuilder.AppendLine();
    }
    return stringBuilder.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
571
0
Gpt3D_Clone571_0.cs 1 17
Gpt3D_Clone571_0.cs 18 41
----------------------------------------

public string Export (bool includeHeaderLine) {
    StringBuilder sb = new StringBuilder ();
    IList < PropertyInfo > propertyInfos = typeof (T).GetProperties ();
    if (includeHeaderLine) {
        foreach (PropertyInfo propertyInfo in propertyInfos) {
            sb.Append (propertyInfo.Name).Append (",");
        }
        sb.Remove (sb.Length - 1, 1).AppendLine ();
    }
    foreach (T obj in Objects) {
        foreach (PropertyInfo propertyInfo in propertyInfos) {
            sb.Append (MakeValueCsvFriendly (propertyInfo.GetValue (obj, null))).Append (",");
        }
        sb.Remove (sb.Length - 1, 1).AppendLine ();
    }
    return sb.ToString ();
}
----------------------------------------

 
public string Export (bool includeHeaderLine) {
    StringBuilder sb = new StringBuilder ();
    IList < PropertyInfo > propertyInfos = typeof (T).GetProperties ();
    if (includeHeaderLine) {
        StringBuilder sbHeaderLine = new StringBuilder();
        foreach (PropertyInfo propertyInfo in propertyInfos) {
            sbHeaderLine.Append (propertyInfo.Name).Append (",");
        }
        sbHeaderLine.Remove (sbHeaderLine.Length - 1, 1).AppendLine ();
        sb.Append(sbHeaderLine);
    }
    foreach (T obj in Objects) {
        StringBuilder sbContentLine = new StringBuilder();
        foreach (PropertyInfo propertyInfo in propertyInfos) {
            sbContentLine.Append (MakeValueCsvFriendly (propertyInfo.GetValue (obj, null))).Append (",");
        }
        sbContentLine.Remove (sbContentLine.Length - 1, 1).AppendLine ();
        sb.Append(sbContentLine);
    }
    return sb.ToString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
571
1
Gpt3D_Clone571_1.cs 1 17
Gpt3D_Clone571_1.cs 18 37
----------------------------------------

public string Export (bool includeHeaderLine) {
    StringBuilder sb = new StringBuilder ();
    IList < PropertyInfo > propertyInfos = typeof (T).GetProperties ();
    if (includeHeaderLine) {
        foreach (PropertyInfo propertyInfo in propertyInfos) {
            sb.Append (propertyInfo.Name).Append (",");
        }
        sb.Remove (sb.Length - 1, 1).AppendLine ();
    }
    foreach (T obj in Objects) {
        foreach (PropertyInfo propertyInfo in propertyInfos) {
            sb.Append (MakeValueCsvFriendly (propertyInfo.GetValue (obj, null))).Append (",");
        }
        sb.Remove (sb.Length - 1, 1).AppendLine ();
    }
    return sb.ToString ();
}
----------------------------------------

 
public string Export (bool includeHeaderLine) {
    StringBuilder sb = new StringBuilder ();
    IList < PropertyInfo > propertyInfos = typeof (T).GetProperties ();
    if (includeHeaderLine) {
        for (int i = 0; i < propertyInfos.Count; i++) {
            sb.Append ($"{propertyInfos[i].Name},");
        }
        sb.Remove (sb.Length - 1, 1).AppendLine ();
    }
    foreach (T obj in Objects) {
        foreach (PropertyInfo propertyInfo in propertyInfos) {
            sb.Append ($"{MakeValueCsvFriendly (propertyInfo.GetValue (obj, null))},");
        }
        sb.Remove (sb.Length - 1, 1).AppendLine ();
    }
    return sb.ToString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
571
2
Gpt3D_Clone571_2.cs 1 17
Gpt3D_Clone571_2.cs 18 33
----------------------------------------

public string Export (bool includeHeaderLine) {
    StringBuilder sb = new StringBuilder ();
    IList < PropertyInfo > propertyInfos = typeof (T).GetProperties ();
    if (includeHeaderLine) {
        foreach (PropertyInfo propertyInfo in propertyInfos) {
            sb.Append (propertyInfo.Name).Append (",");
        }
        sb.Remove (sb.Length - 1, 1).AppendLine ();
    }
    foreach (T obj in Objects) {
        foreach (PropertyInfo propertyInfo in propertyInfos) {
            sb.Append (MakeValueCsvFriendly (propertyInfo.GetValue (obj, null))).Append (",");
        }
        sb.Remove (sb.Length - 1, 1).AppendLine ();
    }
    return sb.ToString ();
}
----------------------------------------

 
public string Export (bool includeHeaderLine) {
    StringBuilder sb = new StringBuilder ();
    var propertyInfos = typeof (T).GetProperties ().ToList();
    if (includeHeaderLine) {
        propertyInfos.ForEach(p => sb.AppendFormat("{0},",p.Name));
        sb.Remove (sb.Length - 1, 1).AppendLine ();
    }
    foreach (T obj in Objects) {
        propertyInfos.ForEach(p => sb.AppendFormat("{0},", MakeValueCsvFriendly (p.GetValue (obj, null))));
        sb.Remove (sb.Length - 1, 1).AppendLine ();
    }
    return sb.ToString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
571
4
Gpt3D_Clone571_4.cs 1 17
Gpt3D_Clone571_4.cs 18 33
----------------------------------------

public string Export (bool includeHeaderLine) {
    StringBuilder sb = new StringBuilder ();
    IList < PropertyInfo > propertyInfos = typeof (T).GetProperties ();
    if (includeHeaderLine) {
        foreach (PropertyInfo propertyInfo in propertyInfos) {
            sb.Append (propertyInfo.Name).Append (",");
        }
        sb.Remove (sb.Length - 1, 1).AppendLine ();
    }
    foreach (T obj in Objects) {
        foreach (PropertyInfo propertyInfo in propertyInfos) {
            sb.Append (MakeValueCsvFriendly (propertyInfo.GetValue (obj, null))).Append (",");
        }
        sb.Remove (sb.Length - 1, 1).AppendLine ();
    }
    return sb.ToString ();
}
----------------------------------------

public string Export (bool includeHeaderLine) {
    StringBuilder sb = new StringBuilder ();
    IList < PropertyInfo > propertyInfos = typeof (T).GetProperties ();
    if (includeHeaderLine) {
        propertyInfos.ToList().ForEach(p => sb.Append (p.Name).Append (","));
        sb.Remove (sb.Length - 1, 1).AppendLine ();
    }
    foreach (T obj in Objects) {
        propertyInfos.ToList().ForEach(p => sb.Append (MakeValueCsvFriendly (p.GetValue (obj, null))).Append (","));
        sb.Remove (sb.Length - 1, 1).AppendLine ();
    }
    return sb.ToString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
572
0
Gpt3D_Clone572_0.cs 1 12
Gpt3D_Clone572_0.cs 13 40
----------------------------------------

private void button6_Click (object sender, EventArgs e) {
    string select = (listView1.SelectedItems.Count > 0) ? (listView1.SelectedItems [0].Text) : null;
    if (! string.IsNullOrWhiteSpace (select)) {
        listView1.BeginUpdate ();
        pths.Remove (select);
        rec.Remove (select);
        listView1.EndUpdate ();
        string s = String.Join ("; ", pths.ToArray ());
        string r = String.Join ("; ", rec.ToArray ());
    }
    Disp ();
}
----------------------------------------

 private void button6_Click(object sender, EventArgs e)
{
    string select = null;
    if (listView1.SelectedItems.Count > 0)
    {
        select = listView1.SelectedItems[0].Text;
    }
    if (String.IsNullOrWhiteSpace(select))
    {
        return;
    }
    else if (!pths.Contains(select && rec.Contains(select)))
    {
        return;
    }
    listView1.BeginUpdate();
    pths.Remove(select);
    rec.Remove(select);
    listView1.EndUpdate();
    string s = String.Join("; ", pths.ToArray());
    string r = String.Join("; ", rec.ToArray());
    Disp();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
572
1
Gpt3D_Clone572_1.cs 1 12
Gpt3D_Clone572_1.cs 13 37
----------------------------------------

private void button6_Click (object sender, EventArgs e) {
    string select = (listView1.SelectedItems.Count > 0) ? (listView1.SelectedItems [0].Text) : null;
    if (! string.IsNullOrWhiteSpace (select)) {
        listView1.BeginUpdate ();
        pths.Remove (select);
        rec.Remove (select);
        listView1.EndUpdate ();
        string s = String.Join ("; ", pths.ToArray ());
        string r = String.Join ("; ", rec.ToArray ());
    }
    Disp ();
}
----------------------------------------

 private void button6_Click(object sender, EventArgs e)
{
    if (listView1.SelectedItems.Count == 0 
        || String.IsNullOrWhiteSpace(listView1.SelectedItems[0].Text))
    {
        return;
    }
    string select = listView1.SelectedItems[0].Text;
    if (!pths.Contains(select) && !rec.Contains(select))
    {
        return;
    }
    listView1.BeginUpdate();
    pths.Remove(select);
    rec.Remove(select);
    listView1.EndUpdate();
    string s = String.Join("; ", pths.ToArray());
    string r = String.Join("; ", rec.ToArray());
    Disp();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
572
2
Gpt3D_Clone572_2.cs 1 12
Gpt3D_Clone572_2.cs 13 37
----------------------------------------

private void button6_Click (object sender, EventArgs e) {
    string select = (listView1.SelectedItems.Count > 0) ? (listView1.SelectedItems [0].Text) : null;
    if (! string.IsNullOrWhiteSpace (select)) {
        listView1.BeginUpdate ();
        pths.Remove (select);
        rec.Remove (select);
        listView1.EndUpdate ();
        string s = String.Join ("; ", pths.ToArray ());
        string r = String.Join ("; ", rec.ToArray ());
    }
    Disp ();
}
----------------------------------------

 private void button6_Click(object sender, EventArgs e)
{
    if (listView1.SelectedItems.Count == 0)
    {
        return;
    }
    string select = listView1.SelectedItems[0].Text;
    if (String.IsNullOrWhiteSpace(select) 
        || !pths.Contains(select) && !rec.Contains(select))
    {
        return;
    }
    listView1.BeginUpdate();
    pths.Remove(select);
    rec.Remove(select);
    listView1.EndUpdate();
    string s = String.Join("; ", pths.ToArray());
    string r = String.Join("; ", rec.ToArray());
    Disp();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
572
4
Gpt3D_Clone572_4.cs 1 12
Gpt3D_Clone572_4.cs 13 35
----------------------------------------

private void button6_Click (object sender, EventArgs e) {
    string select = (listView1.SelectedItems.Count > 0) ? (listView1.SelectedItems [0].Text) : null;
    if (! string.IsNullOrWhiteSpace (select)) {
        listView1.BeginUpdate ();
        pths.Remove (select);
        rec.Remove (select);
        listView1.EndUpdate ();
        string s = String.Join ("; ", pths.ToArray ());
        string r = String.Join ("; ", rec.ToArray ());
    }
    Disp ();
}
----------------------------------------

 private void button6_Click(object sender, EventArgs e)
{
    if (listView1.SelectedItems.Count == 0)
    {
        return;
    }
    string select = listView1.SelectedItems[0].Text;
    if (String.IsNullOrWhiteSpace(select) || !pths.Contains(select))
    {
        return;
    }
    listView1.BeginUpdate();
    pths.Remove(select);
    rec.Remove(select);
    listView1.EndUpdate();
    string s = String.Join("; ", pths.ToArray());
    string r = String.Join("; ", rec.ToArray());
    Disp();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
572
5
Gpt3D_Clone572_5.cs 1 12
Gpt3D_Clone572_5.cs 13 37
----------------------------------------

private void button6_Click (object sender, EventArgs e) {
    string select = (listView1.SelectedItems.Count > 0) ? (listView1.SelectedItems [0].Text) : null;
    if (! string.IsNullOrWhiteSpace (select)) {
        listView1.BeginUpdate ();
        pths.Remove (select);
        rec.Remove (select);
        listView1.EndUpdate ();
        string s = String.Join ("; ", pths.ToArray ());
        string r = String.Join ("; ", rec.ToArray ());
    }
    Disp ();
}
----------------------------------------

 private void button6_Click(object sender, EventArgs e)
{
    string select = null;
    if (listView1.SelectedItems.Count > 0)
    {
        select = listView1.SelectedItems[0].Text;
    }
    if (!String.IsNullOrWhiteSpace(select))
    {
        if (pths.Contains(select) && rec.Contains(select))
        {
            listView1.BeginUpdate();
            pths.Remove(select);
            rec.Remove(select);
            listView1.EndUpdate();
            string s = String.Join("; ", pths.ToArray());
            string r = String.Join("; ", rec.ToArray());
            Disp();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
572
6
Gpt3D_Clone572_6.cs 1 12
Gpt3D_Clone572_6.cs 13 36
----------------------------------------

private void button6_Click (object sender, EventArgs e) {
    string select = (listView1.SelectedItems.Count > 0) ? (listView1.SelectedItems [0].Text) : null;
    if (! string.IsNullOrWhiteSpace (select)) {
        listView1.BeginUpdate ();
        pths.Remove (select);
        rec.Remove (select);
        listView1.EndUpdate ();
        string s = String.Join ("; ", pths.ToArray ());
        string r = String.Join ("; ", rec.ToArray ());
    }
    Disp ();
}
----------------------------------------

 private void button6_Click(object sender, EventArgs e)
{
    string select = null;
    if (listView1.SelectedItems.Count > 0)
    {
        select = listView1.SelectedItems[0].Text;
    }
        
    if (String.IsNullOrWhiteSpace(select) || !pths.Contains(select && rec.Contains(select)))
    {
        return;
    }
    listView1.BeginUpdate();
    pths.Remove(select);
    rec.Remove(select);
    listView1.EndUpdate();
    string s = String.Join("; ", pths.ToArray());
    string r = String.Join("; ", rec.ToArray());
    Disp();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
572
7
Gpt3D_Clone572_7.cs 1 12
Gpt3D_Clone572_7.cs 13 34
----------------------------------------

private void button6_Click (object sender, EventArgs e) {
    string select = (listView1.SelectedItems.Count > 0) ? (listView1.SelectedItems [0].Text) : null;
    if (! string.IsNullOrWhiteSpace (select)) {
        listView1.BeginUpdate ();
        pths.Remove (select);
        rec.Remove (select);
        listView1.EndUpdate ();
        string s = String.Join ("; ", pths.ToArray ());
        string r = String.Join ("; ", rec.ToArray ());
    }
    Disp ();
}
----------------------------------------

 private void button6_Click(object sender, EventArgs e)
{
    if (listView1.SelectedItems.Count == 0 
        || String.IsNullOrWhiteSpace(listView1.SelectedItems[0].Text) 
        || !pths.Contains(listView1.SelectedItems[0].Text) 
        || !rec.Contains(listView1.SelectedItems[0].Text))
    {
        return;
    }
        
    string select = listView1.SelectedItems[0].Text;
    listView1.BeginUpdate();
    pths.Remove(select);
    rec.Remove(select);
    listView1.EndUpdate();
    string s = String.Join("; ", pths.ToArray());
    string r = String.Join("; ", rec.ToArray());
    Disp();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
572
8
Gpt3D_Clone572_8.cs 1 12
Gpt3D_Clone572_8.cs 13 31
----------------------------------------

private void button6_Click (object sender, EventArgs e) {
    string select = (listView1.SelectedItems.Count > 0) ? (listView1.SelectedItems [0].Text) : null;
    if (! string.IsNullOrWhiteSpace (select)) {
        listView1.BeginUpdate ();
        pths.Remove (select);
        rec.Remove (select);
        listView1.EndUpdate ();
        string s = String.Join ("; ", pths.ToArray ());
        string r = String.Join ("; ", rec.ToArray ());
    }
    Disp ();
}
----------------------------------------

 private void button6_Click(object sender, EventArgs e)
{
    if (!(listView1.SelectedItems.Count > 0 && pths.Contains(listView1.SelectedItems[0].Text) && rec.Contains(listView1.SelectedItems[0].Text)))
    {
        return;
    }
    string select = listView1.SelectedItems[0].Text;
    listView1.BeginUpdate();
    pths.Remove(select);
    rec.Remove(select);
    listView1.EndUpdate();
    string s = String.Join("; ", pths.ToArray());
    string r = String.Join("; ", rec.ToArray());
    Disp();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
572
9
Gpt3D_Clone572_9.cs 1 12
Gpt3D_Clone572_9.cs 13 31
----------------------------------------

private void button6_Click (object sender, EventArgs e) {
    string select = (listView1.SelectedItems.Count > 0) ? (listView1.SelectedItems [0].Text) : null;
    if (! string.IsNullOrWhiteSpace (select)) {
        listView1.BeginUpdate ();
        pths.Remove (select);
        rec.Remove (select);
        listView1.EndUpdate ();
        string s = String.Join ("; ", pths.ToArray ());
        string r = String.Join ("; ", rec.ToArray ());
    }
    Disp ();
}
----------------------------------------

 private void button6_Click(object sender, EventArgs e)
{
    if (listView1.SelectedItems.Count > 0)
    {
        string select  = listView1.SelectedItems[0].Text;
        if (pths.Contains(select) && rec.Contains(select))
        {
            listView1.BeginUpdate();
            pths.Remove(select);
            rec.Remove(select);
            listView1.EndUpdate();
            string s = String.Join("; ", pths.ToArray());
            string r = String.Join("; ", rec.ToArray());
            Disp();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
577
0
Gpt3D_Clone577_0.cs 1 10
Gpt3D_Clone577_0.cs 11 25
----------------------------------------

public static string GetMessage (Exception i_oException, string i_sCulture) {
    CultureInfo oCultureInfo = null;
    try {
        oCultureInfo = new CultureInfo (i_sCulture);
    }
    catch {
        oCultureInfo = CultureInfo.InvariantCulture;
    }
    return GetMessage (i_oException, oCultureInfo);
}
----------------------------------------

  public static string GetMessage (Exception i_oException, string i_sCulture) 
{
    string cultureString = null;
    try 
    {
        cultureString = new CultureInfo(i_sCulture).Name;
    }
    catch
    {
        cultureString = CultureInfo.InvariantCulture.Name;
    }
    return GetMessage(i_oException, cultureString);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
57
0
Gpt3D_Clone57_0.cs 1 12
Gpt3D_Clone57_0.cs 13 26
----------------------------------------

public int Compare (foo x, foo y) {
    if (x == null || y == null)
        return int.MinValue;
    if (x.name != y.name)
        return StringComparer.CurrentCulture.Compare (x.name, y.name);
    else if (x.date != y.date)
        return x.date.CompareTo (y.date);
    else if (x.counter != y.counter)
        return x.counter.CompareTo (y.counter);
    else
        return 0;
}
----------------------------------------

 public int Compare (foo x, foo y) {
    if (x == null || y == null)
        return int.MinValue;
    if (x.name.ToLowerInvariant() != y.name.ToLowerInvariant())
        return StringComparer.InvariantCultureIgnoreCase.Compare (x.name, y.name);
    else if (x.date != y.date)
        return (int)x.date.CompareTo(y.date);
    else if (x.counter != y.counter)
        return (int)x.counter.CompareTo(y.counter);
    else
        return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
57
1
Gpt3D_Clone57_1.cs 1 12
Gpt3D_Clone57_1.cs 13 26
----------------------------------------

public int Compare (foo x, foo y) {
    if (x == null || y == null)
        return int.MinValue;
    if (x.name != y.name)
        return StringComparer.CurrentCulture.Compare (x.name, y.name);
    else if (x.date != y.date)
        return x.date.CompareTo (y.date);
    else if (x.counter != y.counter)
        return x.counter.CompareTo (y.counter);
    else
        return 0;
}
----------------------------------------

 public int Compare (foo x, foo y) {
    if (x == null || y == null)
        return int.MinValue;
    if (!String.Equals(x.name, y.name, StringComparison.OrdinalIgnoreCase))
        return StringComparer.OrdinalIgnoreCase.Compare (x.name, y.name);
    else if (x.date != y.date)
        return x.date.Subtract(y.date).TotalSeconds;
    else if (x.counter != y.counter)
        return Convert.ToInt32(x.counter - y.counter);
    else
        return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
57
2
Gpt3D_Clone57_2.cs 1 12
Gpt3D_Clone57_2.cs 13 26
----------------------------------------

public int Compare (foo x, foo y) {
    if (x == null || y == null)
        return int.MinValue;
    if (x.name != y.name)
        return StringComparer.CurrentCulture.Compare (x.name, y.name);
    else if (x.date != y.date)
        return x.date.CompareTo (y.date);
    else if (x.counter != y.counter)
        return x.counter.CompareTo (y.counter);
    else
        return 0;
}
----------------------------------------

 public int Compare (foo x, foo y) {
    if (x == null || y == null)
        return int.MinValue;
    if (String.Compare(x.name, y.name, true) != 0)
        return StringComparer.OrdinalIgnoreCase.Compare (x.name, y.name);
    else if (x.date != y.date)
        return DateTime.Compare (x.date, y.date);
    else if (x.counter != y.counter)
        return Convert.ToInt32(x.counter - y.counter);
    else
        return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
57
3
Gpt3D_Clone57_3.cs 1 12
Gpt3D_Clone57_3.cs 13 26
----------------------------------------

public int Compare (foo x, foo y) {
    if (x == null || y == null)
        return int.MinValue;
    if (x.name != y.name)
        return StringComparer.CurrentCulture.Compare (x.name, y.name);
    else if (x.date != y.date)
        return x.date.CompareTo (y.date);
    else if (x.counter != y.counter)
        return x.counter.CompareTo (y.counter);
    else
        return 0;
}
----------------------------------------

 public int Compare (foo x, foo y) {
    if (x == null || y == null)
        return int.MinValue;
    if (String.Compare(x.name, y.name, StringComparison.OrdinalIgnoreCase) != 0)
        return StringComparer.OrdinalIgnoreCase.Compare (x.name, y.name);
    else if (x.date != y.date)
        return DateTime.Compare (x.date, y.date);
    else if (x.counter != y.counter)
        return (int)(x.counter - y.counter);
    else
        return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
57
4
Gpt3D_Clone57_4.cs 1 12
Gpt3D_Clone57_4.cs 13 26
----------------------------------------

public int Compare (foo x, foo y) {
    if (x == null || y == null)
        return int.MinValue;
    if (x.name != y.name)
        return StringComparer.CurrentCulture.Compare (x.name, y.name);
    else if (x.date != y.date)
        return x.date.CompareTo (y.date);
    else if (x.counter != y.counter)
        return x.counter.CompareTo (y.counter);
    else
        return 0;
}
----------------------------------------

 public int Compare (foo x, foo y) {
    if (x == null || y == null)
        return int.MinValue;
    if (x.name != y.name)
        return string.Compare(x.name, y.name, ignoreCase: true);
    else if (x.date != y.date)
        return DateTime.Compare (x.date, y.date);
    else if (x.counter != y.counter)
        returnx.counter.CompareTo (y.counter);
    else
        return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
580
3
Gpt3D_Clone580_3.cs 1 10
Gpt3D_Clone580_3.cs 11 25
----------------------------------------

static void Main (string [] args) {
    String a = "Hello ";
    String b = " World! ";
    int it = 20000;
    char [] result = new char [a.Length + it * b.Length];
    a.ToCharArray ().CopyTo (result, 0);
    for (int i = 0; i < it; i ++)
        b.ToCharArray ().CopyTo (result, a.Length + i * b.Length);
    Console.WriteLine (result);
}
----------------------------------------

 static void Main (string [] args) {
    String a = "Hello ";
    String b = " World! ";
    int it = 20000;
    char[] result = new char[a.Length + it * b.Length];
    Buffer.BlockCopy(a.ToCharArray(), 0, result, 0, a.Length * 2);
    int offset = a.Length;
    for (int i = 0; i < it; i++) {
        Buffer.BlockCopy(b.ToCharArray(), 0, result, offset * 2, b.Length * 2);
        offset += b.Length;
    }
    Console.WriteLine(result);
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
580
5
Gpt3D_Clone580_5.cs 1 10
Gpt3D_Clone580_5.cs 11 25
----------------------------------------

static void Main (string [] args) {
    String a = "Hello ";
    String b = " World! ";
    int it = 20000;
    char [] result = new char [a.Length + it * b.Length];
    a.ToCharArray ().CopyTo (result, 0);
    for (int i = 0; i < it; i ++)
        b.ToCharArray ().CopyTo (result, a.Length + i * b.Length);
    Console.WriteLine (result);
}
----------------------------------------

 static void Main (string [] args) {
    String a = "Hello ";
    String b = " World! ";
    int it = 20000;
    char[] result = new char[a.Length + it * b.Length];
    Array.Copy(a.ToCharArray(), result, a.Length);
    int offset = a.Length;
    for (int i = 0; i < it; i++) {
        Array.Copy(b.ToCharArray(), 0, result, offset, b.Length);
        offset += b.Length;
    }
    Console.WriteLine(result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
580
7
Gpt3D_Clone580_7.cs 1 10
Gpt3D_Clone580_7.cs 11 21
----------------------------------------

static void Main (string [] args) {
    String a = "Hello ";
    String b = " World! ";
    int it = 20000;
    char [] result = new char [a.Length + it * b.Length];
    a.ToCharArray ().CopyTo (result, 0);
    for (int i = 0; i < it; i ++)
        b.ToCharArray ().CopyTo (result, a.Length + i * b.Length);
    Console.WriteLine (result);
}
----------------------------------------

 static void Main (string [] args) {
    String a = "Hello ";
    String b = " World! ";
    int it = 20000;
    StringBuilder result = new StringBuilder();
    for (int i = 0; i < it; i ++)
        result.Append(a).Append(b);
    Console.WriteLine(result.ToString());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
580
8
Gpt3D_Clone580_8.cs 1 10
Gpt3D_Clone580_8.cs 11 21
----------------------------------------

static void Main (string [] args) {
    String a = "Hello ";
    String b = " World! ";
    int it = 20000;
    char [] result = new char [a.Length + it * b.Length];
    a.ToCharArray ().CopyTo (result, 0);
    for (int i = 0; i < it; i ++)
        b.ToCharArray ().CopyTo (result, a.Length + i * b.Length);
    Console.WriteLine (result);
}
----------------------------------------

 static void Main (string [] args) {
    String a = "Hello ";
    String b = " World! ";
    int it = 20000;
    StringBuilder result = new StringBuilder(a);
    for (int i = 0; i < it; i ++)
        result.Append(b);
    Console.WriteLine(result.ToString());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
580
9
Gpt3D_Clone580_9.cs 1 10
Gpt3D_Clone580_9.cs 11 21
----------------------------------------

static void Main (string [] args) {
    String a = "Hello ";
    String b = " World! ";
    int it = 20000;
    char [] result = new char [a.Length + it * b.Length];
    a.ToCharArray ().CopyTo (result, 0);
    for (int i = 0; i < it; i ++)
        b.ToCharArray ().CopyTo (result, a.Length + i * b.Length);
    Console.WriteLine (result);
}
----------------------------------------

 static void Main (string [] args) {
    String a = "Hello ";
    String b = " World! ";
    int it = 20000;
    StringBuilder result = new StringBuilder(a);
    for (int i = 0; i < it; i ++)
        result.AppendFormat("{0}", b);
    Console.WriteLine(result.ToString());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
581
7
Gpt3D_Clone581_7.cs 1 13
Gpt3D_Clone581_7.cs 14 28
----------------------------------------

public static float Noise (float x, float y, float z, int octaves, ref float min, ref float max) {
    var perlin = 0f;
    var octave = 1;
    for (var i = 0; i < octaves; i ++) {
        var noise = Noise (x * octave, y * octave, z * octave);
        perlin += noise / octave;
        octave *= 2;
    }
    perlin = Math.Abs ((float) Math.Pow (perlin, 2));
    max = Math.Max (perlin, max);
    min = Math.Min (perlin, min);
    return perlin;
}
----------------------------------------

 public static float Noise(float x, float y, float z, int octaves, ref float min, ref float max) {
    float perlin = 0f;
    int octave = 1;
    for (int i = 0; i < octaves; i++) {
        float noise = Noise(x * octave, y * octave, z * octave);
        perlin += noise / octave;
        octave *= 2;
    }
    perlin = (float) Math.Abs(Math.Exp((double)perlin));
    max = Math.Max (perlin, max);
    min = Math.Min (perlin, min);
    return perlin;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
581
8
Gpt3D_Clone581_8.cs 1 13
Gpt3D_Clone581_8.cs 14 28
----------------------------------------

public static float Noise (float x, float y, float z, int octaves, ref float min, ref float max) {
    var perlin = 0f;
    var octave = 1;
    for (var i = 0; i < octaves; i ++) {
        var noise = Noise (x * octave, y * octave, z * octave);
        perlin += noise / octave;
        octave *= 2;
    }
    perlin = Math.Abs ((float) Math.Pow (perlin, 2));
    max = Math.Max (perlin, max);
    min = Math.Min (perlin, min);
    return perlin;
}
----------------------------------------

 public static float Noise(float x, float y, float z, int octaves, ref float min, ref float max) {
    float perlin = 0f;
    int octave = 1;
    for (int i = 0; i < octaves; i++) {
        float noise = Noise(x * octave, y * octave, z * octave);
        perlin += noise / octave;
        octave *= 2;
    }
    perlin = (float) Math.Log(Math.Abs(perlin));
    max = Math.Max (perlin, max);
    min = Math.Min (perlin, min);
    return perlin;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
581
9
Gpt3D_Clone581_9.cs 1 13
Gpt3D_Clone581_9.cs 14 28
----------------------------------------

public static float Noise (float x, float y, float z, int octaves, ref float min, ref float max) {
    var perlin = 0f;
    var octave = 1;
    for (var i = 0; i < octaves; i ++) {
        var noise = Noise (x * octave, y * octave, z * octave);
        perlin += noise / octave;
        octave *= 2;
    }
    perlin = Math.Abs ((float) Math.Pow (perlin, 2));
    max = Math.Max (perlin, max);
    min = Math.Min (perlin, min);
    return perlin;
}
----------------------------------------

 public static float Noise(float x, float y, float z, int octaves, ref float min, ref float max) {
    float perlin = 0f;
    int octave = 1;
    for (int i = 0; i < octaves; i++) {
        float noise = Noise(x * octave, y * octave, z * octave);
        perlin += noise / octave;
        octave *= 2;
    }
    perlin = (float) Math.Pow(Math.Abs(perlin), 0.5);
    max = Math.Max (perlin, max);
    min = Math.Min (perlin, min);
    return perlin;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
584
3
Gpt3D_Clone584_3.cs 1 12
Gpt3D_Clone584_3.cs 13 39
----------------------------------------

public static List < string > LoadCitiesByState (string state) {
    List < string > cities = new List < string > ();
    try {
        DataTable dt = SharedDataAccess.GetCities (state);
    }
    catch {
    }
    foreach (DataRow row in dt.Rows) {
        cities.Add (row [0].ToString ());
    }
    return cities;
}
----------------------------------------

  public static List < string > LoadCitiesByState (string state) {
    List < string > cities = new List<string>();
    using (SqlConnection conn = new SqlConnection("connection string"))
    {
        try
        {
            conn.Open();
            DataTable dt = SharedDataAccess.GetCities (state);
            
            foreach (DataRow row in dt.Rows)
            {
                cities.Add(row[0].ToString());
            }
        }
        finally
        {
            if (conn != null)
            {
                conn.Close();
            }
        }
    }
    return cities;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
584
4
Gpt3D_Clone584_4.cs 1 12
Gpt3D_Clone584_4.cs 13 32
----------------------------------------

public static List < string > LoadCitiesByState (string state) {
    List < string > cities = new List < string > ();
    try {
        DataTable dt = SharedDataAccess.GetCities (state);
    }
    catch {
    }
    foreach (DataRow row in dt.Rows) {
        cities.Add (row [0].ToString ());
    }
    return cities;
}
----------------------------------------

 public static List<string> LoadCitiesByState(string state)
{
    List<string> cities = new List<string>();
    DataTable dt;
    try
    {
        dt = SharedDataAccess.GetCities(state);
        foreach (DataRow row in dt.Rows)
        {
            cities.Add(row[0].ToString());
        }
    }
    catch (Exception e)
    {
        //log or handle exception
    }
    return cities;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
584
5
Gpt3D_Clone584_5.cs 1 12
Gpt3D_Clone584_5.cs 13 33
----------------------------------------

public static List < string > LoadCitiesByState (string state) {
    List < string > cities = new List < string > ();
    try {
        DataTable dt = SharedDataAccess.GetCities (state);
    }
    catch {
    }
    foreach (DataRow row in dt.Rows) {
        cities.Add (row [0].ToString ());
    }
    return cities;
}
----------------------------------------

 public static List<string> LoadCitiesByState(string state)
{
    List<string> cities = new List<string>();
    DataTable dt = null;
    try
    {
        dt = SharedDataAccess.GetCities(state);
        foreach (DataRow row in dt.Rows)
        {
            cities.Add(row[0].ToString());
        }
    }
    catch (Exception ex) when (ex is SqlException || ex is ArgumentRuntimeException)
    {
        //log or handle exception
    }
    return cities;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
584
6
Gpt3D_Clone584_6.cs 1 12
Gpt3D_Clone584_6.cs 13 24
----------------------------------------

public static List < string > LoadCitiesByState (string state) {
    List < string > cities = new List < string > ();
    try {
        DataTable dt = SharedDataAccess.GetCities (state);
    }
    catch {
    }
    foreach (DataRow row in dt.Rows) {
        cities.Add (row [0].ToString ());
    }
    return cities;
}
----------------------------------------

  public static List < string > LoadCitiesByState (string state) {
    List < string > cities = new List<string>();
    DataTable dt = new DataTable();
    dt = SharedDataAccess.GetCities (state);
    foreach (DataRow row in dt.Rows)
    {
        cities.Add(row[0].ToString());
    }
    return cities;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
584
7
Gpt3D_Clone584_7.cs 1 12
Gpt3D_Clone584_7.cs 13 24
----------------------------------------

public static List < string > LoadCitiesByState (string state) {
    List < string > cities = new List < string > ();
    try {
        DataTable dt = SharedDataAccess.GetCities (state);
    }
    catch {
    }
    foreach (DataRow row in dt.Rows) {
        cities.Add (row [0].ToString ());
    }
    return cities;
}
----------------------------------------

  public static List < string > LoadCitiesByState (string state) {
    List < string > cities = new List<string>();
    DataTable dt = SharedDataAccess.GetCities (state);
    foreach (DataRow row in dt.Rows)
    {
        cities.Add(row[0].ToString());
    }
    return cities;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
585
0
Gpt3D_Clone585_0.cs 1 13
Gpt3D_Clone585_0.cs 14 28
----------------------------------------

public bool Equals (int [] x, int [] y) {
    if (Object.ReferenceEquals (x, y))
        return true;
    if (Object.ReferenceEquals (x, null) || Object.ReferenceEquals (y, null))
        return false;
    if (x.Length != y.Length)
        return false;
    for (int i = 0; i < x.Length; i ++) {
        if (x [i] != y [i])
            return false;
    }
    return true;
}
----------------------------------------

 public bool Equals (int [] x, int [] y) {
    if (x == y)
        return true;
    if (x == null || y == null)
        return false;
    if (x.Length != y.Length)
        return false;
    for (int i = 0; i < x.Length; i ++) {
        if (!x[i].Equals(y[i]))
            return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
585
1
Gpt3D_Clone585_1.cs 1 13
Gpt3D_Clone585_1.cs 14 28
----------------------------------------

public bool Equals (int [] x, int [] y) {
    if (Object.ReferenceEquals (x, y))
        return true;
    if (Object.ReferenceEquals (x, null) || Object.ReferenceEquals (y, null))
        return false;
    if (x.Length != y.Length)
        return false;
    for (int i = 0; i < x.Length; i ++) {
        if (x [i] != y [i])
            return false;
    }
    return true;
}
----------------------------------------

 public bool Equals (int [] x, int [] y) {
    if (object.ReferenceEquals(x, y))
        return true;
    if (x == null || y == null)
        return false;
    if (x.GetLength(0) != y.GetLength(0))
        return false;
    for (int i = 0; i < x.GetLength(0); i++) {
        if (x[i] != y[i])
            return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
58
0
Gpt3D_Clone58_0.cs 1 20
Gpt3D_Clone58_0.cs 21 50
----------------------------------------

public static int CountOccurrences (string original, string substring) {
    if (string.IsNullOrEmpty (substring))
        return 0;
    if (substring.Length == 1)
        return CountOccurrences (original, substring [0]);
    if (string.IsNullOrEmpty (original) || substring.Length > original.Length)
        return 0;
    int substringCount = 0;
    for (int charIndex = 0; charIndex < original.Length; charIndex ++) {
        for (int subCharIndex = 0, secondaryCharIndex = charIndex; subCharIndex < substring.Length && secondaryCharIndex < original.Length; subCharIndex ++, secondaryCharIndex ++) {
            if (substring [subCharIndex] != original [secondaryCharIndex])
                goto continueOuter;
        }
        if (charIndex + substring.Length > original.Length)
            break;
        charIndex += substring.Length - 1;
        substringCount ++;
        continueOuter :;}
    return substringCount;
}
----------------------------------------

 public static int CountOccurrences(string original, string substring) {
    if (string.IsNullOrEmpty(substring))
        return 0;
    if (substring.Length == 1)
        return CountOccurrences(original, substring[0]);
    if (string.IsNullOrEmpty(original) || substring.Length > original.Length)
        return 0;
    int substringCount = 0, startIndex = 0;
    while (startIndex < (original.Length - substring.Length + 1))
    {
        int j = 0, k = startIndex; 
        while (j < substring.Length && k < original.Length)
        {
            if (original[k] != substring[j])
                break;
            j++;
            k++;
        }
        if (j == substring.Length)
        {
            substringCount++;
            startIndex += substring.Length;
        }
        else
            startIndex++;
    }
    return substringCount;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
58
1
Gpt3D_Clone58_1.cs 1 20
Gpt3D_Clone58_1.cs 21 49
----------------------------------------

public static int CountOccurrences (string original, string substring) {
    if (string.IsNullOrEmpty (substring))
        return 0;
    if (substring.Length == 1)
        return CountOccurrences (original, substring [0]);
    if (string.IsNullOrEmpty (original) || substring.Length > original.Length)
        return 0;
    int substringCount = 0;
    for (int charIndex = 0; charIndex < original.Length; charIndex ++) {
        for (int subCharIndex = 0, secondaryCharIndex = charIndex; subCharIndex < substring.Length && secondaryCharIndex < original.Length; subCharIndex ++, secondaryCharIndex ++) {
            if (substring [subCharIndex] != original [secondaryCharIndex])
                goto continueOuter;
        }
        if (charIndex + substring.Length > original.Length)
            break;
        charIndex += substring.Length - 1;
        substringCount ++;
        continueOuter :;}
    return substringCount;
}
----------------------------------------

 public static int CountOccurrences(string original, string substring) {
    if (string.IsNullOrEmpty(substring))
        return 0;
    if (substring.Length == 1)
        return CountOccurrences(original, substring[0]);
    if (string.IsNullOrEmpty(original) || substring.Length > original.Length)
        return 0;
    int substringCount = 0, startIndex = 0;
    while (startIndex < (original.Length - substring.Length + 1))
    {
        int j = 0; 
        while (j < substring.Length)
        {
            if (original[startIndex + j] != substring[j])
                break;
            j++;
        }   
        if (j == substring.Length)
        {
            substringCount++;
            startIndex += j;
        }
        else
            startIndex++;
    }
    return substringCount;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
58
2
Gpt3D_Clone58_2.cs 1 20
Gpt3D_Clone58_2.cs 21 49
----------------------------------------

public static int CountOccurrences (string original, string substring) {
    if (string.IsNullOrEmpty (substring))
        return 0;
    if (substring.Length == 1)
        return CountOccurrences (original, substring [0]);
    if (string.IsNullOrEmpty (original) || substring.Length > original.Length)
        return 0;
    int substringCount = 0;
    for (int charIndex = 0; charIndex < original.Length; charIndex ++) {
        for (int subCharIndex = 0, secondaryCharIndex = charIndex; subCharIndex < substring.Length && secondaryCharIndex < original.Length; subCharIndex ++, secondaryCharIndex ++) {
            if (substring [subCharIndex] != original [secondaryCharIndex])
                goto continueOuter;
        }
        if (charIndex + substring.Length > original.Length)
            break;
        charIndex += substring.Length - 1;
        substringCount ++;
        continueOuter :;}
    return substringCount;
}
----------------------------------------

 public static int CountOccurrences(string original, string substring) {
    if (string.IsNullOrEmpty(substring))
        return 0;
    if (substring.Length == 1)
        return CountOccurrences(original, substring[0]);
    if (string.IsNullOrEmpty(original) || substring.Length > original.Length)
        return 0;
    int substringCount = 0, j = 0;
    for (int i = 0; i < original.Length; i++)
    {
        if (original[i] == substring[j])
        {
            if (j == substring.Length-1)
            {
                substringCount++;
                j = 0;
            }
            else
                j++;
        }
        else
        {
            j = 0;
        }
    }
    return substringCount;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
58
3
Gpt3D_Clone58_3.cs 1 20
Gpt3D_Clone58_3.cs 21 47
----------------------------------------

public static int CountOccurrences (string original, string substring) {
    if (string.IsNullOrEmpty (substring))
        return 0;
    if (substring.Length == 1)
        return CountOccurrences (original, substring [0]);
    if (string.IsNullOrEmpty (original) || substring.Length > original.Length)
        return 0;
    int substringCount = 0;
    for (int charIndex = 0; charIndex < original.Length; charIndex ++) {
        for (int subCharIndex = 0, secondaryCharIndex = charIndex; subCharIndex < substring.Length && secondaryCharIndex < original.Length; subCharIndex ++, secondaryCharIndex ++) {
            if (substring [subCharIndex] != original [secondaryCharIndex])
                goto continueOuter;
        }
        if (charIndex + substring.Length > original.Length)
            break;
        charIndex += substring.Length - 1;
        substringCount ++;
        continueOuter :;}
    return substringCount;
}
----------------------------------------

 public static int CountOccurrences(string original, string substring) {
    if (string.IsNullOrEmpty(substring))
        return 0;
    if (substring.Length == 1)
        return CountOccurrences(original, substring[0]);
    if (string.IsNullOrEmpty(original) || substring.Length > original.Length)
        return 0;
    int substringCount = 0;
    for (int i = 0; i < original.Length; i++)
    {
        int j = 0;
        int k = i;
        while (j < substring.Length && k < original.Length && original[k] == substring[j])
        {
            j++;
            k++;
        }
        if (j == substring.Length)
        {
            substringCount++;
            i = k - 1;
        }
    }
    return substringCount;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
58
4
Gpt3D_Clone58_4.cs 1 20
Gpt3D_Clone58_4.cs 21 46
----------------------------------------

public static int CountOccurrences (string original, string substring) {
    if (string.IsNullOrEmpty (substring))
        return 0;
    if (substring.Length == 1)
        return CountOccurrences (original, substring [0]);
    if (string.IsNullOrEmpty (original) || substring.Length > original.Length)
        return 0;
    int substringCount = 0;
    for (int charIndex = 0; charIndex < original.Length; charIndex ++) {
        for (int subCharIndex = 0, secondaryCharIndex = charIndex; subCharIndex < substring.Length && secondaryCharIndex < original.Length; subCharIndex ++, secondaryCharIndex ++) {
            if (substring [subCharIndex] != original [secondaryCharIndex])
                goto continueOuter;
        }
        if (charIndex + substring.Length > original.Length)
            break;
        charIndex += substring.Length - 1;
        substringCount ++;
        continueOuter :;}
    return substringCount;
}
----------------------------------------

 public static int CountOccurrences(string original, string substring) {
    if (string.IsNullOrEmpty(substring))
        return 0;
    if (substring.Length == 1)
        return CountOccurrences(original, substring[0]);
    if (string.IsNullOrEmpty(original) || substring.Length > original.Length)
        return 0;
    int substringCount = 0;
    for (int i = 0; i <= original.Length - substring.Length; i++)
    {
        int j = 0, k = i;
        while (j < substring.Length && original[k] == substring[j])
        {
            j++;
            k++;
        }
        if (j == substring.Length)
        {
            substringCount++;
            i = k - 1;
        }
    }
    return substringCount;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
58
5
Gpt3D_Clone58_5.cs 1 20
Gpt3D_Clone58_5.cs 21 48
----------------------------------------

public static int CountOccurrences (string original, string substring) {
    if (string.IsNullOrEmpty (substring))
        return 0;
    if (substring.Length == 1)
        return CountOccurrences (original, substring [0]);
    if (string.IsNullOrEmpty (original) || substring.Length > original.Length)
        return 0;
    int substringCount = 0;
    for (int charIndex = 0; charIndex < original.Length; charIndex ++) {
        for (int subCharIndex = 0, secondaryCharIndex = charIndex; subCharIndex < substring.Length && secondaryCharIndex < original.Length; subCharIndex ++, secondaryCharIndex ++) {
            if (substring [subCharIndex] != original [secondaryCharIndex])
                goto continueOuter;
        }
        if (charIndex + substring.Length > original.Length)
            break;
        charIndex += substring.Length - 1;
        substringCount ++;
        continueOuter :;}
    return substringCount;
}
----------------------------------------

 public static int CountOccurrences(string original, string substring) {
    if (string.IsNullOrEmpty(substring))
        return 0;
    if (substring.Length == 1)
        return CountOccurrences(original, substring[0]);
    if (string.IsNullOrEmpty(original) || substring.Length > original.Length)
        return 0;
    int substringCount = 0;
    for (int i = 0; i <= original.Length - substring.Length; i++)
    {
        int j, k;
 
        for (j = 0, k = i; j < substring.Length; j++, k++)
        {
            if (original[k] != substring[j])
                break;
        }
 
        if (j == substring.Length)
        {
            substringCount++;
            i = k - 1;
        }
    }
    return substringCount;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
58
6
Gpt3D_Clone58_6.cs 1 20
Gpt3D_Clone58_6.cs 21 46
----------------------------------------

public static int CountOccurrences (string original, string substring) {
    if (string.IsNullOrEmpty (substring))
        return 0;
    if (substring.Length == 1)
        return CountOccurrences (original, substring [0]);
    if (string.IsNullOrEmpty (original) || substring.Length > original.Length)
        return 0;
    int substringCount = 0;
    for (int charIndex = 0; charIndex < original.Length; charIndex ++) {
        for (int subCharIndex = 0, secondaryCharIndex = charIndex; subCharIndex < substring.Length && secondaryCharIndex < original.Length; subCharIndex ++, secondaryCharIndex ++) {
            if (substring [subCharIndex] != original [secondaryCharIndex])
                goto continueOuter;
        }
        if (charIndex + substring.Length > original.Length)
            break;
        charIndex += substring.Length - 1;
        substringCount ++;
        continueOuter :;}
    return substringCount;
}
----------------------------------------

 public static int CountOccurrences(string original, string substring) {
    if (string.IsNullOrEmpty(substring))
        return 0;
    if (substring.Length == 1)
        return CountOccurrences(original, substring[0]);
    if (string.IsNullOrEmpty(original) || substring.Length > original.Length)
        return 0;
    int substringCount = 0, j = 0;
    for (int i = 0; i < original.Length; i++)
    {
        if (original[i] == substring[j])
        {
            j++;
            if (j == substring.Length)
            {
                substringCount++;
                j = 0;
            }
        }
        else
            j = 0;
    }
    return substringCount;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
58
7
Gpt3D_Clone58_7.cs 1 20
Gpt3D_Clone58_7.cs 21 45
----------------------------------------

public static int CountOccurrences (string original, string substring) {
    if (string.IsNullOrEmpty (substring))
        return 0;
    if (substring.Length == 1)
        return CountOccurrences (original, substring [0]);
    if (string.IsNullOrEmpty (original) || substring.Length > original.Length)
        return 0;
    int substringCount = 0;
    for (int charIndex = 0; charIndex < original.Length; charIndex ++) {
        for (int subCharIndex = 0, secondaryCharIndex = charIndex; subCharIndex < substring.Length && secondaryCharIndex < original.Length; subCharIndex ++, secondaryCharIndex ++) {
            if (substring [subCharIndex] != original [secondaryCharIndex])
                goto continueOuter;
        }
        if (charIndex + substring.Length > original.Length)
            break;
        charIndex += substring.Length - 1;
        substringCount ++;
        continueOuter :;}
    return substringCount;
}
----------------------------------------

 public static int CountOccurrences(string original, string substring)
{
    if (string.IsNullOrEmpty(substring))
        return 0;
    if (substring.Length == 1)
        return CountOccurrences(original, substring[0]);
    if (string.IsNullOrEmpty(original) || substring.Length > original.Length)
        return 0;
    int substringCount = 0;
    for (int i = 0; i < original.Length; i++)
    {
        int j, k;
 
        for (j = 0, k = i; j < substring.Length && k < original.Length && original[k] == substring[j]; j++, k++);
 
        if (j == substring.Length)
        {
            substringCount++;
            i = k - 1;
        }
    }
    return substringCount;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
58
8
Gpt3D_Clone58_8.cs 1 20
Gpt3D_Clone58_8.cs 21 43
----------------------------------------

public static int CountOccurrences (string original, string substring) {
    if (string.IsNullOrEmpty (substring))
        return 0;
    if (substring.Length == 1)
        return CountOccurrences (original, substring [0]);
    if (string.IsNullOrEmpty (original) || substring.Length > original.Length)
        return 0;
    int substringCount = 0;
    for (int charIndex = 0; charIndex < original.Length; charIndex ++) {
        for (int subCharIndex = 0, secondaryCharIndex = charIndex; subCharIndex < substring.Length && secondaryCharIndex < original.Length; subCharIndex ++, secondaryCharIndex ++) {
            if (substring [subCharIndex] != original [secondaryCharIndex])
                goto continueOuter;
        }
        if (charIndex + substring.Length > original.Length)
            break;
        charIndex += substring.Length - 1;
        substringCount ++;
        continueOuter :;}
    return substringCount;
}
----------------------------------------

 public static int CountOccurrences(string original, string substring) {
    if (string.IsNullOrEmpty(substring))
        return 0;
    if (substring.Length == 1)
        return CountOccurrences(original, substring[0]);
    if (string.IsNullOrEmpty(original) || substring.Length > original.Length)
        return 0;
    int substringCount = 0;
    for (int i = 0; i <= original.Length - substring.Length; i++)
    {
        int j;
        for (j = 0; j < substring.Length && original[i + j] == substring[j]; j++);
 
        if (j == substring.Length)
        {
            substringCount++;
            i += j;
        }
    }
    return substringCount;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
598
0
Gpt3D_Clone598_0.cs 1 22
Gpt3D_Clone598_0.cs 23 48
----------------------------------------

public static void ReadFile (Object fileName) {
    try {
        using (System.IO.StreamReader file1 = new System.IO.StreamReader (fileName.ToString ()))
        {
            int x = 0;
            string line = file1.ReadLine ();
            if (int.TryParse (line, out x)) {
                lock (lockObject)
                {
                    if (! Sum.HasValue) {
                        Sum = x;
                    } else {
                        Sum = Sum + x;
                    }
                }} else {
                Console.WriteLine ("Invalid Integer in File: " + fileName.ToString () + "\r\nLine from File: " + line);
            }
        }}
    catch (Exception ex) {
        Console.WriteLine ("Exception Reading File: " + fileName.ToString () + "\r\nException: " + ex.Message);
    }
}
----------------------------------------

 public static void ReadFile(Object fileName){ 
        try{ 
            using(System.IO.StreamReader file1 = new System.IO.StreamReader(fileName.ToString())) 
            { 
                int x; 
                string line = file1.ReadLine(); 
                
                if(int.TryParse(line, out x)) 
                { 
                    lock(lockObject){
                        if (Sum.HasValue == false) 
                            Sum = x; 
                        else 
                            Sum += x; 
                    }
                } 
                else 
                    Console.WriteLine("Invalid Integer in File: "+ fileName.ToString()+ "\r\nLine from File: "+ line); 
            } 
        } 
        catch(Exception ex){ 
            Console.WriteLine("Exception Reading File: "+ fileName.ToString()+ "\r\nException: "+ ex.Message); 
        } 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
598
1
Gpt3D_Clone598_1.cs 1 22
Gpt3D_Clone598_1.cs 23 48
----------------------------------------

public static void ReadFile (Object fileName) {
    try {
        using (System.IO.StreamReader file1 = new System.IO.StreamReader (fileName.ToString ()))
        {
            int x = 0;
            string line = file1.ReadLine ();
            if (int.TryParse (line, out x)) {
                lock (lockObject)
                {
                    if (! Sum.HasValue) {
                        Sum = x;
                    } else {
                        Sum = Sum + x;
                    }
                }} else {
                Console.WriteLine ("Invalid Integer in File: " + fileName.ToString () + "\r\nLine from File: " + line);
            }
        }}
    catch (Exception ex) {
        Console.WriteLine ("Exception Reading File: " + fileName.ToString () + "\r\nException: " + ex.Message);
    }
}
----------------------------------------

 public static void ReadFile(Object fileName){ 
        try{ 
            using(System.IO.StreamReader file1 = new System.IO.StreamReader(fileName.ToString())) 
            { 
                int x; 
                string line = file1.ReadLine(); 
                
                if(int.TryParse(line, out x)) 
                { 
                    lock(lockObject){
                        if (Sum.HasValue == false) 
                            Sum = x; 
                        else 
                            Sum += x; 
                    }
                } 
                else 
                    Console.WriteLine("Invalid Integer in File: "+ fileName.ToString()+ "\r\nLine from File: "+ line); 
            } 
        } 
        catch(Exception ex){ 
            Console.WriteLine("Exception Reading File: "+ fileName.ToString()+ "\r\nException: "+ ex.Message); 
        } 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
598
2
Gpt3D_Clone598_2.cs 1 22
Gpt3D_Clone598_2.cs 23 48
----------------------------------------

public static void ReadFile (Object fileName) {
    try {
        using (System.IO.StreamReader file1 = new System.IO.StreamReader (fileName.ToString ()))
        {
            int x = 0;
            string line = file1.ReadLine ();
            if (int.TryParse (line, out x)) {
                lock (lockObject)
                {
                    if (! Sum.HasValue) {
                        Sum = x;
                    } else {
                        Sum = Sum + x;
                    }
                }} else {
                Console.WriteLine ("Invalid Integer in File: " + fileName.ToString () + "\r\nLine from File: " + line);
            }
        }}
    catch (Exception ex) {
        Console.WriteLine ("Exception Reading File: " + fileName.ToString () + "\r\nException: " + ex.Message);
    }
}
----------------------------------------

 public static void ReadFile(Object fileName){ 
        try{ 
            using(System.IO.StreamReader file1 = new System.IO.StreamReader(fileName.ToString())) 
            { 
                int x; 
                string line = file1.ReadLine(); 
                
                if(int.TryParse(line, out x)) 
                { 
                    lock(lockObject){
                        if (Sum == null) 
                            Sum = x; 
                        else 
                            Sum += x; 
                    }
                } 
                else 
                    Console.WriteLine("Invalid Integer in File: "+ fileName.ToString()+ "\r\nLine from File: "+ line); 
            } 
        } 
        catch(Exception ex){ 
            Console.WriteLine("Exception Reading File: "+ fileName.ToString()+ "\r\nException: "+ ex.Message); 
        } 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
598
3
Gpt3D_Clone598_3.cs 1 22
Gpt3D_Clone598_3.cs 23 45
----------------------------------------

public static void ReadFile (Object fileName) {
    try {
        using (System.IO.StreamReader file1 = new System.IO.StreamReader (fileName.ToString ()))
        {
            int x = 0;
            string line = file1.ReadLine ();
            if (int.TryParse (line, out x)) {
                lock (lockObject)
                {
                    if (! Sum.HasValue) {
                        Sum = x;
                    } else {
                        Sum = Sum + x;
                    }
                }} else {
                Console.WriteLine ("Invalid Integer in File: " + fileName.ToString () + "\r\nLine from File: " + line);
            }
        }}
    catch (Exception ex) {
        Console.WriteLine ("Exception Reading File: " + fileName.ToString () + "\r\nException: " + ex.Message);
    }
}
----------------------------------------

 public static void ReadFile(Object fileName){ 
        try{ 
            using(System.IO.StreamReader file1 = new System.IO.StreamReader(fileName.ToString())) 
            { 
                int x; 
                string line = file1.ReadLine(); 
                if (int.TryParse(line, out x)){
                    lock(lockObject) 
                        if (!Sum.HasValue) 
                                Sum = x; 
                    else 
                            Sum = Sum + x; 
                } 
            else 
                    Console.WriteLine("Invalid Integer in File: "+ fileName.ToString()+ "\r\nLine from File: "+ line); 
            } 
        } 
        catch(Exception ex){ 
            Console.WriteLine("Exception Reading File: "+ fileName.ToString()+ "\r\nException: "+ ex.Message); 
        } 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
598
4
Gpt3D_Clone598_4.cs 1 22
Gpt3D_Clone598_4.cs 23 48
----------------------------------------

public static void ReadFile (Object fileName) {
    try {
        using (System.IO.StreamReader file1 = new System.IO.StreamReader (fileName.ToString ()))
        {
            int x = 0;
            string line = file1.ReadLine ();
            if (int.TryParse (line, out x)) {
                lock (lockObject)
                {
                    if (! Sum.HasValue) {
                        Sum = x;
                    } else {
                        Sum = Sum + x;
                    }
                }} else {
                Console.WriteLine ("Invalid Integer in File: " + fileName.ToString () + "\r\nLine from File: " + line);
            }
        }}
    catch (Exception ex) {
        Console.WriteLine ("Exception Reading File: " + fileName.ToString () + "\r\nException: " + ex.Message);
    }
}
----------------------------------------

	public static void ReadFile(Object fileName){ 
        try{ 
            using(System.IO.StreamReader file1 = new System.IO.StreamReader(fileName.ToString())) 
            { 
                int x; 
                string line = file1.ReadLine(); 
                
                if(int.TryParse(line, out x)) 
                { 
                    lock(lockObject) 
                        if (Sum == null) 
                            Sum = x; 
                        else {
                            Sum = Sum + x; 
                        }
                } 
                else 
                    Console.WriteLine("Invalid Integer in File: "+ fileName.ToString()+ "\r\nLine from File: "+ line); 
            } 
        } 
        catch(Exception ex){ 
            Console.WriteLine("Exception Reading File: "+ fileName.ToString()+ "\r\nException: "+ ex.Message); 
        } 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
598
5
Gpt3D_Clone598_5.cs 1 22
Gpt3D_Clone598_5.cs 23 47
----------------------------------------

public static void ReadFile (Object fileName) {
    try {
        using (System.IO.StreamReader file1 = new System.IO.StreamReader (fileName.ToString ()))
        {
            int x = 0;
            string line = file1.ReadLine ();
            if (int.TryParse (line, out x)) {
                lock (lockObject)
                {
                    if (! Sum.HasValue) {
                        Sum = x;
                    } else {
                        Sum = Sum + x;
                    }
                }} else {
                Console.WriteLine ("Invalid Integer in File: " + fileName.ToString () + "\r\nLine from File: " + line);
            }
        }}
    catch (Exception ex) {
        Console.WriteLine ("Exception Reading File: " + fileName.ToString () + "\r\nException: " + ex.Message);
    }
}
----------------------------------------

 public static void ReadFile(Object fileName){ 
        try{ 
            using(System.IO.StreamReader file1 = new System.IO.StreamReader(fileName.ToString())) 
            { 
                int x; 
                string line = file1.ReadLine(); 
                
                if(int.TryParse(line, out x)) 
                { 
                    lock(lockObject)
                        if (!Sum.HasValue) 
                            Sum = x; 
                        else 
                            Sum += x; 
                } 
                else 
                    Console.WriteLine("Invalid Integer in File: "+ fileName.ToString()+ "\r\nLine from File: "+ line); 
            } 
        } 
        catch(Exception ex){ 
            Console.WriteLine("Exception Reading File: "+ fileName.ToString()+ "\r\nException: "+ ex.Message); 
        } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
598
6
Gpt3D_Clone598_6.cs 1 22
Gpt3D_Clone598_6.cs 23 47
----------------------------------------

public static void ReadFile (Object fileName) {
    try {
        using (System.IO.StreamReader file1 = new System.IO.StreamReader (fileName.ToString ()))
        {
            int x = 0;
            string line = file1.ReadLine ();
            if (int.TryParse (line, out x)) {
                lock (lockObject)
                {
                    if (! Sum.HasValue) {
                        Sum = x;
                    } else {
                        Sum = Sum + x;
                    }
                }} else {
                Console.WriteLine ("Invalid Integer in File: " + fileName.ToString () + "\r\nLine from File: " + line);
            }
        }}
    catch (Exception ex) {
        Console.WriteLine ("Exception Reading File: " + fileName.ToString () + "\r\nException: " + ex.Message);
    }
}
----------------------------------------

 public static void ReadFile(Object fileName){ 
        try{ 
            using(System.IO.StreamReader file1 = new System.IO.StreamReader(fileName.ToString())) 
            { 
                int x; 
                string line = file1.ReadLine(); 
                
                if(int.TryParse(line, out x)) 
                { 
                    lock(lockObject) 
                        if (Sum.Equals(null)) 
                            Sum = x; 
                        else 
                            Sum = Sum + x; 
                } 
                else 
                    Console.WriteLine("Invalid Integer in File: "+ fileName.ToString()+ "\r\nLine from File: "+ line); 
            } 
        } 
        catch(Exception ex){ 
            Console.WriteLine("Exception Reading File: "+ fileName.ToString()+ "\r\nException: "+ ex.Message); 
        } 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
598
7
Gpt3D_Clone598_7.cs 1 22
Gpt3D_Clone598_7.cs 23 47
----------------------------------------

public static void ReadFile (Object fileName) {
    try {
        using (System.IO.StreamReader file1 = new System.IO.StreamReader (fileName.ToString ()))
        {
            int x = 0;
            string line = file1.ReadLine ();
            if (int.TryParse (line, out x)) {
                lock (lockObject)
                {
                    if (! Sum.HasValue) {
                        Sum = x;
                    } else {
                        Sum = Sum + x;
                    }
                }} else {
                Console.WriteLine ("Invalid Integer in File: " + fileName.ToString () + "\r\nLine from File: " + line);
            }
        }}
    catch (Exception ex) {
        Console.WriteLine ("Exception Reading File: " + fileName.ToString () + "\r\nException: " + ex.Message);
    }
}
----------------------------------------

	public static void ReadFile(Object fileName){ 
        try{ 
            using(System.IO.StreamReader file1 = new System.IO.StreamReader(fileName.ToString())) 
            { 
                int x; 
                string line = file1.ReadLine(); 
                
                if(int.TryParse(line, out x)) 
                { 
                    lock(lockObject)
                        if (Sum == null) 
                            Sum = x; 
                        else 
                            Sum += x; 
                } 
                else 
                    Console.WriteLine("Invalid Integer in File: "+ fileName.ToString()+ "\r\nLine from File: "+ line); 
            } 
        } 
        catch(Exception ex){ 
            Console.WriteLine("Exception Reading File: "+ fileName.ToString()+ "\r\nException: "+ ex.Message); 
        } 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
5
0
Gpt3D_Clone5_0.cs 1 12
Gpt3D_Clone5_0.cs 13 28
----------------------------------------

static void ResourceKeyChanged (DependencyObject d, DependencyPropertyChangedEventArgs e) {
    var target = d as FrameworkElement;
    var newVal = e.NewValue as Tuple < object, DependencyProperty >;
    if (target == null || newVal == null)
        return;
    var dp = newVal.Item2;
    if (newVal.Item1 == null) {
        target.SetValue (dp, dp.GetMetadata (target).DefaultValue);
        return;
    }
    target.SetResourceReference (dp, newVal.Item1);
}
----------------------------------------

 static void ResourceKeyChanged (DependencyObject d, DependencyPropertyChangedEventArgs e) {
    var target = d as FrameworkElement;
    if (target == null)
        return;
 
    var newVal = e.NewValue as Tuple<object, DependencyProperty>;
    if (newVal == null) {
        target.ClearResourceReference (e.Property);
        target.SetValue (e.Property, e.Property.GetMetadata(target).DefaultValue);
        return;
    }
    var dp = newVal.Item2;
    target.SetResourceReference (dp, newVal.Item1);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
603
3
Gpt3D_Clone603_3.cs 1 16
Gpt3D_Clone603_3.cs 17 32
----------------------------------------

private void CheckIfPalindrome (string str) {
    char [] array = str.ToCharArray ();
    int length = array.Length - 1;
    Boolean palindrome = true;
    for (int i = 0; i <= length; i ++) {
        if (array [i] != array [length]) {
            MessageBox.Show ("not");
            palindrome = false;
            break;
        } else {
            length --;
        }
    }
    if (palindrome)
        MessageBox.Show ("Palindrome");
}
----------------------------------------

 private void CheckIfPalindrome (string str) {
    char[] array = str.ToCharArray();
    int left = 0;
    int right = array.Length - 1;
    while (left < right) {
        if (array[left] != array[right]) {
            MessageBox.Show("not");
            return;
        }
        left++;
        right--;
    }
    MessageBox.Show("Palindrome");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
604
0
Gpt3D_Clone604_0.cs 1 11
Gpt3D_Clone604_0.cs 12 26
----------------------------------------

[HttpPost] public ActionResult Create () {
    string jsonPostData;
    using (var stream = Request.InputStream)
    {
        stream.Position = 0;
        using (var reader = new System.IO.StreamReader (stream))
        {
            jsonPostData = reader.ReadToEnd ();
        }} var foo = Newtonsoft.Json.JsonConvert.DeserializeObject < IDictionary < string, object > > (jsonPostData) ["foo"];
    return Json (new {success = true});
}
----------------------------------------

	[HttpPost]
public ActionResult Create(){
    string jsonString;
    using (StreamReader reader = new StreamReader(Request.InputStream))
    {
        jsonString = reader.ReadToEnd();
    }
   
    var deserializeObject = JsonConvert.DeserializeObject<dynamic>(jsonString);
    var foo = deserializeObject["foo"];
       
    return Json(new { success = true}); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
604
1
Gpt3D_Clone604_1.cs 1 11
Gpt3D_Clone604_1.cs 12 26
----------------------------------------

[HttpPost] public ActionResult Create () {
    string jsonPostData;
    using (var stream = Request.InputStream)
    {
        stream.Position = 0;
        using (var reader = new System.IO.StreamReader (stream))
        {
            jsonPostData = reader.ReadToEnd ();
        }} var foo = Newtonsoft.Json.JsonConvert.DeserializeObject < IDictionary < string, object > > (jsonPostData) ["foo"];
    return Json (new {success = true});
}
----------------------------------------

	[HttpPost]
public ActionResult Create(){
    string jsonData;
    using (StreamReader reader = new StreamReader(Request.InputStream))
    {
        jsonData = reader.ReadToEnd();
    }
   
    dynamic deserializeObject = JsonConvert.DeserializeObject(jsonData);
    var foo = deserializeObject.foo;
       
    return Json(new { success = true});
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
604
2
Gpt3D_Clone604_2.cs 1 11
Gpt3D_Clone604_2.cs 12 26
----------------------------------------

[HttpPost] public ActionResult Create () {
    string jsonPostData;
    using (var stream = Request.InputStream)
    {
        stream.Position = 0;
        using (var reader = new System.IO.StreamReader (stream))
        {
            jsonPostData = reader.ReadToEnd ();
        }} var foo = Newtonsoft.Json.JsonConvert.DeserializeObject < IDictionary < string, object > > (jsonPostData) ["foo"];
    return Json (new {success = true});
}
----------------------------------------

	[HttpPost] 
public ActionResult Create(){
    string jsonData;
    using (var streamReader = new StreamReader(Request.InputStream))
    {
        jsonData = streamReader.ReadToEnd();
    } 
   
    dynamic deserializeObject = JsonConvert.DeserializeObject<dynamic>(jsonData);
    var foo = deserializeObject.foo;
       
    return Json(new {success = true});
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
604
3
Gpt3D_Clone604_3.cs 1 11
Gpt3D_Clone604_3.cs 12 26
----------------------------------------

[HttpPost] public ActionResult Create () {
    string jsonPostData;
    using (var stream = Request.InputStream)
    {
        stream.Position = 0;
        using (var reader = new System.IO.StreamReader (stream))
        {
            jsonPostData = reader.ReadToEnd ();
        }} var foo = Newtonsoft.Json.JsonConvert.DeserializeObject < IDictionary < string, object > > (jsonPostData) ["foo"];
    return Json (new {success = true});
}
----------------------------------------

	[HttpPost] 
public ActionResult Create(){
    string jsonRequest;
    using(StreamReader reader = new StreamReader(Request.InputStream))
    {
        jsonRequest = reader.ReadToEnd();
    }
   
    dynamic deserializeObject = JsonConvert.DeserializeObject(jsonRequest);
    var foo = deserializeObject.foo;
       
    return Json (new { success = true});
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
604
4
Gpt3D_Clone604_4.cs 1 11
Gpt3D_Clone604_4.cs 12 26
----------------------------------------

[HttpPost] public ActionResult Create () {
    string jsonPostData;
    using (var stream = Request.InputStream)
    {
        stream.Position = 0;
        using (var reader = new System.IO.StreamReader (stream))
        {
            jsonPostData = reader.ReadToEnd ();
        }} var foo = Newtonsoft.Json.JsonConvert.DeserializeObject < IDictionary < string, object > > (jsonPostData) ["foo"];
    return Json (new {success = true});
}
----------------------------------------

	[HttpPost] 
public ActionResult Create(){
    string jsonData;
    using (var reader = new StreamReader(Request.InputStream))
    {
        jsonData = reader.ReadToEnd();
    }
       
    var obj = JsonConvert.DeserializeObject<Dictionary<string, string>>(jsonData);
    var foo = obj["foo"];  
   
    return Json(new {success = true});
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
604
5
Gpt3D_Clone604_5.cs 1 11
Gpt3D_Clone604_5.cs 12 26
----------------------------------------

[HttpPost] public ActionResult Create () {
    string jsonPostData;
    using (var stream = Request.InputStream)
    {
        stream.Position = 0;
        using (var reader = new System.IO.StreamReader (stream))
        {
            jsonPostData = reader.ReadToEnd ();
        }} var foo = Newtonsoft.Json.JsonConvert.DeserializeObject < IDictionary < string, object > > (jsonPostData) ["foo"];
    return Json (new {success = true});
}
----------------------------------------

	[HttpPost] 
public ActionResult Create(){
    string jsonString;
    using (StreamReader reader = new StreamReader(Request.InputStream))
    {
        jsonString = reader.ReadToEnd();
    } 
   
    var deserializeObject = JsonConvert.DeserializeObject<Dictionary<string, string>>(jsonString);
    var foo = deserializeObject.GetValueOrDefault("foo");  
   
    return Json(new{ success = true});
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
604
6
Gpt3D_Clone604_6.cs 1 11
Gpt3D_Clone604_6.cs 12 25
----------------------------------------

[HttpPost] public ActionResult Create () {
    string jsonPostData;
    using (var stream = Request.InputStream)
    {
        stream.Position = 0;
        using (var reader = new System.IO.StreamReader (stream))
        {
            jsonPostData = reader.ReadToEnd ();
        }} var foo = Newtonsoft.Json.JsonConvert.DeserializeObject < IDictionary < string, object > > (jsonPostData) ["foo"];
    return Json (new {success = true});
}
----------------------------------------

	[HttpPost] 
public ActionResult Create(){
    string jsonInput;
    using(var reader = new System.IO.StreamReader(Request.InputStream)){
        jsonInput = reader.ReadToEnd();
    }
       
    var jsonOutput = JsonConvert.DeserializeObject<Dictionary<string, dynamic>>(jsonInput);
    var foo = jsonOutput["foo"];
   
    return Json(new { success = true}); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
604
7
Gpt3D_Clone604_7.cs 1 11
Gpt3D_Clone604_7.cs 12 26
----------------------------------------

[HttpPost] public ActionResult Create () {
    string jsonPostData;
    using (var stream = Request.InputStream)
    {
        stream.Position = 0;
        using (var reader = new System.IO.StreamReader (stream))
        {
            jsonPostData = reader.ReadToEnd ();
        }} var foo = Newtonsoft.Json.JsonConvert.DeserializeObject < IDictionary < string, object > > (jsonPostData) ["foo"];
    return Json (new {success = true});
}
----------------------------------------

	[HttpPost] 
public ActionResult Create(){
    string jsonData;
    using(var sr = new StreamReader(Request.InputStream))
    {
        jsonData = sr.ReadToEnd();
    }
   
    var deserializeObject = JsonConvert.DeserializeObject<object>(jsonData);
    var foo = deserializeObject.GetPropertyValue("foo");
   
    return Json(new {success = true});
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
607
0
Gpt3D_Clone607_0.cs 1 19
Gpt3D_Clone607_0.cs 20 49
----------------------------------------

public string [] Parse (string input) {
    bool open = false;
    int openIndex = - 1;
    List < string > matches = new List < string > ();
    for (int i = 0; i < input.Length; i ++) {
        if (! open && input [i] == OpenToken) {
            open = true;
            openIndex = i;
        } else if (open && input [i] == CloseToken) {
            open = false;
            string match = input.Substring (openIndex + 1, i - openIndex - 1);
            matches.Add (match);
        } else if (open && input [i] == OpenToken && ThrowOnError)
            throw new Exception ("Open token found while match is open");
        else if (! open && input [i] == CloseToken && ThrowOnError)
            throw new Exception ("Close token found while match is not open");
    }
    return matches.ToArray ();
}
----------------------------------------

  public string[] Parse (string input) {
        bool open = false;
        int openIndex = -1;
        List<string> matches = new List<string>();
        for (int i = 0; i < input.Length; i++)
        {
            if (!open && input[i] == OpenToken)
            {
                open = true;
                openIndex = i;
            } else if (open && input[i] == CloseToken)
            {
                open = false;
                string match = input.Substring(openIndex+1, i - openIndex -1);
                matches.Add(match);
            } else if (open && input [i] == OpenToken && ThrowOnError)
            {
                Console.Error.WriteLine("Open token found while match is open");
            } else if (!open && input[i] == CloseToken && ThrowOnError)
            {
                Console.Error.WriteLine("Close token found while match is not open");
            }
        } 
        if (matches == null)
            throw new NullReferenceException();
        else       
        return matches.ToArray();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
607
1
Gpt3D_Clone607_1.cs 1 19
Gpt3D_Clone607_1.cs 20 49
----------------------------------------

public string [] Parse (string input) {
    bool open = false;
    int openIndex = - 1;
    List < string > matches = new List < string > ();
    for (int i = 0; i < input.Length; i ++) {
        if (! open && input [i] == OpenToken) {
            open = true;
            openIndex = i;
        } else if (open && input [i] == CloseToken) {
            open = false;
            string match = input.Substring (openIndex + 1, i - openIndex - 1);
            matches.Add (match);
        } else if (open && input [i] == OpenToken && ThrowOnError)
            throw new Exception ("Open token found while match is open");
        else if (! open && input [i] == CloseToken && ThrowOnError)
            throw new Exception ("Close token found while match is not open");
    }
    return matches.ToArray ();
}
----------------------------------------

  public string[] Parse (string input) {
        bool open = false;
        int openIndex = -1;
        List<string> matches = new List<string>();
        for (int i = 0; i < input.Length; i++)
        {
            if (!open && input[i] == OpenToken)
            {
                open = true;
                openIndex = i;
            } else if (open && input[i] == CloseToken)
            {
                open = false;
                string match = input.Substring(openIndex + 1, i - openIndex);
                matches.Add(match);
            } else if (open && input [i] == OpenToken && ThrowOnError)
            {
                throw new IndexOutOfRangeException("Open token found while match is open");
            } else if (!open && input[i] == CloseToken && ThrowOnError)
            {
                throw new IndexOutOfRangeException("Close token found while match is not open");
            }
        } 
        if (matches.Count == 0)
            throw new ArgumentException("No matches found");
        else       
        return matches.ToArray();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
607
2
Gpt3D_Clone607_2.cs 1 19
Gpt3D_Clone607_2.cs 20 49
----------------------------------------

public string [] Parse (string input) {
    bool open = false;
    int openIndex = - 1;
    List < string > matches = new List < string > ();
    for (int i = 0; i < input.Length; i ++) {
        if (! open && input [i] == OpenToken) {
            open = true;
            openIndex = i;
        } else if (open && input [i] == CloseToken) {
            open = false;
            string match = input.Substring (openIndex + 1, i - openIndex - 1);
            matches.Add (match);
        } else if (open && input [i] == OpenToken && ThrowOnError)
            throw new Exception ("Open token found while match is open");
        else if (! open && input [i] == CloseToken && ThrowOnError)
            throw new Exception ("Close token found while match is not open");
    }
    return matches.ToArray ();
}
----------------------------------------

  public string[] Parse (string input) {
        bool open = false;
        int openIndex = -1;
        List<string> matches = new List<string>();
        for (int i = 0; i < input.Length; i++)
        {
            if (!open && input[i] == OpenToken)
            {
                open = true;
                openIndex = i;
            } else if (open && input[i] == CloseToken)
            {
                open = false;
                string match = input.Substring(openIndex, i - openIndex);
                matches.Add(match);
            } else if (open && input [i] == OpenToken && ThrowOnError)
            {
                throw new System.Security.SecurityException("Open token found while match is open");
            } else if (!open && input[i] == CloseToken && ThrowOnError)
            {
                throw new System.Security.SecurityException("Close token found while match is not open");
            }
        } 
        if (matches.Count == 0)
            Console.WriteLine("No matches found");
        else       
        return matches.ToArray();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
607
3
Gpt3D_Clone607_3.cs 1 19
Gpt3D_Clone607_3.cs 20 49
----------------------------------------

public string [] Parse (string input) {
    bool open = false;
    int openIndex = - 1;
    List < string > matches = new List < string > ();
    for (int i = 0; i < input.Length; i ++) {
        if (! open && input [i] == OpenToken) {
            open = true;
            openIndex = i;
        } else if (open && input [i] == CloseToken) {
            open = false;
            string match = input.Substring (openIndex + 1, i - openIndex - 1);
            matches.Add (match);
        } else if (open && input [i] == OpenToken && ThrowOnError)
            throw new Exception ("Open token found while match is open");
        else if (! open && input [i] == CloseToken && ThrowOnError)
            throw new Exception ("Close token found while match is not open");
    }
    return matches.ToArray ();
}
----------------------------------------

  public string[] Parse (string input) {
        bool open = false;
        int openIndex = -1;
        List<string> matches = new List<string>();
        for (int i = 0; i < input.Length; i++)
        {
            if (!open && input[i] == OpenToken)
            {
                open = true;
                openIndex = i;
            } else if (open && input[i] == CloseToken)
            {
                open = false;
                string match = input.Substring(openIndex+1, i - openIndex);
                matches.Add(match);
            } else if (open && input [i] == OpenToken && ThrowOnError)
            {
                throw new SystemException("Open token found while match is open");
            } else if (!open && input[i] == CloseToken && ThrowOnError)
            {
                throw new SystemException("Close token found while match is not open");
            }
        } 
        if (matches.Count == 0)
            throw new Exception("No matches found");
        else       
        return matches.ToArray();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
607
4
Gpt3D_Clone607_4.cs 1 19
Gpt3D_Clone607_4.cs 20 46
----------------------------------------

public string [] Parse (string input) {
    bool open = false;
    int openIndex = - 1;
    List < string > matches = new List < string > ();
    for (int i = 0; i < input.Length; i ++) {
        if (! open && input [i] == OpenToken) {
            open = true;
            openIndex = i;
        } else if (open && input [i] == CloseToken) {
            open = false;
            string match = input.Substring (openIndex + 1, i - openIndex - 1);
            matches.Add (match);
        } else if (open && input [i] == OpenToken && ThrowOnError)
            throw new Exception ("Open token found while match is open");
        else if (! open && input [i] == CloseToken && ThrowOnError)
            throw new Exception ("Close token found while match is not open");
    }
    return matches.ToArray ();
}
----------------------------------------

  public string[] Parse (string input) {
        bool open = false;
        int openIndex = -1;
        List<string> matches = new List<string>();
        for (int i = 0; i < input.Length; i++)
        {
            if (!open && input[i] == OpenToken)
            {
                open = true;
                openIndex = i;
            } else if (open && input[i] == CloseToken)
            {
                open = false;
                string match = input.Substring(openIndex, i - openIndex - 1);
                matches.Add(match);
            } else if (open && input [i] == OpenToken && ThrowOnError)
            {
                Console.WriteLine("Open token found while match is open");
            } else if (!open && input[i] == CloseToken && ThrowOnError)
            {
                Console.WriteLine("Close token found while match is not open");
            }
        }         
        return matches.ToArray();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
607
5
Gpt3D_Clone607_5.cs 1 19
Gpt3D_Clone607_5.cs 20 46
----------------------------------------

public string [] Parse (string input) {
    bool open = false;
    int openIndex = - 1;
    List < string > matches = new List < string > ();
    for (int i = 0; i < input.Length; i ++) {
        if (! open && input [i] == OpenToken) {
            open = true;
            openIndex = i;
        } else if (open && input [i] == CloseToken) {
            open = false;
            string match = input.Substring (openIndex + 1, i - openIndex - 1);
            matches.Add (match);
        } else if (open && input [i] == OpenToken && ThrowOnError)
            throw new Exception ("Open token found while match is open");
        else if (! open && input [i] == CloseToken && ThrowOnError)
            throw new Exception ("Close token found while match is not open");
    }
    return matches.ToArray ();
}
----------------------------------------

  public string[] Parse (string input) {
        bool open = false;
        int openIndex = -1;
        List<string> matches = new List<string>();
        for (int i = 0; i < input.Length; i++)
        {
            if (!open && input[i] == OpenToken)
            {
                open = true;
                openIndex = i;
            } else if (open && input[i] == CloseToken)
            {
                open = false;
                string match = input.Substring(openIndex, i);
                matches.Add(match);
            } else if (open && input [i] == OpenToken && ThrowOnError)
            {
                Console.WriteLine("Open token found while match is open");
            } else if (!open && input[i] == CloseToken && ThrowOnError)
            {
                Console.WriteLine("Close token found while match is not open");
            }
        }         
        return matches.ToArray();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
60
7
Gpt3D_Clone60_7.cs 1 8
Gpt3D_Clone60_7.cs 9 19
----------------------------------------

private void dateTimePicker1_ValueChanged (object sender, EventArgs e) {
    if (this.dateTimePicker1.Value.Minute % 5 == 0)
        return;
    if (this.dateTimePicker1.Value.Minute % 5 == 1)
        this.dateTimePicker1.Value = this.dateTimePicker1.Value.AddMinutes (4);
    if (this.dateTimePicker1.Value.Minute % 5 == 4)
        this.dateTimePicker1.Value = this.dateTimePicker1.Value.AddMinutes (- 4);
}
----------------------------------------

  private void dateTimePicker1_ValueChanged (object sender, EventArgs e) {
    if (this.dateTimePicker1.Value.Minute % 5 == 0)
        return;
    if (this.dateTimePicker1.Value.Minute % 5 == 1)
        this.dateTimePicker1.Value = this.dateTimePicker1.Value.AddMinutes (- 4);
    if (this.dateTimePicker1.Value.Minute % 5 == 4)
        this.dateTimePicker1.Value = this.dateTimePicker1.Value.AddMinutes (4);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
610
0
Gpt3D_Clone610_0.cs 1 13
Gpt3D_Clone610_0.cs 14 28
----------------------------------------

public static T [,] To2dArray (this List < List < T > > list) {
    if (list.Count == 0 || list [0].Count == 0)
        throw new ArgumentException ("The list must have non-zero dimensions.");
    var result = new T [list.Count, list [0].Count];
    for (int i = 0; i < list.Count; i ++) {
        for (int j = 0; j < list [i].Count; j ++) {
            if (list [i].Count != list [0].Count)
                throw new InvalidOperationException ("The list cannot contain elements (lists) of different sizes.");
            result [i, j] = list [i] [j];
        }
    }
    return result;
}
----------------------------------------

 public static T[,] To2dArray (this List < List < T > > list) {
    if (list.Count == 0 || list [0].Count == 0)
        throw new ArgumentException ("The list must have non-zero dimensions.");
    foreach (List<T> element in list)
        if (element.Count != list[0].Count)
            throw new InvalidOperationException ("The list cannot contain elements (lists) of different sizes.");
    var result = new T[list.Count, list[0].Count];
    for (int i = 0; i < list.Count; i++) {
        for (int j = 0; j < list [i].Count; j++) 
            result [i, j] = list [i] [j];
    }    
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
610
1
Gpt3D_Clone610_1.cs 1 13
Gpt3D_Clone610_1.cs 14 28
----------------------------------------

public static T [,] To2dArray (this List < List < T > > list) {
    if (list.Count == 0 || list [0].Count == 0)
        throw new ArgumentException ("The list must have non-zero dimensions.");
    var result = new T [list.Count, list [0].Count];
    for (int i = 0; i < list.Count; i ++) {
        for (int j = 0; j < list [i].Count; j ++) {
            if (list [i].Count != list [0].Count)
                throw new InvalidOperationException ("The list cannot contain elements (lists) of different sizes.");
            result [i, j] = list [i] [j];
        }
    }
    return result;
}
----------------------------------------

 public static T[,] To2dArray (this List < List < T > > list) { 
    if (list.Count == 0 || list[0].Count == 0)
        throw new ArgumentException ("The list must have non-zero dimensions.");
    foreach (List<T> element in list)
        if (element.Count != list[0].Count)
            throw new InvalidOperationException("The list cannot contain elements (lists) of different sizes.");
    T[,] result = new T[list.Count, list[0].Count];
    for (int i = 0; i < list.Count; i++) {
        for (int j = 0; j < list[i].Count; j++) 
            result [i, j] = list [i] [j];
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
610
2
Gpt3D_Clone610_2.cs 1 13
Gpt3D_Clone610_2.cs 14 27
----------------------------------------

public static T [,] To2dArray (this List < List < T > > list) {
    if (list.Count == 0 || list [0].Count == 0)
        throw new ArgumentException ("The list must have non-zero dimensions.");
    var result = new T [list.Count, list [0].Count];
    for (int i = 0; i < list.Count; i ++) {
        for (int j = 0; j < list [i].Count; j ++) {
            if (list [i].Count != list [0].Count)
                throw new InvalidOperationException ("The list cannot contain elements (lists) of different sizes.");
            result [i, j] = list [i] [j];
        }
    }
    return result;
}
----------------------------------------

 public static T[,] To2dArray (this List < List < T > > list) {
    if (list == null || list.Count == 0 || list[0].Count == 0)
        throw new ArgumentException ("The list must have non-zero dimensions.");
    if (list.Any(x => x.Count != list[0].Count))
        throw new InvalidOperationException ("The list cannot contain elements (lists) of different sizes.");
    var result = new T[list.Count, list[0].Count];
    for (int i = 0; i < list.Count; i++) {
        for (int j = 0; j < list[i].Count; j++) 
            result[i, j] = list[i][j];
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
610
3
Gpt3D_Clone610_3.cs 1 13
Gpt3D_Clone610_3.cs 14 27
----------------------------------------

public static T [,] To2dArray (this List < List < T > > list) {
    if (list.Count == 0 || list [0].Count == 0)
        throw new ArgumentException ("The list must have non-zero dimensions.");
    var result = new T [list.Count, list [0].Count];
    for (int i = 0; i < list.Count; i ++) {
        for (int j = 0; j < list [i].Count; j ++) {
            if (list [i].Count != list [0].Count)
                throw new InvalidOperationException ("The list cannot contain elements (lists) of different sizes.");
            result [i, j] = list [i] [j];
        }
    }
    return result;
}
----------------------------------------

 public static T[,] To2dArray (this List < List < T > > list) {
    if (list.Count == 0 || list[0].Count == 0)
        throw new ArgumentException ("The list must have non-zero dimensions.");
    if (list.Any(m => m.Count != list[0].Count))
        throw new InvalidOperationException ("The list cannot contain elements (lists) of different sizes.");
    T[,] result = new T[list.Count, list[0].Count];
    for (int i = 0; i < list.Count; i++) {
        for (int j = 0; j < list[i].Count; j++) 
            result[i, j] = list[i][j];
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
610
4
Gpt3D_Clone610_4.cs 1 13
Gpt3D_Clone610_4.cs 14 27
----------------------------------------

public static T [,] To2dArray (this List < List < T > > list) {
    if (list.Count == 0 || list [0].Count == 0)
        throw new ArgumentException ("The list must have non-zero dimensions.");
    var result = new T [list.Count, list [0].Count];
    for (int i = 0; i < list.Count; i ++) {
        for (int j = 0; j < list [i].Count; j ++) {
            if (list [i].Count != list [0].Count)
                throw new InvalidOperationException ("The list cannot contain elements (lists) of different sizes.");
            result [i, j] = list [i] [j];
        }
    }
    return result;
}
----------------------------------------

  public static T [,] To2dArray (this List < List < T > > list) {  
    if (list.Count == 0 || list [0].Count == 0)
        throw new ArgumentException ("The list must have non-zero dimensions.");
    else if (list.Any(x => x.Count != list[0].Count))
        throw new InvalidOperationException ("The list cannot contain elements (lists) of different sizes.");
    var result = new T[list.Count, list[0].Count];
    for (int i = 0; i < list.Count; i++) {
        for (int j = 0; j < list [i].Count; j++) 
            result [i, j] = list [i] [j];
    }    
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
610
5
Gpt3D_Clone610_5.cs 1 13
Gpt3D_Clone610_5.cs 14 28
----------------------------------------

public static T [,] To2dArray (this List < List < T > > list) {
    if (list.Count == 0 || list [0].Count == 0)
        throw new ArgumentException ("The list must have non-zero dimensions.");
    var result = new T [list.Count, list [0].Count];
    for (int i = 0; i < list.Count; i ++) {
        for (int j = 0; j < list [i].Count; j ++) {
            if (list [i].Count != list [0].Count)
                throw new InvalidOperationException ("The list cannot contain elements (lists) of different sizes.");
            result [i, j] = list [i] [j];
        }
    }
    return result;
}
----------------------------------------

 public static T[,] To2dArray (this List < List < T > > list) { 
   if (list == null || list.Count == 0 || list[0].Count == 0)
        throw new ArgumentException ("The list must have non-zero dimensions.");
    if (list.Any(x => x.Count != list[0].Count))
        throw new InvalidOperationException("The list cannot contain elements (lists) of different sizes.");
    var result = new T[list.Count, list[0].Count];
    for (int i = 0; i < list.Count; i++) {
        for (int j = 0; j < list[i].Count; j++) {  
            result [i, j] = list [i] [j];
        }
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
610
6
Gpt3D_Clone610_6.cs 1 13
Gpt3D_Clone610_6.cs 14 27
----------------------------------------

public static T [,] To2dArray (this List < List < T > > list) {
    if (list.Count == 0 || list [0].Count == 0)
        throw new ArgumentException ("The list must have non-zero dimensions.");
    var result = new T [list.Count, list [0].Count];
    for (int i = 0; i < list.Count; i ++) {
        for (int j = 0; j < list [i].Count; j ++) {
            if (list [i].Count != list [0].Count)
                throw new InvalidOperationException ("The list cannot contain elements (lists) of different sizes.");
            result [i, j] = list [i] [j];
        }
    }
    return result;
}
----------------------------------------

 public static T[,] To2dArray (this List < List < T > > list) {
    if (list.Count == 0 || list [0].Count == 0)
        throw new ArgumentException ("The list must have non-zero dimensions.");
    if (list.Any(x => x.Count != list[0].Count))
        throw new InvalidOperationException ("The list cannot contain elements (lists) of different sizes.");
    T[,] result = new T[list.Count, list[0].Count];
    for (int i = 0; i < list.Count; i++) {
        for (int j = 0; j < list [i].Count; j++)
            result [i, j] = list [i] [j];
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
613
0
Gpt3D_Clone613_0.cs 1 27
Gpt3D_Clone613_0.cs 28 58
----------------------------------------

public bool UrlIsValid (string url) {
    try {
        HttpWebRequest request = HttpWebRequest.Create (url) as HttpWebRequest;
        request.Timeout = 5000;
        request.Method = "HEAD";
        using (HttpWebResponse response = request.GetResponse () as HttpWebResponse)
        {
            int statusCode = (int) response.StatusCode;
            if (statusCode >= 100 && statusCode < 400) {
                return true;
            } else if (statusCode >= 500 && statusCode <= 510) {
                Debug.WriteLine (String.Format ("The remote server has thrown an internal error. Url is not valid: {0}", url));
                return false;
            }
        }}
    catch (WebException ex) {
        if (ex.Status == WebExceptionStatus.ProtocolError) {
            return false;
        } else {
            log.Warn (String.Format ("Unhandled status [{0}] returned for url: {1}", ex.Status, url), ex);
        }
    }
    catch (Exception ex) {
        log.Error (String.Format ("Could not test url {0}.", url), ex);
    }
    return false;
}
----------------------------------------

 public bool TestUrlValidity (string url) { 
    try { 
        HttpWebRequest request = (HttpWebRequest) WebRequest.Create (url);
        using (HttpWebResponse response = (HttpWebResponse) request.GetResponse ()) {
            if ((int) response.StatusCode > 100 && (int) response.StatusCode < 500) {
                return true;
            }
            else if ((int) response.StatusCode >= 500 && (int) response.StatusCode <= 510) {
                Debug.WriteLine (String.Format ("The remote server has thrown an internal error. Url is not valid: {0}", url));
                return false;
            }
            else {
                return false;
            }
        }
    }
    catch (WebException ex) {
        if (ex.Status == WebExceptionStatus.ProtocolError) {
            return false;
        }
        else {
            log.Warn (String.Format ("Unhandled status [{0}] returned for url: {1}", ex.Status, url), ex);
        }
    }
    catch (Exception ex) {
        log.Error (String.Format ("Could not test url {0}.", url), ex);
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
613
1
Gpt3D_Clone613_1.cs 1 27
Gpt3D_Clone613_1.cs 28 54
----------------------------------------

public bool UrlIsValid (string url) {
    try {
        HttpWebRequest request = HttpWebRequest.Create (url) as HttpWebRequest;
        request.Timeout = 5000;
        request.Method = "HEAD";
        using (HttpWebResponse response = request.GetResponse () as HttpWebResponse)
        {
            int statusCode = (int) response.StatusCode;
            if (statusCode >= 100 && statusCode < 400) {
                return true;
            } else if (statusCode >= 500 && statusCode <= 510) {
                Debug.WriteLine (String.Format ("The remote server has thrown an internal error. Url is not valid: {0}", url));
                return false;
            }
        }}
    catch (WebException ex) {
        if (ex.Status == WebExceptionStatus.ProtocolError) {
            return false;
        } else {
            log.Warn (String.Format ("Unhandled status [{0}] returned for url: {1}", ex.Status, url), ex);
        }
    }
    catch (Exception ex) {
        log.Error (String.Format ("Could not test url {0}.", url), ex);
    }
    return false;
}
----------------------------------------

 public bool VerifyUrl (string url) { 
    try {
        HttpWebRequest request = (HttpWebRequest) WebRequest.Create (url);
        HttpWebResponse response = (HttpWebResponse) request.GetResponse ();
        if (response.StatusCode == HttpStatusCode.OK) { 
            return true;
        }
        else if ((int) response.StatusCode >= 500 && (int) response.StatusCode <= 510) {
            Debug.WriteLine (String.Format ("The remote server has thrown an internal error. Url is not valid: {0}", url));
            return false;
        }
    }
    catch (WebException ex) {
        if (ex.Status == WebExceptionStatus.ProtocolError) {
            return false;
        }
        else {
            log.Warn (String.Format ("Unhandled status [{0}] returned for url: {1}", ex.Status, url), ex);
        }
    }
    catch (Exception ex) {
        log.Error (String.Format ("Could not test url {0}.", url), ex);
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
614
0
Gpt3D_Clone614_0.cs 1 20
Gpt3D_Clone614_0.cs 21 47
----------------------------------------

internal static void RunScriptFile (SqlConnection conn, string fileName) {
    long fileSize = 0;
    using (FileStream stream = File.OpenRead (fileName))
    {
        fileSize = stream.Length;
        using (StreamReader reader = new StreamReader (stream))
        {
            StringBuilder sb = new StringBuilder ();
            string line = string.Empty;
            while (! reader.EndOfStream) {
                line = reader.ReadLine ();
                if (string.Compare (line.Trim (), "GO", StringComparison.InvariantCultureIgnoreCase) == 0) {
                    RunCommand (conn, sb.ToString ());
                    sb.Length = 0;
                } else {
                    sb.AppendLine (line);
                }
            }
        }}
}
----------------------------------------

 internal static void RunScriptFile (SqlConnection conn, string fileName) 
{
    var sb = new StringBuilder();
    long fileSize = 0;
    using (FileStream stream = File.OpenRead(fileName))
    {
        fileSize = stream.Length;
        using (StreamReader reader = new StreamReader(stream))
        {
            string line;
            while ((line = reader.ReadLine()) != null)
            {
                if (string.Compare(line.Trim(), "GO", StringComparison.InvariantCultureIgnoreCase) == 0)
                {
                    RunCommand(conn, sb.ToString());
                    sb.Clear();
                }
                else
                {
                    sb.AppendLine(line);
                }
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
614
1
Gpt3D_Clone614_1.cs 1 21
Gpt3D_Clone614_1.cs 22 46
----------------------------------------

internal static void RunScriptFile (SqlConnection conn, string fileName) {
    long fileSize = 0;
    using (FileStream stream = File.OpenRead (fileName))
    {
        fileSize = stream.Length;
        using (StreamReader reader = new StreamReader (stream))
        {
            StringBuilder sb = new StringBuilder ();
            string line = string.Empty;
            while (! reader.EndOfStream) {
                line = reader.ReadLine ();
                if (string.Compare (line.Trim (), "GO", StringComparison.InvariantCultureIgnoreCase) == 0) {
                    RunCommand (conn, sb.ToString ());
                    sb.Length = 0;
                } else {
                    sb.AppendLine (line);
                }
            }
        }}
        
}
----------------------------------------

 internal static void RunScriptFile (SqlConnection conn, string fileName) 
{ 
    long fileSize = 0; 
    using (FileStream stream = File.OpenRead(fileName)) 
    { 
        fileSize = stream.Length; 
        using (StreamReader reader = new StreamReader(stream)) 
        { 
            StringBuilder sb = new StringBuilder(); 
            string line; 
            while ((line = reader.ReadLine()) != null) 
            { 
                if (line.Equals("GO", StringComparison.InvariantCultureIgnoreCase)) 
                { 
                    RunCommand(conn, sb.ToString()); 
                    sb.Length = 0; 
                } 
                else 
                    sb.AppendLine(line); 
            } 
        } 
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
614
2
Gpt3D_Clone614_2.cs 1 20
Gpt3D_Clone614_2.cs 21 47
----------------------------------------

internal static void RunScriptFile (SqlConnection conn, string fileName) {
    long fileSize = 0;
    using (FileStream stream = File.OpenRead (fileName))
    {
        fileSize = stream.Length;
        using (StreamReader reader = new StreamReader (stream))
        {
            StringBuilder sb = new StringBuilder ();
            string line = string.Empty;
            while (! reader.EndOfStream) {
                line = reader.ReadLine ();
                if (string.Compare (line.Trim (), "GO", StringComparison.InvariantCultureIgnoreCase) == 0) {
                    RunCommand (conn, sb.ToString ());
                    sb.Length = 0;
                } else {
                    sb.AppendLine (line);
                }
            }
        }}
}
----------------------------------------

 internal static void RunScriptFile (SqlConnection conn, string fileName) 
{ 
    long fileSize = 0;
    using (FileStream stream = File.OpenRead(fileName))
    {
        fileSize = stream.Length;
        using (StreamReader reader = new StreamReader(stream))
        {
            StringBuilder sb = new StringBuilder();
            string temp;
            while ((temp = reader.ReadLine()) != null)
            {
                if (string.Compare(temp.Trim(), "GO", StringComparison.InvariantCultureIgnoreCase) == 0)
                {
                    RunCommand(conn, sb.ToString());
                    sb.Clear();
                }
                else
                {
                    sb.Append(temp + Environment.NewLine);
                }
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
614
3
Gpt3D_Clone614_3.cs 1 20
Gpt3D_Clone614_3.cs 21 45
----------------------------------------

internal static void RunScriptFile (SqlConnection conn, string fileName) {
    long fileSize = 0;
    using (FileStream stream = File.OpenRead (fileName))
    {
        fileSize = stream.Length;
        using (StreamReader reader = new StreamReader (stream))
        {
            StringBuilder sb = new StringBuilder ();
            string line = string.Empty;
            while (! reader.EndOfStream) {
                line = reader.ReadLine ();
                if (string.Compare (line.Trim (), "GO", StringComparison.InvariantCultureIgnoreCase) == 0) {
                    RunCommand (conn, sb.ToString ());
                    sb.Length = 0;
                } else {
                    sb.AppendLine (line);
                }
            }
        }}
}
----------------------------------------

 internal static void RunScriptFile (SqlConnection conn, string fileName) 
{ 
    long fileSize = 0;
    using (FileStream stream = File.OpenRead(fileName))
    {
        fileSize = stream.Length;
        using (StreamReader reader = new StreamReader(stream))
        {
            StringBuilder sb = new StringBuilder();
            string line;
            while ((line = reader.ReadLine()) != null)
            {
                if (line.StartsWith("GO", StringComparison.InvariantCultureIgnoreCase))
                { 
                    RunCommand(conn, sb.ToString()); 
                    sb.Length = 0; 
                } 
                else 
                    sb.AppendLine(line); 
            } 
        } 
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
614
5
Gpt3D_Clone614_5.cs 1 20
Gpt3D_Clone614_5.cs 21 43
----------------------------------------

internal static void RunScriptFile (SqlConnection conn, string fileName) {
    long fileSize = 0;
    using (FileStream stream = File.OpenRead (fileName))
    {
        fileSize = stream.Length;
        using (StreamReader reader = new StreamReader (stream))
        {
            StringBuilder sb = new StringBuilder ();
            string line = string.Empty;
            while (! reader.EndOfStream) {
                line = reader.ReadLine ();
                if (string.Compare (line.Trim (), "GO", StringComparison.InvariantCultureIgnoreCase) == 0) {
                    RunCommand (conn, sb.ToString ());
                    sb.Length = 0;
                } else {
                    sb.AppendLine (line);
                }
            }
        }}
}
----------------------------------------

 internal static void RunScriptFile (SqlConnection conn, string fileName) 
{ 
    using (StreamReader reader = new StreamReader(fileName)) 
    { 
        StringBuilder sb = new StringBuilder(); 
        string temp; 
        while (!reader.EndOfStream) 
        { 
            temp = reader.ReadLine(); 
            if (string.Compare(temp.Trim(), "GO", StringComparison.InvariantCultureIgnoreCase) == 0) 
            { 
                RunCommand(conn, sb.ToString()); 
                sb.Length = 0; 
            } 
            else 
            { 
                sb.AppendLine(temp); 
            } 
        } 
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
614
6
Gpt3D_Clone614_6.cs 1 20
Gpt3D_Clone614_6.cs 21 42
----------------------------------------

internal static void RunScriptFile (SqlConnection conn, string fileName) {
    long fileSize = 0;
    using (FileStream stream = File.OpenRead (fileName))
    {
        fileSize = stream.Length;
        using (StreamReader reader = new StreamReader (stream))
        {
            StringBuilder sb = new StringBuilder ();
            string line = string.Empty;
            while (! reader.EndOfStream) {
                line = reader.ReadLine ();
                if (string.Compare (line.Trim (), "GO", StringComparison.InvariantCultureIgnoreCase) == 0) {
                    RunCommand (conn, sb.ToString ());
                    sb.Length = 0;
                } else {
                    sb.AppendLine (line);
                }
            }
        }}
}
----------------------------------------

 internal static void RunScriptFile (SqlConnection conn, string fileName) 
{ 
    using (StreamReader reader = new StreamReader(fileName)) 
    { 
        StringBuilder sb = new StringBuilder(); 
        string temp; 
        while ((temp = reader.ReadLine()) != null) 
        { 
            if (string.Compare(temp.Trim(), "GO", StringComparison.InvariantCultureIgnoreCase) == 0) 
            { 
                RunCommand(conn, sb.ToString()); 
                sb.Length = 0; 
            } 
            else 
            { 
                sb.AppendLine(temp); 
            } 
        } 
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
615
4
Gpt3D_Clone615_4.cs 1 12
Gpt3D_Clone615_4.cs 13 34
----------------------------------------

private static bool AlreadyRunning () {
    Process [] processes = Process.GetProcesses ();
    Process currentProc = Process.GetCurrentProcess ();
    logger.LogDebug ("Current proccess: {0}", currentProc.ProcessName);
    foreach (Process process in processes) {
        if (currentProc.ProcessName == process.ProcessName && currentProc.Id != process.Id) {
            logger.LogInformation ("Another instance of this process is already running: {pid}", process.Id);
            return true;
        }
    }
    return false;
}
----------------------------------------

  private static bool AlreadyRunning () {
    Process [] processes = Process.GetProcesses ();
    List <Process> matchingProcesses = new List <Process> ();
    Process currentProc = Process.GetCurrentProcess ();
    logger.LogDebug ("Current proccess: {0}", currentProc.ProcessName);
    foreach (Process process in processes) {
        if (currentProc.ProcessName == process.ProcessName) {
            matchingProcesses.Add (process);
        }
    }
    if (matchingProcesses.Count > 1) {
        foreach (Process process in matchingProcesses) {
            if (currentProc.Id != process.Id) {
                logger.LogInformation ("Another instance of this process is already running: {pid}", process.Id);
                return true;
            }
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
615
5
Gpt3D_Clone615_5.cs 1 12
Gpt3D_Clone615_5.cs 13 32
----------------------------------------

private static bool AlreadyRunning () {
    Process [] processes = Process.GetProcesses ();
    Process currentProc = Process.GetCurrentProcess ();
    logger.LogDebug ("Current proccess: {0}", currentProc.ProcessName);
    foreach (Process process in processes) {
        if (currentProc.ProcessName == process.ProcessName && currentProc.Id != process.Id) {
            logger.LogInformation ("Another instance of this process is already running: {pid}", process.Id);
            return true;
        }
    }
    return false;
}
----------------------------------------

  private static bool AlreadyRunning () {
    List <Process> processList = new List <Process> ();
    Process currentProc = Process.GetCurrentProcess ();
    logger.LogDebug ("Current proccess: {0}", currentProc.ProcessName);
    Process [] processes = Process.GetProcessesByName (currentProc.ProcessName);
    foreach (Process process in processes) {
        processList.Add (process);
    }
    if (processList.Count > 1) {
        foreach (Process process in processList) {
            if (currentProc.Id != process.Id) {
                logger.LogInformation ("Another instance of this process is already running: {pid}", process.Id);
                return true;
            }
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
617
0
Gpt3D_Clone617_0.cs 1 16
Gpt3D_Clone617_0.cs 17 40
----------------------------------------

public HttpResponseMessage CertificateUpload (employeeModel emp) {
    if (! ModelState.IsValid) {
        string errordetails = "";
        var errors = new List < string > ();
        foreach (var state in ModelState) {
            foreach (var error in state.Value.Errors) {
                string p = error.ErrorMessage;
                errordetails = errordetails + error.ErrorMessage;
            }
        }
        Dictionary < string, object > dict = new Dictionary < string, object > ();
        dict.Add ("error", errordetails);
        return Request.CreateResponse (HttpStatusCode.BadRequest, dict);
    } else {
    }
}
----------------------------------------

 public HttpResponseMessage CertificateUpload (employeeModel emp)
{
    if (!ModelState.IsValid) 
    {
        string errmsg = "";
        List<string> errors = new List<string>();
        foreach (var state in ModelState) 
        {
            foreach(var error in state.Value.Errors) 
            {
                errmsg += error.ErrorMessage + " ; ";
            }
        }
        Dictionary<string, string> dict = new Dictionary<string, string>();
        dict.Add("Errors", errmsg);
        return Request.CreateResponse(HttpStatusCode.BadRequest, dict);
    }
    else
    {
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
617
1
Gpt3D_Clone617_1.cs 1 16
Gpt3D_Clone617_1.cs 17 39
----------------------------------------

public HttpResponseMessage CertificateUpload (employeeModel emp) {
    if (! ModelState.IsValid) {
        string errordetails = "";
        var errors = new List < string > ();
        foreach (var state in ModelState) {
            foreach (var error in state.Value.Errors) {
                string p = error.ErrorMessage;
                errordetails = errordetails + error.ErrorMessage;
            }
        }
        Dictionary < string, object > dict = new Dictionary < string, object > ();
        dict.Add ("error", errordetails);
        return Request.CreateResponse (HttpStatusCode.BadRequest, dict);
    } else {
    }
}
----------------------------------------

 public HttpResponseMessage CertificateUpload (employeeModel emp)
{
    if (!ModelState.IsValid)
    {
        string errors = "";
        List<string>errorList = new List<string>();
        foreach (var state in ModelState)
        {
            foreach(var error in state.Value.Errors)
            {
                errors += error.ErrorMessage + " .";
            }
        }
        IDictionary<string, string> dict  = new Dictionary<string, string>();
        dict.Add("Error Messages:", errors);
        return Request.CreateResponse(HttpStatusCode.BadRequest, dict);
    }
    else
    {
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
617
2
Gpt3D_Clone617_2.cs 1 16
Gpt3D_Clone617_2.cs 17 39
----------------------------------------

public HttpResponseMessage CertificateUpload (employeeModel emp) {
    if (! ModelState.IsValid) {
        string errordetails = "";
        var errors = new List < string > ();
        foreach (var state in ModelState) {
            foreach (var error in state.Value.Errors) {
                string p = error.ErrorMessage;
                errordetails = errordetails + error.ErrorMessage;
            }
        }
        Dictionary < string, object > dict = new Dictionary < string, object > ();
        dict.Add ("error", errordetails);
        return Request.CreateResponse (HttpStatusCode.BadRequest, dict);
    } else {
    }
}
----------------------------------------

  public HttpResponseMessage CertificateUpload (employeeModel emp)
{ 
    if (! ModelState.IsValid) 
    {
        string errordetails = string.Empty;
        var errors = new List<string>();
        foreach (var state in ModelState) 
        {
            foreach (var error in state.Value.Errors) 
            {
                errordetails += error.ErrorMessage + ",";
            }
        }
        IDictionary<string, object> dict = new Dictionary<string, object>();
        dict.Add("Error", errordetails);
        return Request.CreateResponse(HttpStatusCode.BadRequest, dict);
    }
    else
    {
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
617
3
Gpt3D_Clone617_3.cs 1 16
Gpt3D_Clone617_3.cs 17 42
----------------------------------------

public HttpResponseMessage CertificateUpload (employeeModel emp) {
    if (! ModelState.IsValid) {
        string errordetails = "";
        var errors = new List < string > ();
        foreach (var state in ModelState) {
            foreach (var error in state.Value.Errors) {
                string p = error.ErrorMessage;
                errordetails = errordetails + error.ErrorMessage;
            }
        }
        Dictionary < string, object > dict = new Dictionary < string, object > ();
        dict.Add ("error", errordetails);
        return Request.CreateResponse (HttpStatusCode.BadRequest, dict);
    } else {
    }
}
----------------------------------------

   public HttpResponseMessage CertificateUpload (employeeModel emp)
{ 
    if (! ModelState.IsValid) 
    {
    string errdetails="";
    var errors = new List<string>();
    foreach (var state in ModelState) 
    {
        foreach (var error in state.Value.Errors) 
        {
            // Do something
            errdetails=errdetails+error.ErrorMessage+"  ";
        }
    }
    Dictionary<string, string> dict = new Dictionary<string, string>();
    dict.Add("Error  Messages", errdetails);
    return Request.CreateResponse(HttpStatusCode.BadRequest, dict);
    }
    else
    {
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
617
4
Gpt3D_Clone617_4.cs 1 16
Gpt3D_Clone617_4.cs 17 39
----------------------------------------

public HttpResponseMessage CertificateUpload (employeeModel emp) {
    if (! ModelState.IsValid) {
        string errordetails = "";
        var errors = new List < string > ();
        foreach (var state in ModelState) {
            foreach (var error in state.Value.Errors) {
                string p = error.ErrorMessage;
                errordetails = errordetails + error.ErrorMessage;
            }
        }
        Dictionary < string, object > dict = new Dictionary < string, object > ();
        dict.Add ("error", errordetails);
        return Request.CreateResponse (HttpStatusCode.BadRequest, dict);
    } else {
    }
}
----------------------------------------

 public HttpResponseMessage CertificateUpload (employeeModel emp)
{
    if (!ModelState.IsValid)
    {
        string errMsg = "";
        foreach (var state in ModelState)
        {
            foreach (var error in state.Value.Errors)
            {
                errMsg += error.ErrorMessage + " !";
            }
        }
        Dictionary<string, string> dict = new Dictionary<string, string>();
        dict.Add("Error Message : ", errMsg);
        return Request.CreateResponse(HttpStatusCode.BadRequest, dict);
    }
    else
    {
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
617
5
Gpt3D_Clone617_5.cs 1 16
Gpt3D_Clone617_5.cs 17 39
----------------------------------------

public HttpResponseMessage CertificateUpload (employeeModel emp) {
    if (! ModelState.IsValid) {
        string errordetails = "";
        var errors = new List < string > ();
        foreach (var state in ModelState) {
            foreach (var error in state.Value.Errors) {
                string p = error.ErrorMessage;
                errordetails = errordetails + error.ErrorMessage;
            }
        }
        Dictionary < string, object > dict = new Dictionary < string, object > ();
        dict.Add ("error", errordetails);
        return Request.CreateResponse (HttpStatusCode.BadRequest, dict);
    } else {
    }
}
----------------------------------------

 public HttpResponseMessage CertificateUpload(employeeModel emp)
{
    if (!ModelState.IsValid)
    {
        StringBuilder errordetails = new StringBuilder();
        foreach (var state in ModelState)
        {
            foreach (var error in state.Value.Errors)
            {
                errordetails.Append(error.ErrorMessage + " | ");
            }
        }
   
        Dictionary<string, object> dict = new Dictionary<string, object>();
        dict.Add("Error", errordetails.ToString());
        return Request.CreateResponse(HttpStatusCode.BadRequest, dict);
    }
    else
    {
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
617
6
Gpt3D_Clone617_6.cs 1 16
Gpt3D_Clone617_6.cs 17 40
----------------------------------------

public HttpResponseMessage CertificateUpload (employeeModel emp) {
    if (! ModelState.IsValid) {
        string errordetails = "";
        var errors = new List < string > ();
        foreach (var state in ModelState) {
            foreach (var error in state.Value.Errors) {
                string p = error.ErrorMessage;
                errordetails = errordetails + error.ErrorMessage;
            }
        }
        Dictionary < string, object > dict = new Dictionary < string, object > ();
        dict.Add ("error", errordetails);
        return Request.CreateResponse (HttpStatusCode.BadRequest, dict);
    } else {
    }
}
----------------------------------------

   public HttpResponseMessage CertificateUpload (employeeModel emp)
{ 
    if (! ModelState.IsValid) 
    {
    string errdetails="";
   
    foreach (var state in ModelState) 
    {
        foreach (var error in state.Value.Errors)
        {
            errdetails += error.ErrorMessage + " * ";
        }
    }
 
    IDictionary<string, string> dict = new Dictionary<string, string>();
    dict.Add("Error Message", errdetails);
    return Request.CreateResponse(HttpStatusCode.BadRequest, dict);
    }
    else
    {
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
617
7
Gpt3D_Clone617_7.cs 1 16
Gpt3D_Clone617_7.cs 17 39
----------------------------------------

public HttpResponseMessage CertificateUpload (employeeModel emp) {
    if (! ModelState.IsValid) {
        string errordetails = "";
        var errors = new List < string > ();
        foreach (var state in ModelState) {
            foreach (var error in state.Value.Errors) {
                string p = error.ErrorMessage;
                errordetails = errordetails + error.ErrorMessage;
            }
        }
        Dictionary < string, object > dict = new Dictionary < string, object > ();
        dict.Add ("error", errordetails);
        return Request.CreateResponse (HttpStatusCode.BadRequest, dict);
    } else {
    }
}
----------------------------------------

 public HttpResponseMessage CertificateUpload(employeeModel emp)
{ 
    if (!ModelState.IsValid)
    {
        String errorDetails = String.Empty;
        foreach (var state in ModelState)
        {
            foreach (var error in state.Value.Errors)
            {
                errorDetails += error.ErrorMessage + " . ";
            }
        }
        IDictionary<string, string> dict = new Dictionary<string, string>();
        dict.Add("Error", errorDetails);
        return Request.CreateResponse(HttpStatusCode.BadRequest, dict);
    }
    else
    {
    
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
618
2
Gpt3D_Clone618_2.cs 1 17
Gpt3D_Clone618_2.cs 18 46
----------------------------------------

public static int IndexOf (byte [] haystack, byte [] needle) {
    if (needle.Length == 0) {
        return 0;
    }
    int [] charTable = MakeCharTable (needle);
    int [] offsetTable = MakeOffsetTable (needle);
    for (int i = needle.Length - 1; i < haystack.Length;) {
        int j;
        for (j = needle.Length - 1; needle [j] == haystack [i]; -- i, -- j) {
            if (j == 0) {
                return i;
            }
        }
        i += Math.Max (offsetTable [needle.Length - 1 - j], charTable [haystack [i]]);
    }
    return - 1;
}
----------------------------------------

 public static int IndexOf(byte [] haystack, byte [] needle) {
    // handle null cases
    if (needle.Length == 0) {
        return 0;
    }
    // pre-process the needle
    int [] charTable = MakeCharTable (needle);
    int [] offsetTable = MakeOffsetTable (needle);
    // perform the search
    int haystackIndex = needle.Length - 1;
    while (haystackIndex < haystack.Length) {
        int needleIndex = needle.Length - 1;
        while (needleIndex >= 0 && haystack[haystackIndex] == needle[needleIndex]) {
            if (needleIndex == 0) {
                return haystackIndex;
            }
            haystackIndex--;
            needleIndex--;
        }
        haystackIndex += Math.Max(offsetTable[needle.Length - 1 - needleIndex], 
            charTable[haystack[haystackIndex]]);
    }
    return -1;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
618
3
Gpt3D_Clone618_3.cs 1 17
Gpt3D_Clone618_3.cs 18 44
----------------------------------------

public static int IndexOf (byte [] haystack, byte [] needle) {
    if (needle.Length == 0) {
        return 0;
    }
    int [] charTable = MakeCharTable (needle);
    int [] offsetTable = MakeOffsetTable (needle);
    for (int i = needle.Length - 1; i < haystack.Length;) {
        int j;
        for (j = needle.Length - 1; needle [j] == haystack [i]; -- i, -- j) {
            if (j == 0) {
                return i;
            }
        }
        i += Math.Max (offsetTable [needle.Length - 1 - j], charTable [haystack [i]]);
    }
    return - 1;
}
----------------------------------------

 public static int IndexOf(byte [] haystack, byte [] needle) {
    // handle null cases
    if (needle.Length == 0) {
        return 0;
    }
    // pre-process the needle
    int [] charTable = MakeCharTable (needle);
    int [] offsetTable = MakeOffsetTable (needle);
    int i = needle.Length - 1;
    while (i < haystack.Length) {
        int j = needle.Length - 1;
        while (needle[j] == haystack[i]) {
            if (j == 0) {
                return i;
            }
            i--;
            j--;
        }
        i += Math.Max(offsetTable[needle.Length - 1 - j], 
            charTable[haystack[i]]);
    }
    return -1;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
618
4
Gpt3D_Clone618_4.cs 1 17
Gpt3D_Clone618_4.cs 18 37
----------------------------------------

public static int IndexOf (byte [] haystack, byte [] needle) {
    if (needle.Length == 0) {
        return 0;
    }
    int [] charTable = MakeCharTable (needle);
    int [] offsetTable = MakeOffsetTable (needle);
    for (int i = needle.Length - 1; i < haystack.Length;) {
        int j;
        for (j = needle.Length - 1; needle [j] == haystack [i]; -- i, -- j) {
            if (j == 0) {
                return i;
            }
        }
        i += Math.Max (offsetTable [needle.Length - 1 - j], charTable [haystack [i]]);
    }
    return - 1;
}
----------------------------------------

 public static int IndexOf (byte [] haystack, byte [] needle) {
    if(needle.Length == 0) {
        return 0;
    }
    int [] charTable= MakeCharTable (needle);
    int [] offsetTable = MakeOffsetTable (needle);
    int i = needle.Length - 1;
    while(i < haystack.Length) {
        int j = needle.Length - 1;
        while(needle[j] == haystack[i]) {
            if(j == 0)
                return i;
            i--; j--;
        }
        i += Math.Max(offsetTable[needle.Length - 1 - j], charTable[haystack[i]]);
    }
    return -1;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
618
5
Gpt3D_Clone618_5.cs 1 17
Gpt3D_Clone618_5.cs 18 43
----------------------------------------

public static int IndexOf (byte [] haystack, byte [] needle) {
    if (needle.Length == 0) {
        return 0;
    }
    int [] charTable = MakeCharTable (needle);
    int [] offsetTable = MakeOffsetTable (needle);
    for (int i = needle.Length - 1; i < haystack.Length;) {
        int j;
        for (j = needle.Length - 1; needle [j] == haystack [i]; -- i, -- j) {
            if (j == 0) {
                return i;
            }
        }
        i += Math.Max (offsetTable [needle.Length - 1 - j], charTable [haystack [i]]);
    }
    return - 1;
}
----------------------------------------

 public static int IndexOf (byte [] haystack, byte [] needle) {
	// null-check
    if (needle.Length == 0) {
        return 0;
    }
    
    int [] charTable = MakeCharTable (needle);
    int [] offsetTable = MakeOffsetTable (needle);
    int haystackIndex = needle.Length - 1;
    while (haystackIndex < haystack.Length) {
        int needleIndex = needle.Length - 1;
        while (needleIndex >= 0 && haystack[haystackIndex] == needle[needleIndex]) {
            if (needleIndex == 0) {
                return haystackIndex;
            }
            haystackIndex--;
            needleIndex--;
        } 
        haystackIndex += Math.Max(offsetTable[needle.Length - 1 - needleIndex], 
            charTable[haystack[haystackIndex]]);
    }
    return -1;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
618
6
Gpt3D_Clone618_6.cs 1 17
Gpt3D_Clone618_6.cs 18 44
----------------------------------------

public static int IndexOf (byte [] haystack, byte [] needle) {
    if (needle.Length == 0) {
        return 0;
    }
    int [] charTable = MakeCharTable (needle);
    int [] offsetTable = MakeOffsetTable (needle);
    for (int i = needle.Length - 1; i < haystack.Length;) {
        int j;
        for (j = needle.Length - 1; needle [j] == haystack [i]; -- i, -- j) {
            if (j == 0) {
                return i;
            }
        }
        i += Math.Max (offsetTable [needle.Length - 1 - j], charTable [haystack [i]]);
    }
    return - 1;
}
----------------------------------------

 public static int IndexOf (byte [] haystack, byte [] needle) {
	// handle null cases
    if (needle.Length == 0) {
        return 0;
    }
    // pre-process the needle
    int [] charTable = MakeCharTable (needle);
    int [] offsetTable = MakeOffsetTable (needle);
    int i = needle.Length - 1;
    while (i < haystack.Length) {
        int j = needle.Length - 1;
        while (j >= 0 && haystack[i] == needle[j]) {
            if (j == 0) {
                return i;
            }
            i--;
            j--;
        }
        i += Math.Max(offsetTable[needle.Length - 1 - j], 
            charTable[haystack[i]]);
    }
    return -1;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
618
7
Gpt3D_Clone618_7.cs 1 17
Gpt3D_Clone618_7.cs 18 43
----------------------------------------

public static int IndexOf (byte [] haystack, byte [] needle) {
    if (needle.Length == 0) {
        return 0;
    }
    int [] charTable = MakeCharTable (needle);
    int [] offsetTable = MakeOffsetTable (needle);
    for (int i = needle.Length - 1; i < haystack.Length;) {
        int j;
        for (j = needle.Length - 1; needle [j] == haystack [i]; -- i, -- j) {
            if (j == 0) {
                return i;
            }
        }
        i += Math.Max (offsetTable [needle.Length - 1 - j], charTable [haystack [i]]);
    }
    return - 1;
}
----------------------------------------

 public static int IndexOf(byte [] haystack, byte [] needle) {
    // handle null cases
    if (needle.Length == 0) {
        return 0;
    }    
    // pre-process the needle
    int [] charTable = MakeCharTable (needle);
    int [] offsetTable = MakeOffsetTable (needle);
    int i = 0;
    while (i <= haystack.Length - needle.Length) {
        int j = needle.Length - 1;
        while (needle[j] == haystack[i + j]) {
            if (j == 0) {
                return i;
            }
            j--;
        }
        i += Math.Max(offsetTable[needle.Length - 1 - j],
            charTable[haystack[i + j]]);
    }
    return -1;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
618
9
Gpt3D_Clone618_9.cs 1 17
Gpt3D_Clone618_9.cs 18 43
----------------------------------------

public static int IndexOf (byte [] haystack, byte [] needle) {
    if (needle.Length == 0) {
        return 0;
    }
    int [] charTable = MakeCharTable (needle);
    int [] offsetTable = MakeOffsetTable (needle);
    for (int i = needle.Length - 1; i < haystack.Length;) {
        int j;
        for (j = needle.Length - 1; needle [j] == haystack [i]; -- i, -- j) {
            if (j == 0) {
                return i;
            }
        }
        i += Math.Max (offsetTable [needle.Length - 1 - j], charTable [haystack [i]]);
    }
    return - 1;
}
----------------------------------------

 public static int IndexOf (byte [] haystack, byte [] needle) {
    // handle null cases
    if (needle.Length == 0) {
        return 0;
    }
    // pre-process the needle
    int [] charTable = MakeCharTable (needle);
    int [] offsetTable = MakeOffsetTable (needle);
    int i = 0;
    while (i <= haystack.Length - needle.Length) {
        int j = needle.Length - 1;
        while (j >= 0 && haystack[i + j] == needle[j]) {
            if (j == 0) {
                return i;
            }
            j--;
        }
        i += Math.Max(offsetTable[needle.Length - 1 - j], 
            charTable[haystack[i + j]]);
    }
    return -1;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
619
0
Gpt3D_Clone619_0.cs 1 24
Gpt3D_Clone619_0.cs 25 61
----------------------------------------

public int Compare (string s1, string s2) {
    int s1r, s2r;
    var s1n = IsNumeric (s1, out s1r);
    var s2n = IsNumeric (s2, out s2r);
    if (s1n && s2n)
        return s1r - s2r;
    else if (s1n)
        return - 1;
    else if (s2n)
        return 1;
    var num1 = Regex.Match (s1, @"\d+$");
    var num2 = Regex.Match (s2, @"\d+$");
    var onlyString1 = s1.Remove (num1.Index, num1.Length);
    var onlyString2 = s2.Remove (num2.Index, num2.Length);
    if (onlyString1 == onlyString2) {
        if (num1.Success && num2.Success)
            return Convert.ToInt32 (num1.Value) - Convert.ToInt32 (num2.Value);
        else if (num1.Success)
            return 1;
        else if (num2.Success)
            return - 1;
    }
    return string.Compare (s1, s2, true);
}
----------------------------------------

public int Compare(string s1, string s2) 
{ 
     
    int s1result, s2result; 
    bool isNum1 = int.TryParse(s1, out s1result); 
    bool isNum2 = int.TryParse(s2, out s2result); 
     
    if (isNum1 && isNum2) 
        return s1result - s2result; 
    else if (isNum1) 
        return -1; 
    else if (isNum2) 
        return 1; 
     
    Regex re1 = new Regex(@"\d+$"); 
    Regex re2 = new Regex(@"\d+$"); 
     
    Match string1Match = re1.Match(s1); 
    Match string2Match = re2.Match(s2); 
     
    string string1 = s1.Remove(string1Match.Index, string1Match.Length); 
    string string2 = s2.Remove(string2Match.Index, string2Match.Length); 
     
    if (string1 == string2) { 
        if (string1Match.Success && string2Match.Success) 
            return Int32.Parse(string1Match.Value) - Int32.Parse(string2Match.Value); 
        else if (string1Match.Success) 
            return 1; 
        else if (string2Match.Success) 
            return -1; 
    } 
     
    return string.Compare(s1, s2, true); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
619
5
Gpt3D_Clone619_5.cs 1 24
Gpt3D_Clone619_5.cs 25 54
----------------------------------------

public int Compare (string s1, string s2) {
    int s1r, s2r;
    var s1n = IsNumeric (s1, out s1r);
    var s2n = IsNumeric (s2, out s2r);
    if (s1n && s2n)
        return s1r - s2r;
    else if (s1n)
        return - 1;
    else if (s2n)
        return 1;
    var num1 = Regex.Match (s1, @"\d+$");
    var num2 = Regex.Match (s2, @"\d+$");
    var onlyString1 = s1.Remove (num1.Index, num1.Length);
    var onlyString2 = s2.Remove (num2.Index, num2.Length);
    if (onlyString1 == onlyString2) {
        if (num1.Success && num2.Success)
            return Convert.ToInt32 (num1.Value) - Convert.ToInt32 (num2.Value);
        else if (num1.Success)
            return 1;
        else if (num2.Success)
            return - 1;
    }
    return string.Compare (s1, s2, true);
}
----------------------------------------

 
public int Compare(string s1, string s2) 
{
    int s1t, s2t;
    bool num1 = int.TryParse(s1, out s1t);
    bool num2 = int.TryParse(s2, out s2t);
    if (num1 && num2)
        return s1t - s2t;
    else if (num1)
        return -1;
    else if (num2)
        return 1;
    Regex regex1 = new Regex(@"\d+$");
    Regex regex2 = new Regex(@"\d+$");
    Match ms1 = regex1.Match(s1);
    Match ms2 = regex2.Match(s2);
    string str1 = s1.Remove(ms1.Index, ms1.Length);
    string str2 = s2.Remove(ms2.Index, ms2.Length);
    if (str1 == str2) {
        if (ms1.Success && ms2.Success)
            return int.Parse(ms1.Value) - int.Parse(ms2.Value);
        else if (ms1.Success)
            return 1;
        else if (ms2.Success)
            return -1;
    }
    return string.Compare(s1, s2, true);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
619
6
Gpt3D_Clone619_6.cs 1 24
Gpt3D_Clone619_6.cs 25 54
----------------------------------------

public int Compare (string s1, string s2) {
    int s1r, s2r;
    var s1n = IsNumeric (s1, out s1r);
    var s2n = IsNumeric (s2, out s2r);
    if (s1n && s2n)
        return s1r - s2r;
    else if (s1n)
        return - 1;
    else if (s2n)
        return 1;
    var num1 = Regex.Match (s1, @"\d+$");
    var num2 = Regex.Match (s2, @"\d+$");
    var onlyString1 = s1.Remove (num1.Index, num1.Length);
    var onlyString2 = s2.Remove (num2.Index, num2.Length);
    if (onlyString1 == onlyString2) {
        if (num1.Success && num2.Success)
            return Convert.ToInt32 (num1.Value) - Convert.ToInt32 (num2.Value);
        else if (num1.Success)
            return 1;
        else if (num2.Success)
            return - 1;
    }
    return string.Compare (s1, s2, true);
}
----------------------------------------

 
public int Compare (string s1, string s2) 
{
    int s1Value, s2Value;
    bool isNum1 = int.TryParse (s1, out s1Value);
    bool isNum2 = int.TryParse (s2, out s2Value);
    if (isNum1 && isNum2)
        return s1Value - s2Value;
    else if (isNum1)
        return -1;
    else if (isNum2)
        return 1;
    Regex rx1 = new Regex (@"\d+$");
    Regex rx2 = new Regex (@"\d+$");
    Match m1 = rx1.Match (s1);
    Match m2 = rx2.Match (s2);
    string str1 = s1.Remove (m1.Index, m1.Length);
    string str2 = s2.Remove (m2.Index, m2.Length);
    if (str1 == str2) {
        if (m1.Success && m2.Success)
            return int.Parse (m1.Value) - int.Parse (m2.Value);
        else if (m1.Success)
            return 1;
        else if (m2.Success)
            return -1;
    }
    return string.Compare (s1, s2, true);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
619
8
Gpt3D_Clone619_8.cs 1 24
Gpt3D_Clone619_8.cs 25 58
----------------------------------------

public int Compare (string s1, string s2) {
    int s1r, s2r;
    var s1n = IsNumeric (s1, out s1r);
    var s2n = IsNumeric (s2, out s2r);
    if (s1n && s2n)
        return s1r - s2r;
    else if (s1n)
        return - 1;
    else if (s2n)
        return 1;
    var num1 = Regex.Match (s1, @"\d+$");
    var num2 = Regex.Match (s2, @"\d+$");
    var onlyString1 = s1.Remove (num1.Index, num1.Length);
    var onlyString2 = s2.Remove (num2.Index, num2.Length);
    if (onlyString1 == onlyString2) {
        if (num1.Success && num2.Success)
            return Convert.ToInt32 (num1.Value) - Convert.ToInt32 (num2.Value);
        else if (num1.Success)
            return 1;
        else if (num2.Success)
            return - 1;
    }
    return string.Compare (s1, s2, true);
}
----------------------------------------

 
public int Compare(string s1, string s2) 
{    
    int res1, res2;    
    var isNumeric1 = TryParse(s1, out res1);    
    var isNumeric2 = TryParse(s2, out res2);    
    if (isNumeric1 && isNumeric2) {
        return res1 - res2;    
    }    
    else if (isNumeric1) {        
        return -1;    
    }    
    else if (isNumeric2) {       
        return 1;    
    }    
    var number1 = Regex.Match(s1, @"\d+$");    
    var number2 = Regex.Match(s2, @"\d+$");    
    var onlyString1 = s1.Substring(0, number1.Index);    
    var onlyString2 = s2.Substring(0, number2.Index);    
    if (onlyString1 == onlyString2) {        
        if (number1.Success && number2.Success) {            
            return int.Parse(number1.Value) - int.Parse(number2.Value);        
        }        
        else if (number1.Success) {
            return 1;    
        }    
        else if (number2.Success) {
            return -1;    
        }    
    }
    return string.Compare(s1, s2, true);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
0
Gpt3D_Clone61_0.cs 1 23
Gpt3D_Clone61_0.cs 24 55
----------------------------------------

static bool Check2DArray (int [,] data, int [,] find) {
    int dataLen = data.Length;
    int findLen = find.Length;
    for (int i = 0; i < dataLen; i ++) {
        int dataX = i % data.GetLength (0);
        int dataY = i / data.GetLength (0);
        bool okay = true;
        for (int j = 0; j < findLen && okay; j ++) {
            int findX = j % find.GetLength (1);
            int findY = j / find.GetLength (1);
            int checkedX = findX + dataX;
            int checkedY = findY + dataY;
            if (checkedX >= data.GetLength (0) || checkedY >= data.GetLength (1)) {
                okay = false;
                break;
            }
            okay = data [dataY + findY, dataX + findX] == find [findY, findX];
        }
        if (okay)
            return true;
    }
    return false;
}
----------------------------------------

 static bool Check2DArray (int [,] data, int [,] find) {
    int dataLen  = data.Length;
    int findLen = find.Length;
    int dataRows = data.GetLength(0);
    int dataCols = data.GetLength(1);
    int findRows = find.GetLength(0);
    int findCols = find.GetLength(1);
     
    for (int i = 0; i < dataLen; i++) {
        int dataX = i % dataRows;
        int dataY = i / dataRows;
        bool okay = true;
             
        for (int j = 0; j < findLen && okay; j++) {
            int findX = j % findCols;
            int findY = j / findRows;
            int checkedX = findX + dataX;
            int checkedY = findY + dataY;
                 
            if (checkedX >= dataCols || checkedY >= dataRows) {
                okay = false;
                break;
            }
            okay = data[checkedY, checkedX] == find[findY, findX];
        }
        if (okay)
            return true;
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
1
Gpt3D_Clone61_1.cs 1 23
Gpt3D_Clone61_1.cs 24 54
----------------------------------------

static bool Check2DArray (int [,] data, int [,] find) {
    int dataLen = data.Length;
    int findLen = find.Length;
    for (int i = 0; i < dataLen; i ++) {
        int dataX = i % data.GetLength (0);
        int dataY = i / data.GetLength (0);
        bool okay = true;
        for (int j = 0; j < findLen && okay; j ++) {
            int findX = j % find.GetLength (1);
            int findY = j / find.GetLength (1);
            int checkedX = findX + dataX;
            int checkedY = findY + dataY;
            if (checkedX >= data.GetLength (0) || checkedY >= data.GetLength (1)) {
                okay = false;
                break;
            }
            okay = data [dataY + findY, dataX + findX] == find [findY, findX];
        }
        if (okay)
            return true;
    }
    return false;
}
----------------------------------------

 static bool Check2DArray (int [,] data, int [,] find) {
    int dataRows = data.GetLength(0);
    int dataCols = data.GetLength(1);
    int findRows = find.GetLength(0);
    int findCols = find.GetLength(1);
     
    for (int row = 0; row < dataRows; row++) {
        for (int col = 0; col < dataCols; col++) {
            bool okay = true;
            for (int findRow = 0; findRow < findRows && okay; findRow++) {
                for (int findCol = 0; findCol < findCols && okay; findCol++) {
                    int checkedRow = row + findRow;
                    int checkedCol = col + findCol;
                    if (checkedRow >= dataRows || checkedCol >= dataCols) {
                        okay = false;
                        break;
                    }
                    if (okay == false) {
                        break;
                    }
                    okay = data[checkedRow, checkedCol] == find[findRow, findCol];
                }
            }
            if (okay)
                return true;
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
4
Gpt3D_Clone61_4.cs 1 23
Gpt3D_Clone61_4.cs 24 50
----------------------------------------

static bool Check2DArray (int [,] data, int [,] find) {
    int dataLen = data.Length;
    int findLen = find.Length;
    for (int i = 0; i < dataLen; i ++) {
        int dataX = i % data.GetLength (0);
        int dataY = i / data.GetLength (0);
        bool okay = true;
        for (int j = 0; j < findLen && okay; j ++) {
            int findX = j % find.GetLength (1);
            int findY = j / find.GetLength (1);
            int checkedX = findX + dataX;
            int checkedY = findY + dataY;
            if (checkedX >= data.GetLength (0) || checkedY >= data.GetLength (1)) {
                okay = false;
                break;
            }
            okay = data [dataY + findY, dataX + findX] == find [findY, findX];
        }
        if (okay)
            return true;
    }
    return false;
}
----------------------------------------

 static bool Check2DArray (int [,] data, int [,] find) {
    int dataRows = data.GetLength(0);
    int dataCols = data.GetLength(1);
    int findRows = find.GetLength(0);
    int findCols = find.GetLength(1);
    for (int row = 0; row < dataRows; row++) {
        for (int col = 0; col < dataCols; col++) {
            bool okay = true;
            for (int findRow = 0; findRow < findRows && okay; findRow++) {
                for (int findCol = 0; findCol < findCols && okay; findCol++) {
                    int checkedRow = row + findRow;
                    int checkedCol = col + findCol;
                    if (checkedRow < 0 || checkedRow >= dataRows || checkedCol < 0 || checkedCol >= dataCols) {
                        okay = false;
                        break;
                    }
                    okay = data[checkedRow, checkedCol] == find[findRow, findCol];
                }
            }
            if (okay)
                return true;
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
5
Gpt3D_Clone61_5.cs 1 23
Gpt3D_Clone61_5.cs 24 50
----------------------------------------

static bool Check2DArray (int [,] data, int [,] find) {
    int dataLen = data.Length;
    int findLen = find.Length;
    for (int i = 0; i < dataLen; i ++) {
        int dataX = i % data.GetLength (0);
        int dataY = i / data.GetLength (0);
        bool okay = true;
        for (int j = 0; j < findLen && okay; j ++) {
            int findX = j % find.GetLength (1);
            int findY = j / find.GetLength (1);
            int checkedX = findX + dataX;
            int checkedY = findY + dataY;
            if (checkedX >= data.GetLength (0) || checkedY >= data.GetLength (1)) {
                okay = false;
                break;
            }
            okay = data [dataY + findY, dataX + findX] == find [findY, findX];
        }
        if (okay)
            return true;
    }
    return false;
}
----------------------------------------

 static bool Check2DArray (int [,] data, int [,] find) {
    int dataRows = data.GetLength (0);
    int dataCols = data.GetLength (1);
    int findRows = find.GetLength (0);
    int findCols = find.GetLength (1);
    for (int row = 0; row < dataRows; row ++) {
        for (int col = 0; col < dataCols; col ++) {
            bool okay = true;
            for (int findRow = 0; findRow < findRows && okay; findRow ++) {
                for (int findCol = 0; findCol < findCols && okay; findCol ++) {
                    int checkedRow = row + findRow;
                    int checkedCol = col + findCol;
                    if (checkedRow >= data.GetLength (0) || checkedCol >= data.GetLength (1)) {
                        okay = false;
                        break;
                    }
                    okay = data [checkedRow, checkedCol] == find [findRow, findCol];
                }
            }
            if (okay)
                return true;
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
620
3
Gpt3D_Clone620_3.cs 1 9
Gpt3D_Clone620_3.cs 10 22
----------------------------------------

public static void Swap < T > (ref T obj, Func < T, T > cloner, Action < T > op) where T : class {
    while (true) {
        var objBefore = Volatile.Read (ref obj);
        var newObj = cloner (objBefore);
        op (newObj);
        if (Interlocked.CompareExchange (ref obj, newObj, objBefore) == objBefore)
            return;
    }
}
----------------------------------------

  public static void Swap<T>(ref T obj, Func<T,T> cloner = null, Action<T> op = null) where T : class
{
    while (true)
    {
        var storedObj = Volatile.Read(ref obj);
        var newObject = cloner(storedObj);
        if (op != null) op(newObject);
        var success = Interlocked.CompareExchange(ref obj, newObject, storedObj) == storedObj;
        if (success) return;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
620
8
Gpt3D_Clone620_8.cs 1 9
Gpt3D_Clone620_8.cs 10 23
----------------------------------------

public static void Swap < T > (ref T obj, Func < T, T > cloner, Action < T > op) where T : class {
    while (true) {
        var objBefore = Volatile.Read (ref obj);
        var newObj = cloner (objBefore);
        op (newObj);
        if (Interlocked.CompareExchange (ref obj, newObj, objBefore) == objBefore)
            return;
    }
}
----------------------------------------

  public static void Swap<T>(ref T obj, Func<T,T> cloner = null, Action<T> op = null) where T : class
{
    while (true)
    {
        var readObject = obj;
        var newObject = cloner(readObject);
        if(op != null)
            op(newObject);
        if (Interlocked.CompareExchange(ref obj, newObject, readObject) == readObject)
            return;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
620
9
Gpt3D_Clone620_9.cs 1 9
Gpt3D_Clone620_9.cs 10 22
----------------------------------------

public static void Swap < T > (ref T obj, Func < T, T > cloner, Action < T > op) where T : class {
    while (true) {
        var objBefore = Volatile.Read (ref obj);
        var newObj = cloner (objBefore);
        op (newObj);
        if (Interlocked.CompareExchange (ref obj, newObj, objBefore) == objBefore)
            return;
    }
}
----------------------------------------

 public static void Swap<T>(ref T obj, Func < T, T > cloner = null, Action < T > op = null) where T: class 
{
    while (true) 
    { 
        T objBefore = Volatile.Read(ref obj); 
        T newObj = cloner(objBefore); 
        op?.Invoke(newObj); 
        if (Interlocked.CompareExchange(ref obj, newObj, objBefore) == objBefore) 
            return;
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
626
0
Gpt3D_Clone626_0.cs 1 23
Gpt3D_Clone626_0.cs 24 53
----------------------------------------

private void mainForm_KeyDown (object sender, KeyEventArgs e) {
    if (e.KeyCode.Equals (Keys.Enter)) {
        if (txtUserName.Text.Length > 0) {
            if (txtUserName.Focused) {
                Regex rg = new Regex (txtUserName.Text, RegexOptions.IgnoreCase);
                for (int i = 0; i < txtUserName.AutoCompleteCustomSource.Count; i ++) {
                    if (rg.IsMatch (txtUserName.AutoCompleteCustomSource [i])) {
                        txtUserName.Text = txtUserName.AutoCompleteCustomSource [i];
                        txtPassword.Focus ();
                        return;
                    }
                }
            }
            if (txtPassword.Text.Length > 0) {
                btnLogin_Click (null, null);
            } else {
                txtPassword.Focus ();
            }
        } else {
            txtUserName.Focus ();
        }
    }
}
----------------------------------------

   private void mainForm_KeyDown (object sender, KeyEventArgs e) {
    if (e.KeyCode.Equals (Keys.Enter)) {
        if (txtUserName.Text.Length > 0) {
            if (txtUserName.Focused) {
                bool foundSource = false;
                foreach (string source in txtUserName.AutoCompleteCustomSource) {
                    if (source.ToUpperInvariant().Equals(txtUserName.Text.ToUpperInvariant())) {
                        txtUserName.Text = source;
                        txtPassword.Focus();
                        foundSource = true;
                        break;
                    }
                }
                // If the Autocomplete source was found, exit the method
                if(foundSource) {
                    return;
                }
            }
            if (txtPassword.Text.Length > 0) {
                btnLogin_Click (null, null);
            } else {
                txtPassword.Focus ();
            }
        } else {
            txtUserName.Focus ();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
626
1
Gpt3D_Clone626_1.cs 1 23
Gpt3D_Clone626_1.cs 24 87
----------------------------------------

private void mainForm_KeyDown (object sender, KeyEventArgs e) {
    if (e.KeyCode.Equals (Keys.Enter)) {
        if (txtUserName.Text.Length > 0) {
            if (txtUserName.Focused) {
                Regex rg = new Regex (txtUserName.Text, RegexOptions.IgnoreCase);
                for (int i = 0; i < txtUserName.AutoCompleteCustomSource.Count; i ++) {
                    if (rg.IsMatch (txtUserName.AutoCompleteCustomSource [i])) {
                        txtUserName.Text = txtUserName.AutoCompleteCustomSource [i];
                        txtPassword.Focus ();
                        return;
                    }
                }
            }
            if (txtPassword.Text.Length > 0) {
                btnLogin_Click (null, null);
            } else {
                txtPassword.Focus ();
            }
        } else {
            txtUserName.Focus ();
        }
    }
}
----------------------------------------

  private void MainForm_KeyDown (object sender, KeyEventArgs e) {
        if (e.KeyCode.Equals(Keys.Enter))
        {
            if (String.IsNullOrWhiteSpace(txtUserName.Text))
            {
                txtUserName.Focus();
            }
            else
            {
                if (txtUserName.Focused)
                {
                    foreach (string source in txtUserName.AutoCompleteCustomSource)
                    {
                        if (source.Equals(txtUserName.Text, StringComparison.OrdinalIgnoreCase))
                        {
                            txtUserName.Text = source;
                            txtPassword.Focus();
                            return;
                        }
                    }
                }
                if  (String.IsNullOrWhiteSpace(txtPassword.Text))
                {
                    txtPassword.Focus();
                }
                else
                {
                    btnLogin_Click(null, null);
                }
            }
        }
    }
 private void mainForm_KeyDown (object sender, KeyEventArgs e) {
    if (e.KeyCode.Equals (Keys.Enter)) {
        if (txtUserName.Text.Length > 0) {
            if (txtUserName.Focused) {
                bool foundSource = false;
                for (int i = 0; i < txtUserName.AutoCompleteCustomSource.Count; i ++) {
                    if (String.Compare(txtUserName.Text, txtUserName.AutoCompleteCustomSource[i], true) == 0) {
                        txtUserName.Text = txtUserName.AutoCompleteCustomSource[i];
                        txtPassword.Focus();
                        foundSource = true;
                        break;
                    }
                }
                // If the Autocomplete source was found, exit the method
                if(foundSource) {
                    return;
                }
            }
            if (txtPassword.Text.Length > 0) {
                btnLogin_Click (null, null);
            } else {
                txtPassword.Focus ();
            }
        } else {
            txtUserName.Focus ();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
626
3
Gpt3D_Clone626_3.cs 1 23
Gpt3D_Clone626_3.cs 24 53
----------------------------------------

private void mainForm_KeyDown (object sender, KeyEventArgs e) {
    if (e.KeyCode.Equals (Keys.Enter)) {
        if (txtUserName.Text.Length > 0) {
            if (txtUserName.Focused) {
                Regex rg = new Regex (txtUserName.Text, RegexOptions.IgnoreCase);
                for (int i = 0; i < txtUserName.AutoCompleteCustomSource.Count; i ++) {
                    if (rg.IsMatch (txtUserName.AutoCompleteCustomSource [i])) {
                        txtUserName.Text = txtUserName.AutoCompleteCustomSource [i];
                        txtPassword.Focus ();
                        return;
                    }
                }
            }
            if (txtPassword.Text.Length > 0) {
                btnLogin_Click (null, null);
            } else {
                txtPassword.Focus ();
            }
        } else {
            txtUserName.Focus ();
        }
    }
}
----------------------------------------

  private void mainForm_KeyDown (object sender, KeyEventArgs e) {
    if (e.KeyCode.Equals (Keys.Enter)) {
        if (txtUserName.Text.Length > 0) {
            if (txtUserName.Focused) {
                bool foundSource = false;
                for (int i = 0; i < txtUserName.AutoCompleteCustomSource.Count; i++) {
                    if (String.Compare(txtUserName.Text, txtUserName.AutoCompleteCustomSource[i], true) == 0) {
                        txtUserName.Text = txtUserName.AutoCompleteCustomSource[i];
                        txtPassword.Focus();
                        foundSource = true;
                        break;
                    }
                }
                // If the Autocomplete source was found, exit the method
                if (foundSource) {
                    return;
                }
            }
            if (String.IsNullOrEmpty(txtPassword.Text)) {
                txtPassword.Focus();
            } else {
                btnLogin_Click (null, null);
            }
        } else {
            txtUserName.Focus ();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
631
0
Gpt3D_Clone631_0.cs 1 10
Gpt3D_Clone631_0.cs 11 24
----------------------------------------

static void Main (string [] args) {
    ConventionPack cp = new ConventionPack ();
    cp.Add (new StringObjectIdIdGeneratorConventionThatWorks ());
    ConventionRegistry.Register ("TreatAllStringIdsProperly", cp, _ => true);
    var collection = new MongoClient ().GetDatabase ("test").GetCollection < Person > ("persons");
    Person person = new Person ();
    person.Name = "Name";
    collection.InsertOne (person);
    Console.ReadLine ();
}
----------------------------------------

 	static void Main (string [] args) {
    ConventionPack cp = new ConventionPack ();
    cp.Add (new StringObjectIdGenerator ());
    ConventionRegistry.Register ("TreatAllStringIdsProperly", cp, _ => true);
    var client = new MongoClient ();
    var db = client.GetDatabase ("test");
    var coll = db.GetCollection < Person > ("persons");
    Person person = new Person ();
    person.Name = "Name";
    coll.InsertOne (person);
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
631
1
Gpt3D_Clone631_1.cs 1 10
Gpt3D_Clone631_1.cs 11 24
----------------------------------------

static void Main (string [] args) {
    ConventionPack cp = new ConventionPack ();
    cp.Add (new StringObjectIdIdGeneratorConventionThatWorks ());
    ConventionRegistry.Register ("TreatAllStringIdsProperly", cp, _ => true);
    var collection = new MongoClient ().GetDatabase ("test").GetCollection < Person > ("persons");
    Person person = new Person ();
    person.Name = "Name";
    collection.InsertOne (person);
    Console.ReadLine ();
}
----------------------------------------

 	static void Main (string [] args) {
    ConventionPack cp = new ConventionPack ();
    cp.Add (new IdGeneratorConvention ());
    ConventionRegistry.Register ("TreatAllStringIdsProperly", cp, _ => true);
    var mongoClient = new MongoClient ();
    var db = mongoClient.GetDatabase ("test");
    var col = db.GetCollection < Person > ("persons");
    Person person = new Person ();
    person.Name = "Name";
    col.InsertOne (person);
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
631
2
Gpt3D_Clone631_2.cs 1 10
Gpt3D_Clone631_2.cs 11 24
----------------------------------------

static void Main (string [] args) {
    ConventionPack cp = new ConventionPack ();
    cp.Add (new StringObjectIdIdGeneratorConventionThatWorks ());
    ConventionRegistry.Register ("TreatAllStringIdsProperly", cp, _ => true);
    var collection = new MongoClient ().GetDatabase ("test").GetCollection < Person > ("persons");
    Person person = new Person ();
    person.Name = "Name";
    collection.InsertOne (person);
    Console.ReadLine ();
}
----------------------------------------

 	static void Main (string [] args) {
    ConventionPack cp = new ConventionPack ();
    cp.Add (new StringObjectIdGeneratorBetterConvention ());
    ConventionRegistry.Register ("TreatAllStringIdsProperly", cp, _ => true);
    var dbClient = new MongoClient ();
    var db = dbClient.GetDatabase ("test");
    var col = db.GetCollection < Person > ("persons");
    Person person = new Person ();
    person.Name = "Name";
    col.InsertOne (person);
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
631
3
Gpt3D_Clone631_3.cs 1 10
Gpt3D_Clone631_3.cs 11 24
----------------------------------------

static void Main (string [] args) {
    ConventionPack cp = new ConventionPack ();
    cp.Add (new StringObjectIdIdGeneratorConventionThatWorks ());
    ConventionRegistry.Register ("TreatAllStringIdsProperly", cp, _ => true);
    var collection = new MongoClient ().GetDatabase ("test").GetCollection < Person > ("persons");
    Person person = new Person ();
    person.Name = "Name";
    collection.InsertOne (person);
    Console.ReadLine ();
}
----------------------------------------

 static void Main (string [] args) {
    ConventionPack cp = new ConventionPack ();
    cp.Add (new ObjectIdGeneratorSpecialConvention ());
    ConventionRegistry.Register ("TreatAllStringIdsProperly", cp, _ => true);
    var monogClient = new MongoClient ();
    var db = monogClient.GetDatabase ("test");
    var collection = db.GetCollection < Person > ("persons");
    Person person = new Person ();
    person.Name = "Name";
    collection.InsertOne (person);
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
631
4
Gpt3D_Clone631_4.cs 1 10
Gpt3D_Clone631_4.cs 11 24
----------------------------------------

static void Main (string [] args) {
    ConventionPack cp = new ConventionPack ();
    cp.Add (new StringObjectIdIdGeneratorConventionThatWorks ());
    ConventionRegistry.Register ("TreatAllStringIdsProperly", cp, _ => true);
    var collection = new MongoClient ().GetDatabase ("test").GetCollection < Person > ("persons");
    Person person = new Person ();
    person.Name = "Name";
    collection.InsertOne (person);
    Console.ReadLine ();
}
----------------------------------------

  static void Main (string [] args) {
    ConventionPack cp = new ConventionPack ();
    cp.Add (new ObjectIdGeneratorCustomConvention ());
    ConventionRegistry.Register ("TreatAllStringIdsProperly", cp, _ => true);
    var client = new MongoClient ();
    var db = client.GetDatabase ("test");
    var collection = db.GetCollection < Person > ("persons");
    Person person = new Person ();
    person.Name = "Name";
    collection.InsertOne (person);
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
631
5
Gpt3D_Clone631_5.cs 1 10
Gpt3D_Clone631_5.cs 11 24
----------------------------------------

static void Main (string [] args) {
    ConventionPack cp = new ConventionPack ();
    cp.Add (new StringObjectIdIdGeneratorConventionThatWorks ());
    ConventionRegistry.Register ("TreatAllStringIdsProperly", cp, _ => true);
    var collection = new MongoClient ().GetDatabase ("test").GetCollection < Person > ("persons");
    Person person = new Person ();
    person.Name = "Name";
    collection.InsertOne (person);
    Console.ReadLine ();
}
----------------------------------------

 	static void Main (string [] args) {
    ConventionPack cp = new ConventionPack ();
    cp.Add (new StringObjectIdGeneratorConvention ());
    ConventionRegistry.Register ("TreatAllStringIdsProperly", cp, _ => true);
    var client = new MongoClient ();
    var db = client.GetDatabase ("test");
    var col = db.GetCollection < Person > ("persons");
    Person person = new Person ();
    person.Name = "Name";
    col.InsertOne (person);
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
631
6
Gpt3D_Clone631_6.cs 1 10
Gpt3D_Clone631_6.cs 11 24
----------------------------------------

static void Main (string [] args) {
    ConventionPack cp = new ConventionPack ();
    cp.Add (new StringObjectIdIdGeneratorConventionThatWorks ());
    ConventionRegistry.Register ("TreatAllStringIdsProperly", cp, _ => true);
    var collection = new MongoClient ().GetDatabase ("test").GetCollection < Person > ("persons");
    Person person = new Person ();
    person.Name = "Name";
    collection.InsertOne (person);
    Console.ReadLine ();
}
----------------------------------------

 static void Main (string [] args) {
    ConventionPack cp = new ConventionPack ();
    cp.Add (new ObjectIdGeneratorRightConvention ());
    ConventionRegistry.Register ("TreatAllStringIdsProperly", cp, _ => true);
    var client = new MongoClient ();
    var db = client.GetDatabase ("test");
    var coll = db.GetCollection < Person > ("persons");
    Person person = new Person ();
    person.Name = "Name";
    coll.InsertOne (person);
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
636
0
Gpt3D_Clone636_0.cs 1 13
Gpt3D_Clone636_0.cs 14 31
----------------------------------------

public void Execute (Form form, Action guiCommand) {
    _timeout = _totalTimeout;
    while (! form.IsHandleCreated) {
        if (_timeout <= 0)
            return;
        Thread.Sleep (SLEEPING_STEP);
        _timeout -= SLEEPING_STEP;
    }
    if (form.InvokeRequired)
        form.Invoke (guiCommand);
    else
        guiCommand ();
}
----------------------------------------

 public void Execute (Form form, Action guiCommand) {
    _timeout = _totalTimeout;
    if (!form.IsHandleCreated) {
        while (_timeout > 0) {
            Thread.Sleep (SLEEPING_STEP);
            _timeout -= SLEEPING_STEP;
        }
        if (_timeout == 0)
            return;
    }
    if (form.InvokeRequired)
        form.Invoke (guiCommand);
    else
        guiCommand ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
636
1
Gpt3D_Clone636_1.cs 1 13
Gpt3D_Clone636_1.cs 14 29
----------------------------------------

public void Execute (Form form, Action guiCommand) {
    _timeout = _totalTimeout;
    while (! form.IsHandleCreated) {
        if (_timeout <= 0)
            return;
        Thread.Sleep (SLEEPING_STEP);
        _timeout -= SLEEPING_STEP;
    }
    if (form.InvokeRequired)
        form.Invoke (guiCommand);
    else
        guiCommand ();
}
----------------------------------------

 public void Execute (Form form, Action guiCommand) {
    while (!form.IsHandleCreated) {
        if (_totalTimeout > 0) {
            Thread.Sleep(SLEEPING_STEP);
            _totalTimeout -= SLEEPING_STEP;
        } else {
            return;
        }
    }
    if (form.InvokeRequired)
        form.Invoke(guiCommand);
    else 
        guiCommand();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
636
2
Gpt3D_Clone636_2.cs 1 13
Gpt3D_Clone636_2.cs 14 29
----------------------------------------

public void Execute (Form form, Action guiCommand) {
    _timeout = _totalTimeout;
    while (! form.IsHandleCreated) {
        if (_timeout <= 0)
            return;
        Thread.Sleep (SLEEPING_STEP);
        _timeout -= SLEEPING_STEP;
    }
    if (form.InvokeRequired)
        form.Invoke (guiCommand);
    else
        guiCommand ();
}
----------------------------------------

 public void Execute (Form form, Action guiCommand) {
    _timeout = _totalTimeout;
    while (!form.IsHandleCreated && _timeout > 0) {
        Thread.Sleep(SLEEPING_STEP);
        _timeout -= SLEEPING_STEP;
    }
    if (_timeout > 0) {
        if (form.InvokeRequired)
            form.Invoke(guiCommand);
        else 
            guiCommand();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
636
3
Gpt3D_Clone636_3.cs 1 13
Gpt3D_Clone636_3.cs 14 28
----------------------------------------

public void Execute (Form form, Action guiCommand) {
    _timeout = _totalTimeout;
    while (! form.IsHandleCreated) {
        if (_timeout <= 0)
            return;
        Thread.Sleep (SLEEPING_STEP);
        _timeout -= SLEEPING_STEP;
    }
    if (form.InvokeRequired)
        form.Invoke (guiCommand);
    else
        guiCommand ();
}
----------------------------------------

 public void Execute (Form form, Action guiCommand) {
    _timeout = _totalTimeout;
    while (!form.IsHandleCreated && _timeout >= 0) {
        Thread.Sleep(SLEEPING_STEP);
        _timeout -= SLEEPING_STEP;
    }
    if (form.InvokeRequired && _timeout > 0)
        form.Invoke(guiCommand);
    else 
        guiCommand();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
636
4
Gpt3D_Clone636_4.cs 1 13
Gpt3D_Clone636_4.cs 14 26
----------------------------------------

public void Execute (Form form, Action guiCommand) {
    _timeout = _totalTimeout;
    while (! form.IsHandleCreated) {
        if (_timeout <= 0)
            return;
        Thread.Sleep (SLEEPING_STEP);
        _timeout -= SLEEPING_STEP;
    }
    if (form.InvokeRequired)
        form.Invoke (guiCommand);
    else
        guiCommand ();
}
----------------------------------------

 public void Execute (Form form, Action guiCommand) {
    _timeout = _totalTimeout;
    while (_timeout > 0 && !form.IsHandleCreated) {
        Thread.Sleep (SLEEPING_STEP);
        _timeout -= SLEEPING_STEP;
    }
    if (form.InvokeRequired)
        form.Invoke (guiCommand);
    else
        guiCommand ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
636
5
Gpt3D_Clone636_5.cs 1 13
Gpt3D_Clone636_5.cs 14 28
----------------------------------------

public void Execute (Form form, Action guiCommand) {
    _timeout = _totalTimeout;
    while (! form.IsHandleCreated) {
        if (_timeout <= 0)
            return;
        Thread.Sleep (SLEEPING_STEP);
        _timeout -= SLEEPING_STEP;
    }
    if (form.InvokeRequired)
        form.Invoke (guiCommand);
    else
        guiCommand ();
}
----------------------------------------

 public void Execute (Form form, Action guiCommand) {
    while (!form.IsHandleCreated && _totalTimeout > 0) {
        Thread.Sleep(SLEEPING_STEP);
        _totalTimeout -= SLEEPING_STEP;
    }
    if (_totalTimeout > 0) {
        if (form.InvokeRequired)
            form.Invoke(guiCommand);
        else 
            guiCommand();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
636
6
Gpt3D_Clone636_6.cs 1 13
Gpt3D_Clone636_6.cs 14 27
----------------------------------------

public void Execute (Form form, Action guiCommand) {
    _timeout = _totalTimeout;
    while (! form.IsHandleCreated) {
        if (_timeout <= 0)
            return;
        Thread.Sleep (SLEEPING_STEP);
        _timeout -= SLEEPING_STEP;
    }
    if (form.InvokeRequired)
        form.Invoke (guiCommand);
    else
        guiCommand ();
}
----------------------------------------

 public void Execute (Form form, Action guiCommand) {
    _timeout = _totalTimeout;
   while (!form.IsHandleCreated && _timeout > 0) {
        Thread.Sleep(SLEEPING_STEP);
        _timeout -= SLEEPING_STEP;
    }
    if (form.InvokeRequired)
        form.Invoke(guiCommand);
    else 
        guiCommand();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
637
0
Gpt3D_Clone637_0.cs 1 10
Gpt3D_Clone637_0.cs 11 26
----------------------------------------

private static bool IsPowerOfTwo (ulong number) {
    while (number != 0) {
        if (number == 1)
            return true;
        if ((number & 1) == 1)
            return false;
        number = number > > 1;
    }
    return false;
}
----------------------------------------

 private static bool IsPowerOfTwo (ulong number) {
    if (number == 1)
            return true;
    int counter = 0;
    while (number > 1) {
        if ((number & 1) == 1)
            return false;
        counter++;
        number = number >> 1;
    }
    if (counter > 0)
        return true;
    return false;
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
637
5
Gpt3D_Clone637_5.cs 1 10
Gpt3D_Clone637_5.cs 11 22
----------------------------------------

private static bool IsPowerOfTwo (ulong number) {
    while (number != 0) {
        if (number == 1)
            return true;
        if ((number & 1) == 1)
            return false;
        number = number > > 1;
    }
    return false;
}
----------------------------------------

 private static bool IsPowerOfTwo (ulong number) {
    if (number == 1)
            return true;
    while (number > 1) {
        if ((number % 2) != 0)
            return false;
        number /= 2;
    }
    return false;
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
637
8
Gpt3D_Clone637_8.cs 1 10
Gpt3D_Clone637_8.cs 11 22
----------------------------------------

private static bool IsPowerOfTwo (ulong number) {
    while (number != 0) {
        if (number == 1)
            return true;
        if ((number & 1) == 1)
            return false;
        number = number > > 1;
    }
    return false;
}
----------------------------------------

 private static bool IsPowerOfTwo (ulong number) {
    if (number == 1)
            return true;
    while (number > 1) {
        if ((number & 1) != 0)
            return false;
        number /= 2;
    }
    return false;
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
638
0
Gpt3D_Clone638_0.cs 1 17
Gpt3D_Clone638_0.cs 18 50
----------------------------------------

public static void FindGoodFont (Graphics Graf, string sStringToFit, Size TextRoomAvail, ref Font FontToUse, GraphicsUnit FontUnit) {
    SizeF RealSize = Graf.MeasureString (sStringToFit, FontToUse);
    Debug.WriteLine ("big string is {0}, orig size = {1},{2}", sStringToFit, RealSize.Width, RealSize.Height);
    if ((RealSize.Width <= TextRoomAvail.Width) && (RealSize.Height <= TextRoomAvail.Height)) {
        Debug.WriteLine ("The space is big enough already");
        return;
    }
    float HeightScaleRatio = TextRoomAvail.Height / RealSize.Height;
    float WidthScaleRatio = TextRoomAvail.Width / RealSize.Width;
    float ScaleRatio = (HeightScaleRatio < WidthScaleRatio) ? ScaleRatio = HeightScaleRatio : ScaleRatio = WidthScaleRatio;
    float ScaleFontSize = FontToUse.Size * ScaleRatio;
    Debug.WriteLine ("Resizing with scales {0},{1} chose {2}", HeightScaleRatio, WidthScaleRatio, ScaleRatio);
    Debug.WriteLine ("Old font size was {0}, new={1} ", FontToUse.Size, ScaleFontSize);
    FontStyle OldFontStyle = FontToUse.Style;
    FontToUse.Dispose ();
    FontToUse = new Font (FontToUse.FontFamily, ScaleFontSize, OldFontStyle, FontUnit);
}
----------------------------------------

 public static void FindGoodFont (Graphics Graf, string sStringToFit, Size TextRoomAvail, ref Font FontToUse, GraphicsUnit FontUnit)
{
    SizeF RealSize = Graf.MeasureString (sStringToFit, FontToUse);
    Debug.WriteLine ("big string is {0}, orig size = {1},{2}", sStringToFit, RealSize.Width, RealSize.Height);
    if ((RealSize.Width > TextRoomAvail.Width) || (RealSize.Height > TextRoomAvail.Height))
    {
        float HeightScaleRatio = TextRoomAvail.Height / RealSize.Height;
        float WidthScaleRatio = TextRoomAvail.Width / RealSize.Width;
        float ScaleRatio;
        if (HeightScaleRatio < WidthScaleRatio)
        {
            ScaleRatio = HeightScaleRatio;
        } 
        else 
        {
            ScaleRatio = WidthScaleRatio;
        }
        float ScaleFontSize = FontToUse.Size * ScaleRatio;
        Debug.WriteLine ("Resizing with scales {0},{1} chose {2}", HeightScaleRatio, WidthScaleRatio, ScaleRatio);
        Debug.WriteLine ("Old font size was {0}, new={1} ", FontToUse.Size, ScaleFontSize);
        FontStyle OldFontStyle = FontToUse.Style;
        FontToUse.Dispose ();
        FontToUse = new Font (FontToUse.FontFamily, ScaleFontSize, OldFontStyle, FontUnit);
    }
    else 
    {
        Debug.WriteLine ("The space is big enough already");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
639
0
Gpt3D_Clone639_0.cs 1 20
Gpt3D_Clone639_0.cs 21 46
----------------------------------------

private void CalculateGridColWidthsRaport () {
    int diffWidth = 0;
    int colWidthsSum = 0;
    foreach (DataGridViewColumn col in this.dataGrid.Columns) {
        if (col.Visible) {
            colWidthsSum += col.Width;
            if (col.Resizable == DataGridViewTriState.False)
                diffWidth += col.Width;
        }
    }
    colWidthsSum += 24;
    int totalResizableWith = colWidthsSum - diffWidth;
    if (this.ParentForm.WindowState == FormWindowState.Maximized) {
        totalResizableWith = this.dataGrid.Width - diffWidth;
    }
    this.colWidthRaport = new List < decimal > ();
    foreach (DataGridViewColumn col in this.dataGrid.Columns) {
        this.colWidthRaport.Add ((decimal) totalResizableWith / (decimal) col.Width);
    }
}
----------------------------------------

 private void CalculateGridColWidthsRaport() {
   int diffWidth = 0;
   int colWidthsSum = 0;
   int totalResizableWith = 0;
   this.colWidthRaport = new List<decimal>();
   foreach (DataGridViewColumn col in this.dataGrid.Columns) {
       if (col.Visible) {
           colWidthsSum += col.Width;
           if (col.Resizable == DataGridViewTriState.False)
               diffWidth += col.Width;
               this.colWidthRaport.Add((decimal)col.Width / (decimal)colWidthsSum); 
               totalResizableWith += col.Width; 
       }
   }
   colWidthsSum += 24; 
   if (this.ParentForm.WindowState == FormWindowState.Maximized) {
       totalResizableWith = this.dataGrid.Width - diffWidth;
   }
   int totalWidth = this.dataGrid.Width - totalResizableWith; 
   foreach (DataGridViewColumn col in this.dataGrid.Columns) {
       this.colWidthRaport.Add((decimal) totalWidth/ (decimal) col.Width);
   }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
639
1
Gpt3D_Clone639_1.cs 1 20
Gpt3D_Clone639_1.cs 21 44
----------------------------------------

private void CalculateGridColWidthsRaport () {
    int diffWidth = 0;
    int colWidthsSum = 0;
    foreach (DataGridViewColumn col in this.dataGrid.Columns) {
        if (col.Visible) {
            colWidthsSum += col.Width;
            if (col.Resizable == DataGridViewTriState.False)
                diffWidth += col.Width;
        }
    }
    colWidthsSum += 24;
    int totalResizableWith = colWidthsSum - diffWidth;
    if (this.ParentForm.WindowState == FormWindowState.Maximized) {
        totalResizableWith = this.dataGrid.Width - diffWidth;
    }
    this.colWidthRaport = new List < decimal > ();
    foreach (DataGridViewColumn col in this.dataGrid.Columns) {
        this.colWidthRaport.Add ((decimal) totalResizableWith / (decimal) col.Width);
    }
}
----------------------------------------

 private void CalculateGridColWidthsRaport() {
   int diffWidth = 0;
   int colWidthsSum = 0;
   int totalResizableWith = 0;
   this.colWidthRaport = new List<decimal>();
   foreach (DataGridViewColumn col in this.dataGrid.Columns) {
       if (col.Visible) {
           colWidthsSum += col.Width;
           if (col.Resizable == DataGridViewTriState.False)
               diffWidth += col.Width;
               this.colWidthRaport.Add((decimal)col.Width); 
               totalResizableWith += col.Width; 
       }
   }
   int totalWidth = 24; 
   if (this.ParentForm.WindowState == FormWindowState.Maximized) {
       totalResizableWith = this.dataGrid.Width - diffWidth;
   }
   foreach (DataGridViewColumn col in this.dataGrid.Columns) {
       this.colWidthRaport.Add((decimal) totalWidth/ (decimal) colWidthsSum);
   }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
639
2
Gpt3D_Clone639_2.cs 1 20
Gpt3D_Clone639_2.cs 21 47
----------------------------------------

private void CalculateGridColWidthsRaport () {
    int diffWidth = 0;
    int colWidthsSum = 0;
    foreach (DataGridViewColumn col in this.dataGrid.Columns) {
        if (col.Visible) {
            colWidthsSum += col.Width;
            if (col.Resizable == DataGridViewTriState.False)
                diffWidth += col.Width;
        }
    }
    colWidthsSum += 24;
    int totalResizableWith = colWidthsSum - diffWidth;
    if (this.ParentForm.WindowState == FormWindowState.Maximized) {
        totalResizableWith = this.dataGrid.Width - diffWidth;
    }
    this.colWidthRaport = new List < decimal > ();
    foreach (DataGridViewColumn col in this.dataGrid.Columns) {
        this.colWidthRaport.Add ((decimal) totalResizableWith / (decimal) col.Width);
    }
}
----------------------------------------

 private void CalculateGridColWidthsRaport() {
   int diffWidth = 0;
   int colWidthsSum = 0;
   int totalResizableWidth = 0;
   this.colWidthRaport = new List<decimal>();
   foreach (DataGridViewColumn col in this.dataGrid.Columns) {
       if (col.Visible) {
           colWidthsSum += col.Width;
           if (col.Resizable == DataGridViewTriState.False){
               diffWidth += col.Width;
               totalResizableWidth += col.Width; 
           }
           this.colWidthRaport.Add((decimal)totalResizableWidth / (decimal)colWidthsSum);
       }
   }
   colWidthsSum += 24; 
   if (this.ParentForm.WindowState == FormWindowState.Maximized) {
       totalResizableWidth = this.dataGrid.Width - diffWidth;
   }
   foreach (DataGridViewColumn col in this.dataGrid.Columns) {
       this.colWidthRaport.Add((decimal) totalResizableWidth/ (decimal) col.Width);
   }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
639
3
Gpt3D_Clone639_3.cs 1 20
Gpt3D_Clone639_3.cs 21 47
----------------------------------------

private void CalculateGridColWidthsRaport () {
    int diffWidth = 0;
    int colWidthsSum = 0;
    foreach (DataGridViewColumn col in this.dataGrid.Columns) {
        if (col.Visible) {
            colWidthsSum += col.Width;
            if (col.Resizable == DataGridViewTriState.False)
                diffWidth += col.Width;
        }
    }
    colWidthsSum += 24;
    int totalResizableWith = colWidthsSum - diffWidth;
    if (this.ParentForm.WindowState == FormWindowState.Maximized) {
        totalResizableWith = this.dataGrid.Width - diffWidth;
    }
    this.colWidthRaport = new List < decimal > ();
    foreach (DataGridViewColumn col in this.dataGrid.Columns) {
        this.colWidthRaport.Add ((decimal) totalResizableWith / (decimal) col.Width);
    }
}
----------------------------------------

 private void CalculateGridColWidthsRaport() {
   int diffWidth = 0;
   int colWidthsSum = 0;
   int totalResizableWidth = 0;
   this.colWidthRaport = new List<decimal>();
   foreach (DataGridViewColumn col in this.dataGrid.Columns) {
       if (col.Visible) {
           colWidthsSum += col.Width;
           if (col.Resizable == DataGridViewTriState.False){
               diffWidth += col.Width;
           }
       }
   }
   colWidthsSum += 24; 
   if (this.ParentForm.WindowState == FormWindowState.Maximized) {
       totalResizableWidth = this.dataGrid.Width - diffWidth;
   }
   foreach (DataGridViewColumn col in this.dataGrid.Columns) {
       if(col.Resizable == DataGridViewTriState.True) {
           this.colWidthRaport.Add((decimal) (totalResizableWidth - col.Width) / (decimal) colWidthsSum); 
       }
   }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
639
4
Gpt3D_Clone639_4.cs 1 20
Gpt3D_Clone639_4.cs 21 47
----------------------------------------

private void CalculateGridColWidthsRaport () {
    int diffWidth = 0;
    int colWidthsSum = 0;
    foreach (DataGridViewColumn col in this.dataGrid.Columns) {
        if (col.Visible) {
            colWidthsSum += col.Width;
            if (col.Resizable == DataGridViewTriState.False)
                diffWidth += col.Width;
        }
    }
    colWidthsSum += 24;
    int totalResizableWith = colWidthsSum - diffWidth;
    if (this.ParentForm.WindowState == FormWindowState.Maximized) {
        totalResizableWith = this.dataGrid.Width - diffWidth;
    }
    this.colWidthRaport = new List < decimal > ();
    foreach (DataGridViewColumn col in this.dataGrid.Columns) {
        this.colWidthRaport.Add ((decimal) totalResizableWith / (decimal) col.Width);
    }
}
----------------------------------------

 private void CalculateGridColWidthsRaport() {
   int diffWidth = 0;
   int colWidthsSum = 0;
   int totalResizableWidth = 0;
   this.colWidthRaport = new List<decimal>();
   foreach (DataGridViewColumn col in this.dataGrid.Columns) {
       if (col.Visible) {
           colWidthsSum += col.Width;
           if (col.Resizable == DataGridViewTriState.False){
               diffWidth += col.Width;
           }
       }
   }
   colWidthsSum += 24; 
   if (this.ParentForm.WindowState == FormWindowState.Maximized) {
       totalResizableWidth = this.dataGrid.Width - diffWidth;
   }
   foreach (DataGridViewColumn col in this.dataGrid.Columns) {
       if(col.Resizable == DataGridViewTriState.True) {
           this.colWidthRaport.Add((decimal) totalResizableWidth/ (decimal) colWidthsSum);
       }
   }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
639
5
Gpt3D_Clone639_5.cs 1 20
Gpt3D_Clone639_5.cs 21 47
----------------------------------------

private void CalculateGridColWidthsRaport () {
    int diffWidth = 0;
    int colWidthsSum = 0;
    foreach (DataGridViewColumn col in this.dataGrid.Columns) {
        if (col.Visible) {
            colWidthsSum += col.Width;
            if (col.Resizable == DataGridViewTriState.False)
                diffWidth += col.Width;
        }
    }
    colWidthsSum += 24;
    int totalResizableWith = colWidthsSum - diffWidth;
    if (this.ParentForm.WindowState == FormWindowState.Maximized) {
        totalResizableWith = this.dataGrid.Width - diffWidth;
    }
    this.colWidthRaport = new List < decimal > ();
    foreach (DataGridViewColumn col in this.dataGrid.Columns) {
        this.colWidthRaport.Add ((decimal) totalResizableWith / (decimal) col.Width);
    }
}
----------------------------------------

  private void CalculateGridColWidthsRaport() {
   int diffWidth = 0;
   int colWidthsSum = 0;
   int totalResizableWidth = 0;
   this.colWidthRaport = new List<decimal>();
   foreach (DataGridViewColumn col in this.dataGrid.Columns) {
       if (col.Visible) {
           colWidthsSum += col.Width;
           if (col.Resizable == DataGridViewTriState.False){
               diffWidth += col.Width;
           }
       }
   }
   colWidthsSum += 24; 
   if (this.ParentForm.WindowState == FormWindowState.Maximized) {
       totalResizableWidth = this.dataGrid.Width - diffWidth;
   }
   foreach (DataGridViewColumn col in this.dataGrid.Columns) {
       if(col.Resizable == DataGridViewTriState.True) {
           this.colWidthRaport.Add((decimal) totalResizableWidth / (decimal) (colWidthsSum -  col.Width));
       }
   }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
639
6
Gpt3D_Clone639_6.cs 1 20
Gpt3D_Clone639_6.cs 21 46
----------------------------------------

private void CalculateGridColWidthsRaport () {
    int diffWidth = 0;
    int colWidthsSum = 0;
    foreach (DataGridViewColumn col in this.dataGrid.Columns) {
        if (col.Visible) {
            colWidthsSum += col.Width;
            if (col.Resizable == DataGridViewTriState.False)
                diffWidth += col.Width;
        }
    }
    colWidthsSum += 24;
    int totalResizableWith = colWidthsSum - diffWidth;
    if (this.ParentForm.WindowState == FormWindowState.Maximized) {
        totalResizableWith = this.dataGrid.Width - diffWidth;
    }
    this.colWidthRaport = new List < decimal > ();
    foreach (DataGridViewColumn col in this.dataGrid.Columns) {
        this.colWidthRaport.Add ((decimal) totalResizableWith / (decimal) col.Width);
    }
}
----------------------------------------

 private void CalculateGridColWidthsRaport() {
   int diffWidth = 0;
   int colWidthsSum = 0;
   int totalResizableWidth = 0;
   this.colWidthRaport = new List<decimal>();
   foreach (DataGridViewColumn col in this.dataGrid.Columns) {
       if (col.Visible) {
           colWidthsSum += col.Width;
           if (col.Resizable == DataGridViewTriState.False){
               diffWidth += col.Width;
           }
       }
   }
   
   if (this.ParentForm.WindowState == FormWindowState.Maximized) {
       totalResizableWidth = this.dataGrid.Width - diffWidth;
   }
   foreach (DataGridViewColumn col in this.dataGrid.Columns) {
       if(col.Resizable == DataGridViewTriState.True) {
           this.colWidthRaport.Add((decimal) totalResizableWidth/ (decimal) (colWidthsSum + 24));
       }
   }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
639
7
Gpt3D_Clone639_7.cs 1 20
Gpt3D_Clone639_7.cs 21 44
----------------------------------------

private void CalculateGridColWidthsRaport () {
    int diffWidth = 0;
    int colWidthsSum = 0;
    foreach (DataGridViewColumn col in this.dataGrid.Columns) {
        if (col.Visible) {
            colWidthsSum += col.Width;
            if (col.Resizable == DataGridViewTriState.False)
                diffWidth += col.Width;
        }
    }
    colWidthsSum += 24;
    int totalResizableWith = colWidthsSum - diffWidth;
    if (this.ParentForm.WindowState == FormWindowState.Maximized) {
        totalResizableWith = this.dataGrid.Width - diffWidth;
    }
    this.colWidthRaport = new List < decimal > ();
    foreach (DataGridViewColumn col in this.dataGrid.Columns) {
        this.colWidthRaport.Add ((decimal) totalResizableWith / (decimal) col.Width);
    }
}
----------------------------------------

 private void CalculateGridColWidthsRaport() {
   int diffWidth = 0;
   int colWidthsSum = 0;
   int totalResizableWidth = 0;
   this.colWidthRaport = new List<decimal>();
   foreach (DataGridViewColumn col in this.dataGrid.Columns) {
       if (col.Visible) {
           colWidthsSum += col.Width;
           if (col.Resizable == DataGridViewTriState.False){
               diffWidth += col.Width;
           }
       }
   }
   if (this.ParentForm.WindowState == FormWindowState.Maximized) {
       totalResizableWidth = this.dataGrid.Width - diffWidth;
   }
   foreach (DataGridViewColumn col in this.dataGrid.Columns) {
       this.colWidthRaport.Add((decimal) totalResizableWidth/ (decimal) colWidthsSum);
   }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
639
8
Gpt3D_Clone639_8.cs 1 20
Gpt3D_Clone639_8.cs 21 40
----------------------------------------

private void CalculateGridColWidthsRaport () {
    int diffWidth = 0;
    int colWidthsSum = 0;
    foreach (DataGridViewColumn col in this.dataGrid.Columns) {
        if (col.Visible) {
            colWidthsSum += col.Width;
            if (col.Resizable == DataGridViewTriState.False)
                diffWidth += col.Width;
        }
    }
    colWidthsSum += 24;
    int totalResizableWith = colWidthsSum - diffWidth;
    if (this.ParentForm.WindowState == FormWindowState.Maximized) {
        totalResizableWith = this.dataGrid.Width - diffWidth;
    }
    this.colWidthRaport = new List < decimal > ();
    foreach (DataGridViewColumn col in this.dataGrid.Columns) {
        this.colWidthRaport.Add ((decimal) totalResizableWith / (decimal) col.Width);
    }
}
----------------------------------------

 private void CalculateGridColWidthsRaport() {
   int diffWidth = 0;
   int colWidthsSum = 0;
   int totalResizableWith = 0;
   this.colWidthRaport = new List<decimal>();
   foreach (DataGridViewColumn col in this.dataGrid.Columns) {
       if (col.Visible) {
           colWidthsSum += col.Width;
           if (col.Resizable == DataGridViewTriState.False)
               diffWidth += col.Width;
               this.colWidthRaport.Add((decimal)col.Width / (decimal)colWidthsSum); 
               totalResizableWith += col.Width; 
       }
   }
   if (this.ParentForm.WindowState == FormWindowState.Maximized) {
       totalResizableWith = this.dataGrid.Width - diffWidth;
   }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
642
0
Gpt3D_Clone642_0.cs 1 16
Gpt3D_Clone642_0.cs 17 37
----------------------------------------

public static IntPtr getHWnd (string title) {
    IntPtr hWnd = FindWindow (null, title);
    BringWindowToTop (hWnd);
    SetActiveWindow (hWnd);
    SetForegroundWindow (hWnd);
    Thread.Sleep (500);
    foreach (Process process in Process.GetProcessesByName ("IExplore")) {
        if (process.MainWindowTitle.ToLower ().Contains (title.ToLower ())) {
            hWnd = process.MainWindowHandle;
            break;
        }
    }
    EnumProc proc = new EnumProc (EnumWindows);
    EnumChildWindows (hWnd, proc, ref hWnd);
    return hWnd;
}
----------------------------------------

 public static IntPtr getHWnd (string title)
{
     IntPtr hWnd = IntPtr.Zero;
    foreach (Process process in Process.GetProcessesByName("IExplore"))
    {
        if (process.MainWindowTitle.ToLower().Contains(title.ToLower()))
        {
            hWnd = process.MainWindowHandle;
            break;
        }
    }
    BringWindowToTop(hWnd);
    SetActiveWindow(hWnd);
    SetForegroundWindow(hWnd);
    Thread.Sleep(500);
    EnumProc proc = new EnumProc(EnumWindows);
    EnumChildWindows(hWnd, proc, ref hWnd);
    return hWnd;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
643
0
Gpt3D_Clone643_0.cs 1 12
Gpt3D_Clone643_0.cs 13 30
----------------------------------------

private void newToolStripMenuItem_Click (object sender, EventArgs e) {
    if (f2 == null || f2.IsDisposed) {
        f2 = new Form2 ();
        f2.MdiParent = this;
        f2.Show ();
    } else {
        if (f2.WindowState == FormWindowState.Minimized) {
            f2.WindowState = FormWindowState.Normal;
        }
        f2.Activate ();
    }
}
----------------------------------------

 private void newToolStripMenuItem_Click (object sender, EventArgs e) {
    if (f2 == null || f2.IsDisposed) {
        f2 = new Form2();
        f2.MdiParent = this;
        f2.Show();
    } else {
        if (f2.WindowState == FormWindowState.Minimized) {
            f2.WindowState = FormWindowState.Normal;
        }
        f2.Select();
        f2.TopLevel = true;
        f2.TopMost = true;
        f2.BringToFront();
        f2.TopMost = false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
643
1
Gpt3D_Clone643_1.cs 1 12
Gpt3D_Clone643_1.cs 13 29
----------------------------------------

private void newToolStripMenuItem_Click (object sender, EventArgs e) {
    if (f2 == null || f2.IsDisposed) {
        f2 = new Form2 ();
        f2.MdiParent = this;
        f2.Show ();
    } else {
        if (f2.WindowState == FormWindowState.Minimized) {
            f2.WindowState = FormWindowState.Normal;
        }
        f2.Activate ();
    }
}
----------------------------------------

 private void newToolStripMenuItem_Click (object sender, EventArgs e) {
    if (f2 == null || f2.IsDisposed) {
        f2 = new Form2();
        f2.MdiParent = this;
        f2.Show();
    } else {
        if (f2.WindowState == FormWindowState.Minimized) {
            f2.WindowState = FormWindowState.Normal;
        }
        f2.Focus();
        f2.TopMost = true;
        f2.BringToFront();
        f2.TopMost = false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
643
2
Gpt3D_Clone643_2.cs 1 12
Gpt3D_Clone643_2.cs 13 29
----------------------------------------

private void newToolStripMenuItem_Click (object sender, EventArgs e) {
    if (f2 == null || f2.IsDisposed) {
        f2 = new Form2 ();
        f2.MdiParent = this;
        f2.Show ();
    } else {
        if (f2.WindowState == FormWindowState.Minimized) {
            f2.WindowState = FormWindowState.Normal;
        }
        f2.Activate ();
    }
}
----------------------------------------

 private void newToolStripMenuItem_Click (object sender, EventArgs e) {
    if (f2 == null || f2.IsDisposed) {
        f2 = new Form2();
        f2.MdiParent = this;
        f2.Show();
    } else {
        if (f2.WindowState == FormWindowState.Minimized) {
            f2.WindowState = FormWindowState.Normal;
        }
        f2.TopMost = true;
        f2.Focus();
        f2.BringToFront();
        f2.TopMost = false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
644
0
Gpt3D_Clone644_0.cs 1 15
Gpt3D_Clone644_0.cs 16 38
----------------------------------------

static void Main (string [] args) {
    var assemblyFilename = args.FirstOrDefault ();
    if (assemblyFilename != null && File.Exists (assemblyFilename)) {
        try {
            var assembly = Assembly.ReflectionOnlyLoadFrom (assemblyFilename);
            var name = assembly.GetName ();
            using (var file = File.AppendText ("C:\\AssemblyInfo.txt"))
            {
                file.WriteLine ("{0} - {1}", name.FullName, name.Version);
            }}
        catch (Exception ex) {
            throw;
        }
    }
}
----------------------------------------

 static void Main (string [] args) 
{
    var assemblyFilename = args.FirstOrDefault ();
    if (assemblyFilename != null && File.Exists (assemblyFilename)) 
    {
        try 
        {
            var assembly = Assembly.ReflectionOnlyLoadFrom (assemblyFilename);
            var name = assembly.GetName ();
            FileStream fs = new FileStream("C:\\AssemblyInfo.txt", FileMode.Append);
            StreamWriter sw = new StreamWriter(fs);
            sw.WriteLine("{0} - {1}", name.FullName, name.Version);
            sw.Flush();
            fs.Close();
        } 
        catch (Exception ex) 
        {
            throw;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
644
1
Gpt3D_Clone644_1.cs 1 15
Gpt3D_Clone644_1.cs 16 37
----------------------------------------

static void Main (string [] args) {
    var assemblyFilename = args.FirstOrDefault ();
    if (assemblyFilename != null && File.Exists (assemblyFilename)) {
        try {
            var assembly = Assembly.ReflectionOnlyLoadFrom (assemblyFilename);
            var name = assembly.GetName ();
            using (var file = File.AppendText ("C:\\AssemblyInfo.txt"))
            {
                file.WriteLine ("{0} - {1}", name.FullName, name.Version);
            }}
        catch (Exception ex) {
            throw;
        }
    }
}
----------------------------------------

  static void Main(string[] args)
{
    var assemblyFilename = args.FirstOrDefault();
    if (assemblyFilename != null && File.Exists(assemblyFilename))
    {
        try
        {
            var assembly = Assembly.ReflectionOnlyLoadFrom(assemblyFilename);
            var name = assembly.GetName();
            StreamWriter sw = new StreamWriter("C:\\AssemblyInfo.txt", append:true);
            sw.WriteLine("{0} - {1}", name.FullName, name.Version);
            sw.Flush();
            sw.Close();
        }
        catch (Exception ex)
        {
            throw;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
644
2
Gpt3D_Clone644_2.cs 1 15
Gpt3D_Clone644_2.cs 16 33
----------------------------------------

static void Main (string [] args) {
    var assemblyFilename = args.FirstOrDefault ();
    if (assemblyFilename != null && File.Exists (assemblyFilename)) {
        try {
            var assembly = Assembly.ReflectionOnlyLoadFrom (assemblyFilename);
            var name = assembly.GetName ();
            using (var file = File.AppendText ("C:\\AssemblyInfo.txt"))
            {
                file.WriteLine ("{0} - {1}", name.FullName, name.Version);
            }}
        catch (Exception ex) {
            throw;
        }
    }
}
----------------------------------------

  static void Main (string [] args) 
{
    var assemblyFilename = args.FirstOrDefault ();
    if (assemblyFilename != null && File.Exists (assemblyFilename)) {
        try {
            var assembly = Assembly.ReflectionOnlyLoadFrom (assemblyFilename);
            var name = assembly.GetName ();
            FileStream stream = new FileStream("C:\\AssemblyInfo.txt", FileMode.Append);
            StreamWriter writer = new StreamWriter(stream);
            writer.WriteLine("{0} - {1}", name.FullName, name.Version);
            writer.Close();
        } catch (Exception ex) {
            throw;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
644
3
Gpt3D_Clone644_3.cs 1 15
Gpt3D_Clone644_3.cs 16 35
----------------------------------------

static void Main (string [] args) {
    var assemblyFilename = args.FirstOrDefault ();
    if (assemblyFilename != null && File.Exists (assemblyFilename)) {
        try {
            var assembly = Assembly.ReflectionOnlyLoadFrom (assemblyFilename);
            var name = assembly.GetName ();
            using (var file = File.AppendText ("C:\\AssemblyInfo.txt"))
            {
                file.WriteLine ("{0} - {1}", name.FullName, name.Version);
            }}
        catch (Exception ex) {
            throw;
        }
    }
}
----------------------------------------

  static void Main (string [] args)
{
    var assemblyFilename = args.FirstOrDefault();
    if (assemblyFilename != null && File.Exists(assemblyFilename))
    {
        try
        {
            var assembly = Assembly.ReflectionOnlyLoadFrom(assemblyFilename); 
            var name = assembly.GetName();
            FileInfo LogData = new FileInfo("C:\\AssemblyInfo.txt"); 
            LogData.AppendText().WriteLine("{0} - {1}", name.FullName, name.Version);
        }
        catch (Exception ex)
        {
            throw;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
646
0
Gpt3D_Clone646_0.cs 1 31
Gpt3D_Clone646_0.cs 32 62
----------------------------------------

void AcceptClientsTask (TcpListener listener, CancellationToken ct) {
    try {
        while (! ct.IsCancellationRequested) {
            try {
                TcpClient client = listener.AcceptTcpClient ();
                if (! ct.IsCancellationRequested) {
                    functions.Logger.log ("Client connected from " + client.Client.RemoteEndPoint.ToString (), "RemoteConsole", "General", LOGLEVEL.DEBUG);
                    ParseAndReply (client, ct);
                }
            }
            catch (SocketException e) {
                if (e.SocketErrorCode == SocketError.Interrupted) {
                    break;
                } else {
                    throw e;
                }
            }
            catch (Exception E) {
                functions.Logger.log ("Error in Remote Console Loop: " + E.Message, "RemoteConsole", "General", LOGLEVEL.ERROR);
            }
        }
        functions.Logger.log ("Stopping Remote Console Loop", "RemoteConsole", "General", LOGLEVEL.DEBUG);
    }
    catch (Exception E) {
        functions.Logger.log ("Error in Remote Console: " + E.Message, "RemoteConsole", "General", LOGLEVEL.ERROR);
    }
    finally {
        stopped = true;
    }
    functions.Logger.log ("Stopping Remote Console", "RemoteConsole", "General", LOGLEVEL.INFO);
}
----------------------------------------

 void AcceptClientsTask (TcpListener listener, CancellationToken ct) {
    try {
        do {
            TcpClient client = listener.AcceptTcpClient();
            if (ct.IsCancellationRequested) 
            { 
                break; 
            }
            else {
                functions.Logger.log ("Client connected from " + client.Client.RemoteEndPoint.ToString (), "RemoteConsole", "General", LOGLEVEL.DEBUG);
                ParseAndReply(client, ct);
            }
        } while (!ct.IsCancellationRequested);
    }
    catch (SocketException e) {
        if (e.SocketErrorCode != SocketError.Interrupted) {
            throw e;
        }
        break;
    }
    catch (Exception E) {
        functions.Logger.log ("Error in Remote Console Loop: " + E.Message, "RemoteConsole", "General", LOGLEVEL.ERROR);
    }
    finally {
        stopped = true;
        functions.Logger.log ("Stopping Remote Console Loop", "RemoteConsole", "General", LOGLEVEL.DEBUG);
        functions.Logger.log ("Stopping Remote Console", "RemoteConsole", "General", LOGLEVEL.INFO);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
646
1
Gpt3D_Clone646_1.cs 1 31
Gpt3D_Clone646_1.cs 32 57
----------------------------------------

void AcceptClientsTask (TcpListener listener, CancellationToken ct) {
    try {
        while (! ct.IsCancellationRequested) {
            try {
                TcpClient client = listener.AcceptTcpClient ();
                if (! ct.IsCancellationRequested) {
                    functions.Logger.log ("Client connected from " + client.Client.RemoteEndPoint.ToString (), "RemoteConsole", "General", LOGLEVEL.DEBUG);
                    ParseAndReply (client, ct);
                }
            }
            catch (SocketException e) {
                if (e.SocketErrorCode == SocketError.Interrupted) {
                    break;
                } else {
                    throw e;
                }
            }
            catch (Exception E) {
                functions.Logger.log ("Error in Remote Console Loop: " + E.Message, "RemoteConsole", "General", LOGLEVEL.ERROR);
            }
        }
        functions.Logger.log ("Stopping Remote Console Loop", "RemoteConsole", "General", LOGLEVEL.DEBUG);
    }
    catch (Exception E) {
        functions.Logger.log ("Error in Remote Console: " + E.Message, "RemoteConsole", "General", LOGLEVEL.ERROR);
    }
    finally {
        stopped = true;
    }
    functions.Logger.log ("Stopping Remote Console", "RemoteConsole", "General", LOGLEVEL.INFO);
}
----------------------------------------

  void AcceptClientsTask (TcpListener listener, CancellationToken ct) {
    do {
        if (ct.IsCancellationRequested) {
            break;
        }
        try {
            TcpClient client = listener.AcceptTcpClient();
            functions.Logger.log("Client connected from " + client.Client.RemoteEndPoint.ToString (), "RemoteConsole", "General", LOGLEVEL.DEBUG);
            ParseAndReply(client, ct);
        }
        catch (SocketException e) {
            if (e.SocketErrorCode != SocketError.Interrupted) {
                throw e;
            }
            break;
        }
        catch (Exception E) {
            functions.Logger.log("Error in Remote Console Loop: " + E.Message, "RemoteConsole", "General", LOGLEVEL.ERROR);
        }
    } while (!ct.IsCancellationRequested);
    stopped = true;
    functions.Logger.log ("Stopping Remote Console Loop", "RemoteConsole", "General", LOGLEVEL.DEBUG);
    functions.Logger.log ("Stopping Remote Console", "RemoteConsole", "General", LOGLEVEL.INFO);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
646
2
Gpt3D_Clone646_2.cs 1 31
Gpt3D_Clone646_2.cs 32 55
----------------------------------------

void AcceptClientsTask (TcpListener listener, CancellationToken ct) {
    try {
        while (! ct.IsCancellationRequested) {
            try {
                TcpClient client = listener.AcceptTcpClient ();
                if (! ct.IsCancellationRequested) {
                    functions.Logger.log ("Client connected from " + client.Client.RemoteEndPoint.ToString (), "RemoteConsole", "General", LOGLEVEL.DEBUG);
                    ParseAndReply (client, ct);
                }
            }
            catch (SocketException e) {
                if (e.SocketErrorCode == SocketError.Interrupted) {
                    break;
                } else {
                    throw e;
                }
            }
            catch (Exception E) {
                functions.Logger.log ("Error in Remote Console Loop: " + E.Message, "RemoteConsole", "General", LOGLEVEL.ERROR);
            }
        }
        functions.Logger.log ("Stopping Remote Console Loop", "RemoteConsole", "General", LOGLEVEL.DEBUG);
    }
    catch (Exception E) {
        functions.Logger.log ("Error in Remote Console: " + E.Message, "RemoteConsole", "General", LOGLEVEL.ERROR);
    }
    finally {
        stopped = true;
    }
    functions.Logger.log ("Stopping Remote Console", "RemoteConsole", "General", LOGLEVEL.INFO);
}
----------------------------------------

  void AcceptClientsTask (TcpListener listener, CancellationToken ct) {
    try {
        while (!ct.IsCancellationRequested) {
            TcpClient client = listener.AcceptTcpClient();
            if (!ct.IsCancellationRequested) {
                functions.Logger.log("Client connected from " + client.Client.RemoteEndPoint.ToString (), "RemoteConsole", "General", LOGLEVEL.DEBUG);
                ParseAndReply(client, ct);
            }
        }
    } catch (SocketException e) {
        if (e.SocketErrorCode != SocketError.Interrupted) {
            throw e;
        }
        break;
    } catch (Exception E) {
        functions.Logger.log("Error in Remote Console Loop: " + E.Message, "RemoteConsole", "General", LOGLEVEL.ERROR);
    } finally {
        stopped = true;
        functions.Logger.log("Stopping Remote Console Loop", "RemoteConsole", "General", LOGLEVEL.DEBUG);
        functions.Logger.log("Stopping Remote Console", "RemoteConsole", "General", LOGLEVEL.INFO);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
646
3
Gpt3D_Clone646_3.cs 1 31
Gpt3D_Clone646_3.cs 32 53
----------------------------------------

void AcceptClientsTask (TcpListener listener, CancellationToken ct) {
    try {
        while (! ct.IsCancellationRequested) {
            try {
                TcpClient client = listener.AcceptTcpClient ();
                if (! ct.IsCancellationRequested) {
                    functions.Logger.log ("Client connected from " + client.Client.RemoteEndPoint.ToString (), "RemoteConsole", "General", LOGLEVEL.DEBUG);
                    ParseAndReply (client, ct);
                }
            }
            catch (SocketException e) {
                if (e.SocketErrorCode == SocketError.Interrupted) {
                    break;
                } else {
                    throw e;
                }
            }
            catch (Exception E) {
                functions.Logger.log ("Error in Remote Console Loop: " + E.Message, "RemoteConsole", "General", LOGLEVEL.ERROR);
            }
        }
        functions.Logger.log ("Stopping Remote Console Loop", "RemoteConsole", "General", LOGLEVEL.DEBUG);
    }
    catch (Exception E) {
        functions.Logger.log ("Error in Remote Console: " + E.Message, "RemoteConsole", "General", LOGLEVEL.ERROR);
    }
    finally {
        stopped = true;
    }
    functions.Logger.log ("Stopping Remote Console", "RemoteConsole", "General", LOGLEVEL.INFO);
}
----------------------------------------

  void AcceptClientsTask (TcpListener listener, CancellationToken ct) {
    try {
        while (true) {
            if (ct.IsCancellationRequested) break;
            TcpClient client = listener.AcceptTcpClient();
            functions.Logger.log("Client connected from " + client.Client.RemoteEndPoint.ToString (), "RemoteConsole", "General", LOGLEVEL.DEBUG);
            ParseAndReply(client, ct);
        }
    } catch (SocketException e) {
        if (e.SocketErrorCode != SocketError.Interrupted) {
            throw e;
        }
        stopped = true;
    } catch (Exception E) {
        functions.Logger.log("Error in Remote Console Loop: " + E.Message, "RemoteConsole", "General", LOGLEVEL.ERROR);
    } finally {
        functions.Logger.log ("Stopping Remote Console Loop", "RemoteConsole", "General", LOGLEVEL.DEBUG);
        functions.Logger.log ("Stopping Remote Console", "RemoteConsole", "General", LOGLEVEL.INFO);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
646
4
Gpt3D_Clone646_4.cs 1 31
Gpt3D_Clone646_4.cs 32 62
----------------------------------------

void AcceptClientsTask (TcpListener listener, CancellationToken ct) {
    try {
        while (! ct.IsCancellationRequested) {
            try {
                TcpClient client = listener.AcceptTcpClient ();
                if (! ct.IsCancellationRequested) {
                    functions.Logger.log ("Client connected from " + client.Client.RemoteEndPoint.ToString (), "RemoteConsole", "General", LOGLEVEL.DEBUG);
                    ParseAndReply (client, ct);
                }
            }
            catch (SocketException e) {
                if (e.SocketErrorCode == SocketError.Interrupted) {
                    break;
                } else {
                    throw e;
                }
            }
            catch (Exception E) {
                functions.Logger.log ("Error in Remote Console Loop: " + E.Message, "RemoteConsole", "General", LOGLEVEL.ERROR);
            }
        }
        functions.Logger.log ("Stopping Remote Console Loop", "RemoteConsole", "General", LOGLEVEL.DEBUG);
    }
    catch (Exception E) {
        functions.Logger.log ("Error in Remote Console: " + E.Message, "RemoteConsole", "General", LOGLEVEL.ERROR);
    }
    finally {
        stopped = true;
    }
    functions.Logger.log ("Stopping Remote Console", "RemoteConsole", "General", LOGLEVEL.INFO);
}
----------------------------------------

  void AcceptClientsTask (TcpListener listener, CancellationToken ct) {
    while (!ct.IsCancellationRequested) 
    {
        try 
        {
            TcpClient client = listener.AcceptTcpClient();
            if (ct.IsCancellationRequested) 
            {
                break;
            }
            ParseAndReply(client, ct);
        }
        catch (SocketException e) 
        {
            if (e.SocketErrorCode != SocketError.Interrupted) 
            {
                throw e;
            }
            break;
        }
        catch (Exception E) 
        {
            functions.Logger.log ("Error in Remote Console Loop: " + E.Message, "RemoteConsole", "General", LOGLEVEL.ERROR);
        }
    }
    stopped = true;
    functions.Logger.log ("Stopping Remote Console Loop", "RemoteConsole", "General", LOGLEVEL.DEBUG);
    functions.Logger.log ("Stopping Remote Console", "RemoteConsole", "General", LOGLEVEL.INFO);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
646
5
Gpt3D_Clone646_5.cs 1 31
Gpt3D_Clone646_5.cs 32 55
----------------------------------------

void AcceptClientsTask (TcpListener listener, CancellationToken ct) {
    try {
        while (! ct.IsCancellationRequested) {
            try {
                TcpClient client = listener.AcceptTcpClient ();
                if (! ct.IsCancellationRequested) {
                    functions.Logger.log ("Client connected from " + client.Client.RemoteEndPoint.ToString (), "RemoteConsole", "General", LOGLEVEL.DEBUG);
                    ParseAndReply (client, ct);
                }
            }
            catch (SocketException e) {
                if (e.SocketErrorCode == SocketError.Interrupted) {
                    break;
                } else {
                    throw e;
                }
            }
            catch (Exception E) {
                functions.Logger.log ("Error in Remote Console Loop: " + E.Message, "RemoteConsole", "General", LOGLEVEL.ERROR);
            }
        }
        functions.Logger.log ("Stopping Remote Console Loop", "RemoteConsole", "General", LOGLEVEL.DEBUG);
    }
    catch (Exception E) {
        functions.Logger.log ("Error in Remote Console: " + E.Message, "RemoteConsole", "General", LOGLEVEL.ERROR);
    }
    finally {
        stopped = true;
    }
    functions.Logger.log ("Stopping Remote Console", "RemoteConsole", "General", LOGLEVEL.INFO);
}
----------------------------------------

 void AcceptClientsTask (TcpListener listener, CancellationToken ct) {
     while (! ct.IsCancellationRequested) {
        try {
            TcpClient client = listener.AcceptTcpClient();
            if (!ct.IsCancellationRequested) {
                ParseAndReply(client, ct);
            }
        }
        catch (SocketException e) {
            if (e.SocketErrorCode != SocketError.Interrupted) {
                throw e;
            }
            break;
        }
        catch (Exception E) {
            functions.Logger.log ("Error in Remote Console Loop: " + E.Message, "RemoteConsole", "General", LOGLEVEL.ERROR);
        }
    }
    functions.Logger.log ("Stopping Remote Console Loop", "RemoteConsole", "General", LOGLEVEL.DEBUG);
    stopped = true;
    functions.Logger.log ("Stopping Remote Console", "RemoteConsole", "General", LOGLEVEL.INFO);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
647
0
Gpt3D_Clone647_0.cs 1 22
Gpt3D_Clone647_0.cs 23 49
----------------------------------------

public static int Count < TSource > (this IEnumerable < TSource > source) {
    checked {
        if (source == null) {
            throw Error.ArgumentNull ("source");
        }
        ICollection < TSource > collection = source as ICollection < TSource >;
        if (collection != null) {
            return collection.Count;
        }
        ICollection collection2 = source as ICollection;
        if (collection2 != null) {
            return collection2.Count;
        }
        int num = 0;
        using (IEnumerator < TSource > enumerator = source.GetEnumerator ())
        {
            while (enumerator.MoveNext ()) {
                num ++;
            }
        } return num;
    }
}
----------------------------------------

 public static int Count<TSource>(IEnumerable<TSource> source)
    {
        if(source == null) throw new System.ArgumentNullException("source");
        
        ICollection<TSource> collection = source as ICollection<TSource>;
        if (collection != null)
        {
            return collection.Count;
        }
        ICollection collection2 = source as ICollection;
        if (collection2 != null)
        {
            return collection2.Count;
        }
        int count=0;
        using (IEnumerator<TSource> enumerator = source.GetEnumerator())
        {
            while (enumerator.MoveNext())
            {
                checked { count++; }
            }
        }
        return count;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
647
1
Gpt3D_Clone647_1.cs 1 22
Gpt3D_Clone647_1.cs 23 47
----------------------------------------

public static int Count < TSource > (this IEnumerable < TSource > source) {
    checked {
        if (source == null) {
            throw Error.ArgumentNull ("source");
        }
        ICollection < TSource > collection = source as ICollection < TSource >;
        if (collection != null) {
            return collection.Count;
        }
        ICollection collection2 = source as ICollection;
        if (collection2 != null) {
            return collection2.Count;
        }
        int num = 0;
        using (IEnumerator < TSource > enumerator = source.GetEnumerator ())
        {
            while (enumerator.MoveNext ()) {
                num ++;
            }
        } return num;
    }
}
----------------------------------------

 public static int Count<TSource>(IEnumerable<TSource> source)
    {
        if(source == null) throw new System.ArgumentNullException("source");
        ICollection<TSource> collection = source as ICollection<TSource>;
        if(collection != null) {
            return collection.Count;
        }
        ICollection collection2 = source as ICollection;
        if (collection2 != null) {
            return collection2.Count;
        }
        
        int count = 0;
        IEnumerator<TSource> sourceEnumn = source.GetEnumerator();
        while(sourceEnumn.MoveNext())
        {
            checked { count++; }
        }
        return count;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
647
2
Gpt3D_Clone647_2.cs 1 22
Gpt3D_Clone647_2.cs 23 47
----------------------------------------

public static int Count < TSource > (this IEnumerable < TSource > source) {
    checked {
        if (source == null) {
            throw Error.ArgumentNull ("source");
        }
        ICollection < TSource > collection = source as ICollection < TSource >;
        if (collection != null) {
            return collection.Count;
        }
        ICollection collection2 = source as ICollection;
        if (collection2 != null) {
            return collection2.Count;
        }
        int num = 0;
        using (IEnumerator < TSource > enumerator = source.GetEnumerator ())
        {
            while (enumerator.MoveNext ()) {
                num ++;
            }
        } return num;
    }
}
----------------------------------------

 public static int Count<TSource>(IEnumerable<TSource> source)
    {
        if(source == null) throw new System.ArgumentNullException("source");
        ICollection<TSource> collection = source as ICollection<TSource>;
        if(collection != null)
        {
            return collection.Count;
        }
        ICollection collection2 = source as ICollection;
        if(collection2 != null)
        {
            return collection2.Count;
        }
        int count = 0;
        foreach(TSource sourceElem in source)
        {
            checked { count++; }
        }
        return count;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
648
3
Gpt3D_Clone648_3.cs 1 17
Gpt3D_Clone648_3.cs 18 57
----------------------------------------

static void Main (string [] args) {
    if (args.Length == 2) {
        using (StreamReader input = new StreamReader (args [0]))
        using (StreamWriter output = new StreamWriter (args [1]))
        {
            int readSize = 0;
            int blockSize = 100000;
            char [] inBuffer = new char [blockSize];
            char [] outBuffer = new char [blockSize * 3];
            while ((readSize = input.ReadBlock (inBuffer, 0, blockSize)) > 0) {
                int writeSize = TransformBlock (inBuffer, outBuffer, readSize);
                output.Write (outBuffer, 0, writeSize);
            }
        }} else {
        Console.WriteLine ("Usage:  repchar {inputfile} {outputfile}");
    }
}
----------------------------------------

static void Main(string[] args)
{
    if (args.Length == 2)
    {
        StreamReader input = null;
        StreamWriter output = null;
        try
        {
            input = new StreamReader(args[0]);
            output = new StreamWriter(args[1]);
            int readSize = 0;
            int blockSize = 100000;
            char[] inBuffer = new char[blockSize];
            char[] outBuffer = new char[blockSize * 3];
            while ((readSize = input.ReadBlock(inBuffer, 0, blockSize)) > 0)
            {
                int writeSize = TransformBlock(inBuffer, outBuffer, readSize);
                output.Write(outBuffer, 0, writeSize);
            }
        }
        finally
        {
            if (input != null)
            {
                input.Dispose();
            }
            if (output != null)
            {
                output.Dispose();
            }
        }
    }
    else
    {
        Console.WriteLine("Incorrect number of parameters. Please specify input and output files.");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
648
4
Gpt3D_Clone648_4.cs 1 17
Gpt3D_Clone648_4.cs 18 56
----------------------------------------

static void Main (string [] args) {
    if (args.Length == 2) {
        using (StreamReader input = new StreamReader (args [0]))
        using (StreamWriter output = new StreamWriter (args [1]))
        {
            int readSize = 0;
            int blockSize = 100000;
            char [] inBuffer = new char [blockSize];
            char [] outBuffer = new char [blockSize * 3];
            while ((readSize = input.ReadBlock (inBuffer, 0, blockSize)) > 0) {
                int writeSize = TransformBlock (inBuffer, outBuffer, readSize);
                output.Write (outBuffer, 0, writeSize);
            }
        }} else {
        Console.WriteLine ("Usage:  repchar {inputfile} {outputfile}");
    }
}
----------------------------------------

 static void Main(string[] args)
{
	if (args.Length == 2)
    {
	    StreamReader input = null;
	    StreamWriter output = null; 
        try
        {
            input = new StreamReader(args[0]);
            output = new StreamWriter(args[1]);
            int readSize = 0;
            int blockSize = 100000;
            char[] inBuffer = new char[blockSize];
            char[] outBuffer = new char[blockSize * 3];
            while ((readSize = input.ReadBlock(inBuffer, 0, blockSize)) > 0)
            {
                int writeSize = TransformBlock(inBuffer, outBuffer, readSize);
                output.Write(outBuffer, 0, writeSize);
            }
        }
        finally
        {
            if (input != null)
            {
                input.Dispose();
            }
            if (output != null)
            {
                output.Dispose();
            }
        }
    }
    else
    {
        Console.WriteLine("Incorrect number of arguments passed. Please specify input and output files.");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
648
5
Gpt3D_Clone648_5.cs 1 17
Gpt3D_Clone648_5.cs 18 43
----------------------------------------

static void Main (string [] args) {
    if (args.Length == 2) {
        using (StreamReader input = new StreamReader (args [0]))
        using (StreamWriter output = new StreamWriter (args [1]))
        {
            int readSize = 0;
            int blockSize = 100000;
            char [] inBuffer = new char [blockSize];
            char [] outBuffer = new char [blockSize * 3];
            while ((readSize = input.ReadBlock (inBuffer, 0, blockSize)) > 0) {
                int writeSize = TransformBlock (inBuffer, outBuffer, readSize);
                output.Write (outBuffer, 0, writeSize);
            }
        }} else {
        Console.WriteLine ("Usage:  repchar {inputfile} {outputfile}");
    }
}
----------------------------------------

 static void Main(string[] args)
{
    if (args.Length != 2)
    {
        Console.WriteLine("Usage:  repchar {inputfile} {outputfile}");
    }
    else
    {
        using (StreamReader input = new StreamReader(args[0]))
        using (StreamWriter output = new StreamWriter(args[1]))
        {
            int readSize;
            int blockSize = 100000;
            char[] inBuffer = new char[blockSize];
            char[] outBuffer = new char[blockSize * 3];
            while ((readSize = input.Read(inBuffer, 0, blockSize)) > 0)
            {
                int writeSize = TransformBlock(inBuffer, outBuffer, readSize);
                output.Write(outBuffer, 0, writeSize);
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
648
6
Gpt3D_Clone648_6.cs 1 17
Gpt3D_Clone648_6.cs 18 42
----------------------------------------

static void Main (string [] args) {
    if (args.Length == 2) {
        using (StreamReader input = new StreamReader (args [0]))
        using (StreamWriter output = new StreamWriter (args [1]))
        {
            int readSize = 0;
            int blockSize = 100000;
            char [] inBuffer = new char [blockSize];
            char [] outBuffer = new char [blockSize * 3];
            while ((readSize = input.ReadBlock (inBuffer, 0, blockSize)) > 0) {
                int writeSize = TransformBlock (inBuffer, outBuffer, readSize);
                output.Write (outBuffer, 0, writeSize);
            }
        }} else {
        Console.WriteLine ("Usage:  repchar {inputfile} {outputfile}");
    }
}
----------------------------------------

 static void Main(string[] args)
{
    if (args.Length == 2)
    {
        using var input = new StreamReader(args[0])
        using var output = new StreamWriter(args[1])
        {
            int readSize = 0;
            int blockSize = 100000;
            var inBuffer = new char[blockSize];
            var outBuffer = new char[blockSize * 3];
            while ((readSize = input.ReadBlock(inBuffer, 0, blockSize)) > 0)
            {
                int writeSize = TransformBlock(inBuffer, outBuffer, readSize);
                output.Write(outBuffer, 0, writeSize);
            }
        }
    }
    else
    {
        Console.Write("Input and output files are required parameters");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
649
0
Gpt3D_Clone649_0.cs 1 29
Gpt3D_Clone649_0.cs 30 63
----------------------------------------

private static void SetIEVersioneKeyforWebBrowserControl (string appName, int ieval) {
    RegistryKey Regkey = null;
    try {
        Regkey = Microsoft.Win32.Registry.LocalMachine.OpenSubKey (@"SOFTWARE\Microsoft\Internet Explorer\Main\FeatureControl\FEATURE_BROWSER_EMULATION", true);
        if (Regkey == null) {
            YukLoggerObj.logWarnMsg ("Application FEATURE_BROWSER_EMULATION Failed - Registry key Not found");
            return;
        }
        string FindAppkey = Convert.ToString (Regkey.GetValue (appName));
        if (FindAppkey == "" + ieval) {
            YukLoggerObj.logInfoMsg ("Application FEATURE_BROWSER_EMULATION already set to " + ieval);
            Regkey.Close ();
            return;
        }
        Regkey.SetValue (appName, unchecked ((int) ieval), RegistryValueKind.DWord);
        FindAppkey = Convert.ToString (Regkey.GetValue (appName));
        if (FindAppkey == "" + ieval)
            YukLoggerObj.logInfoMsg ("Application FEATURE_BROWSER_EMULATION changed to " + ieval + "; changes will be visible at application restart");
        else
            YukLoggerObj.logWarnMsg ("Application FEATURE_BROWSER_EMULATION setting failed; current value is  " + ieval);
    }
    catch (Exception ex) {
        YukLoggerObj.logWarnMsg ("Application FEATURE_BROWSER_EMULATION setting failed; " + ex.Message);
    }
    finally {
        if (Regkey != null)
            Regkey.Close ();
    }
}
----------------------------------------

 private static void SetIEVersioneKeyforWebBrowserControl (string appName, int ieval) {
    string strRegPath = "SOFTWARE\\Microsoft\\Internet Explorer\\Main\\FeatureControl\\FEATURE_BROWSER_EMULATION"; 
    object value = null; 
    RegistryKey LocalMachine = Registry.LocalMachine; 
    try 
    { 
        RegistryKey Regkey = LocalMachine.OpenSubKey(strRegPath, true); 
        if (Regkey != null) 
        { 
            string FindAppkey = Convert.ToString(Regkey.GetValue(appName)); 
            if (FindAppkey == "" + ieval) 
            { 
                YukLoggerObj.logInfoMsg("Application FEATURE_BROWSER_EMULATION already set to " + ieval);
                Regkey.Close(); 
            } 
            else 
            { 
                Regkey.SetValue(appName, unchecked((int)ieval), RegistryValueKind.DWord); 
                FindAppkey = Convert.ToString(Regkey.GetValue(appName)); 
                if (FindAppkey == "" + ieval) 
                    YukLoggerObj.logInfoMsg("Application FEATURE_BROWSER_EMULATION changed to " + ieval + "; changes will be visible at application restart"); 
                else 
                    YukLoggerObj.logWarnMsg("Application FEATURE_BROWSER_EMULATION setting failed; current value is  " + ieval);
            }
        } 
    }
    catch (System.Security.SecurityException) 
    { 
        Console.WriteLine("No permission to access registry information."); 
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
649
1
Gpt3D_Clone649_1.cs 1 29
Gpt3D_Clone649_1.cs 30 60
----------------------------------------

private static void SetIEVersioneKeyforWebBrowserControl (string appName, int ieval) {
    RegistryKey Regkey = null;
    try {
        Regkey = Microsoft.Win32.Registry.LocalMachine.OpenSubKey (@"SOFTWARE\Microsoft\Internet Explorer\Main\FeatureControl\FEATURE_BROWSER_EMULATION", true);
        if (Regkey == null) {
            YukLoggerObj.logWarnMsg ("Application FEATURE_BROWSER_EMULATION Failed - Registry key Not found");
            return;
        }
        string FindAppkey = Convert.ToString (Regkey.GetValue (appName));
        if (FindAppkey == "" + ieval) {
            YukLoggerObj.logInfoMsg ("Application FEATURE_BROWSER_EMULATION already set to " + ieval);
            Regkey.Close ();
            return;
        }
        Regkey.SetValue (appName, unchecked ((int) ieval), RegistryValueKind.DWord);
        FindAppkey = Convert.ToString (Regkey.GetValue (appName));
        if (FindAppkey == "" + ieval)
            YukLoggerObj.logInfoMsg ("Application FEATURE_BROWSER_EMULATION changed to " + ieval + "; changes will be visible at application restart");
        else
            YukLoggerObj.logWarnMsg ("Application FEATURE_BROWSER_EMULATION setting failed; current value is  " + ieval);
    }
    catch (Exception ex) {
        YukLoggerObj.logWarnMsg ("Application FEATURE_BROWSER_EMULATION setting failed; " + ex.Message);
    }
    finally {
        if (Regkey != null)
            Regkey.Close ();
    }
}
----------------------------------------

 private static void SetIEVersioneKeyforWebBrowserControl (string appName, int ieval) {
    try 
    { 
        RegistryKey Regkey = Microsoft.Win32.Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Internet Explorer\Main\FeatureControl\FEATURE_BROWSER_EMULATION", true); 
        if (Regkey != null) 
        { 
            string FindAppkey = Convert.ToString(Regkey.GetValue(appName)); 
            if (FindAppkey == "" + ieval) 
            { 
                YukLoggerObj.logInfoMsg("Application FEATURE_BROWSER_EMULATION already set to " + ieval);
            } 
            else 
            { 
                Regkey.SetValue(appName, unchecked((int)ieval), RegistryValueKind.DWord);
                FindAppkey = Convert.ToString(Regkey.GetValue(appName)); 
                if (FindAppkey == "" + ieval) 
                    YukLoggerObj.logInfoMsg("Application FEATURE_BROWSER_EMULATION changed to " + ieval + "; changes will be visible at application restart"); 
                else 
                    YukLoggerObj.logWarnMsg("Application FEATURE_BROWSER_EMULATION setting failed; current value is  " + ieval);
            }
          
            Regkey.Close(); 
        } 
    } 
    catch (Exception ex) 
    { 
        YukLoggerObj.logWarnMsg("Application FEATURE_BROWSER_EMULATION setting failed; " + ex.Message); 
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
653
0
Gpt3D_Clone653_0.cs 1 15
Gpt3D_Clone653_0.cs 16 37
----------------------------------------

public static void ProcessSQLScriptFile (string script) {
    try {
        SqlConnection con = new SqlConnection (Properties.Settings.Default.SQLConDefault);
        con.Open ();
        Server server = new Server (new ServerConnection (con));
        server.ConnectionContext.ExecuteNonQuery (script);
        con.Close ();
    }
    catch (SqlException e) {
        Console.WriteLine ("SQL Exception: " + e.Message);
    }
    catch (Exception e) {
        Console.WriteLine ("Exception: " + e.Message);
    }
}
----------------------------------------

   public static void ProcessSQLScriptFile (string script) {
    SqlConnection con = null;
    try {
        con = new SqlConnection (Properties.Settings.Default.SQLConDefault);
        con.Open ();
        Server server = new Server (new ServerConnection (con));
        server.ConnectionContext.ExecuteNonQuery (script);
    }
    catch (SqlException e) {
        Console.WriteLine ("SQL Exception: " + e.Message);
    }
    catch (Exception e) {
        Console.WriteLine ("Exception: " + e.Message);
    }
    finally {
        if(con != null) {
            con.Close();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
656
1
Gpt3D_Clone656_1.cs 1 10
Gpt3D_Clone656_1.cs 11 30
----------------------------------------

public void Run () {
    for (int i = 0; i < 50; i ++) {
        Thread newThread = new Thread (new Worker (ThreadDone).DoWork);
        newThread.IsBackground = true;
        waitingThreads.Enqueue (newThread);
    }
    LaunchWaitingThreads ();
    while (! done)
        Thread.Sleep (200);
}
----------------------------------------

 public void Run()
{
    for (int i = 0; i < 50; i++)
    {
        Thread t = new Thread(new Worker(ThreadDone).DoWork);
        lock (waitingThreads)
        {       
            t.IsBackground = true;
            waitingThreads.Enqueue(t);
            waiter.Set();
        }
    }
    LaunchWaitingThreads();
    while (!done)
    {
        waiter.WaitOne(200);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
656
2
Gpt3D_Clone656_2.cs 1 10
Gpt3D_Clone656_2.cs 11 30
----------------------------------------

public void Run () {
    for (int i = 0; i < 50; i ++) {
        Thread newThread = new Thread (new Worker (ThreadDone).DoWork);
        newThread.IsBackground = true;
        waitingThreads.Enqueue (newThread);
    }
    LaunchWaitingThreads ();
    while (! done)
        Thread.Sleep (200);
}
----------------------------------------

 public void Run()
{
    for (int i = 0; i < 50; i++)
    {
        Thread t = new Thread(new Worker(ThreadDone).DoWork);
        lock (waitingThreads)
        {       
            t.IsBackground = true;
            waitingThreads.Enqueue(t);
            ManualResetEventSlim.Set();
        }
    }
    LaunchWaitingThreads();
    while (!done)
    {
        ManualResetEventSlim.Wait(200);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
656
3
Gpt3D_Clone656_3.cs 1 10
Gpt3D_Clone656_3.cs 11 27
----------------------------------------

public void Run () {
    for (int i = 0; i < 50; i ++) {
        Thread newThread = new Thread (new Worker (ThreadDone).DoWork);
        newThread.IsBackground = true;
        waitingThreads.Enqueue (newThread);
    }
    LaunchWaitingThreads ();
    while (! done)
        Thread.Sleep (200);
}
----------------------------------------

 public void Run()
{
    SynchronizationContext ctx = SynchronizationContext.Current;
    for (int i = 0; i < 50; i++)
    {
        Thread t = new Thread(new Worker(ThreadDone).DoWork);
        t.IsBackground = true;
        ctx.Send(x => {waitingThreads.Enqueue(t);}, null);
    }
    LaunchWaitingThreads();
    while (!done)
    {
        Thread.Sleep(200);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
656
4
Gpt3D_Clone656_4.cs 1 10
Gpt3D_Clone656_4.cs 11 29
----------------------------------------

public void Run () {
    for (int i = 0; i < 50; i ++) {
        Thread newThread = new Thread (new Worker (ThreadDone).DoWork);
        newThread.IsBackground = true;
        waitingThreads.Enqueue (newThread);
    }
    LaunchWaitingThreads ();
    while (! done)
        Thread.Sleep (200);
}
----------------------------------------

 public void Run()
{
    for (int i = 0; i < 50; i++)
    {
        Thread t = new Thread(new Worker(ThreadDone).DoWork);
        lock (waitingThreads)
        {       
            t.IsBackground = true;
            waitingThreads.Enqueue(t);
        }
    }
    LaunchWaitingThreads();
    while (!done)
    {
        Monitor.Wait(waitingThreads, 200);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
656
5
Gpt3D_Clone656_5.cs 1 10
Gpt3D_Clone656_5.cs 11 31
----------------------------------------

public void Run () {
    for (int i = 0; i < 50; i ++) {
        Thread newThread = new Thread (new Worker (ThreadDone).DoWork);
        newThread.IsBackground = true;
        waitingThreads.Enqueue (newThread);
    }
    LaunchWaitingThreads ();
    while (! done)
        Thread.Sleep (200);
}
----------------------------------------

 public void Run()
{
    Task.Factory.StartNew(() =>
    {
        for (int i = 0; i < 50; i++)
        {
            Thread t = new Thread(new Worker(ThreadDone).DoWork);
            t.IsBackground = true;
            waitingThreads.Enqueue(t);
        }
    }).ContinueWith(x =>
    {
        LaunchWaitingThreads();
        while (!done)
        {
            Thread.Sleep(200);
        }
    });
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
656
6
Gpt3D_Clone656_6.cs 1 10
Gpt3D_Clone656_6.cs 11 28
----------------------------------------

public void Run () {
    for (int i = 0; i < 50; i ++) {
        Thread newThread = new Thread (new Worker (ThreadDone).DoWork);
        newThread.IsBackground = true;
        waitingThreads.Enqueue (newThread);
    }
    LaunchWaitingThreads ();
    while (! done)
        Thread.Sleep (200);
}
----------------------------------------

 public void Run()
{
    CountdownEvent locker = new CountdownEvent(50);
    for (int i = 0; i < 50; i++)
    {
        Thread t = new Thread(new Worker(ThreadDone).DoWork);
        t.IsBackground = true;
        waitingThreads.Enqueue(t);
        locker.Signal();
    }
    LaunchWaitingThreads();
    while (!done)
    {
        locker.Wait(200);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
656
7
Gpt3D_Clone656_7.cs 1 10
Gpt3D_Clone656_7.cs 11 28
----------------------------------------

public void Run () {
    for (int i = 0; i < 50; i ++) {
        Thread newThread = new Thread (new Worker (ThreadDone).DoWork);
        newThread.IsBackground = true;
        waitingThreads.Enqueue (newThread);
    }
    LaunchWaitingThreads ();
    while (! done)
        Thread.Sleep (200);
}
----------------------------------------

 public void Run()
{
    SemaphoreSlim locker = new SemaphoreSlim(50);
    for (int i = 0; i < 50; i++)
    {
        locker.Wait();
        Thread t = new Thread(new Worker(ThreadDone).DoWork);
        t.IsBackground = true;
        waitingThreads.Enqueue(t);
    }
    LaunchWaitingThreads();
    while (!done)
    {
        locker.Wait(200);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
656
8
Gpt3D_Clone656_8.cs 1 10
Gpt3D_Clone656_8.cs 11 27
----------------------------------------

public void Run () {
    for (int i = 0; i < 50; i ++) {
        Thread newThread = new Thread (new Worker (ThreadDone).DoWork);
        newThread.IsBackground = true;
        waitingThreads.Enqueue (newThread);
    }
    LaunchWaitingThreads ();
    while (! done)
        Thread.Sleep (200);
}
----------------------------------------

 public void Run()
{
    for (int i = 0; i < 50; i++)
    {
        Worker w = new Worker(ThreadDone);
        Thread t = new Thread(w.DoWork);
        t.IsBackground = true;
        ThreadPool.QueueUserWorkItem(t);
    }
    LaunchWaitingThreads();
    while (!done)
    {
        Thread.Sleep(200);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
656
9
Gpt3D_Clone656_9.cs 1 10
Gpt3D_Clone656_9.cs 11 26
----------------------------------------

public void Run () {
    for (int i = 0; i < 50; i ++) {
        Thread newThread = new Thread (new Worker (ThreadDone).DoWork);
        newThread.IsBackground = true;
        waitingThreads.Enqueue (newThread);
    }
    LaunchWaitingThreads ();
    while (! done)
        Thread.Sleep (200);
}
----------------------------------------

 public void Run()
{
    Parallel.For(0,50, i =>
    {   
        Thread t = new Thread(new Worker(ThreadDone).DoWork);
        t.IsBackground = true;
        waitingThreads.Enqueue(t);
    });
    LaunchWaitingThreads();
    while (!done)
    {
        Thread.Sleep(200);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
657
5
Gpt3D_Clone657_5.cs 1 16
Gpt3D_Clone657_5.cs 17 37
----------------------------------------

private static void Main (string [] args) {
    const int maxPassword = 100000000;
    Console.WriteLine ("Enter number of threads: ");
    var threadsCountString = Console.ReadLine ();
    var threadsCount = int.Parse (threadsCountString);
    var threads = new Thread [threadsCount];
    for (int i = 0; i < threadsCount; i ++) {
        var thread = new Thread (Bruteforce);
        threads [i] = thread;
    }
    time.Start ();
    for (int i = 0; i < threadsCount; i ++) {
        threads [i].Start (new BruteforceParams {StartNumber = i * maxPassword / threadsCount, EndNumber = (i + 1) * maxPassword / threadsCount});
    }
    Console.ReadKey ();
}
----------------------------------------

 private static void Main(string[] args)
{
    const int maxPassword = 100000000;
    Console.Write("Enter number of threads: ");
    int threadsCount = int.Parse(Console.ReadLine());
    Thread[] threads = new Thread[threadsCount];
    for (int i = 0; i < threadsCount; i++)
    {
        threads[i] = new Thread(Bruteforce);
    }
    time.Start();
    for (int i = 0; i < threadsCount; i++)
    {
        int startNum = i * maxPassword / threadsCount;
        int endNum = (i + 1) * maxPassword / threadsCount;
        threads[i].Start(new BruteforceParams{StartNumber = startNum, EndNumber = endNum});
    }
    Console.ReadKey();
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
657
9
Gpt3D_Clone657_9.cs 1 16
Gpt3D_Clone657_9.cs 17 36
----------------------------------------

private static void Main (string [] args) {
    const int maxPassword = 100000000;
    Console.WriteLine ("Enter number of threads: ");
    var threadsCountString = Console.ReadLine ();
    var threadsCount = int.Parse (threadsCountString);
    var threads = new Thread [threadsCount];
    for (int i = 0; i < threadsCount; i ++) {
        var thread = new Thread (Bruteforce);
        threads [i] = thread;
    }
    time.Start ();
    for (int i = 0; i < threadsCount; i ++) {
        threads [i].Start (new BruteforceParams {StartNumber = i * maxPassword / threadsCount, EndNumber = (i + 1) * maxPassword / threadsCount});
    }
    Console.ReadKey ();
}
----------------------------------------

  private static void Main(string[] args)
{
    const int maxPassword = 100000000;
    Console.WriteLine("Enter number of threads: ");
    String threadsCountString = Console.ReadLine();
    int threadsCount = int.Parse(threadsCountString);
    Thread[] threads = new Thread[threadsCount];
    for (int i = 0; i < threadsCount; i++)
    {
        threads[i] = new Thread(Bruteforce);
    }
    time.Start();
    for (int i = 0; i < threadsCount; i++)
    {
        threads[i].Start(new BruteforceParams{StartNumber = i * maxPassword / threadsCount, EndNumber = (i + 1) * maxPassword / threadsCount});
    }
    Console.ReadKey();
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
659
0
Gpt3D_Clone659_0.cs 1 19
Gpt3D_Clone659_0.cs 20 36
----------------------------------------

protected override void OnPaint (PaintEventArgs e) {
    const int inset = 2;
    using (Image offscreenImage = new Bitmap (this.Width, this.Height))
    {
        using (Graphics offscreen = Graphics.FromImage (offscreenImage))
        {
            Rectangle rect = new Rectangle (0, 0, this.Width, this.Height);
            if (ProgressBarRenderer.IsSupported)
                ProgressBarRenderer.DrawHorizontalBar (offscreen, rect);
            rect.Inflate (new Size (- inset, - inset));
            rect.Width = (int) (rect.Width * ((double) this.Value / this.Maximum));
            if (rect.Width == 0)
                rect.Width = 1;
            LinearGradientBrush brush = new LinearGradientBrush (rect, this.BackColor, this.ForeColor, LinearGradientMode.Vertical);
            offscreen.FillRectangle (brush, inset, inset, rect.Width, rect.Height);
            e.Graphics.DrawImage (offscreenImage, 0, 0);
            offscreenImage.Dispose ();
        }}
}
----------------------------------------

 protected override void OnPaint (PaintEventArgs e) {
    const int inset = 0;
    using (Image offscreenImage = new Bitmap (this.Width, this.Height))
    {
        using (Graphics offscreen = Graphics.FromImage (offscreenImage))
        {
            Rectangle rect = new Rectangle (0, 0, this.Width, this.Height);
            rect.Inflate (new Size (- inset, - inset));
            rect.Width = (int) (rect.Width * ((double) this.Value / this.Maximum));
            SolidBrush brush = new SolidBrush (this.ForeColor);
            offscreen.FillRectangle (brush, inset, inset, rect.Width, rect.Height);
            e.Graphics.DrawImage (offscreenImage, 0, 0);
            offscreenImage.Dispose ();
        }}
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
660
6
Gpt3D_Clone660_6.cs 1 13
Gpt3D_Clone660_6.cs 14 29
----------------------------------------

public int solution (int [] array) {
    HashSet < int > found = new HashSet < int > ();
    for (int i = 0; i < array.Length; i ++) {
        if (array [i] > 0) {
            found.Add (array [i]);
        }
    }
    int result = 1;
    while (found.Contains (result)) {
        result ++;
    }
    return result;
}
----------------------------------------

 public int solution(int[] array) {
    HashSet<int> found = new HashSet<int>();
    for (int i = 0; i < array.Length; i++) {
        int num = array[i];
        if (num > 0) {
            found.Add(num);
        }
    }
    int result = 1;
    while (found.Contains(result)) {
        result++;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
660
9
Gpt3D_Clone660_9.cs 1 13
Gpt3D_Clone660_9.cs 14 22
----------------------------------------

public int solution (int [] array) {
    HashSet < int > found = new HashSet < int > ();
    for (int i = 0; i < array.Length; i ++) {
        if (array [i] > 0) {
            found.Add (array [i]);
        }
    }
    int result = 1;
    while (found.Contains (result)) {
        result ++;
    }
    return result;
}
----------------------------------------

 public int solution(int[] array) {
    int result = 1;
    while (array.Contains(result)) {
        result++;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
661
0
Gpt3D_Clone661_0.cs 1 23
Gpt3D_Clone661_0.cs 24 54
----------------------------------------

public static void Main () {
    var dico = new Dictionary < long, uint > ();
    for (long i = 0; i < 7500000; i ++) {
        dico.Add (i, (uint) i);
    }
    using (var stream = File.OpenWrite ("data.dat"))
    using (var writer = new BinaryWriter (stream))
    {
        foreach (var key in dico.Keys) {
            writer.Write (key);
            writer.Write (dico [key]);
        }
    } dico.Clear ();
    using (var stream = File.OpenRead ("data.dat"))
    using (var reader = new BinaryReader (stream))
    {
        while (stream.Position < stream.Length) {
            var key = reader.ReadInt64 ();
            var value = reader.ReadUInt32 ();
            dico.Add (key, value);
        }
    }
}
----------------------------------------

 public static void main() 
{
    var list = new List<long, uint>();
    for (long i = 0; i < 7500000; i++) 
    {
        list.Add(i, (uint)i);
    }
    using (Stream stream = File.OpenWrite("data.dat"))
    using(BinaryWriter writer = new BinaryWriter(stream))
    {
        foreach(var key in list.Keys) 
        {
            writer.Write(key);
            writer.Write(list[key]);
        }
    }
    list.Clear();
    using(Stream stream = File.OpenRead("data.dat"))
    using (BinaryReader reader = new BinaryReader(stream))
    {
        while (stream.Position < stream.Length) 
        {
            long key = reader.ReadInt64();
            uint value = reader.ReadUInt32();
            list.Add(key, value);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
661
1
Gpt3D_Clone661_1.cs 1 23
Gpt3D_Clone661_1.cs 24 54
----------------------------------------

public static void Main () {
    var dico = new Dictionary < long, uint > ();
    for (long i = 0; i < 7500000; i ++) {
        dico.Add (i, (uint) i);
    }
    using (var stream = File.OpenWrite ("data.dat"))
    using (var writer = new BinaryWriter (stream))
    {
        foreach (var key in dico.Keys) {
            writer.Write (key);
            writer.Write (dico [key]);
        }
    } dico.Clear ();
    using (var stream = File.OpenRead ("data.dat"))
    using (var reader = new BinaryReader (stream))
    {
        while (stream.Position < stream.Length) {
            var key = reader.ReadInt64 ();
            var value = reader.ReadUInt32 ();
            dico.Add (key, value);
        }
    }
}
----------------------------------------

 public static void Start() 
{
    var stack = new Stack<long, uint>();
    for (long i = 0; i < 7500000; i ++) 
    {
        stack.Push(i, (uint)i);
    }
    using(FileStream file = File.OpenWrite("data.dat"))
    using(BinaryWriter writer = new BinaryWriter(file))
    {
        foreach(var key in stack.Keys) 
        {
            writer.Write(key);
            writer.Write(stack[key]);
        }
    }
    stack.Clear();
    using(FileStream file = File.OpenRead("data.dat"))
    using(BinaryReader reader = new BinaryReader(file))
    {
        while (file.Position < file.Length) 
        {
            long key = reader.ReadInt64();
            uint value = reader.ReadUInt32();
            stack.Push(key, value);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
662
0
Gpt3D_Clone662_0.cs 1 14
Gpt3D_Clone662_0.cs 15 43
----------------------------------------

private static IEnumerable < T [] > EnumerateCombos < T > (IEnumerable < T > items, List < T > currentCombo, int startIndex, int threshold) {
    if (currentCombo.Count >= threshold) {
        yield break;
    }
    for (int i = startIndex; i < items.Count (); i ++) {
        var item = items.Skip (i).First ();
        currentCombo.Add (item);
        yield return currentCombo.ToArray ();
        foreach (var combo in EnumerateCombos (items, currentCombo, i + 1, threshold)) {
            yield return combo;
        }
        currentCombo.RemoveAt (currentCombo.Count - 1);
    }
}
----------------------------------------

 private static IEnumerable<T[]> EnumerateCombos<T>(IEnumerable<T> items, List<T> currentCombo, int startIndex, int threshold)
{
    if (currentCombo.Count >= threshold)
    {
        yield return currentCombo.ToArray();
    }
    else
    {
        for (int i = startIndex; i < items.Count(); i++)
        {
            var item = items.ElementAt(i);
            currentCombo.Add(item);
            if (currentCombo.Count == threshold)
            {
                yield return currentCombo.ToArray();
            }
            else
            {
                foreach (var combo in EnumerateCombos(items, currentCombo, i + 1, threshold))
                {
                    yield return combo;
                }
            }
            currentCombo.RemoveAt(currentCombo.Count - 1);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
662
1
Gpt3D_Clone662_1.cs 1 14
Gpt3D_Clone662_1.cs 15 43
----------------------------------------

private static IEnumerable < T [] > EnumerateCombos < T > (IEnumerable < T > items, List < T > currentCombo, int startIndex, int threshold) {
    if (currentCombo.Count >= threshold) {
        yield break;
    }
    for (int i = startIndex; i < items.Count (); i ++) {
        var item = items.Skip (i).First ();
        currentCombo.Add (item);
        yield return currentCombo.ToArray ();
        foreach (var combo in EnumerateCombos (items, currentCombo, i + 1, threshold)) {
            yield return combo;
        }
        currentCombo.RemoveAt (currentCombo.Count - 1);
    }
}
----------------------------------------

 private static IEnumerable<T[]> EnumerateCombos<T>(IEnumerable<T> items, List<T> currentCombo, int startIndex, int threshold)
{
    if (currentCombo.Count == threshold)
    {
        yield break;
    }
    else
    {
        for (int i = startIndex; i < items.Count(); i++)
        {
            var item = items.ElementAt(i);
            currentCombo.Add(item);
            if (currentCombo.Count == threshold)
            {
                yield return currentCombo.ToArray();
            }
            else
            {
                foreach (var combo in EnumerateCombos(items, currentCombo, i + 1, threshold))
                {
                    yield return combo;
                }
            }
            currentCombo.RemoveAt(currentCombo.Count - 1);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
662
2
Gpt3D_Clone662_2.cs 1 14
Gpt3D_Clone662_2.cs 15 43
----------------------------------------

private static IEnumerable < T [] > EnumerateCombos < T > (IEnumerable < T > items, List < T > currentCombo, int startIndex, int threshold) {
    if (currentCombo.Count >= threshold) {
        yield break;
    }
    for (int i = startIndex; i < items.Count (); i ++) {
        var item = items.Skip (i).First ();
        currentCombo.Add (item);
        yield return currentCombo.ToArray ();
        foreach (var combo in EnumerateCombos (items, currentCombo, i + 1, threshold)) {
            yield return combo;
        }
        currentCombo.RemoveAt (currentCombo.Count - 1);
    }
}
----------------------------------------

 private static IEnumerable<T[]> EnumerateCombos<T>(IEnumerable<T> items, List<T> currentCombo, int startIndex, int threshold)
{
    if (currentCombo.Count >= threshold)
    {
        yield return currentCombo.ToArray();
    }
    else
    {
        for (int i = startIndex; i < items.Count(); i++)
        {
            var item = items.ElementAt(i);
            currentCombo.Add(item);
            if (currentCombo.Count == threshold)
            {
                yield break;
            }
            else
            {
                foreach (var combo in EnumerateCombos(items, currentCombo, i + 1, threshold))
                {
                    yield return combo;
                }
            }
            currentCombo.RemoveAt(currentCombo.Count - 1);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
662
3
Gpt3D_Clone662_3.cs 1 14
Gpt3D_Clone662_3.cs 15 37
----------------------------------------

private static IEnumerable < T [] > EnumerateCombos < T > (IEnumerable < T > items, List < T > currentCombo, int startIndex, int threshold) {
    if (currentCombo.Count >= threshold) {
        yield break;
    }
    for (int i = startIndex; i < items.Count (); i ++) {
        var item = items.Skip (i).First ();
        currentCombo.Add (item);
        yield return currentCombo.ToArray ();
        foreach (var combo in EnumerateCombos (items, currentCombo, i + 1, threshold)) {
            yield return combo;
        }
        currentCombo.RemoveAt (currentCombo.Count - 1);
    }
}
----------------------------------------

 private static IEnumerable<T[]> EnumerateCombos<T>(IEnumerable<T> items, List<T> currentCombo, int startIndex, int threshold)
{
    if (currentCombo.Count >= threshold)
    {
        yield break;
    }
    else
    { 
        for (int i = startIndex; i < items.Count(); i++)
        {
            var item = items.ElementAt(i);
            currentCombo.Add(item);
            yield return currentCombo.Take(threshold).ToArray();
            foreach (var combo in EnumerateCombos(items, currentCombo, i + 1, threshold))
            { 
                yield return combo;
            }
            currentCombo.RemoveAt(currentCombo.Count - 1);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
662
4
Gpt3D_Clone662_4.cs 1 14
Gpt3D_Clone662_4.cs 15 37
----------------------------------------

private static IEnumerable < T [] > EnumerateCombos < T > (IEnumerable < T > items, List < T > currentCombo, int startIndex, int threshold) {
    if (currentCombo.Count >= threshold) {
        yield break;
    }
    for (int i = startIndex; i < items.Count (); i ++) {
        var item = items.Skip (i).First ();
        currentCombo.Add (item);
        yield return currentCombo.ToArray ();
        foreach (var combo in EnumerateCombos (items, currentCombo, i + 1, threshold)) {
            yield return combo;
        }
        currentCombo.RemoveAt (currentCombo.Count - 1);
    }
}
----------------------------------------

 private static IEnumerable<T[]> EnumerateCombos<T>(IEnumerable<T> items, List<T> currentCombo, int startIndex, int threshold)
{
    if (currentCombo.Count == threshold)
    {
        yield break;
    }
    else
    {
        for (int i = startIndex; i < items.Count(); i++)
        {
            var item = items.ElementAt(i);
            currentCombo.Add(item);
            yield return currentCombo.ToArray();
            foreach (var combo in EnumerateCombos(items, currentCombo, i, threshold))
            {
                yield return combo;
            }
            currentCombo.RemoveAt(currentCombo.Count - 1);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
662
5
Gpt3D_Clone662_5.cs 1 14
Gpt3D_Clone662_5.cs 15 34
----------------------------------------

private static IEnumerable < T [] > EnumerateCombos < T > (IEnumerable < T > items, List < T > currentCombo, int startIndex, int threshold) {
    if (currentCombo.Count >= threshold) {
        yield break;
    }
    for (int i = startIndex; i < items.Count (); i ++) {
        var item = items.Skip (i).First ();
        currentCombo.Add (item);
        yield return currentCombo.ToArray ();
        foreach (var combo in EnumerateCombos (items, currentCombo, i + 1, threshold)) {
            yield return combo;
        }
        currentCombo.RemoveAt (currentCombo.Count - 1);
    }
}
----------------------------------------

 private static IEnumerable<T[]> EnumerateCombos<T>(IEnumerable<T> items, List<T> currentCombo, int startIndex, int threshold)
{
	if (currentCombo.Count >= threshold)
	{
		yield break;
	}
	for (int i = startIndex; i < items.Count(); i++)
	{
		var item = items.ElementAt(i);
		currentCombo.Add(item);
		yield return currentCombo.Take(threshold).ToArray();
		foreach (var combo in EnumerateCombos(items, currentCombo, i, threshold))
		{
			yield return combo;
		}
		currentCombo.RemoveAt(currentCombo.Count - 1);
	}
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
662
6
Gpt3D_Clone662_6.cs 1 14
Gpt3D_Clone662_6.cs 15 36
----------------------------------------

private static IEnumerable < T [] > EnumerateCombos < T > (IEnumerable < T > items, List < T > currentCombo, int startIndex, int threshold) {
    if (currentCombo.Count >= threshold) {
        yield break;
    }
    for (int i = startIndex; i < items.Count (); i ++) {
        var item = items.Skip (i).First ();
        currentCombo.Add (item);
        yield return currentCombo.ToArray ();
        foreach (var combo in EnumerateCombos (items, currentCombo, i + 1, threshold)) {
            yield return combo;
        }
        currentCombo.RemoveAt (currentCombo.Count - 1);
    }
}
----------------------------------------

 private static IEnumerable<T[]> EnumerateCombos<T>(IEnumerable<T> items, List<T> currentCombo, int startIndex, int threshold)
{
    if (currentCombo.Count == threshold)
    {
        yield return currentCombo.ToArray();
    }
    else
    {
        for (int i = startIndex; i < items.Count(); i++)
        {
            var item = items.ElementAt(i);
            currentCombo.Add(item);
            foreach (var combo in EnumerateCombos(items, currentCombo, i + 1, threshold))
            {
                yield return combo;
            }
            currentCombo.RemoveAt(currentCombo.Count - 1);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
663
1
Gpt3D_Clone663_1.cs 1 18
Gpt3D_Clone663_1.cs 19 37
----------------------------------------

public void ReadXml (System.Xml.XmlReader reader) {
    reader.Read ();
    reader.MoveToContent ();
    if (reader.LocalName == "AnotherNode") {
        var innerXml = Serializer < AnotherClass >.CreateSerializer ();
        Remove = (AnotherClass) innerXml.Deserialize (reader);
        reader.MoveToContent ();
    }
    reader.Read ();
    if (reader.IsStartElement ()) {
        do
            {
                var innerXml = Serializer < T >.CreateSerializer ();
                var obj = (T) innerXml.Deserialize (reader);
                Updates.Add (obj);
            } while (reader.MoveToContent () == XmlNodeType.Element);
    }
}
----------------------------------------

	public void ReadXml(System.Xml.XmlReader reader) {
	
	reader.Read();
	reader.MoveToContent();
	if (reader.LocalName == "AnotherNode") {
		var innerXml = Serializer<AnotherClass>.CreateSerializer();
		Remove = (AnotherClass)innerXml.Deserialize(reader);
		reader.ReadToNextSibling("T");
	}
	while (reader.IsStartElement("T")) {
		var innerXml = Serializer<T>.CreateSerializer();
		var obj = (T)innerXml.Deserialize(reader);
		Updates.Add(obj);
		reader.ReadToNextSibling("T");
	}
	reader.Read();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
663
2
Gpt3D_Clone663_2.cs 1 18
Gpt3D_Clone663_2.cs 19 36
----------------------------------------

public void ReadXml (System.Xml.XmlReader reader) {
    reader.Read ();
    reader.MoveToContent ();
    if (reader.LocalName == "AnotherNode") {
        var innerXml = Serializer < AnotherClass >.CreateSerializer ();
        Remove = (AnotherClass) innerXml.Deserialize (reader);
        reader.MoveToContent ();
    }
    reader.Read ();
    if (reader.IsStartElement ()) {
        do
            {
                var innerXml = Serializer < T >.CreateSerializer ();
                var obj = (T) innerXml.Deserialize (reader);
                Updates.Add (obj);
            } while (reader.MoveToContent () == XmlNodeType.Element);
    }
}
----------------------------------------

	public void ReadXml(System.Xml.XmlReader reader) {
	reader.Read();
	if (reader.IsStartElement()) {
		if (reader.LocalName == "AnotherNode") {
			var innerXml = Serializer<AnotherClass>.CreateSerializer();
			Remove = (AnotherClass)innerXml.Deserialize(reader);
			reader.Read();
		}
		while (reader.IsStartElement()) {
			var innerXml = Serializer<T>.CreateSerializer();
			var obj = (T)innerXml.Deserialize(reader);
			Updates.Add(obj);
			reader.Read();
		}
	}
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
663
3
Gpt3D_Clone663_3.cs 1 18
Gpt3D_Clone663_3.cs 19 39
----------------------------------------

public void ReadXml (System.Xml.XmlReader reader) {
    reader.Read ();
    reader.MoveToContent ();
    if (reader.LocalName == "AnotherNode") {
        var innerXml = Serializer < AnotherClass >.CreateSerializer ();
        Remove = (AnotherClass) innerXml.Deserialize (reader);
        reader.MoveToContent ();
    }
    reader.Read ();
    if (reader.IsStartElement ()) {
        do
            {
                var innerXml = Serializer < T >.CreateSerializer ();
                var obj = (T) innerXml.Deserialize (reader);
                Updates.Add (obj);
            } while (reader.MoveToContent () == XmlNodeType.Element);
    }
}
----------------------------------------

	public void ReadXml(System.Xml.XmlReader reader) {
    reader.Read();
    reader.MoveToContent();
    if (reader.LocalName == "AnotherNode")
    {
        var innerXml = Serializer<AnotherClass>.CreateSerializer();
        Remove = (AnotherClass)innerXml.Deserialize(reader);
    }
    while (!reader.EOF)
    {
        if (reader.LocalName == "T")
        {
            var innerXml = Serializer<T>.CreateSerializer();
            var obj = (T)innerXml.Deserialize(reader);
            Updates.Add(obj);
        }
        reader.Read();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
663
4
Gpt3D_Clone663_4.cs 1 18
Gpt3D_Clone663_4.cs 19 49
----------------------------------------

public void ReadXml (System.Xml.XmlReader reader) {
    reader.Read ();
    reader.MoveToContent ();
    if (reader.LocalName == "AnotherNode") {
        var innerXml = Serializer < AnotherClass >.CreateSerializer ();
        Remove = (AnotherClass) innerXml.Deserialize (reader);
        reader.MoveToContent ();
    }
    reader.Read ();
    if (reader.IsStartElement ()) {
        do
            {
                var innerXml = Serializer < T >.CreateSerializer ();
                var obj = (T) innerXml.Deserialize (reader);
                Updates.Add (obj);
            } while (reader.MoveToContent () == XmlNodeType.Element);
    }
}
----------------------------------------

	public void ReadXml(System.Xml.XmlReader reader) {
    reader.Read();
    if (reader.LocalName == "AnotherNode")
    {
        var innerXml = Serializer<AnotherClass>.CreateSerializer();
        Remove = (AnotherClass)innerXml.Deserialize(reader);
    }
    while (reader.ReadToFollowing("T"))
    {
        var innerXml = Serializer<T>.CreateSerializer();
        var obj = (T)innerXml.Deserialize(reader);
        Updates.Add(obj);
    }
}	
	public void ReadXml(System.Xml.XmlReader reader) {
	reader.Read();
	if (reader.LocalName == "AnotherNode") {
		var innerXml = Serializer<AnotherClass>.CreateSerializer();
		Remove = (AnotherClass)innerXml.Deserialize(reader);
		reader.MoveToNextNode();
	}
	while (reader.MoveToContent() == XmlNodeType.Element) {
		var innerXml = Serializer<T>.CreateSerializer();
		var obj = (T)innerXml.Deserialize(reader);
		Updates.Add(obj);
		reader.ReadToNextSibling("T");
	}
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
663
5
Gpt3D_Clone663_5.cs 1 18
Gpt3D_Clone663_5.cs 19 36
----------------------------------------

public void ReadXml (System.Xml.XmlReader reader) {
    reader.Read ();
    reader.MoveToContent ();
    if (reader.LocalName == "AnotherNode") {
        var innerXml = Serializer < AnotherClass >.CreateSerializer ();
        Remove = (AnotherClass) innerXml.Deserialize (reader);
        reader.MoveToContent ();
    }
    reader.Read ();
    if (reader.IsStartElement ()) {
        do
            {
                var innerXml = Serializer < T >.CreateSerializer ();
                var obj = (T) innerXml.Deserialize (reader);
                Updates.Add (obj);
            } while (reader.MoveToContent () == XmlNodeType.Element);
    }
}
----------------------------------------

	public void ReadXml(System.Xml.XmlReader reader) {
    reader.Read();
    reader.MoveToContent();
    if (reader.LocalName == "AnotherNode")
    {
        var innerXml = Serializer<AnotherClass>.CreateSerializer();
        Remove = (AnotherClass)innerXml.Deserialize(reader);
    }
    while (reader.MoveToContent() == XmlNodeType.Element && reader.LocalName == "T")
    {
        var innerXml = Serializer<T>.CreateSerializer();
        var obj = (T)innerXml.Deserialize(reader);
        Updates.Add(obj);
        reader.ReadToNextSibling("T");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
663
6
Gpt3D_Clone663_6.cs 1 18
Gpt3D_Clone663_6.cs 19 49
----------------------------------------

public void ReadXml (System.Xml.XmlReader reader) {
    reader.Read ();
    reader.MoveToContent ();
    if (reader.LocalName == "AnotherNode") {
        var innerXml = Serializer < AnotherClass >.CreateSerializer ();
        Remove = (AnotherClass) innerXml.Deserialize (reader);
        reader.MoveToContent ();
    }
    reader.Read ();
    if (reader.IsStartElement ()) {
        do
            {
                var innerXml = Serializer < T >.CreateSerializer ();
                var obj = (T) innerXml.Deserialize (reader);
                Updates.Add (obj);
            } while (reader.MoveToContent () == XmlNodeType.Element);
    }
}
----------------------------------------

	public void ReadXml(System.Xml.XmlReader reader) {
    reader.Read();
    if (reader.LocalName == "AnotherNode")
    {
        var innerXml = Serializer<AnotherClass>.CreateSerializer();
        Remove = (AnotherClass)innerXml.Deserialize(reader);
    }
    while (reader.ReadToFollowing("T"))
    {
        var innerXml = Serializer<T>.CreateSerializer();
        var obj = (T)innerXml.Deserialize(reader);
        Updates.Add(obj);
    }
}	
	public void ReadXml(System.Xml.XmlReader reader) {
	reader.Read();
	if (reader.LocalName == "AnotherNode") {
		var innerXml = Serializer<AnotherClass>.CreateSerializer();
		Remove = (AnotherClass)innerXml.Deserialize(reader);
		reader.MoveToNextNode();
	}
	while (reader.MoveToContent() == XmlNodeType.Element) {
		var innerXml = Serializer<T>.CreateSerializer();
		var obj = (T)innerXml.Deserialize(reader);
		Updates.Add(obj);
		reader.ReadToNextSibling("T");
	}
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
664
0
Gpt3D_Clone664_0.cs 1 16
Gpt3D_Clone664_0.cs 17 32
----------------------------------------

private void DrawGroupBox (GroupBox box, Graphics g, Color textColor, Color borderColor) {
    if (box != null) {
        Brush textBrush = new SolidBrush (textColor);
        Brush borderBrush = new SolidBrush (borderColor);
        Pen borderPen = new Pen (borderBrush);
        SizeF strSize = g.MeasureString (box.Text, box.Font);
        Rectangle rect = new Rectangle (box.ClientRectangle.X, box.ClientRectangle.Y + (int) (strSize.Height / 2), box.ClientRectangle.Width - 1, box.ClientRectangle.Height - (int) (strSize.Height / 2) - 1);
        g.Clear (this.BackColor);
        g.DrawString (box.Text, box.Font, textBrush, box.Padding.Left, 0);
        g.DrawLine (borderPen, rect.Location, new Point (rect.X, rect.Y + rect.Height));
        g.DrawLine (borderPen, new Point (rect.X + rect.Width, rect.Y), new Point (rect.X + rect.Width, rect.Y + rect.Height));
        g.DrawLine (borderPen, new Point (rect.X, rect.Y + rect.Height), new Point (rect.X + rect.Width, rect.Y + rect.Height));
        g.DrawLine (borderPen, new Point (rect.X, rect.Y), new Point (rect.X + box.Padding.Left, rect.Y));
        g.DrawLine (borderPen, new Point (rect.X + box.Padding.Left + (int) (strSize.Width), rect.Y), new Point (rect.X + rect.Width, rect.Y));
    }
}
----------------------------------------

  private void DrawGroupBox (GroupBox box, Graphics g, Color textColor, Color borderColor) {
    if (box != null) {
        Brush textBrush = new SolidBrush (textColor);
        Brush borderBrush = new SolidBrush (borderColor);
        Pen borderPen = new Pen (borderBrush);
        SizeF strSize = g.MeasureString (box.Text, box.Font);
        Rectangle rect = new Rectangle (box.ClientRectangle.X, box.ClientRectangle.Y + (int) (strSize.Height / 2), box.ClientRectangle.Width - 1, box.ClientRectangle.Height - (int) (strSize.Height / 2) - 1);
        g.Clear (this.BackColor);
        g.DrawString (box.Text, box.Font, textBrush, box.Location);
        g.DrawRectangle (borderPen, rect);
        g.DrawLine (borderPen, new Point (rect.X, rect.Y), new Point (rect.X + box.Padding.Left, rect.Y));
        g.DrawLine (borderPen, new Point (rect.X + box.Padding.Left + (int) (strSize.Width), rect.Y), new Point (rect.X + rect.Width, rect.Y));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
664
1
Gpt3D_Clone664_1.cs 1 16
Gpt3D_Clone664_1.cs 17 32
----------------------------------------

private void DrawGroupBox (GroupBox box, Graphics g, Color textColor, Color borderColor) {
    if (box != null) {
        Brush textBrush = new SolidBrush (textColor);
        Brush borderBrush = new SolidBrush (borderColor);
        Pen borderPen = new Pen (borderBrush);
        SizeF strSize = g.MeasureString (box.Text, box.Font);
        Rectangle rect = new Rectangle (box.ClientRectangle.X, box.ClientRectangle.Y + (int) (strSize.Height / 2), box.ClientRectangle.Width - 1, box.ClientRectangle.Height - (int) (strSize.Height / 2) - 1);
        g.Clear (this.BackColor);
        g.DrawString (box.Text, box.Font, textBrush, box.Padding.Left, 0);
        g.DrawLine (borderPen, rect.Location, new Point (rect.X, rect.Y + rect.Height));
        g.DrawLine (borderPen, new Point (rect.X + rect.Width, rect.Y), new Point (rect.X + rect.Width, rect.Y + rect.Height));
        g.DrawLine (borderPen, new Point (rect.X, rect.Y + rect.Height), new Point (rect.X + rect.Width, rect.Y + rect.Height));
        g.DrawLine (borderPen, new Point (rect.X, rect.Y), new Point (rect.X + box.Padding.Left, rect.Y));
        g.DrawLine (borderPen, new Point (rect.X + box.Padding.Left + (int) (strSize.Width), rect.Y), new Point (rect.X + rect.Width, rect.Y));
    }
}
----------------------------------------

  private void DrawGroupBox (GroupBox box, Graphics g, Color textColor, Color borderColor) {
    if (box != null) {
        Brush textBrush = new SolidBrush (textColor);
        Brush borderBrush = new SolidBrush (borderColor);
        Pen borderPen = new Pen (borderBrush);
        SizeF strSize = g.MeasureString (box.Text, box.Font);
        Rectangle rect = new Rectangle (box.ClientRectangle.X, box.ClientRectangle.Y + (int) (strSize.Height / 2), box.ClientRectangle.Width - 1, box.ClientRectangle.Height - (int) (strSize.Height / 2) - 1);
        g.Clear (this.BackColor);
        g.DrawString (box.Text, box.Font, textBrush, box.Padding.Left, 0);
        g.DrawRectangle (borderPen, box.ClientRectangle);
        g.DrawLine (borderPen, new Point (box.ClientRectangle.X, box.ClientRectangle.Y - (int) (strSize.Height / 2)), new Point (box.ClientRectangle.X + box.Padding.Left, box.ClientRectangle.Y - (int) (strSize.Height / 2))); 
        g.DrawLine (borderPen, new Point (rect.X + box.Padding.Left + (int) (strSize.Width), box.ClientRectangle.Y - (int) (strSize.Height / 2)), new Point (box.ClientRectangle.X + box.ClientRectangle.Width, box.ClientRectangle.Y - (int) (strSize.Height / 2))); 
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
664
2
Gpt3D_Clone664_2.cs 1 16
Gpt3D_Clone664_2.cs 17 39
----------------------------------------

private void DrawGroupBox (GroupBox box, Graphics g, Color textColor, Color borderColor) {
    if (box != null) {
        Brush textBrush = new SolidBrush (textColor);
        Brush borderBrush = new SolidBrush (borderColor);
        Pen borderPen = new Pen (borderBrush);
        SizeF strSize = g.MeasureString (box.Text, box.Font);
        Rectangle rect = new Rectangle (box.ClientRectangle.X, box.ClientRectangle.Y + (int) (strSize.Height / 2), box.ClientRectangle.Width - 1, box.ClientRectangle.Height - (int) (strSize.Height / 2) - 1);
        g.Clear (this.BackColor);
        g.DrawString (box.Text, box.Font, textBrush, box.Padding.Left, 0);
        g.DrawLine (borderPen, rect.Location, new Point (rect.X, rect.Y + rect.Height));
        g.DrawLine (borderPen, new Point (rect.X + rect.Width, rect.Y), new Point (rect.X + rect.Width, rect.Y + rect.Height));
        g.DrawLine (borderPen, new Point (rect.X, rect.Y + rect.Height), new Point (rect.X + rect.Width, rect.Y + rect.Height));
        g.DrawLine (borderPen, new Point (rect.X, rect.Y), new Point (rect.X + box.Padding.Left, rect.Y));
        g.DrawLine (borderPen, new Point (rect.X + box.Padding.Left + (int) (strSize.Width), rect.Y), new Point (rect.X + rect.Width, rect.Y));
    }
}
----------------------------------------

  private void DrawGroupBox (GroupBox box, Graphics g, Color textColor, Color borderColor) {
    if (box != null) {
        Brush textBrush = new SolidBrush (textColor);
        Brush borderBrush = new SolidBrush (borderColor);
        Pen borderPen = new Pen (borderBrush);
        SizeF strSize = g.MeasureString (box.Text, box.Font);
        Rectangle rect = new Rectangle (box.ClientRectangle.X, box.ClientRectangle.Y + (int) (strSize.Height / 2), box.ClientRectangle.Width - 1, box.ClientRectangle.Height - (int) (strSize.Height / 2) - 1);
        g.Clear (this.BackColor);
        g.DrawString (box.Text, box.Font, textBrush, box.Padding.Left, 0);
        g.DrawLines (borderPen, new Point[] { 
            new Point (rect.Location, new Point (rect.X, rect.Y + rect.Height)),
            new Point (rect.X + rect.Width, rect.Y),
            new Point (rect.X + rect.Width, rect.Y + rect.Height),
            new Point (rect.X, rect.Y + rect.Height),
            new Point (rect.X, rect.Y),
            new Point (rect.X + box.Padding.Left - (int) (strSize.Width / 2), rect.Y),
            new Point (rect.X + box.Padding.Left + (int) (strSize.Width / 2), rect.Y),
            new Point (rect.X + rect.Width, rect.Y)
        });
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
664
3
Gpt3D_Clone664_3.cs 1 16
Gpt3D_Clone664_3.cs 17 39
----------------------------------------

private void DrawGroupBox (GroupBox box, Graphics g, Color textColor, Color borderColor) {
    if (box != null) {
        Brush textBrush = new SolidBrush (textColor);
        Brush borderBrush = new SolidBrush (borderColor);
        Pen borderPen = new Pen (borderBrush);
        SizeF strSize = g.MeasureString (box.Text, box.Font);
        Rectangle rect = new Rectangle (box.ClientRectangle.X, box.ClientRectangle.Y + (int) (strSize.Height / 2), box.ClientRectangle.Width - 1, box.ClientRectangle.Height - (int) (strSize.Height / 2) - 1);
        g.Clear (this.BackColor);
        g.DrawString (box.Text, box.Font, textBrush, box.Padding.Left, 0);
        g.DrawLine (borderPen, rect.Location, new Point (rect.X, rect.Y + rect.Height));
        g.DrawLine (borderPen, new Point (rect.X + rect.Width, rect.Y), new Point (rect.X + rect.Width, rect.Y + rect.Height));
        g.DrawLine (borderPen, new Point (rect.X, rect.Y + rect.Height), new Point (rect.X + rect.Width, rect.Y + rect.Height));
        g.DrawLine (borderPen, new Point (rect.X, rect.Y), new Point (rect.X + box.Padding.Left, rect.Y));
        g.DrawLine (borderPen, new Point (rect.X + box.Padding.Left + (int) (strSize.Width), rect.Y), new Point (rect.X + rect.Width, rect.Y));
    }
}
----------------------------------------

  private void DrawGroupBox (GroupBox box, Graphics g, Color textColor, Color borderColor) {
    if (box != null) {
        Brush textBrush = new SolidBrush (textColor);
        Brush borderBrush = new SolidBrush (borderColor);
        Pen borderPen = new Pen (borderBrush);
        SizeF strSize = g.MeasureString (box.Text, box.Font);
        Rectangle rect = new Rectangle (box.ClientRectangle.X, box.ClientRectangle.Y + (int) (strSize.Height / 2), box.ClientRectangle.Width - 1, box.ClientRectangle.Height - (int) (strSize.Height / 2) - 1);
        g.Clear (this.BackColor);
        g.DrawString (box.Text, box.Font, textBrush, box.Padding.Left, 0);
        g.DrawPolygon (borderPen, new Point[] { 
            new Point (rect.Location, new Point (rect.X, rect.Y + rect.Height)),
            new Point (rect.X + rect.Width, rect.Y),
            new Point (rect.X + rect.Width, rect.Y + rect.Height),
            new Point (rect.X, rect.Y + rect.Height),
            new Point (rect.X, rect.Y),
            new Point (rect.X + box.Padding.Left, rect.Y),
            new Point (rect.X + box.Padding.Left + (int) (strSize.Width), rect.Y),
            new Point (rect.X + rect.Width, rect.Y)
        });
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
664
4
Gpt3D_Clone664_4.cs 1 16
Gpt3D_Clone664_4.cs 17 40
----------------------------------------

private void DrawGroupBox (GroupBox box, Graphics g, Color textColor, Color borderColor) {
    if (box != null) {
        Brush textBrush = new SolidBrush (textColor);
        Brush borderBrush = new SolidBrush (borderColor);
        Pen borderPen = new Pen (borderBrush);
        SizeF strSize = g.MeasureString (box.Text, box.Font);
        Rectangle rect = new Rectangle (box.ClientRectangle.X, box.ClientRectangle.Y + (int) (strSize.Height / 2), box.ClientRectangle.Width - 1, box.ClientRectangle.Height - (int) (strSize.Height / 2) - 1);
        g.Clear (this.BackColor);
        g.DrawString (box.Text, box.Font, textBrush, box.Padding.Left, 0);
        g.DrawLine (borderPen, rect.Location, new Point (rect.X, rect.Y + rect.Height));
        g.DrawLine (borderPen, new Point (rect.X + rect.Width, rect.Y), new Point (rect.X + rect.Width, rect.Y + rect.Height));
        g.DrawLine (borderPen, new Point (rect.X, rect.Y + rect.Height), new Point (rect.X + rect.Width, rect.Y + rect.Height));
        g.DrawLine (borderPen, new Point (rect.X, rect.Y), new Point (rect.X + box.Padding.Left, rect.Y));
        g.DrawLine (borderPen, new Point (rect.X + box.Padding.Left + (int) (strSize.Width), rect.Y), new Point (rect.X + rect.Width, rect.Y));
    }
}
----------------------------------------

  private void DrawGroupBox (GroupBox box, Graphics g, Color textColor, Color borderColor) {
    if (box != null) {
        Brush textBrush = new SolidBrush (textColor);
        Brush borderBrush = new SolidBrush (borderColor);
        Pen borderPen = new Pen (borderBrush);
        SizeF strSize = g.MeasureString (box.Text, box.Font);
        Rectangle rect = new Rectangle (box.ClientRectangle.X, box.ClientRectangle.Y + (int) (strSize.Height / 2), box.ClientRectangle.Width - 1, box.ClientRectangle.Height - (int) (strSize.Height / 2) - 1);
        g.Clear (this.BackColor);
        g.DrawString (box.Text, box.Font, textBrush, box.Location);
        g.DrawLines (borderPen, new Point[] { 
            new Point (rect.Location, new Point (rect.X, rect.Y + rect.Height)),
            new Point (rect.X + rect.Width, rect.Y),
            new Point (rect.X + rect.Width, rect.Y + rect.Height),
            new Point (rect.X, rect.Y + rect.Height),
            new Point (rect.X, rect.Y),
            new Point (rect.X + box.Padding.Left, rect.Y),
            new Point (rect.X + box.Padding.Left + (int) (strSize.Width), rect.Y),
            new Point (rect.X + rect.Width, rect.Y)
        });
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
666
0
Gpt3D_Clone666_0.cs 1 17
Gpt3D_Clone666_0.cs 18 39
----------------------------------------

public void InputGrade () {
    int grade;
    string input;
    Console.WriteLine ("{0}\n{1}", "Enter the integer grades in the range 0-100", "Type <Ctrl> z and press Enter to terminate input:");
    counter ++;
    System.Console.Write ("score " + counter + ":");
    input = Console.ReadLine ();
    while (input != null) {
        grade = Convert.ToInt32 (input);
        total += grade;
        gradeCounter ++;
        IncrementLetterGradeCounter (grade);
        counter ++;
        System.Console.Write ("score " + counter + ":");
        input = Console.ReadLine ();
    }
}
----------------------------------------

 public void CalculateGrade()
{
    int grade;
    string input;
    Console.WriteLine ("{0}\n{1}", "Enter the integer grades in the range 0-100", "Type <Ctrl> z and press Enter to terminate input:");
    counter++;
    System.Console.Write ("score " + counter + ":");
    do 
    {
        input = Console.ReadLine();
        if (int.TryParse(input, out grade))
        {
            total += grade;
            gradeCounter++;
            IncrementLetterGradeCounter(grade);
        }
        counter++;
        System.Console.Write ("score " + counter + ":");
    } while (input != null);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
666
1
Gpt3D_Clone666_1.cs 1 17
Gpt3D_Clone666_1.cs 18 36
----------------------------------------

public void InputGrade () {
    int grade;
    string input;
    Console.WriteLine ("{0}\n{1}", "Enter the integer grades in the range 0-100", "Type <Ctrl> z and press Enter to terminate input:");
    counter ++;
    System.Console.Write ("score " + counter + ":");
    input = Console.ReadLine ();
    while (input != null) {
        grade = Convert.ToInt32 (input);
        total += grade;
        gradeCounter ++;
        IncrementLetterGradeCounter (grade);
        counter ++;
        System.Console.Write ("score " + counter + ":");
        input = Console.ReadLine ();
    }
}
----------------------------------------

 public void ReadScore()
{
    int grade;
    string input;
    Console.WriteLine ("{0}\n{1}", "Enter the integer grades in the range 0-100", "Type <Ctrl> z and press Enter to terminate input:");
    counter++;
    System.Console.Write ("score " + counter + ":");
    while ((input = Console.ReadLine()) != null)
    {
        int.TryParse(input, out grade);
        total += grade;
        gradeCounter++;
        IncrementLetterGradeCounter(grade);
        counter++;
        System.Console.Write ("score " + counter + ":");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
666
2
Gpt3D_Clone666_2.cs 1 17
Gpt3D_Clone666_2.cs 18 36
----------------------------------------

public void InputGrade () {
    int grade;
    string input;
    Console.WriteLine ("{0}\n{1}", "Enter the integer grades in the range 0-100", "Type <Ctrl> z and press Enter to terminate input:");
    counter ++;
    System.Console.Write ("score " + counter + ":");
    input = Console.ReadLine ();
    while (input != null) {
        grade = Convert.ToInt32 (input);
        total += grade;
        gradeCounter ++;
        IncrementLetterGradeCounter (grade);
        counter ++;
        System.Console.Write ("score " + counter + ":");
        input = Console.ReadLine ();
    }
}
----------------------------------------

 public void ReadMarks()
{
    int grade;
    string input;
    Console.WriteLine ("{0}\n{1}", "Enter the integer grades in the range 0-100", "Type <Ctrl> z and press Enter to terminate input:");
    counter++;
    System.Console.Write ("score " + counter + ":");
    while ((input = Console.ReadLine()) != "\x1A")
    {
        grade = int.Parse(input, System.Globalization.NumberStyles.AllowHexSpecifier);
        total += grade;
        gradeCounter++;
        IncrementLetterGradeCounter(grade);
        counter++;
        System.Console.Write ("score " + counter + ":");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
666
3
Gpt3D_Clone666_3.cs 1 17
Gpt3D_Clone666_3.cs 18 36
----------------------------------------

public void InputGrade () {
    int grade;
    string input;
    Console.WriteLine ("{0}\n{1}", "Enter the integer grades in the range 0-100", "Type <Ctrl> z and press Enter to terminate input:");
    counter ++;
    System.Console.Write ("score " + counter + ":");
    input = Console.ReadLine ();
    while (input != null) {
        grade = Convert.ToInt32 (input);
        total += grade;
        gradeCounter ++;
        IncrementLetterGradeCounter (grade);
        counter ++;
        System.Console.Write ("score " + counter + ":");
        input = Console.ReadLine ();
    }
}
----------------------------------------

 public void InputScore()
{
    int grade;
    string input;
    Console.WriteLine ("{0}\n{1}", "Enter the integer grades in the range 0-100", "Type <Ctrl> z and press Enter to terminate input:");
    counter++;
    System.Console.Write ("score " + counter + ":");
    while((input = Console.ReadLine()) != "\030")
    {
        grade = Convert.ToSByte(input, 16);
        total += grade;
        gradeCounter++;
        IncrementLetterGradeCounter(grade);
        counter++;
        System.Console.Write ("score " + counter + ":");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
666
4
Gpt3D_Clone666_4.cs 1 17
Gpt3D_Clone666_4.cs 18 36
----------------------------------------

public void InputGrade () {
    int grade;
    string input;
    Console.WriteLine ("{0}\n{1}", "Enter the integer grades in the range 0-100", "Type <Ctrl> z and press Enter to terminate input:");
    counter ++;
    System.Console.Write ("score " + counter + ":");
    input = Console.ReadLine ();
    while (input != null) {
        grade = Convert.ToInt32 (input);
        total += grade;
        gradeCounter ++;
        IncrementLetterGradeCounter (grade);
        counter ++;
        System.Console.Write ("score " + counter + ":");
        input = Console.ReadLine ();
    }
}
----------------------------------------

 public void InputOutcomes()
{
    int grade;
    string input;
    Console.WriteLine ("{0}\n{1}", "Enter the integer grades in the range 0-100", "Type <Ctrl> z and press Enter to terminate input:");
    counter++;
    System.Console.Write ("score " + counter + ":");
    while ((input = Console.ReadLine()) != null)
    {
        int.TryParse(input, out grade);
        total += grade;
        gradeCounter++;
        IncrementLetterGradeCounter(grade);
        counter++;
        System.Console.Write ("score " + counter + ":");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
672
7
Gpt3D_Clone672_7.cs 1 17
Gpt3D_Clone672_7.cs 18 200
----------------------------------------

private void loadFromFile (String file) {
    foreach (String line in System.IO.File.ReadAllLines (file)) {
        if ((! String.IsNullOrEmpty (line)) && (! line.StartsWith (";")) && (! line.StartsWith ("#")) && (! line.StartsWith ("'")) && (line.Contains ('='))) {
            int index = line.IndexOf ('=');
            String key = line.Substring (0, index).Trim ();
            String value = line.Substring (index + 1).Trim ();
            if ((value.StartsWith ("\"") && value.EndsWith ("\"")) || (value.StartsWith ("'") && value.EndsWith ("'"))) {
                value = value.Substring (1, value.Length - 2);
            }
            try {
                list.Add (key, value);
            }
            catch {
            }
        }
    }
}
----------------------------------------

 private void loadFromFile (String file)
        {
            if (string.IsNullOrWhiteSpace(file))
            {
                return;
            }
            string[] lines = File.ReadAllLines(file);
            foreach (string line in lines)
            {
                if (!line.StartsWith(";") && !line.StartsWith("#") && !line.StartsWith("'") && line.Contains('='))
                {
                    int index = line.IndexOf('=');
                    string key = line.Substring(0, index).Trim();
                    string value = line.Substring(index + 1).Trim();
                    if (value.StartsWith("\"") && value.EndsWith ("\"") || value.StartsWith ("'") && value.EndsWith ("'"))
                    {
                        string newValue = value.Substring(1, value.Length - 2);
                        list.Add(key, newValue);
                    }
                }
            }
        }
 private void loadFromFile (String file) {
    if (string.IsNullOrEmpty(file))
    {
        throw new ArgumentNullException(nameof(file),"file cannot be null of empty");
    }
           string[] lines = File.ReadAllLines(file); 
            foreach (string line in lines) { 
                if (line.Contains('=') && !line.Trim().StartsWith(";") && !line.Trim().StartsWith("#") && !line.Trim().StartsWith("'")) {
                    int index = line.IndexOf('=');
                    string key = line.Substring(0, index).Trim();
                    string value = line.Substring(index + 1).Trim();
                    if ((value.StartsWith("\"") && value.EndsWith("\"")) || (value.StartsWith("'") && value.EndsWith("'")))
                    {
                        value = value.Substring(1, value.Length - 2);
                        try {
                            list.Add(key,value);
                        }
                        catch (IOException e) {
                            Console.WriteLine("IO Exception Occured");
                        }
                    }
                }
            }
        }
 private void loadFromFile (String file) {
        // Check if the file exists.
        if (File.Exists(file))
        {
            string[] lines = File.ReadAllLines(file);
            foreach (string line in lines)
            {
                if (!String.IsNullOrEmpty(line) &&
                                            !line.StartsWith(";") &&
                                            !line.StartsWith("#") &&
                                            !line.StartsWith("'") &&
                                            line.Contains('='))
                {
                    int index = line.IndexOf('=');
                    String key = line.Substring(0, index).Trim();
                    String value = line.Substring(index + 1).Trim();
                    if ((value.StartsWith("\"") && value.EndsWith("\"")) ||
                        (value.StartsWith("'") && value.EndsWith("'")))
                    {
                        value = value.Substring(1, value.Length - 2);
                        try
                        {
                            list.Add(key, value);
                        }
                        catch (Exception ex)
                        {
                            // Exception catch.
                        }
                    }
                }
            }
        }
    }
 private void loadFromFile (String file) 
    { 
        // Sanity check for file
        if (string.IsNullOrWhiteSpace(file))
            return;
        if (!File.Exists(file))
            return;
        // Read all lines from file
        string[] lines = File.ReadAllLines(file);
        // Iterate through lines
        foreach (string line in lines)
        {
            // Only process lines containing "=" 
            if (line.Contains('=') && 
                !line.Trim().StartsWith(";") && 
                !line.Trim().StartsWith("#") && 
                !line.Trim().StartsWith("'"))
            {
                int index = line.IndexOf('=');
                string key = line.Substring(0, index).Trim();
                string value = line.Substring(index + 1).Trim();
                if ((value.StartsWith("\"") && value.EndsWith("\"")) || (value.StartsWith("'") && value.EndsWith("'")))
                {
                    value = value.Substring(1, value.Length - 2);
                    try
                    {
                        list.Add(key, value);
                    }
                    catch 
                    {
                        // Exception Catch
                    }
                }
            }
        }
    }
 private void loadFromFile (String file) 
{
    if (string.IsNullOrWhiteSpace(file))
    {
        // Return exception
        return;
    }
    if (!File.Exists(file))
    {
        // Return exception
        return;
    }
    string[] lines = File.ReadAllLines(file);
    foreach (string line in lines)
    {
        // Continue if line is not empty or null and doesn't starts with ";", "#", or "'"
        if (line != null && line != string.Empty && !line.StartsWith(';') && !line.StartsWith('#') && !line.StartsWith('\''))
        {
            // Check if line contains "="
            if (line.Contains('='))
            {
                // Get index of "="
                int index = line.IndexOf('=');
                // Store key and value
                string key = line.Substring(0, index).Trim();
                string value = line.Substring(index + 1).Trim();
                // Check if value starts and ends with " or '
                if (value.StartsWith('"') && value.EndsWith('"') || value.StartsWith('\'') && value.EndsWith('\''))
                {
                    // Get new value
                    string newValue = value.Substring(1, value.Length - 2);
                    // Add key and value to list
                    try {
                        list.Add(key, newValue);
                    }               
                    catch 
                    {
                        // Exception Catch
                    }
                }
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
673
0
Gpt3D_Clone673_0.cs 1 33
Gpt3D_Clone673_0.cs 34 70
----------------------------------------

public static DateTime AddBusinessDays (this DateTime date, int days) {
    date = date.AddDays ((days / 5) * 7);
    int remainder = days % 5;
    switch (date.DayOfWeek) {
        case DayOfWeek.Tuesday :
            if (remainder > 3)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Wednesday :
            if (remainder > 2)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Thursday :
            if (remainder > 1)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Friday :
            if (remainder > 0)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Saturday :
            if (days > 0)
                date = date.AddDays ((remainder == 0) ? 2 : 1);
            break;
        case DayOfWeek.Sunday :
            if (days > 0)
                date = date.AddDays ((remainder == 0) ? 1 : 0);
            break;
        default :
            break;
    }
    return date.AddDays (remainder);
}
----------------------------------------

 public static DateTime AddBusinessDays (this DateTime date, int days)
{   
    int adjustedDays = days;
    switch(date.DayOfWeek)
    {
        case DayOfWeek.Tuesday :
            if (adjustedDays > 3)
                adjustedDays += 2;
            break;
        case DayOfWeek.Wednesday :
            if (adjustedDays > 2)
                adjustedDays += 2;
            break;
        case DayOfWeek.Thursday :
            if (adjustedDays > 1)
                adjustedDays += 2;
            break;
        case DayOfWeek.Friday :
            if (adjustedDays > 0)
                adjustedDays += 2;
            break;
        case DayOfWeek.Saturday :
            if (days > 0)
                adjustedDays += (adjustedDays == 0 ? 2 : 1);
            break;
        case DayOfWeek.Sunday :
            if (days > 0)
                adjustedDays += (adjustedDays == 0 ? 1 : 0);
            break;
    }
 
    DateTime newDateTime = date.AddDays((adjustedDays / 5) * 7);
    newDateTime = newDateTime.AddDays(adjustedDays % 5);
    return newDateTime;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
673
1
Gpt3D_Clone673_1.cs 1 33
Gpt3D_Clone673_1.cs 34 68
----------------------------------------

public static DateTime AddBusinessDays (this DateTime date, int days) {
    date = date.AddDays ((days / 5) * 7);
    int remainder = days % 5;
    switch (date.DayOfWeek) {
        case DayOfWeek.Tuesday :
            if (remainder > 3)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Wednesday :
            if (remainder > 2)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Thursday :
            if (remainder > 1)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Friday :
            if (remainder > 0)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Saturday :
            if (days > 0)
                date = date.AddDays ((remainder == 0) ? 2 : 1);
            break;
        case DayOfWeek.Sunday :
            if (days > 0)
                date = date.AddDays ((remainder == 0) ? 1 : 0);
            break;
        default :
            break;
    }
    return date.AddDays (remainder);
}
----------------------------------------

 public static DateTime AddBusinessDays (this DateTime date, int days) {
    
    date = date.AddDays ((days / 5) * 7); 
    int adjustedDays = days;
    switch (date.DayOfWeek)
    {
        case DayOfWeek.Tuesday :
            if (adjustedDays > 3)
                adjustedDays += 2;
            break;
        case DayOfWeek.Wednesday :
            if (adjustedDays > 2)
                adjustedDays += 2;
            break;
        case DayOfWeek.Thursday :
            if (adjustedDays > 1)
                adjustedDays += 2;
            break;
        case DayOfWeek.Friday :
            if (adjustedDays > 0)
                adjustedDays += 2;
            break;
        case DayOfWeek.Saturday :
            if (days > 0)
                adjustedDays += (adjustedDays == 0 ? 2 : 1);
            break;
        case DayOfWeek.Sunday :
            if (days > 0)
                adjustedDays += (adjustedDays == 0 ? 1 : 0);
            break;
    }
    return date.AddDays (adjustedDays);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
675
0
Gpt3D_Clone675_0.cs 1 18
Gpt3D_Clone675_0.cs 19 63
----------------------------------------

static IEnumerable < IEnumerable < T > > Partition < T > (this IEnumerable < T > source, int size) {
    int count = 0;
    T [] group = null;
    foreach (T item in source) {
        if (group == null)
            group = new T [size];
        group [count ++] = item;
        if (count == size) {
            yield return group;
            group = null;
            count = 0;
        }
    }
    if (count > 0) {
        Array.Resize (ref group, count);
        yield return group;
    }
}
----------------------------------------

  static IEnumerable<IEnumerable<T>> Partition<T>(this IEnumerable<T> source, int size) 
            {
              LinkedList<T[]> largeGroup = new LinkedList<T[]>();
              int count = 0;
              T[] group = new T[size];
              foreach (T item in source)
              {
                group[count++] = item;
                if (count == size)
                {
                  largeGroup.AddFirst(group);
                  group = new T[size];
                  count = 0;
                }
              }
              if (count > 0)
              {
                Array.Resize(ref group, count);
                largeGroup.AddFirst(group);
              }
              return largeGroup;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
675
1
Gpt3D_Clone675_1.cs 1 18
Gpt3D_Clone675_1.cs 19 63
----------------------------------------

static IEnumerable < IEnumerable < T > > Partition < T > (this IEnumerable < T > source, int size) {
    int count = 0;
    T [] group = null;
    foreach (T item in source) {
        if (group == null)
            group = new T [size];
        group [count ++] = item;
        if (count == size) {
            yield return group;
            group = null;
            count = 0;
        }
    }
    if (count > 0) {
        Array.Resize (ref group, count);
        yield return group;
    }
}
----------------------------------------

 static IEnumerable<IEnumerable<T>> Partition<T>(this IEnumerable<T> source, int size) 
            {
              List<T[]> largeGroup = new List<T[]>();
              int count = 0;
              T[] group = new T[size];
              foreach (var item in source)
              {
                group[count++] = item;
                if (count == size)
                {
                  largeGroup.Add(group);
                  group = new T[size];
                  count = 0;
                }
              }
              if (count > 0)
              {
                Array.Resize(ref group, count);
                largeGroup.Add(group);
              }
              return largeGroup;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
675
2
Gpt3D_Clone675_2.cs 1 18
Gpt3D_Clone675_2.cs 19 63
----------------------------------------

static IEnumerable < IEnumerable < T > > Partition < T > (this IEnumerable < T > source, int size) {
    int count = 0;
    T [] group = null;
    foreach (T item in source) {
        if (group == null)
            group = new T [size];
        group [count ++] = item;
        if (count == size) {
            yield return group;
            group = null;
            count = 0;
        }
    }
    if (count > 0) {
        Array.Resize (ref group, count);
        yield return group;
    }
}
----------------------------------------

 static IEnumerable<IEnumerable<T>> Partition<T>(this IEnumerable<T> source, int size) 
            {
              Queue<T[]> largeGroup = new Queue<T[]>();
              int count = 0;
              T[] group = new T[size];
              foreach (T item in source)
              {
                group[count++] = item;
                if (count == size)
                {
                  largeGroup.Enqueue(group);
                  group = new T[size];
                  count = 0;
                }
              }
              if (count > 0)
              {
                Array.Resize(ref group, count);
                largeGroup.Enqueue(group);
              }
              return largeGroup;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
676
1
Gpt3D_Clone676_1.cs 1 12
Gpt3D_Clone676_1.cs 13 36
----------------------------------------

public void DoWorkUpdatingRow (object state) {
    List < DataRow > rowsToWorkOn = (List < DataRow >) state;
    foreach (DataRow dr in rowsToWorkOn) {
        Monitor.Enter (this);
        try {
            dr ["value"] = dr ["id"] + " new value";
        }
        finally {
            Monitor.Exit (this);
        }
    }
}
----------------------------------------

 public void DoWorkUpdatingRow(object state) 
{ 
    List<DataRow> rowsToWorkOn = (List<DataRow>)state; 
    List<Task> tasks = new List<Task>(); 
    foreach (DataRow dr in rowsToWorkOn) 
    { 
        tasks.Add(Task.Run(() => {
            Monitor.Enter(this); 
            try 
            { 
                dr["value"] = dr["id"] + " new value"; 
            } 
            finally 
            { 
                Monitor.Exit(this); 
            } 
        })); 
    } 
    Task.WaitAll(tasks.ToArray()); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
676
3
Gpt3D_Clone676_3.cs 1 12
Gpt3D_Clone676_3.cs 13 28
----------------------------------------

public void DoWorkUpdatingRow (object state) {
    List < DataRow > rowsToWorkOn = (List < DataRow >) state;
    foreach (DataRow dr in rowsToWorkOn) {
        Monitor.Enter (this);
        try {
            dr ["value"] = dr ["id"] + " new value";
        }
        finally {
            Monitor.Exit (this);
        }
    }
}
----------------------------------------

  public async void DoWorkUpdatingRow (object state) {
    List < DataRow > rowsToWorkOn = (List < DataRow >) state;
    await Task.Run (() => {
        foreach (DataRow dr in rowsToWorkOn) {
            Monitor.Enter (this);
            try {
                dr ["value"] = dr ["id"] + " new value";
            }
            finally {
                Monitor.Exit (this);
            }
        }
    });
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
679
2
Gpt3D_Clone679_2.cs 1 19
Gpt3D_Clone679_2.cs 20 40
----------------------------------------

protected override void WndProc (ref Message m) {
    base.WndProc (ref m);
    if (m.Msg == WM_PAINT) {
        using (Graphics g = Graphics.FromHwnd (m.HWnd))
        {
            if (tabControl.Parent != null) {
                g.SetClip (new Rectangle (0, 0, tabControl.Width - 2, tabControl.Height - 1), CombineMode.Exclude);
                using (SolidBrush sb = new SolidBrush (tabControl.Parent.BackColor))
                g.FillRectangle (sb, new Rectangle (0, tabControl.ItemSize.Height + 2, tabControl.Width, tabControl.Height - (tabControl.ItemSize.Height + 2)));
            }
            if (tabControl.SelectedTab != null) {
                g.ResetClip ();
                Rectangle r = tabControl.SelectedTab.Bounds;
                g.SetClip (r, CombineMode.Exclude);
                using (SolidBrush sb = new SolidBrush (tabControl.SelectedTab.BackColor))
                g.FillRectangle (sb, new Rectangle (r.Left - 3, r.Top - 1, r.Width + 4, r.Height + 3));
            }
        }}
}
----------------------------------------

  protected override void WndProc (ref Message m) {
    base.WndProc (ref m);
    if (m.Msg == WM_PAINT) {
        using (Graphics g = Graphics.FromHwnd (m.HWnd))
        {
            if (tabControl.Parent != null) {
                Rectangle rect = new Rectangle(0, 0, tabControl.Width - 2, tabControl.Height - 1);
                g.SetClipping(rect);
                g.FillRectangle(new SolidBrush(tabControl.Parent.BackColor), 0, tabControl.ItemSize.Height + 2, tabControl.Width, tabControl.Height - (tabControl.ItemSize.Height + 2));
            }
            if (tabControl.SelectedTab != null) {
                Rectangle r = tabControl.SelectedTab.Bounds;
                g.ResetClip ();
                g.SetClipping(r);
                g.FillRectangle(new SolidBrush(tabControl.SelectedTab.BackColor), r.Left - 3, r.Top - 1, r.Width + 4, r.Height + 3);
            }
        }}
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
679
4
Gpt3D_Clone679_4.cs 1 19
Gpt3D_Clone679_4.cs 20 39
----------------------------------------

protected override void WndProc (ref Message m) {
    base.WndProc (ref m);
    if (m.Msg == WM_PAINT) {
        using (Graphics g = Graphics.FromHwnd (m.HWnd))
        {
            if (tabControl.Parent != null) {
                g.SetClip (new Rectangle (0, 0, tabControl.Width - 2, tabControl.Height - 1), CombineMode.Exclude);
                using (SolidBrush sb = new SolidBrush (tabControl.Parent.BackColor))
                g.FillRectangle (sb, new Rectangle (0, tabControl.ItemSize.Height + 2, tabControl.Width, tabControl.Height - (tabControl.ItemSize.Height + 2)));
            }
            if (tabControl.SelectedTab != null) {
                g.ResetClip ();
                Rectangle r = tabControl.SelectedTab.Bounds;
                g.SetClip (r, CombineMode.Exclude);
                using (SolidBrush sb = new SolidBrush (tabControl.SelectedTab.BackColor))
                g.FillRectangle (sb, new Rectangle (r.Left - 3, r.Top - 1, r.Width + 4, r.Height + 3));
            }
        }}
}
----------------------------------------

  protected override void WndProc (ref Message m) {
    base.WndProc (ref m);
    if (m.Msg == WM_PAINT) {
        using (Graphics g = Graphics.FromHwnd (m.HWnd))
        {
            if (tabControl.Parent != null) {
                g.ExcludeClip (new Rectangle (0, 0, tabControl.Width - 2, tabControl.Height - 1));
                g.FillRectangle(new SolidBrush(tabControl.Parent.BackColor), 0, tabControl.ItemSize.Height + 2, tabControl.Width, tabControl.Height - (tabControl.ItemSize.Height + 2));
            }
            if (tabControl.SelectedTab != null) {
                Rectangle r = tabControl.SelectedTab.Bounds;
                g.ResetClip ();
                g.ExcludeClip (r);
                g.FillRectangle(new SolidBrush(tabControl.SelectedTab.BackColor), r.Left - 3, r.Top - 1, r.Width + 4, r.Height + 3);
            }
        }}
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
679
5
Gpt3D_Clone679_5.cs 1 19
Gpt3D_Clone679_5.cs 20 39
----------------------------------------

protected override void WndProc (ref Message m) {
    base.WndProc (ref m);
    if (m.Msg == WM_PAINT) {
        using (Graphics g = Graphics.FromHwnd (m.HWnd))
        {
            if (tabControl.Parent != null) {
                g.SetClip (new Rectangle (0, 0, tabControl.Width - 2, tabControl.Height - 1), CombineMode.Exclude);
                using (SolidBrush sb = new SolidBrush (tabControl.Parent.BackColor))
                g.FillRectangle (sb, new Rectangle (0, tabControl.ItemSize.Height + 2, tabControl.Width, tabControl.Height - (tabControl.ItemSize.Height + 2)));
            }
            if (tabControl.SelectedTab != null) {
                g.ResetClip ();
                Rectangle r = tabControl.SelectedTab.Bounds;
                g.SetClip (r, CombineMode.Exclude);
                using (SolidBrush sb = new SolidBrush (tabControl.SelectedTab.BackColor))
                g.FillRectangle (sb, new Rectangle (r.Left - 3, r.Top - 1, r.Width + 4, r.Height + 3));
            }
        }}
}
----------------------------------------

     protected override void WndProc (ref Message m) {
    base.WndProc (ref m);
    if (m.Msg == WM_PAINT) {
        using (Graphics g = Graphics.FromHwnd (m.HWnd))
        {
            if (tabControl.Parent != null) {
                g.ExcludeClips(new RectangleF(0, 0, tabControl.Width - 2, tabControl.Height - 1));
                g.FillRectangle(new SolidBrush(tabControl.Parent.BackColor), 0, tabControl.ItemSize.Height + 2, tabControl.Width, tabControl.Height - (tabControl.ItemSize.Height + 2));
            }
            if (tabControl.SelectedTab != null) {
                Rectangle r = tabControl.SelectedTab.Bounds;
                g.ResetClip ();
                g.ExcludeClips(r);
                g.FillRectangle(new SolidBrush(tabControl.SelectedTab.BackColor), r.Left - 3, r.Top - 1, r.Width + 4, r.Height + 3);
            }
        }}
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
679
6
Gpt3D_Clone679_6.cs 1 19
Gpt3D_Clone679_6.cs 20 39
----------------------------------------

protected override void WndProc (ref Message m) {
    base.WndProc (ref m);
    if (m.Msg == WM_PAINT) {
        using (Graphics g = Graphics.FromHwnd (m.HWnd))
        {
            if (tabControl.Parent != null) {
                g.SetClip (new Rectangle (0, 0, tabControl.Width - 2, tabControl.Height - 1), CombineMode.Exclude);
                using (SolidBrush sb = new SolidBrush (tabControl.Parent.BackColor))
                g.FillRectangle (sb, new Rectangle (0, tabControl.ItemSize.Height + 2, tabControl.Width, tabControl.Height - (tabControl.ItemSize.Height + 2)));
            }
            if (tabControl.SelectedTab != null) {
                g.ResetClip ();
                Rectangle r = tabControl.SelectedTab.Bounds;
                g.SetClip (r, CombineMode.Exclude);
                using (SolidBrush sb = new SolidBrush (tabControl.SelectedTab.BackColor))
                g.FillRectangle (sb, new Rectangle (r.Left - 3, r.Top - 1, r.Width + 4, r.Height + 3));
            }
        }}
}
----------------------------------------

  protected override void WndProc (ref Message m) {
    base.WndProc (ref m);
    if (m.Msg == WM_PAINT) {
        using (Graphics g = Graphics.FromHwnd (m.HWnd))
        {
            if (tabControl.Parent != null) {
                g.SetClipping(new RectangleF(0, 0, tabControl.Width - 2, tabControl.Height - 1));
                g.FillRectangle(new SolidBrush(tabControl.Parent.BackColor), 0, tabControl.ItemSize.Height + 2, tabControl.Width, tabControl.Height - (tabControl.ItemSize.Height + 2));
            }
            if (tabControl.SelectedTab != null) {
                Rectangle r = tabControl.SelectedTab.Bounds;
                g.ResetClip ();
                g.SetClipping(r);
                g.FillRectangle(new SolidBrush(tabControl.SelectedTab.BackColor), r.Left - 3, r.Top - 1, r.Width + 4, r.Height + 3);
            }
        }}
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
0
Gpt3D_Clone67_0.cs 1 10
Gpt3D_Clone67_0.cs 11 25
----------------------------------------

public static string ReadLine (this BinaryReader reader) {
    if (reader.IsEndOfStream ())
        return null;
    StringBuilder result = new StringBuilder ();
    char character;
    while (! reader.IsEndOfStream () && (character = reader.ReadChar ()) != '\n')
        if (character != '\r' && character != '\n')
            result.Append (character);
    return result.ToString ();
}
----------------------------------------

 public static string ReadLine (this BinaryReader reader) {
    if (reader.IsEndOfStream ())
        return null;
    StringBuilder readLine = new StringBuilder ();
    while (! reader.IsEndOfStream ()) {
        char character = reader.ReadChar ();
        if (character == '\r' || character == '\n') {
            break;
        }
        readLine.Append (character);
    }
    return readLine.ToString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
2
Gpt3D_Clone67_2.cs 1 10
Gpt3D_Clone67_2.cs 11 24
----------------------------------------

public static string ReadLine (this BinaryReader reader) {
    if (reader.IsEndOfStream ())
        return null;
    StringBuilder result = new StringBuilder ();
    char character;
    while (! reader.IsEndOfStream () && (character = reader.ReadChar ()) != '\n')
        if (character != '\r' && character != '\n')
            result.Append (character);
    return result.ToString ();
}
----------------------------------------

 public static string ReadLine (this BinaryReader reader) {
    if (reader.IsEndOfStream())
        return null;
    StringBuilder readLine = new StringBuilder();
    char character = reader.ReadChar();
    while (!reader.IsEndOfStream() && (character != '\n')) {
        if (character != '\r' && character != '\n')
            readLine.Append(character);
        character = reader.ReadChar();
    }
    return readLine.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
3
Gpt3D_Clone67_3.cs 1 10
Gpt3D_Clone67_3.cs 11 23
----------------------------------------

public static string ReadLine (this BinaryReader reader) {
    if (reader.IsEndOfStream ())
        return null;
    StringBuilder result = new StringBuilder ();
    char character;
    while (! reader.IsEndOfStream () && (character = reader.ReadChar ()) != '\n')
        if (character != '\r' && character != '\n')
            result.Append (character);
    return result.ToString ();
}
----------------------------------------

 public static string ReadLine (this BinaryReader reader) {
    if (reader.IsEndOfStream())
        return null;
    string readLine = "";
    char character;
    while (!reader.IsEndOfStream() && (character = reader.ReadChar()) != '\n')
        if (character != '\r' && character != '\n')
            readLine += character;
    return readLine;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
5
Gpt3D_Clone67_5.cs 1 10
Gpt3D_Clone67_5.cs 11 24
----------------------------------------

public static string ReadLine (this BinaryReader reader) {
    if (reader.IsEndOfStream ())
        return null;
    StringBuilder result = new StringBuilder ();
    char character;
    while (! reader.IsEndOfStream () && (character = reader.ReadChar ()) != '\n')
        if (character != '\r' && character != '\n')
            result.Append (character);
    return result.ToString ();
}
----------------------------------------

 public static string ReadLine (this BinaryReader reader) {
    if (reader.IsEndOfStream())
        return null;
    List<char> readLine = new List<char>();
    
    char ch;
    while (!reader.IsEndOfStream() && (ch = reader.ReadChar()) != '\n') {
        if (ch != '\r' && ch != '\n')
            readLine.Add(ch);
    }
    return new string(readLine.ToArray());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
6
Gpt3D_Clone67_6.cs 1 10
Gpt3D_Clone67_6.cs 11 24
----------------------------------------

public static string ReadLine (this BinaryReader reader) {
    if (reader.IsEndOfStream ())
        return null;
    StringBuilder result = new StringBuilder ();
    char character;
    while (! reader.IsEndOfStream () && (character = reader.ReadChar ()) != '\n')
        if (character != '\r' && character != '\n')
            result.Append (character);
    return result.ToString ();
}
----------------------------------------

 public static string ReadLine (this BinaryReader reader) {
    if (reader.IsEndOfStream())
        return null;
    
    string readLine = "";
    char ch;
    while (!reader.IsEndOfStream() && (ch = reader.ReadChar()) != '\n')
        if (ch != '\r' && ch != '\n')
            readLine += ch;
    return readLine;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
680
0
Gpt3D_Clone680_0.cs 1 15
Gpt3D_Clone680_0.cs 16 34
----------------------------------------

[TestMethod] public void Test_ThatMyEventIsRaised () {
    Dictionary < string, int > receivedEvents = new Dictionary < string, int > ();
    MyClass myClass = new MyClass ();
    myClass.PropertyChanged += delegate (object sender, PropertyChangedEventArgs e) {
        if (receivedEvents.ContainsKey (e.PropertyName))
            receivedEvents [e.PropertyName] ++;
        else
            receivedEvents.Add (e.PropertyName, 1);
    };
    myClass.MyProperty = "testing";
    Assert.IsTrue (receivedEvents.ContainsKey ("MyProperty"));
    Assert.AreEqual (1, receivedEvents ["MyProperty"]);
    Assert.IsTrue (receivedEvents.ContainsKey ("MyOtherProperty"));
    Assert.AreEqual (1, receivedEvents ["MyOtherProperty"]);
}
----------------------------------------

	[TestMethod] public void Test_ThatMyEventIsRaised()
{
    Dictionary<string, int> receivedEvents = new Dictionary<string, int>();
    MyClass myClass = new MyClass();
    myClass.PropertyChanged += delegate(object sender, PropertyChangedEventArgs e)
    {
        if (receivedEvents.ContainsKey(e.PropertyName))
            receivedEvents[e.PropertyName]++;
        else
            receivedEvents.Add(e.PropertyName, 1);
    };
    myClass.MyProperty = "testing";
    Assert.IsTrue(receivedEvents.TryGetValue("MyProperty", out int value));
    Assert.AreEqual(1, value);
    Assert.IsTrue(receivedEvents.TryGetValue("MyOtherProperty", out int value));
    Assert.AreEqual(1, value);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
680
4
Gpt3D_Clone680_4.cs 1 15
Gpt3D_Clone680_4.cs 16 31
----------------------------------------

[TestMethod] public void Test_ThatMyEventIsRaised () {
    Dictionary < string, int > receivedEvents = new Dictionary < string, int > ();
    MyClass myClass = new MyClass ();
    myClass.PropertyChanged += delegate (object sender, PropertyChangedEventArgs e) {
        if (receivedEvents.ContainsKey (e.PropertyName))
            receivedEvents [e.PropertyName] ++;
        else
            receivedEvents.Add (e.PropertyName, 1);
    };
    myClass.MyProperty = "testing";
    Assert.IsTrue (receivedEvents.ContainsKey ("MyProperty"));
    Assert.AreEqual (1, receivedEvents ["MyProperty"]);
    Assert.IsTrue (receivedEvents.ContainsKey ("MyOtherProperty"));
    Assert.AreEqual (1, receivedEvents ["MyOtherProperty"]);
}
----------------------------------------

	[TestMethod] public void Test_ThatMyEventIsRaised()
{
    Dictionary<string, int> receivedEvents = new Dictionary<string, int>();
    MyClass myClass = new MyClass();
    myClass.PropertyChanged += delegate(object sender, PropertyChangedEventArgs e)
    {
        receivedEvents[e.PropertyName] = receivedEvents.ContainsKey(e.PropertyName) ? receivedEvents[e.PropertyName]++ : 1;
    };
    myClass.MyProperty = "testing";
    Assert.IsTrue(receivedEvents.ContainsKey("MyProperty"));
    Assert.AreEqual(1, receivedEvents["MyProperty"]);
    Assert.IsTrue(receivedEvents.ContainsKey("MyOtherProperty"));
    Assert.AreEqual(1, receivedEvents["MyOtherProperty"]);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
683
0
Gpt3D_Clone683_0.cs 1 21
Gpt3D_Clone683_0.cs 22 45
----------------------------------------

public static void ProcessCsv () {
    var filename = @"your_file_path\filename.csv";
    DataTable dt = new DataTable ("MyTable");
    List < string > product_codes = new List < string > ();
    using (CsvReader csv = new CsvReader (new StreamReader (filename), true))
    {
        int fieldCount = csv.FieldCount;
        string [] headers = csv.GetFieldHeaders ();
        for (int i = 0; i < headers.Length; i ++) {
            dt.Columns.Add (headers [i], typeof (string));
        }
        while (csv.ReadNextRecord ()) {
            DataRow dr = dt.NewRow ();
            for (int i = 0; i < fieldCount; i ++) {
                product_codes.Add (csv [i]);
                dr [i] = csv [i];
            }
            dt.Rows.Add (dr);
        }
    }
}
----------------------------------------

 public static void ProcessCsv () {
    var filename = @"your_file_path\filename.csv";
    DataTable dt = new DataTable ("MyTable");
    String[] headers = null;
    List < string > product_codes = new List < string > ();
    using (CsvReader csv = new CsvReader (new StreamReader (filename), true))
    {
        while (csv.ReadNextRecord ()) {
            DataRow dr = dt.NewRow ();
            if (headers == null) {
                headers = csv.GetFieldHeaders ();
                foreach (string header in headers)
                    dt.Columns.Add (header, typeof (string));
            }
            for (int i = 0; i < headers.Length; i ++) {
                product_codes.Add (csv [i]);
                dr [i] = csv [i];
            }
            dt.Rows.Add (dr);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
683
1
Gpt3D_Clone683_1.cs 1 21
Gpt3D_Clone683_1.cs 22 42
----------------------------------------

public static void ProcessCsv () {
    var filename = @"your_file_path\filename.csv";
    DataTable dt = new DataTable ("MyTable");
    List < string > product_codes = new List < string > ();
    using (CsvReader csv = new CsvReader (new StreamReader (filename), true))
    {
        int fieldCount = csv.FieldCount;
        string [] headers = csv.GetFieldHeaders ();
        for (int i = 0; i < headers.Length; i ++) {
            dt.Columns.Add (headers [i], typeof (string));
        }
        while (csv.ReadNextRecord ()) {
            DataRow dr = dt.NewRow ();
            for (int i = 0; i < fieldCount; i ++) {
                product_codes.Add (csv [i]);
                dr [i] = csv [i];
            }
            dt.Rows.Add (dr);
        }
    }
}
----------------------------------------

 public static void ProcessCsv () {
    var filename = @"your_file_path\filename.csv";
    DataTable dt = new DataTable ("MyTable");
    List < string > product_codes = new List < string > ();
    using (CsvReader csv = new CsvReader (new StreamReader (filename), true))
    {
        while (csv.ReadNextRecord ()) {
            List <string> values = new List<string>();
            DataRow dr = dt.NewRow ();
            for (int i = 0; i < csv.FieldCount; i ++) {
                product_codes.Add (csv [i]);
                dr [i] = csv [i];
                values.Add(csv[i]);
                dt.Columns.Add (csv.GetFieldHeaders () [i], typeof (string));
            }
            dt.Rows.Add (dr);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
683
2
Gpt3D_Clone683_2.cs 1 21
Gpt3D_Clone683_2.cs 22 43
----------------------------------------

public static void ProcessCsv () {
    var filename = @"your_file_path\filename.csv";
    DataTable dt = new DataTable ("MyTable");
    List < string > product_codes = new List < string > ();
    using (CsvReader csv = new CsvReader (new StreamReader (filename), true))
    {
        int fieldCount = csv.FieldCount;
        string [] headers = csv.GetFieldHeaders ();
        for (int i = 0; i < headers.Length; i ++) {
            dt.Columns.Add (headers [i], typeof (string));
        }
        while (csv.ReadNextRecord ()) {
            DataRow dr = dt.NewRow ();
            for (int i = 0; i < fieldCount; i ++) {
                product_codes.Add (csv [i]);
                dr [i] = csv [i];
            }
            dt.Rows.Add (dr);
        }
    }
}
----------------------------------------

 public static void ProcessCsv () {
    var filename = @"your_file_path\filename.csv";
    DataTable dt = new DataTable ("MyTable");
    List < string > product_codes = new List < string > ();
    using (CsvReader csv = new CsvReader (new StreamReader (filename), true))
    {
        string [] headers = csv.GetFieldHeaders ();
        while (csv.ReadNextRecord ()) {
            DataRow dr = dt.NewRow ();
            for (int i = 0; i < csv.FieldCount; i ++) {
                product_codes.Add (csv [i]);
                dr [i] = csv [i];
            }
            for (int i = 0; i < headers.Length; i ++) {
                dt.Columns.Add (headers [i], typeof (string));
            }
            dt.Rows.Add (dr);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
683
3
Gpt3D_Clone683_3.cs 1 21
Gpt3D_Clone683_3.cs 22 39
----------------------------------------

public static void ProcessCsv () {
    var filename = @"your_file_path\filename.csv";
    DataTable dt = new DataTable ("MyTable");
    List < string > product_codes = new List < string > ();
    using (CsvReader csv = new CsvReader (new StreamReader (filename), true))
    {
        int fieldCount = csv.FieldCount;
        string [] headers = csv.GetFieldHeaders ();
        for (int i = 0; i < headers.Length; i ++) {
            dt.Columns.Add (headers [i], typeof (string));
        }
        while (csv.ReadNextRecord ()) {
            DataRow dr = dt.NewRow ();
            for (int i = 0; i < fieldCount; i ++) {
                product_codes.Add (csv [i]);
                dr [i] = csv [i];
            }
            dt.Rows.Add (dr);
        }
    }
}
----------------------------------------

 public static void ProcessCsv () {
    var filename = @"your_file_path\filename.csv";
    DataTable dt = new DataTable ("MyTable");
    List < string > product_codes = new List < string > ();
    FileStream fs = new FileStream (filename, FileMode.Open);
    CsvReader csv = new CsvReader (new StreamReader (fs), true);
    while (csv.ReadNextRecord ()) {
        DataRow dr = dt.NewRow ();
        for (int i = 0; i < csv.FieldCount; i ++) {
            product_codes.Add (csv [i]);
            dr [i] = csv [i];
            dt.Columns.Add (csv.GetFieldHeaders () [i], typeof (string));
        }
        dt.Rows.Add (dr);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
683
4
Gpt3D_Clone683_4.cs 1 21
Gpt3D_Clone683_4.cs 22 39
----------------------------------------

public static void ProcessCsv () {
    var filename = @"your_file_path\filename.csv";
    DataTable dt = new DataTable ("MyTable");
    List < string > product_codes = new List < string > ();
    using (CsvReader csv = new CsvReader (new StreamReader (filename), true))
    {
        int fieldCount = csv.FieldCount;
        string [] headers = csv.GetFieldHeaders ();
        for (int i = 0; i < headers.Length; i ++) {
            dt.Columns.Add (headers [i], typeof (string));
        }
        while (csv.ReadNextRecord ()) {
            DataRow dr = dt.NewRow ();
            for (int i = 0; i < fieldCount; i ++) {
                product_codes.Add (csv [i]);
                dr [i] = csv [i];
            }
            dt.Rows.Add (dr);
        }
    }
}
----------------------------------------

 public static void ProcessCsv () {
    var filename = @"your_file_path\filename.csv";
    DataTable dt = new DataTable ("MyTable");
    List < string > product_codes = new List < string > ();
    StreamReader file = new StreamReader (filename);
    CsvReader csv = new CsvReader (file, true);
    while (csv.ReadNextRecord ()) {
        DataRow dr = dt.NewRow ();
        for (int i = 0; i < csv.FieldCount; i ++) {
            product_codes.Add (csv [i]);
            dr [i] = csv [i];
            dt.Columns.Add (csv.GetFieldHeaders () [i], typeof (string));
        }
        dt.Rows.Add (dr);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
683
5
Gpt3D_Clone683_5.cs 1 21
Gpt3D_Clone683_5.cs 22 39
----------------------------------------

public static void ProcessCsv () {
    var filename = @"your_file_path\filename.csv";
    DataTable dt = new DataTable ("MyTable");
    List < string > product_codes = new List < string > ();
    using (CsvReader csv = new CsvReader (new StreamReader (filename), true))
    {
        int fieldCount = csv.FieldCount;
        string [] headers = csv.GetFieldHeaders ();
        for (int i = 0; i < headers.Length; i ++) {
            dt.Columns.Add (headers [i], typeof (string));
        }
        while (csv.ReadNextRecord ()) {
            DataRow dr = dt.NewRow ();
            for (int i = 0; i < fieldCount; i ++) {
                product_codes.Add (csv [i]);
                dr [i] = csv [i];
            }
            dt.Rows.Add (dr);
        }
    }
}
----------------------------------------

 public static void ProcessCsv () {
    var filename = @"your_file_path\filename.csv";
    DataTable dt = new DataTable ("MyTable");
    List < string > product_codes = new List < string > ();
    StreamReader file = new StreamReader (filename);
    CsvReader csv = new CsvReader (file);
    while (csv.ReadNextRecord ()) {
        DataRow dr = dt.NewRow ();
        for (int i = 0; i < csv.FieldCount; i ++) {
            product_codes.Add (csv [i]);
            dr [i] = csv [i];
            dt.Columns.Add (csv.GetFieldHeaders () [i], typeof (string));
        }
        dt.Rows.Add (dr);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
683
6
Gpt3D_Clone683_6.cs 1 21
Gpt3D_Clone683_6.cs 22 40
----------------------------------------

public static void ProcessCsv () {
    var filename = @"your_file_path\filename.csv";
    DataTable dt = new DataTable ("MyTable");
    List < string > product_codes = new List < string > ();
    using (CsvReader csv = new CsvReader (new StreamReader (filename), true))
    {
        int fieldCount = csv.FieldCount;
        string [] headers = csv.GetFieldHeaders ();
        for (int i = 0; i < headers.Length; i ++) {
            dt.Columns.Add (headers [i], typeof (string));
        }
        while (csv.ReadNextRecord ()) {
            DataRow dr = dt.NewRow ();
            for (int i = 0; i < fieldCount; i ++) {
                product_codes.Add (csv [i]);
                dr [i] = csv [i];
            }
            dt.Rows.Add (dr);
        }
    }
}
----------------------------------------

 public static void ProcessCsv () {
    var filename = @"your_file_path\filename.csv";
    DataTable dt = new DataTable ("MyTable");
    List < string > product_codes = new List < string > ();
    using (CsvReader csv = new CsvReader (File.OpenText (filename), true))
    {
        while (csv.ReadNextRecord ()) {
            DataRow dr = dt.NewRow ();
            for (int i = 0; i < csv.FieldCount; i ++) {
                product_codes.Add (csv [i]);
                dr [i] = csv [i];
                dt.Columns.Add (csv.GetFieldHeaders () [i], typeof (string));
            }
            dt.Rows.Add (dr);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
683
7
Gpt3D_Clone683_7.cs 1 21
Gpt3D_Clone683_7.cs 22 38
----------------------------------------

public static void ProcessCsv () {
    var filename = @"your_file_path\filename.csv";
    DataTable dt = new DataTable ("MyTable");
    List < string > product_codes = new List < string > ();
    using (CsvReader csv = new CsvReader (new StreamReader (filename), true))
    {
        int fieldCount = csv.FieldCount;
        string [] headers = csv.GetFieldHeaders ();
        for (int i = 0; i < headers.Length; i ++) {
            dt.Columns.Add (headers [i], typeof (string));
        }
        while (csv.ReadNextRecord ()) {
            DataRow dr = dt.NewRow ();
            for (int i = 0; i < fieldCount; i ++) {
                product_codes.Add (csv [i]);
                dr [i] = csv [i];
            }
            dt.Rows.Add (dr);
        }
    }
}
----------------------------------------

 public static void ProcessCsv () {
    var filename = @"your_file_path\filename.csv";
    DataTable dt = new DataTable ("MyTable");
    List < string > product_codes = new List < string > ();
    CsvReader csv = new CsvReader (File.Open (filename, FileMode.Open, FileAccess.Read));
    while (csv.ReadNextRecord ()) {
        DataRow dr = dt.NewRow ();
        for (int i = 0; i < csv.FieldCount; i ++) {
            product_codes.Add (csv [i]);
            dr [i] = csv [i];
            dt.Columns.Add (csv.GetFieldHeaders () [i], typeof (string));
        }
        dt.Rows.Add (dr);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
683
8
Gpt3D_Clone683_8.cs 1 21
Gpt3D_Clone683_8.cs 22 39
----------------------------------------

public static void ProcessCsv () {
    var filename = @"your_file_path\filename.csv";
    DataTable dt = new DataTable ("MyTable");
    List < string > product_codes = new List < string > ();
    using (CsvReader csv = new CsvReader (new StreamReader (filename), true))
    {
        int fieldCount = csv.FieldCount;
        string [] headers = csv.GetFieldHeaders ();
        for (int i = 0; i < headers.Length; i ++) {
            dt.Columns.Add (headers [i], typeof (string));
        }
        while (csv.ReadNextRecord ()) {
            DataRow dr = dt.NewRow ();
            for (int i = 0; i < fieldCount; i ++) {
                product_codes.Add (csv [i]);
                dr [i] = csv [i];
            }
            dt.Rows.Add (dr);
        }
    }
}
----------------------------------------

 public static void ProcessCsv () {
    var filename = @"your_file_path\filename.csv";
    DataTable dt = new DataTable ("MyTable");
    List < string > product_codes = new List < string > ();
    CsvReader csv = new CsvReader (File.OpenText (filename));
    while (csv.ReadNextRecord ()) {
        DataRow dr = dt.NewRow ();
        for (int i = 0; i < csv.FieldCount; i ++) {
            product_codes.Add (csv [i]);
            dr [i] = csv [i];
            dt.Columns.Add (csv.GetFieldHeaders () [i], typeof (string));
        }
        dt.Rows.Add (dr);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
684
1
Gpt3D_Clone684_1.cs 1 12
Gpt3D_Clone684_1.cs 13 35
----------------------------------------

public void LaunchThreads () {
    for (int i = 0; i < 20; i ++) {
        Worker worker = new Worker ();
        worker.DoneCallBack = new WorkerCallbackDelegate (WorkerCallback);
        Thread thread = new Thread (worker.DoWork);
        thread.IsBackground = true;
        thread.Start ();
        lock (locker)
        {
            activeWorkers.Add (thread.ManagedThreadId, worker);
        }}
}
----------------------------------------

  public void LaunchThreads () {
    SpinLock spinLock = new SpinLock();
    for (int i = 0; i < 20; i ++) {
        Worker worker = new Worker ();
        worker.DoneCallBack = new WorkerCallbackDelegate (WorkerCallback);
        Thread thread = new Thread (worker.DoWork);
        thread.IsBackground = true;
        thread.Start ();
        
        bool lockTaken = false;
        spinLock.Enter(ref lockTaken);
        try
        {
            activeWorkers.Add (thread.ManagedThreadId, worker);
        }
        finally
        {
            if (lockTaken) spinLock.Exit();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
684
2
Gpt3D_Clone684_2.cs 1 12
Gpt3D_Clone684_2.cs 13 30
----------------------------------------

public void LaunchThreads () {
    for (int i = 0; i < 20; i ++) {
        Worker worker = new Worker ();
        worker.DoneCallBack = new WorkerCallbackDelegate (WorkerCallback);
        Thread thread = new Thread (worker.DoWork);
        thread.IsBackground = true;
        thread.Start ();
        lock (locker)
        {
            activeWorkers.Add (thread.ManagedThreadId, worker);
        }}
}
----------------------------------------

 public void LaunchThreads () {
    Barrier barrier = new Barrier(20);
    for (int i = 0; i < 20; i ++) {
        Worker worker = new Worker ();
        worker.DoneCallBack = new WorkerCallbackDelegate (WorkerCallback);
        ThreadPool.QueueUserWorkItem (new WaitCallback((object state) =>
        {
            barrier.SignalAndWait();
            worker.DoWork();
        }));
        lock (locker)
        {
            activeWorkers.Add (ThreadPool.GetCurrentlyRunningThreadId(), worker);
        }}
    barrier.SignalAndWait();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
684
3
Gpt3D_Clone684_3.cs 1 12
Gpt3D_Clone684_3.cs 13 30
----------------------------------------

public void LaunchThreads () {
    for (int i = 0; i < 20; i ++) {
        Worker worker = new Worker ();
        worker.DoneCallBack = new WorkerCallbackDelegate (WorkerCallback);
        Thread thread = new Thread (worker.DoWork);
        thread.IsBackground = true;
        thread.Start ();
        lock (locker)
        {
            activeWorkers.Add (thread.ManagedThreadId, worker);
        }}
}
----------------------------------------

  public void LaunchThreads () {
    SemaphoreSlim semaphore = new SemaphoreSlim (20);
    for (int i = 0; i < 20; i ++) {
        semaphore.Wait();
        Worker worker = new Worker ();
        worker.DoneCallBack = new WorkerCallbackDelegate (WorkerCallback);
        ThreadPool.QueueUserWorkItem (new WaitCallback((object state) =>
        {
            worker.DoWork();
            semaphore.Release();
        }));
        lock (locker)
        {
           activeWorkers.Add (ThreadPool.GetCurrentlyRunningThreadId(), worker);
        }}
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
684
4
Gpt3D_Clone684_4.cs 1 12
Gpt3D_Clone684_4.cs 13 35
----------------------------------------

public void LaunchThreads () {
    for (int i = 0; i < 20; i ++) {
        Worker worker = new Worker ();
        worker.DoneCallBack = new WorkerCallbackDelegate (WorkerCallback);
        Thread thread = new Thread (worker.DoWork);
        thread.IsBackground = true;
        thread.Start ();
        lock (locker)
        {
            activeWorkers.Add (thread.ManagedThreadId, worker);
        }}
}
----------------------------------------

  public void LaunchThreads () {
    BlockingCollection<Action> blockingCollection = new BlockingCollection<Action>(20);
    for (int i = 0; i < 20; i++)
    {
        Worker worker = new Worker();
        worker.DoneCallBack = new WorkerCallbackDelegate (WorkerCallback);
        
        blockingCollection.Add(worker.DoWork);
    }
    Task[] tasks = blockingCollection.GetConsumingEnumerable().Select(action => Task.Factory.StartNew(action)).ToArray();
    Task.WaitAll(tasks);
    foreach (var t in tasks)
    {
        lock (locker)
        {
            activeWorkers.Add (t.Id, (Worker)worker);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
684
5
Gpt3D_Clone684_5.cs 1 12
Gpt3D_Clone684_5.cs 13 27
----------------------------------------

public void LaunchThreads () {
    for (int i = 0; i < 20; i ++) {
        Worker worker = new Worker ();
        worker.DoneCallBack = new WorkerCallbackDelegate (WorkerCallback);
        Thread thread = new Thread (worker.DoWork);
        thread.IsBackground = true;
        thread.Start ();
        lock (locker)
        {
            activeWorkers.Add (thread.ManagedThreadId, worker);
        }}
}
----------------------------------------

  public void LaunchThreads () {
    Thread [] threads = new Thread[20];
    for (int i = 0; i < 20; i ++) {
        Worker worker = new Worker ();
        worker.DoneCallBack = new WorkerCallbackDelegate (WorkerCallback);
        threads[i] = new Thread (worker.DoWork);
        threads[i].IsBackground = true;
        threads[i].Start ();
        lock (locker)
        {
            activeWorkers.Add (threads[i].ManagedThreadId, worker);
        }}
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
684
6
Gpt3D_Clone684_6.cs 1 12
Gpt3D_Clone684_6.cs 13 27
----------------------------------------

public void LaunchThreads () {
    for (int i = 0; i < 20; i ++) {
        Worker worker = new Worker ();
        worker.DoneCallBack = new WorkerCallbackDelegate (WorkerCallback);
        Thread thread = new Thread (worker.DoWork);
        thread.IsBackground = true;
        thread.Start ();
        lock (locker)
        {
            activeWorkers.Add (thread.ManagedThreadId, worker);
        }}
}
----------------------------------------

  public void LaunchThreads () {
    SemaphoreSlim semaphore = new SemaphoreSlim (20);
    for (int i = 0; i < 20; i ++) {
        semaphore.Wait();
        Worker worker = new Worker ();
        worker.DoneCallBack = new WorkerCallbackDelegate (WorkerCallback);
        Task.Factory.StartNew (worker.DoWork())
	    .ContinueWith (task => semaphore.Release());
        lock (locker)
        {
            activeWorkers.Add (Thread.CurrentThread.ManagedThreadId, worker);
        }}
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
684
7
Gpt3D_Clone684_7.cs 1 12
Gpt3D_Clone684_7.cs 13 25
----------------------------------------

public void LaunchThreads () {
    for (int i = 0; i < 20; i ++) {
        Worker worker = new Worker ();
        worker.DoneCallBack = new WorkerCallbackDelegate (WorkerCallback);
        Thread thread = new Thread (worker.DoWork);
        thread.IsBackground = true;
        thread.Start ();
        lock (locker)
        {
            activeWorkers.Add (thread.ManagedThreadId, worker);
        }}
}
----------------------------------------

  public void LaunchThreads () {
    ThreadPool . SetMaxThreads (20 ,20);
    for (int i = 0; i < 20; i ++) {
        Worker worker = new Worker ();
        worker.DoneCallBack = new WorkerCallbackDelegate (WorkerCallback);
        ThreadPool.QueueUserWorkItem(new WaitCallback(worker.DoWork));
        lock (locker)
        {
            activeWorkers.Add (ThreadPool.GetCurrentlyRunningThreadId(), worker);
        }}
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
684
8
Gpt3D_Clone684_8.cs 1 12
Gpt3D_Clone684_8.cs 13 26
----------------------------------------

public void LaunchThreads () {
    for (int i = 0; i < 20; i ++) {
        Worker worker = new Worker ();
        worker.DoneCallBack = new WorkerCallbackDelegate (WorkerCallback);
        Thread thread = new Thread (worker.DoWork);
        thread.IsBackground = true;
        thread.Start ();
        lock (locker)
        {
            activeWorkers.Add (thread.ManagedThreadId, worker);
        }}
}
----------------------------------------

  public void LaunchThreads () {
    Parallel.For (0, 20, i =>
    {
        Worker worker = new Worker ();
        worker.DoneCallBack = new WorkerCallbackDelegate (WorkerCallback);
        worker.DoWork();
        lock (locker)
        {
            activeWorkers.Add (Thread.CurrentThread.ManagedThreadId, worker);
        }
    });
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
685
0
Gpt3D_Clone685_0.cs 1 17
Gpt3D_Clone685_0.cs 18 46
----------------------------------------

public void ValidateBearerToken (OwinContext context) {
    try {
        var tokenHandler = new JwtSecurityTokenHandler ();
        byte [] securityKey = GetBytes ("some key");
        SecurityToken securityToken;
        var validationParameters = new TokenValidationParameters () {ValidAudience = "http://localhost:2000", IssuerSigningToken = new BinarySecretSecurityToken (securityKey), ValidIssuer = "Self"};
        var auth = context.Request.Headers ["Authorization"];
        if (! string.IsNullOrWhiteSpace (auth) && auth.Contains ("Bearer")) {
            var token = auth.Split (' ') [1];
            var principal = tokenHandler.ValidateToken (token, validationParameters, out securityToken);
            context.Request.User = principal;
        }
    }
    catch (Exception ex) {
        var message = ex.Message;
    }
}
----------------------------------------

	public void ValidateBearerToken (OwinContext context) {
            try
        {
            string authorization = context.Request.Headers["Authorization"];
            if (!String.IsNullOrWhiteSpace(authorization) && authorization.Contains("Bearer"))
            {
                string token = authorization.Split(' ')[1];
                var tokenHandler = new JwtSecurityTokenHandler();
                var securityBytes = GetBytes("some key");
                var securityToken = new BinarySecretSecurityToken(securityBytes);
                var validationParameters = new TokenValidationParameters
                {
                    ValidAudience = "http://localhost:2000",
                    IssuerSigningToken = securityToken,
                    ValidIssuer = "Self"
                };
                var principal = tokenHandler.ValidateToken(token, validationParameters, out securityToken);
                context.Request.User = principal;
            }
        }
        catch (Exception ex)
        {
            var message = ex.Message;}
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
685
1
Gpt3D_Clone685_1.cs 1 17
Gpt3D_Clone685_1.cs 18 46
----------------------------------------

public void ValidateBearerToken (OwinContext context) {
    try {
        var tokenHandler = new JwtSecurityTokenHandler ();
        byte [] securityKey = GetBytes ("some key");
        SecurityToken securityToken;
        var validationParameters = new TokenValidationParameters () {ValidAudience = "http://localhost:2000", IssuerSigningToken = new BinarySecretSecurityToken (securityKey), ValidIssuer = "Self"};
        var auth = context.Request.Headers ["Authorization"];
        if (! string.IsNullOrWhiteSpace (auth) && auth.Contains ("Bearer")) {
            var token = auth.Split (' ') [1];
            var principal = tokenHandler.ValidateToken (token, validationParameters, out securityToken);
            context.Request.User = principal;
        }
    }
    catch (Exception ex) {
        var message = ex.Message;
    }
}
----------------------------------------

	public void ValidateBearerToken (OwinContext context) {
        try
    {
        string authorization = context.Request.Headers["Authorization"];
        if(!string.IsNullOrWhiteSpace(authorization) && authorization.Contains("Bearer"))
        {
            string token = authorization.Split(' ')[1];
            var tokenHandler = new JwtSecurityTokenHandler();
            byte[] securityKey = GetBytes("some key");
            var securityToken = new BinarySecretSecurityToken(securityKey);
            var validationParams = new TokenValidationParameters
            {
                ValidAudience = "http://localhost:2000",
                IssuerSigningToken = securityToken,
                ValidIssuer = "Self"
            };
            var principal = tokenHandler.ValidateToken(token, validationParams, out securityToken);
            context.Request.User = principal;
        }
    }
    catch(Exception ex)
    {
        var message = ex.Message;}
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
685
2
Gpt3D_Clone685_2.cs 1 17
Gpt3D_Clone685_2.cs 18 47
----------------------------------------

public void ValidateBearerToken (OwinContext context) {
    try {
        var tokenHandler = new JwtSecurityTokenHandler ();
        byte [] securityKey = GetBytes ("some key");
        SecurityToken securityToken;
        var validationParameters = new TokenValidationParameters () {ValidAudience = "http://localhost:2000", IssuerSigningToken = new BinarySecretSecurityToken (securityKey), ValidIssuer = "Self"};
        var auth = context.Request.Headers ["Authorization"];
        if (! string.IsNullOrWhiteSpace (auth) && auth.Contains ("Bearer")) {
            var token = auth.Split (' ') [1];
            var principal = tokenHandler.ValidateToken (token, validationParameters, out securityToken);
            context.Request.User = principal;
        }
    }
    catch (Exception ex) {
        var message = ex.Message;
    }
}
----------------------------------------

 public void ValidateBearerToken (OwinContext context) {
            try
        {
        string auth = context.Request.Headers["Authorization"];
        if (! string.IsNullOrWhiteSpace(auth) && auth.Contains("Bearer"))
        {
            string token = auth.Split(' ')[1];
            var handler = new JwtSecurityTokenHandler();
            byte[] securityBytes = GetBytes("some key");
            var securityToken = new BinarySecretSecurityToken(securityBytes);
            var validationParameters = new TokenValidationParameters
            {
                ValidAudience = "http://localhost:2000",
                IssuerSigningToken = securityToken,
                ValidIssuer = "Self"
            };
            var principal = handler.ValidateToken(token, validationParameters, out securityToken);
            context.Request.User = principal;
        }
        }
        catch (Exception ex)
        {
        Console.Write(ex.Message);
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
685
4
Gpt3D_Clone685_4.cs 1 17
Gpt3D_Clone685_4.cs 18 46
----------------------------------------

public void ValidateBearerToken (OwinContext context) {
    try {
        var tokenHandler = new JwtSecurityTokenHandler ();
        byte [] securityKey = GetBytes ("some key");
        SecurityToken securityToken;
        var validationParameters = new TokenValidationParameters () {ValidAudience = "http://localhost:2000", IssuerSigningToken = new BinarySecretSecurityToken (securityKey), ValidIssuer = "Self"};
        var auth = context.Request.Headers ["Authorization"];
        if (! string.IsNullOrWhiteSpace (auth) && auth.Contains ("Bearer")) {
            var token = auth.Split (' ') [1];
            var principal = tokenHandler.ValidateToken (token, validationParameters, out securityToken);
            context.Request.User = principal;
        }
    }
    catch (Exception ex) {
        var message = ex.Message;
    }
}
----------------------------------------

	public void ValidateBearerToken (OwinContext context) {
            try 
        { 
            string auth = context.Request.Headers["Authorization"];   
            if (!string.IsNullOrWhiteSpace(auth) && auth.Contains("Bearer")) 
            { 
                string token = auth.Split(' ')[1]; 
                var handler = new JwtSecurityTokenHandler(); 
                
                var securityKeyBytes = GetBytes("some key"); 
                var securityToken = new BinarySecretSecurityToken(securityKeyBytes); 
            
                var validationParameters = new TokenValidationParameters 
                { 
                    ValidAudience = "http://localhost:2000", 
                    IssuerSigningToken = securityToken, 
                    ValidIssuer = "Self" 
                }; 
                
                var principal = handler.ValidateToken(token, validationParameters, out securityToken); 
                context.Request.User = principal; 
            } 
        } catch (Exception ex) 
        { 
        var message = ex.Message; 
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
686
0
Gpt3D_Clone686_0.cs 1 11
Gpt3D_Clone686_0.cs 12 23
----------------------------------------

static Type CreateEmailType () {
    var assemblyName = new AssemblyName ("DynamicAssembly");
    var assemblyBuilder = AppDomain.CurrentDomain.DefineDynamicAssembly (assemblyName, AssemblyBuilderAccess.Run);
    var moduleBuilder = assemblyBuilder.DefineDynamicModule (assemblyName.Name);
    var typeBuilder = moduleBuilder.DefineType ("Email", (TypeAttributes.Public | TypeAttributes.Sealed | TypeAttributes.SequentialLayout | TypeAttributes.Serializable), typeof (ValueType));
    typeBuilder.DefineField ("From", typeof (string), FieldAttributes.Public);
    typeBuilder.DefineField ("To", typeof (string), FieldAttributes.Public);
    typeBuilder.DefineField ("Subject", typeof (string), FieldAttributes.Public);
    typeBuilder.DefineField ("Body", typeof (string), FieldAttributes.Public);
    return typeBuilder.CreateType ();
}
----------------------------------------

  static Type CreateEmailType () {	
    var typeBuilder = TypeBuilder.CreateTypeBuilder("DynamicAssembly", "Email");
    typeBuilder.SetParent(typeof(ValueType));
    typeBuilder.AddInterfaceImplementation(typeof(ISerializable));
    typeBuilder.DefineField("From", typeof(string), FieldAttributes.Public);
    typeBuilder.DefineField("To", typeof(string), FieldAttributes.Public);
    typeBuilder.DefineField("Subject", typeof(string), FieldAttributes.Public);
    typeBuilder.DefineField("Body", typeof(string), FieldAttributes.Public);		
    return typeBuilder.CreateType();
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
687
1
Gpt3D_Clone687_1.cs 1 31
Gpt3D_Clone687_1.cs 32 63
----------------------------------------

public static IEnumerable < T > TakeLast < T > (this IEnumerable < T > input, int count) {
    if (count <= 0)
        yield break;
    var inputList = input as IList < T >;
    if (inputList != null) {
        int last = inputList.Count;
        int first = last - count;
        if (first < 0)
            first = 0;
        for (int i = first; i < last; i ++)
            yield return inputList [i];
    } else {
        T [] buffer = new T [count];
        int index = 0;
        count = 0;
        foreach (T item in input) {
            buffer [index] = item;
            index = (index + 1) % buffer.Length;
            count ++;
        }
        if (count < buffer.Length)
            index = 0;
        else
            count = buffer.Length;
        while (count > 0) {
            yield return buffer [index];
            index = (index + 1) % buffer.Length;
            count --;
        }
    }
}
----------------------------------------

 public static IEnumerable<T> TakeLast<T>(this IEnumerable<T> input, int count)
{
    if (count <= 0)
        yield break;
    T[] buffer = new T[count];
    int index = 0;
    int countBuffer = 0;
    foreach (T item in input)
    {
        buffer[index] = item;
        index = (index + 1) % buffer.Length;
        if (countBuffer < count)
            countBuffer++;
    }
    if (countBuffer < count)
        index = 0;
    else
        countBuffer = count;
    while (countBuffer > 0)
    {
        yield return buffer[index];
        index = (index + 1) % buffer.Length;
        countBuffer--;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
688
7
Gpt3D_Clone688_7.cs 1 10
Gpt3D_Clone688_7.cs 11 25
----------------------------------------

static void Main (string [] args) {
    string [] cDirectories = Directory.GetDirectories ("C:\\");
    List < DirectorySize > listSizes = new List < DirectorySize > ();
    for (int i = 0; i < cDirectories.Length; i ++) {
        long size = GetDirectorySize (cDirectories [i]);
        if (size != - 1) {
            listSizes.Add (new DirectorySize () {DirectoryName = cDirectories [i], DirectorySizes = size});
        }
    }
}
----------------------------------------

   static void Main(string[] args)
{
    string[] cDirectories = Directory.GetDirectories("C:\\");
    List<DirectorySize> listSizes = new List<DirectorySize>();
    Parallel.For(0, cDirectories.Length,i =>
    {
        long size = GetDirectorySize(cDirectories[i]);
        if (size != -1)
        {
            listSizes.Add(new DirectorySize() { DirectoryName = cDirectories[i], DirectorySizes = size });
        }
    });
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
688
9
Gpt3D_Clone688_9.cs 1 10
Gpt3D_Clone688_9.cs 11 25
----------------------------------------

static void Main (string [] args) {
    string [] cDirectories = Directory.GetDirectories ("C:\\");
    List < DirectorySize > listSizes = new List < DirectorySize > ();
    for (int i = 0; i < cDirectories.Length; i ++) {
        long size = GetDirectorySize (cDirectories [i]);
        if (size != - 1) {
            listSizes.Add (new DirectorySize () {DirectoryName = cDirectories [i], DirectorySizes = size});
        }
    }
}
----------------------------------------

   static void Main(string[] args)
{
    string[] cDirectories = Directory.GetDirectories("C:\\");
    List<DirectorySize> listSizes = new List<DirectorySize>();
    foreach (string item in cDirectories)
    {
        long size = GetDirectorySize(item);
        if (size != -1)
        {
            listSizes.Add(new DirectorySize() { DirectoryName = item, DirectorySizes = size });
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
689
2
Gpt3D_Clone689_2.cs 1 24
Gpt3D_Clone689_2.cs 25 78
----------------------------------------

public bool ApplyRules (List < Rule > rules, User user) {
    foreach (var rule in rules) {
        IComparable value = null;
        object limit = null;
        if (rule.objectProperty == "age") {
            value = user.age;
            limit = Convert.ToInt32 (rule.TargetValue);
        } else if (rule.objectProperty == "username") {
            value = user.username;
            limit = rule.TargetValue;
        } else
            throw new InvalidOperationException ("invalid property");
        int result = value.CompareTo (limit);
        if (rule.ComparisonOperator == "equal") {
            if (! (result == 0))
                return false;
        } else if (rule.ComparisonOperator == "greater_than") {
            if (! (result > 0))
                return false;
        } else
            throw new InvalidOperationException ("invalid operator");
    }
    return true;
}
----------------------------------------

 public bool ApplyRules(List<Rule> rules, User user) 
{
    bool flag = true;
    foreach (var rule in rules) 
    {
        IComparable value = null;
        object limit = null;
        if (rule.objectProperty == "age") 
        {
            value = user.age;
            limit = Convert.ToInt32(rule.TargetValue);
        } 
        else if (rule.objectProperty == "username") 
        {
            value = user.username;
            limit = rule.TargetValue;
        } 
        else 
        {
            throw new InvalidOperationException("invalid property");
        }
        int result = value.CompareTo(limit);
        
        if (rule.ComparisonOperator == "equal") 
        {
            if (result != 0) 
            {
                flag = false;
            } 
            else 
            {
                flag = true;
            }
        } 
        else if (rule.ComparisonOperator == "greater_than") 
        {
            if (result <= 0) 
            {
                flag = false;
            } 
            else 
            {
                flag = true;
            }
        }
        else 
        {
            throw new InvalidOperationException("invalid operator");
        }
    }
    return flag;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
689
4
Gpt3D_Clone689_4.cs 1 24
Gpt3D_Clone689_4.cs 25 72
----------------------------------------

public bool ApplyRules (List < Rule > rules, User user) {
    foreach (var rule in rules) {
        IComparable value = null;
        object limit = null;
        if (rule.objectProperty == "age") {
            value = user.age;
            limit = Convert.ToInt32 (rule.TargetValue);
        } else if (rule.objectProperty == "username") {
            value = user.username;
            limit = rule.TargetValue;
        } else
            throw new InvalidOperationException ("invalid property");
        int result = value.CompareTo (limit);
        if (rule.ComparisonOperator == "equal") {
            if (! (result == 0))
                return false;
        } else if (rule.ComparisonOperator == "greater_than") {
            if (! (result > 0))
                return false;
        } else
            throw new InvalidOperationException ("invalid operator");
    }
    return true;
}
----------------------------------------

 public bool ApplyRules(List<Rule> rules, User user) 
{
     bool isValid = true;
     foreach (Rule rule in rules) 
     {
         IComparable value = null;
         object limit = null;
         if (rule.objectProperty == "age") 
         {
             value = user.age;
             limit = Convert.ToInt32(rule.TargetValue);
         } 
         else if (rule.objectProperty == "username") 
         {
             value = user.username;
             limit = rule.TargetValue;
         } 
         else 
         {
             throw new InvalidOperationException("invalid property");
         }
         int result = value.CompareTo(limit);
         if (rule.ComparisonOperator == "equal") 
         {
             if (result != 0) 
             {
                 isValid = false;
                 break;
             }
         } 
         else if (rule.ComparisonOperator == "greater_than") 
         {
             if (result <= 0) 
             {
                 isValid = false;
                 break;
             }
         } 
         else 
         {
             throw new InvalidOperationException("invalid operator");
         }
     }
     return isValid;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
690
0
Gpt3D_Clone690_0.cs 1 11
Gpt3D_Clone690_0.cs 12 26
----------------------------------------

static byte [] Year2Bcd (int year) {
    if (year < 0 || year > 9999)
        throw new ArgumentException ();
    int bcd = 0;
    for (int digit = 0; digit < 4; ++ digit) {
        int nibble = year % 10;
        bcd |= nibble << (digit * 4);
        year /= 10;
    }
    return new byte [] {(byte) ((bcd > > 8) & 0xff), (byte) (bcd & 0xff)};
}
----------------------------------------

 static byte [] Year2Bcd (int year) {
    if (year < 0 || year > 9999)
        throw new ArgumentException ();
    int bcd = 0;
    int digit = 0;
    while(year > 0){
        int nibble = year % 10;
        bcd |= nibble << (3 - digit * 4);
        year /= 10;
        digit++;
    }
    return new byte [] {(byte) ((bcd > > 8) & 0xff), (byte) (bcd & 0xff)};
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
690
1
Gpt3D_Clone690_1.cs 1 11
Gpt3D_Clone690_1.cs 12 24
----------------------------------------

static byte [] Year2Bcd (int year) {
    if (year < 0 || year > 9999)
        throw new ArgumentException ();
    int bcd = 0;
    for (int digit = 0; digit < 4; ++ digit) {
        int nibble = year % 10;
        bcd |= nibble << (digit * 4);
        year /= 10;
    }
    return new byte [] {(byte) ((bcd > > 8) & 0xff), (byte) (bcd & 0xff)};
}
----------------------------------------

 static byte [] Year2Bcd (int year) {
    if (year < 0 || year > 9999)
        throw new ArgumentException ();
    int bcd = 0;
    for (int digit = 0; digit < 4; digit++) {
        int nibble = year % 10;
        bcd |= nibble << (3 - digit * 4);
        year = year/10;
    }
    return new byte [] {(byte) ((bcd > > 8) & 0xff), (byte) (bcd & 0xff)};
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
690
2
Gpt3D_Clone690_2.cs 1 11
Gpt3D_Clone690_2.cs 12 24
----------------------------------------

static byte [] Year2Bcd (int year) {
    if (year < 0 || year > 9999)
        throw new ArgumentException ();
    int bcd = 0;
    for (int digit = 0; digit < 4; ++ digit) {
        int nibble = year % 10;
        bcd |= nibble << (digit * 4);
        year /= 10;
    }
    return new byte [] {(byte) ((bcd > > 8) & 0xff), (byte) (bcd & 0xff)};
}
----------------------------------------

 static byte [] Year2Bcd (int year) {
    if (year < 0 || year > 9999)
        throw new ArgumentException ();
    int bcd = 0;
    foreach(char c in year.ToString()){
        int nibble = int.Parse(c.ToString());
        bcd |= nibble << ((3 - year.ToString().Length +1)*4);
        year /= 10;
   }
   return new byte [] {(byte) ((bcd > > 8) & 0xff), (byte) (bcd & 0xff)};
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
691
5
Gpt3D_Clone691_5.cs 1 11
Gpt3D_Clone691_5.cs 12 29
----------------------------------------

public static string EnumValue (this MyEnum e) {
    switch (e) {
        case MyEnum.First :
            return "First Friendly Value";
        case MyEnum.Second :
            return "Second Friendly Value";
        case MyEnum.Third :
            return "Third Friendly Value";
    }
    return "Horrible Failure!!";
}
----------------------------------------

 public static string EnumValue (this MyEnum e) {
        switch (e) {
            case MyEnum.First :
                return "First Friendly Value";
            break;
            case MyEnum.Second :
                return "Second Friendly Value";
            break;
            case MyEnum.Third :
                return "Third Friendly Value";
            break;
            default:
                return "Horrible Failure!!";
            break;
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
691
9
Gpt3D_Clone691_9.cs 1 11
Gpt3D_Clone691_9.cs 12 23
----------------------------------------

public static string EnumValue (this MyEnum e) {
    switch (e) {
        case MyEnum.First :
            return "First Friendly Value";
        case MyEnum.Second :
            return "Second Friendly Value";
        case MyEnum.Third :
            return "Third Friendly Value";
    }
    return "Horrible Failure!!";
}
----------------------------------------

  public static string EnumValue (this MyEnum e) { 
        if(e == MyEnum.First) 
            return "First Friendly Value";
        else if(e == MyEnum.Second) 
            return "Second Friendly Value";
        else if(e == MyEnum.Third) 
            return "Third Friendly Value";
        else
            return "Horrible Failure!!";      
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
693
0
Gpt3D_Clone693_0.cs 1 32
Gpt3D_Clone693_0.cs 33 75
----------------------------------------

private long [] GetHistogram (Bitmap image) {
    var histogram = new long [256];
    bool imageWasCloned = false;
    if (image.PixelFormat != PixelFormat.Format24bppRgb) {
        image = image.Clone (new Rectangle (0, 0, image.Width, image.Height), PixelFormat.Format24bppRgb);
        imageWasCloned = true;
    }
    BitmapData bmd = null;
    try {
        bmd = image.LockBits (new Rectangle (0, 0, image.Width, image.Height), ImageLockMode.ReadOnly, PixelFormat.Format24bppRgb);
        const int pixelSize = 3;
        int height = bmd.Height;
        int width = bmd.Width;
        int rowPadding = bmd.Stride - (width * pixelSize);
        unsafe {
            byte * pixelPtr = (byte *) bmd.Scan0;
            for (int y = 0; y < height; ++ y) {
                for (int x = 0; x < width; ++ x) {
                    histogram [(pixelPtr [0] + pixelPtr [1] + pixelPtr [2]) / 3] ++;
                    pixelPtr += pixelSize;
                }
                pixelPtr += rowPadding;
            }
        }}
    finally {
        if (bmd != null)
            image.UnlockBits (bmd);
        if (imageWasCloned)
            image.Dispose ();
    }
    return histogram;
}
----------------------------------------

 private long[] GetHistogram(Bitmap image)
{
    long[] histogram = new long[256];
    bool imageWasCloned = false;
    if (image.PixelFormat != PixelFormat.Format24bppRgb)
    {
        image = image.Clone(new Rectangle(0, 0, image.Width, image.Height), PixelFormat.Format24bppRgb);
        imageWasCloned = true;
    }
    BitmapData bmd = null;
    try
    {
        bmd = image.LockBits(new Rectangle(0, 0, image.Width, image.Height), ImageLockMode.ReadOnly, PixelFormat.Format24bppRgb);
        int pixelSize = 3;
        int height = bmd.Height;
        int widthInBytes = bmd.Width * pixelSize;
        unsafe
        {
            byte* pixelPtr = (byte*)(void*)bmd.Scan0;
            for (int y = 0; y < height; ++y)
            {
                for (int x = 0; x < widthInBytes; x = x + pixelSize)
                {
                    histogram[(pixelPtr[0] + pixelPtr[1] + pixelPtr[2]) / 3]++;
                    pixelPtr += pixelSize;
                }
                pixelPtr += bmd.Stride - widthInBytes;
            }
        }
    }
    finally
    {
        if (bmd != null)
            image.UnlockBits(bmd);
        if (imageWasCloned)
            image.Dispose();
    }
    return histogram;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
695
0
Gpt3D_Clone695_0.cs 1 21
Gpt3D_Clone695_0.cs 22 53
----------------------------------------

public static void Main () {
    int iterations = 500 * 1000 * 1000;
    double nan = double.NaN;
    double notNan = 42;
    Stopwatch sw = Stopwatch.StartNew ();
    bool isNan;
    for (int i = 0; i < iterations; i ++) {
        isNan = IsNaN (nan);
        isNan = IsNaN (notNan);
    }
    sw.Stop ();
    Console.WriteLine ("IsNaN: {0}", sw.ElapsedMilliseconds);
    sw = Stopwatch.StartNew ();
    for (int i = 0; i < iterations; i ++) {
        isNan = double.IsNaN (nan);
        isNan = double.IsNaN (notNan);
    }
    sw.Stop ();
    Console.WriteLine ("double.IsNaN: {0}", sw.ElapsedMilliseconds);
    Console.Read ();
}
----------------------------------------

 public static void Main()
{
    int iterations = 500 * 1000 * 1000;
    double nan = Double.NaN;
    double notNan = 42;
    Stopwatch sw = Stopwatch.StartNew();
    // Use the static IsNaN() method
    bool isNan;
    for (int i = 0; i < iterations; i++)
    {
        isNan = Double.IsNaN(nan);
        isNan = Double.IsNaN(notNan);
    }
    sw.Stop();
    Console.WriteLine("Double.IsNaN: {0}", sw.ElapsedMilliseconds);
 
    // Use the VBScript intrinsic IsNaN() function
    sw = Stopwatch.StartNew();
    dynamic scriptGlobal = Microsoft.JScript.ScriptRuntime.ScriptEngine("jscript");
    for (int i = 0; i < iterations; i++)
    {
        isNan = scriptGlobal.IsNaN(nan);
        isNan = scriptGlobal.IsNaN(notNan);
    }
    sw.Stop();
    Console.WriteLine("ScriptGlobal.IsNaN: {0}", sw.ElapsedMilliseconds);
    Console.Read();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
695
1
Gpt3D_Clone695_1.cs 1 21
Gpt3D_Clone695_1.cs 22 58
----------------------------------------

public static void Main () {
    int iterations = 500 * 1000 * 1000;
    double nan = double.NaN;
    double notNan = 42;
    Stopwatch sw = Stopwatch.StartNew ();
    bool isNan;
    for (int i = 0; i < iterations; i ++) {
        isNan = IsNaN (nan);
        isNan = IsNaN (notNan);
    }
    sw.Stop ();
    Console.WriteLine ("IsNaN: {0}", sw.ElapsedMilliseconds);
    sw = Stopwatch.StartNew ();
    for (int i = 0; i < iterations; i ++) {
        isNan = double.IsNaN (nan);
        isNan = double.IsNaN (notNan);
    }
    sw.Stop ();
    Console.WriteLine ("double.IsNaN: {0}", sw.ElapsedMilliseconds);
    Console.Read ();
}
----------------------------------------

 public static void Main()
{
                int iterations = 500 * 1000 * 1000;
                double nan = Double.NaN;
                double notNan = 42;
                Stopwatch sw = Stopwatch.StartNew();
                // Use the static IsNaN() method
                bool isNan;
                for (int i = 0; i < iterations; i++)
                {
                    isNan = Double.IsNaN(nan);
                    isNan = Double.IsNaN(notNan);
                }
                sw.Stop();
                Console.WriteLine("Double.IsNaN: {0}", sw.ElapsedMilliseconds);
            
            // Use the EqualwithEpsilon() function to check for NaN
                sw = Stopwatch.StartNew();
                for (int i = 0; i < iterations; i++)
                {
                    isNan = EqualWithEpsilon(nan, Double.NaN);
                    isNan = EqualWithEpsilon(notNan, Double.NaN);
                }
                sw.Stop();
                Console.WriteLine("EqualWithEpsilon: {0}", sw.ElapsedMilliseconds);
            
                Console.Read();
            }
            static bool EqualWithEpsilon(double left, double right)
            {
            double epsilon = 0.000001;
            return (Math.Abs(left - right) <= epsilon);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
695
2
Gpt3D_Clone695_2.cs 1 21
Gpt3D_Clone695_2.cs 22 52
----------------------------------------

public static void Main () {
    int iterations = 500 * 1000 * 1000;
    double nan = double.NaN;
    double notNan = 42;
    Stopwatch sw = Stopwatch.StartNew ();
    bool isNan;
    for (int i = 0; i < iterations; i ++) {
        isNan = IsNaN (nan);
        isNan = IsNaN (notNan);
    }
    sw.Stop ();
    Console.WriteLine ("IsNaN: {0}", sw.ElapsedMilliseconds);
    sw = Stopwatch.StartNew ();
    for (int i = 0; i < iterations; i ++) {
        isNan = double.IsNaN (nan);
        isNan = double.IsNaN (notNan);
    }
    sw.Stop ();
    Console.WriteLine ("double.IsNaN: {0}", sw.ElapsedMilliseconds);
    Console.Read ();
}
----------------------------------------

  public static void Main()
{
    int iterations = 500 * 1000 * 1000;
    double nan = Double.NaN;
    double notNan = 42;
    Stopwatch sw = Stopwatch.StartNew();
    // Use the static IsNaN() method
    bool isNan;
    for (int i = 0; i < iterations; i++)
    {
        isNan = Double.IsNaN(nan);
        isNan = Double.IsNaN(notNan);
    }
    sw.Stop();
    Console.WriteLine("Double.IsNaN: {0}", sw.ElapsedMilliseconds);
 
   // Use the == and != operators to check for NaN
    sw = Stopwatch.StartNew();
    for (int i = 0; i < iterations; i++)
    {
        isNan = nan == double.NaN;
        isNan = notNan != double.NaN;
    }
    sw.Stop();
    Console.WriteLine("EqualTo Nat: {0}", sw.ElapsedMilliseconds);
 
    Console.Read();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
695
3
Gpt3D_Clone695_3.cs 1 21
Gpt3D_Clone695_3.cs 22 57
----------------------------------------

public static void Main () {
    int iterations = 500 * 1000 * 1000;
    double nan = double.NaN;
    double notNan = 42;
    Stopwatch sw = Stopwatch.StartNew ();
    bool isNan;
    for (int i = 0; i < iterations; i ++) {
        isNan = IsNaN (nan);
        isNan = IsNaN (notNan);
    }
    sw.Stop ();
    Console.WriteLine ("IsNaN: {0}", sw.ElapsedMilliseconds);
    sw = Stopwatch.StartNew ();
    for (int i = 0; i < iterations; i ++) {
        isNan = double.IsNaN (nan);
        isNan = double.IsNaN (notNan);
    }
    sw.Stop ();
    Console.WriteLine ("double.IsNaN: {0}", sw.ElapsedMilliseconds);
    Console.Read ();
}
----------------------------------------

 public static void Main()
{
            int iterations = 500 * 1000 * 1000;
            double nan = Double.NaN;
            double notNan = 42;
            Stopwatch sw = Stopwatch.StartNew();
            // Use the static IsNaN() method
            bool isNan;
            for (int i = 0; i < iterations; i++)
            {
                isNan = Double.IsNaN(nan);
                isNan = Double.IsNaN(notNan);
            }
            sw.Stop();
            Console.WriteLine("Double.IsNaN: {0}", sw.ElapsedMilliseconds);
        
        // Use the EqualsTo() function to check for NaN
            sw = Stopwatch.StartNew();
            for (int i = 0; i < iterations; i++)
            {
                isNan = EqualsTo(nan, Double.NaN);
                isNan = EqualsTo(notNan, Double.NaN);
            }
            sw.Stop();
            Console.WriteLine("EqualsTo: {0}", sw.ElapsedMilliseconds);
        
            Console.Read();
        }
        static bool EqualsTo(double value1, double value2)
        {
            return value1 == value2 || Double.IsNaN(value1) && Double.IsNaN(value2);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
695
4
Gpt3D_Clone695_4.cs 1 21
Gpt3D_Clone695_4.cs 22 52
----------------------------------------

public static void Main () {
    int iterations = 500 * 1000 * 1000;
    double nan = double.NaN;
    double notNan = 42;
    Stopwatch sw = Stopwatch.StartNew ();
    bool isNan;
    for (int i = 0; i < iterations; i ++) {
        isNan = IsNaN (nan);
        isNan = IsNaN (notNan);
    }
    sw.Stop ();
    Console.WriteLine ("IsNaN: {0}", sw.ElapsedMilliseconds);
    sw = Stopwatch.StartNew ();
    for (int i = 0; i < iterations; i ++) {
        isNan = double.IsNaN (nan);
        isNan = double.IsNaN (notNan);
    }
    sw.Stop ();
    Console.WriteLine ("double.IsNaN: {0}", sw.ElapsedMilliseconds);
    Console.Read ();
}
----------------------------------------

 public static void Main()
{
    int iterations = 500 * 1000 * 1000;
    double nan = Double.NaN;
    double notNan = 42;
    Stopwatch sw = Stopwatch.StartNew();
    // Use the static IsNaN() method
    bool isNan;
    for (int i = 0; i < iterations; i++)
    {
        isNan = Double.IsNaN(nan);
        isNan = Double.IsNaN(notNan);
    }
    sw.Stop();
    Console.WriteLine("Double.IsNaN: {0}", sw.ElapsedMilliseconds);
 
   // Use the compareTo() function to check for NaN
    sw = Stopwatch.StartNew();
    for (int i = 0; i < iterations; i++)
    {
        isNan = nan.CompareTo(Double.NaN) == 0;
        isNan = notNan.CompareTo(Double.NaN) != 0;
    }
    sw.Stop();
    Console.WriteLine("CompareTo: {0}", sw.ElapsedMilliseconds);
 
    Console.Read();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
697
0
Gpt3D_Clone697_0.cs 1 12
Gpt3D_Clone697_0.cs 13 34
----------------------------------------

private void textBox1_TextChanged (object sender, EventArgs e) {
    Point caretLocalLoc = textBox1.GetPositionFromCharIndex (textBox1.Text.Length - 1);
    Point caretLoc = new Point (caretLocalLoc.X + InitialTextBoxLoc.X, caretLocalLoc.Y + InitialTextBoxLoc.Y);
    Point scrollLoc = flowLayoutPanel1.AutoScrollPosition;
    if (caretLoc.X >= flowLayoutPanel1.Size.Width - 10) {
        scrollLoc.X = caretLoc.X;
    }
    if (caretLoc.Y >= flowLayoutPanel1.Size.Height - 10) {
        scrollLoc.Y = caretLoc.Y;
    }
    flowLayoutPanel1.AutoScrollPosition = scrollLoc;
}
----------------------------------------

 private void textBox1_TextChanged (object sender, EventArgs e) 
{
    Point caretLocalLoc = textBox1.GetPositionFromCharIndex(textBox1.Text.Length - 1);
    Point caretLoc = new Point(caretLocalLoc.X + InitialTextBoxLoc.X, caretLocalLoc.Y + InitialTextBoxLoc.Y);
    Point scrollLoc = flowLayoutPanel1.AutoScrollPosition;
    if (caretLoc.X >= flowLayoutPanel1.Size.Width - 10)
    {
        int newX = Math.Max(0, caretLoc.X - flowLayoutPanel1.Size.Width + 10);
        scrollLoc.X = newX;
    }
    if (caretLoc.Y >= flowLayoutPanel1.Size.Height - 10)
    {
        int newY = Math.Max(0, caretLoc.Y - flowLayoutPanel1.Size.Height + 10);
        scrollLoc.Y = newY;
    }
    flowLayoutPanel1.AutoScrollPosition = scrollLoc;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
697
1
Gpt3D_Clone697_1.cs 1 12
Gpt3D_Clone697_1.cs 13 31
----------------------------------------

private void textBox1_TextChanged (object sender, EventArgs e) {
    Point caretLocalLoc = textBox1.GetPositionFromCharIndex (textBox1.Text.Length - 1);
    Point caretLoc = new Point (caretLocalLoc.X + InitialTextBoxLoc.X, caretLocalLoc.Y + InitialTextBoxLoc.Y);
    Point scrollLoc = flowLayoutPanel1.AutoScrollPosition;
    if (caretLoc.X >= flowLayoutPanel1.Size.Width - 10) {
        scrollLoc.X = caretLoc.X;
    }
    if (caretLoc.Y >= flowLayoutPanel1.Size.Height - 10) {
        scrollLoc.Y = caretLoc.Y;
    }
    flowLayoutPanel1.AutoScrollPosition = scrollLoc;
}
----------------------------------------

 private void textBox1_TextChanged (object sender, EventArgs e)
{
    Point caretLocalLoc = textBox1.GetPositionFromCharIndex (textBox1.Text.Length - 1);
    Point caretLoc = new Point (caretLocalLoc.X + InitialTextBoxLoc.X, caretLocalLoc.Y + InitialTextBoxLoc.Y);
    Point scrollLoc = flowLayoutPanel1.AutoScrollPosition;
    if (caretLoc.X > flowLayoutPanel1.Size.Width - 10) 
    {
        int OffsetX = flowLayoutPanel1.Size.Width - 10;
        scrollLoc.X = caretLoc.X - OffsetX;
    }
    if (caretLoc.Y >= flowLayoutPanel1.Size.Height - 10) 
    {
        int OffsetY = flowLayoutPanel1.Size.Height - 10;
        scrollLoc.Y = caretLoc.Y - OffsetY;
    }
    flowLayoutPanel1.AutoScrollPosition = scrollLoc;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
697
2
Gpt3D_Clone697_2.cs 1 12
Gpt3D_Clone697_2.cs 13 32
----------------------------------------

private void textBox1_TextChanged (object sender, EventArgs e) {
    Point caretLocalLoc = textBox1.GetPositionFromCharIndex (textBox1.Text.Length - 1);
    Point caretLoc = new Point (caretLocalLoc.X + InitialTextBoxLoc.X, caretLocalLoc.Y + InitialTextBoxLoc.Y);
    Point scrollLoc = flowLayoutPanel1.AutoScrollPosition;
    if (caretLoc.X >= flowLayoutPanel1.Size.Width - 10) {
        scrollLoc.X = caretLoc.X;
    }
    if (caretLoc.Y >= flowLayoutPanel1.Size.Height - 10) {
        scrollLoc.Y = caretLoc.Y;
    }
    flowLayoutPanel1.AutoScrollPosition = scrollLoc;
}
----------------------------------------

 private void textBox1_TextChanged (object sender, EventArgs e) 
{
    Point caretLocalLoc = textBox1.GetPositionFromCharIndex(textBox1.Text.Length - 1);
    Point caretLoc = new Point(caretLocalLoc.X + InitialTextBoxLoc.X, caretLocalLoc.Y + InitialTextBoxLoc.Y);
    Point scrollLoc = flowLayoutPanel1.AutoScrollPosition;
    if (caretLoc.X >= flowLayoutPanel1.Size.Width - 10)
    {
        scrollLoc.X = Math.Max(0, caretLoc.X - flowLayoutPanel1.Size.Width + 10);
        flowLayoutPanel1.HorizontalScroll.Value = scrollLoc.X;
    }
    if (caretLoc.Y >= flowLayoutPanel1.Size.Height - 10)
    {
        scrollLoc.Y = Math.Max(0, caretLoc.Y - flowLayoutPanel1.Size.Height + 10);
        flowLayoutPanel1.VerticalScroll.Value = scrollLoc.Y;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
697
3
Gpt3D_Clone697_3.cs 1 12
Gpt3D_Clone697_3.cs 13 32
----------------------------------------

private void textBox1_TextChanged (object sender, EventArgs e) {
    Point caretLocalLoc = textBox1.GetPositionFromCharIndex (textBox1.Text.Length - 1);
    Point caretLoc = new Point (caretLocalLoc.X + InitialTextBoxLoc.X, caretLocalLoc.Y + InitialTextBoxLoc.Y);
    Point scrollLoc = flowLayoutPanel1.AutoScrollPosition;
    if (caretLoc.X >= flowLayoutPanel1.Size.Width - 10) {
        scrollLoc.X = caretLoc.X;
    }
    if (caretLoc.Y >= flowLayoutPanel1.Size.Height - 10) {
        scrollLoc.Y = caretLoc.Y;
    }
    flowLayoutPanel1.AutoScrollPosition = scrollLoc;
}
----------------------------------------

 private void textBox1_TextChanged(object sender, EventArgs e)
{
    Point caretLocalLoc = textBox1.GetPositionFromCharIndex(textBox1.Text.Length - 1);
    Point caretLoc = new Point(caretLocalLoc.X + InitialTextBoxLoc.X, caretLocalLoc.Y + InitialTextBoxLoc.Y);
    Point scrollLoc = flowLayoutPanel1.AutoScrollPosition;
    if (caretLoc.X >= flowLayoutPanel1.Size.Width - 10)
    {
        scrollLoc.X = Math.Max(0, caretLoc.X - flowLayoutPanel1.Size.Width + 10);
    }
    if (caretLoc.Y >= flowLayoutPanel1.Size.Height - 10)
    {
        scrollLoc.Y = Math.Max(0, caretLoc.Y - flowLayoutPanel1.Size.Height + 10);
    }   
    flowLayoutPanel1.ScrollControlIntoView(textBox1);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
697
4
Gpt3D_Clone697_4.cs 1 12
Gpt3D_Clone697_4.cs 13 29
----------------------------------------

private void textBox1_TextChanged (object sender, EventArgs e) {
    Point caretLocalLoc = textBox1.GetPositionFromCharIndex (textBox1.Text.Length - 1);
    Point caretLoc = new Point (caretLocalLoc.X + InitialTextBoxLoc.X, caretLocalLoc.Y + InitialTextBoxLoc.Y);
    Point scrollLoc = flowLayoutPanel1.AutoScrollPosition;
    if (caretLoc.X >= flowLayoutPanel1.Size.Width - 10) {
        scrollLoc.X = caretLoc.X;
    }
    if (caretLoc.Y >= flowLayoutPanel1.Size.Height - 10) {
        scrollLoc.Y = caretLoc.Y;
    }
    flowLayoutPanel1.AutoScrollPosition = scrollLoc;
}
----------------------------------------

 private void textBox1_TextChanged (object sender, EventArgs e)
{
    Point caretLocalLoc = textBox1.GetPositionFromCharIndex (textBox1.Text.Length - 1);
    Point caretLoc = new Point (caretLocalLoc.X + InitialTextBoxLoc.X, caretLocalLoc.Y + InitialTextBoxLoc.Y);
    Point scrollLoc = flowLayoutPanel1.AutoScrollPosition;
    if (caretLoc.X >= flowLayoutPanel1.Size.Width - 10)
    {
        scrollLoc.X = Math.Max(0, caretLoc.X - flowLayoutPanel1.Size.Width + 10);
    }
    if (caretLoc.Y >= flowLayoutPanel1.Size.Height - 10)
    {
        scrollLoc.Y = Math.Max(0, caretLoc.Y - flowLayoutPanel1.Size.Height + 10);
    }
    System.Windows.Forms.NativeMethods.ScrollWindowEx(flowLayoutPanel1.Handle, scrollLoc.X, scrollLoc.Y, null, null, IntPtr.Zero, null, 5);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
697
5
Gpt3D_Clone697_5.cs 1 12
Gpt3D_Clone697_5.cs 13 31
----------------------------------------

private void textBox1_TextChanged (object sender, EventArgs e) {
    Point caretLocalLoc = textBox1.GetPositionFromCharIndex (textBox1.Text.Length - 1);
    Point caretLoc = new Point (caretLocalLoc.X + InitialTextBoxLoc.X, caretLocalLoc.Y + InitialTextBoxLoc.Y);
    Point scrollLoc = flowLayoutPanel1.AutoScrollPosition;
    if (caretLoc.X >= flowLayoutPanel1.Size.Width - 10) {
        scrollLoc.X = caretLoc.X;
    }
    if (caretLoc.Y >= flowLayoutPanel1.Size.Height - 10) {
        scrollLoc.Y = caretLoc.Y;
    }
    flowLayoutPanel1.AutoScrollPosition = scrollLoc;
}
----------------------------------------

 private void textBox1_TextChanged (object sender, EventArgs e)
{
    Point caretLocalLoc = textBox1.GetPositionFromCharIndex(textBox1.Text.Length - 1);
    Point caretLoc = new Point(caretLocalLoc.X + InitialTextBoxLoc.X, caretLocalLoc.Y + InitialTextBoxLoc.Y);
    Point scrollLoc = flowLayoutPanel1.AutoScrollPosition;
    if (caretLoc.X >= flowLayoutPanel1.Size.Width - 10)
    {
        flowLayoutPanel1.HorizontalScroll.Value = caretLoc.X;
    }
    if (caretLoc.Y >= flowLayoutPanel1.Size.Height - 10)
    {
        flowLayoutPanel1.VerticalScroll.Value = caretLoc.Y;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
697
6
Gpt3D_Clone697_6.cs 1 12
Gpt3D_Clone697_6.cs 13 30
----------------------------------------

private void textBox1_TextChanged (object sender, EventArgs e) {
    Point caretLocalLoc = textBox1.GetPositionFromCharIndex (textBox1.Text.Length - 1);
    Point caretLoc = new Point (caretLocalLoc.X + InitialTextBoxLoc.X, caretLocalLoc.Y + InitialTextBoxLoc.Y);
    Point scrollLoc = flowLayoutPanel1.AutoScrollPosition;
    if (caretLoc.X >= flowLayoutPanel1.Size.Width - 10) {
        scrollLoc.X = caretLoc.X;
    }
    if (caretLoc.Y >= flowLayoutPanel1.Size.Height - 10) {
        scrollLoc.Y = caretLoc.Y;
    }
    flowLayoutPanel1.AutoScrollPosition = scrollLoc;
}
----------------------------------------

 private void textBox1_TextChanged (object sender, EventArgs e)
{
    Point caretLocalLoc = textBox1.GetPositionFromCharIndex(textBox1.Text.Length - 1);
    Point caretLoc = new Point(caretLocalLoc.X + InitialTextBoxLoc.X, caretLocalLoc.Y + InitialTextBoxLoc.Y);
    if (caretLoc.X >= flowLayoutPanel1.Size.Width - 10)
    {
        flowLayoutPanel1.ScrollControlIntoView(textBox1);
    }
    if (caretLoc.Y >= flowLayoutPanel1.Size.Height - 10)
    {
        flowLayoutPanel1.ScrollControlIntoView(textBox1);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
700
2
Gpt3D_Clone700_2.cs 1 16
Gpt3D_Clone700_2.cs 17 40
----------------------------------------

public void Update1 (T obj, string [] input, object newval) {
    Type t = typeof (T);
    var param1 = Expression.Parameter (t);
    Expression exp = param1;
    foreach (var it in input.Skip (1).Take (input.Length - 2)) {
        var minfo = t.GetProperty (it).GetGetMethod ();
        exp = Expression.Call (exp, minfo);
        t = minfo.ReturnType;
    }
    var lastprop = t.GetProperty (input.Last ());
    var minfoset = lastprop.GetSetMethod ();
    var variableexp = Expression.Variable (lastprop.PropertyType);
    exp = Expression.Call (exp, minfoset, variableexp);
    var lambda = Expression.Lambda (exp, param1, variableexp);
    lambda.Compile ().DynamicInvoke (obj, newval);
}
----------------------------------------

 public void Update1(T obj, string[] input, object newval)
{
    Type t = typeof(T);
    ParameterExpression c = Expression.Parameter(t, "obj");
    Expression exp = c;
    foreach (var it in input.Skip(1).Take(input.Length - 2))
    {
        var minfo = t.GetProperty(it); 
        exp = Expression.PropertyOrField(exp, minfo.Name);
        t = minfo.PropertyType;
    }
    var lastprop = t.GetProperty(input.Last());
    var minfoset = lastprop.GetSetMethod();
    var variableexp = Expression.Variable(lastprop.PropertyType);
    exp = Expression.Call(exp, minfoset, variableexp);
    var lambda = Expression.Lambda(exp, c);
    var compiled = lambda.Compile();
    compiled.DynamicInvoke(obj, newval);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
702
0
Gpt3D_Clone702_0.cs 1 16
Gpt3D_Clone702_0.cs 17 45
----------------------------------------

[HttpPost] [ValidateAntiForgeryToken] public ActionResult Create (Movie movie, HttpPostedFile fileUpload) {
    if (ModelState.IsValid) {
        db.MovieContext.Add (movie);
        db.SaveChanges ();
        var postedFile = fileUpload;
        postedFile.SaveAs (Server.MapPath ("~/UploadedFiles") + pelicula.Id);
        return RedirectToAction ("Index");
    }
    var content = "";
    foreach (ModelState modelState in ViewData.ModelState.Values) {
        foreach (ModelError error in modelState.Errors) {
            content += error.ErrorMessage + ", " + error.Exception + "<br/>";
        }
    }
    return Content (content);
}
----------------------------------------

 [HttpPost]
    [ValidateAntiForgeryToken]
    public ActionResult Create(Movie movie, HttpPostedFile fileUpload)
    {
        if (ModelState.IsValid)
        {
            db.MovieContext.Add(movie);
            db.SaveChanges();
            var postedFile = fileUpload;
            string fileDirectory = Server.MapPath("~/UploadedFiles") + movie.Id;
            postedFile.SaveAs(fileDirectory);
            return RedirectToAction("Index");
        }
        //Error message/exception is rendered to the view as a content
        StringBuilder sb = new StringBuilder();
        foreach (ModelState modelState in ViewData.ModelState.Values)
        {
            foreach (ModelError error in modelState.Errors)
            {
                sb.Append(error.ErrorMessage + ", " + error.Exception + "<br/>");
            }
        }
        return Content(sb.ToString());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
702
1
Gpt3D_Clone702_1.cs 1 16
Gpt3D_Clone702_1.cs 17 41
----------------------------------------

[HttpPost] [ValidateAntiForgeryToken] public ActionResult Create (Movie movie, HttpPostedFile fileUpload) {
    if (ModelState.IsValid) {
        db.MovieContext.Add (movie);
        db.SaveChanges ();
        var postedFile = fileUpload;
        postedFile.SaveAs (Server.MapPath ("~/UploadedFiles") + pelicula.Id);
        return RedirectToAction ("Index");
    }
    var content = "";
    foreach (ModelState modelState in ViewData.ModelState.Values) {
        foreach (ModelError error in modelState.Errors) {
            content += error.ErrorMessage + ", " + error.Exception + "<br/>";
        }
    }
    return Content (content);
}
----------------------------------------

 [HttpPost]
    [ValidateAntiForgeryToken]
   public ActionResult Create(Movie movie, HttpPostedFile fileUpload)
   {
       StringBuilder errors = new StringBuilder();
       if (ModelState.IsValid)
       {
           db.MovieContext.Add(movie);
           db.SaveChanges();
           var postedFile = fileUpload;
           string fileDirectory = Server.MapPath("~/UploadedFiles") + movie.Id;
           postedFile.SaveAs(fileDirectory);
           return RedirectToAction("Index");
       }
       foreach (ModelState modelState in ViewData.ModelState.Values)
       {
           foreach (ModelError error in modelState.Errors)
           {
               errors.Append(error.ErrorMessage + ", " + error.Exception + "<br/>");
           }
       }
       return Content(errors.ToString());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
702
2
Gpt3D_Clone702_2.cs 1 16
Gpt3D_Clone702_2.cs 17 45
----------------------------------------

[HttpPost] [ValidateAntiForgeryToken] public ActionResult Create (Movie movie, HttpPostedFile fileUpload) {
    if (ModelState.IsValid) {
        db.MovieContext.Add (movie);
        db.SaveChanges ();
        var postedFile = fileUpload;
        postedFile.SaveAs (Server.MapPath ("~/UploadedFiles") + pelicula.Id);
        return RedirectToAction ("Index");
    }
    var content = "";
    foreach (ModelState modelState in ViewData.ModelState.Values) {
        foreach (ModelError error in modelState.Errors) {
            content += error.ErrorMessage + ", " + error.Exception + "<br/>";
        }
    }
    return Content (content);
}
----------------------------------------

 [HttpPost]
   [ValidateAntiForgeryToken]
   public ActionResult Create(Movie movie, HttpPostedFile fileUpload)
   {
       StringBuilder buildErrorMsg = new StringBuilder();
       if (ModelState.IsValid)
       {
           db.MovieContext.Add(movie);
           db.SaveChanges();
           var postedFile = fileUpload;
           string fileDirectory = Server.MapPath("~/UploadedFiles") + movie.Id;
           postedFile.SaveAs(fileDirectory);
           return RedirectToAction("Index");
       }
       //Error message/exception is rendered to the view as a content
       foreach (ModelState modelState in ViewData.ModelState.Values)
       {
           foreach (ModelError error in modelState.Errors)
           {
               buildErrorMsg.Append(error.ErrorMessage + ", " + error.Exception + "<br/>");
           }
       }
       return Content(buildErrorMsg.ToString());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
702
3
Gpt3D_Clone702_3.cs 1 16
Gpt3D_Clone702_3.cs 17 41
----------------------------------------

[HttpPost] [ValidateAntiForgeryToken] public ActionResult Create (Movie movie, HttpPostedFile fileUpload) {
    if (ModelState.IsValid) {
        db.MovieContext.Add (movie);
        db.SaveChanges ();
        var postedFile = fileUpload;
        postedFile.SaveAs (Server.MapPath ("~/UploadedFiles") + pelicula.Id);
        return RedirectToAction ("Index");
    }
    var content = "";
    foreach (ModelState modelState in ViewData.ModelState.Values) {
        foreach (ModelError error in modelState.Errors) {
            content += error.ErrorMessage + ", " + error.Exception + "<br/>";
        }
    }
    return Content (content);
}
----------------------------------------

 [HttpPost]
    [ValidateAntiForgeryToken]
    public ActionResult Create(Movie movie, HttpPostedFile fileUpload) 
    {
        if (ModelState.IsValid) 
        {
            db.MovieContext.Add(movie);
            db.SaveChanges();
            var postedFile = fileUpload;
            string fileDirectory = Server.MapPath("~/UploadedFiles") + movie.Id;
            postedFile.SaveAs(fileDirectory);
            return RedirectToAction("Index");
        }
        StringBuilder errors = new StringBuilder();
        foreach (ModelState modelState in ViewData.ModelState.Values) 
        {
            foreach (ModelError error in modelState.Errors) 
            {
                errors.Append(error.ErrorMessage + ", " + error.Exception + "<br/>");
            }
        } 
        return Content(errors.ToString());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
702
4
Gpt3D_Clone702_4.cs 1 16
Gpt3D_Clone702_4.cs 17 41
----------------------------------------

[HttpPost] [ValidateAntiForgeryToken] public ActionResult Create (Movie movie, HttpPostedFile fileUpload) {
    if (ModelState.IsValid) {
        db.MovieContext.Add (movie);
        db.SaveChanges ();
        var postedFile = fileUpload;
        postedFile.SaveAs (Server.MapPath ("~/UploadedFiles") + pelicula.Id);
        return RedirectToAction ("Index");
    }
    var content = "";
    foreach (ModelState modelState in ViewData.ModelState.Values) {
        foreach (ModelError error in modelState.Errors) {
            content += error.ErrorMessage + ", " + error.Exception + "<br/>";
        }
    }
    return Content (content);
}
----------------------------------------

 [HttpPost]
    [ValidateAntiForgeryToken]
    public ActionResult Create(Movie movie, HttpPostedFile fileUpload)
    {
        if (ModelState.IsValid)
        {
            db.MovieContext.Add(movie);
            db.SaveChanges();
            var postedFile = fileUpload;
            string fileDir = Server.MapPath("~/UploadedFiles") + movie.Id;
            postedFile.SaveAs(fileDir);
            return RedirectToAction("Index");
        }
        StringBuilder errorMsg = new StringBuilder();
        foreach (ModelState modelState in ViewData.ModelState.Values)
        {
            foreach (ModelError error in modelState.Errors)
            {
                errorMsg.Append(error.ErrorMessage + ", " + error.Exception + "<br/>");
            }
        }
        return Content(errorMsg.ToString());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
702
5
Gpt3D_Clone702_5.cs 1 16
Gpt3D_Clone702_5.cs 17 45
----------------------------------------

[HttpPost] [ValidateAntiForgeryToken] public ActionResult Create (Movie movie, HttpPostedFile fileUpload) {
    if (ModelState.IsValid) {
        db.MovieContext.Add (movie);
        db.SaveChanges ();
        var postedFile = fileUpload;
        postedFile.SaveAs (Server.MapPath ("~/UploadedFiles") + pelicula.Id);
        return RedirectToAction ("Index");
    }
    var content = "";
    foreach (ModelState modelState in ViewData.ModelState.Values) {
        foreach (ModelError error in modelState.Errors) {
            content += error.ErrorMessage + ", " + error.Exception + "<br/>";
        }
    }
    return Content (content);
}
----------------------------------------

 [HttpPost]
   [ValidateAntiForgeryToken]
   public ActionResult Create(Movie movie, HttpPostedFile fileUpload)
   {
       StringBuilder errorMsg = new StringBuilder();
       if (ModelState.IsValid)
       {
           db.MovieContext.Add(movie);
           db.SaveChanges();
           var postedFile = fileUpload;
           string fileDirectory = Server.MapPath("~/UploadedFiles") + movie.Id;
           postedFile.SaveAs(fileDirectory);
           return RedirectToAction("Index");
       }
       //Error message/exception is rendered to the view as a content
       foreach (ModelState modelState in ViewData.ModelState.Values)
       {
           foreach (ModelError error in modelState.Errors)
           {                  
               errorMsg.Append(error.ErrorMessage + ", " + error.Exception + "<br/>");
           }
       }
       return Content(errorMsg.ToString());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
702
6
Gpt3D_Clone702_6.cs 1 16
Gpt3D_Clone702_6.cs 17 42
----------------------------------------

[HttpPost] [ValidateAntiForgeryToken] public ActionResult Create (Movie movie, HttpPostedFile fileUpload) {
    if (ModelState.IsValid) {
        db.MovieContext.Add (movie);
        db.SaveChanges ();
        var postedFile = fileUpload;
        postedFile.SaveAs (Server.MapPath ("~/UploadedFiles") + pelicula.Id);
        return RedirectToAction ("Index");
    }
    var content = "";
    foreach (ModelState modelState in ViewData.ModelState.Values) {
        foreach (ModelError error in modelState.Errors) {
            content += error.ErrorMessage + ", " + error.Exception + "<br/>";
        }
    }
    return Content (content);
}
----------------------------------------

 [HttpPost]
    [ValidateAntiForgeryToken]
    public ActionResult Create(Movie movie, HttpPostedFile fileUpload)
    {
       StringBuilder errMsg = new StringBuilder(); 
        if (ModelState.IsValid)
        {
            db.MovieContext.Add(movie);
            db.SaveChanges();
            var item = fileUpload;
            string filePath = Server.MapPath("~/UploadedFiles") + movie.Id;
            item.SaveAs(filePath);
            return RedirectToAction("Index");
        }
        foreach (ModelState modelState in ViewData.ModelState.Values)
        {
            foreach (ModelError error in modelState.Errors)
            {
                errMsg.Append(error.ErrorMessage + ", " + error.Exception + "<br/>");
            }
        }
        return Content(errMsg.ToString());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
702
7
Gpt3D_Clone702_7.cs 1 16
Gpt3D_Clone702_7.cs 17 43
----------------------------------------

[HttpPost] [ValidateAntiForgeryToken] public ActionResult Create (Movie movie, HttpPostedFile fileUpload) {
    if (ModelState.IsValid) {
        db.MovieContext.Add (movie);
        db.SaveChanges ();
        var postedFile = fileUpload;
        postedFile.SaveAs (Server.MapPath ("~/UploadedFiles") + pelicula.Id);
        return RedirectToAction ("Index");
    }
    var content = "";
    foreach (ModelState modelState in ViewData.ModelState.Values) {
        foreach (ModelError error in modelState.Errors) {
            content += error.ErrorMessage + ", " + error.Exception + "<br/>";
        }
    }
    return Content (content);
}
----------------------------------------

 [HttpPost]
    [ValidateAntiForgeryToken]
    public ActionResult Create(Movie movie, HttpPostedFile fileUpload)
    {
       StringBuilder sbErrorMsg = new StringBuilder();
        if (ModelState.IsValid)
        {
            db.MovieContext.Add(movie);
            db.SaveChanges();
            string fileDirectory = Server.MapPath("~/UploadedFiles") + movie.Id;
            fileUpload.SaveAs(fileDirectory);
            return RedirectToAction("Index");
        }
        foreach (ModelState modelState in ViewData.ModelState.Values)
        {
            foreach (ModelError error in modelState.Errors)
            {
                sbErrorMsg.Append(error.ErrorMessage + ", " + error.Exception + "<br/>");
            }
        }
        return Content(sbErrorMsg.ToString());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
702
8
Gpt3D_Clone702_8.cs 1 16
Gpt3D_Clone702_8.cs 17 43
----------------------------------------

[HttpPost] [ValidateAntiForgeryToken] public ActionResult Create (Movie movie, HttpPostedFile fileUpload) {
    if (ModelState.IsValid) {
        db.MovieContext.Add (movie);
        db.SaveChanges ();
        var postedFile = fileUpload;
        postedFile.SaveAs (Server.MapPath ("~/UploadedFiles") + pelicula.Id);
        return RedirectToAction ("Index");
    }
    var content = "";
    foreach (ModelState modelState in ViewData.ModelState.Values) {
        foreach (ModelError error in modelState.Errors) {
            content += error.ErrorMessage + ", " + error.Exception + "<br/>";
        }
    }
    return Content (content);
}
----------------------------------------

 [HttpPost]
    [ValidateAntiForgeryToken]
    public ActionResult Create(Movie movie, HttpPostedFile fileUpload)
    {
        StringBuilder errMsg = new StringBuilder();
        if (ModelState.IsValid)
        {
            db.MovieContext.Add(movie);
            db.SaveChanges();
            
            string filePath = Server.MapPath("~/UploadedFiles") + movie.Id;
            fileUpload.SaveAs(filePath);
            return RedirectToAction("Index");
        }
        foreach (ModelState modelState in ViewData.ModelState.Values) 
        {
            foreach (ModelError error in modelState.Errors) 
            {
                errMsg.Append(error.ErrorMessage + ", " + error.Exception + "<br/>");
            }
        }
        return Content(errMsg.ToString());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
702
9
Gpt3D_Clone702_9.cs 1 16
Gpt3D_Clone702_9.cs 17 45
----------------------------------------

[HttpPost] [ValidateAntiForgeryToken] public ActionResult Create (Movie movie, HttpPostedFile fileUpload) {
    if (ModelState.IsValid) {
        db.MovieContext.Add (movie);
        db.SaveChanges ();
        var postedFile = fileUpload;
        postedFile.SaveAs (Server.MapPath ("~/UploadedFiles") + pelicula.Id);
        return RedirectToAction ("Index");
    }
    var content = "";
    foreach (ModelState modelState in ViewData.ModelState.Values) {
        foreach (ModelError error in modelState.Errors) {
            content += error.ErrorMessage + ", " + error.Exception + "<br/>";
        }
    }
    return Content (content);
}
----------------------------------------

[HttpPost]
   [ValidateAntiForgeryToken]
   public ActionResult Create(Movie movie, HttpPostedFile fileUpload)
   {
       StringBuildersb = new StringBuilder();
       
       if (ModelState.IsValid)
       {
           db.MovieContext.Add(movie);
           db.SaveChanges();
           
           string fileName = Server.MapPath("~/UploadedFiles") + movie.Id;
           fileUpload.SaveAs(fileName);
           return RedirectToAction("Index");
       }
           
       //Error message/exception is rendered to the view as a content
       foreach (ModelState modelState in ViewData.ModelState.Values)
       {
           foreach (ModelError error in modelState.Errors)
           {
               sb.Append(error.ErrorMessage + ", " + error.Exception + "<br/>");
           }
       }
       return Content(sb.ToString());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
703
6
Gpt3D_Clone703_6.cs 1 14
Gpt3D_Clone703_6.cs 15 36
----------------------------------------

private bool IsAnagramFast (string a, string b) {
    if (a.Length != b.Length) {
        return false;
    }
    var aFrequency = CalculateFrequency (a);
    var bFrequency = CalculateFrequency (b);
    foreach (var key in aFrequency.Keys) {
        if (! bFrequency.ContainsKey (key))
            return false;
        if (aFrequency [key] != bFrequency [key])
            return false;
    }
    return true;
}
----------------------------------------

 private bool IsAnagramFast (string a, string b) {
    if(a.Length == 0 && b.Length == 0) return true;
    if (a.Length != b.Length) {
        return false;
    }
    var aChars = a.ToLower().GroupBy(c => c).ToDictionary(c => c.Key, c => c.Count());
    var bChars = b.ToLower().GroupBy(c => c).ToDictionary(c => c.Key, c => c.Count());
    if(aChars.Count != bChars.Count) return false;
    foreach (char c in aChars.Keys) {
        if (!bChars.ContainsKey(c))
            return false;
        if(aChars[c] != bChars[c])
            return false;
    }
    
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
704
0
Gpt3D_Clone704_0.cs 1 14
Gpt3D_Clone704_0.cs 15 30
----------------------------------------

private void ReDimSeatStates () {
    while (_SeatStates.Count < Rows)
        _SeatStates.Add (new List < SeatState > ());
    if (_SeatStates.First ().Count < Columns)
        foreach (var columnList in _SeatStates)
            while (columnList.Count < Columns)
                columnList.Add (SeatState.Empty);
    while (_SeatStates.Count > Rows)
        _SeatStates.RemoveAt (_SeatStates.Count - 1);
    if (_SeatStates.First ().Count > Columns)
        foreach (var columnList in _SeatStates)
            while (columnList.Count > Columns)
                columnList.RemoveAt (columnList.Count - 1);
}
----------------------------------------

  private void ReDimSeatStates () {
    while (_SeatStates.Count < Rows)
        _SeatStates.Insert (Rows, new List<SeatState>());
    if (_SeatStates.First ().Count < Columns)
        foreach (var columnList in _SeatStates)
            while (columnList.Count < Columns)
                columnList.Insert (Columns, SeatState.Empty);
    while (_SeatStates.Count > Rows)
        _SeatStates.RemoveAt (0);
    if (_SeatStates.First ().Count > Columns)
        foreach (var columnList in _SeatStates)
            while (columnList.Count > Columns)
                columnList.RemoveAt (0);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
704
1
Gpt3D_Clone704_1.cs 1 14
Gpt3D_Clone704_1.cs 15 30
----------------------------------------

private void ReDimSeatStates () {
    while (_SeatStates.Count < Rows)
        _SeatStates.Add (new List < SeatState > ());
    if (_SeatStates.First ().Count < Columns)
        foreach (var columnList in _SeatStates)
            while (columnList.Count < Columns)
                columnList.Add (SeatState.Empty);
    while (_SeatStates.Count > Rows)
        _SeatStates.RemoveAt (_SeatStates.Count - 1);
    if (_SeatStates.First ().Count > Columns)
        foreach (var columnList in _SeatStates)
            while (columnList.Count > Columns)
                columnList.RemoveAt (columnList.Count - 1);
}
----------------------------------------

  private void ReDimSeatStates () {
    while (_SeatStates.Count < Rows)
        _SeatStates.Insert (Rows - 1, new List<SeatState>());
    if (_SeatStates.First ().Count < Columns)
        foreach (var columnList in _SeatStates)
            while (columnList.Count < Columns)
                columnList.Insert (columnList.Count, SeatState.Empty);
    while (_SeatStates.Count > Rows)
        _SeatStates.RemoveAt (0);
    if (_SeatStates.First ().Count > Columns)
        foreach (var columnList in _SeatStates)
            while (columnList.Count > Columns)
                columnList.RemoveAt (0);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
705
0
Gpt3D_Clone705_0.cs 1 14
Gpt3D_Clone705_0.cs 15 32
----------------------------------------

private void SetBitmapResourcesTransparent () {
    Image img;
    BitmapSource bmpSource;
    System.Drawing.Bitmap bmp;
    foreach (ResourceDictionary resdict in Application.Current.Resources.MergedDictionaries) {
        foreach (DictionaryEntry dictEntry in resdict) {
            if ((img = dictEntry.Value as Image) is Image && (bmpSource = img.Source as BitmapSource) is BitmapSource && (bmp = BitmapFromSource (bmpSource)) != null) {
                bmp.MakeTransparent (System.Drawing.Color.Magenta);
                bmpSource = ConvertBitmap (bmp);
                img.Source = bmpSource;
            }
        }
    }
}
----------------------------------------

  private void SetBitmapResourcesTransparent () {
    System.Drawing.Image img;
    ImageSource source;
    BitmapSource bmpSource;
    System.Drawing.Bitmap bmp;
    foreach (ResourceDictionary resdict in Application.Current.Resources.MergedDictionaries) {
        foreach (DictionaryEntry dictEntry in resdict) {
            if ((img = dictEntry.Value as System.Drawing.Image) is System.Drawing.Image && (source = System.Windows.Interop.Imaging.CreateBitmapSourceFromHBitmap (img.GetHbitmap (), IntPtr.Zero, Int32Rect.Empty, BitmapSizeOptions.FromEmptyOptions ())) is ImageSource && (bmpSource = source as BitmapSource) is BitmapSource && (bmp = BitmapFromSource (bmpSource)) != null) {
                bmp.MakeTransparent (System.Drawing.Color.Magenta);
                bmpSource = ConvertBitmap (bmp);
                source = bmpSource;
                img.Source = source;
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
706
0
Gpt3D_Clone706_0.cs 1 36
Gpt3D_Clone706_0.cs 37 65
----------------------------------------

private static void OneTimeSetup () {
    try {
        Type stackFrameHelperType = typeof (object).Assembly.GetType ("System.Diagnostics.StackFrameHelper");
        MethodInfo getStackFramesInternal = Type.GetType ("System.Diagnostics.StackTrace, mscorlib").GetMethod ("GetStackFramesInternal", BindingFlags.Static | BindingFlags.NonPublic);
        if (getStackFramesInternal == null)
            return;
        DynamicMethod dynamicMethod = new DynamicMethod ("GetStackFrameHelper", typeof (object), new Type [0], typeof (StackTrace), true);
        ILGenerator generator = dynamicMethod.GetILGenerator ();
        generator.DeclareLocal (stackFrameHelperType);
        bool newDotNet = false;
        ConstructorInfo constructorInfo = stackFrameHelperType.GetConstructor (new Type [] {typeof (bool), typeof (Thread)});
        if (constructorInfo != null)
            generator.Emit (OpCodes.Ldc_I4_0);
        else {
            constructorInfo = stackFrameHelperType.GetConstructor (new Type [] {typeof (Thread)});
            if (constructorInfo == null)
                return;
            newDotNet = true;
        }
        generator.Emit (OpCodes.Ldnull);
        generator.Emit (OpCodes.Newobj, constructorInfo);
        generator.Emit (OpCodes.Stloc_0);
        generator.Emit (OpCodes.Ldloc_0);
        generator.Emit (OpCodes.Ldc_I4_0);
        if (newDotNet)
            generator.Emit (OpCodes.Ldc_I4_0);
        generator.Emit (OpCodes.Ldnull);
        generator.Emit (OpCodes.Call, getStackFramesInternal);
        generator.Emit (OpCodes.Ldloc_0);
        generator.Emit (OpCodes.Ret);
        _getStackFrameHelper = (DGetStackFrameHelper) dynamicMethod.CreateDelegate (typeof (DGetStackFrameHelper));
        _frameCount = stackFrameHelperType.GetField ("iFrameCount", BindingFlags.NonPublic | BindingFlags.Instance);
    }
    catch {
    }
}
----------------------------------------

 private static void OneTimeSetup(){
    try{
        Type stackFrameHelperType = typeof(object).Assembly.GetType("System.Diagnostics.StackFrameHelper");
        MethodInfo getStackFramesInternal = Type.GetType("System.Diagnostics.StackTrace, mscorlib").GetMethod("GetStackFramesInternal", BindingFlags.Static | BindingFlags.NonPublic);
        if (getStackFramesInternal == null)
            return;
        DynamicMethod dynamicMethod = new DynamicMethod ("GetStackFrameHelper", typeof (object), new Type [0], typeof (StackTrace), true);
        ILGenerator generator = dynamicMethod.GetILGenerator ();
        generator.DeclareLocal (stackFrameHelperType);
        ConstructorInfo constructorInfo = stackFrameHelperType.GetConstructor (new Type [] {typeof (Thread)});
        if (constructorInfo == null)
            return;
        generator.Emit (OpCodes.Ldnull);
        generator.Emit (OpCodes.Newobj, constructorInfo);
        generator.Emit (OpCodes.Stloc_0);
        generator.Emit (OpCodes.Ldloc_0);
        generator.Emit (OpCodes.Ldc_I4_0);
        generator.Emit (OpCodes.Ldnull);
        generator.Emit (OpCodes.Call, getStackFramesInternal);
        generator.Emit (OpCodes.Ldloc_0);
        generator.Emit (OpCodes.Ret);
        _getStackFrameHelper = (DGetStackFrameHelper) dynamicMethod.CreateDelegate (typeof (DGetStackFrameHelper));
        _frameCount = stackFrameHelperType.GetField ("iFrameCount", BindingFlags.NonPublic | BindingFlags.Instance);
    }
    catch {
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
706
1
Gpt3D_Clone706_1.cs 1 36
Gpt3D_Clone706_1.cs 37 66
----------------------------------------

private static void OneTimeSetup () {
    try {
        Type stackFrameHelperType = typeof (object).Assembly.GetType ("System.Diagnostics.StackFrameHelper");
        MethodInfo getStackFramesInternal = Type.GetType ("System.Diagnostics.StackTrace, mscorlib").GetMethod ("GetStackFramesInternal", BindingFlags.Static | BindingFlags.NonPublic);
        if (getStackFramesInternal == null)
            return;
        DynamicMethod dynamicMethod = new DynamicMethod ("GetStackFrameHelper", typeof (object), new Type [0], typeof (StackTrace), true);
        ILGenerator generator = dynamicMethod.GetILGenerator ();
        generator.DeclareLocal (stackFrameHelperType);
        bool newDotNet = false;
        ConstructorInfo constructorInfo = stackFrameHelperType.GetConstructor (new Type [] {typeof (bool), typeof (Thread)});
        if (constructorInfo != null)
            generator.Emit (OpCodes.Ldc_I4_0);
        else {
            constructorInfo = stackFrameHelperType.GetConstructor (new Type [] {typeof (Thread)});
            if (constructorInfo == null)
                return;
            newDotNet = true;
        }
        generator.Emit (OpCodes.Ldnull);
        generator.Emit (OpCodes.Newobj, constructorInfo);
        generator.Emit (OpCodes.Stloc_0);
        generator.Emit (OpCodes.Ldloc_0);
        generator.Emit (OpCodes.Ldc_I4_0);
        if (newDotNet)
            generator.Emit (OpCodes.Ldc_I4_0);
        generator.Emit (OpCodes.Ldnull);
        generator.Emit (OpCodes.Call, getStackFramesInternal);
        generator.Emit (OpCodes.Ldloc_0);
        generator.Emit (OpCodes.Ret);
        _getStackFrameHelper = (DGetStackFrameHelper) dynamicMethod.CreateDelegate (typeof (DGetStackFrameHelper));
        _frameCount = stackFrameHelperType.GetField ("iFrameCount", BindingFlags.NonPublic | BindingFlags.Instance);
    }
    catch {
    }
}
----------------------------------------

 private static void OneTimeSetup () {
    try {
        Type stackFrameHelperType = typeof(object).Assembly.GetType("System.Diagnostics.StackFrameHelper");
        MethodInfo getStackFramesInternal = Type.GetType("System.Diagnostics.StackTrace, mscorlib").GetMethod("GetStackFramesInternal", BindingFlags.Static | BindingFlags.NonPublic);
        if (getStackFramesInternal == null)
            return;
        DynamicMethod dynamicMethod = new DynamicMethod ("GetStackFrameHelper", typeof (object), new Type [0], typeof (StackTrace), true);
        ILGenerator generator = dynamicMethod.GetILGenerator ();
        generator.DeclareLocal (stackFrameHelperType);
        ConstructorInfo constructorInfo = stackFrameHelperType.GetConstructor (new Type [] {typeof (Thread)});
        if (constructorInfo == null)
            return;
 
        generator.Emit (OpCodes.Ldnull);
        generator.Emit (OpCodes.Newobj, constructorInfo);
        generator.Emit (OpCodes.Stloc_0);
        generator.Emit (OpCodes.Ldloc_0);
        generator.Emit (OpCodes.Ldc_I4_0);
        generator.Emit (OpCodes.Ldnull);
        generator.Emit (OpCodes.Call, getStackFramesInternal);
        generator.Emit (OpCodes.Ldloc_0);
        generator.Emit (OpCodes.Ret);
        _getStackFrameHelper = (DGetStackFrameHelper)dynamicMethod.CreateDelegate(typeof(DGetStackFrameHelper));
        _frameCount = stackFrameHelperType.GetField ("iFrameCount", BindingFlags.NonPublic | BindingFlags.Instance);
    }
    catch {
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
706
2
Gpt3D_Clone706_2.cs 1 36
Gpt3D_Clone706_2.cs 37 66
----------------------------------------

private static void OneTimeSetup () {
    try {
        Type stackFrameHelperType = typeof (object).Assembly.GetType ("System.Diagnostics.StackFrameHelper");
        MethodInfo getStackFramesInternal = Type.GetType ("System.Diagnostics.StackTrace, mscorlib").GetMethod ("GetStackFramesInternal", BindingFlags.Static | BindingFlags.NonPublic);
        if (getStackFramesInternal == null)
            return;
        DynamicMethod dynamicMethod = new DynamicMethod ("GetStackFrameHelper", typeof (object), new Type [0], typeof (StackTrace), true);
        ILGenerator generator = dynamicMethod.GetILGenerator ();
        generator.DeclareLocal (stackFrameHelperType);
        bool newDotNet = false;
        ConstructorInfo constructorInfo = stackFrameHelperType.GetConstructor (new Type [] {typeof (bool), typeof (Thread)});
        if (constructorInfo != null)
            generator.Emit (OpCodes.Ldc_I4_0);
        else {
            constructorInfo = stackFrameHelperType.GetConstructor (new Type [] {typeof (Thread)});
            if (constructorInfo == null)
                return;
            newDotNet = true;
        }
        generator.Emit (OpCodes.Ldnull);
        generator.Emit (OpCodes.Newobj, constructorInfo);
        generator.Emit (OpCodes.Stloc_0);
        generator.Emit (OpCodes.Ldloc_0);
        generator.Emit (OpCodes.Ldc_I4_0);
        if (newDotNet)
            generator.Emit (OpCodes.Ldc_I4_0);
        generator.Emit (OpCodes.Ldnull);
        generator.Emit (OpCodes.Call, getStackFramesInternal);
        generator.Emit (OpCodes.Ldloc_0);
        generator.Emit (OpCodes.Ret);
        _getStackFrameHelper = (DGetStackFrameHelper) dynamicMethod.CreateDelegate (typeof (DGetStackFrameHelper));
        _frameCount = stackFrameHelperType.GetField ("iFrameCount", BindingFlags.NonPublic | BindingFlags.Instance);
    }
    catch {
    }
}
----------------------------------------

 private static void OneTimeSetup () {
    try {
        Type stackFrameHelperType = typeof(object).Assembly.GetType("System.Diagnostics.StackFrameHelper");
        MethodInfo getStackFramesInternal = Type.GetType("System.Diagnostics.StackTrace, mscorlib").GetMethod("GetStackFramesInternal", BindingFlags.Static | BindingFlags.NonPublic);
        if (getStackFramesInternal == null)
            return;
        DynamicMethod dynamicMethod = new DynamicMethod("GetStackFrameHelperForStackTrace", typeof(object), new Type[] { typeof(Thread) }, typeof(StackTrace), true);
        ILGenerator generator = dynamicMethod.GetILGenerator();
        generator.DeclareLocal(stackFrameHelperType);
        ConstructorInfo constructorInfo = stackFrameHelperType.GetConstructor(new Type[] { typeof(Thread) });
        if (constructorInfo == null)
            return;
        generator.Emit(OpCodes.Ldnull);
        generator.Emit(OpCodes.Newobj, constructorInfo);
        generator.Emit(OpCodes.Stloc_0);
        generator.Emit(OpCodes.Ldloc_0);
        generator.Emit(OpCodes.Ldc_I4_0);
        generator.Emit(OpCodes.Ldarg_0);
        generator.Emit(OpCodes.Call, getStackFramesInternal);
        generator.Emit(OpCodes.Ldloc_0);
        generator.Emit(OpCodes.Ret);
        _getStackFrameHelper = (DGetStackFrameHelper)dynamicMethod.CreateDelegate(typeof(DGetStackFrameHelper));
        _frameCount = stackFrameHelperType.GetField("iFrameCount", BindingFlags.NonPublic | BindingFlags.Instance);
    }
    catch {
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
706
3
Gpt3D_Clone706_3.cs 1 36
Gpt3D_Clone706_3.cs 37 66
----------------------------------------

private static void OneTimeSetup () {
    try {
        Type stackFrameHelperType = typeof (object).Assembly.GetType ("System.Diagnostics.StackFrameHelper");
        MethodInfo getStackFramesInternal = Type.GetType ("System.Diagnostics.StackTrace, mscorlib").GetMethod ("GetStackFramesInternal", BindingFlags.Static | BindingFlags.NonPublic);
        if (getStackFramesInternal == null)
            return;
        DynamicMethod dynamicMethod = new DynamicMethod ("GetStackFrameHelper", typeof (object), new Type [0], typeof (StackTrace), true);
        ILGenerator generator = dynamicMethod.GetILGenerator ();
        generator.DeclareLocal (stackFrameHelperType);
        bool newDotNet = false;
        ConstructorInfo constructorInfo = stackFrameHelperType.GetConstructor (new Type [] {typeof (bool), typeof (Thread)});
        if (constructorInfo != null)
            generator.Emit (OpCodes.Ldc_I4_0);
        else {
            constructorInfo = stackFrameHelperType.GetConstructor (new Type [] {typeof (Thread)});
            if (constructorInfo == null)
                return;
            newDotNet = true;
        }
        generator.Emit (OpCodes.Ldnull);
        generator.Emit (OpCodes.Newobj, constructorInfo);
        generator.Emit (OpCodes.Stloc_0);
        generator.Emit (OpCodes.Ldloc_0);
        generator.Emit (OpCodes.Ldc_I4_0);
        if (newDotNet)
            generator.Emit (OpCodes.Ldc_I4_0);
        generator.Emit (OpCodes.Ldnull);
        generator.Emit (OpCodes.Call, getStackFramesInternal);
        generator.Emit (OpCodes.Ldloc_0);
        generator.Emit (OpCodes.Ret);
        _getStackFrameHelper = (DGetStackFrameHelper) dynamicMethod.CreateDelegate (typeof (DGetStackFrameHelper));
        _frameCount = stackFrameHelperType.GetField ("iFrameCount", BindingFlags.NonPublic | BindingFlags.Instance);
    }
    catch {
    }
}
----------------------------------------

  private static void OneTimeSetup()
{
    try
    {
        Type stackFrameHelperType = typeof(object).Assembly.GetType("System.Diagnostics.StackFrameHelper");
        MethodInfo getStackFramesInternal = Type.GetType("System.Diagnostics.StackTrace, mscorlib").GetMethod("GetStackFramesInternal", BindingFlags.Static | BindingFlags.NonPublic);
        if (getStackFramesInternal == null)
            return;
        var dynamicMethod = new DynamicMethod("GetStackFrameHelper", typeof(object), new[] { typeof(Thread) }, typeof(StackTrace), true);
        ILGenerator generator = dynamicMethod.GetILGenerator();
        generator.DeclareLocal(stackFrameHelperType);
 
        ConstructorInfo constructorInfo = stackFrameHelperType.GetConstructor(new[] { typeof(Thread) });
        generator.Emit(OpCodes.Ldnull);
        generator.Emit(OpCodes.Newobj, constructorInfo);
        generator.Emit(OpCodes.Stloc_0);
        generator.Emit(OpCodes.Ldloc_0);
        generator.Emit(OpCodes.Ldc_I4_0);
        generator.Emit(OpCodes.Ldarg_0);
        generator.Emit(OpCodes.Call, getStackFramesInternal);
        generator.Emit(OpCodes.Ldloc_0);
        generator.Emit(OpCodes.Ret);
        _getStackFrameHelper = (DGetStackFrameHelper)dynamicMethod.CreateDelegate(typeof(DGetStackFrameHelper));
        _frameCount = stackFrameHelperType.GetField("iFrameCount", BindingFlags.NonPublic | BindingFlags.Instance);
    }
    catch { }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
708
1
Gpt3D_Clone708_1.cs 1 22
Gpt3D_Clone708_1.cs 23 41
----------------------------------------

private static JToken NormalizeToken (JToken token) {
    JObject o;
    JArray array;
    if ((o = token as JObject) != null) {
        List < JProperty > orderedProperties = new List < JProperty > (o.Properties ());
        orderedProperties.Sort (delegate (JProperty x, JProperty y) {
            return x.Name.CompareTo (y.Name);
        });
        JObject normalized = new JObject ();
        foreach (JProperty property in orderedProperties) {
            normalized.Add (property.Name, NormalizeToken (property.Value));
        }
        return normalized;
    } else if ((array = token as JArray) != null) {
        for (int i = 0; i < array.Count; i ++) {
            array [i] = NormalizeToken (array [i]);
        }
        return array;
    } else {
        return token;
    }
}
----------------------------------------

 	private static JToken NormalizeToken (JToken token) {
        JObject o;
        JArray array;
        if (token is JObject o) {
            JObject normalized = new JObject ();
            var sortedProperties = o.Properties().OrderBy(x => x.Name);
            foreach (var property in sortedProperties) {
                normalized.Add (property.Name, NormalizeToken (property.Value));
            }
            return normalized;
        } else if (token is JArray array) {
            array.ReplaceAll(x => NormalizeToken(x));
            return array;
        } else {
            return token;
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
708
3
Gpt3D_Clone708_3.cs 1 22
Gpt3D_Clone708_3.cs 23 42
----------------------------------------

private static JToken NormalizeToken (JToken token) {
    JObject o;
    JArray array;
    if ((o = token as JObject) != null) {
        List < JProperty > orderedProperties = new List < JProperty > (o.Properties ());
        orderedProperties.Sort (delegate (JProperty x, JProperty y) {
            return x.Name.CompareTo (y.Name);
        });
        JObject normalized = new JObject ();
        foreach (JProperty property in orderedProperties) {
            normalized.Add (property.Name, NormalizeToken (property.Value));
        }
        return normalized;
    } else if ((array = token as JArray) != null) {
        for (int i = 0; i < array.Count; i ++) {
            array [i] = NormalizeToken (array [i]);
        }
        return array;
    } else {
        return token;
    }
}
----------------------------------------

  private static JToken NormalizeToken (JToken token) {
        JObject o;
        JArray array;
        if (token is JObject o) {
            var properties = o.Properties()
                .OrderBy(x => x.Name);
            var normalized = new JObject();
            foreach (JProperty property in properties) {
                normalized.Add (property.Name, NormalizeToken (property.Value));
            }
            return normalized;
        } else if (token is JArray array) {
            array.ReplaceAll(x => NormalizeToken(x));
            return array;
        } else {
            return token;
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
709
0
Gpt3D_Clone709_0.cs 1 9
Gpt3D_Clone709_0.cs 10 21
----------------------------------------

private static string DictionaryToString (IDictionary dict) {
    if (null == dict)
        throw new ArgumentNullException ("dict");
    var valueStrings = new List < string > ();
    foreach (DictionaryEntry item in dict) {
        valueStrings.Add (item.Key + ": " + item.Value);
    }
    return string.Join ("\n", valueStrings.ToArray ());
}
----------------------------------------

 private static string DictionaryToString (IDictionary dict) {
    if (null == dict)
        throw new ArgumentNullException ("dict");
    var valueStrings = new List<string>();
    foreach (var key in dict.Keys)
    {
        valueStrings.Add(string.Format(key + ": " + dict[key]));
    }
    return string.Join ("\n", valueStrings.ToArray ());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
709
1
Gpt3D_Clone709_1.cs 1 9
Gpt3D_Clone709_1.cs 10 21
----------------------------------------

private static string DictionaryToString (IDictionary dict) {
    if (null == dict)
        throw new ArgumentNullException ("dict");
    var valueStrings = new List < string > ();
    foreach (DictionaryEntry item in dict) {
        valueStrings.Add (item.Key + ": " + item.Value);
    }
    return string.Join ("\n", valueStrings.ToArray ());
}
----------------------------------------

 private static string DictionaryToString (IDictionary dict) {
    if (null == dict)
        throw new ArgumentNullException ("dict");
    StringBuilder outputString = new StringBuilder();
    foreach (DictionaryEntry entry in dict)
    {
        outputString.Append(entry.Key + ": " + entry.Value).Append(Environment.NewLine);
    }
    return outputString.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
709
3
Gpt3D_Clone709_3.cs 1 9
Gpt3D_Clone709_3.cs 10 20
----------------------------------------

private static string DictionaryToString (IDictionary dict) {
    if (null == dict)
        throw new ArgumentNullException ("dict");
    var valueStrings = new List < string > ();
    foreach (DictionaryEntry item in dict) {
        valueStrings.Add (item.Key + ": " + item.Value);
    }
    return string.Join ("\n", valueStrings.ToArray ());
}
----------------------------------------

 private static string DictionaryToString (IDictionary dict) {
    if (null == dict)
        throw new ArgumentNullException ("dict");
    string resultString = string.Empty;
    foreach (DictionaryEntry item in dict) {
        resultString += item.Key + ": " + item.Value + "\n";
    }
    return resultString;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
70
0
Gpt3D_Clone70_0.cs 1 13
Gpt3D_Clone70_0.cs 14 34
----------------------------------------

public void Set (int index) {
    int handlerCount;
    Action [] handlerList;
    lock (syncLock)
    {
        if (entries [index].IsSet)
            throw new InvalidOperationException ();
        entries [index].IsSet = true;
        handlerCount = entries [index].HandlerCount;
        handlerList = entries [index].HandlerList;
    } for (int i = 0; i < handlerCount; i ++)
        handlerList [i] ();
}
----------------------------------------

 public void Insert(int index)
{
    lock (syncLock)
    {
        if (entries[index].IsSet)
            throw new InvalidOperationException();
        entries[index].IsSet = true;
    }
    Action[] handlerList = entries[index].HandlerList;
    int handlerCount = entries[index].HandlerCount;
    int i = 0;
    while (i < handlerCount)
    {
        handlerList[i]();
        i++;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
70
4
Gpt3D_Clone70_4.cs 1 13
Gpt3D_Clone70_4.cs 14 33
----------------------------------------

public void Set (int index) {
    int handlerCount;
    Action [] handlerList;
    lock (syncLock)
    {
        if (entries [index].IsSet)
            throw new InvalidOperationException ();
        entries [index].IsSet = true;
        handlerCount = entries [index].HandlerCount;
        handlerList = entries [index].HandlerList;
    } for (int i = 0; i < handlerCount; i ++)
        handlerList [i] ();
}
----------------------------------------

 public void Implement(int index)
{
    lock (syncLock)
    {
        if(entries[index].IsSet)
            throw new InvalidOperationException();
        entries[index].IsSet = true;
    }
    int handlerCount = entries[index].HandlerCount;
    Action[] handlerList = entries[index].HandlerList;
    for (int i = 0; i < handlerCount; i++)
    {
        handlerList[i]();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
70
5
Gpt3D_Clone70_5.cs 1 13
Gpt3D_Clone70_5.cs 14 30
----------------------------------------

public void Set (int index) {
    int handlerCount;
    Action [] handlerList;
    lock (syncLock)
    {
        if (entries [index].IsSet)
            throw new InvalidOperationException ();
        entries [index].IsSet = true;
        handlerCount = entries [index].HandlerCount;
        handlerList = entries [index].HandlerList;
    } for (int i = 0; i < handlerCount; i ++)
        handlerList [i] ();
}
----------------------------------------

 public void Setup(int index)
{
    lock (syncLock)
    {
        if(entries[index].IsSet)
            throw new InvalidOperationException ();
        entries[index].IsSet = true;
    }
    Action[] handlerList = entries[index].HandlerList;
    int handlerCount = entries[index].HandlerCount;
    for(int i=0; i<handlerCount; i++)
        handlerList[i]();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
70
6
Gpt3D_Clone70_6.cs 1 13
Gpt3D_Clone70_6.cs 14 30
----------------------------------------

public void Set (int index) {
    int handlerCount;
    Action [] handlerList;
    lock (syncLock)
    {
        if (entries [index].IsSet)
            throw new InvalidOperationException ();
        entries [index].IsSet = true;
        handlerCount = entries [index].HandlerCount;
        handlerList = entries [index].HandlerList;
    } for (int i = 0; i < handlerCount; i ++)
        handlerList [i] ();
}
----------------------------------------

 public void Efficacious (int index)
{
    lock(syncLock)
    {
        if (entries[index].IsSet)
            throw new InvalidOperationException();
        entries[index].IsSet = true;
    }
    for (int handler = 0; handler < entries[index].HandlerCount; handler++)
    {
        Action[] handlerList = entries[index].HandlerList;
        handlerList[handler]();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
711
0
Gpt3D_Clone711_0.cs 1 26
Gpt3D_Clone711_0.cs 27 48
----------------------------------------

public static IEnumerable < IEnumerable < T > > Segment < T > (IEnumerable < T > sequence, Func < T, T, int, bool > newSegmentIdentifier) {
    var index = - 1;
    using (var iter = sequence.GetEnumerator ())
    {
        var segment = new List < T > ();
        var prevItem = default (T);
        if (iter.MoveNext ()) {
            ++ index;
            segment.Add (iter.Current);
            prevItem = iter.Current;
        }
        while (iter.MoveNext ()) {
            ++ index;
            var isNewSegment = newSegmentIdentifier (iter.Current, prevItem, index);
            prevItem = iter.Current;
            if (! isNewSegment) {
                segment.Add (iter.Current);
                continue;
            }
            yield return segment;
            segment = new List < T > {iter.Current};
        }
        if (segment.Count > 0)
            yield return segment;
    }
}
----------------------------------------

 public static IEnumerable<IEnumerable<T>> Segment<T>(IEnumerable<T> sequence, Func<T, T, int, bool> newSegmentIdentifier) {
    var index = -1;
    using (var iter = sequence.GetEnumerator()) {
        var segment = new List<T>();
        var prevItem = default(T);
        while (iter.MoveNext()) {
            ++index;
            var isNewSegment = newSegmentIdentifier(iter.Current, prevItem, index);
            segment.Add(iter.Current);
            prevItem = iter.Current;
            if (isNewSegment) {
                yield return segment;
                segment = new List<T>();
            }
        }
        if (segment.Count > 0)
            yield return segment;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
714
0
Gpt3D_Clone714_0.cs 1 11
Gpt3D_Clone714_0.cs 12 26
----------------------------------------

private int CountDivisorsOfNumber (int number) {
    int count = 0;
    int end = (int) Math.Sqrt (number);
    for (int i = 1; i < end; i ++) {
        if (number % i == 0)
            count += 2;
    }
    if (end * end == number)
        count ++;
    return count;
}
----------------------------------------

  private int CountDivisorsOfNumber (int number) {
    int count = 0;
    int sqRoot =  Math.Sqrt (number);
    int i = 1;
    while (i < sqRoot) {
        if (number % i == 0)
            count += 2;
        i++;
    }
    if (sqRoot * sqRoot == number)
        count++;
    return count;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
714
1
Gpt3D_Clone714_1.cs 1 11
Gpt3D_Clone714_1.cs 12 26
----------------------------------------

private int CountDivisorsOfNumber (int number) {
    int count = 0;
    int end = (int) Math.Sqrt (number);
    for (int i = 1; i < end; i ++) {
        if (number % i == 0)
            count += 2;
    }
    if (end * end == number)
        count ++;
    return count;
}
----------------------------------------

  private int CountDivisorsOfNumber (int number) {
    int count = 0;
    int sqRoot =  Math.Sqrt (number);
    int i = 0;
    while (i < sqRoot) {
        if (number % (i+1) == 0)
            count += 2;
        i++;
    }
    if (sqRoot * sqRoot == number)
        count++;
    return count;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
714
2
Gpt3D_Clone714_2.cs 1 11
Gpt3D_Clone714_2.cs 12 26
----------------------------------------

private int CountDivisorsOfNumber (int number) {
    int count = 0;
    int end = (int) Math.Sqrt (number);
    for (int i = 1; i < end; i ++) {
        if (number % i == 0)
            count += 2;
    }
    if (end * end == number)
        count ++;
    return count;
}
----------------------------------------

  private int CountDivisorsOfNumber (int number) {
    int count = 0;
    int sqRoot =  Math.Sqrt (number);
    int i = 2;
    while (i < sqRoot) {
        if (number % i == 0)
            count += 2;
        i += 2;
    }
    if (sqRoot * sqRoot == number)
        count++;
    return count;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
714
3
Gpt3D_Clone714_3.cs 1 11
Gpt3D_Clone714_3.cs 12 26
----------------------------------------

private int CountDivisorsOfNumber (int number) {
    int count = 0;
    int end = (int) Math.Sqrt (number);
    for (int i = 1; i < end; i ++) {
        if (number % i == 0)
            count += 2;
    }
    if (end * end == number)
        count ++;
    return count;
}
----------------------------------------

 private int CountDivisorsOfNumber (int number) {
    int count = 0;
    int sqRoot =  Math.Sqrt (number);
    int i = 0;
    while (i < sqRoot) {
        if (number % (i+1) == 0)
            count ++;
        i+=2;
    }
    if (sqRoot * sqRoot == number)
        count++;
    return count;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
714
5
Gpt3D_Clone714_5.cs 1 11
Gpt3D_Clone714_5.cs 12 24
----------------------------------------

private int CountDivisorsOfNumber (int number) {
    int count = 0;
    int end = (int) Math.Sqrt (number);
    for (int i = 1; i < end; i ++) {
        if (number % i == 0)
            count += 2;
    }
    if (end * end == number)
        count ++;
    return count;
}
----------------------------------------

  private int CountDivisorsOfNumber (int num) {
    int count = 0;
    int i, j;
    for (i=2; i<num; i++) {
        for (j=1; j<i; j++) {
            if (i%j==0)
                count++;
        }
    }
    return count;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
714
8
Gpt3D_Clone714_8.cs 1 11
Gpt3D_Clone714_8.cs 12 22
----------------------------------------

private int CountDivisorsOfNumber (int number) {
    int count = 0;
    int end = (int) Math.Sqrt (number);
    for (int i = 1; i < end; i ++) {
        if (number % i == 0)
            count += 2;
    }
    if (end * end == number)
        count ++;
    return count;
}
----------------------------------------

  private int CountDivisorsOfNumber (int num) {
    int count = 0;
    for (int i = 1; i < num; i++) {
        if (num % i == 0) {
            count++;
        }
    }
    return count;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
716
0
Gpt3D_Clone716_0.cs 1 20
Gpt3D_Clone716_0.cs 21 44
----------------------------------------

private static Control FindControlIterative (this Control control, string id) {
    Control ctl = control;
    LinkedList < Control > controls = new LinkedList < Control > ();
    while (ctl != null) {
        if (ctl.ID == id) {
            return ctl;
        }
        foreach (Control child in ctl.Controls) {
            if (child.ID == id) {
                return child;
            }
            if (child.HasControls ()) {
                controls.AddLast (child);
            }
        }
        ctl = controls.First.Value;
        controls.Remove (ctl);
    }
    return null;
}
----------------------------------------

  private static Control FindControlIterative(this Control control, string id)
{
	Control ctl = control;
	List<Control> controls = new List<Control>();
	while (ctl != null) 
	{
		if (ctl.ID == id) 
			return ctl;
		
		foreach (Control child in ctl.Controls) 
		{
			if (child.ID == id) 
				return child;
			
			if (child.HasControls()) 
				controls.Insert(0,child);
		}
		ctl = controls[0];
		controls.RemoveAt(0);
	}
	return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
716
1
Gpt3D_Clone716_1.cs 1 20
Gpt3D_Clone716_1.cs 21 44
----------------------------------------

private static Control FindControlIterative (this Control control, string id) {
    Control ctl = control;
    LinkedList < Control > controls = new LinkedList < Control > ();
    while (ctl != null) {
        if (ctl.ID == id) {
            return ctl;
        }
        foreach (Control child in ctl.Controls) {
            if (child.ID == id) {
                return child;
            }
            if (child.HasControls ()) {
                controls.AddLast (child);
            }
        }
        ctl = controls.First.Value;
        controls.Remove (ctl);
    }
    return null;
}
----------------------------------------

 private static Control FindControlIterative(this Control control, string id)
{
	Control ctl = control;
	List<Control> controls = new List<Control>();
	while (ctl != null) 
	{
		if (ctl.ID == id) 
			return ctl;
		
		foreach (Control child in ctl.Controls) 
		{
			if (child.ID == id) 
				return child;
			
			if (child.HasControls()) 
				controls.AddRange(child.Controls);
		}
		ctl = controls[0];
		controls.RemoveAt(0);
	}
	return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
716
2
Gpt3D_Clone716_2.cs 1 20
Gpt3D_Clone716_2.cs 21 44
----------------------------------------

private static Control FindControlIterative (this Control control, string id) {
    Control ctl = control;
    LinkedList < Control > controls = new LinkedList < Control > ();
    while (ctl != null) {
        if (ctl.ID == id) {
            return ctl;
        }
        foreach (Control child in ctl.Controls) {
            if (child.ID == id) {
                return child;
            }
            if (child.HasControls ()) {
                controls.AddLast (child);
            }
        }
        ctl = controls.First.Value;
        controls.Remove (ctl);
    }
    return null;
}
----------------------------------------

 private static Control FindControlIterative(this Control control, string id)
{
	Control ctl = control;
	List<Control> controls = new List<Control>();
	while (ctl != null) 
	{
		if (ctl.ID == id) 
			return ctl;
		
		foreach (Control child in ctl.Controls) 
		{
			if (child.ID == id) 
				return child;
			
			if (child.HasControls()) 
				controls.ForEach(c => controls.Add(c));
		}
		ctl = controls.First();
		controls.RemoveAt(0);
	}
	return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
716
3
Gpt3D_Clone716_3.cs 1 20
Gpt3D_Clone716_3.cs 21 44
----------------------------------------

private static Control FindControlIterative (this Control control, string id) {
    Control ctl = control;
    LinkedList < Control > controls = new LinkedList < Control > ();
    while (ctl != null) {
        if (ctl.ID == id) {
            return ctl;
        }
        foreach (Control child in ctl.Controls) {
            if (child.ID == id) {
                return child;
            }
            if (child.HasControls ()) {
                controls.AddLast (child);
            }
        }
        ctl = controls.First.Value;
        controls.Remove (ctl);
    }
    return null;
}
----------------------------------------

 private static Control FindControlIterative(this Control control, string id)
{
	Control ctl = control;
	List<Control> controls = new List<Control>();
	while (ctl != null) 
	{
		if (ctl.ID == id) 
			return ctl;
		
		foreach (Control child in ctl.Controls) 
		{
			if (child.ID == id) 
				return child;
			
			if (child.HasControls()) 
				controls.Add(child);
		}
		ctl = controls[controls.Count-1];
		controls.RemoveAt(controls.Count-1);
	}
	return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
716
4
Gpt3D_Clone716_4.cs 1 20
Gpt3D_Clone716_4.cs 21 44
----------------------------------------

private static Control FindControlIterative (this Control control, string id) {
    Control ctl = control;
    LinkedList < Control > controls = new LinkedList < Control > ();
    while (ctl != null) {
        if (ctl.ID == id) {
            return ctl;
        }
        foreach (Control child in ctl.Controls) {
            if (child.ID == id) {
                return child;
            }
            if (child.HasControls ()) {
                controls.AddLast (child);
            }
        }
        ctl = controls.First.Value;
        controls.Remove (ctl);
    }
    return null;
}
----------------------------------------

  private static Control FindControlIterative(this Control control, string id) 
{
    Control ctl = control;
    List<Control> controls = new List<Control>();
    while (ctl != null) 
    {
        if (ctl.ID == id) 
            return ctl;
        foreach (Control child in ctl.Controls) 
        {
            if (child.ID == id) 
                return child;
            if (control.HasControls()) 
                controls.AddRange(child.Controls);
        }
        ctl = controls.Last();
        controls.RemoveAt(controls.Count-1);
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
716
6
Gpt3D_Clone716_6.cs 1 20
Gpt3D_Clone716_6.cs 21 43
----------------------------------------

private static Control FindControlIterative (this Control control, string id) {
    Control ctl = control;
    LinkedList < Control > controls = new LinkedList < Control > ();
    while (ctl != null) {
        if (ctl.ID == id) {
            return ctl;
        }
        foreach (Control child in ctl.Controls) {
            if (child.ID == id) {
                return child;
            }
            if (child.HasControls ()) {
                controls.AddLast (child);
            }
        }
        ctl = controls.First.Value;
        controls.Remove (ctl);
    }
    return null;
}
----------------------------------------

 private static Control FindControlIterative(this Control control, string id)
{
	Control ctl = control;
	Stack<Control> controls = new Stack<Control>();
	while (ctl != null) 
	{
		if (ctl.ID == id) 
			return ctl;
		
		foreach (Control child in ctl.Controls) 
		{
			if (child.ID == id) 
				return child;
			
			if (child.HasControls()) 
				controls.Push(child.Controls);
		}
		ctl = controls.Pop();
	}
	return null;	
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
716
7
Gpt3D_Clone716_7.cs 1 20
Gpt3D_Clone716_7.cs 21 43
----------------------------------------

private static Control FindControlIterative (this Control control, string id) {
    Control ctl = control;
    LinkedList < Control > controls = new LinkedList < Control > ();
    while (ctl != null) {
        if (ctl.ID == id) {
            return ctl;
        }
        foreach (Control child in ctl.Controls) {
            if (child.ID == id) {
                return child;
            }
            if (child.HasControls ()) {
                controls.AddLast (child);
            }
        }
        ctl = controls.First.Value;
        controls.Remove (ctl);
    }
    return null;
}
----------------------------------------

 private static Control FindControlIterative(this Control control, string id)
{
	Control ctl = control;
	Stack<Control> controls = new Stack<Control>();
	while (ctl != null) 
	{
		if (ctl.ID == id) 
			return ctl;
		
		foreach (Control child in ctl.Controls) 
		{
			if (child.ID == id) 
				return child;
			
			if (child.HasControls()) 
				controls.Push(child);
		}
		ctl = controls.Pop();
	}
	return null;	
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
716
8
Gpt3D_Clone716_8.cs 1 20
Gpt3D_Clone716_8.cs 21 43
----------------------------------------

private static Control FindControlIterative (this Control control, string id) {
    Control ctl = control;
    LinkedList < Control > controls = new LinkedList < Control > ();
    while (ctl != null) {
        if (ctl.ID == id) {
            return ctl;
        }
        foreach (Control child in ctl.Controls) {
            if (child.ID == id) {
                return child;
            }
            if (child.HasControls ()) {
                controls.AddLast (child);
            }
        }
        ctl = controls.First.Value;
        controls.Remove (ctl);
    }
    return null;
}
----------------------------------------

 private static Control FindControlIterative(this Control control, string id)
{
	Control ctl = control;
	Queue<Control> controls = new Queue<Control>();
	while (ctl != null) 
	{
		if (ctl.ID == id) 
			return ctl;
		
		foreach (Control child in ctl.Controls) 
		{
			if (child.ID == id) 
				return child;
			
			if (child.HasControls()) 
				controls.Enqueue(child);
		}
		ctl = controls.Dequeue();
	}
	return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
716
9
Gpt3D_Clone716_9.cs 1 20
Gpt3D_Clone716_9.cs 21 43
----------------------------------------

private static Control FindControlIterative (this Control control, string id) {
    Control ctl = control;
    LinkedList < Control > controls = new LinkedList < Control > ();
    while (ctl != null) {
        if (ctl.ID == id) {
            return ctl;
        }
        foreach (Control child in ctl.Controls) {
            if (child.ID == id) {
                return child;
            }
            if (child.HasControls ()) {
                controls.AddLast (child);
            }
        }
        ctl = controls.First.Value;
        controls.Remove (ctl);
    }
    return null;
}
----------------------------------------

  private static Control FindControlIterative(this Control control, string id) 
{
    Control ctl = control;
    Stack<Control> controls = new Stack<Control>();
    while (ctl != null) 
    {
        if (ctl.ID == id) 
            return ctl;
        foreach (Control child in ctl.Controls) 
        {
            if (child.ID == id) 
                return child;
            if (control.HasControls()) 
                controls.Push(child);
        }
        ctl = controls.Pop();
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
718
0
Gpt3D_Clone718_0.cs 1 18
Gpt3D_Clone718_0.cs 19 45
----------------------------------------

public static void MoveFilesTo (this Folder folder, string folderUrl) {
    var ctx = (ClientContext) folder.Context;
    if (! ctx.Web.IsPropertyAvailable ("ServerRelativeUrl")) {
        ctx.Load (ctx.Web, w => w.ServerRelativeUrl);
    }
    ctx.Load (folder, f => f.Files, f => f.ServerRelativeUrl, f => f.Folders);
    ctx.ExecuteQuery ();
    EnsureFolder (ctx.Web.RootFolder, folderUrl.Replace (ctx.Web.ServerRelativeUrl, string.Empty));
    foreach (var file in folder.Files) {
        var targetFileUrl = file.ServerRelativeUrl.Replace (folder.ServerRelativeUrl, folderUrl);
        file.MoveTo (targetFileUrl, MoveOperations.Overwrite);
    }
    ctx.ExecuteQuery ();
    foreach (var subFolder in folder.Folders) {
        var targetFolderUrl = subFolder.ServerRelativeUrl.Replace (folder.ServerRelativeUrl, folderUrl);
        subFolder.MoveFilesTo (targetFolderUrl);
    }
}
----------------------------------------

 public static void MoveFilesTo (this Folder folder, string folderUrl) {
    var ctx = (ClientContext) folder.Context;
    ctx.Load (folder, f => f.Files, f => f.ServerRelativeUrl, f => f.Folders);
    if (! ctx.Web.IsPropertyAvailable ("ServerRelativeUrl")) {
        ctx.Load (ctx.Web, w => w.ServerRelativeUrl);
    }
    ctx.ExecuteQuery ();
    Folder sf = ctx.Web.RootFolder;
    string fpath = folderUrl.Replace(ctx.Web.ServerRelativeUrl, "");
    Folder f = CreateFolder(sf,fpath);
   
    foreach (var file in folder.Files) {
        var targetFileUrl = file.ServerRelativeUrl.Replace (folder.ServerRelativeUrl, folderUrl);
        File oldFile = file.ListItemAllFields;
        string existingName = oldFile.Name;
        oldFile.CopyTo(fpath + "/" + existingName, true); 
        File newFile = f.Files.GetByUrl(existingName);
        oldFile.DeleteObject();
        ctx.ExecuteQuery();
    }
    foreach (var subFolder in folder.Folders) {
        var targetFolderUrl = subFolder.ServerRelativeUrl.Replace (folder.ServerRelativeUrl, folderUrl);
        subFolder.MoveFilesTo (targetFolderUrl);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
718
1
Gpt3D_Clone718_1.cs 1 18
Gpt3D_Clone718_1.cs 19 40
----------------------------------------

public static void MoveFilesTo (this Folder folder, string folderUrl) {
    var ctx = (ClientContext) folder.Context;
    if (! ctx.Web.IsPropertyAvailable ("ServerRelativeUrl")) {
        ctx.Load (ctx.Web, w => w.ServerRelativeUrl);
    }
    ctx.Load (folder, f => f.Files, f => f.ServerRelativeUrl, f => f.Folders);
    ctx.ExecuteQuery ();
    EnsureFolder (ctx.Web.RootFolder, folderUrl.Replace (ctx.Web.ServerRelativeUrl, string.Empty));
    foreach (var file in folder.Files) {
        var targetFileUrl = file.ServerRelativeUrl.Replace (folder.ServerRelativeUrl, folderUrl);
        file.MoveTo (targetFileUrl, MoveOperations.Overwrite);
    }
    ctx.ExecuteQuery ();
    foreach (var subFolder in folder.Folders) {
        var targetFolderUrl = subFolder.ServerRelativeUrl.Replace (folder.ServerRelativeUrl, folderUrl);
        subFolder.MoveFilesTo (targetFolderUrl);
    }
}
----------------------------------------

 public static void MoveFilesTo (this Folder folder, string folderUrl) {
   var ctx = (ClientContext) folder.Context;
   ctx.Load (folder, f => f.Files, f => f.ServerRelativeUrl, f => f.Folders);
   if (! ctx.Web.IsPropertyAvailable ("ServerRelativeUrl")) {
        ctx.Load (ctx.Web, w => w.ServerRelativeUrl);
    }
   ctx.ExecuteQuery ();
   string folderPath = folderUrl.Replace (ctx.Web.ServerRelativeUrl, string.Empty);
   using (Folder targetFolder = EnsureFolder (ctx.Web.RootFolder, folderPath)) {       
        foreach (var file in folder.Files) {
            var targetFileUrl = file.ServerRelativeUrl.Replace (folder.ServerRelativeUrl, folderUrl);
            CopyFile (targetFolder, file, targetFileUrl);
        }
        ctx.ExecuteQuery ();
        foreach (var subFolder in folder.Folders) {
            var targetFolderUrl = subFolder.ServerRelativeUrl.Replace (folder.ServerRelativeUrl, folderUrl);
            subFolder.MoveFilesTo (targetFolderUrl);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
718
2
Gpt3D_Clone718_2.cs 1 18
Gpt3D_Clone718_2.cs 19 45
----------------------------------------

public static void MoveFilesTo (this Folder folder, string folderUrl) {
    var ctx = (ClientContext) folder.Context;
    if (! ctx.Web.IsPropertyAvailable ("ServerRelativeUrl")) {
        ctx.Load (ctx.Web, w => w.ServerRelativeUrl);
    }
    ctx.Load (folder, f => f.Files, f => f.ServerRelativeUrl, f => f.Folders);
    ctx.ExecuteQuery ();
    EnsureFolder (ctx.Web.RootFolder, folderUrl.Replace (ctx.Web.ServerRelativeUrl, string.Empty));
    foreach (var file in folder.Files) {
        var targetFileUrl = file.ServerRelativeUrl.Replace (folder.ServerRelativeUrl, folderUrl);
        file.MoveTo (targetFileUrl, MoveOperations.Overwrite);
    }
    ctx.ExecuteQuery ();
    foreach (var subFolder in folder.Folders) {
        var targetFolderUrl = subFolder.ServerRelativeUrl.Replace (folder.ServerRelativeUrl, folderUrl);
        subFolder.MoveFilesTo (targetFolderUrl);
    }
}
----------------------------------------

  public static void MoveFilesTo (this Folder folder, string folderUrl) {
    var ctx = (ClientContext) folder.Context;
    ctx.Load (folder, f => f.Files, f => f.ServerRelativeUrl, f => f.Folders);
    if (! ctx.Web.IsPropertyAvailable ("ServerRelativeUrl")) {
        ctx.Load (ctx.Web, w => w.ServerRelativeUrl);
    }
    ctx.ExecuteQuery ();
    EnsureFolder (ctx.Web.RootFolder, folderUrl.Replace (ctx.Web.ServerRelativeUrl, string.Empty));
    using (Folder targetFolder = new Folder (ctx, folderUrl))
    {
        foreach (var file in folder.Files)
        {
            var targetFileUrl = file.ServerRelativeUrl.Replace(folder.ServerRelativeUrl, folderUrl);
            MoveFile(targetFolder, file, targetFileUrl);
        }
        ctx.ExecuteQuery();
        foreach (var subFolder in folder.Folders)
        {
            var targetFolderUrl = subFolder.ServerRelativeUrl.Replace(folder.ServerRelativeUrl, folderUrl);
            MoveFilesTo(subFolder, targetFolderUrl); 
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
718
3
Gpt3D_Clone718_3.cs 1 18
Gpt3D_Clone718_3.cs 19 42
----------------------------------------

public static void MoveFilesTo (this Folder folder, string folderUrl) {
    var ctx = (ClientContext) folder.Context;
    if (! ctx.Web.IsPropertyAvailable ("ServerRelativeUrl")) {
        ctx.Load (ctx.Web, w => w.ServerRelativeUrl);
    }
    ctx.Load (folder, f => f.Files, f => f.ServerRelativeUrl, f => f.Folders);
    ctx.ExecuteQuery ();
    EnsureFolder (ctx.Web.RootFolder, folderUrl.Replace (ctx.Web.ServerRelativeUrl, string.Empty));
    foreach (var file in folder.Files) {
        var targetFileUrl = file.ServerRelativeUrl.Replace (folder.ServerRelativeUrl, folderUrl);
        file.MoveTo (targetFileUrl, MoveOperations.Overwrite);
    }
    ctx.ExecuteQuery ();
    foreach (var subFolder in folder.Folders) {
        var targetFolderUrl = subFolder.ServerRelativeUrl.Replace (folder.ServerRelativeUrl, folderUrl);
        subFolder.MoveFilesTo (targetFolderUrl);
    }
}
----------------------------------------

 public static void MoveFilesTo (this Folder folder, string folderUrl) {
    var ctx = (ClientContext) folder.Context;
    ctx.Load (folder, f => f.Files, f => f.ServerRelativeUrl, f => f.Folders);
    if (! ctx.Web.IsPropertyAvailable ("ServerRelativeUrl")) {
        ctx.Load (ctx.Web, w => w.ServerRelativeUrl);
    }
    ctx.ExecuteQuery ();
    EnsureFolder (ctx.Web.RootFolder, folderUrl.Replace (ctx.Web.ServerRelativeUrl, string.Empty));
    Folder targetFolder = new Folder (ctx, folderUrl);
    ctx.ExecuteQuery ();
    foreach (var subFolder in folder.Folders) {
        var targetFolderUrl = subFolder.ServerRelativeUrl.Replace (folder.ServerRelativeUrl, folderUrl);
        subFolder.MoveFilesTo (targetFolderUrl, targetFolder);
    }
        foreach (var file in folder.Files) {
            var targetFileUrl = file.ServerRelativeUrl.Replace (folder.ServerRelativeUrl, folderUrl);
            MoveFile (folder, file, targetFileUrl, targetFolder);
        }
        ctx.ExecuteQuery ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
718
4
Gpt3D_Clone718_4.cs 1 18
Gpt3D_Clone718_4.cs 19 41
----------------------------------------

public static void MoveFilesTo (this Folder folder, string folderUrl) {
    var ctx = (ClientContext) folder.Context;
    if (! ctx.Web.IsPropertyAvailable ("ServerRelativeUrl")) {
        ctx.Load (ctx.Web, w => w.ServerRelativeUrl);
    }
    ctx.Load (folder, f => f.Files, f => f.ServerRelativeUrl, f => f.Folders);
    ctx.ExecuteQuery ();
    EnsureFolder (ctx.Web.RootFolder, folderUrl.Replace (ctx.Web.ServerRelativeUrl, string.Empty));
    foreach (var file in folder.Files) {
        var targetFileUrl = file.ServerRelativeUrl.Replace (folder.ServerRelativeUrl, folderUrl);
        file.MoveTo (targetFileUrl, MoveOperations.Overwrite);
    }
    ctx.ExecuteQuery ();
    foreach (var subFolder in folder.Folders) {
        var targetFolderUrl = subFolder.ServerRelativeUrl.Replace (folder.ServerRelativeUrl, folderUrl);
        subFolder.MoveFilesTo (targetFolderUrl);
    }
}
----------------------------------------

 public static void MoveFilesTo (this Folder folder, string folderUrl) {
    var ctx = (ClientContext) folder.Context;
    ctx.Load (folder, f => f.Files, f => f.ServerRelativeUrl, f => f.Folders);
    if (! ctx.Web.IsPropertyAvailable ("ServerRelativeUrl")) {
        ctx.Load (ctx.Web, w => w.ServerRelativeUrl);
    }
    ctx.ExecuteQuery ();
    EnsureFolder (ctx.Web.RootFolder, folderUrl.Replace (ctx.Web.ServerRelativeUrl, string.Empty));
    Folder targetFolder = new Folder (ctx, folderUrl);
    ctx.ExecuteQuery ();
    foreach (var file in folder.Files) {
        var targetFileUrl = file.ServerRelativeUrl.Replace (folder.ServerRelativeUrl, folderUrl);
        file.MoveTo (targetFolder, targetFileUrl, MoveOperations.Overwrite);
    }
    ctx.ExecuteQuery ();
    foreach (var subFolder in folder.Folders) {
        var targetFolderUrl = subFolder.ServerRelativeUrl.Replace (folder.ServerRelativeUrl, folderUrl);
        subFolder.MoveFilesTo (targetFolderUrl);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
718
5
Gpt3D_Clone718_5.cs 1 18
Gpt3D_Clone718_5.cs 19 42
----------------------------------------

public static void MoveFilesTo (this Folder folder, string folderUrl) {
    var ctx = (ClientContext) folder.Context;
    if (! ctx.Web.IsPropertyAvailable ("ServerRelativeUrl")) {
        ctx.Load (ctx.Web, w => w.ServerRelativeUrl);
    }
    ctx.Load (folder, f => f.Files, f => f.ServerRelativeUrl, f => f.Folders);
    ctx.ExecuteQuery ();
    EnsureFolder (ctx.Web.RootFolder, folderUrl.Replace (ctx.Web.ServerRelativeUrl, string.Empty));
    foreach (var file in folder.Files) {
        var targetFileUrl = file.ServerRelativeUrl.Replace (folder.ServerRelativeUrl, folderUrl);
        file.MoveTo (targetFileUrl, MoveOperations.Overwrite);
    }
    ctx.ExecuteQuery ();
    foreach (var subFolder in folder.Folders) {
        var targetFolderUrl = subFolder.ServerRelativeUrl.Replace (folder.ServerRelativeUrl, folderUrl);
        subFolder.MoveFilesTo (targetFolderUrl);
    }
}
----------------------------------------

 public static void MoveFilesTo (this Folder folder, string folderUrl) {
    var ctx = (ClientContext) folder.Context;
    ctx.Load (folder, f => f.Files, f => f.ServerRelativeUrl, f => f.Folders);
    if (! ctx.Web.IsPropertyAvailable ("ServerRelativeUrl")) {
        ctx.Load (ctx.Web, w => w.ServerRelativeUrl);
    }
    ctx.ExecuteQuery ();
    EnsureFolder (ctx.Web.RootFolder, folderUrl.Replace (ctx.Web.ServerRelativeUrl, string.Empty));
  
    ctx.ExecuteQuery ();
    foreach (var subFolder in folder.Folders) {
        var targetFolderUrl = subFolder.ServerRelativeUrl.Replace (folder.ServerRelativeUrl, folderUrl);
        subFolder.MoveFilesTo (targetFolderUrl);
    }
        
    foreach (var file in folder.Files) {
        var targetFileUrl = file.ServerRelativeUrl.Replace (folder.ServerRelativeUrl, folderUrl);
        file.MoveTo (targetFileUrl, MoveOperations.Overwrite);
    }
    ctx.ExecuteQuery ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
719
1
Gpt3D_Clone719_1.cs 1 9
Gpt3D_Clone719_1.cs 10 27
----------------------------------------

public int Compare (Level x, Level y) {
    if (object.ReferenceEquals (x, y))
        return 0;
    if (x == null)
        return 1;
    else if (y == null)
        return - 1;
    return x.LevelID.CompareTo (y.LevelID);
}
----------------------------------------

 public int Compare(Level x, Level y) 
{ 
    if (object.ReferenceEquals(x, y)) 
        return 0; 
      
    if (x == null && y == null) 
        return 0; 
          
    if (x == null) 
        return 1; 
  
    if (y == null) 
        return -1; 
  
    return x.LevelID.CompareTo(y.LevelID);     
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
719
4
Gpt3D_Clone719_4.cs 1 9
Gpt3D_Clone719_4.cs 10 24
----------------------------------------

public int Compare (Level x, Level y) {
    if (object.ReferenceEquals (x, y))
        return 0;
    if (x == null)
        return 1;
    else if (y == null)
        return - 1;
    return x.LevelID.CompareTo (y.LevelID);
}
----------------------------------------

 public int Compare(Level x, Level y) 
{ 
    if (x == null && y == null) 
        return 0; 
  
    if (x == null) 
        return 1; 
  
    if (y == null) 
        return -1; 
  
    return x.LevelID.CompareTo(y.LevelID); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
719
5
Gpt3D_Clone719_5.cs 1 9
Gpt3D_Clone719_5.cs 10 24
----------------------------------------

public int Compare (Level x, Level y) {
    if (object.ReferenceEquals (x, y))
        return 0;
    if (x == null)
        return 1;
    else if (y == null)
        return - 1;
    return x.LevelID.CompareTo (y.LevelID);
}
----------------------------------------

 public int Compare(Level x, Level y) 
{  
    if (x == y) 
        return 0; 
  
    if (x == null) 
        return 1; 
  
    if (y == null) 
        return -1; 
  
    return x.LevelID.CompareTo(y.LevelID);    
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
71
0
Gpt3D_Clone71_0.cs 1 18
Gpt3D_Clone71_0.cs 19 38
----------------------------------------

public virtual bool Equals (EntityBase other) {
    if (other == null) {
        return false;
    }
    if (ReferenceEquals (other, this)) {
        return true;
    }
    var otherType = NHibernateProxyHelper.GetClassWithoutInitializingProxy (other);
    var thisType = NHibernateProxyHelper.GetClassWithoutInitializingProxy (this);
    if (! otherType.Equals (thisType)) {
        return false;
    }
    bool otherIsTransient = Equals (other.Id, 0);
    bool thisIsTransient = Equals (Id, 0);
    if (otherIsTransient || thisIsTransient)
        return false;
    return other.Id.Equals (Id);
}
----------------------------------------

  public virtual bool Equals (EntityBase other) {
    if (other == null) {
        return false;
    }
    if (ReferenceEquals (other, this)) {
        return true;
    }
    var otherType = NHibernateProxyHelper.GetClassWithoutInitializingProxy (other);
    var thisType = NHibernateProxyHelper.GetClassWithoutInitializingProxy (this);
    if (otherType != thisType) {
        return false;
    }
    bool otherIsTransient = Object.Equals (other.Id, 0);
    bool thisIsTransient = Object.Equals (Id, 0);
    if (otherIsTransient || thisIsTransient)
        return false;
    return Object.Equals (other.Id, Id);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
721
1
Gpt3D_Clone721_1.cs 1 12
Gpt3D_Clone721_1.cs 13 26
----------------------------------------

private static int ParseNybble (char c) {
    if (c >= '0' && c <= '9') {
        return c - '0';
    }
    if (c >= 'A' && c <= 'F') {
        return c - 'A' + 10;
    }
    if (c >= 'a' && c <= 'f') {
        return c - 'A' + 10;
    }
    throw new ArgumentOutOfRangeException ("Invalid hex digit: " + c);
}
----------------------------------------

 private static int ParseNybble (char c) {
    if (c >= '0' && c <= '9') {
        return (int)(c - '0');
    }
    if (c >= 'A' && c <= 'F') {
        return (int)(c - 'A' + 10);
    }
    if (c >= 'a' && c <= 'f') {
        return (int)(c - 'A' + 10);
    }
    throw new ArgumentOutOfRangeException ("Invalid hex digit: " + c);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
721
2
Gpt3D_Clone721_2.cs 1 12
Gpt3D_Clone721_2.cs 13 26
----------------------------------------

private static int ParseNybble (char c) {
    if (c >= '0' && c <= '9') {
        return c - '0';
    }
    if (c >= 'A' && c <= 'F') {
        return c - 'A' + 10;
    }
    if (c >= 'a' && c <= 'f') {
        return c - 'A' + 10;
    }
    throw new ArgumentOutOfRangeException ("Invalid hex digit: " + c);
}
----------------------------------------

 private static int ParseNybble (char c) {
    if (c >= '0' && c <= '9') {
        return int.Parse (c.ToString ());
    }
    if (c >= 'A' && c <= 'F') {
        return int.Parse (c.ToString (), NumberStyles.HexNumber);
    }
    if (c >= 'a' && c <= 'f') {
        return int.Parse (c.ToString (), NumberStyles.HexNumber);
    }
    throw new ArgumentOutOfRangeException ("Invalid hex digit: " + c);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
72
7
Gpt3D_Clone72_7.cs 1 20
Gpt3D_Clone72_7.cs 21 47
----------------------------------------

[STAThread] static void Main (string [] args) {
    fileDialog.ShowDialog ();
    string fileName = fileDialog.FileName;
    if (string.IsNullOrEmpty (fileName) == false) {
        AppDomain.CurrentDomain.AssemblyResolve += CurrentDomain_AssemblyResolve;
        if (Directory.Exists (@"c:\Provisioning\") == false)
            Directory.CreateDirectory (@"c:\Provisioning\");
        assemblyDirectory = Path.GetDirectoryName (fileName);
        Assembly loadedAssembly = Assembly.LoadFile (fileName);
        List < Type > assemblyTypes = loadedAssembly.GetTypes ().ToList < Type > ();
        foreach (var type in assemblyTypes) {
            if (type.IsInterface == false) {
                StreamWriter jsonFile = File.CreateText (string.Format (@"c:\Provisioning\{0}.json", type.Name));
                JavaScriptSerializer serializer = new JavaScriptSerializer ();
                jsonFile.WriteLine (serializer.Serialize (Activator.CreateInstance (type)));
                jsonFile.Close ();
            }
        }
    }
}
----------------------------------------

 [STAThread] static void Main (string [] args) {
    OpenFileDialog fileDialog = new OpenFileDialog ();
    DialogResult result = fileDialog.ShowDialog ();
    if (result == DialogResult.OK) {
        string fileName = fileDialog.FileName;
        if (string.IsNullOrEmpty(fileName) == false) {
            AppDomain.CurrentDomain.AssemblyResolve += CurrentDomain_AssemblyResolve;
            if (Directory.Exists(@"c:\\Provisioning\\") == false)
                Directory.CreateDirectory(@"c:\\Provisioning\\");
            string assemblyDirectory = Path.GetDirectoryName(fileName);
            Assembly loadedAssembly = Assembly.LoadFile(fileName);
            List<Type> assemblyTypes = loadedAssembly.GetTypes().ToList<Type>();
            foreach (var type in assemblyTypes) {
                if (!type.IsInterface) {
                    StreamWriter jsonFile = File.CreateText(string.Format(@"c:\\Provisioning\\{0}.json", type.Name));
                    JavaScriptSerializer serializer = new JavaScriptSerializer();
                    object appObject = Activator.CreateInstance(type);
                    jsonFile.WriteLine(serializer.Serialize(appObject));
                    jsonFile.Close();
                }
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
72
9
Gpt3D_Clone72_9.cs 1 20
Gpt3D_Clone72_9.cs 21 52
----------------------------------------

[STAThread] static void Main (string [] args) {
    fileDialog.ShowDialog ();
    string fileName = fileDialog.FileName;
    if (string.IsNullOrEmpty (fileName) == false) {
        AppDomain.CurrentDomain.AssemblyResolve += CurrentDomain_AssemblyResolve;
        if (Directory.Exists (@"c:\Provisioning\") == false)
            Directory.CreateDirectory (@"c:\Provisioning\");
        assemblyDirectory = Path.GetDirectoryName (fileName);
        Assembly loadedAssembly = Assembly.LoadFile (fileName);
        List < Type > assemblyTypes = loadedAssembly.GetTypes ().ToList < Type > ();
        foreach (var type in assemblyTypes) {
            if (type.IsInterface == false) {
                StreamWriter jsonFile = File.CreateText (string.Format (@"c:\Provisioning\{0}.json", type.Name));
                JavaScriptSerializer serializer = new JavaScriptSerializer ();
                jsonFile.WriteLine (serializer.Serialize (Activator.CreateInstance (type)));
                jsonFile.Close ();
            }
        }
    }
}
----------------------------------------

 [STAThread] static void Main (string [] args){
    OpenFileDialog fileDialog = new OpenFileDialog();
    DialogResult result = fileDialog.ShowDialog();
    if (result == DialogResult.OK) {
        string fileName = fileDialog.FileName;
        if (!string.IsNullOrEmpty(fileName)) {
            AppDomain.CurrentDomain.AssemblyResolve += CurrentDomain_AssemblyResolve;
            if (!Directory.Exists(@"c:\\Provisioning\\")){
                Directory.CreateDirectory(@"c:\\Provisioning\\");
            }
            string assemblyDirectory = Path.GetDirectoryName(fileName);
            Assembly loadedAssembly = Assembly.Load(fileName);
            List<Type> assemblyTypes = loadedAssembly.GetTypes().ToList<Type>();
            
            foreach (var type in assemblyTypes) {
                if (!type.IsInterface) {
                    string filename = string.Format(@"c:(\\Provisioning\\{0}.json", type.Name);
                    StreamWriter jsonFile = File.CreateText(filename);
                    JavaScriptSerializer serializer = new JavaScriptSerializer();
                    jsonFile.WriteLine(serializer.Serialize(Activator.CreateInstance(type)));
                    jsonFile.Close();
                }
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
734
0
Gpt3D_Clone734_0.cs 1 20
Gpt3D_Clone734_0.cs 21 48
----------------------------------------

public static void Main (string [] args) {
    var provider = new NativeApplicationClient (GoogleAuthenticationServer.Description);
    provider.ClientIdentifier = clientId;
    provider.ClientSecret = clientSecret;
    var auth = new OAuth2Authenticator < NativeApplicationClient > (provider, GetAuthorization);
    var service = new BigqueryService (auth);
    JobsResource j = service.Jobs;
    QueryRequest qr = new QueryRequest ();
    qr.Query = query;
    QueryResponse response = j.Query (qr, projectId).Fetch ();
    foreach (TableRow row in response.Rows) {
        List < string > list = new List < string > ();
        foreach (TableRow.FData field in row.F) {
            list.Add (field.V);
        }
        Console.WriteLine (String.Join ("\t", list));
    }
    Console.WriteLine ("\nPress enter to exit");
    Console.ReadLine ();
}
----------------------------------------

	public static void Main (string [] args) {
    var provider = new NativeApplicationClient(GoogleAuthenticationServer.Description) 
    {
        ClientIdentifier = clientId,
        ClientSecret = clientSecret
    };
    var auth = new OAuth2Authenticator<NativeApplicationClient>(provider, GetAuthorization);
    var service = new BigqueryService(auth);
    JobsResource j = service.Jobs;
    QueryRequest qr = new QueryRequest
    { 
        Query = query 
    };
    QueryResponse response = j.Query(qr, projectId).Fetch();
    foreach (TableRow row in response.Rows)
    {
        List<string> list = new List<string>();
        foreach (TableRow.FData field in row.F)
        {
            list.Add(field.V);
        }
        Console.WriteLine(String.Join("\t", list));
    }
    Console.WriteLine("\nPress enter to exit");
    Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
735
5
Gpt3D_Clone735_5.cs 1 9
Gpt3D_Clone735_5.cs 10 25
----------------------------------------

public static void AssignValueToProperty (this ObjectAccessor accessor, string propertyName, object value) {
    var index = propertyName.IndexOf ('.');
    if (index == - 1) {
        accessor [propertyName] = value;
    } else {
        accessor = ObjectAccessor.Create (accessor [propertyName.Substring (0, index)]);
        AssignValueToProperty (accessor, propertyName.Substring (index + 1), value);
    }
}
----------------------------------------

// Implementation 3
public static void AssignValueToProperty (this ObjectAccessor accessor, string propertyName, object value) 
{
    var index = propertyName.IndexOf ('.');
    if (index != -1) 
    {
        accessor = ObjectAccessor.Create (accessor [propertyName.Substring (0, index)]);
        AssignValueToProperty (accessor, propertyName.Substring (index + 1), value);
    } 
    else
    {
        accessor[propertyName] = value;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
735
7
Gpt3D_Clone735_7.cs 1 9
Gpt3D_Clone735_7.cs 10 25
----------------------------------------

public static void AssignValueToProperty (this ObjectAccessor accessor, string propertyName, object value) {
    var index = propertyName.IndexOf ('.');
    if (index == - 1) {
        accessor [propertyName] = value;
    } else {
        accessor = ObjectAccessor.Create (accessor [propertyName.Substring (0, index)]);
        AssignValueToProperty (accessor, propertyName.Substring (index + 1), value);
    }
}
----------------------------------------

// Implementation 4
public static void AssignValueToProperty (this ObjectAccessor accessor, string propertyName, object value) 
{
    var index = propertyName.IndexOf ('.');
    if (index > 0) 
    {
        accessor = ObjectAccessor.Create (accessor [propertyName.Substring (0, index)]);
        AssignValueToProperty (accessor, propertyName.Substring (index + 1), value);
    } 
    else
    {
        accessor[propertyName] = value;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
736
0
Gpt3D_Clone736_0.cs 1 14
Gpt3D_Clone736_0.cs 15 42
----------------------------------------

public static string GetAllMessages (this Exception ex) {
    if (ex == null)
        throw new ArgumentNullException ("ex");
    StringBuilder sb = new StringBuilder ();
    while (ex != null) {
        if (! string.IsNullOrEmpty (ex.Message)) {
            if (sb.Length > 0)
                sb.Append (" ");
            sb.Append (ex.Message);
        }
        ex = ex.InnerException;
    }
    return sb.ToString ();
}
----------------------------------------

 public static string GetAllMessages (this Exception ex) 
{
    if (ex == null)
        throw new ArgumentNullException ("ex");
    StringBuilder sb = new StringBuilder ();
    Queue<Exception> exceptionQueue = new Queue<Exception> ();
    exceptionQueue.Enqueue (ex);
    while (exceptionQueue.Count > 0) 
    {
        Exception currentException = exceptionQueue.Dequeue ();
        if (!string.IsNullOrEmpty (currentException.Message)) 
        {
            if (sb.Length > 0) 
                sb.Append (" ");
            sb.Append (currentException.Message);
        }
        if (currentException.InnerException != null) 
            exceptionQueue.Enqueue (currentException.InnerException);
    }
    return sb.ToString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
736
1
Gpt3D_Clone736_1.cs 1 14
Gpt3D_Clone736_1.cs 15 31
----------------------------------------

public static string GetAllMessages (this Exception ex) {
    if (ex == null)
        throw new ArgumentNullException ("ex");
    StringBuilder sb = new StringBuilder ();
    while (ex != null) {
        if (! string.IsNullOrEmpty (ex.Message)) {
            if (sb.Length > 0)
                sb.Append (" ");
            sb.Append (ex.Message);
        }
        ex = ex.InnerException;
    }
    return sb.ToString ();
}
----------------------------------------

 public static string GetAllMessages (this Exception ex) 
{
    if (ex == null)
        throw new ArgumentNullException ("ex");
    List<string> exceptions = new List<string> ();
    while (ex != null) 
    {
        if (!string.IsNullOrEmpty (ex.Message)) 
            exceptions.Add (ex.Message);
        ex = ex.InnerException;
        exceptions.Reverse();
    }
    return string.Join(" ", exceptions);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
736
3
Gpt3D_Clone736_3.cs 1 14
Gpt3D_Clone736_3.cs 15 30
----------------------------------------

public static string GetAllMessages (this Exception ex) {
    if (ex == null)
        throw new ArgumentNullException ("ex");
    StringBuilder sb = new StringBuilder ();
    while (ex != null) {
        if (! string.IsNullOrEmpty (ex.Message)) {
            if (sb.Length > 0)
                sb.Append (" ");
            sb.Append (ex.Message);
        }
        ex = ex.InnerException;
    }
    return sb.ToString ();
}
----------------------------------------

 public static string GetAllMessages (this Exception ex) 
{
    if (ex == null)
        throw new ArgumentNullException ("ex");
    List<string> allMessages = new List<string> ();
    while (ex != null) 
    {
        if (!string.IsNullOrEmpty (ex.Message)) 
            allMessages.Add (ex.Message);
        ex = ex.InnerException;
    }
    return string.Join(" ", allMessages);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
73
0
Gpt3D_Clone73_0.cs 1 11
Gpt3D_Clone73_0.cs 12 25
----------------------------------------

public T Dequeue () {
    if (this._size == 0) {
        ThrowHelper.ThrowInvalidOperationException (ExceptionResource.InvalidOperation_EmptyQueue);
    }
    T local = this._array [this._head];
    this._array [this._head] = default (T);
    this._head = (this._head + 1) % this._array.Length;
    this._size --;
    this._version ++;
    return local;
}
----------------------------------------

  public T Dequeue () {
    if (this._size == 0) {
        ThrowHelper.ThrowInvalidOperationException (ExceptionResource.InvalidOperation_EmptyQueue);
    }
    T local = this._array [this._head];
    this._array[this._head] = this._array[this._array.Length-1];
    this._array[this._array.Length-1] = default(T);
    this._size--;
    this._head = (this._head + 1) % this._array.Length;
    this._version ++;
    return local;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
73
1
Gpt3D_Clone73_1.cs 1 11
Gpt3D_Clone73_1.cs 12 26
----------------------------------------

public T Dequeue () {
    if (this._size == 0) {
        ThrowHelper.ThrowInvalidOperationException (ExceptionResource.InvalidOperation_EmptyQueue);
    }
    T local = this._array [this._head];
    this._array [this._head] = default (T);
    this._head = (this._head + 1) % this._array.Length;
    this._size --;
    this._version ++;
    return local;
}
----------------------------------------

  public T Dequeue () {
    if (this._size == 0) {
        ThrowHelper.ThrowInvalidOperationException (ExceptionResource.InvalidOperation_EmptyQueue);
    }   
    T local = this._array [this._head];
    for(int i=this._head; i<this._size-1; i++){
        this._array[i] = this._array[i+1];
    }
    this._array[this._size-1] = default(T);
    this._size--;
    this._version ++;
    return local;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
73
2
Gpt3D_Clone73_2.cs 1 11
Gpt3D_Clone73_2.cs 12 25
----------------------------------------

public T Dequeue () {
    if (this._size == 0) {
        ThrowHelper.ThrowInvalidOperationException (ExceptionResource.InvalidOperation_EmptyQueue);
    }
    T local = this._array [this._head];
    this._array [this._head] = default (T);
    this._head = (this._head + 1) % this._array.Length;
    this._size --;
    this._version ++;
    return local;
}
----------------------------------------

  public T Dequeue () {
    if (this._size == 0) {
        ThrowHelper.ThrowInvalidOperationException (ExceptionResource.InvalidOperation_EmptyQueue);
    }
    T local = this._array [this._head];
    this._array[this._head] = this._array[this._size-1];
    this._array[this._size-1] = this._array[this._head-1];
    this._size--;
    this._head = (this._head + 1) % this._array.Length;
    this._version ++;
    return local;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
73
3
Gpt3D_Clone73_3.cs 1 11
Gpt3D_Clone73_3.cs 12 25
----------------------------------------

public T Dequeue () {
    if (this._size == 0) {
        ThrowHelper.ThrowInvalidOperationException (ExceptionResource.InvalidOperation_EmptyQueue);
    }
    T local = this._array [this._head];
    this._array [this._head] = default (T);
    this._head = (this._head + 1) % this._array.Length;
    this._size --;
    this._version ++;
    return local;
}
----------------------------------------

  public T Dequeue () {
    if (this._size == 0) {
        ThrowHelper.ThrowInvalidOperationException (ExceptionResource.InvalidOperation_EmptyQueue);
    }
    T local = this._array [this._head];
    this._array[this._head] = this._array[this._size-1];
    this._size--;
    int end = (this._head + this._size) % this._array.Length; // sets the end of the array after rotation
    this._RotateList(this._head, end);
    this._version ++;
    return local;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
73
4
Gpt3D_Clone73_4.cs 1 11
Gpt3D_Clone73_4.cs 12 26
----------------------------------------

public T Dequeue () {
    if (this._size == 0) {
        ThrowHelper.ThrowInvalidOperationException (ExceptionResource.InvalidOperation_EmptyQueue);
    }
    T local = this._array [this._head];
    this._array [this._head] = default (T);
    this._head = (this._head + 1) % this._array.Length;
    this._size --;
    this._version ++;
    return local;
}
----------------------------------------

  public T Dequeue () {
    if (this._size == 0) {
        ThrowHelper.ThrowInvalidOperationException (ExceptionResource.InvalidOperation_EmptyQueue);
    }
    T local = this._array [this._head];
    for(int i=this._head; i<this._size; i++){
        this._array[i] = this._array[i+1];
    }
    this._array[this._size-1] = default(T);
    this._size--;
    this._version ++;
    return local;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
73
5
Gpt3D_Clone73_5.cs 1 11
Gpt3D_Clone73_5.cs 12 25
----------------------------------------

public T Dequeue () {
    if (this._size == 0) {
        ThrowHelper.ThrowInvalidOperationException (ExceptionResource.InvalidOperation_EmptyQueue);
    }
    T local = this._array [this._head];
    this._array [this._head] = default (T);
    this._head = (this._head + 1) % this._array.Length;
    this._size --;
    this._version ++;
    return local;
}
----------------------------------------

 public T Dequeue () {
    if (this._size == 0) {
        ThrowHelper.ThrowInvalidOperationException (ExceptionResource.InvalidOperation_EmptyQueue);
    }
    T local = this._array [this._head];
    this._array[this._head] = this._array[this._size-1];
    this._array[this._size-1] = this._array[0];
    this._size--;
    this._head = (this._head + 1) % this._array.Length;
    this._version ++;
    return local;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
740
0
Gpt3D_Clone740_0.cs 1 20
Gpt3D_Clone740_0.cs 21 44
----------------------------------------

public void Execute (IServiceProvider serviceProvider) {
    try {
        OnExecute (serviceProvider);
    }
    catch (Exception ex) {
        bool rethrow = false;
        try {
            OnError (ex);
        }
        catch {
            rethrow = true;
        }
        if (rethrow) {
            throw;
        }
    }
    finally {
        OnCleanup ();
    }
}
----------------------------------------

  public void Execute (IServiceProvider serviceProvider) 
{
    try
    {
        OnExecute (serviceProvider);
    }
    catch (Exception ex)
    {
        bool rethrow = true;
        OnError(ex);
        if (rethrow)
        {
            throw;
        }
    }
    finally
    {
        OnCleanup();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
740
1
Gpt3D_Clone740_1.cs 1 20
Gpt3D_Clone740_1.cs 21 42
----------------------------------------

public void Execute (IServiceProvider serviceProvider) {
    try {
        OnExecute (serviceProvider);
    }
    catch (Exception ex) {
        bool rethrow = false;
        try {
            OnError (ex);
        }
        catch {
            rethrow = true;
        }
        if (rethrow) {
            throw;
        }
    }
    finally {
        OnCleanup ();
    }
}
----------------------------------------

 public void Execute (IServiceProvider serviceProvider) 
{
    try
    {
        OnExecute (serviceProvider);
    }
    catch (Exception ex)
    {
        OnError(ex);
        if (ex is ArgumentNullException)
        {
            throw;
        }
    }
    finally
    {
        OnCleanup();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
740
2
Gpt3D_Clone740_2.cs 1 20
Gpt3D_Clone740_2.cs 21 42
----------------------------------------

public void Execute (IServiceProvider serviceProvider) {
    try {
        OnExecute (serviceProvider);
    }
    catch (Exception ex) {
        bool rethrow = false;
        try {
            OnError (ex);
        }
        catch {
            rethrow = true;
        }
        if (rethrow) {
            throw;
        }
    }
    finally {
        OnCleanup ();
    }
}
----------------------------------------

  public void Execute (IServiceProvider serviceProvider) 
{
    try
    {
        OnExecute (serviceProvider);
        try
        {
            OnError(ex);
        }
        catch
        {
            throw;
        }
    }
    finally
    {
        OnCleanup();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
740
3
Gpt3D_Clone740_3.cs 1 20
Gpt3D_Clone740_3.cs 21 42
----------------------------------------

public void Execute (IServiceProvider serviceProvider) {
    try {
        OnExecute (serviceProvider);
    }
    catch (Exception ex) {
        bool rethrow = false;
        try {
            OnError (ex);
        }
        catch {
            rethrow = true;
        }
        if (rethrow) {
            throw;
        }
    }
    finally {
        OnCleanup ();
    }
}
----------------------------------------

  public void Execute (IServiceProvider serviceProvider) 
{
    try
    {
        OnExecute (serviceProvider);
    }
    catch (Exception ex)
    {
        OnError(ex);
        if (ex.InnerException != null)
        {
            throw ex;
        }
    }
    finally
    {
        OnCleanup();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
740
4
Gpt3D_Clone740_4.cs 1 20
Gpt3D_Clone740_4.cs 21 40
----------------------------------------

public void Execute (IServiceProvider serviceProvider) {
    try {
        OnExecute (serviceProvider);
    }
    catch (Exception ex) {
        bool rethrow = false;
        try {
            OnError (ex);
        }
        catch {
            rethrow = true;
        }
        if (rethrow) {
            throw;
        }
    }
    finally {
        OnCleanup ();
    }
}
----------------------------------------

  public void Execute (IServiceProvider serviceProvider) 
{
    try
    {
        OnExecute (serviceProvider);
    }
    catch (Exception ex)
    {
        if (ex is FormatException)
        {
            OnError(ex);
        }
    }
    finally
    {
        OnCleanup();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
740
5
Gpt3D_Clone740_5.cs 1 20
Gpt3D_Clone740_5.cs 21 39
----------------------------------------

public void Execute (IServiceProvider serviceProvider) {
    try {
        OnExecute (serviceProvider);
    }
    catch (Exception ex) {
        bool rethrow = false;
        try {
            OnError (ex);
        }
        catch {
            rethrow = true;
        }
        if (rethrow) {
            throw;
        }
    }
    finally {
        OnCleanup ();
    }
}
----------------------------------------

  public void Execute (IServiceProvider serviceProvider) 
{
    OnExecute (serviceProvider);
    try
    {
        OnError(ex);
    }
    catch
    {
        throw ex;
    }
    finally
    {
        OnCleanup();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
740
6
Gpt3D_Clone740_6.cs 1 20
Gpt3D_Clone740_6.cs 21 39
----------------------------------------

public void Execute (IServiceProvider serviceProvider) {
    try {
        OnExecute (serviceProvider);
    }
    catch (Exception ex) {
        bool rethrow = false;
        try {
            OnError (ex);
        }
        catch {
            rethrow = true;
        }
        if (rethrow) {
            throw;
        }
    }
    finally {
        OnCleanup ();
    }
}
----------------------------------------

  public void Execute (IServiceProvider serviceProvider) 
{
    try
    {
        OnExecute (serviceProvider);
    }
    catch (Exception ex)
    {
        OnError(ex);
        throw ex;
    }
    finally
    {
        OnCleanup();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
740
7
Gpt3D_Clone740_7.cs 1 20
Gpt3D_Clone740_7.cs 21 39
----------------------------------------

public void Execute (IServiceProvider serviceProvider) {
    try {
        OnExecute (serviceProvider);
    }
    catch (Exception ex) {
        bool rethrow = false;
        try {
            OnError (ex);
        }
        catch {
            rethrow = true;
        }
        if (rethrow) {
            throw;
        }
    }
    finally {
        OnCleanup ();
    }
}
----------------------------------------

  public void Execute (IServiceProvider serviceProvider) 
{
    OnExecute (serviceProvider);
    try
    {
        OnError(ex);
    }
    catch
    {
        throw;
    }
    finally
    {
        OnCleanup();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
744
1
Gpt3D_Clone744_1.cs 1 16
Gpt3D_Clone744_1.cs 17 37
----------------------------------------

private static string GetPropertyName < TPropertySource > (Expression < Func < TPropertySource, object > > expression) {
    var lambda = expression as LambdaExpression;
    MemberExpression memberExpression;
    if (lambda.Body is UnaryExpression) {
        var unaryExpression = lambda.Body as UnaryExpression;
        memberExpression = unaryExpression.Operand as MemberExpression;
    } else {
        memberExpression = lambda.Body as MemberExpression;
    }
    Debug.Assert (memberExpression != null, "Please provide a lambda expression like 'n => n.PropertyName'");
    if (memberExpression != null) {
        var propertyInfo = memberExpression.Member as PropertyInfo;
        return propertyInfo.Name;
    }
    return null;
}
----------------------------------------

 private static string GetPropertyName < TPropertySource > (Expression < Func < TPropertySource, object > > expression) {
	var expressionBody = expression.Body;
	var unaryExpression = expressionBody as UnaryExpression;
    MemberExpression memberExpression;
    if (unaryExpression != null) {
        memberExpression = unaryExpression.Operand as MemberExpression;
    } else {
        memberExpression = expressionBody as MemberExpression;
    }
    if (memberExpression != null) {
        var propertyInfo = memberExpression.Member as PropertyInfo;
        return propertyInfo.Name;
    }
    else
    {
        Debug.Assert(memberExpression != null, "Please provide a lambda expression like 'n => n.PropertyName'");
        return null;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
745
0
Gpt3D_Clone745_0.cs 1 20
Gpt3D_Clone745_0.cs 21 45
----------------------------------------

public T GetFromPool () {
    T item = null;
    do
        {
            lock (this)
            {
                if (this.pool.Count == 0) {
                    if (this.currentSize < this.maxSize) {
                        item = this.constructor ();
                        this.currentSize ++;
                    }
                } else {
                    item = this.pool.Dequeue ();
                }
            } if (null == item) {
                this.poolReleasedEvent.WaitOne ();
            }
        } while (null == item);
    return item;
}
----------------------------------------

 public T GetFromPool () {
    T item = null;
    bool acquiredPoolItem = false;
    do {
        lock (this) {
            if (this.pool.Count > 0) {
                acquiredPoolItem = true;
                item = this.pool.Dequeue();
            } else {
                if (this.currentSize < this.maxSize) {
                    item = this.constructor();
                    acquiredPoolItem = true;
                    this.currentSize++;
                }
            }
        } 
        if (!acquiredPoolItem)
            this.poolReleasedEvent.WaitOne ();
    } while (!acquiredPoolItem);
    return item;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
745
1
Gpt3D_Clone745_1.cs 1 20
Gpt3D_Clone745_1.cs 21 45
----------------------------------------

public T GetFromPool () {
    T item = null;
    do
        {
            lock (this)
            {
                if (this.pool.Count == 0) {
                    if (this.currentSize < this.maxSize) {
                        item = this.constructor ();
                        this.currentSize ++;
                    }
                } else {
                    item = this.pool.Dequeue ();
                }
            } if (null == item) {
                this.poolReleasedEvent.WaitOne ();
            }
        } while (null == item);
    return item;
}
----------------------------------------

 public T GetFromPool () {
    T item = null;
    bool foundItem = false;
    do {
        lock (this) {
            if (this.pool.Count > 0) {
                foundItem = true;
                item = this.pool.Dequeue();
            } else {
                if (this.currentSize < this.maxSize) {
                    item = this.constructor();
                    this.currentSize++;
                    foundItem = true;
                }
            }
        }
        if (!foundItem)
            this.poolReleasedEvent.WaitOne ();
    } while (!foundItem);
    return item;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
745
2
Gpt3D_Clone745_2.cs 1 20
Gpt3D_Clone745_2.cs 21 44
----------------------------------------

public T GetFromPool () {
    T item = null;
    do
        {
            lock (this)
            {
                if (this.pool.Count == 0) {
                    if (this.currentSize < this.maxSize) {
                        item = this.constructor ();
                        this.currentSize ++;
                    }
                } else {
                    item = this.pool.Dequeue ();
                }
            } if (null == item) {
                this.poolReleasedEvent.WaitOne ();
            }
        } while (null == item);
    return item;
}
----------------------------------------

 public T GetFromPool () {
    T item = null;
    int count = 0;
    while (item == null && count < 10) {
        lock (this) {
            if (this.pool.Count > 0) {
                item = this.pool.Dequeue();
            } else {
                if (this.currentSize < this.maxSize) {
                    item = this.constructor();
                    this.currentSize++;
                }
            }
        } 
        if (item == null) {
            this.poolReleasedEvent.WaitOne ();
            count++;
        }
    }
    return item;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
745
3
Gpt3D_Clone745_3.cs 1 20
Gpt3D_Clone745_3.cs 21 44
----------------------------------------

public T GetFromPool () {
    T item = null;
    do
        {
            lock (this)
            {
                if (this.pool.Count == 0) {
                    if (this.currentSize < this.maxSize) {
                        item = this.constructor ();
                        this.currentSize ++;
                    }
                } else {
                    item = this.pool.Dequeue ();
                }
            } if (null == item) {
                this.poolReleasedEvent.WaitOne ();
            }
        } while (null == item);
    return item;
}
----------------------------------------

 public T GetFromPool () {
    T item = null;
    int attempts = 0;
    while (item == null && attempts < 5) {
        lock (this) {
            if (this.pool.Count > 0) {
                item = this.pool.Dequeue();
            } else {
                if (this.currentSize < this.maxSize) {
                    item = this.constructor();
                    this.currentSize++;
                }
            }
        } 
        if (item == null) {
            this.poolReleasedEvent.WaitOne ();
            attempts++;
        }
    }
    return item;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
745
5
Gpt3D_Clone745_5.cs 1 20
Gpt3D_Clone745_5.cs 21 44
----------------------------------------

public T GetFromPool () {
    T item = null;
    do
        {
            lock (this)
            {
                if (this.pool.Count == 0) {
                    if (this.currentSize < this.maxSize) {
                        item = this.constructor ();
                        this.currentSize ++;
                    }
                } else {
                    item = this.pool.Dequeue ();
                }
            } if (null == item) {
                this.poolReleasedEvent.WaitOne ();
            }
        } while (null == item);
    return item;
}
----------------------------------------

  public T GetFromPool () {
    T item = null;
    while (true) {
          lock (this) {
              if (this.pool.Count > 0) {
                  item = this.pool.Dequeue();
                  break;
                  } else {
                      if (this.currentSize < this.maxSize) {
                           item = this.constructor();
                           this.currentSize++;
                           break;
                        }
                    }
              }
          if (item == null) {
             this.poolReleasedEvent.WaitOne();
            }
        }
    return item;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
745
6
Gpt3D_Clone745_6.cs 1 20
Gpt3D_Clone745_6.cs 21 43
----------------------------------------

public T GetFromPool () {
    T item = null;
    do
        {
            lock (this)
            {
                if (this.pool.Count == 0) {
                    if (this.currentSize < this.maxSize) {
                        item = this.constructor ();
                        this.currentSize ++;
                    }
                } else {
                    item = this.pool.Dequeue ();
                }
            } if (null == item) {
                this.poolReleasedEvent.WaitOne ();
            }
        } while (null == item);
    return item;
}
----------------------------------------

 public T GetFromPool () {
    T item = null;
    while (item == null) {
        lock (this) {
            if (this.pool.Count > 0) {
                item = this.pool.Dequeue();
            } else {
                if (this.currentSize < this.maxSize) {
                    item = this.constructor();
                    this.currentSize++;
                }
            }
        } 
        if (item == null) {
            this.poolReleasedEvent.Reset ();
            this.poolReleasedEvent.WaitOne ();
        }
    }
    return item;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
745
7
Gpt3D_Clone745_7.cs 1 20
Gpt3D_Clone745_7.cs 21 40
----------------------------------------

public T GetFromPool () {
    T item = null;
    do
        {
            lock (this)
            {
                if (this.pool.Count == 0) {
                    if (this.currentSize < this.maxSize) {
                        item = this.constructor ();
                        this.currentSize ++;
                    }
                } else {
                    item = this.pool.Dequeue ();
                }
            } if (null == item) {
                this.poolReleasedEvent.WaitOne ();
            }
        } while (null == item);
    return item;
}
----------------------------------------

 public T GetFromPool () {
    T item = null;
    while (item == null) {
        lock (this) {
            if (this.pool.Count > 0) {
                item = this.pool.Dequeue();
            } else {
                if (this.currentSize < this.maxSize) {
                    item = this.constructor();
                    this.currentSize++;
                } else {
                    this.poolReleasedEvent.WaitOne();
                }
            }
        } 
    }
    return item;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
745
8
Gpt3D_Clone745_8.cs 1 20
Gpt3D_Clone745_8.cs 21 41
----------------------------------------

public T GetFromPool () {
    T item = null;
    do
        {
            lock (this)
            {
                if (this.pool.Count == 0) {
                    if (this.currentSize < this.maxSize) {
                        item = this.constructor ();
                        this.currentSize ++;
                    }
                } else {
                    item = this.pool.Dequeue ();
                }
            } if (null == item) {
                this.poolReleasedEvent.WaitOne ();
            }
        } while (null == item);
    return item;
}
----------------------------------------

 public T GetFromPool () {
    T item = null;
    while (item == null) {
          lock (this) {
              if (this.pool.Count > 0) {
                  item = this.pool.Dequeue();
                  } else {
                      if (this.currentSize < this.maxSize) {
                           item = this.constructor();
                           this.currentSize++;
                        }
                    }
              }
          if (item == null) {
             this.poolReleasedEvent.WaitOne();
            }
        }
    return item;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
746
8
Gpt3D_Clone746_8.cs 1 20
Gpt3D_Clone746_8.cs 21 56
----------------------------------------

public static int CountOccurrences (string original, string substring) {
    if (string.IsNullOrEmpty (substring))
        return 0;
    if (substring.Length == 1)
        return CountOccurrences (original, substring [0]);
    if (string.IsNullOrEmpty (original) || substring.Length > original.Length)
        return 0;
    int substringCount = 0;
    for (int charIndex = 0; charIndex < original.Length; charIndex ++) {
        for (int subCharIndex = 0, secondaryCharIndex = charIndex; subCharIndex < substring.Length && secondaryCharIndex < original.Length; subCharIndex ++, secondaryCharIndex ++) {
            if (substring [subCharIndex] != original [secondaryCharIndex])
                goto continueOuter;
        }
        if (charIndex + substring.Length > original.Length)
            break;
        charIndex += substring.Length - 1;
        substringCount ++;
        continueOuter :;}
    return substringCount;
}
----------------------------------------

	public static int CountOccurrences(string original, string substring) 
{
    if (string.IsNullOrEmpty(substring))
        return 0;
    if (substring.Length == 1)
        return CountOccurrences(original, substring[0]);
    if (string.IsNullOrEmpty(original) || substring.Length > original.Length)
        return 0;
    int substringCount = 0;
    int charIndex = 0;
    int secondaryCharIndex = 0;
    while (charIndex < original.Length)
    {
        secondaryCharIndex = charIndex;
        int nextSecondaryCharIndex = charIndex + substring.Length;
        if (nextSecondaryCharIndex > original.Length)
            break;
        for (int subCharIndex = 0; subCharIndex < substring.Length; subCharIndex++, secondaryCharIndex++)
        {
            if (substring[subCharIndex] != original[secondaryCharIndex])
                goto continueOuter;
        }
        charIndex += substring.Length;
        substringCount++;
        continueOuter:;
    }
    return substringCount;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
74
0
Gpt3D_Clone74_0.cs 1 9
Gpt3D_Clone74_0.cs 10 35
----------------------------------------

public static HtmlNode TruncateInnerText (HtmlNode node, int length) {
    if (node == null)
        throw new ArgumentNullException ("node");
    if (node.InnerText.Length < length)
        return node;
    HtmlNode clone = node.CloneNode (false);
    TruncateInnerText (node, clone, clone, length);
    return clone;
}
----------------------------------------

 public static HtmlNode TruncateInnerText(HtmlNode node, int length) 
{ 
    if (node == null) 
        throw new ArgumentNullException("node"); 
    HtmlNode clone = node.CloneNode(false); 
    int currentLength = node.InnerText.Length; 
    if (currentLength < length) 
        return node; 
    TrimInnerText(node, clone, clone, length); 
    return clone; 
}   
 public static HtmlNode TruncateInnerText (HtmlNode node, int length) 
{ 
    if (node == null) 
        throw new ArgumentNullException ("node"); 
    if (node.InnerText.Length < length) 
        return node; 
    HtmlNode clone = node.CloneNode (false); 
    clipInnerText(node, clone, clone, length); 
    return clone; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
752
0
Gpt3D_Clone752_0.cs 1 12
Gpt3D_Clone752_0.cs 13 24
----------------------------------------

private void DragDropTarget_DragEnter (object sender, Microsoft.Windows.DragEventArgs e) {
    var sw = sender as DataGridDragDropTarget;
    if (sw == null) {
        return;
    }
    if (GetAssignmentCondition (e)) {
        e.Effects = DragDropEffects.Link;
    } else {
        e.Effects = DragDropEffects.None;
    }
    e.Handled = true;
}
----------------------------------------

 private void DragDropTarget_DragEnter (object sender, Microsoft.Windows.DragEventArgs e) {
    var sw = sender as DataGridDragDropTarget;
    if (sw == null) 
        return;
    if (GetAssignmentCondition (e))
        e.Effects = DragDropEffects.Link;
    else
        e.Effects = DragDropEffects.None;
    e.Handled = true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
752
1
Gpt3D_Clone752_1.cs 1 12
Gpt3D_Clone752_1.cs 13 24
----------------------------------------

private void DragDropTarget_DragEnter (object sender, Microsoft.Windows.DragEventArgs e) {
    var sw = sender as DataGridDragDropTarget;
    if (sw == null) {
        return;
    }
    if (GetAssignmentCondition (e)) {
        e.Effects = DragDropEffects.Link;
    } else {
        e.Effects = DragDropEffects.None;
    }
    e.Handled = true;
}
----------------------------------------

 private void DragDropTarget_DragEnter (object sender, Microsoft.Windows.DragEventArgs e) {
    var sw = sender as DataGridDragDropTarget;
    if (sw != null) {
        if (GetAssignmentCondition(e))
            e.Effects = DragDropEffects.Link;
        else
            e.Effects = DragDropEffects.None;
    } 
    e.Handled = true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
752
2
Gpt3D_Clone752_2.cs 1 12
Gpt3D_Clone752_2.cs 13 24
----------------------------------------

private void DragDropTarget_DragEnter (object sender, Microsoft.Windows.DragEventArgs e) {
    var sw = sender as DataGridDragDropTarget;
    if (sw == null) {
        return;
    }
    if (GetAssignmentCondition (e)) {
        e.Effects = DragDropEffects.Link;
    } else {
        e.Effects = DragDropEffects.None;
    }
    e.Handled = true;
}
----------------------------------------

  private void DragDropTarget_DragEnter (object sender, Microsoft.Windows.DragEventArgs e) {
    var sw = sender as DataGridDragDropTarget;
    if (sw != null) {
        if (GetAssignmentCondition (e))
            e.Effects = DragDropEffects.Link;
        else
            e.Effects = DragDropEffects.None;
    }    
    e.Handled = true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
752
3
Gpt3D_Clone752_3.cs 1 12
Gpt3D_Clone752_3.cs 13 33
----------------------------------------

private void DragDropTarget_DragEnter (object sender, Microsoft.Windows.DragEventArgs e) {
    var sw = sender as DataGridDragDropTarget;
    if (sw == null) {
        return;
    }
    if (GetAssignmentCondition (e)) {
        e.Effects = DragDropEffects.Link;
    } else {
        e.Effects = DragDropEffects.None;
    }
    e.Handled = true;
}
----------------------------------------

 private void DragDropTarget_DragEnter (object send, Microsoft.Windows.DragEventArgs e) 
    {
        e.Effects = sender is DataGridDragDropTarget sw && GetAssignmentCondition(e)
            ? DragDropEffects.Link 
            : DragDropEffects.None;  
        e.Handled = true;
    }
 
private void DragDropTarget_DragEnter(object sender, Microsoft.Windows.DragEventArgs e) {
    if (sender is DataGridDragDropTarget sw) 
    {
        if (GetAssignmentCondition(e)) {
            e.Effects = DragDropEffects.Link;
        } else {
            e.Effects = DragDropEffects.None;
        } 
    }
    e.Handled = true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
754
0
Gpt3D_Clone754_0.cs 1 16
Gpt3D_Clone754_0.cs 17 192
----------------------------------------

private string GenerateSequence (int num) {
    string str = "";
    char achar;
    int mod;
    while (true) {
        mod = (num % 26) + 65;
        num = (int) (num / 26);
        achar = (char) mod;
        str = achar + str;
        if (num > 0)
            num --;
        else if (num == 0)
            break;
    }
    return str;
}
----------------------------------------

   private string GenerateSequence(int num)
     {
         StringBuilder str = new StringBuilder(string.Empty);
         int mod;
         while (true)
         {
             mod = (num % 26) + 65;
             num = (int)(num / 26);
             str.Insert(0, Convert.ToChar(mod));
             if (num > 0)
                 num--;
             else if (num == 0)
                 break;
         }
         return str.ToString();
     }
  private string GenerateSequence(int num)
    {
        List<char> charList = new List<char>();
        while (true)
        {
            int mod = (num % 26) + 65;
            num = (int) (num / 26);
            charList.Insert(0, (char) mod);
            if (num > 0)
                num--;
            else if (num == 0)
                break;
        }
        return string.Join("", charList);
    }
  private string GenerateSequence(int num)
    {
        string str = "";
        char achar;
        int mod;
        while (true)
        {
            mod = (num % 26) + 65;
            num = (int)(num / 26);
            achar = Convert.ToChar(mod);
            str = achar + str;
            if (num > 0)
                num--;
            else if (num == 0)
                break;
        }
        return str;
    }
  private string GenerateSequence(int num)
    {
        StringBuilder sb = new StringBuilder();
        int mod;
        while (true)
        {
            mod = (num % 26) + 65;
            num = (int)(num / 26);
            sb.Insert(0, (char) mod);
            if (num > 0)
                num--;
            else if (num == 0)
                break;
        }
        return sb.ToString();
    }
  private string GenerateSequence(int num)
    {
        StringBuilder sb = new StringBuilder();
        int mod;
        do
        {
            mod = (num % 26) + 65;
            num = (int)(num / 26);
            sb.Insert(0, (char) mod);
            if (num > 0)
                num--;
        } while (num != 0);
        return sb.ToString();
    }
  private string GenerateSequence(int num)
    {
        string str = "";
        int mod;
        while (true)
        {
            mod = (num % 26) + 65;
            num = (int)(num / 26);
            str = Convert.ToChar(mod) + str;
            if (num > 0)
                num--;
            else if (num == 0)
                break;
        }
        return str;
    }
  private string GenerateSequence(int num)
    {
        Stack<char> charStack = new Stack<char>();
        int mod;
        while (true)
        {
            mod = (num % 26) + 65;
            num = (int)(num / 26);
            charStack.Push(Convert.ToChar(mod));
            if (num > 0)
                num--;
            else if (num == 0)
                break;
        }
        return new string(charStack.ToArray());
    }
  private string GenerateSequence(int num)
    {
        Stack<char> charStack = new Stack<char>();
        int mod;
        do
        {
            mod = (num % 26) + 65;
            num = (int)(num / 26);
            charStack.Push(Convert.ToChar(mod));
            if (num > 0)
                num--;
        } while (num != 0);
        return new string(charStack.ToArray());
    }
 private string GenerateSequence(int num)
 {
     List<char> charList = new List<char>();
     int mod;
    do
    {
        mod = (num % 26) + 65;
        num = (int) (num / 26);
        charList.Insert(0, Convert.ToChar(mod));
        if (num > 0)
            num--;
    } while (num != 0);
    return string.Join("", charList);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
754
1
Gpt3D_Clone754_1.cs 1 16
Gpt3D_Clone754_1.cs 17 192
----------------------------------------

private string GenerateSequence (int num) {
    string str = "";
    char achar;
    int mod;
    while (true) {
        mod = (num % 26) + 65;
        num = (int) (num / 26);
        achar = (char) mod;
        str = achar + str;
        if (num > 0)
            num --;
        else if (num == 0)
            break;
    }
    return str;
}
----------------------------------------

   private string GenerateSequence(int num)
     {
         StringBuilder str = new StringBuilder(string.Empty);
         int mod;
         while (true)
         {
             mod = (num % 26) + 65;
             num = (int)(num / 26);
             str.Insert(0, Convert.ToChar(mod));
             if (num > 0)
                 num--;
             else if (num == 0)
                 break;
         }
         return str.ToString();
     }
  private string GenerateSequence(int num)
    {
        List<char> charList = new List<char>();
        while (true)
        {
            int mod = (num % 26) + 65;
            num = (int) (num / 26);
            charList.Insert(0, (char) mod);
            if (num > 0)
                num--;
            else if (num == 0)
                break;
        }
        return string.Join("", charList);
    }
  private string GenerateSequence(int num)
    {
        string str = "";
        char achar;
        int mod;
        while (true)
        {
            mod = (num % 26) + 65;
            num = (int)(num / 26);
            achar = Convert.ToChar(mod);
            str = achar + str;
            if (num > 0)
                num--;
            else if (num == 0)
                break;
        }
        return str;
    }
  private string GenerateSequence(int num)
    {
        StringBuilder sb = new StringBuilder();
        int mod;
        while (true)
        {
            mod = (num % 26) + 65;
            num = (int)(num / 26);
            sb.Insert(0, (char) mod);
            if (num > 0)
                num--;
            else if (num == 0)
                break;
        }
        return sb.ToString();
    }
  private string GenerateSequence(int num)
    {
        StringBuilder sb = new StringBuilder();
        int mod;
        do
        {
            mod = (num % 26) + 65;
            num = (int)(num / 26);
            sb.Insert(0, (char) mod);
            if (num > 0)
                num--;
        } while (num != 0);
        return sb.ToString();
    }
  private string GenerateSequence(int num)
    {
        string str = "";
        int mod;
        while (true)
        {
            mod = (num % 26) + 65;
            num = (int)(num / 26);
            str = Convert.ToChar(mod) + str;
            if (num > 0)
                num--;
            else if (num == 0)
                break;
        }
        return str;
    }
  private string GenerateSequence(int num)
    {
        Stack<char> charStack = new Stack<char>();
        int mod;
        while (true)
        {
            mod = (num % 26) + 65;
            num = (int)(num / 26);
            charStack.Push(Convert.ToChar(mod));
            if (num > 0)
                num--;
            else if (num == 0)
                break;
        }
        return new string(charStack.ToArray());
    }
  private string GenerateSequence(int num)
    {
        Stack<char> charStack = new Stack<char>();
        int mod;
        do
        {
            mod = (num % 26) + 65;
            num = (int)(num / 26);
            charStack.Push(Convert.ToChar(mod));
            if (num > 0)
                num--;
        } while (num != 0);
        return new string(charStack.ToArray());
    }
 private string GenerateSequence(int num)
 {
     List<char> charList = new List<char>();
     int mod;
    do
    {
        mod = (num % 26) + 65;
        num = (int) (num / 26);
        charList.Insert(0, Convert.ToChar(mod));
        if (num > 0)
            num--;
    } while (num != 0);
    return string.Join("", charList);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
754
3
Gpt3D_Clone754_3.cs 1 16
Gpt3D_Clone754_3.cs 17 192
----------------------------------------

private string GenerateSequence (int num) {
    string str = "";
    char achar;
    int mod;
    while (true) {
        mod = (num % 26) + 65;
        num = (int) (num / 26);
        achar = (char) mod;
        str = achar + str;
        if (num > 0)
            num --;
        else if (num == 0)
            break;
    }
    return str;
}
----------------------------------------

   private string GenerateSequence(int num)
     {
         StringBuilder str = new StringBuilder(string.Empty);
         int mod;
         while (true)
         {
             mod = (num % 26) + 65;
             num = (int)(num / 26);
             str.Insert(0, Convert.ToChar(mod));
             if (num > 0)
                 num--;
             else if (num == 0)
                 break;
         }
         return str.ToString();
     }
  private string GenerateSequence(int num)
    {
        List<char> charList = new List<char>();
        while (true)
        {
            int mod = (num % 26) + 65;
            num = (int) (num / 26);
            charList.Insert(0, (char) mod);
            if (num > 0)
                num--;
            else if (num == 0)
                break;
        }
        return string.Join("", charList);
    }
  private string GenerateSequence(int num)
    {
        string str = "";
        char achar;
        int mod;
        while (true)
        {
            mod = (num % 26) + 65;
            num = (int)(num / 26);
            achar = Convert.ToChar(mod);
            str = achar + str;
            if (num > 0)
                num--;
            else if (num == 0)
                break;
        }
        return str;
    }
  private string GenerateSequence(int num)
    {
        StringBuilder sb = new StringBuilder();
        int mod;
        while (true)
        {
            mod = (num % 26) + 65;
            num = (int)(num / 26);
            sb.Insert(0, (char) mod);
            if (num > 0)
                num--;
            else if (num == 0)
                break;
        }
        return sb.ToString();
    }
  private string GenerateSequence(int num)
    {
        StringBuilder sb = new StringBuilder();
        int mod;
        do
        {
            mod = (num % 26) + 65;
            num = (int)(num / 26);
            sb.Insert(0, (char) mod);
            if (num > 0)
                num--;
        } while (num != 0);
        return sb.ToString();
    }
  private string GenerateSequence(int num)
    {
        string str = "";
        int mod;
        while (true)
        {
            mod = (num % 26) + 65;
            num = (int)(num / 26);
            str = Convert.ToChar(mod) + str;
            if (num > 0)
                num--;
            else if (num == 0)
                break;
        }
        return str;
    }
  private string GenerateSequence(int num)
    {
        Stack<char> charStack = new Stack<char>();
        int mod;
        while (true)
        {
            mod = (num % 26) + 65;
            num = (int)(num / 26);
            charStack.Push(Convert.ToChar(mod));
            if (num > 0)
                num--;
            else if (num == 0)
                break;
        }
        return new string(charStack.ToArray());
    }
  private string GenerateSequence(int num)
    {
        Stack<char> charStack = new Stack<char>();
        int mod;
        do
        {
            mod = (num % 26) + 65;
            num = (int)(num / 26);
            charStack.Push(Convert.ToChar(mod));
            if (num > 0)
                num--;
        } while (num != 0);
        return new string(charStack.ToArray());
    }
 private string GenerateSequence(int num)
 {
     List<char> charList = new List<char>();
     int mod;
    do
    {
        mod = (num % 26) + 65;
        num = (int) (num / 26);
        charList.Insert(0, Convert.ToChar(mod));
        if (num > 0)
            num--;
    } while (num != 0);
    return string.Join("", charList);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
756
1
Gpt3D_Clone756_1.cs 1 12
Gpt3D_Clone756_1.cs 13 46
----------------------------------------

public IDisposable Enter (string key) {
    Locker locker;
    lock (this.globalLock)
    {
        if (! this.locks.TryGetValue (key, out locker)) {
            this.locks [key] = locker = new Locker (this, key);
        }
        locker.WaitCount ++;
    } locker.Enter ();
    locker.WaitCount --;
    return locker;
}
----------------------------------------

 public IDisposable Enter (string key) {
        Locker locker = null;
        lock (this.globalLock)
        {
            if (!this.locks.ContainsKey(key))
            {
                locker = new Locker(this, key);
                locker.WaitCount++; 
                this.locks.Add(key, locker);
            }
            else
            {
                locker = this.locks[key];
            }
        } locker.Enter();
        locker.WaitCount--;
        return locker;
    }
 public IDisposable Enter (string key) {
    Locker locker = null;
    lock (this.globalLock)
    {
        if (!this.locks.TryGetValue (key, out locker)) {
            locker = new Locker (this, key);
            locker.WaitCount++;
            this.locks[key] = locker;
        }
    } locker.Enter ();
    locker.WaitCount--;
    return locker;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
756
2
Gpt3D_Clone756_2.cs 1 12
Gpt3D_Clone756_2.cs 13 31
----------------------------------------

public IDisposable Enter (string key) {
    Locker locker;
    lock (this.globalLock)
    {
        if (! this.locks.TryGetValue (key, out locker)) {
            this.locks [key] = locker = new Locker (this, key);
        }
        locker.WaitCount ++;
    } locker.Enter ();
    locker.WaitCount --;
    return locker;
}
----------------------------------------

  public IDisposable Enter (string key) {
    Locker locker = null;
    lock (this.globalLock){
        if (!this.locks.ContainsKey(key)) {
            locker = new locker(this, key);
            this.locks.Add(key, locker); 
            locker.WaitCount++;
        }
        else
        {
            locker = this.locks[key];
        }
    }
    locker.Enter();
    locker.WaitCount--;
    return locker;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
756
3
Gpt3D_Clone756_3.cs 1 12
Gpt3D_Clone756_3.cs 13 34
----------------------------------------

public IDisposable Enter (string key) {
    Locker locker;
    lock (this.globalLock)
    {
        if (! this.locks.TryGetValue (key, out locker)) {
            this.locks [key] = locker = new Locker (this, key);
        }
        locker.WaitCount ++;
    } locker.Enter ();
    locker.WaitCount --;
    return locker;
}
----------------------------------------

 public IDisposable Enter (string key)
{
    Locker locker;
    lock (this.globalLock)
    {
        if (this.locks.ContainsKey(key))
        {
            locker = this.locks[key];
            locker.WaitCount++;
        }
        else
        {
            locker = new Locker (this, key);
            this.locks.Add(key, locker);
        }
    }
    locker.Enter();
    locker.WaitCount--;
    return locker;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
756
4
Gpt3D_Clone756_4.cs 1 12
Gpt3D_Clone756_4.cs 13 46
----------------------------------------

public IDisposable Enter (string key) {
    Locker locker;
    lock (this.globalLock)
    {
        if (! this.locks.TryGetValue (key, out locker)) {
            this.locks [key] = locker = new Locker (this, key);
        }
        locker.WaitCount ++;
    } locker.Enter ();
    locker.WaitCount --;
    return locker;
}
----------------------------------------

 public IDisposable Enter (string key) {
        Locker locker = null;
        lock (this.globalLock)
        {
            if (!this.locks.ContainsKey(key))
            {
                locker = new Locker(this, key);
                locker.WaitCount++; 
                this.locks.Add(key, locker);
            }
            else
            {
                locker = this.locks[key];
            }
        } locker.Enter();
        locker.WaitCount--;
        return locker;
    }
 public IDisposable Enter (string key) {
    Locker locker = null;
    lock (this.globalLock)
    {
        if (!this.locks.TryGetValue (key, out locker)) {
            locker = new Locker (this, key);
            locker.WaitCount++;
            this.locks[key] = locker;
        }
    } locker.Enter ();
    locker.WaitCount--;
    return locker;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
756
6
Gpt3D_Clone756_6.cs 1 12
Gpt3D_Clone756_6.cs 13 32
----------------------------------------

public IDisposable Enter (string key) {
    Locker locker;
    lock (this.globalLock)
    {
        if (! this.locks.TryGetValue (key, out locker)) {
            this.locks [key] = locker = new Locker (this, key);
        }
        locker.WaitCount ++;
    } locker.Enter ();
    locker.WaitCount --;
    return locker;
}
----------------------------------------

  public IDisposable Enter (string key)
{
    lock (this.globalLock)
    {
        if (this.locks.TryGetValue(key, out Locker locker))
        {
            locker.WaitCount++;
        }
        else
        {
            locker = new Locker(this, key);
            this.locks.Add(key, locker);
        }
    }
    locker.Enter();
    locker.WaitCount--;
    return locker;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
757
2
Gpt3D_Clone757_2.cs 1 15
Gpt3D_Clone757_2.cs 16 42
----------------------------------------

public void ProcessRequest (HttpContext context) {
    ClearResponse (context);
    switch (context.Request.HttpMethod.ToUpper ()) {
        case "OPTIONS" :
            SetAllowCrossSiteRequestHeaders (context);
            SetAllowCrossSiteRequestOrigin (context);
            context.Response.End ();
            break;
        default :
            context.Response.Headers.Add ("Allow", "OPTIONS");
            context.Response.StatusCode = 405;
            break;
    }
    context.ApplicationInstance.CompleteRequest ();
}
----------------------------------------

 public void ProcessRequest (HttpContext context) {
    ClearResponse (context);
    switch (context.Request.HttpMethod.ToUpper ()) {
        case "HEAD": 
            SetAllowCrossSiteRequestHeaders (context);
            SetAllowCrossSiteRequestOrigin (context);
            context.Response.End ();
            break;
        case "CONNECT": 
            SetAllowCrossSiteRequestHeaders (context);
            SetAllowCrossSiteRequestOrigin (context);
            context.Response.End ();
            break;
        case "OPTIONS" :
            SetAllowCrossSiteRequestHeaders (context);
            SetAllowCrossSiteRequestOrigin (context);
            context.Response.End ();
            break;
        default :
            context.Response.Headers.Add ("Allow", "HEAD, CONNECT, OPTIONS");
            context.Response.StatusCode = 405;
            break;
    }
    context.ApplicationInstance.CompleteRequest ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
757
3
Gpt3D_Clone757_3.cs 1 15
Gpt3D_Clone757_3.cs 16 42
----------------------------------------

public void ProcessRequest (HttpContext context) {
    ClearResponse (context);
    switch (context.Request.HttpMethod.ToUpper ()) {
        case "OPTIONS" :
            SetAllowCrossSiteRequestHeaders (context);
            SetAllowCrossSiteRequestOrigin (context);
            context.Response.End ();
            break;
        default :
            context.Response.Headers.Add ("Allow", "OPTIONS");
            context.Response.StatusCode = 405;
            break;
    }
    context.ApplicationInstance.CompleteRequest ();
}
----------------------------------------

 public void ProcessRequest (HttpContext context) {
    ClearResponse (context);
    switch (context.Request.HttpMethod.ToUpper ()) {
        case "GET": 
            SetAllowCrossSiteRequestHeaders (context);
            SetAllowCrossSiteRequestOrigin (context);
            context.Response.End ();
            break;
        case "POST": 
            SetAllowCrossSiteRequestHeaders (context);
            SetAllowCrossSiteRequestOrigin (context);
            context.Response.End ();
            break;
        case "OPTIONS" :
            SetAllowCrossSiteRequestHeaders (context);
            SetAllowCrossSiteRequestOrigin (context);
            context.Response.End ();
            break;
        default :
            context.Response.Headers.Add ("Allow", "GET, POST, OPTIONS");
            context.Response.StatusCode = 405;
            break;
    }
    context.ApplicationInstance.CompleteRequest ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
757
4
Gpt3D_Clone757_4.cs 1 15
Gpt3D_Clone757_4.cs 16 37
----------------------------------------

public void ProcessRequest (HttpContext context) {
    ClearResponse (context);
    switch (context.Request.HttpMethod.ToUpper ()) {
        case "OPTIONS" :
            SetAllowCrossSiteRequestHeaders (context);
            SetAllowCrossSiteRequestOrigin (context);
            context.Response.End ();
            break;
        default :
            context.Response.Headers.Add ("Allow", "OPTIONS");
            context.Response.StatusCode = 405;
            break;
    }
    context.ApplicationInstance.CompleteRequest ();
}
----------------------------------------

 public void ProcessRequest (HttpContext context) {
    ClearResponse (context);
    switch (context.Request.HttpMethod.ToUpper ()) {
        case "GET": 
            SetAllowCrossSiteRequestHeaders (context);
            SetAllowCrossSiteRequestOrigin (context);
            context.Response.End ();
            break;
        case "OPTIONS" :
            SetAllowCrossSiteRequestHeaders (context);
            SetAllowCrossSiteRequestOrigin (context);
            context.Response.End ();
            break;
        default :
            context.Response.Headers.Add ("Allow", "GET, OPTIONS");
            context.Response.StatusCode = 405;
            break;
    }
    context.ApplicationInstance.CompleteRequest ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
757
5
Gpt3D_Clone757_5.cs 1 15
Gpt3D_Clone757_5.cs 16 37
----------------------------------------

public void ProcessRequest (HttpContext context) {
    ClearResponse (context);
    switch (context.Request.HttpMethod.ToUpper ()) {
        case "OPTIONS" :
            SetAllowCrossSiteRequestHeaders (context);
            SetAllowCrossSiteRequestOrigin (context);
            context.Response.End ();
            break;
        default :
            context.Response.Headers.Add ("Allow", "OPTIONS");
            context.Response.StatusCode = 405;
            break;
    }
    context.ApplicationInstance.CompleteRequest ();
}
----------------------------------------

 public void ProcessRequest (HttpContext context) {
    ClearResponse (context);
    switch (context.Request.HttpMethod.ToUpper ()) {
        case "PUT": 
            SetAllowCrossSiteRequestHeaders (context);
            SetAllowCrossSiteRequestOrigin (context);
            context.Response.End ();
            break;
        case "OPTIONS" :
            SetAllowCrossSiteRequestHeaders (context);
            SetAllowCrossSiteRequestOrigin (context);
            context.Response.End ();
            break;
        default :
            context.Response.Headers.Add ("Allow", "PUT, OPTIONS");
            context.Response.StatusCode = 405;
            break;
    }
    context.ApplicationInstance.CompleteRequest ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
757
6
Gpt3D_Clone757_6.cs 1 15
Gpt3D_Clone757_6.cs 16 37
----------------------------------------

public void ProcessRequest (HttpContext context) {
    ClearResponse (context);
    switch (context.Request.HttpMethod.ToUpper ()) {
        case "OPTIONS" :
            SetAllowCrossSiteRequestHeaders (context);
            SetAllowCrossSiteRequestOrigin (context);
            context.Response.End ();
            break;
        default :
            context.Response.Headers.Add ("Allow", "OPTIONS");
            context.Response.StatusCode = 405;
            break;
    }
    context.ApplicationInstance.CompleteRequest ();
}
----------------------------------------

 public void ProcessRequest (HttpContext context) {
    ClearResponse (context);
    switch (context.Request.HttpMethod.ToUpper ()) {
        case "PATCH": 
            SetAllowCrossSiteRequestHeaders (context);
            SetAllowCrossSiteRequestOrigin (context);
            context.Response.End ();
            break;
        case "OPTIONS" :
            SetAllowCrossSiteRequestHeaders (context);
            SetAllowCrossSiteRequestOrigin (context);
            context.Response.End ();
            break;
        default :
            context.Response.Headers.Add ("Allow", "PATCH, OPTIONS");
            context.Response.StatusCode = 405;
            break;
    }
    context.ApplicationInstance.CompleteRequest ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
757
7
Gpt3D_Clone757_7.cs 1 15
Gpt3D_Clone757_7.cs 16 37
----------------------------------------

public void ProcessRequest (HttpContext context) {
    ClearResponse (context);
    switch (context.Request.HttpMethod.ToUpper ()) {
        case "OPTIONS" :
            SetAllowCrossSiteRequestHeaders (context);
            SetAllowCrossSiteRequestOrigin (context);
            context.Response.End ();
            break;
        default :
            context.Response.Headers.Add ("Allow", "OPTIONS");
            context.Response.StatusCode = 405;
            break;
    }
    context.ApplicationInstance.CompleteRequest ();
}
----------------------------------------

 public void ProcessRequest (HttpContext context) {
    ClearResponse (context);
    switch (context.Request.HttpMethod.ToUpper ()) {
        case "DELETE": 
            SetAllowCrossSiteRequestHeaders (context);
            SetAllowCrossSiteRequestOrigin (context);
            context.Response.End ();
            break;
        case "OPTIONS" :
            SetAllowCrossSiteRequestHeaders (context);
            SetAllowCrossSiteRequestOrigin (context);
            context.Response.End ();
            break;
        default :
            context.Response.Headers.Add ("Allow", "DELETE, OPTIONS");
            context.Response.StatusCode = 405;
            break;
    }
    context.ApplicationInstance.CompleteRequest ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
757
8
Gpt3D_Clone757_8.cs 1 15
Gpt3D_Clone757_8.cs 16 37
----------------------------------------

public void ProcessRequest (HttpContext context) {
    ClearResponse (context);
    switch (context.Request.HttpMethod.ToUpper ()) {
        case "OPTIONS" :
            SetAllowCrossSiteRequestHeaders (context);
            SetAllowCrossSiteRequestOrigin (context);
            context.Response.End ();
            break;
        default :
            context.Response.Headers.Add ("Allow", "OPTIONS");
            context.Response.StatusCode = 405;
            break;
    }
    context.ApplicationInstance.CompleteRequest ();
}
----------------------------------------

 public void ProcessRequest (HttpContext context) {
    ClearResponse (context);
    switch (context.Request.HttpMethod.ToUpper ()) {
        case "TRACE": 
            SetAllowCrossSiteRequestHeaders (context);
            SetAllowCrossSiteRequestOrigin (context);
            context.Response.End ();
            break;
        case "OPTIONS" :
            SetAllowCrossSiteRequestHeaders (context);
            SetAllowCrossSiteRequestOrigin (context);
            context.Response.End ();
            break;
        default :
            context.Response.Headers.Add ("Allow", "TRACE, OPTIONS");
            context.Response.StatusCode = 405;
            break;
    }
    context.ApplicationInstance.CompleteRequest ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
757
9
Gpt3D_Clone757_9.cs 1 15
Gpt3D_Clone757_9.cs 16 37
----------------------------------------

public void ProcessRequest (HttpContext context) {
    ClearResponse (context);
    switch (context.Request.HttpMethod.ToUpper ()) {
        case "OPTIONS" :
            SetAllowCrossSiteRequestHeaders (context);
            SetAllowCrossSiteRequestOrigin (context);
            context.Response.End ();
            break;
        default :
            context.Response.Headers.Add ("Allow", "OPTIONS");
            context.Response.StatusCode = 405;
            break;
    }
    context.ApplicationInstance.CompleteRequest ();
}
----------------------------------------

 public void ProcessRequest (HttpContext context) {
    ClearResponse (context);
    switch (context.Request.HttpMethod.ToUpper ()) {
        case "POST": 
            SetAllowCrossSiteRequestHeaders (context);
            SetAllowCrossSiteRequestOrigin (context);
            context.Response.End ();
            break;
        case "OPTIONS" :
            SetAllowCrossSiteRequestHeaders (context);
            SetAllowCrossSiteRequestOrigin (context);
            context.Response.End ();
            break;
        default :
            context.Response.Headers.Add ("Allow", "POST, OPTIONS");
            context.Response.StatusCode = 405;
            break;
    }
    context.ApplicationInstance.CompleteRequest ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
75
0
Gpt3D_Clone75_0.cs 1 21
Gpt3D_Clone75_0.cs 22 47
----------------------------------------

public static string ReplaceHashtagsWithInt (string input, int integer) {
    Regex regex = new Regex ("#+");
    StringBuilder output = new StringBuilder (input);
    int allig = 0;
    for (Match match = regex.Match (input); match.Success; match = match.NextMatch ()) {
        string num = integer.ToString ();
        if (num.Length <= match.Length)
            for (int i = 0; i < match.Length; i ++) {
                if (i < match.Length - num.Length)
                    output [match.Index + i + allig] = '0';
                else
                    output [match.Index + i + allig] = num [i - match.Length + num.Length];
            }
        else {
            output.Remove (match.Index + allig, match.Length);
            output.Insert (match.Index + allig, num);
            allig += num.Length - match.Length;
        }
    }
    return output.ToString ();
}
----------------------------------------

 public static string ReplaceHashtagsWithInt (string input, int integer) { 
    Regex regex = new Regex ("#+"); 
    StringBuilder output = new StringBuilder (input); 
    int position = 0; 
    foreach (Match match in regex.Matches(input)) 
    { 
        string text = integer.ToString(); 
        if (text.Length >= match.Length) 
        { 
            for (int i = 0; i < match.Length; i++) 
            { 
                output[match.Index + i + position] = text[i]; 
            } 
        } 
        else 
        { 
            output.Remove(match.Index + position, match.Length); 
            output.Insert(match.Index + position, text); 
            position += text.Length - match.Length; 
        }  
           
    } 
    return output.ToString(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
75
1
Gpt3D_Clone75_1.cs 1 21
Gpt3D_Clone75_1.cs 22 46
----------------------------------------

public static string ReplaceHashtagsWithInt (string input, int integer) {
    Regex regex = new Regex ("#+");
    StringBuilder output = new StringBuilder (input);
    int allig = 0;
    for (Match match = regex.Match (input); match.Success; match = match.NextMatch ()) {
        string num = integer.ToString ();
        if (num.Length <= match.Length)
            for (int i = 0; i < match.Length; i ++) {
                if (i < match.Length - num.Length)
                    output [match.Index + i + allig] = '0';
                else
                    output [match.Index + i + allig] = num [i - match.Length + num.Length];
            }
        else {
            output.Remove (match.Index + allig, match.Length);
            output.Insert (match.Index + allig, num);
            allig += num.Length - match.Length;
        }
    }
    return output.ToString ();
}
----------------------------------------

 public static string ReplaceHashtagsWithInt (string input, int integer) { 
    Regex regex = new Regex ("#+"); 
    StringBuilder output = new StringBuilder (input); 
    int offset = 0; 
    foreach (Match matching in regex.Matches(input)) 
    { 
        string number = integer.ToString(); 
        if (number.Length > matching.Length) 
        { 
            for (int i = 0; i < matching.Length; i++) 
            { 
                output[matching.Index + i + offset] = number[i]; 
            } 
        } 
        else 
        { 
            output.Remove(matching.Index + offset, matching.Length); 
            output.Insert(matching.Index + offset, number); 
            offset += number.Length - matching.Length; 
        } 
    } 
    return output.ToString(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
75
2
Gpt3D_Clone75_2.cs 1 21
Gpt3D_Clone75_2.cs 22 46
----------------------------------------

public static string ReplaceHashtagsWithInt (string input, int integer) {
    Regex regex = new Regex ("#+");
    StringBuilder output = new StringBuilder (input);
    int allig = 0;
    for (Match match = regex.Match (input); match.Success; match = match.NextMatch ()) {
        string num = integer.ToString ();
        if (num.Length <= match.Length)
            for (int i = 0; i < match.Length; i ++) {
                if (i < match.Length - num.Length)
                    output [match.Index + i + allig] = '0';
                else
                    output [match.Index + i + allig] = num [i - match.Length + num.Length];
            }
        else {
            output.Remove (match.Index + allig, match.Length);
            output.Insert (match.Index + allig, num);
            allig += num.Length - match.Length;
        }
    }
    return output.ToString ();
}
----------------------------------------

 public static string ReplaceHashtagsWithInt (string input, int integer) { 
    Regex regex = new Regex ("#+"); 
    StringBuilder output = new StringBuilder (input); 
    int deviation = 0; 
    foreach (Match occur in regex.Matches(input)) 
    { 
        string num = integer.ToString(); 
        if (num.Length > occur.Length) 
        { 
            for (int i = 0; i < occur.Length; i++) 
            { 
                output[occur.Index + i + deviation] = num[i]; 
            } 
        } 
        else 
        { 
            output.Remove(occur.Index + deviation, occur.Length); 
            output.Insert(occur.Index + deviation, num); 
            deviation += num.Length - occur.Length; 
        } 
    } 
    return output.ToString(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
75
3
Gpt3D_Clone75_3.cs 1 21
Gpt3D_Clone75_3.cs 22 46
----------------------------------------

public static string ReplaceHashtagsWithInt (string input, int integer) {
    Regex regex = new Regex ("#+");
    StringBuilder output = new StringBuilder (input);
    int allig = 0;
    for (Match match = regex.Match (input); match.Success; match = match.NextMatch ()) {
        string num = integer.ToString ();
        if (num.Length <= match.Length)
            for (int i = 0; i < match.Length; i ++) {
                if (i < match.Length - num.Length)
                    output [match.Index + i + allig] = '0';
                else
                    output [match.Index + i + allig] = num [i - match.Length + num.Length];
            }
        else {
            output.Remove (match.Index + allig, match.Length);
            output.Insert (match.Index + allig, num);
            allig += num.Length - match.Length;
        }
    }
    return output.ToString ();
}
----------------------------------------

 public static string ReplaceHashtagsWithInt (string input, int integer) { 
    Regex regex = new Regex ("#+"); 
    StringBuilder output = new StringBuilder (input); 
    int adjustment = 0; 
    foreach (Match occur in regex.Matches(input)) 
    { 
        string num = integer.ToString(); 
        if (num.Length > occur.Length) 
        { 
            for (int i = 0; i < occur.Length; i++) 
            { 
                output[occur.Index + i + adjustment] = num[i]; 
            } 
        } 
        else 
        { 
            output.Remove(occur.Index + adjustment, occur.Length); 
            output.Insert(occur.Index + adjustment, num); 
            adjustment += num.Length - occur.Length; 
        } 
    } 
    return output.ToString(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
75
4
Gpt3D_Clone75_4.cs 1 21
Gpt3D_Clone75_4.cs 22 46
----------------------------------------

public static string ReplaceHashtagsWithInt (string input, int integer) {
    Regex regex = new Regex ("#+");
    StringBuilder output = new StringBuilder (input);
    int allig = 0;
    for (Match match = regex.Match (input); match.Success; match = match.NextMatch ()) {
        string num = integer.ToString ();
        if (num.Length <= match.Length)
            for (int i = 0; i < match.Length; i ++) {
                if (i < match.Length - num.Length)
                    output [match.Index + i + allig] = '0';
                else
                    output [match.Index + i + allig] = num [i - match.Length + num.Length];
            }
        else {
            output.Remove (match.Index + allig, match.Length);
            output.Insert (match.Index + allig, num);
            allig += num.Length - match.Length;
        }
    }
    return output.ToString ();
}
----------------------------------------

 public static string ReplaceHashtagsWithInt (string input, int integer) { 
    Regex regex = new Regex ("#+"); 
    StringBuilder output = new StringBuilder (input); 
    int offset = 0; 
    foreach (Match m in regex.Matches(input)) 
    { 
        string number = integer.ToString(); 
        if (number.Length >= m.Length) 
        { 
            for (int i = 0; i < m.Length; i++) 
            { 
                output[m.Index + i + offset] = number[i]; 
            } 
        } 
        else 
        { 
            output.Remove(m.Index + offset, m.Length); 
            output.Insert(m.Index + offset, number); 
            offset += number.Length - m.Length; 
        } 
    } 
    return output.ToString(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
75
5
Gpt3D_Clone75_5.cs 1 21
Gpt3D_Clone75_5.cs 22 48
----------------------------------------

public static string ReplaceHashtagsWithInt (string input, int integer) {
    Regex regex = new Regex ("#+");
    StringBuilder output = new StringBuilder (input);
    int allig = 0;
    for (Match match = regex.Match (input); match.Success; match = match.NextMatch ()) {
        string num = integer.ToString ();
        if (num.Length <= match.Length)
            for (int i = 0; i < match.Length; i ++) {
                if (i < match.Length - num.Length)
                    output [match.Index + i + allig] = '0';
                else
                    output [match.Index + i + allig] = num [i - match.Length + num.Length];
            }
        else {
            output.Remove (match.Index + allig, match.Length);
            output.Insert (match.Index + allig, num);
            allig += num.Length - match.Length;
        }
    }
    return output.ToString ();
}
----------------------------------------

  public static string ReplaceHashtagsWithInt (string input, int integer) { 
    Regex regex = new Regex ("#+"); 
    StringBuilder output = new StringBuilder (input); 
    int index = 0; 
    foreach (Match match in regex.Matches(input)) 
    { 
        string text = integer.ToString(); 
        if (text.Length >= match.Length) 
        { 
            for (int i = 0; i < match.Length; i++) 
            { 
                output[match.Index + i + index] = text[i]; 
            } 
        } 
        else 
        { 
            output.Remove(match.Index + index, match.Length); 
            output.Insert(match.Index + index, text); 
            index += text.Length - match.Length; 
        }  
           
    } 
    return output.ToString(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
75
6
Gpt3D_Clone75_6.cs 1 21
Gpt3D_Clone75_6.cs 22 46
----------------------------------------

public static string ReplaceHashtagsWithInt (string input, int integer) {
    Regex regex = new Regex ("#+");
    StringBuilder output = new StringBuilder (input);
    int allig = 0;
    for (Match match = regex.Match (input); match.Success; match = match.NextMatch ()) {
        string num = integer.ToString ();
        if (num.Length <= match.Length)
            for (int i = 0; i < match.Length; i ++) {
                if (i < match.Length - num.Length)
                    output [match.Index + i + allig] = '0';
                else
                    output [match.Index + i + allig] = num [i - match.Length + num.Length];
            }
        else {
            output.Remove (match.Index + allig, match.Length);
            output.Insert (match.Index + allig, num);
            allig += num.Length - match.Length;
        }
    }
    return output.ToString ();
}
----------------------------------------

 public static string ReplaceHashtagsWithInt (string input, int integer) { 
    Regex regex = new Regex ("#+"); 
    StringBuilder output = new StringBuilder (input); 
    int difference = 0; 
    foreach (Match find in regex.Matches(input)) 
    { 
        string text = integer.ToString(); 
        if (text.Length >= find.Length) 
        { 
            for (int i = 0; i < find.Length; i++) 
            { 
                output[find.Index + i + difference] = text[i]; 
            } 
        } 
        else 
        { 
            output.Remove(find.Index + difference, find.Length); 
            output.Insert(find.Index + difference, text); 
            difference += text.Length - find.Length; 
        } 
    } 
    return output.ToString(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
75
7
Gpt3D_Clone75_7.cs 1 21
Gpt3D_Clone75_7.cs 22 46
----------------------------------------

public static string ReplaceHashtagsWithInt (string input, int integer) {
    Regex regex = new Regex ("#+");
    StringBuilder output = new StringBuilder (input);
    int allig = 0;
    for (Match match = regex.Match (input); match.Success; match = match.NextMatch ()) {
        string num = integer.ToString ();
        if (num.Length <= match.Length)
            for (int i = 0; i < match.Length; i ++) {
                if (i < match.Length - num.Length)
                    output [match.Index + i + allig] = '0';
                else
                    output [match.Index + i + allig] = num [i - match.Length + num.Length];
            }
        else {
            output.Remove (match.Index + allig, match.Length);
            output.Insert (match.Index + allig, num);
            allig += num.Length - match.Length;
        }
    }
    return output.ToString ();
}
----------------------------------------

 public static string ReplaceHashtagsWithInt (string input, int integer) { 
    Regex regex = new Regex ("#+"); 
    StringBuilder output = new StringBuilder (input); 
    int offset = 0; 
    foreach (Match match in regex.Matches(input)) 
    { 
        string number = integer.ToString(); 
        if (number.Length > match.Length) 
        { 
            for (int i = 0; i < match.Length; i++) 
            { 
                output[match.Index + i + offset] = number[i]; 
            } 
        } 
        else 
        { 
            output.Remove(match.Index + offset, match.Length); 
            output.Insert(match.Index + offset, number); 
            offset += number.Length - match.Length; 
        } 
    } 
    return output.ToString(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
75
8
Gpt3D_Clone75_8.cs 1 21
Gpt3D_Clone75_8.cs 22 46
----------------------------------------

public static string ReplaceHashtagsWithInt (string input, int integer) {
    Regex regex = new Regex ("#+");
    StringBuilder output = new StringBuilder (input);
    int allig = 0;
    for (Match match = regex.Match (input); match.Success; match = match.NextMatch ()) {
        string num = integer.ToString ();
        if (num.Length <= match.Length)
            for (int i = 0; i < match.Length; i ++) {
                if (i < match.Length - num.Length)
                    output [match.Index + i + allig] = '0';
                else
                    output [match.Index + i + allig] = num [i - match.Length + num.Length];
            }
        else {
            output.Remove (match.Index + allig, match.Length);
            output.Insert (match.Index + allig, num);
            allig += num.Length - match.Length;
        }
    }
    return output.ToString ();
}
----------------------------------------

 public static string ReplaceHashtagsWithInt (string input, int integer) { 
    Regex regex = new Regex ("#+"); 
    StringBuilder output = new StringBuilder (input); 
    int position = 0; 
    foreach (Match occur in regex.Matches(input)) 
    { 
        string number = integer.ToString(); 
        if (number.Length > occur.Length) 
        { 
            for (int i = 0; i < occur.Length; i++) 
            { 
                output[occur.Index + i + position] = number[i]; 
            } 
        } 
        else 
        { 
            output.Remove(occur.Index + position, occur.Length); 
            output.Insert(occur.Index + position, number); 
            position += number.Length - occur.Length; 
        } 
    } 
    return output.ToString(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
75
9
Gpt3D_Clone75_9.cs 1 21
Gpt3D_Clone75_9.cs 22 46
----------------------------------------

public static string ReplaceHashtagsWithInt (string input, int integer) {
    Regex regex = new Regex ("#+");
    StringBuilder output = new StringBuilder (input);
    int allig = 0;
    for (Match match = regex.Match (input); match.Success; match = match.NextMatch ()) {
        string num = integer.ToString ();
        if (num.Length <= match.Length)
            for (int i = 0; i < match.Length; i ++) {
                if (i < match.Length - num.Length)
                    output [match.Index + i + allig] = '0';
                else
                    output [match.Index + i + allig] = num [i - match.Length + num.Length];
            }
        else {
            output.Remove (match.Index + allig, match.Length);
            output.Insert (match.Index + allig, num);
            allig += num.Length - match.Length;
        }
    }
    return output.ToString ();
}
----------------------------------------

 public static string ReplaceHashtagsWithInt (string input, int integer) { 
    Regex regex = new Regex ("#+"); 
    StringBuilder output = new StringBuilder (input); 
    int shift = 0; 
    foreach (Match found in regex.Matches(input)) 
    { 
        string text = integer.ToString(); 
        if (text.Length >= found.Length) 
        { 
            for (int i = 0; i < found.Length; i++) 
            { 
                output[found.Index + i + shift] = text[i]; 
            } 
        } 
        else 
        { 
            output.Remove(found.Index + shift, found.Length); 
            output.Insert(found.Index + shift, text); 
            shift += text.Length - found.Length; 
        } 
    } 
    return output.ToString(); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
761
0
Gpt3D_Clone761_0.cs 1 13
Gpt3D_Clone761_0.cs 14 29
----------------------------------------

public static string GetUserCountryByIp (string ip) {
    IpInfo ipInfo = new IpInfo ();
    try {
        string info = new WebClient ().DownloadString ("http://ipinfo.io/" + ip);
        ipInfo = JsonConvert.DeserializeObject < IpInfo > (info);
        RegionInfo myRI1 = new RegionInfo (ipInfo.Country);
        ipInfo.Country = myRI1.EnglishName;
    }
    catch (Exception) {
        ipInfo.Country = null;
    }
    return ipInfo.Country;
}
----------------------------------------

 public static string GetUserCountryByIp (string ip) {
        IpInfo ipInfo = new IpInfo ();
        try {
            string data = new WebClient ().DownloadString ("https://www.geoip-db.com/jsonp/" + ip);
            data = System.Text.RegularExpressions.Regex.Unescape(data);
            JObject regionData = (JObject)JsonConvert.DeserializeObject(data);
            ipInfo.Country = (string)regionData["country_name"];
        }
        catch (Exception) {
            ipInfo.Country = null;
        }
        return ipInfo.Country;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
761
1
Gpt3D_Clone761_1.cs 1 13
Gpt3D_Clone761_1.cs 14 27
----------------------------------------

public static string GetUserCountryByIp (string ip) {
    IpInfo ipInfo = new IpInfo ();
    try {
        string info = new WebClient ().DownloadString ("http://ipinfo.io/" + ip);
        ipInfo = JsonConvert.DeserializeObject < IpInfo > (info);
        RegionInfo myRI1 = new RegionInfo (ipInfo.Country);
        ipInfo.Country = myRI1.EnglishName;
    }
    catch (Exception) {
        ipInfo.Country = null;
    }
    return ipInfo.Country;
}
----------------------------------------

 public static string GetUserCountryByIp (string ip) {
        IpInfo ipInfo = new IpInfo ();
        try {
            string info = new WebClient ().DownloadString ("http://www.telize.com/geoip/" + ip);
            JObject regionData = (JObject)JsonConvert.DeserializeObject(info);
            ipInfo.Country = (string)regionData["country"];
        }
        catch (Exception) {
            ipInfo.Country = null;
        }
        return ipInfo.Country;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
761
2
Gpt3D_Clone761_2.cs 1 13
Gpt3D_Clone761_2.cs 14 27
----------------------------------------

public static string GetUserCountryByIp (string ip) {
    IpInfo ipInfo = new IpInfo ();
    try {
        string info = new WebClient ().DownloadString ("http://ipinfo.io/" + ip);
        ipInfo = JsonConvert.DeserializeObject < IpInfo > (info);
        RegionInfo myRI1 = new RegionInfo (ipInfo.Country);
        ipInfo.Country = myRI1.EnglishName;
    }
    catch (Exception) {
        ipInfo.Country = null;
    }
    return ipInfo.Country;
}
----------------------------------------

 public static string GetUserCountryByIp (string ip) {
        IpInfo ipInfo = new IpInfo ();
        try {
            string info = new WebClient ().DownloadString ("http://ip-api.com/node/" + ip);
            JObject regionData = (JObject)JsonConvert.DeserializeObject(info);
            ipInfo.Country = (string)regionData["country"];
        }
        catch (Exception) {
            ipInfo.Country = null;
        }
        return ipInfo.Country;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
761
3
Gpt3D_Clone761_3.cs 1 13
Gpt3D_Clone761_3.cs 14 27
----------------------------------------

public static string GetUserCountryByIp (string ip) {
    IpInfo ipInfo = new IpInfo ();
    try {
        string info = new WebClient ().DownloadString ("http://ipinfo.io/" + ip);
        ipInfo = JsonConvert.DeserializeObject < IpInfo > (info);
        RegionInfo myRI1 = new RegionInfo (ipInfo.Country);
        ipInfo.Country = myRI1.EnglishName;
    }
    catch (Exception) {
        ipInfo.Country = null;
    }
    return ipInfo.Country;
}
----------------------------------------

 public static string GetUserCountryByIp (string ip) {
        IpInfo ipInfo = new IpInfo ();
        try {
            string info = new WebClient ().DownloadString ("http://api.ipinfodb.com/v3/ip-country/?key=788f16da979b8fcd6e73d6ba205dd472&ip=" + ip);
            JObject regionData = (JObject)JsonConvert.DeserializeObject(info);
            ipInfo.Country = (string)regionData["countryName"];
        }
        catch (Exception) {
            ipInfo.Country = null;
        }
        return ipInfo.Country;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
761
4
Gpt3D_Clone761_4.cs 1 13
Gpt3D_Clone761_4.cs 14 27
----------------------------------------

public static string GetUserCountryByIp (string ip) {
    IpInfo ipInfo = new IpInfo ();
    try {
        string info = new WebClient ().DownloadString ("http://ipinfo.io/" + ip);
        ipInfo = JsonConvert.DeserializeObject < IpInfo > (info);
        RegionInfo myRI1 = new RegionInfo (ipInfo.Country);
        ipInfo.Country = myRI1.EnglishName;
    }
    catch (Exception) {
        ipInfo.Country = null;
    }
    return ipInfo.Country;
}
----------------------------------------

 public static string GetUserCountryByIp (string ip) {
        IpInfo ipInfo = new IpInfo ();
        try {
            string info = new WebClient ().DownloadString ("http://ip-api.com/json/" + ip);
            JObject regionData = (JObject)JsonConvert.DeserializeObject(info);
            ipInfo.Country = (string)regionData["country"];
        }
        catch (Exception) {
            ipInfo.Country = null;
        }
        return ipInfo.Country;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
761
5
Gpt3D_Clone761_5.cs 1 13
Gpt3D_Clone761_5.cs 14 27
----------------------------------------

public static string GetUserCountryByIp (string ip) {
    IpInfo ipInfo = new IpInfo ();
    try {
        string info = new WebClient ().DownloadString ("http://ipinfo.io/" + ip);
        ipInfo = JsonConvert.DeserializeObject < IpInfo > (info);
        RegionInfo myRI1 = new RegionInfo (ipInfo.Country);
        ipInfo.Country = myRI1.EnglishName;
    }
    catch (Exception) {
        ipInfo.Country = null;
    }
    return ipInfo.Country;
}
----------------------------------------

 public static string GetUserCountryByIp (string ip) {
        IpInfo ipInfo = new IpInfo ();
        try {
            string info = new WebClient ().DownloadString ("http://api.hostip.info/get_json.php?ip=" + ip);
            JObject regionData = (JObject)JsonConvert.DeserializeObject(info);
            ipInfo.Country = (string)regionData["country_name"];
        }
        catch (Exception) {
            ipInfo.Country = null;
        }
        return ipInfo.Country;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
761
6
Gpt3D_Clone761_6.cs 1 13
Gpt3D_Clone761_6.cs 14 27
----------------------------------------

public static string GetUserCountryByIp (string ip) {
    IpInfo ipInfo = new IpInfo ();
    try {
        string info = new WebClient ().DownloadString ("http://ipinfo.io/" + ip);
        ipInfo = JsonConvert.DeserializeObject < IpInfo > (info);
        RegionInfo myRI1 = new RegionInfo (ipInfo.Country);
        ipInfo.Country = myRI1.EnglishName;
    }
    catch (Exception) {
        ipInfo.Country = null;
    }
    return ipInfo.Country;
}
----------------------------------------

 public static string GetUserCountryByIp (string ip) {
        IpInfo ipInfo = new IpInfo ();
        try {
            string info = new WebClient ().DownloadString ("http://freegeoip.net/json/" + ip);
            JObject regionData = (JObject)JsonConvert.DeserializeObject(info);
            ipInfo.Country = (string)regionData["country_name"];
        }
        catch (Exception) {
            ipInfo.Country = null;
        }
        return ipInfo.Country;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
761
7
Gpt3D_Clone761_7.cs 1 13
Gpt3D_Clone761_7.cs 14 27
----------------------------------------

public static string GetUserCountryByIp (string ip) {
    IpInfo ipInfo = new IpInfo ();
    try {
        string info = new WebClient ().DownloadString ("http://ipinfo.io/" + ip);
        ipInfo = JsonConvert.DeserializeObject < IpInfo > (info);
        RegionInfo myRI1 = new RegionInfo (ipInfo.Country);
        ipInfo.Country = myRI1.EnglishName;
    }
    catch (Exception) {
        ipInfo.Country = null;
    }
    return ipInfo.Country;
}
----------------------------------------

 public static string GetUserCountryByIp (string ip) {
        IpInfo ipInfo = new IpInfo ();
        try {
            string info = new WebClient ().DownloadString ("https://geoip-db.com/" + ip);
            JObject regionData = (JObject)JsonConvert.DeserializeObject(info);
            ipInfo.Country = (string)regionData["country_name"];
        }
        catch (Exception) {
            ipInfo.Country = null;
        }
        return ipInfo.Country;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
761
8
Gpt3D_Clone761_8.cs 1 13
Gpt3D_Clone761_8.cs 14 27
----------------------------------------

public static string GetUserCountryByIp (string ip) {
    IpInfo ipInfo = new IpInfo ();
    try {
        string info = new WebClient ().DownloadString ("http://ipinfo.io/" + ip);
        ipInfo = JsonConvert.DeserializeObject < IpInfo > (info);
        RegionInfo myRI1 = new RegionInfo (ipInfo.Country);
        ipInfo.Country = myRI1.EnglishName;
    }
    catch (Exception) {
        ipInfo.Country = null;
    }
    return ipInfo.Country;
}
----------------------------------------

 public static string GetUserCountryByIp (string ip) {
        IpInfo ipInfo = new IpInfo ();
        try {
            string info = new WebClient ().DownloadString ("http://api.ipstack.com/" + ip + "?access_key=ab8f6322bfbb4d4ce1f41934c9ad9e76");
            JObject regionData = (JObject)JsonConvert.DeserializeObject(info);
            ipInfo.Country = (string)regionData["country_name"];
        }
        catch (Exception) {
            ipInfo.Country = null;
        }
        return ipInfo.Country;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
761
9
Gpt3D_Clone761_9.cs 1 13
Gpt3D_Clone761_9.cs 14 27
----------------------------------------

public static string GetUserCountryByIp (string ip) {
    IpInfo ipInfo = new IpInfo ();
    try {
        string info = new WebClient ().DownloadString ("http://ipinfo.io/" + ip);
        ipInfo = JsonConvert.DeserializeObject < IpInfo > (info);
        RegionInfo myRI1 = new RegionInfo (ipInfo.Country);
        ipInfo.Country = myRI1.EnglishName;
    }
    catch (Exception) {
        ipInfo.Country = null;
    }
    return ipInfo.Country;
}
----------------------------------------

 public static string GetUserCountryByIp (string ip) {
        IpInfo ipInfo = new IpInfo ();
        try {
            string info = new WebClient ().DownloadString ("http://extreme-ip-lookup.com/json/" + ip);
            JObject regionData = (JObject)JsonConvert.DeserializeObject(info);
            ipInfo.Country = (string)regionData["country"];
        }
        catch (Exception) {
            ipInfo.Country = null;
        }
        return ipInfo.Country;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
766
0
Gpt3D_Clone766_0.cs 1 16
Gpt3D_Clone766_0.cs 17 45
----------------------------------------

static void Main (string [] args) {
    unpack ();
    Process process = new Process ();
    process.StartInfo.FileName = "exe1.exe";
    process.Start ();
    process.WaitForExit ();
    process = new Process ();
    process.StartInfo.FileName = "exe2.exe";
    process.Start ();
    process.WaitForExit ();
    process = new Process ();
    process.StartInfo.FileName = @"C:\Windows\SysWOW64\WindowsPowerShell\v1.0\powershell.exe";
    process.StartInfo.Arguments = "ps1.ps1";
    process.Start ();
    process.WaitForExit ();
}
----------------------------------------

 static void Main(string[] args) {
   Unpack();
   // Create and init a Dictionary mapping string of exe name to a delegate
   Dictionary<string, Action> dictExeNameToAction = new Dictionary<string, Action>();
   dictExeNameToAction.Add("exe1.exe", () => {
       Process process = new Process();
       process.StartInfo.FileName = "exe1.exe";
       process.Start();
       process.WaitForExit();
   });
   dictExeNameToAction.Add("exe2.exe", () => {
       Process process = new Process();
       process.StartInfo.FileName = "exe2.exe";
       process.Start();
       process.WaitForExit();
   });
   dictExeNameToAction.Add(@"C:\Windows\SysWOW64\WindowsPowerShell\v1.0\PowerShell.exe", () => {
       Process process = new Process();
       process.StartInfo.FileName = @"C:\Windows\SysWOW64\WindowsPowerShell\v1.0\PowerShell.exe";
       process.StartInfo.Arguments = "ps1.ps1";
       process.Start();
       process.WaitForExit();
   });
   // Execute every action in the Dictionary
   foreach (var exeNameAndAction in dictExeNameToAction) 
       exeNameAndAction.Value.Invoke();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
766
1
Gpt3D_Clone766_1.cs 1 16
Gpt3D_Clone766_1.cs 17 44
----------------------------------------

static void Main (string [] args) {
    unpack ();
    Process process = new Process ();
    process.StartInfo.FileName = "exe1.exe";
    process.Start ();
    process.WaitForExit ();
    process = new Process ();
    process.StartInfo.FileName = "exe2.exe";
    process.Start ();
    process.WaitForExit ();
    process = new Process ();
    process.StartInfo.FileName = @"C:\Windows\SysWOW64\WindowsPowerShell\v1.0\powershell.exe";
    process.StartInfo.Arguments = "ps1.ps1";
    process.Start ();
    process.WaitForExit ();
}
----------------------------------------

 static void Main(string[] args) {
   Unpack();
   // Create a List of Action delegates 
   List<Action> actionList = new List<Action>();
   actionList.Add(() => {
       Process process = new Process();
       process.StartInfo.FileName = "exe1.exe";
       process.Start();
       process.WaitForExit();
   });
   actionList.Add(() => {
       Process process = new Process();
       process.StartInfo.FileName = "exe2.exe";
       process.Start();
       process.WaitForExit();
   });
   actionList.Add(() => {
       Process process = new Process();
       process.StartInfo.FileName = @"C:\Windows\SysWOW64\WindowsPowerShell\v1.0\PowerShell.exe";
       process.StartInfo.Arguments = "ps1.ps1";
       process.Start();
       process.WaitForExit();
   });
   // Execute every delegate in the List
   actionList.ForEach(action => action.Invoke());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
766
2
Gpt3D_Clone766_2.cs 1 16
Gpt3D_Clone766_2.cs 17 44
----------------------------------------

static void Main (string [] args) {
    unpack ();
    Process process = new Process ();
    process.StartInfo.FileName = "exe1.exe";
    process.Start ();
    process.WaitForExit ();
    process = new Process ();
    process.StartInfo.FileName = "exe2.exe";
    process.Start ();
    process.WaitForExit ();
    process = new Process ();
    process.StartInfo.FileName = @"C:\Windows\SysWOW64\WindowsPowerShell\v1.0\powershell.exe";
    process.StartInfo.Arguments = "ps1.ps1";
    process.Start ();
    process.WaitForExit ();
}
----------------------------------------

 static void Main(string[] args) {
        Unpack();
        // Create and init a List of tasks
        List<Task> taskList = new List<Task>();
        taskList.Add(Task.Factory.StartNew(action: () => {
            Process process = new Process();
            process.StartInfo.FileName = "exe1.exe";
            process.Start();
            process.WaitForExit();
        }));
        taskList.Add(Task.Factory.StartNew(action: () => {
            Process process = new Process();
            process.StartInfo.FileName = "exe2.exe";
            process.Start();
            process.WaitForExit();
        }));
        taskList.Add(Task.Factory.StartNew(action: () => {
            Process process = new Process();
            process.StartInfo.FileName = @"C:\Windows\SysWOW64\WindowsPowerShell\v1.0\PowerShell.exe";
            process.StartInfo.Arguments = "ps1.ps1";
            process.Start();
            process.WaitForExit();
        }));
        // Wait for all tasks to complete
        Task.WaitAll(taskList.ToArray());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
766
3
Gpt3D_Clone766_3.cs 1 16
Gpt3D_Clone766_3.cs 17 46
----------------------------------------

static void Main (string [] args) {
    unpack ();
    Process process = new Process ();
    process.StartInfo.FileName = "exe1.exe";
    process.Start ();
    process.WaitForExit ();
    process = new Process ();
    process.StartInfo.FileName = "exe2.exe";
    process.Start ();
    process.WaitForExit ();
    process = new Process ();
    process.StartInfo.FileName = @"C:\Windows\SysWOW64\WindowsPowerShell\v1.0\powershell.exe";
    process.StartInfo.Arguments = "ps1.ps1";
    process.Start ();
    process.WaitForExit ();
}
----------------------------------------

 static void Main(string[] args) {
   Unpack();
   // Create and init an array of delegates
   Action[] actions = { 
       () => {
           Process process = new Process();
           process.StartInfo.FileName = "exe1.exe";
           process.Start();
           process.WaitForExit();
       },
       () => {
           Process process = new Process();
           process.StartInfo.FileName = "exe2.exe";
           process.Start();
           process.WaitForExit();
       },
       () => {
           Process process = new Process();
           process.StartInfo.FileName = @"C:\Windows\SysWOW64\WindowsPowerShell\v1.0\PowerShell.exe";
           process.StartInfo.Arguments = "ps1.ps1";
           process.Start();
           process.WaitForExit();
       }
   };
   // Loop through the array of delegates and execute every command
   foreach (Action action in actions)
       action.Invoke();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
769
1
Gpt3D_Clone769_1.cs 1 15
Gpt3D_Clone769_1.cs 16 135
----------------------------------------

private bool IsOk (string str) {
    char ? last = null;
    var i = 1;
    foreach (var c in str) {
        if (last == c) {
            i ++;
            if (i > 2)
                return false;
        } else {
            i = 1;
        }
        last = c;
    }
    return true;
}
----------------------------------------

  private bool IsOk (string str) {
        HashSet<char> characters = new HashSet<char>();
        foreach(char c in str)
        {
            if(characters.Contains(c))
            {
                return false;
            }
            else
            {
                characters.Add(c);
            }
        }
        return true;
    }
  private bool IsOk (string str) {
        var charDictionary = new Dictionary<char, int>();
        foreach(char c in str)
        {
            if(!charDictionary.ContainsKey(c))
            {
                charDictionary[c] = 1;
            }
            else
            {
                if(charDictionary[c] == 2)
                    return false;
                else
                    charDictionary[c]++;
            }
        }
        return true;
    }
  private bool IsOk (string str) {
        int numSame = 0; 
        char prev = new char(); 
    
        foreach(char c in str) {
            if(numSame == 0){
                prev = c;
                numSame++;
            } else if(prev == c){
                numSame++;
            } else {
                prev = c;
                numSame = 1;
            }
            if(numSame > 2){
                return false;
            }
    
        }
        return true;
    }
 private bool IsOk (string str) {
        char ? prev = null;
        int count = 0;
        foreach(char current in str) {
            if (prev!=null) {
                if(prev == current) {
                    count ++;
                    if (count >2) {
                        return false;
                    }
                }else {
                    count = 1;
                }
            }
            prev = current;
        }
        return true;
    }
  private bool IsOk (string str) {
        HashSet<char> repeatedChars = new HashSet<char>();
       
        foreach(char c in str){
            if(repeatedChars.Contains(c))
                return false;
            else
                repeatedChars.Add(c);
        }
    
        return true;
    }
  private bool IsOk (string str) {
        bool[] seen = new bool[256];
        int length = 0;
	
        foreach(char c in str ) {
            length++;
            if(seen[c])
	            return false;
            else
                seen[c] = true;
            if(length > 2)
	            return false;
        }
        return true;
    }
 private bool IsOk (string str) {
    int[] letterFrequency = new int[256];
    
    foreach (char c in str) {
        letterFrequency[c]++;
        
        if (letterFrequency[c] > 2) {
            return false;
        }
    }
    
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
770
1
Gpt3D_Clone770_1.cs 1 21
Gpt3D_Clone770_1.cs 22 56
----------------------------------------

public static string JoinAnd < T > (string separator, string sepLast, IEnumerable < T > values) {
    var sb = new StringBuilder ();
    var enumerator = values.GetEnumerator ();
    if (enumerator.MoveNext ()) {
        sb.Append (enumerator.Current);
    }
    object obj = null;
    if (enumerator.MoveNext ()) {
        obj = enumerator.Current;
    }
    while (enumerator.MoveNext ()) {
        sb.Append (separator);
        sb.Append (obj);
        obj = enumerator.Current;
    }
    if (obj != null) {
        sb.Append (sepLast);
        sb.Append (obj);
    }
    return sb.ToString ();
}
----------------------------------------

 public static string JoinAnd<T>(string separator, string sepLast, IEnumerable<T> values) 
{ 
    var enumerator = values.GetEnumerator(); 
    var result = new StringBuilder(); 
    // Append the first item 
    if(enumerator.MoveNext()) 
    { 
        result.Append(enumerator.Current); 
    } 
    object obj = null; 
    // Append the second item 
    if(enumerator.MoveNext()) 
    { 
        obj = enumerator.Current; 
    } 
    // Append the remaining items 
    while(enumerator.MoveNext()) 
    { 
        result.Append(separator).Append(obj); 
        obj = enumerator.Current; 
    } 
    if(obj != null) 
    { 
        result.Append(sepLast).Append(obj); 
    } 
    return result.ToString(); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
773
0
Gpt3D_Clone773_0.cs 1 21
Gpt3D_Clone773_0.cs 22 44
----------------------------------------

private void btnAddDriver_Click (object sender, RoutedEventArgs e) {
    decimal policy = 500M;
    decimal Chauffeur = 0.10M;
    decimal Accountant = 0.10M;
    decimal age2125 = 0.20M;
    decimal age2675 = 0.10M;
    if (cmbOccupation.SelectedItem.ToString () == Occumpation.Chauffeur.ToString ()) {
        policy += policy * Chauffeur;
    } else if (cmbOccupation.SelectedItem.ToString () == Occumpation.Accountant.ToString ()) {
        policy -= policy * Accountant;
    }
    DateTime ? birthDate = dpkDOB.SelectedDate;
    if (birthDate != null) {
        if (birthDate.Age ().Years () > 21 && birthDate.Age ().Years () < 26) {
            policy += policy * age2125;
        } else if (birthDate.Age ().Years () > 26 && birthDate.Age ().Years () < 76) {
            policy -= policy * age2675;
        }
    }
    txtPolicy.Text = policy.ToString ();
}
----------------------------------------

 private void btnAddDriver_Click (object sender, RoutedEventArgs e) {
        double policy = 500;
        double Chauffeur = 0.10;
        double Accountant = 0.10;
        double age2125 = 0.20;
        double age2675 = 0.10;
        if (cmbOccupation.SelectedItem.ToString () == Occumpation.Chauffeur.ToString ()) {
            policy += policy * Chauffeur;
        } else if (cmbOccupation.SelectedItem.ToString () == Occumpation.Accountant.ToString ()) {
            policy -= policy * Accountant;
        }
        DateTime ? birthDate = dpkDOB.SelectedDate;
        if (birthDate != null) {
            if (birthDate.Age ().Years () > 21 && birthDate.Age ().Years () < 26) {
                policy *= 1 + (age2125/100);
            } else if (birthDate.Age ().Years () > 26 && birthDate.Age ().Years () < 76) {
                policy *= 1 - (age2675/100);
            }
        }
        txtPolicy.Text = policy.ToString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
777
2
Gpt3D_Clone777_2.cs 1 14
Gpt3D_Clone777_2.cs 15 34
----------------------------------------

public static LinkedList < T > SwapPairwise < T > (this LinkedList < T > source) {
    if (source == null)
        throw new ArgumentNullException ("source");
    var current = source.First;
    if (current == null)
        return source;
    while (current.Next != null) {
        current.SwapWith (current.Next);
        current = current.Next;
        if (current != null)
            current = current.Next;
    }
    return source;
}
----------------------------------------

	public static LinkedList < T > SwapPairwise < T > (this LinkedList < T > source) {
    if (source == null)
        throw new ArgumentNullException ("source");
    var current = source.First;
    if (current == null)
        return source;
    while (current != null && current.Next != null) {
        var next = current.Next;
        var temp = current.Value;
        source.Remove(current);
        source.Remove(current.Next);
        source.AddAfter(current, next);
        current = new LinkedListNode<T>(temp);
        source.AddBefore(next, current);
        current = current.Next;
    }
    return source;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
777
6
Gpt3D_Clone777_6.cs 1 14
Gpt3D_Clone777_6.cs 15 31
----------------------------------------

public static LinkedList < T > SwapPairwise < T > (this LinkedList < T > source) {
    if (source == null)
        throw new ArgumentNullException ("source");
    var current = source.First;
    if (current == null)
        return source;
    while (current.Next != null) {
        current.SwapWith (current.Next);
        current = current.Next;
        if (current != null)
            current = current.Next;
    }
    return source;
}
----------------------------------------

	public static LinkedList < T > SwapPairwise < T > (this LinkedList < T > source) {
    if (source == null)
        throw new ArgumentNullException ("source");
    var current = source.First;
    if (current == null)
        return source;
    while (current != null && current.Next != null) {
        source.Remove(current);
        source.AddBefore(current, current.Next);
        source.Remove(current.Next);
        source.AddAfter(current.Next, current);
        current = current.Next.Next;
    }
    return source;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
777
7
Gpt3D_Clone777_7.cs 1 14
Gpt3D_Clone777_7.cs 15 30
----------------------------------------

public static LinkedList < T > SwapPairwise < T > (this LinkedList < T > source) {
    if (source == null)
        throw new ArgumentNullException ("source");
    var current = source.First;
    if (current == null)
        return source;
    while (current.Next != null) {
        current.SwapWith (current.Next);
        current = current.Next;
        if (current != null)
            current = current.Next;
    }
    return source;
}
----------------------------------------

	public static LinkedList < T > SwapPairwise < T > (this LinkedList < T > source) {
    if (source == null)
        throw new ArgumentNullException ("source");
    var current = source.First;
    if (current == null)
        return source;
    while (current != null && current.Next != null) {
        var swapNode = new LinkedListNode<T>(current.Value);
        current.Value = current.Next.Value;
        current.Next.Value = swapNode.Value;
        current = current.Next.Next;
    }
    return source;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
777
8
Gpt3D_Clone777_8.cs 1 14
Gpt3D_Clone777_8.cs 15 30
----------------------------------------

public static LinkedList < T > SwapPairwise < T > (this LinkedList < T > source) {
    if (source == null)
        throw new ArgumentNullException ("source");
    var current = source.First;
    if (current == null)
        return source;
    while (current.Next != null) {
        current.SwapWith (current.Next);
        current = current.Next;
        if (current != null)
            current = current.Next;
    }
    return source;
}
----------------------------------------

	public static LinkedList < T > SwapPairwise < T > (this LinkedList < T > source) {
    if (source == null)
        throw new ArgumentNullException ("source");
    var current = source.First;
    if (current == null)
        return source;
    while (current != null && current.Next != null) {
        source.Remove(current);
        source.Remove(current.Next);
        source.AddBefore(current.Next, current);
        current = current.Next.Next;
    }
    return source;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
777
9
Gpt3D_Clone777_9.cs 1 14
Gpt3D_Clone777_9.cs 15 30
----------------------------------------

public static LinkedList < T > SwapPairwise < T > (this LinkedList < T > source) {
    if (source == null)
        throw new ArgumentNullException ("source");
    var current = source.First;
    if (current == null)
        return source;
    while (current.Next != null) {
        current.SwapWith (current.Next);
        current = current.Next;
        if (current != null)
            current = current.Next;
    }
    return source;
}
----------------------------------------

	public static LinkedList < T > SwapPairwise < T > (this LinkedList < T > source) {
    if (source == null)
        throw new ArgumentNullException ("source");
    var current = source.First;
    if (current == null)
        return source;
    while (current != null && current.Next != null) {
        var temp = current.Value;
        current.Value = current.Next.Value;
        current.Next.Value = temp;
        current = current.Next.Next;
    }
    return source;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
778
0
Gpt3D_Clone778_0.cs 1 22
Gpt3D_Clone778_0.cs 23 51
----------------------------------------

protected override void OnPaint (PaintEventArgs pevent) {
    CheckBoxRenderer.DrawParentBackground (pevent.Graphics, pevent.ClipRectangle, this);
    RadioButtonState radioButtonState;
    if (Checked) {
        radioButtonState = RadioButtonState.CheckedNormal;
        if (Focused)
            radioButtonState = RadioButtonState.CheckedHot;
        if (! Enabled)
            radioButtonState = RadioButtonState.CheckedDisabled;
    } else {
        radioButtonState = RadioButtonState.UncheckedNormal;
        if (Focused)
            radioButtonState = RadioButtonState.UncheckedHot;
        if (! Enabled)
            radioButtonState = RadioButtonState.UncheckedDisabled;
    }
    Size glyphSize = RadioButtonRenderer.GetGlyphSize (pevent.Graphics, radioButtonState);
    Rectangle rect = pevent.ClipRectangle;
    rect.Width -= glyphSize.Width;
    rect.Location = new Point (rect.Left + glyphSize.Width, rect.Top);
    RadioButtonRenderer.DrawRadioButton (pevent.Graphics, new System.Drawing.Point (0, rect.Height / 2 - glyphSize.Height / 2), rect, this.Text, this.Font, this.Focused, radioButtonState);
}
----------------------------------------

 protected override void OnPaint (PaintEventArgs pevent) 
{
    CheckBoxRenderer.DrawParentBackground (pevent.Graphics, pevent.ClipRectangle, this);
    RadioButtonState radioButtonState;
    if (Checked) {
        radioButtonState = RadioButtonState.CheckedNormal;
        if (Focused)
            radioButtonState = RadioButtonState.CheckedHot;
        if (! Enabled)
            radioButtonState = RadioButtonState.CheckedDisabled;        
    } else {
        radioButtonState = RadioButtonState.UncheckedNormal;
        if (Focused)
            radioButtonState = RadioButtonState.UncheckedHot;
        if (! Enabled)
            radioButtonState = RadioButtonState.UncheckedDisabled;         
    }
    Size glyphSize =RadioButtonRenderer.GetGlyphSize(pevent.Graphics, radioButtonState);
    Rectangle rect = pevent.ClipRectangle;
    rect.Width -= glyphSize.Width;
    rect.Location = new Point((rect.Width/2) + (glyphSize.Width/2), rect.Top);
    RadioButtonRenderer.DrawRadioButton(pevent.Graphics, rect, this.Text, this.Font, this.Focused, radioButtonState);
    Rectangle rect2 = pevent.ClipRectangle;
    rect2.Width = glyphSize.Width;
    rect2.Location = new Point (0, rect.Height / 2 - glyphSize.Height / 2);   
    RadioButtonRenderer.DrawRadioButton (pevent.Graphics, rect2, this.Text, this.Font, this.Focused, radioButtonState);   
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
778
1
Gpt3D_Clone778_1.cs 1 22
Gpt3D_Clone778_1.cs 23 50
----------------------------------------

protected override void OnPaint (PaintEventArgs pevent) {
    CheckBoxRenderer.DrawParentBackground (pevent.Graphics, pevent.ClipRectangle, this);
    RadioButtonState radioButtonState;
    if (Checked) {
        radioButtonState = RadioButtonState.CheckedNormal;
        if (Focused)
            radioButtonState = RadioButtonState.CheckedHot;
        if (! Enabled)
            radioButtonState = RadioButtonState.CheckedDisabled;
    } else {
        radioButtonState = RadioButtonState.UncheckedNormal;
        if (Focused)
            radioButtonState = RadioButtonState.UncheckedHot;
        if (! Enabled)
            radioButtonState = RadioButtonState.UncheckedDisabled;
    }
    Size glyphSize = RadioButtonRenderer.GetGlyphSize (pevent.Graphics, radioButtonState);
    Rectangle rect = pevent.ClipRectangle;
    rect.Width -= glyphSize.Width;
    rect.Location = new Point (rect.Left + glyphSize.Width, rect.Top);
    RadioButtonRenderer.DrawRadioButton (pevent.Graphics, new System.Drawing.Point (0, rect.Height / 2 - glyphSize.Height / 2), rect, this.Text, this.Font, this.Focused, radioButtonState);
}
----------------------------------------

 protected override void OnPaint (PaintEventArgs pevent) {
    CheckBoxRenderer.DrawParentBackground (pevent.Graphics, pevent.ClipRectangle, this);
    RadioButtonState radioButtonState;
    if (Checked) {
        radioButtonState = RadioButtonState.CheckedNormal;
        if (Focused)
            radioButtonState = RadioButtonState.CheckedHot;
        if (! Enabled)
            radioButtonState = RadioButtonState.CheckedDisabled;        
    } else {
        radioButtonState = RadioButtonState.UncheckedNormal;
        if (Focused)
            radioButtonState = RadioButtonState.UncheckedHot;
        if (! Enabled)
            radioButtonState = RadioButtonState.UncheckedDisabled;         
    }
    Size glyphSize =RadioButtonRenderer.GetGlyphSize(pevent.Graphics, radioButtonState);
    Rectangle rect = pevent.ClipRectangle;
    rect.Width -= glyphSize.Width;
    rect.Location = new Point(rect.Left + glyphSize.Width, (rect.Top + rect.Height)/2);
    RadioButtonRenderer.DrawRadioButton(pevent.Graphics, rect, this.Text, this.Font, this.Focused, radioButtonState);
    Rectangle rect2 = pevent.ClipRectangle;
    rect2.Width = glyphSize.Width;
    rect2.Location = new Point (0, pevent.ClipRectangle.Height / 2 - glyphSize.Height / 2);   
    RadioButtonRenderer.DrawRadioButton (pevent.Graphics, rect2, this.Text, this.Font, this.Focused, radioButtonState);   
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
779
0
Gpt3D_Clone779_0.cs 1 21
Gpt3D_Clone779_0.cs 22 54
----------------------------------------

public void updatedatabase () {
    SqlConnection conn = new SqlConnection ("Data Source=" + txtserver.Text.Trim () + ";Initial Catalog=" + txtdatabase.Text.Trim () + ";User ID=" + txtuserid.Text.Trim () + ";Password=" + txtpwd.Text.Trim () + "");
    try {
        conn.Open ();
        string script = File.ReadAllText (Server.MapPath ("~/Script/DatingDemo.sql"));
        IEnumerable < string > commandStrings = Regex.Split (script, @"^\s*GO\s*$", RegexOptions.Multiline | RegexOptions.IgnoreCase);
        foreach (string commandString in commandStrings) {
            if (commandString.Trim () != "") {
                new SqlCommand (commandString, conn).ExecuteNonQuery ();
            }
        }
        lblmsg.Text = "Database updated successfully.";
    }
    catch (SqlException er) {
        lblmsg.Text = er.Message;
        lblmsg.ForeColor = Color.Red;
    }
    finally {
        conn.Close ();
    }
}
----------------------------------------

 public void updatedatabase()
{
    SqlConnection conn = null;
    try
    {
        conn = new SqlConnection("Data Source=" + txtserver.Text.Trim() + ";Initial Catalog=" + txtdatabase.Text.Trim() + ";User ID=" + txtuserid.Text.Trim() + ";Password=" + txtpwd.Text.Trim() + "");
        conn.Open();
        string script = File.ReadAllText(Server.MapPath("~/Script/DatingDemo.sql"));
        string[] commandStrings = Regex.Split(script, @"^\s*GO\s*$", RegexOptions.Multiline | RegexOptions.IgnoreCase);
        for (int i = 0; i < commandStrings.Length; i++)
        {
            if (!string.IsNullOrWhiteSpace(commandStrings[i]))
            {
                SqlCommand command = new SqlCommand(commandStrings[i], conn);
                command.ExecuteNonQuery();
            }
        }
        lblmsg.Text = "Database updated successfully.";
    }
    catch (SqlException er)
    {
        lblmsg.Text = er.Message;
        lblmsg.ForeColor = Color.Red;
    }
    finally
    {
        if (conn != null)
            conn.Close();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
779
1
Gpt3D_Clone779_1.cs 1 21
Gpt3D_Clone779_1.cs 22 59
----------------------------------------

public void updatedatabase () {
    SqlConnection conn = new SqlConnection ("Data Source=" + txtserver.Text.Trim () + ";Initial Catalog=" + txtdatabase.Text.Trim () + ";User ID=" + txtuserid.Text.Trim () + ";Password=" + txtpwd.Text.Trim () + "");
    try {
        conn.Open ();
        string script = File.ReadAllText (Server.MapPath ("~/Script/DatingDemo.sql"));
        IEnumerable < string > commandStrings = Regex.Split (script, @"^\s*GO\s*$", RegexOptions.Multiline | RegexOptions.IgnoreCase);
        foreach (string commandString in commandStrings) {
            if (commandString.Trim () != "") {
                new SqlCommand (commandString, conn).ExecuteNonQuery ();
            }
        }
        lblmsg.Text = "Database updated successfully.";
    }
    catch (SqlException er) {
        lblmsg.Text = er.Message;
        lblmsg.ForeColor = Color.Red;
    }
    finally {
        conn.Close ();
    }
}
----------------------------------------

 public void updatedatabase()
{
    SqlConnection conn = null;
    try
    {
        conn = new SqlConnection("Data Source=" + txtserver.Text.Trim() + ";Initial Catalog=" + txtdatabase.Text.Trim() + ";User ID=" + txtuserid.Text.Trim() + ";Password=" + txtpwd.Text.Trim() + "");
        conn.Open();
        string script = File.ReadAllText(Server.MapPath("~/Script/DatingDemo.sql"));
        string[] commandStrings = Regex.Split(script, @"^\s*GO\s*$",
            RegexOptions.Multiline | RegexOptions.IgnoreCase);
        foreach (string commandString in commandStrings)
        {
            if (commandString.Trim() != "")
            {
                SqlCommand command = new SqlCommand(commandString, conn);
                command.ExecuteNonQuery();
            }
        }
        lblmsg.Text = "Database updated successfully.";
    }
    catch (SqlException er)
    {
        lblmsg.Text = er.Message;
        lblmsg.ForeColor = Color.Red;
    }
    finally
    {
        if (conn != null)
            conn.Close();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
779
2
Gpt3D_Clone779_2.cs 1 21
Gpt3D_Clone779_2.cs 22 59
----------------------------------------

public void updatedatabase () {
    SqlConnection conn = new SqlConnection ("Data Source=" + txtserver.Text.Trim () + ";Initial Catalog=" + txtdatabase.Text.Trim () + ";User ID=" + txtuserid.Text.Trim () + ";Password=" + txtpwd.Text.Trim () + "");
    try {
        conn.Open ();
        string script = File.ReadAllText (Server.MapPath ("~/Script/DatingDemo.sql"));
        IEnumerable < string > commandStrings = Regex.Split (script, @"^\s*GO\s*$", RegexOptions.Multiline | RegexOptions.IgnoreCase);
        foreach (string commandString in commandStrings) {
            if (commandString.Trim () != "") {
                new SqlCommand (commandString, conn).ExecuteNonQuery ();
            }
        }
        lblmsg.Text = "Database updated successfully.";
    }
    catch (SqlException er) {
        lblmsg.Text = er.Message;
        lblmsg.ForeColor = Color.Red;
    }
    finally {
        conn.Close ();
    }
}
----------------------------------------

 public void updatedatabase()
{
    SqlConnection conn = null;
    try
    {
        conn = new SqlConnection("Data Source=" + txtserver.Text.Trim() + ";Initial Catalog=" + txtdatabase.Text.Trim() + ";User ID=" + txtuserid.Text.Trim() + ";Password=" + txtpwd.Text.Trim() + "");
        conn.Open();
        string script = File.ReadAllText(Server.MapPath("~/Script/DatingDemo.sql"));
        IEnumerable<string> commandStrings = Regex.Split(script, @"^\s*GO\s*$",
            RegexOptions.Multiline | RegexOptions.IgnoreCase);
        foreach (string commandString in commandStrings)
        {
            if (commandString.Trim() != "")
            {
                SqlCommand command = new SqlCommand(commandString, conn);
                command.ExecuteNonQuery();
            }
        }
        lblmsg.Text = "Database updated successfully.";
    }
    catch (SqlException er)
    {
        lblmsg.Text = er.Message;
        lblmsg.ForeColor = Color.Red;
    }
    finally
    {
        if (conn != null)
            conn.Close();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
779
3
Gpt3D_Clone779_3.cs 1 21
Gpt3D_Clone779_3.cs 22 55
----------------------------------------

public void updatedatabase () {
    SqlConnection conn = new SqlConnection ("Data Source=" + txtserver.Text.Trim () + ";Initial Catalog=" + txtdatabase.Text.Trim () + ";User ID=" + txtuserid.Text.Trim () + ";Password=" + txtpwd.Text.Trim () + "");
    try {
        conn.Open ();
        string script = File.ReadAllText (Server.MapPath ("~/Script/DatingDemo.sql"));
        IEnumerable < string > commandStrings = Regex.Split (script, @"^\s*GO\s*$", RegexOptions.Multiline | RegexOptions.IgnoreCase);
        foreach (string commandString in commandStrings) {
            if (commandString.Trim () != "") {
                new SqlCommand (commandString, conn).ExecuteNonQuery ();
            }
        }
        lblmsg.Text = "Database updated successfully.";
    }
    catch (SqlException er) {
        lblmsg.Text = er.Message;
        lblmsg.ForeColor = Color.Red;
    }
    finally {
        conn.Close ();
    }
}
----------------------------------------

 public void updatedatabase()
{
    using (SqlConnection conn = new SqlConnection("Data Source=" + txtserver.Text.Trim() + ";Initial Catalog=" + txtdatabase.Text.Trim() + ";User ID=" + txtuserid.Text.Trim() + ";Password=" + txtpwd.Text.Trim() + ""))
    {
        try
        {
            conn.Open();
            string script = File.ReadAllText(Server.MapPath("~/Script/DatingDemo.sql"));
            string[] commandStrings = Regex.Split(script, @"^\s*GO\s*$", RegexOptions.Multiline);
            foreach (var commandString in commandStrings)
            {
                if (!string.IsNullOrWhiteSpace(commandString))
                {
                    using (SqlCommand command = new SqlCommand(commandString, conn))
                    {
                        command.ExecuteNonQuery();
                    }
                }
            }
            lblmsg.Text = "Database updated successfully.";
        }
        catch (SqlException er)
        {
            lblmsg.Text = er.Message;
            lblmsg.ForeColor = Color.Red;
        }
        finally
        {
            conn.Close();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
779
4
Gpt3D_Clone779_4.cs 1 21
Gpt3D_Clone779_4.cs 22 55
----------------------------------------

public void updatedatabase () {
    SqlConnection conn = new SqlConnection ("Data Source=" + txtserver.Text.Trim () + ";Initial Catalog=" + txtdatabase.Text.Trim () + ";User ID=" + txtuserid.Text.Trim () + ";Password=" + txtpwd.Text.Trim () + "");
    try {
        conn.Open ();
        string script = File.ReadAllText (Server.MapPath ("~/Script/DatingDemo.sql"));
        IEnumerable < string > commandStrings = Regex.Split (script, @"^\s*GO\s*$", RegexOptions.Multiline | RegexOptions.IgnoreCase);
        foreach (string commandString in commandStrings) {
            if (commandString.Trim () != "") {
                new SqlCommand (commandString, conn).ExecuteNonQuery ();
            }
        }
        lblmsg.Text = "Database updated successfully.";
    }
    catch (SqlException er) {
        lblmsg.Text = er.Message;
        lblmsg.ForeColor = Color.Red;
    }
    finally {
        conn.Close ();
    }
}
----------------------------------------

 public void updatedatabase()
{
    using (SqlConnection conn = new SqlConnection("Data Source=" + txtserver.Text.Trim() + ";Initial Catalog=" + txtdatabase.Text.Trim() + ";User ID=" + txtuserid.Text.Trim() + ";Password=" + txtpwd.Text.Trim() + ""))
    {
        try
        {
            conn.Open();
            string script = File.ReadAllText(Server.MapPath("~/Script/DatingDemo.sql"));
            string[] commandStrings = script.Split(new[] { "GO" }, StringSplitOptions.RemoveEmptyEntries);
            foreach (string commandString in commandStrings)
            {
                if (!string.IsNullOrWhiteSpace(commandString))
                {
                    using (SqlCommand command = new SqlCommand(commandString, conn))
                    {
                        command.ExecuteNonQuery();
                    }
                }
            }
            lblmsg.Text = "Database updated successfully.";
        }
        catch (SqlException er)
        {
            lblmsg.Text = er.Message;
            lblmsg.ForeColor = Color.Red;
        }
        finally
        {
            conn.Close();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
779
5
Gpt3D_Clone779_5.cs 1 21
Gpt3D_Clone779_5.cs 22 53
----------------------------------------

public void updatedatabase () {
    SqlConnection conn = new SqlConnection ("Data Source=" + txtserver.Text.Trim () + ";Initial Catalog=" + txtdatabase.Text.Trim () + ";User ID=" + txtuserid.Text.Trim () + ";Password=" + txtpwd.Text.Trim () + "");
    try {
        conn.Open ();
        string script = File.ReadAllText (Server.MapPath ("~/Script/DatingDemo.sql"));
        IEnumerable < string > commandStrings = Regex.Split (script, @"^\s*GO\s*$", RegexOptions.Multiline | RegexOptions.IgnoreCase);
        foreach (string commandString in commandStrings) {
            if (commandString.Trim () != "") {
                new SqlCommand (commandString, conn).ExecuteNonQuery ();
            }
        }
        lblmsg.Text = "Database updated successfully.";
    }
    catch (SqlException er) {
        lblmsg.Text = er.Message;
        lblmsg.ForeColor = Color.Red;
    }
    finally {
        conn.Close ();
    }
}
----------------------------------------

 public void updatedatabase()
{
    SqlConnection conn = new SqlConnection("Data Source=" + txtserver.Text.Trim() + ";Initial Catalog=" + txtdatabase.Text.Trim() + ";User ID=" + txtuserid.Text.Trim() + ";Password=" + txtpwd.Text.Trim() + "");
    try
    {
        conn.Open();
        string script = File.ReadAllText(Server.MapPath("~/Script/DatingDemo.sql"));
        string[] commandStrings = Regex.Split(script, @"^\s*GO\s*$", RegexOptions.Multiline);
        for (int i = 0; i < commandStrings.Length; i++)
        {
            if (commandStrings[i].Trim() != "")
            {
                using (SqlCommand command = new SqlCommand(commandStrings[i], conn))
                {
                    command.ExecuteNonQuery();
                }
            }
        }
        lblmsg.Text = "Database updated successfully.";
    }
    catch (SqlException er)
    {
        lblmsg.Text = er.Message;
        lblmsg.ForeColor = Color.Red;
    }
    finally
    {
        conn.Close();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
779
6
Gpt3D_Clone779_6.cs 1 21
Gpt3D_Clone779_6.cs 22 53
----------------------------------------

public void updatedatabase () {
    SqlConnection conn = new SqlConnection ("Data Source=" + txtserver.Text.Trim () + ";Initial Catalog=" + txtdatabase.Text.Trim () + ";User ID=" + txtuserid.Text.Trim () + ";Password=" + txtpwd.Text.Trim () + "");
    try {
        conn.Open ();
        string script = File.ReadAllText (Server.MapPath ("~/Script/DatingDemo.sql"));
        IEnumerable < string > commandStrings = Regex.Split (script, @"^\s*GO\s*$", RegexOptions.Multiline | RegexOptions.IgnoreCase);
        foreach (string commandString in commandStrings) {
            if (commandString.Trim () != "") {
                new SqlCommand (commandString, conn).ExecuteNonQuery ();
            }
        }
        lblmsg.Text = "Database updated successfully.";
    }
    catch (SqlException er) {
        lblmsg.Text = er.Message;
        lblmsg.ForeColor = Color.Red;
    }
    finally {
        conn.Close ();
    }
}
----------------------------------------

 public void updatedatabase()
{
    SqlConnection conn = new SqlConnection("Data Source=" + txtserver.Text.Trim() + ";Initial Catalog=" + txtdatabase.Text.Trim() + ";User ID=" + txtuserid.Text.Trim() + ";Password=" + txtpwd.Text.Trim() + "");
    try
    {
        conn.Open();
        string script = File.ReadAllText(Server.MapPath("~/Script/DatingDemo.sql"));
        string[] commandStrings = script.Split(new[] { "GO" }, StringSplitOptions.RemoveEmptyEntries);
        foreach (string commandString in commandStrings)
        {
            if (!string.IsNullOrWhiteSpace(commandString))
            {
                using (SqlCommand command = new SqlCommand(commandString, conn))
                {
                    command.ExecuteNonQuery();
                }
            }
        }
        lblmsg.Text = "Database updated successfully.";
    }
    catch (SqlException er)
    {
        lblmsg.Text = er.Message;
        lblmsg.ForeColor = Color.Red;
    }
    finally
    {
        conn.Close();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
779
7
Gpt3D_Clone779_7.cs 1 21
Gpt3D_Clone779_7.cs 22 51
----------------------------------------

public void updatedatabase () {
    SqlConnection conn = new SqlConnection ("Data Source=" + txtserver.Text.Trim () + ";Initial Catalog=" + txtdatabase.Text.Trim () + ";User ID=" + txtuserid.Text.Trim () + ";Password=" + txtpwd.Text.Trim () + "");
    try {
        conn.Open ();
        string script = File.ReadAllText (Server.MapPath ("~/Script/DatingDemo.sql"));
        IEnumerable < string > commandStrings = Regex.Split (script, @"^\s*GO\s*$", RegexOptions.Multiline | RegexOptions.IgnoreCase);
        foreach (string commandString in commandStrings) {
            if (commandString.Trim () != "") {
                new SqlCommand (commandString, conn).ExecuteNonQuery ();
            }
        }
        lblmsg.Text = "Database updated successfully.";
    }
    catch (SqlException er) {
        lblmsg.Text = er.Message;
        lblmsg.ForeColor = Color.Red;
    }
    finally {
        conn.Close ();
    }
}
----------------------------------------

 public void updatedatabase()
{
    SqlConnection conn = new SqlConnection("Data Source=" + txtserver.Text.Trim() + ";Initial Catalog=" + txtdatabase.Text.Trim() + ";User ID=" + txtuserid.Text.Trim() + ";Password=" + txtpwd.Text.Trim() + "");
    try
    {
        conn.Open();
        string script = File.ReadAllText(Server.MapPath("~/Script/DatingDemo.sql"));
        string[] commandStrings = Regex.Split(script, @"^\s*GO\s*$", RegexOptions.Multiline);
        for (int i = 0; i < commandStrings.Length; i++)
        {
            if (commandStrings[i].Trim() != "")
            {
                SqlCommand command = new SqlCommand(commandStrings[i], conn);
                command.ExecuteNonQuery();
            }
        }
        lblmsg.Text = "Database updated successfully.";
    }
    catch (SqlException er)
    {
        lblmsg.Text = er.Message;
        lblmsg.ForeColor = Color.Red;
    }
    finally
    {
        conn.Close();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
779
8
Gpt3D_Clone779_8.cs 1 21
Gpt3D_Clone779_8.cs 22 47
----------------------------------------

public void updatedatabase () {
    SqlConnection conn = new SqlConnection ("Data Source=" + txtserver.Text.Trim () + ";Initial Catalog=" + txtdatabase.Text.Trim () + ";User ID=" + txtuserid.Text.Trim () + ";Password=" + txtpwd.Text.Trim () + "");
    try {
        conn.Open ();
        string script = File.ReadAllText (Server.MapPath ("~/Script/DatingDemo.sql"));
        IEnumerable < string > commandStrings = Regex.Split (script, @"^\s*GO\s*$", RegexOptions.Multiline | RegexOptions.IgnoreCase);
        foreach (string commandString in commandStrings) {
            if (commandString.Trim () != "") {
                new SqlCommand (commandString, conn).ExecuteNonQuery ();
            }
        }
        lblmsg.Text = "Database updated successfully.";
    }
    catch (SqlException er) {
        lblmsg.Text = er.Message;
        lblmsg.ForeColor = Color.Red;
    }
    finally {
        conn.Close ();
    }
}
----------------------------------------

  public void updatedatabase()
{
    using (SqlConnection conn = new SqlConnection("Data Source=" + txtserver.Text.Trim() + ";Initial Catalog=" + txtdatabase.Text.Trim() + ";User ID=" + txtuserid.Text.Trim() + ";Password=" + txtpwd.Text.Trim() + ""))
    {
        try
        {
            conn.Open();
            string script = File.ReadAllText(Server.MapPath("~/Script/DatingDemo.sql"));
            string[] commandStrings = Regex.Split(script, @"^\s*GO\s*$", RegexOptions.Multiline);
            SqlCommand command = new SqlCommand(script, conn);
            command.ExecuteNonQuery();
            lblmsg.Text = "Database updated successfully.";
        }
        catch (SqlException er)
        {
            lblmsg.Text = er.Message;
            lblmsg.ForeColor = Color.Red;
        }
        finally
        {
            conn.Close();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
783
0
Gpt3D_Clone783_0.cs 1 16
Gpt3D_Clone783_0.cs 17 35
----------------------------------------

private void panel1_MouseMove (object sender, MouseEventArgs e) {
    using (Graphics g = panel1.CreateGraphics ())
    {
        using (Pen clear_pen = new Pen (panel1.BackColor, PEN_WIDTH))
        {
            clear_pen.StartCap = START_CAP;
            clear_pen.EndCap = END_CAP;
            g.DrawLine (clear_pen, mAnchorPoint, mPreviousPoint);
        } mPreviousPoint = e.Location;
        using (Pen draw_pen = new Pen (Color.Black, PEN_WIDTH))
        {
            draw_pen.StartCap = START_CAP;
            draw_pen.EndCap = END_CAP;
            g.DrawLine (draw_pen, mAnchorPoint, e.Location);
        }}
}
----------------------------------------

 private void panel1_MouseMove (object sender, MouseEventArgs e) {
    using (Graphics g = panel1.CreateGraphics ())
    {
        using (Pen clear_pen = new Pen (panel1.BackColor, 6))
        {
            clear_pen.StartCap = System.Drawing.Drawing2D.LineCap.DiamondAnchor;
            clear_pen.EndCap = System.Drawing.Drawing2D.LineCap.DiamondAnchor;
            g.DrawLine (clear_pen, mAnchorPoint, mPreviousPoint);
        } mPreviousPoint = e.Location;
        using (Pen draw_pen = new Pen (Color.Red, 6))
        {
            draw_pen.StartCap = System.Drawing.Drawing2D.LineCap.DiamondAnchor;
            draw_pen.EndCap = System.Drawing.Drawing2D.LineCap.DiamondAnchor;
            g.DrawLine (draw_pen, mAnchorPoint, e.Location);
        }
   }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
783
1
Gpt3D_Clone783_1.cs 1 16
Gpt3D_Clone783_1.cs 17 35
----------------------------------------

private void panel1_MouseMove (object sender, MouseEventArgs e) {
    using (Graphics g = panel1.CreateGraphics ())
    {
        using (Pen clear_pen = new Pen (panel1.BackColor, PEN_WIDTH))
        {
            clear_pen.StartCap = START_CAP;
            clear_pen.EndCap = END_CAP;
            g.DrawLine (clear_pen, mAnchorPoint, mPreviousPoint);
        } mPreviousPoint = e.Location;
        using (Pen draw_pen = new Pen (Color.Black, PEN_WIDTH))
        {
            draw_pen.StartCap = START_CAP;
            draw_pen.EndCap = END_CAP;
            g.DrawLine (draw_pen, mAnchorPoint, e.Location);
        }}
}
----------------------------------------

 private void panel1_MouseMove (object sender, MouseEventArgs e) {
    using (Graphics g = panel1.CreateGraphics ())
    {
        using (Pen clear_pen = new Pen (panel1.BackColor, 4))
        {
            clear_pen.StartCap = System.Drawing.Drawing2D.LineCap.ArrowAnchor;
            clear_pen.EndCap = System.Drawing.Drawing2D.LineCap.ArrowAnchor;
            g.DrawLine (clear_pen, mAnchorPoint, mPreviousPoint);
        } mPreviousPoint = e.Location;
        using (Pen draw_pen = new Pen (Color.DarkGreen, 4))
        {
            draw_pen.StartCap = System.Drawing.Drawing2D.LineCap.ArrowAnchor;
            draw_pen.EndCap = System.Drawing.Drawing2D.LineCap.ArrowAnchor;
            g.DrawLine (draw_pen, mAnchorPoint, e.Location);
        }
   }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
783
2
Gpt3D_Clone783_2.cs 1 16
Gpt3D_Clone783_2.cs 17 35
----------------------------------------

private void panel1_MouseMove (object sender, MouseEventArgs e) {
    using (Graphics g = panel1.CreateGraphics ())
    {
        using (Pen clear_pen = new Pen (panel1.BackColor, PEN_WIDTH))
        {
            clear_pen.StartCap = START_CAP;
            clear_pen.EndCap = END_CAP;
            g.DrawLine (clear_pen, mAnchorPoint, mPreviousPoint);
        } mPreviousPoint = e.Location;
        using (Pen draw_pen = new Pen (Color.Black, PEN_WIDTH))
        {
            draw_pen.StartCap = START_CAP;
            draw_pen.EndCap = END_CAP;
            g.DrawLine (draw_pen, mAnchorPoint, e.Location);
        }}
}
----------------------------------------

 private void panel1_MouseMove (object sender, MouseEventArgs e) {
    using (Graphics g = panel1.CreateGraphics ())
    {
        using (Pen clear_pen = new Pen (panel1.BackColor, 12))
        {
            clear_pen.StartCap = System.Drawing.Drawing2D.LineCap.RoundAnchor;
            clear_pen.EndCap = System.Drawing.Drawing2D.LineCap.RoundAnchor;
            g.DrawLine (clear_pen, mAnchorPoint, mPreviousPoint);
        } mPreviousPoint = e.Location;
        using (Pen draw_pen = new Pen (Color.Orange, 12))
        {
            draw_pen.StartCap = System.Drawing.Drawing2D.LineCap.RoundAnchor;
            draw_pen.EndCap = System.Drawing.Drawing2D.LineCap.RoundAnchor;
            g.DrawLine (draw_pen, mAnchorPoint, e.Location);
        }
   }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
783
3
Gpt3D_Clone783_3.cs 1 16
Gpt3D_Clone783_3.cs 17 35
----------------------------------------

private void panel1_MouseMove (object sender, MouseEventArgs e) {
    using (Graphics g = panel1.CreateGraphics ())
    {
        using (Pen clear_pen = new Pen (panel1.BackColor, PEN_WIDTH))
        {
            clear_pen.StartCap = START_CAP;
            clear_pen.EndCap = END_CAP;
            g.DrawLine (clear_pen, mAnchorPoint, mPreviousPoint);
        } mPreviousPoint = e.Location;
        using (Pen draw_pen = new Pen (Color.Black, PEN_WIDTH))
        {
            draw_pen.StartCap = START_CAP;
            draw_pen.EndCap = END_CAP;
            g.DrawLine (draw_pen, mAnchorPoint, e.Location);
        }}
}
----------------------------------------

 private void panel1_MouseMove (object sender, MouseEventArgs e) {
    using (Graphics g = panel1.CreateGraphics ())
    {
        using (Pen clear_pen = new Pen (panel1.BackColor, 5))
        {
            clear_pen.StartCap = System.Drawing.Drawing2D.LineCap.NoAnchor;
            clear_pen.EndCap = System.Drawing.Drawing2D.LineCap.NoAnchor;
            g.DrawLine (clear_pen, mAnchorPoint, mPreviousPoint);
        } mPreviousPoint = e.Location;
        using (Pen draw_pen = new Pen (Color.Purple, 5))
        {
            draw_pen.StartCap = System.Drawing.Drawing2D.LineCap.NoAnchor;
            draw_pen.EndCap = System.Drawing.Drawing2D.LineCap.NoAnchor;
            g.DrawLine (draw_pen, mAnchorPoint, e.Location);
        }
   }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
783
4
Gpt3D_Clone783_4.cs 1 16
Gpt3D_Clone783_4.cs 17 35
----------------------------------------

private void panel1_MouseMove (object sender, MouseEventArgs e) {
    using (Graphics g = panel1.CreateGraphics ())
    {
        using (Pen clear_pen = new Pen (panel1.BackColor, PEN_WIDTH))
        {
            clear_pen.StartCap = START_CAP;
            clear_pen.EndCap = END_CAP;
            g.DrawLine (clear_pen, mAnchorPoint, mPreviousPoint);
        } mPreviousPoint = e.Location;
        using (Pen draw_pen = new Pen (Color.Black, PEN_WIDTH))
        {
            draw_pen.StartCap = START_CAP;
            draw_pen.EndCap = END_CAP;
            g.DrawLine (draw_pen, mAnchorPoint, e.Location);
        }}
}
----------------------------------------

 private void panel1_MouseMove (object sender, MouseEventArgs e) {
    using (Graphics g = panel1.CreateGraphics ())
    {
        using (Pen clear_pen = new Pen (panel1.BackColor, 10))
        {
            clear_pen.StartCap = System.Drawing.Drawing2D.LineCap.Round;
            clear_pen.EndCap = System.Drawing.Drawing2D.LineCap.Round;
            g.DrawLine (clear_pen, mAnchorPoint, mPreviousPoint);
        } mPreviousPoint = e.Location;
        using (Pen draw_pen = new Pen (Color.Black, 10))
        {
            draw_pen.StartCap = System.Drawing.Drawing2D.LineCap.Round;
            draw_pen.EndCap = System.Drawing.Drawing2D.LineCap.Round;
            g.DrawLine (draw_pen, mAnchorPoint, e.Location);
        }
   }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
783
5
Gpt3D_Clone783_5.cs 1 16
Gpt3D_Clone783_5.cs 17 35
----------------------------------------

private void panel1_MouseMove (object sender, MouseEventArgs e) {
    using (Graphics g = panel1.CreateGraphics ())
    {
        using (Pen clear_pen = new Pen (panel1.BackColor, PEN_WIDTH))
        {
            clear_pen.StartCap = START_CAP;
            clear_pen.EndCap = END_CAP;
            g.DrawLine (clear_pen, mAnchorPoint, mPreviousPoint);
        } mPreviousPoint = e.Location;
        using (Pen draw_pen = new Pen (Color.Black, PEN_WIDTH))
        {
            draw_pen.StartCap = START_CAP;
            draw_pen.EndCap = END_CAP;
            g.DrawLine (draw_pen, mAnchorPoint, e.Location);
        }}
}
----------------------------------------

 private void panel1_MouseMove (object sender, MouseEventArgs e) {
    using (Graphics g = panel1.CreateGraphics ())
    {
        using (Pen clear_pen = new Pen (panel1.BackColor, 4))
        {
            clear_pen.StartCap = System.Drawing.Drawing2D.LineCap.Custom;
            clear_pen.EndCap = System.Drawing.Drawing2D.LineCap.Custom;
            g.DrawLine (clear_pen, mAnchorPoint, mPreviousPoint);
        } mPreviousPoint = e.Location;
        using (Pen draw_pen = new Pen (Color.DarkGreen, 4))
        {
            draw_pen.StartCap = System.Drawing.Drawing2D.LineCap.Custom;
            draw_pen.EndCap = System.Drawing.Drawing2D.LineCap.Custom;
            g.DrawLine (draw_pen, mAnchorPoint, e.Location);
        }
   }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
783
6
Gpt3D_Clone783_6.cs 1 16
Gpt3D_Clone783_6.cs 17 35
----------------------------------------

private void panel1_MouseMove (object sender, MouseEventArgs e) {
    using (Graphics g = panel1.CreateGraphics ())
    {
        using (Pen clear_pen = new Pen (panel1.BackColor, PEN_WIDTH))
        {
            clear_pen.StartCap = START_CAP;
            clear_pen.EndCap = END_CAP;
            g.DrawLine (clear_pen, mAnchorPoint, mPreviousPoint);
        } mPreviousPoint = e.Location;
        using (Pen draw_pen = new Pen (Color.Black, PEN_WIDTH))
        {
            draw_pen.StartCap = START_CAP;
            draw_pen.EndCap = END_CAP;
            g.DrawLine (draw_pen, mAnchorPoint, e.Location);
        }}
}
----------------------------------------

 private void panel1_MouseMove (object sender, MouseEventArgs e) {
    using (Graphics g = panel1.CreateGraphics ())
    {
        using (Pen clear_pen = new Pen (panel1.BackColor, 7))
        {
            clear_pen.StartCap = System.Drawing.Drawing2D.LineCap.Square;
            clear_pen.EndCap = System.Drawing.Drawing2D.LineCap.Square;
            g.DrawLine (clear_pen, mAnchorPoint, mPreviousPoint);
        } mPreviousPoint = e.Location;
        using (Pen draw_pen = new Pen (Color.Black, 7))
        {
            draw_pen.StartCap = System.Drawing.Drawing2D.LineCap.Square;
            draw_pen.EndCap = System.Drawing.Drawing2D.LineCap.Square;
            g.DrawLine (draw_pen, mAnchorPoint, e.Location);
        }
   }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
783
7
Gpt3D_Clone783_7.cs 1 16
Gpt3D_Clone783_7.cs 17 35
----------------------------------------

private void panel1_MouseMove (object sender, MouseEventArgs e) {
    using (Graphics g = panel1.CreateGraphics ())
    {
        using (Pen clear_pen = new Pen (panel1.BackColor, PEN_WIDTH))
        {
            clear_pen.StartCap = START_CAP;
            clear_pen.EndCap = END_CAP;
            g.DrawLine (clear_pen, mAnchorPoint, mPreviousPoint);
        } mPreviousPoint = e.Location;
        using (Pen draw_pen = new Pen (Color.Black, PEN_WIDTH))
        {
            draw_pen.StartCap = START_CAP;
            draw_pen.EndCap = END_CAP;
            g.DrawLine (draw_pen, mAnchorPoint, e.Location);
        }}
}
----------------------------------------

 private void panel1_MouseMove (object sender, MouseEventArgs e) {
    using (Graphics g = panel1.CreateGraphics ())
    {
        using (Pen clear_pen = new Pen (panel1.BackColor, 8))
        {
            clear_pen.StartCap = System.Drawing.Drawing2D.LineCap.Triangle;
            clear_pen.EndCap = System.Drawing.Drawing2D.LineCap.Triangle;
            g.DrawLine (clear_pen, mAnchorPoint, mPreviousPoint);
        } mPreviousPoint = e.Location;
        using (Pen draw_pen = new Pen (Color.Black, 8))
        {
            draw_pen.StartCap = System.Drawing.Drawing2D.LineCap.Triangle;
            draw_pen.EndCap = System.Drawing.Drawing2D.LineCap.Triangle;
            g.DrawLine (draw_pen, mAnchorPoint, e.Location);
        }
   }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
783
8
Gpt3D_Clone783_8.cs 1 16
Gpt3D_Clone783_8.cs 17 35
----------------------------------------

private void panel1_MouseMove (object sender, MouseEventArgs e) {
    using (Graphics g = panel1.CreateGraphics ())
    {
        using (Pen clear_pen = new Pen (panel1.BackColor, PEN_WIDTH))
        {
            clear_pen.StartCap = START_CAP;
            clear_pen.EndCap = END_CAP;
            g.DrawLine (clear_pen, mAnchorPoint, mPreviousPoint);
        } mPreviousPoint = e.Location;
        using (Pen draw_pen = new Pen (Color.Black, PEN_WIDTH))
        {
            draw_pen.StartCap = START_CAP;
            draw_pen.EndCap = END_CAP;
            g.DrawLine (draw_pen, mAnchorPoint, e.Location);
        }}
}
----------------------------------------

 private void panel1_MouseMove (object sender, MouseEventArgs e) {
    using (Graphics g = panel1.CreateGraphics ())
    {
        using (Pen clear_pen = new Pen (panel1.BackColor, 10))
        {
            clear_pen.StartCap = System.Drawing.Drawing2D.LineCap.Flat;
            clear_pen.EndCap = System.Drawing.Drawing2D.LineCap.Flat;
            g.DrawLine (clear_pen, mAnchorPoint, mPreviousPoint);
        } mPreviousPoint = e.Location;
        using (Pen draw_pen = new Pen (Color.Blue, 10))
        {
            draw_pen.StartCap = System.Drawing.Drawing2D.LineCap.Flat;
            draw_pen.EndCap = System.Drawing.Drawing2D.LineCap.Flat;
            g.DrawLine (draw_pen, mAnchorPoint, e.Location);
        }
   }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
784
0
Gpt3D_Clone784_0.cs 1 33
Gpt3D_Clone784_0.cs 34 62
----------------------------------------

public static void RecycleApplicationPool (string serverName, string appPoolName) {
    if (! string.IsNullOrEmpty (serverName) && ! string.IsNullOrEmpty (appPoolName)) {
        try {
            using (ServerManager manager = ServerManager.OpenRemote (serverName))
            {
                ApplicationPool appPool = manager.ApplicationPools.FirstOrDefault (ap => ap.Name == appPoolName);
                if (appPool != null) {
                    bool appPoolRunning = appPool.State == ObjectState.Started || appPool.State == ObjectState.Starting;
                    bool appPoolStopped = appPool.State == ObjectState.Stopped || appPool.State == ObjectState.Stopping;
                    if (appPoolRunning) {
                        while (appPool.State == ObjectState.Starting) {
                            System.Threading.Thread.Sleep (1000);
                        }
                        if (appPool.State != ObjectState.Stopped) {
                            appPool.Stop ();
                        }
                        appPoolStopped = true;
                    }
                    if (appPoolStopped && appPoolRunning) {
                        while (appPool.State == ObjectState.Stopping) {
                            System.Threading.Thread.Sleep (1000);
                        }
                        appPool.Start ();
                    }
                } else {
                    throw new Exception (string.Format ("An Application Pool does not exist with the name {0}.{1}", serverName, appPoolName));
                }
            }}
        catch (Exception ex) {
            throw new Exception (string.Format ("Unable to restart the application pools for {0}.{1}", serverName, appPoolName), ex.InnerException);
        }
    }
}
----------------------------------------

  public static void RecycleApplicationPool (string serverName, string appPoolName) {
        if (! string.IsNullOrEmpty (serverName) && ! string.IsNullOrEmpty (appPoolName)) {
            try {
                using (ServerManager manager = ServerManager.OpenRemote (serverName))
                {
                    ApplicationPool appPool = manager.ApplicationPools.FirstOrDefault (ap => ap.Name == appPoolName);
                    if (appPool != null) {
                        if (appPool.State == ObjectState.Started || appPool.State == ObjectState.Starting) {
                            while (appPool.State == ObjectState.Starting) {
                                System.Threading.Thread.Sleep (1000);
                            }
                            appPool.Stop ();
                            while (appPool.State == ObjectState.Stopped || appPool.State == ObjectState.Stopping) {
                                System.Threading.Thread.Sleep (1000);
                            }
                            appPool.Start ();
                        }
                        else if (appPool.State == ObjectState.Stopped || appPool.State == ObjectState.Stopping) {
                            appPool.Start ();
                        }
                    }}
                }
            catch (Exception ex) {
                throw new Exception (string.Format ("Unable to restart the application pools for {0}.{1}", serverName, appPoolName), ex.InnerException);
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
784
1
Gpt3D_Clone784_1.cs 1 33
Gpt3D_Clone784_1.cs 34 62
----------------------------------------

public static void RecycleApplicationPool (string serverName, string appPoolName) {
    if (! string.IsNullOrEmpty (serverName) && ! string.IsNullOrEmpty (appPoolName)) {
        try {
            using (ServerManager manager = ServerManager.OpenRemote (serverName))
            {
                ApplicationPool appPool = manager.ApplicationPools.FirstOrDefault (ap => ap.Name == appPoolName);
                if (appPool != null) {
                    bool appPoolRunning = appPool.State == ObjectState.Started || appPool.State == ObjectState.Starting;
                    bool appPoolStopped = appPool.State == ObjectState.Stopped || appPool.State == ObjectState.Stopping;
                    if (appPoolRunning) {
                        while (appPool.State == ObjectState.Starting) {
                            System.Threading.Thread.Sleep (1000);
                        }
                        if (appPool.State != ObjectState.Stopped) {
                            appPool.Stop ();
                        }
                        appPoolStopped = true;
                    }
                    if (appPoolStopped && appPoolRunning) {
                        while (appPool.State == ObjectState.Stopping) {
                            System.Threading.Thread.Sleep (1000);
                        }
                        appPool.Start ();
                    }
                } else {
                    throw new Exception (string.Format ("An Application Pool does not exist with the name {0}.{1}", serverName, appPoolName));
                }
            }}
        catch (Exception ex) {
            throw new Exception (string.Format ("Unable to restart the application pools for {0}.{1}", serverName, appPoolName), ex.InnerException);
        }
    }
}
----------------------------------------

  public static void RecycleApplicationPool (string serverName, string appPoolName) {
        if (! string.IsNullOrEmpty (serverName) && ! string.IsNullOrEmpty (appPoolName)) {
            try {
                using (ServerManager manager = ServerManager.OpenRemote (serverName))
                {
                    ApplicationPool appPool = manager.ApplicationPools.FirstOrDefault (ap => ap.Name == appPoolName);
                    if (appPool != null) {
                        if (appPool.State == ObjectState.Started || appPool.State == ObjectState.Starting) {
                            while (appPool.State == ObjectState.Starting) {
                                System.Threading.Thread.Sleep (1000);
                            }
                            while (appPool.State != ObjectState.Stopped) {
                                appPool.Stop ();
                                System.Threading.Thread.Sleep (1000);
                            }
                            appPool.Start ();
                        }
                        else if (appPool.State == ObjectState.Stopped || appPool.State == ObjectState.Stopping) {
                            appPool.Start ();
                        }
                    }}
                }
            catch (Exception ex) {
                throw new Exception (string.Format ("Unable to restart the application pools for {0}.{1}", serverName, appPoolName), ex.InnerException);
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
784
3
Gpt3D_Clone784_3.cs 1 33
Gpt3D_Clone784_3.cs 34 59
----------------------------------------

public static void RecycleApplicationPool (string serverName, string appPoolName) {
    if (! string.IsNullOrEmpty (serverName) && ! string.IsNullOrEmpty (appPoolName)) {
        try {
            using (ServerManager manager = ServerManager.OpenRemote (serverName))
            {
                ApplicationPool appPool = manager.ApplicationPools.FirstOrDefault (ap => ap.Name == appPoolName);
                if (appPool != null) {
                    bool appPoolRunning = appPool.State == ObjectState.Started || appPool.State == ObjectState.Starting;
                    bool appPoolStopped = appPool.State == ObjectState.Stopped || appPool.State == ObjectState.Stopping;
                    if (appPoolRunning) {
                        while (appPool.State == ObjectState.Starting) {
                            System.Threading.Thread.Sleep (1000);
                        }
                        if (appPool.State != ObjectState.Stopped) {
                            appPool.Stop ();
                        }
                        appPoolStopped = true;
                    }
                    if (appPoolStopped && appPoolRunning) {
                        while (appPool.State == ObjectState.Stopping) {
                            System.Threading.Thread.Sleep (1000);
                        }
                        appPool.Start ();
                    }
                } else {
                    throw new Exception (string.Format ("An Application Pool does not exist with the name {0}.{1}", serverName, appPoolName));
                }
            }}
        catch (Exception ex) {
            throw new Exception (string.Format ("Unable to restart the application pools for {0}.{1}", serverName, appPoolName), ex.InnerException);
        }
    }
}
----------------------------------------

 public static void RecycleApplicationPool (string serverName, string appPoolName) {
        if (! string.IsNullOrEmpty (serverName) && ! string.IsNullOrEmpty (appPoolName)) {
            try {
                using (ServerManager manager = ServerManager.OpenRemote (serverName))
                {
                    ApplicationPool appPool = manager.ApplicationPools.FirstOrDefault (ap => ap.Name == appPoolName);
                    if (appPool != null) {
                        if (appPool.State == ObjectState.Started || appPool.State == ObjectState.Starting) {
                            while (appPool.State == ObjectState.Starting) {
                                System.Threading.Thread.Sleep (1000);
                            }
                            appPool.Recycle ();
                        }
                        else if (appPool.State == ObjectState.Stopped || appPool.State == ObjectState.Stopping) {
                            appPool.WaitForState (ObjectState.Stopped);
                            appPool.Start ();
                        }
                    }}
                }
            catch (Exception ex) {
                throw new Exception (string.Format ("Unable to restart the application pools for {0}.{1}", serverName, appPoolName), ex.InnerException);
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
784
4
Gpt3D_Clone784_4.cs 1 33
Gpt3D_Clone784_4.cs 34 60
----------------------------------------

public static void RecycleApplicationPool (string serverName, string appPoolName) {
    if (! string.IsNullOrEmpty (serverName) && ! string.IsNullOrEmpty (appPoolName)) {
        try {
            using (ServerManager manager = ServerManager.OpenRemote (serverName))
            {
                ApplicationPool appPool = manager.ApplicationPools.FirstOrDefault (ap => ap.Name == appPoolName);
                if (appPool != null) {
                    bool appPoolRunning = appPool.State == ObjectState.Started || appPool.State == ObjectState.Starting;
                    bool appPoolStopped = appPool.State == ObjectState.Stopped || appPool.State == ObjectState.Stopping;
                    if (appPoolRunning) {
                        while (appPool.State == ObjectState.Starting) {
                            System.Threading.Thread.Sleep (1000);
                        }
                        if (appPool.State != ObjectState.Stopped) {
                            appPool.Stop ();
                        }
                        appPoolStopped = true;
                    }
                    if (appPoolStopped && appPoolRunning) {
                        while (appPool.State == ObjectState.Stopping) {
                            System.Threading.Thread.Sleep (1000);
                        }
                        appPool.Start ();
                    }
                } else {
                    throw new Exception (string.Format ("An Application Pool does not exist with the name {0}.{1}", serverName, appPoolName));
                }
            }}
        catch (Exception ex) {
            throw new Exception (string.Format ("Unable to restart the application pools for {0}.{1}", serverName, appPoolName), ex.InnerException);
        }
    }
}
----------------------------------------

  public static void RecycleApplicationPool (string serverName, string appPoolName) {
        if (! string.IsNullOrEmpty (serverName) && ! string.IsNullOrEmpty (appPoolName)) {
            try {
                using (ServerManager manager = ServerManager.OpenRemote (serverName))
                {
                    ApplicationPool appPool = manager.ApplicationPools.FirstOrDefault (ap => ap.Name == appPoolName);
                    if (appPool != null) {
                        if (appPool.State == ObjectState.Started || appPool.State == ObjectState.Starting) {
                            while (appPool.State == ObjectState.Starting) {
                                System.Threading.Thread.Sleep (1000);
                            }
                            if (appPool.State != ObjectState.Stopped) {
                                appPool.Kick ();
                            }
                        }
                        else if (appPool.State == ObjectState.Stopped || appPool.State == ObjectState.Stopping) {
                            appPool.Start ();
                        }
                    }}
                }
            catch (Exception ex) {
                throw new Exception (string.Format ("Unable to restart the application pools for {0}.{1}", serverName, appPoolName), ex.InnerException);
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
784
5
Gpt3D_Clone784_5.cs 1 33
Gpt3D_Clone784_5.cs 34 59
----------------------------------------

public static void RecycleApplicationPool (string serverName, string appPoolName) {
    if (! string.IsNullOrEmpty (serverName) && ! string.IsNullOrEmpty (appPoolName)) {
        try {
            using (ServerManager manager = ServerManager.OpenRemote (serverName))
            {
                ApplicationPool appPool = manager.ApplicationPools.FirstOrDefault (ap => ap.Name == appPoolName);
                if (appPool != null) {
                    bool appPoolRunning = appPool.State == ObjectState.Started || appPool.State == ObjectState.Starting;
                    bool appPoolStopped = appPool.State == ObjectState.Stopped || appPool.State == ObjectState.Stopping;
                    if (appPoolRunning) {
                        while (appPool.State == ObjectState.Starting) {
                            System.Threading.Thread.Sleep (1000);
                        }
                        if (appPool.State != ObjectState.Stopped) {
                            appPool.Stop ();
                        }
                        appPoolStopped = true;
                    }
                    if (appPoolStopped && appPoolRunning) {
                        while (appPool.State == ObjectState.Stopping) {
                            System.Threading.Thread.Sleep (1000);
                        }
                        appPool.Start ();
                    }
                } else {
                    throw new Exception (string.Format ("An Application Pool does not exist with the name {0}.{1}", serverName, appPoolName));
                }
            }}
        catch (Exception ex) {
            throw new Exception (string.Format ("Unable to restart the application pools for {0}.{1}", serverName, appPoolName), ex.InnerException);
        }
    }
}
----------------------------------------

  public static void RecycleApplicationPool (string serverName, string appPoolName) {
        if (! string.IsNullOrEmpty (serverName) && ! string.IsNullOrEmpty (appPoolName)) {
            try {
                using (ServerManager manager = ServerManager.OpenRemote (serverName))
                {
                    ApplicationPool appPool = manager.ApplicationPools.FirstOrDefault (ap => ap.Name == appPoolName);
                    if (appPool != null) {
                        if (appPool.State == ObjectState.Started || appPool.State == ObjectState.Starting) {
                            appPool.Stop ();
                            while (appPool.State == ObjectState.Stopped || appPool.State == ObjectState.Stopping) {
                                System.Threading.Thread.Sleep (1000);
                            }
                            appPool.Start ();
                        }
                        else if (appPool.State == ObjectState.Stopped || appPool.State == ObjectState.Stopping) {
                            appPool.Start ();
                        }
                    }}
                }
            catch (Exception ex) {
                throw new Exception (string.Format ("Unable to restart the application pools for {0}.{1}", serverName, appPoolName), ex.InnerException);
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
784
6
Gpt3D_Clone784_6.cs 1 33
Gpt3D_Clone784_6.cs 34 59
----------------------------------------

public static void RecycleApplicationPool (string serverName, string appPoolName) {
    if (! string.IsNullOrEmpty (serverName) && ! string.IsNullOrEmpty (appPoolName)) {
        try {
            using (ServerManager manager = ServerManager.OpenRemote (serverName))
            {
                ApplicationPool appPool = manager.ApplicationPools.FirstOrDefault (ap => ap.Name == appPoolName);
                if (appPool != null) {
                    bool appPoolRunning = appPool.State == ObjectState.Started || appPool.State == ObjectState.Starting;
                    bool appPoolStopped = appPool.State == ObjectState.Stopped || appPool.State == ObjectState.Stopping;
                    if (appPoolRunning) {
                        while (appPool.State == ObjectState.Starting) {
                            System.Threading.Thread.Sleep (1000);
                        }
                        if (appPool.State != ObjectState.Stopped) {
                            appPool.Stop ();
                        }
                        appPoolStopped = true;
                    }
                    if (appPoolStopped && appPoolRunning) {
                        while (appPool.State == ObjectState.Stopping) {
                            System.Threading.Thread.Sleep (1000);
                        }
                        appPool.Start ();
                    }
                } else {
                    throw new Exception (string.Format ("An Application Pool does not exist with the name {0}.{1}", serverName, appPoolName));
                }
            }}
        catch (Exception ex) {
            throw new Exception (string.Format ("Unable to restart the application pools for {0}.{1}", serverName, appPoolName), ex.InnerException);
        }
    }
}
----------------------------------------

  public static void RecycleApplicationPool (string serverName, string appPoolName) {
        if (! string.IsNullOrEmpty (serverName) && ! string.IsNullOrEmpty (appPoolName)) {
            try {
                using (ServerManager manager = ServerManager.OpenRemote (serverName))
                {
                    ApplicationPool appPool = manager.ApplicationPools.FirstOrDefault (ap => ap.Name == appPoolName);
                    if (appPool != null) {
                        if (appPool.State == ObjectState.Started || appPool.State == ObjectState.Starting) {
                            appPool.Stop ();
                            while (appPool.State == ObjectState.Stopped || appPool.State == ObjectState.Stopping) {
                                System.Threading.Thread.Sleep (1000);
                            }
                            appPool.WaitForState (ObjectState.Stopped);
                        }
                        else if (appPool.State == ObjectState.Stopped || appPool.State == ObjectState.Stopping) {
                            appPool.Start ();
                        }
                    }}
                }
            catch (Exception ex) {
                throw new Exception (string.Format ("Unable to restart the application pools for {0}.{1}", serverName, appPoolName), ex.InnerException);
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
784
7
Gpt3D_Clone784_7.cs 1 33
Gpt3D_Clone784_7.cs 34 58
----------------------------------------

public static void RecycleApplicationPool (string serverName, string appPoolName) {
    if (! string.IsNullOrEmpty (serverName) && ! string.IsNullOrEmpty (appPoolName)) {
        try {
            using (ServerManager manager = ServerManager.OpenRemote (serverName))
            {
                ApplicationPool appPool = manager.ApplicationPools.FirstOrDefault (ap => ap.Name == appPoolName);
                if (appPool != null) {
                    bool appPoolRunning = appPool.State == ObjectState.Started || appPool.State == ObjectState.Starting;
                    bool appPoolStopped = appPool.State == ObjectState.Stopped || appPool.State == ObjectState.Stopping;
                    if (appPoolRunning) {
                        while (appPool.State == ObjectState.Starting) {
                            System.Threading.Thread.Sleep (1000);
                        }
                        if (appPool.State != ObjectState.Stopped) {
                            appPool.Stop ();
                        }
                        appPoolStopped = true;
                    }
                    if (appPoolStopped && appPoolRunning) {
                        while (appPool.State == ObjectState.Stopping) {
                            System.Threading.Thread.Sleep (1000);
                        }
                        appPool.Start ();
                    }
                } else {
                    throw new Exception (string.Format ("An Application Pool does not exist with the name {0}.{1}", serverName, appPoolName));
                }
            }}
        catch (Exception ex) {
            throw new Exception (string.Format ("Unable to restart the application pools for {0}.{1}", serverName, appPoolName), ex.InnerException);
        }
    }
}
----------------------------------------

  public static void RecycleApplicationPool (string serverName, string appPoolName) {
        if (! string.IsNullOrEmpty (serverName) && ! string.IsNullOrEmpty (appPoolName)) {
            try {
                using (ServerManager manager = ServerManager.OpenRemote (serverName))
                {
                    ApplicationPool appPool = manager.ApplicationPools.FirstOrDefault (ap => ap.Name == appPoolName);
                    if (appPool != null) {
                        if (appPool.State == ObjectState.Started || appPool.State == ObjectState.Starting) {
                            while (appPool.State == ObjectState.Starting) {
                                System.Threading.Thread.Sleep (1000);
                            }
                            appPool.Recycle ();
                        }
                        else if (appPool.State == ObjectState.Stopped || appPool.State == ObjectState.Stopping) {
                            appPool.Start ();
                        }
                    }}
                }
            catch (Exception ex) {
                throw new Exception (string.Format ("Unable to restart the application pools for {0}.{1}", serverName, appPoolName), ex.InnerException);
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
786
0
Gpt3D_Clone786_0.cs 1 14
Gpt3D_Clone786_0.cs 15 65
----------------------------------------

public static DateTime GetStartDateTimeFromWeekNumberInYear (int year, uint weekOfYear) {
    if (weekOfYear == 0 || weekOfYear > 54)
        throw new ArgumentException ("Week number must be between 1 and 54! (Yes, 54... Year 2000 had Jan. 1 on a Saturday plus 53 Sundays.)");
    DateTime firstDayInWeek = new DateTime (year, 1, 1);
    if (weekOfYear == 1)
        return firstDayInWeek;
    do
        {
            firstDayInWeek = firstDayInWeek.AddDays (1);
        } while (firstDayInWeek.DayOfWeek != DayOfWeek.Sunday);
    if (weekOfYear == 2)
        return firstDayInWeek;
    return firstDayInWeek.AddDays ((weekOfYear - 2) * 7);
}
----------------------------------------

 public static DateTime GetStartDateTimeFromWeekNumberInYear (int year, uint weekOfYear) 
    {
        if (weekOfYear == 0 || weekOfYear > 54)
            throw new ArgumentException ("Week number must be between 1 and 54!");
        
        int daysForYear = 0;
        DateTime startWeek = new DateTime (year, 1, 1);
        while (++daysForYear <= weekOfYear) 
        {
            if (startWeek.DayOfWeek == DayOfWeek.Sunday) {
                daysForYear++;
            }
            startWeek = startWeek.AddDays(1);
        }
        return startWeek;
    }
    
public static DateTime GetStartDateTimeFromWeekNumberInYear(int year, uint weekOfYear)
    {
        if (weekOfYear == 0 || weekOfYear > 54)
            throw new ArgumentException("Week number must be between 1 and 54!");
        DateTime firstOfYear = new DateTime(year, 1, 1).AddDays((weekOfYear - 1) * 7);
        while (firstOfYear.DayOfWeek != DayOfWeek.Sunday)
        {
            firstOfYear = firstOfYear.AddDays(-1);
        }
        return firstOfYear;
    }
public static DateTime GetStartDateTimeFromWeekNumberInYear (int year, uint weekOfYear) {
    if (weekOfYear == 0 || weekOfYear > 54)
        throw new ArgumentException ("Week number must be between 1 and 54!");
    
    DateTime startWeek = new DateTime (year, 1, 1);
    DateTime dayOfWeekSunday = new DateTime ();
    long weekNumber = (long)weekOfYear - 1;
    if (weekNumber == 0) {
        return startWeek; 
    } 
    for (int i = 0; i < weekNumber; i++) {
        startWeek = startWeek.AddDays(7);
        if (startWeek.DayOfWeek == DayOfWeek.Sunday) {
            dayOfWeekSunday = startWeek;
        } 
    }
    return dayOfWeekSunday;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
788
0
Gpt3D_Clone788_0.cs 1 12
Gpt3D_Clone788_0.cs 13 30
----------------------------------------

static void Main () {
    _bw = new BackgroundWorker {WorkerReportsProgress = true, WorkerSupportsCancellation = true};
    _bw.DoWork += bw_DoWork;
    _bw.ProgressChanged += bw_ProgressChanged;
    _bw.RunWorkerCompleted += bw_RunWorkerCompleted;
    _bw.RunWorkerAsync ("Hello to worker");
    Console.WriteLine ("Press Enter in the next 5 seconds to cancel");
    Console.ReadLine ();
    if (_bw.IsBusy)
        _bw.CancelAsync ();
    Console.ReadLine ();
}
----------------------------------------

   static void Main()
     {
         BackgroundWorker _bw = new BackgroundWorker();
         _bw.WorkerReportsProgress = true;
         _bw.WorkerSupportsCancellation = true;
         _bw.DoWork += new DoWorkEventHandler(bw_DoWork);
         _bw.ProgressChanged +=  new ProgressChangedEventHandler(bw_ProgressChanged);
         _bw.RunWorkerCompleted += new RunWorkerCompletedEventHandler(bw_RunWorkerCompleted);
         _bw.RunWorkerAsync("Hello to worker");
         Console.WriteLine("Press Enter in the next 5 seconds to cancel");
         Console.ReadLine();
         if (_bw.IsBusy)
             _bw.CancelAsync();
         Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
788
1
Gpt3D_Clone788_1.cs 1 12
Gpt3D_Clone788_1.cs 13 29
----------------------------------------

static void Main () {
    _bw = new BackgroundWorker {WorkerReportsProgress = true, WorkerSupportsCancellation = true};
    _bw.DoWork += bw_DoWork;
    _bw.ProgressChanged += bw_ProgressChanged;
    _bw.RunWorkerCompleted += bw_RunWorkerCompleted;
    _bw.RunWorkerAsync ("Hello to worker");
    Console.WriteLine ("Press Enter in the next 5 seconds to cancel");
    Console.ReadLine ();
    if (_bw.IsBusy)
        _bw.CancelAsync ();
    Console.ReadLine ();
}
----------------------------------------

   private void ExecuteBackgroundWorkerCode2()
     { 
        BackgroundWorker bg = new BackgroundWorker();
        bg.WorkerReportsProgress = true;
        bg.WorkerSupportsCancellation = true;
        bg.DoWork += bw_DoWork;
        bg.ProgressChanged += bw_ProgressChanged;
        bg.RunWorkerCompleted += bw_RunWorkerCompleted;
        bg.RunWorkerAsync("Hello to worker");
        Console.WriteLine("Press Enter in the next 5 seconds to cancel");
        Console.ReadLine();
        if (bg.IsBusy)
            bg.CancelAsync();
        Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
788
6
Gpt3D_Clone788_6.cs 1 12
Gpt3D_Clone788_6.cs 13 27
----------------------------------------

static void Main () {
    _bw = new BackgroundWorker {WorkerReportsProgress = true, WorkerSupportsCancellation = true};
    _bw.DoWork += bw_DoWork;
    _bw.ProgressChanged += bw_ProgressChanged;
    _bw.RunWorkerCompleted += bw_RunWorkerCompleted;
    _bw.RunWorkerAsync ("Hello to worker");
    Console.WriteLine ("Press Enter in the next 5 seconds to cancel");
    Console.ReadLine ();
    if (_bw.IsBusy)
        _bw.CancelAsync ();
    Console.ReadLine ();
}
----------------------------------------

   public static void Work()
     { 
          BackgroundWorker _bw = new BackgroundWorker(){ WorkerReportsProgress = true, WorkerSupportsCancellation = true };
          _bw.DoWork += new DoWorkEventHandler(bw_DoWork);
          _bw.ProgressChanged += new ProgressChangedEventHandler(bw_ProgressChanged);
          _bw.RunWorkerCompleted += new RunWorkerCompletedEventHandler(bw_RunWorkerCompleted);
          _bw.RunWorkerAsync("Hello to worker");
          Console.WriteLine("Press Enter in the next 5 seconds to cancel");
          Console.ReadLine();
          if (_bw.IsBusy)
              _bw.CancelAsync();
          Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
789
1
Gpt3D_Clone789_1.cs 1 12
Gpt3D_Clone789_1.cs 13 29
----------------------------------------

void OnShapeBrushChanged () {
    Brush rtn = default (Brush);
    for (int i = 0; i < ShapeChildren.Count; i ++) {
        Shape shape = ShapeChildren [i];
        if (i == 0) {
            rtn = shape.Fill;
        } else if (rtn != shape.Fill) {
            SetValue (FillDifferentProperty, default (Brush));
        } else
            SetValue (FillDifferentProperty, rtn);
    }
}
----------------------------------------

  void OnShapeBrushChanged () {
    Brush rtn = default (Brush);
    bool flag = true;
    for (int i = 0; i < ShapeChildren.Count; i ++) {
        if (flag == true) {
            Shape shape = ShapeChildren [i];
            rtn = shape.Fill;
            flag = false;
            SetValue (FillDifferentProperty, rtn);
        } else if (rtn != shape.Fill) {
            SetValue (FillDifferentProperty, default (Brush));
            break;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
790
1
Gpt3D_Clone790_1.cs 1 15
Gpt3D_Clone790_1.cs 16 50
----------------------------------------

public object CallMethod (object instance, MethodInfo methodInfo, Dictionary < string, string > parameters) {
    var methodParameters = methodInfo.GetParameters ();
    var parametersForInvocation = new List < object > ();
    foreach (var methodParameter in methodParameters) {
        string value;
        if (parameters.TryGetValue (methodParameter.Name, out value)) {
            var convertedValue = ConvertStringToNewType (value, methodParameter.ParameterType);
            parametersForInvocation.Add (convertedValue);
        } else {
            var defaultValue = Activator.CreateInstance (methodParameter.ParameterType);
            parametersForInvocation.Add (defaultValue);
        }
    }
    return methodInfo.Invoke (instance, parametersForInvocation.ToArray ());
}
----------------------------------------

 public object CallMethod (object instance, MethodInfo methodInfo, Dictionary < string, string > parameters) {
    var methodParameters = methodInfo.GetParameters ();
    var parametersForInvocation = new List < object > ();
    foreach (var methodParameter in methodParameters) {
        string value;
        if (parameters.TryGetValue (methodParameter.Name, out value)) {
            var convertedValue = ConvertStringToNewType (value, methodParameter.ParameterType);
            parametersForInvocation.Add (convertedValue);
        } else {
            //check if parameter type is a structure 
            if (methodParameter.ParameterType.IsValueType)
            {
                //try to convert a string to the type of parameter
                object convertedValue = ConvertStringToNewType("", methodParameter.ParameterType);
                //if conversion is successful, add the converted value
                if (convertedValue != null)
                    parametersForInvocation.Add(convertedValue);
                else
                {
                    //create an instance of the parameter type
                    var defaultValue = Activator.CreateInstance (methodParameter.ParameterType);
                    parametersForInvocation.Add (defaultValue);
                }
            }
            else
            {
                //set value to null
                parametersForInvocation.Add(null);
            }
        }
    }
    return methodInfo.Invoke (instance, parametersForInvocation.ToArray ());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
790
2
Gpt3D_Clone790_2.cs 1 15
Gpt3D_Clone790_2.cs 16 48
----------------------------------------

public object CallMethod (object instance, MethodInfo methodInfo, Dictionary < string, string > parameters) {
    var methodParameters = methodInfo.GetParameters ();
    var parametersForInvocation = new List < object > ();
    foreach (var methodParameter in methodParameters) {
        string value;
        if (parameters.TryGetValue (methodParameter.Name, out value)) {
            var convertedValue = ConvertStringToNewType (value, methodParameter.ParameterType);
            parametersForInvocation.Add (convertedValue);
        } else {
            var defaultValue = Activator.CreateInstance (methodParameter.ParameterType);
            parametersForInvocation.Add (defaultValue);
        }
    }
    return methodInfo.Invoke (instance, parametersForInvocation.ToArray ());
}
----------------------------------------

 public object CallMethod (object instance, MethodInfo methodInfo, Dictionary < string, string > parameters) {
    var methodParameters = methodInfo.GetParameters ();
    var parametersForInvocation = new List < object > ();
    foreach (var methodParameter in methodParameters) {
        string value;
        if (parameters.TryGetValue (methodParameter.Name, out value)) {
            var convertedValue = ConvertStringToNewType (value, methodParameter.ParameterType);
            parametersForInvocation.Add (convertedValue);
        } else {
            //determine the TypeCode of struct 
            TypeCode typeCode = Type.GetTypeCode(methodParameter.ParameterType);
            Type parameterType = methodParameter.ParameterType;
            //check if it's a numeric type 
            if (typeCode != TypeCode.Object)
            {
                if (typeCode == TypeCode.String)
                    //set empty string if it's a string
                    parametersForInvocation.Add("");
                else
                    //else set the default value of the type
                    parametersForInvocation.Add(default(parameterType));
            }
            else
            {
                //set value to null for non-numeric types
                parametersForInvocation.Add(null);
            } 
        }
    }
    return methodInfo.Invoke (instance, parametersForInvocation.ToArray ());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
790
3
Gpt3D_Clone790_3.cs 1 15
Gpt3D_Clone790_3.cs 16 49
----------------------------------------

public object CallMethod (object instance, MethodInfo methodInfo, Dictionary < string, string > parameters) {
    var methodParameters = methodInfo.GetParameters ();
    var parametersForInvocation = new List < object > ();
    foreach (var methodParameter in methodParameters) {
        string value;
        if (parameters.TryGetValue (methodParameter.Name, out value)) {
            var convertedValue = ConvertStringToNewType (value, methodParameter.ParameterType);
            parametersForInvocation.Add (convertedValue);
        } else {
            var defaultValue = Activator.CreateInstance (methodParameter.ParameterType);
            parametersForInvocation.Add (defaultValue);
        }
    }
    return methodInfo.Invoke (instance, parametersForInvocation.ToArray ());
}
----------------------------------------

 public object CallMethod (object instance, MethodInfo methodInfo, Dictionary < string, string > parameters) {
    var methodParameters = methodInfo.GetParameters ();
    var parametersForInvocation = new List < object > ();
    foreach (var methodParameter in methodParameters) {
        string value;
        if (parameters.TryGetValue (methodParameter.Name, out value)) {
            var convertedValue = ConvertStringToNewType (value, methodParameter.ParameterType);
            parametersForInvocation.Add (convertedValue);
        } else {
            //check if parameter type is a structure 
            if (methodParameter.ParameterType.IsValueType)
            {
                //convert default value 
                var parameterType = methodParameter.ParameterType;
                //check for unsigned numbers
                if (parameterType == typeof(ushort) 
                    || parameterType == typeof(uint) 
                    || parameterType == typeof(ulong) 
                    || parameterType == typeof(ulong))
                    parametersForInvocation.Add(0);
                else
                    parametersForInvocation.Add(0.0);
            }
            else
            {
                //set value to null
                parametersForInvocation.Add(null);
            }
        }
    }
    return methodInfo.Invoke (instance, parametersForInvocation.ToArray ());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
790
4
Gpt3D_Clone790_4.cs 1 15
Gpt3D_Clone790_4.cs 16 54
----------------------------------------

public object CallMethod (object instance, MethodInfo methodInfo, Dictionary < string, string > parameters) {
    var methodParameters = methodInfo.GetParameters ();
    var parametersForInvocation = new List < object > ();
    foreach (var methodParameter in methodParameters) {
        string value;
        if (parameters.TryGetValue (methodParameter.Name, out value)) {
            var convertedValue = ConvertStringToNewType (value, methodParameter.ParameterType);
            parametersForInvocation.Add (convertedValue);
        } else {
            var defaultValue = Activator.CreateInstance (methodParameter.ParameterType);
            parametersForInvocation.Add (defaultValue);
        }
    }
    return methodInfo.Invoke (instance, parametersForInvocation.ToArray ());
}
----------------------------------------

 public object CallMethod (object instance, MethodInfo methodInfo, Dictionary < string, string > parameters) {
    var methodParameters = methodInfo.GetParameters ();
    var parametersForInvocation = new List < object > ();
    foreach (var methodParameter in methodParameters) {
        string value;
        if (parameters.TryGetValue (methodParameter.Name, out value)) 
        {
            var convertedValue = ConvertStringToNewType (value, methodParameter.ParameterType);
            parametersForInvocation.Add (convertedValue);
        }
        else 
        {
            //check if parameter type is a structure 
            if (methodParameter.ParameterType.IsValueType)
            {
                //convert default value
                var defaultValue = Activator.CreateInstance (methodParameter.ParameterType);
                parametersForInvocation.Add (defaultValue);
            }
            else //for reference types
            {
                //check for nullable type 
                if(methodParameter.ParameterType.IsGenericType && methodParameter.ParameterType.GetGenericTypeDefinition() == typeof(Nullable<>))
                {
                    //get underlying type of nullable and set the default value of underlying type
                    parametersForInvocation.Add(Activator.CreateInstance(methodParameter.ParameterType.GetGenericArguments()[0]));
                }
                else
                {
                    //set value to null instead
                    parametersForInvocation.Add(null);
                }
            }
        }
    }
    return methodInfo.Invoke (instance, parametersForInvocation.ToArray ());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
790
5
Gpt3D_Clone790_5.cs 1 15
Gpt3D_Clone790_5.cs 16 48
----------------------------------------

public object CallMethod (object instance, MethodInfo methodInfo, Dictionary < string, string > parameters) {
    var methodParameters = methodInfo.GetParameters ();
    var parametersForInvocation = new List < object > ();
    foreach (var methodParameter in methodParameters) {
        string value;
        if (parameters.TryGetValue (methodParameter.Name, out value)) {
            var convertedValue = ConvertStringToNewType (value, methodParameter.ParameterType);
            parametersForInvocation.Add (convertedValue);
        } else {
            var defaultValue = Activator.CreateInstance (methodParameter.ParameterType);
            parametersForInvocation.Add (defaultValue);
        }
    }
    return methodInfo.Invoke (instance, parametersForInvocation.ToArray ());
}
----------------------------------------

 public object CallMethod (object instance, MethodInfo methodInfo, Dictionary < string, string > parameters) {
    var methodParameters = methodInfo.GetParameters ();
    var parametersForInvocation = new List < object > ();
    foreach (var methodParameter in methodParameters) {
        string value;
        if (parameters.TryGetValue (methodParameter.Name, out value)) {
            var convertedValue = ConvertStringToNewType (value, methodParameter.ParameterType);
            parametersForInvocation.Add (convertedValue);
        } else {
            //check if parameter type is a structure 
            if (methodParameter.ParameterType.IsValueType)
            {
                //get the type name
                string typeName = methodParameter.ParameterType.ToString();
                //get the default value from .xml file
                string defaultValueStr = Settings.Default[typeName] as string; 
                //convert the string to the type of parameter and add to invocation list
                var defaultValue = ConvertStringToNewType(defaultValueStr, methodParameter.ParameterType); 
                parametersForInvocation.Add (defaultValue);
            }
            else
            {
                //set value to null
                parametersForInvocation.Add(null);
            }
        }
    }
    return methodInfo.Invoke (instance, parametersForInvocation.ToArray ());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
790
6
Gpt3D_Clone790_6.cs 1 15
Gpt3D_Clone790_6.cs 16 45
----------------------------------------

public object CallMethod (object instance, MethodInfo methodInfo, Dictionary < string, string > parameters) {
    var methodParameters = methodInfo.GetParameters ();
    var parametersForInvocation = new List < object > ();
    foreach (var methodParameter in methodParameters) {
        string value;
        if (parameters.TryGetValue (methodParameter.Name, out value)) {
            var convertedValue = ConvertStringToNewType (value, methodParameter.ParameterType);
            parametersForInvocation.Add (convertedValue);
        } else {
            var defaultValue = Activator.CreateInstance (methodParameter.ParameterType);
            parametersForInvocation.Add (defaultValue);
        }
    }
    return methodInfo.Invoke (instance, parametersForInvocation.ToArray ());
}
----------------------------------------

  public object CallMethod (object instance, MethodInfo methodInfo, Dictionary < string, string > parameters) {
    var methodParameters = methodInfo.GetParameters ();
    var parametersForInvocation = new List < object > ();
    foreach (var methodParameter in methodParameters) {
        string value;
            if (parameters.TryGetValue (methodParameter.Name, out value)) {
            var convertedValue = ConvertStringToNewType (value, methodParameter.ParameterType);
            parametersForInvocation.Add (convertedValue);
        } 
        else 
        {
            Type parameterType = methodParameter.ParameterType;
            //check if parameter type is a structure 
            if (parameterType.IsValueType)
            {
                //convert default value
                var defaultValue = Activator.CreateInstance (methodParameter.ParameterType);
                parametersForInvocation.Add (defaultValue);
            }
            else
            {
                //set value to null instead
                parametersForInvocation.Add(null);
            }
        }
    }
    return methodInfo.Invoke (instance, parametersForInvocation.ToArray ());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
790
7
Gpt3D_Clone790_7.cs 1 15
Gpt3D_Clone790_7.cs 16 45
----------------------------------------

public object CallMethod (object instance, MethodInfo methodInfo, Dictionary < string, string > parameters) {
    var methodParameters = methodInfo.GetParameters ();
    var parametersForInvocation = new List < object > ();
    foreach (var methodParameter in methodParameters) {
        string value;
        if (parameters.TryGetValue (methodParameter.Name, out value)) {
            var convertedValue = ConvertStringToNewType (value, methodParameter.ParameterType);
            parametersForInvocation.Add (convertedValue);
        } else {
            var defaultValue = Activator.CreateInstance (methodParameter.ParameterType);
            parametersForInvocation.Add (defaultValue);
        }
    }
    return methodInfo.Invoke (instance, parametersForInvocation.ToArray ());
}
----------------------------------------

 public object CallMethod (object instance, MethodInfo methodInfo, Dictionary < string, string > parameters) {
    var methodParameters = methodInfo.GetParameters ();
    var parametersForInvocation = new List < object > ();
    foreach (var methodParameter in methodParameters) {
        string value;
        if (parameters.TryGetValue (methodParameter.Name, out value)) {
            var convertedValue = ConvertStringToNewType (value, methodParameter.ParameterType);
            parametersForInvocation.Add (convertedValue);
        } else {
            //check if parameter type is a structure 
            if (methodParameter.ParameterType.IsValueType)
            {
                //get the underlying type name
                string underlyingTypeName = Enum.GetName(typeof(TypeCode),Type.GetTypeCode(methodParameter.ParameterType));
                //create instance of underlying type
                object createdObject = Activator.CreateInstance(Type.GetType(underlyingTypeName));
                parametersForInvocation.Add(createdObject);
            }
            else
            {
                //set value to null instead
                parametersForInvocation.Add(null);
            }
        }
    }
    return methodInfo.Invoke (instance, parametersForInvocation.ToArray ());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
793
2
Gpt3D_Clone793_2.cs 1 16
Gpt3D_Clone793_2.cs 17 42
----------------------------------------

public string SplitLongWords (string text, int maxWordLength) {
    var result = new StringBuilder ();
    int currentWordLength = 0;
    foreach (char c in text) {
        if (char.IsWhiteSpace (c)) {
            currentWordLength = 0;
        } else if (currentWordLength == maxWordLength) {
            currentWordLength = 1;
            result.Append (' ');
        } else {
            ++ currentWordLength;
        }
        result.Append (c);
    }
    return result.ToString ().TrimEnd ();
}
----------------------------------------

 public string SplitLongWords(string text, int maxWordLength) 
{
        string output = "";
        int currentWordLength = 0;
        foreach (char c in text)
        {
            if (char.IsWhiteSpace(c)) 
            {
                currentWordLength = 0; 
            }
            else if (currentWordLength+1 == maxWordLength) 
            {
                currentWordLength = 0;
                output += c + ' ';
            }
            else 
            {
                currentWordLength++;
                output += c; 
            }
        }
 
        return output.TrimEnd();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
793
3
Gpt3D_Clone793_3.cs 1 16
Gpt3D_Clone793_3.cs 17 42
----------------------------------------

public string SplitLongWords (string text, int maxWordLength) {
    var result = new StringBuilder ();
    int currentWordLength = 0;
    foreach (char c in text) {
        if (char.IsWhiteSpace (c)) {
            currentWordLength = 0;
        } else if (currentWordLength == maxWordLength) {
            currentWordLength = 1;
            result.Append (' ');
        } else {
            ++ currentWordLength;
        }
        result.Append (c);
    }
    return result.ToString ().TrimEnd ();
}
----------------------------------------

 public string SplitLongWords(string text, int maxWordLength) 
{
        string result = "";
        int currentWordLength = 0;
        foreach(char c in text) 
        {
            if (Char.IsWhiteSpace(c)) 
            {
                currentWordLength = 0;
            }
            else if (currentWordLength == maxWordLength) 
            {
                currentWordLength = 1;
                result += " ";
            } 
            else 
            {
                currentWordLength++;
            }
            result += c;
        }
 
        return result.TrimEnd();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
793
4
Gpt3D_Clone793_4.cs 1 16
Gpt3D_Clone793_4.cs 17 42
----------------------------------------

public string SplitLongWords (string text, int maxWordLength) {
    var result = new StringBuilder ();
    int currentWordLength = 0;
    foreach (char c in text) {
        if (char.IsWhiteSpace (c)) {
            currentWordLength = 0;
        } else if (currentWordLength == maxWordLength) {
            currentWordLength = 1;
            result.Append (' ');
        } else {
            ++ currentWordLength;
        }
        result.Append (c);
    }
    return result.ToString ().TrimEnd ();
}
----------------------------------------

 public string SplitLongWords(string text, int maxWordLength) 
{
        string output = "";
        int currentWordLength = 0;
        foreach (char c in text) 
        {
            if (Char.IsWhiteSpace(c)) 
            {
               currentWordLength = 0;
            }
            else if (currentWordLength == maxWordLength) 
            {
                currentWordLength = 0;
                output += c + ' ';
            }
            else 
            {
                currentWordLength++;
                output += c; 
            }
        }
 
        return output.TrimEnd();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
793
5
Gpt3D_Clone793_5.cs 1 16
Gpt3D_Clone793_5.cs 17 42
----------------------------------------

public string SplitLongWords (string text, int maxWordLength) {
    var result = new StringBuilder ();
    int currentWordLength = 0;
    foreach (char c in text) {
        if (char.IsWhiteSpace (c)) {
            currentWordLength = 0;
        } else if (currentWordLength == maxWordLength) {
            currentWordLength = 1;
            result.Append (' ');
        } else {
            ++ currentWordLength;
        }
        result.Append (c);
    }
    return result.ToString ().TrimEnd ();
}
----------------------------------------

 public string SplitLongWords(string text, int maxWordLength) 
{
        string result = "";
        int currentWordLength = 0;
        foreach(char c in text) 
        {
            if (Char.IsWhiteSpace(c)) 
            {
                currentWordLength = 0;
            }
            else if (currentWordLength == maxWordLength) 
            {
                currentWordLength = 1;
                result += " ";
            } 
            else 
            {
                currentWordLength++;
            }
            result += c;
        }
 
        return result.TrimEnd();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
796
6
Gpt3D_Clone796_6.cs 1 17
Gpt3D_Clone796_6.cs 18 32
----------------------------------------

public static string getDropBoxPath () {
    try {
        var appDataPath = Environment.GetFolderPath (Environment.SpecialFolder.LocalApplicationData);
        var dbPath = Path.Combine (appDataPath, "Dropbox\\host.db");
        if (! File.Exists (dbPath)) {
            return null;
        } else {
            var lines = File.ReadAllLines (dbPath);
            var dbBase64Text = Convert.FromBase64String (lines [1]);
            var folderPath = Encoding.UTF8.GetString (dbBase64Text);
            return folderPath;
        }
    }
    catch (Exception ex) {
        throw ex;
    }
}
----------------------------------------

	public static string GetDropBoxPath()
        {
            var appDataPath = Path.Combine(Directory.GetCurrentDirectory(), "LocalApplicationData");
            var dbPath = Path.Combine(appDataPath, "Dropbox\\host.db");
            if (!File.Exists(dbPath))
                return null;
            var lines = File.ReadAllLines(dbPath);
            var dbBase64Text = Convert.FromBase64String(lines[1]);
            var folderPath = Encoding.UTF8.GetString(dbBase64Text);
            return folderPath;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
797
0
Gpt3D_Clone797_0.cs 1 9
Gpt3D_Clone797_0.cs 10 21
----------------------------------------

public static string GetStringValue (this AuthenticationMethod value) {
    string output = null;
    Type type = value.GetType ();
    FieldInfo fi = type.GetField (value.ToString ());
    StringValue [] attrs = fi.GetCustomAttributes (typeof (StringValue), false) as StringValue [];
    if (attrs.Length > 0)
        output = attrs [0].Value;
    return output;
}
----------------------------------------

 public static string GetStringValue (this AuthenticationMethod currentAuthenticationMethod) {
   string output = null;
   Type myType = currentAuthenticationMethod.GetType ();
   FieldInfo fieldInfo = myType.GetField (currentAuthenticationMethod.ToString ());
   var stringAttributes = fieldInfo.GetCustomAttributes (typeof (StringValue), false) as StringValue[];
   if (stringAttributes.Length > 0) {
       output = stringAttributes[0].Value;
   }
   return output;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
797
1
Gpt3D_Clone797_1.cs 1 9
Gpt3D_Clone797_1.cs 10 22
----------------------------------------

public static string GetStringValue (this AuthenticationMethod value) {
    string output = null;
    Type type = value.GetType ();
    FieldInfo fi = type.GetField (value.ToString ());
    StringValue [] attrs = fi.GetCustomAttributes (typeof (StringValue), false) as StringValue [];
    if (attrs.Length > 0)
        output = attrs [0].Value;
    return output;
}
----------------------------------------

 public static string RetrieveStringData (this AuthenticationMethod currentAuthenticationMethod) {
   string output = null;
   Type myType = currentAuthenticationMethod.GetType ();
   FieldInfo fieldInfo = myType.GetField (currentAuthenticationMethod.ToString ());
   var stringAttributes = fieldInfo.GetCustomAttributes (typeof (StringValue), false) as StringValue[];
   if (stringAttributes.Length != 0)
   {
      output = stringAttributes[0].Value;
   }
   return output;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
797
2
Gpt3D_Clone797_2.cs 1 9
Gpt3D_Clone797_2.cs 10 21
----------------------------------------

public static string GetStringValue (this AuthenticationMethod value) {
    string output = null;
    Type type = value.GetType ();
    FieldInfo fi = type.GetField (value.ToString ());
    StringValue [] attrs = fi.GetCustomAttributes (typeof (StringValue), false) as StringValue [];
    if (attrs.Length > 0)
        output = attrs [0].Value;
    return output;
}
----------------------------------------

 public static string FetchStringData (this AuthenticationMethod currentAuthenticationMethod) {
   string output = null;
   Type myType = currentAuthenticationMethod.GetType ();
   FieldInfo fieldInfo = myType.GetField (currentAuthenticationMethod.ToString ());
   var stringAttributes = fieldInfo.GetCustomAttributes (typeof(StringValue), false) as StringValue[];
   if (stringAttributes.Length > 0) {
       output = stringAttributes[0].Value;
   }
   return output;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
797
3
Gpt3D_Clone797_3.cs 1 9
Gpt3D_Clone797_3.cs 10 21
----------------------------------------

public static string GetStringValue (this AuthenticationMethod value) {
    string output = null;
    Type type = value.GetType ();
    FieldInfo fi = type.GetField (value.ToString ());
    StringValue [] attrs = fi.GetCustomAttributes (typeof (StringValue), false) as StringValue [];
    if (attrs.Length > 0)
        output = attrs [0].Value;
    return output;
}
----------------------------------------

 public static string ExtractStringValue (this AuthenticationMethod currentAuthenticationMethod) {
   string output = null;
   Type myType = currentAuthenticationMethod.GetType ();
   FieldInfo fieldInfo = myType.GetField (currentAuthenticationMethod.ToString ());
   var stringAttributes = fieldInfo.GetCustomAttributes (typeof (StringValue), false) as StringValue[];
   if (stringAttributes.Length > 0) {
       output = stringAttributes[0].Value;
   }
   return output;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
797
4
Gpt3D_Clone797_4.cs 1 9
Gpt3D_Clone797_4.cs 10 22
----------------------------------------

public static string GetStringValue (this AuthenticationMethod value) {
    string output = null;
    Type type = value.GetType ();
    FieldInfo fi = type.GetField (value.ToString ());
    StringValue [] attrs = fi.GetCustomAttributes (typeof (StringValue), false) as StringValue [];
    if (attrs.Length > 0)
        output = attrs [0].Value;
    return output;
}
----------------------------------------

 public static string GainStringValue (this AuthenticationMethod currentAuthenticationMethod) {
   string output = null;
   Type myType = currentAuthenticationMethod.GetType ();
   FieldInfo fieldInfo = myType.GetField (currentAuthenticationMethod.ToString ());
   var stringAttributes = fieldInfo.GetCustomAttributes (typeof (StringValue), false) as StringValue[];
   if (stringAttributes.Length != 0)
   {
      output = stringAttributes[0].Value;
   }
   return output;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
797
6
Gpt3D_Clone797_6.cs 1 9
Gpt3D_Clone797_6.cs 10 21
----------------------------------------

public static string GetStringValue (this AuthenticationMethod value) {
    string output = null;
    Type type = value.GetType ();
    FieldInfo fi = type.GetField (value.ToString ());
    StringValue [] attrs = fi.GetCustomAttributes (typeof (StringValue), false) as StringValue [];
    if (attrs.Length > 0)
        output = attrs [0].Value;
    return output;
}
----------------------------------------

 public static string FindStringValue (this AuthenticationMethod currentAuthenticationMethod) {
   string output = null;
   Type myType = currentAuthenticationMethod.GetType ();
   FieldInfo fieldInfo = myType.GetField (currentAuthenticationMethod.ToString ());
   var stringAttributes = fieldInfo.GetCustomAttributes (typeof (StringValue), false) as StringValue[];
   if (stringAttributes.Length > 0) {
       output = stringAttributes[0].Value;
   }
   return output;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
797
7
Gpt3D_Clone797_7.cs 1 9
Gpt3D_Clone797_7.cs 10 21
----------------------------------------

public static string GetStringValue (this AuthenticationMethod value) {
    string output = null;
    Type type = value.GetType ();
    FieldInfo fi = type.GetField (value.ToString ());
    StringValue [] attrs = fi.GetCustomAttributes (typeof (StringValue), false) as StringValue [];
    if (attrs.Length > 0)
        output = attrs [0].Value;
    return output;
}
----------------------------------------

 public static string ObtainStringValue (this AuthenticationMethod currentAuthenticationMethod) {
   string output = null;
   Type myType = currentAuthenticationMethod.GetType ();
   FieldInfo fieldInfo = myType.GetField (currentAuthenticationMethod.ToString ());
   var stringAttributes = fieldInfo.GetCustomAttributes (typeof (StringValue), false) as StringValue[];
   if (stringAttributes.Length > 0) {
       output = stringAttributes[0].Value;
   }
   return output;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
797
8
Gpt3D_Clone797_8.cs 1 9
Gpt3D_Clone797_8.cs 10 22
----------------------------------------

public static string GetStringValue (this AuthenticationMethod value) {
    string output = null;
    Type type = value.GetType ();
    FieldInfo fi = type.GetField (value.ToString ());
    StringValue [] attrs = fi.GetCustomAttributes (typeof (StringValue), false) as StringValue [];
    if (attrs.Length > 0)
        output = attrs [0].Value;
    return output;
}
----------------------------------------

 public static string RetrieveStringResult (this AuthenticationMethod currentAuthenticationMethod) {
   string output = null;
   Type myType = currentAuthenticationMethod.GetType();
   FieldInfo fieldInfo = myType.GetField(currentAuthenticationMethod.ToString());
   var stringAttributes = fieldInfo.GetCustomAttributes (typeof (StringValue), false) as StringValue[];
   if (stringAttributes.Length != 0)
   {
      output = stringAttributes[0].Value;
   }
   return output;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
797
9
Gpt3D_Clone797_9.cs 1 9
Gpt3D_Clone797_9.cs 10 22
----------------------------------------

public static string GetStringValue (this AuthenticationMethod value) {
    string output = null;
    Type type = value.GetType ();
    FieldInfo fi = type.GetField (value.ToString ());
    StringValue [] attrs = fi.GetCustomAttributes (typeof (StringValue), false) as StringValue [];
    if (attrs.Length > 0)
        output = attrs [0].Value;
    return output;
}
----------------------------------------

 public static string FetchStringValue (this AuthenticationMethod currentAuthenticationMethod) {
   string output = null;
   Type myType = currentAuthenticationMethod.GetType ();
   FieldInfo fieldInfo = myType.GetField (currentAuthenticationMethod.ToString ());
   var stringAttributes = fieldInfo.GetCustomAttributes (typeof(StringValue), false) as StringValue[];
   if (stringAttributes.Length != 0)
   {
      output = stringAttributes[0].Value;
   }
   return output;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
798
0
Gpt3D_Clone798_0.cs 1 16
Gpt3D_Clone798_0.cs 17 45
----------------------------------------

[STAThread] static void Main (string [] args) {
    Process [] p = Process.GetProcessesByName (Path.GetFileNameWithoutExtension (OnScreenKeyboardExe));
    if (p.Length == 0) {
        if (Thread.CurrentThread.GetApartmentState () == ApartmentState.STA) {
            ThreadStart start = new ThreadStart (StartOsk);
            Thread thread = new Thread (start);
            thread.SetApartmentState (ApartmentState.MTA);
            thread.Start ();
            thread.Join ();
        } else {
            StartOsk ();
        }
    } else {
        SendMessage (p [0].MainWindowHandle, WM_SYSCOMMAND, new IntPtr (SC_RESTORE), new IntPtr (0));
    }
}
----------------------------------------

 [STAThread] 
static void Main (string [] args) 
{
    Process[] p = Process.GetProcessesByName(Path.GetFileNameWithoutExtension(OnScreenKeyboardExe));
    if(p.Length == 0)
    {
        ApartmentState apartmentState = Thread.CurrentThread.GetApartmentState();
        if(apartmentState == ApartmentState.STA)
        {
            ThreadStart threadCreator1 = new ThreadStart(StartOsk);
            Thread t = new Thread(threadCreator1);
            t.SetApartmentState(ApartmentState.MTA);
            t.Start();   
            t.Join();
        } 
        else 
        {
            StartOsk();
        }
    }
    else 
    {
        IntPtr messageHandle = p[0].MainWindowHandle;
        IntPtr int_ptr = IntPtr.op_Explicit(SC_RESTORE);
        SendMessage( messageHandle, WM_SYSCOMMAND,  int_ptr, IntPtr.Zero);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
798
1
Gpt3D_Clone798_1.cs 1 16
Gpt3D_Clone798_1.cs 17 45
----------------------------------------

[STAThread] static void Main (string [] args) {
    Process [] p = Process.GetProcessesByName (Path.GetFileNameWithoutExtension (OnScreenKeyboardExe));
    if (p.Length == 0) {
        if (Thread.CurrentThread.GetApartmentState () == ApartmentState.STA) {
            ThreadStart start = new ThreadStart (StartOsk);
            Thread thread = new Thread (start);
            thread.SetApartmentState (ApartmentState.MTA);
            thread.Start ();
            thread.Join ();
        } else {
            StartOsk ();
        }
    } else {
        SendMessage (p [0].MainWindowHandle, WM_SYSCOMMAND, new IntPtr (SC_RESTORE), new IntPtr (0));
    }
}
----------------------------------------

 [STAThread] 
static void Main (string [] args) 
{
    Process[] p = Process.GetProcessesByName (Path.GetFileNameWithoutExtension (OnScreenKeyboardExe));
    if (p.Length == 0) 
    {
        if (Thread.CurrentThread.GetApartmentState () == ApartmentState.STA) 
        {
            // Create with anonymous method
            ThreadStart threadStart = delegate 
            {
                StartOsk (); 
            };
            Thread t = new Thread (threadStart);
            t.SetApartmentState (ApartmentState.MTA);
            t.Start ();
            t.Join ();
        } else 
        {
            StartOsk ();
        }
    } else 
    {
        IntPtr int_ptr = IntPtr.op_Explicit (SC_RESTORE);
        SendMessage (p [0].MainWindowHandle, WM_SYSCOMMAND, int_ptr , IntPtr.Zero);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
798
2
Gpt3D_Clone798_2.cs 1 16
Gpt3D_Clone798_2.cs 17 43
----------------------------------------

[STAThread] static void Main (string [] args) {
    Process [] p = Process.GetProcessesByName (Path.GetFileNameWithoutExtension (OnScreenKeyboardExe));
    if (p.Length == 0) {
        if (Thread.CurrentThread.GetApartmentState () == ApartmentState.STA) {
            ThreadStart start = new ThreadStart (StartOsk);
            Thread thread = new Thread (start);
            thread.SetApartmentState (ApartmentState.MTA);
            thread.Start ();
            thread.Join ();
        } else {
            StartOsk ();
        }
    } else {
        SendMessage (p [0].MainWindowHandle, WM_SYSCOMMAND, new IntPtr (SC_RESTORE), new IntPtr (0));
    }
}
----------------------------------------

 [STAThread] 
static void Main (string [] args) 
{
    Process[] p = Process.GetProcessesByName(Path.GetFileNameWithoutExtension(OnScreenKeyboardExe));
    if(p.Length == 0)
    {
        if(Thread.CurrentThread.GetApartmentState() == ApartmentState.STA)
        {
            ThreadStart start = delegate { StartOsk(); };
            Thread t = new Thread(start);
            t.SetApartmentState(ApartmentState.MTA);
            t.Start(); 
            t.Join();
        } 
        else
        {
            StartOsk();
        }
    } 
    else
    {
        IntPtr int_ptr = IntPtr.op_Explicit(SC_RESTORE);
        SendMessage(p[0].MainWindowHandle, WM_SYSCOMMAND,  int_ptr, new IntPtr(0));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
798
3
Gpt3D_Clone798_3.cs 1 16
Gpt3D_Clone798_3.cs 17 40
----------------------------------------

[STAThread] static void Main (string [] args) {
    Process [] p = Process.GetProcessesByName (Path.GetFileNameWithoutExtension (OnScreenKeyboardExe));
    if (p.Length == 0) {
        if (Thread.CurrentThread.GetApartmentState () == ApartmentState.STA) {
            ThreadStart start = new ThreadStart (StartOsk);
            Thread thread = new Thread (start);
            thread.SetApartmentState (ApartmentState.MTA);
            thread.Start ();
            thread.Join ();
        } else {
            StartOsk ();
        }
    } else {
        SendMessage (p [0].MainWindowHandle, WM_SYSCOMMAND, new IntPtr (SC_RESTORE), new IntPtr (0));
    }
}
----------------------------------------

 [STAThread]
static void Main (string [] args) 
{
    Process [] p = Process.GetProcessesByName (Path.GetFileNameWithoutExtension (OnScreenKeyboardExe));
    if (p.Length == 0) 
    {
        if (Thread.CurrentThread.GetApartmentState () == ApartmentState.STA) 
        {
            Action startAction = () => StartOsk ();
            Thread thread = new Thread (startAction);
            thread.SetApartmentState (ApartmentState.MTA);
            thread.Start ();
            thread.Join ();
        } else {
            StartOsk ();
        }
    } else {
        IntPtr intPtrRestoreSc = IntPtr.op_Explicit (SC_RESTORE);
        IntPtr intPtrZero = IntPtr.Zero;
        SendMessage (p [0].MainWindowHandle, WM_SYSCOMMAND, intPtrRestoreSc, intPtrZero);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
798
4
Gpt3D_Clone798_4.cs 1 16
Gpt3D_Clone798_4.cs 17 57
----------------------------------------

[STAThread] static void Main (string [] args) {
    Process [] p = Process.GetProcessesByName (Path.GetFileNameWithoutExtension (OnScreenKeyboardExe));
    if (p.Length == 0) {
        if (Thread.CurrentThread.GetApartmentState () == ApartmentState.STA) {
            ThreadStart start = new ThreadStart (StartOsk);
            Thread thread = new Thread (start);
            thread.SetApartmentState (ApartmentState.MTA);
            thread.Start ();
            thread.Join ();
        } else {
            StartOsk ();
        }
    } else {
        SendMessage (p [0].MainWindowHandle, WM_SYSCOMMAND, new IntPtr (SC_RESTORE), new IntPtr (0));
    }
}
----------------------------------------

 [STAThread]
static void Main (string [] args) 
{
    // Get all the processes by name
    Process[] processes = Process.GetProcessesByName(Path.GetFileNameWithoutExtension(OnScreenKeyboardExe));
    
    // If there are no processes, start one
    if (processes.Length == 0) 
    {
        // Get current thread's apartment state
        ApartmentState state = Thread.CurrentThread.GetApartmentState();
        
        // If state is STA, create a thread
        if (state == ApartmentState.STA) 
        {
            // Start OSK in a new thread
            Thread thread = new Thread(StartOsk);
            // Set the ApartmentState to MTA
            thread.SetApartmentState(ApartmentState.MTA);
            // Start the new thread and wait for completion
            thread.Start();
            thread.Join();
        } 
        else 
        {
            // If the ApartmentState is already MTA, just call the StartOsk function
            StartOsk();
        }
    } 
    else 
    {
        // If process exists, send SC_RESTORE message
        IntPtr messageHandle = processes[0].MainWindowHandle;
        IntPtr int_ptr = IntPtr.op_Explicit(SC_RESTORE);
        SendMessage(messageHandle, WM_SYSCOMMAND, int_ptr, IntPtr.Zero);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
798
5
Gpt3D_Clone798_5.cs 1 16
Gpt3D_Clone798_5.cs 17 45
----------------------------------------

[STAThread] static void Main (string [] args) {
    Process [] p = Process.GetProcessesByName (Path.GetFileNameWithoutExtension (OnScreenKeyboardExe));
    if (p.Length == 0) {
        if (Thread.CurrentThread.GetApartmentState () == ApartmentState.STA) {
            ThreadStart start = new ThreadStart (StartOsk);
            Thread thread = new Thread (start);
            thread.SetApartmentState (ApartmentState.MTA);
            thread.Start ();
            thread.Join ();
        } else {
            StartOsk ();
        }
    } else {
        SendMessage (p [0].MainWindowHandle, WM_SYSCOMMAND, new IntPtr (SC_RESTORE), new IntPtr (0));
    }
}
----------------------------------------

 [STAThread] 
static void Main (string [] args) 
{
    Process[] p = Process.GetProcessesByName(Path.GetFileNameWithoutExtension(OnScreenKeyboardExe));
    if (p.Length == 0) 
    {
        ApartmentState threadState = Thread.CurrentThread.GetApartmentState();
        if (threadState == ApartmentState.STA)
        {
            // Create with a lambda expression
            Thread t = new Thread(() => StartOsk());
            t.SetApartmentState(ApartmentState.MTA);
            t.Start();
            t.Join();
        }
        else 
        {
            StartOsk();
        }
    }
    else 
    {
        IntPtr messageHandle = p[0].MainWindowHandle;
        IntPtr int_ptr = IntPtr.op_Explicit(SC_RESTORE);
        SendMessage(messageHandle, WM_SYSCOMMAND, int_ptr, IntPtr.Zero);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
798
6
Gpt3D_Clone798_6.cs 1 16
Gpt3D_Clone798_6.cs 17 54
----------------------------------------

[STAThread] static void Main (string [] args) {
    Process [] p = Process.GetProcessesByName (Path.GetFileNameWithoutExtension (OnScreenKeyboardExe));
    if (p.Length == 0) {
        if (Thread.CurrentThread.GetApartmentState () == ApartmentState.STA) {
            ThreadStart start = new ThreadStart (StartOsk);
            Thread thread = new Thread (start);
            thread.SetApartmentState (ApartmentState.MTA);
            thread.Start ();
            thread.Join ();
        } else {
            StartOsk ();
        }
    } else {
        SendMessage (p [0].MainWindowHandle, WM_SYSCOMMAND, new IntPtr (SC_RESTORE), new IntPtr (0));
    }
}
----------------------------------------

 [STAThread] 
static void Main (string [] args) 
{
    // Get all the processes by name
    Process[] processes = Process.GetProcessesByName (Path.GetFileNameWithoutExtension (OnScreenKeyboardExe));
    
    // If there are no processes, start one
    if (processes.Length == 0) 
    {
        // Get current thread's apartment state
        ApartmentState state = Thread.CurrentThread.GetApartmentState ();
        
        // If state is STA, create a thread
        if (state == ApartmentState.STA) 
        {
            Thread thread = new Thread (StartOsk);
            
            // Set apartment state to MTA
            thread.SetApartmentState (ApartmentState.MTA);
            thread.Start ();
            thread.Join ();
        }
        else 
        {
            // Otherwise, just start OSK
            StartOsk ();
        }
    }
    else 
    {
        // If process exists, send SC_RESTORE message
        IntPtr messageHandle = processes[0].MainWindowHandle;
        IntPtr int_ptr = IntPtr.op_Explicit (SC_RESTORE);
        SendMessage (messageHandle, WM_SYSCOMMAND, int_ptr, IntPtr.Zero);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
798
7
Gpt3D_Clone798_7.cs 1 16
Gpt3D_Clone798_7.cs 17 53
----------------------------------------

[STAThread] static void Main (string [] args) {
    Process [] p = Process.GetProcessesByName (Path.GetFileNameWithoutExtension (OnScreenKeyboardExe));
    if (p.Length == 0) {
        if (Thread.CurrentThread.GetApartmentState () == ApartmentState.STA) {
            ThreadStart start = new ThreadStart (StartOsk);
            Thread thread = new Thread (start);
            thread.SetApartmentState (ApartmentState.MTA);
            thread.Start ();
            thread.Join ();
        } else {
            StartOsk ();
        }
    } else {
        SendMessage (p [0].MainWindowHandle, WM_SYSCOMMAND, new IntPtr (SC_RESTORE), new IntPtr (0));
    }
}
----------------------------------------

 [STAThread]
static void Main (string [] args) 
{
    Process [] p = Process.GetProcessesByName(Path.GetFileNameWithoutExtension(OnScreenKeyboardExe));
    if (p.Length == 0) 
    {
        ApartmentState threadState = Thread.CurrentThread.GetApartmentState();
        if (threadState == ApartmentState.STA) 
        {
            // Create a new thread
            Thread t = new Thread(StartOsk);
            // Set the ApartmentState to MTA
            t.SetApartmentState(ApartmentState.MTA);
            // Start the thread
            t.Start();
            // Join the thread
            t.Join();
        }
        else
        {
            // If the ApartmentState is already MTA, just call the StartOsk function
            StartOsk();
        }
    }
    else
    {
        // If the process is already started, send the SC_RESTORE message
        IntPtr messageHandle = p[0].MainWindowHandle;
        IntPtr intPtrRestoreSc = IntPtr.op_Explicit(SC_RESTORE);
        SendMessage(messageHandle, WM_SYSCOMMAND, intPtrRestoreSc, IntPtr.Zero);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
798
8
Gpt3D_Clone798_8.cs 1 16
Gpt3D_Clone798_8.cs 17 53
----------------------------------------

[STAThread] static void Main (string [] args) {
    Process [] p = Process.GetProcessesByName (Path.GetFileNameWithoutExtension (OnScreenKeyboardExe));
    if (p.Length == 0) {
        if (Thread.CurrentThread.GetApartmentState () == ApartmentState.STA) {
            ThreadStart start = new ThreadStart (StartOsk);
            Thread thread = new Thread (start);
            thread.SetApartmentState (ApartmentState.MTA);
            thread.Start ();
            thread.Join ();
        } else {
            StartOsk ();
        }
    } else {
        SendMessage (p [0].MainWindowHandle, WM_SYSCOMMAND, new IntPtr (SC_RESTORE), new IntPtr (0));
    }
}
----------------------------------------

 [STAThread]
static void Main (string [] args) 
{
    Process [] p = Process.GetProcessesByName (Path.GetFileNameWithoutExtension (OnScreenKeyboardExe));
    if (p.Length == 0) 
    {
        // Get the ApartmentState of the thread
        ApartmentState threadState = Thread.CurrentThread.GetApartmentState ();
        // Check the ApartmentState
        if (threadState == ApartmentState.STA) 
        {
            // Create a new thread with a delegate pointing to StartOsk
            // function
            Thread t = new Thread (new ThreadStart (StartOsk));
            // Set the ApartmentState to MTA
            t.SetApartmentState (ApartmentState.MTA);
            // Start and join the thread
            t.Start ();
            t.Join ();
        } 
        else 
        {
            // If the ApartmentState is already MTA, just call the StartOsk function
            StartOsk ();
        }
    } 
    else 
    {
        // If the process has already started, send the SC_RESTORE message
        SendMessage (p[0].MainWindowHandle, WM_SYSCOMMAND, IntPtr.op_Explicit(SC_RESTORE), IntPtr.Zero);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
79
0
Gpt3D_Clone79_0.cs 1 14
Gpt3D_Clone79_0.cs 15 35
----------------------------------------

static void Main (string [] args) {
    List < string > list = new List < string > ();
    list.Add ("Bill cat had");
    list.Add ("Bill had a cat");
    list.Add ("Bill had cat");
    list.Add ("Cat had Bill");
    Regex rex = new Regex (@"((Bill)).*((had)).*((cat))");
    foreach (string str in list) {
        if (rex.IsMatch (str)) {
            Console.WriteLine (str);
        }
    }
    Console.ReadLine ();
}
----------------------------------------

  static void Main (string [] args)
    {
        List < string > list = new List < string > ();
        list.Add ("Bill cat had");
        list.Add ("Bill had a cat");
        list.Add ("Bill had cat");
        list.Add ("Cat had Bill");
        string pattern = @"((Bill)).*((had)).*((cat))";
        RegexOptions options = RegexOptions.IgnoreCase;
        foreach (string str in list)
        {
            if (Regex.IsMatch(str, pattern, options))
            {
                Console.WriteLine(str);
            }
        }
        Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
79
1
Gpt3D_Clone79_1.cs 1 14
Gpt3D_Clone79_1.cs 15 35
----------------------------------------

static void Main (string [] args) {
    List < string > list = new List < string > ();
    list.Add ("Bill cat had");
    list.Add ("Bill had a cat");
    list.Add ("Bill had cat");
    list.Add ("Cat had Bill");
    Regex rex = new Regex (@"((Bill)).*((had)).*((cat))");
    foreach (string str in list) {
        if (rex.IsMatch (str)) {
            Console.WriteLine (str);
        }
    }
    Console.ReadLine ();
}
----------------------------------------

 static void Main (string [] args)
    {
        List < string > list = new List < string > ();
        list.Add ("Bill cat had");
        list.Add ("Bill had a cat");
        list.Add ("Bill had cat");
        list.Add ("Cat had Bill");
        string pattern = @"((Bill))[^\W]*((had))[^\W]*((cat))";
        RegexOptions options = RegexOptions.IgnoreCase;
        foreach (string str in list)
        {
            if (Regex.IsMatch(str, pattern, options))
            {
                Console.WriteLine(str);
            }
        }
        Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
79
2
Gpt3D_Clone79_2.cs 1 14
Gpt3D_Clone79_2.cs 15 35
----------------------------------------

static void Main (string [] args) {
    List < string > list = new List < string > ();
    list.Add ("Bill cat had");
    list.Add ("Bill had a cat");
    list.Add ("Bill had cat");
    list.Add ("Cat had Bill");
    Regex rex = new Regex (@"((Bill)).*((had)).*((cat))");
    foreach (string str in list) {
        if (rex.IsMatch (str)) {
            Console.WriteLine (str);
        }
    }
    Console.ReadLine ();
}
----------------------------------------

  static void Main (string [] args) 
    { 
        List < string > list = new List < string > (); 
        list.Add ("Bill cat had"); 
        list.Add ("Bill had a cat"); 
        list.Add ("Bill had cat"); 
        list.Add ("Cat had Bill");
        string pattern = @"((Bill))[ -]*((had))[ -]*((cat))"; 
        RegexOptions options = RegexOptions.IgnoreCase; 
        foreach (string str in list) 
        { 
            if (Regex.IsMatch(str, pattern, options)) 
            { 
                Console.WriteLine(str); 
            } 
        } 
        Console.ReadLine(); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
79
3
Gpt3D_Clone79_3.cs 1 14
Gpt3D_Clone79_3.cs 15 35
----------------------------------------

static void Main (string [] args) {
    List < string > list = new List < string > ();
    list.Add ("Bill cat had");
    list.Add ("Bill had a cat");
    list.Add ("Bill had cat");
    list.Add ("Cat had Bill");
    Regex rex = new Regex (@"((Bill)).*((had)).*((cat))");
    foreach (string str in list) {
        if (rex.IsMatch (str)) {
            Console.WriteLine (str);
        }
    }
    Console.ReadLine ();
}
----------------------------------------

 static void Main (string [] args) 
    { 
        List < string > list = new List < string > (); 
        list.Add("Bill cat had"); 
        list.Add("Bill had a cat"); 
        list.Add("Bill had cat"); 
        list.Add("Cat had Bill"); 
        string pattern = @"((Bill))[.:\s]*((had))[.:\s]*((cat))"; 
        RegexOptions options = RegexOptions.IgnoreCase; 
        foreach (string str in list) 
        { 
            if (Regex.IsMatch(str, pattern, options)) 
            { 
                Console.WriteLine(str); 
            } 
        } 
        Console.ReadLine(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
79
4
Gpt3D_Clone79_4.cs 1 14
Gpt3D_Clone79_4.cs 15 35
----------------------------------------

static void Main (string [] args) {
    List < string > list = new List < string > ();
    list.Add ("Bill cat had");
    list.Add ("Bill had a cat");
    list.Add ("Bill had cat");
    list.Add ("Cat had Bill");
    Regex rex = new Regex (@"((Bill)).*((had)).*((cat))");
    foreach (string str in list) {
        if (rex.IsMatch (str)) {
            Console.WriteLine (str);
        }
    }
    Console.ReadLine ();
}
----------------------------------------

   static void Main (string [] args) 
    { 
        List < string > list = new List < string > (); 
        list.Add ("Bill cat had"); 
        list.Add ("Bill had a cat"); 
        list.Add ("Bill had cat"); 
        list.Add ("Cat had Bill"); 
        string pattern = @"((Bill)).*((had)).*((cat))"; 
        foreach (string str in list) 
        { 
            Match m = Regex.Match(str, pattern); 
            if (m.Success) 
            { 
                Console.WriteLine(str); 
            } 
        } 
        Console.ReadLine(); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
79
5
Gpt3D_Clone79_5.cs 1 14
Gpt3D_Clone79_5.cs 15 35
----------------------------------------

static void Main (string [] args) {
    List < string > list = new List < string > ();
    list.Add ("Bill cat had");
    list.Add ("Bill had a cat");
    list.Add ("Bill had cat");
    list.Add ("Cat had Bill");
    Regex rex = new Regex (@"((Bill)).*((had)).*((cat))");
    foreach (string str in list) {
        if (rex.IsMatch (str)) {
            Console.WriteLine (str);
        }
    }
    Console.ReadLine ();
}
----------------------------------------

  static void Main (string [] args) 
    { 
        List < string > list = new List < string > (); 
        list.Add ("Bill cat had"); 
        list.Add ("Bill had a cat"); 
        list.Add ("Bill had cat"); 
        list.Add ("Cat had Bill"); 
        string pattern = @"((Bill))[^\s]*((had))[^\s]*((cat))"; 
        RegexOptions options = RegexOptions.IgnoreCase;
        foreach (string str in list) 
        { 
            if (Regex.IsMatch(str, pattern, options)) 
            { 
                Console.WriteLine(str); 
            } 
        } 
        Console.ReadLine(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
79
6
Gpt3D_Clone79_6.cs 1 14
Gpt3D_Clone79_6.cs 15 35
----------------------------------------

static void Main (string [] args) {
    List < string > list = new List < string > ();
    list.Add ("Bill cat had");
    list.Add ("Bill had a cat");
    list.Add ("Bill had cat");
    list.Add ("Cat had Bill");
    Regex rex = new Regex (@"((Bill)).*((had)).*((cat))");
    foreach (string str in list) {
        if (rex.IsMatch (str)) {
            Console.WriteLine (str);
        }
    }
    Console.ReadLine ();
}
----------------------------------------

  static void Main (string [] args) 
    { 
        List < string > list = new List < string > (); 
        list.Add ("Bill cat had"); 
        list.Add ("Bill had a cat"); 
        list.Add ("Bill had cat"); 
        list.Add ("Cat had Bill"); 
        string pattern = @"((Bill))[\s]*((had))[\s]*((cat))"; 
        RegexOptions options = RegexOptions.IgnoreCase; 
        foreach (string str in list) 
        { 
            if (Regex.IsMatch(str, pattern, options)) 
            { 
                Console.WriteLine(str); 
            } 
        } 
        Console.ReadLine(); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
79
7
Gpt3D_Clone79_7.cs 1 14
Gpt3D_Clone79_7.cs 15 35
----------------------------------------

static void Main (string [] args) {
    List < string > list = new List < string > ();
    list.Add ("Bill cat had");
    list.Add ("Bill had a cat");
    list.Add ("Bill had cat");
    list.Add ("Cat had Bill");
    Regex rex = new Regex (@"((Bill)).*((had)).*((cat))");
    foreach (string str in list) {
        if (rex.IsMatch (str)) {
            Console.WriteLine (str);
        }
    }
    Console.ReadLine ();
}
----------------------------------------

  static void Main (string [] args) 
    { 
        List < string > list = new List < string > (); 
        list.Add ("Bill cat had"); 
        list.Add ("Bill had a cat"); 
        list.Add ("Bill had cat"); 
        list.Add ("Cat had Bill");
        string pattern = @"((Bill))(\W*)((had))(\W*)((cat))"; 
        RegexOptions options = RegexOptions.IgnoreCase; 
        foreach (string str in list) 
        { 
            if (Regex.IsMatch(str, pattern, options)) 
            { 
                Console.WriteLine(str); 
            } 
        } 
        Console.ReadLine(); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
800
0
Gpt3D_Clone800_0.cs 1 21
Gpt3D_Clone800_0.cs 22 46
----------------------------------------

public static IEnumerable < T > MergePreserveOrder4 < T, TOrder > (this IEnumerable < IEnumerable < T > > aa, Func < T, TOrder > orderFunc) where TOrder : IComparable < TOrder > {
    var items = aa.Select (xx => xx.GetEnumerator ()).Where (ee => ee.MoveNext ()).Select (ee => Tuple.Create (orderFunc (ee.Current), ee)).OrderBy (ee => ee.Item1).ToList ();
    while (items.Count > 0) {
        yield return items [0].Item2.Current;
        var next = items [0];
        items.RemoveAt (0);
        if (next.Item2.MoveNext ()) {
            var value = orderFunc (next.Item2.Current);
            var ii = 0;
            for (; ii < items.Count; ++ ii) {
                if (value.CompareTo (items [ii].Item1) <= 0) {
                    items.Insert (ii, Tuple.Create (value, next.Item2));
                    break;
                }
            }
            if (ii == items.Count)
                items.Add (Tuple.Create (value, next.Item2));
        } else
            next.Item2.Dispose ();
    }
}
----------------------------------------

  public static IEnumerable < T > MergePreserveOrder4 < T, TOrder > (this IEnumerable < IEnumerable < T > > aa, Func < T, TOrder > orderFunc) where TOrder : IComparable < TOrder > {
    var items = aa.Select (xx => xx.GetEnumerator ()).Where (ee => ee.MoveNext ()).Select (ee => Tuple.Create (orderFunc (ee.Current), ee)).OrderBy (ee => ee.Item1).ToLinkedList ();
    while (items.Count > 0) {
        yield return items.First.Value.Item2.Current;
        var next = items.First.Value;
        items.RemoveFirst();
        if (next.Item2.MoveNext ()) {
            var value = orderFunc (next.Item2.Current);
            var ii = 0;
            var node = items.First;
            for (; ii < items.Count; ++ ii) {
                if (value.CompareTo (node.Value.Item1) <= 0) {
                    items.AddBefore(node, Tuple.Create (value, next.Item2));
                    break;
                }
                node = node.Next; 
            }
            if (ii == items.Count)
                items.AddLast (Tuple.Create (value, next.Item2));
        } else
            next.Item2.Dispose ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
800
1
Gpt3D_Clone800_1.cs 1 21
Gpt3D_Clone800_1.cs 22 46
----------------------------------------

public static IEnumerable < T > MergePreserveOrder4 < T, TOrder > (this IEnumerable < IEnumerable < T > > aa, Func < T, TOrder > orderFunc) where TOrder : IComparable < TOrder > {
    var items = aa.Select (xx => xx.GetEnumerator ()).Where (ee => ee.MoveNext ()).Select (ee => Tuple.Create (orderFunc (ee.Current), ee)).OrderBy (ee => ee.Item1).ToList ();
    while (items.Count > 0) {
        yield return items [0].Item2.Current;
        var next = items [0];
        items.RemoveAt (0);
        if (next.Item2.MoveNext ()) {
            var value = orderFunc (next.Item2.Current);
            var ii = 0;
            for (; ii < items.Count; ++ ii) {
                if (value.CompareTo (items [ii].Item1) <= 0) {
                    items.Insert (ii, Tuple.Create (value, next.Item2));
                    break;
                }
            }
            if (ii == items.Count)
                items.Add (Tuple.Create (value, next.Item2));
        } else
            next.Item2.Dispose ();
    }
}
----------------------------------------

 public static IEnumerable < T > MergePreserveOrder4 < T, TOrder > (this IEnumerable < IEnumerable < T > > aa, Func < T, TOrder > orderFunc) where TOrder : IComparable < TOrder > {
    var items = aa.Select (xx => xx.GetEnumerator ()).Where (ee => ee.MoveNext ()).Select (ee => Tuple.Create (orderFunc (ee.Current), ee)).OrderBy (ee => ee.Item1).ToHashSet();
    while (items.Count > 0) {
        yield return items.First().Item2.Current;
        var next = items.First();
        items.Remove(next);
        if (next.Item2.MoveNext ()) {
            var value = orderFunc (next.Item2.Current);
            var ii = 0;
            var node = items.First;
            for (; ii < items.Count; ++ ii) {
                if (value.CompareTo (node.Value.Item1) <= 0) {
                    items.Add(Tuple.Create (value, next.Item2));
                    break;
                }
                node = node.Next; 
            }
            if (ii == items.Count)
                items.Add (Tuple.Create (value, next.Item2));
        } else
            next.Item2.Dispose ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
800
2
Gpt3D_Clone800_2.cs 1 21
Gpt3D_Clone800_2.cs 22 44
----------------------------------------

public static IEnumerable < T > MergePreserveOrder4 < T, TOrder > (this IEnumerable < IEnumerable < T > > aa, Func < T, TOrder > orderFunc) where TOrder : IComparable < TOrder > {
    var items = aa.Select (xx => xx.GetEnumerator ()).Where (ee => ee.MoveNext ()).Select (ee => Tuple.Create (orderFunc (ee.Current), ee)).OrderBy (ee => ee.Item1).ToList ();
    while (items.Count > 0) {
        yield return items [0].Item2.Current;
        var next = items [0];
        items.RemoveAt (0);
        if (next.Item2.MoveNext ()) {
            var value = orderFunc (next.Item2.Current);
            var ii = 0;
            for (; ii < items.Count; ++ ii) {
                if (value.CompareTo (items [ii].Item1) <= 0) {
                    items.Insert (ii, Tuple.Create (value, next.Item2));
                    break;
                }
            }
            if (ii == items.Count)
                items.Add (Tuple.Create (value, next.Item2));
        } else
            next.Item2.Dispose ();
    }
}
----------------------------------------

 public static IEnumerable < T > MergePreserveOrder4 < T, TOrder > (this IEnumerable < IEnumerable < T > > aa, Func < T, TOrder > orderFunc) where TOrder : IComparable < TOrder > {
    var items = aa.Select (xx => xx.GetEnumerator ()).Where (ee => ee.MoveNext ()).Select (ee => Tuple.Create (orderFunc (ee.Current), ee)).OrderBy (ee => ee.Item1).ToConcurrentReadOnlyDictionary();
    while (items.Count > 0) {
        yield return items.Keys.First().Item2.Current;
        var next = items.Keys.First();
        items.TryRemove(next, out var _);
        if (next.Item2.MoveNext ()) {
            var value = orderFunc (next.Item2.Current);
            var ii = 0;
            for (; ii < items.Count; ++ ii) {
                if (value.CompareTo (items [ii].Item1) <= 0) {
                    items.TryAdd(Tuple.Create (value, next.Item2),null);
                    break;
                }
            }
            if (ii == items.Count)
                items.TryAdd (Tuple.Create (value, next.Item2),null);
        } else
            next.Item2.Dispose ();
    }   
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
801
0
Gpt3D_Clone801_0.cs 1 15
Gpt3D_Clone801_0.cs 16 33
----------------------------------------

private static IEnumerable < TResult > SelectTwoImpl < TSource, TResult > (this IEnumerable < TSource > source, Func < TSource, TSource, TResult > selector) {
    using (var iterator = source.GetEnumerator ())
    {
        var item2 = default (TSource);
        var i = 0;
        while (iterator.MoveNext ()) {
            var item1 = item2;
            item2 = iterator.Current;
            i ++;
            if (i >= 2) {
                yield return selector (item1, item2);
            }
        }
    }
}
----------------------------------------

  private static IEnumerable<TResult> SelectTwoImpl<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TSource, TResult> selector)
    { 
        using (var enumerator = source.GetEnumerator())
        {
            TSource item2 = default(TSource);
            while (enumerator.MoveNext())
            {
                var item1 = item2;
                item2 = enumerator.Current;
        
                if (item1 != null)
                    yield return selector(item1, item2);
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
801
3
Gpt3D_Clone801_3.cs 1 15
Gpt3D_Clone801_3.cs 16 31
----------------------------------------

private static IEnumerable < TResult > SelectTwoImpl < TSource, TResult > (this IEnumerable < TSource > source, Func < TSource, TSource, TResult > selector) {
    using (var iterator = source.GetEnumerator ())
    {
        var item2 = default (TSource);
        var i = 0;
        while (iterator.MoveNext ()) {
            var item1 = item2;
            item2 = iterator.Current;
            i ++;
            if (i >= 2) {
                yield return selector (item1, item2);
            }
        }
    }
}
----------------------------------------

  private static IEnumerable<TResult> SelectTwoImpl<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TSource, TResult> selector)
    { 
        var iterator = source.GetEnumerator();
        var item2 = default(TSource);
        while (iterator.MoveNext())
        {
            var item1 = item2;
            item2 = iterator.Current;
        
            if (item1 != null)
                yield return selector(item1, item2);
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
801
4
Gpt3D_Clone801_4.cs 1 15
Gpt3D_Clone801_4.cs 16 31
----------------------------------------

private static IEnumerable < TResult > SelectTwoImpl < TSource, TResult > (this IEnumerable < TSource > source, Func < TSource, TSource, TResult > selector) {
    using (var iterator = source.GetEnumerator ())
    {
        var item2 = default (TSource);
        var i = 0;
        while (iterator.MoveNext ()) {
            var item1 = item2;
            item2 = iterator.Current;
            i ++;
            if (i >= 2) {
                yield return selector (item1, item2);
            }
        }
    }
}
----------------------------------------

  private static IEnumerable<TResult> SelectTwoImpl<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TSource, TResult> selector)
    { 
        var iterator = source.Take(2).GetEnumerator();
        var item2 = default(TSource);
        while (iterator.MoveNext())
        {
            var item1 = item2;
            item2 = iterator.Current;
            
            if (item1 != null)
                yield return selector(item1,item2);
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
803
7
Gpt3D_Clone803_7.cs 1 13
Gpt3D_Clone803_7.cs 14 38
----------------------------------------

public static childItem FindVisualChild < childItem > (DependencyObject obj) where childItem : DependencyObject {
    for (int i = 0; i < VisualTreeHelper.GetChildrenCount (obj); i ++) {
        DependencyObject child = VisualTreeHelper.GetChild (obj, i);
        if (child != null && child is childItem)
            return (childItem) child;
        else {
            childItem childOfChild = FindVisualChild < childItem > (child);
            if (childOfChild != null)
                return childOfChild;
        }
    }
    return null;
}
----------------------------------------

 public static childItem FindVisualChild<childItem>(DependencyObject obj) 
    where childItem: DependencyObject
{
    for (int i = VisualTreeHelper.GetChildrenCount(obj) - 1; i >= 0; i--) 
    {
        var child = VisualTreeHelper.GetChild(obj, i);
        if (child is childItem) 
        {
            return (childItem)child;
        } 
        else 
        {
            childItem childOfChild = FindVisualChild<childItem>(child);
            if (childOfChild != null) 
            {
                return childOfChild;
            }
        }
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
803
8
Gpt3D_Clone803_8.cs 1 13
Gpt3D_Clone803_8.cs 14 35
----------------------------------------

public static childItem FindVisualChild < childItem > (DependencyObject obj) where childItem : DependencyObject {
    for (int i = 0; i < VisualTreeHelper.GetChildrenCount (obj); i ++) {
        DependencyObject child = VisualTreeHelper.GetChild (obj, i);
        if (child != null && child is childItem)
            return (childItem) child;
        else {
            childItem childOfChild = FindVisualChild < childItem > (child);
            if (childOfChild != null)
                return childOfChild;
        }
    }
    return null;
}
----------------------------------------

 public static ChildItem FindVisualChild<ChildItem>(DependencyObject obj) where ChildItem : DependencyObject
{    
    for (int i = 0; i < VisualTreeHelper.GetChildrenCount(obj); i++)
    {
        DependencyObject child = VisualTreeHelper.GetChild(obj, i);
        if (child is ChildItem childItem)
        {
            return childItem;
        }
        else
        {
            ChildItem childOfChild = FindVisualChild<ChildItem>(child);
            if (childOfChild != null)
            {
                return childOfChild;
            }
        }
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
804
4
Gpt3D_Clone804_4.cs 1 14
Gpt3D_Clone804_4.cs 15 31
----------------------------------------

void Main () {
    var a = new StateRandom (123);
    a.Next (100);
    a.Next (100);
    a.Next (100);
    var state = a.NumberOfInvokes;
    Console.WriteLine (a.Next (100));
    Console.WriteLine (a.Next (100));
    Console.WriteLine (a.Next (100));
    var b = new StateRandom (123, state);
    Console.WriteLine (b.Next (100));
    Console.WriteLine (b.Next (100));
    Console.WriteLine (b.Next (100));
}
----------------------------------------

  void Main()
{
    StateRandom a = new StateRandom(123);
    a.Next(100);
    a.Next(100);
    a.Next(100);
    var state = a.NumberOfInvokes;
    System.Console.WriteLine(a.Next(100));
    System.Console.WriteLine(a.Next(100));
    System.Console.WriteLine(a.Next(100));
    StateRandom b = new StateRandom(123, state);
    System.Console.WriteLine(b.Next(100));
    System.Console.WriteLine(b.Next(100));
    System.Console.WriteLine(b.Next(100));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
804
5
Gpt3D_Clone804_5.cs 1 14
Gpt3D_Clone804_5.cs 15 31
----------------------------------------

void Main () {
    var a = new StateRandom (123);
    a.Next (100);
    a.Next (100);
    a.Next (100);
    var state = a.NumberOfInvokes;
    Console.WriteLine (a.Next (100));
    Console.WriteLine (a.Next (100));
    Console.WriteLine (a.Next (100));
    var b = new StateRandom (123, state);
    Console.WriteLine (b.Next (100));
    Console.WriteLine (b.Next (100));
    Console.WriteLine (b.Next (100));
}
----------------------------------------

  void Main()
{
    StateRandom a = new StateRandom(123);
    a.Next(100);
    a.Next(100);
    a.Next(100);
    var state = a.NumberOfInvokes;
    Console.Out.Write("{0} ", a.Next(100));
    Console.Out.Write("{0} ", a.Next(100));
    Console.Out.WriteLine("{0} ", a.Next(100));
    StateRandom b = new StateRandom(123, state);
    Console.Out.Write("{0} ", b.Next(100));
    Console.Out.Write("{0} ", b.Next(100));
    Console.Out.WriteLine("{0} ", b.Next(100));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
804
7
Gpt3D_Clone804_7.cs 1 14
Gpt3D_Clone804_7.cs 15 31
----------------------------------------

void Main () {
    var a = new StateRandom (123);
    a.Next (100);
    a.Next (100);
    a.Next (100);
    var state = a.NumberOfInvokes;
    Console.WriteLine (a.Next (100));
    Console.WriteLine (a.Next (100));
    Console.WriteLine (a.Next (100));
    var b = new StateRandom (123, state);
    Console.WriteLine (b.Next (100));
    Console.WriteLine (b.Next (100));
    Console.WriteLine (b.Next (100));
}
----------------------------------------

  void Main() 
{ 
    StateRandom a = new StateRandom(123);
    a.Next(100);
    a.Next(100);
    a.Next(100);
    var state = a.NumberOfInvokes;
    Console.WriteLine($"{a.Next(100)}");
    Console.WriteLine($"{a.Next(100)}");
    Console.WriteLine($"{a.Next(100)}");
    var b = new StateRandom(123, state);
    Console.WriteLine($"{b.Next(100)}");
    Console.WriteLine($"{b.Next(100)}");
    Console.WriteLine($"{b.Next(100)}");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
805
0
Gpt3D_Clone805_0.cs 1 10
Gpt3D_Clone805_0.cs 11 23
----------------------------------------

public Boolean CheckIPValid (String strIP) {
    string [] arrOctets = strIP.Split ('.');
    if (arrOctets.Length != 4)
        return false;
    byte obyte = 0;
    foreach (string strOctet in arrOctets)
        if (! byte.TryParse (strOctet, out obyte))
            return false;
    return true;
}
----------------------------------------

 public Boolean CheckIPValid (String strIP) {
    string [] arrOctets = strIP.Split ('.');
    if (arrOctets.Length != 4)
        return false;
    int octet;
    foreach (string strOctet in arrOctets) {
        if (!int.TryParse(strOctet, out octet) || octet < 0 || octet > 255)
            return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
805
1
Gpt3D_Clone805_1.cs 1 10
Gpt3D_Clone805_1.cs 11 23
----------------------------------------

public Boolean CheckIPValid (String strIP) {
    string [] arrOctets = strIP.Split ('.');
    if (arrOctets.Length != 4)
        return false;
    byte obyte = 0;
    foreach (string strOctet in arrOctets)
        if (! byte.TryParse (strOctet, out obyte))
            return false;
    return true;
}
----------------------------------------

 public Boolean CheckIPValid (String strIP) {
    string [] arrOctets = strIP.Split ('.');
    if (arrOctets.Length != 4)
        return false;
    float octet;
    foreach (string strOctet in arrOctets) {
        if (!float.TryParse(strOctet, out octet) || octet < 0 || octet > 255)
            return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
805
2
Gpt3D_Clone805_2.cs 1 10
Gpt3D_Clone805_2.cs 11 23
----------------------------------------

public Boolean CheckIPValid (String strIP) {
    string [] arrOctets = strIP.Split ('.');
    if (arrOctets.Length != 4)
        return false;
    byte obyte = 0;
    foreach (string strOctet in arrOctets)
        if (! byte.TryParse (strOctet, out obyte))
            return false;
    return true;
}
----------------------------------------

 public Boolean CheckIPValid (String strIP) {
    string [] arrOctets = strIP.Split ('.');
    if (arrOctets.Length != 4)
        return false;
    ushort octet;
    foreach (string strOctet in arrOctets) {
        if (!ushort.TryParse(strOctet, out octet) || octet < 0 || octet > 255)
            return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
805
3
Gpt3D_Clone805_3.cs 1 10
Gpt3D_Clone805_3.cs 11 23
----------------------------------------

public Boolean CheckIPValid (String strIP) {
    string [] arrOctets = strIP.Split ('.');
    if (arrOctets.Length != 4)
        return false;
    byte obyte = 0;
    foreach (string strOctet in arrOctets)
        if (! byte.TryParse (strOctet, out obyte))
            return false;
    return true;
}
----------------------------------------

 public Boolean CheckIPValid (String strIP) {
    string [] arrOctets = strIP.Split ('.');
    if (arrOctets.Length != 4)
        return false;
    int octet;
    foreach (string strOctet in arrOctets) {
        if (!int.TryParse(strOctet, out octet) || octet < 0 || octet > 255)
            return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
805
4
Gpt3D_Clone805_4.cs 1 10
Gpt3D_Clone805_4.cs 11 23
----------------------------------------

public Boolean CheckIPValid (String strIP) {
    string [] arrOctets = strIP.Split ('.');
    if (arrOctets.Length != 4)
        return false;
    byte obyte = 0;
    foreach (string strOctet in arrOctets)
        if (! byte.TryParse (strOctet, out obyte))
            return false;
    return true;
}
----------------------------------------

 public Boolean CheckIPValid (String strIP) {
    string [] arrOctets = strIP.Split ('.');
    if (arrOctets.Length != 4)
        return false;
    sbyte octet;
    foreach (string strOctet in arrOctets) {
        if (!sbyte.TryParse(strOctet, out octet) || octet < 0 || octet > 255)
            return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
805
5
Gpt3D_Clone805_5.cs 1 10
Gpt3D_Clone805_5.cs 11 23
----------------------------------------

public Boolean CheckIPValid (String strIP) {
    string [] arrOctets = strIP.Split ('.');
    if (arrOctets.Length != 4)
        return false;
    byte obyte = 0;
    foreach (string strOctet in arrOctets)
        if (! byte.TryParse (strOctet, out obyte))
            return false;
    return true;
}
----------------------------------------

 public Boolean CheckIPValid (String strIP) {
    string [] arrOctets = strIP.Split ('.');
    if (arrOctets.Length != 4)
        return false;
    byte octet;
    foreach (string strOctet in arrOctets) {
        if (!byte.TryParse(strOctet, out octet) || octet < 0 || octet > 255)
            return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
805
6
Gpt3D_Clone805_6.cs 1 10
Gpt3D_Clone805_6.cs 11 23
----------------------------------------

public Boolean CheckIPValid (String strIP) {
    string [] arrOctets = strIP.Split ('.');
    if (arrOctets.Length != 4)
        return false;
    byte obyte = 0;
    foreach (string strOctet in arrOctets)
        if (! byte.TryParse (strOctet, out obyte))
            return false;
    return true;
}
----------------------------------------

 public Boolean CheckIPValid (String strIP) {
    string [] arrOctets = strIP.Split ('.');
    if (arrOctets.Length != 4)
        return false;
    long octet;
    foreach (string strOctet in arrOctets) {
        if (!long.TryParse(strOctet, out octet) || octet < 0 || octet > 255)
            return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
805
7
Gpt3D_Clone805_7.cs 1 10
Gpt3D_Clone805_7.cs 11 23
----------------------------------------

public Boolean CheckIPValid (String strIP) {
    string [] arrOctets = strIP.Split ('.');
    if (arrOctets.Length != 4)
        return false;
    byte obyte = 0;
    foreach (string strOctet in arrOctets)
        if (! byte.TryParse (strOctet, out obyte))
            return false;
    return true;
}
----------------------------------------

 public Boolean CheckIPValid (String strIP) {
    string [] arrOctets = strIP.Split ('.');
    if (arrOctets.Length != 4)
        return false;
    uint octet;
    foreach (string strOctet in arrOctets) {
        if (!uint.TryParse(strOctet, out octet) || octet < 0 || octet > 255)
            return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
805
8
Gpt3D_Clone805_8.cs 1 10
Gpt3D_Clone805_8.cs 11 23
----------------------------------------

public Boolean CheckIPValid (String strIP) {
    string [] arrOctets = strIP.Split ('.');
    if (arrOctets.Length != 4)
        return false;
    byte obyte = 0;
    foreach (string strOctet in arrOctets)
        if (! byte.TryParse (strOctet, out obyte))
            return false;
    return true;
}
----------------------------------------

 public Boolean CheckIPValid (String strIP) {
    string [] arrOctets = strIP.Split ('.');
    if (arrOctets.Length != 4)
        return false;
    short octet;
    foreach (string strOctet in arrOctets) {
        if (!short.TryParse(strOctet, out octet) || octet < 0 || octet > 255)
            return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
805
9
Gpt3D_Clone805_9.cs 1 10
Gpt3D_Clone805_9.cs 11 23
----------------------------------------

public Boolean CheckIPValid (String strIP) {
    string [] arrOctets = strIP.Split ('.');
    if (arrOctets.Length != 4)
        return false;
    byte obyte = 0;
    foreach (string strOctet in arrOctets)
        if (! byte.TryParse (strOctet, out obyte))
            return false;
    return true;
}
----------------------------------------

 public Boolean CheckIPValid (String strIP) {
    string [] arrOctets = strIP.Split ('.');
    if (arrOctets.Length != 4)
        return false;
    foreach (string strOctet in arrOctets) {
        int value;
        if (!int.TryParse(strOctet, out value) || value < 0 || value > 255)
            return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
806
0
Gpt3D_Clone806_0.cs 1 17
Gpt3D_Clone806_0.cs 18 42
----------------------------------------

static void HasRows (SqlConnection connection) {
    using (connection)
    using (SqlCommand command = new SqlCommand ("SELECT CategoryID, CategoryName FROM Categories;", connection))
    {
        connection.Open ();
        using (SqlDataReader reader = command.ExecuteReader ())
        {
            if (reader.HasRows) {
                while (reader.Read ()) {
                    Console.WriteLine ("{0}\t{1}", reader.GetInt32 (0), reader.GetString (1));
                }
            } else {
                Console.WriteLine ("No rows found.");
            }
            reader.Close ();
        }}
}
----------------------------------------

 static void HasRows (SqlConnection connection) {
    using (connection)
    using (SqlCommand command = new SqlCommand ("SELECT CategoryID, CategoryName FROM Categories;", connection))
    {
        connection.Open ();
        using (SqlDataReader reader = command.ExecuteReader ())
        {
            int categoryId = 0;
            string categoryName = "";
            if (reader.HasRows) {
                while (reader.Read ()) {
                    categoryId = reader.GetInt32(0);
                    categoryName = reader.GetString(1); 
                    Console.WriteLine ($"{categoryId}\t{categoryName}");
                }
            } else {
                Console.WriteLine ("No rows found.");
            }
            reader.Close ();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
806
1
Gpt3D_Clone806_1.cs 1 17
Gpt3D_Clone806_1.cs 18 40
----------------------------------------

static void HasRows (SqlConnection connection) {
    using (connection)
    using (SqlCommand command = new SqlCommand ("SELECT CategoryID, CategoryName FROM Categories;", connection))
    {
        connection.Open ();
        using (SqlDataReader reader = command.ExecuteReader ())
        {
            if (reader.HasRows) {
                while (reader.Read ()) {
                    Console.WriteLine ("{0}\t{1}", reader.GetInt32 (0), reader.GetString (1));
                }
            } else {
                Console.WriteLine ("No rows found.");
            }
            reader.Close ();
        }}
}
----------------------------------------

 static void HasRows (SqlConnection connection) {
    using (connection)
    using (SqlCommand command = new SqlCommand ("SELECT CategoryID, CategoryName FROM Categories;", connection))
    {
        connection.Open ();
        using (SqlDataReader reader = command.ExecuteReader ())
        {
            if (reader.HasRows) {
                while (reader.FieldCount > 0) {
                    int categoryId = reader.GetInt32(0);
                    string categoryName = reader.GetString(1);
                    Console.WriteLine ($"{categoryId}\t{categoryName}");
                    reader.Read();
                }
            } else {
                Console.WriteLine ("No rows found.");
            }
            reader.Close ();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
807
0
Gpt3D_Clone807_0.cs 1 21
Gpt3D_Clone807_0.cs 22 52
----------------------------------------

static void DeleteEmptyDirs (string dir) {
    if (String.IsNullOrEmpty (dir))
        throw new ArgumentException ("Starting directory is a null reference or an empty string", "dir");
    try {
        foreach (var d in Directory.EnumerateDirectories (dir)) {
            DeleteEmptyDirs (d);
        }
        var entries = Directory.EnumerateFileSystemEntries (dir);
        if (! entries.Any ()) {
            try {
                Directory.Delete (dir);
            }
            catch (UnauthorizedAccessException) {
            }
            catch (DirectoryNotFoundException) {
            }
        }
    }
    catch (UnauthorizedAccessException) {
    }
}
----------------------------------------

 static void DeleteEmptyDirs (string dir)  
{ 
    if (String.IsNullOrEmpty (dir)) 
        throw new ArgumentException ("Starting directory is a null reference or an empty string", "dir"); 
 
    int dirCount = Directory.GetDirectories(dir).Length; 
    int fileCount = Directory.GetFiles(dir).Length; 
   
    if (dirCount == 0 && fileCount == 0)  
    { 
        try 
        { 
            Directory.Delete (dir); 
        } 
        catch (UnauthorizedAccessException) 
        { 
        } 
        catch (DirectoryNotFoundException) 
        { 
        } 
    }  
    else 
    { 
        foreach (string d in Directory.GetDirectories(dir))  
        { 
            DeleteEmptyDirs(d); 
        } 
    } 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
807
1
Gpt3D_Clone807_1.cs 1 21
Gpt3D_Clone807_1.cs 22 50
----------------------------------------

static void DeleteEmptyDirs (string dir) {
    if (String.IsNullOrEmpty (dir))
        throw new ArgumentException ("Starting directory is a null reference or an empty string", "dir");
    try {
        foreach (var d in Directory.EnumerateDirectories (dir)) {
            DeleteEmptyDirs (d);
        }
        var entries = Directory.EnumerateFileSystemEntries (dir);
        if (! entries.Any ()) {
            try {
                Directory.Delete (dir);
            }
            catch (UnauthorizedAccessException) {
            }
            catch (DirectoryNotFoundException) {
            }
        }
    }
    catch (UnauthorizedAccessException) {
    }
}
----------------------------------------

 static void DeleteEmptyDirs (string dir) 
{
    if (String.IsNullOrEmpty (dir))
        throw new ArgumentException ("Starting directory is a null reference or an empty string", "dir");
    var entries = Directory.EnumerateFileSystemEntries (dir);
    if (! entries.Any ())
    {
        try 
        {
            Directory.Delete (dir);
        }
        catch (UnauthorizedAccessException) 
        {
        }
        catch (DirectoryNotFoundException) 
        {
        }
    }
    else 
    {
        directory 
            .EnumerateDirectories ()
            .ToList ()
            .ForEach (x => DeleteEmptyDirs (x));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
807
2
Gpt3D_Clone807_2.cs 1 21
Gpt3D_Clone807_2.cs 22 45
----------------------------------------

static void DeleteEmptyDirs (string dir) {
    if (String.IsNullOrEmpty (dir))
        throw new ArgumentException ("Starting directory is a null reference or an empty string", "dir");
    try {
        foreach (var d in Directory.EnumerateDirectories (dir)) {
            DeleteEmptyDirs (d);
        }
        var entries = Directory.EnumerateFileSystemEntries (dir);
        if (! entries.Any ()) {
            try {
                Directory.Delete (dir);
            }
            catch (UnauthorizedAccessException) {
            }
            catch (DirectoryNotFoundException) {
            }
        }
    }
    catch (UnauthorizedAccessException) {
    }
}
----------------------------------------

 static void DeleteEmptyDirs (string dir) 
{
    if (String.IsNullOrEmpty(dir))
        throw new ArgumentException("Starting directory is a null reference or an empty string", "dir");
    foreach (string d in Directory.EnumerateDirectories(dir))
    {
        DeleteEmptyDirs(d);
    }
    if (!Directory.EnumerateFileSystemEntries(dir).Any())
    {
        try
        {
            Directory.Delete(dir);
        }
        catch (UnauthorizedAccessException)
        {
        }
        catch (DirectoryNotFoundException)
        {
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
807
3
Gpt3D_Clone807_3.cs 1 21
Gpt3D_Clone807_3.cs 22 46
----------------------------------------

static void DeleteEmptyDirs (string dir) {
    if (String.IsNullOrEmpty (dir))
        throw new ArgumentException ("Starting directory is a null reference or an empty string", "dir");
    try {
        foreach (var d in Directory.EnumerateDirectories (dir)) {
            DeleteEmptyDirs (d);
        }
        var entries = Directory.EnumerateFileSystemEntries (dir);
        if (! entries.Any ()) {
            try {
                Directory.Delete (dir);
            }
            catch (UnauthorizedAccessException) {
            }
            catch (DirectoryNotFoundException) {
            }
        }
    }
    catch (UnauthorizedAccessException) {
    }
}
----------------------------------------

 static void DeleteEmptyDirs (string dir) 
{
    if (String.IsNullOrEmpty (dir))
        throw new ArgumentException ("Starting directory is a null reference or an empty string", "dir");
    foreach (string d in Directory.GetDirectories (dir)) 
    {
        DeleteEmptyDirs (d);
    }
    if (Directory.GetFiles (dir).Length == 0 && Directory.GetDirectories (dir).Length == 0) 
    {
        try 
        {
            Directory.Delete (dir);
        } 
        catch (UnauthorizedAccessException) 
        {
        } 
        catch (DirectoryNotFoundException) 
        {
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
807
4
Gpt3D_Clone807_4.cs 1 21
Gpt3D_Clone807_4.cs 22 47
----------------------------------------

static void DeleteEmptyDirs (string dir) {
    if (String.IsNullOrEmpty (dir))
        throw new ArgumentException ("Starting directory is a null reference or an empty string", "dir");
    try {
        foreach (var d in Directory.EnumerateDirectories (dir)) {
            DeleteEmptyDirs (d);
        }
        var entries = Directory.EnumerateFileSystemEntries (dir);
        if (! entries.Any ()) {
            try {
                Directory.Delete (dir);
            }
            catch (UnauthorizedAccessException) {
            }
            catch (DirectoryNotFoundException) {
            }
        }
    }
    catch (UnauthorizedAccessException) {
    }
}
----------------------------------------

 static void DeleteEmptyDirs (string dir) 
{
    if (String.IsNullOrEmpty(dir))
        throw new ArgumentException("Starting directory is a null reference or an empty string", "dir");
    foreach (string subDirectory in Directory.EnumerateDirectories(dir))
    {
        DeleteEmptyDirs(subDirectory);
    }
    if (!Directory.EnumerateFileSystemEntries(dir).Any())
    {
        try
        {
            Directory.Delete(dir);
        }
        catch (UnauthorizedAccessException)
        {
        }
        catch (DirectoryNotFoundException)
        {
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
809
0
Gpt3D_Clone809_0.cs 1 12
Gpt3D_Clone809_0.cs 13 26
----------------------------------------

public static Dictionary < string, object > DictionaryFromType (object atype) {
    if (atype == null)
        return new Dictionary < string, object > ();
    Type t = atype.GetType ();
    PropertyInfo [] props = t.GetProperties ();
    Dictionary < string, object > dict = new Dictionary < string, object > ();
    foreach (PropertyInfo prp in props) {
        object value = prp.GetValue (atype, new object [] {});
        dict.Add (prp.Name, value);
    }
    return dict;
}
----------------------------------------

 public static Dictionary<string, object> DictionaryFromType (object atype) {
    if (atype != null) {
        Type t = atype.GetType();
        PropertyInfo[] props = t.GetProperties();
        Dictionary<string, object> dict = new Dictionary<string, object>();
        foreach (PropertyInfo pi in props) {
            dict.Add(pi.Name, pi.GetValue(atype, new object[] { }));
        }
        return dict;
    }
    return new Dictionary<string, object>();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
809
1
Gpt3D_Clone809_1.cs 1 12
Gpt3D_Clone809_1.cs 13 26
----------------------------------------

public static Dictionary < string, object > DictionaryFromType (object atype) {
    if (atype == null)
        return new Dictionary < string, object > ();
    Type t = atype.GetType ();
    PropertyInfo [] props = t.GetProperties ();
    Dictionary < string, object > dict = new Dictionary < string, object > ();
    foreach (PropertyInfo prp in props) {
        object value = prp.GetValue (atype, new object [] {});
        dict.Add (prp.Name, value);
    }
    return dict;
}
----------------------------------------

 public static Dictionary<string, object> DictionaryFromType (object atype) {
    Dictionary<string, object> dict = new Dictionary<string, object>();
    if (atype != null) {
        Type type = atype.GetType();
        PropertyInfo[] properties = type.GetProperties();
        foreach (PropertyInfo property in properties) {
            object value = property.GetValue (atype, new object[] { });
            dict.Add(property.Name, value);
        }
    }
    return dict;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
810
0
Gpt3D_Clone810_0.cs 1 20
Gpt3D_Clone810_0.cs 21 59
----------------------------------------

[TestMethod ()] public void SortTest () {
    TupleList < int, string > list = new TupleList < int, string > ();
    list.Add (1, "cat");
    list.Add (1, "car");
    list.Add (2, "dog");
    list.Add (2, "door");
    list.Add (3, "elephant");
    list.Add (1, "coconut");
    list.Add (1, "cab");
    list.Sort ();
    foreach (Tuple < int, string > tuple in list) {
        Console.WriteLine (string.Format ("{0}:{1}", tuple.Item1, tuple.Item2));
    }
    int expected_first = 1;
    int expected_last = 3;
    int first = list.First ().Item1;
    int last = list.Last ().Item1;
    Assert.AreEqual (expected_first, first);
    Assert.AreEqual (expected_last, last);
}
----------------------------------------

 [TestMethod ()] public void SortTest ()
        { 
            TupleList<int, string> list = new TupleList<int, string>();
            list.Add(1, "cat");
            list.Add(1, "car");
            list.Add(2, "dog");
            list.Add(2, "door");
            list.Add(3, "elephant");
            list.Add(1, "coconut");
            list.Add(1, "cab");  
            for (int i = 0; i < list.Count - 1; i++)
            {
                var minIndex = i;
                for (int j = i + 1; j < list.Count; j++)
                {
                    if (list[j].Item1 < list[minIndex].Item1)
                    {
                        minIndex = j;
                    }
                }
                var temp = list[i];
                list[i] = list[minIndex];
                list[minIndex] = temp;
            }
            foreach(Tuple<int, string> tuple in list) 
            { 
                Console.WriteLine(string.Format("{0}:{1}", tuple.Item1, tuple.Item2)); 
            } 
            int expected_first = 1; 
            int expected_last = 3; 
            int first = list.First().Item1; 
            int last = list.Last().Item1; 
            Assert.AreEqual(expected_first, first); 
            Assert.AreEqual(expected_last, last); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
810
1
Gpt3D_Clone810_1.cs 1 20
Gpt3D_Clone810_1.cs 21 56
----------------------------------------

[TestMethod ()] public void SortTest () {
    TupleList < int, string > list = new TupleList < int, string > ();
    list.Add (1, "cat");
    list.Add (1, "car");
    list.Add (2, "dog");
    list.Add (2, "door");
    list.Add (3, "elephant");
    list.Add (1, "coconut");
    list.Add (1, "cab");
    list.Sort ();
    foreach (Tuple < int, string > tuple in list) {
        Console.WriteLine (string.Format ("{0}:{1}", tuple.Item1, tuple.Item2));
    }
    int expected_first = 1;
    int expected_last = 3;
    int first = list.First ().Item1;
    int last = list.Last ().Item1;
    Assert.AreEqual (expected_first, first);
    Assert.AreEqual (expected_last, last);
}
----------------------------------------

 [TestMethod ()] public void SortTest ()
        { 
            TupleList<int, string> list = new TupleList<int, string>();
            list.Add(1, "cat");
            list.Add(1, "car");
            list.Add(2, "dog");
            list.Add(2, "door");
            list.Add(3, "elephant");
            list.Add(1, "coconut");
            list.Add(1, "cab");  
            for (int i = 1; i < list.Count; i++)
            {
                var item = list[i];
                var j = i - 1;
                while (j >= 0 && list[j].Item1 > item.Item1)
                {
                    list[j + 1] = list[j];
                    j = j - 1;
                }
                list[j + 1] = item;
            }
            foreach(Tuple<int, string> tuple in list) 
            { 
                Console.WriteLine(string.Format("{0}:{1}", tuple.Item1, tuple.Item2)); 
            } 
            int expected_first = 1; 
            int expected_last = 3; 
            int first = list.First().Item1; 
            int last = list.Last().Item1; 
            Assert.AreEqual(expected_first, first); 
            Assert.AreEqual(expected_last, last); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
810
2
Gpt3D_Clone810_2.cs 1 20
Gpt3D_Clone810_2.cs 21 57
----------------------------------------

[TestMethod ()] public void SortTest () {
    TupleList < int, string > list = new TupleList < int, string > ();
    list.Add (1, "cat");
    list.Add (1, "car");
    list.Add (2, "dog");
    list.Add (2, "door");
    list.Add (3, "elephant");
    list.Add (1, "coconut");
    list.Add (1, "cab");
    list.Sort ();
    foreach (Tuple < int, string > tuple in list) {
        Console.WriteLine (string.Format ("{0}:{1}", tuple.Item1, tuple.Item2));
    }
    int expected_first = 1;
    int expected_last = 3;
    int first = list.First ().Item1;
    int last = list.Last ().Item1;
    Assert.AreEqual (expected_first, first);
    Assert.AreEqual (expected_last, last);
}
----------------------------------------

 [TestMethod ()] public void SortTest ()
        { 
            TupleList<int, string> list = new TupleList<int, string>();
            list.Add(1, "cat");
            list.Add(1, "car");
            list.Add(2, "dog");
            list.Add(2, "door");
            list.Add(3, "elephant");
            list.Add(1, "coconut");
            list.Add(1, "cab");  
            for (int i = 0; i < list.Count - 1; i++)
            {
                for (int j = 0; j < list.Count - 1; j++)
                {
                    if (list[j].Item1 > list[j + 1].Item1)
                    {
                        var temp = list[j];
                        list[j] = list[j + 1];
                        list[j + 1] = temp;
                    }
                }
            }
            foreach(Tuple<int, string> tuple in list) 
            { 
                Console.WriteLine(string.Format("{0}:{1}", tuple.Item1, tuple.Item2)); 
            } 
            int expected_first = 1; 
            int expected_last = 3; 
            int first = list.First().Item1; 
            int last = list.Last().Item1; 
            Assert.AreEqual(expected_first, first); 
            Assert.AreEqual(expected_last, last); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
811
0
Gpt3D_Clone811_0.cs 1 28
Gpt3D_Clone811_0.cs 29 64
----------------------------------------

public static int [] FindMaxArrayEx (int [] srcArray) {
    int [] maxArray = new int [1];
    int maxTotal = int.MinValue;
    int curIndex = 0;
    int tmpTotal = 0;
    List < int > tmpArray = new List < int > ();
    if (srcArray.Length != 1) {
        for (int i = 0; i < srcArray.Length; i ++) {
            tmpTotal = 0;
            curIndex = i;
            tmpArray.Clear ();
            while (curIndex < srcArray.Length) {
                tmpTotal += srcArray [curIndex];
                tmpArray.Add (srcArray [curIndex]);
                if (tmpTotal > maxTotal) {
                    maxTotal = tmpTotal;
                    maxArray = tmpArray.ToArray ();
                }
                curIndex ++;
            }
        }
    } else {
        maxTotal = srcArray [0];
        maxArray = srcArray;
    }
    Console.WriteLine ("FindMaxArrayEx: {0}", maxTotal);
    return maxArray;
}
----------------------------------------

 public static int[] FindMaxArrayEx(int[] srcArray) 
{ 
    int maxTotal = int.MinValue; 
    int tmpTotal = 0; 
    List<int> tmpArray = new List<int>(); 
    int[] maxArray = new int[1]; 
    if (srcArray.Length != 1) 
    { 
        for (int i = 0; i < srcArray.Length; i++) 
        { 
            tmpTotal = 0;
            tmpArray.Clear();
            for (int j = i; j < srcArray.Length; j++)
            {
                tmpTotal = Math.Max(tmpTotal + srcArray[j], srcArray[j]);
                tmpArray.Add(srcArray[j]);
                 
                if (tmpTotal > maxTotal) 
                { 
                    maxTotal = tmpTotal; 
                    maxArray = tmpArray.ToArray(); 
                }
            } 
        } 
    } 
    else 
    { 
        maxTotal = srcArray[0]; 
        maxArray = srcArray; 
    } 
    Console.WriteLine("FindMaxArrayEx: {0}", maxTotal); 
    return maxArray; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
812
2
Gpt3D_Clone812_2.cs 1 11
Gpt3D_Clone812_2.cs 12 29
----------------------------------------

public void GenereateSettingsFile (List < Node > nodeList, string filePath) {
    _rootNode.RemoveChild (_userNode);
    _userNode = _xmlDoc.CreateElement ("Display_Settings");
    _rootNode.AppendChild (_userNode);
    foreach (Node n in nodeList) {
        foreach (XmlElement e in n.GenerateXML (_xmlDoc)) {
            _userNode.AppendChild (e);
        }
    }
    _xmlDoc.Save (filePath);
}
----------------------------------------

 public void GenerateSettingsFile (List<Node> nodeList, string filePath) 
{
    _userNode?.ParentNode?.RemoveChild(_userNode);
    _userNode = _xmlDoc.CreateElement("Display_Settings");
    _rootNode.AppendChild(_userNode);
    for (int i=0; i <nodeList.Count; i++)
    {
        Node n = nodeList[i];
        foreach(XmlElement e in n.GenerateXML(_xmlDoc)) 
        {
            _userNode.AppendChild(e);
        }
    }
    _xmlDoc.Save(filePath);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
812
4
Gpt3D_Clone812_4.cs 1 11
Gpt3D_Clone812_4.cs 12 28
----------------------------------------

public void GenereateSettingsFile (List < Node > nodeList, string filePath) {
    _rootNode.RemoveChild (_userNode);
    _userNode = _xmlDoc.CreateElement ("Display_Settings");
    _rootNode.AppendChild (_userNode);
    foreach (Node n in nodeList) {
        foreach (XmlElement e in n.GenerateXML (_xmlDoc)) {
            _userNode.AppendChild (e);
        }
    }
    _xmlDoc.Save (filePath);
}
----------------------------------------

 public void GenereateSettingsFile (List < Node > nodeList, string filePath) {
    if(_userNode != null){
        _userNode.ParentNode.RemoveChild(_userNode);
    }
    _userNode = _xmlDoc.CreateElement("Display_Settings");
    _rootNode.AppendChild(_userNode);
    foreach (Node n in nodeList)
    {
        _userNode.AppendChild(n.GenerateXML(_xmlDoc));
    }
    _xmlDoc.Save(filePath);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
812
6
Gpt3D_Clone812_6.cs 1 11
Gpt3D_Clone812_6.cs 12 21
----------------------------------------

public void GenereateSettingsFile (List < Node > nodeList, string filePath) {
    _rootNode.RemoveChild (_userNode);
    _userNode = _xmlDoc.CreateElement ("Display_Settings");
    _rootNode.AppendChild (_userNode);
    foreach (Node n in nodeList) {
        foreach (XmlElement e in n.GenerateXML (_xmlDoc)) {
            _userNode.AppendChild (e);
        }
    }
    _xmlDoc.Save (filePath);
}
----------------------------------------

 public void GenerateSettingsFile (List < Node > nodeList, string filePath) {
    if (_userNode != null) 
        _rootNode.RemoveChild(_userNode);
    _userNode = _xmlDoc.CreateElement("Display_Settings");
    _rootNode.AppendChild(_userNode);
    nodeList.ForEach(n => _userNode.AppendChild(n.GenerateXML(_xmlDoc)));
    _xmlDoc.Save(filePath);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
816
0
Gpt3D_Clone816_0.cs 1 23
Gpt3D_Clone816_0.cs 24 49
----------------------------------------

public static ILog GetLogger (string arg, string name) {
    var repositoryName = arg;
    ILoggerRepository repository = null;
    var repositories = LogManager.GetAllRepositories ();
    foreach (var loggerRepository in repositories) {
        if (loggerRepository.Name.Equals (repositoryName)) {
            repository = loggerRepository;
            break;
        }
    }
    Hierarchy hierarchy = null;
    if (repository == null) {
        repository = LogManager.CreateRepository (repositoryName);
        hierarchy = (Hierarchy) repository;
        hierarchy.Root.Additivity = false;
        var rollingAppender = GetRollingAppender (repositoryName);
        hierarchy.Root.AddAppender (rollingAppender);
        var memoryAppender = GetMemoryAppender (repositoryName);
        hierarchy.Root.AddAppender (memoryAppender);
        BasicConfigurator.Configure (repository);
    }
    return LogManager.GetLogger (repositoryName, name);
}
----------------------------------------

 public static ILog GetLogger (string arg, string name) {
      var repositoryName = arg;
      ILoggerRepository repository;
      var repositories = LogManager.GetAllRepositories ();
      bool repositoryFound = false;
      foreach (var loggerRepository in repositories) {
          if (loggerRepository.Name.Equals (repositoryName)) {
              repository = loggerRepository;
              repositoryFound = true;
              break;
          }
      }
      if (!repositoryFound) { 
          repository = LogManager.CreateRepository (repositoryName);
          var hierarchy = (Hierarchy) repository;
          hierarchy.Root.Additivity = false;
          var rollingAppender = GetRollingAppender (repositoryName);
          hierarchy.Root.AddAppender (rollingAppender);
          var memoryAppender = GetMemoryAppender (repositoryName);
          hierarchy.Root.AddAppender (memoryAppender);
          PropertyConfigurator.Configure (repository);
      }
      return LogManager.GetLogger (repositoryName, name);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
816
1
Gpt3D_Clone816_1.cs 1 23
Gpt3D_Clone816_1.cs 24 52
----------------------------------------

public static ILog GetLogger (string arg, string name) {
    var repositoryName = arg;
    ILoggerRepository repository = null;
    var repositories = LogManager.GetAllRepositories ();
    foreach (var loggerRepository in repositories) {
        if (loggerRepository.Name.Equals (repositoryName)) {
            repository = loggerRepository;
            break;
        }
    }
    Hierarchy hierarchy = null;
    if (repository == null) {
        repository = LogManager.CreateRepository (repositoryName);
        hierarchy = (Hierarchy) repository;
        hierarchy.Root.Additivity = false;
        var rollingAppender = GetRollingAppender (repositoryName);
        hierarchy.Root.AddAppender (rollingAppender);
        var memoryAppender = GetMemoryAppender (repositoryName);
        hierarchy.Root.AddAppender (memoryAppender);
        BasicConfigurator.Configure (repository);
    }
    return LogManager.GetLogger (repositoryName, name);
}
----------------------------------------

 public static ILog GetLogger (string arg, string name) {
      var repositoryName = arg;
      ILoggerRepository repository;
      var repositories = LogManager.GetAllRepositories();
      bool repositoryFound = false;
      foreach (var loggerRepository in repositories)
      {
          if (loggerRepository.Name.Equals(repositoryName))
          {
              repository = loggerRepository;
              repositoryFound = true;
              break;
          }
      }
      if (!repositoryFound)
      {
          repository = LogManager.CreateRepository(repositoryName);
          var hierarchy = (Hierarchy)repository;
          hierarchy.Root.Additivity = false;
          var rollingAppender = GetRollingAppender(repositoryName);
          hierarchy.Root.AddAppender(rollingAppender);
          var memoryAppender = GetMemoryAppender(repositoryName);
          hierarchy.Root.AddAppender(memoryAppender);
          BasicConfigurator.Configure(repository);
      }
      return LogManager.GetLogger(repositoryName, name);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
816
2
Gpt3D_Clone816_2.cs 1 23
Gpt3D_Clone816_2.cs 24 52
----------------------------------------

public static ILog GetLogger (string arg, string name) {
    var repositoryName = arg;
    ILoggerRepository repository = null;
    var repositories = LogManager.GetAllRepositories ();
    foreach (var loggerRepository in repositories) {
        if (loggerRepository.Name.Equals (repositoryName)) {
            repository = loggerRepository;
            break;
        }
    }
    Hierarchy hierarchy = null;
    if (repository == null) {
        repository = LogManager.CreateRepository (repositoryName);
        hierarchy = (Hierarchy) repository;
        hierarchy.Root.Additivity = false;
        var rollingAppender = GetRollingAppender (repositoryName);
        hierarchy.Root.AddAppender (rollingAppender);
        var memoryAppender = GetMemoryAppender (repositoryName);
        hierarchy.Root.AddAppender (memoryAppender);
        BasicConfigurator.Configure (repository);
    }
    return LogManager.GetLogger (repositoryName, name);
}
----------------------------------------

 public static ILog GetLogger(string arg, string name)
    {
        string repositoryName = arg;
        ILoggerRepository repository;
        ILoggerRepository[] repositories = LogManager.GetAllRepositories();
        foreach (ILoggerRepository loggerRepository in repositories)
        {
            if (loggerRepository.Name.Equals(repositoryName))
            {
                repository = loggerRepository;
                break;
            }
        }
        if (repository == null)
        {
            repository = LogManager.CreateRepository(repositoryName);
            var hierarchy = (Hierarchy)repository;
            hierarchy.Root.Additivity = false;
            var rollingAppender = GetRollingAppender(repositoryName);
            hierarchy.Root.AddAppender(rollingAppender);
            var memoryAppender = GetMemoryAppender(repositoryName);
            hierarchy.Root.AddAppender(memoryAppender);
            LogLog.InternalDebugging = true;
            BasicConfigurator.Configure(repository);
        }
        return LogManager.GetLogger(repositoryName, name);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
816
3
Gpt3D_Clone816_3.cs 1 23
Gpt3D_Clone816_3.cs 24 54
----------------------------------------

public static ILog GetLogger (string arg, string name) {
    var repositoryName = arg;
    ILoggerRepository repository = null;
    var repositories = LogManager.GetAllRepositories ();
    foreach (var loggerRepository in repositories) {
        if (loggerRepository.Name.Equals (repositoryName)) {
            repository = loggerRepository;
            break;
        }
    }
    Hierarchy hierarchy = null;
    if (repository == null) {
        repository = LogManager.CreateRepository (repositoryName);
        hierarchy = (Hierarchy) repository;
        hierarchy.Root.Additivity = false;
        var rollingAppender = GetRollingAppender (repositoryName);
        hierarchy.Root.AddAppender (rollingAppender);
        var memoryAppender = GetMemoryAppender (repositoryName);
        hierarchy.Root.AddAppender (memoryAppender);
        BasicConfigurator.Configure (repository);
    }
    return LogManager.GetLogger (repositoryName, name);
}
----------------------------------------

 public static ILog GetLogger(string arg, string name)
    {
        string repositoryName = arg;
        ILoggerRepository repository = null;
        var repositories = LogManager.GetAllRepositories();
        foreach (ILoggerRepository loggerRepository in repositories)
        {
            if (loggerRepository.Name.Equals(repositoryName))
            {
                repository = loggerRepository;
                break;
            }
        }
        if (repository == null)
        {
            repository = LogManager.CreateRepository(repositoryName);
            var hierarchy = (Hierarchy)repository;
            hierarchy.Root.Additivity = false;
            var rollingAppender = GetRollingAppender(repositoryName);
            hierarchy.Root.AddAppender(rollingAppender);
            var memoryAppender = GetMemoryAppender(repositoryName);
            hierarchy.Root.AddAppender(memoryAppender);
            BasicConfigurator.Configure(repository);
        }
        Logger logger = repository as Logger;
        logger.Level = Level.Info;
        logger.Additivity = false;
        return LogManager.GetLogger(repositoryName, name);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
816
4
Gpt3D_Clone816_4.cs 1 23
Gpt3D_Clone816_4.cs 24 51
----------------------------------------

public static ILog GetLogger (string arg, string name) {
    var repositoryName = arg;
    ILoggerRepository repository = null;
    var repositories = LogManager.GetAllRepositories ();
    foreach (var loggerRepository in repositories) {
        if (loggerRepository.Name.Equals (repositoryName)) {
            repository = loggerRepository;
            break;
        }
    }
    Hierarchy hierarchy = null;
    if (repository == null) {
        repository = LogManager.CreateRepository (repositoryName);
        hierarchy = (Hierarchy) repository;
        hierarchy.Root.Additivity = false;
        var rollingAppender = GetRollingAppender (repositoryName);
        hierarchy.Root.AddAppender (rollingAppender);
        var memoryAppender = GetMemoryAppender (repositoryName);
        hierarchy.Root.AddAppender (memoryAppender);
        BasicConfigurator.Configure (repository);
    }
    return LogManager.GetLogger (repositoryName, name);
}
----------------------------------------

 public static ILog GetLogger (String arg, String name)
    {
        String repositoryName = arg;
        ILoggerRepository repository;
        ILoggerRepository[] repositories = LogManager.GetAllRepositories ();
        foreach (ILoggerRepository loggerRepository in repositories)
        {
            if (loggerRepository.Name.Equals (repositoryName))
            {
                repository = loggerRepository;
                break;
            }
        }
        if (repository == null)
        {
            repository = LogManager.CreateRepository (repositoryName);
            Hierarchy hierarchy = (Hierarchy)repository;
            hierarchy.Root.Additivity = false;
            RollingFileAppender rollingAppender = GetRollingAppender (repositoryName);
            hierarchy.Root.AddAppender (rollingAppender);
            ColoredMemoryAppender memoryAppender = GetMemoryAppender (repositoryName);
            hierarchy.Root.AddAppender (memoryAppender);
            BasicConfigurator.Configure (repository);
        }
        return LogManager.GetLogger (repositoryName, name);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
818
1
Gpt3D_Clone818_1.cs 1 8
Gpt3D_Clone818_1.cs 9 19
----------------------------------------

private static IEnumerable < Type > GetTypeArguments (Type t, IEnumerable < Type > values) {
    if (t.IsGenericType)
        foreach (var arg in t.GetGenericArguments ())
            values = values.Union (GetTypeArguments (arg, values));
    else
        values = values.Union (new [] {t});
    return values;
}
----------------------------------------

	private static IEnumerable <Type> GetTypeArguments (Type t, IEnumerable <Type> values) {
    if (t.IsGenericType) {
        foreach (var arg in t.GetGenericArguments ())
            values = values.Concat(GetTypeArguments(arg, values));
    }
    else 
        values = values.Concat(new []{t});
    return values; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
818
2
Gpt3D_Clone818_2.cs 1 8
Gpt3D_Clone818_2.cs 9 18
----------------------------------------

private static IEnumerable < Type > GetTypeArguments (Type t, IEnumerable < Type > values) {
    if (t.IsGenericType)
        foreach (var arg in t.GetGenericArguments ())
            values = values.Union (GetTypeArguments (arg, values));
    else
        values = values.Union (new [] {t});
    return values;
}
----------------------------------------

	private static IEnumerable <Type> GetTypeArguments (Type t, IEnumerable <Type> values) {
    if (t.IsGenericType) {
        foreach (var arg in t.GetGenericArguments())
            values = values.Union(GetTypeArguments(arg, values)); 
    } else
        values = values.Append(t);
    return values;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
819
0
Gpt3D_Clone819_0.cs 1 28
Gpt3D_Clone819_0.cs 29 65
----------------------------------------

public string CreateCacheKey (MethodBase method, params object [] inputs) {
    try {
        var sb = new StringBuilder ();
        if (method.DeclaringType != null) {
            sb.Append (method.DeclaringType.FullName);
        }
        sb.Append (':');
        sb.Append (method.Name);
        TextWriter writer = new StringWriter (sb);
        if (inputs != null) {
            foreach (var input in inputs) {
                sb.Append (':');
                if (input != null) {
                    var inputDateTime = input as DateTime ?;
                    if (inputDateTime.HasValue) {
                        sb.Append (inputDateTime.Value.Ticks);
                    } else {
                        serializer.Serialize (writer, input);
                    }
                }
            }
        }
        return sb.ToString ();
    }
    catch {
        return null;
    }
}
----------------------------------------

 public string CreateCacheKey (MethodBase method, params object [] inputs) {
    try
    {
        var output = new StringBuilder();
        if (method.DeclaringType != null)
        {
            output.Append(method.DeclaringType.FullName);
            output.Append(":");
        }
        output.Append(method.Name);
        TextWriter writer = new StringWriter(output);
        if (inputs != null)
        {
            foreach (var item in inputs)
            {
                output.Append(":");
                if (item != null)
                {
                    if (item is DateTime d){
                        output.Append(d.Ticks);
                    }
                    else{
                        serializer.Serialize(writer, item);
                    }
                }
            }
        }
        return output.ToString();
    }
    catch
    {
        return null;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
819
1
Gpt3D_Clone819_1.cs 1 28
Gpt3D_Clone819_1.cs 29 67
----------------------------------------

public string CreateCacheKey (MethodBase method, params object [] inputs) {
    try {
        var sb = new StringBuilder ();
        if (method.DeclaringType != null) {
            sb.Append (method.DeclaringType.FullName);
        }
        sb.Append (':');
        sb.Append (method.Name);
        TextWriter writer = new StringWriter (sb);
        if (inputs != null) {
            foreach (var input in inputs) {
                sb.Append (':');
                if (input != null) {
                    var inputDateTime = input as DateTime ?;
                    if (inputDateTime.HasValue) {
                        sb.Append (inputDateTime.Value.Ticks);
                    } else {
                        serializer.Serialize (writer, input);
                    }
                }
            }
        }
        return sb.ToString ();
    }
    catch {
        return null;
    }
}
----------------------------------------

 public string CreateCacheKey (MethodBase method, params object [] inputs) {
    try
    {
        StringBuilder sb = new StringBuilder();
        if (method.DeclaringType != null)
        {
            sb.Append(method.DeclaringType.FullName);
            sb.Append(":");
        }
        sb.Append(method.Name);
        TextWriter writer = new StringWriter(sb);
        if (inputs != null)
        {
            foreach (var item in inputs)
            {
                sb.Append(":");
                if (item != null)
                {
                    if (item is DateTime dt)
                    {
                        sb.Append(dt.Ticks);
                    }
                    else
                    {
                        serializer.Serialize(writer, item);
                    }
                }
            }
        }
        return sb.ToString();
    }
    catch
    {
        return null;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
819
2
Gpt3D_Clone819_2.cs 1 28
Gpt3D_Clone819_2.cs 29 64
----------------------------------------

public string CreateCacheKey (MethodBase method, params object [] inputs) {
    try {
        var sb = new StringBuilder ();
        if (method.DeclaringType != null) {
            sb.Append (method.DeclaringType.FullName);
        }
        sb.Append (':');
        sb.Append (method.Name);
        TextWriter writer = new StringWriter (sb);
        if (inputs != null) {
            foreach (var input in inputs) {
                sb.Append (':');
                if (input != null) {
                    var inputDateTime = input as DateTime ?;
                    if (inputDateTime.HasValue) {
                        sb.Append (inputDateTime.Value.Ticks);
                    } else {
                        serializer.Serialize (writer, input);
                    }
                }
            }
        }
        return sb.ToString ();
    }
    catch {
        return null;
    }
}
----------------------------------------

 public string CreateCacheKey (MethodBase method, params object [] inputs) {
    try
    {
        StringBuilder sb = new StringBuilder();
        if (method.DeclaringType != null)
        {
            sb.Append(method.DeclaringType.FullName + ":");
        }
        sb.Append(method.Name); 
        TextWriter writer = new StringWriter(sb);
        if (inputs != null)
        {
            foreach (var input in inputs)
            {
                sb.Append(':');
                if (input != null)
                {
                    if (input is DateTime)
                    {
                        sb.Append(((DateTime)input).Ticks);
                    } else
                    {
                        serializer.Serialize(writer, input);
                    }
                }
            }
        }
        return sb.ToString();
    }
    catch 
    {
        return null;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
819
4
Gpt3D_Clone819_4.cs 1 28
Gpt3D_Clone819_4.cs 29 64
----------------------------------------

public string CreateCacheKey (MethodBase method, params object [] inputs) {
    try {
        var sb = new StringBuilder ();
        if (method.DeclaringType != null) {
            sb.Append (method.DeclaringType.FullName);
        }
        sb.Append (':');
        sb.Append (method.Name);
        TextWriter writer = new StringWriter (sb);
        if (inputs != null) {
            foreach (var input in inputs) {
                sb.Append (':');
                if (input != null) {
                    var inputDateTime = input as DateTime ?;
                    if (inputDateTime.HasValue) {
                        sb.Append (inputDateTime.Value.Ticks);
                    } else {
                        serializer.Serialize (writer, input);
                    }
                }
            }
        }
        return sb.ToString ();
    }
    catch {
        return null;
    }
}
----------------------------------------

 public string CreateCacheKey (MethodBase method, params object [] inputs) {
    try
    {
        StringBuilder cacheBuf = new StringBuilder();
        cacheBuf.Append(method.DeclaringType.FullName+":");
        cacheBuf.Append(method.Name);
        TextWriter writer = new StringWriter(cacheBuf);
        if (inputs != null)
        {
            foreach (var i in inputs)
            {
                cacheBuf.Append(":");
                if (i != null)
                {
                    if (i is DateTime d)
                    {
                        cacheBuf.Append(d.Ticks);
                    }
                    else
                    {
                        serializer.Serialize(writer, i);
                    }
                }
            }
        }
        return cacheBuf.ToString();
    
    }
    catch
    {
        return null;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
819
5
Gpt3D_Clone819_5.cs 1 28
Gpt3D_Clone819_5.cs 29 59
----------------------------------------

public string CreateCacheKey (MethodBase method, params object [] inputs) {
    try {
        var sb = new StringBuilder ();
        if (method.DeclaringType != null) {
            sb.Append (method.DeclaringType.FullName);
        }
        sb.Append (':');
        sb.Append (method.Name);
        TextWriter writer = new StringWriter (sb);
        if (inputs != null) {
            foreach (var input in inputs) {
                sb.Append (':');
                if (input != null) {
                    var inputDateTime = input as DateTime ?;
                    if (inputDateTime.HasValue) {
                        sb.Append (inputDateTime.Value.Ticks);
                    } else {
                        serializer.Serialize (writer, input);
                    }
                }
            }
        }
        return sb.ToString ();
    }
    catch {
        return null;
    }
}
----------------------------------------

  public string CreateCacheKey (MethodBase method, params object [] inputs) {
    try
    {
        StringBuilder sb = new StringBuilder();
        sb.Append(method.DeclaringType.FullName + ":");
        sb.Append(method.Name);
        foreach ( var input in inputs)
        {
            sb.Append(":");
            if(input != null)
            {
                if (input is DateTime){
                    sb.Append(((DateTime)input).Ticks);
                }
                else
                {
                    StringWriter writer = new StringWriter();
                    serializer.Serialize(writer, input);
                    sb.Append(writer.ToString());
                }
            }
        }
        return sb.ToString();
    }
    catch
    {
        return null;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
820
0
Gpt3D_Clone820_0.cs 1 16
Gpt3D_Clone820_0.cs 17 32
----------------------------------------

protected override void OnRender (DrawingContext drawingContext) {
    ensureTextBlock ();
    base.OnRender (drawingContext);
    var formattedText = new FormattedText (_textBlock.Text, CultureInfo.CurrentUICulture, _textBlock.FlowDirection, new Typeface (_textBlock.FontFamily, _textBlock.FontStyle, _textBlock.FontWeight, _textBlock.FontStretch), _textBlock.FontSize, Brushes.Black);
    formattedText.TextAlignment = _textBlock.TextAlignment;
    formattedText.Trimming = _textBlock.TextTrimming;
    formattedText.LineHeight = _textBlock.LineHeight;
    formattedText.MaxTextWidth = _textBlock.ActualWidth - _textBlock.Padding.Left - _textBlock.Padding.Right;
    formattedText.MaxTextHeight = _textBlock.ActualHeight - _textBlock.Padding.Top;
    while (formattedText.Extent == double.NegativeInfinity) {
        formattedText.MaxTextHeight ++;
    }
    var _textGeometry = formattedText.BuildGeometry (new Point (_textBlock.Padding.Left, _textBlock.Padding.Top));
    var textPen = new Pen (Stroke, StrokeThickness);
    drawingContext.DrawGeometry (Brushes.Transparent, textPen, _textGeometry);
}
----------------------------------------

 protected override void OnRender (DrawingContext drawingContext) {
    ensureTextBlock ();
    base.OnRender (drawingContext);
    var formattedText = new FormattedText (_textBlock.Text, CultureInfo.CurrentUICulture, _textBlock.FlowDirection, new Typeface (_textBlock.FontFamily, _textBlock.FontStyle, _textBlock.FontWeight, _textBlock.FontStretch), _textBlock.FontSize, new SolidColorBrush(Colors.Black));
    formattedText.TextAlignment = _textBlock.TextAlignment;
    formattedText.Trimming = _textBlock.TextTrimming;
    formattedText.MaxTextWidth = _textBlock.ActualWidth - _textBlock.Padding.Left - _textBlock.Padding.Right;
    formattedText.MaxTextHeight = _textBlock.ActualHeight - _textBlock.Padding.Top;
    while (formattedText.Extent == double.NegativeInfinity) {
        formattedText.MaxTextHeight ++;
    }
    var _textGeometry = formattedText.BuildGeometry (new Point (_textBlock.Padding.Left, _textBlock.Padding.Top));
    drawingContext.DrawGeometry (Brushes.Transparent, new Pen(Brushes.Black, StrokeThickness), _textGeometry);
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
821
0
Gpt3D_Clone821_0.cs 1 22
Gpt3D_Clone821_0.cs 23 54
----------------------------------------

protected override void WndProc (ref Message m) {
    if (m.Msg == 0x0203) {
        int start = SelectionStart;
        if (start < 1)
            start = 1;
        int left = - 1;
        int right = Text.Length;
        int pos;
        foreach (char c in delimiterList) {
            pos = Text.LastIndexOf (c, start - 1);
            if (pos > left)
                left = pos;
            pos = Text.IndexOf (c, start);
            if (pos < right && pos != - 1)
                right = pos;
        }
        SelectionStart = left + 1;
        SelectionLength = right - left - 1;
        return;
    }
    base.WndProc (ref m);
}
----------------------------------------

protected override void WndProc(ref Message m) 
{ 
    if (m.Msg == 0x0203) 
    { 
        int start = SelectionStart; 
        if (start < 1) 
            start = 1; 
        int left = -1;
        int right = Text.Length;
        int pos = 0;
        foreach (char c in delimiterList) 
        { 
            int prevPos = Text.LastIndexOf(c, start - 1); 
            if (left < prevPos) 
                left = prevPos; 
            pos = Text.IndexOf(c, start); 
            if (pos == -1) 
                continue;
            if (right > pos) 
                right = pos; 
        } 
        SelectionStart = left + 1; 
        SelectionLength = right - left - 1; 
        return; 
    } 
    base.WndProc(ref m); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
821
1
Gpt3D_Clone821_1.cs 1 22
Gpt3D_Clone821_1.cs 23 50
----------------------------------------

protected override void WndProc (ref Message m) {
    if (m.Msg == 0x0203) {
        int start = SelectionStart;
        if (start < 1)
            start = 1;
        int left = - 1;
        int right = Text.Length;
        int pos;
        foreach (char c in delimiterList) {
            pos = Text.LastIndexOf (c, start - 1);
            if (pos > left)
                left = pos;
            pos = Text.IndexOf (c, start);
            if (pos < right && pos != - 1)
                right = pos;
        }
        SelectionStart = left + 1;
        SelectionLength = right - left - 1;
        return;
    }
    base.WndProc (ref m);
}
----------------------------------------

 protected override void WndProc (ref Message m) 
{ 
   if (m.Msg == 0x0203) 
   { 
      int start = SelectionStart; 
      if (start < 1) 
         start = 1; 
      int left = -1; 
      int right = Text.Length; 
      int pos; 
      foreach (char c in delimiterList) 
      { 
        int prevPos = Text.LastIndexOf (c, start - 1); 
        left = (left < prevPos) ? prevPos : left; 
        pos = Text.IndexOf (c, start); 
        if (pos != -1) 
           right = (right >= pos) ? pos : right; 
      } 
      SelectionStart = left + 1; 
      SelectionLength = right - left - 1; 
      return; 
   } 
   base.WndProc (ref m); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
821
2
Gpt3D_Clone821_2.cs 1 22
Gpt3D_Clone821_2.cs 23 49
----------------------------------------

protected override void WndProc (ref Message m) {
    if (m.Msg == 0x0203) {
        int start = SelectionStart;
        if (start < 1)
            start = 1;
        int left = - 1;
        int right = Text.Length;
        int pos;
        foreach (char c in delimiterList) {
            pos = Text.LastIndexOf (c, start - 1);
            if (pos > left)
                left = pos;
            pos = Text.IndexOf (c, start);
            if (pos < right && pos != - 1)
                right = pos;
        }
        SelectionStart = left + 1;
        SelectionLength = right - left - 1;
        return;
    }
    base.WndProc (ref m);
}
----------------------------------------

 protected override void WndProc(ref Message m) 
{ 
    if (m.Msg == 0x0203) 
    { 
        int start = SelectionStart; 
        if (start < 1)
            start = 1; 
        int left = -1, right = Text.Length, pos = 0; 
        foreach (char c in delimiterList) 
        {
            int prevPos = Text.LastIndexOf(c, start - 1); 
            if (left < prevPos) 
                left = prevPos; 
            int newPos = Text.IndexOf(c, start); 
            if (right > newPos && newPos != -1) 
                right = newPos; 
        } 
        SelectionStart = left + 1; 
        SelectionLength = right - left - 1; 
        return; 
    } 
    base.WndProc(ref m); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
823
0
Gpt3D_Clone823_0.cs 1 17
Gpt3D_Clone823_0.cs 18 39
----------------------------------------

public ApiResponse < IEnumerable < Customers > > getCustomersById (string id) {
    var retVal = new ApiResponse < IEnumerable < Customers > > ();
    var isAuthenticated = tokenAuthorization.validateToken (access_token);
    if (! isAuthenticated) {
        retVal.Message = "You are not authrized";
        return retVal;
    }
    try {
        var data = yourList;
        retVal.IsSuccess = true;
        retVal.Data = yourList;
    }
    catch (exception ex) {
        retVal.Message = yourmessage;
    }
    return retVal;
}
----------------------------------------

  public ApiResponse<IEnumerable<Customers>> getCustomersById (string id) {
    var retVal = new ApiResponse<IEnumerable<Customers>>();
    if (!tokenAuthorization.validateToken (access_token)) {
        retVal.Message = "You are not authorized";
        return retVal;
    }
    try {
        var data = retrieveCustomersFromDbById(id);
        if (data != null){
            retVal.IsSuccess = true;
            retVal.Data = data;
        } else {
            retVal.Message = "There is no customer with such id";
        }
    }
    catch (Exception ex) {
        retVal.Message = yourmessage;
    }
    return retVal;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
823
1
Gpt3D_Clone823_1.cs 1 17
Gpt3D_Clone823_1.cs 18 40
----------------------------------------

public ApiResponse < IEnumerable < Customers > > getCustomersById (string id) {
    var retVal = new ApiResponse < IEnumerable < Customers > > ();
    var isAuthenticated = tokenAuthorization.validateToken (access_token);
    if (! isAuthenticated) {
        retVal.Message = "You are not authrized";
        return retVal;
    }
    try {
        var data = yourList;
        retVal.IsSuccess = true;
        retVal.Data = yourList;
    }
    catch (exception ex) {
        retVal.Message = yourmessage;
    }
    return retVal;
}
----------------------------------------

  public ApiResponse<IEnumerable<Customers>> getCustomersById (string id) {
    var retVal = new ApiResponse<IEnumerable<Customers>>();
    if (tokenAuthorization.validateToken (access_token)) {
        try {
            var data = retrieveCustomersFromDbById(id);
            if (data != null){
                retVal.IsSuccess = true;
                retVal.Data = data;
            } else {
                retVal.Message = "There is no customer with such id";
            }
        }
        catch (Exception ex) {
            retVal.Message = yourmessage;
        }
    }
    else {
        retVal.Message = "You are not authorized";
    }
    return retVal;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
823
2
Gpt3D_Clone823_2.cs 1 17
Gpt3D_Clone823_2.cs 18 39
----------------------------------------

public ApiResponse < IEnumerable < Customers > > getCustomersById (string id) {
    var retVal = new ApiResponse < IEnumerable < Customers > > ();
    var isAuthenticated = tokenAuthorization.validateToken (access_token);
    if (! isAuthenticated) {
        retVal.Message = "You are not authrized";
        return retVal;
    }
    try {
        var data = yourList;
        retVal.IsSuccess = true;
        retVal.Data = yourList;
    }
    catch (exception ex) {
        retVal.Message = yourmessage;
    }
    return retVal;
}
----------------------------------------

 public ApiResponse<IEnumerable<Customers>> getCustomersById (string id) {
    var retVal = new ApiResponse<IEnumerable<Customers>>();
    if (!tokenAuthorization.validateToken (access_token)) {
        retVal.Message = "You are not authorized";
        return retVal;
    }
    else {
        try {
            var data = retrieveCustomerData(id);
            if (data != null) {
                retVal.IsSuccess = true;
                retVal.Data = data;
            }
        }
        catch (Exception ex) {
            retVal.Message = yourmessage;
        }
    }
    return retVal;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
823
3
Gpt3D_Clone823_3.cs 1 17
Gpt3D_Clone823_3.cs 18 38
----------------------------------------

public ApiResponse < IEnumerable < Customers > > getCustomersById (string id) {
    var retVal = new ApiResponse < IEnumerable < Customers > > ();
    var isAuthenticated = tokenAuthorization.validateToken (access_token);
    if (! isAuthenticated) {
        retVal.Message = "You are not authrized";
        return retVal;
    }
    try {
        var data = yourList;
        retVal.IsSuccess = true;
        retVal.Data = yourList;
    }
    catch (exception ex) {
        retVal.Message = yourmessage;
    }
    return retVal;
}
----------------------------------------

 public ApiResponse<IEnumerable<Customers>> getCustomersById (string id) {
    var retVal = new ApiResponse<IEnumerable<Customers>>();
    if (tokenAuthorization.validateToken (access_token)) {
        try {
            var data = getCustomersDataById(id);
            if (data != null) {
                retVal.IsSuccess = true;
                retVal.Data = data;
            }
        }
        catch (Exception ex) {
            retVal.Message = yourmessage;
        }
    }
    else {
        retVal.Message = "You are not authorized";
    }
    return retVal;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
823
4
Gpt3D_Clone823_4.cs 1 17
Gpt3D_Clone823_4.cs 18 38
----------------------------------------

public ApiResponse < IEnumerable < Customers > > getCustomersById (string id) {
    var retVal = new ApiResponse < IEnumerable < Customers > > ();
    var isAuthenticated = tokenAuthorization.validateToken (access_token);
    if (! isAuthenticated) {
        retVal.Message = "You are not authrized";
        return retVal;
    }
    try {
        var data = yourList;
        retVal.IsSuccess = true;
        retVal.Data = yourList;
    }
    catch (exception ex) {
        retVal.Message = yourmessage;
    }
    return retVal;
}
----------------------------------------

 public ApiResponse<IEnumerable<Customers>> getCustomersById (string id) {
    var retVal = new ApiResponse<IEnumerable<Customers>>();
    if (tokenAuthorization.validateToken (access_token)) {
        try {
            var data = searchCustomerInfoById(id);
            if (data != null){
                retVal.IsSuccess = true;
                retVal.Data = data;
            }
        }
        catch (Exception ex) {
            retVal.Message = yourmessage;
        }
    }
    else {
        retVal.Message = "You are not authorized";
    }
    return retVal;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
823
5
Gpt3D_Clone823_5.cs 1 17
Gpt3D_Clone823_5.cs 18 37
----------------------------------------

public ApiResponse < IEnumerable < Customers > > getCustomersById (string id) {
    var retVal = new ApiResponse < IEnumerable < Customers > > ();
    var isAuthenticated = tokenAuthorization.validateToken (access_token);
    if (! isAuthenticated) {
        retVal.Message = "You are not authrized";
        return retVal;
    }
    try {
        var data = yourList;
        retVal.IsSuccess = true;
        retVal.Data = yourList;
    }
    catch (exception ex) {
        retVal.Message = yourmessage;
    }
    return retVal;
}
----------------------------------------

 public ApiResponse<IEnumerable<Customers>> getCustomersById (string id) {
    var retVal = new ApiResponse<IEnumerable<Customers>>();
    if (tokenAuthorization.validateToken (access_token)) {
        try {
            var data = gatherCustomerDataById(id);
            if (data != null) {
                retVal.IsSuccess = true;
                retVal.Data = data;
            }
        }
        catch (Exception ex) {
            retVal.Message = yourmessage;
        }
    } else {
        retVal.Message = "You are not authorized";
    }
    return retVal;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
825
0
Gpt3D_Clone825_0.cs 1 16
Gpt3D_Clone825_0.cs 17 36
----------------------------------------

public void SendEmail (MyInternalSystemEmailMessage email) {
    var mailMessage = new System.Net.Mail.MailMessage ();
    mailMessage.From = new System.Net.Mail.MailAddress (email.FromAddress);
    mailMessage.To.Add (email.ToRecipients);
    mailMessage.ReplyToList.Add (email.FromAddress);
    mailMessage.Subject = email.Subject;
    mailMessage.Body = email.Body;
    mailMessage.IsBodyHtml = email.IsHtml;
    foreach (System.Net.Mail.Attachment attachment in email.Attachments) {
        mailMessage.Attachments.Add (attachment);
    }
    var mimeMessage = MimeKit.MimeMessage.CreateFromMailMessage (mailMessage);
    var gmailMessage = new Google.Apis.Gmail.v1.Data.Message {Raw = Encode (mimeMessage.ToString ())};
    Google.Apis.Gmail.v1.UsersResource.MessagesResource.SendRequest request = service.Users.Messages.Send (gmailMessage, ServiceEmail);
    request.Execute ();
}
----------------------------------------

  public void SendEmail (MyInternalSystemEmailMessage email) {
    var mailMessage = new System.Net.Mail.MailMessage () {
        From = new System.Net.Mail.MailAddress (email.FromAddress)
    };
    foreach (var recipient in email.ToRecipients) {
        mailMessage.To.Add (recipient);
    }
    mailMessage.ReplyToList.Add (email.FromAddress);
    mailMessage.Subject = email.Subject;
    mailMessage.Body = email.Body;
    mailMessage.IsBodyHtml = email.IsHtml;
    foreach (System.Net.Mail.Attachment attachment in email.Attachments) {
        mailMessage.Attachments.Add (attachment);
    }
    var mimeMessage = MimeKit.MimeMessage.CreateFromMailMessage (mailMessage);
    var gmailMessage = new Google.Apis.Gmail.v1.Data.Message {Raw = Encode (mimeMessage.ToString ())};
    service.Users.Messages.Send (gmailMessage, ServiceEmail).Execute ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
825
1
Gpt3D_Clone825_1.cs 1 16
Gpt3D_Clone825_1.cs 17 35
----------------------------------------

public void SendEmail (MyInternalSystemEmailMessage email) {
    var mailMessage = new System.Net.Mail.MailMessage ();
    mailMessage.From = new System.Net.Mail.MailAddress (email.FromAddress);
    mailMessage.To.Add (email.ToRecipients);
    mailMessage.ReplyToList.Add (email.FromAddress);
    mailMessage.Subject = email.Subject;
    mailMessage.Body = email.Body;
    mailMessage.IsBodyHtml = email.IsHtml;
    foreach (System.Net.Mail.Attachment attachment in email.Attachments) {
        mailMessage.Attachments.Add (attachment);
    }
    var mimeMessage = MimeKit.MimeMessage.CreateFromMailMessage (mailMessage);
    var gmailMessage = new Google.Apis.Gmail.v1.Data.Message {Raw = Encode (mimeMessage.ToString ())};
    Google.Apis.Gmail.v1.UsersResource.MessagesResource.SendRequest request = service.Users.Messages.Send (gmailMessage, ServiceEmail);
    request.Execute ();
}
----------------------------------------

 public async void SendEmail(MyInternalSystemEmailMessage email)
{
    var mailMessage = new System.Net.Mail.MailMessage();
    mailMessage.From = new System.Net.Mail.MailAddress(email.FromAddress);
    email.ToRecipients.ToList().ForEach(recipient => mailMessage.To.Add(recipient));
    mailMessage.ReplyToList.Add(email.FromAddress);
    mailMessage.Subject = email.Subject;
    mailMessage.Body = email.Body;
    mailMessage.IsBodyHtml = email.IsHtml;
    foreach (System.Net.Mail.Attachment attachment in email.Attachments)
    {
        mailMessage.Attachments.Add(attachment);
    }
    var mimeMessage = MimeKit.MimeMessage.CreateFromMailMessage(mailMessage);
    var gmailMessage = new Google.Apis.Gmail.v1.Data.Message { Raw = Encode(mimeMessage.ToString()) };
    await service.Users.Messages.Send(gmailMessage, ServiceEmail).ExecuteAsync();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
827
0
Gpt3D_Clone827_0.cs 1 11
Gpt3D_Clone827_0.cs 12 29
----------------------------------------

void webBrowser1_DocumentCompleted (object sender, WebBrowserDocumentCompletedEventArgs e) {
    foreach (HtmlElement element in webBrowser1.Document.GetElementsByTagName ("button")) {
        if (element.GetAttribute ("ClassName") == "mybtn") {
            Point controlLoc = this.PointToScreen (webBrowser1.Location);
            controlLoc.X = controlLoc.X + element.OffsetRectangle.Left;
            controlLoc.Y = controlLoc.Y + element.OffsetRectangle.Top;
            Cursor.Position = controlLoc;
            MouseSimulator.ClickRightMouseButton ();
        }
    }
}
----------------------------------------

void webBrowser1_DocumentCompleted (object sender, WebBrowserDocumentCompletedEventArgs e) {
    foreach (HtmlElement element in webBrowser1.Document.GetElementsByTagName ("button")) {
        if (element.GetAttribute ("ClassName") == "mybtn") {
            Point controlLoc = this.PointToScreen (webBrowser1.Location);
            controlLoc.X = controlLoc.X + element.OffsetRectangle.Left;
            controlLoc.Y = controlLoc.Y + element.OffsetRectangle.Top;
            Cursor.Position = controlLoc;
            IntPtr ptr = GetForegroundWindow();
            SetForegroundWindow(this.Handle);
            mouse_event(0x0008, 0, 0, 0, 0);
            MouseSimulator.ClickRightMouseButton ();
            SetForegroundWindow(ptr);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
828
1
Gpt3D_Clone828_1.cs 1 11
Gpt3D_Clone828_1.cs 12 25
----------------------------------------

private void ImplementLongRunningOperation () {
    int id;
    string name;
    Task.Factory.StartNew (() => {
        id = 42;
        name = "Jonh Doe";
    }).ContinueWith (t => {
        label1.Text = id.ToString ();
        label2.Text = name;
    }, TaskScheduler.FromSynchronizationContext);
}
----------------------------------------

 private void ImplementLongRunningOperation () {
    int id;
    string name;
    Task.Factory.StartNew(delegate {
        id = 42;
        name = "John Doe";
        this.BeginInvoke(new MethodInvoker(delegate {
            label1.Text = id.ToString();
            label2.Text = name;
        }));
    });
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
828
2
Gpt3D_Clone828_2.cs 1 11
Gpt3D_Clone828_2.cs 12 25
----------------------------------------

private void ImplementLongRunningOperation () {
    int id;
    string name;
    Task.Factory.StartNew (() => {
        id = 42;
        name = "Jonh Doe";
    }).ContinueWith (t => {
        label1.Text = id.ToString ();
        label2.Text = name;
    }, TaskScheduler.FromSynchronizationContext);
}
----------------------------------------

 private void ImplementLongRunningOperation () {
    int id;
    string name;
    Thread thread = new Thread(() => {
        id = 42;
        name = "John Doe";
    });
    thread.Start();
    thread.Join();
    label1.Text = id.ToString();
    label2.Text = name;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
828
3
Gpt3D_Clone828_3.cs 1 11
Gpt3D_Clone828_3.cs 12 23
----------------------------------------

private void ImplementLongRunningOperation () {
    int id;
    string name;
    Task.Factory.StartNew (() => {
        id = 42;
        name = "Jonh Doe";
    }).ContinueWith (t => {
        label1.Text = id.ToString ();
        label2.Text = name;
    }, TaskScheduler.FromSynchronizationContext);
}
----------------------------------------

 private void ImplementLongRunningOperation () {
    int id;
    string name;
    Task.Run(() => {
        id = 42;
        name = "John Doe";
        label1.Text = id.ToString();
        label2.Text = name;
    });
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
828
4
Gpt3D_Clone828_4.cs 1 11
Gpt3D_Clone828_4.cs 12 23
----------------------------------------

private void ImplementLongRunningOperation () {
    int id;
    string name;
    Task.Factory.StartNew (() => {
        id = 42;
        name = "Jonh Doe";
    }).ContinueWith (t => {
        label1.Text = id.ToString ();
        label2.Text = name;
    }, TaskScheduler.FromSynchronizationContext);
}
----------------------------------------

 private void ImplementLongRunningOperation () {
    int id;
    string name;
    ThreadPool.QueueUserWorkItem((_) => {
        id = 42;
        name = "John Doe";
    });
    label1.Text = id.ToString();
    label2.Text = name;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
828
5
Gpt3D_Clone828_5.cs 1 11
Gpt3D_Clone828_5.cs 12 23
----------------------------------------

private void ImplementLongRunningOperation () {
    int id;
    string name;
    Task.Factory.StartNew (() => {
        id = 42;
        name = "Jonh Doe";
    }).ContinueWith (t => {
        label1.Text = id.ToString ();
        label2.Text = name;
    }, TaskScheduler.FromSynchronizationContext);
}
----------------------------------------

 private async void ImplementLongRunningOperation () {
    int id;
    string name;
    await Task.Run( () => {
        id = 42;
        name = "John Doe";
    });
    label1.Text = id.ToString();
    label2.Text = name;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
828
6
Gpt3D_Clone828_6.cs 1 11
Gpt3D_Clone828_6.cs 12 23
----------------------------------------

private void ImplementLongRunningOperation () {
    int id;
    string name;
    Task.Factory.StartNew (() => {
        id = 42;
        name = "Jonh Doe";
    }).ContinueWith (t => {
        label1.Text = id.ToString ();
        label2.Text = name;
    }, TaskScheduler.FromSynchronizationContext);
}
----------------------------------------

 private void ImplementLongRunningOperation () {
    int id;
    string name;
    CustomThreadPool.QueueUserWorkItem((_) => {
        id = 42;
        name = "John Doe";
    });
    label1.Text = id.ToString();
    label2.Text = name;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
829
0
Gpt3D_Clone829_0.cs 1 10
Gpt3D_Clone829_0.cs 11 24
----------------------------------------

void initialize () {
    ConcurrentQueue < string > queue = new ConcurrentQueue < string > ();
    foreach (string url in websites) {
        queue.Enqueue (url);
    }
    List < Thread > threads = new List < Thread > ();
    for (int i = 0; i < threadCountFromTheUser; i ++) {
        threads.Add (new Thread (work));
    }
}
----------------------------------------

  void initialize () {
    ConcurrentQueue<string> queue = new ConcurrentQueue<string>();
    Parallel.ForEach (websites, url => {
        queue.Enqueue(url);
    });
    List<Thread> threads = new List<Thread>();
    Pool<Thread> threadPool = new Pool<Thread>();
    for (int i = 0;i < threadCountFromTheUser; i ++) {
        threadPool.Add(new Thread (work));
    }
    threads = threadPool.ToList(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
829
1
Gpt3D_Clone829_1.cs 1 10
Gpt3D_Clone829_1.cs 11 26
----------------------------------------

void initialize () {
    ConcurrentQueue < string > queue = new ConcurrentQueue < string > ();
    foreach (string url in websites) {
        queue.Enqueue (url);
    }
    List < Thread > threads = new List < Thread > ();
    for (int i = 0; i < threadCountFromTheUser; i ++) {
        threads.Add (new Thread (work));
    }
}
----------------------------------------

   void initialize () {
    BlockingCollection<string> queue = new BlockingCollection<string>();
    foreach (string url in websites) {
        queue.Add(url);
    }
    List<Thread> threads = new List<Thread>();
    Thread thread; 
    for (int i = 0;i < threadCountFromTheUser; i ++) {
        thread = new Thread (work);
        thread.Start();
        threads.Add(thread);
    }
    
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
829
2
Gpt3D_Clone829_2.cs 1 10
Gpt3D_Clone829_2.cs 11 22
----------------------------------------

void initialize () {
    ConcurrentQueue < string > queue = new ConcurrentQueue < string > ();
    foreach (string url in websites) {
        queue.Enqueue (url);
    }
    List < Thread > threads = new List < Thread > ();
    for (int i = 0; i < threadCountFromTheUser; i ++) {
        threads.Add (new Thread (work));
    }
}
----------------------------------------

  void initialize () {
    ConcurrentQueue<string> queue = new ConcurrentQueue<string>();
    Parallel.ForEach (websites, r => {
        queue.Enqueue(r);
    });
    List<Thread> threads = new List<Thread>();
    for (int i = 0;i < threadCountFromTheUser; i ++) {
        threads.Add(new Thread (work));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
829
4
Gpt3D_Clone829_4.cs 1 10
Gpt3D_Clone829_4.cs 11 22
----------------------------------------

void initialize () {
    ConcurrentQueue < string > queue = new ConcurrentQueue < string > ();
    foreach (string url in websites) {
        queue.Enqueue (url);
    }
    List < Thread > threads = new List < Thread > ();
    for (int i = 0; i < threadCountFromTheUser; i ++) {
        threads.Add (new Thread (work));
    }
}
----------------------------------------

 void initialize () {
    ConcurrentQueue<string> queue = new ConcurrentQueue<string>();
    websites.AsParallel().ForAll(url => {
        queue.Enqueue(url);
    });
    List<Thread> threads = new List<Thread>();
    for (int i = 0;i < threadCountFromTheUser; i ++) {
        threads.Add(new Thread (work));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
829
5
Gpt3D_Clone829_5.cs 1 10
Gpt3D_Clone829_5.cs 11 23
----------------------------------------

void initialize () {
    ConcurrentQueue < string > queue = new ConcurrentQueue < string > ();
    foreach (string url in websites) {
        queue.Enqueue (url);
    }
    List < Thread > threads = new List < Thread > ();
    for (int i = 0; i < threadCountFromTheUser; i ++) {
        threads.Add (new Thread (work));
    }
}
----------------------------------------

  void initialize () {
    ConcurrentQueue<string> queue = new ConcurrentQueue<string>();
    for(int i=0; i<websites.Count;i++)
    {
        queue.Enqueue(websites[i]);
    }
    List<Thread> threads = new List<Thread>();
    for (int i = 0;i < threadCountFromTheUser; i ++) {
        threads.Add(new Thread (work));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
829
6
Gpt3D_Clone829_6.cs 1 10
Gpt3D_Clone829_6.cs 11 22
----------------------------------------

void initialize () {
    ConcurrentQueue < string > queue = new ConcurrentQueue < string > ();
    foreach (string url in websites) {
        queue.Enqueue (url);
    }
    List < Thread > threads = new List < Thread > ();
    for (int i = 0; i < threadCountFromTheUser; i ++) {
        threads.Add (new Thread (work));
    }
}
----------------------------------------

   void initialize () {
    ConcurrentDictionary<string,int> queue = new ConcurrentDictionary<string,int>();
    foreach (string url in websites) {
        queue.TryAdd(url,1);
    }
    List<Thread> threads = new List<Thread>();
    for (int i = 0;i < threadCountFromTheUser; i ++) {
        threads.Add(new Thread (work));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
830
0
Gpt3D_Clone830_0.cs 1 11
Gpt3D_Clone830_0.cs 12 28
----------------------------------------

public static void Main (string [] args) {
    List < Demo > all = new List < Demo > ();
    all.Add (new Demo {Name = "a"});
    all.Add (new Demo {Name = "ab"});
    all.Add (new Demo {Name = "abc"});
    all.Add (new Demo {Name = "cba"});
    all.Add (new Demo {Name = "bac"});
    all.Add (new Demo {Name = "ddd"});
    var t = Filter (all, "Name", "a");
    Console.WriteLine (t.Count);
}
----------------------------------------

  public static List<Demo> Main(string[] args)
{
     List<Demo> all = new List<Demo>();
     all.Add(new Demo {Name = "a"});
     all.Add(new Demo {Name = "ab"});
     all.Add(new Demo {Name = "abc"});
     all.Add(new Demo {Name = "cba"});
     all.Add(new Demo {Name = "bac"});
     all.Add(new Demo {Name = "ddd"});
     var t = Filter(all, "Name", "a");
     Console.WriteLine(t.Count.ToString());
     return t;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
831
1
Gpt3D_Clone831_1.cs 1 15
Gpt3D_Clone831_1.cs 16 36
----------------------------------------

public Control FindControl (Control root, string name) {
    if (root == null)
        throw new ArgumentNullException ("root");
    var stack = new Stack < Control > ();
    stack.Push (root);
    while (stack.Count > 0) {
        Control item = stack.Pop ();
        if (item.Name == name)
            return item;
        foreach (Control child in item.Controls) {
            stack.Push (child);
        }
    }
    return null;
}
----------------------------------------

 public Control FindControl(Control root, string name) 
{ 
    if (root == null) 
        throw new ArgumentNullException("root"); 
    List<Control> list = new List<Control>(); 
    list.Insert(0, root); 
    while (list.Count > 0) 
    { 
        Control item = list[list.Count - 1]; 
        list.RemoveAt(list.Count - 1); 
        if (item.Name == name) 
            return item; 
        foreach (Control control in item.Controls) 
        { 
           list.Insert(0, control); 
        } 
    } 
    return null; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
831
2
Gpt3D_Clone831_2.cs 1 15
Gpt3D_Clone831_2.cs 16 36
----------------------------------------

public Control FindControl (Control root, string name) {
    if (root == null)
        throw new ArgumentNullException ("root");
    var stack = new Stack < Control > ();
    stack.Push (root);
    while (stack.Count > 0) {
        Control item = stack.Pop ();
        if (item.Name == name)
            return item;
        foreach (Control child in item.Controls) {
            stack.Push (child);
        }
    }
    return null;
}
----------------------------------------

 public Control FindControl(Control root, string name) 
{ 
    if (root == null) 
        throw new ArgumentNullException("root"); 
    Dictionary<Control, int> dic = new Dictionary<Control, int>(); 
    dic.Add(root, 0); 
    while (dic.Count > 0) 
    { 
        Control item = dic.Keys.ToList()[0]; 
        dic.Remove(item); 
        if (item.Name == name) 
            return item; 
        foreach (Control control in item.Controls) 
        { 
           dic.Add(control, 0); 
        } 
    } 
    return null; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
831
3
Gpt3D_Clone831_3.cs 1 15
Gpt3D_Clone831_3.cs 16 36
----------------------------------------

public Control FindControl (Control root, string name) {
    if (root == null)
        throw new ArgumentNullException ("root");
    var stack = new Stack < Control > ();
    stack.Push (root);
    while (stack.Count > 0) {
        Control item = stack.Pop ();
        if (item.Name == name)
            return item;
        foreach (Control child in item.Controls) {
            stack.Push (child);
        }
    }
    return null;
}
----------------------------------------

 public Control FindControl(Control root, string name)
{
    if (root == null)
        throw new ArgumentNullException("root");
    Hashtable hashtable = new Hashtable();
    hashtable.Add(root, 0);
    while (hashtable.Count > 0)
    {
        Control item = (Control)hashtable.Keys.ToList()[0];
        hashtable.Remove(item);
        if (item.Name == name)
            return item;
        foreach (Control control in item.Controls)
        {
           hashtable.Add(control, 0);
        }
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
831
4
Gpt3D_Clone831_4.cs 1 15
Gpt3D_Clone831_4.cs 16 35
----------------------------------------

public Control FindControl (Control root, string name) {
    if (root == null)
        throw new ArgumentNullException ("root");
    var stack = new Stack < Control > ();
    stack.Push (root);
    while (stack.Count > 0) {
        Control item = stack.Pop ();
        if (item.Name == name)
            return item;
        foreach (Control child in item.Controls) {
            stack.Push (child);
        }
    }
    return null;
}
----------------------------------------

 public Control FindControl(Control root, string name)
{
    if (root == null)
        throw new ArgumentNullException("root");
    PriorityQueue<Control> queue = new PriorityQueue<Control>(); 
    queue.Enqueue(root, 0);
    while (queue.Count > 0)
    {
        Control item = queue.Dequeue();
        if (item.Name == name)
            return item;
        foreach (Control control in item.Controls)
        {
           queue.Enqueue(control, 0);
        }
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
834
0
Gpt3D_Clone834_0.cs 1 22
Gpt3D_Clone834_0.cs 23 197
----------------------------------------

static public bool AddUserToGroup (string user, UserGroup group) {
    var name = new StringBuilder (512);
    var nameSize = (uint) name.Capacity;
    var refDomainName = new StringBuilder (512);
    var refDomainNameSize = (uint) refDomainName.Capacity;
    var sid = new IntPtr ();
    switch (group) {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid ("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid ("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if (! LookupAccountSid (null, sid, name, ref nameSize, refDomainName, ref refDomainNameSize, out sidType))
        return false;
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    var val = NetLocalGroupAddMembers (null, name.ToString (), 3, ref info, 1);
    return val.Equals (SUCCESS) || val.Equals (ERROR_MEMBER_IN_ALIAS);
}
----------------------------------------

 
static public bool AddUserToGroup(string user, UserGroup group) 
{
    var sid = new IntPtr();
    switch(group) 
    {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if(!LookupAccountSid(null, sid, out string name, out uint nameSize, 
                         out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;                
    
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    return NetLocalGroupAddMembers(null, name, 3, ref info, 1) == SUCCESS || 
        val.Equals(ERROR_MEMBER_IN_ALIAS);
};
 
static public bool AddUserToGroup(string user, UserGroup group) 
{
    var sid = new IntPtr();
    switch(group) 
    {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if(!LookupAccountSid(null, sid, out string name, out uint nameSize, 
                         out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;                
    
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    var retval = NetLocalGroupAddMembers(null, name, 3, ref info, 1);
    return retval == SUCCESS || retval == ERROR_MEMBER_IN_ALIAS;
};
 
static public bool AddUserToGroup(string user, UserGroup group) 
{
    IntPtr sid;
    switch(group) 
    {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if(!LookupAccountSid(null, sid, out string name, out uint nameSize, 
                         out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;                
    
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    var val = NetLocalGroupAddMembers(null, name, 3, ref info, 1);
    if (val == SUCCESS || val == ERROR_MEMBER_IN_ALIAS)
        return true;
    else
        return false;
};
static public bool AddUserToGroup(string user, UserGroup group) 
{
    IntPtr sid;
    switch(group) 
    {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if(!LookupAccountSid(null, sid, out string name, out uint nameSize, 
                         out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;                
    
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    if (NetLocalGroupAddMembers(null, name, 3, ref info, 1) == SUCCESS || 
        NetLocalGroupAddMembers(null, name, 3, ref info, 1) == ERROR_MEMBER_IN_ALIAS)
        return true;
    else
        return false;
};
 
static public bool AddUserToGroup(string user, UserGroup group) 
{
    IntPtr sid;
    switch(group) 
    {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if(!LookupAccountSid(null, sid, out string name, out uint nameSize, 
                         out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;                
    
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    var retVal = NetLocalGroupAddMembers(null, name, 3, ref info, 1);
    return (retVal == SUCCESS || retVal == ERROR_MEMBER_IN_ALIAS);
};
 
static public bool AddUserToGroup(string user, UserGroup group) 
{
    IntPtr sid;
    switch(group) 
    {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if(!LookupAccountSid(null, sid, out string name, out uint nameSize, 
                         out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;                
    
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    var retVal = NetLocalGroupAddMembers(null, name, 3, ref info, 1);
    if (retVal == SUCCESS || retVal == ERROR_MEMBER_IN_ALIAS)
        return true;
    else
        return false;
};
static public bool AddUserToGroup (string user, UserGroup group) {
    IntPtr sid;
    switch (group) {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid ("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid ("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if (! LookupAccountSid (null, sid, out string name, out uint nameSize, out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;  
    var resultCode = NetLocalGroupAddMembers(null, name, 3, ref info, 1);
    return resultCode == SUCCESS || resultCode == ERROR_MEMBER_IN_ALIAS;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
834
1
Gpt3D_Clone834_1.cs 1 22
Gpt3D_Clone834_1.cs 23 197
----------------------------------------

static public bool AddUserToGroup (string user, UserGroup group) {
    var name = new StringBuilder (512);
    var nameSize = (uint) name.Capacity;
    var refDomainName = new StringBuilder (512);
    var refDomainNameSize = (uint) refDomainName.Capacity;
    var sid = new IntPtr ();
    switch (group) {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid ("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid ("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if (! LookupAccountSid (null, sid, name, ref nameSize, refDomainName, ref refDomainNameSize, out sidType))
        return false;
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    var val = NetLocalGroupAddMembers (null, name.ToString (), 3, ref info, 1);
    return val.Equals (SUCCESS) || val.Equals (ERROR_MEMBER_IN_ALIAS);
}
----------------------------------------

 
static public bool AddUserToGroup(string user, UserGroup group) 
{
    var sid = new IntPtr();
    switch(group) 
    {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if(!LookupAccountSid(null, sid, out string name, out uint nameSize, 
                         out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;                
    
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    return NetLocalGroupAddMembers(null, name, 3, ref info, 1) == SUCCESS || 
        val.Equals(ERROR_MEMBER_IN_ALIAS);
};
 
static public bool AddUserToGroup(string user, UserGroup group) 
{
    var sid = new IntPtr();
    switch(group) 
    {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if(!LookupAccountSid(null, sid, out string name, out uint nameSize, 
                         out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;                
    
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    var retval = NetLocalGroupAddMembers(null, name, 3, ref info, 1);
    return retval == SUCCESS || retval == ERROR_MEMBER_IN_ALIAS;
};
 
static public bool AddUserToGroup(string user, UserGroup group) 
{
    IntPtr sid;
    switch(group) 
    {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if(!LookupAccountSid(null, sid, out string name, out uint nameSize, 
                         out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;                
    
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    var val = NetLocalGroupAddMembers(null, name, 3, ref info, 1);
    if (val == SUCCESS || val == ERROR_MEMBER_IN_ALIAS)
        return true;
    else
        return false;
};
static public bool AddUserToGroup(string user, UserGroup group) 
{
    IntPtr sid;
    switch(group) 
    {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if(!LookupAccountSid(null, sid, out string name, out uint nameSize, 
                         out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;                
    
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    if (NetLocalGroupAddMembers(null, name, 3, ref info, 1) == SUCCESS || 
        NetLocalGroupAddMembers(null, name, 3, ref info, 1) == ERROR_MEMBER_IN_ALIAS)
        return true;
    else
        return false;
};
 
static public bool AddUserToGroup(string user, UserGroup group) 
{
    IntPtr sid;
    switch(group) 
    {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if(!LookupAccountSid(null, sid, out string name, out uint nameSize, 
                         out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;                
    
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    var retVal = NetLocalGroupAddMembers(null, name, 3, ref info, 1);
    return (retVal == SUCCESS || retVal == ERROR_MEMBER_IN_ALIAS);
};
 
static public bool AddUserToGroup(string user, UserGroup group) 
{
    IntPtr sid;
    switch(group) 
    {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if(!LookupAccountSid(null, sid, out string name, out uint nameSize, 
                         out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;                
    
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    var retVal = NetLocalGroupAddMembers(null, name, 3, ref info, 1);
    if (retVal == SUCCESS || retVal == ERROR_MEMBER_IN_ALIAS)
        return true;
    else
        return false;
};
static public bool AddUserToGroup (string user, UserGroup group) {
    IntPtr sid;
    switch (group) {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid ("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid ("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if (! LookupAccountSid (null, sid, out string name, out uint nameSize, out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;  
    var resultCode = NetLocalGroupAddMembers(null, name, 3, ref info, 1);
    return resultCode == SUCCESS || resultCode == ERROR_MEMBER_IN_ALIAS;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
834
2
Gpt3D_Clone834_2.cs 1 22
Gpt3D_Clone834_2.cs 23 49
----------------------------------------

static public bool AddUserToGroup (string user, UserGroup group) {
    var name = new StringBuilder (512);
    var nameSize = (uint) name.Capacity;
    var refDomainName = new StringBuilder (512);
    var refDomainNameSize = (uint) refDomainName.Capacity;
    var sid = new IntPtr ();
    switch (group) {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid ("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid ("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if (! LookupAccountSid (null, sid, name, ref nameSize, refDomainName, ref refDomainNameSize, out sidType))
        return false;
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    var val = NetLocalGroupAddMembers (null, name.ToString (), 3, ref info, 1);
    return val.Equals (SUCCESS) || val.Equals (ERROR_MEMBER_IN_ALIAS);
}
----------------------------------------

static public bool AddUserToGroup (string user, UserGroup group)
{
    IntPtr sid;
    switch (group) {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid ("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid ("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if (!LookupAccountSid (null, sid, out string name, out uint nameSize, out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    var retVal = NetLocalGroupAddMembers (null, name, 3, ref info, 1);
    if (retVal == SUCCESS || retVal == ERROR_MEMBER_IN_ALIAS)
        return true;
    else
        return false;  
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
834
3
Gpt3D_Clone834_3.cs 1 22
Gpt3D_Clone834_3.cs 23 197
----------------------------------------

static public bool AddUserToGroup (string user, UserGroup group) {
    var name = new StringBuilder (512);
    var nameSize = (uint) name.Capacity;
    var refDomainName = new StringBuilder (512);
    var refDomainNameSize = (uint) refDomainName.Capacity;
    var sid = new IntPtr ();
    switch (group) {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid ("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid ("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if (! LookupAccountSid (null, sid, name, ref nameSize, refDomainName, ref refDomainNameSize, out sidType))
        return false;
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    var val = NetLocalGroupAddMembers (null, name.ToString (), 3, ref info, 1);
    return val.Equals (SUCCESS) || val.Equals (ERROR_MEMBER_IN_ALIAS);
}
----------------------------------------

 
static public bool AddUserToGroup(string user, UserGroup group) 
{
    var sid = new IntPtr();
    switch(group) 
    {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if(!LookupAccountSid(null, sid, out string name, out uint nameSize, 
                         out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;                
    
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    return NetLocalGroupAddMembers(null, name, 3, ref info, 1) == SUCCESS || 
        val.Equals(ERROR_MEMBER_IN_ALIAS);
};
 
static public bool AddUserToGroup(string user, UserGroup group) 
{
    var sid = new IntPtr();
    switch(group) 
    {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if(!LookupAccountSid(null, sid, out string name, out uint nameSize, 
                         out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;                
    
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    var retval = NetLocalGroupAddMembers(null, name, 3, ref info, 1);
    return retval == SUCCESS || retval == ERROR_MEMBER_IN_ALIAS;
};
 
static public bool AddUserToGroup(string user, UserGroup group) 
{
    IntPtr sid;
    switch(group) 
    {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if(!LookupAccountSid(null, sid, out string name, out uint nameSize, 
                         out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;                
    
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    var val = NetLocalGroupAddMembers(null, name, 3, ref info, 1);
    if (val == SUCCESS || val == ERROR_MEMBER_IN_ALIAS)
        return true;
    else
        return false;
};
static public bool AddUserToGroup(string user, UserGroup group) 
{
    IntPtr sid;
    switch(group) 
    {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if(!LookupAccountSid(null, sid, out string name, out uint nameSize, 
                         out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;                
    
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    if (NetLocalGroupAddMembers(null, name, 3, ref info, 1) == SUCCESS || 
        NetLocalGroupAddMembers(null, name, 3, ref info, 1) == ERROR_MEMBER_IN_ALIAS)
        return true;
    else
        return false;
};
 
static public bool AddUserToGroup(string user, UserGroup group) 
{
    IntPtr sid;
    switch(group) 
    {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if(!LookupAccountSid(null, sid, out string name, out uint nameSize, 
                         out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;                
    
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    var retVal = NetLocalGroupAddMembers(null, name, 3, ref info, 1);
    return (retVal == SUCCESS || retVal == ERROR_MEMBER_IN_ALIAS);
};
 
static public bool AddUserToGroup(string user, UserGroup group) 
{
    IntPtr sid;
    switch(group) 
    {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if(!LookupAccountSid(null, sid, out string name, out uint nameSize, 
                         out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;                
    
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    var retVal = NetLocalGroupAddMembers(null, name, 3, ref info, 1);
    if (retVal == SUCCESS || retVal == ERROR_MEMBER_IN_ALIAS)
        return true;
    else
        return false;
};
static public bool AddUserToGroup (string user, UserGroup group) {
    IntPtr sid;
    switch (group) {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid ("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid ("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if (! LookupAccountSid (null, sid, out string name, out uint nameSize, out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;  
    var resultCode = NetLocalGroupAddMembers(null, name, 3, ref info, 1);
    return resultCode == SUCCESS || resultCode == ERROR_MEMBER_IN_ALIAS;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
834
4
Gpt3D_Clone834_4.cs 1 22
Gpt3D_Clone834_4.cs 23 50
----------------------------------------

static public bool AddUserToGroup (string user, UserGroup group) {
    var name = new StringBuilder (512);
    var nameSize = (uint) name.Capacity;
    var refDomainName = new StringBuilder (512);
    var refDomainNameSize = (uint) refDomainName.Capacity;
    var sid = new IntPtr ();
    switch (group) {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid ("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid ("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if (! LookupAccountSid (null, sid, name, ref nameSize, refDomainName, ref refDomainNameSize, out sidType))
        return false;
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    var val = NetLocalGroupAddMembers (null, name.ToString (), 3, ref info, 1);
    return val.Equals (SUCCESS) || val.Equals (ERROR_MEMBER_IN_ALIAS);
}
----------------------------------------

public static bool AddUserToGroup(string user, UserGroup group) 
{
    IntPtr sid;
    switch(group) 
    {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if(!LookupAccountSid(null, sid, out string name, out uint nameSize, 
                         out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;                
    
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    if (NetLocalGroupAddMembers(null, name, 3, ref info, 1) == SUCCESS || 
        NetLocalGroupAddMembers(null, name, 3, ref info, 1) == ERROR_MEMBER_IN_ALIAS)
        return true;
    else
        return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
834
5
Gpt3D_Clone834_5.cs 1 22
Gpt3D_Clone834_5.cs 23 197
----------------------------------------

static public bool AddUserToGroup (string user, UserGroup group) {
    var name = new StringBuilder (512);
    var nameSize = (uint) name.Capacity;
    var refDomainName = new StringBuilder (512);
    var refDomainNameSize = (uint) refDomainName.Capacity;
    var sid = new IntPtr ();
    switch (group) {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid ("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid ("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if (! LookupAccountSid (null, sid, name, ref nameSize, refDomainName, ref refDomainNameSize, out sidType))
        return false;
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    var val = NetLocalGroupAddMembers (null, name.ToString (), 3, ref info, 1);
    return val.Equals (SUCCESS) || val.Equals (ERROR_MEMBER_IN_ALIAS);
}
----------------------------------------

 
static public bool AddUserToGroup(string user, UserGroup group) 
{
    var sid = new IntPtr();
    switch(group) 
    {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if(!LookupAccountSid(null, sid, out string name, out uint nameSize, 
                         out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;                
    
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    return NetLocalGroupAddMembers(null, name, 3, ref info, 1) == SUCCESS || 
        val.Equals(ERROR_MEMBER_IN_ALIAS);
};
 
static public bool AddUserToGroup(string user, UserGroup group) 
{
    var sid = new IntPtr();
    switch(group) 
    {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if(!LookupAccountSid(null, sid, out string name, out uint nameSize, 
                         out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;                
    
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    var retval = NetLocalGroupAddMembers(null, name, 3, ref info, 1);
    return retval == SUCCESS || retval == ERROR_MEMBER_IN_ALIAS;
};
 
static public bool AddUserToGroup(string user, UserGroup group) 
{
    IntPtr sid;
    switch(group) 
    {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if(!LookupAccountSid(null, sid, out string name, out uint nameSize, 
                         out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;                
    
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    var val = NetLocalGroupAddMembers(null, name, 3, ref info, 1);
    if (val == SUCCESS || val == ERROR_MEMBER_IN_ALIAS)
        return true;
    else
        return false;
};
static public bool AddUserToGroup(string user, UserGroup group) 
{
    IntPtr sid;
    switch(group) 
    {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if(!LookupAccountSid(null, sid, out string name, out uint nameSize, 
                         out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;                
    
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    if (NetLocalGroupAddMembers(null, name, 3, ref info, 1) == SUCCESS || 
        NetLocalGroupAddMembers(null, name, 3, ref info, 1) == ERROR_MEMBER_IN_ALIAS)
        return true;
    else
        return false;
};
 
static public bool AddUserToGroup(string user, UserGroup group) 
{
    IntPtr sid;
    switch(group) 
    {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if(!LookupAccountSid(null, sid, out string name, out uint nameSize, 
                         out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;                
    
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    var retVal = NetLocalGroupAddMembers(null, name, 3, ref info, 1);
    return (retVal == SUCCESS || retVal == ERROR_MEMBER_IN_ALIAS);
};
 
static public bool AddUserToGroup(string user, UserGroup group) 
{
    IntPtr sid;
    switch(group) 
    {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if(!LookupAccountSid(null, sid, out string name, out uint nameSize, 
                         out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;                
    
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    var retVal = NetLocalGroupAddMembers(null, name, 3, ref info, 1);
    if (retVal == SUCCESS || retVal == ERROR_MEMBER_IN_ALIAS)
        return true;
    else
        return false;
};
static public bool AddUserToGroup (string user, UserGroup group) {
    IntPtr sid;
    switch (group) {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid ("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid ("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if (! LookupAccountSid (null, sid, out string name, out uint nameSize, out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;  
    var resultCode = NetLocalGroupAddMembers(null, name, 3, ref info, 1);
    return resultCode == SUCCESS || resultCode == ERROR_MEMBER_IN_ALIAS;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
834
6
Gpt3D_Clone834_6.cs 1 22
Gpt3D_Clone834_6.cs 23 197
----------------------------------------

static public bool AddUserToGroup (string user, UserGroup group) {
    var name = new StringBuilder (512);
    var nameSize = (uint) name.Capacity;
    var refDomainName = new StringBuilder (512);
    var refDomainNameSize = (uint) refDomainName.Capacity;
    var sid = new IntPtr ();
    switch (group) {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid ("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid ("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if (! LookupAccountSid (null, sid, name, ref nameSize, refDomainName, ref refDomainNameSize, out sidType))
        return false;
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    var val = NetLocalGroupAddMembers (null, name.ToString (), 3, ref info, 1);
    return val.Equals (SUCCESS) || val.Equals (ERROR_MEMBER_IN_ALIAS);
}
----------------------------------------

 
static public bool AddUserToGroup(string user, UserGroup group) 
{
    var sid = new IntPtr();
    switch(group) 
    {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if(!LookupAccountSid(null, sid, out string name, out uint nameSize, 
                         out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;                
    
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    return NetLocalGroupAddMembers(null, name, 3, ref info, 1) == SUCCESS || 
        val.Equals(ERROR_MEMBER_IN_ALIAS);
};
 
static public bool AddUserToGroup(string user, UserGroup group) 
{
    var sid = new IntPtr();
    switch(group) 
    {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if(!LookupAccountSid(null, sid, out string name, out uint nameSize, 
                         out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;                
    
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    var retval = NetLocalGroupAddMembers(null, name, 3, ref info, 1);
    return retval == SUCCESS || retval == ERROR_MEMBER_IN_ALIAS;
};
 
static public bool AddUserToGroup(string user, UserGroup group) 
{
    IntPtr sid;
    switch(group) 
    {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if(!LookupAccountSid(null, sid, out string name, out uint nameSize, 
                         out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;                
    
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    var val = NetLocalGroupAddMembers(null, name, 3, ref info, 1);
    if (val == SUCCESS || val == ERROR_MEMBER_IN_ALIAS)
        return true;
    else
        return false;
};
static public bool AddUserToGroup(string user, UserGroup group) 
{
    IntPtr sid;
    switch(group) 
    {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if(!LookupAccountSid(null, sid, out string name, out uint nameSize, 
                         out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;                
    
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    if (NetLocalGroupAddMembers(null, name, 3, ref info, 1) == SUCCESS || 
        NetLocalGroupAddMembers(null, name, 3, ref info, 1) == ERROR_MEMBER_IN_ALIAS)
        return true;
    else
        return false;
};
 
static public bool AddUserToGroup(string user, UserGroup group) 
{
    IntPtr sid;
    switch(group) 
    {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if(!LookupAccountSid(null, sid, out string name, out uint nameSize, 
                         out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;                
    
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    var retVal = NetLocalGroupAddMembers(null, name, 3, ref info, 1);
    return (retVal == SUCCESS || retVal == ERROR_MEMBER_IN_ALIAS);
};
 
static public bool AddUserToGroup(string user, UserGroup group) 
{
    IntPtr sid;
    switch(group) 
    {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if(!LookupAccountSid(null, sid, out string name, out uint nameSize, 
                         out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;                
    
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    var retVal = NetLocalGroupAddMembers(null, name, 3, ref info, 1);
    if (retVal == SUCCESS || retVal == ERROR_MEMBER_IN_ALIAS)
        return true;
    else
        return false;
};
static public bool AddUserToGroup (string user, UserGroup group) {
    IntPtr sid;
    switch (group) {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid ("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid ("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if (! LookupAccountSid (null, sid, out string name, out uint nameSize, out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;  
    var resultCode = NetLocalGroupAddMembers(null, name, 3, ref info, 1);
    return resultCode == SUCCESS || resultCode == ERROR_MEMBER_IN_ALIAS;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
834
7
Gpt3D_Clone834_7.cs 1 22
Gpt3D_Clone834_7.cs 23 197
----------------------------------------

static public bool AddUserToGroup (string user, UserGroup group) {
    var name = new StringBuilder (512);
    var nameSize = (uint) name.Capacity;
    var refDomainName = new StringBuilder (512);
    var refDomainNameSize = (uint) refDomainName.Capacity;
    var sid = new IntPtr ();
    switch (group) {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid ("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid ("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if (! LookupAccountSid (null, sid, name, ref nameSize, refDomainName, ref refDomainNameSize, out sidType))
        return false;
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    var val = NetLocalGroupAddMembers (null, name.ToString (), 3, ref info, 1);
    return val.Equals (SUCCESS) || val.Equals (ERROR_MEMBER_IN_ALIAS);
}
----------------------------------------

 
static public bool AddUserToGroup(string user, UserGroup group) 
{
    var sid = new IntPtr();
    switch(group) 
    {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if(!LookupAccountSid(null, sid, out string name, out uint nameSize, 
                         out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;                
    
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    return NetLocalGroupAddMembers(null, name, 3, ref info, 1) == SUCCESS || 
        val.Equals(ERROR_MEMBER_IN_ALIAS);
};
 
static public bool AddUserToGroup(string user, UserGroup group) 
{
    var sid = new IntPtr();
    switch(group) 
    {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if(!LookupAccountSid(null, sid, out string name, out uint nameSize, 
                         out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;                
    
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    var retval = NetLocalGroupAddMembers(null, name, 3, ref info, 1);
    return retval == SUCCESS || retval == ERROR_MEMBER_IN_ALIAS;
};
 
static public bool AddUserToGroup(string user, UserGroup group) 
{
    IntPtr sid;
    switch(group) 
    {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if(!LookupAccountSid(null, sid, out string name, out uint nameSize, 
                         out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;                
    
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    var val = NetLocalGroupAddMembers(null, name, 3, ref info, 1);
    if (val == SUCCESS || val == ERROR_MEMBER_IN_ALIAS)
        return true;
    else
        return false;
};
static public bool AddUserToGroup(string user, UserGroup group) 
{
    IntPtr sid;
    switch(group) 
    {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if(!LookupAccountSid(null, sid, out string name, out uint nameSize, 
                         out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;                
    
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    if (NetLocalGroupAddMembers(null, name, 3, ref info, 1) == SUCCESS || 
        NetLocalGroupAddMembers(null, name, 3, ref info, 1) == ERROR_MEMBER_IN_ALIAS)
        return true;
    else
        return false;
};
 
static public bool AddUserToGroup(string user, UserGroup group) 
{
    IntPtr sid;
    switch(group) 
    {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if(!LookupAccountSid(null, sid, out string name, out uint nameSize, 
                         out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;                
    
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    var retVal = NetLocalGroupAddMembers(null, name, 3, ref info, 1);
    return (retVal == SUCCESS || retVal == ERROR_MEMBER_IN_ALIAS);
};
 
static public bool AddUserToGroup(string user, UserGroup group) 
{
    IntPtr sid;
    switch(group) 
    {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if(!LookupAccountSid(null, sid, out string name, out uint nameSize, 
                         out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;                
    
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    var retVal = NetLocalGroupAddMembers(null, name, 3, ref info, 1);
    if (retVal == SUCCESS || retVal == ERROR_MEMBER_IN_ALIAS)
        return true;
    else
        return false;
};
static public bool AddUserToGroup (string user, UserGroup group) {
    IntPtr sid;
    switch (group) {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid ("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid ("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if (! LookupAccountSid (null, sid, out string name, out uint nameSize, out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;  
    var resultCode = NetLocalGroupAddMembers(null, name, 3, ref info, 1);
    return resultCode == SUCCESS || resultCode == ERROR_MEMBER_IN_ALIAS;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
834
8
Gpt3D_Clone834_8.cs 1 22
Gpt3D_Clone834_8.cs 23 47
----------------------------------------

static public bool AddUserToGroup (string user, UserGroup group) {
    var name = new StringBuilder (512);
    var nameSize = (uint) name.Capacity;
    var refDomainName = new StringBuilder (512);
    var refDomainNameSize = (uint) refDomainName.Capacity;
    var sid = new IntPtr ();
    switch (group) {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid ("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid ("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if (! LookupAccountSid (null, sid, name, ref nameSize, refDomainName, ref refDomainNameSize, out sidType))
        return false;
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    var val = NetLocalGroupAddMembers (null, name.ToString (), 3, ref info, 1);
    return val.Equals (SUCCESS) || val.Equals (ERROR_MEMBER_IN_ALIAS);
}
----------------------------------------

 
public static bool AddUserToGroup(string user, UserGroup group) 
{
    IntPtr sid;
    switch(group) 
    {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if(!LookupAccountSid(null, sid, out string name, out uint nameSize, 
                         out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;                
    
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    return (NetLocalGroupAddMembers(null, name, 3, ref info, 1) == SUCCESS) || 
        (NetLocalGroupAddMembers(null, name, 3, ref info, 1) == ERROR_MEMBER_IN_ALIAS);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
834
9
Gpt3D_Clone834_9.cs 1 22
Gpt3D_Clone834_9.cs 23 197
----------------------------------------

static public bool AddUserToGroup (string user, UserGroup group) {
    var name = new StringBuilder (512);
    var nameSize = (uint) name.Capacity;
    var refDomainName = new StringBuilder (512);
    var refDomainNameSize = (uint) refDomainName.Capacity;
    var sid = new IntPtr ();
    switch (group) {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid ("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid ("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if (! LookupAccountSid (null, sid, name, ref nameSize, refDomainName, ref refDomainNameSize, out sidType))
        return false;
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    var val = NetLocalGroupAddMembers (null, name.ToString (), 3, ref info, 1);
    return val.Equals (SUCCESS) || val.Equals (ERROR_MEMBER_IN_ALIAS);
}
----------------------------------------

 
static public bool AddUserToGroup(string user, UserGroup group) 
{
    var sid = new IntPtr();
    switch(group) 
    {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if(!LookupAccountSid(null, sid, out string name, out uint nameSize, 
                         out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;                
    
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    return NetLocalGroupAddMembers(null, name, 3, ref info, 1) == SUCCESS || 
        val.Equals(ERROR_MEMBER_IN_ALIAS);
};
 
static public bool AddUserToGroup(string user, UserGroup group) 
{
    var sid = new IntPtr();
    switch(group) 
    {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if(!LookupAccountSid(null, sid, out string name, out uint nameSize, 
                         out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;                
    
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    var retval = NetLocalGroupAddMembers(null, name, 3, ref info, 1);
    return retval == SUCCESS || retval == ERROR_MEMBER_IN_ALIAS;
};
 
static public bool AddUserToGroup(string user, UserGroup group) 
{
    IntPtr sid;
    switch(group) 
    {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if(!LookupAccountSid(null, sid, out string name, out uint nameSize, 
                         out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;                
    
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    var val = NetLocalGroupAddMembers(null, name, 3, ref info, 1);
    if (val == SUCCESS || val == ERROR_MEMBER_IN_ALIAS)
        return true;
    else
        return false;
};
static public bool AddUserToGroup(string user, UserGroup group) 
{
    IntPtr sid;
    switch(group) 
    {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if(!LookupAccountSid(null, sid, out string name, out uint nameSize, 
                         out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;                
    
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    if (NetLocalGroupAddMembers(null, name, 3, ref info, 1) == SUCCESS || 
        NetLocalGroupAddMembers(null, name, 3, ref info, 1) == ERROR_MEMBER_IN_ALIAS)
        return true;
    else
        return false;
};
 
static public bool AddUserToGroup(string user, UserGroup group) 
{
    IntPtr sid;
    switch(group) 
    {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if(!LookupAccountSid(null, sid, out string name, out uint nameSize, 
                         out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;                
    
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    var retVal = NetLocalGroupAddMembers(null, name, 3, ref info, 1);
    return (retVal == SUCCESS || retVal == ERROR_MEMBER_IN_ALIAS);
};
 
static public bool AddUserToGroup(string user, UserGroup group) 
{
    IntPtr sid;
    switch(group) 
    {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if(!LookupAccountSid(null, sid, out string name, out uint nameSize, 
                         out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;                
    
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;
    var retVal = NetLocalGroupAddMembers(null, name, 3, ref info, 1);
    if (retVal == SUCCESS || retVal == ERROR_MEMBER_IN_ALIAS)
        return true;
    else
        return false;
};
static public bool AddUserToGroup (string user, UserGroup group) {
    IntPtr sid;
    switch (group) {
        case UserGroup.PerformanceMonitorUsers :
            ConvertStringSidToSid ("S-1-5-32-558", out sid);
            break;
        case UserGroup.Administrators :
            ConvertStringSidToSid ("S-1-5-32-544", out sid);
            break;
    }
    SID_NAME_USE sidType;
    if (! LookupAccountSid (null, sid, out string name, out uint nameSize, out string refDomainName, out uint refDomainNameSize, out sidType))
        return false;
    LOCALGROUP_MEMBERS_INFO_3 info;
    info.Domain = user;  
    var resultCode = NetLocalGroupAddMembers(null, name, 3, ref info, 1);
    return resultCode == SUCCESS || resultCode == ERROR_MEMBER_IN_ALIAS;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
837
0
Gpt3D_Clone837_0.cs 1 16
Gpt3D_Clone837_0.cs 17 34
----------------------------------------

private string CreateSqlFilter (string fieldName, Control userInputControl, SqlCommand command, bool exactMatch) {
    string searchValue = null;
    if (userInputControl is TextBox)
        searchValue = ((TextBox) userInputControl).Text;
    if (userInputControl is ComboBox)
        searchValue = ((ComboBox) userInputControl).Text;
    if (String.IsNullOrWhiteSpace (searchValue))
        return null;
    if (exactMatch) {
        command.Parameters.Add (new SqlParameter ("@" + fieldName, searchValue));
        return fieldName + " = @" + fieldName;
    } else {
        command.Parameters.Add (new SqlParameter ("@" + fieldName, "%" + searchValue + "%"));
        return fieldName + " LIKE @" + fieldName;
    }
}
----------------------------------------

  private string CreateSqlFilter (string fieldName, Control userInputControl, SqlCommand command, bool exactMatch) {
    string searchValue = null;
    if (userInputControl is TextBox)
        searchValue = ((TextBox) userInputControl).Text;
    if (userInputControl is ComboBox)
        searchValue = ((ComboBox) userInputControl).Text;
    if (String.IsNullOrWhiteSpace (searchValue))
        return null;
    if (exactMatch) {
        command.Parameters.Add (new SqlParameter ("@" + fieldName + "_Query", searchValue));
        return fieldName + " = @" + fieldName + "_Query";
    } else {
        command.Parameters.Add (new SqlParameter ("@" + fieldName + "_Query", "%" + searchValue + "%"));
        return fieldName + " LIKE @" + fieldName + "_Query";
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
838
0
Gpt3D_Clone838_0.cs 1 14
Gpt3D_Clone838_0.cs 15 27
----------------------------------------

protected void Button1_Click (object sender, EventArgs e) {
    DataTable dt = new DataTable ();
    if (dt.Columns.Count == 0) {
        dt.Columns.Add ("PayScale", typeof (string));
        dt.Columns.Add ("IncrementAmt", typeof (string));
        dt.Columns.Add ("Period", typeof (string));
    }
    DataRow NewRow = dt.NewRow ();
    NewRow [0] = TextBox1.Text;
    NewRow [1] = TextBox2.Text;
    dt.Rows.Add (NewRow);
    GridView1.DataSource = dt;
    GridViewl.DataBind ();
}
----------------------------------------

  protected void Button1_Click(object sender, EventArgs e) {
    DataTable dt = new DataTable();
    if (dt.Columns.Count == 0) {
        dt.Columns.Add("PayScale", typeof(string));
        dt.Columns.Add("IncrementAmt", typeof(string));
        dt.Columns.Add("Period", typeof(string));
    }
    dt.Rows.Add(TextBox1.Text, TextBox2.Text);
    GridView1.DataSource = dt;
    GridView1.DataBind();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
838
1
Gpt3D_Clone838_1.cs 1 14
Gpt3D_Clone838_1.cs 15 27
----------------------------------------

protected void Button1_Click (object sender, EventArgs e) {
    DataTable dt = new DataTable ();
    if (dt.Columns.Count == 0) {
        dt.Columns.Add ("PayScale", typeof (string));
        dt.Columns.Add ("IncrementAmt", typeof (string));
        dt.Columns.Add ("Period", typeof (string));
    }
    DataRow NewRow = dt.NewRow ();
    NewRow [0] = TextBox1.Text;
    NewRow [1] = TextBox2.Text;
    dt.Rows.Add (NewRow);
    GridView1.DataSource = dt;
    GridViewl.DataBind ();
}
----------------------------------------

 protected void Button1_Click (object sender, EventArgs e) {
    DataTable dt = new DataTable();
    if (!dt.Columns.Contains("PayScale")) {
        dt.Columns.Add("PayScale", typeof(string));
        dt.Columns.Add("IncrementAmt", typeof(string));
        dt.Columns.Add("Period", typeof(string));
    }
    dt.Rows.Add(new string[]{TextBox1.Text, TextBox2.Text});
    GridView1.DataSource = dt;
    GridView1.DataBind();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
838
2
Gpt3D_Clone838_2.cs 1 14
Gpt3D_Clone838_2.cs 15 27
----------------------------------------

protected void Button1_Click (object sender, EventArgs e) {
    DataTable dt = new DataTable ();
    if (dt.Columns.Count == 0) {
        dt.Columns.Add ("PayScale", typeof (string));
        dt.Columns.Add ("IncrementAmt", typeof (string));
        dt.Columns.Add ("Period", typeof (string));
    }
    DataRow NewRow = dt.NewRow ();
    NewRow [0] = TextBox1.Text;
    NewRow [1] = TextBox2.Text;
    dt.Rows.Add (NewRow);
    GridView1.DataSource = dt;
    GridViewl.DataBind ();
}
----------------------------------------

  protected void Button1_Click (object sender, EventArgs e) {
    DataTable dt = new DataTable ();
    if (dt.Columns.Count == 0) {
        dt.Columns.Add ("PayScale", typeof (string));
        dt.Columns.Add ("IncrementAmt", typeof (string));
        dt.Columns.Add ("Period", typeof (string));
    }
    dt.Rows.Add (new object [] { TextBox1.Text, TextBox2.Text });
    GridView1.DataSource = dt;
    GridView1.DataBind ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
838
3
Gpt3D_Clone838_3.cs 1 14
Gpt3D_Clone838_3.cs 15 27
----------------------------------------

protected void Button1_Click (object sender, EventArgs e) {
    DataTable dt = new DataTable ();
    if (dt.Columns.Count == 0) {
        dt.Columns.Add ("PayScale", typeof (string));
        dt.Columns.Add ("IncrementAmt", typeof (string));
        dt.Columns.Add ("Period", typeof (string));
    }
    DataRow NewRow = dt.NewRow ();
    NewRow [0] = TextBox1.Text;
    NewRow [1] = TextBox2.Text;
    dt.Rows.Add (NewRow);
    GridView1.DataSource = dt;
    GridViewl.DataBind ();
}
----------------------------------------

  protected void Button1_Click (object sender, EventArgs e) {
    DataTable dt = new DataTable ();
    if (dt.Columns.Count == 0) {
        dt.Columns.Add ("PayScale", typeof (string));
        dt.Columns.Add ("IncrementAmt", typeof (string));
        dt.Columns.Add ("Period", typeof (string));
    }
    dt.Rows.Add (TextBox1.Text, TextBox2.Text);
    GridView1.DataSource = dt;
    GridView1.DataBind ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
838
4
Gpt3D_Clone838_4.cs 1 14
Gpt3D_Clone838_4.cs 15 27
----------------------------------------

protected void Button1_Click (object sender, EventArgs e) {
    DataTable dt = new DataTable ();
    if (dt.Columns.Count == 0) {
        dt.Columns.Add ("PayScale", typeof (string));
        dt.Columns.Add ("IncrementAmt", typeof (string));
        dt.Columns.Add ("Period", typeof (string));
    }
    DataRow NewRow = dt.NewRow ();
    NewRow [0] = TextBox1.Text;
    NewRow [1] = TextBox2.Text;
    dt.Rows.Add (NewRow);
    GridView1.DataSource = dt;
    GridViewl.DataBind ();
}
----------------------------------------

  protected void Button1_Click (object sender, EventArgs e) {
    DataTable dt = new DataTable ();
    if (!dt.Columns.Contains("PayScale")) {
        dt.Columns.Add ("PayScale", typeof (string));
        dt.Columns.Add ("IncrementAmt", typeof (string));
        dt.Columns.Add ("Period", typeof (string));
    }
    dt.Rows.Add(new string[] { TextBox1.Text, TextBox2.Text});
    GridView1.DataSource = dt;
    GridView1.DataBind();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
83
0
Gpt3D_Clone83_0.cs 1 20
Gpt3D_Clone83_0.cs 21 42
----------------------------------------

private void OnSizeChanged (object sender, EventArgs e) {
    _offsetX = 0;
    _offsetY = 0;
    while (HitTest (Width / 2, _offsetY).HitArea != HitArea.PrevMonthDate && HitTest (Width / 2, _offsetY).HitArea != HitArea.Date) {
        _offsetY ++;
    }
    while (HitTest (_offsetX, Height / 2).HitArea != HitArea.Date) {
        _offsetX ++;
    }
    _dayBoxWidth = 0;
    DateTime dt1 = HitTest (Width / 2, _offsetY).Time;
    while (HitTest (Width / 2, _offsetY + _dayBoxHeight).Time == dt1) {
        _dayBoxHeight ++;
    }
    _dayBoxWidth = 0;
    DateTime dt2 = HitTest (_offsetX, Height / 2).Time;
    while (HitTest (_offsetX + _dayBoxWidth, Height / 2).Time == dt2) {
        _dayBoxWidth ++;
    }
}
----------------------------------------

 private void OnSizeChanged (object sender, EventArgs e){
    _offsetX = 0;
    _offsetY = 0;
    while (checkHitArea(Width / 2, _offsetY) != HitArea.PrevMonthDate || checkHitArea(Width / 2, _offsetY) != HitArea.Date) {
        _offsetY++;
    }
    while (checkHitArea(_offsetX, Height / 2) != HitArea.Date) {
        _offsetX++;
    }
    _dayBoxHeight = 0;
    DateTime startPoint = checkHitArea(Width / 2, _offsetY);
    while (checkHitArea(Width / 2, _offsetY + _dayBoxHeight) == startPoint) {
        _dayBoxHeight++;
    }
    _dayBoxWidth = 0;
    DateTime endPoint = checkHitArea(_offsetX, Height / 2);
    while (checkHitArea(_offsetX + _dayBoxWidth, Height / 2) == endPoint) {
        _dayBoxWidth++;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
841
0
Gpt3D_Clone841_0.cs 1 12
Gpt3D_Clone841_0.cs 13 30
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    if (textBox1.Text.Length != 0) {
        var numePrenume = textBox1.Text.Trim ().Split (' ');
        if (numePrenume.Count () > 1) {
            var nume = numePrenume [0];
            var prenume = numePrenume [1];
            var connString = @"Data Source=C:\Users\Andrei\Documents\Visual Studio 2010\Projects\Stellwag\Stellwag\Angajati.sdf";
            using (var conn = new SqlCeConnection (connString))
            {
            }}
    }
}
----------------------------------------

  private void button1_Click (object sender, EventArgs e) {
    if (textBox1.Text !=string.Empty)
    {
        var pr = textBox1.Text.Trim().Split(' ');
        if (pr.Length > 1)
        {
            var firstName = pr[0];
            var lastName = pr[1];
            string connectionString = @"Data Source=C:\Users\Andrei\Documents\Visual Studio 2010\Projects\Stellwag\Stellwag\Angajati.sdf";
            using (SqlCeConnection con = new SqlCeConnection(connectionString))
            {
 
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
841
1
Gpt3D_Clone841_1.cs 1 12
Gpt3D_Clone841_1.cs 13 30
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    if (textBox1.Text.Length != 0) {
        var numePrenume = textBox1.Text.Trim ().Split (' ');
        if (numePrenume.Count () > 1) {
            var nume = numePrenume [0];
            var prenume = numePrenume [1];
            var connString = @"Data Source=C:\Users\Andrei\Documents\Visual Studio 2010\Projects\Stellwag\Stellwag\Angajati.sdf";
            using (var conn = new SqlCeConnection (connString))
            {
            }}
    }
}
----------------------------------------

 private void button1_Click (object sender, EventArgs e) {
    if (textBox1.Text.Length > 0)
    {
        var nameAndSurname = textBox1.Text.Trim().Split(' ');
        if (nameAndSurname.Length > 1)
        {
            var firstName = nameAndSurname[0];
            var surname = nameAndSurname[1];
            string connectionString = @"Data Source=C:\Users\Andrei\Documents\Visual Studio 2010\Projects\Stellwag\Stellwag\Angajati.sdf";
            using (SqlCeConnection connect = new SqlCeConnection(connectionString))
            {
       
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
841
2
Gpt3D_Clone841_2.cs 1 12
Gpt3D_Clone841_2.cs 13 30
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    if (textBox1.Text.Length != 0) {
        var numePrenume = textBox1.Text.Trim ().Split (' ');
        if (numePrenume.Count () > 1) {
            var nume = numePrenume [0];
            var prenume = numePrenume [1];
            var connString = @"Data Source=C:\Users\Andrei\Documents\Visual Studio 2010\Projects\Stellwag\Stellwag\Angajati.sdf";
            using (var conn = new SqlCeConnection (connString))
            {
            }}
    }
}
----------------------------------------

 private void button1_Click (object sender, EventArgs e) {
    if (textBox1.Text != "")
    {
        var divided = textBox1.Text.Trim().Split(' ');
        if (divided.Length > 1)
        {
            var first = divided[0];
            var last  = divided[1];
            string connectionString = @"Data Source=C:\Users\Andrei\Documents\Visual Studio 2010\Projects\Stellwag\Stellwag\Angajati.sdf";
            using (SqlCeConnection connection = new SqlCeConnection(connectionString))
            {
   
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
841
3
Gpt3D_Clone841_3.cs 1 12
Gpt3D_Clone841_3.cs 13 30
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    if (textBox1.Text.Length != 0) {
        var numePrenume = textBox1.Text.Trim ().Split (' ');
        if (numePrenume.Count () > 1) {
            var nume = numePrenume [0];
            var prenume = numePrenume [1];
            var connString = @"Data Source=C:\Users\Andrei\Documents\Visual Studio 2010\Projects\Stellwag\Stellwag\Angajati.sdf";
            using (var conn = new SqlCeConnection (connString))
            {
            }}
    }
}
----------------------------------------

 private void button1_Click (object sender, EventArgs e) {
    if (textBox1.Text != string.Empty)
    {
        var strSplit = textBox1.Text.Trim().Split(' ');
        if (strSplit.Length > 1)
        {
            var firstName = strSplit[0];
            var lastName = strSplit[1];
            string connectionString = @"Data Source=C:\Users\Andrei\Documents\Visual Studio 2010\Projects\Stellwag\Stellwag\Angajati.sdf";
            using (SqlCeConnection connect = new SqlCeConnection(connectionString))
            {
       
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
841
4
Gpt3D_Clone841_4.cs 1 12
Gpt3D_Clone841_4.cs 13 29
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    if (textBox1.Text.Length != 0) {
        var numePrenume = textBox1.Text.Trim ().Split (' ');
        if (numePrenume.Count () > 1) {
            var nume = numePrenume [0];
            var prenume = numePrenume [1];
            var connString = @"Data Source=C:\Users\Andrei\Documents\Visual Studio 2010\Projects\Stellwag\Stellwag\Angajati.sdf";
            using (var conn = new SqlCeConnection (connString))
            {
            }}
    }
}
----------------------------------------

 private void button1_Click (object sender, EventArgs e) {
    if (textBox1.Text.Length != 0)
    {
        var parts = textBox1.Text.Trim().Split(' ');
        if (parts.Length > 1)
        {
            var firstName = parts[0];
            var lastName = parts[1];
            string connectionString = @"Data Source=C:\Users\Andrei\Documents\Visual Studio 2010\Projects\Stellwag\Stellwag\Angajati.sdf";
            using (SqlCeConnection con = new SqlCeConnection(connectionString))
            {       
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
841
5
Gpt3D_Clone841_5.cs 1 12
Gpt3D_Clone841_5.cs 13 30
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    if (textBox1.Text.Length != 0) {
        var numePrenume = textBox1.Text.Trim ().Split (' ');
        if (numePrenume.Count () > 1) {
            var nume = numePrenume [0];
            var prenume = numePrenume [1];
            var connString = @"Data Source=C:\Users\Andrei\Documents\Visual Studio 2010\Projects\Stellwag\Stellwag\Angajati.sdf";
            using (var conn = new SqlCeConnection (connString))
            {
            }}
    }
}
----------------------------------------

 private void button1_Click (object sender, EventArgs e) {
    if (textBox1.Text.Length > 0)
    {
        var strSplit = textBox1.Text.Trim().Split(' ');
        if (strSplit.Count() > 1)
        {
            var fn = strSplit[0];
            var ln = strSplit[1];
            string connectionString = @"Data Source=C:\Users\Andrei\Documents\Visual Studio 2010\Projects\Stellwag\Stellwag\Angajati.sdf";
            using (SqlCeConnection connect = new SqlCeConnection(connectionString))
            {
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
841
6
Gpt3D_Clone841_6.cs 1 12
Gpt3D_Clone841_6.cs 13 30
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    if (textBox1.Text.Length != 0) {
        var numePrenume = textBox1.Text.Trim ().Split (' ');
        if (numePrenume.Count () > 1) {
            var nume = numePrenume [0];
            var prenume = numePrenume [1];
            var connString = @"Data Source=C:\Users\Andrei\Documents\Visual Studio 2010\Projects\Stellwag\Stellwag\Angajati.sdf";
            using (var conn = new SqlCeConnection (connString))
            {
            }}
    }
}
----------------------------------------

  private void button1_Click (object sender, EventArgs e) {
    if (textBox1.TextLength != 0)
    {
        var firstNameAndLastName = textBox1.Text.Trim().Split(' ');
        if (firstNameAndLastName.Length > 1)
        {
            var firstName = firstNameAndLastName[0];
            var lastName = firstNameAndLastName[1];
            string connectionString = @"Data Source=C:\Users\Andrei\Documents\Visual Studio 2010\Projects\Stellwag\Stellwag\Angajati.sdf";
            using (SqlCeConnection conn = new SqlCeConnection(connectionString))
            {
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
842
2
Gpt3D_Clone842_2.cs 1 23
Gpt3D_Clone842_2.cs 24 45
----------------------------------------

static void LoadDefaultValues () {
    var settingsDict = new NSDictionary (NSBundle.MainBundle.PathForResource ("Settings.bundle/Root.plist", null));
    if (settingsDict != null) {
        var prefSpecifierArray = settingsDict [(NSString) "PreferenceSpecifiers"] as NSArray;
        if (prefSpecifierArray != null) {
            foreach (var prefItem in NSArray.FromArray < NSDictionary > (prefSpecifierArray)) {
                var key = prefItem [(NSString) "Key"] as NSString;
                if (key == null)
                    continue;
                var value = prefItem [(NSString) "DefaultValue"];
                if (value == null)
                    continue;
                switch (key.ToString ()) {
                    case API_PATH_KEY :
                        ApiPath = value.ToString ();
                        break;
                    default :
                        break;
                }
            }
        }
    }
}
----------------------------------------

 static void LoadDefaultValues() 
{ 
    NSDictionary settingsDict = new NSDictionary(NSBundle.MainBundle.PathForResource("Settings.bundle/Root.plist", null)); 
    var prefSpecifierArray = settingsDict[(NSString)"PreferenceSpecifiers"] as NSArray; 
    if (prefSpecifierArray != null) 
    { 
        foreach (NSDictionary prefItem in NSArray.FromArray<NSDictionary>(prefSpecifierArray)) 
        { 
            NSString key = prefItem[(NSString)"Key"] as NSString; 
            var value = prefItem[(NSString)"DefaultValue"]; 
            switch (key.ToString()) 
            { 
            case API_PATH_KEY: 
                ApiPath = (String)value; 
                 break; 
            } 
        } 
    } 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
843
0
Gpt3D_Clone843_0.cs 1 15
Gpt3D_Clone843_0.cs 16 31
----------------------------------------

private void Timer1_Tick (Object sender, EventArgs e) {
    int cpuPercent = getCPUCounter ();
    if (cpuPercent >= 90) {
        totalHits = totalHits + 1;
        if (totalHits == 60) {
            Interaction.MsgBox ("ALERT 90% usage for 1 minute");
            totalHits = 0;
        }
    } else {
        totalHits = 0;
    }
    Label1.Text = cpuPercent + " % CPU";
    Label2.Text = getRAMCounter () + " RAM Free";
    Label3.Text = totalHits + " seconds over 20% usage";
}
----------------------------------------

  private void Timer1_Tick (Object sender, EventArgs e) {
    int cpuPercent = getCPUCounter ();
    if (cpuPercent >= 90 && totalHits == 60) {
        Interaction.MsgBox ("ALERT 90% usage for 1 minute");
        totalHits = 0;
    } else if (cpuPercent >= 90) {
        totalHits += 1;
    } else {
        totalHits = 0;
    }
    Label1.Text = cpuPercent + " % CPU";
    Label2.Text = getRAMCounter () + " RAM Free";
    Label3.Text = totalHits + " seconds over 20% usage";
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
844
2
Gpt3D_Clone844_2.cs 1 14
Gpt3D_Clone844_2.cs 15 32
----------------------------------------

public void FiscalYearRange () {
    TimeCalendar fiscalYearCalendar = new TimeCalendar (new TimeCalendarConfig {YearBaseMonth = YearMonth.April, YearType = YearType.FiscalYear});
    TimeRange timeRange = new TimeRange (new DateTime (2007, 10, 1), new DateTime (2012, 2, 25));
    Console.WriteLine ("Time range: " + timeRange);
    Console.WriteLine ();
    Console.WriteLine ("Start Quarter: " + new Quarter (timeRange.Start, fiscalYearCalendar));
    Console.WriteLine ("End Quarter: " + new Quarter (timeRange.End, fiscalYearCalendar));
    Console.WriteLine ();
    Year year = new Year (timeRange.Start, fiscalYearCalendar);
    while (year.Start < timeRange.End) {
        Console.WriteLine ("Fiscal Year: " + year);
        year = year.GetNextYear ();
    }
}
----------------------------------------

 public void FiscalYearRange() 
{ 
    TimeCalendar fiscalYearCalendar = new TimeCalendar(new TimeCalendarConfig { YearBaseMonth = YearMonth.January, YearType = YearType.FiscalYear }); 
    TimeRange timeRange = new TimeRange(new DateTime(2007, 10, 1), new DateTime(2012, 2, 25)); 
    Console.WriteLine("Time range: " + timeRange); 
    Console.WriteLine(); 
    DateTime startDate = timeRange.Start; 
    while (startDate.Year < timeRange.End.Year) 
    { 
        Year year = new Year(startDate.Year, fiscalYearCalendar); 
        Console.WriteLine("Fiscal Year: " + year); 
        startDate = startDate.AddYears(1); 
    } 
    Console.WriteLine("End Quarter: " + new Quarter(timeRange.End, fiscalYearCalendar)); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
844
3
Gpt3D_Clone844_3.cs 1 14
Gpt3D_Clone844_3.cs 15 32
----------------------------------------

public void FiscalYearRange () {
    TimeCalendar fiscalYearCalendar = new TimeCalendar (new TimeCalendarConfig {YearBaseMonth = YearMonth.April, YearType = YearType.FiscalYear});
    TimeRange timeRange = new TimeRange (new DateTime (2007, 10, 1), new DateTime (2012, 2, 25));
    Console.WriteLine ("Time range: " + timeRange);
    Console.WriteLine ();
    Console.WriteLine ("Start Quarter: " + new Quarter (timeRange.Start, fiscalYearCalendar));
    Console.WriteLine ("End Quarter: " + new Quarter (timeRange.End, fiscalYearCalendar));
    Console.WriteLine ();
    Year year = new Year (timeRange.Start, fiscalYearCalendar);
    while (year.Start < timeRange.End) {
        Console.WriteLine ("Fiscal Year: " + year);
        year = year.GetNextYear ();
    }
}
----------------------------------------

 public void FiscalYearRange() 
{ 
    TimeCalendar fiscalYearCalendar = new TimeCalendar(new TimeCalendarConfig { YearBaseMonth = YearMonth.May, YearType = YearType.FiscalYear }); 
    TimeRange timeRange = new TimeRange(new DateTime(2007, 10, 1), new DateTime(2012, 2, 25)); 
    Console.WriteLine("Time range: " + timeRange); 
    Console.WriteLine(); 
    DateTime startDate = timeRange.Start; 
    DateTime endDate = timeRange.End; 
    while (startDate < endDate) 
    { 
        Year year = new Year(startDate.Year, fiscalYearCalendar); 
        Console.WriteLine("Fiscal Year: " + year); 
        startDate = startDate.AddYears(1); 
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
847
0
Gpt3D_Clone847_0.cs 1 22
Gpt3D_Clone847_0.cs 23 55
----------------------------------------

private static IEnumerable < int > Approximations (IEnumerable < int > values, int target) {
    int sum = 0;
    bool first = true;
    foreach (var item in values) {
        if (sum + item < target || first) {
            first = false;
            sum += item;
        } else {
            if (sum + item - target < target - sum) {
                yield return sum + item;
                sum = 0;
                first = true;
            } else {
                yield return sum;
                sum = item;
            }
        }
    }
    if (first)
        yield break;
    yield return sum;
}
----------------------------------------

  private static IEnumerable<int> Approximations(IEnumerable<int> values, int target) 
{
    int sum = 0;
    bool first = false;
    foreach (var item in values)
    {
        if (sum + item > target || first)
        {
            first = false;
            if (sum + item - target < target - sum)
            {
                yield return sum + item;
                sum = 0;
                first = true;
            }
            else
            {
                yield return sum;
                sum = item;
            }
        }
        else
        {
            first = false;
            sum += item;
        }
    }
    if(!first)
        yield return sum;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
847
1
Gpt3D_Clone847_1.cs 1 22
Gpt3D_Clone847_1.cs 23 54
----------------------------------------

private static IEnumerable < int > Approximations (IEnumerable < int > values, int target) {
    int sum = 0;
    bool first = true;
    foreach (var item in values) {
        if (sum + item < target || first) {
            first = false;
            sum += item;
        } else {
            if (sum + item - target < target - sum) {
                yield return sum + item;
                sum = 0;
                first = true;
            } else {
                yield return sum;
                sum = item;
            }
        }
    }
    if (first)
        yield break;
    yield return sum;
}
----------------------------------------

  private static IEnumerable<int> Approximations(IEnumerable<int> values, int target)
{
    int sum = 0;
    bool first = true;
    foreach (var item in values)
    {
        if (sum + item > target && !first)
        {
            if (sum + item - target < target - sum)
            {
                yield return sum + item;
                sum = 0;
                first = true;
            }
            else
            {
                yield return sum;
                sum = item;
            }
        }
        else
        {
            first = false;
            sum += item;
        }
    }
    if(!first)
        yield return sum;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
847
2
Gpt3D_Clone847_2.cs 1 22
Gpt3D_Clone847_2.cs 23 54
----------------------------------------

private static IEnumerable < int > Approximations (IEnumerable < int > values, int target) {
    int sum = 0;
    bool first = true;
    foreach (var item in values) {
        if (sum + item < target || first) {
            first = false;
            sum += item;
        } else {
            if (sum + item - target < target - sum) {
                yield return sum + item;
                sum = 0;
                first = true;
            } else {
                yield return sum;
                sum = item;
            }
        }
    }
    if (first)
        yield break;
    yield return sum;
}
----------------------------------------

  private static IEnumerable<int> Approximations(IEnumerable<int> values, int target)
{
    int sum = 0;
    bool first = true;
    foreach (var item in values)
    {
        if (sum + item > target)
        {
     
            if (sum + item - target < target - sum)
            {
                yield return sum + item;
                sum = 0;
                first = true;
            }
            else
            {
                yield return sum;
                sum = item;
            }
        }
        else
        {
            first = false;
            sum += item;
        }
    }
    if(!first)
        yield return sum;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
847
4
Gpt3D_Clone847_4.cs 1 22
Gpt3D_Clone847_4.cs 23 45
----------------------------------------

private static IEnumerable < int > Approximations (IEnumerable < int > values, int target) {
    int sum = 0;
    bool first = true;
    foreach (var item in values) {
        if (sum + item < target || first) {
            first = false;
            sum += item;
        } else {
            if (sum + item - target < target - sum) {
                yield return sum + item;
                sum = 0;
                first = true;
            } else {
                yield return sum;
                sum = item;
            }
        }
    }
    if (first)
        yield break;
    yield return sum;
}
----------------------------------------

  private static IEnumerable<int> Approximations(IEnumerable<int> values, int target)
{
    int sum = 0;
    bool first = true;
    foreach (var item in values)
    {
        if (sum + item < target || first)
        {
            first = false;
            sum += item;
        }
        else
        {
            yield return (sum + item - target < target - sum) ? sum + item : sum;
            sum = item;
        }
    }
   
    if (!first) 
        yield return sum;    
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
847
5
Gpt3D_Clone847_5.cs 1 22
Gpt3D_Clone847_5.cs 23 45
----------------------------------------

private static IEnumerable < int > Approximations (IEnumerable < int > values, int target) {
    int sum = 0;
    bool first = true;
    foreach (var item in values) {
        if (sum + item < target || first) {
            first = false;
            sum += item;
        } else {
            if (sum + item - target < target - sum) {
                yield return sum + item;
                sum = 0;
                first = true;
            } else {
                yield return sum;
                sum = item;
            }
        }
    }
    if (first)
        yield break;
    yield return sum;
}
----------------------------------------

 private static IEnumerable<int> Approximations(IEnumerable<int> values, int target)
{
    int sum = 0;
    bool first = true;
    foreach (var item in values)
    {
        if (sum + item < target || first)
        {
            first = false;
            sum += item;
        }
        else
        {
            yield return (sum + item - target < target - sum) ? sum + item : sum;
            sum = item;
        }
    }
    if (!first)
        yield return sum; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
849
0
Gpt3D_Clone849_0.cs 1 11
Gpt3D_Clone849_0.cs 12 33
----------------------------------------

public void ReadXml (XmlReader reader) {
    if (! reader.HasAttributes)
        throw new FormatException ("expected a type attribute!");
    string type = reader.GetAttribute ("type");
    reader.Read ();
    if (type == "null")
        return;
    XmlSerializer serializer = new XmlSerializer (Type.GetType (type));
    this.Value = (T) serializer.Deserialize (reader);
    reader.ReadEndElement ();
}
----------------------------------------

 public void ReadXml(XmlReader reader)
{
    string type = "";
    if (!reader.HasAttributes)
        throw new FormatException("expected a type attribute!");
    else
    {
        type = reader.GetAttribute("type");
        reader.Read();
    }
    if (type == "null")
        return;
    else
    {
        Type t = Type.GetType(type);
        XmlSerializer serializer = new XmlSerializer(t);
        this.Value = (T)serializer.Deserialize(reader);
        reader.ReadEndElement();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
849
1
Gpt3D_Clone849_1.cs 1 11
Gpt3D_Clone849_1.cs 12 34
----------------------------------------

public void ReadXml (XmlReader reader) {
    if (! reader.HasAttributes)
        throw new FormatException ("expected a type attribute!");
    string type = reader.GetAttribute ("type");
    reader.Read ();
    if (type == "null")
        return;
    XmlSerializer serializer = new XmlSerializer (Type.GetType (type));
    this.Value = (T) serializer.Deserialize (reader);
    reader.ReadEndElement ();
}
----------------------------------------

 public void ReadXml (XmlReader reader) 
{
    if (reader.HasAttributes)
    {
        string type = reader.GetAttribute("type");
        reader.Read();
        if (type == "null")
            return;
        else
        {
            Type refType = Type.GetType(type);
            XmlSerializer serializer = new XmlSerializer(refType);
            this.Value = (T)serializer.Deserialize(reader);
            reader.ReadEndElement();
        }
    }
    else
    {
        throw new FormatException("expected a type attribute!");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
849
2
Gpt3D_Clone849_2.cs 1 11
Gpt3D_Clone849_2.cs 12 32
----------------------------------------

public void ReadXml (XmlReader reader) {
    if (! reader.HasAttributes)
        throw new FormatException ("expected a type attribute!");
    string type = reader.GetAttribute ("type");
    reader.Read ();
    if (type == "null")
        return;
    XmlSerializer serializer = new XmlSerializer (Type.GetType (type));
    this.Value = (T) serializer.Deserialize (reader);
    reader.ReadEndElement ();
}
----------------------------------------

 public void ReadXml (XmlReader reader)
{
    if (!reader.HasAttributes)
        throw new FormatException("expected a type attribute!");
    else
    {
        string type = reader.GetAttribute("type");
        reader.Read();
        if (type == "null")
            return;
        else
        {
            Type t = Type.GetType(type);
            XmlSerializer serializer = new XmlSerializer(t);
            this.Value = (T)serializer.Deserialize(reader);
            reader.ReadEndElement();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
849
3
Gpt3D_Clone849_3.cs 1 11
Gpt3D_Clone849_3.cs 12 29
----------------------------------------

public void ReadXml (XmlReader reader) {
    if (! reader.HasAttributes)
        throw new FormatException ("expected a type attribute!");
    string type = reader.GetAttribute ("type");
    reader.Read ();
    if (type == "null")
        return;
    XmlSerializer serializer = new XmlSerializer (Type.GetType (type));
    this.Value = (T) serializer.Deserialize (reader);
    reader.ReadEndElement ();
}
----------------------------------------

 public void ReadXml (XmlReader reader)
{
    if (!reader.HasAttributes)
        throw new FormatException("expected a type attribute!");
    string type = reader.GetAttribute("type");
    reader.Read();
    if (type == "null")
        return;
    else
    {
        Type refType = Type.GetType(type);
        XmlSerializer serializer = new XmlSerializer(refType);
        this.Value = (T)serializer.Deserialize(reader);
    }
    reader.ReadEndElement();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
849
5
Gpt3D_Clone849_5.cs 1 11
Gpt3D_Clone849_5.cs 12 28
----------------------------------------

public void ReadXml (XmlReader reader) {
    if (! reader.HasAttributes)
        throw new FormatException ("expected a type attribute!");
    string type = reader.GetAttribute ("type");
    reader.Read ();
    if (type == "null")
        return;
    XmlSerializer serializer = new XmlSerializer (Type.GetType (type));
    this.Value = (T) serializer.Deserialize (reader);
    reader.ReadEndElement ();
}
----------------------------------------

 public void ReadXml (XmlReader reader)
{
    if (!reader.HasAttributes)
        throw new FormatException ("expected a type attribute!");
    else {
        string type = reader.GetAttribute ("type");
        reader.Read ();
        if (type != "null") {
            Type refType = Type.GetType (type);
            XmlSerializer serializer = new XmlSerializer (refType);
            this.Value = (T) serializer.Deserialize (reader);
            reader.ReadEndElement ();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
849
7
Gpt3D_Clone849_7.cs 1 11
Gpt3D_Clone849_7.cs 12 27
----------------------------------------

public void ReadXml (XmlReader reader) {
    if (! reader.HasAttributes)
        throw new FormatException ("expected a type attribute!");
    string type = reader.GetAttribute ("type");
    reader.Read ();
    if (type == "null")
        return;
    XmlSerializer serializer = new XmlSerializer (Type.GetType (type));
    this.Value = (T) serializer.Deserialize (reader);
    reader.ReadEndElement ();
}
----------------------------------------

 public void ReadXml (XmlReader reader) 
    {
    if (!reader.HasAttributes)
        throw new FormatException("expected a type attribute!");
    string type = reader.GetAttribute("type");
    reader.Read();
    if (type != "null")
    {
        Type t = Type.GetType(type);
        XmlSerializer serializer = new XmlSerializer(t);
        this.Value = (T)serializer.Deserialize(reader);
        reader.ReadEndElement();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
853
6
Gpt3D_Clone853_6.cs 1 11
Gpt3D_Clone853_6.cs 12 31
----------------------------------------

void Main () {
    Foo < int > fooObject = new Foo < int > ();
    fooObject.Items = new List < int > {1, 2, 3};
    object obj = (object) fooObject;
    PropertyInfo propInfo = obj.GetType ().GetProperty ("Items");
    object itemValue = propInfo.GetValue (obj, null);
    Console.WriteLine (itemValue);
    IList values = (IList) itemValue;
    foreach (var val in values)
        Console.WriteLine (val);
}
----------------------------------------

  void Main () {
    Foo < int > fooObject = new Foo < int > ();
    T[] myArray = new T[] {1, 2, 3};
    object obj = (object) fooObject;
    Type type = obj.GetType ();
    PropertyInfo [] propInfo = type.GetProperties();
    foreach( PropertyInfo item in propInfo )
    {
        if (item.Name == "Items")
        {
            item.SetValue(obj, myArray, null);
        }
    }
    Console.WriteLine (itemValue);
    IList values = (IList) itemValue;
    foreach (var val in values)
        Console.WriteLine (val);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
853
8
Gpt3D_Clone853_8.cs 1 11
Gpt3D_Clone853_8.cs 12 24
----------------------------------------

void Main () {
    Foo < int > fooObject = new Foo < int > ();
    fooObject.Items = new List < int > {1, 2, 3};
    object obj = (object) fooObject;
    PropertyInfo propInfo = obj.GetType ().GetProperty ("Items");
    object itemValue = propInfo.GetValue (obj, null);
    Console.WriteLine (itemValue);
    IList values = (IList) itemValue;
    foreach (var val in values)
        Console.WriteLine (val);
}
----------------------------------------

  void Main () {
    Foo < int > fooObject = new Foo < int > ();
    List<int> items = new List < int >{1, 2, 3};
    object obj = (object) fooObject;
    object itemValue = items;                   
    typeof(Foo<int>).GetProperty ("Items").SetValue(obj, itemValue, null);
    Console.WriteLine (itemValue);
    IList values = (IList) itemValue;
    foreach (var val in values)
        Console.WriteLine (val);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
857
0
Gpt3D_Clone857_0.cs 1 17
Gpt3D_Clone857_0.cs 18 36
----------------------------------------

public int PerformAction () {
    int state;
    if (SomeArbitraryCondition ()) {
        if (SomeArbitraryCondition ()) {
            state = 1;
        } else {
            state = 2;
        }
    } else {
        if (SomeArbitraryCondition ()) {
            state = 3;
        } else {
            state = 4;
        }
    }
    return state;
}
----------------------------------------

 int PerformAction () {
    int state;
    if (!SomeArbitraryCondition ()) {
        if (!SomeArbitraryCondition ()) {
            state = 4;
        } else {
            state = 3;
        }
    } else {
        if (!SomeArbitraryCondition ()) {
            state = 1;
        } else {
            state = 2;
        }
    }
    return state;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
859
0
Gpt3D_Clone859_0.cs 1 19
Gpt3D_Clone859_0.cs 20 43
----------------------------------------

public IEnumerable < T > DequeueAll () {
    while (! shutDown) {
        do
            {
                T item;
                lock (queue)
                {
                    if (queue.Count == 0) {
                        if (shutDown)
                            break;
                        Monitor.Wait (queue);
                        if (queue.Count == 0)
                            break;
                    }
                    item = queue.Dequeue ();
                } yield return item;
            } while (! shutDown);
    }
}
----------------------------------------

 public IEnumerable < T > DequeueAll () {
    bool done = false;
    while (! shutDown) {
        if (done)
            break;
        do {
            T item;
            lock (queue) {
                if (queue.Count == 0) {
                    done = true;
                    if (shutDown)
                        break;
                    Monitor.Wait (queue);
                    if (queue.Count == 0)
                        break;
                }
            }
            item = queue.Dequeue ();
            yield return item;
        } while (! done);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
859
1
Gpt3D_Clone859_1.cs 1 19
Gpt3D_Clone859_1.cs 20 44
----------------------------------------

public IEnumerable < T > DequeueAll () {
    while (! shutDown) {
        do
            {
                T item;
                lock (queue)
                {
                    if (queue.Count == 0) {
                        if (shutDown)
                            break;
                        Monitor.Wait (queue);
                        if (queue.Count == 0)
                            break;
                    }
                    item = queue.Dequeue ();
                } yield return item;
            } while (! shutDown);
    }
}
----------------------------------------

 public IEnumerable < T > DequeueAll () {
    while (! shutDown) {
        do {
            T item;
            lock (queue) {
                if (queue.Count == 0) {
                    if (shutDown)
                        break;
                    Monitor.Wait (queue);
                    if (queue.Count == 0)
                        break;
                }
            }
            item = queue.Dequeue ();
            yield return item;
            if ( queue.Count == 0 ) {
                if (shutDown)
                    break;
                Monitor.Wait (queue);
            }
        } while (! shutDown);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
859
2
Gpt3D_Clone859_2.cs 1 19
Gpt3D_Clone859_2.cs 20 44
----------------------------------------

public IEnumerable < T > DequeueAll () {
    while (! shutDown) {
        do
            {
                T item;
                lock (queue)
                {
                    if (queue.Count == 0) {
                        if (shutDown)
                            break;
                        Monitor.Wait (queue);
                        if (queue.Count == 0)
                            break;
                    }
                    item = queue.Dequeue ();
                } yield return item;
            } while (! shutDown);
    }
}
----------------------------------------

 public IEnumerable < T > DequeueAll () {
    while (! shutDown) {
        int count;
        lock (queue) {
            count = queue.Count;
            if (count == 0) {
                if (shutDown)
                    break;
                Monitor.Wait (queue);
                count = queue.Count;
                if (count == 0)
                    break;
            }
        }
        for (int i = 0; i < count; i++) {
            T item;
            lock (queue) {
                item = queue.Dequeue ();
            }
            yield return item;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
859
3
Gpt3D_Clone859_3.cs 1 19
Gpt3D_Clone859_3.cs 20 42
----------------------------------------

public IEnumerable < T > DequeueAll () {
    while (! shutDown) {
        do
            {
                T item;
                lock (queue)
                {
                    if (queue.Count == 0) {
                        if (shutDown)
                            break;
                        Monitor.Wait (queue);
                        if (queue.Count == 0)
                            break;
                    }
                    item = queue.Dequeue ();
                } yield return item;
            } while (! shutDown);
    }
}
----------------------------------------

 public IEnumerable < T > DequeueAll () {
    while (! shutDown) {
        T item;
        lock (queue) {
            if (queue.Count == 0) {
                if (shutDown)
                    break;
                Monitor.Wait (queue);
                if (queue.Count == 0)
                    break;
            }
        }
        item = queue.Dequeue ();
        yield return item;
        if ( queue.Count == 0 ) {
            if (shutDown)
                break;
            Monitor.Wait (queue);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
85
1
Gpt3D_Clone85_1.cs 1 11
Gpt3D_Clone85_1.cs 12 31
----------------------------------------

static void Main (string [] args) {
    string choice = "";
    displayMenu ();
    do
        {
            choice = getChoice ();
        } while (choice != "10");
    {
        Console.ReadLine ();
    }
}
----------------------------------------

	static void Main(string[] args)
{
    string choice;
    bool loop = true;
    displayMenu();
    do
    {
        choice = getChoice();
        if(choice == "10")
        {
            loop = false;
        }
    }
    while (loop);
    Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
85
2
Gpt3D_Clone85_2.cs 1 11
Gpt3D_Clone85_2.cs 12 32
----------------------------------------

static void Main (string [] args) {
    string choice = "";
    displayMenu ();
    do
        {
            choice = getChoice ();
        } while (choice != "10");
    {
        Console.ReadLine ();
    }
}
----------------------------------------

	static void Main(string[] args)
{
    string choice = "";
    bool canContinue = true;
    do
    {
        displayMenu();
        choice = getChoice();
        if (choice == "10")
        {
            canContinue = false;
        }
    }
    while (canContinue);
    Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
85
6
Gpt3D_Clone85_6.cs 1 11
Gpt3D_Clone85_6.cs 12 26
----------------------------------------

static void Main (string [] args) {
    string choice = "";
    displayMenu ();
    do
        {
            choice = getChoice ();
        } while (choice != "10");
    {
        Console.ReadLine ();
    }
}
----------------------------------------

	static void Main(string[] args)
{
    string choice = "";
    do
    {
        displayMenu();
        choice = getChoice();
    } 
    while (choice != "10");
    Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
861
0
Gpt3D_Clone861_0.cs 1 11
Gpt3D_Clone861_0.cs 12 30
----------------------------------------

protected void Unnamed1_Click (object sender, EventArgs e) {
    foreach (GridViewRow row in GridView1.Rows) {
        if (row.RowType == DataControlRowType.DataRow) {
            CheckBox cb = (CheckBox) row.FindControl ("ProductSelector");
            if (cb != null && cb.Checked) {
                int productID = Convert.ToInt32 (GridView1.DataKeys [row.RowIndex].Value);
                Response.Write (string.Format ("This would have deleted ProductID {0}<br />", productID));
            }
        }
    }
}
----------------------------------------

 protected void Unnamed1_Click (object sender, EventArgs e) {
     int counter = 0;
        while (counter < GridView1.Rows.Count)
        {
            GridViewRow row = GridView1.Rows[counter];
            if (row.RowType == DataControlRowType.DataRow)
            {
                CheckBox cb = (CheckBox)row.FindControl("ProductSelector");
                if (cb != null && cb.Checked)
                {
                    int productID = Convert.ToInt32(GridView1.DataKeys[row.RowIndex].Value);
                    Response.Write(string.Format("This would have deleted ProductID {0}<br />", productID));
                }
            }
            counter = counter + 1;
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
861
1
Gpt3D_Clone861_1.cs 1 11
Gpt3D_Clone861_1.cs 12 29
----------------------------------------

protected void Unnamed1_Click (object sender, EventArgs e) {
    foreach (GridViewRow row in GridView1.Rows) {
        if (row.RowType == DataControlRowType.DataRow) {
            CheckBox cb = (CheckBox) row.FindControl ("ProductSelector");
            if (cb != null && cb.Checked) {
                int productID = Convert.ToInt32 (GridView1.DataKeys [row.RowIndex].Value);
                Response.Write (string.Format ("This would have deleted ProductID {0}<br />", productID));
            }
        }
    }
}
----------------------------------------

 protected void Unnamed1_Click (object sender, EventArgs e) {
     int rowIndex = 0;
        foreach (GridViewRow row in GridView1.Rows)
        {
            if (row.RowType == DataControlRowType.DataRow)
            {
                CheckBox cb = (CheckBox)row.FindControl("ProductSelector");
                if (cb != null && cb.Checked)
                {
                    int productID = Convert.ToInt32(GridView1.DataKeys[rowIndex].Value);
                    Response.Write(string.Format("This would have deleted ProductID {0}<br />", productID));
                }
            rowIndex++;
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
861
2
Gpt3D_Clone861_2.cs 1 11
Gpt3D_Clone861_2.cs 12 29
----------------------------------------

protected void Unnamed1_Click (object sender, EventArgs e) {
    foreach (GridViewRow row in GridView1.Rows) {
        if (row.RowType == DataControlRowType.DataRow) {
            CheckBox cb = (CheckBox) row.FindControl ("ProductSelector");
            if (cb != null && cb.Checked) {
                int productID = Convert.ToInt32 (GridView1.DataKeys [row.RowIndex].Value);
                Response.Write (string.Format ("This would have deleted ProductID {0}<br />", productID));
            }
        }
    }
}
----------------------------------------

 protected void Unnamed1_Click (object sender, EventArgs e) {
     int rowNum = 0;
        foreach (GridViewRow currentRow in GridView1.Rows)
        {
            if (currentRow.RowType == DataControlRowType.DataRow)
            {
                CheckBox cb = (CheckBox)currentRow.FindControl("ProductSelector");
                if (cb != null && cb.Checked)
                {
                    int productID = Convert.ToInt32(GridView1.DataKeys[rowNum].Value);
                    Response.Write(string.Format("This would have deleted ProductID {0}<br />", productID));
                }
            rowNum++;
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
861
3
Gpt3D_Clone861_3.cs 1 11
Gpt3D_Clone861_3.cs 12 29
----------------------------------------

protected void Unnamed1_Click (object sender, EventArgs e) {
    foreach (GridViewRow row in GridView1.Rows) {
        if (row.RowType == DataControlRowType.DataRow) {
            CheckBox cb = (CheckBox) row.FindControl ("ProductSelector");
            if (cb != null && cb.Checked) {
                int productID = Convert.ToInt32 (GridView1.DataKeys [row.RowIndex].Value);
                Response.Write (string.Format ("This would have deleted ProductID {0}<br />", productID));
            }
        }
    }
}
----------------------------------------

 protected void Unnamed1_Click (object sender, EventArgs e) {
     uint index = 0;
        foreach (GridViewRow row in GridView1.Rows)
        {
            if (row.RowType == DataControlRowType.DataRow)
            {
                CheckBox cb = (CheckBox)row.FindControl("ProductSelector");
                if (cb != null && cb.Checked)
                {
                    int productID = Convert.ToInt32(GridView1.DataKeys[index].Value);
                    Response.Write(string.Format("This would have deleted ProductID {0}<br />", productID));
                }
                index++;
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
862
5
Gpt3D_Clone862_5.cs 1 10
Gpt3D_Clone862_5.cs 11 23
----------------------------------------

public HashSet < TEntity > GetCollection < TEntity > () {
    var type = typeof (TEntity);
    if (type == typeof (Bike))
        return (HashSet < TEntity >) (object) Bikes;
    if (type == typeof (Car))
        return (HashSet < TEntity >) (object) Cars;
    if (type == typeof (Truck))
        return (HashSet < TEntity >) (object) Trucks;
    throw new InvalidOperationException ();
}
----------------------------------------

 public List<TEntity> GetCollection<TEntity>()
{
	var type = typeof(TEntity);
    if (type == typeof(Bike))
        return new List<TEntity>(Bikes.ToArray());
    if (type == typeof(Car))
        return new List<TEntity>(Cars.ToArray());
    if (type == typeof(Truck))
        return new List<TEntity>(Trucks.ToArray());
    throw new InvalidOperationException();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
862
6
Gpt3D_Clone862_6.cs 1 10
Gpt3D_Clone862_6.cs 11 23
----------------------------------------

public HashSet < TEntity > GetCollection < TEntity > () {
    var type = typeof (TEntity);
    if (type == typeof (Bike))
        return (HashSet < TEntity >) (object) Bikes;
    if (type == typeof (Car))
        return (HashSet < TEntity >) (object) Cars;
    if (type == typeof (Truck))
        return (HashSet < TEntity >) (object) Trucks;
    throw new InvalidOperationException ();
}
----------------------------------------

 public List<TEntity> GetCollection<TEntity>()
{
	var type = typeof(TEntity);
    if (type == typeof(Bike))
        return Bikes.Cast<TEntity>().ToList();
    if (type == typeof(Car))
        return Cars.Cast<TEntity>().ToList();
    if (type == typeof(Truck))
        return Trucks.Cast<TEntity>().ToList();
    throw new InvalidOperationException();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
862
7
Gpt3D_Clone862_7.cs 1 10
Gpt3D_Clone862_7.cs 11 23
----------------------------------------

public HashSet < TEntity > GetCollection < TEntity > () {
    var type = typeof (TEntity);
    if (type == typeof (Bike))
        return (HashSet < TEntity >) (object) Bikes;
    if (type == typeof (Car))
        return (HashSet < TEntity >) (object) Cars;
    if (type == typeof (Truck))
        return (HashSet < TEntity >) (object) Trucks;
    throw new InvalidOperationException ();
}
----------------------------------------

 public ICollection<TEntity> GetCollection<TEntity>()
{
	var type = typeof(TEntity);
    if (type == typeof(Bike))
        return new Collection<TEntity>(Bikes);
    if (type == typeof(Car))
        return new Collection<TEntity>(Cars);
    if (type == typeof(Truck))
        return new Collection<TEntity>(Trucks);
    throw new InvalidOperationException();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
862
8
Gpt3D_Clone862_8.cs 1 10
Gpt3D_Clone862_8.cs 11 23
----------------------------------------

public HashSet < TEntity > GetCollection < TEntity > () {
    var type = typeof (TEntity);
    if (type == typeof (Bike))
        return (HashSet < TEntity >) (object) Bikes;
    if (type == typeof (Car))
        return (HashSet < TEntity >) (object) Cars;
    if (type == typeof (Truck))
        return (HashSet < TEntity >) (object) Trucks;
    throw new InvalidOperationException ();
}
----------------------------------------

 public IEnumerable<TEntity> GetCollection<TEntity>()
{
	var type = typeof(TEntity);
    if (type == typeof(Bike))
        return Bikes;
    if (type == typeof(Car))
        return Cars;
    if (type == typeof(Truck))
        return Trucks;
    throw new InvalidOperationException();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
862
9
Gpt3D_Clone862_9.cs 1 10
Gpt3D_Clone862_9.cs 11 23
----------------------------------------

public HashSet < TEntity > GetCollection < TEntity > () {
    var type = typeof (TEntity);
    if (type == typeof (Bike))
        return (HashSet < TEntity >) (object) Bikes;
    if (type == typeof (Car))
        return (HashSet < TEntity >) (object) Cars;
    if (type == typeof (Truck))
        return (HashSet < TEntity >) (object) Trucks;
    throw new InvalidOperationException ();
}
----------------------------------------

 public TEntity[] GetCollection<TEntity>()
{
	var type = typeof(TEntity);
    if (type == typeof(Bike))
        return Bikes.ToArray();
    if (type == typeof(Car))
        return Cars.ToArray();
    if (type == typeof(Truck))
        return Trucks.ToArray();
    throw new InvalidOperationException();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
863
2
Gpt3D_Clone863_2.cs 1 12
Gpt3D_Clone863_2.cs 13 33
----------------------------------------

private void button6_Click (object sender, EventArgs e) {
    string select = (listView1.SelectedItems.Count > 0) ? (listView1.SelectedItems [0].Text) : null;
    if (! string.IsNullOrWhiteSpace (select)) {
        listView1.BeginUpdate ();
        pths.Remove (select);
        rec.Remove (select);
        listView1.EndUpdate ();
        string s = String.Join ("; ", pths.ToArray ());
        string r = String.Join ("; ", rec.ToArray ());
    }
    Disp ();
}
----------------------------------------

 private void button6_Click (object sender, EventArgs e) 
{
    if (listView1.SelectedItems.Count > 0)
    {
        string select = listView1.SelectedItems[0] != null ? listView1.SelectedItems[0].Text.Trim() : string.Empty;
        if(!string.IsNullOrWhiteSpace(select))
        {
            listView1.BeginUpdate();
            pths.Remove(select);
            rec.Remove(select);
            listView1.EndUpdate();
            StringBuilder s = new StringBuilder();
            s.AppendJoin(";", pths);
            StringBuilder r = new StringBuilder();
            r.AppendJoin(";", rec);
            Disp();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
863
3
Gpt3D_Clone863_3.cs 1 12
Gpt3D_Clone863_3.cs 13 33
----------------------------------------

private void button6_Click (object sender, EventArgs e) {
    string select = (listView1.SelectedItems.Count > 0) ? (listView1.SelectedItems [0].Text) : null;
    if (! string.IsNullOrWhiteSpace (select)) {
        listView1.BeginUpdate ();
        pths.Remove (select);
        rec.Remove (select);
        listView1.EndUpdate ();
        string s = String.Join ("; ", pths.ToArray ());
        string r = String.Join ("; ", rec.ToArray ());
    }
    Disp ();
}
----------------------------------------

 private void button6_Click(object sender, EventArgs e)
{
    if (listView1.SelectedItems.Count > 0)
    {
        string select = listView1.SelectedItems[0] != null ? listView1.SelectedItems[0].Text.Trim() : string.Empty;
        if(!string.IsNullOrWhiteSpace(select))
        {
            listView1.BeginUpdate();
            pths.Remove(select);
            rec.Remove(select);
            listView1.EndUpdate();
            string s = string.Join(", ", pths);
            s = s.Replace(',', ';');
            string r = string.Join(", ", rec);
            r = r.Replace(',', ';');
            Disp();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
863
4
Gpt3D_Clone863_4.cs 1 12
Gpt3D_Clone863_4.cs 13 32
----------------------------------------

private void button6_Click (object sender, EventArgs e) {
    string select = (listView1.SelectedItems.Count > 0) ? (listView1.SelectedItems [0].Text) : null;
    if (! string.IsNullOrWhiteSpace (select)) {
        listView1.BeginUpdate ();
        pths.Remove (select);
        rec.Remove (select);
        listView1.EndUpdate ();
        string s = String.Join ("; ", pths.ToArray ());
        string r = String.Join ("; ", rec.ToArray ());
    }
    Disp ();
}
----------------------------------------

 private void button6_Click (object sender, EventArgs e) 
{
    if (listView1.SelectedItems.Count > 0 && listView1.SelectedItems[0] != null)
    {
        string select = listView1.SelectedItems[0].Text;
        select = select.Trim();
        if(!string.IsNullOrWhiteSpace(select))
        {
            listView1.BeginUpdate();
            pths.Remove(select);
            rec.Remove(select);
            listView1.EndUpdate();
            string s = String.Join(" ; ", pths);
            string r = String.Join(" ; ", rec);
            Disp();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
863
5
Gpt3D_Clone863_5.cs 1 12
Gpt3D_Clone863_5.cs 13 32
----------------------------------------

private void button6_Click (object sender, EventArgs e) {
    string select = (listView1.SelectedItems.Count > 0) ? (listView1.SelectedItems [0].Text) : null;
    if (! string.IsNullOrWhiteSpace (select)) {
        listView1.BeginUpdate ();
        pths.Remove (select);
        rec.Remove (select);
        listView1.EndUpdate ();
        string s = String.Join ("; ", pths.ToArray ());
        string r = String.Join ("; ", rec.ToArray ());
    }
    Disp ();
}
----------------------------------------

 private void button6_Click(object sender, EventArgs e)
{
    if (listView1.SelectedItems.Count > 0)
    {
        string select = listView1.SelectedItems[0].Text;
        if(!string.IsNullOrWhiteSpace(select))
        {
            listView1.BeginUpdate();
            pths.Remove(select);
            rec.Remove(select);
            listView1.EndUpdate();
            string s = string.Join(" ; ", pths.ToArray());
            string r = string.Join(" ; ", rec.ToArray());
            Disp();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
863
7
Gpt3D_Clone863_7.cs 1 12
Gpt3D_Clone863_7.cs 13 31
----------------------------------------

private void button6_Click (object sender, EventArgs e) {
    string select = (listView1.SelectedItems.Count > 0) ? (listView1.SelectedItems [0].Text) : null;
    if (! string.IsNullOrWhiteSpace (select)) {
        listView1.BeginUpdate ();
        pths.Remove (select);
        rec.Remove (select);
        listView1.EndUpdate ();
        string s = String.Join ("; ", pths.ToArray ());
        string r = String.Join ("; ", rec.ToArray ());
    }
    Disp ();
}
----------------------------------------

 private void button6_Click (object sender, EventArgs e) 
{
    if (listView1.SelectedItems.Count > 0)
    {
        string select = listView1.SelectedItems[0] != null ? listView1.SelectedItems[0].Text.Trim() : string.Empty;
        if(!string.IsNullOrWhiteSpace(select))
        {
            listView1.BeginUpdate();
            pths.Remove(select);
            rec.Remove(select);
            listView1.EndUpdate();
            string s = string.Join(" ; ", pths);
            string r = string.Join(" ; ", rec);
            Disp();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
863
8
Gpt3D_Clone863_8.cs 1 12
Gpt3D_Clone863_8.cs 13 31
----------------------------------------

private void button6_Click (object sender, EventArgs e) {
    string select = (listView1.SelectedItems.Count > 0) ? (listView1.SelectedItems [0].Text) : null;
    if (! string.IsNullOrWhiteSpace (select)) {
        listView1.BeginUpdate ();
        pths.Remove (select);
        rec.Remove (select);
        listView1.EndUpdate ();
        string s = String.Join ("; ", pths.ToArray ());
        string r = String.Join ("; ", rec.ToArray ());
    }
    Disp ();
}
----------------------------------------

  private void button6_Click (object sender, EventArgs e) 
{
    if (listView1.SelectedItems.Count > 0)
    {
        string select = listView1.SelectedItems[0] != null ? listView1.SelectedItems[0].Text : string.Empty;
        if(!string.IsNullOrWhiteSpace(select))
        {
            listView1.BeginUpdate();
            pths.Remove(select);
            rec.Remove(select);
            listView1.EndUpdate();
            string s = string.Join(" ; ", pths.ToArray());
            string r = string.Join(" ; ", rec.ToArray());
            Disp();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
866
0
Gpt3D_Clone866_0.cs 1 15
Gpt3D_Clone866_0.cs 16 33
----------------------------------------

void GetFolders (DirectoryInfo d, TreeNode node) {
    try {
        DirectoryInfo [] dInfo = d.GetDirectories ();
        if (dInfo.Length > 0) {
            TreeNode treeNode = new TreeNode ();
            foreach (DirectoryInfo driSub in dInfo) {
                treeNode = node.Nodes.Add (driSub.Name, driSub.Name, 0, 0);
                GetFiles (driSub, treeNode);
                GetFolders (driSub, treeNode);
            }
        }
    }
    catch (Exception ex) {
    }
}
----------------------------------------

 void GetFolders (DirectoryInfo d, TreeNode node) {
    try {
        DirectoryInfo [] dirsInfo = d.GetDirectories ();
        int dirCount = dirsInfo.Length;
        if (dirCount > 0) {
            TreeNode tNode;
            foreach (DirectoryInfo driSub in dirsInfo) {
                tNode = node.Nodes.Add (driSub.Name, driSub.Name, 0, 0);
                GetFiles (driSub, tNode);
                GetFolders (driSub, tNode);
            }
        }
    }
    catch (Exception ex) {
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
866
1
Gpt3D_Clone866_1.cs 1 15
Gpt3D_Clone866_1.cs 16 33
----------------------------------------

void GetFolders (DirectoryInfo d, TreeNode node) {
    try {
        DirectoryInfo [] dInfo = d.GetDirectories ();
        if (dInfo.Length > 0) {
            TreeNode treeNode = new TreeNode ();
            foreach (DirectoryInfo driSub in dInfo) {
                treeNode = node.Nodes.Add (driSub.Name, driSub.Name, 0, 0);
                GetFiles (driSub, treeNode);
                GetFolders (driSub, treeNode);
            }
        }
    }
    catch (Exception ex) {
    }
}
----------------------------------------

 void GatherFolders (DirectoryInfo d, TreeNode node) {
    try {
        DirectoryInfo [] directoryList = d.GetDirectories ();
        int folderNum = directoryList.Length;
        if (folderNum > 0) {
            TreeNode tNode;
            foreach (DirectoryInfo driSub in directoryList) {
                tNode = node.Nodes.Add (driSub.Name, driSub.Name, 0, 0);
                GetFiles (driSub, tNode);
                GatherFolders (driSub, tNode);
            }
        }
    }
    catch (Exception ex) {
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
866
2
Gpt3D_Clone866_2.cs 1 15
Gpt3D_Clone866_2.cs 16 33
----------------------------------------

void GetFolders (DirectoryInfo d, TreeNode node) {
    try {
        DirectoryInfo [] dInfo = d.GetDirectories ();
        if (dInfo.Length > 0) {
            TreeNode treeNode = new TreeNode ();
            foreach (DirectoryInfo driSub in dInfo) {
                treeNode = node.Nodes.Add (driSub.Name, driSub.Name, 0, 0);
                GetFiles (driSub, treeNode);
                GetFolders (driSub, treeNode);
            }
        }
    }
    catch (Exception ex) {
    }
}
----------------------------------------

 void RetrieveFolders (DirectoryInfo d, TreeNode node) {
    try {
        DirectoryInfo [] dirs = d.GetDirectories ();
        int numberOfDirs = dirs.Length;
        if (numberOfDirs > 0) {
            TreeNode tNode;
            foreach (DirectoryInfo driSub in dirs) {
                tNode = node.Nodes.Add (driSub.Name, driSub.Name, 0, 0);
                GetFiles (driSub, tNode);
                RetrieveFolders (driSub, tNode);
            }
        }
    }
    catch (Exception ex) {
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
866
3
Gpt3D_Clone866_3.cs 1 15
Gpt3D_Clone866_3.cs 16 33
----------------------------------------

void GetFolders (DirectoryInfo d, TreeNode node) {
    try {
        DirectoryInfo [] dInfo = d.GetDirectories ();
        if (dInfo.Length > 0) {
            TreeNode treeNode = new TreeNode ();
            foreach (DirectoryInfo driSub in dInfo) {
                treeNode = node.Nodes.Add (driSub.Name, driSub.Name, 0, 0);
                GetFiles (driSub, treeNode);
                GetFolders (driSub, treeNode);
            }
        }
    }
    catch (Exception ex) {
    }
}
----------------------------------------

 void AcquireFolders (DirectoryInfo d, TreeNode node) {
    try {
        DirectoryInfo [] dirInfo = d.GetDirectories ();
        int numDirs = dirInfo.Length;
        if (numDirs > 0) {
            TreeNode tNode;
            foreach (DirectoryInfo driSub in dirInfo) {
                tNode = node.Nodes.Add (driSub.Name, driSub.Name, 0, 0);
                GetFiles (driSub, tNode);
                AcquireFolders (driSub, tNode);
            }
        }
    }
    catch (Exception ex) {
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
866
4
Gpt3D_Clone866_4.cs 1 15
Gpt3D_Clone866_4.cs 16 33
----------------------------------------

void GetFolders (DirectoryInfo d, TreeNode node) {
    try {
        DirectoryInfo [] dInfo = d.GetDirectories ();
        if (dInfo.Length > 0) {
            TreeNode treeNode = new TreeNode ();
            foreach (DirectoryInfo driSub in dInfo) {
                treeNode = node.Nodes.Add (driSub.Name, driSub.Name, 0, 0);
                GetFiles (driSub, treeNode);
                GetFolders (driSub, treeNode);
            }
        }
    }
    catch (Exception ex) {
    }
}
----------------------------------------

 void CollectFolders (DirectoryInfo d, TreeNode node) {
    try {
        DirectoryInfo [] directories = d.GetDirectories ();
        int numOfDir = directories.Length;
        if (numOfDir > 0) {
            TreeNode tNode;
            foreach (DirectoryInfo driSub in directories) {
                tNode = node.Nodes.Add (driSub.Name, driSub.Name, 0, 0);
                GetFiles (driSub, tNode);
                CollectFolders (driSub, tNode);
            }
        }
    }
    catch (Exception ex) {
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
866
5
Gpt3D_Clone866_5.cs 1 15
Gpt3D_Clone866_5.cs 16 33
----------------------------------------

void GetFolders (DirectoryInfo d, TreeNode node) {
    try {
        DirectoryInfo [] dInfo = d.GetDirectories ();
        if (dInfo.Length > 0) {
            TreeNode treeNode = new TreeNode ();
            foreach (DirectoryInfo driSub in dInfo) {
                treeNode = node.Nodes.Add (driSub.Name, driSub.Name, 0, 0);
                GetFiles (driSub, treeNode);
                GetFolders (driSub, treeNode);
            }
        }
    }
    catch (Exception ex) {
    }
}
----------------------------------------

 void FindFolders (DirectoryInfo d, TreeNode node) {
    try {
        DirectoryInfo [] subDirectory = d.GetDirectories ();
        int folderCount = subDirectory.Length;
        if (folderCount > 0) {
            TreeNode tNode;
            foreach (DirectoryInfo driSub in subDirectory) {
                tNode = node.Nodes.Add (driSub.Name, driSub.Name, 0, 0);
                GetFiles (driSub, tNode);
                FindFolders (driSub, tNode);
            }
        }
    }
    catch (Exception ex) {
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
866
6
Gpt3D_Clone866_6.cs 1 15
Gpt3D_Clone866_6.cs 16 33
----------------------------------------

void GetFolders (DirectoryInfo d, TreeNode node) {
    try {
        DirectoryInfo [] dInfo = d.GetDirectories ();
        if (dInfo.Length > 0) {
            TreeNode treeNode = new TreeNode ();
            foreach (DirectoryInfo driSub in dInfo) {
                treeNode = node.Nodes.Add (driSub.Name, driSub.Name, 0, 0);
                GetFiles (driSub, treeNode);
                GetFolders (driSub, treeNode);
            }
        }
    }
    catch (Exception ex) {
    }
}
----------------------------------------

 void SearchFolders (DirectoryInfo d, TreeNode node) {
    try {
        DirectoryInfo [] foldersInfo = d.GetDirectories ();
        int directoryCount = foldersInfo.Length;
        if (directoryCount > 0) {
            TreeNode tNode;
            foreach (DirectoryInfo driSub in foldersInfo) {
                tNode = node.Nodes.Add (driSub.Name, driSub.Name, 0, 0);
                GetFiles (driSub, tNode);
                SearchFolders (driSub, tNode);
            }
        }
    }
    catch (Exception ex) {
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
866
7
Gpt3D_Clone866_7.cs 1 15
Gpt3D_Clone866_7.cs 16 33
----------------------------------------

void GetFolders (DirectoryInfo d, TreeNode node) {
    try {
        DirectoryInfo [] dInfo = d.GetDirectories ();
        if (dInfo.Length > 0) {
            TreeNode treeNode = new TreeNode ();
            foreach (DirectoryInfo driSub in dInfo) {
                treeNode = node.Nodes.Add (driSub.Name, driSub.Name, 0, 0);
                GetFiles (driSub, treeNode);
                GetFolders (driSub, treeNode);
            }
        }
    }
    catch (Exception ex) {
    }
}
----------------------------------------

 void FindDirectories (DirectoryInfo d, TreeNode node) {
    try {
        DirectoryInfo [] dirs = d.GetDirectories ();
        int dirNum = dirs.Length;
        if (dirNum > 0) {
            TreeNode tNode;
            foreach (DirectoryInfo driSub in dirs) {
                tNode = node.Nodes.Add (driSub.Name, driSub.Name, 0, 0);
                GetFiles (driSub, tNode);
                FindDirectories (driSub, tNode);
            }
        }
    }
    catch (Exception ex) {
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
868
0
Gpt3D_Clone868_0.cs 1 13
Gpt3D_Clone868_0.cs 14 28
----------------------------------------

static void Main (string [] args) {
    List < Phone > phones = new List < Phone > ();
    bool shouldContinue = true;
    do
        {
            phones.Add (GetPhone ());
            Console.Write ("Would like to process another phone? [Y or N]: ", shouldContinue);
            shouldContinue = Console.ReadLine ().ToUpper () == "Y";
        } while (shouldContinue == true);
    if (shouldContinue == false) {
        DisplayPhones (phones);
    }
}
----------------------------------------

	static void Main(string[] args) {
    List<Phone> phones = new List<Phone>();
    bool shouldContinue = true;
    do {
        phones.Add(GetPhone());
        Console.Write("Would like to process another phone? [Y or N]: ");
        string input = Console.ReadLine();
        shouldContinue = (input.ToUpper() == "Y") ? true : false;
    } while (shouldContinue);
    if (!shouldContinue) {
        DisplayPhones(phones);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
868
3
Gpt3D_Clone868_3.cs 1 13
Gpt3D_Clone868_3.cs 14 27
----------------------------------------

static void Main (string [] args) {
    List < Phone > phones = new List < Phone > ();
    bool shouldContinue = true;
    do
        {
            phones.Add (GetPhone ());
            Console.Write ("Would like to process another phone? [Y or N]: ", shouldContinue);
            shouldContinue = Console.ReadLine ().ToUpper () == "Y";
        } while (shouldContinue == true);
    if (shouldContinue == false) {
        DisplayPhones (phones);
    }
}
----------------------------------------

	static void Main(string[] args) {
    List<Phone> phones = new List<Phone>();
    bool shouldContinue;
    do {
        phones.Add(GetPhone());
        Console.Write("Would like to process another phone? [Y or N]: ");
        shouldContinue = (Console.ReadLine().Equals("Y", StringComparison.OrdinalIgnoreCase)) ? true : false;
    } while (shouldContinue);
    if (!shouldContinue) {
        DisplayPhones(phones);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
868
4
Gpt3D_Clone868_4.cs 1 13
Gpt3D_Clone868_4.cs 14 27
----------------------------------------

static void Main (string [] args) {
    List < Phone > phones = new List < Phone > ();
    bool shouldContinue = true;
    do
        {
            phones.Add (GetPhone ());
            Console.Write ("Would like to process another phone? [Y or N]: ", shouldContinue);
            shouldContinue = Console.ReadLine ().ToUpper () == "Y";
        } while (shouldContinue == true);
    if (shouldContinue == false) {
        DisplayPhones (phones);
    }
}
----------------------------------------

	static void Main(string[] args) {
    List<Phone> phones = new List<Phone>();
    bool shouldContinue;
    do {
        phones.Add(GetPhone());
        Console.Write("Would like to process another phone? [Y or N]: ");
        shouldContinue = Console.ReadLine().ToUpper() == "Y";
    } while (shouldContinue);
    if(!shouldContinue) {
        DisplayPhones(phones);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
868
7
Gpt3D_Clone868_7.cs 1 13
Gpt3D_Clone868_7.cs 14 28
----------------------------------------

static void Main (string [] args) {
    List < Phone > phones = new List < Phone > ();
    bool shouldContinue = true;
    do
        {
            phones.Add (GetPhone ());
            Console.Write ("Would like to process another phone? [Y or N]: ", shouldContinue);
            shouldContinue = Console.ReadLine ().ToUpper () == "Y";
        } while (shouldContinue == true);
    if (shouldContinue == false) {
        DisplayPhones (phones);
    }
}
----------------------------------------

	static void Main(string[] args) {
    List<Phone> phones = new List<Phone>();
    bool shouldContinue = true;
    while (shouldContinue == true) {
        phones.Add(GetPhone());
        Console.Write("Would like to process another phone? [Y or N]: ");
        string input = Console.ReadLine();
        shouldContinue = input.ToUpper() == "Y";
    } 
    if (shouldContinue == false) {
        DisplayPhones(phones);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
868
9
Gpt3D_Clone868_9.cs 1 13
Gpt3D_Clone868_9.cs 14 25
----------------------------------------

static void Main (string [] args) {
    List < Phone > phones = new List < Phone > ();
    bool shouldContinue = true;
    do
        {
            phones.Add (GetPhone ());
            Console.Write ("Would like to process another phone? [Y or N]: ", shouldContinue);
            shouldContinue = Console.ReadLine ().ToUpper () == "Y";
        } while (shouldContinue == true);
    if (shouldContinue == false) {
        DisplayPhones (phones);
    }
}
----------------------------------------

	static void Main(string[] args) {
    List<Phone> phones = new List<Phone>();
    bool shouldContinue = true;
    while (shouldContinue) {
        phones.Add(GetPhone());
        Console.Write("Would like to process another phone? [Y or N]: ");
        shouldContinue = Console.ReadLine().ToUpper() == "Y";
    } 
    DisplayPhones(phones);
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
869
0
Gpt3D_Clone869_0.cs 1 16
Gpt3D_Clone869_0.cs 17 50
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    var obj = JToken.ReadFrom (reader);
    if (objectType == typeof (Dictionary < string, TValue >)) {
        var comparer = obj.Value < string > ("Comparer");
        Dictionary < string, TValue > result;
        if (comparer == "OrdinalIgnoreCase") {
            result = new Dictionary < string, TValue > (StringComparer.OrdinalIgnoreCase);
        } else {
            result = new Dictionary < string, TValue > ();
        }
        obj ["Comparer"].Parent.Remove ();
        serializer.Populate (obj.CreateReader (), result);
        return result;
    }
    return obj.ToObject (objectType);
}
----------------------------------------

  public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
{
    var obj = JToken.ReadFrom(reader);
    Dictionary<string, TValue> result = default;
    if (objectType == typeof(Dictionary<string, TValue>))
    {
        var comparer = obj.Value<string>("Comparer");
        switch (comparer)
        {
            //Compare using StringComparer.OrdinalIgnoreCase
            case "OrdinalIgnoreCase":
                result = new Dictionary<string, TValue>(StringComparer.OrdinalIgnoreCase);
                break;
            //Compare using StringComparer.Ordinal
            case "Ordinal":
                result = new Dictionary<string, TValue>(StringComparer.Ordinal);
                break;
            default:
                result = new Dictionary<string, TValue>();
                break;
        }
        obj["Comparer"].Parent.Remove();
        serializer.Populate(obj.CreateReader(), result);
        return result;
    }
    return obj.ToObject(objectType);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
869
2
Gpt3D_Clone869_2.cs 1 16
Gpt3D_Clone869_2.cs 17 44
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    var obj = JToken.ReadFrom (reader);
    if (objectType == typeof (Dictionary < string, TValue >)) {
        var comparer = obj.Value < string > ("Comparer");
        Dictionary < string, TValue > result;
        if (comparer == "OrdinalIgnoreCase") {
            result = new Dictionary < string, TValue > (StringComparer.OrdinalIgnoreCase);
        } else {
            result = new Dictionary < string, TValue > ();
        }
        obj ["Comparer"].Parent.Remove ();
        serializer.Populate (obj.CreateReader (), result);
        return result;
    }
    return obj.ToObject (objectType);
}
----------------------------------------

  public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
{
    var obj = JToken.ReadFrom(reader); 
    Dictionary<string, TValue> result = new Dictionary<string, TValue>();
    if (objectType == typeof(Dictionary<string, TValue>))
    {
        var comparer = obj.Value<string>("Comparer");
        switch (comparer)
        {
            //Build an OrdinalIgnoreCase Dictionary
            case "OrdinalIgnoreCase":
                result = new Dictionary<string, TValue>(StringComparer.OrdinalIgnoreCase);
                break;
            //Default dictionary
            default:
                result = new Dictionary<string, TValue>();
                break;
        }
        obj["Comparer"].Parent.Remove();
        serializer.Populate(obj.CreateReader(), result);
        return result;
    }
    return obj.ToObject(objectType);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
869
3
Gpt3D_Clone869_3.cs 1 16
Gpt3D_Clone869_3.cs 17 47
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    var obj = JToken.ReadFrom (reader);
    if (objectType == typeof (Dictionary < string, TValue >)) {
        var comparer = obj.Value < string > ("Comparer");
        Dictionary < string, TValue > result;
        if (comparer == "OrdinalIgnoreCase") {
            result = new Dictionary < string, TValue > (StringComparer.OrdinalIgnoreCase);
        } else {
            result = new Dictionary < string, TValue > ();
        }
        obj ["Comparer"].Parent.Remove ();
        serializer.Populate (obj.CreateReader (), result);
        return result;
    }
    return obj.ToObject (objectType);
}
----------------------------------------

  public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
{
    var obj = JToken.ReadFrom(reader);
    Dictionary<string, TValue> result = default;
    if (objectType == typeof(Dictionary<string, TValue>))
    {
        var comparer = obj.Value<string>("Comparer");
        if (comparer.Equals("OrdinalIgnoreCase"))
        {
            result = new Dictionary<string, TValue>(StringComparer.OrdinalIgnoreCase);
        }
        else if (comparer.Equals("Ordinal"))
        {
            result = new Dictionary<string, TValue>(StringComparer.Ordinal);
        }
        else
        {
            result = new Dictionary<string, TValue>();
        }
        obj["Comparer"].Parent.Remove();
        serializer.Populate(obj.CreateReader(), result);
        return result;
    }
    return obj.ToObject(objectType);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
869
4
Gpt3D_Clone869_4.cs 1 16
Gpt3D_Clone869_4.cs 17 37
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    var obj = JToken.ReadFrom (reader);
    if (objectType == typeof (Dictionary < string, TValue >)) {
        var comparer = obj.Value < string > ("Comparer");
        Dictionary < string, TValue > result;
        if (comparer == "OrdinalIgnoreCase") {
            result = new Dictionary < string, TValue > (StringComparer.OrdinalIgnoreCase);
        } else {
            result = new Dictionary < string, TValue > ();
        }
        obj ["Comparer"].Parent.Remove ();
        serializer.Populate (obj.CreateReader (), result);
        return result;
    }
    return obj.ToObject (objectType);
}
----------------------------------------

  public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
{
    var obj = JToken.ReadFrom(reader); 
    var comparer = obj.Value<string>("Comparer");
    Dictionary<string, TValue> result = new Dictionary<string, TValue>();
    
    if (objectType == typeof(Dictionary<string, TValue>)) 
    {
        if (comparer == "OrdinalIgnoreCase")
        {
            result = new Dictionary<string, TValue>(StringComparer.OrdinalIgnoreCase);
        }
        obj["Comparer"].Parent.Remove();
        serializer.Populate(obj.CreateReader(), result);
        return result;
    }
    return obj.ToObject(objectType);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
869
5
Gpt3D_Clone869_5.cs 1 16
Gpt3D_Clone869_5.cs 17 40
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    var obj = JToken.ReadFrom (reader);
    if (objectType == typeof (Dictionary < string, TValue >)) {
        var comparer = obj.Value < string > ("Comparer");
        Dictionary < string, TValue > result;
        if (comparer == "OrdinalIgnoreCase") {
            result = new Dictionary < string, TValue > (StringComparer.OrdinalIgnoreCase);
        } else {
            result = new Dictionary < string, TValue > ();
        }
        obj ["Comparer"].Parent.Remove ();
        serializer.Populate (obj.CreateReader (), result);
        return result;
    }
    return obj.ToObject (objectType);
}
----------------------------------------

  public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
{
    var obj = JToken.ReadFrom(reader); 
    var comparer = obj.Value<string>("Comparer");
    // Default comparator
    Dictionary<string, TValue> result = new Dictionary<string, TValue>();
    if (objectType == typeof(Dictionary<string, TValue>)) 
    {
        if (comparer == "OrdinalIgnoreCase")
        {
            // Create an OrdinalIgnoreCase Dictionary
            result = new Dictionary<string, TValue>(StringComparer.OrdinalIgnoreCase);
        }
        obj["Comparer"].Parent.Remove();
        serializer.Populate(obj.CreateReader(), result);
        return result;
    }
    return obj.ToObject(objectType);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
869
6
Gpt3D_Clone869_6.cs 1 16
Gpt3D_Clone869_6.cs 17 32
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    var obj = JToken.ReadFrom (reader);
    if (objectType == typeof (Dictionary < string, TValue >)) {
        var comparer = obj.Value < string > ("Comparer");
        Dictionary < string, TValue > result;
        if (comparer == "OrdinalIgnoreCase") {
            result = new Dictionary < string, TValue > (StringComparer.OrdinalIgnoreCase);
        } else {
            result = new Dictionary < string, TValue > ();
        }
        obj ["Comparer"].Parent.Remove ();
        serializer.Populate (obj.CreateReader (), result);
        return result;
    }
    return obj.ToObject (objectType);
}
----------------------------------------

  public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
{
    var obj = JToken.ReadFrom(reader); 
    var comparer = obj.Value<string>("Comparer");
    Dictionary<string, TValue> result = (comparer == "OrdinalIgnoreCase") ? new Dictionary<string, TValue>(StringComparer.OrdinalIgnoreCase) : new Dictionary<string, TValue>();
    
    if (objectType == typeof(Dictionary<string, TValue>)) 
    {
        obj["Comparer"].Parent.Remove();
        serializer.Populate(obj.CreateReader(), result);
        return result;
    }
    return obj.ToObject(objectType);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
870
0
Gpt3D_Clone870_0.cs 1 14
Gpt3D_Clone870_0.cs 15 46
----------------------------------------

public static ScrollViewer FindScrollViewer (FlowDocumentScrollViewer flowDocumentScrollViewer) {
    if (VisualTreeHelper.GetChildrenCount (flowDocumentScrollViewer) == 0) {
        return null;
    }
    DependencyObject firstChild = VisualTreeHelper.GetChild (flowDocumentScrollViewer, 0);
    if (firstChild == null) {
        return null;
    }
    Decorator border = VisualTreeHelper.GetChild (firstChild, 0) as Decorator;
    if (border == null) {
        return null;
    }
    return border.Child as ScrollViewer;
}
----------------------------------------

 ScrollViewer FindScrollViewer(FlowDocumentScrollViewer flowDocumentScrollViewer)
{
    if (VisualTreeHelper.GetChildrenCount(flowDocumentScrollViewer) == 0)
    {
        return null;
    }
    DependencyObject firstChild = VisualTreeHelper.GetChild(flowDocumentScrollViewer, 0);
    if (firstChild == null)
    {
        return null;
    }
    Decorator border = VisualTreeHelper.GetChild(firstChild, 0) as Decorator;
    if (border == null)
    {
        return null;
    }
    ScrollViewer scroll = null;
    if (border.Child is ScrollViewer) 
    {
        scroll = border.Child as ScrollViewer;
    }
    return scroll;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
870
1
Gpt3D_Clone870_1.cs 1 14
Gpt3D_Clone870_1.cs 15 41
----------------------------------------

public static ScrollViewer FindScrollViewer (FlowDocumentScrollViewer flowDocumentScrollViewer) {
    if (VisualTreeHelper.GetChildrenCount (flowDocumentScrollViewer) == 0) {
        return null;
    }
    DependencyObject firstChild = VisualTreeHelper.GetChild (flowDocumentScrollViewer, 0);
    if (firstChild == null) {
        return null;
    }
    Decorator border = VisualTreeHelper.GetChild (firstChild, 0) as Decorator;
    if (border == null) {
        return null;
    }
    return border.Child as ScrollViewer;
}
----------------------------------------

 ScrollViewer FindScrollViewer(FlowDocumentScrollViewer flowDocumentScrollViewer)
{
    if(VisualTreeHelper.GetChildrenCount (flowDocumentScrollViewer) == 0)
    {
        return null;
    }
    DependencyObject firstChild = VisualTreeHelper.GetChild(flowDocumentScrollViewer, 0);
    
    if (firstChild == null)
    {
        return null;
    }
    Decorator border = VisualTreeHelper.GetChild(firstChild, 0) as Decorator;
    if(border == null)
    {
        return null;
    }
    ScrollViewer scroll = border.Child as ScrollViewer;
    return scroll;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
870
2
Gpt3D_Clone870_2.cs 1 14
Gpt3D_Clone870_2.cs 15 39
----------------------------------------

public static ScrollViewer FindScrollViewer (FlowDocumentScrollViewer flowDocumentScrollViewer) {
    if (VisualTreeHelper.GetChildrenCount (flowDocumentScrollViewer) == 0) {
        return null;
    }
    DependencyObject firstChild = VisualTreeHelper.GetChild (flowDocumentScrollViewer, 0);
    if (firstChild == null) {
        return null;
    }
    Decorator border = VisualTreeHelper.GetChild (firstChild, 0) as Decorator;
    if (border == null) {
        return null;
    }
    return border.Child as ScrollViewer;
}
----------------------------------------

 ScrollViewer FindScrollViewer(FlowDocumentScrollViewer flowDocumentScrollViewer)
{
    if (VisualTreeHelper.GetChildrenCount(flowDocumentScrollViewer) < 1) 
    {
        return null;
    }
    DependencyObject firstChild = VisualTreeHelper.GetChild(flowDocumentScrollViewer, 0);
    if (firstChild == null) 
    {
        return null;
    }
    Decorator border = VisualTreeHelper.GetChild(firstChild, 0) as Decorator;
    if (border != null && border.Child is ScrollViewer) 
    {
        return border.Child as ScrollViewer;
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
870
3
Gpt3D_Clone870_3.cs 1 14
Gpt3D_Clone870_3.cs 15 33
----------------------------------------

public static ScrollViewer FindScrollViewer (FlowDocumentScrollViewer flowDocumentScrollViewer) {
    if (VisualTreeHelper.GetChildrenCount (flowDocumentScrollViewer) == 0) {
        return null;
    }
    DependencyObject firstChild = VisualTreeHelper.GetChild (flowDocumentScrollViewer, 0);
    if (firstChild == null) {
        return null;
    }
    Decorator border = VisualTreeHelper.GetChild (firstChild, 0) as Decorator;
    if (border == null) {
        return null;
    }
    return border.Child as ScrollViewer;
}
----------------------------------------

 ScrollViewer FindScrollViewer(FlowDocumentScrollViewer flowDocumentScrollViewer)
{
    if (VisualTreeHelper.GetChildrenCount(flowDocumentScrollViewer) == 0)
    {
        return null;
    }
    DependencyObject firstChild = VisualTreeHelper.GetChild(flowDocumentScrollViewer, 0);
    Decorator border = VisualTreeHelper.GetChild(firstChild, 0) as Decorator;
    
    if (border == null || !(border.Child is ScrollViewer))
    {
       return null;
    }
    
    return border.Child as ScrollViewer;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
873
0
Gpt3D_Clone873_0.cs 1 23
Gpt3D_Clone873_0.cs 24 46
----------------------------------------

private static IEnumerable < IEnumerable < T > > ClumpIterator < T > (IEnumerable < T > source, int size) {
    Debug.Assert (source != null, "source is null.");
    T [] items = new T [size];
    int count = 0;
    foreach (var item in source) {
        items [count] = item;
        count ++;
        if (count == size) {
            yield return items;
            items = new T [size];
            count = 0;
        }
    }
    if (count > 0) {
        if (count == size)
            yield return items;
        else {
            T [] tempItems = new T [count];
            Array.Copy (items, tempItems, count);
            yield return tempItems;
        }
    }
}
----------------------------------------

	private static IEnumerable<IEnumerable<T>> SegmentIterator<T>(IEnumerable<T> source, int size) {
    List<T> items = new List<T>();
    int count = 0;
    foreach (T item in source) {
        items.Add(item);
        count++;
        if (count == size) {
            yield return items;
            items = new List<T>();
            count = 0;
        }
    }
    if (count > 0) {
        if (count == size)
            yield return items;
        else {
            var tempItems = items.GetRange(0, count);
            yield return tempItems;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
873
1
Gpt3D_Clone873_1.cs 1 23
Gpt3D_Clone873_1.cs 24 46
----------------------------------------

private static IEnumerable < IEnumerable < T > > ClumpIterator < T > (IEnumerable < T > source, int size) {
    Debug.Assert (source != null, "source is null.");
    T [] items = new T [size];
    int count = 0;
    foreach (var item in source) {
        items [count] = item;
        count ++;
        if (count == size) {
            yield return items;
            items = new T [size];
            count = 0;
        }
    }
    if (count > 0) {
        if (count == size)
            yield return items;
        else {
            T [] tempItems = new T [count];
            Array.Copy (items, tempItems, count);
            yield return tempItems;
        }
    }
}
----------------------------------------

	private static IEnumerable < IEnumerable < T >> SplitIntoGroupsIterator < T > (IEnumerable < T > source, int size) {
	T [] items = new T [size];
	int count = 0;
	foreach (var item in source) {
		items[count] = item;
		count++;
		if (count == size) {
			yield return items;
			// Move current items to new array of new size
			var clonearray = new T[count];
			Array.Copy(items, clonearray, size);
			yield return clonearray;
			// Create new empty array
			items = new T[size];
			count = 0;
		}
	}
	// If the last batch is NOT full, no need to apply Array.Copy anymore
	if (count > 0) 
		yield return items;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
873
2
Gpt3D_Clone873_2.cs 1 23
Gpt3D_Clone873_2.cs 24 46
----------------------------------------

private static IEnumerable < IEnumerable < T > > ClumpIterator < T > (IEnumerable < T > source, int size) {
    Debug.Assert (source != null, "source is null.");
    T [] items = new T [size];
    int count = 0;
    foreach (var item in source) {
        items [count] = item;
        count ++;
        if (count == size) {
            yield return items;
            items = new T [size];
            count = 0;
        }
    }
    if (count > 0) {
        if (count == size)
            yield return items;
        else {
            T [] tempItems = new T [count];
            Array.Copy (items, tempItems, count);
            yield return tempItems;
        }
    }
}
----------------------------------------

	private static IEnumerable < IEnumerable < T >> SegmentIterator<T> ( IEnumerable < T > source, int size )
{
    T [] items = new T [ size ];
    int count = 0;
    foreach ( var item in source )
    {
        items[count] = item;
        count++;
			
        if (count == size)
        {
            yield return items;
            var tempItems = new T [ count ];
            Array.Copy(items, tempItems, count);
            yield return tempItems;
				
            items = new T[size];
            count = 0;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
875
0
Gpt3D_Clone875_0.cs 1 18
Gpt3D_Clone875_0.cs 19 36
----------------------------------------

protected void Page_Load (object sender, EventArgs e) {
    string subject = Request.Params ["subject"];
    string message = Request.Params ["body-plain"];
    using (SqlConnection cn = new SqlConnection (ConfigurationManager.ConnectionStrings ["YOURCONNECTIONSTRING"].ConnectionString))
    {
        cn.Open ();
        using (SqlCommand cm = cn.CreateCommand ())
        {
            cm.CommandType = CommandType.Text;
            cm.CommandText = "INSERT INTO SMS (subject, message, DateTime) VALUES (@Subject, @Message, @Dateandtime);";
            cm.Parameters.Add ("@Subject", SqlDbType.NVarChar).Value = subject;
            cm.Parameters.Add ("@Message", SqlDbType.NVarChar).Value = message;
            cm.Parameters.Add ("@Dateandtime", SqlDbType.DateTime).Value = DateTime.Now.ToString ();
            SqlDataReader dr = cm.ExecuteReader ();
            dr.Dispose ();
            cm.Dispose ();
        }}
}
----------------------------------------

  protected void Page_Load (object sender, EventArgs e) {
    string subject = Request.Params ["subject"];
    string message = Request.Params ["body-plain"];  
    using (SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["YOUR_CON_STRING"].ConnectionString)) 
    {
        con.Open();
        using (var mysqlQuery = new SqlCommand("INSERT INTO SMS (subject, message, DateTime) VALUES (@Subject, @Message, @Dateandtime);", con))
        {
            mysqlQuery.Parameters.AddWithValue("@Subject", subject);
            mysqlQuery.Parameters.AddWithValue("@Message", message);
            mysqlQuery.Parameters.AddWithValue("@Dateandtime", DateTime.Now);
            var result = mysqlQuery.ExecuteNonQuery();
            mysqlQuery.Dispose();             
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
877
0
Gpt3D_Clone877_0.cs 1 22
Gpt3D_Clone877_0.cs 23 44
----------------------------------------

public override void Serialize (BsonSerializationContext context, BsonSerializationArgs args, T value) {
    var nominalType = args.NominalType;
    var fields = nominalType.GetFields (BindingFlags.Instance | BindingFlags.Public);
    var propsAll = nominalType.GetProperties (BindingFlags.Instance | BindingFlags.Public);
    var props = new List < PropertyInfo > ();
    foreach (var prop in propsAll) {
        if (prop.CanWrite) {
            props.Add (prop);
        }
    }
    var bsonWriter = context.Writer;
    bsonWriter.WriteStartDocument ();
    foreach (var field in fields) {
        bsonWriter.WriteName (field.Name);
        BsonSerializer.Serialize (bsonWriter, field.FieldType, field.GetValue (value));
    }
    foreach (var prop in props) {
        bsonWriter.WriteName (prop.Name);
        BsonSerializer.Serialize (bsonWriter, prop.PropertyType, prop.GetValue (value, null));
    }
    bsonWriter.WriteEndDocument ();
}
----------------------------------------

 public override void Serialize (BsonSerializationContext context, BsonSerializationArgs args, T value) {
    var type = args.NominalType;
    var fields = type.GetFields (BindingFlags.Instance | BindingFlags.Public);
    var propsAll = type.GetProperties (BindingFlags.Instance | BindingFlags.Public);
    var props = propsAll.Where(prop => prop.CanWrite);
    var bsonWriter = context.Writer;
    bsonWriter.WriteStartDocument ();
    fields.ToList().ForEach(field =>
    {
        bsonWriter.WriteName (field.Name);
        BsonSerializer.Serialize (bsonWriter, field.FieldType, field.GetValue (value));
    });
    props.ToList().ForEach(prop => {
        bsonWriter.WriteName (prop.Name);
        BsonSerializer.Serialize (bsonWriter, prop.PropertyType, prop.GetValue (value, null));
    });
    bsonWriter.WriteEndDocument ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
877
2
Gpt3D_Clone877_2.cs 1 22
Gpt3D_Clone877_2.cs 23 49
----------------------------------------

public override void Serialize (BsonSerializationContext context, BsonSerializationArgs args, T value) {
    var nominalType = args.NominalType;
    var fields = nominalType.GetFields (BindingFlags.Instance | BindingFlags.Public);
    var propsAll = nominalType.GetProperties (BindingFlags.Instance | BindingFlags.Public);
    var props = new List < PropertyInfo > ();
    foreach (var prop in propsAll) {
        if (prop.CanWrite) {
            props.Add (prop);
        }
    }
    var bsonWriter = context.Writer;
    bsonWriter.WriteStartDocument ();
    foreach (var field in fields) {
        bsonWriter.WriteName (field.Name);
        BsonSerializer.Serialize (bsonWriter, field.FieldType, field.GetValue (value));
    }
    foreach (var prop in props) {
        bsonWriter.WriteName (prop.Name);
        BsonSerializer.Serialize (bsonWriter, prop.PropertyType, prop.GetValue (value, null));
    }
    bsonWriter.WriteEndDocument ();
}
----------------------------------------

 public override void Serialize(BsonSerializationContext context, BsonSerializationArgs args, T value)
{
    var type = args.NominalType;
    var bsonWriter = context.Writer;
    bsonWriter.WriteStartDocument();
    type.GetFields(BindingFlags.Instance | BindingFlags.Public)
        .ToList()
        .ForEach(field =>
            {
                bsonWriter.WriteName(field.Name);
                BsonSerializer.Serialize(bsonWriter, field.FieldType, field.GetValue(value));
            });
            
    type.GetProperties(BindingFlags.Instance | BindingFlags.Public)
        .Where(prop => prop.CanWrite)
        .ToList()
        .ForEach(prop =>
            {
                bsonWriter.WriteName(prop.Name);
                BsonSerializer.Serialize(bsonWriter, prop.PropertyType, prop.GetValue(value, null));
            });
    bsonWriter.WriteEndDocument();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
877
3
Gpt3D_Clone877_3.cs 1 22
Gpt3D_Clone877_3.cs 23 46
----------------------------------------

public override void Serialize (BsonSerializationContext context, BsonSerializationArgs args, T value) {
    var nominalType = args.NominalType;
    var fields = nominalType.GetFields (BindingFlags.Instance | BindingFlags.Public);
    var propsAll = nominalType.GetProperties (BindingFlags.Instance | BindingFlags.Public);
    var props = new List < PropertyInfo > ();
    foreach (var prop in propsAll) {
        if (prop.CanWrite) {
            props.Add (prop);
        }
    }
    var bsonWriter = context.Writer;
    bsonWriter.WriteStartDocument ();
    foreach (var field in fields) {
        bsonWriter.WriteName (field.Name);
        BsonSerializer.Serialize (bsonWriter, field.FieldType, field.GetValue (value));
    }
    foreach (var prop in props) {
        bsonWriter.WriteName (prop.Name);
        BsonSerializer.Serialize (bsonWriter, prop.PropertyType, prop.GetValue (value, null));
    }
    bsonWriter.WriteEndDocument ();
}
----------------------------------------

 public override void Serialize (BsonSerializationContext context, BsonSerializationArgs args, T value) {
    var type = args.NominalType;
 
    var bsonWriter = context.Writer;
    bsonWriter.WriteStartDocument();
    foreach (var field in type.GetFields(BindingFlags.Instance | BindingFlags.Public))
    {
        bsonWriter.WriteName(field.Name);
        BsonSerializer.Serialize(bsonWriter, field.FieldType, field.GetValue(value));
    }
 
    foreach (var prop in type.GetProperties(BindingFlags.Instance | BindingFlags.Public))
    {
        if (prop.CanWrite) {
            bsonWriter.WriteName(prop.Name);
            BsonSerializer.Serialize(bsonWriter, prop.PropertyType, prop.GetValue(value, null));
        }
    }
 
    bsonWriter.WriteEndDocument();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
877
4
Gpt3D_Clone877_4.cs 1 22
Gpt3D_Clone877_4.cs 23 44
----------------------------------------

public override void Serialize (BsonSerializationContext context, BsonSerializationArgs args, T value) {
    var nominalType = args.NominalType;
    var fields = nominalType.GetFields (BindingFlags.Instance | BindingFlags.Public);
    var propsAll = nominalType.GetProperties (BindingFlags.Instance | BindingFlags.Public);
    var props = new List < PropertyInfo > ();
    foreach (var prop in propsAll) {
        if (prop.CanWrite) {
            props.Add (prop);
        }
    }
    var bsonWriter = context.Writer;
    bsonWriter.WriteStartDocument ();
    foreach (var field in fields) {
        bsonWriter.WriteName (field.Name);
        BsonSerializer.Serialize (bsonWriter, field.FieldType, field.GetValue (value));
    }
    foreach (var prop in props) {
        bsonWriter.WriteName (prop.Name);
        BsonSerializer.Serialize (bsonWriter, prop.PropertyType, prop.GetValue (value, null));
    }
    bsonWriter.WriteEndDocument ();
}
----------------------------------------

 public override void Serialize(BsonSerializationContext context, BsonSerializationArgs args, T value)
{
    var type = args.NominalType;
    var bsonWriter = context.Writer;
    bsonWriter.WriteStartDocument();
    foreach(var field in type.GetFields(BindingFlags.Instance | BindingFlags.Public))
    {
        bsonWriter.WriteName(field.Name);
        BsonSerializer.Serialize(bsonWriter, field.FieldType, field.GetValue(value));
    }
    foreach(var prop in type.GetProperties(BindingFlags.Instance | BindingFlags.Public).Where(p => p.CanWrite))
    {
        bsonWriter.WriteName(prop.Name);
        BsonSerializer.Serialize(bsonWriter, prop.PropertyType, prop.GetValue(value, null));
    }
    bsonWriter.WriteEndDocument();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
877
5
Gpt3D_Clone877_5.cs 1 22
Gpt3D_Clone877_5.cs 23 47
----------------------------------------

public override void Serialize (BsonSerializationContext context, BsonSerializationArgs args, T value) {
    var nominalType = args.NominalType;
    var fields = nominalType.GetFields (BindingFlags.Instance | BindingFlags.Public);
    var propsAll = nominalType.GetProperties (BindingFlags.Instance | BindingFlags.Public);
    var props = new List < PropertyInfo > ();
    foreach (var prop in propsAll) {
        if (prop.CanWrite) {
            props.Add (prop);
        }
    }
    var bsonWriter = context.Writer;
    bsonWriter.WriteStartDocument ();
    foreach (var field in fields) {
        bsonWriter.WriteName (field.Name);
        BsonSerializer.Serialize (bsonWriter, field.FieldType, field.GetValue (value));
    }
    foreach (var prop in props) {
        bsonWriter.WriteName (prop.Name);
        BsonSerializer.Serialize (bsonWriter, prop.PropertyType, prop.GetValue (value, null));
    }
    bsonWriter.WriteEndDocument ();
}
----------------------------------------

 public override void Serialize (BsonSerializationContext context, BsonSerializationArgs args, T value) {
                var nominalType = args.NominalType;
                var bsonWriter = context.Writer;
                bsonWriter.WriteStartDocument ();
            
                foreach (var field in nominalType.GetFields (BindingFlags.Instance | BindingFlags.Public)) {
                    bsonWriter.WriteName (field.Name);
                    BsonSerializer.Serialize (bsonWriter, field.FieldType, field.GetValue (value));
                }
            
                foreach (var prop in GetWriteableProperties (nominalType)) {
                    bsonWriter.WriteName (prop.Name);
                    BsonSerializer.Serialize (bsonWriter, prop.PropertyType, prop.GetValue (value, null));
                }
            
                bsonWriter.WriteEndDocument ();
            }
            private IEnumerable < PropertyInfo > GetWriteableProperties(Type type)
            {
                var propsAll = type.GetProperties(BindingFlags.Instance | BindingFlags.Public);
                return propsAll.Where(prop => prop.CanWrite); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
877
6
Gpt3D_Clone877_6.cs 1 22
Gpt3D_Clone877_6.cs 23 50
----------------------------------------

public override void Serialize (BsonSerializationContext context, BsonSerializationArgs args, T value) {
    var nominalType = args.NominalType;
    var fields = nominalType.GetFields (BindingFlags.Instance | BindingFlags.Public);
    var propsAll = nominalType.GetProperties (BindingFlags.Instance | BindingFlags.Public);
    var props = new List < PropertyInfo > ();
    foreach (var prop in propsAll) {
        if (prop.CanWrite) {
            props.Add (prop);
        }
    }
    var bsonWriter = context.Writer;
    bsonWriter.WriteStartDocument ();
    foreach (var field in fields) {
        bsonWriter.WriteName (field.Name);
        BsonSerializer.Serialize (bsonWriter, field.FieldType, field.GetValue (value));
    }
    foreach (var prop in props) {
        bsonWriter.WriteName (prop.Name);
        BsonSerializer.Serialize (bsonWriter, prop.PropertyType, prop.GetValue (value, null));
    }
    bsonWriter.WriteEndDocument ();
}
----------------------------------------

 public override void Serialize(BsonSerializationContext context, BsonSerializationArgs args, T value) {
            var nominalType = args.NominalType;
            var bsonWriter = context.Writer;
            bsonWriter.WriteStartDocument();
            foreach (var field in nominalType.GetFields(BindingFlags.Instance | BindingFlags.Public))
            {
                bsonWriter.WriteName(field.Name);
                BsonSerializer.Serialize(bsonWriter, field.FieldType, field.GetValue(value));
            }
            foreach (var prop in GetWriteableProperties(nominalType))
            {
                bsonWriter.WriteName(prop.Name);
                BsonSerializer.Serialize(bsonWriter, prop.PropertyType, prop.GetValue(value, null));
            }
            bsonWriter.WriteEndDocument();
        }
        
        private List < PropertyInfo > GetWriteableProperties(Type type)
        {
            var propsAll = type.GetProperties(BindingFlags.Instance | BindingFlags.Public);
            return propsAll.Where(prop => prop.CanWrite).ToList(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
879
0
Gpt3D_Clone879_0.cs 1 13
Gpt3D_Clone879_0.cs 14 33
----------------------------------------

void browser_DocumentCompleted (object sender, WebBrowserDocumentCompletedEventArgs e) {
    WebBrowser browser = (WebBrowser) sender;
    HtmlElement expandDetails = browser.Document.GetElementById ("form:SummarySubView:closedToggleControl");
    if (expandDetails == null) {
    } else {
        expandDetails.InvokeMember ("click");
        while (expandDetails != null) {
            expandDetails = browser.Document.GetElementById ("form:SummarySubView0:closedToggleControl");
            Application.DoEvents ();
            System.Threading.Thread.Sleep (200);
        }
    }
}
----------------------------------------

 void browser_DocumentCompleted (object sender, WebBrowserDocumentCompletedEventArgs e) { 
   WebBrowser browser = (WebBrowser)sender; 
   HtmlElement expandDetails = browser.Document.GetElementById ("form:SummarySubView:closedToggleControl"); 
   if (expandDetails != null) { 
        expandDetails.InvokeMember ("click"); 
    } 
    bool finished = false; 
   while (!finished) { 
      expandDetails = browser.Document.GetElementById ("form:SummarySubView0:closedToggleControl"); 
      if (expandDetails == null) {
           finished = true; 
      } 
      else {
            Application.DoEvents (); 
            System.Threading.Thread.Sleep (200); 
       } 
   }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
879
1
Gpt3D_Clone879_1.cs 1 13
Gpt3D_Clone879_1.cs 14 28
----------------------------------------

void browser_DocumentCompleted (object sender, WebBrowserDocumentCompletedEventArgs e) {
    WebBrowser browser = (WebBrowser) sender;
    HtmlElement expandDetails = browser.Document.GetElementById ("form:SummarySubView:closedToggleControl");
    if (expandDetails == null) {
    } else {
        expandDetails.InvokeMember ("click");
        while (expandDetails != null) {
            expandDetails = browser.Document.GetElementById ("form:SummarySubView0:closedToggleControl");
            Application.DoEvents ();
            System.Threading.Thread.Sleep (200);
        }
    }
}
----------------------------------------

 void browser_DocumentCompleted (object sender, WebBrowserDocumentCompletedEventArgs e) { 
   WebBrowser browser = (WebBrowser)sender; 
   HtmlElement expandDetails = browser.Document.GetElementById ("form:SummarySubView:closedToggleControl"); 
   if (expandDetails != null) { 
        expandDetails.InvokeMember ("click"); 
        while (expandDetails != null) { 
            expandDetails = browser.Document.GetElementById ("form:SummarySubView0:closedToggleControl"); 
            System.Timers.Timer timer = new System.Timers.Timer (200); 
            timer.Enabled = true; 
            timer.Start ();
        } 
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
879
2
Gpt3D_Clone879_2.cs 1 13
Gpt3D_Clone879_2.cs 14 27
----------------------------------------

void browser_DocumentCompleted (object sender, WebBrowserDocumentCompletedEventArgs e) {
    WebBrowser browser = (WebBrowser) sender;
    HtmlElement expandDetails = browser.Document.GetElementById ("form:SummarySubView:closedToggleControl");
    if (expandDetails == null) {
    } else {
        expandDetails.InvokeMember ("click");
        while (expandDetails != null) {
            expandDetails = browser.Document.GetElementById ("form:SummarySubView0:closedToggleControl");
            Application.DoEvents ();
            System.Threading.Thread.Sleep (200);
        }
    }
}
----------------------------------------

 void browser_DocumentCompleted (object sender, WebBrowserDocumentCompletedEventArgs e) { 
   WebBrowser browser = (WebBrowser)sender; 
   HtmlElement expandDetails = browser.Document.GetElementById ("form:SummarySubView:closedToggleControl"); 
   while (expandDetails != null) {
        if (expandDetails != null) { 
            expandDetails.InvokeMember ("click"); 
        }
       expandDetails = browser.Document.GetElementById ("form:SummarySubView0:closedToggleControl"); 
        Application.DoEvents (); 
        System.Threading.Thread.Sleep (200); 
   }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
879
3
Gpt3D_Clone879_3.cs 1 13
Gpt3D_Clone879_3.cs 14 27
----------------------------------------

void browser_DocumentCompleted (object sender, WebBrowserDocumentCompletedEventArgs e) {
    WebBrowser browser = (WebBrowser) sender;
    HtmlElement expandDetails = browser.Document.GetElementById ("form:SummarySubView:closedToggleControl");
    if (expandDetails == null) {
    } else {
        expandDetails.InvokeMember ("click");
        while (expandDetails != null) {
            expandDetails = browser.Document.GetElementById ("form:SummarySubView0:closedToggleControl");
            Application.DoEvents ();
            System.Threading.Thread.Sleep (200);
        }
    }
}
----------------------------------------

 void browser_DocumentCompleted (object sender, WebBrowserDocumentCompletedEventArgs e) { 
   WebBrowser browser = (WebBrowser)sender; 
   HtmlElement expandDetails = browser.Document.GetElementById ("form:SummarySubView:closedToggleControl"); 
   if (expandDetails != null) { 
        expandDetails.InvokeMember ("click"); 
        expandDetails = browser.Document.GetElementById ("form:SummarySubView0:closedToggleControl"); 
        while(expandDetails != null) { 
            Application.DoEvents (); 
            System.Threading.Thread.Sleep (200); 
        } 
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
879
4
Gpt3D_Clone879_4.cs 1 13
Gpt3D_Clone879_4.cs 14 27
----------------------------------------

void browser_DocumentCompleted (object sender, WebBrowserDocumentCompletedEventArgs e) {
    WebBrowser browser = (WebBrowser) sender;
    HtmlElement expandDetails = browser.Document.GetElementById ("form:SummarySubView:closedToggleControl");
    if (expandDetails == null) {
    } else {
        expandDetails.InvokeMember ("click");
        while (expandDetails != null) {
            expandDetails = browser.Document.GetElementById ("form:SummarySubView0:closedToggleControl");
            Application.DoEvents ();
            System.Threading.Thread.Sleep (200);
        }
    }
}
----------------------------------------

 void browser_DocumentCompleted (object sender, WebBrowserDocumentCompletedEventArgs e) { 
   WebBrowser browser = (WebBrowser)sender; 
   HtmlElement expandDetails = browser.Document.GetElementById ("form:SummarySubView:closedToggleControl"); 
   while (expandDetails != null) {
        if (expandDetails != null) { 
            expandDetails = browser.Document.GetElementById ("form:SummarySubView0:closedToggleControl"); 
            expandDetails.InvokeMember ("click"); 
        }
        Application.DoEvents (); 
        System.Threading.Thread.Sleep (200); 
   }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
879
5
Gpt3D_Clone879_5.cs 1 13
Gpt3D_Clone879_5.cs 14 26
----------------------------------------

void browser_DocumentCompleted (object sender, WebBrowserDocumentCompletedEventArgs e) {
    WebBrowser browser = (WebBrowser) sender;
    HtmlElement expandDetails = browser.Document.GetElementById ("form:SummarySubView:closedToggleControl");
    if (expandDetails == null) {
    } else {
        expandDetails.InvokeMember ("click");
        while (expandDetails != null) {
            expandDetails = browser.Document.GetElementById ("form:SummarySubView0:closedToggleControl");
            Application.DoEvents ();
            System.Threading.Thread.Sleep (200);
        }
    }
}
----------------------------------------

 void browser_DocumentCompleted (object sender, WebBrowserDocumentCompletedEventArgs e) { 
   WebBrowser browser = (WebBrowser)sender; 
   HtmlElement expandDetails = browser.Document.GetElementById ("form:SummarySubView:closedToggleControl"); 
   if (expandDetails != null) { 
        expandDetails.InvokeMember ("click"); 
        while (expandDetails != null) { 
            expandDetails = browser.Document.GetElementById("form:SummarySubView0:closedToggleControl"); 
            Application.DoEvents (); 
       } 
   }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
87
0
Gpt3D_Clone87_0.cs 1 20
Gpt3D_Clone87_0.cs 21 38
----------------------------------------

public void question () {
    switch (questionNr) {
        case 1 :
            questionLabel.Text = "What is Chuck's full name?";
            ans1.Text = "Charles Irving Bartowski";
            ans2.Text = "Charles Richard Bartowski";
            ans3.Text = "Charles Luke Bartowski";
            ans4.Text = "Zachary Strahovski";
            break;
        case 2 :
            questionLabel.Text = "Who/what is Orion?";
            ans1.Text = "Original name of the Intersect";
            ans2.Text = "Alias of a secret mission";
            ans3.Text = "Morgan's Xbox";
            ans4.Text = "Chuck's father";
            break;
        case 3 :
            break;
    }
}
----------------------------------------

 
public void question (int questionNr) {
    if (questionNr == 1) {
        questionLabel.Text = "What is Chuck's full name?";
        ans1.Text = "Charles Irving Bartowski";
        ans2.Text = "Charles Richard Bartowski";
        ans3.Text = "Charles Luke Bartowski";
        ans4.Text = "Zachary Strahovski";
    } else if (questionNr == 2) {
        questionLabel.Text = "Who/what is Orion?";
        ans1.Text = "Original name of the Intersect";
        ans2.Text = "Alias of a secret mission";
        ans3.Text = "Morgan's Xbox";
        ans4.Text = "Chuck's father";
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
87
1
Gpt3D_Clone87_1.cs 1 20
Gpt3D_Clone87_1.cs 21 66
----------------------------------------

public void question () {
    switch (questionNr) {
        case 1 :
            questionLabel.Text = "What is Chuck's full name?";
            ans1.Text = "Charles Irving Bartowski";
            ans2.Text = "Charles Richard Bartowski";
            ans3.Text = "Charles Luke Bartowski";
            ans4.Text = "Zachary Strahovski";
            break;
        case 2 :
            questionLabel.Text = "Who/what is Orion?";
            ans1.Text = "Original name of the Intersect";
            ans2.Text = "Alias of a secret mission";
            ans3.Text = "Morgan's Xbox";
            ans4.Text = "Chuck's father";
            break;
        case 3 :
            break;
    }
}
----------------------------------------

// 5.
// HashMap<Integer, String[]> questions = new HashMap<>(); 
// questions.put(1, new String[]{"What is Chuck's full name?", "Charles Irving Bartowski", "Charles Richard Bartowski", "Charles Luke Bartowski", "Zachary Strahovski"}); 
// questions.put(2, new String[]{"Who/what is Orion?", "Original name of the Intersect", "Alias of a secret mission", "Morgan's Xbox", "Chuck's father"})
// public void question (int questionNr) {
//     if (questions.containsKey(questionNr)) { 
//         String[] questionDetails = questions.get(questionNr);
//         questionLabel.Text = questionDetails[0];
//         ans1.Text = questionDetails[1];
//         ans2.Text = questionDetails[2];
//         ans3.Text = questionDetails[3];
//         ans4.Text = questionDetails[4]; 
//     }
// }
 public void question (int questionNr) {
                switch (questionNr) {
                    case 1 :
                        askQuestion(1);
                        break;
                    case 2 :
                        askQuestion(2);
                        break;
                    case 3 :
                        break;
                }
            }
            public void askQuestion(int questionNr) {
                if (questionNr == 1) {
                    questionLabel.Text = "What is Chuck's full name?";
                    ans1.Text = "Charles Irving Bartowski";
                    ans2.Text = "Charles Richard Bartowski";
                    ans3.Text = "Charles Luke Bartowski";
                    ans4.Text = "Zachary Strahovski";
                } else if (questionNr == 2) {
                    questionLabel.Text = "Who/what is Orion?";
                    ans1.Text = "Original name of the Intersect";
                    ans2.Text = "Alias of a secret mission";
                    ans3.Text = "Morgan's Xbox";
                    ans4.Text = "Chuck's father";
                } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
87
2
Gpt3D_Clone87_2.cs 1 20
Gpt3D_Clone87_2.cs 21 51
----------------------------------------

public void question () {
    switch (questionNr) {
        case 1 :
            questionLabel.Text = "What is Chuck's full name?";
            ans1.Text = "Charles Irving Bartowski";
            ans2.Text = "Charles Richard Bartowski";
            ans3.Text = "Charles Luke Bartowski";
            ans4.Text = "Zachary Strahovski";
            break;
        case 2 :
            questionLabel.Text = "Who/what is Orion?";
            ans1.Text = "Original name of the Intersect";
            ans2.Text = "Alias of a secret mission";
            ans3.Text = "Morgan's Xbox";
            ans4.Text = "Chuck's father";
            break;
        case 3 :
            break;
    }
}
----------------------------------------

 
public void question (int questionNr) {
                switch (questionNr) {
                    case 1 :
                        askQuestion(questionLabel, ans1, ans2, ans3, ans4, questionNr);
                        break;
                    case 2 :
                        askQuestion(questionLabel, ans1, ans2, ans3, ans4, questionNr);
                        break;
                    case 3 :
                        break;
                }
            }
            public void askQuestion(TextView questionLabel, TextView ans1, TextView ans2, TextView ans3, TextView ans4, int questionNr) {
                if (questionNr == 1) {
                    questionLabel.Text = "What is Chuck's full name?";
                    ans1.Text = "Charles Irving Bartowski";
                    ans2.Text = "Charles Richard Bartowski";
                    ans3.Text = "Charles Luke Bartowski";
                    ans4.Text = "Zachary Strahovski";
                } else if (questionNr == 2) {
                    questionLabel.Text = "Who/what is Orion?";
                    ans1.Text = "Original name of the Intersect";
                    ans2.Text = "Alias of a secret mission";
                    ans3.Text = "Morgan's Xbox";
                    ans4.Text = "Chuck's father";
                } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
880
0
Gpt3D_Clone880_0.cs 1 11
Gpt3D_Clone880_0.cs 12 26
----------------------------------------

protected override void WndProc (ref Message m) {
    switch (m.Msg) {
        case 0x46 :
            this.HandleWindowPosChanging (ref m);
            base.WndProc (ref m);
            break;
        default :
            base.WndProc (ref m);
            break;
    }
}
----------------------------------------

	protected override void WndProc (ref Message m) {
    switch (m.Msg) {
        case 0x46 :
            this.HandleWindowPosChanging (ref m);
            base.WndProc (ref m);
            break; 
        case 0x400e:
            break;
        default :
            break;
    }
    base.WndProc (ref m);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
880
1
Gpt3D_Clone880_1.cs 1 11
Gpt3D_Clone880_1.cs 12 26
----------------------------------------

protected override void WndProc (ref Message m) {
    switch (m.Msg) {
        case 0x46 :
            this.HandleWindowPosChanging (ref m);
            base.WndProc (ref m);
            break;
        default :
            base.WndProc (ref m);
            break;
    }
}
----------------------------------------

	protected override void WndProc (ref Message m) {
    switch (m.Msg) {
        case 0x13 :
            this.HandleWindowPosChanging (ref m);
            base.WndProc (ref m);
            break; 
        case 0x11ac:
            break;
        default :
            break;
    }
    base.WndProc (ref m);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
880
2
Gpt3D_Clone880_2.cs 1 11
Gpt3D_Clone880_2.cs 12 26
----------------------------------------

protected override void WndProc (ref Message m) {
    switch (m.Msg) {
        case 0x46 :
            this.HandleWindowPosChanging (ref m);
            base.WndProc (ref m);
            break;
        default :
            base.WndProc (ref m);
            break;
    }
}
----------------------------------------

	protected override void WndProc (ref Message m) {
    switch (m.Msg) {
        case 0x36 :
            this.HandleWindowPosChanging (ref m);
            base.WndProc (ref m);
            break; 
        case 0x2003:
            break;
        default :
            break;
    }
    base.WndProc (ref m);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
880
3
Gpt3D_Clone880_3.cs 1 11
Gpt3D_Clone880_3.cs 12 26
----------------------------------------

protected override void WndProc (ref Message m) {
    switch (m.Msg) {
        case 0x46 :
            this.HandleWindowPosChanging (ref m);
            base.WndProc (ref m);
            break;
        default :
            base.WndProc (ref m);
            break;
    }
}
----------------------------------------

	protected override void WndProc (ref Message m) {
    switch (m.Msg) {
        case 0x47 :
            this.HandleWindowPosChanging (ref m);
            base.WndProc (ref m);
            break; 
        case 0x421f:
            break;
        default :
            break;
    }
    base.WndProc (ref m);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
880
4
Gpt3D_Clone880_4.cs 1 11
Gpt3D_Clone880_4.cs 12 26
----------------------------------------

protected override void WndProc (ref Message m) {
    switch (m.Msg) {
        case 0x46 :
            this.HandleWindowPosChanging (ref m);
            base.WndProc (ref m);
            break;
        default :
            base.WndProc (ref m);
            break;
    }
}
----------------------------------------

	protected override void WndProc (ref Message m) {
    switch (m.Msg) {
        case 0x27 :
            this.HandleWindowPosChanging (ref m);
            base.WndProc (ref m);
            break; 
        case 0xd384:
            break;
        default :
            break;
    }
    base.WndProc (ref m);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
880
5
Gpt3D_Clone880_5.cs 1 11
Gpt3D_Clone880_5.cs 12 26
----------------------------------------

protected override void WndProc (ref Message m) {
    switch (m.Msg) {
        case 0x46 :
            this.HandleWindowPosChanging (ref m);
            base.WndProc (ref m);
            break;
        default :
            base.WndProc (ref m);
            break;
    }
}
----------------------------------------

	protected override void WndProc (ref Message m) {
    switch (m.Msg) {
        case 0x37 :
            this.HandleWindowPosChanging (ref m);
            base.WndProc (ref m);
            break; 
        case 0xa000:
            break;
        default :
            break;
    }
    base.WndProc (ref m);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
880
6
Gpt3D_Clone880_6.cs 1 11
Gpt3D_Clone880_6.cs 12 26
----------------------------------------

protected override void WndProc (ref Message m) {
    switch (m.Msg) {
        case 0x46 :
            this.HandleWindowPosChanging (ref m);
            base.WndProc (ref m);
            break;
        default :
            base.WndProc (ref m);
            break;
    }
}
----------------------------------------

	protected override void WndProc (ref Message m) {
    switch (m.Msg) {
        case 0x464 :
            this.HandleWindowPosChanging (ref m);
            base.WndProc (ref m);
            break; 
        case 0x2011:
            break;
        default :
            break;
    }
    base.WndProc (ref m);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
880
7
Gpt3D_Clone880_7.cs 1 11
Gpt3D_Clone880_7.cs 12 26
----------------------------------------

protected override void WndProc (ref Message m) {
    switch (m.Msg) {
        case 0x46 :
            this.HandleWindowPosChanging (ref m);
            base.WndProc (ref m);
            break;
        default :
            base.WndProc (ref m);
            break;
    }
}
----------------------------------------

	protected override void WndProc (ref Message m) {
    switch (m.Msg) {
        case 0x4b :
            this.HandleWindowPosChanging (ref m);
            base.WndProc (ref m);
            break; 
        case 0x683e:
            break;
        default :
            break;
    }
    base.WndProc (ref m);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
880
8
Gpt3D_Clone880_8.cs 1 11
Gpt3D_Clone880_8.cs 12 25
----------------------------------------

protected override void WndProc (ref Message m) {
    switch (m.Msg) {
        case 0x46 :
            this.HandleWindowPosChanging (ref m);
            base.WndProc (ref m);
            break;
        default :
            base.WndProc (ref m);
            break;
    }
}
----------------------------------------

	protected override void WndProc (ref Message m) {
    switch (m.Msg) {
        case 0x46 :
            this.HandleWindowPosChanging (ref m);
            break;    
        case 0x20a :
            break;
        default :
            break;
    }
    base.WndProc (ref m);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
882
0
Gpt3D_Clone882_0.cs 1 39
Gpt3D_Clone882_0.cs 40 85
----------------------------------------

private void PopulateBlock (RichTextBlock Blocker) {
    bool firstItem = true;
    int firstLength = 0;
    Paragraph paraItem = null;
    Run itemRun = null;
    string CurrentIsle = "None";
    foreach (Grocery j in Grocs) {
        if (j.Isle != CurrentIsle) {
            if ((CurrentIsle != "None") && (! firstItem)) {
                paraItem.Inlines.Add (itemRun);
                Blocker.Blocks.Add (paraItem);
            }
            CurrentIsle = j.Isle;
            firstItem = true;
            Paragraph paraIsle = new Paragraph ();
            Run paraRan = new Run ();
            paraRan.Text = "     " + j.Isle;
            paraIsle.Inlines.Add (paraRan);
            Blocker.Blocks.Add (paraIsle);
        }
        if (firstItem) {
            paraItem = new Paragraph ();
            itemRun = new Run ();
            itemRun.Text = "        [] " + j.Item;
            firstLength = j.Item.Length;
            firstItem = false;
        } else {
            firstItem = true;
            string s = new string (' ', 30 - firstLength);
            itemRun.Text += s + "[] " + j.Item;
            paraItem.Inlines.Add (itemRun);
            Blocker.Blocks.Add (paraItem);
        }
    }
    if (! firstItem) {
        paraItem.Inlines.Add (itemRun);
        Blocker.Blocks.Add (paraItem);
    }
}
----------------------------------------

 private void PopulateBlock (RichTextBlock Blocker)
    {
        string CurrentIsle = "None";
        Paragraph paraItem = null;
        Run itemRun = null;
        bool firstItem = true;
        int firstLength = 0;
        foreach (Grocery j in Grocs)
        {
            if (CurrentIsle != j.Isle)
            {
                paraItem = new Paragraph();
                Run paraRan = new Run();
                paraRan.Text = "     " + j.Isle;
                paraItem.Inlines.Add(paraRan);
                Blocker.Blocks.Add(paraItem);
                CurrentIsle = j.Isle;
                firstItem = true;
            }
            if (firstItem == true)
            {
                paraItem = new Paragraph();
                itemRun = new Run();
                itemRun.Text = "        [] " + j.Item;
                firstLength = j.Item.Length;
                firstItem = false;
            }
            else
            {
                firstItem = true;
                string str = new string(' ', 30 - firstLength);
                itemRun.Text += str + "[] "+ j.Item;
                paraItem.Inlines.Add(itemRun);
                Blocker.Blocks.Add(paraItem);
            }
        }
        if (firstItem == false)
        {
            paraItem.Inlines.Add(itemRun);
            Blocker.Blocks.Add(paraItem);
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
882
1
Gpt3D_Clone882_1.cs 1 39
Gpt3D_Clone882_1.cs 40 84
----------------------------------------

private void PopulateBlock (RichTextBlock Blocker) {
    bool firstItem = true;
    int firstLength = 0;
    Paragraph paraItem = null;
    Run itemRun = null;
    string CurrentIsle = "None";
    foreach (Grocery j in Grocs) {
        if (j.Isle != CurrentIsle) {
            if ((CurrentIsle != "None") && (! firstItem)) {
                paraItem.Inlines.Add (itemRun);
                Blocker.Blocks.Add (paraItem);
            }
            CurrentIsle = j.Isle;
            firstItem = true;
            Paragraph paraIsle = new Paragraph ();
            Run paraRan = new Run ();
            paraRan.Text = "     " + j.Isle;
            paraIsle.Inlines.Add (paraRan);
            Blocker.Blocks.Add (paraIsle);
        }
        if (firstItem) {
            paraItem = new Paragraph ();
            itemRun = new Run ();
            itemRun.Text = "        [] " + j.Item;
            firstLength = j.Item.Length;
            firstItem = false;
        } else {
            firstItem = true;
            string s = new string (' ', 30 - firstLength);
            itemRun.Text += s + "[] " + j.Item;
            paraItem.Inlines.Add (itemRun);
            Blocker.Blocks.Add (paraItem);
        }
    }
    if (! firstItem) {
        paraItem.Inlines.Add (itemRun);
        Blocker.Blocks.Add (paraItem);
    }
}
----------------------------------------

  private void PopulateBlock(RichTextBlock Blocker)
    {
        string CurrentIsle = "None";
        int firstLength = 0;
        bool firstItem = true;
        Paragraph paraItem = null;
        Run itemRun = null;
        string s = "";
        foreach (Grocery j in Grocs)
        {
            if (CurrentIsle != j.Isle)
            {
                paraItem = new Paragraph();
                Run paraRan = new Run();
                paraRan.Text = "     " + j.Isle;
                paraItem.Inlines.Add(paraRan);
                Blocker.Blocks.Add(paraItem);
                CurrentIsle = j.Isle;
                firstItem = true;
            }
            paraItem = new Paragraph();
            itemRun = new Run();
            if (firstItem == true)
            {
                itemRun.Text += "        [] " + j.Item;
                firstLength = j.Item.Length;
                firstItem = false;
            }
            else
            {
                firstItem = true;
                s = new string (' ', 30 - firstLength);
                itemRun.Text += s + "[] " + j.Item;
            }
            paraItem.Inlines.Add(itemRun);
            Blocker.Blocks.Add(paraItem);
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
882
2
Gpt3D_Clone882_2.cs 1 39
Gpt3D_Clone882_2.cs 40 82
----------------------------------------

private void PopulateBlock (RichTextBlock Blocker) {
    bool firstItem = true;
    int firstLength = 0;
    Paragraph paraItem = null;
    Run itemRun = null;
    string CurrentIsle = "None";
    foreach (Grocery j in Grocs) {
        if (j.Isle != CurrentIsle) {
            if ((CurrentIsle != "None") && (! firstItem)) {
                paraItem.Inlines.Add (itemRun);
                Blocker.Blocks.Add (paraItem);
            }
            CurrentIsle = j.Isle;
            firstItem = true;
            Paragraph paraIsle = new Paragraph ();
            Run paraRan = new Run ();
            paraRan.Text = "     " + j.Isle;
            paraIsle.Inlines.Add (paraRan);
            Blocker.Blocks.Add (paraIsle);
        }
        if (firstItem) {
            paraItem = new Paragraph ();
            itemRun = new Run ();
            itemRun.Text = "        [] " + j.Item;
            firstLength = j.Item.Length;
            firstItem = false;
        } else {
            firstItem = true;
            string s = new string (' ', 30 - firstLength);
            itemRun.Text += s + "[] " + j.Item;
            paraItem.Inlines.Add (itemRun);
            Blocker.Blocks.Add (paraItem);
        }
    }
    if (! firstItem) {
        paraItem.Inlines.Add (itemRun);
        Blocker.Blocks.Add (paraItem);
    }
}
----------------------------------------

  private void PopulateBlock(RichTextBlock Blocker)
    {
        string CurrentIsle = "None";
        int firstLength = 0;
        bool firstItem = true;
        Paragraph paraItem = null;
        Run itemRun = null;
        string s = "";
        foreach (Grocery j in Grocs)
        {
            if (CurrentIsle != j.Isle)
            {
                CurrentIsle = j.Isle;
                paraItem = new Paragraph();
                Run paraRan = new Run();
                paraRan.Text = j.Isle;
                paraItem.Inlines.Add(paraRan);
                Blocker.Blocks.Add(paraItem);
            }
            paraItem = new Paragraph();
            itemRun = new Run();
            if (firstItem == true)
            {
                itemRun.Text += "        [] " + j.Item;
                firstLength = j.Item.Length;
                firstItem = false;
            }
            else
            {
                firstItem = true;
                s = new string (' ', 30 - firstLength);
                itemRun.Text += s + "[] " + j.Item;
            }
            paraItem.Inlines.Add(itemRun);
            Blocker.Blocks.Add(paraItem);
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
882
3
Gpt3D_Clone882_3.cs 1 39
Gpt3D_Clone882_3.cs 40 82
----------------------------------------

private void PopulateBlock (RichTextBlock Blocker) {
    bool firstItem = true;
    int firstLength = 0;
    Paragraph paraItem = null;
    Run itemRun = null;
    string CurrentIsle = "None";
    foreach (Grocery j in Grocs) {
        if (j.Isle != CurrentIsle) {
            if ((CurrentIsle != "None") && (! firstItem)) {
                paraItem.Inlines.Add (itemRun);
                Blocker.Blocks.Add (paraItem);
            }
            CurrentIsle = j.Isle;
            firstItem = true;
            Paragraph paraIsle = new Paragraph ();
            Run paraRan = new Run ();
            paraRan.Text = "     " + j.Isle;
            paraIsle.Inlines.Add (paraRan);
            Blocker.Blocks.Add (paraIsle);
        }
        if (firstItem) {
            paraItem = new Paragraph ();
            itemRun = new Run ();
            itemRun.Text = "        [] " + j.Item;
            firstLength = j.Item.Length;
            firstItem = false;
        } else {
            firstItem = true;
            string s = new string (' ', 30 - firstLength);
            itemRun.Text += s + "[] " + j.Item;
            paraItem.Inlines.Add (itemRun);
            Blocker.Blocks.Add (paraItem);
        }
    }
    if (! firstItem) {
        paraItem.Inlines.Add (itemRun);
        Blocker.Blocks.Add (paraItem);
    }
}
----------------------------------------

  private void PopulateBlock(RichTextBlock Blocker)
    {
        string CurrentIsle = "None";
        int firstLength = 0;
        bool firstItem = true;
        Paragraph paraItem = null;
        Run itemRun = null;
        string s = "";
        foreach (Grocery j in Grocs)
        {
            if (CurrentIsle != j.Isle)
            {
                CurrentIsle = j.Isle;
                paraItem = new Paragraph();
                Run paraRan = new Run();
                paraRan.Text = "     " + j.Isle;
                paraItem.Inlines.Add(paraRan);
                Blocker.Blocks.Add(paraItem);
            }
            paraItem = new Paragraph();
            itemRun = new Run();
            if (firstItem == true)
            {
                itemRun.Text += "        [] " + j.Item;
                firstLength = j.Item.Length;
                firstItem = false;
            }
            else
            {
                firstItem = true;
                s = new string (' ', 30 - firstLength);
                itemRun.Text += s + "[] " + j.Item;
            }
            paraItem.Inlines.Add(itemRun);
            Blocker.Blocks.Add(paraItem);
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
883
0
Gpt3D_Clone883_0.cs 1 35
Gpt3D_Clone883_0.cs 36 87
----------------------------------------

public static IEnumerable < IEnumerable < T > > GetPermutations < T > (IEnumerable < IEnumerable < T > > lists) {
    if (! lists.Any ()) {
        yield break;
    }
    List < IEnumerator < T > > iterators = new List < IEnumerator < T > > ();
    foreach (var list in lists) {
        var it = list.GetEnumerator ();
        if (! it.MoveNext ()) {
            continue;
        }
        iterators.Add (it);
    }
    bool done = false;
    while (! done) {
        yield return from it in iterators
            select it.Current;
        bool recurse = false;
        var mainIt = iterators.GetEnumerator ();
        mainIt.MoveNext ();
        do
            {
                recurse = false;
                var subIt = mainIt.Current;
                if (! subIt.MoveNext ()) {
                    subIt.Reset ();
                    subIt.MoveNext ();
                    if (! mainIt.MoveNext ()) {
                        done = true;
                    } else {
                        recurse = true;
                    }
                }
            } while (recurse);
    }
}
----------------------------------------

 public static IEnumerable<IEnumerable<T>> GetPermutations<T>(IEnumerable<IEnumerable<T>> lists)
{
    if (!lists.Any())
    {
        yield break;
    }
    
    List<IEnumerator<T>> enumerators = new List<IEnumerator<T>>();
    foreach (var list in lists)
    {
        var it = list.GetEnumerator();
        if (!it.MoveNext())
        {
            continue;
        }
        enumerators.Add(it);
    }
    bool done = false;
    while (!done)
    {
        List<T> block = new List<T>(enumerators.Count);
        for (int i = 0; i < enumerators.Count; i++)
        {
            block[i] = enumerators[i].Current;
        }
        yield return block;
        bool checkAll = false;
        while (!checkAll)
        {
            checkAll = true;
            for (int i = 0; i < enumerators.Count; i++)
            {
                if (enumerators[i].MoveNext())
                {
                    checkAll = false;
                    break;
                }
                else
                {
                    enumerators[i].Reset();
                    enumerators[i].MoveNext();
                }
            }
            if (checkAll)
                done = true;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
886
0
Gpt3D_Clone886_0.cs 1 40
Gpt3D_Clone886_0.cs 41 94
----------------------------------------

[Test] [TestCase ("parralele", "parallel", "par[ralele]")] [TestCase ("personil", "personal", "person[i]l")] [TestCase ("disfuncshunal", "dysfunctional", "d[isfuncshu]nal")] [TestCase ("ato", "auto", "a[]to")] [TestCase ("inactioned", "inaction", "inaction[ed]")] [TestCase ("refraction", "fraction", "[re]fraction")] [TestCase ("adiction", "ad[]diction", "ad[]iction")] public void CompareStringsTest (string attempted, string correct, string expectedResult) {
    int first = - 1, last = - 1;
    string result = null;
    int shorterLength = (attempted.Length < correct.Length ? attempted.Length : correct.Length);
    for (int i = 0; i < shorterLength; i ++) {
        if (correct [i] != attempted [i]) {
            first = i;
            break;
        }
    }
    var a = correct.Reverse ().ToArray ();
    var b = attempted.Reverse ().ToArray ();
    for (int i = 0; i < shorterLength; i ++) {
        if (a [i] != b [i]) {
            last = i;
            break;
        }
    }
    if (first == - 1 && last == - 1)
        result = attempted;
    else {
        var sb = new StringBuilder ();
        if (first == - 1)
            first = shorterLength;
        if (last == - 1)
            last = shorterLength;
        if (first + last > shorterLength)
            last = shorterLength - first;
        if (first > 0)
            sb.Append (attempted.Substring (0, first));
        sb.Append ("[");
        if (last > - 1 && last + first < attempted.Length)
            sb.Append (attempted.Substring (first, attempted.Length - last - first));
        sb.Append ("]");
        if (last > 0)
            sb.Append (attempted.Substring (attempted.Length - last, last));
        result = sb.ToString ();
    }
    Assert.AreEqual (expectedResult, result);
}
----------------------------------------

 [Test] [TestCase("parralele","parallel","par[ralele]")] [TestCase("personil","personal","person[i]l")] [TestCase("disfuncshunal","dysfunctional","d[isfuncshu]nal")] [TestCase("ato","auto","a[]to")] [TestCase("inactioned","inaction","inaction[ed]")] [TestCase("refraction","fraction","[re]fraction")] [TestCase("adiction","addiction","ad[]diction")]  public void CompareStringsTest(string attempted, string correct, string expectedResult){
    int first = -1; 
    int last = -1; 
    string result = null;
    int shorterLength = Math.Min(attempted.Length, correct.Length);
    for (int i = 0; i < shorterLength; i++) 
    { 
        if (attempted[i] != correct[i]) 
        { 
            first = i; 
            break; 
        } 
    }
    for (int i = shorterLength-1; i >= 0 ; i--) 
    { 
        if (attempted[i] != correct[i]) 
        { 
            last = i; 
            break; 
        } 
    }
    if (first == -1 && last == -1) 
            result = attempted; 
    else{
        StringBuilder sb = new StringBuilder();
        if(first == -1){
            first = shorterLength;
        }
        if(last == -1){
            last = shorterLength;
        }
        if(first + last > shorterLength){
            last = shorterLength - first;
        }
        if(first > 0){
            sb.Append(attempted.Substring(0,first));
        }
        sb.Append("[");
        if(last + first < attempted.Length){
            sb.Append(attempted.Substring(first, attempted.Length-last-first));
        }
        sb.Append("]");
        if(last > 0){
            sb.Append(attempted.Substring(attempted.Length-last, last));
        }
        result = sb.ToString();
    }
    Assert.AreEqual(expectedResult, result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
886
1
Gpt3D_Clone886_1.cs 1 40
Gpt3D_Clone886_1.cs 41 100
----------------------------------------

[Test] [TestCase ("parralele", "parallel", "par[ralele]")] [TestCase ("personil", "personal", "person[i]l")] [TestCase ("disfuncshunal", "dysfunctional", "d[isfuncshu]nal")] [TestCase ("ato", "auto", "a[]to")] [TestCase ("inactioned", "inaction", "inaction[ed]")] [TestCase ("refraction", "fraction", "[re]fraction")] [TestCase ("adiction", "ad[]diction", "ad[]iction")] public void CompareStringsTest (string attempted, string correct, string expectedResult) {
    int first = - 1, last = - 1;
    string result = null;
    int shorterLength = (attempted.Length < correct.Length ? attempted.Length : correct.Length);
    for (int i = 0; i < shorterLength; i ++) {
        if (correct [i] != attempted [i]) {
            first = i;
            break;
        }
    }
    var a = correct.Reverse ().ToArray ();
    var b = attempted.Reverse ().ToArray ();
    for (int i = 0; i < shorterLength; i ++) {
        if (a [i] != b [i]) {
            last = i;
            break;
        }
    }
    if (first == - 1 && last == - 1)
        result = attempted;
    else {
        var sb = new StringBuilder ();
        if (first == - 1)
            first = shorterLength;
        if (last == - 1)
            last = shorterLength;
        if (first + last > shorterLength)
            last = shorterLength - first;
        if (first > 0)
            sb.Append (attempted.Substring (0, first));
        sb.Append ("[");
        if (last > - 1 && last + first < attempted.Length)
            sb.Append (attempted.Substring (first, attempted.Length - last - first));
        sb.Append ("]");
        if (last > 0)
            sb.Append (attempted.Substring (attempted.Length - last, last));
        result = sb.ToString ();
    }
    Assert.AreEqual (expectedResult, result);
}
----------------------------------------

 [Test] [TestCase("parralele","parallel","par[ralele]")] [TestCase("personil","personal","person[i]l")] [TestCase("disfuncshunal","dysfunctional","d[isfuncshu]nal")] [TestCase("ato","auto","a[]to")] [TestCase("inactioned","inaction","inaction[ed]")] [TestCase("refraction","fraction","[re]fraction")] [TestCase("adiction","addiction","ad[]diction")]  public void CompareStringsTest(string attempted, string correct, string expectedResult){
    int first = -1;
    int last = -1;
    string result = null;
    int shorterLength = Math.Min(attempted.Length, correct.Length);
    for (int i = 0; i < shorterLength; i++)
    {
        if (attempted[i] != correct[i])
        {
            first = i;
            break;
        }
    }
    for (int i = shorterLength - 1; i >= 0; i--)
    {
        if (attempted[i] != correct[i])
        {
            last = i;
            break;
        }
    }
    if (first == -1 && last == -1)
        result = attempted;
    else
    {
        StringBuilder sb = new StringBuilder();
        if (first == -1)
        {
            first = shorterLength;
        }
        if (last == -1)
        {
            last = shorterLength;
        }
        if (first + last > shorterLength)
        {
            last = shorterLength - first;
        }
        if (first > 0)
        {
            sb.Append(attempted.Substring(0, first));
        }
        sb.Append("[");
        if (last > -1 && last + first < attempted.Length)
        {
            sb.Append(attempted.Substring(first, attempted.Length - last - first));
        }
        sb.Append("]");
        if (last > 0)
        {
            sb.Append(attempted.Substring(attempted.Length - last, last));
        }
        result = sb.ToString();
    }
    Assert.AreEqual(expectedResult, result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
886
2
Gpt3D_Clone886_2.cs 1 40
Gpt3D_Clone886_2.cs 41 87
----------------------------------------

[Test] [TestCase ("parralele", "parallel", "par[ralele]")] [TestCase ("personil", "personal", "person[i]l")] [TestCase ("disfuncshunal", "dysfunctional", "d[isfuncshu]nal")] [TestCase ("ato", "auto", "a[]to")] [TestCase ("inactioned", "inaction", "inaction[ed]")] [TestCase ("refraction", "fraction", "[re]fraction")] [TestCase ("adiction", "ad[]diction", "ad[]iction")] public void CompareStringsTest (string attempted, string correct, string expectedResult) {
    int first = - 1, last = - 1;
    string result = null;
    int shorterLength = (attempted.Length < correct.Length ? attempted.Length : correct.Length);
    for (int i = 0; i < shorterLength; i ++) {
        if (correct [i] != attempted [i]) {
            first = i;
            break;
        }
    }
    var a = correct.Reverse ().ToArray ();
    var b = attempted.Reverse ().ToArray ();
    for (int i = 0; i < shorterLength; i ++) {
        if (a [i] != b [i]) {
            last = i;
            break;
        }
    }
    if (first == - 1 && last == - 1)
        result = attempted;
    else {
        var sb = new StringBuilder ();
        if (first == - 1)
            first = shorterLength;
        if (last == - 1)
            last = shorterLength;
        if (first + last > shorterLength)
            last = shorterLength - first;
        if (first > 0)
            sb.Append (attempted.Substring (0, first));
        sb.Append ("[");
        if (last > - 1 && last + first < attempted.Length)
            sb.Append (attempted.Substring (first, attempted.Length - last - first));
        sb.Append ("]");
        if (last > 0)
            sb.Append (attempted.Substring (attempted.Length - last, last));
        result = sb.ToString ();
    }
    Assert.AreEqual (expectedResult, result);
}
----------------------------------------

 [Test] [TestCase("parralele","parallel","par[ralele]")] [TestCase("personil","personal","person[i]l")] [TestCase("disfuncshunal","dysfunctional","d[isfuncshu]nal")] [TestCase("ato","auto","a[]to")] [TestCase("inactioned","inaction","inaction[ed]")] [TestCase("refraction","fraction","[re]fraction")] [TestCase("adiction","addiction","ad[]diction")]  public void CompareStringsTest(string attempted, string correct, string expectedResult){
    int first = -1;
    int last = -1;
    string result = null;
    int shorterLength = Math.Min(attempted.Length,correct.Length);
    
    for (int i=0; i< shorterLength;i++){
        if (attempted[i] != correct[i]){
              first = i;
              break;
        }
    }
    for (int i = shorterLength-1; i>=0; i--){
        if (attempted[i] != correct[i]){
            last = i;
            break;
        }
    }
    if (first == -1 && last == -1)
        result = attempted;
    else{
        if(first == -1)
            first = shorterLength;
        if(last == -1)
            last = shorterLength;
        if(first + last > shorterLength)
            last  = shorterLength-first;
        if(first>0){
            result = attempted.Substring(0,first);
        }
        result +="[";
        if (last > -1 && (last + first ) < attempted.Length){
            result += attempted.Substring(first, attempted.Length-last-first);
        }
        result += "]";
        if (last >0){
            result += attempted.Substring(attempted.Length-last, last);
        }
    }
    Assert.AreEqual(expectedResult, result);
    
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
886
3
Gpt3D_Clone886_3.cs 1 40
Gpt3D_Clone886_3.cs 41 82
----------------------------------------

[Test] [TestCase ("parralele", "parallel", "par[ralele]")] [TestCase ("personil", "personal", "person[i]l")] [TestCase ("disfuncshunal", "dysfunctional", "d[isfuncshu]nal")] [TestCase ("ato", "auto", "a[]to")] [TestCase ("inactioned", "inaction", "inaction[ed]")] [TestCase ("refraction", "fraction", "[re]fraction")] [TestCase ("adiction", "ad[]diction", "ad[]iction")] public void CompareStringsTest (string attempted, string correct, string expectedResult) {
    int first = - 1, last = - 1;
    string result = null;
    int shorterLength = (attempted.Length < correct.Length ? attempted.Length : correct.Length);
    for (int i = 0; i < shorterLength; i ++) {
        if (correct [i] != attempted [i]) {
            first = i;
            break;
        }
    }
    var a = correct.Reverse ().ToArray ();
    var b = attempted.Reverse ().ToArray ();
    for (int i = 0; i < shorterLength; i ++) {
        if (a [i] != b [i]) {
            last = i;
            break;
        }
    }
    if (first == - 1 && last == - 1)
        result = attempted;
    else {
        var sb = new StringBuilder ();
        if (first == - 1)
            first = shorterLength;
        if (last == - 1)
            last = shorterLength;
        if (first + last > shorterLength)
            last = shorterLength - first;
        if (first > 0)
            sb.Append (attempted.Substring (0, first));
        sb.Append ("[");
        if (last > - 1 && last + first < attempted.Length)
            sb.Append (attempted.Substring (first, attempted.Length - last - first));
        sb.Append ("]");
        if (last > 0)
            sb.Append (attempted.Substring (attempted.Length - last, last));
        result = sb.ToString ();
    }
    Assert.AreEqual (expectedResult, result);
}
----------------------------------------

 [Test] [TestCase("parralele","parallel","par[ralele]")] [TestCase("personil","personal","person[i]l")] [TestCase("disfuncshunal","dysfunctional","d[isfuncshu]nal")] [TestCase("ato","auto","a[]to")] [TestCase("inactioned","inaction","inaction[ed]")] [TestCase("refraction","fraction","[re]fraction")] [TestCase("adiction","addiction","ad[]diction")]  public void CompareStringsTest(string attempted, string correct, string expectedResult){
    int first = -1;
    int last = -1;
    string result = null;
    int shorterLength = (attempted.Length < correct.Length ? attempted.Length : correct.Length);
    for (int i=0;i<shorterLength;i++){
        if (attempted[i]!=correct[i]){
            first=i;
            break;
        } 
    } 
    for (int i=shorterLength-1;i>=0;i--){ 
        if (attempted[i]!=correct[i]){
            last=i;
            break;
        } 
    } 
    if (first == -1 && last == -1) 
            result = attempted; 
    else{ 
        if (first==-1) 
            first = shorterLength;
        if (last==-1)
            last = shorterLength;
        if (last+first > shorterLength)
            last = shorterLength-first;
        if (first!=0)
            result = attempted.Substring(0, first);
  
        result += "[";
        if (last>-1 && last+first < attempted.Length)
            result += attempted.Substring(first, attempted.Length-last-first); 
        result += "]";
        if (last > 0)
            result += attempted.Substring(attempted.Length - last, last); 
    }
    Assert.AreEqual(expectedResult, result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
887
0
Gpt3D_Clone887_0.cs 1 25
Gpt3D_Clone887_0.cs 26 58
----------------------------------------

public bool StartDownload (int timeout) {
    try {
        System.IO.Directory.CreateDirectory (Path.GetDirectoryName (_fullPathWhereToSave));
        if (File.Exists (_fullPathWhereToSave)) {
            File.Delete (_fullPathWhereToSave);
        }
        using (WebClient client = new WebClient ())
        {
            var ur = new Uri (_url);
            client.DownloadProgressChanged += WebClientDownloadProgressChanged;
            client.DownloadFileCompleted += WebClientDownloadCompleted;
            Console.WriteLine (@"Downloading file:");
            client.DownloadFileAsync (ur, _fullPathWhereToSave);
            _semaphore.Wait (timeout);
            return _result && File.Exists (_fullPathWhereToSave);
        }}
    catch (Exception e) {
        Console.WriteLine ("Was not able to download file!");
        Console.Write (e);
        return false;
    }
    finally {
        this._semaphore.Dispose ();
    }
}
----------------------------------------

 public bool StartDownload (int timeout) {
    try {
            System.IO.Directory.CreateDirectory (Path.GetDirectoryName (_fullPathWhereToSave));
            if (File.Exists (_fullPathWhereToSave)) {
                File.Delete (_fullPathWhereToSave);
            }
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(_url);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Stream stream = response.GetResponseStream();
            StreamReader streamReader = new StreamReader(stream);
            StreamWriter sw = new StreamWriter(_fullPathWhereToSave);
            string line = "";
            while ((line = streamReader.ReadLine()) != null)
            {
                sw.WriteLine(line);
            }
            _semaphore.Wait (timeout);
            response.Close();
            stream.Close();
            streamReader.Close();
            sw.Close();
            return _result && File.Exists (_fullPathWhereToSave);
        }
        catch (Exception e) {
            Console.WriteLine ("Was not able to download file!");
            Console.Write (e);
            return false;
        }finally {
            this._semaphore.Dispose ();
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
887
1
Gpt3D_Clone887_1.cs 1 25
Gpt3D_Clone887_1.cs 26 48
----------------------------------------

public bool StartDownload (int timeout) {
    try {
        System.IO.Directory.CreateDirectory (Path.GetDirectoryName (_fullPathWhereToSave));
        if (File.Exists (_fullPathWhereToSave)) {
            File.Delete (_fullPathWhereToSave);
        }
        using (WebClient client = new WebClient ())
        {
            var ur = new Uri (_url);
            client.DownloadProgressChanged += WebClientDownloadProgressChanged;
            client.DownloadFileCompleted += WebClientDownloadCompleted;
            Console.WriteLine (@"Downloading file:");
            client.DownloadFileAsync (ur, _fullPathWhereToSave);
            _semaphore.Wait (timeout);
            return _result && File.Exists (_fullPathWhereToSave);
        }}
    catch (Exception e) {
        Console.WriteLine ("Was not able to download file!");
        Console.Write (e);
        return false;
    }
    finally {
        this._semaphore.Dispose ();
    }
}
----------------------------------------

 public bool StartDownload (int timeout) {
    try {
            System.IO.Directory.CreateDirectory (Path.GetDirectoryName (_fullPathWhereToSave));
            if (File.Exists (_fullPathWhereToSave)) {
                File.Delete (_fullPathWhereToSave);
            }
            WebClient client = new WebClient();
            client.DownloadDataCompleted += DataDownloaded;
            Uri u = new Uri(_url);
            client.DownloadDataAsync(u, _fullPathWhereToSave);
            _semaphore.Wait (timeout);
            return _result && File.Exists (_fullPathWhereToSave);
        }
        catch (Exception e) {
            Console.WriteLine ("Was not able to download file!");
            Console.Write (e);
            return false;
        }finally {
            this._semaphore.Dispose ();
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
887
2
Gpt3D_Clone887_2.cs 1 25
Gpt3D_Clone887_2.cs 26 49
----------------------------------------

public bool StartDownload (int timeout) {
    try {
        System.IO.Directory.CreateDirectory (Path.GetDirectoryName (_fullPathWhereToSave));
        if (File.Exists (_fullPathWhereToSave)) {
            File.Delete (_fullPathWhereToSave);
        }
        using (WebClient client = new WebClient ())
        {
            var ur = new Uri (_url);
            client.DownloadProgressChanged += WebClientDownloadProgressChanged;
            client.DownloadFileCompleted += WebClientDownloadCompleted;
            Console.WriteLine (@"Downloading file:");
            client.DownloadFileAsync (ur, _fullPathWhereToSave);
            _semaphore.Wait (timeout);
            return _result && File.Exists (_fullPathWhereToSave);
        }}
    catch (Exception e) {
        Console.WriteLine ("Was not able to download file!");
        Console.Write (e);
        return false;
    }
    finally {
        this._semaphore.Dispose ();
    }
}
----------------------------------------

 public bool StartDownload (int timeout) {
     try {
            System.IO.Directory.CreateDirectory (Path.GetDirectoryName (_fullPathWhereToSave));
            if (File.Exists (_fullPathWhereToSave)) {
                File.Delete (_fullPathWhereToSave);
            }
            using (WebRequest wr = WebRequest.Create (_url))
            using (Stream inputstream = wr.GetResponse().GetResponseStream())
            using (Stream outputstream = File.Create(_fullPathWhereToSave))
            {
                _semaphore.Wait (timeout);
                return _result && File.Exists (_fullPathWhereToSave);
            }
        }
        catch (Exception e) {
            Console.WriteLine ("Was not able to download file!");
            Console.Write (e);
            return false;
        }finally {
            this._semaphore.Dispose ();
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
887
3
Gpt3D_Clone887_3.cs 1 25
Gpt3D_Clone887_3.cs 26 48
----------------------------------------

public bool StartDownload (int timeout) {
    try {
        System.IO.Directory.CreateDirectory (Path.GetDirectoryName (_fullPathWhereToSave));
        if (File.Exists (_fullPathWhereToSave)) {
            File.Delete (_fullPathWhereToSave);
        }
        using (WebClient client = new WebClient ())
        {
            var ur = new Uri (_url);
            client.DownloadProgressChanged += WebClientDownloadProgressChanged;
            client.DownloadFileCompleted += WebClientDownloadCompleted;
            Console.WriteLine (@"Downloading file:");
            client.DownloadFileAsync (ur, _fullPathWhereToSave);
            _semaphore.Wait (timeout);
            return _result && File.Exists (_fullPathWhereToSave);
        }}
    catch (Exception e) {
        Console.WriteLine ("Was not able to download file!");
        Console.Write (e);
        return false;
    }
    finally {
        this._semaphore.Dispose ();
    }
}
----------------------------------------

 public bool StartDownload (int timeout) {
    try {
            System.IO.Directory.CreateDirectory (Path.GetDirectoryName (_fullPathWhereToSave));
            if (File.Exists (_fullPathWhereToSave)) {
                File.Delete (_fullPathWhereToSave);
            }
            using(WebClient wcDownload = new WebClient ())
            {
                 wcDownload.DownloadFile(new Uri(_url), _fullPathWhereToSave);
                _semaphore.Wait (timeout);
                return _result && File.Exists (_fullPathWhereToSave);
            }
        }
        catch (Exception e) {
            Console.WriteLine ("Was not able to download file!");
            Console.Write (e);
            return false;
        }finally {
            this._semaphore.Dispose ();
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
887
4
Gpt3D_Clone887_4.cs 1 25
Gpt3D_Clone887_4.cs 26 47
----------------------------------------

public bool StartDownload (int timeout) {
    try {
        System.IO.Directory.CreateDirectory (Path.GetDirectoryName (_fullPathWhereToSave));
        if (File.Exists (_fullPathWhereToSave)) {
            File.Delete (_fullPathWhereToSave);
        }
        using (WebClient client = new WebClient ())
        {
            var ur = new Uri (_url);
            client.DownloadProgressChanged += WebClientDownloadProgressChanged;
            client.DownloadFileCompleted += WebClientDownloadCompleted;
            Console.WriteLine (@"Downloading file:");
            client.DownloadFileAsync (ur, _fullPathWhereToSave);
            _semaphore.Wait (timeout);
            return _result && File.Exists (_fullPathWhereToSave);
        }}
    catch (Exception e) {
        Console.WriteLine ("Was not able to download file!");
        Console.Write (e);
        return false;
    }
    finally {
        this._semaphore.Dispose ();
    }
}
----------------------------------------

 public bool StartDownload (int timeout) {
    try {
            System.IO.Directory.CreateDirectory (Path.GetDirectoryName (_fullPathWhereToSave));
            if (File.Exists (_fullPathWhereToSave)) {
                File.Delete (_fullPathWhereToSave);
            }
            WebClient wc = new WebClient();
            wc.Headers.Add("Content-Type","application/x-www-form-urlencoded");
            wc.DownloadFileAsync(new Uri(_url),_fullPathWhereToSave);
            _semaphore.Wait (timeout);
            return _result && File.Exists (_fullPathWhereToSave);
        }
        catch (Exception e) {
            Console.WriteLine ("Was not able to download file!");
            Console.Write (e);
            return false;
        }finally {
            this._semaphore.Dispose ();
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
887
5
Gpt3D_Clone887_5.cs 1 25
Gpt3D_Clone887_5.cs 26 46
----------------------------------------

public bool StartDownload (int timeout) {
    try {
        System.IO.Directory.CreateDirectory (Path.GetDirectoryName (_fullPathWhereToSave));
        if (File.Exists (_fullPathWhereToSave)) {
            File.Delete (_fullPathWhereToSave);
        }
        using (WebClient client = new WebClient ())
        {
            var ur = new Uri (_url);
            client.DownloadProgressChanged += WebClientDownloadProgressChanged;
            client.DownloadFileCompleted += WebClientDownloadCompleted;
            Console.WriteLine (@"Downloading file:");
            client.DownloadFileAsync (ur, _fullPathWhereToSave);
            _semaphore.Wait (timeout);
            return _result && File.Exists (_fullPathWhereToSave);
        }}
    catch (Exception e) {
        Console.WriteLine ("Was not able to download file!");
        Console.Write (e);
        return false;
    }
    finally {
        this._semaphore.Dispose ();
    }
}
----------------------------------------

 public bool StartDownload (int timeout) {
     try {
            System.IO.Directory.CreateDirectory (Path.GetDirectoryName (_fullPathWhereToSave));
            if (File.Exists (_fullPathWhereToSave)) {
                File.Delete (_fullPathWhereToSave);
            }
            using (Stream stream = this.GetWebResponseStream())
            {
                 _semaphore.Wait (timeout);
                return _result && File.Exists (_fullPathWhereToSave);
            }}
        catch (Exception e) {
            Console.WriteLine ("Was not able to download file!");
            Console.Write (e);
            return false;
        }finally {
            this._semaphore.Dispose ();
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
888
0
Gpt3D_Clone888_0.cs 1 22
Gpt3D_Clone888_0.cs 23 47
----------------------------------------

static void Main (string [] args) {
    List < string > alpha = new List < string > ();
    for (char a = 'a'; a <= 'd'; a ++) {
        alpha.Add (a.ToString ());
        alpha.Add (a.ToString ());
    }
    Console.WriteLine ("Data :");
    alpha.ForEach (delegate (string t) {
        Console.WriteLine (t);
    });
    alpha.ForEach (delegate (string v) {
        if (alpha.FindAll (delegate (string t) {
            return t == v;
        }).Count > 1)
            alpha.Remove (v);
    });
    Console.WriteLine ("Unique Result :");
    alpha.ForEach (delegate (string t) {
        Console.WriteLine (t);
    });
    Console.ReadKey ();
}
----------------------------------------

 static void Main (string [] args) {
    LinkedList<string> alpha = new LinkedList<string>();
    for (char a = 'a'; a <= 'd'; a ++) {
        alpha.AddLast(a.ToString());
        alpha.AddLast(a.ToString());
    }
    Console.WriteLine ("Data :");
    alpha.ToList().ForEach(t => Console.WriteLine(t));   
    alpha.ForEach(delegate (string v) {
        int foundCount = 0;
        LinkedListNode<string> node = alpha.First;
        while (node != null) {
            if (node.Value == v)
                foundCount++;
            node = node.Next;
        }
        if (foundCount > 1)
            alpha.Remove(v);
    });
    Console.WriteLine ("Unique Result :");
    alpha.ToList().ForEach(t => Console.WriteLine(t));
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
888
1
Gpt3D_Clone888_1.cs 1 22
Gpt3D_Clone888_1.cs 23 43
----------------------------------------

static void Main (string [] args) {
    List < string > alpha = new List < string > ();
    for (char a = 'a'; a <= 'd'; a ++) {
        alpha.Add (a.ToString ());
        alpha.Add (a.ToString ());
    }
    Console.WriteLine ("Data :");
    alpha.ForEach (delegate (string t) {
        Console.WriteLine (t);
    });
    alpha.ForEach (delegate (string v) {
        if (alpha.FindAll (delegate (string t) {
            return t == v;
        }).Count > 1)
            alpha.Remove (v);
    });
    Console.WriteLine ("Unique Result :");
    alpha.ForEach (delegate (string t) {
        Console.WriteLine (t);
    });
    Console.ReadKey ();
}
----------------------------------------

 static void Main (string [] args) {
    List<string> alpha = new List<string>();
    for (char a = 'a'; a <= 'd'; a ++) {
        alpha.Add (a.ToString ());
        alpha.Add (a.ToString ());
    }
    Console.WriteLine ("Data :");
    alpha.ForEach (delegate (string t) {
        Console.WriteLine (t);
    });
    List<string> distinctAlpha = alpha.Distinct().ToList();
    alpha.Clear();
    distinctAlpha.ForEach(t => alpha.Add(t));
    Console.WriteLine ("Unique Result :");
    alpha.ForEach (delegate (string t) {
    Console.WriteLine (t);
    });
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
888
2
Gpt3D_Clone888_2.cs 1 22
Gpt3D_Clone888_2.cs 23 41
----------------------------------------

static void Main (string [] args) {
    List < string > alpha = new List < string > ();
    for (char a = 'a'; a <= 'd'; a ++) {
        alpha.Add (a.ToString ());
        alpha.Add (a.ToString ());
    }
    Console.WriteLine ("Data :");
    alpha.ForEach (delegate (string t) {
        Console.WriteLine (t);
    });
    alpha.ForEach (delegate (string v) {
        if (alpha.FindAll (delegate (string t) {
            return t == v;
        }).Count > 1)
            alpha.Remove (v);
    });
    Console.WriteLine ("Unique Result :");
    alpha.ForEach (delegate (string t) {
        Console.WriteLine (t);
    });
    Console.ReadKey ();
}
----------------------------------------

 static void Main (string [] args) {
    List<string> alpha = new List<string>();
    for (char a = 'a'; a <= 'd'; a ++) {
        alpha.Add (a.ToString ());
        alpha.Add (a.ToString ());
    }
    Console.WriteLine ("Data :");
    alpha.ForEach (delegate (string t) {
        Console.WriteLine (t);
    });
    alpha.RemoveAll(t => alpha.FindAll(c => c == t).Count > 1);
    Console.WriteLine ("Unique Result :");
    alpha.ForEach (delegate (string t) {
        Console.WriteLine (t);
    });
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
888
3
Gpt3D_Clone888_3.cs 1 22
Gpt3D_Clone888_3.cs 23 42
----------------------------------------

static void Main (string [] args) {
    List < string > alpha = new List < string > ();
    for (char a = 'a'; a <= 'd'; a ++) {
        alpha.Add (a.ToString ());
        alpha.Add (a.ToString ());
    }
    Console.WriteLine ("Data :");
    alpha.ForEach (delegate (string t) {
        Console.WriteLine (t);
    });
    alpha.ForEach (delegate (string v) {
        if (alpha.FindAll (delegate (string t) {
            return t == v;
        }).Count > 1)
            alpha.Remove (v);
    });
    Console.WriteLine ("Unique Result :");
    alpha.ForEach (delegate (string t) {
        Console.WriteLine (t);
    });
    Console.ReadKey ();
}
----------------------------------------

 static void Main (string [] args) {
    List<string> alpha = new List<string>();
    for (char a = 'a'; a <= 'd'; a ++) {
        alpha.Add (a.ToString ());
        alpha.Add (a.ToString ());
    }
    Console.WriteLine ("Data :");
    alpha.ForEach (delegate (string t) {
        Console.WriteLine (t);
    });
    alpha = alpha.Distinct().ToList();
    Console.WriteLine ("Unique Result :");
    alpha.ForEach (delegate (string t) {
        Console.WriteLine (t);
    });
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
888
4
Gpt3D_Clone888_4.cs 1 22
Gpt3D_Clone888_4.cs 23 41
----------------------------------------

static void Main (string [] args) {
    List < string > alpha = new List < string > ();
    for (char a = 'a'; a <= 'd'; a ++) {
        alpha.Add (a.ToString ());
        alpha.Add (a.ToString ());
    }
    Console.WriteLine ("Data :");
    alpha.ForEach (delegate (string t) {
        Console.WriteLine (t);
    });
    alpha.ForEach (delegate (string v) {
        if (alpha.FindAll (delegate (string t) {
            return t == v;
        }).Count > 1)
            alpha.Remove (v);
    });
    Console.WriteLine ("Unique Result :");
    alpha.ForEach (delegate (string t) {
        Console.WriteLine (t);
    });
    Console.ReadKey ();
}
----------------------------------------

 static void Main (string [] args) {
    List<string> alpha = new List<string>();
    for (char a = 'a'; a <= 'd'; a ++) {
        alpha.Add (a.ToString ());
        alpha.Add (a.ToString ());
    }
    Console.WriteLine ("Data :");
    alpha.ForEach (delegate (string t) {
        Console.WriteLine (t);
    });
    alpha = alpha.Distinct(StringComparer.OrdinalIgnoreCase).ToList();
    Console.WriteLine ("Unique Result :");
    alpha.ForEach (delegate (string t) {
        Console.WriteLine (t);
    });
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
88
3
Gpt3D_Clone88_3.cs 1 9
Gpt3D_Clone88_3.cs 10 22
----------------------------------------

public int checkComRegnumberAvailable (string conRegnumber) {
    List < OtherCompany > checklist = getCompanyDetails ();
    if (checklist.Count == 0)
        return 2;
    for (int i = 0; i < checkList.Count; i ++)
        if (checklist [i].RegNumber == conRegnumber)
            return 1;
    return 0;
}
----------------------------------------

 public int checkComRegnumberAvailable (string conRegnumber) {
    List < OtherCompany > checklist = getCompanyDetails ();
    if (checklist.Count == 0)
        return 2;
    for (int i = 0; i < checkList.Count; i ++){
        bool isEqual = checklist[i].RegNumber.Equals(conRegnumber);
        if (isEqual)
            return 1;
    }
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
88
4
Gpt3D_Clone88_4.cs 1 9
Gpt3D_Clone88_4.cs 10 21
----------------------------------------

public int checkComRegnumberAvailable (string conRegnumber) {
    List < OtherCompany > checklist = getCompanyDetails ();
    if (checklist.Count == 0)
        return 2;
    for (int i = 0; i < checkList.Count; i ++)
        if (checklist [i].RegNumber == conRegnumber)
            return 1;
    return 0;
}
----------------------------------------

 public int checkComRegnumberAvailable (string conRegnumber) 
{
    List < OtherCompany > checklist = getCompanyDetails ();
    if (checklist.Count == 0)
        return 2;
    int index = checklist.FindIndex(x => x.RegNumber == conRegnumber);
    if (index >= 0)
        return 1;
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
88
5
Gpt3D_Clone88_5.cs 1 9
Gpt3D_Clone88_5.cs 10 20
----------------------------------------

public int checkComRegnumberAvailable (string conRegnumber) {
    List < OtherCompany > checklist = getCompanyDetails ();
    if (checklist.Count == 0)
        return 2;
    for (int i = 0; i < checkList.Count; i ++)
        if (checklist [i].RegNumber == conRegnumber)
            return 1;
    return 0;
}
----------------------------------------

  public int checkComRegnumberAvailable (string conRegnumber) {
    List < OtherCompany > checklist = getCompanyDetails ();
    if (checklist.Count == 0)
        return 2;
    foreach (OtherCompany c in checklist) 
        if (c.RegNumber == conRegnumber)
            return 1;
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
892
1
Gpt3D_Clone892_1.cs 1 12
Gpt3D_Clone892_1.cs 13 32
----------------------------------------

protected void btnNext_Click1 (object sender, EventArgs e) {
    DAL.TicketsDataSetTableAdapters.TicketDetailsTableAdapter eobj = new DAL.TicketsDataSetTableAdapters.TicketDetailsTableAdapter ();
    DataTable dt = new DataTable ();
    if (txtNextStep.Tag == null)
        dt = eobj.GetTicketFirstUpdate (txtSupportRef.Text);
    else
        dt = eobj.GetNextTicketUpdate (txtSupportRef.Text, (string) txtNextStep.Tag);
    if (dt.Rows.Count != 0) {
        txtNextStep.Text = dt.Rows [0] ["NextStep"].ToString ();
        txtNextStep.Tag = dt.Rows [0] ["Id"].ToString ();
    }
}
----------------------------------------

  protected void btnNext_Click1 (object sender, EventArgs e) {
    DAL.TicketsDataSetTableAdapters.TicketDetailsTableAdapter eobj = new DAL.TicketsDataSetTableAdapters.TicketDetailsTableAdapter ();
    DataTable dt = new DataTable ();
    bool findNextStep = false;
    if (txtNextStep.Tag == null){
        dt = eobj.GetTicketFirstUpdate (txtSupportRef.Text);
        findNextStep = true; 
    }else{
        dt = eobj.GetNextTicketUpdate (txtSupportRef.Text, (string) txtNextStep.Tag);
        findNextStep = true; 
    }
    if (dt != null && findNextStep) {
        txtNextStep.Text = dt.Rows [0] ["NextStep"].ToString ();
        txtNextStep.Tag = dt.Rows [0] ["Id"].ToString ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
894
0
Gpt3D_Clone894_0.cs 1 15
Gpt3D_Clone894_0.cs 16 31
----------------------------------------

private static void Main (string [] args) {
    int threadCount = 2;
    using (ThreadData data = new ThreadData (threadCount))
    {
        Thread [] threads = new Thread [threadCount];
        for (int i = 0; i < threadCount; ++ i) {
            threads [i] = new Thread (DoOperations);
        }
        foreach (Thread thread in threads) {
            thread.Start (data);
        }
        Console.WriteLine ("Starting...");
        data.RunDispatcher ();
    } Console.WriteLine ("Shutdown.");
}
----------------------------------------

 private static void Main (string [] args) {
    int threadCount = 5;
    using (ThreadData data = new ThreadData (threadCount))
    {
        EventWaitHandle[] events = new EventWaitHandle [threadCount];
        for (int i = 0; i < threadCount; ++ i) {
            events [i] = new ManualResetEvent (false);
            ThreadPool.QueueUserWorkItem (DoOperations, data);
        }
        Console.WriteLine ("Starting...");
        WaitHandle.WaitAll (events);
        data.RunDispatcher ();
    } Console.WriteLine ("Shutdown.");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
894
1
Gpt3D_Clone894_1.cs 1 15
Gpt3D_Clone894_1.cs 16 31
----------------------------------------

private static void Main (string [] args) {
    int threadCount = 2;
    using (ThreadData data = new ThreadData (threadCount))
    {
        Thread [] threads = new Thread [threadCount];
        for (int i = 0; i < threadCount; ++ i) {
            threads [i] = new Thread (DoOperations);
        }
        foreach (Thread thread in threads) {
            thread.Start (data);
        }
        Console.WriteLine ("Starting...");
        data.RunDispatcher ();
    } Console.WriteLine ("Shutdown.");
}
----------------------------------------

 private static void Main (string [] args) {
    int threadCount = 6;
    using (ThreadData data = new ThreadData (threadCount))
    {
        ManualResetEvent[] events = new ManualResetEvent [threadCount];
        for (int i = 0; i < threadCount; ++ i) {
            events [i] = new ManualResetEvent (false);
            ThreadPool.QueueUserWorkItem (DoOperations, data);
        }
        Console.WriteLine ("Starting...");
        WaitHandle.WaitAll (events);
        data.RunDispatcher ();
    } Console.WriteLine ("Shutdown.");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
894
2
Gpt3D_Clone894_2.cs 1 15
Gpt3D_Clone894_2.cs 16 31
----------------------------------------

private static void Main (string [] args) {
    int threadCount = 2;
    using (ThreadData data = new ThreadData (threadCount))
    {
        Thread [] threads = new Thread [threadCount];
        for (int i = 0; i < threadCount; ++ i) {
            threads [i] = new Thread (DoOperations);
        }
        foreach (Thread thread in threads) {
            thread.Start (data);
        }
        Console.WriteLine ("Starting...");
        data.RunDispatcher ();
    } Console.WriteLine ("Shutdown.");
}
----------------------------------------

 private static void Main (string [] args) {
    int threadCount = 8;
    using (ThreadData data = new ThreadData (threadCount))
    {
        CountdownEvent countdownEvent = new CountdownEvent(threadCount); 
        for (int i = 0; i < threadCount; ++ i) {
            ThreadPool.QueueUserWorkItem (DoOperations, data);
            countdownEvent.Signal();
        }
        Console.WriteLine ("Starting...");
        countdownEvent.Wait();
        data.RunDispatcher ();
    } Console.WriteLine ("Shutdown.");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
894
3
Gpt3D_Clone894_3.cs 1 15
Gpt3D_Clone894_3.cs 16 30
----------------------------------------

private static void Main (string [] args) {
    int threadCount = 2;
    using (ThreadData data = new ThreadData (threadCount))
    {
        Thread [] threads = new Thread [threadCount];
        for (int i = 0; i < threadCount; ++ i) {
            threads [i] = new Thread (DoOperations);
        }
        foreach (Thread thread in threads) {
            thread.Start (data);
        }
        Console.WriteLine ("Starting...");
        data.RunDispatcher ();
    } Console.WriteLine ("Shutdown.");
}
----------------------------------------

 private static void Main (string [] args) {
    int threadCount = 11;
    using (ThreadData data = new ThreadData (threadCount))
    {
        Task [] tasks = new Task [threadCount];
        for (int i = 0; i < threadCount; ++ i) {
            tasks [i] = Task.Factory.StartNew (DoOperations);
        }
        Console.WriteLine ("Starting...");
        ContentionFreeMethod(threadCount,data);
        data.RunDispatcher ();
    } Console.WriteLine ("Shutdown.");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
894
4
Gpt3D_Clone894_4.cs 1 15
Gpt3D_Clone894_4.cs 16 30
----------------------------------------

private static void Main (string [] args) {
    int threadCount = 2;
    using (ThreadData data = new ThreadData (threadCount))
    {
        Thread [] threads = new Thread [threadCount];
        for (int i = 0; i < threadCount; ++ i) {
            threads [i] = new Thread (DoOperations);
        }
        foreach (Thread thread in threads) {
            thread.Start (data);
        }
        Console.WriteLine ("Starting...");
        data.RunDispatcher ();
    } Console.WriteLine ("Shutdown.");
}
----------------------------------------

 private static void Main (string [] args) {
    int threadCount = 5;
    using (ThreadData data = new ThreadData (threadCount))
    {
        TaskFactory tFactory = new TaskFactory();
        Task[] tasks = new Task [threadCount];
        for (int i = 0; i < threadCount; ++ i) {
            tasks [i] = tFactory.StartNew(DoOperations);
        }
        Console.WriteLine ("Starting...");
        data.RunDispatcher ();
    } Console.WriteLine ("Shutdown.");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
894
5
Gpt3D_Clone894_5.cs 1 15
Gpt3D_Clone894_5.cs 16 29
----------------------------------------

private static void Main (string [] args) {
    int threadCount = 2;
    using (ThreadData data = new ThreadData (threadCount))
    {
        Thread [] threads = new Thread [threadCount];
        for (int i = 0; i < threadCount; ++ i) {
            threads [i] = new Thread (DoOperations);
        }
        foreach (Thread thread in threads) {
            thread.Start (data);
        }
        Console.WriteLine ("Starting...");
        data.RunDispatcher ();
    } Console.WriteLine ("Shutdown.");
}
----------------------------------------

 private static void Main (string [] args) {
    int threadCount = 4;
    using (ThreadData data = new ThreadData (threadCount))
    {
        Task[] tasks = new Task [threadCount];
        for (int i = 0; i < threadCount; ++ i) {
            tasks [i] = Task.Factory.StartNew(DoOperations);
        }
        Console.WriteLine ("Starting...");
        data.RunDispatcher ();
    } Console.WriteLine ("Shutdown.");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
896
0
Gpt3D_Clone896_0.cs 1 21
Gpt3D_Clone896_0.cs 22 68
----------------------------------------

public void PrintRandom () {
    Random r = new Random ();
    int strLength = r.Next (1, 10);
    var sb = new StringBuilder ();
    for (int i = 0; i < strLength; i ++) {
        int whichType = r.Next (0, 3);
        switch (whichType) {
            case 0 :
                sb.Append ((char) (97 + r.Next (0, 26)));
                break;
            case 1 :
                sb.Append ((char) (65 + r.Next (0, 26)));
                break;
            case 2 :
                sb.Append ((char) (48 + r.Next (0, 10)));
                break;
        }
    }
    Console.WriteLine (sb.ToString ());
    Console.ReadLine ();
}
----------------------------------------

 public void PrintRandom()
    {
        Random r = new Random();
        int strLength = r.Next(1, 10);
        int whichType;
        var sb = new StringBuilder();
        for (int i = 0; i < strLength; i++)
        {
            whichType = r.Next(0, 3);
            switch (whichType)
            {
                case 0:
                    sb.Append(randomLetter());
                    break;
                case 1:
                    sb.Append(randomUppercase());
                    break;
                case 2:
                    sb.Append(randomNumber());
                    break;
            }
        }
        Console.WriteLine($"Generated random string: {sb.ToString()}");
        Console.ReadLine();
    }
    // Helper methods
    private char randomLetter()
    {
        Random r = new Random();
        return (char)(97 + r.Next(0, 26));
    }
    private char randomUppercase()
    {
        Random r = new Random();
        return (char)(65 + r.Next(0, 26));
    }
    private char randomNumber()
    {
        Random r = new Random();
        return (char)(48 + r.Next(0, 10));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
896
1
Gpt3D_Clone896_1.cs 1 21
Gpt3D_Clone896_1.cs 22 48
----------------------------------------

public void PrintRandom () {
    Random r = new Random ();
    int strLength = r.Next (1, 10);
    var sb = new StringBuilder ();
    for (int i = 0; i < strLength; i ++) {
        int whichType = r.Next (0, 3);
        switch (whichType) {
            case 0 :
                sb.Append ((char) (97 + r.Next (0, 26)));
                break;
            case 1 :
                sb.Append ((char) (65 + r.Next (0, 26)));
                break;
            case 2 :
                sb.Append ((char) (48 + r.Next (0, 10)));
                break;
        }
    }
    Console.WriteLine (sb.ToString ());
    Console.ReadLine ();
}
----------------------------------------

 public void PrintRandom()
    {
        Random r = new Random();
        int strLength = r.Next(1, 10);
        StringBuilder sb = new StringBuilder();
        int whichType;
        for (int i = 0; i < strLength; i++)
        {
            whichType = r.Next(0, 3);
            switch (whichType)
            {
                case 0:
                    sb.Append(Convert.ToString((char)(97 + r.Next(0, 26))));
                    break;
                case 1:
                    sb.Append(Convert.ToString((char)(65 + r.Next(0, 26))));
                    break;
                case 2:
                    sb.Append(Convert.ToString((char)(48 + r.Next(0, 10))));
                    break;
            }
        }
        Console.WriteLine($"Generated random string: {sb.ToString()}");
        Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
896
2
Gpt3D_Clone896_2.cs 1 21
Gpt3D_Clone896_2.cs 22 48
----------------------------------------

public void PrintRandom () {
    Random r = new Random ();
    int strLength = r.Next (1, 10);
    var sb = new StringBuilder ();
    for (int i = 0; i < strLength; i ++) {
        int whichType = r.Next (0, 3);
        switch (whichType) {
            case 0 :
                sb.Append ((char) (97 + r.Next (0, 26)));
                break;
            case 1 :
                sb.Append ((char) (65 + r.Next (0, 26)));
                break;
            case 2 :
                sb.Append ((char) (48 + r.Next (0, 10)));
                break;
        }
    }
    Console.WriteLine (sb.ToString ());
    Console.ReadLine ();
}
----------------------------------------

 public void PrintRandom()
    {
        Random r = new Random();
        int strLength = r.Next(1, 10);
        char[] outputString = new char[strLength];
        for (int i = 0; i < strLength; i++)
        {
            int whichType = r.Next(0, 3);
            switch (whichType)
            {
                case 0:
                    outputString[i] = (char)(97 + r.Next(0, 26));
                    break;
                case 1:
                    outputString[i] = (char)(65 + r.Next(0, 26));
                    break;
                case 2:
                    outputString[i] = (char)(48 + r.Next(0, 10));
                    break;
            }
        }
        Console.WriteLine($"Generated random string: {String.Join("",outputString)}");
        Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
896
3
Gpt3D_Clone896_3.cs 1 21
Gpt3D_Clone896_3.cs 22 47
----------------------------------------

public void PrintRandom () {
    Random r = new Random ();
    int strLength = r.Next (1, 10);
    var sb = new StringBuilder ();
    for (int i = 0; i < strLength; i ++) {
        int whichType = r.Next (0, 3);
        switch (whichType) {
            case 0 :
                sb.Append ((char) (97 + r.Next (0, 26)));
                break;
            case 1 :
                sb.Append ((char) (65 + r.Next (0, 26)));
                break;
            case 2 :
                sb.Append ((char) (48 + r.Next (0, 10)));
                break;
        }
    }
    Console.WriteLine (sb.ToString ());
    Console.ReadLine ();
}
----------------------------------------

 public void PrintRandom()
    {
        Random r = new Random();
        int strLength = r.Next(1, 10);
        string outputString = "";
        for (int i = 0; i < strLength; i++)
        {
            int whichType = r.Next(0, 3);
            switch (whichType)
            {
                case 0:
                    outputString += (char)(97 + r.Next(0, 26));
                    break;
                case 1:
                    outputString += (char)(65 + r.Next(0, 26));
                    break;
                case 2:
                    outputString += (char)(48 + r.Next(0, 10));
                    break;
            }
        }
        Console.WriteLine($"Generated random string: {outputString}");
        Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
898
0
Gpt3D_Clone898_0.cs 1 17
Gpt3D_Clone898_0.cs 18 36
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    JObject obj = JObject.Load (reader);
    LinksResult result = new LinksResult ();
    result.Count = (int) obj ["count"];
    result.ErrorCode = (int) obj ["errorCode"];
    result.ErrorMessage = (string) obj ["errorMessage"];
    result.Links = new List < LinkData > ();
    for (int i = 1; i <= result.Count; i ++) {
        string index = i.ToString ();
        LinkData link = new LinkData ();
        link.LinkType = (string) obj ["LinkType" + index];
        link.LinkUrl = (string) obj ["LinkUrl" + index];
        link.LinkShow = (int) obj ["LinkShow" + index] == 1;
        result.Links.Add (link);
    }
    return result;
}
----------------------------------------

 public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    JObject obj = JObject.Load (reader);
    LinksResult result = new LinksResult ();
    result.Count = Convert.ToInt32 (obj ["count"]);
    result.ErrorCode = Convert.ToInt32 (obj ["errorCode"]);
    result.ErrorMessage = obj ["errorMessage"].ToString ();
    result.Links = new List < LinkData > ();
	for (int i = 1; i <= result.Count; i ++) {
        string index = i.ToString ();
        LinkData link = new LinkData ();
        link.LinkType = obj ["LinkType" + index].ToString ();
        link.LinkUrl = obj ["LinkUrl" + index].ToString ();
        link.LinkShow = Convert.ToInt32 (obj ["LinkShow" + index]) == 1;
        result.Links.Add (link);
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
898
1
Gpt3D_Clone898_1.cs 1 17
Gpt3D_Clone898_1.cs 18 36
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    JObject obj = JObject.Load (reader);
    LinksResult result = new LinksResult ();
    result.Count = (int) obj ["count"];
    result.ErrorCode = (int) obj ["errorCode"];
    result.ErrorMessage = (string) obj ["errorMessage"];
    result.Links = new List < LinkData > ();
    for (int i = 1; i <= result.Count; i ++) {
        string index = i.ToString ();
        LinkData link = new LinkData ();
        link.LinkType = (string) obj ["LinkType" + index];
        link.LinkUrl = (string) obj ["LinkUrl" + index];
        link.LinkShow = (int) obj ["LinkShow" + index] == 1;
        result.Links.Add (link);
    }
    return result;
}
----------------------------------------

 public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    JObject obj = JObject.Load (reader);
    LinksResult result = new LinksResult ();
    result.Count = (int)((JValue)(obj ["count"])).Value;
    result.ErrorCode = (int)((JValue)(obj ["errorCode"])).Value;
    result.ErrorMessage = (string)((JValue)(obj ["errorMessage"])).Value;
    result.Links = new List < LinkData > ();
    for (int i = 1; i <= result.Count; i ++) {
        string index = i.ToString ();
        LinkData link = new LinkData ();
        link.LinkType = (string)((JValue)(obj ["LinkType" + index])).Value; 
        link.LinkUrl = (string)((JValue)(obj ["LinkUrl" + index])).Value; 
        link.LinkShow = (int)((JValue)(obj ["LinkShow" + index])).Value == 1;
        result.Links.Add (link);
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
898
2
Gpt3D_Clone898_2.cs 1 17
Gpt3D_Clone898_2.cs 18 36
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    JObject obj = JObject.Load (reader);
    LinksResult result = new LinksResult ();
    result.Count = (int) obj ["count"];
    result.ErrorCode = (int) obj ["errorCode"];
    result.ErrorMessage = (string) obj ["errorMessage"];
    result.Links = new List < LinkData > ();
    for (int i = 1; i <= result.Count; i ++) {
        string index = i.ToString ();
        LinkData link = new LinkData ();
        link.LinkType = (string) obj ["LinkType" + index];
        link.LinkUrl = (string) obj ["LinkUrl" + index];
        link.LinkShow = (int) obj ["LinkShow" + index] == 1;
        result.Links.Add (link);
    }
    return result;
}
----------------------------------------

 public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    JObject obj = JObject.Load (reader);
    LinksResult result = new LinksResult ();
    result.Count = (int)obj.Value<int>("count");
    result.ErrorCode = (int)obj.Value<int>("errorCode");
    result.ErrorMessage = obj.Value<string>("errorMessage");
    result.Links = new List < LinkData > ();
    for (int i = 1; i <= result.Count; i ++) {
        string index = i.ToString ();
        LinkData link = new LinkData ();
        link.LinkType = obj.Value<string>("LinkType" + index);
        link.LinkUrl = obj.Value<string>("LinkUrl" + index);
        link.LinkShow = (int)obj.Value<int>("LinkShow" + index) == 1;
        result.Links.Add (link);
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
898
3
Gpt3D_Clone898_3.cs 1 17
Gpt3D_Clone898_3.cs 18 36
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    JObject obj = JObject.Load (reader);
    LinksResult result = new LinksResult ();
    result.Count = (int) obj ["count"];
    result.ErrorCode = (int) obj ["errorCode"];
    result.ErrorMessage = (string) obj ["errorMessage"];
    result.Links = new List < LinkData > ();
    for (int i = 1; i <= result.Count; i ++) {
        string index = i.ToString ();
        LinkData link = new LinkData ();
        link.LinkType = (string) obj ["LinkType" + index];
        link.LinkUrl = (string) obj ["LinkUrl" + index];
        link.LinkShow = (int) obj ["LinkShow" + index] == 1;
        result.Links.Add (link);
    }
    return result;
}
----------------------------------------

 public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    JObject obj = JObject.Load (reader);
    LinksResult result = new LinksResult ();
    result.Count = int.Parse(obj ["count"].ToString());
    result.ErrorCode = int.Parse(obj ["errorCode"].ToString());
    result.ErrorMessage = obj ["errorMessage"].ToString ();
    result.Links = new List < LinkData > ();
    for (int i = 1; i <= result.Count; i ++) {
        string index = i.ToString ();
        LinkData link = new LinkData ();
        link.LinkType = obj ["LinkType" + index].ToString ();
        link.LinkUrl = obj ["LinkUrl" + index].ToString ();
        link.LinkShow = int.Parse(obj ["LinkShow" + index].ToString()) == 1;
        result.Links.Add (link);
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
898
4
Gpt3D_Clone898_4.cs 1 17
Gpt3D_Clone898_4.cs 18 36
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    JObject obj = JObject.Load (reader);
    LinksResult result = new LinksResult ();
    result.Count = (int) obj ["count"];
    result.ErrorCode = (int) obj ["errorCode"];
    result.ErrorMessage = (string) obj ["errorMessage"];
    result.Links = new List < LinkData > ();
    for (int i = 1; i <= result.Count; i ++) {
        string index = i.ToString ();
        LinkData link = new LinkData ();
        link.LinkType = (string) obj ["LinkType" + index];
        link.LinkUrl = (string) obj ["LinkUrl" + index];
        link.LinkShow = (int) obj ["LinkShow" + index] == 1;
        result.Links.Add (link);
    }
    return result;
}
----------------------------------------

 public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    JObject obj = JObject.Load (reader);
    LinksResult result = new LinksResult ();
    result.Count = Convert.ToInt32((obj ["count"]).ToString());
    result.ErrorCode = Convert.ToInt32((obj ["errorCode"]).ToString());
    result.ErrorMessage = (obj ["errorMessage"]).ToString ();
    result.Links = new List < LinkData > ();
    for (int i = 1; i <= result.Count; i ++) {
        string index = i.ToString ();
        LinkData link = new LinkData ();
        link.LinkType = (obj ["LinkType" + index]).ToString ();
        link.LinkUrl = (obj ["LinkUrl" + index]).ToString ();
        link.LinkShow = Convert.ToInt32((obj ["LinkShow" + index]).ToString()) == 1;
        result.Links.Add (link);
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
898
5
Gpt3D_Clone898_5.cs 1 17
Gpt3D_Clone898_5.cs 18 36
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    JObject obj = JObject.Load (reader);
    LinksResult result = new LinksResult ();
    result.Count = (int) obj ["count"];
    result.ErrorCode = (int) obj ["errorCode"];
    result.ErrorMessage = (string) obj ["errorMessage"];
    result.Links = new List < LinkData > ();
    for (int i = 1; i <= result.Count; i ++) {
        string index = i.ToString ();
        LinkData link = new LinkData ();
        link.LinkType = (string) obj ["LinkType" + index];
        link.LinkUrl = (string) obj ["LinkUrl" + index];
        link.LinkShow = (int) obj ["LinkShow" + index] == 1;
        result.Links.Add (link);
    }
    return result;
}
----------------------------------------

 public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    JObject obj = JObject.Load (reader);
    LinksResult result = new LinksResult ();
    result.Count = (int) obj.GetValue ("count");
    result.ErrorCode = (int) obj.GetValue ("errorCode");
    result.ErrorMessage = obj.GetValue ("errorMessage").ToString ();
    result.Links = new List < LinkData > ();
    for (int i = 1; i <= result.Count; i ++) {
        string index = i.ToString ();
        LinkData link = new LinkData ();
        link.LinkType = obj.GetValue ("LinkType" + index).ToString ();
        link.LinkUrl = obj.GetValue ("LinkUrl" + index).ToString ();
        link.LinkShow = (int) obj.GetValue ("LinkShow" + index) == 1;
        result.Links.Add (link);
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
898
6
Gpt3D_Clone898_6.cs 1 17
Gpt3D_Clone898_6.cs 18 36
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    JObject obj = JObject.Load (reader);
    LinksResult result = new LinksResult ();
    result.Count = (int) obj ["count"];
    result.ErrorCode = (int) obj ["errorCode"];
    result.ErrorMessage = (string) obj ["errorMessage"];
    result.Links = new List < LinkData > ();
    for (int i = 1; i <= result.Count; i ++) {
        string index = i.ToString ();
        LinkData link = new LinkData ();
        link.LinkType = (string) obj ["LinkType" + index];
        link.LinkUrl = (string) obj ["LinkUrl" + index];
        link.LinkShow = (int) obj ["LinkShow" + index] == 1;
        result.Links.Add (link);
    }
    return result;
}
----------------------------------------

 public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    JObject obj = JObject.Load (reader);
    LinksResult result = new LinksResult ();
    result.Count = Int32.TryParse(obj ["count"].ToString());
    result.ErrorCode = Int32.TryParse(obj ["errorCode"].ToString());
    result.ErrorMessage = obj ["errorMessage"].ToString ();
    result.Links = new List < LinkData > ();
    for (int i = 1; i <= result.Count; i ++) {
        string index = i.ToString ();
        LinkData link = new LinkData ();
        link.LinkType = obj ["LinkType" + index].ToString ();
        link.LinkUrl = obj ["LinkUrl" + index].ToString ();
        link.LinkShow = Int32.TryParse(obj ["LinkShow" + index].ToString()) == 1;
        result.Links.Add (link);
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
898
7
Gpt3D_Clone898_7.cs 1 17
Gpt3D_Clone898_7.cs 18 36
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    JObject obj = JObject.Load (reader);
    LinksResult result = new LinksResult ();
    result.Count = (int) obj ["count"];
    result.ErrorCode = (int) obj ["errorCode"];
    result.ErrorMessage = (string) obj ["errorMessage"];
    result.Links = new List < LinkData > ();
    for (int i = 1; i <= result.Count; i ++) {
        string index = i.ToString ();
        LinkData link = new LinkData ();
        link.LinkType = (string) obj ["LinkType" + index];
        link.LinkUrl = (string) obj ["LinkUrl" + index];
        link.LinkShow = (int) obj ["LinkShow" + index] == 1;
        result.Links.Add (link);
    }
    return result;
}
----------------------------------------

 public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    JObject obj = JObject.Load (reader);
    LinksResult result = new LinksResult ();
    result.Count = (int) obj ["count"].Value<int>();
    result.ErrorCode = (int) obj ["errorCode"].Value<int>();
    result.ErrorMessage = obj ["errorMessage"].Value<string>();
    result.Links = new List < LinkData > ();
    for (int i = 1; i <= result.Count; i ++) {
        string index = i.ToString ();
        LinkData link = new LinkData ();
        link.LinkType = obj ["LinkType" + index].Value<string>();
        link.LinkUrl = obj ["LinkUrl" + index].Value<string>();
        link.LinkShow = (int) obj ["LinkShow" + index].Value<int>() == 1;
        result.Links.Add (link);
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
898
8
Gpt3D_Clone898_8.cs 1 17
Gpt3D_Clone898_8.cs 18 36
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    JObject obj = JObject.Load (reader);
    LinksResult result = new LinksResult ();
    result.Count = (int) obj ["count"];
    result.ErrorCode = (int) obj ["errorCode"];
    result.ErrorMessage = (string) obj ["errorMessage"];
    result.Links = new List < LinkData > ();
    for (int i = 1; i <= result.Count; i ++) {
        string index = i.ToString ();
        LinkData link = new LinkData ();
        link.LinkType = (string) obj ["LinkType" + index];
        link.LinkUrl = (string) obj ["LinkUrl" + index];
        link.LinkShow = (int) obj ["LinkShow" + index] == 1;
        result.Links.Add (link);
    }
    return result;
}
----------------------------------------

 public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    JObject obj = JObject.Load (reader);
    LinksResult result = new LinksResult ();
    result.Count = Int32.Parse(obj ["count"].ToString());
    result.ErrorCode = Int32.Parse(obj ["errorCode"].ToString());
    result.ErrorMessage = obj ["errorMessage"].ToString ();
    result.Links = new List < LinkData > ();
    for (int i = 1; i <= result.Count; i ++) {
        string index = i.ToString ();
        LinkData link = new LinkData ();
        link.LinkType = obj ["LinkType" + index].ToString ();
        link.LinkUrl = obj ["LinkUrl" + index].ToString ();
        link.LinkShow = Int32.Parse(obj ["LinkShow" + index].ToString()) == 1;
        result.Links.Add (link);
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
898
9
Gpt3D_Clone898_9.cs 1 17
Gpt3D_Clone898_9.cs 18 37
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    JObject obj = JObject.Load (reader);
    LinksResult result = new LinksResult ();
    result.Count = (int) obj ["count"];
    result.ErrorCode = (int) obj ["errorCode"];
    result.ErrorMessage = (string) obj ["errorMessage"];
    result.Links = new List < LinkData > ();
    for (int i = 1; i <= result.Count; i ++) {
        string index = i.ToString ();
        LinkData link = new LinkData ();
        link.LinkType = (string) obj ["LinkType" + index];
        link.LinkUrl = (string) obj ["LinkUrl" + index];
        link.LinkShow = (int) obj ["LinkShow" + index] == 1;
        result.Links.Add (link);
    }
    return result;
}
----------------------------------------

 public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    JObject obj = JObject.Load (reader);
    LinksResult result = new LinksResult ();
    result.Count = Convert.ToInt32 (obj.SelectToken ("count").ToString ());
    result.ErrorCode = Convert.ToInt32 (obj.SelectToken ("errorCode").ToString ());
    result.ErrorMessage = obj.SelectToken ("errorMessage").ToString ();
    result.Links = new List < LinkData > ();
	for (int i = 1; i <= result.Count; i ++) {
        string index = i.ToString ();
        LinkData link = new LinkData ();
        link.LinkType = obj.SelectToken ("LinkType" + index).ToString ();
        link.LinkUrl = obj.SelectToken ("LinkUrl" + index).ToString ();
        link.LinkShow = Convert.ToInt32 (obj.SelectToken ("LinkShow" + index).ToString ()) == 1;
        result.Links.Add (link);
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
89
2
Gpt3D_Clone89_2.cs 1 9
Gpt3D_Clone89_2.cs 10 36
----------------------------------------

protected override void OnStartup (StartupEventArgs e) {
    const string appName = "MyAppName";
    bool createdNew;
    _mutex = new Mutex (true, appName, out createdNew);
    if (! createdNew) {
        Application.Current.Shutdown ();
    }
    base.OnStartup (e);
}
----------------------------------------

 protected override void OnStartup (StartupEventArgs e) { 
    const string appName = "MyAppName";
    bool createdNew;
    Mutex singleInstanceMutex = null;
    try
    {
        singleInstanceMutex = new Mutex(true, appName, out createdNew);
        if (!createdNew)
        {
            Application.Current.Shutdown();
            return;
        }
        base.OnStartup (e);
    }
    finally
    {
        //
        // This allows other instances to start OK
        //
        if (singleInstanceMutex != null)
            singleInstanceMutex.ReleaseMutex();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
900
0
Gpt3D_Clone900_0.cs 1 25
Gpt3D_Clone900_0.cs 26 60
----------------------------------------

public static void Main () {
    string baseIP = "192.168.1.";
    Console.WriteLine ("Pinging 255 destinations of D-class in {0}*", baseIP);
    CreatePingers (255);
    PingOptions po = new PingOptions (ttl, true);
    System.Text.ASCIIEncoding enc = new System.Text.ASCIIEncoding ();
    byte [] data = enc.GetBytes ("abababababababababababababababab");
    SpinWait wait = new SpinWait ();
    int cnt = 1;
    Stopwatch watch = Stopwatch.StartNew ();
    foreach (Ping p in pingers) {
        lock (@lock)
        {
            instances += 1;
        } p.SendAsync (string.Concat (baseIP, cnt.ToString ()), timeOut, data, po);
        cnt += 1;
    }
    while (instances > 0) {
        wait.SpinOnce ();
    }
    watch.Stop ();
    DestroyPingers ();
    Console.WriteLine ("Finished in {0}. Found {1} active IP-addresses.", watch.Elapsed.ToString (), result);
    Console.ReadKey ();
}
----------------------------------------

 public static void Main () {
    string baseIP = "192.168.1.";
    Console.WriteLine ("Pinging 255 destinations of D-class in {0}*", baseIP);
    CreatePingers (255);
    PingOptions po = new PingOptions (ttl, true);
    System.Text.ASCIIEncoding enc = new System.Text.ASCIIEncoding ();
    byte [] data = enc.GetBytes ("abababababababababababababababab");
    SpinLock spinLock = new SpinLock();
    int cnt = 1;
    Stopwatch watch = Stopwatch.StartNew ();
    foreach (Ping p in pingers) {
        bool lockTaken = false;
        try
        {
            spinLock.Enter(ref lockTaken);
            instances += 1;
        }
        finally
        {
            if (lockTaken) spinLock.Exit();
        }
        p.SendAsync (string.Concat (baseIP, cnt.ToString ()), timeOut, data, po);
        cnt += 1;
    }
    while (instances > 0)
    {
        SpinWait.SpinUntil(() => instances == 0);
    }
    watch.Stop ();
    DestroyPingers ();
    Console.WriteLine ("Finished in {0}. Found {1} active IP-addresses.", watch.Elapsed.ToString (), result);
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
902
0
Gpt3D_Clone902_0.cs 1 20
Gpt3D_Clone902_0.cs 21 57
----------------------------------------

private void PaintGradientBars (Graphics g, Rectangle r, Color startColor, Color endColor, int numBars) {
    int rMin = startColor.R;
    int gMin = startColor.G;
    int bMin = startColor.B;
    int rMax = endColor.R;
    int gMax = endColor.G;
    int bMax = endColor.B;
    int left = 0;
    for (int i = 0; i < numBars; i ++) {
        int rAvg = rMin + (int) ((rMax - rMin) * i / numBars);
        int gAvg = gMin + (int) ((gMax - gMin) * i / numBars);
        int bAvg = bMin + (int) ((bMax - bMin) * i / numBars);
        Color useColor = Color.FromArgb (rAvg, gAvg, bAvg);
        int width = (r.Width - left) / (numBars - i);
        using (SolidBrush br = new SolidBrush (useColor))
        {
            g.FillRectangle (br, new Rectangle (left, 0, width, r.Height));
        } left += width;
    }
}
----------------------------------------

 
private void PaintGradientBars (Graphics g, Rectangle r, Color startColor, Color endColor, int numBars) {
    // Calculate color components
    int rMin = startColor.R;
    int gMin = startColor.G;
    int bMin = startColor.B;
    int rMax = endColor.R;
    int gMax = endColor.G;
    int bMax = endColor.B;
    
    // Create left position  variable 
    int leftPosition = r.X;
    
    // Create delta variables
    int deltaR = (rMax - rMin) / numBars;
    int deltaG = (gMax - gMin) / numBars;
    int deltaB = (bMax - bMin) / numBars;
    
    // For loop used to determine bars
    for (int i = 0; i < numBars; i ++) {
        // Adjust color components for each bar
        int rAvg = rMin + (deltaR * i);
        int gAvg = gMin + (deltaG * i);
        int bAvg = bMin + (deltaB * i);
        Color useColor = Color.FromArgb (rAvg, gAvg, bAvg);
        
        // Move and specify width
        leftPosition +=  (r.Width / numBars);
        int width = (r.Width - leftPosition) / (numBars - i);
        using (SolidBrush br = new SolidBrush (useColor))
        {
            g.FillRectangle (br, new Rectangle (leftPosition, 0, width, r.Height));
        } 
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
902
1
Gpt3D_Clone902_1.cs 1 20
Gpt3D_Clone902_1.cs 21 56
----------------------------------------

private void PaintGradientBars (Graphics g, Rectangle r, Color startColor, Color endColor, int numBars) {
    int rMin = startColor.R;
    int gMin = startColor.G;
    int bMin = startColor.B;
    int rMax = endColor.R;
    int gMax = endColor.G;
    int bMax = endColor.B;
    int left = 0;
    for (int i = 0; i < numBars; i ++) {
        int rAvg = rMin + (int) ((rMax - rMin) * i / numBars);
        int gAvg = gMin + (int) ((gMax - gMin) * i / numBars);
        int bAvg = bMin + (int) ((bMax - bMin) * i / numBars);
        Color useColor = Color.FromArgb (rAvg, gAvg, bAvg);
        int width = (r.Width - left) / (numBars - i);
        using (SolidBrush br = new SolidBrush (useColor))
        {
            g.FillRectangle (br, new Rectangle (left, 0, width, r.Height));
        } left += width;
    }
}
----------------------------------------

private void PaintGradientBars (Graphics g, Rectangle r, Color startColor, Color endColor, int numBars) {
    // Calculate color components
    int rMin = startColor.R;
    int gMin = startColor.G;
    int bMin = startColor.B;
    int rMax = endColor.R;
    int gMax = endColor.G;
    int bMax = endColor.B;
    
    // Create width variable 
    int blockWidth = r.Width / numBars;
    int blockHeight = r.Height;
    
    // Create left position variable 
    int leftPosition = 0;
    
    // For loop used to determine bars
    for (int i = 0; i < numBars; i ++) {
        // Adjust color components for each bar
        int rAvg = rMin + (int) ( ( (double) (rMax - rMin) * i) / numBars);
        int gAvg = gMin + (int) ( ( (double) (gMax - gMin) * i) / numBars);
        int bAvg = bMin + (int) ( ( (double) (bMax - bMin) * i) / numBars);
        Color useColor = Color.FromArgb (rAvg, gAvg, bAvg);
        
        // Move and Specify width 
        leftPosition += blockWidth;
        int width = (r.Width - leftPosition) / (numBars - i);
        using (SolidBrush br = new SolidBrush (useColor))
        {
            g.FillRectangle (br, new Rectangle (leftPosition, 0, width, blockHeight));
        } 
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
908
3
Gpt3D_Clone908_3.cs 1 13
Gpt3D_Clone908_3.cs 14 34
----------------------------------------

static bool IsXmlRooted (Stream st) {
    bool sawRoot = false;
    using (var reader = XmlReader.Create (st, new XmlReaderSettings () {ConformanceLevel = ConformanceLevel.Fragment}))
    {
        while (reader.Read ()) {
            if (reader.NodeType == XmlNodeType.Element && reader.Depth == 0) {
                if (sawRoot)
                    return false;
                sawRoot = true;
            }
        }
    } return true;
}
----------------------------------------

 static bool IsXmlRooted (Stream st) {
    int depthLevel = 0;
    bool hasNonRootElements = false;
    using (var reader = XmlReader.Create (st, new XmlReaderSettings() {ConformanceLevel = ConformanceLevel.Fragment}))
    {
        while (reader.Read()) {
            if (reader.NodeType == XmlNodeType.Element) {
                depthLevel++;
                if (depthLevel > 1)
                    hasNonRootElements = true;
            }
            else if (reader.NodeType == XmlNodeType.EndElement)
                depthLevel--;
            if (hasNonRootElements)
                return false;
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
908
4
Gpt3D_Clone908_4.cs 1 13
Gpt3D_Clone908_4.cs 14 31
----------------------------------------

static bool IsXmlRooted (Stream st) {
    bool sawRoot = false;
    using (var reader = XmlReader.Create (st, new XmlReaderSettings () {ConformanceLevel = ConformanceLevel.Fragment}))
    {
        while (reader.Read ()) {
            if (reader.NodeType == XmlNodeType.Element && reader.Depth == 0) {
                if (sawRoot)
                    return false;
                sawRoot = true;
            }
        }
    } return true;
}
----------------------------------------

 static bool IsXmlRooted (Stream st) {
    bool isRoot = false;
    using (var reader = XmlReader.Create (st, new XmlReaderSettings() {ConformanceLevel = ConformanceLevel.Fragment}))
    {
        while (reader.Read()) {
            if (reader.NodeType == XmlNodeType.Element && reader.Depth == 0 && reader.IsStartElement()) {
                isRoot = true;
                break;
            }
        }
        if (isRoot)
            return !reader.ReadToFollowing ("/");
        else
            return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
908
5
Gpt3D_Clone908_5.cs 1 13
Gpt3D_Clone908_5.cs 14 28
----------------------------------------

static bool IsXmlRooted (Stream st) {
    bool sawRoot = false;
    using (var reader = XmlReader.Create (st, new XmlReaderSettings () {ConformanceLevel = ConformanceLevel.Fragment}))
    {
        while (reader.Read ()) {
            if (reader.NodeType == XmlNodeType.Element && reader.Depth == 0) {
                if (sawRoot)
                    return false;
                sawRoot = true;
            }
        }
    } return true;
}
----------------------------------------

 static bool IsXmlRooted (Stream st) {
    int numRoots = 0;
    using (var reader = XmlReader.Create (st, new XmlReaderSettings() {ConformanceLevel = ConformanceLevel.Fragment}))
    {
        while (reader.Read()) {
            if (reader.NodeType == XmlNodeType.Element && reader.Depth == 0) 
                numRoots++;
            if (numRoots > 1)
                return false;
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
908
6
Gpt3D_Clone908_6.cs 1 13
Gpt3D_Clone908_6.cs 14 28
----------------------------------------

static bool IsXmlRooted (Stream st) {
    bool sawRoot = false;
    using (var reader = XmlReader.Create (st, new XmlReaderSettings () {ConformanceLevel = ConformanceLevel.Fragment}))
    {
        while (reader.Read ()) {
            if (reader.NodeType == XmlNodeType.Element && reader.Depth == 0) {
                if (sawRoot)
                    return false;
                sawRoot = true;
            }
        }
    } return true;
}
----------------------------------------

 static bool IsXmlRooted (Stream st) {
    int numRoots = 0;
    using (var reader = XmlReader.Create (st, new XmlReaderSettings() {ConformanceLevel = ConformanceLevel.Fragment}))
    {
        while (reader.Read()) {
            if (reader.NodeType == XmlNodeType.Element && reader.Depth == 0)
                numRoots++;
            if (numRoots > 1)
                return false;
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
908
7
Gpt3D_Clone908_7.cs 1 13
Gpt3D_Clone908_7.cs 14 29
----------------------------------------

static bool IsXmlRooted (Stream st) {
    bool sawRoot = false;
    using (var reader = XmlReader.Create (st, new XmlReaderSettings () {ConformanceLevel = ConformanceLevel.Fragment}))
    {
        while (reader.Read ()) {
            if (reader.NodeType == XmlNodeType.Element && reader.Depth == 0) {
                if (sawRoot)
                    return false;
                sawRoot = true;
            }
        }
    } return true;
}
----------------------------------------

 static bool IsXmlRooted (Stream st) {
    using (var reader = XmlReader.Create (st, new XmlReaderSettings() {ConformanceLevel = ConformanceLevel.Fragment}))
    {
        while (reader.Read()) {
            if (reader.NodeType == XmlNodeType.Element) {
                if (reader.Depth == 0)
                    return reader.GetAttribute("root") == null;
                else
                    return false;
            }
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
908
9
Gpt3D_Clone908_9.cs 1 13
Gpt3D_Clone908_9.cs 14 29
----------------------------------------

static bool IsXmlRooted (Stream st) {
    bool sawRoot = false;
    using (var reader = XmlReader.Create (st, new XmlReaderSettings () {ConformanceLevel = ConformanceLevel.Fragment}))
    {
        while (reader.Read ()) {
            if (reader.NodeType == XmlNodeType.Element && reader.Depth == 0) {
                if (sawRoot)
                    return false;
                sawRoot = true;
            }
        }
    } return true;
}
----------------------------------------

 static bool IsXmlRooted (Stream st) {
    using (var reader = XmlReader.Create (st, new XmlReaderSettings() {ConformanceLevel = ConformanceLevel.Fragment}))
    {
        while (reader.Read()) {
            if (reader.NodeType == XmlNodeType.Element && reader.Depth == 0) {
                if (reader.IsStartElement())
                    return !reader.ReadToFollowing ("/");
                else
                    return false;
            }
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
909
0
Gpt3D_Clone909_0.cs 1 10
Gpt3D_Clone909_0.cs 11 25
----------------------------------------

static void Main (String [] args) {
    checked {
        Int32 original = Int32.MaxValue;
        Int16 [] result = GetShorts (original);
        Console.WriteLine ("Original int: {0:x}", original);
        Console.WriteLine ("Senior Int16: {0:x}", result [1]);
        Console.WriteLine ("Junior Int16: {0:x}", result [0]);
        Console.ReadKey ();
    }
}
----------------------------------------

 
static void Main (String [] args) {
    try {
        Int32 original = Int32.MaxValue;
        Int16 [] result = GetShorts (original);
        Console.WriteLine ("Original int: {0:x}", original);
        Console.WriteLine ("Senior Int16: {0:x}", result [1]);
        Console.WriteLine ("Junior Int16: {0:x}", result [0]);
        Console.ReadKey ();
    } catch {
        Console.WriteLine ("An error occurred while attempting to get the shorts");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
909
1
Gpt3D_Clone909_1.cs 1 10
Gpt3D_Clone909_1.cs 11 21
----------------------------------------

static void Main (String [] args) {
    checked {
        Int32 original = Int32.MaxValue;
        Int16 [] result = GetShorts (original);
        Console.WriteLine ("Original int: {0:x}", original);
        Console.WriteLine ("Senior Int16: {0:x}", result [1]);
        Console.WriteLine ("Junior Int16: {0:x}", result [0]);
        Console.ReadKey ();
    }
}
----------------------------------------

 
static void Main (String [] args) {
    Int32 original = 0xFFFFFFFF;
    Int16 [] result = GetShorts (original);
    Console.WriteLine ("Original int: {0:x}", original);
    Console.WriteLine ("Senior Int16: {0:x}", result [1]);
    Console.WriteLine ("Junior Int16: {0:x}", result [0]);
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
911
3
Gpt3D_Clone911_3.cs 1 12
Gpt3D_Clone911_3.cs 13 33
----------------------------------------

static int Main (string [] args) {
    try {
        int testcase = (Int32.Parse (args [0]));
        RunTest (testcase);
    }
    catch (Exception x) {
        Console.WriteLine ("test failed: " + x.Message);
        return 1;
    }
    Console.WriteLine ("test passed.");
    return 0;
}
----------------------------------------

 static int Main(string[] args)
{
    int testcase;
    if(Int32.TryParse(args[0], out testcase))
    {
        try 
        {
            RunTest(testcase);
            Console.WriteLine("test passed.");
            return 0;
        }
        catch (Exception x)
        {
            Console.WriteLine("test failed:" + x.Message);
            return 1;
        }
    }
    throw new Exception();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
914
6
Gpt3D_Clone914_6.cs 1 15
Gpt3D_Clone914_6.cs 16 28
----------------------------------------

private static string InsertFillerChar (char filler, string text, int inserts) {
    string result = "";
    int inserted = 0;
    for (int i = 0; i < text.Length; i ++) {
        result += text [i];
        if (i >= text.Length - 1)
            continue;
        int shouldbeinserted = (int) (inserts * (i + 1) / (text.Length - 1.0));
        int insertnow = shouldbeinserted - inserted;
        for (int j = 0; j < insertnow; j ++)
            result += filler;
        inserted += insertnow;
    }
    return result;
}
----------------------------------------

private static string InsertFillerChar (char filler, string text, int inserts) {
    string result = "";
    
	for (int i = 0; i < text.Length; i++) {
		result += text[i];
		int gap = i - inserts;
		if(gap >= 0 && (gap % inserts == 0))
			result += filler;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
915
0
Gpt3D_Clone915_0.cs 1 26
Gpt3D_Clone915_0.cs 27 71
----------------------------------------

private DataTable GetDTfromDGV (DataGridView dgv) {
    DataTable dt = new DataTable ();
    foreach (DataGridViewColumn column in dgv.Columns) {
        dt.Columns.Add (column.Name, typeof (string));
    }
    foreach (DataGridViewRow dgvRow in dgv.Rows) {
        DataRow dr = dt.NewRow ();
        for (int col = 0; col < dgv.Columns.Count; col ++) {
            dr [col] = dgvRow.Cells [col].Value;
        }
        dt.Rows.Add (dr);
    }
    for (int row = dt.Rows.Count - 1; row >= 0; row --) {
        bool flag = true;
        for (int col = 0; col < dt.Columns.Count; col ++) {
            if (dt.Rows [row] [col] != DBNull.Value) {
                flag = false;
                break;
            }
        }
        if (flag == true) {
            dt.Rows.RemoveAt (row);
        }
    }
    return dt;
}
----------------------------------------

 public DataTable GetDataTableFromDataGridView (DataGridView dgv)
{
        DataTable dt = new DataTable ();
        foreach (DataGridViewColumn column in dgv.Columns)
        {
          dt.Columns.Add (column.Name, typeof (string));
        }
        
        foreach (DataGridViewRow row in dgv.Rows)
        {
          if (! row.IsNewRow)
          {
            DataRow dr = dt.NewRow ();
            int colCount = 0;
            foreach (DataGridViewCell cell in row.Cells)
            {
              dr.ItemArray [colCount] = cell.Value;
              colCount ++;
            }
            dt.Rows.Add (dr);
          }
        }
        
        for ( int row = dt.Rows.Count - 1; row >= 0; row -- )
        {
          bool allNull = true;
          for (int col = 0; col < dt.Columns.Count; col ++)
          {
            if (dt.Rows [row] [col] != DBNull.Value)
            {
              allNull = false;
              break;
            }
          }
          if (allNull == true)
          {
            dt.Rows.RemoveAt (row);
          }
        }
        
        return dt;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
916
3
Gpt3D_Clone916_3.cs 1 16
Gpt3D_Clone916_3.cs 17 46
----------------------------------------

static void Main (string [] args) {
    Console.WriteLine ("Enter the string");
    string x = Console.ReadLine ();
    Console.WriteLine ("enter the string to be searched");
    string SearchText = Console.ReadLine ();
    string [] myarr = new string [30];
    myarr = x.Split (' ');
    int i = 0;
    foreach (string s in myarr) {
        i = i + 1;
        if (s == SearchText) {
            Console.WriteLine ("The string found at position:" + i);
        }
    }
    Console.ReadLine ();
}
----------------------------------------

  static void Main(string[] args) 
{ 
    Console.WriteLine("Enter the string"); 
    string x = Console.ReadLine(); 
    Console.WriteLine("enter the string to be searched"); 
    string searchText = Console.ReadLine(); 
    string[] myarr = new string[30]; 
    myarr = x.Split(' '); 
    int i; 
    int pos = 0; 
    for (i = 0; i < myarr.Length; i++) 
    { 
        if (myarr[i].Contains(searchText)) 
        { 
            pos = i + 1; 
            break; 
        } 
    } 
    if (pos > 0) 
    { 
        Console.WriteLine("The string found at position:" + pos); 
    } 
    Console.ReadLine(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
916
4
Gpt3D_Clone916_4.cs 1 16
Gpt3D_Clone916_4.cs 17 38
----------------------------------------

static void Main (string [] args) {
    Console.WriteLine ("Enter the string");
    string x = Console.ReadLine ();
    Console.WriteLine ("enter the string to be searched");
    string SearchText = Console.ReadLine ();
    string [] myarr = new string [30];
    myarr = x.Split (' ');
    int i = 0;
    foreach (string s in myarr) {
        i = i + 1;
        if (s == SearchText) {
            Console.WriteLine ("The string found at position:" + i);
        }
    }
    Console.ReadLine ();
}
----------------------------------------

 static void Main(string[] args) 
{ 
    Console.WriteLine("Enter the string"); 
    string x = Console.ReadLine(); 
    Console.WriteLine("enter the string to be searched"); 
    string searchText = Console.ReadLine(); 
    string[] myarr = new string[30]; 
    myarr = x.Split(' '); 
    int i = 0; 
     
    while (i < myarr.Length && myarr[i] != searchText) 
        i++;
    if (i < myarr.Length) 
    { 
        Console.WriteLine("The string found at position:" + (i + 1)); 
    } 
    Console.ReadLine(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
920
4
Gpt3D_Clone920_4.cs 1 15
Gpt3D_Clone920_4.cs 16 37
----------------------------------------

public static String QueryAssemblyInfo (string assemblyName) {
    var assembyInfo = new AssemblyInfo {cchBuf = 512};
    assembyInfo.currentAssemblyPath = new String ('', assembyInfo.cchBuf);
    IAssemblyCache assemblyCache;
    var hr = GacApi.CreateAssemblyCache (out assemblyCache, 0);
    if (hr == IntPtr.Zero) {
        hr = assemblyCache.QueryAssemblyInfo (1, assemblyName, ref assembyInfo);
        if (hr != IntPtr.Zero) {
            Marshal.ThrowExceptionForHR (hr.ToInt32 ());
        }
    } else {
        Marshal.ThrowExceptionForHR (hr.ToInt32 ());
    }
    return assembyInfo.currentAssemblyPath;
}
----------------------------------------

	public static String QueryAssemblyInfo (string assemblyName) {
		var assemblyInfo = new AssemblyInfo {cchBuf = 512};
		assemblyInfo.currentAssemblyPath = new String('\u0000', assemblyInfo.cchBuf);
		IAssemblyCache assemblyCache;
		var hr = GacApi.CreateAssemblyCache (out assemblyCache, 0);
		if (hr == IntPtr.Zero) {
			try {
				hr = assemblyCache.QueryAssemblyInfo (1, assemblyName, ref assemblyInfo);
				if (hr == IntPtr.Zero) {
					return assemblyInfo.currentAssemblyPath;
				}
			} 
            catch {
				Marshal.ThrowExceptionForHR (hr.ToInt32 ());
			}
		} else {
			Marshal.ThrowExceptionForHR (hr.ToInt32 ());
		}
		return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
921
1
Gpt3D_Clone921_1.cs 1 11
Gpt3D_Clone921_1.cs 12 24
----------------------------------------

public static IEnumerable < T > EnumToList < T > () where T : struct {
    Type enumType = typeof (T);
    if (enumType.BaseType != typeof (Enum))
        throw new ArgumentException ("T must be of type System.Enum");
    Array enumValArray = Enum.GetValues (enumType);
    List < T > enumValList = new List < T > ();
    foreach (T val in enumValArray) {
        enumValList.Add (val.ToString ());
    }
    return enumValList;
}
----------------------------------------

 public static IEnumerable<T> EnumToList<T>() where T : struct {
	Type enumType = typeof(T);
	if (enumType.BaseType != typeof(Enum))
		throw new ArgumentException("T must be of type System.Enum");
	List<T> enumValList = new List<T>();
	foreach (T value in Enum.GetValues(enumType))
		enumValList.Add(value);
	return enumValList;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
921
7
Gpt3D_Clone921_7.cs 1 11
Gpt3D_Clone921_7.cs 12 23
----------------------------------------

public static IEnumerable < T > EnumToList < T > () where T : struct {
    Type enumType = typeof (T);
    if (enumType.BaseType != typeof (Enum))
        throw new ArgumentException ("T must be of type System.Enum");
    Array enumValArray = Enum.GetValues (enumType);
    List < T > enumValList = new List < T > ();
    foreach (T val in enumValArray) {
        enumValList.Add (val.ToString ());
    }
    return enumValList;
}
----------------------------------------

 public static List<T>EnumToList<T>() where T : struct {
	Type enumType = typeof(T);
	if (!enumType.BaseType == typeof(Enum)) 
		throw new ArgumentException("T must be of type System.Enum");
	Array enumValArray = Enum.GetValues(enumType);
	List<T> enumValList = enumValArray.Cast<T>().ToList();
	return enumValList;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
925
0
Gpt3D_Clone925_0.cs 1 20
Gpt3D_Clone925_0.cs 21 43
----------------------------------------

void DataGridCellPreviewMouseLeftButtonDown (object sender, System.Windows.Input.MouseButtonEventArgs e) {
    DataGridCell cell = sender as DataGridCell;
    if (cell != null && ! cell.IsEditing && ! cell.IsReadOnly) {
        if (! cell.IsFocused) {
            cell.Focus ();
        }
        DataGrid dataGrid = LogicalTreeWalker.FindParentOfType < DataGrid > (cell);
        if (dataGrid != null) {
            if (dataGrid.SelectionUnit != DataGridSelectionUnit.FullRow) {
                if (! cell.IsSelected)
                    cell.IsSelected = true;
            } else {
                DataGridRow row = LogicalTreeWalker.FindParentOfType < DataGridRow > (cell);
                if (row != null && ! row.IsSelected) {
                    row.IsSelected = true;
                }
            }
        }
    }
}
----------------------------------------

 void DataGridCellPreviewMouseLeftButtonDown (object sender, System.Windows.Input.MouseButtonEventArgs e) {
    DataGridCell cell = sender as DataGridCell;
    if (cell != null && ! cell.IsEditing && ! cell.IsReadOnly) {
        if (cell.IsFocused) {
            DataGrid dataGrid = LogicalTreeWalker.FindParentOfType < DataGrid > (cell);
            if (dataGrid != null) {
                if (dataGrid.SelectionUnit == DataGridSelectionUnit.FullRow) {
                    DataGridRow row = LogicalTreeWalker.FindParentOfType < DataGridRow > (cell);
                    if (row != null && ! row.IsSelected) {
                        row.IsSelected = true;
                    }
                } else {              
                    if (! cell.IsSelected)
                        cell.IsSelected = true;
                }
            }
        } else {
            cell.Focus ();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
925
1
Gpt3D_Clone925_1.cs 1 20
Gpt3D_Clone925_1.cs 21 42
----------------------------------------

void DataGridCellPreviewMouseLeftButtonDown (object sender, System.Windows.Input.MouseButtonEventArgs e) {
    DataGridCell cell = sender as DataGridCell;
    if (cell != null && ! cell.IsEditing && ! cell.IsReadOnly) {
        if (! cell.IsFocused) {
            cell.Focus ();
        }
        DataGrid dataGrid = LogicalTreeWalker.FindParentOfType < DataGrid > (cell);
        if (dataGrid != null) {
            if (dataGrid.SelectionUnit != DataGridSelectionUnit.FullRow) {
                if (! cell.IsSelected)
                    cell.IsSelected = true;
            } else {
                DataGridRow row = LogicalTreeWalker.FindParentOfType < DataGridRow > (cell);
                if (row != null && ! row.IsSelected) {
                    row.IsSelected = true;
                }
            }
        }
    }
}
----------------------------------------

 void DataGridCellPreviewMouseLeftButtonDown (object sender, System.Windows.Input.MouseButtonEventArgs e) {
    DataGridCell cell = sender as DataGridCell;
    if (cell != null && ! cell.IsEditing && ! cell.IsReadOnly) {
        if (! cell.IsFocused) {
            cell.Focus ();
        }
        DataGrid dataGrid = LogicalTreeWalker.FindParentOfType < DataGrid > (cell);
        if (dataGrid != null) {
            if (dataGrid.SelectionUnit == DataGridSelectionUnit.FullRow) {
                DataGridRow row = LogicalTreeWalker.FindParentOfType < DataGridRow > (cell);
                if (row != null && ! row.IsSelected) {
                    row.IsSelected = true;
                }
            } else {              
                if (! cell.IsSelected)
                    cell.IsSelected = true;
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
925
2
Gpt3D_Clone925_2.cs 1 20
Gpt3D_Clone925_2.cs 21 40
----------------------------------------

void DataGridCellPreviewMouseLeftButtonDown (object sender, System.Windows.Input.MouseButtonEventArgs e) {
    DataGridCell cell = sender as DataGridCell;
    if (cell != null && ! cell.IsEditing && ! cell.IsReadOnly) {
        if (! cell.IsFocused) {
            cell.Focus ();
        }
        DataGrid dataGrid = LogicalTreeWalker.FindParentOfType < DataGrid > (cell);
        if (dataGrid != null) {
            if (dataGrid.SelectionUnit != DataGridSelectionUnit.FullRow) {
                if (! cell.IsSelected)
                    cell.IsSelected = true;
            } else {
                DataGridRow row = LogicalTreeWalker.FindParentOfType < DataGridRow > (cell);
                if (row != null && ! row.IsSelected) {
                    row.IsSelected = true;
                }
            }
        }
    }
}
----------------------------------------

 void DataGridCellPreviewMouseLeftButtonDown (object sender, System.Windows.Input.MouseButtonEventArgs e) {
    DataGridCell cell = sender as DataGridCell;
    if (cell != null && ! cell.IsEditing && ! cell.IsReadOnly) {
        if (cell.IsFocused) {
            DataGrid dataGrid = LogicalTreeWalker.FindParentOfType < DataGrid > (cell);
            if (dataGrid != null && dataGrid.SelectionUnit != DataGridSelectionUnit.FullRow && ! cell.IsSelected) {
                cell.IsSelected = true;
            } else {
                DataGridRow row = LogicalTreeWalker.FindParentOfType < DataGridRow > (cell);
                if (row != null && ! row.IsSelected) {
                    row.IsSelected = true;
                }
            }
        } else {
            cell.Focus ();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
925
3
Gpt3D_Clone925_3.cs 1 20
Gpt3D_Clone925_3.cs 21 41
----------------------------------------

void DataGridCellPreviewMouseLeftButtonDown (object sender, System.Windows.Input.MouseButtonEventArgs e) {
    DataGridCell cell = sender as DataGridCell;
    if (cell != null && ! cell.IsEditing && ! cell.IsReadOnly) {
        if (! cell.IsFocused) {
            cell.Focus ();
        }
        DataGrid dataGrid = LogicalTreeWalker.FindParentOfType < DataGrid > (cell);
        if (dataGrid != null) {
            if (dataGrid.SelectionUnit != DataGridSelectionUnit.FullRow) {
                if (! cell.IsSelected)
                    cell.IsSelected = true;
            } else {
                DataGridRow row = LogicalTreeWalker.FindParentOfType < DataGridRow > (cell);
                if (row != null && ! row.IsSelected) {
                    row.IsSelected = true;
                }
            }
        }
    }
}
----------------------------------------

 void DataGridCellPreviewMouseLeftButtonDown (object sender, System.Windows.Input.MouseButtonEventArgs e) {
    DataGridCell cell = sender as DataGridCell;
    if (cell != null && ! cell.IsEditing && ! cell.IsReadOnly) {
        DataGrid dataGrid = LogicalTreeWalker.FindParentOfType < DataGrid > (cell);
        if (dataGrid != null) {
            if (dataGrid.SelectionUnit != DataGridSelectionUnit.FullRow && ! cell.IsSelected) {
                if (! cell.IsFocused) {
                    cell.Focus ();
                }
                cell.IsSelected = true;
            } else {
                DataGridRow row = LogicalTreeWalker.FindParentOfType < DataGridRow > (cell);
                if (row != null && ! row.IsSelected) {
                    row.IsSelected = true;
                }
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
925
4
Gpt3D_Clone925_4.cs 1 20
Gpt3D_Clone925_4.cs 21 40
----------------------------------------

void DataGridCellPreviewMouseLeftButtonDown (object sender, System.Windows.Input.MouseButtonEventArgs e) {
    DataGridCell cell = sender as DataGridCell;
    if (cell != null && ! cell.IsEditing && ! cell.IsReadOnly) {
        if (! cell.IsFocused) {
            cell.Focus ();
        }
        DataGrid dataGrid = LogicalTreeWalker.FindParentOfType < DataGrid > (cell);
        if (dataGrid != null) {
            if (dataGrid.SelectionUnit != DataGridSelectionUnit.FullRow) {
                if (! cell.IsSelected)
                    cell.IsSelected = true;
            } else {
                DataGridRow row = LogicalTreeWalker.FindParentOfType < DataGridRow > (cell);
                if (row != null && ! row.IsSelected) {
                    row.IsSelected = true;
                }
            }
        }
    }
}
----------------------------------------

 void DataGridCellPreviewMouseLeftButtonDown (object sender, System.Windows.Input.MouseButtonEventArgs e) {
    DataGridCell cell = sender as DataGridCell;
    if (cell != null && ! cell.IsEditing && ! cell.IsReadOnly) {            
        DataGrid dataGrid = LogicalTreeWalker.FindParentOfType < DataGrid > (cell);
        if (dataGrid != null) {
            if (dataGrid.SelectionUnit == DataGridSelectionUnit.FullRow) {
                DataGridRow row = LogicalTreeWalker.FindParentOfType < DataGridRow > (cell);
                row.IsSelected = true;
            } else {
                if (! cell.IsFocused) {
                    cell.Focus ();
                }
                if (! cell.IsSelected)
                    cell.IsSelected = true;
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
925
5
Gpt3D_Clone925_5.cs 1 20
Gpt3D_Clone925_5.cs 21 40
----------------------------------------

void DataGridCellPreviewMouseLeftButtonDown (object sender, System.Windows.Input.MouseButtonEventArgs e) {
    DataGridCell cell = sender as DataGridCell;
    if (cell != null && ! cell.IsEditing && ! cell.IsReadOnly) {
        if (! cell.IsFocused) {
            cell.Focus ();
        }
        DataGrid dataGrid = LogicalTreeWalker.FindParentOfType < DataGrid > (cell);
        if (dataGrid != null) {
            if (dataGrid.SelectionUnit != DataGridSelectionUnit.FullRow) {
                if (! cell.IsSelected)
                    cell.IsSelected = true;
            } else {
                DataGridRow row = LogicalTreeWalker.FindParentOfType < DataGridRow > (cell);
                if (row != null && ! row.IsSelected) {
                    row.IsSelected = true;
                }
            }
        }
    }
}
----------------------------------------

 void DataGridCellPreviewMouseLeftButtonDown (object sender, System.Windows.Input.MouseButtonEventArgs e) {
    DataGridCell cell = sender as DataGridCell;
    if (cell != null && ! cell.IsEditing && ! cell.IsReadOnly) {
        if (! cell.IsFocused) {
            cell.Focus ();
        }
        DataGrid dataGrid = LogicalTreeWalker.FindParentOfType < DataGrid > (cell);
        if (dataGrid != null && dataGrid.SelectionUnit != DataGridSelectionUnit.FullRow) {
            cell.IsSelected = true;
        } 
        else if (dataGrid != null) {
            DataGridRow row = LogicalTreeWalker.FindParentOfType < DataGridRow > (cell);
            if (row != null && ! row.IsSelected) {
                row.IsSelected = true;
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
925
6
Gpt3D_Clone925_6.cs 1 20
Gpt3D_Clone925_6.cs 21 39
----------------------------------------

void DataGridCellPreviewMouseLeftButtonDown (object sender, System.Windows.Input.MouseButtonEventArgs e) {
    DataGridCell cell = sender as DataGridCell;
    if (cell != null && ! cell.IsEditing && ! cell.IsReadOnly) {
        if (! cell.IsFocused) {
            cell.Focus ();
        }
        DataGrid dataGrid = LogicalTreeWalker.FindParentOfType < DataGrid > (cell);
        if (dataGrid != null) {
            if (dataGrid.SelectionUnit != DataGridSelectionUnit.FullRow) {
                if (! cell.IsSelected)
                    cell.IsSelected = true;
            } else {
                DataGridRow row = LogicalTreeWalker.FindParentOfType < DataGridRow > (cell);
                if (row != null && ! row.IsSelected) {
                    row.IsSelected = true;
                }
            }
        }
    }
}
----------------------------------------

 void DataGridCellPreviewMouseLeftButtonDown (object sender, System.Windows.Input.MouseButtonEventArgs e) {
    DataGridCell cell = sender as DataGridCell;
    if (cell != null && ! cell.IsEditing && ! cell.IsReadOnly) {
        DataGrid dataGrid = LogicalTreeWalker.FindParentOfType < DataGrid > (cell);
        if (dataGrid != null && dataGrid.SelectionUnit != DataGridSelectionUnit.FullRow && ! cell.IsSelected) {
            if (! cell.IsFocused) {
                cell.Focus ();
            }
            cell.IsSelected = true;
        } else if (dataGrid != null) {
            DataGridRow row = LogicalTreeWalker.FindParentOfType < DataGridRow > (cell);
            if (row != null && ! row.IsSelected) {
                row.IsSelected = true;
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
925
7
Gpt3D_Clone925_7.cs 1 20
Gpt3D_Clone925_7.cs 21 41
----------------------------------------

void DataGridCellPreviewMouseLeftButtonDown (object sender, System.Windows.Input.MouseButtonEventArgs e) {
    DataGridCell cell = sender as DataGridCell;
    if (cell != null && ! cell.IsEditing && ! cell.IsReadOnly) {
        if (! cell.IsFocused) {
            cell.Focus ();
        }
        DataGrid dataGrid = LogicalTreeWalker.FindParentOfType < DataGrid > (cell);
        if (dataGrid != null) {
            if (dataGrid.SelectionUnit != DataGridSelectionUnit.FullRow) {
                if (! cell.IsSelected)
                    cell.IsSelected = true;
            } else {
                DataGridRow row = LogicalTreeWalker.FindParentOfType < DataGridRow > (cell);
                if (row != null && ! row.IsSelected) {
                    row.IsSelected = true;
                }
            }
        }
    }
}
----------------------------------------

 void DataGridCellPreviewMouseLeftButtonDown (object sender, System.Windows.Input.MouseButtonEventArgs e) {
    DataGridCell cell = sender as DataGridCell;
    if (cell != null && ! cell.IsReadOnly) {
        if (! cell.IsFocused) {
            cell.Focus ();
        }
        DataGrid dataGrid = LogicalTreeWalker.FindParentOfType < DataGrid > (cell);
        if (dataGrid != null && dataGrid.SelectionUnit != DataGridSelectionUnit.FullRow && ! cell.IsSelected) {
            cell.IsSelected = true;
        }
        else if (dataGrid != null) {
            DataGridRow row = LogicalTreeWalker.FindParentOfType < DataGridRow > (cell);
            if (row != null && ! row.IsSelected) {
                row.IsSelected = true;
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
926
1
Gpt3D_Clone926_1.cs 1 15
Gpt3D_Clone926_1.cs 16 45
----------------------------------------

private static void ExpandItemWithInitialExpandedAttribute (PropertyGrid propertyGrid, GridItem gridItem) {
    if (gridItem != null) {
        if (gridItem.GridItemType == GridItemType.Property && gridItem.Expandable) {
            object [] objs = gridItem.Value.GetType ().GetCustomAttributes (typeof (PropertyGridInitialExpandedAttribute), false);
            if (objs.Length > 0) {
                if (((PropertyGridInitialExpandedAttribute) objs [0]).InitialExpanded) {
                    gridItem.Expanded = true;
                }
            }
        }
        foreach (GridItem childItem in gridItem.GridItems) {
            ExpandItemWithInitialExpandedAttribute (propertyGrid, childItem);
        }
    }
}
----------------------------------------

 private static void ExpandItemWithInitialExpandedAttribute(PropertyGrid propertyGrid, GridItem gridItem)
{
    if (gridItem != null && gridItem.GridItemType == GridItemType.Property 
        && gridItem.Expandable)
    {
        var customAttrs = gridItem.Value.GetType().GetCustomAttributes(
            typeof(PropertyGridInitialExpandedAttribute), 
            false);
        // Error check -- to make sure there is at least
        // one attribute
        if (customAttrs.Length > 0)
        {
            var attr = customAttrs[0] as PropertyGridInitialExpandedAttribute;
            if (attr.InitialExpanded)
            {
                gridItem.Expanded = true;
            }
        }
    }
    // Recursively search for properties with
    // custom attributes
    foreach (GridItem childItem in gridItem.GridItems)
    {
        ExpandItemWithInitialExpandedAttribute(propertyGrid, childItem);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
926
2
Gpt3D_Clone926_2.cs 1 15
Gpt3D_Clone926_2.cs 16 39
----------------------------------------

private static void ExpandItemWithInitialExpandedAttribute (PropertyGrid propertyGrid, GridItem gridItem) {
    if (gridItem != null) {
        if (gridItem.GridItemType == GridItemType.Property && gridItem.Expandable) {
            object [] objs = gridItem.Value.GetType ().GetCustomAttributes (typeof (PropertyGridInitialExpandedAttribute), false);
            if (objs.Length > 0) {
                if (((PropertyGridInitialExpandedAttribute) objs [0]).InitialExpanded) {
                    gridItem.Expanded = true;
                }
            }
        }
        foreach (GridItem childItem in gridItem.GridItems) {
            ExpandItemWithInitialExpandedAttribute (propertyGrid, childItem);
        }
    }
}
----------------------------------------

 private static void ExpandItemWithInitialExpandedAttribute(PropertyGrid propertyGrid, GridItem gridItem)
{
    if (gridItem != null && gridItem.GridItemType == GridItemType.Property && gridItem.Expandable)
    {
        object[] objs = gridItem.Value.GetType().GetCustomAttributes(typeof(PropertyGridInitialExpandedAttribute), false);
        if (objs.Length > 0)
        {
            var attr = objs[0] as PropertyGridInitialExpandedAttribute;
            if (attr.InitialExpanded)
            {
                gridItem.Expanded = true;
            }
        }
    }
    foreach (GridItem childItem in gridItem.GridItems)
    {
        ExpandItemWithInitialExpandedAttribute(propertyGrid, childItem);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
926
3
Gpt3D_Clone926_3.cs 1 15
Gpt3D_Clone926_3.cs 16 46
----------------------------------------

private static void ExpandItemWithInitialExpandedAttribute (PropertyGrid propertyGrid, GridItem gridItem) {
    if (gridItem != null) {
        if (gridItem.GridItemType == GridItemType.Property && gridItem.Expandable) {
            object [] objs = gridItem.Value.GetType ().GetCustomAttributes (typeof (PropertyGridInitialExpandedAttribute), false);
            if (objs.Length > 0) {
                if (((PropertyGridInitialExpandedAttribute) objs [0]).InitialExpanded) {
                    gridItem.Expanded = true;
                }
            }
        }
        foreach (GridItem childItem in gridItem.GridItems) {
            ExpandItemWithInitialExpandedAttribute (propertyGrid, childItem);
        }
    }
}
----------------------------------------

 private static void ExpandItemWithInitialExpandedAttribute(PropertyGrid propertyGrid, GridItem gridItem) 
{
    // Check if GridItem is an expandable property
    if (gridItem != null && gridItem.GridItemType == GridItemType.Property && gridItem.Expandable)
    {
        // Get custom attributes from Item
        object[] objs = gridItem.Value.GetType().GetCustomAttributes(typeof(PropertyGridInitialExpandedAttribute), false);
        
        // Check if attributes exist
        if (objs.Length > 0)
        {
            // Cast attribute to correct type
            var attr = (PropertyGridInitialExpandedAttribute)objs[0];
            
            // Check if attribute is set to initial expanded
            if (attr.InitialExpanded)
            {
                // Expand Item
                gridItem.Expanded = true;
            }
        }
    }
    // Recursively check children
    foreach(GridItem childItem in gridItem.GridItems)
    {
        ExpandItemWithInitialExpandedAttribute(propertyGrid, childItem);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
926
4
Gpt3D_Clone926_4.cs 1 15
Gpt3D_Clone926_4.cs 16 42
----------------------------------------

private static void ExpandItemWithInitialExpandedAttribute (PropertyGrid propertyGrid, GridItem gridItem) {
    if (gridItem != null) {
        if (gridItem.GridItemType == GridItemType.Property && gridItem.Expandable) {
            object [] objs = gridItem.Value.GetType ().GetCustomAttributes (typeof (PropertyGridInitialExpandedAttribute), false);
            if (objs.Length > 0) {
                if (((PropertyGridInitialExpandedAttribute) objs [0]).InitialExpanded) {
                    gridItem.Expanded = true;
                }
            }
        }
        foreach (GridItem childItem in gridItem.GridItems) {
            ExpandItemWithInitialExpandedAttribute (propertyGrid, childItem);
        }
    }
}
----------------------------------------

 private static void ExpandItemWithInitialExpandedAttribute (PropertyGrid propertyGrid, GridItem gridItem) 
{
     // If GridItem is an expandable property
     if (gridItem != null && gridItem.GridItemType == GridItemType.Property && gridItem.Expandable)
     {
          // Get custom attributes of PropertyGridInitialExpandedAttribute types
          object[] objs = gridItem.Value.GetType().GetCustomAttributes(typeof(PropertyGridInitialExpandedAttribute), false);
          // Check if the list of attributes is not empty
          if (objs.Length > 0)
          {
               // Cast the first attribute to the type PropertyGridInitialExpandedAttribute
               PropertyGridInitialExpandedAttribute attr = (PropertyGridInitialExpandedAttribute) objs[0];
               // Check if the attribute is set to initialExpanded
               if (attr.InitialExpanded)
               {
                    gridItem.Expanded = true;
               }
          }
          // Recurse through each child item and apply the same logic
          foreach (GridItem childItem in gridItem.GridItems)
          {
               ExpandItemWithInitialExpandedAttribute(propertyGrid, childItem);
          }
     }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
927
1
Gpt3D_Clone927_1.cs 1 30
Gpt3D_Clone927_1.cs 31 81
----------------------------------------

private static void SanitizeNode (HtmlNode node) {
    if (node.NodeType == HtmlNodeType.Element) {
        if (! Whitelist.ContainsKey (node.Name)) {
            if (! DeletableNodesXpath.Contains (node.Name)) {
                node.Name = "removeableNode";
                DeletableNodesXpath.Add (node.Name);
            }
            if (node.HasChildNodes) {
                SanitizeChildren (node);
            }
            return;
        }
        if (node.HasAttributes) {
            for (int i = node.Attributes.Count - 1; i >= 0; i --) {
                HtmlAttribute currentAttribute = node.Attributes [i];
                string [] allowedAttributes = Whitelist [node.Name];
                if (allowedAttributes != null) {
                    if (! allowedAttributes.Contains (currentAttribute.Name)) {
                        node.Attributes.Remove (currentAttribute);
                    }
                } else {
                    node.Attributes.Remove (currentAttribute);
                }
            }
        }
    }
    if (node.HasChildNodes) {
        SanitizeChildren (node);
    }
}
----------------------------------------

 private static void SanitizeNode (HtmlNode node) 
{
    if (node.NodeType == HtmlNodeType.Element) 
    {
        if (!Whitelist.ContainsKey(node.Name)) 
        {
            if (!DeletableNodesXpath.Contains(node.Name)) 
            {
                node.Name = "removeableNode";
                DeletableNodesXpath.Add(node.Name);
            }
            if (node.HasChildNodes) 
            {
                SanitizeChildren(node);
            }
            return;
        } 
        else 
        {
            if (node.HasAttributes) 
            {
                List<HtmlAttribute> attributesToRemove = new List<HtmlAttribute>();
                string [] allowedAttributes = Whitelist[node.Name];
                if (allowedAttributes != null) 
                {
                    foreach (HtmlAttribute attribute in node.Attributes) 
                    {
                        if (!allowedAttributes.Contains(attribute.Name)) 
                        {
                            attributesToRemove.Add(attribute);
                        }
                    }
                } 
                else 
                {
                    attributesToRemove.AddRange(node.Attributes);
                }
                foreach (HtmlAttribute attribute in attributesToRemove) 
                {
                    node.Attributes.Remove(attribute);
                }
            }
        }
    }
    if (node.HasChildNodes) 
    {
        SanitizeChildren(node);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
927
2
Gpt3D_Clone927_2.cs 1 30
Gpt3D_Clone927_2.cs 31 81
----------------------------------------

private static void SanitizeNode (HtmlNode node) {
    if (node.NodeType == HtmlNodeType.Element) {
        if (! Whitelist.ContainsKey (node.Name)) {
            if (! DeletableNodesXpath.Contains (node.Name)) {
                node.Name = "removeableNode";
                DeletableNodesXpath.Add (node.Name);
            }
            if (node.HasChildNodes) {
                SanitizeChildren (node);
            }
            return;
        }
        if (node.HasAttributes) {
            for (int i = node.Attributes.Count - 1; i >= 0; i --) {
                HtmlAttribute currentAttribute = node.Attributes [i];
                string [] allowedAttributes = Whitelist [node.Name];
                if (allowedAttributes != null) {
                    if (! allowedAttributes.Contains (currentAttribute.Name)) {
                        node.Attributes.Remove (currentAttribute);
                    }
                } else {
                    node.Attributes.Remove (currentAttribute);
                }
            }
        }
    }
    if (node.HasChildNodes) {
        SanitizeChildren (node);
    }
}
----------------------------------------

 private static void SanitizeNode (HtmlNode node) 
{
    if (node.NodeType == HtmlNodeType.Element) 
    {
        if (!Whitelist.ContainsKey(node.Name)) 
        {
            if (!DeletableNodesXpath.Contains(node.Name)) 
            {
                node.Name = "removeableNode"; 
                DeletableNodesXpath.Add(node.Name);
            }
            if (node.HasChildNodes) 
            {
                SanitizeChildren(node);
            }
            return;
        } 
        else 
        {
            if (node.HasAttributes) 
            {
                List<HtmlAttribute> attributesToRemove = new List<HtmlAttribute>();
                string [] allowedAttributes = Whitelist[node.Name];
                if (allowedAttributes != null) 
                {
                    foreach (HtmlAttribute attribute in node.Attributes) 
                    {
                        if (!allowedAttributes.Contains(attribute.Name)) 
                        {
                            attributesToRemove.Add(attribute);
                        }
                    }
                } 
                else 
                {
                    attributesToRemove.AddRange(node.Attributes);
                }
                foreach (HtmlAttribute attribute in attributesToRemove) 
                {
                    node.Attributes.Remove(attribute);
                }
            }
        }
    }
    if (node.HasChildNodes) 
    {
        SanitizeChildren(node);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
927
3
Gpt3D_Clone927_3.cs 1 30
Gpt3D_Clone927_3.cs 31 68
----------------------------------------

private static void SanitizeNode (HtmlNode node) {
    if (node.NodeType == HtmlNodeType.Element) {
        if (! Whitelist.ContainsKey (node.Name)) {
            if (! DeletableNodesXpath.Contains (node.Name)) {
                node.Name = "removeableNode";
                DeletableNodesXpath.Add (node.Name);
            }
            if (node.HasChildNodes) {
                SanitizeChildren (node);
            }
            return;
        }
        if (node.HasAttributes) {
            for (int i = node.Attributes.Count - 1; i >= 0; i --) {
                HtmlAttribute currentAttribute = node.Attributes [i];
                string [] allowedAttributes = Whitelist [node.Name];
                if (allowedAttributes != null) {
                    if (! allowedAttributes.Contains (currentAttribute.Name)) {
                        node.Attributes.Remove (currentAttribute);
                    }
                } else {
                    node.Attributes.Remove (currentAttribute);
                }
            }
        }
    }
    if (node.HasChildNodes) {
        SanitizeChildren (node);
    }
}
----------------------------------------

 private static void SanitizeNode (HtmlNode node) 
{
    if (node.NodeType == HtmlNodeType.Element) {
        if (!Whitelist.ContainsKey(node.Name)){
            if (!DeletableNodesXpath.Contains(node.Name)) {
                node.Name = "removeableNode";
                DeletableNodesXpath.Add(node.Name);
            }
            if (node.HasChildNodes) {
                SanitizeChildren(node);
            }
        }
        else {
            if (node.HasAttributes){
                List<HtmlAttribute> attributesToRemove = new List<HtmlAttribute>();
                string[] allowedAttributes = Whitelist[node.Name];
                if (allowedAttributes != null) {
                    foreach (HtmlAttribute attribute in node.Attributes){
                        if (!allowedAttributes.Contains(attribute.Name)){
                            attributesToRemove.Add(attribute);
                        }
                    }
                } else {
                    attributesToRemove.AddRange(node.Attributes);
                }
                foreach (HtmlAttribute attribute in attributesToRemove) {
                    node.Attributes.Remove(attribute);
                }
            }
        }
    }
    if (node.HasChildNodes) {
        SanitizeChildren(node);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
927
4
Gpt3D_Clone927_4.cs 1 30
Gpt3D_Clone927_4.cs 31 80
----------------------------------------

private static void SanitizeNode (HtmlNode node) {
    if (node.NodeType == HtmlNodeType.Element) {
        if (! Whitelist.ContainsKey (node.Name)) {
            if (! DeletableNodesXpath.Contains (node.Name)) {
                node.Name = "removeableNode";
                DeletableNodesXpath.Add (node.Name);
            }
            if (node.HasChildNodes) {
                SanitizeChildren (node);
            }
            return;
        }
        if (node.HasAttributes) {
            for (int i = node.Attributes.Count - 1; i >= 0; i --) {
                HtmlAttribute currentAttribute = node.Attributes [i];
                string [] allowedAttributes = Whitelist [node.Name];
                if (allowedAttributes != null) {
                    if (! allowedAttributes.Contains (currentAttribute.Name)) {
                        node.Attributes.Remove (currentAttribute);
                    }
                } else {
                    node.Attributes.Remove (currentAttribute);
                }
            }
        }
    }
    if (node.HasChildNodes) {
        SanitizeChildren (node);
    }
}
----------------------------------------

 private static void SanitizeNode (HtmlNode node) 
{
    if (node.NodeType == HtmlNodeType.Element) 
    {
        if (!Whitelist.ContainsKey(node.Name)) 
        {
            if (!DeletableNodesXpath.Contains(node.Name)) 
            {
                node.Name = "removeableNode";
                DeletableNodesXpath.Add(node.Name);
            }
            if (node.HasChildNodes) 
            {
                SanitizeChildren(node);
            }
        } 
        else 
        {
            if (node.HasAttributes) 
            {
                List<HtmlAttribute> attributesToRemove = new List<HtmlAttribute>();
                string[] allowedAttributes = Whitelist[node.Name];
                if (allowedAttributes != null) 
                {
                    foreach (HtmlAttribute attribute in node.Attributes) 
                    {
                        if (!allowedAttributes.Contains(attribute.Name)) 
                        {
                            attributesToRemove.Add(attribute);
                        }
                    }
                } 
                else 
                {
                    attributesToRemove.AddRange(node.Attributes);
                }
                foreach (HtmlAttribute attribute in attributesToRemove) 
                {
                    node.Attributes.Remove(attribute);
                }
            }
        }
    }
    if (node.HasChildNodes) 
    {
        SanitizeChildren(node);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
927
5
Gpt3D_Clone927_5.cs 1 30
Gpt3D_Clone927_5.cs 31 65
----------------------------------------

private static void SanitizeNode (HtmlNode node) {
    if (node.NodeType == HtmlNodeType.Element) {
        if (! Whitelist.ContainsKey (node.Name)) {
            if (! DeletableNodesXpath.Contains (node.Name)) {
                node.Name = "removeableNode";
                DeletableNodesXpath.Add (node.Name);
            }
            if (node.HasChildNodes) {
                SanitizeChildren (node);
            }
            return;
        }
        if (node.HasAttributes) {
            for (int i = node.Attributes.Count - 1; i >= 0; i --) {
                HtmlAttribute currentAttribute = node.Attributes [i];
                string [] allowedAttributes = Whitelist [node.Name];
                if (allowedAttributes != null) {
                    if (! allowedAttributes.Contains (currentAttribute.Name)) {
                        node.Attributes.Remove (currentAttribute);
                    }
                } else {
                    node.Attributes.Remove (currentAttribute);
                }
            }
        }
    }
    if (node.HasChildNodes) {
        SanitizeChildren (node);
    }
}
----------------------------------------

 private static void SanitizeNode(HtmlNode node) {
    if (node.NodeType == HtmlNodeType.Element) {
        if (!Whitelist.ContainsKey(node.Name)) {
            if (!DeletableNodesXpath.Contains(node.Name)) {
                node.Name = "removeableNode";
                DeletableNodesXpath.Add(node.Name);
            }
            if (node.HasChildNodes) {
                SanitizeChildren(node);
            }
            return;
        }
        if (node.HasAttributes) {
            List<HtmlAttribute> attributesToRemove = new List<HtmlAttribute>();
            string[] allowedAttributes = Whitelist[node.Name];
            if (allowedAttributes != null) {
                for (int i = 0; i < node.Attributes.Count; i++) {
                    if (!allowedAttributes.Contains(node.Attributes[i].Name)) {
                        attributesToRemove.Add(node.Attributes[i]);
                    }
                }
            } else {
                attributesToRemove.AddRange(node.Attributes);
            }
            foreach (HtmlAttribute attribute in attributesToRemove) {
                node.Attributes.Remove(attribute);
            }
        }
    }
    if (node.HasChildNodes) {
        SanitizeChildren(node);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
927
6
Gpt3D_Clone927_6.cs 1 30
Gpt3D_Clone927_6.cs 31 59
----------------------------------------

private static void SanitizeNode (HtmlNode node) {
    if (node.NodeType == HtmlNodeType.Element) {
        if (! Whitelist.ContainsKey (node.Name)) {
            if (! DeletableNodesXpath.Contains (node.Name)) {
                node.Name = "removeableNode";
                DeletableNodesXpath.Add (node.Name);
            }
            if (node.HasChildNodes) {
                SanitizeChildren (node);
            }
            return;
        }
        if (node.HasAttributes) {
            for (int i = node.Attributes.Count - 1; i >= 0; i --) {
                HtmlAttribute currentAttribute = node.Attributes [i];
                string [] allowedAttributes = Whitelist [node.Name];
                if (allowedAttributes != null) {
                    if (! allowedAttributes.Contains (currentAttribute.Name)) {
                        node.Attributes.Remove (currentAttribute);
                    }
                } else {
                    node.Attributes.Remove (currentAttribute);
                }
            }
        }
    }
    if (node.HasChildNodes) {
        SanitizeChildren (node);
    }
}
----------------------------------------

  private static void SanitizeNode (HtmlNode node) {
     if (node.NodeType == HtmlNodeType.Element) {
       if (Whitelist.ContainsKey (node.Name)) {
            if (node.HasAttributes) {
                for (int i = 0; i < node.Attributes.Count; i++) {
                    HtmlAttribute currentAttribute = node.Attributes[i];
                    string[] allowedAttributes = Whitelist[node.Name];
                    if (allowedAttributes != null) {
                        if (!allowedAttributes.Contains(currentAttribute.Name)) {
                            node.Attributes.RemoveAt(i);
                        }
                    } else {
                        node.Attributes.RemoveAt(i);
                    }
                }
            }
        } else {
            if (!DeletableNodesXpath.Contains(node.Name)) {
                node.Name = "removeableNode";
                DeletableNodesXpath.Add(node.Name);
            }
        }
    }
    if (node.HasChildNodes) {
        SanitizeChildren(node);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
928
0
Gpt3D_Clone928_0.cs 1 24
Gpt3D_Clone928_0.cs 25 53
----------------------------------------

private static string RemoveExcessPeriods (string text) {
    if (string.IsNullOrEmpty (text))
        return string.Empty;
    if (! text.Contains (".."))
        return text;
    string extension = Path.GetExtension (text);
    string fileName = Path.GetFileNameWithoutExtension (text);
    StringBuilder result = new StringBuilder (text.Length);
    bool lastCharacterWasPeriod = false;
    bool thisCharacterIsPeriod = fileName.Length > 0 && fileName [0] == '.';
    bool nextCharacterIsPeriod;
    for (int index = 0; index < fileName.Length; index ++) {
        nextCharacterIsPeriod = fileName.Length == index + 1 || fileName [index + 1] == '.';
        if (! thisCharacterIsPeriod)
            result.Append (fileName [index]);
        else if (thisCharacterIsPeriod && ! lastCharacterWasPeriod && ! nextCharacterIsPeriod)
            result.Append ('.');
        else if (thisCharacterIsPeriod && ! lastCharacterWasPeriod)
            result.Append (' ');
        lastCharacterWasPeriod = thisCharacterIsPeriod;
        thisCharacterIsPeriod = nextCharacterIsPeriod;
    }
    return result.ToString () + extension;
}
----------------------------------------

 
private static string RemoveExcessPeriods (string text) {
    if (string.IsNullOrEmpty (text))
        return string.Empty;
    if (! text.Contains (".."))
        return text;
    string extension = Path.GetExtension (text);
    string fileName = Path.GetFileNameWithoutExtension (text);
    StringBuilder result = new StringBuilder (text.Length);
    bool hasPeriodAdjacent = false;
    bool thisCharacterIsPeriod;
    for (int index = 0; index < fileName.Length; index ++) {
        thisCharacterIsPeriod = fileName.Length == index + 1 || fileName [index + 1] == '.';
        if (! thisCharacterIsPeriod) {
            result.Append (fileName [index]);
            hasPeriodAdjacent = false;
        }
        else {
            if (hasPeriodAdjacent)
                continue;
            else 
                result.Append ('.');
            hasPeriodAdjacent = true;
        }
    }
    return result.ToString () + extension;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
928
1
Gpt3D_Clone928_1.cs 1 24
Gpt3D_Clone928_1.cs 25 49
----------------------------------------

private static string RemoveExcessPeriods (string text) {
    if (string.IsNullOrEmpty (text))
        return string.Empty;
    if (! text.Contains (".."))
        return text;
    string extension = Path.GetExtension (text);
    string fileName = Path.GetFileNameWithoutExtension (text);
    StringBuilder result = new StringBuilder (text.Length);
    bool lastCharacterWasPeriod = false;
    bool thisCharacterIsPeriod = fileName.Length > 0 && fileName [0] == '.';
    bool nextCharacterIsPeriod;
    for (int index = 0; index < fileName.Length; index ++) {
        nextCharacterIsPeriod = fileName.Length == index + 1 || fileName [index + 1] == '.';
        if (! thisCharacterIsPeriod)
            result.Append (fileName [index]);
        else if (thisCharacterIsPeriod && ! lastCharacterWasPeriod && ! nextCharacterIsPeriod)
            result.Append ('.');
        else if (thisCharacterIsPeriod && ! lastCharacterWasPeriod)
            result.Append (' ');
        lastCharacterWasPeriod = thisCharacterIsPeriod;
        thisCharacterIsPeriod = nextCharacterIsPeriod;
    }
    return result.ToString () + extension;
}
----------------------------------------

 
private static string RemoveExcessPeriods (string text) {
    if (string.IsNullOrEmpty (text))
        return string.Empty;
    if (! text.Contains (".."))
        return text;
    string extension = Path.GetExtension (text);
    string fileName = Path.GetFileNameWithoutExtension (text);
    StringBuilder result = new StringBuilder ();
    int periodCount = 0;
    bool thisCharacterIsPeriod;
    for (int index = 0; index < fileName.Length; index ++) {
        thisCharacterIsPeriod = fileName.Length == index + 1 || fileName [index + 1] == '.';
        if (! thisCharacterIsPeriod)
            result.Append (fileName [index]);
        else if (periodCount > 0)
            continue;
        else 
            result.Append ('.');
        periodCount++;
    }
    return result.ToString () + extension;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
928
5
Gpt3D_Clone928_5.cs 1 24
Gpt3D_Clone928_5.cs 25 47
----------------------------------------

private static string RemoveExcessPeriods (string text) {
    if (string.IsNullOrEmpty (text))
        return string.Empty;
    if (! text.Contains (".."))
        return text;
    string extension = Path.GetExtension (text);
    string fileName = Path.GetFileNameWithoutExtension (text);
    StringBuilder result = new StringBuilder (text.Length);
    bool lastCharacterWasPeriod = false;
    bool thisCharacterIsPeriod = fileName.Length > 0 && fileName [0] == '.';
    bool nextCharacterIsPeriod;
    for (int index = 0; index < fileName.Length; index ++) {
        nextCharacterIsPeriod = fileName.Length == index + 1 || fileName [index + 1] == '.';
        if (! thisCharacterIsPeriod)
            result.Append (fileName [index]);
        else if (thisCharacterIsPeriod && ! lastCharacterWasPeriod && ! nextCharacterIsPeriod)
            result.Append ('.');
        else if (thisCharacterIsPeriod && ! lastCharacterWasPeriod)
            result.Append (' ');
        lastCharacterWasPeriod = thisCharacterIsPeriod;
        thisCharacterIsPeriod = nextCharacterIsPeriod;
    }
    return result.ToString () + extension;
}
----------------------------------------

 
private static string RemoveExcessPeriods (string text) {
    if (string.IsNullOrEmpty (text))
        return string.Empty;
    if (! text.Contains (".."))
        return text;
    string extension = Path.GetExtension (text);
    string fileName = Path.GetFileNameWithoutExtension (text);
    StringBuilder result = new StringBuilder (text.Length);
    bool hasPeriodRecent = false;
    for (int index = 0; index < fileName.Length; index ++) {
        if (fileName [index] == '.' && hasPeriodRecent)
            continue;
        if (fileName [index] == '.')
            hasPeriodRecent = true;
        else 
            hasPeriodRecent = false;
        result.Append (fileName [index]);
    }
    return result.ToString () + extension;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
928
7
Gpt3D_Clone928_7.cs 1 24
Gpt3D_Clone928_7.cs 25 47
----------------------------------------

private static string RemoveExcessPeriods (string text) {
    if (string.IsNullOrEmpty (text))
        return string.Empty;
    if (! text.Contains (".."))
        return text;
    string extension = Path.GetExtension (text);
    string fileName = Path.GetFileNameWithoutExtension (text);
    StringBuilder result = new StringBuilder (text.Length);
    bool lastCharacterWasPeriod = false;
    bool thisCharacterIsPeriod = fileName.Length > 0 && fileName [0] == '.';
    bool nextCharacterIsPeriod;
    for (int index = 0; index < fileName.Length; index ++) {
        nextCharacterIsPeriod = fileName.Length == index + 1 || fileName [index + 1] == '.';
        if (! thisCharacterIsPeriod)
            result.Append (fileName [index]);
        else if (thisCharacterIsPeriod && ! lastCharacterWasPeriod && ! nextCharacterIsPeriod)
            result.Append ('.');
        else if (thisCharacterIsPeriod && ! lastCharacterWasPeriod)
            result.Append (' ');
        lastCharacterWasPeriod = thisCharacterIsPeriod;
        thisCharacterIsPeriod = nextCharacterIsPeriod;
    }
    return result.ToString () + extension;
}
----------------------------------------

 
private static string RemoveExcessPeriods (string text) {
    if (string.IsNullOrEmpty (text))
        return string.Empty;
    if (! text.Contains (".."))
        return text;
    string extension = Path.GetExtension (text);
    string fileName = Path.GetFileNameWithoutExtension (text);
    StringBuilder result = new StringBuilder (text.Length);
    int consecutivePeriodCount = 0;
    bool thisCharacterIsPeriod;
    for (int index = 0; index < fileName.Length; index ++) {
        thisCharacterIsPeriod = fileName.Length == index + 1 || fileName [index + 1] == '.';
        if (! thisCharacterIsPeriod)
            result.Append (fileName [index]);
        else if (consecutivePeriodCount == 0)
            result.Append ('.');
        consecutivePeriodCount++;
    }
    return result.ToString () + extension;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
92
1
Gpt3D_Clone92_1.cs 1 17
Gpt3D_Clone92_1.cs 18 48
----------------------------------------

static void Main (string [] args) {
    int n;
    Console.WriteLine ("Enter A Number :");
    n = int.Parse (Console.ReadLine ());
    if (n % 3 == 0) {
        if (n % 5 == 0) {
            Console.WriteLine ("This Number is Divisible by 3 and 5!");
        } else {
            printf ("\nThe number is divisible by 3 but not by 5");
        }
    } else if (n % 5 == 0) {
        Console.WriteLine ("The number is divisible by 5 but not by 3");
    } else {
        Console.WriteLine ("\nThis Number is Not Divisible by 3 and 5!");
    }
    Console.ReadLine ();
}
----------------------------------------

 
static void Main(string[] args) 
{ 
    int n; 
    bool divisibleBy3, divisibleBy5;
    Console.WriteLine("Enter A Number :"); 
    n = int.Parse(Console.ReadLine()); 
    divisibleBy3 = n % 3 == 0;
    divisibleBy5 = n % 5 == 0;
    if(divisibleBy3 && divisibleBy5)
    {
        Console.WriteLine("This Number is Divisible by 3 and 5!");
    }
    else if(divisibleBy3 && !divisibleBy5)
    {
        Console.WriteLine("\nThe number is divisible by 3 but not by 5");
    }
    else if(!divisibleBy3 && divisibleBy5)
    {
        Console.WriteLine("The number is divisible by 5 but not by 3");
    }
    else
    {
        Console.WriteLine("\nThis Number is Not Divisible by 3 and 5!");
    }
    Console.ReadLine(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
92
2
Gpt3D_Clone92_2.cs 1 17
Gpt3D_Clone92_2.cs 18 47
----------------------------------------

static void Main (string [] args) {
    int n;
    Console.WriteLine ("Enter A Number :");
    n = int.Parse (Console.ReadLine ());
    if (n % 3 == 0) {
        if (n % 5 == 0) {
            Console.WriteLine ("This Number is Divisible by 3 and 5!");
        } else {
            printf ("\nThe number is divisible by 3 but not by 5");
        }
    } else if (n % 5 == 0) {
        Console.WriteLine ("The number is divisible by 5 but not by 3");
    } else {
        Console.WriteLine ("\nThis Number is Not Divisible by 3 and 5!");
    }
    Console.ReadLine ();
}
----------------------------------------

 
static void Main(string[] args) 
{ 
    int n; 
    Console.WriteLine("Enter A Number :"); 
    n = int.Parse(Console.ReadLine()); 
    bool by3 = n % 3 == 0;
    bool by5 = n % 5 == 0;
    if (by3 && by5) { 
        Console.WriteLine("This Number is Divisible by 3 and 5!"); 
    } else {
        if (by3) 
        { 
            Console.WriteLine("\nThe number is divisible by 3 but not by 5"); 
        } 
        else 
        if (by5) 
        { 
            Console.WriteLine("The number is divisible by 5 but not by 3"); 
        } 
        else 
        { 
            Console.WriteLine("\nThis Number is Not Divisible by 3 and 5!"); 
        } 
    }
    Console.ReadLine(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
92
3
Gpt3D_Clone92_3.cs 1 17
Gpt3D_Clone92_3.cs 18 46
----------------------------------------

static void Main (string [] args) {
    int n;
    Console.WriteLine ("Enter A Number :");
    n = int.Parse (Console.ReadLine ());
    if (n % 3 == 0) {
        if (n % 5 == 0) {
            Console.WriteLine ("This Number is Divisible by 3 and 5!");
        } else {
            printf ("\nThe number is divisible by 3 but not by 5");
        }
    } else if (n % 5 == 0) {
        Console.WriteLine ("The number is divisible by 5 but not by 3");
    } else {
        Console.WriteLine ("\nThis Number is Not Divisible by 3 and 5!");
    }
    Console.ReadLine ();
}
----------------------------------------

 
static void Main(string[] args) 
{ 
    int n; 
    Console.WriteLine("Enter A Number :"); 
    n = int.Parse(Console.ReadLine()); 
    bool divisibleBy3 = n % 3 == 0;
    bool divisibleBy5 = n % 5 == 0;
    if ((divisibleBy3) && (divisibleBy5)) { 
        Console.WriteLine("This Number is Divisible by 3 and 5!"); 
    } 
    else if (divisibleBy3) 
    { 
        Console.WriteLine("\nThe number is divisible by 3 but not by 5"); 
    } 
    else 
    if (divisibleBy5) 
    { 
        Console.WriteLine("The number is divisible by 5 but not by 3"); 
    } 
    else 
    { 
        Console.WriteLine("\nThis Number is Not Divisible by 3 and 5!"); 
    } 
    Console.ReadLine(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
92
4
Gpt3D_Clone92_4.cs 1 17
Gpt3D_Clone92_4.cs 18 46
----------------------------------------

static void Main (string [] args) {
    int n;
    Console.WriteLine ("Enter A Number :");
    n = int.Parse (Console.ReadLine ());
    if (n % 3 == 0) {
        if (n % 5 == 0) {
            Console.WriteLine ("This Number is Divisible by 3 and 5!");
        } else {
            printf ("\nThe number is divisible by 3 but not by 5");
        }
    } else if (n % 5 == 0) {
        Console.WriteLine ("The number is divisible by 5 but not by 3");
    } else {
        Console.WriteLine ("\nThis Number is Not Divisible by 3 and 5!");
    }
    Console.ReadLine ();
}
----------------------------------------

 
static void Main(string[] args) 
{ 
    int n; 
    Console.WriteLine("Enter A Number :"); 
    n = int.Parse(Console.ReadLine()); 
    bool by3 = n % 3 == 0;
    bool by5 = n % 5 == 0;
    if (by3 && by5) { 
        Console.WriteLine("This Number is Divisible by 3 and 5!"); 
    } 
    else if (by3) 
    { 
        Console.WriteLine("\nThe number is divisible by 3 but not by 5"); 
    } 
    else 
    if (by5) 
    { 
        Console.WriteLine("The number is divisible by 5 but not by 3"); 
    } 
    else 
    { 
        Console.WriteLine("\nThis Number is Not Divisible by 3 and 5!"); 
    } 
    Console.ReadLine(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
92
5
Gpt3D_Clone92_5.cs 1 17
Gpt3D_Clone92_5.cs 18 46
----------------------------------------

static void Main (string [] args) {
    int n;
    Console.WriteLine ("Enter A Number :");
    n = int.Parse (Console.ReadLine ());
    if (n % 3 == 0) {
        if (n % 5 == 0) {
            Console.WriteLine ("This Number is Divisible by 3 and 5!");
        } else {
            printf ("\nThe number is divisible by 3 but not by 5");
        }
    } else if (n % 5 == 0) {
        Console.WriteLine ("The number is divisible by 5 but not by 3");
    } else {
        Console.WriteLine ("\nThis Number is Not Divisible by 3 and 5!");
    }
    Console.ReadLine ();
}
----------------------------------------

 
static void Main(string[] args) 
{ 
    int n; 
    Console.WriteLine("Enter A Number :"); 
    n = int.Parse(Console.ReadLine()); 
    bool divisibleBy3 = n % 3 == 0; // returns True or False
    bool divisibleBy5 = n % 5 == 0; // returns True or False
    if (divisibleBy3 && divisibleBy5) { 
        Console.WriteLine("This Number is Divisible by 3 and 5!"); 
    } 
    else if (divisibleBy3) 
    { 
        Console.WriteLine("\nThe number is divisible by 3 but not by 5"); 
    } 
    else 
    if (divisibleBy5) 
    { 
        Console.WriteLine("The number is divisible by 5 but not by 3"); 
    } 
    else 
    { 
        Console.WriteLine("\nThis Number is Not Divisible by 3 and 5!"); 
    } 
    Console.ReadLine(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
92
6
Gpt3D_Clone92_6.cs 1 17
Gpt3D_Clone92_6.cs 18 44
----------------------------------------

static void Main (string [] args) {
    int n;
    Console.WriteLine ("Enter A Number :");
    n = int.Parse (Console.ReadLine ());
    if (n % 3 == 0) {
        if (n % 5 == 0) {
            Console.WriteLine ("This Number is Divisible by 3 and 5!");
        } else {
            printf ("\nThe number is divisible by 3 but not by 5");
        }
    } else if (n % 5 == 0) {
        Console.WriteLine ("The number is divisible by 5 but not by 3");
    } else {
        Console.WriteLine ("\nThis Number is Not Divisible by 3 and 5!");
    }
    Console.ReadLine ();
}
----------------------------------------

 
static void Main(string[] args) 
{ 
    int n; 
    Console.WriteLine("Enter A Number :"); 
    n = int.Parse(Console.ReadLine()); 
    if(n % 3 == 0 && n % 5 != 0)
    {
        Console.WriteLine("\nThe number is divisible by 3 but not by 5");
    }
    else if(n % 3 != 0 && n % 5 == 0)
    {
        Console.WriteLine("The number is divisible by 5 but not by 3");
    }
    else if(n % 3 == 0 && n % 5 == 0)
    {
        Console.WriteLine("This Number is Divisible by 3 and 5!");
    }
    else
    {
        Console.WriteLine("\nThis Number is Not Divisible by 3 and 5!");
    }
    Console.ReadLine(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
92
7
Gpt3D_Clone92_7.cs 1 17
Gpt3D_Clone92_7.cs 18 43
----------------------------------------

static void Main (string [] args) {
    int n;
    Console.WriteLine ("Enter A Number :");
    n = int.Parse (Console.ReadLine ());
    if (n % 3 == 0) {
        if (n % 5 == 0) {
            Console.WriteLine ("This Number is Divisible by 3 and 5!");
        } else {
            printf ("\nThe number is divisible by 3 but not by 5");
        }
    } else if (n % 5 == 0) {
        Console.WriteLine ("The number is divisible by 5 but not by 3");
    } else {
        Console.WriteLine ("\nThis Number is Not Divisible by 3 and 5!");
    }
    Console.ReadLine ();
}
----------------------------------------

  static void Main(string[] args) 
{ 
    int n; 
    Console.WriteLine("Enter A Number :"); 
    n = int.Parse(Console.ReadLine()); 
    if (n % 3 == 0 && n % 5 == 0) { 
        Console.WriteLine("This Number is Divisible by 3 and 5!"); 
    } 
    else if (n % 3 == 0) 
    { 
        Console.WriteLine("\nThe number is divisible by 3 but not by 5"); 
    } 
    else 
    if (n % 5 == 0) 
    { 
        Console.WriteLine("The number is divisible by 5 but not by 3"); 
    } 
    else 
    { 
        Console.WriteLine("\nThis Number is Not Divisible by 3 and 5!"); 
    } 
    Console.ReadLine(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
930
0
Gpt3D_Clone930_0.cs 1 27
Gpt3D_Clone930_0.cs 28 78
----------------------------------------

public void MethodA () {
    lock (key)
    {
        while (lockedType != this.GetType ()) {
            if (lockedType == null) {
                lockedType = this.GetType ();
                signal.Set ();
            } else if (lockedType != this.GetType ()) {
                signal.WaitOne ();
            }
        }
        Interlocked.Increment (ref threadsInMethodA);
    } semaphore.WaitOne ();
    try {
        MethodAImplementation ();
    }
    finally {
        lock (key)
        {
            semaphore.Release ();
            int threads = Interlocked.Decrement (ref threadsInMethodA);
            if (threads == 0) {
                lockedType = null;
                signal.Reset ();
            }
        }}
}
----------------------------------------

  public void MethodA () 
    { 
        SpinLock sLock = new SpinLock (false); 
        bool lockTaken = false; 
        try 
        { 
            sLock.Enter (ref lockTaken); 
            while (lockedType != this.GetType ()) 
            { 
                if (lockedType == null) 
                { 
                    lockedType = this.GetType (); 
                    signal.Set (); 
                } 
                else if (lockedType != this.GetType ()) 
                { 
                    signal.WaitOne (); 
                } 
            } 
            Interlocked.Increment (ref threadsInMethodA); 
        } 
        finally 
        { 
            if (lockTaken) 
            { 
                sLock.Exit (); 
            } 
        } 
        semaphore.WaitOne (); 
        try 
        { 
            MethodAImplementation (); 
        } 
        finally 
        { 
            Monitor.Enter (key); 
            semaphore.Release (); 
            int threads = Interlocked.Decrement (ref threadsInMethodA); 
            if (threads == 0) 
            { 
                lockedType = null; 
                signal.Reset (); 
            } 
            Monitor.Exit (key); 
        } 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
930
1
Gpt3D_Clone930_1.cs 1 27
Gpt3D_Clone930_1.cs 28 63
----------------------------------------

public void MethodA () {
    lock (key)
    {
        while (lockedType != this.GetType ()) {
            if (lockedType == null) {
                lockedType = this.GetType ();
                signal.Set ();
            } else if (lockedType != this.GetType ()) {
                signal.WaitOne ();
            }
        }
        Interlocked.Increment (ref threadsInMethodA);
    } semaphore.WaitOne ();
    try {
        MethodAImplementation ();
    }
    finally {
        lock (key)
        {
            semaphore.Release ();
            int threads = Interlocked.Decrement (ref threadsInMethodA);
            if (threads == 0) {
                lockedType = null;
                signal.Reset ();
            }
        }}
}
----------------------------------------

  public void MethodA () 
    { 
        while (true) { 
            lock (key) 
            { 
                if (lockedType == null || lockedType == this.GetType ()) { 
                    lockedType = this.GetType (); 
                    signal.Set (); 
                    break; 
                } 
                else { 
                    signal.WaitOne (); 
                } 
            } 
        } 
        Interlocked.Increment (ref threadsInMethodA); 
        semaphore.WaitOne (); 
        try { 
            MethodAImplementation (); 
        } 
        finally { 
            lock (key) 
            { 
                semaphore.Release (); 
                int threads = Interlocked.Decrement (ref threadsInMethodA); 
                if (threads == 0) { 
                    lockedType = null; 
                    signal.Reset (); 
                } 
            } 
        } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
930
2
Gpt3D_Clone930_2.cs 1 27
Gpt3D_Clone930_2.cs 28 70
----------------------------------------

public void MethodA () {
    lock (key)
    {
        while (lockedType != this.GetType ()) {
            if (lockedType == null) {
                lockedType = this.GetType ();
                signal.Set ();
            } else if (lockedType != this.GetType ()) {
                signal.WaitOne ();
            }
        }
        Interlocked.Increment (ref threadsInMethodA);
    } semaphore.WaitOne ();
    try {
        MethodAImplementation ();
    }
    finally {
        lock (key)
        {
            semaphore.Release ();
            int threads = Interlocked.Decrement (ref threadsInMethodA);
            if (threads == 0) {
                lockedType = null;
                signal.Reset ();
            }
        }}
}
----------------------------------------

  public void MethodA () 
    { 
        while (true) 
        { 
            if (Monitor.TryEnter (key)) 
            { 
                if (lockedType == null || lockedType == this.GetType ()) 
                { 
                    lockedType = this.GetType (); 
                    signal.Set (); 
                    break; 
                } 
                else 
                { 
                    Monitor.Wait (key); 
                } 
                Monitor.Exit (key); 
            } 
        } 
        Interlocked.Increment (ref threadsInMethodA); 
        semaphore.WaitOne (); 
        try 
        { 
            MethodAImplementation (); 
        } 
        finally 
        { 
            lock (key) 
            { 
                semaphore.Release (); 
                int threads = Interlocked.Decrement (ref threadsInMethodA); 
                if (threads == 0) 
                { 
                    lockedType = null; 
                    signal.Reset (); 
                } 
            } 
        } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
930
3
Gpt3D_Clone930_3.cs 1 27
Gpt3D_Clone930_3.cs 28 62
----------------------------------------

public void MethodA () {
    lock (key)
    {
        while (lockedType != this.GetType ()) {
            if (lockedType == null) {
                lockedType = this.GetType ();
                signal.Set ();
            } else if (lockedType != this.GetType ()) {
                signal.WaitOne ();
            }
        }
        Interlocked.Increment (ref threadsInMethodA);
    } semaphore.WaitOne ();
    try {
        MethodAImplementation ();
    }
    finally {
        lock (key)
        {
            semaphore.Release ();
            int threads = Interlocked.Decrement (ref threadsInMethodA);
            if (threads == 0) {
                lockedType = null;
                signal.Reset ();
            }
        }}
}
----------------------------------------

  public void MethodA () 
    { 
        bool flag = false; 
        Monitor.Enter (key, ref flag); 
        while (lockedType != this.GetType ()) { 
            if (lockedType == null) { 
                lockedType = this.GetType (); 
                signal.Set (); 
            } 
            else if (lockedType != this.GetType ()) { 
                Monitor.Wait (key); 
            } 
        } 
        Interlocked.Increment (ref threadsInMethodA); 
        Monitor.Exit (key); 
        semaphore.WaitOne (); 
        try { 
            MethodAImplementation (); 
        } 
        finally { 
            Monitor.Enter (key); 
            semaphore.Release (); 
            int threads = Interlocked.Decrement (ref threadsInMethodA); 
            if (threads == 0) { 
                lockedType = null; 
                signal.Reset (); 
            } 
            Monitor.Exit (key); 
        } 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
930
4
Gpt3D_Clone930_4.cs 1 27
Gpt3D_Clone930_4.cs 28 61
----------------------------------------

public void MethodA () {
    lock (key)
    {
        while (lockedType != this.GetType ()) {
            if (lockedType == null) {
                lockedType = this.GetType ();
                signal.Set ();
            } else if (lockedType != this.GetType ()) {
                signal.WaitOne ();
            }
        }
        Interlocked.Increment (ref threadsInMethodA);
    } semaphore.WaitOne ();
    try {
        MethodAImplementation ();
    }
    finally {
        lock (key)
        {
            semaphore.Release ();
            int threads = Interlocked.Decrement (ref threadsInMethodA);
            if (threads == 0) {
                lockedType = null;
                signal.Reset ();
            }
        }}
}
----------------------------------------

  public void MethodA () 
    { 
        Monitor.Enter (key); 
        while (lockedType != this.GetType ()) { 
            if (lockedType == null) { 
                lockedType = this.GetType (); 
                signal.Set (); 
            } 
            else if (lockedType != this.GetType ()) { 
                Monitor.Wait (key); 
            } 
        } 
        Interlocked.Increment (ref threadsInMethodA); 
        Monitor.Exit (key); 
        semaphore.WaitOne (); 
        try { 
            MethodAImplementation (); 
        } 
        finally { 
            Monitor.Enter (key); 
            semaphore.Release (); 
            int threads = Interlocked.Decrement (ref threadsInMethodA); 
            if (threads == 0) { 
                lockedType = null; 
                signal.Reset (); 
            } 
            Monitor.Exit (key); 
        } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
933
2
Gpt3D_Clone933_2.cs 1 10
Gpt3D_Clone933_2.cs 11 23
----------------------------------------

[Test] public void test () {
    List < int > test = new List < int > ();
    for (int i = 0; i < 10; i ++) {
        test.Add (MyMath.Random (100));
    }
    Console.WriteLine ("result:");
    foreach (int i in test) {
        Console.WriteLine ();
    }
}
----------------------------------------

 [Test] public void test() {
    List<int> test = new List<int>();
    for (int i = 0; i < 10; i++) {
        int randNum = MyMath.Random(100);
        test.Add(randNum);
    }
    Console.Write("result:");
    for (int i = 0; i < test.Count; i++) {
        Console.Write($" {test[i]}");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
933
3
Gpt3D_Clone933_3.cs 1 10
Gpt3D_Clone933_3.cs 11 22
----------------------------------------

[Test] public void test () {
    List < int > test = new List < int > ();
    for (int i = 0; i < 10; i ++) {
        test.Add (MyMath.Random (100));
    }
    Console.WriteLine ("result:");
    foreach (int i in test) {
        Console.WriteLine ();
    }
}
----------------------------------------

 [Test] public void test() {
    List<int> test = new List<int>();
    for (int i = 0; i < 10; i++) {
        test.Add(MyMath.Random());
    }
    Console.WriteLine("result:");
    for (int i = 0; i < test.Count; i++) {
        Console.WriteLine(test[i]);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
933
5
Gpt3D_Clone933_5.cs 1 10
Gpt3D_Clone933_5.cs 11 22
----------------------------------------

[Test] public void test () {
    List < int > test = new List < int > ();
    for (int i = 0; i < 10; i ++) {
        test.Add (MyMath.Random (100));
    }
    Console.WriteLine ("result:");
    foreach (int i in test) {
        Console.WriteLine ();
    }
}
----------------------------------------

 [Test] public void test() {
    List<int> test = new List<int>();
    for (int i = 0; i < 10; i++) {
        test.Add(MyMath.Random());
    }
    Console.Write("result:");
    foreach (int num in test) {
        Console.WriteLine(" " + num);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
933
6
Gpt3D_Clone933_6.cs 1 10
Gpt3D_Clone933_6.cs 11 21
----------------------------------------

[Test] public void test () {
    List < int > test = new List < int > ();
    for (int i = 0; i < 10; i ++) {
        test.Add (MyMath.Random (100));
    }
    Console.WriteLine ("result:");
    foreach (int i in test) {
        Console.WriteLine ();
    }
}
----------------------------------------

 [Test] public void test() {
    List<int> test = new List<int>();
    for (int i = 0; i < 10; i++) {
        int randNum = MyMath.Random(100);
        test.Add(randNum);
    }
    Console.Write("result:");
    test.ForEach(num => Console.WriteLine(" " + num));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
933
7
Gpt3D_Clone933_7.cs 1 10
Gpt3D_Clone933_7.cs 11 20
----------------------------------------

[Test] public void test () {
    List < int > test = new List < int > ();
    for (int i = 0; i < 10; i ++) {
        test.Add (MyMath.Random (100));
    }
    Console.WriteLine ("result:");
    foreach (int i in test) {
        Console.WriteLine ();
    }
}
----------------------------------------

 [Test] public void test() {
    List<int> test = new List<int>();
    for (int i = 0; i < 10; i++) {
        test.Add(MyMath.Random(100));
    }
    Console.Write("result:");
    test.ForEach(num => Console.Write($" {num}"));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
933
8
Gpt3D_Clone933_8.cs 1 10
Gpt3D_Clone933_8.cs 11 20
----------------------------------------

[Test] public void test () {
    List < int > test = new List < int > ();
    for (int i = 0; i < 10; i ++) {
        test.Add (MyMath.Random (100));
    }
    Console.WriteLine ("result:");
    foreach (int i in test) {
        Console.WriteLine ();
    }
}
----------------------------------------

 [Test] public void test() {
    List<int> test = new List<int>();
    for (int i = 0; i < 10; i++) {
        test.Add(MyMath.Random(100));
    }
    Console.Write("result:");
    test.ForEach(num => Console.WriteLine(" " + num));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
936
1
Gpt3D_Clone936_1.cs 1 12
Gpt3D_Clone936_1.cs 13 30
----------------------------------------

public static int GetSeed () {
    byte [] raw = Guid.NewGuid ().ToByteArray ();
    int i1 = BitConverter.ToInt32 (raw, 0);
    int i2 = BitConverter.ToInt32 (raw, 4);
    int i3 = BitConverter.ToInt32 (raw, 8);
    int i4 = BitConverter.ToInt32 (raw, 12);
    long val = i1 + i2 + i3 + i4;
    while (val > int.MaxValue) {
        val -= int.MaxValue;
    }
    return (int) val;
}
----------------------------------------

 public static int GetSeed () {
    byte[] randomBytes = new byte[16];
    using (var generator = RandomNumberGenerator.Create())
    {
        generator.GetBytes(randomBytes);
    }          
    int i1 = BitConverter.ToInt32 (randomBytes, 0);
    int i2 = BitConverter.ToInt32 (randomBytes, 4);
    int i3 = BitConverter.ToInt32 (randomBytes, 8);
    int i4 = BitConverter.ToInt32 (randomBytes, 12);
    long val = i1 + i2 + i3 + i4;
    while (val > int.MaxValue) {
        val -= int.MaxValue;
    }
    return (int) val;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
936
2
Gpt3D_Clone936_2.cs 1 12
Gpt3D_Clone936_2.cs 13 28
----------------------------------------

public static int GetSeed () {
    byte [] raw = Guid.NewGuid ().ToByteArray ();
    int i1 = BitConverter.ToInt32 (raw, 0);
    int i2 = BitConverter.ToInt32 (raw, 4);
    int i3 = BitConverter.ToInt32 (raw, 8);
    int i4 = BitConverter.ToInt32 (raw, 12);
    long val = i1 + i2 + i3 + i4;
    while (val > int.MaxValue) {
        val -= int.MaxValue;
    }
    return (int) val;
}
----------------------------------------

 public static int GetSeed () {
    byte[] b = new byte[32];
    RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();
    rng.GetBytes (b);
    int i1 = BitConverter.ToInt32 (b, 0);
    int i2 = BitConverter.ToInt32 (b, 4);
    int i3 = BitConverter.ToInt32 (b, 8);
    int i4 = BitConverter.ToInt32 (b, 12);
    long val = i1 + i2 + i3 + i4;
    while (val > int.MaxValue) {
        val -= int.MaxValue;
    }
    return (int) val;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
936
3
Gpt3D_Clone936_3.cs 1 12
Gpt3D_Clone936_3.cs 13 28
----------------------------------------

public static int GetSeed () {
    byte [] raw = Guid.NewGuid ().ToByteArray ();
    int i1 = BitConverter.ToInt32 (raw, 0);
    int i2 = BitConverter.ToInt32 (raw, 4);
    int i3 = BitConverter.ToInt32 (raw, 8);
    int i4 = BitConverter.ToInt32 (raw, 12);
    long val = i1 + i2 + i3 + i4;
    while (val > int.MaxValue) {
        val -= int.MaxValue;
    }
    return (int) val;
}
----------------------------------------

 public static int GetSeed () {
    var crypto = new RNGCryptoServiceProvider();
    byte[] bytes = new byte[4];
    crypto.GetBytes(bytes);
    int i1 = BitConverter.ToInt32 (bytes, 0);
    int i2 = BitConverter.ToInt32 (bytes, 4);
    int i3 = BitConverter.ToInt32 (bytes, 8);
    int i4 = BitConverter.ToInt32 (bytes, 12);
    long val = i1 + i2 + i3 + i4;
    while (val > int.MaxValue) {
        val -= int.MaxValue;
    }
    return (int) val;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
936
4
Gpt3D_Clone936_4.cs 1 12
Gpt3D_Clone936_4.cs 13 27
----------------------------------------

public static int GetSeed () {
    byte [] raw = Guid.NewGuid ().ToByteArray ();
    int i1 = BitConverter.ToInt32 (raw, 0);
    int i2 = BitConverter.ToInt32 (raw, 4);
    int i3 = BitConverter.ToInt32 (raw, 8);
    int i4 = BitConverter.ToInt32 (raw, 12);
    long val = i1 + i2 + i3 + i4;
    while (val > int.MaxValue) {
        val -= int.MaxValue;
    }
    return (int) val;
}
----------------------------------------

 public static int GetSeed () {
    byte[] array = Guid.NewGuid().ToByteArray();
    int pos = 0;
    int i1 = (array[pos++] & 0xFF) << 24 | (array[pos++] & 0xFF) << 16 | (array[pos++] & 0xFF) << 8 | array[pos++] & 0xFF;
    int i2 = (array[pos++] & 0xFF) << 24 | (array[pos++] & 0xFF) << 16 | (array[pos++] & 0xFF) << 8 | array[pos++] & 0xFF;
    int i3 = (array[pos++] & 0xFF) << 24 | (array[pos++] & 0xFF) << 16 | (array[pos++] & 0xFF) << 8 | array[pos++] & 0xFF;
    int i4 = (array[pos++] & 0xFF) << 24 | (array[pos++] & 0xFF) << 16 | (array[pos++] & 0xFF) << 8 | array[pos++] & 0xFF;   
    long val = i1 + i2 + i3 + i4;
    while (val > int.MaxValue) {
        val -= int.MaxValue;
    }
    return (int) val;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
93
4
Gpt3D_Clone93_4.cs 1 12
Gpt3D_Clone93_4.cs 13 25
----------------------------------------

public RecaptchaValidationResult Validate (string recaptchaResponse) {
    RecaptchaValidationResult result = new RecaptchaValidationResult ();
    HttpWebRequest req = (HttpWebRequest) WebRequest.Create ("https://www.google.com/recaptcha/api/siteverify?secret=" + SecretKey + "&response=" + recaptchaResponse + "&remoteip=" + GetClientIp ());
    using (WebResponse wResponse = req.GetResponse ())
    {
        using (StreamReader readStream = new StreamReader (wResponse.GetResponseStream ()))
        {
            string jsonResponse = readStream.ReadToEnd ();
            JavaScriptSerializer js = new JavaScriptSerializer ();
            result = js.Deserialize < RecaptchaValidationResult > (jsonResponse.Replace ("error-codes", "ErrorMessages").Replace ("success", "Succeeded"));
        }} return result;
}
----------------------------------------

	public RecaptchaValidationResult Validate (string recaptchaResponse) {
    RecaptchaValidationResult result = new RecaptchaValidationResult ();
    HttpWebRequest req = (HttpWebRequest) WebRequest.Create ("https://www.google.com/recaptcha/api/siteverify?secret=" + SecretKey + "&response=" + recaptchaResponse + "&remoteip=" + GetClientIp ());
    using (HttpWebResponse response = (HttpWebResponse)req.GetResponse()){
        JavaScriptSerializer js = new JavaScriptSerializer();
        using (StreamReader sr = new StreamReader(response.GetResponseStream())){
            result = js.Deserialize<RecaptchaValidationResult>(sr.ReadToEnd().Replace("error-codes", "ErrorMessages").Replace("success", "Succeeded"));
        }
    }
    return result;	
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
93
6
Gpt3D_Clone93_6.cs 1 12
Gpt3D_Clone93_6.cs 13 24
----------------------------------------

public RecaptchaValidationResult Validate (string recaptchaResponse) {
    RecaptchaValidationResult result = new RecaptchaValidationResult ();
    HttpWebRequest req = (HttpWebRequest) WebRequest.Create ("https://www.google.com/recaptcha/api/siteverify?secret=" + SecretKey + "&response=" + recaptchaResponse + "&remoteip=" + GetClientIp ());
    using (WebResponse wResponse = req.GetResponse ())
    {
        using (StreamReader readStream = new StreamReader (wResponse.GetResponseStream ()))
        {
            string jsonResponse = readStream.ReadToEnd ();
            JavaScriptSerializer js = new JavaScriptSerializer ();
            result = js.Deserialize < RecaptchaValidationResult > (jsonResponse.Replace ("error-codes", "ErrorMessages").Replace ("success", "Succeeded"));
        }} return result;
}
----------------------------------------

	public RecaptchaValidationResult Validate (string recaptchaResponse) {
    RecaptchaValidationResult result = new RecaptchaValidationResult (); 
    HttpWebRequest req = (HttpWebRequest) WebRequest.Create ("http://www.google.com/recaptcha/api/siteverify?secret=" + SecretKey + "&response=" + recaptchaResponse + "&remoteip=" + GetClientIp ());
    WebResponse response = req.GetResponse();
    JavaScriptSerializer js = new JavaScriptSerializer();
    using (StreamReader reader = new StreamReader(response.GetResponseStream())){
        result = js.Deserialize<RecaptchaValidationResult>(reader.ReadToEnd().Replace("error-codes", "ErrorMessages").Replace("success", "Succeeded"));
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
93
7
Gpt3D_Clone93_7.cs 1 12
Gpt3D_Clone93_7.cs 13 24
----------------------------------------

public RecaptchaValidationResult Validate (string recaptchaResponse) {
    RecaptchaValidationResult result = new RecaptchaValidationResult ();
    HttpWebRequest req = (HttpWebRequest) WebRequest.Create ("https://www.google.com/recaptcha/api/siteverify?secret=" + SecretKey + "&response=" + recaptchaResponse + "&remoteip=" + GetClientIp ());
    using (WebResponse wResponse = req.GetResponse ())
    {
        using (StreamReader readStream = new StreamReader (wResponse.GetResponseStream ()))
        {
            string jsonResponse = readStream.ReadToEnd ();
            JavaScriptSerializer js = new JavaScriptSerializer ();
            result = js.Deserialize < RecaptchaValidationResult > (jsonResponse.Replace ("error-codes", "ErrorMessages").Replace ("success", "Succeeded"));
        }} return result;
}
----------------------------------------

	public RecaptchaValidationResult Validate (string recaptchaResponse) {
    RecaptchaValidationResult result = new RecaptchaValidationResult ();
    HttpWebRequest req = (HttpWebRequest) WebRequest.Create ("http://www.google.com/recaptcha/api/siteverify?secret=" + SecretKey + "&response=" + recaptchaResponse + "&remoteip=" + GetClientIp ());
    using (Stream s = req.GetResponse ().GetResponseStream ())
    using (StreamReader sr = new StreamReader (s)){
        JavaScriptSerializer js = new JavaScriptSerializer ();
        result = js.Deserialize<RecaptchaValidationResult>(sr.ReadToEnd().Replace("error-codes", "ErrorMessages").Replace("success", "Succeeded"));
    }
    return result;	
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
93
8
Gpt3D_Clone93_8.cs 1 12
Gpt3D_Clone93_8.cs 13 25
----------------------------------------

public RecaptchaValidationResult Validate (string recaptchaResponse) {
    RecaptchaValidationResult result = new RecaptchaValidationResult ();
    HttpWebRequest req = (HttpWebRequest) WebRequest.Create ("https://www.google.com/recaptcha/api/siteverify?secret=" + SecretKey + "&response=" + recaptchaResponse + "&remoteip=" + GetClientIp ());
    using (WebResponse wResponse = req.GetResponse ())
    {
        using (StreamReader readStream = new StreamReader (wResponse.GetResponseStream ()))
        {
            string jsonResponse = readStream.ReadToEnd ();
            JavaScriptSerializer js = new JavaScriptSerializer ();
            result = js.Deserialize < RecaptchaValidationResult > (jsonResponse.Replace ("error-codes", "ErrorMessages").Replace ("success", "Succeeded"));
        }} return result;
}
----------------------------------------

 public RecaptchaValidationResult Validate (string recaptchaResponse) {
    RecaptchaValidationResult result = new RecaptchaValidationResult ();
    HttpWebRequest req = (HttpWebRequest) WebRequest.Create (string.Format("https://www.google.com/recaptcha/api/siteverify?secret={0}&response={1}&remoteip={2}", SecretKey, recaptchaResponse, GetClientIp()));
    using (WebResponse response = req.GetResponse())
    using (StreamReader reader = new StreamReader(response.GetResponseStream()))
    {
        JavaScriptSerializer js = new JavaScriptSerializer();
        result = js.Deserialize<RecaptchaValidationResult> (reader.ReadToEnd().Replace("error-codes", "ErrorMessages").Replace("success", "Succeeded"));
    }
     return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
944
0
Gpt3D_Clone944_0.cs 1 16
Gpt3D_Clone944_0.cs 17 36
----------------------------------------

private void RunTest () {
    byte [] iba;
    iba = ReadImage ("D:\\Images\\Image01.jpg");
    using (Image img = DeserializeImage (iba))
    {
        SaveImage (img, "D:\\Images\\Image01_Copy.jpg");
    } iba = ReadImage ("D:\\Images\\Image02.png");
    using (Image img1 = DeserializeImage (iba))
    {
        SaveImage (img1, "D:\\Images\\Image02_Copy.png");
    } iba = ReadImage ("D:\\Images\\Image03.gif");
    using (var img2 = DeserializeImage (iba))
    {
        SaveImage (img2, "D:\\Images\\Image03_Copy.gif");
    } MessageBox.Show ("Test Complete");
}
----------------------------------------

 
private void RunTest () {
    byte [] iba;
    iba = ReadImage ("D:\\Images\\Image01.jpg");
    Image img = DeserializeImage (iba);
    SaveImage (img, "D:\\Images\\Image01_Copy.jpg");
    iba = ReadImage ("D:\\Images\\Image02.png");
    var img1 = DeserializeImage (iba);
    SaveImage (img1, "D:\\Images\\Image02_Copy.png");
    iba = ReadImage ("D:\\Images\\Image03.gif");
    var img2 = DeserializeImage (iba);
    SaveImage (img2, "D:\\Images\\Image03_Copy.gif");
    MessageBox.Show ("Test Complete");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
945
1
Gpt3D_Clone945_1.cs 1 25
Gpt3D_Clone945_1.cs 26 52
----------------------------------------

public void DisableForm (ControlCollection ctrls) {
    foreach (Control ctrl in ctrls) {
        if (ctrl is TextBox)
            ((TextBox) ctrl).Enabled = false;
        if (ctrl is Button)
            ((Button) ctrl).Enabled = false;
        else if (ctrl is DropDownList)
            ((DropDownList) ctrl).Enabled = false;
        else if (ctrl is CheckBox)
            ((CheckBox) ctrl).Enabled = false;
        else if (ctrl is RadioButton)
            ((RadioButton) ctrl).Enabled = false;
        else if (ctrl is HtmlInputButton)
            ((HtmlInputButton) ctrl).Disabled = true;
        else if (ctrl is HtmlInputText)
            ((HtmlInputText) ctrl).Disabled = true;
        else if (ctrl is HtmlSelect)
            ((HtmlSelect) ctrl).Disabled = true;
        else if (ctrl is HtmlInputCheckBox)
            ((HtmlInputCheckBox) ctrl).Disabled = true;
        else if (ctrl is HtmlInputRadioButton)
            ((HtmlInputRadioButton) ctrl).Disabled = true;
        DisableForm (ctrl.Controls);
    }
}
----------------------------------------

 public void DisableForm (ControlCollection ctrls) {
    foreach (Control ctrl in ctrls) {
        if (ctrl is TextBox)
            ctrl.Enabled = false;
        else if (ctrl is Button)
            ctrl.Enabled = false;
        else if (ctrl is DropDownList)
            ctrl.Enabled = false;
        else if (ctrl is CheckBox)
            ctrl.Enabled = false;
        else if (ctrl is RadioButton)
            ctrl.Enabled = false;
        else if (ctrl is HtmlInputButton)
            ctrl.Disabled = true;
        else if (ctrl is HtmlInputText)
            ctrl.Disabled = true;
        else if (ctrl is HtmlSelect)
            ctrl.Disabled = true;
        else if (ctrl is HtmlInputCheckBox)
            ctrl.Disabled = true;
        else if (ctrl is HtmlInputRadioButton)
            ctrl.Disabled = true;
        DisableForm (ctrl.Controls);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
948
0
Gpt3D_Clone948_0.cs 1 28
Gpt3D_Clone948_0.cs 29 56
----------------------------------------

void btnSubmitCountParticipant_Click (object sender, EventArgs e) {
    StringBuilder sbparticipantName = new StringBuilder ();
    Panel p1 = new Panel ();
    try {
        int numberofparticipants = Convert.ToInt32 (drpNoofparticipants.SelectedValue);
        ViewState ["numberofparticipants"] = numberofparticipants;
        Table tableparticipantName = new Table ();
        int rowcount = 1;
        int columnCount = numberofparticipants;
        for (int i = 0; i < rowcount; i ++) {
            TableRow row = new TableRow ();
            for (int j = 0; j < columnCount; j ++) {
                TableCell cell = new TableCell ();
                TextBox txtNameofParticipant = new TextBox ();
                txtNameofParticipant.ID = "txtNameofParticipant" + Convert.ToString (i);
                cell.ID = "cell" + Convert.ToString (i);
                cell.Controls.Add (txtNameofParticipant);
                row.Cells.Add (cell);
            }
            tableparticipantName.Rows.Add (row);
            p1.Controls.Add (tableparticipantName);
        }
        Cache ["TempPanel"] = p1;
        panelNameofParticipants.Controls.Add (p1);
    }
    catch (Exception ex) {
    }
}
----------------------------------------

 void btnSubmitCountParticipant_Click (object sender, EventArgs e) {
    Panel p1 = new Panel ();
    int numberofparticipants = 0;
    try {
        numberofparticipants = Convert.ToInt32 (drpNoofparticipants.SelectedValue);
        Table tblparticipatName = new Table();
        for(int i = 1; i <= numberofparticipants; i++)
        {
            TableRow row = new TableRow();
            TableCell cell = new TableCell();
            TextBox txtNameofParticipant = new TextBox ();
            txtNameofParticipant.ID = "txtNameofParticipant" + i;
            cell.ID = "cell" + i;
            cell.Controls.Add (txtNameofParticipant);
            row.Cells.Add (cell);
            tblparticipatName.Rows.Add(row);
        }
        p1.Controls.Add (tblparticipatName);
        // Store ViewState
        ViewState ["numberOfParticipants"] = numberofparticipants;
        Cache ["TempPanel"] = p1;
        panelNameofParticipants.Controls.Add (p1);
    }
    catch (Exception ex) {
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
948
1
Gpt3D_Clone948_1.cs 1 28
Gpt3D_Clone948_1.cs 29 56
----------------------------------------

void btnSubmitCountParticipant_Click (object sender, EventArgs e) {
    StringBuilder sbparticipantName = new StringBuilder ();
    Panel p1 = new Panel ();
    try {
        int numberofparticipants = Convert.ToInt32 (drpNoofparticipants.SelectedValue);
        ViewState ["numberofparticipants"] = numberofparticipants;
        Table tableparticipantName = new Table ();
        int rowcount = 1;
        int columnCount = numberofparticipants;
        for (int i = 0; i < rowcount; i ++) {
            TableRow row = new TableRow ();
            for (int j = 0; j < columnCount; j ++) {
                TableCell cell = new TableCell ();
                TextBox txtNameofParticipant = new TextBox ();
                txtNameofParticipant.ID = "txtNameofParticipant" + Convert.ToString (i);
                cell.ID = "cell" + Convert.ToString (i);
                cell.Controls.Add (txtNameofParticipant);
                row.Cells.Add (cell);
            }
            tableparticipantName.Rows.Add (row);
            p1.Controls.Add (tableparticipantName);
        }
        Cache ["TempPanel"] = p1;
        panelNameofParticipants.Controls.Add (p1);
    }
    catch (Exception ex) {
    }
}
----------------------------------------

 void btnSubmitCountParticipant_Click (object sender, EventArgs e) {
    Panel p1 = new Panel ();
    int numberofparticipants = 0;
    try {
        numberofparticipants = Convert.ToInt32 (drpNoofparticipants.SelectedValue);
        Table tblparticipatName = new Table();
        for(int i = 0; i < numberofparticipants; ++ i)
        {
            TableRow row = new TableRow();
            TableCell cell = new TableCell();
            TextBox txtNameofParticipant = new TextBox ();
            txtNameofParticipant.ID = "txtNameofParticipant" + Convert.ToString (i);
            cell.ID = "cell" + Convert.ToString (i);
            cell.Controls.Add (txtNameofParticipant);
            row.Cells.Add (cell);
            tblparticipatName.Rows.Add(row);
        }
        p1.Controls.Add (tblparticipatName);
        // Store ViewState
        ViewState ["numberofparticipants"] = numberofparticipants;
        Cache ["TempPanel"] = p1;
        panelNameofParticipants.Controls.Add (p1);
    }
    catch (Exception ex) {
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
948
2
Gpt3D_Clone948_2.cs 1 28
Gpt3D_Clone948_2.cs 29 56
----------------------------------------

void btnSubmitCountParticipant_Click (object sender, EventArgs e) {
    StringBuilder sbparticipantName = new StringBuilder ();
    Panel p1 = new Panel ();
    try {
        int numberofparticipants = Convert.ToInt32 (drpNoofparticipants.SelectedValue);
        ViewState ["numberofparticipants"] = numberofparticipants;
        Table tableparticipantName = new Table ();
        int rowcount = 1;
        int columnCount = numberofparticipants;
        for (int i = 0; i < rowcount; i ++) {
            TableRow row = new TableRow ();
            for (int j = 0; j < columnCount; j ++) {
                TableCell cell = new TableCell ();
                TextBox txtNameofParticipant = new TextBox ();
                txtNameofParticipant.ID = "txtNameofParticipant" + Convert.ToString (i);
                cell.ID = "cell" + Convert.ToString (i);
                cell.Controls.Add (txtNameofParticipant);
                row.Cells.Add (cell);
            }
            tableparticipantName.Rows.Add (row);
            p1.Controls.Add (tableparticipantName);
        }
        Cache ["TempPanel"] = p1;
        panelNameofParticipants.Controls.Add (p1);
    }
    catch (Exception ex) {
    }
}
----------------------------------------

 void btnSubmitCountParticipant_Click (object sender, EventArgs e) {
    Panel p1 = new Panel ();
    int numberofparticipants = 0;
    try {
        numberofparticipants = Convert.ToInt32 (drpNoofparticipants.SelectedValue);
        Table tblparticipatName = new Table();
        for(int i = 0; i < numberofparticipants; i++)
        {
            TableRow row = new TableRow();
            TableCell cell = new TableCell();
            TextBox txtNameofParticipant = new TextBox ();
            txtNameofParticipant.ID = string.Format("txtNameofParticipant{0}", i);
            cell.ID = string.Format("cell{0}", i);
            cell.Controls.Add (txtNameofParticipant);
            row.Cells.Add (cell);
            tblparticipatName.Rows.Add(row);
        }
        p1.Controls.Add (tblparticipatName);
        // Store ViewState
        ViewState ["numberOfParticipants"] = numberofparticipants;
        Cache ["TempPanel"] = p1;
        panelNameofParticipants.Controls.Add (p1);
    }
    catch (Exception ex) {
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
948
3
Gpt3D_Clone948_3.cs 1 28
Gpt3D_Clone948_3.cs 29 59
----------------------------------------

void btnSubmitCountParticipant_Click (object sender, EventArgs e) {
    StringBuilder sbparticipantName = new StringBuilder ();
    Panel p1 = new Panel ();
    try {
        int numberofparticipants = Convert.ToInt32 (drpNoofparticipants.SelectedValue);
        ViewState ["numberofparticipants"] = numberofparticipants;
        Table tableparticipantName = new Table ();
        int rowcount = 1;
        int columnCount = numberofparticipants;
        for (int i = 0; i < rowcount; i ++) {
            TableRow row = new TableRow ();
            for (int j = 0; j < columnCount; j ++) {
                TableCell cell = new TableCell ();
                TextBox txtNameofParticipant = new TextBox ();
                txtNameofParticipant.ID = "txtNameofParticipant" + Convert.ToString (i);
                cell.ID = "cell" + Convert.ToString (i);
                cell.Controls.Add (txtNameofParticipant);
                row.Cells.Add (cell);
            }
            tableparticipantName.Rows.Add (row);
            p1.Controls.Add (tableparticipantName);
        }
        Cache ["TempPanel"] = p1;
        panelNameofParticipants.Controls.Add (p1);
    }
    catch (Exception ex) {
    }
}
----------------------------------------

 void btnSubmitCountParticipant_Click (object sender, EventArgs e) {
    Panel p1 = new Panel ();
    int numParticipants = 0;
    try {
        numParticipants = Convert.ToInt32 (drpNoofparticipants.SelectedValue);
        Table tblNameofParticipants = new Table();
        for (int i = 0; i < numParticipants; i++)
        {
            TableRow row = new TableRow();
            TableCell cell = new TableCell();
            TextBox txtNameofParticipant = new TextBox ();
            txtNameofParticipant.ID = "txtNameofParticipant_" + i; // Create unique ID 
            cell.ID = "cell_" + i;
            cell.Controls.Add (txtNameofParticipant);
            row.Cells.Add (cell);
            tblNameofParticipants.Rows.Add(row);
        }
        // Store ViewState
        ViewState["numberOfParticipants"] = numParticipants;
        Cache["TempPanel"] = p1;
        panelNameofParticipants.Controls.Add (p1);
    }
    catch (Exception ex) {
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
950
1
Gpt3D_Clone950_1.cs 1 10
Gpt3D_Clone950_1.cs 11 29
----------------------------------------

private void btnClear_Click (object sender, EventArgs e) {
    for (byte i = 0; i < TextBoxes.Length; i ++) {
        if (this.Controls.ContainsKey ("txt" + TextBoxes [i])) {
            TextBox txtBox = this.Controls ["txt" + TextBoxes [i]] as TextBox;
            if (txtBox != null) {
                txtBox.Text = "";
            }
        }
    }
}
----------------------------------------

private void btnClear_Click(object sender, EventArgs e)
{
    int k = TextBoxes.Length -1;
    while (k >= 0)
    {
        if (this.Controls.ContainsKey("txt" + TextBoxes[k]))
        {
            TextBox txtBox = this.Controls["txt" + TextBoxes[k]] as TextBox;
            if (txtBox != null)
            {
                txtBox.Text = "";
            }
            k--;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
950
4
Gpt3D_Clone950_4.cs 1 10
Gpt3D_Clone950_4.cs 11 29
----------------------------------------

private void btnClear_Click (object sender, EventArgs e) {
    for (byte i = 0; i < TextBoxes.Length; i ++) {
        if (this.Controls.ContainsKey ("txt" + TextBoxes [i])) {
            TextBox txtBox = this.Controls ["txt" + TextBoxes [i]] as TextBox;
            if (txtBox != null) {
                txtBox.Text = "";
            }
        }
    }
}
----------------------------------------

private void btnClear_Click(object sender, EventArgs e)
{
    int k = 0;
    while (k < TextBoxes.Length)
    {
        if (this.Controls.ContainsKey("txt" + TextBoxes[k]))
        {
            TextBox txtBox = this.Controls["txt" + TextBoxes[k]] as TextBox;
            if (txtBox != null)
            {
                txtBox.Text = "";
            }
            k++;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
950
6
Gpt3D_Clone950_6.cs 1 10
Gpt3D_Clone950_6.cs 11 46
----------------------------------------

private void btnClear_Click (object sender, EventArgs e) {
    for (byte i = 0; i < TextBoxes.Length; i ++) {
        if (this.Controls.ContainsKey ("txt" + TextBoxes [i])) {
            TextBox txtBox = this.Controls ["txt" + TextBoxes [i]] as TextBox;
            if (txtBox != null) {
                txtBox.Text = "";
            }
        }
    }
}
----------------------------------------

private void btnClear_Click(object sender, EventArgs e) 
{ 
    for (int i = 0; i < TextBoxes.Length; ) 
    { 
        string key = "txt" + TextBoxes[i]; 
        if (this.Controls.ContainsKey(key)) 
        { 
            TextBox txtBox = (TextBox) this.Controls[key]; 
            if (txtBox != null) 
            { 
                txtBox.Text=""; 
            } 
            i++; 
        } 
    } 
}   
private void btnClear_Click(object sender, EventArgs e)
{
    for (int i=0; i< TextBoxes.Length;)
    {
        if (this.Controls.ContainsKey("txt" + TextBoxes[i]))
        {
            TextBox txtBox = this.Controls["txt" + TextBoxes[i]] as TextBox;
            if (txtBox != null)
            {
                txtBox.ResetText();
            }
            i++;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
954
0
Gpt3D_Clone954_0.cs 1 31
Gpt3D_Clone954_0.cs 32 66
----------------------------------------

public static void DrawNormalizedAudio (ref float [] data, PictureBox pb, Color color) {
    Bitmap bmp;
    if (pb.Image == null) {
        bmp = new Bitmap (pb.Width, pb.Height);
    } else {
        bmp = (Bitmap) pb.Image;
    }
    int BORDER_WIDTH = 5;
    int width = bmp.Width - (2 * BORDER_WIDTH);
    int height = bmp.Height - (2 * BORDER_WIDTH);
    using (Graphics g = Graphics.FromImage (bmp))
    {
        g.Clear (Color.Black);
        Pen pen = new Pen (color);
        int size = data.Length;
        for (int iPixel = 0; iPixel < width; iPixel ++) {
            int start = (int) ((float) iPixel * ((float) size / (float) width));
            int end = (int) ((float) (iPixel + 1) * ((float) size / (float) width));
            float min = float.MaxValue;
            float max = float.MinValue;
            for (int i = start; i < end; i ++) {
                float val = data [i];
                min = val < min ? val : min;
                max = val > max ? val : max;
            }
            int yMax = BORDER_WIDTH + height - (int) ((max + 1) *.5 * height);
            int yMin = BORDER_WIDTH + height - (int) ((min + 1) *.5 * height);
            g.DrawLine (pen, iPixel + BORDER_WIDTH, yMax, iPixel + BORDER_WIDTH, yMin);
        }
    } pb.Image = bmp;
}
----------------------------------------

	public static void DrawNormalizedAudio (ref float [] data, PictureBox pb, Color color) {
    DrawingVisual dv = new DrawingVisual();
    if (pb.Image == null) {
        dv = new DrawingVisual();
    } else {
        dv = (DrawingVisual) pb.Image;
    }
    int BORDER_BORDER = 5;
    int width = dv.Width - (2 * BORDER_BORDER);
    int height = dv.Height - (2 * BORDER_BORDER);
    using (DrawingContext dc = dv.RenderOpen())
    {
        dc.DrawRectangle(Brushes.Black, null, new Rect(0, 0, dv.Width, dv.Height));
        Pen pen = new Pen (color);
        int size = data.Length;
        for (int iPixel = 0; iPixel < width; iPixel ++) {
            int start = (int) ((float) iPixel * ((float) size / (float) width));
            int end = (int) ((float) (iPixel + 1) * ((float) size / (float) width));
            float min = float.MaxValue;
            float max = float.MinValue;
            for (int i = start; i < end; i ++) {
                float val = data [i];
                min = Math.Min (val, min);
                max = Math.Max (val, max);
            }
            int yMax = BORDER_BORDER + height - (int) ((max + 1) *.5 * height); 
            int yMin = BORDER_BORDER + height - (int) ((min + 1) *.5 * height);
            dc.DrawLine (pen, iPixel + BORDER_BORDER, yMax, iPixel + BORDER_BORDER, yMin);
        } 
        dc.Close(); 
    }
    pb.Image = dv;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
954
1
Gpt3D_Clone954_1.cs 1 31
Gpt3D_Clone954_1.cs 32 66
----------------------------------------

public static void DrawNormalizedAudio (ref float [] data, PictureBox pb, Color color) {
    Bitmap bmp;
    if (pb.Image == null) {
        bmp = new Bitmap (pb.Width, pb.Height);
    } else {
        bmp = (Bitmap) pb.Image;
    }
    int BORDER_WIDTH = 5;
    int width = bmp.Width - (2 * BORDER_WIDTH);
    int height = bmp.Height - (2 * BORDER_WIDTH);
    using (Graphics g = Graphics.FromImage (bmp))
    {
        g.Clear (Color.Black);
        Pen pen = new Pen (color);
        int size = data.Length;
        for (int iPixel = 0; iPixel < width; iPixel ++) {
            int start = (int) ((float) iPixel * ((float) size / (float) width));
            int end = (int) ((float) (iPixel + 1) * ((float) size / (float) width));
            float min = float.MaxValue;
            float max = float.MinValue;
            for (int i = start; i < end; i ++) {
                float val = data [i];
                min = val < min ? val : min;
                max = val > max ? val : max;
            }
            int yMax = BORDER_WIDTH + height - (int) ((max + 1) *.5 * height);
            int yMin = BORDER_WIDTH + height - (int) ((min + 1) *.5 * height);
            g.DrawLine (pen, iPixel + BORDER_WIDTH, yMax, iPixel + BORDER_WIDTH, yMin);
        }
    } pb.Image = bmp;
}
----------------------------------------

	public static void DrawNormalizedAudio (ref float [] data, PictureBox pb, Color color) {
    RenderTargetBitmap bmp;
    if (pb.Image == null) {
        bmp = new RenderTargetBitmap(pb.Width, pb.Height, 96, 96, PixelFormats.Default);
    } else {
        bmp = (RenderTargetBitmap) pb.Image;
    }
    int BORDER_OFFSET = 5;
    int width = bmp.Width - (2 * BORDER_OFFSET);
    int height = bmp.Height - (2 * BORDER_OFFSET);
    using (DrawingContext dc = bmp.RenderOpen())
    {
        dc.DrawRectangle(Brushes.Black, null, new Rect(0, 0, bmp.Width, bmp.Height));
        Pen pen = new Pen (color);
        int size = data.Length;
        float min = float.MaxValue;
        float max = float.MinValue;
        for (int iPixel = 0; iPixel < width; iPixel ++) {
            int start = (int) ((float) iPixel * ((float) size / (float) width));
            int end = (int) ((float) (iPixel + 1) * ((float) size / (float) width)); 
            for (int i = start; i < end; i ++) {
                float val = data [i];
                min = Math.Min(val, min);
                max = Math.Max(val, max);
            } 
            int yMax = BORDER_OFFSET + height - (int) ((max + 1) *.5 * height);
            int yMin = BORDER_OFFSET + height - (int) ((min + 1) *.5 * height);
            dc.DrawLine (pen, iPixel + BORDER_OFFSET, yMax, iPixel + BORDER_OFFSET, yMin);
        }
        dc.Close  (); 
    }
    pb.Image = bmp;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
954
2
Gpt3D_Clone954_2.cs 1 31
Gpt3D_Clone954_2.cs 32 66
----------------------------------------

public static void DrawNormalizedAudio (ref float [] data, PictureBox pb, Color color) {
    Bitmap bmp;
    if (pb.Image == null) {
        bmp = new Bitmap (pb.Width, pb.Height);
    } else {
        bmp = (Bitmap) pb.Image;
    }
    int BORDER_WIDTH = 5;
    int width = bmp.Width - (2 * BORDER_WIDTH);
    int height = bmp.Height - (2 * BORDER_WIDTH);
    using (Graphics g = Graphics.FromImage (bmp))
    {
        g.Clear (Color.Black);
        Pen pen = new Pen (color);
        int size = data.Length;
        for (int iPixel = 0; iPixel < width; iPixel ++) {
            int start = (int) ((float) iPixel * ((float) size / (float) width));
            int end = (int) ((float) (iPixel + 1) * ((float) size / (float) width));
            float min = float.MaxValue;
            float max = float.MinValue;
            for (int i = start; i < end; i ++) {
                float val = data [i];
                min = val < min ? val : min;
                max = val > max ? val : max;
            }
            int yMax = BORDER_WIDTH + height - (int) ((max + 1) *.5 * height);
            int yMin = BORDER_WIDTH + height - (int) ((min + 1) *.5 * height);
            g.DrawLine (pen, iPixel + BORDER_WIDTH, yMax, iPixel + BORDER_WIDTH, yMin);
        }
    } pb.Image = bmp;
}
----------------------------------------

 public static void DrawNormalizedAudio (ref float [] data, PictureBox pb, Color color) {
    WriteableBitmap bmp;
    if (pb.Image == null) {
        bmp = new WriteableBitmap(pb.Width, pb.Height, 96, 96, PixelFormats.Default, null);
    } else {
        bmp = (WriteableBitmap) pb.Image;
    }
    int BORDER_GAP = 5;
    int width = bmp.Width - (2 * BORDER_GAP);
    int height = bmp.Height - (2 * BORDER_GAP);
    using (Graphics g = bmp.Lock())
    {
        g.Clear (Color.Black);
        Pen pen = new Pen (color);
        int size = data.Length; 
        float min = float.MaxValue;
        float max = float.MinValue;
         for (int iPixel = 0; iPixel < width; iPixel ++) {
            int start = (int) ((float) iPixel * ((float) size / (float) width));
            int end = (int) ((float) (iPixel + 1) * ((float) size / (float) width));
            for (int i = start; i < end; i ++) {
                float val = data [i];
                min = Math.Min (val, min);
                max = Math.Max (val, max);
            } 
            int yMax = BORDER_GAP + height - (int) ((max + 1) *.5 * height);
            int yMin = BORDER_GAP + height - (int) ((min + 1) *.5 * height);
            g.DrawLine (pen, iPixel + BORDER_GAP, yMax, iPixel + BORDER_GAP, yMin);
        } 
        g.ReleaseHdc(); 
    }
    pb.Image = bmp; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
957
1
Gpt3D_Clone957_1.cs 1 18
Gpt3D_Clone957_1.cs 19 39
----------------------------------------

protected static Dictionary < DateTime, String > getDateRange (String lowerDate, String higherDate, String frequency) {
    DateTime startDate, endDate;
    startDate = Convert.ToDateTime (lowerDate);
    endDate = Convert.ToDateTime (higherDate);
    Dictionary < DateTime, String > returnDict = new Dictionary < DateTime, String > ();
    while (frequency.Equals ("weekly") ? (startDate.AddDays (7) <= endDate) : (startDate.AddMonths (1) <= endDate)) {
        if (frequency.Equals ("weekly")) {
            returnDict.Add (startDate, startDate + "-" + startDate.AddDays (7));
            startDate = startDate.AddDays (8);
        }
        if (frequency.Equals ("monthly")) {
            returnDict.Add (startDate, startDate + "-" + startDate.AddMonths (1));
            startDate = startDate.AddMonths (1).AddDays (1);
        }
    }
    returnDict.Add (startDate, startDate + "-" + endDate);
    return returnDict;
}
----------------------------------------

 protected static Dictionary < DateTime, String > getDateRange (String lowerDate, String higherDate, String frequency) {
    DateTime startDate, endDate; 
    startDate = Convert.ToDateTime (lowerDate);
    endDate = Convert.ToDateTime (higherDate);
    Dictionary < DateTime, String > returnDict = new Dictionary < DateTime, String > ();
    while (startDate < endDate) {
      if (frequency == "weekly") {
        returnDict.Add(startDate, startDate + "-" + startDate.AddDays(7));
        startDate = startDate.AddDays(7);
      } else if (frequency == "monthly") {
        returnDict.Add(startDate, startDate + "-" + startDate.AddMonths(1));
        startDate = startDate.AddMonths(1);
      }
    }
    
    returnDict.Add(startDate, startDate + "-" + endDate);
    
    return returnDict;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
957
2
Gpt3D_Clone957_2.cs 1 18
Gpt3D_Clone957_2.cs 19 40
----------------------------------------

protected static Dictionary < DateTime, String > getDateRange (String lowerDate, String higherDate, String frequency) {
    DateTime startDate, endDate;
    startDate = Convert.ToDateTime (lowerDate);
    endDate = Convert.ToDateTime (higherDate);
    Dictionary < DateTime, String > returnDict = new Dictionary < DateTime, String > ();
    while (frequency.Equals ("weekly") ? (startDate.AddDays (7) <= endDate) : (startDate.AddMonths (1) <= endDate)) {
        if (frequency.Equals ("weekly")) {
            returnDict.Add (startDate, startDate + "-" + startDate.AddDays (7));
            startDate = startDate.AddDays (8);
        }
        if (frequency.Equals ("monthly")) {
            returnDict.Add (startDate, startDate + "-" + startDate.AddMonths (1));
            startDate = startDate.AddMonths (1).AddDays (1);
        }
    }
    returnDict.Add (startDate, startDate + "-" + endDate);
    return returnDict;
}
----------------------------------------

 protected static Dictionary < DateTime, String > getDateRange (String lowerDate, String higherDate, String frequency) {
    DateTime startDate, endDate; 
    startDate = Convert.ToDateTime (lowerDate);
    endDate = Convert.ToDateTime (higherDate);
    
    Dictionary < DateTime, String > returnDict = new Dictionary < DateTime, String > ();
    while (startDate < endDate) {
      if (frequency == "weekly") {
        returnDict.Add(startDate, startDate + "-" + startDate.AddDays(7).AddMilliseconds(-1));
        startDate = startDate.AddDays(7).AddMilliseconds(1);
      } else if (frequency == "monthly") {
        returnDict.Add(startDate, startDate + "-" + startDate.AddMonths(1).AddMilliseconds(-1));
        startDate = startDate.AddMonths(1).AddMilliseconds(1);
      }
    }
    returnDict.Add(startDate, startDate + "-" + endDate);
    
    return returnDict;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
957
3
Gpt3D_Clone957_3.cs 1 18
Gpt3D_Clone957_3.cs 19 36
----------------------------------------

protected static Dictionary < DateTime, String > getDateRange (String lowerDate, String higherDate, String frequency) {
    DateTime startDate, endDate;
    startDate = Convert.ToDateTime (lowerDate);
    endDate = Convert.ToDateTime (higherDate);
    Dictionary < DateTime, String > returnDict = new Dictionary < DateTime, String > ();
    while (frequency.Equals ("weekly") ? (startDate.AddDays (7) <= endDate) : (startDate.AddMonths (1) <= endDate)) {
        if (frequency.Equals ("weekly")) {
            returnDict.Add (startDate, startDate + "-" + startDate.AddDays (7));
            startDate = startDate.AddDays (8);
        }
        if (frequency.Equals ("monthly")) {
            returnDict.Add (startDate, startDate + "-" + startDate.AddMonths (1));
            startDate = startDate.AddMonths (1).AddDays (1);
        }
    }
    returnDict.Add (startDate, startDate + "-" + endDate);
    return returnDict;
}
----------------------------------------

 protected static Dictionary < DateTime, String > getDateRange (String lowerDate, String higherDate, String frequency) {
    DateTime startDate, endDate; 
    startDate = Convert.ToDateTime (lowerDate);
    endDate = Convert.ToDateTime (higherDate);
    
    Dictionary < DateTime, String > returnDict = new Dictionary < DateTime, String > ();
    DateTime currentStart;
    currentStart = startDate;
    while (startDate.AddMonths(1) <= endDate) {
      returnDict.Add(currentStart,currentStart + "-" + startDate.AddMonths(1));
      currentStart = startDate.AddMonths(1).AddDays(1);
      startDate = startDate.AddMonths(1);
    }
    returnDict.Add(currentStart, currentStart + "-" + endDate);
    return returnDict;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
959
2
Gpt3D_Clone959_2.cs 1 16
Gpt3D_Clone959_2.cs 17 41
----------------------------------------

private void SaveFileToDatabase (string filePath) {
    String strConnection = "Data Source=.\\SQLEXPRESS;AttachDbFilename='C:\\Users\\Hemant\\documents\\visual studio 2010\\Projects\\CRMdata\\CRMdata\\App_Data\\Database1.mdf';Integrated Security=True;User Instance=True";
    String excelConnString = String.Format ("Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};Extended Properties=\"Excel 12.0\"", filePath);
    using (OleDbConnection excelConnection = new OleDbConnection (excelConnString))
    {
        using (OleDbCommand cmd = new OleDbCommand ("Select [ID],[Name],[Designation] from [Sheet1$]", excelConnection))
        {
            excelConnection.Open ();
            using (OleDbDataReader dReader = cmd.ExecuteReader ())
            {
                using (SqlBulkCopy sqlBulk = new SqlBulkCopy (strConnection))
                {
                    sqlBulk.DestinationTableName = "Excel_table";
                    sqlBulk.WriteToServer (dReader);
                }}}}
}
----------------------------------------

 private void SaveFileToDatabase (string filePath) {
      string filePath = @"C:\SomeFolder\MyExcel.xlsx";
    string xConnString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + filePath + ";Extended Properties='Excel 12.0;HDR=YES;';";
    string sConnString = "Data Source=.\\SQLEXPRESS;AttachDbFilename='C:\\Users\\Hemant\\documents\\visual studio 2010\\Projects\\CRMdata\\CRMdata\\App_Data\\Database1.mdf';Integrated Security=True;User Instance=True";
    using (OleDbConnection excConn = new OleDbConnection(xConnString))
    {
        excConn.Open();
        var command = excConn.CreateCommand();
        command.CommandText = "SELECT [ID],[Name],[Designation] FROM [Sheet1$]";
        using (var reader = command.ExecuteReader())
        {
            using (SqlBulkCopy bulkCopy = new SqlBulkCopy(sConnString))
            {
                bulkCopy.DestinationTableName = "Excel_table";
                foreach (DataRow row in reader.GetSchemaTable().Rows)
                {
                    bulkCopy.ColumnMappings.Add(row["ColumnName"].ToString(), row["ColumnName"].ToString());
                }
                bulkCopy.WriteToServer(reader);
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
959
5
Gpt3D_Clone959_5.cs 1 16
Gpt3D_Clone959_5.cs 17 37
----------------------------------------

private void SaveFileToDatabase (string filePath) {
    String strConnection = "Data Source=.\\SQLEXPRESS;AttachDbFilename='C:\\Users\\Hemant\\documents\\visual studio 2010\\Projects\\CRMdata\\CRMdata\\App_Data\\Database1.mdf';Integrated Security=True;User Instance=True";
    String excelConnString = String.Format ("Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};Extended Properties=\"Excel 12.0\"", filePath);
    using (OleDbConnection excelConnection = new OleDbConnection (excelConnString))
    {
        using (OleDbCommand cmd = new OleDbCommand ("Select [ID],[Name],[Designation] from [Sheet1$]", excelConnection))
        {
            excelConnection.Open ();
            using (OleDbDataReader dReader = cmd.ExecuteReader ())
            {
                using (SqlBulkCopy sqlBulk = new SqlBulkCopy (strConnection))
                {
                    sqlBulk.DestinationTableName = "Excel_table";
                    sqlBulk.WriteToServer (dReader);
                }}}}
}
----------------------------------------

 private void SaveFileToDatabase (string filePath) {
      string filePath = @"C:\SomeFolder\MyExcel.xlsx";
    string xConnString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + filePath + ";Extended Properties='Excel 12.0;HDR=YES;';";
    string sConnString = "Data Source=.\\SQLEXPRESS;AttachDbFilename='C:\\Users\\Hemant\\documents\\visual studio 2010\\Projects\\CRMdata\\CRMdata\\App_Data\\Database1.mdf';Integrated Security=True;User Instance=True";
    using (OleDbConnection excConn = new OleDbConnection(xConnString))
    {
        excConn.Open();
        var command = excConn.CreateCommand();
        command.CommandText = "SELECT [ID],[Name],[Designation] from [Sheet1$]";
        using (var reader = command.ExecuteReader())
        {
            using (SqlBulkCopy bulkCopy = new SqlBulkCopy(sConnString))
            {
                bulkCopy.DestinationTableName = "Excel_table";
                bulkCopy.WriteToServer(reader);
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
962
1
Gpt3D_Clone962_1.cs 1 17
Gpt3D_Clone962_1.cs 18 36
----------------------------------------

public static long BinomCoefficient (long n, long k) {
    if (k > n) {
        return 0;
    }
    if (n == k) {
        return 1;
    }
    if (k > n - k) {
        k = n - k;
    }
    long c = 1;
    for (long i = 1; i <= k; i ++) {
        c *= n --;
        c /= i;
    }
    return c;
}
----------------------------------------

 public static long BinomCoefficient (long n, long k) {
    if (k > n) {
        return 0;
    }
    if (n == k) {
        return 1;
    }
    if (k > n - k) {
        k = n - k;
    }
    long c = 1;
    for (long i = 0; i < k; ++i) {
        c *= (n - i);
        c /= (i + 1);
    }
    return c;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
962
3
Gpt3D_Clone962_3.cs 1 17
Gpt3D_Clone962_3.cs 18 33
----------------------------------------

public static long BinomCoefficient (long n, long k) {
    if (k > n) {
        return 0;
    }
    if (n == k) {
        return 1;
    }
    if (k > n - k) {
        k = n - k;
    }
    long c = 1;
    for (long i = 1; i <= k; i ++) {
        c *= n --;
        c /= i;
    }
    return c;
}
----------------------------------------

 public static long BinomCoefficient (long n, long k) {
    if (k > n) {
        return 0;
    }
    if (n == k) {
        return 1;
    }
    if (k > n - k) 
        k = n - k;
    long c = 1; 
    for (long i = 0; i < k; ++i) 
        c = c * (n - i) / (i + 1); 
    return c;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
963
6
Gpt3D_Clone963_6.cs 1 12
Gpt3D_Clone963_6.cs 13 32
----------------------------------------

public static byte [] ReadFully (Stream input) {
    byte [] buffer = new byte [16 * 1024];
    input.Position = 0;
    using (MemoryStream ms = new MemoryStream ())
    {
        int read;
        while ((read = input.Read (buffer, 0, buffer.Length)) > 0) {
            ms.Write (buffer, 0, read);
        }
        return ms.ToArray ();
    }
}
----------------------------------------

  public static byte [] ReadFully (Stream input)
    {
        using (MemoryStream ms = new MemoryStream())
        {
            byte[] buffer = new byte[16 * 1024];
            int len;
            while ((len = input.Read(buffer, 0, buffer.Length)) > 0)
            {
                int totalBytes = len;
                while (totalBytes > 0)
                {
                    ms.Write(buffer, 0, len);
                    totalBytes -= buffer.Length;
                }
            }
            return ms.ToArray();
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
963
8
Gpt3D_Clone963_8.cs 1 12
Gpt3D_Clone963_8.cs 13 28
----------------------------------------

public static byte [] ReadFully (Stream input) {
    byte [] buffer = new byte [16 * 1024];
    input.Position = 0;
    using (MemoryStream ms = new MemoryStream ())
    {
        int read;
        while ((read = input.Read (buffer, 0, buffer.Length)) > 0) {
            ms.Write (buffer, 0, read);
        }
        return ms.ToArray ();
    }
}
----------------------------------------

 public static byte [] ReadFully (Stream input)
    {
        byte[] readBuffer = new byte[16 * 1024];
        using (MemoryStream memoryStream = new MemoryStream())
        {
            while (input.Position < input.Length)
            {
                int len = input.Read(readBuffer, 0, readBuffer.Length);
                memoryStream.Write(readBuffer, 0, len);
            }
        }
        return readBuffer;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
963
9
Gpt3D_Clone963_9.cs 1 12
Gpt3D_Clone963_9.cs 13 26
----------------------------------------

public static byte [] ReadFully (Stream input) {
    byte [] buffer = new byte [16 * 1024];
    input.Position = 0;
    using (MemoryStream ms = new MemoryStream ())
    {
        int read;
        while ((read = input.Read (buffer, 0, buffer.Length)) > 0) {
            ms.Write (buffer, 0, read);
        }
        return ms.ToArray ();
    }
}
----------------------------------------

 public static byte [] ReadFully (Stream input) {
   using (var ms = new MemoryStream())
   {
        int count;
        Byte[] data = new Byte[16 * 1024];
        while ((count = input.Read(data, 0, data.Length)) > 0)
        {
            ms.Write (data, 0, count);
        }
        return ms.ToArray();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
965
0
Gpt3D_Clone965_0.cs 1 15
Gpt3D_Clone965_0.cs 16 40
----------------------------------------

public string Read (string KeyName) {
    RegistryKey rk = baseRegistryKey;
    RegistryKey sk1 = rk.OpenSubKey (subKey);
    if (sk1 == null) {
        return null;
    } else {
        try {
            return (string) sk1.GetValue (KeyName.ToUpper ());
        }
        catch (Exception e) {
            ShowErrorMessage (e, "Reading registry " + KeyName.ToUpper ());
            return null;
        }
    }
}
----------------------------------------

 public string Read (string KeyName) {
    RegistryKey rk = baseRegistryKey;
    RegistryKey sk1 = rk.OpenSubKey (subKey);
    if (sk1 == null) {
        return null;
    }
    else {
        try 
        {
            object val = sk1.GetValue (KeyName.ToUpper ());
            if (val is string) 
			{
                return (string) val;
            }
            return null;
        }
        catch (Exception e) {
            ShowErrorMessage (e, "Reading registry " + KeyName.ToUpper ());
            return null;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
965
1
Gpt3D_Clone965_1.cs 1 15
Gpt3D_Clone965_1.cs 16 35
----------------------------------------

public string Read (string KeyName) {
    RegistryKey rk = baseRegistryKey;
    RegistryKey sk1 = rk.OpenSubKey (subKey);
    if (sk1 == null) {
        return null;
    } else {
        try {
            return (string) sk1.GetValue (KeyName.ToUpper ());
        }
        catch (Exception e) {
            ShowErrorMessage (e, "Reading registry " + KeyName.ToUpper ());
            return null;
        }
    }
}
----------------------------------------

 public string Read (string KeyName) {
    string value;
    RegistryKey rk = baseRegistryKey;
    RegistryKey sk1 = rk.OpenSubKey (subKey);
    if (sk1 == null) {
        value = null;
    }
    else {
        try {
            value = rk.GetValue (KeyName.ToUpper()) as string;
        }
        catch (Exception e) {
            ShowErrorMessage (e, "Reading registry " + KeyName.ToUpper ());
            value = null;
        }
    }
    return value;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
965
2
Gpt3D_Clone965_2.cs 1 15
Gpt3D_Clone965_2.cs 16 35
----------------------------------------

public string Read (string KeyName) {
    RegistryKey rk = baseRegistryKey;
    RegistryKey sk1 = rk.OpenSubKey (subKey);
    if (sk1 == null) {
        return null;
    } else {
        try {
            return (string) sk1.GetValue (KeyName.ToUpper ());
        }
        catch (Exception e) {
            ShowErrorMessage (e, "Reading registry " + KeyName.ToUpper ());
            return null;
        }
    }
}
----------------------------------------

 public string Read (string KeyName) {
    string result;
    RegistryKey rk = baseRegistryKey;
    RegistryKey sk1 = rk.OpenSubKey (subKey);
    if (sk1 == null) {
        result = null;
    }
    else {
        try {
            result = sk1.GetValue (KeyName.ToUpper()).ToString();
        }
        catch (Exception e) {
            ShowErrorMessage (e, "Reading registry " + KeyName.ToUpper ());
            result = null;
        }
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
965
3
Gpt3D_Clone965_3.cs 1 15
Gpt3D_Clone965_3.cs 16 35
----------------------------------------

public string Read (string KeyName) {
    RegistryKey rk = baseRegistryKey;
    RegistryKey sk1 = rk.OpenSubKey (subKey);
    if (sk1 == null) {
        return null;
    } else {
        try {
            return (string) sk1.GetValue (KeyName.ToUpper ());
        }
        catch (Exception e) {
            ShowErrorMessage (e, "Reading registry " + KeyName.ToUpper ());
            return null;
        }
    }
}
----------------------------------------

  public string Read (string KeyName) {
    RegistryKey rk = baseRegistryKey;
    RegistryKey sk1 = rk.OpenSubKey (subKey);
    string value;
    if (sk1 == null) {
        value = null;
    } else {
        try {
            value = rk.GetValue (KeyName.ToUpper ()) as string;
        }
        catch (Exception e) {
            ShowErrorMessage (e, "Reading registry " + KeyName.ToUpper ());
            value = null;
        }
    }
    return value;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
965
4
Gpt3D_Clone965_4.cs 1 15
Gpt3D_Clone965_4.cs 16 31
----------------------------------------

public string Read (string KeyName) {
    RegistryKey rk = baseRegistryKey;
    RegistryKey sk1 = rk.OpenSubKey (subKey);
    if (sk1 == null) {
        return null;
    } else {
        try {
            return (string) sk1.GetValue (KeyName.ToUpper ());
        }
        catch (Exception e) {
            ShowErrorMessage (e, "Reading registry " + KeyName.ToUpper ());
            return null;
        }
    }
}
----------------------------------------

 public string Read (string KeyName) {
    string temp = null;
    RegistryKey rk = baseRegistryKey;
    RegistryKey sk1 = rk.OpenSubKey (subKey);
    if (sk1 != null) {
        try {
            temp = rk.GetValue (KeyName.ToUpper ()) as string;
        }
        catch (Exception e) {
            ShowErrorMessage (e, "Reading registry " + KeyName.ToUpper ());
        }
    }
    return temp;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
965
5
Gpt3D_Clone965_5.cs 1 15
Gpt3D_Clone965_5.cs 16 31
----------------------------------------

public string Read (string KeyName) {
    RegistryKey rk = baseRegistryKey;
    RegistryKey sk1 = rk.OpenSubKey (subKey);
    if (sk1 == null) {
        return null;
    } else {
        try {
            return (string) sk1.GetValue (KeyName.ToUpper ());
        }
        catch (Exception e) {
            ShowErrorMessage (e, "Reading registry " + KeyName.ToUpper ());
            return null;
        }
    }
}
----------------------------------------

 public string Read (string KeyName) {
    string value = null;
    RegistryKey rk = baseRegistryKey;
    RegistryKey sk1 = rk.OpenSubKey (subKey);
    if (sk1 != null) {
        try {
            value = (string) sk1.GetValue (KeyName.ToUpper());
        }
        catch (Exception e) {
            ShowErrorMessage (e, "Reading registry " + KeyName.ToUpper ());
        }
    }
    return value;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
965
6
Gpt3D_Clone965_6.cs 1 15
Gpt3D_Clone965_6.cs 16 32
----------------------------------------

public string Read (string KeyName) {
    RegistryKey rk = baseRegistryKey;
    RegistryKey sk1 = rk.OpenSubKey (subKey);
    if (sk1 == null) {
        return null;
    } else {
        try {
            return (string) sk1.GetValue (KeyName.ToUpper ());
        }
        catch (Exception e) {
            ShowErrorMessage (e, "Reading registry " + KeyName.ToUpper ());
            return null;
        }
    }
}
----------------------------------------

 public string Read (string KeyName) {
    RegistryKey rk = baseRegistryKey;
    RegistryKey sk1 = rk.OpenSubKey (subKey);
    if (sk1 == null) {
        return null;
    }
    else {
        var value = sk1.GetValue (KeyName.ToUpper ());
        if (value == null)
		{
            return null;
        }
        return value.ToString ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
965
7
Gpt3D_Clone965_7.cs 1 15
Gpt3D_Clone965_7.cs 16 30
----------------------------------------

public string Read (string KeyName) {
    RegistryKey rk = baseRegistryKey;
    RegistryKey sk1 = rk.OpenSubKey (subKey);
    if (sk1 == null) {
        return null;
    } else {
        try {
            return (string) sk1.GetValue (KeyName.ToUpper ());
        }
        catch (Exception e) {
            ShowErrorMessage (e, "Reading registry " + KeyName.ToUpper ());
            return null;
        }
    }
}
----------------------------------------

 public string Read (string KeyName) {
    RegistryKey rk = baseRegistryKey;
    RegistryKey sk1 = rk.OpenSubKey (subKey);
    if (sk1 != null) {
        try {
            return (string) sk1.GetValue (KeyName.ToUpper ());
        }
        catch (Exception e) {
            ShowErrorMessage (e, "Reading registry " + KeyName.ToUpper ());
        }
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
965
8
Gpt3D_Clone965_8.cs 1 15
Gpt3D_Clone965_8.cs 16 28
----------------------------------------

public string Read (string KeyName) {
    RegistryKey rk = baseRegistryKey;
    RegistryKey sk1 = rk.OpenSubKey (subKey);
    if (sk1 == null) {
        return null;
    } else {
        try {
            return (string) sk1.GetValue (KeyName.ToUpper ());
        }
        catch (Exception e) {
            ShowErrorMessage (e, "Reading registry " + KeyName.ToUpper ());
            return null;
        }
    }
}
----------------------------------------

 public string Read (string KeyName) {
    RegistryKey rk = baseRegistryKey;
    RegistryKey sk1 = rk.OpenSubKey (subKey);
    if (sk1 == null) {
        return null;
    }
    else {
        var value = rk.GetValue (KeyName.ToUpper ());
        return value != null ? value.ToString () : null; 
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
966
9
Gpt3D_Clone966_9.cs 1 22
Gpt3D_Clone966_9.cs 23 49
----------------------------------------

public static List < Int32 > LocateSubset (Byte [] superSet, Byte [] subSet) {
    if ((superSet == null) || (subSet == null)) {
        throw new ArgumentNullException ();
    }
    if ((superSet.Length < subSet.Length) || (superSet.Length == 0) || (subSet.Length == 0)) {
        return new List < Int32 > ();
    }
    var result = new List < Int32 > ();
    Int32 currentIndex = 0;
    Int32 maxIndex = superSet.Length - subSet.Length;
    while (currentIndex < maxIndex) {
        Int32 matchCount = CountMatches (superSet, currentIndex, subSet);
        if (matchCount == subSet.Length) {
            result.Add (currentIndex);
        }
        currentIndex ++;
        if (matchCount > 0) {
            currentIndex += matchCount - 1;
        }
    }
    return result;
}
----------------------------------------

  public static List<Int32> FindSubset(Byte[] superSet, Byte[] subSet) 
{ 
    if ((superSet == null) || (subSet == null)) 
    { 
        throw new ArgumentNullException(); 
    } 
    if ((superSet.Length < subSet.Length) || (superSet.Length == 0) || (subSet.Length == 0)) 
    { 
        return new List<Int32>(); 
    } 
    List<Int32> startingPoints = FindStartingPoints(superSet, subSet); 
    List<Int32> result = new List<Int32>(); 
    foreach (Int32 start in startingPoints) 
    { 
        Int32 matches = CountMatches(superSet, start, subSet); 
        if (matches == subSet.Length) 
        { 
            result.Add(start); 
        } 
    } 
    return result; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
968
0
Gpt3D_Clone968_0.cs 1 13
Gpt3D_Clone968_0.cs 14 30
----------------------------------------

static void doubleNumber (int [] n) {
    int carry = 0;
    for (int i = 0; i < n.Length; i ++) {
        n [i] <<= 1;
        n [i] += carry;
        if (n [i] >= 1000000000) {
            carry = 1;
            n [i] -= 1000000000;
        } else {
            carry = 0;
        }
    }
}
----------------------------------------

 static void doubleNumber (int [] n) {
    int carry = 0;
    int i = n.Length - 1;
    do {
        n[i] <<= 1;
        n[i] += carry;
        if (n[i] >= 1000000000) {
            carry = 1;
            n [i] -= 1000000000;
        } else {
            carry = 0;
        }
        i--;
    } while(i >= 0);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
968
1
Gpt3D_Clone968_1.cs 1 13
Gpt3D_Clone968_1.cs 14 30
----------------------------------------

static void doubleNumber (int [] n) {
    int carry = 0;
    for (int i = 0; i < n.Length; i ++) {
        n [i] <<= 1;
        n [i] += carry;
        if (n [i] >= 1000000000) {
            carry = 1;
            n [i] -= 1000000000;
        } else {
            carry = 0;
        }
    }
}
----------------------------------------

 static void doubleNumber (int [] n) {
    int carry = 0;
    int i = 0;
    do {
        n[i] <<= 1;
        n[i] += carry;
        if (n[i] >= 1000000000) {
            carry = 1;
            n [i] -= 1000000000;
        } else {
            carry = 0;
        }
        i++;
    } while(i < n.Length);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
968
2
Gpt3D_Clone968_2.cs 1 13
Gpt3D_Clone968_2.cs 14 30
----------------------------------------

static void doubleNumber (int [] n) {
    int carry = 0;
    for (int i = 0; i < n.Length; i ++) {
        n [i] <<= 1;
        n [i] += carry;
        if (n [i] >= 1000000000) {
            carry = 1;
            n [i] -= 1000000000;
        } else {
            carry = 0;
        }
    }
}
----------------------------------------

 static void doubleNumber (int [] n) {
    int carry = 0;
    int index = n.Length - 1;
    while(index >= 0){
        n[index] <<= 1;
        n[index] += carry;
        if (n[index] >= 1000000000) {
            carry = 1;
            n [index] -= 1000000000;
        } else {
            carry = 0;
        }
        index--;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
968
3
Gpt3D_Clone968_3.cs 1 13
Gpt3D_Clone968_3.cs 14 30
----------------------------------------

static void doubleNumber (int [] n) {
    int carry = 0;
    for (int i = 0; i < n.Length; i ++) {
        n [i] <<= 1;
        n [i] += carry;
        if (n [i] >= 1000000000) {
            carry = 1;
            n [i] -= 1000000000;
        } else {
            carry = 0;
        }
    }
}
----------------------------------------

 static void doubleNumber (int [] n) {
    int carry = 0;
    int i = 0;
    while(i < n.Length){
        n[i] <<= 1;
        n[i] += carry;
        if (n[i] >= 1000000000) {
            carry = 1;
            n [i] -= 1000000000;
        } else {
            carry = 0;
        }
        i++;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
968
5
Gpt3D_Clone968_5.cs 1 13
Gpt3D_Clone968_5.cs 14 29
----------------------------------------

static void doubleNumber (int [] n) {
    int carry = 0;
    for (int i = 0; i < n.Length; i ++) {
        n [i] <<= 1;
        n [i] += carry;
        if (n [i] >= 1000000000) {
            carry = 1;
            n [i] -= 1000000000;
        } else {
            carry = 0;
        }
    }
}
----------------------------------------

 static void doubleNumber (int [] n) {
    int carry = 0;
    for (int i = 0; i < n.Length; i ++) {
        int temp = n[i];
        temp <<= 1;
        n[i] += carry;
        if (temp >= 1000000000) {
            carry = 1;
            n [i] -= 1000000000;
        } else {
            carry = 0;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
968
6
Gpt3D_Clone968_6.cs 1 13
Gpt3D_Clone968_6.cs 14 29
----------------------------------------

static void doubleNumber (int [] n) {
    int carry = 0;
    for (int i = 0; i < n.Length; i ++) {
        n [i] <<= 1;
        n [i] += carry;
        if (n [i] >= 1000000000) {
            carry = 1;
            n [i] -= 1000000000;
        } else {
            carry = 0;
        }
    }
}
----------------------------------------

 static void doubleNumber (int [] n) {
    int sum = 0;
    int carry = 0;
    for (int i = n.Length - 1; i >= 0; i--) {
        sum = n[i] * 2;
        n[i] = sum + carry;
        if (n[i] >= 1000000000) {
            carry = 1;
            n [i] -= 1000000000;
        } else {
            carry = 0;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
968
7
Gpt3D_Clone968_7.cs 1 13
Gpt3D_Clone968_7.cs 14 29
----------------------------------------

static void doubleNumber (int [] n) {
    int carry = 0;
    for (int i = 0; i < n.Length; i ++) {
        n [i] <<= 1;
        n [i] += carry;
        if (n [i] >= 1000000000) {
            carry = 1;
            n [i] -= 1000000000;
        } else {
            carry = 0;
        }
    }
}
----------------------------------------

 static void doubleNumber (int [] n) {
    int sum = 0;
    int carry = 0;
    for (int i = 0; i < n.Length; i ++) {
        sum = n[i] * 2;
        n[i] = sum + carry;
        if (n[i] >= 1000000000) {
            carry = 1;
            n [i] -= 1000000000;
        } else {
            carry = 0;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
1
Gpt3D_Clone96_1.cs 1 11
Gpt3D_Clone96_1.cs 12 33
----------------------------------------

private static void Main (string [] args) {
    const string input = @"[Testing.User]|Info:([Testing.Info]|Name:([System.String]|Matt)|Age:([System.Int32]|21))|Description:([System.String]|This is some description)";
    const string pattern = @"(\[Testing\.User\])\|(Info:.*)\|(Description:.*)";
    var match = Regex.Match (input, pattern);
    if (match.Success) {
        for (int i = 1; i < match.Groups.Count; i ++) {
            Console.WriteLine ("[" + i + "] = " + match.Groups [i]);
        }
    }
    Console.ReadLine ();
}
----------------------------------------

 private static void Main(string[] args)
    {
        const string input = @"[Testing.User]|Info:([Testing.Info]|Name:([System.String]|Matt)|Age:([System.Int32]|21))|Description:([System.String]|This is some description)";
        const string pattern = @"(\[Testing\.User\])\|(Info:.*)\|(Description:.*)";
        MatchCollection matches = Regex.Matches(input, pattern);
        if (matches.Count > 0)
        {
            int groupnum = 1;
            foreach(Match match in matches)
            {
                for (int i = 1; i < match.Groups.Count; i++)
                {
                    Console.WriteLine($"Match {groupnum}, Group {i}: {match.Groups[i]}");
                }
                groupnum++;
            }
        }
        Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
2
Gpt3D_Clone96_2.cs 1 11
Gpt3D_Clone96_2.cs 12 30
----------------------------------------

private static void Main (string [] args) {
    const string input = @"[Testing.User]|Info:([Testing.Info]|Name:([System.String]|Matt)|Age:([System.Int32]|21))|Description:([System.String]|This is some description)";
    const string pattern = @"(\[Testing\.User\])\|(Info:.*)\|(Description:.*)";
    var match = Regex.Match (input, pattern);
    if (match.Success) {
        for (int i = 1; i < match.Groups.Count; i ++) {
            Console.WriteLine ("[" + i + "] = " + match.Groups [i]);
        }
    }
    Console.ReadLine ();
}
----------------------------------------

 private static void Main(string[] args)
    {
        const string input = @"[Testing.User]|Info:([Testing.Info]|Name:([System.String]|Matt)|Age:([System.Int32]|21))|Description:([System.String]|This is some description)";
        const string pattern = @"(\[Testing\.User\])\|(Info:.*)\|(Description:.*)";
        int gindex = 1;
        MatchCollection matches = Regex.Matches(input, pattern);
        foreach(Match match in matches)
        {
            for (int i = 1; i < match.Groups.Count; i++)
            {
                Console.WriteLine($"{gindex}/{i}: {match.Groups[i]}");
            }
            gindex++;
        }
        Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
3
Gpt3D_Clone96_3.cs 1 11
Gpt3D_Clone96_3.cs 12 30
----------------------------------------

private static void Main (string [] args) {
    const string input = @"[Testing.User]|Info:([Testing.Info]|Name:([System.String]|Matt)|Age:([System.Int32]|21))|Description:([System.String]|This is some description)";
    const string pattern = @"(\[Testing\.User\])\|(Info:.*)\|(Description:.*)";
    var match = Regex.Match (input, pattern);
    if (match.Success) {
        for (int i = 1; i < match.Groups.Count; i ++) {
            Console.WriteLine ("[" + i + "] = " + match.Groups [i]);
        }
    }
    Console.ReadLine ();
}
----------------------------------------

 private static void Main(string[] args)
    {
        const string input = @"[Testing.User]|Info:([Testing.Info]|Name:([System.String]|Matt)|Age:([System.Int32]|21))|Description:([System.String]|This is some description)";
        const string pattern = @"(\[Testing\.User\])\|(Info:.*)\|(Description:.*)";
        int groupnum = 0;
        MatchCollection matches = Regex.Matches(input, pattern);
        foreach(Match match in matches)
        {
            for (int i = 0; i < match.Groups.Count; i++)
            {
                Console.WriteLine($"Match {groupnum}, Group {i}: {match.Groups[i]}");
            }
            groupnum++;
        }
        Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
4
Gpt3D_Clone96_4.cs 1 11
Gpt3D_Clone96_4.cs 12 29
----------------------------------------

private static void Main (string [] args) {
    const string input = @"[Testing.User]|Info:([Testing.Info]|Name:([System.String]|Matt)|Age:([System.Int32]|21))|Description:([System.String]|This is some description)";
    const string pattern = @"(\[Testing\.User\])\|(Info:.*)\|(Description:.*)";
    var match = Regex.Match (input, pattern);
    if (match.Success) {
        for (int i = 1; i < match.Groups.Count; i ++) {
            Console.WriteLine ("[" + i + "] = " + match.Groups [i]);
        }
    }
    Console.ReadLine ();
}
----------------------------------------

 private static void Main(string[] args)
    {
        const string input = @"[Testing.User]|Info:([Testing.Info]|Name:([System.String]|Matt)|Age:([System.Int32]|21))|Description:([System.String]|This is some description)";
        const string pattern = @"(\[Testing\.User\])\|(Info:.*)\|(Description:.*)";
        MatchCollection matches = Regex.Matches(input, pattern);
        int matchCount = 0;
        foreach(Match match in matches)
        {
            for (int i = 1; i < match.Groups.Count; i++)
            {
                Console.WriteLine($"Match {matchCount}, Group {i}: {match.Groups[i]}");
            }
            matchCount++;
        }
        Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
5
Gpt3D_Clone96_5.cs 1 11
Gpt3D_Clone96_5.cs 12 30
----------------------------------------

private static void Main (string [] args) {
    const string input = @"[Testing.User]|Info:([Testing.Info]|Name:([System.String]|Matt)|Age:([System.Int32]|21))|Description:([System.String]|This is some description)";
    const string pattern = @"(\[Testing\.User\])\|(Info:.*)\|(Description:.*)";
    var match = Regex.Match (input, pattern);
    if (match.Success) {
        for (int i = 1; i < match.Groups.Count; i ++) {
            Console.WriteLine ("[" + i + "] = " + match.Groups [i]);
        }
    }
    Console.ReadLine ();
}
----------------------------------------

 private static void Main(string[] args)
    {
        const string input = @"[Testing.User]|Info:([Testing.Info]|Name:([System.String]|Matt)|Age:([System.Int32]|21))|Description:([System.String]|This is some description)";
        const string pattern = @"(\[Testing\.User\])\|(Info:.*)\|(Description:.*)";
        int groupnum = 1;
        MatchCollection matches = Regex.Matches(input, pattern);
        foreach(Match match in matches)
        {
            if (match.Success)
            {
                Console.WriteLine($"Group {groupnum}: {match.Groups[1]}, {match.Groups[2]}, {match.Groups[3]}");
            }
            groupnum++;
        }
        Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
6
Gpt3D_Clone96_6.cs 1 11
Gpt3D_Clone96_6.cs 12 30
----------------------------------------

private static void Main (string [] args) {
    const string input = @"[Testing.User]|Info:([Testing.Info]|Name:([System.String]|Matt)|Age:([System.Int32]|21))|Description:([System.String]|This is some description)";
    const string pattern = @"(\[Testing\.User\])\|(Info:.*)\|(Description:.*)";
    var match = Regex.Match (input, pattern);
    if (match.Success) {
        for (int i = 1; i < match.Groups.Count; i ++) {
            Console.WriteLine ("[" + i + "] = " + match.Groups [i]);
        }
    }
    Console.ReadLine ();
}
----------------------------------------

 private static void Main(string[] args)
    {
        const string input = @"[Testing.User]|Info:([Testing.Info]|Name:([System.String]|Matt)|Age:([System.Int32]|21))|Description:([System.String]|This is some description)";
        const string pattern = @"(\[Testing\.User\])\|(Info:.*)\|(Description:.*)";
        MatchCollection matches = Regex.Matches(input, pattern);
        if (matches.Count > 0)
        {
            foreach(Match match in matches)
            {
                for (int i = 1; i < match.Groups.Count; i++)
                {
                    Console.WriteLine($"Group {i}: {match.Groups[i]}");
                }
            }
        }
        Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
7
Gpt3D_Clone96_7.cs 1 11
Gpt3D_Clone96_7.cs 12 30
----------------------------------------

private static void Main (string [] args) {
    const string input = @"[Testing.User]|Info:([Testing.Info]|Name:([System.String]|Matt)|Age:([System.Int32]|21))|Description:([System.String]|This is some description)";
    const string pattern = @"(\[Testing\.User\])\|(Info:.*)\|(Description:.*)";
    var match = Regex.Match (input, pattern);
    if (match.Success) {
        for (int i = 1; i < match.Groups.Count; i ++) {
            Console.WriteLine ("[" + i + "] = " + match.Groups [i]);
        }
    }
    Console.ReadLine ();
}
----------------------------------------

 private static void Main(string[] args)
    {
        const string input = @"[Testing.User]|Info:([Testing.Info]|Name:([System.String]|Matt)|Age:([System.Int32]|21))|Description:([System.String]|This is some description)";
        const string pattern = @"(\[Testing\.User\])\|(Info:.*)\|(Description:.*)";
        MatchCollection matches = Regex.Matches(input, pattern);
        for (int i = 0; i < matches.Count; i++)
        {
            if (matches[i].Success)
            {
                for (int j = 1; j < matches[i].Groups.Count; j++)
                {
                    Console.WriteLine($"Match {i}, Group {j}: {matches[i].Groups[j]}");
                }
            }
        }
        Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
8
Gpt3D_Clone96_8.cs 1 11
Gpt3D_Clone96_8.cs 12 28
----------------------------------------

private static void Main (string [] args) {
    const string input = @"[Testing.User]|Info:([Testing.Info]|Name:([System.String]|Matt)|Age:([System.Int32]|21))|Description:([System.String]|This is some description)";
    const string pattern = @"(\[Testing\.User\])\|(Info:.*)\|(Description:.*)";
    var match = Regex.Match (input, pattern);
    if (match.Success) {
        for (int i = 1; i < match.Groups.Count; i ++) {
            Console.WriteLine ("[" + i + "] = " + match.Groups [i]);
        }
    }
    Console.ReadLine ();
}
----------------------------------------

 private static void Main(string[] args)
    {
        const string input = @"[Testing.User]|Info:([Testing.Info]|Name:([System.String]|Matt)|Age:([System.Int32]|21))|Description:([System.String]|This is some description)";
        const string pattern = @"(\[Testing\.User\])\|(Info:.*)\|(Description:.*)";
        MatchCollection matches = Regex.Matches(input, pattern);
        for (int i = 0; i < matches.Count; i++)
        {
            for (int j = 0; j < matches[i].Groups.Count; j++)
            {
                Console.WriteLine($"Match {i}, Group {j}: {matches[i].Groups[j]}");
            }
        }
        Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
9
Gpt3D_Clone96_9.cs 1 11
Gpt3D_Clone96_9.cs 12 27
----------------------------------------

private static void Main (string [] args) {
    const string input = @"[Testing.User]|Info:([Testing.Info]|Name:([System.String]|Matt)|Age:([System.Int32]|21))|Description:([System.String]|This is some description)";
    const string pattern = @"(\[Testing\.User\])\|(Info:.*)\|(Description:.*)";
    var match = Regex.Match (input, pattern);
    if (match.Success) {
        for (int i = 1; i < match.Groups.Count; i ++) {
            Console.WriteLine ("[" + i + "] = " + match.Groups [i]);
        }
    }
    Console.ReadLine ();
}
----------------------------------------

  private static void Main(string[] args)
    {
        const string input = @"[Testing.User]|Info:([Testing.Info]|Name:([System.String]|Matt)|Age:([System.Int32]|21))|Description:([System.String]|This is some description)";
        const string pattern = @"(\[Testing\.User\])\|(Info:.*)\|(Description:.*)";
        MatchCollection matches = Regex.Matches(input, pattern);
        foreach(Match match in matches)
        {
            for (int i = 1; i < match.Groups.Count; i++)
            {
                Console.WriteLine($"Match {i}: {match.Groups[i]}");
            }
        }
        Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
979
1
Gpt3D_Clone979_1.cs 1 9
Gpt3D_Clone979_1.cs 10 20
----------------------------------------

private static object SearchPositionUsingIndex (List < TagType < object > > tagList, string fieldTag) {
    var index = BuildIndex (tagList);
    int i;
    if (! index.TryGetValue (fieldTag, out i))
        return null;
    if (i + 1 >= tagList.Count)
        return null;
    return tagList [i + 1].Position;
}
----------------------------------------

  private static object SearchPositionUsingIndex (List < TagType < object > > tagList, string fieldTag) {
    var index = BuildIndex (tagList);
    if (!index.ContainsKey (fieldTag))
        return null;
    int i = index [fieldTag];
    if (i + 1 >= tagList.Count)
        return null;
    return tagList [i + 1].Position;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
980
0
Gpt3D_Clone980_0.cs 1 17
Gpt3D_Clone980_0.cs 18 32
----------------------------------------

protected void Page_Load (object sender, EventArgs e) {
    var tblTextboxes = new Table ();
    for (int i = 0; i < 10; i ++) {
        var tr = new TableRow ();
        var tc = new TableCell ();
        var tb = new TextBox {ID = i.ToString ()};
        tc.Controls.Add (tb);
        tr.Cells.Add (tc);
        var tc1 = new TableCell ();
        var lnk = new LinkButton {ID = i + "lnk", Text = "Show"};
        lnk.Click += lnk_Click;
        tc1.Controls.Add (lnk);
        tr.Cells.Add (tc1);
        tblTextboxes.Rows.Add (tr);
    }
    placeTest.Controls.Add (tblTextboxes);
}
----------------------------------------

 protected void Page_Load (object sender, EventArgs e) {
    var liTextboxes = new li ();
    for (int i = 0; i < 10; i ++) {
        var li = new ListItem ();
        var tb = new TextBox {ID = i.ToString ()};
        li.Controls.Add (tb);
        var lnk = new LinkButton {ID = i + "lnk", Text = "Show"};
        lnk.Click += lnk_Click;
        li.Controls.Add (lnk);
        liTextboxes.Controls.Add (li);
    }
    placeTest.Controls.Add (liTextboxes);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
980
1
Gpt3D_Clone980_1.cs 1 17
Gpt3D_Clone980_1.cs 18 32
----------------------------------------

protected void Page_Load (object sender, EventArgs e) {
    var tblTextboxes = new Table ();
    for (int i = 0; i < 10; i ++) {
        var tr = new TableRow ();
        var tc = new TableCell ();
        var tb = new TextBox {ID = i.ToString ()};
        tc.Controls.Add (tb);
        tr.Cells.Add (tc);
        var tc1 = new TableCell ();
        var lnk = new LinkButton {ID = i + "lnk", Text = "Show"};
        lnk.Click += lnk_Click;
        tc1.Controls.Add (lnk);
        tr.Cells.Add (tc1);
        tblTextboxes.Rows.Add (tr);
    }
    placeTest.Controls.Add (tblTextboxes);
}
----------------------------------------

 protected void Page_Load (object sender, EventArgs e) {
    var listTextboxes = new List ();
    for (int i = 0; i < 10; i ++) {
        var li = new ListItem ();
        var tb = new TextBox {ID = i.ToString ()};
        li.Controls.Add (tb);
        var lnk = new LinkButton {ID = i + "lnk", Text = "Show"};
        lnk.Click += lnk_Click;
        li.Controls.Add (lnk);
        listTextboxes.Controls.Add (li);
    }
    placeTest.Controls.Add (listTextboxes);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
983
1
Gpt3D_Clone983_1.cs 1 11
Gpt3D_Clone983_1.cs 12 27
----------------------------------------

public static void Main (string [] args) {
    foreach (string path in args) {
        if (File.Exists (path)) {
            ProcessFile (path);
        } else if (Directory.Exists (path)) {
            ProcessDirectory (path);
        } else {
            Console.WriteLine ("{0} is not a valid file or directory.", path);
        }
    }
}
----------------------------------------

 public static void Main (string [] args) {
    int count = 0;
    while (count < args.Length) {
        string path = args[count];
        if (File.Exists (path)) {
            ProcessFile (path);
        } else if (Directory.Exists (path)) {
            ProcessDirectory (path);
        } else {
            Console.WriteLine ("{0} is not a valid file or directory.", path);
        }
        count++;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
983
2
Gpt3D_Clone983_2.cs 1 11
Gpt3D_Clone983_2.cs 12 27
----------------------------------------

public static void Main (string [] args) {
    foreach (string path in args) {
        if (File.Exists (path)) {
            ProcessFile (path);
        } else if (Directory.Exists (path)) {
            ProcessDirectory (path);
        } else {
            Console.WriteLine ("{0} is not a valid file or directory.", path);
        }
    }
}
----------------------------------------

 static void Main (string [] args) {
    int index = 0;
    while (index < args.Length) {
        string path = args[index];
        if (File.Exists (path)) {
            ProcessFile (path);
        } else if (Directory.Exists (path)) {
            ProcessDirectory (path);
        } else {
            Console.WriteLine ("{0} is not a valid file or directory.", path);
        }
        index++;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
983
3
Gpt3D_Clone983_3.cs 1 11
Gpt3D_Clone983_3.cs 12 25
----------------------------------------

public static void Main (string [] args) {
    foreach (string path in args) {
        if (File.Exists (path)) {
            ProcessFile (path);
        } else if (Directory.Exists (path)) {
            ProcessDirectory (path);
        } else {
            Console.WriteLine ("{0} is not a valid file or directory.", path);
        }
    }
}
----------------------------------------

 static void Main (string [] args) {
    Array.ForEach(args, path =>
    {
        if (File.Exists (path)) {
            ProcessFile (path);
        } else if (Directory.Exists (path)) {
            ProcessDirectory (path);
        } else {
            Console.WriteLine ("{0} is not a valid file or directory.", path);
        }
    });
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
983
4
Gpt3D_Clone983_4.cs 1 11
Gpt3D_Clone983_4.cs 12 30
----------------------------------------

public static void Main (string [] args) {
    foreach (string path in args) {
        if (File.Exists (path)) {
            ProcessFile (path);
        } else if (Directory.Exists (path)) {
            ProcessDirectory (path);
        } else {
            Console.WriteLine ("{0} is not a valid file or directory.", path);
        }
    }
}
----------------------------------------

 static void Main (string[] args) {
    for (var i = 0; i < args.Length; i++) {
        var currentPath = args[i];
        if (File.Exists (currentPath))
        {
            ProcessFile (currentPath);
        }
        else if (Directory.Exists (currentPath))
        {
            ProcessDirectory (currentPath);
        }
        else
        {
            Console.WriteLine ("{0} is not a valid file or directory.", currentPath);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
983
5
Gpt3D_Clone983_5.cs 1 11
Gpt3D_Clone983_5.cs 12 30
----------------------------------------

public static void Main (string [] args) {
    foreach (string path in args) {
        if (File.Exists (path)) {
            ProcessFile (path);
        } else if (Directory.Exists (path)) {
            ProcessDirectory (path);
        } else {
            Console.WriteLine ("{0} is not a valid file or directory.", path);
        }
    }
}
----------------------------------------

 static void Main (string[] args) {
    foreach (string path in args.ToList())
    {
        if (File.Exists (path))
        {
            ProcessFile (path);
        }
        else if (Directory.Exists (path))
        {
            ProcessDirectory (path);
        }
        else
        {
            Console.WriteLine ("{0} is not a valid file or directory.", path);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
984
0
Gpt3D_Clone984_0.cs 1 18
Gpt3D_Clone984_0.cs 19 38
----------------------------------------

[SecurityCritical] public static string GetCookieInternal (Uri uri, bool throwIfNoCookie) {
    uint pchCookieData = 0;
    string url = UriToString (uri);
    uint flag = (uint) NativeMethods.InternetFlags.INTERNET_COOKIE_HTTPONLY;
    if (NativeMethods.InternetGetCookieEx (url, null, null, ref pchCookieData, flag, IntPtr.Zero)) {
        pchCookieData ++;
        StringBuilder cookieData = new StringBuilder ((int) pchCookieData);
        if (NativeMethods.InternetGetCookieEx (url, null, cookieData, ref pchCookieData, flag, IntPtr.Zero)) {
            DemandWebPermission (uri);
            return cookieData.ToString ();
        }
    }
    int lastErrorCode = Marshal.GetLastWin32Error ();
    if (throwIfNoCookie || (lastErrorCode != (int) NativeMethods.ErrorFlags.ERROR_NO_MORE_ITEMS)) {
        throw new Win32Exception (lastErrorCode);
    }
    return null;
}
----------------------------------------

 [SecurityCritical] public static string GetCookieInternal (Uri uri, bool throwIfNoCookie) {
    int size = 0;
    string url = UriToString (uri);
    uint flag = (uint) NativeMethods.InternetFlags.INTERNET_COOKIE_HTTPONLY;
    if (NativeMethods.InternetQueryDataAvailable (url, flag, ref size, 0, IntPtr.Zero)) {
        char[] data = new char[size];
        if (NativeMethods.InternetReadData (url, data, ref size, flag)) {
            DemandWebPermission (uri);
            string cookieData = new string (data);
            return cookieData;
        }
    }
    int lastErrorCode = Marshal.GetLastWin32Error ();
    if (throwIfNoCookie || (lastErrorCode != (int) NativeMethods.ErrorFlags.ERROR_NO_MORE_ITEMS)) {
        throw new Win32Exception (lastErrorCode);
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
984
1
Gpt3D_Clone984_1.cs 1 18
Gpt3D_Clone984_1.cs 19 38
----------------------------------------

[SecurityCritical] public static string GetCookieInternal (Uri uri, bool throwIfNoCookie) {
    uint pchCookieData = 0;
    string url = UriToString (uri);
    uint flag = (uint) NativeMethods.InternetFlags.INTERNET_COOKIE_HTTPONLY;
    if (NativeMethods.InternetGetCookieEx (url, null, null, ref pchCookieData, flag, IntPtr.Zero)) {
        pchCookieData ++;
        StringBuilder cookieData = new StringBuilder ((int) pchCookieData);
        if (NativeMethods.InternetGetCookieEx (url, null, cookieData, ref pchCookieData, flag, IntPtr.Zero)) {
            DemandWebPermission (uri);
            return cookieData.ToString ();
        }
    }
    int lastErrorCode = Marshal.GetLastWin32Error ();
    if (throwIfNoCookie || (lastErrorCode != (int) NativeMethods.ErrorFlags.ERROR_NO_MORE_ITEMS)) {
        throw new Win32Exception (lastErrorCode);
    }
    return null;
}
----------------------------------------

 [SecurityCritical] public static string GetCookieInternal (Uri uri, bool throwIfNoCookie) {  
    int size = 0;
    string url = UriToString (uri);
    uint flag = (uint) NativeMethods.InternetFlags.INTERNET_COOKIE_HTTPONLY;
    if (NativeMethods.InternetQueryDataAvailable (url, flag, ref size, 0, IntPtr.Zero)) {
        byte[] data = new byte[size];
        if (NativeMethods.InternetReadData (url, data, ref size, flag)) {
            DemandWebPermission (uri);
            string cookieData = Encoding.Unicode.GetString (data);
            return cookieData;
        }
    }
    int lastErrorCode = Marshal.GetLastWin32Error ();
    if (throwIfNoCookie || (lastErrorCode != (int) NativeMethods.ErrorFlags.ERROR_NO_MORE_ITEMS)) {
        throw new Win32Exception (lastErrorCode);
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
984
2
Gpt3D_Clone984_2.cs 1 18
Gpt3D_Clone984_2.cs 19 38
----------------------------------------

[SecurityCritical] public static string GetCookieInternal (Uri uri, bool throwIfNoCookie) {
    uint pchCookieData = 0;
    string url = UriToString (uri);
    uint flag = (uint) NativeMethods.InternetFlags.INTERNET_COOKIE_HTTPONLY;
    if (NativeMethods.InternetGetCookieEx (url, null, null, ref pchCookieData, flag, IntPtr.Zero)) {
        pchCookieData ++;
        StringBuilder cookieData = new StringBuilder ((int) pchCookieData);
        if (NativeMethods.InternetGetCookieEx (url, null, cookieData, ref pchCookieData, flag, IntPtr.Zero)) {
            DemandWebPermission (uri);
            return cookieData.ToString ();
        }
    }
    int lastErrorCode = Marshal.GetLastWin32Error ();
    if (throwIfNoCookie || (lastErrorCode != (int) NativeMethods.ErrorFlags.ERROR_NO_MORE_ITEMS)) {
        throw new Win32Exception (lastErrorCode);
    }
    return null;
}
----------------------------------------

 [SecurityCritical] public static string GetCookieInternal (Uri uri, bool throwIfNoCookie) {
    int size = 0;
    string url = UriToString (uri);
    uint flag = (uint) NativeMethods.InternetFlags.INTERNET_COOKIE_HTTPONLY;
    if (NativeMethods.InternetQueryDataAvailable (url, flag, ref size, 0, IntPtr.Zero)) {
        byte[] data = new byte[size];
        if (NativeMethods.InternetReadDataWithBuffer (url, data, ref size, flag)) {
            DemandWebPermission (uri);
            string cookieData = Encoding.GetEncoding("WINDOWS-1251").GetString (data);
            return cookieData;
        }
    }
    int lastErrorCode = Marshal.GetLastWin32Error ();
    if (throwIfNoCookie || (lastErrorCode != (int) NativeMethods.ErrorFlags.ERROR_NO_MORE_ITEMS)) {
        throw new Win32Exception (lastErrorCode);
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
984
3
Gpt3D_Clone984_3.cs 1 18
Gpt3D_Clone984_3.cs 19 37
----------------------------------------

[SecurityCritical] public static string GetCookieInternal (Uri uri, bool throwIfNoCookie) {
    uint pchCookieData = 0;
    string url = UriToString (uri);
    uint flag = (uint) NativeMethods.InternetFlags.INTERNET_COOKIE_HTTPONLY;
    if (NativeMethods.InternetGetCookieEx (url, null, null, ref pchCookieData, flag, IntPtr.Zero)) {
        pchCookieData ++;
        StringBuilder cookieData = new StringBuilder ((int) pchCookieData);
        if (NativeMethods.InternetGetCookieEx (url, null, cookieData, ref pchCookieData, flag, IntPtr.Zero)) {
            DemandWebPermission (uri);
            return cookieData.ToString ();
        }
    }
    int lastErrorCode = Marshal.GetLastWin32Error ();
    if (throwIfNoCookie || (lastErrorCode != (int) NativeMethods.ErrorFlags.ERROR_NO_MORE_ITEMS)) {
        throw new Win32Exception (lastErrorCode);
    }
    return null;
}
----------------------------------------

 [SecurityCritical] public static string GetCookieInternal (Uri uri, bool throwIfNoCookie) {
    uint bufSize = 0;
    string url = UriToString (uri);
    uint flag = (uint) NativeMethods.InternetFlags.INTERNET_COOKIE_HTTPONLY;
    if (NativeMethods.InternetQueryDataAvailable (url, flag, ref bufSize, 0, IntPtr.Zero)) {
        byte[] cookieData = new byte[bufSize];
        if (NativeMethods.InternetReadData (url, cookieData, ref bufSize, flag)) {
            DemandWebPermission (uri);
            return Encoding.UTF8.GetString (cookieData);
        }
    }
    int lastErrorCode = Marshal.GetLastWin32Error ();
    if (throwIfNoCookie || (lastErrorCode != (int) NativeMethods.ErrorFlags.ERROR_NO_MORE_ITEMS)) {
        throw new Win32Exception (lastErrorCode);
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
984
4
Gpt3D_Clone984_4.cs 1 18
Gpt3D_Clone984_4.cs 19 37
----------------------------------------

[SecurityCritical] public static string GetCookieInternal (Uri uri, bool throwIfNoCookie) {
    uint pchCookieData = 0;
    string url = UriToString (uri);
    uint flag = (uint) NativeMethods.InternetFlags.INTERNET_COOKIE_HTTPONLY;
    if (NativeMethods.InternetGetCookieEx (url, null, null, ref pchCookieData, flag, IntPtr.Zero)) {
        pchCookieData ++;
        StringBuilder cookieData = new StringBuilder ((int) pchCookieData);
        if (NativeMethods.InternetGetCookieEx (url, null, cookieData, ref pchCookieData, flag, IntPtr.Zero)) {
            DemandWebPermission (uri);
            return cookieData.ToString ();
        }
    }
    int lastErrorCode = Marshal.GetLastWin32Error ();
    if (throwIfNoCookie || (lastErrorCode != (int) NativeMethods.ErrorFlags.ERROR_NO_MORE_ITEMS)) {
        throw new Win32Exception (lastErrorCode);
    }
    return null;
}
----------------------------------------

 [SecurityCritical] public static string GetCookieInternal (Uri uri, bool throwIfNoCookie) {
    int totalSize = 0;
    string url = UriToString (uri);
    uint flag = (uint) NativeMethods.InternetFlags.INTERNET_COOKIE_HTTPONLY;
    if (NativeMethods.InternetQueryDataAvailable (url, flag, ref totalSize, 0, IntPtr.Zero)) {
        StringBuilder cookieData = new StringBuilder (totalSize + 1);
        if (NativeMethods.InternetReadStringData (url, cookieData, ref totalSize, flag)) {
            DemandWebPermission (uri);
            return cookieData.ToString ();
        }
    }
    int lastErrorCode = Marshal.GetLastWin32Error ();
    if (throwIfNoCookie || (lastErrorCode != (int) NativeMethods.ErrorFlags.ERROR_NO_MORE_ITEMS)) {
        throw new Win32Exception (lastErrorCode);
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
984
5
Gpt3D_Clone984_5.cs 1 18
Gpt3D_Clone984_5.cs 19 37
----------------------------------------

[SecurityCritical] public static string GetCookieInternal (Uri uri, bool throwIfNoCookie) {
    uint pchCookieData = 0;
    string url = UriToString (uri);
    uint flag = (uint) NativeMethods.InternetFlags.INTERNET_COOKIE_HTTPONLY;
    if (NativeMethods.InternetGetCookieEx (url, null, null, ref pchCookieData, flag, IntPtr.Zero)) {
        pchCookieData ++;
        StringBuilder cookieData = new StringBuilder ((int) pchCookieData);
        if (NativeMethods.InternetGetCookieEx (url, null, cookieData, ref pchCookieData, flag, IntPtr.Zero)) {
            DemandWebPermission (uri);
            return cookieData.ToString ();
        }
    }
    int lastErrorCode = Marshal.GetLastWin32Error ();
    if (throwIfNoCookie || (lastErrorCode != (int) NativeMethods.ErrorFlags.ERROR_NO_MORE_ITEMS)) {
        throw new Win32Exception (lastErrorCode);
    }
    return null;
}
----------------------------------------

 [SecurityCritical] public static string GetCookieInternal (Uri uri, bool throwIfNoCookie) {
    int totalSize = 0;
    string url = UriToString (uri);
    uint flag = (uint) NativeMethods.InternetFlags.INTERNET_COOKIE_HTTPONLY;
    if (NativeMethods.InternetQueryDataAvailable (url, flag, ref totalSize, 0, IntPtr.Zero)) {
        StringBuilder cookieData = new StringBuilder (totalSize + 1);
        if (NativeMethods.InternetReadData (url, cookieData, ref totalSize, flag)) {
            DemandWebPermission (uri);
            return cookieData.ToString ();
        }
    }
    int lastErrorCode = Marshal.GetLastWin32Error ();
    if (throwIfNoCookie || (lastErrorCode != (int) NativeMethods.ErrorFlags.ERROR_NO_MORE_ITEMS)) {
        throw new Win32Exception (lastErrorCode);
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
984
6
Gpt3D_Clone984_6.cs 1 18
Gpt3D_Clone984_6.cs 19 37
----------------------------------------

[SecurityCritical] public static string GetCookieInternal (Uri uri, bool throwIfNoCookie) {
    uint pchCookieData = 0;
    string url = UriToString (uri);
    uint flag = (uint) NativeMethods.InternetFlags.INTERNET_COOKIE_HTTPONLY;
    if (NativeMethods.InternetGetCookieEx (url, null, null, ref pchCookieData, flag, IntPtr.Zero)) {
        pchCookieData ++;
        StringBuilder cookieData = new StringBuilder ((int) pchCookieData);
        if (NativeMethods.InternetGetCookieEx (url, null, cookieData, ref pchCookieData, flag, IntPtr.Zero)) {
            DemandWebPermission (uri);
            return cookieData.ToString ();
        }
    }
    int lastErrorCode = Marshal.GetLastWin32Error ();
    if (throwIfNoCookie || (lastErrorCode != (int) NativeMethods.ErrorFlags.ERROR_NO_MORE_ITEMS)) {
        throw new Win32Exception (lastErrorCode);
    }
    return null;
}
----------------------------------------

 [SecurityCritical] public static string GetCookieInternal (Uri uri, bool throwIfNoCookie) {  
    int size = 0;
    string url = UriToString (uri);
    uint flag = (uint) NativeMethods.InternetFlags.INTERNET_COOKIE_HTTPONLY;
    if (NativeMethods.InternetQueryDataAvailable (url, flag, ref size, 0, IntPtr.Zero)) {
        StringBuilder cookieData = new StringBuilder (size + 1);
        if (NativeMethods.InternetReadDataEx (url, cookieData, ref size, flag)) {
            DemandWebPermission (uri);
            return cookieData.ToString ();
        }
    }
    int lastErrorCode = Marshal.GetLastWin32Error ();
    if (throwIfNoCookie || (lastErrorCode != (int) NativeMethods.ErrorFlags.ERROR_NO_MORE_ITEMS)) {
        throw new Win32Exception (lastErrorCode);
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
984
7
Gpt3D_Clone984_7.cs 1 18
Gpt3D_Clone984_7.cs 19 37
----------------------------------------

[SecurityCritical] public static string GetCookieInternal (Uri uri, bool throwIfNoCookie) {
    uint pchCookieData = 0;
    string url = UriToString (uri);
    uint flag = (uint) NativeMethods.InternetFlags.INTERNET_COOKIE_HTTPONLY;
    if (NativeMethods.InternetGetCookieEx (url, null, null, ref pchCookieData, flag, IntPtr.Zero)) {
        pchCookieData ++;
        StringBuilder cookieData = new StringBuilder ((int) pchCookieData);
        if (NativeMethods.InternetGetCookieEx (url, null, cookieData, ref pchCookieData, flag, IntPtr.Zero)) {
            DemandWebPermission (uri);
            return cookieData.ToString ();
        }
    }
    int lastErrorCode = Marshal.GetLastWin32Error ();
    if (throwIfNoCookie || (lastErrorCode != (int) NativeMethods.ErrorFlags.ERROR_NO_MORE_ITEMS)) {
        throw new Win32Exception (lastErrorCode);
    }
    return null;
}
----------------------------------------

 [SecurityCritical] public static string GetCookieInternal (Uri uri, bool throwIfNoCookie) {
    StringBuilder cookieData = new StringBuilder(256);
    string Url = UriToString (uri);
    uint flag = (uint) NativeMethods.InternetFlags.INTERNET_COOKIE_HTTPONLY;
    int result = NativeMethods.InternetGetCookie(url, null, cookieData, ref cookieData.MaxCapacity);
    if (result != 0)
    {
        DemandWebPermission (uri);
        return cookieData.ToString();
    }
    int lastErrorCode = Marshal.GetLastWin32Error ();
    if (throwIfNoCookie || (lastErrorCode != (int) NativeMethods.ErrorFlags.ERROR_NO_MORE_ITEMS))
    {
        throw new Win32Exception(lastErrorCode);
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
984
8
Gpt3D_Clone984_8.cs 1 18
Gpt3D_Clone984_8.cs 19 36
----------------------------------------

[SecurityCritical] public static string GetCookieInternal (Uri uri, bool throwIfNoCookie) {
    uint pchCookieData = 0;
    string url = UriToString (uri);
    uint flag = (uint) NativeMethods.InternetFlags.INTERNET_COOKIE_HTTPONLY;
    if (NativeMethods.InternetGetCookieEx (url, null, null, ref pchCookieData, flag, IntPtr.Zero)) {
        pchCookieData ++;
        StringBuilder cookieData = new StringBuilder ((int) pchCookieData);
        if (NativeMethods.InternetGetCookieEx (url, null, cookieData, ref pchCookieData, flag, IntPtr.Zero)) {
            DemandWebPermission (uri);
            return cookieData.ToString ();
        }
    }
    int lastErrorCode = Marshal.GetLastWin32Error ();
    if (throwIfNoCookie || (lastErrorCode != (int) NativeMethods.ErrorFlags.ERROR_NO_MORE_ITEMS)) {
        throw new Win32Exception (lastErrorCode);
    }
    return null;
}
----------------------------------------

[SecurityCritical] public static string GetCookieInternal (Uri uri, bool throwIfNoCookie) {  
    StringBuilder cookieData = new StringBuilder(256); 
    string Url = UriToString (uri);
    uint flag = (uint) NativeMethods.InternetFlags.INTERNET_COOKIE_HTTPONLY; 
    if (NativeMethods.InternetGetCookieEx(url, null, cookieData, ref cookieData.MaxCapacity, flag, IntPtr.Zero))
    {
        DemandWebPermission (uri);
        return cookieData.ToString();
    }
    int lastErrorCode = Marshal.GetLastWin32Error ();
    if (throwIfNoCookie || (lastErrorCode != (int) NativeMethods.ErrorFlags.ERROR_NO_MORE_ITEMS))
    {
        throw new Win32Exception(lastErrorCode);
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
985
0
Gpt3D_Clone985_0.cs 1 14
Gpt3D_Clone985_0.cs 15 32
----------------------------------------

public static bool IsEmpty < T > (this IEnumerable < T > list) {
    if (list == null) {
        throw new ArgumentNullException ("list");
    }
    var genericCollection = list as ICollection < T >;
    if (genericCollection != null) {
        return genericCollection.Count == 0;
    }
    var nonGenericCollection = list as ICollection;
    if (nonGenericCollection != null) {
        return nonGenericCollection.Count == 0;
    }
    return ! list.Any ();
}
----------------------------------------

 public static bool IsEmpty<T> (this IEnumerable<T> list) {
    if (list == null) {
        throw new ArgumentNullException("list");
    }
    var genericCollection = list as ICollection<T>;
    if (genericCollection?.Count == 0)
    {
        return true;
    }
    var nonGenericCollection = list as ICollection;
    if (nonGenericCollection?.Count == 0)
    {
        return true;
    }
    return ! list.Any ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
986
0
Gpt3D_Clone986_0.cs 1 11
Gpt3D_Clone986_0.cs 12 24
----------------------------------------

public void DrawSquare (int sideLength) {
    for (int row = 1; row <= sideLength; row ++) {
        for (int col = 1; col <= sideLength; col ++) {
            if (col <= row)
                Console.Write ('*');
            else
                Console.Write ('#');
        }
        Console.WriteLine ();
    }
}
----------------------------------------

 public void DrawSquare (int sideLength) {
    for (int row = sideLength; row >= 1; row--) {
        for (int col = sideLength; col >= 1; col--) {
            if (col >= row)
                Console.Write ('*');
            else
                Console.Write ('#');
        }
        Console.WriteLine ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
986
1
Gpt3D_Clone986_1.cs 1 11
Gpt3D_Clone986_1.cs 12 24
----------------------------------------

public void DrawSquare (int sideLength) {
    for (int row = 1; row <= sideLength; row ++) {
        for (int col = 1; col <= sideLength; col ++) {
            if (col <= row)
                Console.Write ('*');
            else
                Console.Write ('#');
        }
        Console.WriteLine ();
    }
}
----------------------------------------

 public void DrawSquare (int sideLength) {
    for (int row = sideLength; row >= 1; row--) {
        for (int col = sideLength; col >= 1; col--) {
            if (col == row)
                Console.Write('*');
            else
                Console.Write('#');
        }
        Console.WriteLine();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
986
2
Gpt3D_Clone986_2.cs 1 11
Gpt3D_Clone986_2.cs 12 24
----------------------------------------

public void DrawSquare (int sideLength) {
    for (int row = 1; row <= sideLength; row ++) {
        for (int col = 1; col <= sideLength; col ++) {
            if (col <= row)
                Console.Write ('*');
            else
                Console.Write ('#');
        }
        Console.WriteLine ();
    }
}
----------------------------------------

 public void DrawSquare (int sideLength) {
    for (int row = sideLength; row > 0; row--) {
        for (int col = sideLength; col > 0; col--) {
            if (col > sideLength - row + 1)
                Console.Write('#');
            else
                Console.Write('*');
        }
        Console.WriteLine();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
987
0
Gpt3D_Clone987_0.cs 1 16
Gpt3D_Clone987_0.cs 17 36
----------------------------------------

public static void Main (string [] args) {
    Stopwatch t0 = new Stopwatch ();
    int maxNumber = 20;
    long start;
    t0.Start ();
    start = Orig (maxNumber);
    t0.Stop ();
    Console.WriteLine ("Original | {0:d}, {1:d}", maxNumber, start);
    Console.WriteLine ("Original | time elapsed = {0}.", t0.Elapsed);
    t0.Restart ();
    start = Test (maxNumber);
    t0.Stop ();
    Console.WriteLine ("Test | {0:d}, {1:d}", maxNumber, start);
    Console.WriteLine ("Test | time elapsed = {0}.", t0.Elapsed);
    Console.ReadLine ();
}
----------------------------------------

 public static void Main(string[] args)
{
    Stopwatch t0 = new Stopwatch();
    int maxNumber = 20;
    long start;
    t0.Start();
    start = Orig(maxNumber);
    t0.Stop();
    Console.WriteLine($"Original | {maxNumber:d}, {start:d}");
    Console.WriteLine($"Original | time elapsed = {t0.Elapsed}");
    t0.Restart();
    start = Test(maxNumber);
    t0.Stop();
    Console.WriteLine($"Test | {maxNumber:d}, {start:d}");
    Console.WriteLine($"Test | time elapsed = {t0.Elapsed}");
    Console.ReadKey();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
989
0
Gpt3D_Clone989_0.cs 1 21
Gpt3D_Clone989_0.cs 22 48
----------------------------------------

public static Double Correlation (Double [] Xs, Double [] Ys) {
    Double sumX = 0;
    Double sumX2 = 0;
    Double sumY = 0;
    Double sumY2 = 0;
    Double sumXY = 0;
    int n = Xs.Length < Ys.Length ? Xs.Length : Ys.Length;
    for (int i = 0; i < n; ++ i) {
        Double x = Xs [i];
        Double y = Ys [i];
        sumX += x;
        sumX2 += x * x;
        sumY += y;
        sumY2 += y * y;
        sumXY += x * y;
    }
    Double stdX = Math.Sqrt (sumX2 / n - sumX * sumX / n / n);
    Double stdY = Math.Sqrt (sumY2 / n - sumY * sumY / n / n);
    Double covariance = (sumXY / n - sumX * sumY / n / n);
    return covariance / stdX / stdY;
}
----------------------------------------

 public static Double Correlation (Double [] Xs, Double [] Ys) {
    int size = Math.Min(Xs.Length, Ys.Length);
    Double sumX = 0;
    Double sumX2 = 0;
    Double sumY = 0;
    Double sumY2 = 0;
    Double sumXY = 0;
    for (int i = 0; i < size; ++ i) {
        Double x = Xs [i];
        Double y = Ys [i];
        sumX += x;
        sumX2 += Math.Pow(x, 2);
        sumY += y;
        sumY2 += Math.Pow(y, 2);
        sumXY += x * y;
    }
    Double avgX = sumX / size;
    Double avgY = sumY / size;
    Double covXY = sumXY / size - (avgX * avgY);
    Double varX = sumX2 / size - Math.Pow(avgX, 2);
    Double varY = sumY2 / size - Math.Pow(avgY, 2);
    Double stdX = Math.Sqrt(varX);
    Double stdY = Math.Sqrt(varY);
    return covXY / stdX / stdY;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
989
1
Gpt3D_Clone989_1.cs 1 21
Gpt3D_Clone989_1.cs 22 46
----------------------------------------

public static Double Correlation (Double [] Xs, Double [] Ys) {
    Double sumX = 0;
    Double sumX2 = 0;
    Double sumY = 0;
    Double sumY2 = 0;
    Double sumXY = 0;
    int n = Xs.Length < Ys.Length ? Xs.Length : Ys.Length;
    for (int i = 0; i < n; ++ i) {
        Double x = Xs [i];
        Double y = Ys [i];
        sumX += x;
        sumX2 += x * x;
        sumY += y;
        sumY2 += y * y;
        sumXY += x * y;
    }
    Double stdX = Math.Sqrt (sumX2 / n - sumX * sumX / n / n);
    Double stdY = Math.Sqrt (sumY2 / n - sumY * sumY / n / n);
    Double covariance = (sumXY / n - sumX * sumY / n / n);
    return covariance / stdX / stdY;
}
----------------------------------------

 public static Double Correlation (Double [] Xs, Double [] Ys) {
    Double meanX = 0;
    Double meanY = 0;
    Double sumX2 = 0;
    Double sumY2 = 0;
    Double sumXY = 0;
    int samples = Math.Min(Xs.Length, Ys.Length);
    for (int i = 0; i < samples; ++ i) {
        Double x = Xs [i];
        Double y = Ys [i];
        meanX += x;
        meanY += y;
        sumX2 += x * x;
        sumY2 += y * y;
        sumXY += x * y;
    }
    meanX /= samples;
    meanY /= samples;
    Double stdX = Math.Sqrt(sumX2 / samples - meanX * meanX);
    Double stdY = Math.Sqrt(sumY2 / samples - meanY * meanY);
    Double covariance = (sumXY / samples - meanX * meanY);
    return covariance / stdX / stdY;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
989
2
Gpt3D_Clone989_2.cs 1 21
Gpt3D_Clone989_2.cs 22 47
----------------------------------------

public static Double Correlation (Double [] Xs, Double [] Ys) {
    Double sumX = 0;
    Double sumX2 = 0;
    Double sumY = 0;
    Double sumY2 = 0;
    Double sumXY = 0;
    int n = Xs.Length < Ys.Length ? Xs.Length : Ys.Length;
    for (int i = 0; i < n; ++ i) {
        Double x = Xs [i];
        Double y = Ys [i];
        sumX += x;
        sumX2 += x * x;
        sumY += y;
        sumY2 += y * y;
        sumXY += x * y;
    }
    Double stdX = Math.Sqrt (sumX2 / n - sumX * sumX / n / n);
    Double stdY = Math.Sqrt (sumY2 / n - sumY * sumY / n / n);
    Double covariance = (sumXY / n - sumX * sumY / n / n);
    return covariance / stdX / stdY;
}
----------------------------------------

 public static Double Correlation (Double [] Xs, Double [] Ys)
{
    int sampleSize = Math.Min(Xs.Length, Ys.Length);
    Double sumSquaredX = 0;
    Double sumSquaredY = 0;
    Double sumX = 0;
    Double sumY = 0;
    Double xySum = 0;
    for (int i = 0; i < sampleSize; ++ i)
    {
        Double x = Xs[i];
        Double y = Ys[i];
        sumSquaredX += (x * x);
        sumSquaredY += (y * y);
        sumX += x;
        sumY += y;
        xySum += (x * y);
    }
    Double xAvg = sumX / sampleSize;
    Double yAvg = sumY / sampleSize;
    Double covariance = (xySum - (xAvg * yAvg * sampleSize));
    Double denominator = Math.Sqrt((sampleSize * sumSquaredX - Math.Pow(sumX, 2)) * (sampleSize * sumSquaredY - Math.Pow(sumY, 2)));
    return covariance / denominator;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
989
4
Gpt3D_Clone989_4.cs 1 21
Gpt3D_Clone989_4.cs 22 44
----------------------------------------

public static Double Correlation (Double [] Xs, Double [] Ys) {
    Double sumX = 0;
    Double sumX2 = 0;
    Double sumY = 0;
    Double sumY2 = 0;
    Double sumXY = 0;
    int n = Xs.Length < Ys.Length ? Xs.Length : Ys.Length;
    for (int i = 0; i < n; ++ i) {
        Double x = Xs [i];
        Double y = Ys [i];
        sumX += x;
        sumX2 += x * x;
        sumY += y;
        sumY2 += y * y;
        sumXY += x * y;
    }
    Double stdX = Math.Sqrt (sumX2 / n - sumX * sumX / n / n);
    Double stdY = Math.Sqrt (sumY2 / n - sumY * sumY / n / n);
    Double covariance = (sumXY / n - sumX * sumY / n / n);
    return covariance / stdX / stdY;
}
----------------------------------------

 public static Double Correlation (Double [] Xs, Double [] Ys) {
    Double sumxa = 0;
    Double sumxx = 0;
    Double sumya = 0;
    Double sumyy = 0;
    Double sumxy = 0;
    int n = Xs.Length < Ys.Length ? Xs.Length : Ys.Length;
    for (int i = 0; i < n; ++ i) {
        Double x = Xs [i];
        Double y = Ys [i];
        sumxa += x;
        sumxx += Math.Pow(x, 2);
        sumya += y;
        sumyy += Math.Pow(y, 2);
        sumxy += x * y;
    }
    Double stdX = Math.Sqrt (sumxx / n - Math.Pow(sumxa, 2) / Math.Pow(n, 2));
    Double stdY = Math.Sqrt (sumyy / n - Math.Pow(sumya, 2) / Math.Pow(n, 2));
    Double covariance = (sumxy / n - (sumxa / n) * (sumya / n));
    return covariance / stdX / stdY;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
989
5
Gpt3D_Clone989_5.cs 1 21
Gpt3D_Clone989_5.cs 22 45
----------------------------------------

public static Double Correlation (Double [] Xs, Double [] Ys) {
    Double sumX = 0;
    Double sumX2 = 0;
    Double sumY = 0;
    Double sumY2 = 0;
    Double sumXY = 0;
    int n = Xs.Length < Ys.Length ? Xs.Length : Ys.Length;
    for (int i = 0; i < n; ++ i) {
        Double x = Xs [i];
        Double y = Ys [i];
        sumX += x;
        sumX2 += x * x;
        sumY += y;
        sumY2 += y * y;
        sumXY += x * y;
    }
    Double stdX = Math.Sqrt (sumX2 / n - sumX * sumX / n / n);
    Double stdY = Math.Sqrt (sumY2 / n - sumY * sumY / n / n);
    Double covariance = (sumXY / n - sumX * sumY / n / n);
    return covariance / stdX / stdY;
}
----------------------------------------

 public static Double Correlation (Double [] Xs, Double [] Ys)
{
    int n = Math.Min(Xs.Length, Ys.Length);
    Double sumX = 0;
    Double sumX2 = 0;
    Double sumY = 0;
    Double sumY2 = 0;
    Double sumXY = 0;
    for (int i = 0; i < n; ++ i)
    {
        Double x = Xs[i];
        Double y = Ys[i];
        sumX += x;
        sumX2 += Math.Pow(x, 2);
        sumY += y;
        sumY2 += Math.Pow(y, 2);
        sumXY += (x * y);
    }
    Double dividend = (n * sumXY) - (sumX * sumY);
    Double divisor = Math.Sqrt(n * sumX2 - Math.Pow(sumX, 2)) * Math.Sqrt(n * sumY2 - Math.Pow(sumY, 2));
    return dividend / divisor;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
989
6
Gpt3D_Clone989_6.cs 1 21
Gpt3D_Clone989_6.cs 22 45
----------------------------------------

public static Double Correlation (Double [] Xs, Double [] Ys) {
    Double sumX = 0;
    Double sumX2 = 0;
    Double sumY = 0;
    Double sumY2 = 0;
    Double sumXY = 0;
    int n = Xs.Length < Ys.Length ? Xs.Length : Ys.Length;
    for (int i = 0; i < n; ++ i) {
        Double x = Xs [i];
        Double y = Ys [i];
        sumX += x;
        sumX2 += x * x;
        sumY += y;
        sumY2 += y * y;
        sumXY += x * y;
    }
    Double stdX = Math.Sqrt (sumX2 / n - sumX * sumX / n / n);
    Double stdY = Math.Sqrt (sumY2 / n - sumY * sumY / n / n);
    Double covariance = (sumXY / n - sumX * sumY / n / n);
    return covariance / stdX / stdY;
}
----------------------------------------

 public static Double Correlation (Double [] Xs, Double [] Ys)
{
    int sampleSize = Math.Min(Xs.Length, Ys.Length);
    Double sumSquaredX = 0;
    Double sumSquaredY = 0;
    Double sumX = 0;
    Double sumY = 0;
    Double xySum = 0;
    for (int i = 0; i < sampleSize; ++ i)
    {
        Double x = Xs[i];
        Double y = Ys[i];
        sumSquaredX += Math.Pow(x, 2);
        sumSquaredY += Math.Pow(y, 2);
        sumX += x;
        sumY += y;
        xySum += x * y;
    }
    Double denominator = Math.Sqrt((sampleSize * sumSquaredX - Math.Pow(sumX, 2)) * (sampleSize * sumSquaredY - Math.Pow(sumY, 2)));
    Double numerator = (sampleSize * xySum) - (sumX * sumY);
    return numerator / denominator;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
98
1
Gpt3D_Clone98_1.cs 1 16
Gpt3D_Clone98_1.cs 17 38
----------------------------------------

private static void DownloadRemoteImageFile (string uri, string fileName) {
    HttpWebRequest request = (HttpWebRequest) WebRequest.Create (uri);
    HttpWebResponse response = (HttpWebResponse) request.GetResponse ();
    if ((response.StatusCode == HttpStatusCode.OK || response.StatusCode == HttpStatusCode.Moved || response.StatusCode == HttpStatusCode.Redirect) && response.ContentType.StartsWith ("image", StringComparison.OrdinalIgnoreCase)) {
        using (Stream inputStream = response.GetResponseStream ())
        using (Stream outputStream = File.OpenWrite (fileName))
        {
            byte [] buffer = new byte [4096];
            int bytesRead;
            do
                {
                    bytesRead = inputStream.Read (buffer, 0, buffer.Length);
                    outputStream.Write (buffer, 0, bytesRead);
                } while (bytesRead != 0);
        }}
}
----------------------------------------

 private static void DownloadRemoteImageFile(string uri, string fileName) {
    var httprequest = (HttpWebRequest) WebRequest.Create(uri);
    var response = (HttpWebResponse) httprequest.GetResponse();
    
    if(response.StatusCode == HttpStatusCode.OK || response.StatusCode == HttpStatusCode.Moved || 
       response.StatusCode == HttpStatusCode.Redirect && response.ContentType.StartsWith("image", StringComparison.OrdinalIgnoreCase)) {
            
            using(Stream responseStream = response.GetResponseStream())
            using(FileStream fs = File.Create(fileName)) {
                
                int buffer = 4096;
                byte[] bytes = new byte[buffer];
                int numbytes;
                while((numbytes = responseStream.Read(bytes, 0, buffer)) != 0) {
                    
                    fs.Write(bytes, 0, numbytes);
                }
            }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
98
2
Gpt3D_Clone98_2.cs 1 16
Gpt3D_Clone98_2.cs 17 39
----------------------------------------

private static void DownloadRemoteImageFile (string uri, string fileName) {
    HttpWebRequest request = (HttpWebRequest) WebRequest.Create (uri);
    HttpWebResponse response = (HttpWebResponse) request.GetResponse ();
    if ((response.StatusCode == HttpStatusCode.OK || response.StatusCode == HttpStatusCode.Moved || response.StatusCode == HttpStatusCode.Redirect) && response.ContentType.StartsWith ("image", StringComparison.OrdinalIgnoreCase)) {
        using (Stream inputStream = response.GetResponseStream ())
        using (Stream outputStream = File.OpenWrite (fileName))
        {
            byte [] buffer = new byte [4096];
            int bytesRead;
            do
                {
                    bytesRead = inputStream.Read (buffer, 0, buffer.Length);
                    outputStream.Write (buffer, 0, bytesRead);
                } while (bytesRead != 0);
        }}
}
----------------------------------------

 private static void DownloadRemoteImageFile(string uri, string  fileName)
{
    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(uri);
    HttpWebResponse response = (HttpWebResponse)request.GetResponse();
    if(response.StatusCode == HttpStatusCode.OK || response.StatusCode == HttpStatusCode.Moved || response.StatusCode == HttpStatusCode.Redirect && response.ContentType.StartsWith("image", StringComparison.OrdinalIgnoreCase))
    {
        using (Stream responseStream = response.GetResponseStream())
        using (FileStream fs = File.Create(fileName))
        {
            int buffer = 1024 * 4096;
            byte[] bytes = new byte[buffer];
            int numbytes;
            
            while((numbytes = responseStream.Read(bytes, 0, buffer)) != 0)
            {
                fs.Write(bytes, 0, numbytes);
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
992
3
Gpt3D_Clone992_3.cs 1 12
Gpt3D_Clone992_3.cs 13 34
----------------------------------------

private string DoSomething () {
    int max = 10;
    for (int i = 1; i <= max; i ++) {
        Thread.Sleep (_Random.Next (10, 1000));
        if (_BackgroundWorker.CancellationPending) {
            return "Job aborted!";
        }
        AddMessage (String.Format ("Currently working on item {0} of {1}", i, max));
        _BackgroundWorker.ReportProgress ((i * 100) / max);
    }
    return "Job is done.";
}
----------------------------------------

 private string DoSomething () {
    int max = 10;
    try 
    {
        for (int i = 1; i <= max; i++) {
            WaitHandle.WaitAny (new WaitHandle[] {cancellationEvent, signalEvent}, _Random.Next (10, 1000));
            if (cancellationEvent.WaitOne (0)) {
                return "Job aborted!";
            }
            AddMessage (String.Format ("Currently working on item {0} of {1}", i, max));
            _BackgroundWorker.ReportProgress ((i * 100) / max);
        }
    }
    finally
    {
        cancellationEvent.Close();
        signalEvent.Close();
    }
    return "Job is done.";
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
992
4
Gpt3D_Clone992_4.cs 1 12
Gpt3D_Clone992_4.cs 13 28
----------------------------------------

private string DoSomething () {
    int max = 10;
    for (int i = 1; i <= max; i ++) {
        Thread.Sleep (_Random.Next (10, 1000));
        if (_BackgroundWorker.CancellationPending) {
            return "Job aborted!";
        }
        AddMessage (String.Format ("Currently working on item {0} of {1}", i, max));
        _BackgroundWorker.ReportProgress ((i * 100) / max);
    }
    return "Job is done.";
}
----------------------------------------

 private string DoSomething () {
    int max = 10;
    TPLTask.Run(() => {
        for (int i = 1; i <= max; i++) {
            await Task.Delay (_Random.Next (10, 1000));
            if (_BackgroundWorker.CancellationPending) {
                return "Job aborted!";
            }
            AddMessage (String.Format ("Currently working on item {0} of {1}", i, max));
            _BackgroundWorker.ReportProgress ((i * 100) / max);
        }
    });
    return "Job is done.";
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
994
1
Gpt3D_Clone994_1.cs 1 31
Gpt3D_Clone994_1.cs 32 69
----------------------------------------

private void ScaleControls (Control c, ref Graphics g, double s) {
    List < Control > hold = null;
    foreach (Control ctrl in c.Controls) {
        if (ctrl is GroupBox || ctrl is Panel) {
            hold = new List < Control > ();
            foreach (Control gctrl in ctrl.Controls) {
                hold.Add (gctrl);
            }
            ctrl.Controls.Clear ();
        }
        Point oldLoc = ctrl.Location;
        Size oldSize = ctrl.Size;
        Font oldFont = ctrl.Font;
        ctrl.Location = new Point (ctrl.Location.X * s, ctrl.Location.Y * s);
        ctrl.Size = new Size (ctrl.Size.Width * s, ctrl.Height * s);
        ctrl.Font = new Font (ctrl.Font.FontFamily, ctrl.Font.Size * 5, ctrl.Font.Style, ctrl.Font.Unit);
        using (Bitmap bmp = new Bitmap (ctrl.Size.Width, ctrl.Size.Height))
        {
            ctrl.DrawToBitmap (bmp, ctrl.ClientRectangle);
            g.DrawImage (bmp, ctrl.Location);
        } ctrl.Location = oldLoc;
        ctrl.Size = oldSize;
        ctrl.Font = oldFont;
        if (ctrl is GroupBox || ctrl is Panel) {
            foreach (Control gctrl in hold) {
                ctrl.Controls.Add (gctrl);
            }
            ScaleControls (ctrl, g, s);
        }
    }
}
----------------------------------------

 private void ScaleControls (Control c, ref Graphics g, double s) {
                foreach (Control ctrl in c.Controls) {
                    Point oldLoc = ctrl.Location;
                    Size oldSize = ctrl.Size;
                    Font oldFont = ctrl.Font;
                    ctrl.Location = new Point (ctrl.Location.X*s, ctrl.Location.Y*s);
                    ctrl.Size = new Size (ctrl.Size.Width*s, ctrl.Height*s);
                    ctrl.Font = new Font (ctrl.Font.FontFamily, ctrl.Font.Size*5, ctrl.Font.Style, ctrl.Font.Unit);
                    if (ctrl is GroupBox || ctrl is Panel) {
                        foreach (Control gctrl in ctrl.Controls) {
                            g.DrawImage (gctrl.Image, ctrl.Location);
                        }
                        foreach (Control gctrl in ctrl.Controls)
                        {
                            gctrl.Location = new Point (gctrl.Location.X*s, gctrl.Location.Y*s);
                            gctrl.Size = new Size (gctrl.Size.Width*s, gctrl.Height*s);
                            gctrl.Font = new Font (gctrl.Font.FontFamily, gctrl.Font.Size*s, gctrl.Font.Style, gctrl.Font.Unit);
                            using (Bitmap bmp = new Bitmap (gctrl.Size.Width, gctrl.Size.Height))
                            {
                                gctrl.DrawToBitmap (bmp, gctrl.ClientRectangle);
                                g.DrawImage (bmp, gctrl.Location);
                            }
                        }
                        ScaleControls (ctrl, g, s);
                    } else {
                        using (Bitmap bmp = new Bitmap (ctrl.Size.Width, ctrl.Size.Height))
                        {
                            ctrl.DrawToBitmap (bmp, ctrl.ClientRectangle);
                            g.DrawImage (bmp, ctrl.Location);
                        }
                    }
                    ctrl.Location = oldLoc;
                    ctrl.Size = oldSize;
                    ctrl.Font = oldFont;
                }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
994
2
Gpt3D_Clone994_2.cs 1 31
Gpt3D_Clone994_2.cs 32 69
----------------------------------------

private void ScaleControls (Control c, ref Graphics g, double s) {
    List < Control > hold = null;
    foreach (Control ctrl in c.Controls) {
        if (ctrl is GroupBox || ctrl is Panel) {
            hold = new List < Control > ();
            foreach (Control gctrl in ctrl.Controls) {
                hold.Add (gctrl);
            }
            ctrl.Controls.Clear ();
        }
        Point oldLoc = ctrl.Location;
        Size oldSize = ctrl.Size;
        Font oldFont = ctrl.Font;
        ctrl.Location = new Point (ctrl.Location.X * s, ctrl.Location.Y * s);
        ctrl.Size = new Size (ctrl.Size.Width * s, ctrl.Height * s);
        ctrl.Font = new Font (ctrl.Font.FontFamily, ctrl.Font.Size * 5, ctrl.Font.Style, ctrl.Font.Unit);
        using (Bitmap bmp = new Bitmap (ctrl.Size.Width, ctrl.Size.Height))
        {
            ctrl.DrawToBitmap (bmp, ctrl.ClientRectangle);
            g.DrawImage (bmp, ctrl.Location);
        } ctrl.Location = oldLoc;
        ctrl.Size = oldSize;
        ctrl.Font = oldFont;
        if (ctrl is GroupBox || ctrl is Panel) {
            foreach (Control gctrl in hold) {
                ctrl.Controls.Add (gctrl);
            }
            ScaleControls (ctrl, g, s);
        }
    }
}
----------------------------------------

 private void ScaleControls (Control c, ref Graphics g, double s) {
                foreach (Control ctrl in c.Controls) {
                    Point oldLoc = ctrl.Location;
                    Size oldSize = ctrl.Size;
                    Font oldFont = ctrl.Font;
                    ctrl.Location = new Point (ctrl.Location.X*s, ctrl.Location.Y*s);
                    ctrl.Size = new Size (ctrl.Size.Width*s, ctrl.Height*s);
                    ctrl.Font = new Font (ctrl.Font.FontFamily, ctrl.Font.Size*5, ctrl.Font.Style, ctrl.Font.Unit);
                    if (ctrl is GroupBox || ctrl is Panel) {
                        foreach (Control gctrl in ctrl.Controls) {
                            g.DrawImage (gctrl.Image, ctrl.Location);
                        }
                        foreach (Control gctrl in ctrl.Controls)
                        {
                            gctrl.Location = new Point (gctrl.Location.X*s, gctrl.Location.Y*s);
                            gctrl.Size = new Size (gctrl.Size.Width*s, gctrl.Height*s);
                            gctrl.Font = new Font (gctrl.Font.FontFamily, gctrl.Font.Size*s, gctrl.Font.Style, gctrl.Font.Unit);
                            using (Bitmap bmp = new Bitmap (ctrl.Size.Width, ctrl.Size.Height))
                            {
                                gctrl.DrawToBitmap (bmp, ctrl.ClientRectangle);
                                g.DrawImage (bmp, ctrl.Location);
                            }
                        }
                        ScaleControls (ctrl, g, s);
                    } else {
                        using (Bitmap bmp = new Bitmap (ctrl.Size.Width, ctrl.Size.Height))
                        {
                            ctrl.DrawToBitmap (bmp, ctrl.ClientRectangle);
                            g.DrawImage (bmp, ctrl.Location);
                        }
                    }
                    ctrl.Location = oldLoc;
                    ctrl.Size = oldSize;
                    ctrl.Font = oldFont;
                }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
994
3
Gpt3D_Clone994_3.cs 1 31
Gpt3D_Clone994_3.cs 32 66
----------------------------------------

private void ScaleControls (Control c, ref Graphics g, double s) {
    List < Control > hold = null;
    foreach (Control ctrl in c.Controls) {
        if (ctrl is GroupBox || ctrl is Panel) {
            hold = new List < Control > ();
            foreach (Control gctrl in ctrl.Controls) {
                hold.Add (gctrl);
            }
            ctrl.Controls.Clear ();
        }
        Point oldLoc = ctrl.Location;
        Size oldSize = ctrl.Size;
        Font oldFont = ctrl.Font;
        ctrl.Location = new Point (ctrl.Location.X * s, ctrl.Location.Y * s);
        ctrl.Size = new Size (ctrl.Size.Width * s, ctrl.Height * s);
        ctrl.Font = new Font (ctrl.Font.FontFamily, ctrl.Font.Size * 5, ctrl.Font.Style, ctrl.Font.Unit);
        using (Bitmap bmp = new Bitmap (ctrl.Size.Width, ctrl.Size.Height))
        {
            ctrl.DrawToBitmap (bmp, ctrl.ClientRectangle);
            g.DrawImage (bmp, ctrl.Location);
        } ctrl.Location = oldLoc;
        ctrl.Size = oldSize;
        ctrl.Font = oldFont;
        if (ctrl is GroupBox || ctrl is Panel) {
            foreach (Control gctrl in hold) {
                ctrl.Controls.Add (gctrl);
            }
            ScaleControls (ctrl, g, s);
        }
    }
}
----------------------------------------

 private void ScaleControls (Control c, ref Graphics g, double s) {
                foreach (Control ctrl in c.Controls) {
                    Point oldLoc = ctrl.Location;
                    Size oldSize = ctrl.Size;
                    Font oldFont = ctrl.Font;
                    ctrl.Location = new Point (ctrl.Location.X*s, ctrl.Location.Y*s);
                    ctrl.Size = new Size (ctrl.Size.Width*s, ctrl.Height*s);
                    ctrl.Font = new Font (ctrl.Font.FontFamily, ctrl.Font.Size*5, ctrl.Font.Style, ctrl.Font.Unit);
                    if (ctrl is GroupBox || ctrl is Panel) {
                        for(int i=0;i< ctrl.Controls.Count;i++)
                        {
                            ctrl.Controls[i].Location = new Point (ctrl.Controls[i].Location.X*s, ctrl.Controls[i].Location.Y*s);
                            ctrl.Controls[i].Size = new Size (ctrl.Controls[i].Size.Width*s, ctrl.Controls[i].Height*s);
                            ctrl.Controls[i].Font = new Font (ctrl.Controls[i].Font.FontFamily, ctrl.Controls[i].Font.Size*s, ctrl.Controls[i].Font.Style, ctrl.Controls[i].Font.Unit);
                            using (Bitmap bmp = new Bitmap (ctrl.Size.Width, ctrl.Size.Height))
                            {
                                ctrl.DrawToBitmap (bmp, ctrl.ClientRectangle);
                                g.DrawImage (bmp, ctrl.Location);
                            }
                        }
                        ScaleControls (ctrl, g, s);
                    } else {
                        using (Bitmap bmp = new Bitmap (ctrl.Size.Width, ctrl.Size.Height))
                        {
                            ctrl.DrawToBitmap (bmp, ctrl.ClientRectangle);
                            g.DrawImage (bmp, ctrl.Location);
                        }
                    }
                    ctrl.Location = oldLoc;
                    ctrl.Size = oldSize;
                    ctrl.Font = oldFont;
                }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
994
4
Gpt3D_Clone994_4.cs 1 31
Gpt3D_Clone994_4.cs 32 65
----------------------------------------

private void ScaleControls (Control c, ref Graphics g, double s) {
    List < Control > hold = null;
    foreach (Control ctrl in c.Controls) {
        if (ctrl is GroupBox || ctrl is Panel) {
            hold = new List < Control > ();
            foreach (Control gctrl in ctrl.Controls) {
                hold.Add (gctrl);
            }
            ctrl.Controls.Clear ();
        }
        Point oldLoc = ctrl.Location;
        Size oldSize = ctrl.Size;
        Font oldFont = ctrl.Font;
        ctrl.Location = new Point (ctrl.Location.X * s, ctrl.Location.Y * s);
        ctrl.Size = new Size (ctrl.Size.Width * s, ctrl.Height * s);
        ctrl.Font = new Font (ctrl.Font.FontFamily, ctrl.Font.Size * 5, ctrl.Font.Style, ctrl.Font.Unit);
        using (Bitmap bmp = new Bitmap (ctrl.Size.Width, ctrl.Size.Height))
        {
            ctrl.DrawToBitmap (bmp, ctrl.ClientRectangle);
            g.DrawImage (bmp, ctrl.Location);
        } ctrl.Location = oldLoc;
        ctrl.Size = oldSize;
        ctrl.Font = oldFont;
        if (ctrl is GroupBox || ctrl is Panel) {
            foreach (Control gctrl in hold) {
                ctrl.Controls.Add (gctrl);
            }
            ScaleControls (ctrl, g, s);
        }
    }
}
----------------------------------------

 private void ScaleControls (Control c, ref Graphics g, double s) {
                foreach (Control ctrl in c.Controls) {
                    Point oldLoc = ctrl.Location;
                    Size oldSize = ctrl.Size;
                    Font oldFont = ctrl.Font;
                    ctrl.Location = new Point (ctrl.Location.X*s, ctrl.Location.Y*s);
                    ctrl.Size = new Size (ctrl.Size.Width*s, ctrl.Height*s);
                    ctrl.Font = new Font (ctrl.Font.FontFamily, ctrl.Font.Size*5, ctrl.Font.Style, ctrl.Font.Unit);
                    if (ctrl is GroupBox || ctrl is Panel) {
                        foreach (Control gctrl in ctrl.Controls) {
                            g.DrawImage (gctrl.Image, ctrl.Location);
                        }
                        foreach (Control gctrl in ctrl.Controls)
                        {
                            gctrl.Location = new Point (gctrl.Location.X*s, gctrl.Location.Y*s);
                            gctrl.Size = new Size (gctrl.Size.Width*s, gctrl.Height*s);
                            gctrl.Font = new Font (gctrl.Font.FontFamily, gctrl.Font.Size*s, gctrl.Font.Style, gctrl.Font.Unit);
                        }
                        ctrl.DrawToRenderTarget (g);
                        ScaleControls (ctrl, g, s);
                    } else {
                        using (Bitmap bmp = new Bitmap (ctrl.Size.Width, ctrl.Size.Height))
                        {
                            ctrl.DrawToBitmap (bmp, ctrl.ClientRectangle);
                            g.DrawImage (bmp, ctrl.Location);
                        }
                    }
                    ctrl.Location = oldLoc;
                    ctrl.Size = oldSize;
                    ctrl.Font = oldFont;
                }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
994
5
Gpt3D_Clone994_5.cs 1 31
Gpt3D_Clone994_5.cs 32 60
----------------------------------------

private void ScaleControls (Control c, ref Graphics g, double s) {
    List < Control > hold = null;
    foreach (Control ctrl in c.Controls) {
        if (ctrl is GroupBox || ctrl is Panel) {
            hold = new List < Control > ();
            foreach (Control gctrl in ctrl.Controls) {
                hold.Add (gctrl);
            }
            ctrl.Controls.Clear ();
        }
        Point oldLoc = ctrl.Location;
        Size oldSize = ctrl.Size;
        Font oldFont = ctrl.Font;
        ctrl.Location = new Point (ctrl.Location.X * s, ctrl.Location.Y * s);
        ctrl.Size = new Size (ctrl.Size.Width * s, ctrl.Height * s);
        ctrl.Font = new Font (ctrl.Font.FontFamily, ctrl.Font.Size * 5, ctrl.Font.Style, ctrl.Font.Unit);
        using (Bitmap bmp = new Bitmap (ctrl.Size.Width, ctrl.Size.Height))
        {
            ctrl.DrawToBitmap (bmp, ctrl.ClientRectangle);
            g.DrawImage (bmp, ctrl.Location);
        } ctrl.Location = oldLoc;
        ctrl.Size = oldSize;
        ctrl.Font = oldFont;
        if (ctrl is GroupBox || ctrl is Panel) {
            foreach (Control gctrl in hold) {
                ctrl.Controls.Add (gctrl);
            }
            ScaleControls (ctrl, g, s);
        }
    }
}
----------------------------------------

 private void ScaleControls (Control c, ref Graphics g, double s) {
                foreach (Control ctrl in c.Controls) {
                    Point oldLoc = ctrl.Location;
                    Size oldSize = ctrl.Size;
                    Font oldFont = ctrl.Font;
                    ctrl.Location = new Point (ctrl.Location.X*s, ctrl.Location.Y*s);
                    ctrl.Size = new Size (ctrl.Size.Width*s, ctrl.Height*s);
                    ctrl.Font = new Font (ctrl.Font.FontFamily, ctrl.Font.Size*5, ctrl.Font.Style, ctrl.Font.Unit);
                    if (ctrl is GroupBox || ctrl is Panel) {
                        foreach (Control gctrl in ctrl.Controls) {
                            Bitmap bmp = new Bitmap (gctrl.ClientSize.Width, gctrl.ClientSize.Height);
                            gctrl.DrawToBitmap (bmp, gctrl.ClientRectangle);
                            g.DrawImage (bmp, ctrl.Location);
                        }
                        ScaleControls (ctrl, g, s);
                    } else {
                        using (Bitmap bmp = new Bitmap (ctrl.Size.Width, ctrl.Size.Height))
                        {
                            ctrl.DrawToBitmap (bmp, ctrl.ClientRectangle);
                            g.DrawImage (bmp, ctrl.Location);
                        }
                    }
                    ctrl.Location = oldLoc;
                    ctrl.Size = oldSize;
                    ctrl.Font = oldFont;
                }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
994
6
Gpt3D_Clone994_6.cs 1 31
Gpt3D_Clone994_6.cs 32 58
----------------------------------------

private void ScaleControls (Control c, ref Graphics g, double s) {
    List < Control > hold = null;
    foreach (Control ctrl in c.Controls) {
        if (ctrl is GroupBox || ctrl is Panel) {
            hold = new List < Control > ();
            foreach (Control gctrl in ctrl.Controls) {
                hold.Add (gctrl);
            }
            ctrl.Controls.Clear ();
        }
        Point oldLoc = ctrl.Location;
        Size oldSize = ctrl.Size;
        Font oldFont = ctrl.Font;
        ctrl.Location = new Point (ctrl.Location.X * s, ctrl.Location.Y * s);
        ctrl.Size = new Size (ctrl.Size.Width * s, ctrl.Height * s);
        ctrl.Font = new Font (ctrl.Font.FontFamily, ctrl.Font.Size * 5, ctrl.Font.Style, ctrl.Font.Unit);
        using (Bitmap bmp = new Bitmap (ctrl.Size.Width, ctrl.Size.Height))
        {
            ctrl.DrawToBitmap (bmp, ctrl.ClientRectangle);
            g.DrawImage (bmp, ctrl.Location);
        } ctrl.Location = oldLoc;
        ctrl.Size = oldSize;
        ctrl.Font = oldFont;
        if (ctrl is GroupBox || ctrl is Panel) {
            foreach (Control gctrl in hold) {
                ctrl.Controls.Add (gctrl);
            }
            ScaleControls (ctrl, g, s);
        }
    }
}
----------------------------------------

 private void ScaleControls (Control c, ref Graphics g, double s) {
                foreach (Control ctrl in c.Controls) {
                    Point oldLoc = ctrl.Location;
                    Size oldSize = ctrl.Size;
                    Font oldFont = ctrl.Font;
                    ctrl.Location = new Point (ctrl.Location.X*s, ctrl.Location.Y*s);
                    ctrl.Size = new Size (ctrl.Size.Width*s, ctrl.Height*s);
                    ctrl.Font = new Font (ctrl.Font.FontFamily, ctrl.Font.Size*5, ctrl.Font.Style, ctrl.Font.Unit);
                    if (ctrl is GroupBox || ctrl is Panel) {
                        foreach (Control gctrl in ctrl.Controls) {
                            g.DrawImage (gctrl.Image, ctrl.Location);
                        }
                        ScaleControls (ctrl, g, s);
                    } else {
                        using (Bitmap bmp = new Bitmap (ctrl.Size.Width, ctrl.Size.Height))
                        {
                            ctrl.DrawToBitmap (bmp, ctrl.ClientRectangle);
                            g.DrawImage (bmp, ctrl.Location);
                        }
                    }
                    ctrl.Location = oldLoc;
                    ctrl.Size = oldSize;
                    ctrl.Font = oldFont;
                }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
997
1
Gpt3D_Clone997_1.cs 1 9
Gpt3D_Clone997_1.cs 10 24
----------------------------------------

protected void OnUpload_Click (object sender, EventArgs e) {
    var path = Server.MapPath ("~/pics");
    var directory = new DirectoryInfo (path);
    if (directory.Exists == false) {
        directory.Create ();
    }
    var file = Path.Combine (path, upload.FileName);
    upload.SaveAs (file);
}
----------------------------------------

 protected void OnUpload_Click(object sender, EventArgs e) 
{
    var path = Path.Combine(HttpContext.Current.Request.PhysicalApplicationPath, "pics");
    var directory = new DirectoryInfo(path);
    if (!Directory.Exists(path))
    {
        directory.Create();
    }
    fileName = Path.Combine(path, upload.FileName);
    upload.SaveAs(fileName);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
998
0
Gpt3D_Clone998_0.cs 1 15
Gpt3D_Clone998_0.cs 16 38
----------------------------------------

public static bool Is32bitProcess (Process proc) {
    if (! IsThis64bitProcess ())
        return true;
    foreach (ProcessModule module in proc.Modules) {
        try {
            string fname = Path.GetFileName (module.FileName).ToLowerInvariant ();
            if (fname.Contains ("wow64")) {
                return true;
            }
        }
        catch {
        }
    }
    return false;
}
----------------------------------------

 public static bool Is32bitProcess(Process proc) 
{ 
	if (!IsThis64bitProcess()) 
		return true; 
	int count = proc.Modules.Count; 
	int index = 0; 
	while (index < count) 
	{ 
		try 
		{ 
			string fname = 
Path.GetFileName(proc.Modules[index].FileName).ToLowerInvariant(); 
			if (fname.Contains("wow64")) 
				return true; 
		} 
		catch { } 
		index++; 
	} 
	return false; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
998
1
Gpt3D_Clone998_1.cs 1 15
Gpt3D_Clone998_1.cs 16 32
----------------------------------------

public static bool Is32bitProcess (Process proc) {
    if (! IsThis64bitProcess ())
        return true;
    foreach (ProcessModule module in proc.Modules) {
        try {
            string fname = Path.GetFileName (module.FileName).ToLowerInvariant ();
            if (fname.Contains ("wow64")) {
                return true;
            }
        }
        catch {
        }
    }
    return false;
}
----------------------------------------

 public static bool Is32bitProcess (Process proc) {
    if (!IsThis64bitProcess ()) return true;
    IEnumerator _moduleEnumerator = proc.Modules.GetEnumerator ();
    while (_moduleEnumerator.MoveNext ()) {
        try {
            string fileName = 
Path.GetFileName (((ProcessModule)_moduleEnumerator.Current).FileName).ToLowerInvariant ();
            if (fileName.Contains ("wow64")) return true;
        }
        catch {
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
998
2
Gpt3D_Clone998_2.cs 1 15
Gpt3D_Clone998_2.cs 16 43
----------------------------------------

public static bool Is32bitProcess (Process proc) {
    if (! IsThis64bitProcess ())
        return true;
    foreach (ProcessModule module in proc.Modules) {
        try {
            string fname = Path.GetFileName (module.FileName).ToLowerInvariant ();
            if (fname.Contains ("wow64")) {
                return true;
            }
        }
        catch {
        }
    }
    return false;
}
----------------------------------------

 public static bool Is32bitProcess(Process proc)
{
    if (!IsThis64bitProcess())
    {
        return true;
    }
    int count = proc.Modules.Count;
    for (int i = 0; i < count; i++)
    {
        try
        {
            string fname = 
Path.GetFileName(proc.Modules[i].FileName).ToLowerInvariant();
            if (fname.Contains("wow64"))
            {
                return true;
            }
        }
        catch { }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
998
3
Gpt3D_Clone998_3.cs 1 15
Gpt3D_Clone998_3.cs 16 37
----------------------------------------

public static bool Is32bitProcess (Process proc) {
    if (! IsThis64bitProcess ())
        return true;
    foreach (ProcessModule module in proc.Modules) {
        try {
            string fname = Path.GetFileName (module.FileName).ToLowerInvariant ();
            if (fname.Contains ("wow64")) {
                return true;
            }
        }
        catch {
        }
    }
    return false;
}
----------------------------------------

 public static bool Is32bitProcess (Process proc) 
{ 
    if (!IsThis64bitProcess()) 
        return true; 
    IEnumerable<ProcessModule> modules = proc.Modules.Cast<ProcessModule>(); 
    foreach (ProcessModule module in modules) 
    { 
        try 
        { 
            string fname = 
Path.GetFileName(module.FileName).ToLowerInvariant(); 
            if (fname.Contains("wow64")) 
                return true; 
        } 
        catch { } 
    } 
    return false; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
998
4
Gpt3D_Clone998_4.cs 1 15
Gpt3D_Clone998_4.cs 16 43
----------------------------------------

public static bool Is32bitProcess (Process proc) {
    if (! IsThis64bitProcess ())
        return true;
    foreach (ProcessModule module in proc.Modules) {
        try {
            string fname = Path.GetFileName (module.FileName).ToLowerInvariant ();
            if (fname.Contains ("wow64")) {
                return true;
            }
        }
        catch {
        }
    }
    return false;
}
----------------------------------------

 public static bool Is32bitProcess (Process proc) 
{ 
    if (!IsThis64bitProcess()) 
    { 
        return true; 
    } 
    System.Collections.IEnumerator processModuleEnumerator = 
proc.Modules.GetEnumerator(); 
    while (processModuleEnumerator.MoveNext()) 
    { 
        try 
        { 
            string fileName = 
Path.GetFileName(((ProcessModule)processModuleEnumerator.Current).FileName).ToLowerInvariant(); 
            if (fileName.Contains("wow64")) 
            { 
                return true; 
            } 
        } 
        catch { } 
    } 
    return false; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
998
5
Gpt3D_Clone998_5.cs 1 15
Gpt3D_Clone998_5.cs 16 39
----------------------------------------

public static bool Is32bitProcess (Process proc) {
    if (! IsThis64bitProcess ())
        return true;
    foreach (ProcessModule module in proc.Modules) {
        try {
            string fname = Path.GetFileName (module.FileName).ToLowerInvariant ();
            if (fname.Contains ("wow64")) {
                return true;
            }
        }
        catch {
        }
    }
    return false;
}
----------------------------------------

 public static bool Is32bitProcess (Process proc) {
    if (!IsThis64bitProcess())
        return true;
    IEnumerator<ProcessModule> enumerator =
proc.Modules.GetEnumerator();
    while (enumerator.MoveNext())
    {
        try
        {
            string fname = Path.GetFileName(
enumerator.Current.FileName).ToLowerInvariant();
            if (fname.Contains("wow64"))
            {
                return true;
            }
        }
        catch { }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
999
0
Gpt3D_Clone999_0.cs 1 16
Gpt3D_Clone999_0.cs 17 38
----------------------------------------

public static void Move < T > (this List < T > list, int oldIndex, int newIndex) {
    if ((oldIndex == newIndex) || (0 > oldIndex) || (oldIndex >= list.Count) || (0 > newIndex) || (newIndex >= list.Count))
        return;
    var i = 0;
    T tmp = list [oldIndex];
    if (oldIndex < newIndex) {
        for (i = oldIndex; i < newIndex; i ++) {
            list [i] = list [i + 1];
        }
    } else {
        for (i = oldIndex; i > newIndex; i --) {
            list [i] = list [i - 1];
        }
    }
    list [newIndex] = tmp;
}
----------------------------------------

 public static void Move<T>(this List<T> list, int oldIndex, int newIndex)
{
    if (oldIndex == newIndex || oldIndex < 0 || oldIndex >= list.Count || newIndex < 0 || newIndex >= list.Count)
        return;
 
    T tmp = list[oldIndex];
 
    if (oldIndex < newIndex)
    {
        for (int i = oldIndex; i < newIndex; i++)
            list[i] = list[i + 1];
    }
    else
    {
        for (int i = oldIndex; i > newIndex; i--)
            list[i] = list[i - 1];
    }
 
    list[newIndex] = tmp;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
999
1
Gpt3D_Clone999_1.cs 1 16
Gpt3D_Clone999_1.cs 17 43
----------------------------------------

public static void Move < T > (this List < T > list, int oldIndex, int newIndex) {
    if ((oldIndex == newIndex) || (0 > oldIndex) || (oldIndex >= list.Count) || (0 > newIndex) || (newIndex >= list.Count))
        return;
    var i = 0;
    T tmp = list [oldIndex];
    if (oldIndex < newIndex) {
        for (i = oldIndex; i < newIndex; i ++) {
            list [i] = list [i + 1];
        }
    } else {
        for (i = oldIndex; i > newIndex; i --) {
            list [i] = list [i - 1];
        }
    }
    list [newIndex] = tmp;
}
----------------------------------------

 public static void Move<T>(this List<T> list, int oldIndex, int newIndex)
{
    if (oldIndex != newIndex && 0 <= oldIndex && oldIndex < list.Count && 0 <= newIndex && newIndex < list.Count)
    {
        T temp = list[oldIndex];
        list.RemoveAt(oldIndex);
 
        if (oldIndex < newIndex)
        {
            for (int index = oldIndex; index < newIndex; ++index)
            {
                list[index] = list[index + 1];
            }
        }
        else
        {
            for (int index = oldIndex; index > newIndex; --index)
            {
                list[index] = list[index - 1];
            }
        }
 
        list[newIndex] = temp;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
999
2
Gpt3D_Clone999_2.cs 1 16
Gpt3D_Clone999_2.cs 17 36
----------------------------------------

public static void Move < T > (this List < T > list, int oldIndex, int newIndex) {
    if ((oldIndex == newIndex) || (0 > oldIndex) || (oldIndex >= list.Count) || (0 > newIndex) || (newIndex >= list.Count))
        return;
    var i = 0;
    T tmp = list [oldIndex];
    if (oldIndex < newIndex) {
        for (i = oldIndex; i < newIndex; i ++) {
            list [i] = list [i + 1];
        }
    } else {
        for (i = oldIndex; i > newIndex; i --) {
            list [i] = list [i - 1];
        }
    }
    list [newIndex] = tmp;
}
----------------------------------------

 public static void Move<T>(this List<T> list, int oldIndex, int newIndex) { 
    if (oldIndex == newIndex || oldIndex < 0 || oldIndex >= list.Count || newIndex < 0 || newIndex >= list.Count) { 
        return; 
    } 
     
    T tmp = list[oldIndex]; 
    if (oldIndex < newIndex) { 
        for (int i = oldIndex; i < newIndex; i++) { 
            list[i] = list[i + 1]; 
        } 
    } else { 
        for (int i = oldIndex; i > newIndex; i--) { 
            list[i] = list[i - 1]; 
        } 
    } 
 
    list[newIndex] = tmp; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
2
Gpt3D_Clone99_2.cs 1 9
Gpt3D_Clone99_2.cs 10 24
----------------------------------------

static void Main (string [] args) {
    List < string > names = new List < string > () {"Sam", "John", "Bob", "Adam", "Kelly", "Nolan", "Carl", "Tim", "Tom", "David"};
    for (int i = 0; i < names.Count; i ++) {
        if (i % 4 == 0 && i > 0)
            Console.WriteLine ();
        Console.Write (names [i] + "\t");
    }
    Console.ReadLine ();
}
----------------------------------------

 static void Main (string [] args) 
{
    List < string > names = new List < string > () {"Sam", "John", "Bob", "Adam", "Kelly", "Nolan", "Carl", "Tim", "Tom", "David"};
    int i = 0; 
    while (i < names.Count) 
    {
        if (i > 0 && i % 4 == 0)
            Console.WriteLine ();
        Console.Write (names[i] + "\t");
        i ++;
    }    
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
3
Gpt3D_Clone99_3.cs 1 9
Gpt3D_Clone99_3.cs 10 25
----------------------------------------

static void Main (string [] args) {
    List < string > names = new List < string > () {"Sam", "John", "Bob", "Adam", "Kelly", "Nolan", "Carl", "Tim", "Tom", "David"};
    for (int i = 0; i < names.Count; i ++) {
        if (i % 4 == 0 && i > 0)
            Console.WriteLine ();
        Console.Write (names [i] + "\t");
    }
    Console.ReadLine ();
}
----------------------------------------

 static void Main (string [] args) 
{
    List < string > names = new List < string > () {"Sam", "John", "Bob", "Adam", "Kelly", "Nolan", "Carl", "Tim", "Tom", "David"};
    int j = 0; 
    while (j < names.Count) 
    {
        if (j > 0 && j % 4 == 0)
            Console.WriteLine ();
        Console.Write (names[j] + "\t");
        j ++;
    }    
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
6
Gpt3D_Clone99_6.cs 1 9
Gpt3D_Clone99_6.cs 10 22
----------------------------------------

static void Main (string [] args) {
    List < string > names = new List < string > () {"Sam", "John", "Bob", "Adam", "Kelly", "Nolan", "Carl", "Tim", "Tom", "David"};
    for (int i = 0; i < names.Count; i ++) {
        if (i % 4 == 0 && i > 0)
            Console.WriteLine ();
        Console.Write (names [i] + "\t");
    }
    Console.ReadLine ();
}
----------------------------------------

 static void Main (string [] args) 
{
    List < string > names = new List < string > () {"Sam", "John", "Bob", "Adam", "Kelly", "Nolan", "Carl", "Tim", "Tom", "David"};
    for (int i = 0; i < names.Count; i ++) 
    {
        Console.Write (names [i] + "\t");
        if (i % 4 == 3)
            Console.WriteLine ();
    }
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
7
Gpt3D_Clone99_7.cs 1 9
Gpt3D_Clone99_7.cs 10 22
----------------------------------------

static void Main (string [] args) {
    List < string > names = new List < string > () {"Sam", "John", "Bob", "Adam", "Kelly", "Nolan", "Carl", "Tim", "Tom", "David"};
    for (int i = 0; i < names.Count; i ++) {
        if (i % 4 == 0 && i > 0)
            Console.WriteLine ();
        Console.Write (names [i] + "\t");
    }
    Console.ReadLine ();
}
----------------------------------------

 static void Main (string [] args) 
{
    List < string > names = new List < string > () {"Sam", "John", "Bob", "Adam", "Kelly", "Nolan", "Carl", "Tim", "Tom", "David"};
    for (int i = 0; i < names.Count; i ++) 
    {
        Console.Write (names [i] + "\t");
        if (i % 4 == 0)
            Console.WriteLine ();
    }
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
9
0
Gpt3D_Clone9_0.cs 1 9
Gpt3D_Clone9_0.cs 10 25
----------------------------------------

public Image RotateImage (Image img) {
    var bmp = new Bitmap (img);
    using (Graphics gfx = Graphics.FromImage (bmp))
    {
        gfx.Clear (Color.White);
        gfx.DrawImage (img, 0, 0, img.Width, img.Height);
    } bmp.RotateFlip (RotateFlipType.Rotate270FlipNone);
    return bmp;
}
----------------------------------------

 public Image RotateImage (Image img) {
    var bmp = new Bitmap (img);
	Matrix matrix = new Matrix();
	matrix.Translate((float)img.Width / 2, (float)img.Height / 2);
	matrix.Rotate(90);
	matrix.Translate(-(float)img.Width / 2, -(float)img.Height / 2);
    using (Graphics gfx = Graphics.FromImage (bmp))
    {
        gfx.Clear (Color.White);
		gfx.Transform = matrix;
		gfx.DrawImage(img, 0, 0, img.Width, img.Height);
    } 
    return bmp;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
9
2
Gpt3D_Clone9_2.cs 1 9
Gpt3D_Clone9_2.cs 10 24
----------------------------------------

public Image RotateImage (Image img) {
    var bmp = new Bitmap (img);
    using (Graphics gfx = Graphics.FromImage (bmp))
    {
        gfx.Clear (Color.White);
        gfx.DrawImage (img, 0, 0, img.Width, img.Height);
    } bmp.RotateFlip (RotateFlipType.Rotate270FlipNone);
    return bmp;
}
----------------------------------------

 public Image RotateImage (Image img) {
    var bmp = new Bitmap (img);
	PointF offset = new PointF((float)bmp.Width / 2, (float)bmp.Height / 2);
	Matrix matrix = new Matrix();
	matrix.RotateAt(90, offset);
    using (Graphics gfx = Graphics.FromImage (bmp))
    {
        gfx.Clear (Color.White);
		gfx.Transform = matrix;
		gfx.DrawImage(img, new PointF(-(float)img.Width/2, -(float)img.Height/2));
    } 
    return bmp;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
9
3
Gpt3D_Clone9_3.cs 1 9
Gpt3D_Clone9_3.cs 10 23
----------------------------------------

public Image RotateImage (Image img) {
    var bmp = new Bitmap (img);
    using (Graphics gfx = Graphics.FromImage (bmp))
    {
        gfx.Clear (Color.White);
        gfx.DrawImage (img, 0, 0, img.Width, img.Height);
    } bmp.RotateFlip (RotateFlipType.Rotate270FlipNone);
    return bmp;
}
----------------------------------------

 public Image RotateImage (Image img) {
    var bmp = new Bitmap (img);
	Matrix matrix = new Matrix();
	matrix.RotateAt(180, new PointF((float)img.Width/2, (float)img.Height/2));
    using (Graphics gfx = Graphics.FromImage (bmp))
    {
        gfx.Clear (Color.White);
		gfx.Transform = matrix;
		gfx.DrawImage(img, 0, 0, img.Width, img.Height);
    } 
    return bmp;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
9
4
Gpt3D_Clone9_4.cs 1 9
Gpt3D_Clone9_4.cs 10 23
----------------------------------------

public Image RotateImage (Image img) {
    var bmp = new Bitmap (img);
    using (Graphics gfx = Graphics.FromImage (bmp))
    {
        gfx.Clear (Color.White);
        gfx.DrawImage (img, 0, 0, img.Width, img.Height);
    } bmp.RotateFlip (RotateFlipType.Rotate270FlipNone);
    return bmp;
}
----------------------------------------

 public Image RotateImage (Image img) {
    var bmp = new Bitmap (img);
	Matrix matrix = new Matrix();
	matrix.RotateAt(90, new PointF((float)img.Width/2, (float)img.Height/2));
    using (Graphics gfx = Graphics.FromImage (bmp))
    {
        gfx.Clear (Color.White);
		gfx.Transform = matrix;
		gfx.DrawImage(img, 0, 0, img.Width, img.Height);
    } 
    return bmp;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
9
5
Gpt3D_Clone9_5.cs 1 9
Gpt3D_Clone9_5.cs 10 22
----------------------------------------

public Image RotateImage (Image img) {
    var bmp = new Bitmap (img);
    using (Graphics gfx = Graphics.FromImage (bmp))
    {
        gfx.Clear (Color.White);
        gfx.DrawImage (img, 0, 0, img.Width, img.Height);
    } bmp.RotateFlip (RotateFlipType.Rotate270FlipNone);
    return bmp;
}
----------------------------------------

 public Image RotateImage (Image img) {
    var bmp = new Bitmap (img);
	ImageAttributes imgAtt = new ImageAttributes();
	imgAtt.SetRotate180FlipX();
    using (Graphics gfx = Graphics.FromImage (bmp))
    {
        gfx.Clear (Color.White);
		gfx.DrawImage(img, new Rectangle(0, 0, img.Width, img.Height), 0, 0, img.Width, img.Height, GraphicsUnit.Pixel, imgAtt);
    } 
    return bmp;
}
----------------------------------------

