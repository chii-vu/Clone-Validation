$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
298
3
Gpt3D_Clone298_3.java 1 10
Gpt3D_Clone298_3.java 11 29
----------------------------------------

private static int solution (int N) {
    int gap = 0;
    String binaryStr = Integer.toBinaryString (N);
    String [] zeroArrays = binaryStr.split ("1");
    System.out.println (Arrays.toString (zeroArrays));
    for (String zeroArray : zeroArrays) {
        gap = zeroArray.length () > gap ? zeroArray.length () : gap;
    }
    return gap;
}
----------------------------------------

 private static int solution (int N) {
    int maxGap = 0;
    String binaryStr = Integer.toBinaryString (N); 
    int lenOfStr = binaryStr.length ();
    int currGap = 0;
    for (int i = 0; i < lenOfStr; i++) {
        char currChar = binaryStr.charAt (i);
        if (currChar == '0') {
            currGap++;
        }
        else {
            maxGap = Math.max (currGap, maxGap);
            currGap = 0; 
        }
    }
    return maxGap;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
298
4
Gpt3D_Clone298_4.java 1 10
Gpt3D_Clone298_4.java 11 29
----------------------------------------

private static int solution (int N) {
    int gap = 0;
    String binaryStr = Integer.toBinaryString (N);
    String [] zeroArrays = binaryStr.split ("1");
    System.out.println (Arrays.toString (zeroArrays));
    for (String zeroArray : zeroArrays) {
        gap = zeroArray.length () > gap ? zeroArray.length () : gap;
    }
    return gap;
}
----------------------------------------

 private static int solution (int N) {
    int maxGap = 0;
    char [] binaryChars = Integer.toBinaryString (N).toCharArray(); 
    int lenOfStr = binaryChars.length;
    int currGap = 0;
    for (int i = 0; i < lenOfStr; i++) {
        char currChar = binaryChars[i];
        if (currChar == '0') {
            currGap++;
        }
        else {
            maxGap = Math.max (currGap, maxGap);
            currGap = 0; 
        }
    }
    return maxGap;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
298
5
Gpt3D_Clone298_5.java 1 10
Gpt3D_Clone298_5.java 11 27
----------------------------------------

private static int solution (int N) {
    int gap = 0;
    String binaryStr = Integer.toBinaryString (N);
    String [] zeroArrays = binaryStr.split ("1");
    System.out.println (Arrays.toString (zeroArrays));
    for (String zeroArray : zeroArrays) {
        gap = zeroArray.length () > gap ? zeroArray.length () : gap;
    }
    return gap;
}
----------------------------------------

 private static int solution (int N) {
    int maxGap = 0;
    String binaryStr = Integer.toBinaryString (N);
    int prevIndex = -1;
    int nextIndex = binaryStr.indexOf ('1'); 
    while (nextIndex != -1) {
        int zerosLen = nextIndex - prevIndex - 1;
        if (zerosLen > 0) {
            maxGap = Math.max (zerosLen, maxGap);
        }
        prevIndex = nextIndex;
        nextIndex = binaryStr.indexOf ('1', nextIndex + 1);
    }
    return maxGap;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
298
6
Gpt3D_Clone298_6.java 1 10
Gpt3D_Clone298_6.java 11 28
----------------------------------------

private static int solution (int N) {
    int gap = 0;
    String binaryStr = Integer.toBinaryString (N);
    String [] zeroArrays = binaryStr.split ("1");
    System.out.println (Arrays.toString (zeroArrays));
    for (String zeroArray : zeroArrays) {
        gap = zeroArray.length () > gap ? zeroArray.length () : gap;
    }
    return gap;
}
----------------------------------------

 private static int solution (int N) {
    int maxGap = 0;
    int currGap = 0;
    while (N > 0) { 
        int remainder = N % 2;
        if (remainder == 0) {
            currGap++; 
        }
        else {
            maxGap = Math.max (currGap, maxGap);
            currGap = 0; 
        }
        N = N / 2;
    }
    return maxGap;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
298
7
Gpt3D_Clone298_7.java 1 10
Gpt3D_Clone298_7.java 11 27
----------------------------------------

private static int solution (int N) {
    int gap = 0;
    String binaryStr = Integer.toBinaryString (N);
    String [] zeroArrays = binaryStr.split ("1");
    System.out.println (Arrays.toString (zeroArrays));
    for (String zeroArray : zeroArrays) {
        gap = zeroArray.length () > gap ? zeroArray.length () : gap;
    }
    return gap;
}
----------------------------------------

 private static int solution (int N) {
    int maxGap = 0;
    String binaryStr = Integer.toBinaryString (N);
    int lenOfStr = binaryStr.length ();
    int startIndex = 0;
    while (startIndex < lenOfStr) {
        int endIndex = binaryStr.indexOf ('1', startIndex);
        int zerosLen = endIndex - startIndex;
        if (zerosLen > 0) {
            maxGap = Math.max (zerosLen, maxGap); 
        }
        startIndex = endIndex + 1; 
    }
    return maxGap;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
298
8
Gpt3D_Clone298_8.java 1 10
Gpt3D_Clone298_8.java 11 27
----------------------------------------

private static int solution (int N) {
    int gap = 0;
    String binaryStr = Integer.toBinaryString (N);
    String [] zeroArrays = binaryStr.split ("1");
    System.out.println (Arrays.toString (zeroArrays));
    for (String zeroArray : zeroArrays) {
        gap = zeroArray.length () > gap ? zeroArray.length () : gap;
    }
    return gap;
}
----------------------------------------

 private static int solution (int N) {
    int maxGap = 0;
    String binaryStr = Integer.toBinaryString (N);
    int lenOfStr = binaryStr.length ();
    for (int i = 0; i < lenOfStr; i++) {
        char currChar = binaryStr.charAt (i);
        if (currChar == '0') {
            int zerosLen = binaryStr.indexOf ('1', i) - i;
            if (zerosLen > 0) {
                maxGap = Math.max (zerosLen, maxGap);
            }
        }
    }
    return maxGap;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
298
9
Gpt3D_Clone298_9.java 1 10
Gpt3D_Clone298_9.java 11 25
----------------------------------------

private static int solution (int N) {
    int gap = 0;
    String binaryStr = Integer.toBinaryString (N);
    String [] zeroArrays = binaryStr.split ("1");
    System.out.println (Arrays.toString (zeroArrays));
    for (String zeroArray : zeroArrays) {
        gap = zeroArray.length () > gap ? zeroArray.length () : gap;
    }
    return gap;
}
----------------------------------------

 private static int solution (int N) {
    int maxGap = 0;
    String binaryStr = Integer.toBinaryString (N);
    int oneIndex = binaryStr.indexOf ('1');
    while (oneIndex != -1) {
        int zerosLen = oneIndex - 1;
        if (zerosLen > 0) {
            maxGap = Math.max (zerosLen, maxGap);
        }
        oneIndex = binaryStr.indexOf ('1', oneIndex + 1);
    }
    return maxGap;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
29
0
Gpt3D_Clone29_0.java 1 12
Gpt3D_Clone29_0.java 13 38
----------------------------------------

char wf () {
    Scanner input = new Scanner (System.in);
    System.out.println ("What is your choice? (x/o)");
    if (input.findInLine (".") != null) {
        choice = input.findInLine (".").charAt (0);
        while (choice != 'x' && choice != 'o') {
            System.out.println ("You must enter x or o!");
            choice = input.findInLine (".").charAt (0);
        }
    }
    return choice;
}
----------------------------------------

 char wf () {
    Scanner scan = new Scanner (System.in);
    System.out.println ("What is your choice? (x/o)");
    char choice = scan.next().charAt(0);
    
    switch(choice) {
        case 'x': {
            return choice;
            break;
        }
        case 'o': {
            return choice;
            break;
        }
        default: {
            while (choice != 'x' && choice != 'o') {
                System.out.println ("You must enter x or o!");
                choice = scan.next().charAt(0);
            }
            return choice;
            break;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
29
1
Gpt3D_Clone29_1.java 1 12
Gpt3D_Clone29_1.java 13 31
----------------------------------------

char wf () {
    Scanner input = new Scanner (System.in);
    System.out.println ("What is your choice? (x/o)");
    if (input.findInLine (".") != null) {
        choice = input.findInLine (".").charAt (0);
        while (choice != 'x' && choice != 'o') {
            System.out.println ("You must enter x or o!");
            choice = input.findInLine (".").charAt (0);
        }
    }
    return choice;
}
----------------------------------------

 char wf () {
    String input;
    System.out.println ("What is your choice? (x/o)");
    input = System.console().readLine();
    if(input.length() > 0) {
        char choice = Character.toLowerCase(input.charAt(0));
        while (choice != 'x' && choice != 'o') {
            System.out.println ("You must enter x or o!");
            input = System.console().readLine();
            if(input.length() > 0) {
                choice = Character.toLowerCase(input.charAt(0));
            }
        }
        return choice;
    }
    return ' ';
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
29
2
Gpt3D_Clone29_2.java 1 12
Gpt3D_Clone29_2.java 13 30
----------------------------------------

char wf () {
    Scanner input = new Scanner (System.in);
    System.out.println ("What is your choice? (x/o)");
    if (input.findInLine (".") != null) {
        choice = input.findInLine (".").charAt (0);
        while (choice != 'x' && choice != 'o') {
            System.out.println ("You must enter x or o!");
            choice = input.findInLine (".").charAt (0);
        }
    }
    return choice;
}
----------------------------------------

  char wf () {
    InputStreamReader reader = new InputStreamReader(System.in);
    BufferedReader bufferedReader = new BufferedReader(reader);
    System.out.println ("What is your choice? (x/o)");
    try {
        char choice = bufferedReader.readLine().charAt(0);
        while (choice != 'x' && choice != 'o') {
            System.out.println ("You must enter x or o!");
            choice = bufferedReader.readLine().charAt(0);
        }
        return choice;
    } catch (IOException ex) {
        System.out.println(ex.getMessage());
        return ' ';
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
29
3
Gpt3D_Clone29_3.java 1 12
Gpt3D_Clone29_3.java 13 31
----------------------------------------

char wf () {
    Scanner input = new Scanner (System.in);
    System.out.println ("What is your choice? (x/o)");
    if (input.findInLine (".") != null) {
        choice = input.findInLine (".").charAt (0);
        while (choice != 'x' && choice != 'o') {
            System.out.println ("You must enter x or o!");
            choice = input.findInLine (".").charAt (0);
        }
    }
    return choice;
}
----------------------------------------

  char wf () {
    System.out.println ("What is your choice? (x/o)");
    Scanner choiceScanner = new Scanner(System.in);
    String input = choiceScanner.nextLine();
    if(input.length() > 0) {
        char choice = Character.toLowerCase(input.charAt(0));
        while (choice != 'x' && choice != 'o') {
            System.out.println ("You must enter x or o!");
            input = choiceScanner.nextLine();
            if(input.length() > 0) {
                choice = Character.toLowerCase(input.charAt(0));
            }
        }
        return choice;
    }
    return ' ';
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
29
4
Gpt3D_Clone29_4.java 1 12
Gpt3D_Clone29_4.java 13 30
----------------------------------------

char wf () {
    Scanner input = new Scanner (System.in);
    System.out.println ("What is your choice? (x/o)");
    if (input.findInLine (".") != null) {
        choice = input.findInLine (".").charAt (0);
        while (choice != 'x' && choice != 'o') {
            System.out.println ("You must enter x or o!");
            choice = input.findInLine (".").charAt (0);
        }
    }
    return choice;
}
----------------------------------------

  char wf () {
    System.out.println ("What is your choice? (x/o)");
    String userInput = JOptionPane.showInputDialog("What is your choice? (x/o)");
    if(userInput.length() > 0) {
        char choice = Character.toLowerCase(userInput.charAt(0));
        while (choice != 'x' && choice != 'o') {
            System.out.println ("You must enter x or o!");
            userInput = JOptionPane.showInputDialog("What is your choice? (x/o)");
            if(userInput.length() > 0) {
                choice = Character.toLowerCase(userInput.charAt(0));
            }
        }
        return choice;
    }
    return ' ';
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
29
5
Gpt3D_Clone29_5.java 1 12
Gpt3D_Clone29_5.java 13 29
----------------------------------------

char wf () {
    Scanner input = new Scanner (System.in);
    System.out.println ("What is your choice? (x/o)");
    if (input.findInLine (".") != null) {
        choice = input.findInLine (".").charAt (0);
        while (choice != 'x' && choice != 'o') {
            System.out.println ("You must enter x or o!");
            choice = input.findInLine (".").charAt (0);
        }
    }
    return choice;
}
----------------------------------------

  char wf () {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    System.out.println ("What is your choice? (x/o)");
    try {
        char choice = (char)br.read();
        while (choice != 'x' && choice != 'o') {
            System.out.println ("You must enter x or o!");
            choice = (char)br.read();
        }
        return choice;
    } catch (IOException e) {
        System.out.println("Error!");
        return ' ';
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
29
6
Gpt3D_Clone29_6.java 1 12
Gpt3D_Clone29_6.java 13 27
----------------------------------------

char wf () {
    Scanner input = new Scanner (System.in);
    System.out.println ("What is your choice? (x/o)");
    if (input.findInLine (".") != null) {
        choice = input.findInLine (".").charAt (0);
        while (choice != 'x' && choice != 'o') {
            System.out.println ("You must enter x or o!");
            choice = input.findInLine (".").charAt (0);
        }
    }
    return choice;
}
----------------------------------------

 char wf () {
    System.out.println ("What is your choice? (x/o)");
    Scanner inputScan = new Scanner (System.in);
    char choice = inputScan.next().charAt(0);
    do {
        if (choice != 'x' && choice != 'o') {
            System.out.println ("You must enter x or o!");
            choice = inputScan.next().charAt(0);
        }
    }
    while (choice != 'x' && choice != 'o');
    return choice;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
2
0
Gpt3D_Clone2_0.java 1 11
Gpt3D_Clone2_0.java 12 39
----------------------------------------

public void copyFolder (File src, File dest) throws IOException {
    try (Stream < Path > stream = Files.walk (src.toPath ())) {
        stream.forEachOrdered (sourcePath -> {
            try {
                Files.copy (sourcePath, src.toPath ().resolve (dest.toPath ().relativize (sourcePath)));
            } catch (Exception e) {
                e.printStackTrace ();
            }
        });
    }
}
----------------------------------------

	public void copyFolder(File src, File dest) throws IOException {
    FileInputStream instream = null;
    FileOutputStream outstream = null;
    Path srcPath = src.toPath();
    Path destPath = dest.toPath();
    try (DirectoryStream < Path > stream = Files.newDirectoryStream(srcPath)) {
        for (Path entry : stream) {
            Path destFileName = destPath.resolve(srcPath.relativize(entry));
            if (Files.isDirectory(entry)) {
                Files.createDirectory(destFileName);
            } else {
                instream = new FileInputStream(entry.toFile());
                outstream = new FileOutputStream(destFileName.toFile());
                byte[] buffer = new byte[1024];
                int length;
                while ((length = instream.read(buffer)) > 0) {
                    outstream.write(buffer, 0, length);
                }
                instream.close();
                outstream.close();
            }
        }
    } catch (IOException ioe) {
        ioe.printStackTrace();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
2
1
Gpt3D_Clone2_1.java 1 11
Gpt3D_Clone2_1.java 12 41
----------------------------------------

public void copyFolder (File src, File dest) throws IOException {
    try (Stream < Path > stream = Files.walk (src.toPath ())) {
        stream.forEachOrdered (sourcePath -> {
            try {
                Files.copy (sourcePath, src.toPath ().resolve (dest.toPath ().relativize (sourcePath)));
            } catch (Exception e) {
                e.printStackTrace ();
            }
        });
    }
}
----------------------------------------

	public void copyFolder (File src, File dest) throws IOException{
    FileInputStream inStream = null;
    FileOutputStream outStream = null;
    try (Stream<Path> stream = Files.walk(src.toPath())) {
        stream.forEach (sourcePath -> {
            try {
                inStream = new FileInputStream(sourcePath.toFile ());
                outStream = new FileOutputStream (dest.toPath().resolve(src.toPath().relativize(sourcePath)).toFile ());
                byte []buffer = new byte[1024];
                int length;
                while ((length = inStream.read(buffer)) > 0){
                    outStream.write(buffer, 0, length);
                }
            }catch (Exception e){
                e.printStackTrace ();
            }finally{
                try{
                    if(inStream != null)
                        inStream.close();
                    if(outStream != null)
                        outStream.close();
                }catch(IOException ioe){
                    ioe.printStackTrace ();
                }
            }
        });
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
2
3
Gpt3D_Clone2_3.java 1 11
Gpt3D_Clone2_3.java 12 27
----------------------------------------

public void copyFolder (File src, File dest) throws IOException {
    try (Stream < Path > stream = Files.walk (src.toPath ())) {
        stream.forEachOrdered (sourcePath -> {
            try {
                Files.copy (sourcePath, src.toPath ().resolve (dest.toPath ().relativize (sourcePath)));
            } catch (Exception e) {
                e.printStackTrace ();
            }
        });
    }
}
----------------------------------------

	public void copyFolder (File src, File dest) throws IOException {
    Path srcPath = src.toPath ();
    Path destPath = dest.toPath ();
    try (DirectoryStream<Path> stream = Files.newDirectoryStream(srcPath)) {
        for (Path f : stream) {
            Path destFile = destPath.resolve(srcPath.relativize(f));
            if (Files.isDirectory(f)) {
                Files.createDirectories(destFile);
            } else {
                Files.copy(f, destFile);
            }
        }   
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
2
4
Gpt3D_Clone2_4.java 1 11
Gpt3D_Clone2_4.java 12 26
----------------------------------------

public void copyFolder (File src, File dest) throws IOException {
    try (Stream < Path > stream = Files.walk (src.toPath ())) {
        stream.forEachOrdered (sourcePath -> {
            try {
                Files.copy (sourcePath, src.toPath ().resolve (dest.toPath ().relativize (sourcePath)));
            } catch (Exception e) {
                e.printStackTrace ();
            }
        });
    }
}
----------------------------------------

	public void copyFolder(File src, File dest) throws IOException {
    Path srcPath = src.toPath();
    Path destPath = dest.toPath();
    try (Stream<Path> stream = Files.walk(srcPath)) {
        stream.forEach((filePath) -> {
            try {
                Files.copy(filePath, destPath.resolve(srcPath.relativize(filePath)), StandardCopyOption.REPLACE_EXISTING);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        });
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
304
0
Gpt3D_Clone304_0.java 1 16
Gpt3D_Clone304_0.java 17 42
----------------------------------------

public static void main (String [] args) {
    InputStream is = StringFromFileFast.class.getResourceAsStream ("file.txt");
    InputStreamReader input = new InputStreamReader (is);
    final int CHARS_PER_PAGE = 5000;
    final char [] buffer = new char [CHARS_PER_PAGE];
    StringBuilder output = new StringBuilder (CHARS_PER_PAGE);
    try {
        for (int read = input.read (buffer, 0, buffer.length);
        read != - 1; read = input.read (buffer, 0, buffer.length)) {
            output.append (buffer, 0, read);
        }
    } catch (IOException ignore) {
    }
    String text = output.toString ();
    System.out.println (text);
}
----------------------------------------

 public static void main(String[] args) 
{ 
    Path path = Paths.get("file.txt"); 
    final int CHARS_PER_PAGE = 5000; 
    final byte[] buffer = new byte[CHARS_PER_PAGE]; 
    StringBuilder output = new StringBuilder(CHARS_PER_PAGE); 
    try 
    { 
        InputStream is = Files.newInputStream(path); 
        BufferedReader br = new 
        BufferedReader(new InputStreamReader(is)); 
        String line = null; 
        while ((line = br.readLine()) != null)  
        { 
            output.append(line); 
        } 
    } 
    catch (IOException ioe) 
    { 
        System.out.println("Exception "); 
    } 
    String text = output.toString();  
    System.out.println(text); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
304
1
Gpt3D_Clone304_1.java 1 16
Gpt3D_Clone304_1.java 17 35
----------------------------------------

public static void main (String [] args) {
    InputStream is = StringFromFileFast.class.getResourceAsStream ("file.txt");
    InputStreamReader input = new InputStreamReader (is);
    final int CHARS_PER_PAGE = 5000;
    final char [] buffer = new char [CHARS_PER_PAGE];
    StringBuilder output = new StringBuilder (CHARS_PER_PAGE);
    try {
        for (int read = input.read (buffer, 0, buffer.length);
        read != - 1; read = input.read (buffer, 0, buffer.length)) {
            output.append (buffer, 0, read);
        }
    } catch (IOException ignore) {
    }
    String text = output.toString ();
    System.out.println (text);
}
----------------------------------------

 public static void main (String[] args) {
    Path path = Paths.get("file.txt");
    Charset charset = Charset.forName("US-ASCII");
    final int CHARS_PER_PAGE = 5000;
    final byte[] buffer = new byte[CHARS_PER_PAGE];
    StringBuilder output = new StringBuilder(CHARS_PER_PAGE);
    try (BufferedReader br = Files.newBufferedReader(path, charset)) {
        String line = null;
        while ((line = br.readLine()) != null) {
            output.append(line);
        }
    } catch (IOException x) {
        System.err.format("IOException: %s%n", x);
    }
    String text = output.toString(); 
    System.out.println(text);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
304
5
Gpt3D_Clone304_5.java 1 16
Gpt3D_Clone304_5.java 17 29
----------------------------------------

public static void main (String [] args) {
    InputStream is = StringFromFileFast.class.getResourceAsStream ("file.txt");
    InputStreamReader input = new InputStreamReader (is);
    final int CHARS_PER_PAGE = 5000;
    final char [] buffer = new char [CHARS_PER_PAGE];
    StringBuilder output = new StringBuilder (CHARS_PER_PAGE);
    try {
        for (int read = input.read (buffer, 0, buffer.length);
        read != - 1; read = input.read (buffer, 0, buffer.length)) {
            output.append (buffer, 0, read);
        }
    } catch (IOException ignore) {
    }
    String text = output.toString ();
    System.out.println (text);
}
----------------------------------------

 public static void main(String [] args) throws FileNotFoundException {
    FileReader reader = new FileReader("file.txt");
    Scanner sc = new Scanner(reader);
    final int CHARS_PER_PAGE = 5000;
    StringBuilder output = new StringBuilder(CHARS_PER_PAGE);
    while (sc.hasNextLine()){
        output.append(sc.nextLine());
    }
    String text = output.toString();
    System.out.println(text);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
304
6
Gpt3D_Clone304_6.java 1 16
Gpt3D_Clone304_6.java 17 46
----------------------------------------

public static void main (String [] args) {
    InputStream is = StringFromFileFast.class.getResourceAsStream ("file.txt");
    InputStreamReader input = new InputStreamReader (is);
    final int CHARS_PER_PAGE = 5000;
    final char [] buffer = new char [CHARS_PER_PAGE];
    StringBuilder output = new StringBuilder (CHARS_PER_PAGE);
    try {
        for (int read = input.read (buffer, 0, buffer.length);
        read != - 1; read = input.read (buffer, 0, buffer.length)) {
            output.append (buffer, 0, read);
        }
    } catch (IOException ignore) {
    }
    String text = output.toString ();
    System.out.println (text);
}
----------------------------------------

 public static void main(String args[]) throws IOException 
    { 
        Path path = Paths.get("file.txt"); 
        final int CHARS_PER_PAGE = 5000; 
        byte[] buffer = Files.readAllBytes(path); 
        StringBuilder output = new StringBuilder(CHARS_PER_PAGE);
        output.append(new String(buffer, 0, buffer.length)); 
        String text = output.toString();
        System.out.println(text);
    } 
 public static void main (String [] args) { 
    ClassLoader cl = StringFromFileFast.class.getClassLoader(); 
    InputStream is = cl.getResourceAsStream ("file.txt");
    InputStreamReader input = new InputStreamReader (is);
    final int CHARS_PER_PAGE = 5000;
    final char [] buffer = new char [CHARS_PER_PAGE];
    StringBuilder output = new StringBuilder (CHARS_PER_PAGE);
    try {
        for (int read = input.read (buffer, 0, buffer.length);
        read != - 1; read = input.read (buffer, 0, buffer.length)) {
            output.append (buffer, 0, read);
        }
    } catch (IOException ignore) {
    }
    String text = output.toString ();
    System.out.println (text);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
305
0
Gpt3D_Clone305_0.java 1 10
Gpt3D_Clone305_0.java 11 22
----------------------------------------

public String inputStreamToString (InputStream inputStream) throws IOException {
    try (ByteArrayOutputStream result = new ByteArrayOutputStream ()) {
        byte [] buffer = new byte [1024];
        int length;
        while ((length = inputStream.read (buffer)) != - 1) {
            result.write (buffer, 0, length);
        }
        return result.toString (UTF_8);
    }
}
----------------------------------------

 public String inputStreamToString (InputStream inputStream) throws IOException {
        Reader in = new InputStreamReader(inputStream); 
        Writer writer = new StringWriter(); 
        char [] buffer = new char [1024];
        int n;
        while ((n = in.read(buffer)) != -1) {
            writer.write(buffer, 0, n);
        }
        return writer.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
305
1
Gpt3D_Clone305_1.java 1 10
Gpt3D_Clone305_1.java 11 22
----------------------------------------

public String inputStreamToString (InputStream inputStream) throws IOException {
    try (ByteArrayOutputStream result = new ByteArrayOutputStream ()) {
        byte [] buffer = new byte [1024];
        int length;
        while ((length = inputStream.read (buffer)) != - 1) {
            result.write (buffer, 0, length);
        }
        return result.toString (UTF_8);
    }
}
----------------------------------------

 public String inputStreamToString (InputStream inputStream) throws IOException {
         BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
         StringBuilder result = new StringBuilder();
         String line;
         while ((line = reader.readLine()) != null) {
              result.append(line);
         }
         return result.toString(UTF_8);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
305
2
Gpt3D_Clone305_2.java 1 10
Gpt3D_Clone305_2.java 11 21
----------------------------------------

public String inputStreamToString (InputStream inputStream) throws IOException {
    try (ByteArrayOutputStream result = new ByteArrayOutputStream ()) {
        byte [] buffer = new byte [1024];
        int length;
        while ((length = inputStream.read (buffer)) != - 1) {
            result.write (buffer, 0, length);
        }
        return result.toString (UTF_8);
    }
}
----------------------------------------

 public String inputStreamToString (InputStream inputStream) throws IOException { 
        StringBuilder result = new StringBuilder();
        int character;
        BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
        while ((character = reader.read()) != -1) {
            result.append((char) character);
        }
        return result.toString(UTF_8);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
305
3
Gpt3D_Clone305_3.java 1 10
Gpt3D_Clone305_3.java 11 21
----------------------------------------

public String inputStreamToString (InputStream inputStream) throws IOException {
    try (ByteArrayOutputStream result = new ByteArrayOutputStream ()) {
        byte [] buffer = new byte [1024];
        int length;
        while ((length = inputStream.read (buffer)) != - 1) {
            result.write (buffer, 0, length);
        }
        return result.toString (UTF_8);
    }
}
----------------------------------------

 public String inputStreamToString (InputStream inputStream) throws IOException {
        Reader reader = new InputStreamReader(inputStream); 
        StringBuilder result = new StringBuilder();
        int character;
        while ((character = reader.read()) != -1) {
            result.append((char) character);
        }
        return result.toString(UTF_8);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
305
4
Gpt3D_Clone305_4.java 1 10
Gpt3D_Clone305_4.java 11 21
----------------------------------------

public String inputStreamToString (InputStream inputStream) throws IOException {
    try (ByteArrayOutputStream result = new ByteArrayOutputStream ()) {
        byte [] buffer = new byte [1024];
        int length;
        while ((length = inputStream.read (buffer)) != - 1) {
            result.write (buffer, 0, length);
        }
        return result.toString (UTF_8);
    }
}
----------------------------------------

 public String inputStreamToString (InputStream inputStream) throws IOException {
        InputStreamReader input = new InputStreamReader(inputStream);
        StringBuilder result = new StringBuilder();
        int character;
        while ((character = input.read()) != -1) {
            result.append((char)character);
        }
        return result.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
305
6
Gpt3D_Clone305_6.java 1 10
Gpt3D_Clone305_6.java 11 20
----------------------------------------

public String inputStreamToString (InputStream inputStream) throws IOException {
    try (ByteArrayOutputStream result = new ByteArrayOutputStream ()) {
        byte [] buffer = new byte [1024];
        int length;
        while ((length = inputStream.read (buffer)) != - 1) {
            result.write (buffer, 0, length);
        }
        return result.toString (UTF_8);
    }
}
----------------------------------------

 public String inputStreamToString (InputStream inputStream) throws IOException {
        Scanner scanner = new Scanner(inputStream);
        StringBuilder result = new StringBuilder();
        while (scanner.hasNext()) {
            result.append(scanner.next());
        }
        return result.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
305
7
Gpt3D_Clone305_7.java 1 10
Gpt3D_Clone305_7.java 11 20
----------------------------------------

public String inputStreamToString (InputStream inputStream) throws IOException {
    try (ByteArrayOutputStream result = new ByteArrayOutputStream ()) {
        byte [] buffer = new byte [1024];
        int length;
        while ((length = inputStream.read (buffer)) != - 1) {
            result.write (buffer, 0, length);
        }
        return result.toString (UTF_8);
    }
}
----------------------------------------

 public String inputStreamToString (InputStream inputStream) throws IOException {
        int character;
        ByteArrayOutputStream result = new ByteArrayOutputStream ();
        while ((character = inputStream.read()) != -1) {
             result.write(character);
        }
        return result.toString(UTF_8);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
305
8
Gpt3D_Clone305_8.java 1 10
Gpt3D_Clone305_8.java 11 20
----------------------------------------

public String inputStreamToString (InputStream inputStream) throws IOException {
    try (ByteArrayOutputStream result = new ByteArrayOutputStream ()) {
        byte [] buffer = new byte [1024];
        int length;
        while ((length = inputStream.read (buffer)) != - 1) {
            result.write (buffer, 0, length);
        }
        return result.toString (UTF_8);
    }
}
----------------------------------------

 public String inputStreamToString (InputStream inputStream) throws IOException {
        int character;
        String result = "";
        while ((character = inputStream.read()) != -1) {
             result += (char) character;
        }
        return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
305
9
Gpt3D_Clone305_9.java 1 10
Gpt3D_Clone305_9.java 11 20
----------------------------------------

public String inputStreamToString (InputStream inputStream) throws IOException {
    try (ByteArrayOutputStream result = new ByteArrayOutputStream ()) {
        byte [] buffer = new byte [1024];
        int length;
        while ((length = inputStream.read (buffer)) != - 1) {
            result.write (buffer, 0, length);
        }
        return result.toString (UTF_8);
    }
}
----------------------------------------

public String  inputStreamToString (InputStream inputStream) throws IOException {
        StringBuilder result = new StringBuilder();
        int character;
        while ((character = inputStream.read()) != -1) { 
            result.append((char)character);
        }
        return result.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
306
0
Gpt3D_Clone306_0.java 1 12
Gpt3D_Clone306_0.java 13 27
----------------------------------------

public String inputStreamToString (InputStream inputStream) throws IOException {
    String newLine = System.getProperty ("line.separator");
    BufferedReader reader = new BufferedReader (new InputStreamReader (inputStream));
    StringBuilder result = new StringBuilder (UTF_8);
    String line;
    boolean flag = false;
    while ((line = reader.readLine ()) != null) {
        result.append (flag ? newLine : "").append (line);
        flag = true;
    }
    return result.toString ();
}
----------------------------------------

    public String inputStreamToString (InputStream inputStream) throws IOException {
        StringBuilder result = new StringBuilder (UTF_8);
        InputStreamReader reader = new InputStreamReader(inputStream);
        char[] buffer = new char[1];
        boolean flag = false;
        char c;
        while(reader.read(buffer)!=-1){
            c = buffer[0];
            result.append(flag ? System.getProperty ("line.separator") : "").append(c);
            flag = true;
        }
        return result.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
306
4
Gpt3D_Clone306_4.java 1 12
Gpt3D_Clone306_4.java 13 25
----------------------------------------

public String inputStreamToString (InputStream inputStream) throws IOException {
    String newLine = System.getProperty ("line.separator");
    BufferedReader reader = new BufferedReader (new InputStreamReader (inputStream));
    StringBuilder result = new StringBuilder (UTF_8);
    String line;
    boolean flag = false;
    while ((line = reader.readLine ()) != null) {
        result.append (flag ? newLine : "").append (line);
        flag = true;
    }
    return result.toString ();
}
----------------------------------------

    public String inputStreamToString (InputStream inputStream) throws IOException {
        StringBuilder result = new StringBuilder (UTF_8);
        Scanner sc = new Scanner (inputStream);
        while (sc.hasNextLine()){
            if (result.length() > 0){
                result.append (System.getProperty ("line.separator"));
            }
            result.append (sc.nextLine());
        }
        return result.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
306
5
Gpt3D_Clone306_5.java 1 12
Gpt3D_Clone306_5.java 13 23
----------------------------------------

public String inputStreamToString (InputStream inputStream) throws IOException {
    String newLine = System.getProperty ("line.separator");
    BufferedReader reader = new BufferedReader (new InputStreamReader (inputStream));
    StringBuilder result = new StringBuilder (UTF_8);
    String line;
    boolean flag = false;
    while ((line = reader.readLine ()) != null) {
        result.append (flag ? newLine : "").append (line);
        flag = true;
    }
    return result.toString ();
}
----------------------------------------

    public String inputStreamToString (InputStream inputStream) throws IOException {
        Scanner sc = new Scanner(inputStream);
        StringBuilder result = new StringBuilder (UTF_8);
        while(sc.hasNextLine()) {
            result.append(sc.nextLine());
            result.append(System.getProperty ("line.separator"));
        }
        return result.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
306
6
Gpt3D_Clone306_6.java 1 12
Gpt3D_Clone306_6.java 13 23
----------------------------------------

public String inputStreamToString (InputStream inputStream) throws IOException {
    String newLine = System.getProperty ("line.separator");
    BufferedReader reader = new BufferedReader (new InputStreamReader (inputStream));
    StringBuilder result = new StringBuilder (UTF_8);
    String line;
    boolean flag = false;
    while ((line = reader.readLine ()) != null) {
        result.append (flag ? newLine : "").append (line);
        flag = true;
    }
    return result.toString ();
}
----------------------------------------

    public String inputStreamToString (InputStream inputStream) throws IOException {
        StringBuilder result = new StringBuilder(UTF_8);
        Scanner sc = new Scanner (inputStream);
        while (sc.hasNextLine()) {
            result.append (sc.nextLine());
            result.append (System.getProperty ("line.separator"));
        }
        return result.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
307
0
Gpt3D_Clone307_0.java 1 12
Gpt3D_Clone307_0.java 13 30
----------------------------------------

public String inputStreamToString (InputStream inputStream) throws IOException {
    String newLine = System.getProperty ("line.separator");
    BufferedReader reader = new BufferedReader (new InputStreamReader (inputStream));
    StringBuilder result = new StringBuilder (UTF_8);
    String line;
    boolean flag = false;
    while ((line = reader.readLine ()) != null) {
        result.append (flag ? newLine : "").append (line);
        flag = true;
    }
    return result.toString ();
}
----------------------------------------

 public String inputStreamToString(InputStream inputStream) throws IOException {
    StringBuilder resultString = new StringBuilder();
    BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8));
    boolean flag = false;
    
    String currentLine;
    while ((currentLine = reader.readLine()) != null) {
        if (flag) {
            resultString.append(System.getProperty("line.separator"));
        }
        resultString.append(currentLine);
        flag = true;
    }
    return resultString.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
307
3
Gpt3D_Clone307_3.java 1 12
Gpt3D_Clone307_3.java 13 28
----------------------------------------

public String inputStreamToString (InputStream inputStream) throws IOException {
    String newLine = System.getProperty ("line.separator");
    BufferedReader reader = new BufferedReader (new InputStreamReader (inputStream));
    StringBuilder result = new StringBuilder (UTF_8);
    String line;
    boolean flag = false;
    while ((line = reader.readLine ()) != null) {
        result.append (flag ? newLine : "").append (line);
        flag = true;
    }
    return result.toString ();
}
----------------------------------------

 public String inputStreamToString(InputStream inputStream) throws IOException {
    String currentLine;
    String lineSeperator = System.getProperty("line.separator");
    StringBuilder stringBuilder = new StringBuilder();
    try (BufferedReader reader = new BufferedReader (new InputStreamReader (inputStream))) {
        while ((currentLine = reader.readLine()) != null) {
            stringBuilder.append(currentLine);
            stringBuilder.append(lineSeperator);
        }
    }
    return stringBuilder.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
307
4
Gpt3D_Clone307_4.java 1 12
Gpt3D_Clone307_4.java 13 27
----------------------------------------

public String inputStreamToString (InputStream inputStream) throws IOException {
    String newLine = System.getProperty ("line.separator");
    BufferedReader reader = new BufferedReader (new InputStreamReader (inputStream));
    StringBuilder result = new StringBuilder (UTF_8);
    String line;
    boolean flag = false;
    while ((line = reader.readLine ()) != null) {
        result.append (flag ? newLine : "").append (line);
        flag = true;
    }
    return result.toString ();
}
----------------------------------------

 public String inputStreamToString(InputStream inputStream) throws IOException {
    BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, UTF_8));
    String line;
    StringBuilder builder = new StringBuilder();
    while((line = reader.readLine()) != null) {
        if(builder.length() > 0) {
            builder.append(System.getProperty("line.separator"));
        }
        builder.append(line);
    }
    return builder.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
307
6
Gpt3D_Clone307_6.java 1 12
Gpt3D_Clone307_6.java 13 27
----------------------------------------

public String inputStreamToString (InputStream inputStream) throws IOException {
    String newLine = System.getProperty ("line.separator");
    BufferedReader reader = new BufferedReader (new InputStreamReader (inputStream));
    StringBuilder result = new StringBuilder (UTF_8);
    String line;
    boolean flag = false;
    while ((line = reader.readLine ()) != null) {
        result.append (flag ? newLine : "").append (line);
        flag = true;
    }
    return result.toString ();
}
----------------------------------------

 public String inputStreamToString(InputStream inputStream) throws IOException {
    String newLine = System.getProperty("line.separator");
    StringBuilder sb = new StringBuilder();
    String line;
    try (BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))) {
        while ((line = reader.readLine()) != null) {
            sb.append(line);
            sb.append(newLine);
        }
    }
    return sb.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
307
7
Gpt3D_Clone307_7.java 1 12
Gpt3D_Clone307_7.java 13 26
----------------------------------------

public String inputStreamToString (InputStream inputStream) throws IOException {
    String newLine = System.getProperty ("line.separator");
    BufferedReader reader = new BufferedReader (new InputStreamReader (inputStream));
    StringBuilder result = new StringBuilder (UTF_8);
    String line;
    boolean flag = false;
    while ((line = reader.readLine ()) != null) {
        result.append (flag ? newLine : "").append (line);
        flag = true;
    }
    return result.toString ();
}
----------------------------------------

 public String inputStreamToString(InputStream inputStream) throws IOException {
    StringBuilder resultString = new StringBuilder();
    String currentLine;
    BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
    while ((currentLine = reader.readLine()) != null) {
        resultString.append(currentLine);
        resultString.append(System.getProperty("line.separator"));
    }
    return resultString.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
307
8
Gpt3D_Clone307_8.java 1 12
Gpt3D_Clone307_8.java 13 25
----------------------------------------

public String inputStreamToString (InputStream inputStream) throws IOException {
    String newLine = System.getProperty ("line.separator");
    BufferedReader reader = new BufferedReader (new InputStreamReader (inputStream));
    StringBuilder result = new StringBuilder (UTF_8);
    String line;
    boolean flag = false;
    while ((line = reader.readLine ()) != null) {
        result.append (flag ? newLine : "").append (line);
        flag = true;
    }
    return result.toString ();
}
----------------------------------------

 public String inputStreamToString(InputStream inputStream) throws IOException {
    StringBuilder resultingString = new StringBuilder();
    BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8));
    
    String currentLine;
    while((currentLine = reader.readLine()) != null) {
        resultingString.append(currentLine);
        resultingString.append(System.getProperty("line.separator"));
    }
    return resultingString.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
307
9
Gpt3D_Clone307_9.java 1 12
Gpt3D_Clone307_9.java 13 24
----------------------------------------

public String inputStreamToString (InputStream inputStream) throws IOException {
    String newLine = System.getProperty ("line.separator");
    BufferedReader reader = new BufferedReader (new InputStreamReader (inputStream));
    StringBuilder result = new StringBuilder (UTF_8);
    String line;
    boolean flag = false;
    while ((line = reader.readLine ()) != null) {
        result.append (flag ? newLine : "").append (line);
        flag = true;
    }
    return result.toString ();
}
----------------------------------------

 public String inputStreamToString (InputStream inputStream) throws IOException {
    StringBuilder resultWindow = new StringBuilder ();
    BufferedReader reader = new BufferedReader (new InputStreamReader (inputStream));
    String nextLine;
    while ((nextLine = reader.readLine ()) != null) {
        resultWindow.append (nextLine);
        resultWindow.append (System.getProperty ("line.separator"));
    }
    return resultWindow.toString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
308
0
Gpt3D_Clone308_0.java 1 12
Gpt3D_Clone308_0.java 13 34
----------------------------------------

public static void main (String [] args) {
    String needle = "ABC";
    String haystack = "ABCDSGDABCSAGAABCCCCAAABAABC";
    int numberOfOccurences = 0;
    int index = haystack.indexOf (needle);
    while (index != - 1) {
        numberOfOccurences ++;
        haystack = haystack.substring (index + needle.length ());
        index = haystack.indexOf (needle);
    }
    System.out.println ("" + numberOfOccurences);
}
----------------------------------------

 public static void main(String[] args) {
    String needle = "ABC";
    String haystack = "ABCDSGDABCSAGAABCCCCAAABAABC";
    char[] haystackArray = haystack.toCharArray();
    char[] needleArray = needle.toCharArray();
    int numberOfOccurrences = 0;
    for(int i=0; i<haystackArray.length; i++) {
        boolean isNeedleFound = true;
        for(int j=0; j<needleArray.length; j++) {
            if(haystackArray[i + j] != needleArray[j]) {
                isNeedleFound = false;
                break;
            }
        }
        if(isNeedleFound) {
            numberOfOccurrences++;
        }
    }
    System.out.println(numberOfOccurrences);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
308
1
Gpt3D_Clone308_1.java 1 12
Gpt3D_Clone308_1.java 13 30
----------------------------------------

public static void main (String [] args) {
    String needle = "ABC";
    String haystack = "ABCDSGDABCSAGAABCCCCAAABAABC";
    int numberOfOccurences = 0;
    int index = haystack.indexOf (needle);
    while (index != - 1) {
        numberOfOccurences ++;
        haystack = haystack.substring (index + needle.length ());
        index = haystack.indexOf (needle);
    }
    System.out.println ("" + numberOfOccurences);
}
----------------------------------------

public static void main(String[] args) {
    String needle = "ABC";
    String haystack = "ABCDSGDABCSAGAABCCCCAAABAABC";
    int numberOfOccurrences = 0;
    int index = 0;
    while (index < haystack.length()) {
        int temp = haystack.indexOf(needle, index);
        if (temp >= 0) {
            numberOfOccurrences++;
            index = temp + needle.length();
        } else {
            break;
        }
    }
    System.out.println(numberOfOccurrences);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
308
2
Gpt3D_Clone308_2.java 1 12
Gpt3D_Clone308_2.java 13 29
----------------------------------------

public static void main (String [] args) {
    String needle = "ABC";
    String haystack = "ABCDSGDABCSAGAABCCCCAAABAABC";
    int numberOfOccurences = 0;
    int index = haystack.indexOf (needle);
    while (index != - 1) {
        numberOfOccurences ++;
        haystack = haystack.substring (index + needle.length ());
        index = haystack.indexOf (needle);
    }
    System.out.println ("" + numberOfOccurences);
}
----------------------------------------

 public static void main(String[] args) {
    String needle = "ABC";
    String haystack = "ABCDSGDABCSAGAABCCCCAAABAABC";
    int numberOfOccurrences = 0;
    int startIndex = 0;
    while(true) {
        int temp = haystack.indexOf(needle, startIndex);
        if(temp < 0) {
            break;
        } 
        startIndex = temp + 1;
        numberOfOccurrences++;
    }
    System.out.println(numberOfOccurrences);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
308
4
Gpt3D_Clone308_4.java 1 12
Gpt3D_Clone308_4.java 13 27
----------------------------------------

public static void main (String [] args) {
    String needle = "ABC";
    String haystack = "ABCDSGDABCSAGAABCCCCAAABAABC";
    int numberOfOccurences = 0;
    int index = haystack.indexOf (needle);
    while (index != - 1) {
        numberOfOccurences ++;
        haystack = haystack.substring (index + needle.length ());
        index = haystack.indexOf (needle);
    }
    System.out.println ("" + numberOfOccurences);
}
----------------------------------------

public static void main(String[] args) {
    String needle = "ABC";
    String haystack = "ABCDSGDABCSAGAABCCCCAAABAABC";
    int numberOfOccurrences = 0;
    for (int index=0; index<haystack.length(); index++) {
        int temp = haystack.indexOf(needle, index);
        if (temp >= 0) {
            numberOfOccurrences++;
            index = temp;
        }
    }
    System.out.println(numberOfOccurrences);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
308
5
Gpt3D_Clone308_5.java 1 12
Gpt3D_Clone308_5.java 13 27
----------------------------------------

public static void main (String [] args) {
    String needle = "ABC";
    String haystack = "ABCDSGDABCSAGAABCCCCAAABAABC";
    int numberOfOccurences = 0;
    int index = haystack.indexOf (needle);
    while (index != - 1) {
        numberOfOccurences ++;
        haystack = haystack.substring (index + needle.length ());
        index = haystack.indexOf (needle);
    }
    System.out.println ("" + numberOfOccurences);
}
----------------------------------------

 public static void main(String[] args) {
    String needle = "ABC";
    String haystack = "ABCDSGDABCSAGAABCCCCAAABAABC";
    int numberOfOccurrences = 0;
    int index = 0;
    while (index <= haystack.length() - needle.length()) {
        if(haystack.regionMatches(index, needle, 0, needle.length())) {
            numberOfOccurrences++;
        }
        index++;
    }
    System.out.println(numberOfOccurrences);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
308
6
Gpt3D_Clone308_6.java 1 12
Gpt3D_Clone308_6.java 13 27
----------------------------------------

public static void main (String [] args) {
    String needle = "ABC";
    String haystack = "ABCDSGDABCSAGAABCCCCAAABAABC";
    int numberOfOccurences = 0;
    int index = haystack.indexOf (needle);
    while (index != - 1) {
        numberOfOccurences ++;
        haystack = haystack.substring (index + needle.length ());
        index = haystack.indexOf (needle);
    }
    System.out.println ("" + numberOfOccurences);
}
----------------------------------------

 public static void main(String[] args) {
    String needle = "ABC";
    String haystack = "ABCDSGDABCSAGAABCCCCAAABAABC";
    int numberOfOccurrences = 0;
    for(int i=0; i<haystack.length(); i++) {
        if(haystack.charAt(i) == needle.charAt(0)) {
            if(haystack.substring(i).startsWith(needle)){
                numberOfOccurrences++;
            }
        }
    }
    System.out.println(numberOfOccurrences);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
308
8
Gpt3D_Clone308_8.java 1 12
Gpt3D_Clone308_8.java 13 25
----------------------------------------

public static void main (String [] args) {
    String needle = "ABC";
    String haystack = "ABCDSGDABCSAGAABCCCCAAABAABC";
    int numberOfOccurences = 0;
    int index = haystack.indexOf (needle);
    while (index != - 1) {
        numberOfOccurences ++;
        haystack = haystack.substring (index + needle.length ());
        index = haystack.indexOf (needle);
    }
    System.out.println ("" + numberOfOccurences);
}
----------------------------------------

 public static void main(String[] args) {
    String needle = "ABC";
    String haystack = "ABCDSGDABCSAGAABCCCCAAABAABC";
    int numberOfOccurrences = 0;
    for (int index=0; index<haystack.length() - needle.length() + 1; index++) {
        if (haystack.substring(index, index + needle.length()).equals(needle)) {
            numberOfOccurrences++;
        }
    }
    System.out.println(numberOfOccurrences);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
308
9
Gpt3D_Clone308_9.java 1 12
Gpt3D_Clone308_9.java 13 24
----------------------------------------

public static void main (String [] args) {
    String needle = "ABC";
    String haystack = "ABCDSGDABCSAGAABCCCCAAABAABC";
    int numberOfOccurences = 0;
    int index = haystack.indexOf (needle);
    while (index != - 1) {
        numberOfOccurences ++;
        haystack = haystack.substring (index + needle.length ());
        index = haystack.indexOf (needle);
    }
    System.out.println ("" + numberOfOccurences);
}
----------------------------------------

 public static void main(String[] args) {
    String needle = "ABC";
    String haystack = "ABCDSGDABCSAGAABCCCCAAABAABC";
    int numberOfOccurrences = 0;
    while(haystack.contains(needle)) {
        haystack = haystack.replaceFirst(needle, "");
        numberOfOccurrences++;
    }
    System.out.println(numberOfOccurrences);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
316
7
Gpt3D_Clone316_7.java 1 9
Gpt3D_Clone316_7.java 10 23
----------------------------------------

        public boolean accept (File pathname) {
            if (pathname.isDirectory ()) {
                pathname.listFiles (this);
                pathname.delete ();
            } else {
                pathname.delete ();
            }
            return false;
}
----------------------------------------

 public boolean accept (File pathname) {
        if (pathname.isDirectory()) {
            File[] files = pathname.listFiles();
            for (File file : files){ 
                Files.deleteIfExists(file.toPath());
            }
            Files.deleteIfExists(pathname.toPath());
        } else {
            Files.deleteIfExists(pathname.toPath());
        }
        return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
320
0
Gpt3D_Clone320_0.java 1 14
Gpt3D_Clone320_0.java 15 40
----------------------------------------

public void deleteRecursive (File path) {
    File [] c = path.listFiles ();
    System.out.println ("Cleaning out folder:" + path.toString ());
    for (File file : c) {
        if (file.isDirectory ()) {
            System.out.println ("Deleting file:" + file.toString ());
            deleteRecursive (file);
            file.delete ();
        } else {
            file.delete ();
        }
    }
    path.delete ();
}
----------------------------------------

public void deleteRecursive (File path) {
    File [] c = path.listFiles ();
    System.out.println ("Flushing contents of:" + path.toString ());
    for (File file : c) {
        if (file.isDirectory ()) {
            System.out.println ("Erasing folder:" + file.toString ());
            deleteRecursive (file);
            file.delete ();
        } else {
            boolean isDeleted= file.delete ();
            if (isDeleted){
                System.out.println ("File eliminated successfully:" + file.toString ());
            }else {
                System.out.println ("Failed to delete file:" + file.toString ());
            }
        }
    }
    boolean isDirDeleted = path.delete ();
    if (isDirDeleted){
        System.out.println ("Directory deleted successfully:" + path.toString ());
    }else {
        System.out.println ("Error while deleting directory:" + path.toString ());
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
320
1
Gpt3D_Clone320_1.java 1 14
Gpt3D_Clone320_1.java 15 40
----------------------------------------

public void deleteRecursive (File path) {
    File [] c = path.listFiles ();
    System.out.println ("Cleaning out folder:" + path.toString ());
    for (File file : c) {
        if (file.isDirectory ()) {
            System.out.println ("Deleting file:" + file.toString ());
            deleteRecursive (file);
            file.delete ();
        } else {
            file.delete ();
        }
    }
    path.delete ();
}
----------------------------------------

public void deleteRecursive (File path) {
    File [] c = path.listFiles ();
    System.out.println ("Clearing folder:" + path.toString ());
    for (File file : c) {
        if (file.isDirectory ()) {
            System.out.println ("Deleting directory:" + file.toString ());
            deleteRecursive (file);
            file.delete ();
        } else {
            boolean isDeleted= file.delete ();
            if (isDeleted){
                System.out.println ("File deleted successfully:" + file.toString ());
            }else {
                System.out.println ("Error while deleting file:" + file.toString ());
            }
        }
    }
    boolean isDirDeleted = path.delete ();
    if (isDirDeleted){
        System.out.println ("Directory deleted successfully:" + path.toString ());
    }else {
        System.out.println ("Error while deleting directory:" + path.toString ());
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
320
2
Gpt3D_Clone320_2.java 1 14
Gpt3D_Clone320_2.java 15 40
----------------------------------------

public void deleteRecursive (File path) {
    File [] c = path.listFiles ();
    System.out.println ("Cleaning out folder:" + path.toString ());
    for (File file : c) {
        if (file.isDirectory ()) {
            System.out.println ("Deleting file:" + file.toString ());
            deleteRecursive (file);
            file.delete ();
        } else {
            file.delete ();
        }
    }
    path.delete ();
}
----------------------------------------

public void deleteRecursive (File path) {
    File [] c = path.listFiles ();
    System.out.println ("Deleting contents of:" + path.toString ());
    for (File file : c) {
        if (file.isDirectory ()) {
            System.out.println ("Eliminating folder:" + file.toString ());
            deleteRecursive (file);
            file.delete ();
        } else {
            boolean isDeleted= file.delete ();
            if (isDeleted){
                System.out.println ("File removed successfully:" + file.toString ());
            }else {
                System.out.println ("Error while deleting file:" + file.toString ());
            }
        }
    }
    boolean isDirDeleted = path.delete ();
    if (isDirDeleted){
        System.out.println ("Directory deleted successfully:" + path.toString ());
    }else {
        System.out.println ("Error while deleting directory:" + path.toString ());
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
320
3
Gpt3D_Clone320_3.java 1 14
Gpt3D_Clone320_3.java 15 40
----------------------------------------

public void deleteRecursive (File path) {
    File [] c = path.listFiles ();
    System.out.println ("Cleaning out folder:" + path.toString ());
    for (File file : c) {
        if (file.isDirectory ()) {
            System.out.println ("Deleting file:" + file.toString ());
            deleteRecursive (file);
            file.delete ();
        } else {
            file.delete ();
        }
    }
    path.delete ();
}
----------------------------------------

public void deleteRecursive (File path) {
    File [] c = path.listFiles ();
    System.out.println ("Removing contents from folder:" + path.toString ());
    for (File file : c) {
        if (file.isDirectory ()) {
            System.out.println ("Deleting directory:" + file.toString ());
            deleteRecursive (file);
            file.delete ();
        } else {
            boolean isDeleted= file.delete ();
            if (isDeleted){
                System.out.println ("File deleted successfully:" + file.toString ());
            }else {
                System.out.println ("Error while deleting file:" + file.toString ());
            }
        }
    }
    boolean isDirDeleted = path.delete ();
    if (isDirDeleted){
        System.out.println ("Directory deleted successfully:" + path.toString ());
    }else {
        System.out.println ("Error while deleting directory:" + path.toString ());
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
320
4
Gpt3D_Clone320_4.java 1 14
Gpt3D_Clone320_4.java 15 40
----------------------------------------

public void deleteRecursive (File path) {
    File [] c = path.listFiles ();
    System.out.println ("Cleaning out folder:" + path.toString ());
    for (File file : c) {
        if (file.isDirectory ()) {
            System.out.println ("Deleting file:" + file.toString ());
            deleteRecursive (file);
            file.delete ();
        } else {
            file.delete ();
        }
    }
    path.delete ();
}
----------------------------------------

public void deleteRecursive (File path) {
    File [] c = path.listFiles ();
    System.out.println ("Erasing the folder:" + path.toString ());
    for (File file : c) {
        if (file.isDirectory ()) {
            System.out.println ("Deleting folder:" + file.toString ());
            deleteRecursive (file);
            file.delete ();
        } else {
            boolean isDeleted= file.delete ();
            if (isDeleted){
                System.out.println ("File deleted successfully:" + file.toString ());
            }else {
                System.out.println ("Error while deleting file:" + file.toString ());
            }
        }
    }
    boolean isDirDeleted = path.delete ();
    if (isDirDeleted){
        System.out.println ("Directory deleted successfully:" + path.toString ());
    }else {
        System.out.println ("Error while deleting directory:" + path.toString ());
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
322
7
Gpt3D_Clone322_7.java 1 21
Gpt3D_Clone322_7.java 22 39
----------------------------------------

public static int getHours () {
    int hours = 0;
    boolean hoursNotOk = true;
    do {
        try {
            System.out.println ("Here");
            hours = console.nextInt ();
            hoursNotOk = false;
        } catch (Exception e) {
            e.printStackTrace ();
            console.nextLine ();
        } finally {
            if (hoursNotOk) {
                System.out.println (", please re-enter the hours again:");
            } else {
                System.out.println ("**hours input accepted**");
            }
        }
    } while (hoursNotOk);
    return hours;
}
----------------------------------------

 public static int getHours() {
    int hours = 0;
    while (hours == 0) {
        try {
            System.out.println ("Here");
            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
            hours = Integer.parseInt(br.readLine());
        } catch (Exception e){
            System.out.println(", please re-enter the hours again:");
            e.printStackTrace();
        }
    }
    System.out.println ("**hours input accepted**");
    return hours;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
325
0
Gpt3D_Clone325_0.java 1 19
Gpt3D_Clone325_0.java 20 50
----------------------------------------

public int read (char [] cbuf, int off, int len) throws IOException {
    int read = super.read (cbuf, off, len);
    if (read == - 1) {
        return - 1;
    }
    int pos = off - 1;
    for (int readPos = off;
    readPos < off + read; readPos ++) {
        if (read == '@') {
            continue;
        } else {
            pos ++;
        }
        if (pos < readPos) {
            cbuf [pos] = cbuf [readPos];
        }
    }
    return pos - off + 1;
}
----------------------------------------

 public int read (char[] cbuf, int off, int len) throws IOException {
    int read = super.read (cbuf, off, len);
    if (read == -1) {
        return -1;
    }
    
    // create a temp array
    char [] tempArray = new char[off + read];
    for (int readPos = off; readPos < off + read; readPos++) { // loop through the characters starting at offset
        if (read != '@') { // if the character != @
            tempArray[readPos] = cbuf[readPos]; // assign the character to the location
        }
    }
    
    // copy over characters to original array , skipping the @
    int i = 0;
    int j = 0;
    while (i < tempArray.length) {
      if (tempArray[i] != '@') { // if character is not @
        cbuf[off + j] = tempArray[i];
        i++;
        j++;
      } 
      else {
        i++;
      }
    }
    return j; // return the length of characters written
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
325
1
Gpt3D_Clone325_1.java 1 19
Gpt3D_Clone325_1.java 20 69
----------------------------------------

public int read (char [] cbuf, int off, int len) throws IOException {
    int read = super.read (cbuf, off, len);
    if (read == - 1) {
        return - 1;
    }
    int pos = off - 1;
    for (int readPos = off;
    readPos < off + read; readPos ++) {
        if (read == '@') {
            continue;
        } else {
            pos ++;
        }
        if (pos < readPos) {
            cbuf [pos] = cbuf [readPos];
        }
    }
    return pos - off + 1;
}
----------------------------------------

 public int read (char [] cbuf, int off, int len) throws IOException {
    int read = super.read (cbuf, off, len); 
    if (read == -1) {
        return -1;
    }
    
    List<Character> cbufList = new ArrayList<>(); // create a character list
    for (int readPos = off; readPos < off + read; readPos++) { // loop characters
        if (cbuf[readPos] != '@') { // if it is not @
            cbufList.add(cbuf[readPos]); // add to list
        }
    }
    
    // convert list back to character array
    char[] cbufArray = new char[cbufList.size()]; 
    for (int i = 0; i < cbufList.size(); i++) { 
        cbufArray[i] = cbufList.get(i); 
    } 
    
    // copy over characters to original array
    System.arraycopy(cbufArray, 0, cbuf, off, cbufArray.length); 
    return cbufArray.length; // return the length of characters written
}    
 public int read (char[] cbuf, int off, int len) throws IOException {
    int read = super.read (cbuf, off, len);
    if (read == -1) {
        return -1;
    }
    
    // create a stack for characters
    Stack<Character> cbufStack = new Stack<Character>();
    for (int readPos = off; readPos < off + read; readPos++) {
        if (read != '@') {
            cbufStack.push(cbuf[readPos]);
        }
    }
    
    // convert stack to character array
    char[] cbufArray = new char[cbufStack.size()];
    for (int i = 0; i < cbufStack.size(); i++) {
        cbufArray[i] = cbufStack.pop();
    }
    
    // copy over characters to original array
    System.arraycopy(cbufArray, 0, cbuf, off, cbufArray.length);
    return cbufArray.length; // return the length of characters written
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
325
2
Gpt3D_Clone325_2.java 1 19
Gpt3D_Clone325_2.java 20 69
----------------------------------------

public int read (char [] cbuf, int off, int len) throws IOException {
    int read = super.read (cbuf, off, len);
    if (read == - 1) {
        return - 1;
    }
    int pos = off - 1;
    for (int readPos = off;
    readPos < off + read; readPos ++) {
        if (read == '@') {
            continue;
        } else {
            pos ++;
        }
        if (pos < readPos) {
            cbuf [pos] = cbuf [readPos];
        }
    }
    return pos - off + 1;
}
----------------------------------------

 public int read (char [] cbuf, int off, int len) throws IOException {
    int read = super.read (cbuf, off, len); 
    if (read == -1) {
        return -1;
    }
    
    List<Character> cbufList = new ArrayList<>(); // create a character list
    for (int readPos = off; readPos < off + read; readPos++) { // loop characters
        if (cbuf[readPos] != '@') { // if it is not @
            cbufList.add(cbuf[readPos]); // add to list
        }
    }
    
    // convert list back to character array
    char[] cbufArray = new char[cbufList.size()]; 
    for (int i = 0; i < cbufList.size(); i++) { 
        cbufArray[i] = cbufList.get(i); 
    } 
    
    // copy over characters to original array
    System.arraycopy(cbufArray, 0, cbuf, off, cbufArray.length); 
    return cbufArray.length; // return the length of characters written
}    
 public int read (char[] cbuf, int off, int len) throws IOException {
    int read = super.read (cbuf, off, len);
    if (read == -1) {
        return -1;
    }
    
    // create a stack for characters
    Stack<Character> cbufStack = new Stack<Character>();
    for (int readPos = off; readPos < off + read; readPos++) {
        if (read != '@') {
            cbufStack.push(cbuf[readPos]);
        }
    }
    
    // convert stack to character array
    char[] cbufArray = new char[cbufStack.size()];
    for (int i = 0; i < cbufStack.size(); i++) {
        cbufArray[i] = cbufStack.pop();
    }
    
    // copy over characters to original array
    System.arraycopy(cbufArray, 0, cbuf, off, cbufArray.length);
    return cbufArray.length; // return the length of characters written
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
325
3
Gpt3D_Clone325_3.java 1 19
Gpt3D_Clone325_3.java 20 45
----------------------------------------

public int read (char [] cbuf, int off, int len) throws IOException {
    int read = super.read (cbuf, off, len);
    if (read == - 1) {
        return - 1;
    }
    int pos = off - 1;
    for (int readPos = off;
    readPos < off + read; readPos ++) {
        if (read == '@') {
            continue;
        } else {
            pos ++;
        }
        if (pos < readPos) {
            cbuf [pos] = cbuf [readPos];
        }
    }
    return pos - off + 1;
}
----------------------------------------

 public int read (char[] cbuf, int off, int len) throws IOException {
    int read = super.read (cbuf, off, len);
    if (read == -1) {
        return -1;
    }
    
    // create a linked list for characters
    LinkedList<Character> cbufLinkList = new LinkedList<Character>(); 
    for (int readPos = off; readPos < off + read; readPos++) {
        if (read != '@') {
            cbufLinkList.add(cbuf[readPos]);
        }
    }  
    
    // convert linked list to character array
    char[] cbufArray = new char[cbufLinkList.size()]; 
    for (int i = 0; i < cbufLinkList.size(); i++) { 
       cbufArray[i] = cbufLinkList.get(i); 
    } 
    
    // copy over characters to original array
    System.arraycopy(cbufArray, 0, cbuf, off, cbufArray.length); 
    return cbufArray.length; // return the length of characters written
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
325
5
Gpt3D_Clone325_5.java 1 19
Gpt3D_Clone325_5.java 20 39
----------------------------------------

public int read (char [] cbuf, int off, int len) throws IOException {
    int read = super.read (cbuf, off, len);
    if (read == - 1) {
        return - 1;
    }
    int pos = off - 1;
    for (int readPos = off;
    readPos < off + read; readPos ++) {
        if (read == '@') {
            continue;
        } else {
            pos ++;
        }
        if (pos < readPos) {
            cbuf [pos] = cbuf [readPos];
        }
    }
    return pos - off + 1;
}
----------------------------------------

 public int read (char[] cbuf, int off, int len) throws IOException{
    int read = super.read (cbuf, off, len);
    if (read == -1) {
        return -1;
    }
    
    int pos = 0; // start at the 0 index
    int count = off;
    while (count < off + read) {
        if (cbuf[count] != '@') { // if the character != @
            cbuf[pos] = cbuf[count]; // assign the character to the location
            pos++; // increment location
        }
        count++;
    }
    
    return pos; // return the length of characters written
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
325
6
Gpt3D_Clone325_6.java 1 19
Gpt3D_Clone325_6.java 20 37
----------------------------------------

public int read (char [] cbuf, int off, int len) throws IOException {
    int read = super.read (cbuf, off, len);
    if (read == - 1) {
        return - 1;
    }
    int pos = off - 1;
    for (int readPos = off;
    readPos < off + read; readPos ++) {
        if (read == '@') {
            continue;
        } else {
            pos ++;
        }
        if (pos < readPos) {
            cbuf [pos] = cbuf [readPos];
        }
    }
    return pos - off + 1;
}
----------------------------------------

 public int read (char[] cbuf, int off, int len) throws IOException {
    int read = super.read(cbuf, off, len);
    if (read == -1) {
        return -1;
    }
    int pos = 0; // start at the 0 index
    
    for (int readPos = 0; readPos < read; readPos++) { // loop starting at 0
        if (cbuf[readPos] != '@') { // if the character != @
            cbuf[off + pos] = cbuf[readPos]; // assign the character to the location
            pos++; // increment location
        }
    }
    
    return pos; // return the length of characters written
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
325
7
Gpt3D_Clone325_7.java 1 19
Gpt3D_Clone325_7.java 20 38
----------------------------------------

public int read (char [] cbuf, int off, int len) throws IOException {
    int read = super.read (cbuf, off, len);
    if (read == - 1) {
        return - 1;
    }
    int pos = off - 1;
    for (int readPos = off;
    readPos < off + read; readPos ++) {
        if (read == '@') {
            continue;
        } else {
            pos ++;
        }
        if (pos < readPos) {
            cbuf [pos] = cbuf [readPos];
        }
    }
    return pos - off + 1;
}
----------------------------------------

 public int read (char[] cbuf, int off, int len) throws IOException{
    int read = super.read (cbuf, off, len);
    if (read == -1) {
        return -1;
    }
    
    int pos = off; // start at the offset
    
    for (int readPos = off; readPos < off + read; readPos++) { // loop through the characters starting at offset
        if (read != '@') { // if the character != @
            cbuf[pos] = cbuf[readPos]; // assign the character to the location
            pos++; // increment location
        }
    }
    
    return pos - off; // return the length of characters written
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
325
8
Gpt3D_Clone325_8.java 1 19
Gpt3D_Clone325_8.java 20 38
----------------------------------------

public int read (char [] cbuf, int off, int len) throws IOException {
    int read = super.read (cbuf, off, len);
    if (read == - 1) {
        return - 1;
    }
    int pos = off - 1;
    for (int readPos = off;
    readPos < off + read; readPos ++) {
        if (read == '@') {
            continue;
        } else {
            pos ++;
        }
        if (pos < readPos) {
            cbuf [pos] = cbuf [readPos];
        }
    }
    return pos - off + 1;
}
----------------------------------------

 public int read (char[] cbuf, int off, int len) throws IOException {
    int read = super.read (cbuf, off, len);
    if (read == -1) {
        return -1;
    }
    
    int pos = 0; // start at the 0 index
    
    for (int readPos = off; readPos < off + read; readPos++) { // loop through the characters starting at offset
        if (cbuf[readPos] != '@') { // if the character != @
            cbuf[pos] = cbuf[readPos]; // assign the character to the location
            pos++; // increment location
        }
    }
    
    return pos; // return the length of characters written
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
325
9
Gpt3D_Clone325_9.java 1 19
Gpt3D_Clone325_9.java 20 37
----------------------------------------

public int read (char [] cbuf, int off, int len) throws IOException {
    int read = super.read (cbuf, off, len);
    if (read == - 1) {
        return - 1;
    }
    int pos = off - 1;
    for (int readPos = off;
    readPos < off + read; readPos ++) {
        if (read == '@') {
            continue;
        } else {
            pos ++;
        }
        if (pos < readPos) {
            cbuf [pos] = cbuf [readPos];
        }
    }
    return pos - off + 1;
}
----------------------------------------

 public int read (char[] cbuf, int off, int len) throws IOException {
    int read = super.read(cbuf, off, len);
    if (read == -1) {
        return -1;
    }
    int pos = 0; // start at the 0 index
    
    for (int readPos = 0; readPos < read; readPos++) { // loop 
        if (cbuf[readPos] != '@') { // if the character != @
            cbuf[pos] = cbuf[readPos]; // assign the character to the location
            pos++; // increment location
        }
    }
    
    return pos; // return the length of characters written
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
327
2
Gpt3D_Clone327_2.java 1 10
Gpt3D_Clone327_2.java 11 22
----------------------------------------

public void mouseMoved (MouseEvent e) {
    xpos = getX ();
    if (xpos < 0) {
        polyrot --;
    } else if (xpos > 0) {
        polyrot ++;
    }
    repaint ();
    break;
}
----------------------------------------

 public void mouseMoved (MouseEvent e) {
    double xpos = (double)e.getX();
    if (xpos < 0) {
        polyrot -=1;
    } else if (xpos > 0) {
        polyrot +=1;
    }
    repaint();
    return;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
327
5
Gpt3D_Clone327_5.java 1 10
Gpt3D_Clone327_5.java 11 22
----------------------------------------

public void mouseMoved (MouseEvent e) {
    xpos = getX ();
    if (xpos < 0) {
        polyrot --;
    } else if (xpos > 0) {
        polyrot ++;
    }
    repaint ();
    break;
}
----------------------------------------

 public void mouseMoved (MouseEvent e) {
    int xpos = (int)e.getX();
    if (xpos < 0) {
        --polyrot;
    } else if (xpos > 0) {
        ++polyrot;
    }
    repaint();
    return;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
328
0
Gpt3D_Clone328_0.java 1 8
Gpt3D_Clone328_0.java 9 30
----------------------------------------

public static void close (Statement...statements) {
    for (Statement stmt : statements) {
        try {
            if (stmt != null) stmt.close ();
        } catch (SQLException se) {
        }
    }
}
----------------------------------------

 public static void close (ResultSet...rsets, Statement...stmts, Connection...connections) {
    for (ResultSet rset : rsets) {
        try {
            if (rset != null) rset.close ();
        } catch (SQLException se) {
        }
    }
    for (Statement stmt : stmts) {
        try {
            if (stmt != null) stmt.close ();
        } catch (SQLException se) {
        }
    }
    for (Connection conn : connections) {
        try {
            if (conn != null) conn.close ();
        } catch (SQLException se) {
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
328
1
Gpt3D_Clone328_1.java 1 8
Gpt3D_Clone328_1.java 9 30
----------------------------------------

public static void close (Statement...statements) {
    for (Statement stmt : statements) {
        try {
            if (stmt != null) stmt.close ();
        } catch (SQLException se) {
        }
    }
}
----------------------------------------

 public static void close (Connection...connections, Statement...stmts, ResultSet...rsets) {
    for (Connection conn : connections) {
        try {
            if (conn != null) conn.close ();
        } catch (SQLException se) {
        }
    }
    for (Statement stmt : stmts) {
        try {
            if (stmt != null) stmt.close ();
        } catch (SQLException se) {
        }
    }
    for (ResultSet rset : rsets) {
        try {
            if (rset != null) rset.close ();
        } catch (SQLException se) {
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
328
2
Gpt3D_Clone328_2.java 1 8
Gpt3D_Clone328_2.java 9 24
----------------------------------------

public static void close (Statement...statements) {
    for (Statement stmt : statements) {
        try {
            if (stmt != null) stmt.close ();
        } catch (SQLException se) {
        }
    }
}
----------------------------------------

 public static void close (Statement...stmts, ResultSet...rsets) {
    for (Statement stmt : stmts) {
        try {
            if (stmt != null) stmt.close ();
        } catch (SQLException se) {
        }
    }
    for (ResultSet rset : rsets) {
        try {
            if (rset != null) rset.close ();
        } catch (SQLException se) {
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
328
3
Gpt3D_Clone328_3.java 1 8
Gpt3D_Clone328_3.java 9 18
----------------------------------------

public static void close (Statement...statements) {
    for (Statement stmt : statements) {
        try {
            if (stmt != null) stmt.close ();
        } catch (SQLException se) {
        }
    }
}
----------------------------------------

 public static void closeAll (ResultSet rs, Statement st, Connection cn) {
    try {
        if(rs != null) rs.close ();
        if(st != null) st.close ();
        if(cn != null) cn.close ();
    } catch (SQLException se) {     
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
328
5
Gpt3D_Clone328_5.java 1 8
Gpt3D_Clone328_5.java 9 16
----------------------------------------

public static void close (Statement...statements) {
    for (Statement stmt : statements) {
        try {
            if (stmt != null) stmt.close ();
        } catch (SQLException se) {
        }
    }
}
----------------------------------------

 public static void close (Connection connection, Statement stmt) {
    try {
        if (connection != null && stmt != null) connection.close ();
    } catch (SQLException se) {
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
328
6
Gpt3D_Clone328_6.java 1 8
Gpt3D_Clone328_6.java 9 16
----------------------------------------

public static void close (Statement...statements) {
    for (Statement stmt : statements) {
        try {
            if (stmt != null) stmt.close ();
        } catch (SQLException se) {
        }
    }
}
----------------------------------------

 public static void close (Statement statement, ResultSet rs) {
    try {
        if (statement != null && rs != null) statement.close ();
    } catch (SQLException se) {
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
328
7
Gpt3D_Clone328_7.java 1 8
Gpt3D_Clone328_7.java 9 16
----------------------------------------

public static void close (Statement...statements) {
    for (Statement stmt : statements) {
        try {
            if (stmt != null) stmt.close ();
        } catch (SQLException se) {
        }
    }
}
----------------------------------------

 public static void close (Connection connection, ResultSet rs) {
    try {
        if (connection != null && rs != null) connection.close ();
    } catch (SQLException se) {
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
329
0
Gpt3D_Clone329_0.java 1 20
Gpt3D_Clone329_0.java 21 49
----------------------------------------

public static void main (String [] args) {
    String str = "abcdabghplhhnfl".toLowerCase ();
    Integer [] ar = new Integer [26];
    for (int i = 0;
    i < str.length (); i ++) {
        int j = str.charAt (i) - 'a';
        if (ar [j] == null) {
            ar [j] = 1;
        } else {
            ar [j] += 1;
        }
    }
    for (int i = 0;
    i < ar.length; i ++) {
        if (ar [i] != null && ar [i] > 1) {
            char c = (char) (97 + i);
            System.out.println ("'" + c + "' comes " + ar [i] + " times.");
        }
    }
}
----------------------------------------

 public static void main (String [] args) {
     String str = "abcdabghplhhnfl".toLowerCase ();
     Character[] characters = new Character[str.length()];  
     for (int i = 0; i < str.length (); i++) {
         characters[i] = str.charAt (i);
     }
     Arrays.sort(characters);
     // Store occurrence of each character in a map
     Map<Character, Integer> map = new HashMap<>();
     int oldVal = 0;
     for (Character c : characters) {
         Integer newVal = 0;
         if (map.containsKey(c)) {
             oldVal = map.get(c);
             newVal = oldVal + 1;
         } else {
             newVal = 1;
         }
         map.put(c, newVal);
     }
     // Print duplicate characters
     for (Map.Entry<Character, Integer> entry : map.entrySet()) {
         if (entry.getValue() > 1) {
             System.out.println("'" + entry.getKey() + "' comes " + entry.getValue() + " times.");
         }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
329
2
Gpt3D_Clone329_2.java 1 20
Gpt3D_Clone329_2.java 21 40
----------------------------------------

public static void main (String [] args) {
    String str = "abcdabghplhhnfl".toLowerCase ();
    Integer [] ar = new Integer [26];
    for (int i = 0;
    i < str.length (); i ++) {
        int j = str.charAt (i) - 'a';
        if (ar [j] == null) {
            ar [j] = 1;
        } else {
            ar [j] += 1;
        }
    }
    for (int i = 0;
    i < ar.length; i ++) {
        if (ar [i] != null && ar [i] > 1) {
            char c = (char) (97 + i);
            System.out.println ("'" + c + "' comes " + ar [i] + " times.");
        }
    }
}
----------------------------------------

 public static void main (String [] args) {
     String str = "abcdabghplhhnfl".toLowerCase ();
     Map<Character, Integer> map = new HashMap<>();
     // Store the occurrence of each character
     for (int i = 0; i < str.length (); i++) {
         char c = str.charAt(i);
         int val = 0;
         if (map.containsKey(c)) {
             val = map.get(c);
         }
         map.put(c, ++val);
     }
     for (Map.Entry<Character, Integer> entry : map.entrySet()) {
         if (entry.getValue() > 1) {
             System.out.println("'" + entry.getKey() + "' comes " + entry.getValue() + " times.");
         }
     }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
329
5
Gpt3D_Clone329_5.java 1 20
Gpt3D_Clone329_5.java 21 39
----------------------------------------

public static void main (String [] args) {
    String str = "abcdabghplhhnfl".toLowerCase ();
    Integer [] ar = new Integer [26];
    for (int i = 0;
    i < str.length (); i ++) {
        int j = str.charAt (i) - 'a';
        if (ar [j] == null) {
            ar [j] = 1;
        } else {
            ar [j] += 1;
        }
    }
    for (int i = 0;
    i < ar.length; i ++) {
        if (ar [i] != null && ar [i] > 1) {
            char c = (char) (97 + i);
            System.out.println ("'" + c + "' comes " + ar [i] + " times.");
        }
    }
}
----------------------------------------

 public static void main (String [] args) {
    String str = "abcdabghplhhnfl".toLowerCase ();
    int[] ar = new int[26];
    for (int i = 0; i < str.length(); i++) {
        int j = str.charAt(i) - 'a';
        ar[j] = (ar[j] >= 0) ? ar[j]+1 : 1;
    }
    // Print duplicates in the string
    for (int i = 0; i < ar.length; i++) {
        if (ar[i] > 1) {
            char c = (char) (i + 97);
            System.out.println("'" + c + "' comes " + ar[i] + " times.");
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
329
7
Gpt3D_Clone329_7.java 1 20
Gpt3D_Clone329_7.java 21 40
----------------------------------------

public static void main (String [] args) {
    String str = "abcdabghplhhnfl".toLowerCase ();
    Integer [] ar = new Integer [26];
    for (int i = 0;
    i < str.length (); i ++) {
        int j = str.charAt (i) - 'a';
        if (ar [j] == null) {
            ar [j] = 1;
        } else {
            ar [j] += 1;
        }
    }
    for (int i = 0;
    i < ar.length; i ++) {
        if (ar [i] != null && ar [i] > 1) {
            char c = (char) (97 + i);
            System.out.println ("'" + c + "' comes " + ar [i] + " times.");
        }
    }
}
----------------------------------------

 public static void main(String[] args) {
    
    String str = "abcdabghplhhnfl".toLowerCase();
    int[] ar = new int[26];
    for (int i = 0; i < str.length(); i++) {
        int j = str.charAt(i) - 'a';
        ar[j] = ar[j] == 0 ? 1 : ar[j] + 1;
    }
    // Print duplicates in the string
    for (int i = 0; i < ar.length; i++) {
        if (ar[i] > 1) {
            char c = (char) (i + 97);
            System.out.println("'" + c + "' comes " + ar[i] + " times.");
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
331
0
Gpt3D_Clone331_0.java 1 15
Gpt3D_Clone331_0.java 16 39
----------------------------------------

public static void main (String [] args) {
    String name = "AnuvratAnuvra";
    char [] arr = name.toCharArray ();
    HashMap < Character, Integer > map = new HashMap < Character, Integer > ();
    for (char val : arr) {
        map.put (val, map.containsKey (val) ? map.get (val) + 1 : 1);
    }
    for (Entry < Character, Integer > entry : map.entrySet ()) {
        if (entry.getValue () > 1) {
            Character key = entry.getKey ();
            Object value = entry.getValue ();
            System.out.println (key + ":" + value);
        }
    }
}
----------------------------------------

 public static void main(String[] args) {
    String name = "AnuvratAnuvra";
    char[] arr = name.toCharArray();
    HashMap<Character, Integer> map = new HashMap<>();
    for (int i = 0; i < arr.length; i++) {
        char c = arr[i];
        if (map.containsKey(c)) {
            map.put(c, map.get(c) + 1);
        } else {
            map.put(c, 1);
        }
    }
    Iterator<Entry<Character, Integer>> itr = map.entrySet().iterator();
    while (itr.hasNext()) {
        Entry<Character, Integer> entry = itr.next();
        if (entry.getValue() > 1) {
            Character key = entry.getKey();
            Object value = entry.getValue();
            System.out.println(key + ":" + value);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
331
1
Gpt3D_Clone331_1.java 1 15
Gpt3D_Clone331_1.java 16 38
----------------------------------------

public static void main (String [] args) {
    String name = "AnuvratAnuvra";
    char [] arr = name.toCharArray ();
    HashMap < Character, Integer > map = new HashMap < Character, Integer > ();
    for (char val : arr) {
        map.put (val, map.containsKey (val) ? map.get (val) + 1 : 1);
    }
    for (Entry < Character, Integer > entry : map.entrySet ()) {
        if (entry.getValue () > 1) {
            Character key = entry.getKey ();
            Object value = entry.getValue ();
            System.out.println (key + ":" + value);
        }
    }
}
----------------------------------------

 public static void main(String[] args) {
    String name = "AnuvratAnuvra";
    char[] arr = name.toCharArray();
    HashMap<Character, Integer> map = new HashMap<>();
    for (int i = 0; i < arr.length; i++) {
        char c = arr[i];
        if (map.containsKey(c)) {
            Integer count = map.get(c) + 1;
            map.put(c, count);
        } else {
            map.put(c, 1);
        }
    }
    for (Entry<Character, Integer> entry : map.entrySet()) {
        if (entry.getValue() > 1) {
            Character key = entry.getKey();
            Object value = entry.getValue();
            System.out.println(key + ":" + value);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
332
4
Gpt3D_Clone332_4.java 1 24
Gpt3D_Clone332_4.java 25 45
----------------------------------------

public static void main (String [] args) {
    String test = "The quick brown fox jumped over the lazy dog.";
    int countA = 0, countO = 0, countSpace = 0, countDot = 0;
    for (int i = 0;
    i < test.length (); i ++) {
        switch (test.charAt (i)) {
            case 'a' :
            case 'A' :
                countA ++;
                break;
            case 'o' :
            case 'O' :
                countO ++;
                break;
            case ' ' :
                countSpace ++;
                break;
            case '.' :
                countDot ++;
                break;
        }
    }
    System.out.printf ("%s%d%n%s%d%n%s%d%n%s%d", "A: ", countA, "O: ", countO, "Space: ", countSpace, "Dot: ", countDot);
}
----------------------------------------

  public static void main (String [] args) {
        String test = "The quick brown fox jumped over the lazy dog.";
        int countA = 0, countO = 0, countSpace = 0, countDot = 0;
        int len = test.length();
        char c;
        for (int i = 0; i < len; i++) {
            c = test.charAt(i);
            if (c == 'a' || c == 'A') {
                countA++;
            } else if (c == 'o' || c =='O') {
                countO++;
            } else if (c == ' ') {
                countSpace++;
            } else if (c == '.') {
                countDot++;
            }
        }
        System.out.printf ("%s%d%n%s%d%n%s%d%n%s%d", "A: ", countA, "O: ", countO, "Space: ", countSpace, "Dot: ", countDot);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
332
5
Gpt3D_Clone332_5.java 1 24
Gpt3D_Clone332_5.java 25 43
----------------------------------------

public static void main (String [] args) {
    String test = "The quick brown fox jumped over the lazy dog.";
    int countA = 0, countO = 0, countSpace = 0, countDot = 0;
    for (int i = 0;
    i < test.length (); i ++) {
        switch (test.charAt (i)) {
            case 'a' :
            case 'A' :
                countA ++;
                break;
            case 'o' :
            case 'O' :
                countO ++;
                break;
            case ' ' :
                countSpace ++;
                break;
            case '.' :
                countDot ++;
                break;
        }
    }
    System.out.printf ("%s%d%n%s%d%n%s%d%n%s%d", "A: ", countA, "O: ", countO, "Space: ", countSpace, "Dot: ", countDot);
}
----------------------------------------

  public static void main (String [] args) {
        String test = "The quick brown fox jumped over the lazy dog.";
        int countA = 0, countO = 0, countSpace = 0, countDot = 0;
        for (int a : test.toCharArray()) {
            if (a == 'a' || a == 'A') {
                countA++;
            } else if (a == 'o' || a == 'O') {
                countO++;
            } else if (a == ' ') {
                countSpace++;
            } else if (a == '.') {
                countDot++;
            }
        }
        System.out.printf ("%s%d%n%s%d%n%s%d%n%s%d", "A: ", countA, "O: ", countO, "Space: ", countSpace, "Dot: ", countDot);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
332
6
Gpt3D_Clone332_6.java 1 24
Gpt3D_Clone332_6.java 25 42
----------------------------------------

public static void main (String [] args) {
    String test = "The quick brown fox jumped over the lazy dog.";
    int countA = 0, countO = 0, countSpace = 0, countDot = 0;
    for (int i = 0;
    i < test.length (); i ++) {
        switch (test.charAt (i)) {
            case 'a' :
            case 'A' :
                countA ++;
                break;
            case 'o' :
            case 'O' :
                countO ++;
                break;
            case ' ' :
                countSpace ++;
                break;
            case '.' :
                countDot ++;
                break;
        }
    }
    System.out.printf ("%s%d%n%s%d%n%s%d%n%s%d", "A: ", countA, "O: ", countO, "Space: ", countSpace, "Dot: ", countDot);
}
----------------------------------------

  public static void main (String [] args) {
        String test = "The quick brown fox jumped over the lazy dog.";
        int countA = 0, countO = 0, countSpace = 0, countDot = 0;
        for (int i = 0; i < test.length(); i++ ) {
            if(test.charAt(i) == 'a' || test.charAt(i) == 'A') {
                countA++;
            }else if(test.charAt(i) == 'o' || test.charAt(i) == 'O') {
                countO++;
            }else if(test.charAt(i) == ' ') {
                countSpace ++;
            }else if(test.charAt(i) == '.') {
                countDot ++;
            }
        }
        System.out.printf ("%s%d%n%s%d%n%s%d%n%s%d", "A: ", countA, "O: ", countO, "Space: ", countSpace, "Dot: ", countDot);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
336
0
Gpt3D_Clone336_0.java 1 15
Gpt3D_Clone336_0.java 16 39
----------------------------------------

public static void main (String [] args) {
    String name = "AnuvratAnuvra";
    char [] arr = name.toCharArray ();
    HashMap < Character, Integer > map = new HashMap < Character, Integer > ();
    for (char val : arr) {
        map.put (val, map.containsKey (val) ? map.get (val) + 1 : 1);
    }
    for (Entry < Character, Integer > entry : map.entrySet ()) {
        if (entry.getValue () > 1) {
            Character key = entry.getKey ();
            Object value = entry.getValue ();
            System.out.println (key + ":" + value);
        }
    }
}
----------------------------------------

 public static void main (String [] args) {
    String name = "AnuvratAnuvra";
    char [] arr = name.toCharArray ();
    HashMap < Character, Integer > map = new HashMap < Character, Integer > (); 
    for (int i=0; i < arr.length; i++) {
        char currentChar = arr[i];
        if (!map.containsKey(currentChar)) {
            map.put(currentChar, 1);
        } else {
            int currentValue = map.get(currentChar);
            map.put(currentChar, ++currentValue);
        }
    }
    Set<Entry<Character,Integer>> set=map.entrySet();
    for(Entry<Character,Integer>entry:set){
        if(entry.getValue()>1){
            Character key=entry.getKey();
            Object value=entry.getValue();
            System.out.println(key+":"+value);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
336
1
Gpt3D_Clone336_1.java 1 15
Gpt3D_Clone336_1.java 16 39
----------------------------------------

public static void main (String [] args) {
    String name = "AnuvratAnuvra";
    char [] arr = name.toCharArray ();
    HashMap < Character, Integer > map = new HashMap < Character, Integer > ();
    for (char val : arr) {
        map.put (val, map.containsKey (val) ? map.get (val) + 1 : 1);
    }
    for (Entry < Character, Integer > entry : map.entrySet ()) {
        if (entry.getValue () > 1) {
            Character key = entry.getKey ();
            Object value = entry.getValue ();
            System.out.println (key + ":" + value);
        }
    }
}
----------------------------------------

 public static void main (String [] args) {
    String name = "AnuvratAnuvra";
    char [] arr = name.toCharArray();
    Map<Character, Integer> charMap=new HashMap<Character, Integer>();
    for (int i = 0; i < arr.length; i++) {
        Character c = arr[i];
        if (charMap.containsKey(c)) {
            int count = charMap.get(c);
            charMap.put(c, ++count);
        } else {
            charMap.put(c, 1);
        }
    }
    Set<Map.Entry<Character, Integer>> entrySet = charMap.entrySet();
    for (Map.Entry<Character, Integer> entry : entrySet) {
        if (entry.getValue() > 1) {
            Character key = entry.getKey();
            Object value = entry.getValue();
            System.out.println(key + ":" +value);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
336
2
Gpt3D_Clone336_2.java 1 15
Gpt3D_Clone336_2.java 16 38
----------------------------------------

public static void main (String [] args) {
    String name = "AnuvratAnuvra";
    char [] arr = name.toCharArray ();
    HashMap < Character, Integer > map = new HashMap < Character, Integer > ();
    for (char val : arr) {
        map.put (val, map.containsKey (val) ? map.get (val) + 1 : 1);
    }
    for (Entry < Character, Integer > entry : map.entrySet ()) {
        if (entry.getValue () > 1) {
            Character key = entry.getKey ();
            Object value = entry.getValue ();
            System.out.println (key + ":" + value);
        }
    }
}
----------------------------------------

 public static void main (String [] args) {
    String name = "AnuvratAnuvra";
    char [] arr = name.toCharArray ();
    HashMap < Character, Integer > map = new HashMap < Character, Integer > (); 
    for (int i = 0; i < arr.length; i++) {
        if (map.containsKey(arr[i])) {
            int value = map.get(arr[i]);
            map.put(arr[i], ++value);
        } else {
            map.put(arr[i], 1);
        }
    }
    Set<Entry<Character,Integer>> set=map.entrySet();
    for(Entry<Character,Integer>entry:set){
        if(entry.getValue()>1){
            Character key=entry.getKey();
            Object value=entry.getValue();
            System.out.println(key+":"+value);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
336
3
Gpt3D_Clone336_3.java 1 15
Gpt3D_Clone336_3.java 16 38
----------------------------------------

public static void main (String [] args) {
    String name = "AnuvratAnuvra";
    char [] arr = name.toCharArray ();
    HashMap < Character, Integer > map = new HashMap < Character, Integer > ();
    for (char val : arr) {
        map.put (val, map.containsKey (val) ? map.get (val) + 1 : 1);
    }
    for (Entry < Character, Integer > entry : map.entrySet ()) {
        if (entry.getValue () > 1) {
            Character key = entry.getKey ();
            Object value = entry.getValue ();
            System.out.println (key + ":" + value);
        }
    }
}
----------------------------------------

 public static void main (String [] args) {
    String name = "AnuvratAnuvra";
    char [] arr = name.toCharArray ();
    HashMap < Character, Integer > map = new HashMap < Character, Integer > ();
    for (int i = 0; i < arr.length; i++){
        char currentChar = arr[i];
        if (map.containsKey(currentChar)){
            int count = map.get(currentChar);
            map.put(currentChar, ++count);
        } else {
            map.put(currentChar, 1);
        }
    }
    for (Map.Entry<Character, Integer> entry : map.entrySet()){
        if (entry.getValue() > 1){
            Character key = entry.getKey();
            Object value = entry.getValue();
            System.out.println(key+":"+value);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
336
8
Gpt3D_Clone336_8.java 1 15
Gpt3D_Clone336_8.java 16 35
----------------------------------------

public static void main (String [] args) {
    String name = "AnuvratAnuvra";
    char [] arr = name.toCharArray ();
    HashMap < Character, Integer > map = new HashMap < Character, Integer > ();
    for (char val : arr) {
        map.put (val, map.containsKey (val) ? map.get (val) + 1 : 1);
    }
    for (Entry < Character, Integer > entry : map.entrySet ()) {
        if (entry.getValue () > 1) {
            Character key = entry.getKey ();
            Object value = entry.getValue ();
            System.out.println (key + ":" + value);
        }
    }
}
----------------------------------------

 public static void main (String [] args) {
    String name = "AnuvratAnuvra";
    char [] arr = name.toCharArray ();
    HashMap < Character, Integer > map = new HashMap < Character, Integer > ();
    for (int i = 0; i < arr.length; i++){
        if (map.containsKey(arr[i])){
            int currentValue = map.get(arr[i]);
            map.put(arr[i], ++currentValue);
        } else {
            map.put(arr[i], 1);
        }
    }
    map.forEach((k,v)->{
        if(v>1){
            System.out.println(k+":"+v);
        }
    });
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
336
9
Gpt3D_Clone336_9.java 1 15
Gpt3D_Clone336_9.java 16 35
----------------------------------------

public static void main (String [] args) {
    String name = "AnuvratAnuvra";
    char [] arr = name.toCharArray ();
    HashMap < Character, Integer > map = new HashMap < Character, Integer > ();
    for (char val : arr) {
        map.put (val, map.containsKey (val) ? map.get (val) + 1 : 1);
    }
    for (Entry < Character, Integer > entry : map.entrySet ()) {
        if (entry.getValue () > 1) {
            Character key = entry.getKey ();
            Object value = entry.getValue ();
            System.out.println (key + ":" + value);
        }
    }
}
----------------------------------------

 public static void main (String [] args) {
    String name = "AnuvratAnuvra";
    char [] arr = name.toCharArray ();
    HashMap < Character, Integer > map = new HashMap < Character, Integer > ();
    for (int i = 0; i < arr.length; i++){
        if (map.containsKey(arr[i])){
            int currentValue = map.get(arr[i]);
            map.put(arr[i], ++currentValue);
        } else {
            map.put(arr[i], 1);
        }
    }
    for (Character key : map.keySet()){
        if (map.get(key) > 1){
            System.out.println(key + ":" + map.get(key));
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
340
0
Gpt3D_Clone340_0.java 1 15
Gpt3D_Clone340_0.java 16 36
----------------------------------------

public static void main (String [] args) {
    String name = "AnuvratAnuvra";
    char [] arr = name.toCharArray ();
    HashMap < Character, Integer > map = new HashMap < Character, Integer > ();
    for (char val : arr) {
        map.put (val, map.containsKey (val) ? map.get (val) + 1 : 1);
    }
    for (Entry < Character, Integer > entry : map.entrySet ()) {
        if (entry.getValue () > 1) {
            Character key = entry.getKey ();
            Object value = entry.getValue ();
            System.out.println (key + ":" + value);
        }
    }
}
----------------------------------------

 public static void main (String [] args) { 
    String name = "AnuvratAnuvra"; 
    char [] arr = name.toCharArray (); 
    Map<Character, Integer> duplicates = new HashMap<Character, Integer>(); 
    for (int i = 0; i < arr.length; i++) { 
        if (duplicates.containsKey(arr[i])) { 
            int count = duplicates.get(arr[i]); 
            count++; 
            duplicates.put(arr[i],count); 
        } 
        else { 
            duplicates.put(arr[i],1); 
        } 
    } 
    for (Map.Entry<Character, Integer> entr: duplicates.entrySet()) { 
        if (entr.getValue() > 1) 
            System.out.println(entr.getKey() + " : " + entr.getValue()); 
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
340
1
Gpt3D_Clone340_1.java 1 15
Gpt3D_Clone340_1.java 16 35
----------------------------------------

public static void main (String [] args) {
    String name = "AnuvratAnuvra";
    char [] arr = name.toCharArray ();
    HashMap < Character, Integer > map = new HashMap < Character, Integer > ();
    for (char val : arr) {
        map.put (val, map.containsKey (val) ? map.get (val) + 1 : 1);
    }
    for (Entry < Character, Integer > entry : map.entrySet ()) {
        if (entry.getValue () > 1) {
            Character key = entry.getKey ();
            Object value = entry.getValue ();
            System.out.println (key + ":" + value);
        }
    }
}
----------------------------------------

 public static void main (String [] args) {
    String name = "AnuvratAnuvra";
    char [] arr = name.toCharArray (); 
    LinkedHashMap < Character, Integer > hmap = new LinkedHashMap < Character, Integer > (); 
    for (char key : arr) {
        if (hmap.containsKey (key)) {
            int value = hmap.get (key);
            hmap.put (key, value + 1); 
        }  
        else {
            hmap.put (key, 1); 
        }
    } 
    for (Map.Entry < Character, Integer > val : hmap.entrySet ()) {
        if (val.getValue () > 1) 
            System.out.println(val.getKey () + " : " + val.getValue ()); 
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
340
2
Gpt3D_Clone340_2.java 1 15
Gpt3D_Clone340_2.java 16 35
----------------------------------------

public static void main (String [] args) {
    String name = "AnuvratAnuvra";
    char [] arr = name.toCharArray ();
    HashMap < Character, Integer > map = new HashMap < Character, Integer > ();
    for (char val : arr) {
        map.put (val, map.containsKey (val) ? map.get (val) + 1 : 1);
    }
    for (Entry < Character, Integer > entry : map.entrySet ()) {
        if (entry.getValue () > 1) {
            Character key = entry.getKey ();
            Object value = entry.getValue ();
            System.out.println (key + ":" + value);
        }
    }
}
----------------------------------------

 public static void main (String [] args) {
    Map<Character, Integer> map = new HashMap<Character, Integer>();
    String name = "AnuvratAnuvra";
    for (int i=0; i<name.length (); i++) {
        char key = name.charAt (i);
        if (map.containsKey(key)){
            map.put (key, map.get(key) + 1);
        }
        else { 
            map.put (key, 1);
        }
    }
    for (Map.Entry<Character, Integer> entry : map.entrySet()){
        if (entry.getValue () > 1) {
            System.out.println (entry.getKey () + " : " + entry.getValue ());
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
340
3
Gpt3D_Clone340_3.java 1 15
Gpt3D_Clone340_3.java 16 35
----------------------------------------

public static void main (String [] args) {
    String name = "AnuvratAnuvra";
    char [] arr = name.toCharArray ();
    HashMap < Character, Integer > map = new HashMap < Character, Integer > ();
    for (char val : arr) {
        map.put (val, map.containsKey (val) ? map.get (val) + 1 : 1);
    }
    for (Entry < Character, Integer > entry : map.entrySet ()) {
        if (entry.getValue () > 1) {
            Character key = entry.getKey ();
            Object value = entry.getValue ();
            System.out.println (key + ":" + value);
        }
    }
}
----------------------------------------

 public static void main (String [] args) { 
    String name = "AnuvratAnuvra"; 
    char [] arr = name.toCharArray (); 
    Map<Character, Integer> uniqueChar = new HashMap<Character, Integer>(); 
    for (int i = 0; i < arr.length; i++) { 
        if (uniqueChar.containsKey(arr[i])) { 
            int count = uniqueChar.get(arr[i]); 
            uniqueChar.put(arr[i], count + 1); 
        } 
        else { 
            uniqueChar.put(arr[i], 1); 
        } 
    } 
    for (Map.Entry<Character, Integer> entr: uniqueChar.entrySet()) { 
        if (entr.getValue() > 1) 
            System.out.println(entr.getKey() + " : " + entr.getValue()); 
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
340
4
Gpt3D_Clone340_4.java 1 15
Gpt3D_Clone340_4.java 16 35
----------------------------------------

public static void main (String [] args) {
    String name = "AnuvratAnuvra";
    char [] arr = name.toCharArray ();
    HashMap < Character, Integer > map = new HashMap < Character, Integer > ();
    for (char val : arr) {
        map.put (val, map.containsKey (val) ? map.get (val) + 1 : 1);
    }
    for (Entry < Character, Integer > entry : map.entrySet ()) {
        if (entry.getValue () > 1) {
            Character key = entry.getKey ();
            Object value = entry.getValue ();
            System.out.println (key + ":" + value);
        }
    }
}
----------------------------------------

 public static void main (String [] args) { 
    String name = "AnuvratAnuvra"; 
    char [] arr = name.toCharArray (); 
    Map<Character, Integer> count = new HashMap<Character, Integer>(); 
    for (int i = 0; i < arr.length; i++) { 
        if (count.containsKey(arr[i])) { 
            int val = count.get(arr[i]); 
            count.put(arr[i], val + 1); 
        } 
        else { 
            count.put(arr[i], 1); 
        } 
    } 
    for (Map.Entry<Character, Integer> entry : count.entrySet()) { 
        if (entry.getValue() > 1) 
            System.out.println(entry.getKey() + " : " + entry.getValue()); 
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
340
5
Gpt3D_Clone340_5.java 1 15
Gpt3D_Clone340_5.java 16 31
----------------------------------------

public static void main (String [] args) {
    String name = "AnuvratAnuvra";
    char [] arr = name.toCharArray ();
    HashMap < Character, Integer > map = new HashMap < Character, Integer > ();
    for (char val : arr) {
        map.put (val, map.containsKey (val) ? map.get (val) + 1 : 1);
    }
    for (Entry < Character, Integer > entry : map.entrySet ()) {
        if (entry.getValue () > 1) {
            Character key = entry.getKey ();
            Object value = entry.getValue ();
            System.out.println (key + ":" + value);
        }
    }
}
----------------------------------------

 public static void main (String [] args) { 
    String name = "AnuvratAnuvra"; 
    char [] arr = name.toCharArray (); 
    Map<Character, Integer> charSet = new HashMap<Character, Integer>(); 
    for (char letter : arr) { 
        int count = charSet.containsKey(letter) ? charSet.get(letter) : 0; 
        charSet.put(letter, count + 1); 
    } 
    for (Character key : charSet.keySet()) { 
        if (charSet.get(key) > 1) { 
            System.out.println(key + " : " + charSet.get(key)); 
        } 
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
340
6
Gpt3D_Clone340_6.java 1 15
Gpt3D_Clone340_6.java 16 32
----------------------------------------

public static void main (String [] args) {
    String name = "AnuvratAnuvra";
    char [] arr = name.toCharArray ();
    HashMap < Character, Integer > map = new HashMap < Character, Integer > ();
    for (char val : arr) {
        map.put (val, map.containsKey (val) ? map.get (val) + 1 : 1);
    }
    for (Entry < Character, Integer > entry : map.entrySet ()) {
        if (entry.getValue () > 1) {
            Character key = entry.getKey ();
            Object value = entry.getValue ();
            System.out.println (key + ":" + value);
        }
    }
}
----------------------------------------

 public static void main (String [] args) {
    String name = "AnuvratAnuvra";
    char [] arr = name.toCharArray ();
    for(int i=0; i<arr.length; i++) {
        int count=1;
        for(int j=i+1; j<arr.length; j++) {
            if(arr[i] == arr[j]) {
                count++;
            }
        }
        if(count>1) {
            System.out.println(arr[i] + " : " + count);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
340
7
Gpt3D_Clone340_7.java 1 15
Gpt3D_Clone340_7.java 16 31
----------------------------------------

public static void main (String [] args) {
    String name = "AnuvratAnuvra";
    char [] arr = name.toCharArray ();
    HashMap < Character, Integer > map = new HashMap < Character, Integer > ();
    for (char val : arr) {
        map.put (val, map.containsKey (val) ? map.get (val) + 1 : 1);
    }
    for (Entry < Character, Integer > entry : map.entrySet ()) {
        if (entry.getValue () > 1) {
            Character key = entry.getKey ();
            Object value = entry.getValue ();
            System.out.println (key + ":" + value);
        }
    }
}
----------------------------------------

 public static void main (String [] args) {
    int[] charSet = new int[128]; 
    String name = "AnuvratAnuvra";
    char [] arr = name.toCharArray ();
    for (char c : arr) {
        int index = (int) c;  
         if (charSet[index] == 0) { 
            charSet[index] += 1; 
        }  
        else {  
            System.out.println(c + " : " + charSet[index] + 1);
        }  
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
340
8
Gpt3D_Clone340_8.java 1 15
Gpt3D_Clone340_8.java 16 30
----------------------------------------

public static void main (String [] args) {
    String name = "AnuvratAnuvra";
    char [] arr = name.toCharArray ();
    HashMap < Character, Integer > map = new HashMap < Character, Integer > ();
    for (char val : arr) {
        map.put (val, map.containsKey (val) ? map.get (val) + 1 : 1);
    }
    for (Entry < Character, Integer > entry : map.entrySet ()) {
        if (entry.getValue () > 1) {
            Character key = entry.getKey ();
            Object value = entry.getValue ();
            System.out.println (key + ":" + value);
        }
    }
}
----------------------------------------

 public static void main (String [] args) {
    boolean[] repeat = new boolean[128]; 
    String name = "AnuvratAnuvra"; 
    char[] arr = name.toCharArray (); 
    for (char val : arr) { 
        if (repeat[val] == false) { 
            repeat[val] = true;
        }
        else {
            System.out.println(val + " : 2"); 
        } 
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
340
9
Gpt3D_Clone340_9.java 1 15
Gpt3D_Clone340_9.java 16 27
----------------------------------------

public static void main (String [] args) {
    String name = "AnuvratAnuvra";
    char [] arr = name.toCharArray ();
    HashMap < Character, Integer > map = new HashMap < Character, Integer > ();
    for (char val : arr) {
        map.put (val, map.containsKey (val) ? map.get (val) + 1 : 1);
    }
    for (Entry < Character, Integer > entry : map.entrySet ()) {
        if (entry.getValue () > 1) {
            Character key = entry.getKey ();
            Object value = entry.getValue ();
            System.out.println (key + ":" + value);
        }
    }
}
----------------------------------------

 public static void main (String [] args) {
    Map<Character, Integer> map = new HashMap<Character, Integer>();
    String name = "AnuvratAnuvra";
    for (char c : name.toCharArray()) {
        map.merge(c, 1, Integer::sum);
    }
    for(Map.Entry<Character, Integer> entry : map.entrySet())
        if (entry.getValue() > 1)
            System.out.println(entry.getKey() + ": " + entry.getValue());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
341
5
Gpt3D_Clone341_5.java 1 24
Gpt3D_Clone341_5.java 25 51
----------------------------------------

public static void main (String [] args) {
    String test = "The quick brown fox jumped over the lazy dog.";
    int countA = 0, countO = 0, countSpace = 0, countDot = 0;
    for (int i = 0;
    i < test.length (); i ++) {
        switch (test.charAt (i)) {
            case 'a' :
            case 'A' :
                countA ++;
                break;
            case 'o' :
            case 'O' :
                countO ++;
                break;
            case ' ' :
                countSpace ++;
                break;
            case '.' :
                countDot ++;
                break;
        }
    }
    System.out.printf ("%s%d%n%s%d%n%s%d%n%s%d", "A: ", countA, "O: ", countO, "Space: ", countSpace, "Dot: ", countDot);
}
----------------------------------------

 public static void main(String [] args) {
    String test = "The quick brown fox jumped over the lazy dog.";
    int countA = 0;
    int countO = 0; 
    int countSpace = 0;
    int countDot = 0;
  for (int i = 0; i < test.length(); i++) {
        char c = test.charAt(i);
        if(c == 'a' || c == 'A') {
            countA++;
        } else if (c == 'o' || c == 'O') {
            countO++;
        } else if (c == ' ') {
            countSpace++;
        } else if (c == '.') {
            countDot++;
        }
    }
    System.out.println("A: " + countA);
    System.out.println("O: " + countO);
    System.out.println("Space: "+ countSpace);
    System.out.println("Dot: " + countDot);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
341
6
Gpt3D_Clone341_6.java 1 24
Gpt3D_Clone341_6.java 25 50
----------------------------------------

public static void main (String [] args) {
    String test = "The quick brown fox jumped over the lazy dog.";
    int countA = 0, countO = 0, countSpace = 0, countDot = 0;
    for (int i = 0;
    i < test.length (); i ++) {
        switch (test.charAt (i)) {
            case 'a' :
            case 'A' :
                countA ++;
                break;
            case 'o' :
            case 'O' :
                countO ++;
                break;
            case ' ' :
                countSpace ++;
                break;
            case '.' :
                countDot ++;
                break;
        }
    }
    System.out.printf ("%s%d%n%s%d%n%s%d%n%s%d", "A: ", countA, "O: ", countO, "Space: ", countSpace, "Dot: ", countDot);
}
----------------------------------------

 public static void main(String [] args) {
    String test = "The quick brown fox jumped over the lazy dog.";
    int countA = 0;
    int countO = 0; 
    int countSpace = 0;
    int countDot = 0;
    for (int i = 0; i < test.length(); i++) {
        if (test.charAt(i) == 'a' || test.charAt(i) == 'A') {
            countA++;
        } else if (test.charAt(i) == 'o' || test.charAt(i) == 'O') {
            countO++;
        } else if (test.charAt(i) == ' ') {
            countSpace++;
        } else if (test.charAt(i) == '.') {
            countDot++; 
        }
    }
    System.out.println("A : " + countA);
    System.out.println("O : " + countO);
    System.out.println("Space : "+ countSpace);
    System.out.println("Dot : " + countDot);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
341
7
Gpt3D_Clone341_7.java 1 24
Gpt3D_Clone341_7.java 25 54
----------------------------------------

public static void main (String [] args) {
    String test = "The quick brown fox jumped over the lazy dog.";
    int countA = 0, countO = 0, countSpace = 0, countDot = 0;
    for (int i = 0;
    i < test.length (); i ++) {
        switch (test.charAt (i)) {
            case 'a' :
            case 'A' :
                countA ++;
                break;
            case 'o' :
            case 'O' :
                countO ++;
                break;
            case ' ' :
                countSpace ++;
                break;
            case '.' :
                countDot ++;
                break;
        }
    }
    System.out.printf ("%s%d%n%s%d%n%s%d%n%s%d", "A: ", countA, "O: ", countO, "Space: ", countSpace, "Dot: ", countDot);
}
----------------------------------------

 public static void main(String [] args) {
    String test = "The quick brown fox jumped over the lazy dog.";
    int countA = 0;
    int countO = 0; 
    int countSpace = 0;
    int countDot = 0;
    for(int i = 0; i < test.length(); i++) {
        if (test.charAt(i) == 'A' || test.charAt(i) == 'a') {
            countA++; 
        }
        else if (test.charAt(i) == 'O' || test.charAt(i) == 'o') {
            countO++;
        }
        else if (test.charAt(i) == ' ') {
            countSpace++;
        }
        else if (test.charAt(i) == '.') {
            countDot++; 
        }
    }
    System.out.printf("A: %d\n", countA);
    System.out.printf("O: %d\n",countO);
    System.out.printf("Space: %d\n",countSpace);
    System.out.printf("Dot: %d\n",countDot);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
341
8
Gpt3D_Clone341_8.java 1 24
Gpt3D_Clone341_8.java 25 49
----------------------------------------

public static void main (String [] args) {
    String test = "The quick brown fox jumped over the lazy dog.";
    int countA = 0, countO = 0, countSpace = 0, countDot = 0;
    for (int i = 0;
    i < test.length (); i ++) {
        switch (test.charAt (i)) {
            case 'a' :
            case 'A' :
                countA ++;
                break;
            case 'o' :
            case 'O' :
                countO ++;
                break;
            case ' ' :
                countSpace ++;
                break;
            case '.' :
                countDot ++;
                break;
        }
    }
    System.out.printf ("%s%d%n%s%d%n%s%d%n%s%d", "A: ", countA, "O: ", countO, "Space: ", countSpace, "Dot: ", countDot);
}
----------------------------------------

public static void main(String [] args) {
    String test = "The quick brown fox jumped over the lazy dog.";
    int countA = 0;
    int countO = 0; 
    int countSpace = 0;
    int countDot = 0;
    for (int i = 0; i < test.length(); i++) {
        if (test.charAt(i) == 'a' || test.charAt(i) == 'A') 
            countA++;
        else if (test.charAt(i) == 'o' || test.charAt(i) == 'O') 
            countO++;
        else if (test.charAt(i) == ' ') 
            countSpace++;
        else if (test.charAt(i) == '.')
            countDot++;
    }
    System.out.println("A: " + countA);
    System.out.println("O: " + countO);
    System.out.println("Space: "+ countSpace);
    System.out.println("Dot: " + countDot);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
342
0
Gpt3D_Clone342_0.java 1 21
Gpt3D_Clone342_0.java 22 53
----------------------------------------

public static void main (String...a) {
    System.out.print ("Enter the String");
    Scanner sc = new Scanner (System.in);
    String st = sc.nextLine ();
    int [] ar = new int [256];
    for (int i = 0;
    i < st.length (); i ++) {
        ar [st.charAt (i)] = ar [st.charAt (i)] + 1;
    }
    for (int i = 0;
    i < 256; i ++) {
        char ch = (char) i;
        if (ar [i] > 0) {
            if (ar [i] == 1) {
                System.out.print (ch);
            } else {
                System.out.print (ch + "" + ar [i]);
            }
        }
    }
}
----------------------------------------

 public static void main (String...a) {
    System.out.print ("Enter the String:");
    Scanner sc = new Scanner (System.in);
    String st = sc.nextLine ();
    int [] ar = new int [st.length ()];
    for (int i = 0; i < st.length (); i++) {
        char ch = st.charAt(i);
        int count = 0;
        for (int j = 0; j < st.length (); j++) {
            if (st.charAt (i) == st.charAt (j)) {
                count++; 
            }
        }
        ar [i] = count;
    }
    for (int i = 0; i < st.length (); i++) {
        char ch = st.charAt (i);
        int count = 0;
        for (int j = 0; j < st.length (); j++) {
            if (ch == st.charAt (j)) {
                count++;
            }
        }
        if (count == 1) {
            System.out.print (ch);
        } else {
            System.out.print (ch + ""+ count);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
342
1
Gpt3D_Clone342_1.java 1 21
Gpt3D_Clone342_1.java 22 49
----------------------------------------

public static void main (String...a) {
    System.out.print ("Enter the String");
    Scanner sc = new Scanner (System.in);
    String st = sc.nextLine ();
    int [] ar = new int [256];
    for (int i = 0;
    i < st.length (); i ++) {
        ar [st.charAt (i)] = ar [st.charAt (i)] + 1;
    }
    for (int i = 0;
    i < 256; i ++) {
        char ch = (char) i;
        if (ar [i] > 0) {
            if (ar [i] == 1) {
                System.out.print (ch);
            } else {
                System.out.print (ch + "" + ar [i]);
            }
        }
    }
}
----------------------------------------

 public static void main (String...a) {
    System.out.print ("Enter the String:");
    Scanner sc = new Scanner (System.in);
    String st = sc.nextLine ();
    Set<Character> set = new HashSet<Character>();
    int [] ar = new int [st.length ()];
    for (int i = 0; i < st.length (); i++) {
        if (!set.contains (st.charAt (i))) {
            set.add (st.charAt (i));
            ar [i]++;
            for (int j = i + 1; j < st.length (); j++) {
                if (st.charAt (i) == st.charAt (j)) {
                    ar [i]++;
                }
            }
        }
    }
    for (int i = 0; i < set.size (); i++) {
        char ch = st.charAt (i);
        if (ar [i] == 1) {
            System.out.print (ch);
        } else {
            System.out.print (ch + "" + ar [i]);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
342
2
Gpt3D_Clone342_2.java 1 21
Gpt3D_Clone342_2.java 22 47
----------------------------------------

public static void main (String...a) {
    System.out.print ("Enter the String");
    Scanner sc = new Scanner (System.in);
    String st = sc.nextLine ();
    int [] ar = new int [256];
    for (int i = 0;
    i < st.length (); i ++) {
        ar [st.charAt (i)] = ar [st.charAt (i)] + 1;
    }
    for (int i = 0;
    i < 256; i ++) {
        char ch = (char) i;
        if (ar [i] > 0) {
            if (ar [i] == 1) {
                System.out.print (ch);
            } else {
                System.out.print (ch + "" + ar [i]);
            }
        }
    }
}
----------------------------------------

 public static void main (String...a) {
    System.out.print ("Enter the String:");
    Scanner sc = new Scanner (System.in);
    String st = sc.nextLine ();
    char [] chArray = st.toCharArray ();
    int [] intArray = new int [st.length ()];
    for (int i = 0; i < st.length (); i++) {
        int count = 0;
        for (int j = 0; j < st.length (); j++) {
            if (st.charAt (i) == chArray [j]) {
                count++; 
            }
        }
        intArray [i] = count;
    }
    for (int i = 0; i < chArray.length; i++) {
        char ch = st.charAt (i);
        if (intArray [i] == 1) {
            System.out.print (ch);
        } else {
            System.out.print (ch + "" + intArray [i]);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
342
5
Gpt3D_Clone342_5.java 1 21
Gpt3D_Clone342_5.java 22 45
----------------------------------------

public static void main (String...a) {
    System.out.print ("Enter the String");
    Scanner sc = new Scanner (System.in);
    String st = sc.nextLine ();
    int [] ar = new int [256];
    for (int i = 0;
    i < st.length (); i ++) {
        ar [st.charAt (i)] = ar [st.charAt (i)] + 1;
    }
    for (int i = 0;
    i < 256; i ++) {
        char ch = (char) i;
        if (ar [i] > 0) {
            if (ar [i] == 1) {
                System.out.print (ch);
            } else {
                System.out.print (ch + "" + ar [i]);
            }
        }
    }
}
----------------------------------------

 public static void main (String...a) {
    System.out.print ("Enter the String:");
    Scanner sc = new Scanner (System.in);
    String st = sc.nextLine ();
    Map<Character, Integer> map = new HashMap<Character, Integer>();
    for (int i = 0; i < st.length (); i++){
        char ch = st.charAt (i);
        //Check if the character already exists in the map
       if (map.containsKey(ch)) {
            int count = map.get (ch);
            map.put (ch, ++count);
            //Put the character and the incremented count in the Map
        }
        else {
            //If the character does not exist, put it and make the count as 1
            map.put (ch, 1);
        }
    }
    for (Map.Entry entry : map.entrySet ()) {
        System.out.print (entry.getKey () + "" + entry.getValue ());
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
342
6
Gpt3D_Clone342_6.java 1 21
Gpt3D_Clone342_6.java 22 43
----------------------------------------

public static void main (String...a) {
    System.out.print ("Enter the String");
    Scanner sc = new Scanner (System.in);
    String st = sc.nextLine ();
    int [] ar = new int [256];
    for (int i = 0;
    i < st.length (); i ++) {
        ar [st.charAt (i)] = ar [st.charAt (i)] + 1;
    }
    for (int i = 0;
    i < 256; i ++) {
        char ch = (char) i;
        if (ar [i] > 0) {
            if (ar [i] == 1) {
                System.out.print (ch);
            } else {
                System.out.print (ch + "" + ar [i]);
            }
        }
    }
}
----------------------------------------

 public static void main (String...a) {
    System.out.print ("Enter the String:");
    Scanner sc = new Scanner (System.in);
    String st = sc.nextLine ();
    Map<Character, Integer> map = new HashMap<>();
    for (int i = 0; i < st.length (); i++) {  
        //Checking whether the map contains the character 'st.charAt(i)'
        if (map.containsKey(st.charAt(i))) {
            int count = map.get(st.charAt(i));
            map.put(st.charAt(i), ++count);
            //Put the character 'st.charAt (i)' and the incremented count in the Map
        } else {    
            //If the character does not exist, put it and make the count as 1
            map.put(st.charAt(i), 1);
        }
    }
    for (Map.Entry entry: map.entrySet()) {
        System.out.print(entry.getKey() + "" + entry.getValue());
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
343
0
Gpt3D_Clone343_0.java 1 24
Gpt3D_Clone343_0.java 25 45
----------------------------------------

public static void main (String [] args) {
    String test = "The quick brown fox jumped over the lazy dog.";
    int countA = 0, countO = 0, countSpace = 0, countDot = 0;
    for (int i = 0;
    i < test.length (); i ++) {
        switch (test.charAt (i)) {
            case 'a' :
            case 'A' :
                countA ++;
                break;
            case 'o' :
            case 'O' :
                countO ++;
                break;
            case ' ' :
                countSpace ++;
                break;
            case '.' :
                countDot ++;
                break;
        }
    }
    System.out.printf ("%s%d%n%s%d%n%s%d%n%s%d", "A: ", countA, "O: ", countO, "Space: ", countSpace, "Dot: ", countDot);
}
----------------------------------------

  public static void main (String [] args) {
    String test = "The quick brown fox jumped over the lazy dog.";
    int countA = 0, countO = 0, countSpace = 0, countDot = 0;
    for (int i = 0; i < test.length (); i ++) {
        if(test.charAt (i) == 'a' || test.charAt (i) =='A'){
            countA++;
        }
        else if(test.charAt (i) == 'o' || test.charAt (i) =='O'){
            countO ++;
        }
        else if(test.charAt (i) == ' '){
            countSpace++;
        }
        else if(test.charAt (i) == '.'){
            countDot++;
        }
    }
    System.out.printf ("%s%d%n%s%d%n%s%d%n%s%d", "A: ", countA, "O: ", countO, "Space: ", countSpace, "Dot: ", countDot);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
344
0
Gpt3D_Clone344_0.java 1 21
Gpt3D_Clone344_0.java 22 40
----------------------------------------

public static void main (String...a) {
    System.out.print ("Enter the String");
    Scanner sc = new Scanner (System.in);
    String st = sc.nextLine ();
    int [] ar = new int [256];
    for (int i = 0;
    i < st.length (); i ++) {
        ar [st.charAt (i)] = ar [st.charAt (i)] + 1;
    }
    for (int i = 0;
    i < 256; i ++) {
        char ch = (char) i;
        if (ar [i] > 0) {
            if (ar [i] == 1) {
                System.out.print (ch);
            } else {
                System.out.print (ch + "" + ar [i]);
            }
        }
    }
}
----------------------------------------

 public static void main(String...a) {
    System.out.println("Enter the String");
    Scanner sc = new Scanner(System.in);
	 String str = sc.nextLine();
	int[] count = new int[256]; 
	for(int i = 0;i < str.length();i++)
	   count[str.charAt(i)]++; 
	for (int i = 0;i < 256; i++) {
	    if (count[i] > 0) {  
	        char ch = (char)i; 
	        if (count[i] == 1) 
	            System.out.print(ch);
	        else
	           System.out.print(ch + "" + count[i]);
	    } 
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
345
1
Gpt3D_Clone345_1.java 1 24
Gpt3D_Clone345_1.java 25 53
----------------------------------------

public static void main (String [] args) {
    String test = "The quick brown fox jumped over the lazy dog.";
    int countA = 0, countO = 0, countSpace = 0, countDot = 0;
    for (int i = 0;
    i < test.length (); i ++) {
        switch (test.charAt (i)) {
            case 'a' :
            case 'A' :
                countA ++;
                break;
            case 'o' :
            case 'O' :
                countO ++;
                break;
            case ' ' :
                countSpace ++;
                break;
            case '.' :
                countDot ++;
                break;
        }
    }
    System.out.printf ("%s%d%n%s%d%n%s%d%n%s%d", "A: ", countA, "O: ", countO, "Space: ", countSpace, "Dot: ", countDot);
}
----------------------------------------

	public static void main(String[] args) {
		String test = "The quick brown fox jumped over the lazy dog.";
		int countA = 0, countO = 0, countSpace = 0, countDot = 0;
		for (int i = 0; i < test.length(); i++) {
			char c = test.charAt(i);
			if (c == 'a') {
				countA++;
			}
			if (c == 'A') {
				countA++;
			}
			if (c == 'o') {
				countO++;
			}
			if (c == 'O') {
				countO++;
			}
			if (c == ' ') {
				countSpace++;
			}
			if (c == '.') {
				countDot++;
			}
		}
		System.out.printf("%s%d%n%s%d%n%s%d%n%s%d", "A: ", countA, "O: ", countO, "Space: ", countSpace, "Dot: ", countDot);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
345
2
Gpt3D_Clone345_2.java 1 24
Gpt3D_Clone345_2.java 25 43
----------------------------------------

public static void main (String [] args) {
    String test = "The quick brown fox jumped over the lazy dog.";
    int countA = 0, countO = 0, countSpace = 0, countDot = 0;
    for (int i = 0;
    i < test.length (); i ++) {
        switch (test.charAt (i)) {
            case 'a' :
            case 'A' :
                countA ++;
                break;
            case 'o' :
            case 'O' :
                countO ++;
                break;
            case ' ' :
                countSpace ++;
                break;
            case '.' :
                countDot ++;
                break;
        }
    }
    System.out.printf ("%s%d%n%s%d%n%s%d%n%s%d", "A: ", countA, "O: ", countO, "Space: ", countSpace, "Dot: ", countDot);
}
----------------------------------------

	public static void main(String[] args) {
		String test = "The quick brown fox jumped over the lazy dog.";
		int countA = 0, countO = 0, countSpace = 0, countDot = 0;
		for (int i = 0; i < test.length(); i++) {
			char c = test.charAt(i);
			if (c == 'a' || c == 'A') {
				countA++;
			} else if (c == 'o' || c == 'O') {
				countO++;
			} else if (c == ' ') {
				countSpace++;
			} else if (c == '.') {
				countDot++;
			}
		}
		System.out.printf("%s%d%n%s%d%n%s%d%n%s%d", "A: ", countA, "O: ", countO, "Space: ", countSpace, "Dot: ", countDot);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
345
3
Gpt3D_Clone345_3.java 1 24
Gpt3D_Clone345_3.java 25 42
----------------------------------------

public static void main (String [] args) {
    String test = "The quick brown fox jumped over the lazy dog.";
    int countA = 0, countO = 0, countSpace = 0, countDot = 0;
    for (int i = 0;
    i < test.length (); i ++) {
        switch (test.charAt (i)) {
            case 'a' :
            case 'A' :
                countA ++;
                break;
            case 'o' :
            case 'O' :
                countO ++;
                break;
            case ' ' :
                countSpace ++;
                break;
            case '.' :
                countDot ++;
                break;
        }
    }
    System.out.printf ("%s%d%n%s%d%n%s%d%n%s%d", "A: ", countA, "O: ", countO, "Space: ", countSpace, "Dot: ", countDot);
}
----------------------------------------

	public static void main(String[] args) {
		String test = "The quick brown fox jumped over the lazy dog.";
		int countA = 0, countO = 0, countSpace = 0, countDot = 0;
		for (int i = 0; i < test.length(); i++) {
			if (test.substring(i, i + 1).equalsIgnoreCase("a")) {
				countA++;
			} else if (test.substring(i, i + 1).equalsIgnoreCase("o")) {
				countO++;
			} else if (test.substring(i, i + 1).equals(" ")) {
				countSpace++;
			} else if (test.substring(i, i + 1).equals(".")) {
				countDot++;
			}
		}
		System.out.printf("%s%d%n%s%d%n%s%d%n%s%d", "A: ", countA, "O: ", countO, "Space: ", countSpace, "Dot: ", countDot);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
345
4
Gpt3D_Clone345_4.java 1 24
Gpt3D_Clone345_4.java 25 45
----------------------------------------

public static void main (String [] args) {
    String test = "The quick brown fox jumped over the lazy dog.";
    int countA = 0, countO = 0, countSpace = 0, countDot = 0;
    for (int i = 0;
    i < test.length (); i ++) {
        switch (test.charAt (i)) {
            case 'a' :
            case 'A' :
                countA ++;
                break;
            case 'o' :
            case 'O' :
                countO ++;
                break;
            case ' ' :
                countSpace ++;
                break;
            case '.' :
                countDot ++;
                break;
        }
    }
    System.out.printf ("%s%d%n%s%d%n%s%d%n%s%d", "A: ", countA, "O: ", countO, "Space: ", countSpace, "Dot: ", countDot);
}
----------------------------------------

	public static void main(String[] args) {
		String test = "The quick brown fox jumped over the lazy dog.";
		int countA = 0, countO = 0, countSpace = 0, countDot = 0;
		for (int i = 0; i < test.length(); i++) {
			if (test.charAt(i) == 'a' || test.charAt(i) == 'A') {
				countA += 1;
			}
			else if (test.charAt(i) == 'o' || test.charAt(i) == 'O') {
				countO += 1;
			}
			else if (test.charAt(i) == ' ') {
				countSpace += 1;
			}
			else if (test.charAt(i) == '.') {
				countDot += 1;
			}
		}
		System.out.printf("%s%d%n%s%d%n%s%d%n%s%d", "A: ", countA, "O: ", countO, "Space: ", countSpace, "Dot: ", countDot);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
345
5
Gpt3D_Clone345_5.java 1 24
Gpt3D_Clone345_5.java 25 43
----------------------------------------

public static void main (String [] args) {
    String test = "The quick brown fox jumped over the lazy dog.";
    int countA = 0, countO = 0, countSpace = 0, countDot = 0;
    for (int i = 0;
    i < test.length (); i ++) {
        switch (test.charAt (i)) {
            case 'a' :
            case 'A' :
                countA ++;
                break;
            case 'o' :
            case 'O' :
                countO ++;
                break;
            case ' ' :
                countSpace ++;
                break;
            case '.' :
                countDot ++;
                break;
        }
    }
    System.out.printf ("%s%d%n%s%d%n%s%d%n%s%d", "A: ", countA, "O: ", countO, "Space: ", countSpace, "Dot: ", countDot);
}
----------------------------------------

	public static void main(String[] args) {
		String test = "The quick brown fox jumped over the lazy dog.";
		int countA = 0, countO = 0, countSpace = 0, countDot = 0;
		for (int i = 0; i < test.length(); i++) {
			if (test.charAt(i) == 'a' || test.charAt(i) == 'A') {
				countA++;
			} else if (test.charAt(i) == 'o' || test.charAt(i) == 'O') {
				countO++;
			} else if (test.charAt(i) == ' ') {
				countSpace++;
			} else if (test.charAt(i) == '.') {
				countDot++;
			}
		}
		System.out.printf("%s%d%n%s%d%n%s%d%n%s%d", "A: ", countA, "O: ", countO, "Space: ", countSpace, "Dot: ", countDot);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
345
6
Gpt3D_Clone345_6.java 1 24
Gpt3D_Clone345_6.java 25 46
----------------------------------------

public static void main (String [] args) {
    String test = "The quick brown fox jumped over the lazy dog.";
    int countA = 0, countO = 0, countSpace = 0, countDot = 0;
    for (int i = 0;
    i < test.length (); i ++) {
        switch (test.charAt (i)) {
            case 'a' :
            case 'A' :
                countA ++;
                break;
            case 'o' :
            case 'O' :
                countO ++;
                break;
            case ' ' :
                countSpace ++;
                break;
            case '.' :
                countDot ++;
                break;
        }
    }
    System.out.printf ("%s%d%n%s%d%n%s%d%n%s%d", "A: ", countA, "O: ", countO, "Space: ", countSpace, "Dot: ", countDot);
}
----------------------------------------

    public static void main(String[] args) {
      String test = "The quick brown fox jumped over the lazy dog.";
      int countA = 0, countO = 0, countSpace = 0, countDot = 0;
      for (int i = 0; i < test.length(); i++) {
          if (test.charAt(i) == 'a' || test.charAt(i) == 'A') {
              countA++;
          }
          else if (test.charAt(i) == 'o' || test.charAt(i) == 'O') {
              countO++;
          }
          else if (test.charAt(i) == ' ') {
            countSpace++;
          }
          else if (test.charAt(i) == '.') {
            countDot++;
          }
      }
      System.out.printf("%s%d%n%s%d%n%s%d%n%s%d", "A: ", countA, "O: ", countO, "Space: ", countSpace, "Dot: ", countDot);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
345
7
Gpt3D_Clone345_7.java 1 24
Gpt3D_Clone345_7.java 25 45
----------------------------------------

public static void main (String [] args) {
    String test = "The quick brown fox jumped over the lazy dog.";
    int countA = 0, countO = 0, countSpace = 0, countDot = 0;
    for (int i = 0;
    i < test.length (); i ++) {
        switch (test.charAt (i)) {
            case 'a' :
            case 'A' :
                countA ++;
                break;
            case 'o' :
            case 'O' :
                countO ++;
                break;
            case ' ' :
                countSpace ++;
                break;
            case '.' :
                countDot ++;
                break;
        }
    }
    System.out.printf ("%s%d%n%s%d%n%s%d%n%s%d", "A: ", countA, "O: ", countO, "Space: ", countSpace, "Dot: ", countDot);
}
----------------------------------------

	public static void main(String[] args) {
		String test = "The quick brown fox jumped over the lazy dog.";
		int countA = 0, countO = 0, countSpace = 0, countDot = 0;
		for (int i = 0; i < test.length(); i++) {
			if (test.charAt(i) == 'a' || test.charAt(i) == 'A') {
				countA++;
			}
			else if (test.charAt(i) == 'o' || test.charAt(i) == 'O') {
				countO++;
			}
			else if (test.charAt(i) == ' ') {
				countSpace++;
			}
			else if (test.charAt(i) == '.') {
				countDot++;
			}
		}
		System.out.format("%s%d%n%s%d%n%s%d%n%s%d", "A: ", countA, "O: ", countO, "Space: ", countSpace, "Dot: ", countDot);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
348
1
Gpt3D_Clone348_1.java 1 14
Gpt3D_Clone348_1.java 15 29
----------------------------------------

public void processRow (ResultSet rs) throws SQLException {
    Long id = rs.getLong ("CUSTOMER_ID");
    Customer customer = map.get (id);
    if (customer != null) {
        List ordersList = customer.getOrders ();
        if (ordersList == null) {
            ordersList = new ArrayList < Order > ();
            customer.setOrders (ordersList);
        }
        Order order = new Order ();
        order.setId (rs.getLong ("ORDER_ID"));
        ordersList.add (order);
    }
}
----------------------------------------

  public void processRow (ResultSet rs) throws SQLException {
    long customerId = rs.getLong ("CUSTOMER_ID");
    Customer customer = map.get (customerId); 
    if (customer != null) {
        if (customer.getOrders () == null) {
            customer.setOrders (new ArrayList < Order > ());
        }
        Order order = new Order ();
        order.setCustomerId(customerId);
        order.setId (rs.getLong ("ORDER_ID"));
        customer.getOrders ().add (order);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
348
2
Gpt3D_Clone348_2.java 1 14
Gpt3D_Clone348_2.java 15 29
----------------------------------------

public void processRow (ResultSet rs) throws SQLException {
    Long id = rs.getLong ("CUSTOMER_ID");
    Customer customer = map.get (id);
    if (customer != null) {
        List ordersList = customer.getOrders ();
        if (ordersList == null) {
            ordersList = new ArrayList < Order > ();
            customer.setOrders (ordersList);
        }
        Order order = new Order ();
        order.setId (rs.getLong ("ORDER_ID"));
        ordersList.add (order);
    }
}
----------------------------------------

  public void processRow (ResultSet rs) throws SQLException {
    long customerId = rs.getLong ("CUSTOMER_ID");
    Customer customer = map.get (customerId);
    if (customer != null) {
        if (customer.getOrders () == null) {
            customer.setOrders (new ArrayList < Order > ());
        }
        Order order = new Order ();
        order.setCustomerId(customerId);
        order.setId (rs.getLong ("ORDER_ID"));
        customer.getOrders ().add (order);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
348
5
Gpt3D_Clone348_5.java 1 14
Gpt3D_Clone348_5.java 15 28
----------------------------------------

public void processRow (ResultSet rs) throws SQLException {
    Long id = rs.getLong ("CUSTOMER_ID");
    Customer customer = map.get (id);
    if (customer != null) {
        List ordersList = customer.getOrders ();
        if (ordersList == null) {
            ordersList = new ArrayList < Order > ();
            customer.setOrders (ordersList);
        }
        Order order = new Order ();
        order.setId (rs.getLong ("ORDER_ID"));
        ordersList.add (order);
    }
}
----------------------------------------

  public void processRow (ResultSet rs) throws SQLException {
    long customerId = rs.getLong ("CUSTOMER_ID");
    Customer customer = map.get (customerId); 
    if(customer != null) {
        if(customer.getOrders() == null) {
            customer.setOrders(new ArrayList < Order > ());
        }
        long orderId = rs.getLong ("ORDER_ID");
        Order order = new Order (orderId);
        customer.getOrders().add(order);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
348
7
Gpt3D_Clone348_7.java 1 14
Gpt3D_Clone348_7.java 15 28
----------------------------------------

public void processRow (ResultSet rs) throws SQLException {
    Long id = rs.getLong ("CUSTOMER_ID");
    Customer customer = map.get (id);
    if (customer != null) {
        List ordersList = customer.getOrders ();
        if (ordersList == null) {
            ordersList = new ArrayList < Order > ();
            customer.setOrders (ordersList);
        }
        Order order = new Order ();
        order.setId (rs.getLong ("ORDER_ID"));
        ordersList.add (order);
    }
}
----------------------------------------

 public void processRow (ResultSet rs) throws SQLException {
    Long id = rs.getLong ("CUSTOMER_ID");
    Customer customer = map.get (id);
    if (customer != null) {
        if (customer.getOrders () == null) {
            customer.setOrders (new ArrayList < Order > ());
        }
        long orderId = rs.getLong ("ORDER_ID");
        Order order = new Order (orderId, id);
        customer.getOrders().add(order);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
34
0
Gpt3D_Clone34_0.java 1 9
Gpt3D_Clone34_0.java 10 26
----------------------------------------

boolean isPrime (int x) {
    for (int i = 2;
    i * i <= x; i ++) {
        if (x % i == 0) {
            return false;
        }
    }
    return true;
}
----------------------------------------

 boolean isPrime (int x) {
    if (x == 1)
        return false;
    if (x == 2) {
        return true;
    } else if (x % 2 == 0) {
        return false;
    }
    for (int i = 3; i * i <= x; i += 2) {
        if (x % i == 0) {
            return false;
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
34
1
Gpt3D_Clone34_1.java 1 9
Gpt3D_Clone34_1.java 10 23
----------------------------------------

boolean isPrime (int x) {
    for (int i = 2;
    i * i <= x; i ++) {
        if (x % i == 0) {
            return false;
        }
    }
    return true;
}
----------------------------------------

  boolean isPrime (int x) {
    if (x == 1)
        return false;
    int i = 2;
    while (i * i <= x) {
        if (x % i == 0) {
            return false;
        }
        i++;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
34
2
Gpt3D_Clone34_2.java 1 9
Gpt3D_Clone34_2.java 10 23
----------------------------------------

boolean isPrime (int x) {
    for (int i = 2;
    i * i <= x; i ++) {
        if (x % i == 0) {
            return false;
        }
    }
    return true;
}
----------------------------------------

 boolean isPrime (int x) {
    if (x == 1) 
        return false;
    int i = 2;
    do {
        if (x % i == 0)
            return false;
        i++;
    }
    while (i * i <= x);
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
34
4
Gpt3D_Clone34_4.java 1 9
Gpt3D_Clone34_4.java 10 21
----------------------------------------

boolean isPrime (int x) {
    for (int i = 2;
    i * i <= x; i ++) {
        if (x % i == 0) {
            return false;
        }
    }
    return true;
}
----------------------------------------

 boolean isPrime (int x) {
    if (x == 1) 
        return false;
    for (int i = 2; i * i <= x;){
        if (x % i == 0)
            return false;
        i++;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
34
5
Gpt3D_Clone34_5.java 1 9
Gpt3D_Clone34_5.java 10 21
----------------------------------------

boolean isPrime (int x) {
    for (int i = 2;
    i * i <= x; i ++) {
        if (x % i == 0) {
            return false;
        }
    }
    return true;
}
----------------------------------------

 boolean isPrime (int x) {
    if (x == 1) 
        return false;
    for (int i = 2; i * i <= x; i += 2) {
        if (x % i == 0)
            return false;
        i++;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
34
6
Gpt3D_Clone34_6.java 1 9
Gpt3D_Clone34_6.java 10 21
----------------------------------------

boolean isPrime (int x) {
    for (int i = 2;
    i * i <= x; i ++) {
        if (x % i == 0) {
            return false;
        }
    }
    return true;
}
----------------------------------------

 boolean isPrime (int x) {
    if (x == 1) 
        return false;
    int sqrtX = (int)Math.sqrt(x);
    for (int i = 2; i <= sqrtX; ++i) { 
        if (x % i == 0)
            return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
34
7
Gpt3D_Clone34_7.java 1 9
Gpt3D_Clone34_7.java 10 21
----------------------------------------

boolean isPrime (int x) {
    for (int i = 2;
    i * i <= x; i ++) {
        if (x % i == 0) {
            return false;
        }
    }
    return true;
}
----------------------------------------

 boolean isPrime (int x) {
    if (x == 1) 
        return false;
    if (x == 2 || x == 3 || x == 5)
        return true;
    if (x % 2 == 0 || x % 3 == 0 || x % 5 == 0)
        return false;
    else
        return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
34
8
Gpt3D_Clone34_8.java 1 9
Gpt3D_Clone34_8.java 10 18
----------------------------------------

boolean isPrime (int x) {
    for (int i = 2;
    i * i <= x; i ++) {
        if (x % i == 0) {
            return false;
        }
    }
    return true;
}
----------------------------------------

 boolean isPrime (int x) {
    for (int i = 2; i * i <= x - 1; i ++) {
        if (x % i == 0)
            return false;
     }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
354
0
Gpt3D_Clone354_0.java 1 22
Gpt3D_Clone354_0.java 23 63
----------------------------------------

public static void main (String [] args) {
    double [] [] data = {{97, 36, 79}, {94, 74, 60}, {68, 76, 58}, {64, 87, 56}, {68, 27, 73}, {74, 99, 42}, {7, 93, 87}, {51, 69, 40}, {38, 23, 33}, {57, 86, 31}};
    double data1 [] = new double [data.length];
    double data2 [] = new double [data.length];
    double data3 [] = new double [data.length];
    for (int x = 0;
    x < data.length; x ++) {
        for (int y = 0;
        y < data [x].length; y ++) {
            if (y == 0) data1 [x] = data [x] [y];
            else if (y == 1) data2 [x] = data [x] [y];
            else if (y == 2) data3 [x] = data [x] [y];
        }
    }
    for (int i = 0;
    i < data1.length; i ++) {
        System.out.print (data1 [i] + " ");
        System.out.print (data2 [i] + " ");
        System.out.print (data3 [i] + " ");
        System.out.println ();
    }
}
----------------------------------------

  public static void main (String [] args) { 
        double [] [] data = {{97, 36, 79}, {94, 74, 60}, {68, 76, 58}, {64, 87, 56}, {68, 27, 73}, {74, 99, 42}, {7, 93, 87}, {51, 69, 40}, {38, 23, 33}, {57, 86, 31}};
        int row = data.length;
        int col = data[0].length;
        double data1[] = new double[row];
        double data2[] = new double[row];
        double data3[] = new double[row];
        double temp;
       
        for (int i=0;i<row;i++) {
            data1[i] = data[i][0];
            data2[i] = data[i][1];
            data3[i] = data[i][2];
        }
       
        for (int i=0;i<row;i++) {
            for (int j=0;j<col;j++) {
                if (data1[i]>data2[i]) {
                    temp=data1[i];
                    data1[i]=data2[i];
                    data2[i]=temp;
                }
           
                if (data2[i]>data3[i]) {
                    temp=data2[i];
                    data2[i]=data3[i];
                    data3[i]=temp;
                }
            }
        }
       
        for (int i=0;i<row;i++) {
            System.out.print(data1[i]+" ");
            System.out.print(data2[i]+" ");
            System.out.print(data3[i]+" ");
            System.out.println();
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
354
1
Gpt3D_Clone354_1.java 1 22
Gpt3D_Clone354_1.java 23 62
----------------------------------------

public static void main (String [] args) {
    double [] [] data = {{97, 36, 79}, {94, 74, 60}, {68, 76, 58}, {64, 87, 56}, {68, 27, 73}, {74, 99, 42}, {7, 93, 87}, {51, 69, 40}, {38, 23, 33}, {57, 86, 31}};
    double data1 [] = new double [data.length];
    double data2 [] = new double [data.length];
    double data3 [] = new double [data.length];
    for (int x = 0;
    x < data.length; x ++) {
        for (int y = 0;
        y < data [x].length; y ++) {
            if (y == 0) data1 [x] = data [x] [y];
            else if (y == 1) data2 [x] = data [x] [y];
            else if (y == 2) data3 [x] = data [x] [y];
        }
    }
    for (int i = 0;
    i < data1.length; i ++) {
        System.out.print (data1 [i] + " ");
        System.out.print (data2 [i] + " ");
        System.out.print (data3 [i] + " ");
        System.out.println ();
    }
}
----------------------------------------

 public static void main (String [] args) { 
        double [] [] data = {{97, 36, 79}, {94, 74, 60}, {68, 76, 58}, {64, 87, 56}, {68, 27, 73}, {74, 99, 42}, {7, 93, 87}, {51, 69, 40}, {38, 23, 33}, {57, 86, 31}};
        int row = data.length;
        int col = data[0].length;
        double data1[] = new double[row];
        double data2[] = new double[row];
        double data3[] = new double[row];
        double temp;
       
        for (int i=0;i<row;i++) {
            data1[i] = data[i][0];
            data2[i] = data[i][1];
            data3[i] = data[i][2];
        }
       
        for (int i=0;i<row;i++) {
            for (int j=0;j<col;j++) {
                if (data1[i]>data2[i]) {
                    temp=data1[i];
                    data1[i]=data2[i];
                    data2[i]=temp;
                }
           
                if (data2[i]<data3[i]) {
                    temp=data3[i];
                    data3[i]=data2[i];
                    data2[i]=temp;
                }
            }
        }
       
        for (int i=0;i<row;i++) {
            System.out.print(data1[i]+" ");
            System.out.print(data2[i]+" ");
            System.out.print(data3[i]+" ");
            System.out.println();
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
354
2
Gpt3D_Clone354_2.java 1 22
Gpt3D_Clone354_2.java 23 62
----------------------------------------

public static void main (String [] args) {
    double [] [] data = {{97, 36, 79}, {94, 74, 60}, {68, 76, 58}, {64, 87, 56}, {68, 27, 73}, {74, 99, 42}, {7, 93, 87}, {51, 69, 40}, {38, 23, 33}, {57, 86, 31}};
    double data1 [] = new double [data.length];
    double data2 [] = new double [data.length];
    double data3 [] = new double [data.length];
    for (int x = 0;
    x < data.length; x ++) {
        for (int y = 0;
        y < data [x].length; y ++) {
            if (y == 0) data1 [x] = data [x] [y];
            else if (y == 1) data2 [x] = data [x] [y];
            else if (y == 2) data3 [x] = data [x] [y];
        }
    }
    for (int i = 0;
    i < data1.length; i ++) {
        System.out.print (data1 [i] + " ");
        System.out.print (data2 [i] + " ");
        System.out.print (data3 [i] + " ");
        System.out.println ();
    }
}
----------------------------------------

 public static void main (String [] args) { 
        double [] [] data = {{97, 36, 79}, {94, 74, 60}, {68, 76, 58}, {64, 87, 56}, {68, 27, 73}, {74, 99, 42}, {7, 93, 87}, {51, 69, 40}, {38, 23, 33}, {57, 86, 31}};
        int row = data.length;
        int col = data[0].length;
        double data1[] = new double[data.length];
        double data2[] = new double[data.length];
        double data3[] = new double[data.length];
        double temp;
       
        for (int i=0;i<row;i++) {
            data1[i] = data[i][0];
            data2[i] = data[i][1];
            data3[i] = data[i][2];
        }
       
        for (int i=0;i<row;i++) {
            for (int j=0;j<col-1;j++) {
                if (data1[i]<data2[i]) {
                    temp=data2[i];
                    data2[i]=data1[i];
                    data1[i]=temp;
                }
           
                if (data2[i]<data3[i]) {
                    temp=data3[i];
                    data3[i]=data2[i];
                    data2[i]=temp;
                }
            }
        }
       
        for (int i=0;i<row;i++) {
            System.out.print(data1[i]+" ");
            System.out.print(data2[i]+" ");
            System.out.print(data3[i]+" ");
            System.out.println();
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
354
3
Gpt3D_Clone354_3.java 1 22
Gpt3D_Clone354_3.java 23 62
----------------------------------------

public static void main (String [] args) {
    double [] [] data = {{97, 36, 79}, {94, 74, 60}, {68, 76, 58}, {64, 87, 56}, {68, 27, 73}, {74, 99, 42}, {7, 93, 87}, {51, 69, 40}, {38, 23, 33}, {57, 86, 31}};
    double data1 [] = new double [data.length];
    double data2 [] = new double [data.length];
    double data3 [] = new double [data.length];
    for (int x = 0;
    x < data.length; x ++) {
        for (int y = 0;
        y < data [x].length; y ++) {
            if (y == 0) data1 [x] = data [x] [y];
            else if (y == 1) data2 [x] = data [x] [y];
            else if (y == 2) data3 [x] = data [x] [y];
        }
    }
    for (int i = 0;
    i < data1.length; i ++) {
        System.out.print (data1 [i] + " ");
        System.out.print (data2 [i] + " ");
        System.out.print (data3 [i] + " ");
        System.out.println ();
    }
}
----------------------------------------

  public static void main (String [] args) {
        double [] [] data = {{97, 36, 79}, {94, 74, 60}, {68, 76, 58}, {64, 87, 56}, {68, 27, 73}, {74, 99, 42}, {7, 93, 87}, {51, 69, 40}, {38, 23, 33}, {57, 86, 31}};
        int row = data.length;
        int col = data[0].length;
        double data1[] = new double[row];
        double data2[] = new double[row];
        double data3[] = new double[row];
        double temp;
       
        for (int i=0;i<row;i++) {
            data1[i] = data[i][0];
            data2[i] = data[i][1];
            data3[i] = data[i][2];
        }
       
        for (int i=0;i<row;i++) {
            for (int j=1;j<col;j++) {
                if (data1[i]>data2[i]) {
                    temp=data1[i];
                    data1[i]=data2[i];
                    data2[i]=temp;
                }
           
                if (data2[i]>data3[i]) {
                    temp=data2[i];
                    data2[i]=data3[i];
                    data3[i]=temp;
                }
            }
        }
       
        for (int i=0;i<row;i++) {
            System.out.print(data1[i]+" ");
            System.out.print(data2[i]+" ");
            System.out.print(data3[i]+" ");
            System.out.println();
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
354
4
Gpt3D_Clone354_4.java 1 22
Gpt3D_Clone354_4.java 23 62
----------------------------------------

public static void main (String [] args) {
    double [] [] data = {{97, 36, 79}, {94, 74, 60}, {68, 76, 58}, {64, 87, 56}, {68, 27, 73}, {74, 99, 42}, {7, 93, 87}, {51, 69, 40}, {38, 23, 33}, {57, 86, 31}};
    double data1 [] = new double [data.length];
    double data2 [] = new double [data.length];
    double data3 [] = new double [data.length];
    for (int x = 0;
    x < data.length; x ++) {
        for (int y = 0;
        y < data [x].length; y ++) {
            if (y == 0) data1 [x] = data [x] [y];
            else if (y == 1) data2 [x] = data [x] [y];
            else if (y == 2) data3 [x] = data [x] [y];
        }
    }
    for (int i = 0;
    i < data1.length; i ++) {
        System.out.print (data1 [i] + " ");
        System.out.print (data2 [i] + " ");
        System.out.print (data3 [i] + " ");
        System.out.println ();
    }
}
----------------------------------------

 public static void main (String [] args) { 
        double [] [] data = {{97, 36, 79}, {94, 74, 60}, {68, 76, 58}, {64, 87, 56}, {68, 27, 73}, {74, 99, 42}, {7, 93, 87}, {51, 69, 40}, {38, 23, 33}, {57, 86, 31}};
        int row = data.length;
        int col = data[0].length;
        double data1[] = new double[data.length];
        double data2[] = new double[data.length];
        double data3[] = new double[data.length];
        double temp;
       
        for (int i=0;i<row;i++) {
            data1[i] = data[i][0];
            data2[i] = data[i][1];
            data3[i] = data[i][2];
        }
       
        for (int i=0;i<row;i++) {
            for (int j=0;j<col-1;j++) {
                if (data1[i]>data2[i]) {
                    temp=data1[i];
                    data1[i]=data2[i];
                    data2[i]=temp;
                }
           
                if (data2[i]>data3[i]) {
                    temp=data2[i];
                    data2[i]=data3[i];
                    data3[i]=temp;
                }
            }
        }
       
        for (int i=0;i<row;i++) {
            System.out.print(data1[i]+" ");
            System.out.print(data2[i]+" ");
            System.out.print(data3[i]+" ");
            System.out.println();
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
354
5
Gpt3D_Clone354_5.java 1 22
Gpt3D_Clone354_5.java 23 62
----------------------------------------

public static void main (String [] args) {
    double [] [] data = {{97, 36, 79}, {94, 74, 60}, {68, 76, 58}, {64, 87, 56}, {68, 27, 73}, {74, 99, 42}, {7, 93, 87}, {51, 69, 40}, {38, 23, 33}, {57, 86, 31}};
    double data1 [] = new double [data.length];
    double data2 [] = new double [data.length];
    double data3 [] = new double [data.length];
    for (int x = 0;
    x < data.length; x ++) {
        for (int y = 0;
        y < data [x].length; y ++) {
            if (y == 0) data1 [x] = data [x] [y];
            else if (y == 1) data2 [x] = data [x] [y];
            else if (y == 2) data3 [x] = data [x] [y];
        }
    }
    for (int i = 0;
    i < data1.length; i ++) {
        System.out.print (data1 [i] + " ");
        System.out.print (data2 [i] + " ");
        System.out.print (data3 [i] + " ");
        System.out.println ();
    }
}
----------------------------------------

  public static void main (String [] args) {
        double [] [] data = {{97, 36, 79}, {94, 74, 60}, {68, 76, 58}, {64, 87, 56}, {68, 27, 73}, {74, 99, 42}, {7, 93, 87}, {51, 69, 40}, {38, 23, 33}, {57, 86, 31}};
        int row = data.length;
        int col = data[0].length;
        double data1[] = new double[row];
        double data2[] = new double[row];
        double data3[] = new double[row];
        double temp;
       
        for (int i=0;i<row;i++) {
            data1[i] = data[i][0];
            data2[i] = data[i][1];
            data3[i] = data[i][2];
        }
       
        for (int i=0;i<row;i++) {
            for (int j=0;j<col;j++) {
                if (data1[i]<data2[i]) {
                    temp=data2[i];
                    data2[i]=data1[i];
                    data1[i]=temp;
                }
           
                if (data2[i]<data3[i]) {
                    temp=data3[i];
                    data3[i]=data2[i];
                    data2[i]=temp;
                }
            }
        }
       
        for (int i=0;i<row;i++) {
            System.out.print(data1[i]+" ");
            System.out.print(data2[i]+" ");
            System.out.print(data3[i]+" ");
            System.out.println();
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
354
6
Gpt3D_Clone354_6.java 1 22
Gpt3D_Clone354_6.java 23 61
----------------------------------------

public static void main (String [] args) {
    double [] [] data = {{97, 36, 79}, {94, 74, 60}, {68, 76, 58}, {64, 87, 56}, {68, 27, 73}, {74, 99, 42}, {7, 93, 87}, {51, 69, 40}, {38, 23, 33}, {57, 86, 31}};
    double data1 [] = new double [data.length];
    double data2 [] = new double [data.length];
    double data3 [] = new double [data.length];
    for (int x = 0;
    x < data.length; x ++) {
        for (int y = 0;
        y < data [x].length; y ++) {
            if (y == 0) data1 [x] = data [x] [y];
            else if (y == 1) data2 [x] = data [x] [y];
            else if (y == 2) data3 [x] = data [x] [y];
        }
    }
    for (int i = 0;
    i < data1.length; i ++) {
        System.out.print (data1 [i] + " ");
        System.out.print (data2 [i] + " ");
        System.out.print (data3 [i] + " ");
        System.out.println ();
    }
}
----------------------------------------

  public static void main (String [] args) { 
        double [] [] data = {{97, 36, 79}, {94, 74, 60}, {68, 76, 58}, {64, 87, 56}, {68, 27, 73}, {74, 99, 42}, {7, 93, 87}, {51, 69, 40}, {38, 23, 33}, {57, 86, 31}};
        int row = data.length;
        int col = data[0].length;
        double data1[] = new double[row];
        double data2[] = new double[row];
        double data3[] = new double[row];
       
        for (int i=0;i<row;i++) {
            data1[i] = data[i][0];
            data2[i] = data[i][1];
            data3[i] = data[i][2];
        }
       
        for (int i=0;i<row;i++) {
            for (int j=0;j<col;j++) {
                if (data1[i]>data2[i]) {
                    double temp=data1[i];
                    data1[i]=data2[i];
                    data2[i]=temp;
                }
           
                else if (data2[i]>data3[i]) {
                    double temp=data2[i];
                    data2[i]=data3[i];
                    data3[i]=temp;
                }
            }
        }
       
        for (int i=0;i<row;i++) {
            System.out.print(data1[i]+" ");
            System.out.print(data2[i]+" ");
            System.out.print(data3[i]+" ");
            System.out.println();
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
354
7
Gpt3D_Clone354_7.java 1 22
Gpt3D_Clone354_7.java 23 59
----------------------------------------

public static void main (String [] args) {
    double [] [] data = {{97, 36, 79}, {94, 74, 60}, {68, 76, 58}, {64, 87, 56}, {68, 27, 73}, {74, 99, 42}, {7, 93, 87}, {51, 69, 40}, {38, 23, 33}, {57, 86, 31}};
    double data1 [] = new double [data.length];
    double data2 [] = new double [data.length];
    double data3 [] = new double [data.length];
    for (int x = 0;
    x < data.length; x ++) {
        for (int y = 0;
        y < data [x].length; y ++) {
            if (y == 0) data1 [x] = data [x] [y];
            else if (y == 1) data2 [x] = data [x] [y];
            else if (y == 2) data3 [x] = data [x] [y];
        }
    }
    for (int i = 0;
    i < data1.length; i ++) {
        System.out.print (data1 [i] + " ");
        System.out.print (data2 [i] + " ");
        System.out.print (data3 [i] + " ");
        System.out.println ();
    }
}
----------------------------------------

  public static void main (String [] args) { 
        double [] [] data = {{97, 36, 79}, {94, 74, 60}, {68, 76, 58}, {64, 87, 56}, {68, 27, 73}, {74, 99, 42}, {7, 93, 87}, {51, 69, 40}, {38, 23, 33}, {57, 86, 31}};
        int row = data.length;
        double data1[] = new double[row];
        double data2[] = new double[row];
        double data3[] = new double[row];
        double temp;
       
        for (int i=0;i<row;i++) {
            data1[i] = data[i][0];
            data2[i] = data[i][1];
            data3[i] = data[i][2];
        }
       
        for (int i=0;i<row;i++) {
            if (data1[i]>data2[i]) {
                temp=data1[i];
                data1[i]=data2[i];
                data2[i]=temp;
            }
           
            if (data2[i]>data3[i]) {
                temp=data2[i];
                data2[i]=data3[i];
                data3[i]=temp;
            } 
        }
       
        for (int i=0;i<row;i++) {
            System.out.print(data1[i]+" ");
            System.out.print(data2[i]+" ");
            System.out.print(data3[i]+" ");
            System.out.println();
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
357
1
Gpt3D_Clone357_1.java 1 18
Gpt3D_Clone357_1.java 19 42
----------------------------------------

public static void main (String [] args) {
    int [] A = {9, 5, 4, 3, 2, 1, 34, 53};
    int [] B = new int [A.length];
    int [] C = new int [A.length];
    int t = 4;
    int countb = 0;
    int countc = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] <= t) {
            B [countb ++] = A [i];
        } else {
            C [countc ++] = A [i];
        }
    }
    System.out.println (Arrays.toString (B));
    System.out.println (Arrays.toString (C));
}
----------------------------------------

public static void main (String [] args) {
    int [] A = {9, 5, 4, 3, 2, 1, 34, 53};
    int t = 4;
    int[] B = new int[A.length];
    int[] C = new int[A.length];
    int bCounter = 0;
    int cCounter = 0;
    for (int i = 0;i < A.length;i++) {
        if (A[i] < t) {
            B[bCounter] = A[i];
            bCounter++;
        } else {
            C[cCounter] = A[i];
            cCounter++;
        }
    }
    System.out.println("Elements below 4: " + Arrays.toString(B));
    System.out.println("Elements above 4: " + Arrays.toString(C));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
357
2
Gpt3D_Clone357_2.java 1 18
Gpt3D_Clone357_2.java 19 42
----------------------------------------

public static void main (String [] args) {
    int [] A = {9, 5, 4, 3, 2, 1, 34, 53};
    int [] B = new int [A.length];
    int [] C = new int [A.length];
    int t = 4;
    int countb = 0;
    int countc = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] <= t) {
            B [countb ++] = A [i];
        } else {
            C [countc ++] = A [i];
        }
    }
    System.out.println (Arrays.toString (B));
    System.out.println (Arrays.toString (C));
}
----------------------------------------

public static void main (String [] args) {
    int [] A = {9, 5, 4, 3, 2, 1, 34, 53};
    int threshold = 4;
    int[] B = new int[A.length];
    int[] C = new int[A.length];
    int bCounter = 0;
    int cCounter = 0;
    for (int i = 0;i < A.length;i++){
        if (A[i] > threshold) {
            C[cCounter] = A[i];
            cCounter++;
        } else {
            B[bCounter] = A[i];
            bCounter++;
        }
    }
    System.out.println("Values Lower than Threshold : " + Arrays.toString(B));
    System.out.println("Values Greater than Threshold : " + Arrays.toString(C));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
357
3
Gpt3D_Clone357_3.java 1 18
Gpt3D_Clone357_3.java 19 42
----------------------------------------

public static void main (String [] args) {
    int [] A = {9, 5, 4, 3, 2, 1, 34, 53};
    int [] B = new int [A.length];
    int [] C = new int [A.length];
    int t = 4;
    int countb = 0;
    int countc = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] <= t) {
            B [countb ++] = A [i];
        } else {
            C [countc ++] = A [i];
        }
    }
    System.out.println (Arrays.toString (B));
    System.out.println (Arrays.toString (C));
}
----------------------------------------

  
public static void main (String [] args) {
    int[] A = {9, 5, 4, 3, 2, 1, 34, 53};
    int t = 4;
    int[] B = new int[A.length];
    int[] C = new int[A.length];
    int bCounter = 0;
    int cCounter = 0;
    for (int i = 0;i < A.length;i++){
        if (A[i] < t) {
            B[bCounter] = A[i];
            bCounter++;
        } else {
            C[cCounter] = A[i];
            cCounter++;
        }
    }
    System.out.println("Smaller than t" + Arrays.toString(B));
    System.out.println("Larger than t" + Arrays.toString(C));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
357
6
Gpt3D_Clone357_6.java 1 18
Gpt3D_Clone357_6.java 19 42
----------------------------------------

public static void main (String [] args) {
    int [] A = {9, 5, 4, 3, 2, 1, 34, 53};
    int [] B = new int [A.length];
    int [] C = new int [A.length];
    int t = 4;
    int countb = 0;
    int countc = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] <= t) {
            B [countb ++] = A [i];
        } else {
            C [countc ++] = A [i];
        }
    }
    System.out.println (Arrays.toString (B));
    System.out.println (Arrays.toString (C));
}
----------------------------------------

 
public static void main (String [] args) {
    int [] A = {9, 5, 4, 3, 2, 1, 34, 53};
    int t = 4;
    int[] B = new int[A.length];
    int[] C = new int[A.length];
    int bCounter = 0;
    int cCounter = 0;
    for (int i = 0;i < A.length;i++) {
        if (A[i] >= t) {
            C[cCounter] = A[i];
            cCounter++;
        } else {
            B[bCounter] = A[i];
            bCounter++;
        }
    }
    System.out.println("Elements Below t: " + Arrays.toString(B));
    System.out.println("Elements Above t: " + Arrays.toString(C));
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
357
7
Gpt3D_Clone357_7.java 1 18
Gpt3D_Clone357_7.java 19 42
----------------------------------------

public static void main (String [] args) {
    int [] A = {9, 5, 4, 3, 2, 1, 34, 53};
    int [] B = new int [A.length];
    int [] C = new int [A.length];
    int t = 4;
    int countb = 0;
    int countc = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] <= t) {
            B [countb ++] = A [i];
        } else {
            C [countc ++] = A [i];
        }
    }
    System.out.println (Arrays.toString (B));
    System.out.println (Arrays.toString (C));
}
----------------------------------------

 
public static void main (String [] args) {
    int [] A = {9, 5, 4, 3, 2, 1, 34, 53};
    int t = 4;
    int[] B = new int[A.length];
    int[] C = new int[A.length];
    int bCounter = 0;
    int cCounter = 0;
    for (int i = 0;i < A.length;i++) {
        if (A[i] > t) {
            C[cCounter] = A[i];
            cCounter++;
        } else {
            B[bCounter] = A[i];
            bCounter++;
        }
    }
    System.out.println("Values less than 't': " + Arrays.toString(B));
    System.out.println("Values higher than 't': " + Arrays.toString(C));
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
357
8
Gpt3D_Clone357_8.java 1 18
Gpt3D_Clone357_8.java 19 42
----------------------------------------

public static void main (String [] args) {
    int [] A = {9, 5, 4, 3, 2, 1, 34, 53};
    int [] B = new int [A.length];
    int [] C = new int [A.length];
    int t = 4;
    int countb = 0;
    int countc = 0;
    for (int i = 0;
    i < A.length; i ++) {
        if (A [i] <= t) {
            B [countb ++] = A [i];
        } else {
            C [countc ++] = A [i];
        }
    }
    System.out.println (Arrays.toString (B));
    System.out.println (Arrays.toString (C));
}
----------------------------------------

public static void main (String [] args) {
    int [] A = {9, 5, 4, 3, 2, 1, 34, 53};
    int t = 4;
    int[] B = new int[A.length];
    int[] C = new int[A.length];
    int bCounter = 0;
    int cCounter = 0;
    for (int i = 0; i < A.length; i++){
        if (A[i] < t) {
            B[bCounter] = A[i];
            bCounter++;
        } else {
            C[cCounter] = A[i];
            cCounter++;
        }
    }
    System.out.println("Elements below t are: " + Arrays.toString(B));
    System.out.println("Elements above t are: " + Arrays.toString(C));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
363
1
Gpt3D_Clone363_1.java 1 13
Gpt3D_Clone363_1.java 14 25
----------------------------------------

public static void main (String [] args) {
    CustomClassLoader loader = new CustomClassLoader ();
    try {
        Class < ? > c = loader.findClass ("sample.Sample");
        Object o = c.newInstance ();
    } catch (ClassNotFoundException e) {
        e.printStackTrace ();
    } catch (InstantiationException e) {
        e.printStackTrace ();
    } catch (IllegalAccessException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

 public static void main (String [] args) {	CustomClassLoader loader = null;
	Class<?> c = null; 
	try {
	    loader = new CustomClassLoader();
	    c = loader.findClass("sample.Sample");
	    Object o = c.newInstance();
	} catch (ClassNotFoundException|InstantiationException|IllegalAccessException e) {
	    e.printStackTrace();
	}
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
365
0
Gpt3D_Clone365_0.java 1 21
Gpt3D_Clone365_0.java 22 48
----------------------------------------

private static boolean isPermutation (String a, String b) {
    char [] aArray = a.toCharArray ();
    char [] bArray = b.toCharArray ();
    if (a.length () != b.length ()) {
        return false;
    }
    int found = 0;
    for (int i = 0;
    i < aArray.length; i ++) {
        char eachA = aArray [i];
        for (int k = 0;
        k < bArray.length; k ++) {
            if (eachA == bArray [k]) {
                found ++;
                bArray [k] = '\uFFFF';
                break;
            }
        }
    }
    return found == a.length ();
}
----------------------------------------

  private static boolean isPermutation(String a, String b) {
    if (a == null || b == null || a.length() != b.length()) {
        return false;
    }
    Map<Character, Integer> countMap = new HashMap<>();
    for (int i = 0; i < a.length(); i++) {
        char currChar = a.charAt(i);
        int count = countMap.getOrDefault(currChar, 0);
        countMap.put(currChar, count + 1);
    }
    for (int i = 0; i < b.length(); i++) {
        char currChar = b.charAt(i);
        if (!countMap.containsKey(currChar)) {
            return false;
        } else {
            int count = countMap.get(currChar);
            if (count == 1) {
                countMap.remove(currChar);
            } else {
                countMap.put(currChar, count - 1);
            }
        }
    }
    return countMap.size() == 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
365
1
Gpt3D_Clone365_1.java 1 21
Gpt3D_Clone365_1.java 22 46
----------------------------------------

private static boolean isPermutation (String a, String b) {
    char [] aArray = a.toCharArray ();
    char [] bArray = b.toCharArray ();
    if (a.length () != b.length ()) {
        return false;
    }
    int found = 0;
    for (int i = 0;
    i < aArray.length; i ++) {
        char eachA = aArray [i];
        for (int k = 0;
        k < bArray.length; k ++) {
            if (eachA == bArray [k]) {
                found ++;
                bArray [k] = '\uFFFF';
                break;
            }
        }
    }
    return found == a.length ();
}
----------------------------------------

  private static boolean isPermutation (String a, String b) {
    if (a == null || b == null) {
        return false;
    }
    int aLength = a.length();
    int bLength = b.length();
    if (aLength != bLength) {
        return false;
    }
    char[] aChars = a.toCharArray();
    int[] charCount = new int[26];
    for (char c : aChars) {
        charCount[c - 'a']++;
    }
    for (int i = 0; i < bLength; i++) {
        int c = b.charAt(i) - 'a';
        charCount[c]--;
        if (charCount[c] < 0) {
            return false;
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
365
2
Gpt3D_Clone365_2.java 1 21
Gpt3D_Clone365_2.java 22 48
----------------------------------------

private static boolean isPermutation (String a, String b) {
    char [] aArray = a.toCharArray ();
    char [] bArray = b.toCharArray ();
    if (a.length () != b.length ()) {
        return false;
    }
    int found = 0;
    for (int i = 0;
    i < aArray.length; i ++) {
        char eachA = aArray [i];
        for (int k = 0;
        k < bArray.length; k ++) {
            if (eachA == bArray [k]) {
                found ++;
                bArray [k] = '\uFFFF';
                break;
            }
        }
    }
    return found == a.length ();
}
----------------------------------------

  private static boolean isPermutation(String a, String b) {
    if (a == null || b == null || a.length() != b.length()) { 
        return false; 
    } 
  
    Map<Character, Integer> countA = new HashMap<>(); 
    Map<Character, Integer> countB = new HashMap<>(); 
  
    // Store the counts of characters in both strings 
    for (char c : a.toCharArray()) { 
        countA.put(c, countA.getOrDefault(c, 0) + 1); 
    } 
    for (char c : b.toCharArray()) { 
        countB.put(c, countB.getOrDefault(c, 0) + 1); 
    } 
  
    // Compare the counts of both strings 
    for (Map.Entry<Character, Integer> entry : countA.entrySet()) { 
        if (!countB.containsKey(entry.getKey())) 
            return false; 
        if (!countB.get(entry.getKey()).equals(entry.getValue())) 
            return false; 
    } 
    return true; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
365
3
Gpt3D_Clone365_3.java 1 21
Gpt3D_Clone365_3.java 22 41
----------------------------------------

private static boolean isPermutation (String a, String b) {
    char [] aArray = a.toCharArray ();
    char [] bArray = b.toCharArray ();
    if (a.length () != b.length ()) {
        return false;
    }
    int found = 0;
    for (int i = 0;
    i < aArray.length; i ++) {
        char eachA = aArray [i];
        for (int k = 0;
        k < bArray.length; k ++) {
            if (eachA == bArray [k]) {
                found ++;
                bArray [k] = '\uFFFF';
                break;
            }
        }
    }
    return found == a.length ();
}
----------------------------------------

  private static boolean isPermutation(String a, String b) {
    if (a == null || b == null || a.length() != b.length()){
        return false;
    }
    char[] aArr = a.toCharArray();
    int[] charCounter = new int[26];
    for (char c : aArr){
        charCounter[c - 'a']++;
    }
    for (int i = 0; i < b.length(); i++){
        int c = b.charAt(i) - 'a';
        charCounter[c]--;
        if (charCounter[c] < 0){
            return false;
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
365
4
Gpt3D_Clone365_4.java 1 21
Gpt3D_Clone365_4.java 22 47
----------------------------------------

private static boolean isPermutation (String a, String b) {
    char [] aArray = a.toCharArray ();
    char [] bArray = b.toCharArray ();
    if (a.length () != b.length ()) {
        return false;
    }
    int found = 0;
    for (int i = 0;
    i < aArray.length; i ++) {
        char eachA = aArray [i];
        for (int k = 0;
        k < bArray.length; k ++) {
            if (eachA == bArray [k]) {
                found ++;
                bArray [k] = '\uFFFF';
                break;
            }
        }
    }
    return found == a.length ();
}
----------------------------------------

  private static boolean isPermutation(String a, String b) {
    if (a == null || b == null || a.length() != b.length()) 
        return false; 
      
    while (a.length() != 0 && b.length() != 0) { 
          
        int aFirstChar = a.charAt(0); 
        int bFirstChar = b.charAt(0); 
          
        int aIndex = a.indexOf(bFirstChar); 
        int bIndex = b.indexOf(aFirstChar); 
          
        //assuming both Strings contains only English alphabets 
        if (aIndex == -1 || bIndex == -1 || aIndex != bIndex)  
            return false; 
          
        String aRemaining = a.substring(1); 
        String bRemaining = b.substring(1); 
          
        return isPermutation(aRemaining, bRemaining); 
    } 
      
    return true; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
365
5
Gpt3D_Clone365_5.java 1 21
Gpt3D_Clone365_5.java 22 36
----------------------------------------

private static boolean isPermutation (String a, String b) {
    char [] aArray = a.toCharArray ();
    char [] bArray = b.toCharArray ();
    if (a.length () != b.length ()) {
        return false;
    }
    int found = 0;
    for (int i = 0;
    i < aArray.length; i ++) {
        char eachA = aArray [i];
        for (int k = 0;
        k < bArray.length; k ++) {
            if (eachA == bArray [k]) {
                found ++;
                bArray [k] = '\uFFFF';
                break;
            }
        }
    }
    return found == a.length ();
}
----------------------------------------

  private static boolean isPermutation(String a, String b) {
    if(a.length() != b.length()) return false;
    char[] mapA = new char[26];
    char[] mapB = new char[26];
    for(int i = 0; i < a.length(); i++){
        mapA[a.charAt(i) - 97]++;
        mapB[b.charAt(i) - 97]++;
    }
    for(int j = 0; j < 26; j++){
        if(mapA[j] != mapB[j]) return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
365
6
Gpt3D_Clone365_6.java 1 21
Gpt3D_Clone365_6.java 22 37
----------------------------------------

private static boolean isPermutation (String a, String b) {
    char [] aArray = a.toCharArray ();
    char [] bArray = b.toCharArray ();
    if (a.length () != b.length ()) {
        return false;
    }
    int found = 0;
    for (int i = 0;
    i < aArray.length; i ++) {
        char eachA = aArray [i];
        for (int k = 0;
        k < bArray.length; k ++) {
            if (eachA == bArray [k]) {
                found ++;
                bArray [k] = '\uFFFF';
                break;
            }
        }
    }
    return found == a.length ();
}
----------------------------------------

  private static boolean isPermutation(String a, String b) {
	if (a == null || b == null || a.length() != b.length()) {
		return false;
	}
	char[] aArr = a.toCharArray();
	char[] bArr = b.toCharArray();
	int[] alphabet = new int[26];
	aArr.forEach(chr -> alphabet[chr - 'a']++);
	for (char chr : bArr) {
		if (--alphabet[chr - 'a'] < 0)
			return false;
	}
	return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
365
7
Gpt3D_Clone365_7.java 1 21
Gpt3D_Clone365_7.java 22 42
----------------------------------------

private static boolean isPermutation (String a, String b) {
    char [] aArray = a.toCharArray ();
    char [] bArray = b.toCharArray ();
    if (a.length () != b.length ()) {
        return false;
    }
    int found = 0;
    for (int i = 0;
    i < aArray.length; i ++) {
        char eachA = aArray [i];
        for (int k = 0;
        k < bArray.length; k ++) {
            if (eachA == bArray [k]) {
                found ++;
                bArray [k] = '\uFFFF';
                break;
            }
        }
    }
    return found == a.length ();
}
----------------------------------------

  private static boolean isPermutation(String a, String b) {
    if (a == null || b == null) 
        return false;
 
    if (a.length() != b.length()) 
        return false;
 
    int[] chars = new int[256];
    for (int i = 0; i < a.length(); i++) 
        chars[a.charAt(i)]++;
 
    for (int i = 0; i < b.length(); i++) {
        int c = (int) b.charAt(i);
        if(--chars[c] < 0) {
            return false;
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
365
8
Gpt3D_Clone365_8.java 1 21
Gpt3D_Clone365_8.java 22 40
----------------------------------------

private static boolean isPermutation (String a, String b) {
    char [] aArray = a.toCharArray ();
    char [] bArray = b.toCharArray ();
    if (a.length () != b.length ()) {
        return false;
    }
    int found = 0;
    for (int i = 0;
    i < aArray.length; i ++) {
        char eachA = aArray [i];
        for (int k = 0;
        k < bArray.length; k ++) {
            if (eachA == bArray [k]) {
                found ++;
                bArray [k] = '\uFFFF';
                break;
            }
        }
    }
    return found == a.length ();
}
----------------------------------------

  private static boolean isPermutation(String a, String b) {
    if (a == null || b == null || a.length() != b.length()) {
        return false;
    }
    // Create an empty array to store all
    // the characters
    int[] counter = new int[1 << 8];
    // Update the array
    for (int i = 0; i < a.length(); i++) counter[a.charAt(i)]++;
    // Decrement the array
    for (int i = 0; i < b.length(); i++) counter[b.charAt(i)]--;
 
    // Check the array
    for (int count : counter) if (count != 0) return false;
 
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
365
9
Gpt3D_Clone365_9.java 1 21
Gpt3D_Clone365_9.java 22 39
----------------------------------------

private static boolean isPermutation (String a, String b) {
    char [] aArray = a.toCharArray ();
    char [] bArray = b.toCharArray ();
    if (a.length () != b.length ()) {
        return false;
    }
    int found = 0;
    for (int i = 0;
    i < aArray.length; i ++) {
        char eachA = aArray [i];
        for (int k = 0;
        k < bArray.length; k ++) {
            if (eachA == bArray [k]) {
                found ++;
                bArray [k] = '\uFFFF';
                break;
            }
        }
    }
    return found == a.length ();
}
----------------------------------------

  private static boolean isPermutation(String a, String b) {
    if (a == null || b == null || a.length() != b.length()) 
        return false; 
  
    int[] counts = new int[256]; 
    for (int i = 0; i < a.length(); i++)  
        counts[a.charAt(i)]++; 
  
    for (int i = 0; i < b.length(); i++) { 
        counts[b.charAt(i)]--; 
          
        if (counts[b.charAt(i)] < 0) 
            return false; 
    } 
    return true; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
366
0
Gpt3D_Clone366_0.java 1 20
Gpt3D_Clone366_0.java 21 44
----------------------------------------

public static void main (String...args) {
    List < List < Integer > > array = new ArrayList < List < Integer > > ();
    Scanner input = new Scanner (System.in);
    out.println ("Enter n:");
    int n = input.nextInt ();
    out.println ("Enter m:");
    int m = input.nextInt ();
    out.println ("Enter the values:");
    for (int i = 0;
    i < n; i ++) {
        List < Integer > list = new ArrayList < Integer > ();
        array.add (list);
        for (int j = 0;
        j < m; j ++) {
            list.add (input.nextInt ());
        }
    }
    out.println ("Result:");
    out.println (array);
}
----------------------------------------

 public static void main(String[] args) { 
	  Scanner input = new Scanner(System.in); 
	  System.out.println("Enter n:"); 
	  int n = input.nextInt(); 
	  System.out.println("Enter m:"); 
	  int m = input.nextInt(); 
	  List<List<Integer>> array = new ArrayList<List<Integer>>(); 
	 
	  System.out.println("Enter the values:"); 
	  for(int i = 0; i < n; i++) { 
	    List<Integer> list = new ArrayList<Integer>(); 
	    array.add(list); 
	    for(int j = 0; j < m; j++) { 
	      System.out.print("Enter value at position ["+i+","+j+"] - "); 
	      list.add(input.nextInt()); 
	    } 
	  } 
	 
	  System.out.println("Result:"); 
	  System.out.println(array); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
366
2
Gpt3D_Clone366_2.java 1 20
Gpt3D_Clone366_2.java 21 48
----------------------------------------

public static void main (String...args) {
    List < List < Integer > > array = new ArrayList < List < Integer > > ();
    Scanner input = new Scanner (System.in);
    out.println ("Enter n:");
    int n = input.nextInt ();
    out.println ("Enter m:");
    int m = input.nextInt ();
    out.println ("Enter the values:");
    for (int i = 0;
    i < n; i ++) {
        List < Integer > list = new ArrayList < Integer > ();
        array.add (list);
        for (int j = 0;
        j < m; j ++) {
            list.add (input.nextInt ());
        }
    }
    out.println ("Result:");
    out.println (array);
}
----------------------------------------

 public static void main(String[] args) 
{ 
	    List<List<Integer>> array = new ArrayList<List<Integer>>(); 
	  
	    int n, m; 
	    Scanner scanner = new Scanner(System.in); 
	  
	    System.out.print("Enter the value of n: "); 
	    n = scanner.nextInt(); 
	  
	    System.out.print("Enter the value of m: "); 
	    m = scanner.nextInt(); 
	  
	    int i, j; 
	    System.out.print("Enter the int values: "); 
	    for (i = 0; i < n; i++) { 
	  
		List<Integer> list = new ArrayList<Integer>(); 
		for (j = 0; j < m; j++) 
		    list.add(scanner.nextInt()); 
		array.add(list); 
	    } 
	  
	    System.out.println("Result"); 
	    System.out.println(array); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
36
0
Gpt3D_Clone36_0.java 1 11
Gpt3D_Clone36_0.java 12 22
----------------------------------------

public static void shuffleArray (int [] array) {
    List < Integer > list = new ArrayList < > ();
    for (int i : array) {
        list.add (i);
    }
    Collections.shuffle (list);
    for (int i = 0;
    i < list.size (); i ++) {
        array [i] = list.get (i);
    }
}
----------------------------------------

public static void shuffleArray(int[] array) {
   int temp;
   for (int i = 0; i < array.length; i++) {
      int randomPosition = (int)(Math.random() * array.length);
      temp = array[i];
      array[i] = array[randomPosition];
      array[randomPosition] = temp;
   } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
36
1
Gpt3D_Clone36_1.java 1 11
Gpt3D_Clone36_1.java 12 24
----------------------------------------

public static void shuffleArray (int [] array) {
    List < Integer > list = new ArrayList < > ();
    for (int i : array) {
        list.add (i);
    }
    Collections.shuffle (list);
    for (int i = 0;
    i < list.size (); i ++) {
        array [i] = list.get (i);
    }
}
----------------------------------------

public static void shuffleArray(int[] array) 
{ 
   int n = array.length; 
   for (int i = 0; i < n; i++) 
   { 
     int r = i + (int)(Math.random() * (n - i)); 
     int temp = array[r]; 
     array[r] = array[i]; 
     array[i] = temp; 
   } 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
36
2
Gpt3D_Clone36_2.java 1 11
Gpt3D_Clone36_2.java 12 22
----------------------------------------

public static void shuffleArray (int [] array) {
    List < Integer > list = new ArrayList < > ();
    for (int i : array) {
        list.add (i);
    }
    Collections.shuffle (list);
    for (int i = 0;
    i < list.size (); i ++) {
        array [i] = list.get (i);
    }
}
----------------------------------------

public static void shuffleArray(int[] array) {
    Random random = new Random();
    for(int i = array.length - 1; i > 0; i--) {
        int index = random.nextInt(i + 1);
        int temp = array[index];
        array[index] = array[i];
        array[i] = temp;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
36
3
Gpt3D_Clone36_3.java 1 11
Gpt3D_Clone36_3.java 12 22
----------------------------------------

public static void shuffleArray (int [] array) {
    List < Integer > list = new ArrayList < > ();
    for (int i : array) {
        list.add (i);
    }
    Collections.shuffle (list);
    for (int i = 0;
    i < list.size (); i ++) {
        array [i] = list.get (i);
    }
}
----------------------------------------

public static void shuffleArray(int[] array) {
   Random random = new Random();
   for (int i = 0; i < array.length; i++) {
      int randomPosition = random.nextInt(array.length);
      int temp = array[i];
      array[i] = array[randomPosition];
      array[randomPosition] = temp;
   }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
36
4
Gpt3D_Clone36_4.java 1 11
Gpt3D_Clone36_4.java 12 22
----------------------------------------

public static void shuffleArray (int [] array) {
    List < Integer > list = new ArrayList < > ();
    for (int i : array) {
        list.add (i);
    }
    Collections.shuffle (list);
    for (int i = 0;
    i < list.size (); i ++) {
        array [i] = list.get (i);
    }
}
----------------------------------------

public static void shuffleArray(int[] array) {
   IntStream.range(0, array.length)
            .forEach(i -> {
                int randomPosition = (int)(Math.random() * array.length);
                int tmp = array[i];
                array[i] = array[randomPosition];
                array[randomPosition] = tmp;
            });
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
36
5
Gpt3D_Clone36_5.java 1 11
Gpt3D_Clone36_5.java 12 23
----------------------------------------

public static void shuffleArray (int [] array) {
    List < Integer > list = new ArrayList < > ();
    for (int i : array) {
        list.add (i);
    }
    Collections.shuffle (list);
    for (int i = 0;
    i < list.size (); i ++) {
        array [i] = list.get (i);
    }
}
----------------------------------------

public static void shuffleArray(int[] array){
    Random rand = new Random();
    for (int i = 0; i < array.length; i++)
    {
        int randomPosition = rand.nextInt(array.length); 
        int temp = array[i];
        array[i] = array[randomPosition];
        array[randomPosition] = temp;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
36
6
Gpt3D_Clone36_6.java 1 11
Gpt3D_Clone36_6.java 12 22
----------------------------------------

public static void shuffleArray (int [] array) {
    List < Integer > list = new ArrayList < > ();
    for (int i : array) {
        list.add (i);
    }
    Collections.shuffle (list);
    for (int i = 0;
    i < list.size (); i ++) {
        array [i] = list.get (i);
    }
}
----------------------------------------

public static void shuffleArray(int[] array) {
   SecureRandom random = new SecureRandom();
   for (int i = 0; i < array.length; i++) {
      int randomPosition = random.nextInt(array.length);
      int temp = array[i];
      array[i] = array[randomPosition];
      array[randomPosition] = temp;
   }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
36
7
Gpt3D_Clone36_7.java 1 11
Gpt3D_Clone36_7.java 12 22
----------------------------------------

public static void shuffleArray (int [] array) {
    List < Integer > list = new ArrayList < > ();
    for (int i : array) {
        list.add (i);
    }
    Collections.shuffle (list);
    for (int i = 0;
    i < list.size (); i ++) {
        array [i] = list.get (i);
    }
}
----------------------------------------

public static void shuffleArray(int[] array) {
   Random rand = new Random();
   for (int i = 0; i < array.length; i++) {
      int randomPosition = rand.nextInt(array.length);
      int temp = array[i];
      array[i] = array[randomPosition];
      array[randomPosition] = temp;
   }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
36
8
Gpt3D_Clone36_8.java 1 11
Gpt3D_Clone36_8.java 12 21
----------------------------------------

public static void shuffleArray (int [] array) {
    List < Integer > list = new ArrayList < > ();
    for (int i : array) {
        list.add (i);
    }
    Collections.shuffle (list);
    for (int i = 0;
    i < list.size (); i ++) {
        array [i] = list.get (i);
    }
}
----------------------------------------

public static void shuffleArray(int[] array) {
   for(int i = 0; i < array.length; i++) {
      int randomIndex = (int)(Math.random() * array.length);
      int temp = array[i];
      array[i] = array[randomIndex];
      array[randomIndex] = temp;
   }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
36
9
Gpt3D_Clone36_9.java 1 11
Gpt3D_Clone36_9.java 12 21
----------------------------------------

public static void shuffleArray (int [] array) {
    List < Integer > list = new ArrayList < > ();
    for (int i : array) {
        list.add (i);
    }
    Collections.shuffle (list);
    for (int i = 0;
    i < list.size (); i ++) {
        array [i] = list.get (i);
    }
}
----------------------------------------

public static void shuffleArray(int[] array) {
   for (int i=array.length-1; i>0; i--) {
      int j = (int)(Math.random() * (i+1));
      int temp = array[i];
      array[i] = array[j];
      array[j] = temp; 
   }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
370
0
Gpt3D_Clone370_0.java 1 9
Gpt3D_Clone370_0.java 10 28
----------------------------------------

public void run () {
    for (int i = 0;
    i < sayThisManyTimes; i ++) {
        while (! saidHello.get ()) {
        }
        System.out.println ("World!");
        saidHello.set (false);
    }
}
----------------------------------------

 public void run() {
    AtomicBoolean saidHello = new AtomicBoolean(false);
    for (int i = 0; i < sayThisManyTimes; i++) {
        while(!saidHello.get()) {
            System.out.println("Hello");
			try {
				Thread.sleep(1000); 
			}
			catch(InterruptedException ie) {
				//ignore
			}
            saidHello.set(true);
        }
        System.out.println("World!");
        saidHello.set(false);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
370
1
Gpt3D_Clone370_1.java 1 9
Gpt3D_Clone370_1.java 10 22
----------------------------------------

public void run () {
    for (int i = 0;
    i < sayThisManyTimes; i ++) {
        while (! saidHello.get ()) {
        }
        System.out.println ("World!");
        saidHello.set (false);
    }
}
----------------------------------------

 public void run() {
    Lock saidHello = new ReentrantLock();
    for (int i = 0; i < sayThisManyTimes; i++) {
        while(!saidHello.tryLock()) {
            System.out.println("Hello");
            saidHello.unlock();
        }
        System.out.println("World!");
        saidHello.lock(); 
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
370
2
Gpt3D_Clone370_2.java 1 9
Gpt3D_Clone370_2.java 10 23
----------------------------------------

public void run () {
    for (int i = 0;
    i < sayThisManyTimes; i ++) {
        while (! saidHello.get ()) {
        }
        System.out.println ("World!");
        saidHello.set (false);
    }
}
----------------------------------------

 public void run() {
    boolean saidHello = false;
    for (int i = 0; i < sayThisManyTimes; i++) {
        while (! saidHello) {
            System.out.println("Hello");
            saidHello = true;
        } 
        System.out.println("World!");
        saidHello = false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
370
3
Gpt3D_Clone370_3.java 1 9
Gpt3D_Clone370_3.java 10 22
----------------------------------------

public void run () {
    for (int i = 0;
    i < sayThisManyTimes; i ++) {
        while (! saidHello.get ()) {
        }
        System.out.println ("World!");
        saidHello.set (false);
    }
}
----------------------------------------

 public void run() {
    volatile boolean saidHello = false;
    for (int i=0; i < sayThisManyTimes; i++) {
        while (! saidHello) {
            System.out.println("Hello");
            saidHello = true;
        }
        System.out.println("World!");
        saidHello = false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
370
4
Gpt3D_Clone370_4.java 1 9
Gpt3D_Clone370_4.java 10 22
----------------------------------------

public void run () {
    for (int i = 0;
    i < sayThisManyTimes; i ++) {
        while (! saidHello.get ()) {
        }
        System.out.println ("World!");
        saidHello.set (false);
    }
}
----------------------------------------

 public void run() { 
    int saidHello = 0;
    for (int i = 0; i  < sayThisManyTimes; i++) {
        while (saidHello == 0) {
            System.out.println("Hello");
            saidHello = 1;
        } 
        System.out.println("World!");
        saidHello = 0;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
370
5
Gpt3D_Clone370_5.java 1 9
Gpt3D_Clone370_5.java 10 22
----------------------------------------

public void run () {
    for (int i = 0;
    i < sayThisManyTimes; i ++) {
        while (! saidHello.get ()) {
        }
        System.out.println ("World!");
        saidHello.set (false);
    }
}
----------------------------------------

 public void run() {
    Phaser saidHello = new Phaser(1);
    for (int i = 0; i < sayThisManyTimes; i++ ) {
        while (saidHello.getPhase() == 0) {
            System.out.println("Hello");
            saidHello.arriveAndAwaitAdvance();
        }
        System.out.println("World!");
        saidHello.arriveAndDeregister();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
370
6
Gpt3D_Clone370_6.java 1 9
Gpt3D_Clone370_6.java 10 22
----------------------------------------

public void run () {
    for (int i = 0;
    i < sayThisManyTimes; i ++) {
        while (! saidHello.get ()) {
        }
        System.out.println ("World!");
        saidHello.set (false);
    }
}
----------------------------------------

 public void run() {
    CountDownLatch saidHello = new CountDownLatch(1);
    for (int i = 0; i < sayThisManyTimes; i++) {
        while (saidHello.getCount() != 0) {
            System.out.println("Hello");
            saidHello.countDown();
        }
        System.out.println("World!");
        saidHello.reset();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
370
7
Gpt3D_Clone370_7.java 1 9
Gpt3D_Clone370_7.java 10 21
----------------------------------------

public void run () {
    for (int i = 0;
    i < sayThisManyTimes; i ++) {
        while (! saidHello.get ()) {
        }
        System.out.println ("World!");
        saidHello.set (false);
    }
}
----------------------------------------

 public void run() {
    ReentrantLock saidHello = new ReentrantLock();
    for (int i = 0; i < sayThisManyTimes; i ++) {
        while (saidHello.tryLock()) {
            System.out.println("Hello");
            saidHello.unlock();
        }
        System.out.println("World!");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
370
9
Gpt3D_Clone370_9.java 1 9
Gpt3D_Clone370_9.java 10 19
----------------------------------------

public void run () {
    for (int i = 0;
    i < sayThisManyTimes; i ++) {
        while (! saidHello.get ()) {
        }
        System.out.println ("World!");
        saidHello.set (false);
    }
}
----------------------------------------

 public void run() {
    CyclicBarrier saidHello = new CyclicBarrier(2);
    while (saidHello.getNumberWaiting() != 1) {
        System.out.println("Hello");
        saidHello.await();
    } 
    System.out.println("World!");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
373
3
Gpt3D_Clone373_3.java 1 10
Gpt3D_Clone373_3.java 11 23
----------------------------------------

public static void main (String [] args) throws IOException {
    Path source = Paths.get ("/path/to/source/dir");
    Path destination = Paths.get ("/path/to/dest/dir");
    List < Path > sources = Files.walk (source).collect (toList ());
    List < Path > destinations = sources.stream ().map (source :: relativize).map (destination :: resolve).collect (toList ());
    for (int i = 0;
    i < sources.size (); i ++) {
        Files.copy (sources.get (i), destinations.get (i));
    }
}
----------------------------------------

 public static void main(String[] args) throws IOException {
    Path source = Paths.get("/path/to/source/dir");
    Path destination = Paths.get("/path/to/dest/dir");
    List<Path> sources = Files.walk(source).collect(Collectors.toList());
    List<Path> destinations = sources.stream()
            .map(src -> source.relativize(src))
            .map(dest -> destination.resolve(dest))
            .collect(Collectors.toList());
    IntStream.range(0, sources.size())
            .forEach(x -> copy(sources.get(x), destinations.get(x)));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
373
4
Gpt3D_Clone373_4.java 1 10
Gpt3D_Clone373_4.java 11 46
----------------------------------------

public static void main (String [] args) throws IOException {
    Path source = Paths.get ("/path/to/source/dir");
    Path destination = Paths.get ("/path/to/dest/dir");
    List < Path > sources = Files.walk (source).collect (toList ());
    List < Path > destinations = sources.stream ().map (source :: relativize).map (destination :: resolve).collect (toList ());
    for (int i = 0;
    i < sources.size (); i ++) {
        Files.copy (sources.get (i), destinations.get (i));
    }
}
----------------------------------------

 public static void main(String[] args) throws IOException { 
        Path source = Paths.get("/path/to/source/dir");
        Path destination = Paths.get("/path/to/dest/dir");
        List<Files> sources = Files.list(source).collect(Collectors.toList());
        List<Path> destinations = sources.stream().map(source::relativize)
                                                 .map(destination::resolve)
                                                 .collect(Collectors.toList());
        IntStream.range(0, sources.size())
                 .forEach(i -> copy(sources.get(i), destinations.get(i)));
    }
 public static void main(String[] args) throws IOException { 
        Path source = Paths.get("/path/to/source/dir");
        Path destination = Paths.get("/path/to/dest/dir");
        List<Path> sources = Files.walk(source).collect(Collectors.toList());
        List<Path> destinations = sources.stream()
                                        .map(src -> source.relativize(src))
                                        .map(dest -> destination.resolve(dest))
                                        .collect(Collectors.toList());
        for(int i=0;i<sources.size();i++){
            copy(sources.get(i), destinations.get(i));
        }
    }
 public static void main(String[] args) throws IOException { 
    Path source = Paths.get("/path/to/source/dir");
    Path destination = Paths.get("/path/to/dest/dir");
    List<Path> srcs = PFiles.walk(source).collect(Collectors.toList());
    List<Path> dests = srcs.stream().map(src -> source.relativize(src))
                                    .map(dst -> destination.resolve(dst))
                                    .collect(Collectors.toList());
    IntStream.range(0, srcs.size())
             .forEach(i -> copy(srcs.get(i), dests.get(i)));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
373
5
Gpt3D_Clone373_5.java 1 10
Gpt3D_Clone373_5.java 11 46
----------------------------------------

public static void main (String [] args) throws IOException {
    Path source = Paths.get ("/path/to/source/dir");
    Path destination = Paths.get ("/path/to/dest/dir");
    List < Path > sources = Files.walk (source).collect (toList ());
    List < Path > destinations = sources.stream ().map (source :: relativize).map (destination :: resolve).collect (toList ());
    for (int i = 0;
    i < sources.size (); i ++) {
        Files.copy (sources.get (i), destinations.get (i));
    }
}
----------------------------------------

 public static void main(String[] args) throws IOException { 
        Path source = Paths.get("/path/to/source/dir");
        Path destination = Paths.get("/path/to/dest/dir");
        List<Files> sources = Files.list(source).collect(Collectors.toList());
        List<Path> destinations = sources.stream().map(source::relativize)
                                                 .map(destination::resolve)
                                                 .collect(Collectors.toList());
        IntStream.range(0, sources.size())
                 .forEach(i -> copy(sources.get(i), destinations.get(i)));
    }
 public static void main(String[] args) throws IOException { 
        Path source = Paths.get("/path/to/source/dir");
        Path destination = Paths.get("/path/to/dest/dir");
        List<Path> sources = Files.walk(source).collect(Collectors.toList());
        List<Path> destinations = sources.stream()
                                        .map(src -> source.relativize(src))
                                        .map(dest -> destination.resolve(dest))
                                        .collect(Collectors.toList());
        for(int i=0;i<sources.size();i++){
            copy(sources.get(i), destinations.get(i));
        }
    }
 public static void main(String[] args) throws IOException { 
    Path source = Paths.get("/path/to/source/dir");
    Path destination = Paths.get("/path/to/dest/dir");
    List<Path> srcs = PFiles.walk(source).collect(Collectors.toList());
    List<Path> dests = srcs.stream().map(src -> source.relativize(src))
                                    .map(dst -> destination.resolve(dst))
                                    .collect(Collectors.toList());
    IntStream.range(0, srcs.size())
             .forEach(i -> copy(srcs.get(i), dests.get(i)));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
373
6
Gpt3D_Clone373_6.java 1 10
Gpt3D_Clone373_6.java 11 23
----------------------------------------

public static void main (String [] args) throws IOException {
    Path source = Paths.get ("/path/to/source/dir");
    Path destination = Paths.get ("/path/to/dest/dir");
    List < Path > sources = Files.walk (source).collect (toList ());
    List < Path > destinations = sources.stream ().map (source :: relativize).map (destination :: resolve).collect (toList ());
    for (int i = 0;
    i < sources.size (); i ++) {
        Files.copy (sources.get (i), destinations.get (i));
    }
}
----------------------------------------

 public static void main(String[] args) throws IOException { 
    Path source = Paths.get("/path/to/source/dir");
    Path destination = Paths.get("/path/to/dest/dir");
    List<Path> fileSources = Files.walk(source).collect(Collectors.toList());
    List<Path> destFilePaths = fileSources.stream()
            .map(src -> source.relativize(src))
            .map(dest -> destination.resolve(dest))
            .collect(Collectors.toList());
    IntStream.range(0, fileSources.size())
            .forEach(i -> Files.copy(fileSources.get(i), destFilePaths.get(i)));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
374
0
Gpt3D_Clone374_0.java 1 9
Gpt3D_Clone374_0.java 10 27
----------------------------------------

public void actionPerformed (ActionEvent e) {
    String item = (String) mainComboBox.getSelectedItem ();
    Object o = subItems.get (item);
    if (o == null) {
        subComboBox.setModel (new DefaultComboBoxModel ());
    } else {
        subComboBox.setModel (new DefaultComboBoxModel ((String []) o));
    }
}
----------------------------------------

 public void actionPerformed (ActionEvent e) {
    String item = (String) mainComboBox.getSelectedItem ();
    Object o = subItems.get (item);
    DefaultComboBoxModel model = (DefaultComboBoxModel) subComboBox.getModel();
    if (o == null) {
        model.removeAllElements();
        subComboBox.setModel (model);
    } else {
        String[] items = (String[]) o;
        model.removeAllElements ();
        for (String s : items){
            model.addElement(s);
        }
        subComboBox.setModel (model);
    }
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
374
1
Gpt3D_Clone374_1.java 1 9
Gpt3D_Clone374_1.java 10 26
----------------------------------------

public void actionPerformed (ActionEvent e) {
    String item = (String) mainComboBox.getSelectedItem ();
    Object o = subItems.get (item);
    if (o == null) {
        subComboBox.setModel (new DefaultComboBoxModel ());
    } else {
        subComboBox.setModel (new DefaultComboBoxModel ((String []) o));
    }
}
----------------------------------------

 public void actionPerformed (ActionEvent e) {
    String item = (String) mainComboBox.getSelectedItem ();
    Object o = subItems.get (item);
    DefaultComboBoxModel model = (DefaultComboBoxModel) subComboBox.getModel();
    if (o == null) {
        model.removeAllElements ();
    } else {
        model.removeAllElements ();
        String[] items = (String[]) o;
        for(String s : items){
            model.addElement(s);
        }
    }
    subComboBox.setModel (model);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
374
2
Gpt3D_Clone374_2.java 1 9
Gpt3D_Clone374_2.java 10 25
----------------------------------------

public void actionPerformed (ActionEvent e) {
    String item = (String) mainComboBox.getSelectedItem ();
    Object o = subItems.get (item);
    if (o == null) {
        subComboBox.setModel (new DefaultComboBoxModel ());
    } else {
        subComboBox.setModel (new DefaultComboBoxModel ((String []) o));
    }
}
----------------------------------------

 public void actionPerformed (ActionEvent e) {
    String item = (String) mainComboBox.getSelectedItem ();
    Object o = subItems.get (item);
    DefaultComboBoxModel model = new DefaultComboBoxModel();
    if (o == null) {
        subComboBox.setModel (model);
    } else {
        String[] items = (String[]) o;
        for(String s : items){
            model.addElement(s);
        }
        subComboBox.setModel (model);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
374
3
Gpt3D_Clone374_3.java 1 9
Gpt3D_Clone374_3.java 10 25
----------------------------------------

public void actionPerformed (ActionEvent e) {
    String item = (String) mainComboBox.getSelectedItem ();
    Object o = subItems.get (item);
    if (o == null) {
        subComboBox.setModel (new DefaultComboBoxModel ());
    } else {
        subComboBox.setModel (new DefaultComboBoxModel ((String []) o));
    }
}
----------------------------------------

 public void actionPerformed (ActionEvent e) {
    String item = (String) mainComboBox.getSelectedItem ();
    Object o = subItems.get (item);
    DefaultComboBoxModel model = new DefaultComboBoxModel();
    if (o == null) {
        subComboBox.setModel (model);
    } else {
        String[] items = (String[]) o;
        for (String s : items){
            model.addElement (s);
        }
        subComboBox.setModel (model);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
374
4
Gpt3D_Clone374_4.java 1 9
Gpt3D_Clone374_4.java 10 24
----------------------------------------

public void actionPerformed (ActionEvent e) {
    String item = (String) mainComboBox.getSelectedItem ();
    Object o = subItems.get (item);
    if (o == null) {
        subComboBox.setModel (new DefaultComboBoxModel ());
    } else {
        subComboBox.setModel (new DefaultComboBoxModel ((String []) o));
    }
}
----------------------------------------

 public void actionPerformed (ActionEvent e) {
    String item = (String) mainComboBox.getSelectedItem ();
    Object o = subItems.get (item);
    DefaultComboBoxModel model = new DefaultComboBoxModel();
    if (o == null) {
        subComboBox.removeAllItems();
    } else {
        for (String s : (String[])o) {
			model.addElement (s);
        }
        subComboBox.setModel(model);
    }
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
374
9
Gpt3D_Clone374_9.java 1 9
Gpt3D_Clone374_9.java 10 21
----------------------------------------

public void actionPerformed (ActionEvent e) {
    String item = (String) mainComboBox.getSelectedItem ();
    Object o = subItems.get (item);
    if (o == null) {
        subComboBox.setModel (new DefaultComboBoxModel ());
    } else {
        subComboBox.setModel (new DefaultComboBoxModel ((String []) o));
    }
}
----------------------------------------

 public void actionPerformed (ActionEvent e) {
    String item = (String) mainComboBox.getSelectedItem ();
    Object o = subItems.getOrDefault (item, "");
    if (o == "") {
        subComboBox.setModel (new DefaultComboBoxModel ());
    } else {
        String[] items = (String[]) o;
        subComboBox.setModel (new DefaultComboBoxModel (items));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
37
0
Gpt3D_Clone37_0.java 1 9
Gpt3D_Clone37_0.java 10 30
----------------------------------------

public static void main (String args []) {
    Scanner sc = new Scanner (System.in);
    ArrayList < Integer > l = new ArrayList < Integer > (10);
    for (int i = 0;
    i < 10; i ++) l.add (sc.nextInt ());
    Collections.shuffle (l);
    for (int j = 0;
    j < 10; j ++) System.out.println (l.get (j));
}
----------------------------------------

 public static void main (String[] args) {
    Scanner sc = new Scanner(System.in);
    List<Integer> list = new ArrayList<Integer>(10);
    for (int i = 0; i < 10; i++)
        list.add(sc.nextInt());
    // Fisher-Yates Shuffle
    for (int i = list.size() - 1; i > 0; i--) {
        int index = (int)(Math.random() * (i + 1));
        int temp = list.get(index);
        list.set(index, list.get(i));
        list.set(i, temp);
    }
    for (int i = 0; i < 10; i++) {
        System.out.println(list.get(i));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
37
1
Gpt3D_Clone37_1.java 1 9
Gpt3D_Clone37_1.java 10 23
----------------------------------------

public static void main (String args []) {
    Scanner sc = new Scanner (System.in);
    ArrayList < Integer > l = new ArrayList < Integer > (10);
    for (int i = 0;
    i < 10; i ++) l.add (sc.nextInt ());
    Collections.shuffle (l);
    for (int j = 0;
    j < 10; j ++) System.out.println (l.get (j));
}
----------------------------------------

 public static void main(String args[]) {
    Scanner sc = new Scanner (System.in);
    List<Integer> list = new ArrayList<>(10);
    for (int i = 0; i < 10; i++) {
        int num = sc.nextInt();
        list.add(num);
    }
    Collections.shuffle(list);
    for (int j = 0; j < 10; j++) {
        System.out.println(list.get(j));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
37
2
Gpt3D_Clone37_2.java 1 9
Gpt3D_Clone37_2.java 10 23
----------------------------------------

public static void main (String args []) {
    Scanner sc = new Scanner (System.in);
    ArrayList < Integer > l = new ArrayList < Integer > (10);
    for (int i = 0;
    i < 10; i ++) l.add (sc.nextInt ());
    Collections.shuffle (l);
    for (int j = 0;
    j < 10; j ++) System.out.println (l.get (j));
}
----------------------------------------

 public static void main(String[] args) {
    Scanner sc = new Scanner (System.in);
    List<Integer> list = new ArrayList<Integer>(10);
    for (int i = 0; i < 10; i++) {
        int num = sc.nextInt();
        list.add(num);
    }
    Collections.shuffle(list, new Random(10));
    for (int j = 0; j < 10; j++) {
        System.out.println(list.get(j));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
37
3
Gpt3D_Clone37_3.java 1 9
Gpt3D_Clone37_3.java 10 24
----------------------------------------

public static void main (String args []) {
    Scanner sc = new Scanner (System.in);
    ArrayList < Integer > l = new ArrayList < Integer > (10);
    for (int i = 0;
    i < 10; i ++) l.add (sc.nextInt ());
    Collections.shuffle (l);
    for (int j = 0;
    j < 10; j ++) System.out.println (l.get (j));
}
----------------------------------------

 public static void main (String[] args) {
    Scanner sc = new Scanner (System.in);
    List<Integer> list = new ArrayList<Integer>(10);
    for (int i = 0; i < 10; i++) {
            int num = sc.nextInt();
            list.add(num);
        }
    Collections.shuffle(list, new Random(System.currentTimeMillis()));
    for (int j = 0; j < 10; j++) {
        System.out.println(list.get(j));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
37
4
Gpt3D_Clone37_4.java 1 9
Gpt3D_Clone37_4.java 10 23
----------------------------------------

public static void main (String args []) {
    Scanner sc = new Scanner (System.in);
    ArrayList < Integer > l = new ArrayList < Integer > (10);
    for (int i = 0;
    i < 10; i ++) l.add (sc.nextInt ());
    Collections.shuffle (l);
    for (int j = 0;
    j < 10; j ++) System.out.println (l.get (j));
}
----------------------------------------

 public static void main (String[] args) {
    Scanner sc = new Scanner (System.in);
    ArrayList <Integer> l = new ArrayList <Integer> (10);
    for (int i = 0; i < 10; i++) {
        int num = sc.nextInt ();
        l.add (num);
    }
    Collections.shuffle (l);
    for (int j = 0; j < 10; j++) {
        System.out.println (l.get (j));
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
37
5
Gpt3D_Clone37_5.java 1 9
Gpt3D_Clone37_5.java 10 22
----------------------------------------

public static void main (String args []) {
    Scanner sc = new Scanner (System.in);
    ArrayList < Integer > l = new ArrayList < Integer > (10);
    for (int i = 0;
    i < 10; i ++) l.add (sc.nextInt ());
    Collections.shuffle (l);
    for (int j = 0;
    j < 10; j ++) System.out.println (l.get (j));
}
----------------------------------------

 public static void main (String args [])  {
    ArrayList<Integer> list = new ArrayList<Integer>(10); 
    for (int i = 0; i < 10; i++) {
        int randomNumber = ThreadLocalRandom.current().nextInt(0, 10); 
        list.add(randomNumber); 
    }
    Collections.shuffle(list);
    for (int j = 0; j < 10; j++) {
        System.out.println(list.get(j)); 
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
37
6
Gpt3D_Clone37_6.java 1 9
Gpt3D_Clone37_6.java 10 22
----------------------------------------

public static void main (String args []) {
    Scanner sc = new Scanner (System.in);
    ArrayList < Integer > l = new ArrayList < Integer > (10);
    for (int i = 0;
    i < 10; i ++) l.add (sc.nextInt ());
    Collections.shuffle (l);
    for (int j = 0;
    j < 10; j ++) System.out.println (l.get (j));
}
----------------------------------------

 public static void main (String args []) {
    Random random = new Random();
    ArrayList<Integer> list = new ArrayList<Integer>(10);
    for (int i = 0; i < 10; i++) { 
        list.add(Random.nextInt()); 
    }
    Collections.shuffle(list);
    for (int j = 0; j < 10; j++) {
        System.out.println(list.get(j));
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
37
7
Gpt3D_Clone37_7.java 1 9
Gpt3D_Clone37_7.java 10 23
----------------------------------------

public static void main (String args []) {
    Scanner sc = new Scanner (System.in);
    ArrayList < Integer > l = new ArrayList < Integer > (10);
    for (int i = 0;
    i < 10; i ++) l.add (sc.nextInt ());
    Collections.shuffle (l);
    for (int j = 0;
    j < 10; j ++) System.out.println (l.get (j));
}
----------------------------------------

 public static void main (String [] args) { 
    Scanner sc = new Scanner (System.in);
    ArrayList<Integer> list = new ArrayList<>();
    for (int i = 0; i < 10; i++) {
        list.add(sc.nextInt());
    }
    Collections.shuffle(list, new SecureRandom());
    for (int j = 0; j < 10; j++) {
        System.out.println(list.get(j)); 
    }
  
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
37
8
Gpt3D_Clone37_8.java 1 9
Gpt3D_Clone37_8.java 10 22
----------------------------------------

public static void main (String args []) {
    Scanner sc = new Scanner (System.in);
    ArrayList < Integer > l = new ArrayList < Integer > (10);
    for (int i = 0;
    i < 10; i ++) l.add (sc.nextInt ());
    Collections.shuffle (l);
    for (int j = 0;
    j < 10; j ++) System.out.println (l.get (j));
}
----------------------------------------

 public static void main (String args [])  {
    Random random = new Random(); 
    for (int i = 0; i < 10; i++) {
        int randomNumber = random.nextInt(10);
        arraylist.add(randomNumber);
    }
    Collections.shuffle(arraylist);
    for (int j = 0; j < 10; j++) {
        System.out.println(arraylist.get(j)); 
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
382
2
Gpt3D_Clone382_2.java 1 17
Gpt3D_Clone382_2.java 18 36
----------------------------------------

public void sort (int [] input) {
    for (int i = 0;
    i < input.length - 1; i ++) {
        int k = i + 1;
        int nxtVal = input [k];
        while (input [k - 1] > nxtVal) {
            input [k] = input [k - 1];
            k --;
            if (k == 0) break;
        }
        input [k] = nxtVal;
    }
    System.out.println ("Medium sorting is done and the result is :");
    for (int i : input) {
        System.out.print (i + ",");
    }
}
----------------------------------------

 public void sort (int [] input) {
    for (int i = 0;
    i < input.length - 1; i ++) {
        int nxtVal = input [i + 1];
        int j = i;
        while (input [j] > nxtVal) {
            input [j+1] = input[j];
            j--;
            if (j == -1) break;
        }
        input [j+1] = nxtVal;
    }
    System.out.println ("Medium sorting is done and the result is :");
    for (int i : input) {
        System.out.print (i + ",");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
382
4
Gpt3D_Clone382_4.java 1 17
Gpt3D_Clone382_4.java 18 37
----------------------------------------

public void sort (int [] input) {
    for (int i = 0;
    i < input.length - 1; i ++) {
        int k = i + 1;
        int nxtVal = input [k];
        while (input [k - 1] > nxtVal) {
            input [k] = input [k - 1];
            k --;
            if (k == 0) break;
        }
        input [k] = nxtVal;
    }
    System.out.println ("Medium sorting is done and the result is :");
    for (int i : input) {
        System.out.print (i + ",");
    }
}
----------------------------------------

 public void sort (int [] input) {
    for (int i = 1; i < input.length; i++) {
        int k = i-1;
        int moveValue = input[i];
        while(k>=0&&input[k] > moveValue)
        {
            input[k+1] = input[k];
            k--;
        }
        input[k+1] = moveValue;
    }
    System.out.println("Medium sorting is done and the result is :");
    for (int i : input) {
        System.out.print (i + ",");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
382
6
Gpt3D_Clone382_6.java 1 17
Gpt3D_Clone382_6.java 18 34
----------------------------------------

public void sort (int [] input) {
    for (int i = 0;
    i < input.length - 1; i ++) {
        int k = i + 1;
        int nxtVal = input [k];
        while (input [k - 1] > nxtVal) {
            input [k] = input [k - 1];
            k --;
            if (k == 0) break;
        }
        input [k] = nxtVal;
    }
    System.out.println ("Medium sorting is done and the result is :");
    for (int i : input) {
        System.out.print (i + ",");
    }
}
----------------------------------------

 public void sort (int [] input) {
    for (int out = 0; out < input.length - 1; out++) {
        int nxtVal = input [out+1];
        int k = out;
        for (int j = out; j >= 0 && (input[k] > nxtVal); j--) {
            input[j+1] = input[k];
            k--;
        }
        input[k+1] = nxtVal;
    }
    System.out.println ("Medium sorting is done and the result is :");
    for (int i : input) {
        System.out.print (i + ",");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
384
3
Gpt3D_Clone384_3.java 1 17
Gpt3D_Clone384_3.java 18 34
----------------------------------------

public void sort (int [] input) {
    for (int i = 0;
    i < input.length - 1; i ++) {
        int k = i + 1;
        int nxtVal = input [k];
        while (input [k - 1] > nxtVal) {
            input [k] = input [k - 1];
            k --;
            if (k == 0) break;
        }
        input [k] = nxtVal;
    }
    System.out.println ("Medium sorting is done and the result is :");
    for (int i : input) {
        System.out.print (i + ",");
    }
}
----------------------------------------

 public void sort (int [] input) {
    for (int i = 0; i < input.length - 1; i++) { 
        for (int k = i + 1; k > 0; k--) { 
            if (input[k - 1] > input[k]) {
                int temp = input[k - 1];
                input[k - 1] = input[k];
                input[k] = temp; 
            }
        }
    }
    System.out.println ("Medium sorting is done and the result is :");
    for (int i : input) {
        System.out.print (i + ",");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
388
0
Gpt3D_Clone388_0.java 1 29
Gpt3D_Clone388_0.java 30 63
----------------------------------------

public static void main (String args []) throws java.io.IOException {
    List < String > list = new ArrayList < String > ();
    list.add ("A");
    list.add ("B");
    list.add ("A");
    list.add ("B");
    list.add ("C");
    list.add ("D");
    Collections.sort (list);
    List < ArrayList < String > > arrays = new ArrayList < ArrayList < String > > ();
    int k = 0;
    for (int i = 0;
    i < list.size ();) {
        int count = Collections.frequency (list, list.get (i));
        arrays.add (new ArrayList < String > ());
        for (int j = 0;
        j < count; j ++) {
            arrays.get (k).add (list.get (i));
        }
        i += count;
        k ++;
    }
    for (ArrayList < String > arr : arrays) {
        for (String s : arr) {
            System.out.print (s + " ");
        }
        System.out.println ();
    }
}
----------------------------------------

 public static void main (String args []) throws java.io.IOException {
    // Use a set to store the elements of the list
    Set<String> set = new TreeSet<String>();
    for (String element : list)
        set.add(element);
    // Create an empty hashmap
    HashMap<String, Integer> mapOut = new HashMap<String, Integer>();
    // Iterate through the list and store the frequency in the hashmap
    for (String each : set) {
        int count = 0;
        for (String current : list) {
            if (each.equals(current))
                count++;
        }
        mapOut.put(each, count);
    }
    // Sort the list 
    Collections.sort(list);
    //Declare a list of ArrayLists
    List < ArrayList <String> > newList = new ArrayList <ArrayList<String>>();
    // Iterate through the map and create a new arraylist for the each element
    for (String each : mapOut.keySet()) {
        System.out.println(each);
        ArrayList <String> temp = new ArrayList<String>();
        for (int j = 0; j < mapOut.get(each); j++) {
            temp.add(each);
        }
        //add the arraylist to the new arraylist
        newList.add(temp);
    }
    System.out.println(newList);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
388
1
Gpt3D_Clone388_1.java 1 29
Gpt3D_Clone388_1.java 30 65
----------------------------------------

public static void main (String args []) throws java.io.IOException {
    List < String > list = new ArrayList < String > ();
    list.add ("A");
    list.add ("B");
    list.add ("A");
    list.add ("B");
    list.add ("C");
    list.add ("D");
    Collections.sort (list);
    List < ArrayList < String > > arrays = new ArrayList < ArrayList < String > > ();
    int k = 0;
    for (int i = 0;
    i < list.size ();) {
        int count = Collections.frequency (list, list.get (i));
        arrays.add (new ArrayList < String > ());
        for (int j = 0;
        j < count; j ++) {
            arrays.get (k).add (list.get (i));
        }
        i += count;
        k ++;
    }
    for (ArrayList < String > arr : arrays) {
        for (String s : arr) {
            System.out.print (s + " ");
        }
        System.out.println ();
    }
}
----------------------------------------

 public static void main (String args []) throws java.io.IOException {
    // Create a List to store the elements of the list
    List<String> listOut = new ArrayList<String>();
    // Iterate through the list and store the elements without duplicates in listOut 
    for (String element : list)
        if (!listOut.contains(element))
            listOut.add(element);
    // Sort the list 
    Collections.sort(listOut);
    // Declare a map to store the frequency of each element
    Map<String, Integer> map = new HashMap<String, Integer>();
    // Put elements to the map
    for (String each : listOut) {
        int count = 0;
        for (String current : list) {
            if (each.equals(current))
                count++;
        }
        map.put(each, count);
    }
    //Declare a list of ArrayLists
    List < ArrayList <String>> newList = new ArrayList <ArrayList<String>>();
    // Iterate through the map and create a new arraylist for the each element
    for (String each : map.keySet()) {
        System.out.println(each);
        ArrayList<String> temp = new ArrayList<String>();
        for (int j = 0; j < map.get(each); j++) {
            temp.add(each);
        }
        //add the arraylist to the new arraylist
        newList.add(temp);
    }
    System.out.println(newList);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
388
2
Gpt3D_Clone388_2.java 1 29
Gpt3D_Clone388_2.java 30 64
----------------------------------------

public static void main (String args []) throws java.io.IOException {
    List < String > list = new ArrayList < String > ();
    list.add ("A");
    list.add ("B");
    list.add ("A");
    list.add ("B");
    list.add ("C");
    list.add ("D");
    Collections.sort (list);
    List < ArrayList < String > > arrays = new ArrayList < ArrayList < String > > ();
    int k = 0;
    for (int i = 0;
    i < list.size ();) {
        int count = Collections.frequency (list, list.get (i));
        arrays.add (new ArrayList < String > ());
        for (int j = 0;
        j < count; j ++) {
            arrays.get (k).add (list.get (i));
        }
        i += count;
        k ++;
    }
    for (ArrayList < String > arr : arrays) {
        for (String s : arr) {
            System.out.print (s + " ");
        }
        System.out.println ();
    }
}
----------------------------------------

 public static void main (String args[]) throws java.io.IOException {
    // Create a set
    Set<String> s = new HashSet<String>();
    // Put the elements of list into the Set
    list.forEach(element -> s.add(element));
    // Create a map
    Map<String, Integer> map = new HashMap<>();
    // Iterate through the set and create a new arraylist and add the Map
    //for storing frequency of each element
    for (String str : s) {
        int count = 0;
        for (int i = 0; i < list.size(); i++) {
            if (str.equals(list.get(i)))
                count++;
        }
       map.put(str, count);
    }
    // Sort the list 
    Collections.sort(list);
    // Iterate through the map and create a new arraylist for the each element
    List < ArrayList <String> > out = new ArrayList < ArrayList <String> > ();
    for (String each : map.keySet()) {
        System.out.println(each);
        List <String> temp = new ArrayList<String>();
        for (int j = 0; j < map.get(each); j++) {
            temp.add(each);
        }
         //add the arraylist to the new arraylist
        out.add(temp);
    }
    System.out.println(out);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
388
3
Gpt3D_Clone388_3.java 1 29
Gpt3D_Clone388_3.java 30 62
----------------------------------------

public static void main (String args []) throws java.io.IOException {
    List < String > list = new ArrayList < String > ();
    list.add ("A");
    list.add ("B");
    list.add ("A");
    list.add ("B");
    list.add ("C");
    list.add ("D");
    Collections.sort (list);
    List < ArrayList < String > > arrays = new ArrayList < ArrayList < String > > ();
    int k = 0;
    for (int i = 0;
    i < list.size ();) {
        int count = Collections.frequency (list, list.get (i));
        arrays.add (new ArrayList < String > ());
        for (int j = 0;
        j < count; j ++) {
            arrays.get (k).add (list.get (i));
        }
        i += count;
        k ++;
    }
    for (ArrayList < String > arr : arrays) {
        for (String s : arr) {
            System.out.print (s + " ");
        }
        System.out.println ();
    }
}
----------------------------------------

 public static void main (String args[]) throws java.io.IOException {
	// Use a HashSet to store the elements of the list
	Set<String> set = new HashSet<String>();
	for (String each : list) {
	    set.add(each);
	}
	// Create a HashMap for storing the frequency of each element
	Map<String, Integer> map = new HashMap<String, Integer>();
	for (String each : set) {
	    int count = 0;
	    for (String current : list) {
		if (each.equals(current))
		    count++;
	    }
	    map.put(each, count);
	}
	// Sort the list 
	Collections.sort(list);
	//Declare a list of ArrayLists
	List < ArrayList <String>> newList = new ArrayList <ArrayList<String>>();
	// Iterate through the map and create a new arraylist for the each element
	for (String each : map.keySet()) {
	    ArrayList <String> temp = new ArrayList<String>();
	    for (int j = 0; j < map.get(each); j++) {
	    temp.add(each);
	    }
	    //add the arraylist to the new arraylist
	    newList.add(temp);
	}
	System.out.println(newList);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
388
4
Gpt3D_Clone388_4.java 1 29
Gpt3D_Clone388_4.java 30 59
----------------------------------------

public static void main (String args []) throws java.io.IOException {
    List < String > list = new ArrayList < String > ();
    list.add ("A");
    list.add ("B");
    list.add ("A");
    list.add ("B");
    list.add ("C");
    list.add ("D");
    Collections.sort (list);
    List < ArrayList < String > > arrays = new ArrayList < ArrayList < String > > ();
    int k = 0;
    for (int i = 0;
    i < list.size ();) {
        int count = Collections.frequency (list, list.get (i));
        arrays.add (new ArrayList < String > ());
        for (int j = 0;
        j < count; j ++) {
            arrays.get (k).add (list.get (i));
        }
        i += count;
        k ++;
    }
    for (ArrayList < String > arr : arrays) {
        for (String s : arr) {
            System.out.print (s + " ");
        }
        System.out.println ();
    }
}
----------------------------------------

  public static void main (String args []) throws java.io.IOException {
    // Declare a hashmap and a set
    HashMap<String, Integer> hm = new HashMap<String, Integer>();
    Set<String> s = new HashSet<String>();
    // Add the elements of the list to the hashmap
    for (String each : list) {
        if (hm.containsKey(each))
            hm.put(each, hm.get(each) + 1);
        else
            hm.put(each, 1);
    }
    // Add the keys of the hashmap to the set
    for (String each: hm.keySet())
        s.add(each);
    // Iterate through the set and create a new arraylist for the each element
    for (String each: s) {
        System.out.println(each);
        List <ArrayList <String>> out = new ArrayList <ArrayList <String>> (); 
        ArrayList <String> newList = new ArrayList <String> ();
        for (int j = 0; j < hm.get(each); j++) {
            newList.add(each);
        }
        // add the arraylist to the new arraylist
        out.add (newList);
    }
    System.out.println(out);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
388
5
Gpt3D_Clone388_5.java 1 29
Gpt3D_Clone388_5.java 30 57
----------------------------------------

public static void main (String args []) throws java.io.IOException {
    List < String > list = new ArrayList < String > ();
    list.add ("A");
    list.add ("B");
    list.add ("A");
    list.add ("B");
    list.add ("C");
    list.add ("D");
    Collections.sort (list);
    List < ArrayList < String > > arrays = new ArrayList < ArrayList < String > > ();
    int k = 0;
    for (int i = 0;
    i < list.size ();) {
        int count = Collections.frequency (list, list.get (i));
        arrays.add (new ArrayList < String > ());
        for (int j = 0;
        j < count; j ++) {
            arrays.get (k).add (list.get (i));
        }
        i += count;
        k ++;
    }
    for (ArrayList < String > arr : arrays) {
        for (String s : arr) {
            System.out.print (s + " ");
        }
        System.out.println ();
    }
}
----------------------------------------

 public static void main (String args []) throws java.io.IOException {
    // Declare a Map 
    Map<String, Integer> mapOut = new HashMap<>();
   // Iterate through the list and create a new arraylist for the each element
    for (String each : list) {
        if (mapOut.containsKey(each))
            mapOut.put(each, mapOut.get(each) + 1);
        else
            mapOut.put(each, 1);
    }
    // Sort the list 
    Collections.sort(list);
    // Declare a list of ArrayLists
    List < ArrayList <String> > out = new ArrayList < ArrayList <String> > (); 
    // Iterate through the map and create a new arraylist for the each element
    for (String each : mapOut.keySet()) {
        System.out.println(each);
        List <String> temp = new ArrayList<String>();
        for (int j = 0; j < mapOut.get(each); j++) {
            temp.add(each);
        }
        //add the arraylist to the new arraylist
        out.add(temp);
    }
    System.out.println(out);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
388
6
Gpt3D_Clone388_6.java 1 29
Gpt3D_Clone388_6.java 30 57
----------------------------------------

public static void main (String args []) throws java.io.IOException {
    List < String > list = new ArrayList < String > ();
    list.add ("A");
    list.add ("B");
    list.add ("A");
    list.add ("B");
    list.add ("C");
    list.add ("D");
    Collections.sort (list);
    List < ArrayList < String > > arrays = new ArrayList < ArrayList < String > > ();
    int k = 0;
    for (int i = 0;
    i < list.size ();) {
        int count = Collections.frequency (list, list.get (i));
        arrays.add (new ArrayList < String > ());
        for (int j = 0;
        j < count; j ++) {
            arrays.get (k).add (list.get (i));
        }
        i += count;
        k ++;
    }
    for (ArrayList < String > arr : arrays) {
        for (String s : arr) {
            System.out.print (s + " ");
        }
        System.out.println ();
    }
}
----------------------------------------

 public static void main (String args []) throws java.io.IOException {
    // Declare a map 
    Map<String, Integer> map = new HashMap<String, Integer>();
    // Put the elements of list into the map
    list.forEach(element -> {
        if (map.containsKey(element))
            map.put(element, map.get(element) + 1);
        else
            map.put(element, 1);
    });
   // Sort the list 
   Collections.sort(list);
   //Declare a list of ArrayLists
   List < ArrayList <String>> newList = new ArrayList <ArrayList<String>>();
   // Iterate through the map and create a new arraylist for the each element
    for (String each: map.keySet()){
        List<String> subList = new ArrayList<String>();
        for (int j = 0; j < map.get(each); j++){
            subList.add(each);
        }
         //add the arraylist to the new arraylist
        newList.add(subList);
    }
    System.out.println(newList);
    
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
388
7
Gpt3D_Clone388_7.java 1 29
Gpt3D_Clone388_7.java 30 57
----------------------------------------

public static void main (String args []) throws java.io.IOException {
    List < String > list = new ArrayList < String > ();
    list.add ("A");
    list.add ("B");
    list.add ("A");
    list.add ("B");
    list.add ("C");
    list.add ("D");
    Collections.sort (list);
    List < ArrayList < String > > arrays = new ArrayList < ArrayList < String > > ();
    int k = 0;
    for (int i = 0;
    i < list.size ();) {
        int count = Collections.frequency (list, list.get (i));
        arrays.add (new ArrayList < String > ());
        for (int j = 0;
        j < count; j ++) {
            arrays.get (k).add (list.get (i));
        }
        i += count;
        k ++;
    }
    for (ArrayList < String > arr : arrays) {
        for (String s : arr) {
            System.out.print (s + " ");
        }
        System.out.println ();
    }
}
----------------------------------------

  public static void main (String args []) throws java.io.IOException {
    // Declare a hashmap 
    HashMap<String, Integer> hm = new HashMap<String, Integer>();
    // Add elements to the hashmap
    for (String each : list) {
        if (hm.containsKey(each))
            hm.put(each, hm.get(each) + 1);
        else
            hm.put(each, 1);
    }
    // Sort the elements of the list
    Collections.sort(list);
    // Iterate through the list and create a new arraylist for the each element
    List <ArrayList <String>> out = new ArrayList <ArrayList <String>> ();
    for (String each : list) {
        ArrayList <String> temp = new ArrayList<String>();
        for (int j = 0; j < hm.get(each); j++) {
            temp.add(each);
        }
        //add the arraylist to the new arraylist
        out.add (temp);
    }
    System.out.println(out);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
388
8
Gpt3D_Clone388_8.java 1 29
Gpt3D_Clone388_8.java 30 55
----------------------------------------

public static void main (String args []) throws java.io.IOException {
    List < String > list = new ArrayList < String > ();
    list.add ("A");
    list.add ("B");
    list.add ("A");
    list.add ("B");
    list.add ("C");
    list.add ("D");
    Collections.sort (list);
    List < ArrayList < String > > arrays = new ArrayList < ArrayList < String > > ();
    int k = 0;
    for (int i = 0;
    i < list.size ();) {
        int count = Collections.frequency (list, list.get (i));
        arrays.add (new ArrayList < String > ());
        for (int j = 0;
        j < count; j ++) {
            arrays.get (k).add (list.get (i));
        }
        i += count;
        k ++;
    }
    for (ArrayList < String > arr : arrays) {
        for (String s : arr) {
            System.out.print (s + " ");
        }
        System.out.println ();
    }
}
----------------------------------------

 public static void main (String args []) throws java.io.IOException {
    // Create a List to store the elements of the list 
    List<String> listOut = new ArrayList<String>();
    // Iterate through the list and store unique elements
    for(String element : list)
        if(!listOut.contains(element))
            listOut.add(element);
    // Sort the list 
    Collections.sort(listOut);
    // Declare a list of ArrayLists
    List <ArrayList <String>> arrays = new ArrayList <ArrayList <String>>();
    // Iterate through the list and create a new arraylist for the each element
    for (String each : listOut) {
        System.out.println(each);
        ArrayList <String> listIn = new ArrayList <String>();
        for (int i = 0; i < list.size(); i++) {
            if (each.equals(list.get(i)))
                listIn.add(each);
        }
        // add the arraylist to the new arraylist
        arrays.add(listIn);
    }
    System.out.println(arrays);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
388
9
Gpt3D_Clone388_9.java 1 29
Gpt3D_Clone388_9.java 30 56
----------------------------------------

public static void main (String args []) throws java.io.IOException {
    List < String > list = new ArrayList < String > ();
    list.add ("A");
    list.add ("B");
    list.add ("A");
    list.add ("B");
    list.add ("C");
    list.add ("D");
    Collections.sort (list);
    List < ArrayList < String > > arrays = new ArrayList < ArrayList < String > > ();
    int k = 0;
    for (int i = 0;
    i < list.size ();) {
        int count = Collections.frequency (list, list.get (i));
        arrays.add (new ArrayList < String > ());
        for (int j = 0;
        j < count; j ++) {
            arrays.get (k).add (list.get (i));
        }
        i += count;
        k ++;
    }
    for (ArrayList < String > arr : arrays) {
        for (String s : arr) {
            System.out.print (s + " ");
        }
        System.out.println ();
    }
}
----------------------------------------

 public static void main (String args[]) throws java.io.IOException {
    // Create a List to store the elements of the list
    List<String> list2 = new ArrayList<String>();
    // Store the unique elements in list 2
    for(String element : list)
        if(!list2.contains(element))
            list2.add(element);
    // Sort the list 
    Collections.sort(list2);
    // Declare a list of ArrayLists
    List <ArrayList <String>> out = new ArrayList <ArrayList <String>>();
    // Iterate through the list and create a new arraylist for the each element
    for(String each : list2) {
        System.out.println(each);
        ArrayList <String> temp = new ArrayList <String>();
        for(int i = 0; i < list.size(); i++){
            if (each.equals(list.get(i)))
                temp.add(list.get(i));
        }
        // add the arraylist to the new arraylist
        out.add(temp);
    }
    System.out.println(out);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
38
0
Gpt3D_Clone38_0.java 1 11
Gpt3D_Clone38_0.java 12 24
----------------------------------------

public static void shuffleArray (int [] array) {
    List < Integer > list = new ArrayList < > ();
    for (int i : array) {
        list.add (i);
    }
    Collections.shuffle (list);
    for (int i = 0;
    i < list.size (); i ++) {
        array [i] = list.get (i);
    }
}
----------------------------------------

 public static void shuffleArray (int [] array) {
    Random rand = new Random ();
    int n = array.length;
    while (n > 0) {
        int index = rand.nextInt (n);
        n--;
        int temp = array [n];
        array [n] = array [index];
        array [index] = temp;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
38
1
Gpt3D_Clone38_1.java 1 11
Gpt3D_Clone38_1.java 12 26
----------------------------------------

public static void shuffleArray (int [] array) {
    List < Integer > list = new ArrayList < > ();
    for (int i : array) {
        list.add (i);
    }
    Collections.shuffle (list);
    for (int i = 0;
    i < list.size (); i ++) {
        array [i] = list.get (i);
    }
}
----------------------------------------

  public static void shuffleArray (int [] array) {
    Random rand = new Random ();
    for (int i = 0;
    i < array.length; i ++) {
        // Generate two random numbers between 0 & array.length
        int randIndex1 = rand.nextInt (array.length);
        int randIndex2 = rand.nextInt (array.length);
        // Swap the elements of the random positions
        int temp = array [randIndex1];
        array [randIndex1] = array [randIndex2];
        array [randIndex2] = temp;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
38
3
Gpt3D_Clone38_3.java 1 11
Gpt3D_Clone38_3.java 12 26
----------------------------------------

public static void shuffleArray (int [] array) {
    List < Integer > list = new ArrayList < > ();
    for (int i : array) {
        list.add (i);
    }
    Collections.shuffle (list);
    for (int i = 0;
    i < list.size (); i ++) {
        array [i] = list.get (i);
    }
}
----------------------------------------

  public static void shuffleArray (int [] array) {
    Random rand = new Random ();
    for (int i = 0;
    i < array.length; i ++) {
        // Generate two random numbers between 0 & array.length-1
        int randIndex1 = rand.nextInt (array.length-i);
        int randIndex2 = rand.nextInt (array.length-i);
        // Swap the elements of the random positions
        int temp = array [randIndex1];
        array [randIndex1] = array [randIndex2];
        array [randIndex2] = temp;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
38
4
Gpt3D_Clone38_4.java 1 11
Gpt3D_Clone38_4.java 12 23
----------------------------------------

public static void shuffleArray (int [] array) {
    List < Integer > list = new ArrayList < > ();
    for (int i : array) {
        list.add (i);
    }
    Collections.shuffle (list);
    for (int i = 0;
    i < list.size (); i ++) {
        array [i] = list.get (i);
    }
}
----------------------------------------

 public static void shuffleArray (int [] array) {
    Random rand = new Random ();
    for (int i = 0;
    i < array.length; i ++) {
        int randIndex = rand.nextInt (array.length);
        int temp = array [randIndex];
        array [randIndex] = array [i];
        array [i] = temp;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
38
5
Gpt3D_Clone38_5.java 1 11
Gpt3D_Clone38_5.java 12 23
----------------------------------------

public static void shuffleArray (int [] array) {
    List < Integer > list = new ArrayList < > ();
    for (int i : array) {
        list.add (i);
    }
    Collections.shuffle (list);
    for (int i = 0;
    i < list.size (); i ++) {
        array [i] = list.get (i);
    }
}
----------------------------------------

 public static void shuffleArray (int [] array) {
    Random rand = new Random (System.nanoTime ());
    for (int i = 0;
    i < array.length; i ++) {
        int j = rand.nextInt (array.length);
        int temp = array[j];
        array[j] = array[i];
        array[i] = temp;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
38
6
Gpt3D_Clone38_6.java 1 11
Gpt3D_Clone38_6.java 12 23
----------------------------------------

public static void shuffleArray (int [] array) {
    List < Integer > list = new ArrayList < > ();
    for (int i : array) {
        list.add (i);
    }
    Collections.shuffle (list);
    for (int i = 0;
    i < list.size (); i ++) {
        array [i] = list.get (i);
    }
}
----------------------------------------

 public static void shuffleArray (int [] array) {
    Random rand = new Random ();
    for (int i = array.length -1;
    i > 0; i --) {
        int randIndex = rand.nextInt (i + 1);
        int temp = array [randIndex];
        array [randIndex] = array [i];
        array [i] = temp;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
38
7
Gpt3D_Clone38_7.java 1 11
Gpt3D_Clone38_7.java 12 23
----------------------------------------

public static void shuffleArray (int [] array) {
    List < Integer > list = new ArrayList < > ();
    for (int i : array) {
        list.add (i);
    }
    Collections.shuffle (list);
    for (int i = 0;
    i < list.size (); i ++) {
        array [i] = list.get (i);
    }
}
----------------------------------------

 public static void shuffleArray (int [] array) {
    Random rand = new Random ();
    for (int i = 0;
    i < array.length; i ++) {
        int randomChoose =  i + rand.nextInt(array.length - i);
        int temp = array[randomChoose];
        array[randomChoose] = array[i];
        array[i] = temp;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
38
8
Gpt3D_Clone38_8.java 1 11
Gpt3D_Clone38_8.java 12 23
----------------------------------------

public static void shuffleArray (int [] array) {
    List < Integer > list = new ArrayList < > ();
    for (int i : array) {
        list.add (i);
    }
    Collections.shuffle (list);
    for (int i = 0;
    i < list.size (); i ++) {
        array [i] = list.get (i);
    }
}
----------------------------------------

 public static void shuffleArray (int [] array) {
    Random rand = new Random ();
    for (int i = 0;
    i < array.length; i ++) {
        int randIndex = rand.nextInt (array.length - i) + i;
        int temp = array [randIndex];
        array [randIndex] = array [i];
        array [i] = temp;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
38
9
Gpt3D_Clone38_9.java 1 11
Gpt3D_Clone38_9.java 12 22
----------------------------------------

public static void shuffleArray (int [] array) {
    List < Integer > list = new ArrayList < > ();
    for (int i : array) {
        list.add (i);
    }
    Collections.shuffle (list);
    for (int i = 0;
    i < list.size (); i ++) {
        array [i] = list.get (i);
    }
}
----------------------------------------

 public static void shuffleArray (int [] array) {
    Random rand = new Random ();
    for (int i = 0; i < array.length; i++) {
        int j = rand.nextInt(array.length - 1);
        int temp = array[i];
        array[i] = array[j];
        array[j] = temp;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
391
0
Gpt3D_Clone391_0.java 1 9
Gpt3D_Clone391_0.java 10 21
----------------------------------------

public static final void printArray (int [] arr) {
    System.out.print ("[");
    for (int i = 0;
    i < arr.length; i ++) {
        if (i == arr.length - 1) System.out.print (arr [i]);
        else System.out.print (arr [i] + ", ");
    }
    System.out.println ("]");
}
----------------------------------------

  public static void printArray(int[] arr) { 
      String output = "["; 
      for (int i = 0; i < arr.length; i++) { 
        output += arr[i]; 
        if (i == arr.length - 1) output += "]"; 
        else output += ","; 
      }
      System.out.println(output); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
391
1
Gpt3D_Clone391_1.java 1 9
Gpt3D_Clone391_1.java 10 20
----------------------------------------

public static final void printArray (int [] arr) {
    System.out.print ("[");
    for (int i = 0;
    i < arr.length; i ++) {
        if (i == arr.length - 1) System.out.print (arr [i]);
        else System.out.print (arr [i] + ", ");
    }
    System.out.println ("]");
}
----------------------------------------

  public static void printArray(int[] arr) { 
      String output = "[";
      for (int i = 0; i < arr.length; i++){
        output += arr[i];
        if (i == arr.length - 1) output += "]";
        else output += "," + " ";
    }
    System.out.println(output);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
391
2
Gpt3D_Clone391_2.java 1 9
Gpt3D_Clone391_2.java 10 21
----------------------------------------

public static final void printArray (int [] arr) {
    System.out.print ("[");
    for (int i = 0;
    i < arr.length; i ++) {
        if (i == arr.length - 1) System.out.print (arr [i]);
        else System.out.print (arr [i] + ", ");
    }
    System.out.println ("]");
}
----------------------------------------

  public static void printArray(int[] arr) {
      System.out.print("[");
      for (int i = 0; i < arr.length; i++) {
        System.out.print(arr[i]);
        if (i != arr.length - 1)
            System.out.print(", ");
      }
      System.out.print("]");
      System.out.println();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
391
3
Gpt3D_Clone391_3.java 1 9
Gpt3D_Clone391_3.java 10 20
----------------------------------------

public static final void printArray (int [] arr) {
    System.out.print ("[");
    for (int i = 0;
    i < arr.length; i ++) {
        if (i == arr.length - 1) System.out.print (arr [i]);
        else System.out.print (arr [i] + ", ");
    }
    System.out.println ("]");
}
----------------------------------------

  public static void printArray(int[] arr) {
      System.out.print("[");
      for(int i = 0; i < arr.length; i++) {
        System.out.print(arr[i]);
        if(i != arr.length - 1)
          System.out.print(", ");
      }
      System.out.println("]");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
391
4
Gpt3D_Clone391_4.java 1 9
Gpt3D_Clone391_4.java 10 19
----------------------------------------

public static final void printArray (int [] arr) {
    System.out.print ("[");
    for (int i = 0;
    i < arr.length; i ++) {
        if (i == arr.length - 1) System.out.print (arr [i]);
        else System.out.print (arr [i] + ", ");
    }
    System.out.println ("]");
}
----------------------------------------

 public static void printArray(int[] arr) { 
      for (int i = 0; i < arr.length; i++) { 
        System.out.print(arr[i]);
        if (i == arr.length - 1) System.out.println("]");
        else System.out.print(", ");
    }
    System.out.print("[");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
391
5
Gpt3D_Clone391_5.java 1 9
Gpt3D_Clone391_5.java 10 20
----------------------------------------

public static final void printArray (int [] arr) {
    System.out.print ("[");
    for (int i = 0;
    i < arr.length; i ++) {
        if (i == arr.length - 1) System.out.print (arr [i]);
        else System.out.print (arr [i] + ", ");
    }
    System.out.println ("]");
}
----------------------------------------

 public static void printArray(int[] arr) {
      System.out.print("[");
      for (int i = 0; i < arr.length; i++) { 
        System.out.print(arr[i]);
        if (i != arr.length - 1)
            System.out.print(", ");
      }
      System.out.println("]");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
391
6
Gpt3D_Clone391_6.java 1 9
Gpt3D_Clone391_6.java 10 19
----------------------------------------

public static final void printArray (int [] arr) {
    System.out.print ("[");
    for (int i = 0;
    i < arr.length; i ++) {
        if (i == arr.length - 1) System.out.print (arr [i]);
        else System.out.print (arr [i] + ", ");
    }
    System.out.println ("]");
}
----------------------------------------

  public static void printArray(int[] arr) { 
      System.out.print("[");
      int i;
      for (i = 0; i < arr.length-1; i++) {
        System.out.print(arr[i] + ", ");
      }
      System.out.println(arr[i] + "]");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
391
7
Gpt3D_Clone391_7.java 1 9
Gpt3D_Clone391_7.java 10 18
----------------------------------------

public static final void printArray (int [] arr) {
    System.out.print ("[");
    for (int i = 0;
    i < arr.length; i ++) {
        if (i == arr.length - 1) System.out.print (arr [i]);
        else System.out.print (arr [i] + ", ");
    }
    System.out.println ("]");
}
----------------------------------------

 public static void printArray(int[] arr) {
      System.out.print("[");
      for (int i = 0; i < arr.length; i++) {
        if (i == arr.length - 1) System.out.println(arr[i] + "]"); 
        else System.out.print(arr[i] + ", ");
      }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
391
8
Gpt3D_Clone391_8.java 1 9
Gpt3D_Clone391_8.java 10 17
----------------------------------------

public static final void printArray (int [] arr) {
    System.out.print ("[");
    for (int i = 0;
    i < arr.length; i ++) {
        if (i == arr.length - 1) System.out.print (arr [i]);
        else System.out.print (arr [i] + ", ");
    }
    System.out.println ("]");
}
----------------------------------------

  public static void printArray(int[] arr) {
      System.out.print("[");
      for (int i = 0; i < arr.length - 1; i++) 
        System.out.print(arr[i] + ", ");
      System.out.println(arr[arr.length - 1] + "]");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
391
9
Gpt3D_Clone391_9.java 1 9
Gpt3D_Clone391_9.java 10 17
----------------------------------------

public static final void printArray (int [] arr) {
    System.out.print ("[");
    for (int i = 0;
    i < arr.length; i ++) {
        if (i == arr.length - 1) System.out.print (arr [i]);
        else System.out.print (arr [i] + ", ");
    }
    System.out.println ("]");
}
----------------------------------------

  public static void printArray(int[] arr) {
      System.out.print("[");
      for (int i = 0; i < arr.length; i++) 
        System.out.print((i == arr.length - 1) ? arr[i] : arr[i] + ", ");
      System.out.println("]");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
392
0
Gpt3D_Clone392_0.java 1 15
Gpt3D_Clone392_0.java 16 54
----------------------------------------

public static int mode (int [] [] arr) {
    List < Integer > list = new ArrayList < Integer > ();
    for (int i = 0;
    i < arr.length; i ++) {
        for (int j = 0;
        j < arr [i].length; j ++) {
            list.add (arr [i] [j]);
        }
    }
    int [] vector = new int [list.size ()];
    for (int i = 0;
    i < vector.length; i ++) {
        vector [i] = list.get (i);
    }
}
----------------------------------------

 
 public static int mode (int [][] arr){
	//Create an ArrayList 
	List<Integer> list = new ArrayList<>();
	// Traverse the 2D array 
	for (int i = 0; i < arr.length; i++) {
		for (int j = 0; j < arr[i].length; j++) {
			// Add elements of the 2D array to the list 
			list.add(arr[i][j]);
		}
	}
	// Make an integer array to store the list elements 
	int[] vector = new int[list.size()];
	for (int i = 0; i < vector.length; i++) {
		vector[i] = list.get(i);
	}
	// Make an integer array to store frequency of each element 
	int[] counts = new int[vector.length];
	// Initialise the mode element to 0 
	int mode = 0;
	// Iterate through the vector array 
	for (int i = 0; i < vector.length; i++) {
		int count = 0;
		// Count the frequency of each element by comparing elements of the vector array 
		for (int j = 0; j < vector.length; j++) {
			if (vector[i] == vector[j]) {
				count++;
				counts[i] = count;
			}
		}
		// Find the mode by comparing the count of each element with the mode 
		if (count > mode) {
			mode = vector[i];
		}
	}
	return mode;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
392
1
Gpt3D_Clone392_1.java 1 15
Gpt3D_Clone392_1.java 16 60
----------------------------------------

public static int mode (int [] [] arr) {
    List < Integer > list = new ArrayList < Integer > ();
    for (int i = 0;
    i < arr.length; i ++) {
        for (int j = 0;
        j < arr [i].length; j ++) {
            list.add (arr [i] [j]);
        }
    }
    int [] vector = new int [list.size ()];
    for (int i = 0;
    i < vector.length; i ++) {
        vector [i] = list.get (i);
    }
}
----------------------------------------

 public static int mode(int[][] arr) {
		
	// create a map to store counts for each element
        Map<Integer, Integer> counts = new HashMap<>();
	
	// loop through each row and each column
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr[i].length; j++) {
		
		// check if map contains the element
                if (counts.containsKey(arr[i][j])) {
			
			// if yes increment the count by one
                    counts.put(arr[i][j], counts.get(arr[i][j]) + 1);
                } else {
			
			// if not add the element to map with count as one
                    counts.put(arr[i][j], 1);
                }
            }
        }
	
	// initializing highest frequency and mode as 0
        int highestFrequency = 0;
        int mode = 0;
	
	// looping over the map
        for (int num : counts.keySet()) {
		
		// set current count
            int count = counts.get(num);
		
		// if the frequency is greater than highest frequency,
		// set highest frequency equals to the current count and
		// set the mode equals to current number
            if (count > highestFrequency) {
                mode = num;
                highestFrequency = count;
            }
        }
        // return the mode
        return mode;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
392
2
Gpt3D_Clone392_2.java 1 15
Gpt3D_Clone392_2.java 16 57
----------------------------------------

public static int mode (int [] [] arr) {
    List < Integer > list = new ArrayList < Integer > ();
    for (int i = 0;
    i < arr.length; i ++) {
        for (int j = 0;
        j < arr [i].length; j ++) {
            list.add (arr [i] [j]);
        }
    }
    int [] vector = new int [list.size ()];
    for (int i = 0;
    i < vector.length; i ++) {
        vector [i] = list.get (i);
    }
}
----------------------------------------

 public static int mode(int[][] arr) {
	// create a list 
    List<Integer> list = new ArrayList<>();
    // loop through each row and each column 
    for(int i=0; i<arr.length; i++){
        for(int j=0; j<arr[i].length; j++){
         	// add the element to list 
            list.add(arr[i][j]);
        }
    }
    
	// create a map to store each element as key and its count as value 
    Map<Integer, Integer> counts = new HashMap<>();
    for (Integer value : list) {
        if (counts.containsKey(value)) {
        // if element is present in map increase its count
            counts.put(value, counts.get(value) + 1);
        } else {
        // otherwise set the count to one
            counts.put(value, 1);
        }
    }
	// initialising highest frequency and mode as 0 
    int highestFrequency = 0;
    int mode = 0;
	// looping over the map
    for (int num : counts.keySet()) {
    // set current count
        int count = counts.get(num);
    // if the frequency is greater than highest frequency,
	// set highest frequency equals to the current count and
	// set the mode equals to current number
        if (count > highestFrequency) {
            mode = num;
            highestFrequency = count;
        }
    }
	// return the mode 
    return mode;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
392
3
Gpt3D_Clone392_3.java 1 15
Gpt3D_Clone392_3.java 16 43
----------------------------------------

public static int mode (int [] [] arr) {
    List < Integer > list = new ArrayList < Integer > ();
    for (int i = 0;
    i < arr.length; i ++) {
        for (int j = 0;
        j < arr [i].length; j ++) {
            list.add (arr [i] [j]);
        }
    }
    int [] vector = new int [list.size ()];
    for (int i = 0;
    i < vector.length; i ++) {
        vector [i] = list.get (i);
    }
}
----------------------------------------

 public static int mode(int[][] arr) {
    List<Integer> list = new ArrayList<>();
    for(int i=0; i<arr.length; i++) {
        for(int j=0; j<arr[i].length; j++) {
            if(!list.contains(arr[i][j])) {
                list.add(arr[i][j]);
            }
        }
    }
    int[] counts = new int[list.size()];
    int mostFrequent = 0;
    int mode = 0;
    int highestFrequency = 0;
    for(int i=0; i<arr.length; i++) {
        for(int j=0; j<arr[i].length; j++) {
            mostFrequent = list.indexOf(arr[i][j]);
            counts[mostFrequent]++;
            if(counts[mostFrequent] > highestFrequency) {
                highestFrequency = counts[mostFrequent];
                mode = arr[i][j];
            }
        }
    }
    return mode;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
392
4
Gpt3D_Clone392_4.java 1 15
Gpt3D_Clone392_4.java 16 40
----------------------------------------

public static int mode (int [] [] arr) {
    List < Integer > list = new ArrayList < Integer > ();
    for (int i = 0;
    i < arr.length; i ++) {
        for (int j = 0;
        j < arr [i].length; j ++) {
            list.add (arr [i] [j]);
        }
    }
    int [] vector = new int [list.size ()];
    for (int i = 0;
    i < vector.length; i ++) {
        vector [i] = list.get (i);
    }
}
----------------------------------------

 public static int mode(int[][] arr) {
     Map<Integer, Integer> counts = new HashMap<>();
     for (int i = 0; i < arr.length; i++) {
         for (int j = 0; j < arr[i].length; j++) {
             if (counts.containsKey(arr[i][j])) {
                 counts.put(arr[i][j], counts.get(arr[i][j]) + 1);
             } else {
                 counts.put(arr[i][j], 1);
             }
         }
     }
 
     int maxCount = 0;
     int mode = 0;
     for (int num : counts.keySet()) {
         int count = counts.get(num);
         if (count > maxCount) {
             mode = num;
             maxCount = count;
         }
     }
     return mode;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
392
5
Gpt3D_Clone392_5.java 1 15
Gpt3D_Clone392_5.java 16 60
----------------------------------------

public static int mode (int [] [] arr) {
    List < Integer > list = new ArrayList < Integer > ();
    for (int i = 0;
    i < arr.length; i ++) {
        for (int j = 0;
        j < arr [i].length; j ++) {
            list.add (arr [i] [j]);
        }
    }
    int [] vector = new int [list.size ()];
    for (int i = 0;
    i < vector.length; i ++) {
        vector [i] = list.get (i);
    }
}
----------------------------------------

 public static int mode(int[][] arr) {
		
	// create a map to store counts for each element
        Map<Integer, Integer> counts = new HashMap<>();
	
	// loop through each row and each column
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr[i].length; j++) {
		
		// check if map contains the element
                if (counts.containsKey(arr[i][j])) {
			
			// if yes increment the count by one
                    counts.put(arr[i][j], counts.get(arr[i][j]) + 1);
                } else {
			
			// if not add the element to map with count as one
                    counts.put(arr[i][j], 1);
                }
            }
        }
	
	// initializing highest frequency and mode as 0
        int highestFrequency = 0;
        int mode = 0;
	
	// looping over the map
        for (int num : counts.keySet()) {
		
		// set current count
            int count = counts.get(num);
		
		// if the frequency is greater than highest frequency,
		// set highest frequency equals to the current count and
		// set the mode equals to current number
            if (count > highestFrequency) {
                mode = num;
                highestFrequency = count;
            }
        }
        // return the mode
        return mode;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
392
6
Gpt3D_Clone392_6.java 1 15
Gpt3D_Clone392_6.java 16 47
----------------------------------------

public static int mode (int [] [] arr) {
    List < Integer > list = new ArrayList < Integer > ();
    for (int i = 0;
    i < arr.length; i ++) {
        for (int j = 0;
        j < arr [i].length; j ++) {
            list.add (arr [i] [j]);
        }
    }
    int [] vector = new int [list.size ()];
    for (int i = 0;
    i < vector.length; i ++) {
        vector [i] = list.get (i);
    }
}
----------------------------------------

 public static int mode(int[][] arr) {
    List<Integer> list = new ArrayList<>();
    // loop through each row and each column 
    for(int i=0; i<arr.length; i++){
        for(int j=0; j<arr[i].length; j++){
        	// add the element to list 
            list.add(arr[i][j]);
        }
    }
	// make a new integer array to store count of each element
    int[] counts = new int[list.size()];
	// initialise the variable to store frequency of most frequent element and variable to store  most frequent element
    int mostFrequent = 0;
    int mode = 0;
    int highestFrequency = 0;
	// traverse the list
    for(int i=0; i<list.size(); i++){
		// get the index of the element
        mostFrequent = list.indexOf(list.get(i));
        counts[mostFrequent]++;
		// compare count and highest frequency if count is greater than highest frequency
		// set higher frequency as count and set mode equals to current element 
        if(counts[mostFrequent] > highestFrequency){
            highestFrequency = counts[mostFrequent];
            mode = list.get(i);
        }
    }
	// return the mode
    return mode;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
392
7
Gpt3D_Clone392_7.java 1 15
Gpt3D_Clone392_7.java 16 60
----------------------------------------

public static int mode (int [] [] arr) {
    List < Integer > list = new ArrayList < Integer > ();
    for (int i = 0;
    i < arr.length; i ++) {
        for (int j = 0;
        j < arr [i].length; j ++) {
            list.add (arr [i] [j]);
        }
    }
    int [] vector = new int [list.size ()];
    for (int i = 0;
    i < vector.length; i ++) {
        vector [i] = list.get (i);
    }
}
----------------------------------------

 public static int mode(int[][] arr) {
		
	// create a map to store counts for each element
        Map<Integer, Integer> counts = new HashMap<>();
	
	// loop through each row and each column
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr[i].length; j++) {
		
		// check if map contains the element
                if (counts.containsKey(arr[i][j])) {
			
			// if yes increment the count by one
                    counts.put(arr[i][j], counts.get(arr[i][j]) + 1);
                } else {
			
			// if not add the element to map with count as one
                    counts.put(arr[i][j], 1);
                }
            }
        }
	
	// initializing highest frequency and mode as 0
        int highestFrequency = 0;
        int mode = 0;
	
	// looping over the map
        for (int num : counts.keySet()) {
		
		// set current count
            int count = counts.get(num);
		
		// if the frequency is greater than highest frequency,
		// set highest frequency equals to the current count and
		// set the mode equals to current number
            if (count > highestFrequency) {
                mode = num;
                highestFrequency = count;
            }
        }
        // return the mode
        return mode;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
392
8
Gpt3D_Clone392_8.java 1 15
Gpt3D_Clone392_8.java 16 40
----------------------------------------

public static int mode (int [] [] arr) {
    List < Integer > list = new ArrayList < Integer > ();
    for (int i = 0;
    i < arr.length; i ++) {
        for (int j = 0;
        j < arr [i].length; j ++) {
            list.add (arr [i] [j]);
        }
    }
    int [] vector = new int [list.size ()];
    for (int i = 0;
    i < vector.length; i ++) {
        vector [i] = list.get (i);
    }
}
----------------------------------------

 public static int mode(int[][] arr) {
    List<Integer> list = new ArrayList<>();
    for(int i=0; i<arr.length; i++) {
        for(int j=0; j<arr[i].length; j++) {
            list.add(arr[i][j]);
        }
    }
    int mode = 0;
    Map<Integer, Integer> counts = new HashMap<>();
    for (Integer value : list) {
        if (counts.containsKey(value)) {
            counts.put(value, counts.get(value) + 1);
        } else {
            counts.put(value, 1);
        }
        if (counts.get(value) > mode) {
            mode = value;
        }
    }
    return mode;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
392
9
Gpt3D_Clone392_9.java 1 15
Gpt3D_Clone392_9.java 16 40
----------------------------------------

public static int mode (int [] [] arr) {
    List < Integer > list = new ArrayList < Integer > ();
    for (int i = 0;
    i < arr.length; i ++) {
        for (int j = 0;
        j < arr [i].length; j ++) {
            list.add (arr [i] [j]);
        }
    }
    int [] vector = new int [list.size ()];
    for (int i = 0;
    i < vector.length; i ++) {
        vector [i] = list.get (i);
    }
}
----------------------------------------

 public static int mode(int[][] arr) {
    List<Integer> list = new ArrayList<>();
    for(int i=0; i<arr.length; i++) {
        for(int j=0; j<arr[i].length; j++) {
            list.add(arr[i][j]);
        }
    }
    int mode = 0;
    Map<Integer, Integer> counts = new HashMap<>();
    for (Integer value : list) {
        if (counts.containsKey(value)) {
            counts.put(value, counts.get(value) + 1);
        } else {
            counts.put(value, 1);
        }
        if (counts.get(value) > mode) {
            mode = value;
        }
    }
    return mode;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
393
0
Gpt3D_Clone393_0.java 1 20
Gpt3D_Clone393_0.java 21 47
----------------------------------------

public String getLongestSubstring (String s) {
    if (s.length () == 0) return null;
    char currentChar = s.charAt (0);
    String longestString = "" + currentChar;
    String runningString = "" + currentChar;
    int currentLongestLength = 1;
    for (int i = 1;
    i < s.length (); i ++) {
        if (s.charAt (i) == currentChar) {
            runningString = runningString + currentChar;
            if (runningString.length () > longestString.length ()) {
                currentLongestLength ++;
                longestString = runningString;
            }
        } else {
            runningString = "" + s.charAt (i);
        }
    }
    return longestString;
}
----------------------------------------

 public String getLongestSubstring (String s) {
    if (s.isEmpty ()) return null;
    char currentChar = s.charAt (0);
    String longestString = "" + currentChar;
    int maxLength = 1;
    int startIndex = 0;
    int endIndex = 0;
    int currentLength = 1;
    for (int i = 1; i < s.length (); i++) {
        if (s.charAt (i) == currentChar) {
            endIndex = i;
            currentLength ++;
            if (currentLength > maxLength) {
                maxLength = currentLength;
                longestString = s.substring (startIndex, endIndex+1);
            }
        } else {
            currentChar = s.charAt (i);
            startIndex = i;
            currentLength = 1;
        }
    }
    return longestString;
	
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
393
3
Gpt3D_Clone393_3.java 1 20
Gpt3D_Clone393_3.java 21 45
----------------------------------------

public String getLongestSubstring (String s) {
    if (s.length () == 0) return null;
    char currentChar = s.charAt (0);
    String longestString = "" + currentChar;
    String runningString = "" + currentChar;
    int currentLongestLength = 1;
    for (int i = 1;
    i < s.length (); i ++) {
        if (s.charAt (i) == currentChar) {
            runningString = runningString + currentChar;
            if (runningString.length () > longestString.length ()) {
                currentLongestLength ++;
                longestString = runningString;
            }
        } else {
            runningString = "" + s.charAt (i);
        }
    }
    return longestString;
}
----------------------------------------

 public String getLongestSubstring(String s) {
    if (s.length() == 0) return null;
    String longestString = "" + s.charAt(0);
    int currentLength = 1;
    int longestLength = 1;
    int startIndex = 0;
    int endIndex= 0;
    for (int i = 1; i < s.length(); i++) {
        if (s.charAt(i) == s.charAt(i - 1)) {
            endIndex = i;
            currentLength ++;
            if (currentLength > longestLength) {
                longestLength = currentLength;
                longestString = s.substring(startIndex, endIndex + 1);
            }
        }
        else {
            currentLength = 1;
            startIndex = i;
        }
    }
    return longestString;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
395
2
Gpt3D_Clone395_2.java 1 18
Gpt3D_Clone395_2.java 19 38
----------------------------------------

public ListNode switchPairs () {
    if (this == null || this.next == null) return this;
    ListNode top = this.next;
    ListNode first = this;
    ListNode second = first.next;
    do {
        ListNode third = second.next;
        second.next = first;
        first.next = third;
        first = third;
        System.out.println ("@@@ " + this.toString ());
        if (first != null) {
            second.next.next = first.next;
            second = first.next;
        }
    } while (first != null && second != null);
    return top;
}
----------------------------------------

 public ListNode switchPairs () {
	if (this == null || this.next == null) 
	    return this;
	ListNode top = this.next;
	ListNode current = this;
	while (current != null && current.next != null) {
	    ListNode temp = current; 
	    current = current.next;
	    temp.next = current.next; 
	    current.next = temp;
	    if (temp.next != null) {
		current = temp.next;
	    }
	    System.out.println ("@@@ " + this.toString ());
	}
	return top; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
395
4
Gpt3D_Clone395_4.java 1 18
Gpt3D_Clone395_4.java 19 36
----------------------------------------

public ListNode switchPairs () {
    if (this == null || this.next == null) return this;
    ListNode top = this.next;
    ListNode first = this;
    ListNode second = first.next;
    do {
        ListNode third = second.next;
        second.next = first;
        first.next = third;
        first = third;
        System.out.println ("@@@ " + this.toString ());
        if (first != null) {
            second.next.next = first.next;
            second = first.next;
        }
    } while (first != null && second != null);
    return top;
}
----------------------------------------

 public ListNode switchPairs () {
	if (this == null || this.next == null) 
	    return this;
	ListNode current = this; 
	ListNode top = this.next; 
	while(current != null && current.next != null) { 
	    ListNode temp = current.next; 
	    current.next = temp.next; 
	    temp.next = current; 
	    current = current.next; 
	    System.out.println("@@@ " + this.toString());
	} 
	return top;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
399
0
Gpt3D_Clone399_0.java 1 12
Gpt3D_Clone399_0.java 13 33
----------------------------------------

public void contextDestroyed (ServletContextEvent sce) {
    Context initContext = new InitialContext ();
    Context envContext = (Context) initContext.lookup ("java:/comp/env");
    DataSource datasource = (DataSource) envContext.lookup ("jdbc/database");
    try {
        java.sql.Driver mySqlDriver = DriverManager.getDriver ("jdbc:mysql://localhost:3306/");
        DriverManager.deregisterDriver (mySqlDriver);
    } catch (SQLException ex) {
        logger.info ("Could not deregister driver:".concat (ex.getMessage ()));
    }
    dataSource = null;
}
----------------------------------------

  public void contextDestroyed (ServletContextEvent sce) {
      Context initContext;
      Context envContext;
      DataSource datasource;
      try {
          initContext = new InitialContext ();
          envContext = (Context) initContext.lookup ("java:/comp/env");
          datasource = (DataSource) envContext.lookup("jdbc/database");
          Driver drv = new com.mysql.jdbc.Driver();
          DriverManager.deregisterDriver(drv);
      } catch (NamingException ex) {
           logger.error("NamingException while deregistering driver:".concat(ex.getMessage()), ex);
      } catch (SQLException ex) {
          logger.error("SQL Exception while deregistering driver:".concat(ex.getMessage()), ex);
      } finally {
          datasource = null;
      }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
399
1
Gpt3D_Clone399_1.java 1 12
Gpt3D_Clone399_1.java 13 30
----------------------------------------

public void contextDestroyed (ServletContextEvent sce) {
    Context initContext = new InitialContext ();
    Context envContext = (Context) initContext.lookup ("java:/comp/env");
    DataSource datasource = (DataSource) envContext.lookup ("jdbc/database");
    try {
        java.sql.Driver mySqlDriver = DriverManager.getDriver ("jdbc:mysql://localhost:3306/");
        DriverManager.deregisterDriver (mySqlDriver);
    } catch (SQLException ex) {
        logger.info ("Could not deregister driver:".concat (ex.getMessage ()));
    }
    dataSource = null;
}
----------------------------------------

  public void contextDestroyed (ServletContextEvent sce) {
        try {
            DataSource datasource;
            Context initContext = new InitialContext();
            Context envContext = (Context) initContext.lookup("java:/comp/env");
            datasource = (DataSource) envContext.lookup("jdbc/database");
            String url = datasource.getConnection().getMetaData().getURL();
            DriverManager.deregisterDriver("jdbc:mysql://localhost:3306/");
        } catch (NamingException ex) {
            logger.error("NamingException while deregistering driver:".concat(ex.getMessage()), ex);
        } catch (SQLException ex) {
            logger.error("SQL Exception while deregistering driver:".concat(ex.getMessage()), ex);
        } finally {
            datasource = null;
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
399
3
Gpt3D_Clone399_3.java 1 12
Gpt3D_Clone399_3.java 13 28
----------------------------------------

public void contextDestroyed (ServletContextEvent sce) {
    Context initContext = new InitialContext ();
    Context envContext = (Context) initContext.lookup ("java:/comp/env");
    DataSource datasource = (DataSource) envContext.lookup ("jdbc/database");
    try {
        java.sql.Driver mySqlDriver = DriverManager.getDriver ("jdbc:mysql://localhost:3306/");
        DriverManager.deregisterDriver (mySqlDriver);
    } catch (SQLException ex) {
        logger.info ("Could not deregister driver:".concat (ex.getMessage ()));
    }
    dataSource = null;
}
----------------------------------------

 public void contextDestroyed (ServletContextEvent sce) {
        DataSource datasource;
        try {
            Context initContext = new InitialContext ();
            Context envContext = (Context) initContext.lookup ("java:/comp/env");
            datasource = (DataSource) envContext.lookup ("jdbc/database");
            java.sql.Driver takenDriver = DriverManager.getDriver("jdbc:mysql://localhost:3306/database");
            DriverManager.deregisterDriver(takenDriver);
        } catch (NamingException|SQLException ex) {
            logger.error("Could not deregister driver:".concat(ex.getMessage()), ex);
        } finally {
            datasource = null;
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
399
4
Gpt3D_Clone399_4.java 1 12
Gpt3D_Clone399_4.java 13 29
----------------------------------------

public void contextDestroyed (ServletContextEvent sce) {
    Context initContext = new InitialContext ();
    Context envContext = (Context) initContext.lookup ("java:/comp/env");
    DataSource datasource = (DataSource) envContext.lookup ("jdbc/database");
    try {
        java.sql.Driver mySqlDriver = DriverManager.getDriver ("jdbc:mysql://localhost:3306/");
        DriverManager.deregisterDriver (mySqlDriver);
    } catch (SQLException ex) {
        logger.info ("Could not deregister driver:".concat (ex.getMessage ()));
    }
    dataSource = null;
}
----------------------------------------

  public void contextDestroyed (ServletContextEvent sce) {
        DataSource datasource;
        try {
            InitialContext initContext = new InitialContext();
            Context envContext = (Context) initContext.lookup("java:/comp/env");
            datasource = (DataSource) envContext.lookup("jdbc/database");
            java.sql.Driver mySqlDriver = datasource.getConnection().getMetaData().getDriverName();
            DriverManager.deregisterDriver(mySqlDriver);
        } catch (NamingException|SQLException ex) {
            logger.error("Could not deregister driver:".concat(ex.getMessage()), ex);
        } finally {
            datasource = null;
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
399
5
Gpt3D_Clone399_5.java 1 12
Gpt3D_Clone399_5.java 13 28
----------------------------------------

public void contextDestroyed (ServletContextEvent sce) {
    Context initContext = new InitialContext ();
    Context envContext = (Context) initContext.lookup ("java:/comp/env");
    DataSource datasource = (DataSource) envContext.lookup ("jdbc/database");
    try {
        java.sql.Driver mySqlDriver = DriverManager.getDriver ("jdbc:mysql://localhost:3306/");
        DriverManager.deregisterDriver (mySqlDriver);
    } catch (SQLException ex) {
        logger.info ("Could not deregister driver:".concat (ex.getMessage ()));
    }
    dataSource = null;
}
----------------------------------------

 public void contextDestroyed (ServletContextEvent sce) {
         DataSource datasource;
        try {
            Context initContext = new InitialContext ();
            Context envContext = (Context) initContext.lookup ("java:/comp/env");
            datasource = (DataSource) envContext.lookup ("jdbc/database");
            String driverName = datasource.getConnection().getMetaData().getDriverName();
            DriverManager.deregisterDriver(driverName);
        } catch (NamingException | SQLException ex) {
            logger.error("Could not deregister driver:".concat(ex.getMessage()), ex);
        }finally {
            datasource = null;
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
399
6
Gpt3D_Clone399_6.java 1 12
Gpt3D_Clone399_6.java 13 29
----------------------------------------

public void contextDestroyed (ServletContextEvent sce) {
    Context initContext = new InitialContext ();
    Context envContext = (Context) initContext.lookup ("java:/comp/env");
    DataSource datasource = (DataSource) envContext.lookup ("jdbc/database");
    try {
        java.sql.Driver mySqlDriver = DriverManager.getDriver ("jdbc:mysql://localhost:3306/");
        DriverManager.deregisterDriver (mySqlDriver);
    } catch (SQLException ex) {
        logger.info ("Could not deregister driver:".concat (ex.getMessage ()));
    }
    dataSource = null;
}
----------------------------------------

 public void contextDestroyed (ServletContextEvent sce) {
        DataSource datasource = null;
        try {
            InitialContext initContext = new InitialContext ();
            Context envContext = (Context) initContext.lookup ("java:/comp/env");
            datasource = (DataSource) envContext.lookup ("jdbc/database");
            java.sql.Driver mySqlDriver = datasource.getConnection().getMetaData().getDriverName();
            DriverManager.deregisterDriver(mySqlDriver);
        }
        catch (NamingException|SQLException ex) {
            logger.error("Could not deregister driver:".concat(ex.getMessage()), ex);
        } finally {
            datasource = null;
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
399
7
Gpt3D_Clone399_7.java 1 12
Gpt3D_Clone399_7.java 13 28
----------------------------------------

public void contextDestroyed (ServletContextEvent sce) {
    Context initContext = new InitialContext ();
    Context envContext = (Context) initContext.lookup ("java:/comp/env");
    DataSource datasource = (DataSource) envContext.lookup ("jdbc/database");
    try {
        java.sql.Driver mySqlDriver = DriverManager.getDriver ("jdbc:mysql://localhost:3306/");
        DriverManager.deregisterDriver (mySqlDriver);
    } catch (SQLException ex) {
        logger.info ("Could not deregister driver:".concat (ex.getMessage ()));
    }
    dataSource = null;
}
----------------------------------------

 public void contextDestroyed (ServletContextEvent sce) {
    DataSource datasource;
    try {
        Context initContext = new InitialContext ();
        Context envContext = (Context) initContext.lookup ("java:/comp/env");
        datasource = (DataSource) envContext.lookup("jdbc/database");
        java.sql.Driver mySqlDriver = DriverManager.getDriver("jdbc:mysql://localhost:3306/database");
        DriverManager.deregisterDriver(mySqlDriver);
    } catch (NamingException | SQLException ex) {
        logger.error("Could not deregister driver:".concat(ex.getMessage()), ex);
    } finally {
        datasource = null;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
399
8
Gpt3D_Clone399_8.java 1 12
Gpt3D_Clone399_8.java 13 28
----------------------------------------

public void contextDestroyed (ServletContextEvent sce) {
    Context initContext = new InitialContext ();
    Context envContext = (Context) initContext.lookup ("java:/comp/env");
    DataSource datasource = (DataSource) envContext.lookup ("jdbc/database");
    try {
        java.sql.Driver mySqlDriver = DriverManager.getDriver ("jdbc:mysql://localhost:3306/");
        DriverManager.deregisterDriver (mySqlDriver);
    } catch (SQLException ex) {
        logger.info ("Could not deregister driver:".concat (ex.getMessage ()));
    }
    dataSource = null;
}
----------------------------------------

 public void contextDestroyed (ServletContextEvent sce) {
        DataSource datasource;
        try {
            Context initContext = new InitialContext ();
            Context envContext = (Context) initContext.lookup ("java:/comp/env");
            datasource = (DataSource) envContext.lookup("jdbc/database");
            java.sql.Driver mySqlDriver = DriverManager.getDriver("jdbc:mysql://localhost:3306/database");
            DriverManager.deregisterDriver(mySqlDriver.getClass());
        } catch (NamingException | SQLException ex) {
            logger.error("Could not deregister driver:".concat(ex.getMessage()), ex);
        } finally {
            datasource = null;
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
3
0
Gpt3D_Clone3_0.java 1 18
Gpt3D_Clone3_0.java 19 46
----------------------------------------

public static void copyFolder (Path src, Path dest) {
    try {
        Files.walk (src).forEach (s -> {
            try {
                Path d = dest.resolve (src.relativize (s));
                if (Files.isDirectory (s)) {
                    if (! Files.exists (d)) Files.createDirectory (d);
                    return;
                }
                Files.copy (s, d);
            } catch (Exception e) {
                e.printStackTrace ();
            }
        });
    } catch (Exception ex) {
        ex.printStackTrace ();
    }
}
----------------------------------------

 public static void copyFolder (Path src, Path dest) {
    try {
        File srcFile = src.toFile();
        File destFile = dest.toFile();
        File[] srcFilesList = srcFile.listFiles();
        if (srcFilesList != null) {
            for (File source : srcFilesList) {
                File destDir = new File ((String) dest, src.relativize(source.toPath()).toString());
                if (source.isDirectory()) {
                    destDir.mkdirs();
                    copyFolder (source.toPath(), destDir.toPath());
                } else {
                    Path srcPath = Paths.get(source.toString());
                    Path destPath = Paths.get(destDir.toString());
                    try {
                    Files.copy(srcPath, destPath, StandardCopyOption.REPLACE_EXISTING);
                    } catch (IOException e) {
                    System.out.println("IOException occurred: " + e);
                    }
                }
            }
        }
    } catch (Exception ex) {
        ex.printStackTrace();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
3
1
Gpt3D_Clone3_1.java 1 18
Gpt3D_Clone3_1.java 19 45
----------------------------------------

public static void copyFolder (Path src, Path dest) {
    try {
        Files.walk (src).forEach (s -> {
            try {
                Path d = dest.resolve (src.relativize (s));
                if (Files.isDirectory (s)) {
                    if (! Files.exists (d)) Files.createDirectory (d);
                    return;
                }
                Files.copy (s, d);
            } catch (Exception e) {
                e.printStackTrace ();
            }
        });
    } catch (Exception ex) {
        ex.printStackTrace ();
    }
}
----------------------------------------

 public static void copyFolder(Path src, Path dest) {
    File file = src.toFile();
    if (file.isDirectory()) {
        try {
            File dir = new File(dest.toString(),file.getName());
            if (!dir.exists()) {
            dir.mkdir();
            File[] files = file.listFiles();
            for (File f : files) {
            Path srcPath = Paths.get(file.toString(),f.getName());
            Path destPath = Paths.get(dest.toString(),f.getName());
            copyFolder(srcPath, destPath);
            }
        }
        }catch (Exception e) {
            e.printStackTrace();
        }
    } else {
        try {
            Files.copy(src,dest, StandardCopyOption.REPLACE_EXISTING);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
3
2
Gpt3D_Clone3_2.java 1 18
Gpt3D_Clone3_2.java 19 43
----------------------------------------

public static void copyFolder (Path src, Path dest) {
    try {
        Files.walk (src).forEach (s -> {
            try {
                Path d = dest.resolve (src.relativize (s));
                if (Files.isDirectory (s)) {
                    if (! Files.exists (d)) Files.createDirectory (d);
                    return;
                }
                Files.copy (s, d);
            } catch (Exception e) {
                e.printStackTrace ();
            }
        });
    } catch (Exception ex) {
        ex.printStackTrace ();
    }
}
----------------------------------------

 public static void copyFolder(Path source, Path dest) {
    try {
        Files.walkFileTree(source, new SimpleFileVisitor<>() {
            @Override
            public FileVisitResult preVisitDirectory(Path source, BasicFileAttributes attrs) throws IOException {
                Path destinationPath = dest.resolve(source.relativize(source));
                if (Files.notExists(destinationPath)) {
                    Files.createDirectory(destinationPath);
                }
                return FileVisitResult.CONTINUE;
            }
            @Override
            public FileVisitResult visitFile(Path source, BasicFileAttributes attrs) throws IOException {
                Path destinationPath = dest.resolve(source.relativize(source));
                Files.copy(source, destinationPath, StandardCopyOption.REPLACE_EXISTING);
                return FileVisitResult.CONTINUE;
            }
        });
    } catch (Exception ex) {
        ex.printStackTrace();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
3
3
Gpt3D_Clone3_3.java 1 18
Gpt3D_Clone3_3.java 19 43
----------------------------------------

public static void copyFolder (Path src, Path dest) {
    try {
        Files.walk (src).forEach (s -> {
            try {
                Path d = dest.resolve (src.relativize (s));
                if (Files.isDirectory (s)) {
                    if (! Files.exists (d)) Files.createDirectory (d);
                    return;
                }
                Files.copy (s, d);
            } catch (Exception e) {
                e.printStackTrace ();
            }
        });
    } catch (Exception ex) {
        ex.printStackTrace ();
    }
}
----------------------------------------

 public static void copyFolder(Path source, Path dest) {
    try {
        if(!source.toFile().exists()) {
            throw new RuntimeException("Source does not exist: " + source);
        }
        if(!source.toFile().isDirectory()) {
            throw new RuntimeException("Source is not a directory: " + source);
        }
        for (File src:source.toFile().listFiles()) {
            Path targetFile = dest.resolve(source.relativize(src.toPath()));
            if (src.isDirectory() && !Files.exists(targetFile)) {
                Files.createDirectory(targetFile);
            }
            Files.copy(src.toPath(), targetFile, StandardCopyOption.REPLACE_EXISTING);
            if (src.isDirectory()) {
                copyFolder(src.toPath(), targetFile);
            }
        }
    } catch (Exception ex) {
        ex.printStackTrace();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
3
5
Gpt3D_Clone3_5.java 1 18
Gpt3D_Clone3_5.java 19 41
----------------------------------------

public static void copyFolder (Path src, Path dest) {
    try {
        Files.walk (src).forEach (s -> {
            try {
                Path d = dest.resolve (src.relativize (s));
                if (Files.isDirectory (s)) {
                    if (! Files.exists (d)) Files.createDirectory (d);
                    return;
                }
                Files.copy (s, d);
            } catch (Exception e) {
                e.printStackTrace ();
            }
        });
    } catch (Exception ex) {
        ex.printStackTrace ();
    }
}
----------------------------------------

 public static void copyFolder(Path src, Path dest) {
    File srcDirectory = new File(src);
    File[] srcList = srcDirectory.listFiles();
    
    if (srcList != null) {
        for(File source : srcList) {
            File destDir = new File(dest, src.relativize(source.toPath()));
            if (source.isDirectory()) {
                destDir.mkdirs();
            } else {
                try {
                    Files.copy(source.toPath(), destDir.toPath());
                } catch (IOException e) {
                    System.out.println("IOException");
                }
            }
            copyFolder(source.toPath(), destDir.toPath());
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
3
6
Gpt3D_Clone3_6.java 1 18
Gpt3D_Clone3_6.java 19 39
----------------------------------------

public static void copyFolder (Path src, Path dest) {
    try {
        Files.walk (src).forEach (s -> {
            try {
                Path d = dest.resolve (src.relativize (s));
                if (Files.isDirectory (s)) {
                    if (! Files.exists (d)) Files.createDirectory (d);
                    return;
                }
                Files.copy (s, d);
            } catch (Exception e) {
                e.printStackTrace ();
            }
        });
    } catch (Exception ex) {
        ex.printStackTrace ();
    }
}
----------------------------------------

 public static void copyFolder(Path src, Path dest) {
    try {
        if (Files.isDirectory(src)) {
            Files.createDirectories(dest);
            try (DirectoryStream<Path> stream = Files.newDirectoryStream(src)) {
                for (Path file: stream) {
                    Path d = dest.resolve(src.relativize(file));
                    if (Files.isDirectory(file)) {
                        copyFolder(file, d);
                    } else {
                        Files.copy(file, d, StandardCopyOption.REPLACE_EXISTING);
                    }
                }
            }
        }
    } catch (Exception ex) {
        ex.printStackTrace();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
3
7
Gpt3D_Clone3_7.java 1 18
Gpt3D_Clone3_7.java 19 45
----------------------------------------

public static void copyFolder (Path src, Path dest) {
    try {
        Files.walk (src).forEach (s -> {
            try {
                Path d = dest.resolve (src.relativize (s));
                if (Files.isDirectory (s)) {
                    if (! Files.exists (d)) Files.createDirectory (d);
                    return;
                }
                Files.copy (s, d);
            } catch (Exception e) {
                e.printStackTrace ();
            }
        });
    } catch (Exception ex) {
        ex.printStackTrace ();
    }
}
----------------------------------------

 public static void copyFolder(Path src, Path dest)
{
     try
     {
         List<Path> files = Files.walk(src)
                            .collect(Collectors.toList());
         for(Path file : files)
         {
             if(Files.isDirectory(file))
             {
                 Path newDir = dest.resolve(src.relativize(file));
                 if(Files.notExists(newDir))
                     Files.createDirectory(newDir);
             }
             else
             {
                 Path newFile = dest.resolve(src.relativize(file));
                 Files.copy(file, newFile, StandardCopyOption.REPLACE_EXISTING);
             }
         }
     } catch (IOException e)
     {
         System.err.println("IOException occurred: " + e.getMessage());
     }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
3
8
Gpt3D_Clone3_8.java 1 18
Gpt3D_Clone3_8.java 19 35
----------------------------------------

public static void copyFolder (Path src, Path dest) {
    try {
        Files.walk (src).forEach (s -> {
            try {
                Path d = dest.resolve (src.relativize (s));
                if (Files.isDirectory (s)) {
                    if (! Files.exists (d)) Files.createDirectory (d);
                    return;
                }
                Files.copy (s, d);
            } catch (Exception e) {
                e.printStackTrace ();
            }
        });
    } catch (Exception ex) {
        ex.printStackTrace ();
    }
}
----------------------------------------

 public static void copyFolder(Path source, Path dest) {
    try {
        for (File src : source.toFile().listFiles()) {
            File destFile = dest.resolve(src.getName()).toFile();
            if (src.isDirectory()) {
                destFile.mkdir();
                copyFolder(src.toPath(), destFile.toPath());
            } else {
                Files.copy(src.toPath(), destFile.toPath(), StandardCopyOption.REPLACE_EXISTING);
            }
        }
    } catch (Exception ex) {
        ex.printStackTrace();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
400
4
Gpt3D_Clone400_4.java 1 17
Gpt3D_Clone400_4.java 18 35
----------------------------------------

public final void contextDestroyed (ServletContextEvent sce) {
    ClassLoader cl = Thread.currentThread ().getContextClassLoader ();
    Enumeration < Driver > drivers = DriverManager.getDrivers ();
    while (drivers.hasMoreElements ()) {
        Driver driver = drivers.nextElement ();
        if (driver.getClass ().getClassLoader () == cl) {
            try {
                log.info ("Deregistering JDBC driver {}", driver);
                DriverManager.deregisterDriver (driver);
            } catch (SQLException ex) {
                log.error ("Error deregistering JDBC driver {}", driver, ex);
            }
        } else {
            log.trace ("Not deregistering JDBC driver {} as it does not belong to this webapp's ClassLoader", driver);
        }
    }
}
----------------------------------------

 
public final void contextDestroyed (ServletContextEvent sce) {
    try {
        for (Driver driver : DriverManager.getDrivers()) {
            if (driver.getClass().getClassLoader().equals(Thread.currentThread().getContextClassLoader())) {
                log.info ("Deregistering JDBC driver {}", driver);
                DriverManager.deregisterDriver(driver);
            }
            else {
                 log.trace ("Not deregistering JDBC driver {} as it does not belong to this webapp's ClassLoader", driver);
            }
        }
    } catch (SQLException ex) {
        log.error ("Error deregistering JDBC driver {}", driver, ex);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
406
0
Gpt3D_Clone406_0.java 1 24
Gpt3D_Clone406_0.java 25 56
----------------------------------------

public static void main (String args []) {
    int ci, i, j, k, l = 0;
    String str, str1, result, subString;
    char c1, c2, ch;
    Scanner scan = new Scanner (System.in);
    System.out.print ("Enter a String : ");
    str = scan.nextLine ();
    i = str.length ();
    for (c1 = 'A'; c1 <= 'z'; c1 ++) {
        for (c2 = 'A'; c2 <= 'z'; c2 ++) {
            result = new String (new char [] {c1, c2});
            k = 0;
            for (j = 0; j < i - 1; j ++) {
                subString = str.substring (j, j + 2);
                if (result.equals (subString)) {
                    k ++;
                }
            }
            if (k > 0) {
                System.out.println ("" + result + ": " + k);
            }
        }
    }
}
----------------------------------------

 public static void main (String args []) {
    int ci = 0, i = 0, j = 0, k = 0, l = 0;
    String str = null, str1 = null, result = null, subString = null;
    char c1 = 'A', c2 = 'A', ch = '';
    Scanner scan = new Scanner(System.in);
    System.out.print("Enter a String : ");
    str = scan.nextLine();
    i = str.length();
    c1 = 'A'; 
    while (c1 <= 'z') { 
        int c2Parser = 'A'; 
        while (c2Parser < 'z') {
            result = new String(new char[]{c1, c2Parser});
            k = 0;
            j = 0;
            while (j < i - 1) {
                subString = str.substring(j, j + 2);
                if (result.equals(subString)) {
                    k++;
                }
                j++;
            }
            if (k > 0) {
                System.out.println("" + result + ": " + k);
            }
            c2Parser++;
        }
        c1++;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
406
1
Gpt3D_Clone406_1.java 1 24
Gpt3D_Clone406_1.java 25 56
----------------------------------------

public static void main (String args []) {
    int ci, i, j, k, l = 0;
    String str, str1, result, subString;
    char c1, c2, ch;
    Scanner scan = new Scanner (System.in);
    System.out.print ("Enter a String : ");
    str = scan.nextLine ();
    i = str.length ();
    for (c1 = 'A'; c1 <= 'z'; c1 ++) {
        for (c2 = 'A'; c2 <= 'z'; c2 ++) {
            result = new String (new char [] {c1, c2});
            k = 0;
            for (j = 0; j < i - 1; j ++) {
                subString = str.substring (j, j + 2);
                if (result.equals (subString)) {
                    k ++;
                }
            }
            if (k > 0) {
                System.out.println ("" + result + ": " + k);
            }
        }
    }
}
----------------------------------------

 public static void main (String args []) {
    int ci = 0, i = 0, j = 0, k = 0, l = 0;
    String str = null, str1 = null, result = null, subString = null;
    char c1 = 'A', c2 = 'A', ch = '';
    Scanner scan = new Scanner(System.in);
    System.out.print("Enter a String : ");
    str = scan.nextLine();
    i = str.length();
    int c1Parser = 'A';
    while (c1Parser < 'z') {
        c2 = 'A';
        while (c2 <= 'z') {
            result = new String(new char[]{c1Parser, c2});
            k = 0;
            j = 0;
            while (j < i - 1) {
                subString = str.substring(j, j + 2);
                if (result.equals(subString)) {
                    k++;
                }
                j++;
            }
            if (k > 0) {
                System.out.println("" + result + ": " + k);
            }
            c2++;
        }
        c1Parser++;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
406
2
Gpt3D_Clone406_2.java 1 24
Gpt3D_Clone406_2.java 25 56
----------------------------------------

public static void main (String args []) {
    int ci, i, j, k, l = 0;
    String str, str1, result, subString;
    char c1, c2, ch;
    Scanner scan = new Scanner (System.in);
    System.out.print ("Enter a String : ");
    str = scan.nextLine ();
    i = str.length ();
    for (c1 = 'A'; c1 <= 'z'; c1 ++) {
        for (c2 = 'A'; c2 <= 'z'; c2 ++) {
            result = new String (new char [] {c1, c2});
            k = 0;
            for (j = 0; j < i - 1; j ++) {
                subString = str.substring (j, j + 2);
                if (result.equals (subString)) {
                    k ++;
                }
            }
            if (k > 0) {
                System.out.println ("" + result + ": " + k);
            }
        }
    }
}
----------------------------------------

 public static void main (String args []) {
    int ci = 0, i = 0, j = 0, k = 0, l = 0;
    String str = null, str1 = null, result = null, subString = null;
    char c1 = 'A', c2 = 'A', ch = '';
    Scanner scan = new Scanner(System.in);
    System.out.print("Enter a String : ");
    str = scan.nextLine();
    i = str.length();
    c2 = 'A'; 
    while (c2 < 'z') { 
        int c1Parser = 'A'; 
        while (c1Parser <= 'z') {
            result = new String(new char[]{c1Parser, c2});
            k = 0;
            j = 0;
            while (j < i - 1) {
                subString = str.substring(j, j + 2);
                if (result.equals(subString)) {
                    k++;
                }
                j++;
            }
            if (k > 0) {
                System.out.println("" + result + ": " + k);
            }
            c1Parser++;
        }
        c2++;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
406
3
Gpt3D_Clone406_3.java 1 24
Gpt3D_Clone406_3.java 25 56
----------------------------------------

public static void main (String args []) {
    int ci, i, j, k, l = 0;
    String str, str1, result, subString;
    char c1, c2, ch;
    Scanner scan = new Scanner (System.in);
    System.out.print ("Enter a String : ");
    str = scan.nextLine ();
    i = str.length ();
    for (c1 = 'A'; c1 <= 'z'; c1 ++) {
        for (c2 = 'A'; c2 <= 'z'; c2 ++) {
            result = new String (new char [] {c1, c2});
            k = 0;
            for (j = 0; j < i - 1; j ++) {
                subString = str.substring (j, j + 2);
                if (result.equals (subString)) {
                    k ++;
                }
            }
            if (k > 0) {
                System.out.println ("" + result + ": " + k);
            }
        }
    }
}
----------------------------------------

 public static void main (String args []) {
    int ci = 0, i = 0, j = 0, k = 0, l = 0;
    String str = null, str1 = null, result = null, subString = null;
    char c1 = 'A', c2 = 'A', ch = '';
    Scanner scan = new Scanner(System.in);
    System.out.print("Enter a String : ");
    str = scan.nextLine();
    i = str.length();
    c2 = 'A'; 
    while (c2 <= 'z') { 
        int c1Parser = 'A'; 
        while (c1Parser < 'z') {
            result = new String(new char[]{c1Parser, c2});
            k = 0;
            j = 0;
            while (j < i - 1) {
                subString = str.substring(j, j + 2);
                if (result.equals(subString)) {
                    k++;
                }
                j++;
            }
            if (k > 0) {
                System.out.println("" + result + ": " + k);
            }
            c1Parser++;
        }
        c2++;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
406
4
Gpt3D_Clone406_4.java 1 24
Gpt3D_Clone406_4.java 25 56
----------------------------------------

public static void main (String args []) {
    int ci, i, j, k, l = 0;
    String str, str1, result, subString;
    char c1, c2, ch;
    Scanner scan = new Scanner (System.in);
    System.out.print ("Enter a String : ");
    str = scan.nextLine ();
    i = str.length ();
    for (c1 = 'A'; c1 <= 'z'; c1 ++) {
        for (c2 = 'A'; c2 <= 'z'; c2 ++) {
            result = new String (new char [] {c1, c2});
            k = 0;
            for (j = 0; j < i - 1; j ++) {
                subString = str.substring (j, j + 2);
                if (result.equals (subString)) {
                    k ++;
                }
            }
            if (k > 0) {
                System.out.println ("" + result + ": " + k);
            }
        }
    }
}
----------------------------------------

 public static void main (String args []) {
    int ci = 0, i = 0, j = 0, k = 0, l = 0;
    String str = null, str1 = null, result = null, subString = null;
    char c1 = 'A', c2 = 'A', ch = '';
    Scanner scan = new Scanner(System.in);
    System.out.print("Enter a String : ");
    str = scan.nextLine();
    i = str.length();
    c1 = 'A';
    while (c1 < 'z') {
        c2 = 'A';
        while (c2 < 'z') {
            result = new String(new char[]{c1, c2});
            k = 0; 
            j = 0;
            while (j < i - 1) {
                subString = str.substring(j, j + 2);
                if (result.equals(subString)) {
                    k++;
                }
                j++;
            }
            if (k > 0) {
                System.out.println("" + result + ": " + k);
            }
            c2++;
        }
        c1++;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
406
5
Gpt3D_Clone406_5.java 1 24
Gpt3D_Clone406_5.java 25 56
----------------------------------------

public static void main (String args []) {
    int ci, i, j, k, l = 0;
    String str, str1, result, subString;
    char c1, c2, ch;
    Scanner scan = new Scanner (System.in);
    System.out.print ("Enter a String : ");
    str = scan.nextLine ();
    i = str.length ();
    for (c1 = 'A'; c1 <= 'z'; c1 ++) {
        for (c2 = 'A'; c2 <= 'z'; c2 ++) {
            result = new String (new char [] {c1, c2});
            k = 0;
            for (j = 0; j < i - 1; j ++) {
                subString = str.substring (j, j + 2);
                if (result.equals (subString)) {
                    k ++;
                }
            }
            if (k > 0) {
                System.out.println ("" + result + ": " + k);
            }
        }
    }
}
----------------------------------------

 public static void main (String args []) {
    int ci = 0, i = 0, j = 0, k = 0, l = 0;
    String str = null, str1 = null, result = null, subString = null;
    char c1 = 'A', c2 = 'A', ch = '';
    Scanner scan = new Scanner(System.in);
    System.out.print("Enter a String : ");
    str = scan.nextLine();
    i = str.length();
    int c1Parser = 'A'; 
    while (c1Parser < 'z') { 
        int c2Parser = 'A'; 
        while (c2Parser <= 'z') {
            result = new String(new char[]{c1Parser, c2Parser});
            k = 0;
            j = 0;
            while (j < i - 1) {
                subString = str.substring(j, j + 2);
                if (result.equals(subString)) {
                    k++;
                }
                j++;
            }
            if (k > 0) {
                System.out.println("" + result + ": " + k);
            }
            c2Parser++;
        }
        c1Parser++;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
410
4
Gpt3D_Clone410_4.java 1 26
Gpt3D_Clone410_4.java 27 50
----------------------------------------

public String getName (String value) {
    StringBuilder buffer = new StringBuilder ();
    String high, low;
    if (value.length () < getPartDivider ()) {
        high = "";
        low = value;
    } else {
        int index = value.length () - getPartDivider ();
        high = value.substring (0, index);
        low = value.substring (index);
    }
    String highName = getHighProcessor ().getName (high);
    String lowName = getLowProcessor ().getName (low);
    if (! highName.isEmpty ()) {
        buffer.append (highName);
        buffer.append (SEPARATOR);
        buffer.append (getToken ());
        if (! lowName.isEmpty ()) {
            buffer.append (SEPARATOR);
        }
    }
    if (! lowName.isEmpty ()) {
        buffer.append (lowName);
    }
    return buffer.toString ();
}
----------------------------------------

 public String getName (String value) {
    StringBuilder buffer = new StringBuilder ();
    int divider = getPartDivider ();
    if (value.length () >= divider ) {
        int index = value.length () - divider;
        String highName = getHighProcessor ().getName (value.substring (0, index));
        String lowName = getLowProcessor ().getName (value.substring (index));
        if (! highName.isEmpty ()) {
            buffer.append (highName);
            buffer.append (SEPARATOR);
            buffer.append (getToken ());
            buffer.append (SEPARATOR);
        }
        if (! lowName.isEmpty ()) {
            buffer.append (lowName);
        }
    } else {
        String lowName = getLowProcessor ().getName (value);
        buffer.append (lowName);
    }
    return buffer.toString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
410
5
Gpt3D_Clone410_5.java 1 26
Gpt3D_Clone410_5.java 27 50
----------------------------------------

public String getName (String value) {
    StringBuilder buffer = new StringBuilder ();
    String high, low;
    if (value.length () < getPartDivider ()) {
        high = "";
        low = value;
    } else {
        int index = value.length () - getPartDivider ();
        high = value.substring (0, index);
        low = value.substring (index);
    }
    String highName = getHighProcessor ().getName (high);
    String lowName = getLowProcessor ().getName (low);
    if (! highName.isEmpty ()) {
        buffer.append (highName);
        buffer.append (SEPARATOR);
        buffer.append (getToken ());
        if (! lowName.isEmpty ()) {
            buffer.append (SEPARATOR);
        }
    }
    if (! lowName.isEmpty ()) {
        buffer.append (lowName);
    }
    return buffer.toString ();
}
----------------------------------------

 public String getName (String value) {
    StringBuilder buffer = new StringBuilder ();
    int divider = getPartDivider ();
    int totalLength = value.length ();
    if (totalLength >= divider) {
        String highName = getHighProcessor ().getName (value.substring (0, totalLength - divider));
        String lowName = getLowProcessor ().getName (value.substring (totalLength - divider));
        if (!highName.isEmpty ()) {
            buffer.append (highName);
            buffer.append (SEPARATOR);
            buffer.append (getToken ());
            buffer.append (SEPARATOR);
        }
        if (! lowName.isEmpty ()) {
            buffer.append (lowName);
        }
    } else {
        String lowName = getLowProcessor ().getName (value);
        buffer.append (lowName);
    }
    return buffer.toString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
412
1
Gpt3D_Clone412_1.java 1 26
Gpt3D_Clone412_1.java 27 61
----------------------------------------

public String getName (String value) {
    StringBuilder buffer = new StringBuilder ();
    String high, low;
    if (value.length () < getPartDivider ()) {
        high = "";
        low = value;
    } else {
        int index = value.length () - getPartDivider ();
        high = value.substring (0, index);
        low = value.substring (index);
    }
    String highName = getHighProcessor ().getName (high);
    String lowName = getLowProcessor ().getName (low);
    if (! "".equals (highName)) {
        buffer.append (highName);
        buffer.append (SEPARATOR);
        buffer.append (getToken ());
        if (! "".equals (lowName)) {
            buffer.append (SEPARATOR);
        }
    }
    if (! "".equals (lowName)) {
        buffer.append (lowName);
    }
    return buffer.toString ();
}
----------------------------------------

 public String getName (String value) {
   String result = "";
   String high = "";
   String low = "";
   int partDivider = getPartDivider();
   
   // Check if length of value is less than partDivider
   if (value.length() < partDivider) {
      high = "";
      low = value;
   } else {
      int index = value.length() - partDivider;
      high = value.substring(index);
      low = value.substring(0, index);
   }
   
   // Get name for high and low
   String highName = getHighProcessor().getName(high);
   String lowName = getLowProcessor().getName(low);
   
   
   if (!highName.equals("")) {
      result += highName + SEPARATOR + getToken();
      if (!lowName.equals("")) {
         result += SEPARATOR;
      }
   }
   
   if (!lowName.equals("")) {
      result += lowName;
   }
   return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
412
2
Gpt3D_Clone412_2.java 1 26
Gpt3D_Clone412_2.java 27 57
----------------------------------------

public String getName (String value) {
    StringBuilder buffer = new StringBuilder ();
    String high, low;
    if (value.length () < getPartDivider ()) {
        high = "";
        low = value;
    } else {
        int index = value.length () - getPartDivider ();
        high = value.substring (0, index);
        low = value.substring (index);
    }
    String highName = getHighProcessor ().getName (high);
    String lowName = getLowProcessor ().getName (low);
    if (! "".equals (highName)) {
        buffer.append (highName);
        buffer.append (SEPARATOR);
        buffer.append (getToken ());
        if (! "".equals (lowName)) {
            buffer.append (SEPARATOR);
        }
    }
    if (! "".equals (lowName)) {
        buffer.append (lowName);
    }
    return buffer.toString ();
}
----------------------------------------

 public  String getName(String value) {
   String result = "";
   String high = "";
   String low = "";
   int partDivider = getPartDivider();
   
   if (value.length() < partDivider) {
      high = "";
      low = value;
   } else {
      int index = value.length() - partDivider;
      high = value.substring(index);
      low = value.substring(0, index);
   }
   
   String highName = getHighProcessor().getName(high);
   String lowName = getLowProcessor().getName(low);
   
   if (!highName.equals("")) {
      result += highName + SEPARATOR + getToken();
      if (!lowName.equals("")) {
         result += SEPARATOR;
      }
   }
   if (!lowName.equals("")) {
      result += lowName;
   }
   return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
412
3
Gpt3D_Clone412_3.java 1 26
Gpt3D_Clone412_3.java 27 59
----------------------------------------

public String getName (String value) {
    StringBuilder buffer = new StringBuilder ();
    String high, low;
    if (value.length () < getPartDivider ()) {
        high = "";
        low = value;
    } else {
        int index = value.length () - getPartDivider ();
        high = value.substring (0, index);
        low = value.substring (index);
    }
    String highName = getHighProcessor ().getName (high);
    String lowName = getLowProcessor ().getName (low);
    if (! "".equals (highName)) {
        buffer.append (highName);
        buffer.append (SEPARATOR);
        buffer.append (getToken ());
        if (! "".equals (lowName)) {
            buffer.append (SEPARATOR);
        }
    }
    if (! "".equals (lowName)) {
        buffer.append (lowName);
    }
    return buffer.toString ();
}
----------------------------------------

 public String getName(String value) {
   String result = "";
   String high = "";
   String low = "";
   int partDivider = getPartDivider();
   
   if (value.length() < partDivider) {
      high = "";
      low = value;
   } else {
      int index = value.length() - partDivider;
      high = value.substring(0, index);
      low = value.substring(index);
   }
   
   String highName = getHighProcessor().getName(high);
   String lowName = getLowProcessor().getName(low);
   
   // conditionals to check if strings are null or empty
   if (!highName.equals("")) {
      result += highName + SEPARATOR + getToken();
      // Check if lowName string isn't empty
      if (!lowName.equals("")) {
         result += SEPARATOR;
      }
   }
   if (!lowName.equals("")) {
      result += lowName;
   }
   return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
412
4
Gpt3D_Clone412_4.java 1 26
Gpt3D_Clone412_4.java 27 57
----------------------------------------

public String getName (String value) {
    StringBuilder buffer = new StringBuilder ();
    String high, low;
    if (value.length () < getPartDivider ()) {
        high = "";
        low = value;
    } else {
        int index = value.length () - getPartDivider ();
        high = value.substring (0, index);
        low = value.substring (index);
    }
    String highName = getHighProcessor ().getName (high);
    String lowName = getLowProcessor ().getName (low);
    if (! "".equals (highName)) {
        buffer.append (highName);
        buffer.append (SEPARATOR);
        buffer.append (getToken ());
        if (! "".equals (lowName)) {
            buffer.append (SEPARATOR);
        }
    }
    if (! "".equals (lowName)) {
        buffer.append (lowName);
    }
    return buffer.toString ();
}
----------------------------------------

 public String getName(String value) {
   String result = "";
   String high = "";
   String low = "";
   int partDivider = getPartDivider();
   
   if (value.length() < partDivider) {
      high = "";
      low = value;
   } else {
      int index = value.length() - partDivider;
      high = value.substring(0, index);
      low = value.substring(index);
   }
   
   String highName = getHighProcessor().getName(high);
   String lowName = getLowProcessor().getName(low);
   
   if (!highName.equals("")) {
      result += highName + SEPARATOR + getToken();
      if (!lowName.equals("")) {
         result += SEPARATOR;
      }
   }
   if (!lowName.equals("")) {
      result += lowName;
   }
   return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
417
0
Gpt3D_Clone417_0.java 1 32
Gpt3D_Clone417_0.java 33 75
----------------------------------------

public String getName (String value) {
    boolean negative = false;
    if (value.startsWith ("-")) {
        negative = true;
        value = value.substring (1);
    }
    int decimals = value.indexOf (".");
    String decimalValue = null;
    if (0 <= decimals) {
        decimalValue = value.substring (decimals + 1);
        value = value.substring (0, decimals);
    }
    String name = processor.getName (value);
    if ("".equals (name)) {
        name = ZERO_TOKEN;
    } else if (negative) {
        name = MINUS.concat (SEPARATOR).concat (name);
    }
    if (! (null == decimalValue || "".equals (decimalValue))) {
        String zeroDecimalValue = "";
        for (int i = 0;
        i < decimalValue.length (); i ++) {
            zeroDecimalValue = zeroDecimalValue + "0";
        }
        if (decimalValue.equals (zeroDecimalValue)) {
            name = name.concat (SEPARATOR).concat (UNION_AND).concat (SEPARATOR).concat ("zero").concat (SEPARATOR).concat (SCALE.getName (- decimalValue.length ()));
        } else {
            name = name.concat (SEPARATOR).concat (UNION_AND).concat (SEPARATOR).concat (processor.getName (decimalValue)).concat (SEPARATOR).concat (SCALE.getName (- decimalValue.length ()));
        }
    }
    return name;
}
----------------------------------------

 public String getName(String value) {
    boolean negative = false;
    if (value.startsWith("-")) {
        negative = true;
        value = value.substring(1);
    }
    int decimals = value.indexOf(".");
    String decimalValue = null;
    if (0 <= decimals) {
        decimalValue = value.substring(decimals + 1);
        value = value.substring(0, decimals);
    }
    String name;
    if (negative) {
        name = "Minus" + SEPARATOR;
    } else {
        name = "";
    }
    if (decimalValue != null && !decimalValue.equals("")) {
        boolean isZero = true;
        for (int i = 0; i < decimalValue.length(); i++) {
            if (decimalValue.charAt(i) != '0') {
                isZero = false;
                break;
            }
        }
        if (isZero) {
            name = name.concat("Zero").concat(SEPARATOR).concat(SCALE.getName(-decimalValue.length()));
        } else {
            name = name.concat(processor.getName(decimalValue)).concat(SEPARATOR).concat(SCALE.getName(-decimalValue.length()));
        }
    }
    if (name.equals("")) {
        name = processor.getName(value);
        if ("".equals(name)) {
            name = ZERO_TOKEN;
        }
    }
    return name;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
417
3
Gpt3D_Clone417_3.java 1 32
Gpt3D_Clone417_3.java 33 74
----------------------------------------

public String getName (String value) {
    boolean negative = false;
    if (value.startsWith ("-")) {
        negative = true;
        value = value.substring (1);
    }
    int decimals = value.indexOf (".");
    String decimalValue = null;
    if (0 <= decimals) {
        decimalValue = value.substring (decimals + 1);
        value = value.substring (0, decimals);
    }
    String name = processor.getName (value);
    if ("".equals (name)) {
        name = ZERO_TOKEN;
    } else if (negative) {
        name = MINUS.concat (SEPARATOR).concat (name);
    }
    if (! (null == decimalValue || "".equals (decimalValue))) {
        String zeroDecimalValue = "";
        for (int i = 0;
        i < decimalValue.length (); i ++) {
            zeroDecimalValue = zeroDecimalValue + "0";
        }
        if (decimalValue.equals (zeroDecimalValue)) {
            name = name.concat (SEPARATOR).concat (UNION_AND).concat (SEPARATOR).concat ("zero").concat (SEPARATOR).concat (SCALE.getName (- decimalValue.length ()));
        } else {
            name = name.concat (SEPARATOR).concat (UNION_AND).concat (SEPARATOR).concat (processor.getName (decimalValue)).concat (SEPARATOR).concat (SCALE.getName (- decimalValue.length ()));
        }
    }
    return name;
}
----------------------------------------

 public String getName(String value) {
    boolean negative = false;
    if (value.startsWith("-")) {
        negative = true;
        value = value.substring(1);
    }
    int decimals = value.indexOf(".");
    String decimalValue = null;
    if (0 <= decimals) {
        decimalValue = value.substring(decimals + 1);
        value = value.substring(0, decimals);
    }
    String name;
    if (negative) {
        name = "Minus" + SEPARATOR;
    }
    else {
        name = "";
    }
    if (decimalValue != null && !decimalValue.equals("")) {
        int numOfZeros = 0;
        for (int i = 0; i < decimalValue.length(); i++) {
            if (decimalValue.charAt(i) == '0') {
                numOfZeros++;
            }
        }
        if (numOfZeros == decimalValue.length()) {
            name = name.concat("Zero").concat(SEPARATOR).concat(SCALE.getName(-decimalValue.length()));
        } else {
            name = name.concat(processor.getName(decimalValue)).concat(SEPARATOR).concat(SCALE.getName(-decimalValue.length()));
        }
    }
    if (name.equals("")) {
        name = processor.getName(value);
        if (name.equals("")) {
            name = ZERO_TOKEN;
        }
    }
    return name;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
418
1
Gpt3D_Clone418_1.java 1 26
Gpt3D_Clone418_1.java 27 45
----------------------------------------

public String getName (String value) {
    StringBuilder buffer = new StringBuilder ();
    String high, low;
    if (value.length () < getPartDivider ()) {
        high = "";
        low = value;
    } else {
        int index = value.length () - getPartDivider ();
        high = value.substring (0, index);
        low = value.substring (index);
    }
    String highName = getHighProcessor ().getName (high);
    String lowName = getLowProcessor ().getName (low);
    if (! highName.isEmpty ()) {
        buffer.append (highName);
        buffer.append (SEPARATOR);
        buffer.append (getToken ());
        if (! lowName.isEmpty ()) {
            buffer.append (SEPARATOR);
        }
    }
    if (! lowName.isEmpty ()) {
        buffer.append (lowName);
    }
    return buffer.toString ();
}
----------------------------------------

 public String getName(String value){
    String[] parts = value.split(SEPARATOR);
    if (value.length() < getPartDivider()){
        String high = "";
        String low = value;
    } else {
        int index = value.length() - getPartDivider();
        String high = value.substring(0, index);
        String low = value.substring(index);
    }
    String highName = getHighProcessor().getName(high);
    String lowName = getLowProcessor().getName(low);
    String joinedStrings = highName + SEPARATOR + getToken() + SEPARATOR + lowName;
    return joinedStrings;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
418
3
Gpt3D_Clone418_3.java 1 26
Gpt3D_Clone418_3.java 27 43
----------------------------------------

public String getName (String value) {
    StringBuilder buffer = new StringBuilder ();
    String high, low;
    if (value.length () < getPartDivider ()) {
        high = "";
        low = value;
    } else {
        int index = value.length () - getPartDivider ();
        high = value.substring (0, index);
        low = value.substring (index);
    }
    String highName = getHighProcessor ().getName (high);
    String lowName = getLowProcessor ().getName (low);
    if (! highName.isEmpty ()) {
        buffer.append (highName);
        buffer.append (SEPARATOR);
        buffer.append (getToken ());
        if (! lowName.isEmpty ()) {
            buffer.append (SEPARATOR);
        }
    }
    if (! lowName.isEmpty ()) {
        buffer.append (lowName);
    }
    return buffer.toString ();
}
----------------------------------------

 public String getName(String value){
    String high, low;
    if(value.length() < getPartDivider()){
        high = "";
        low = value;
    } else {
        int index = value.length() - getPartDivider();
        high = value.substring(0, index);
        low = value.substring(index);
    }
    String[] arr = {getHighProcessor().getName(high), getToken(), getLowProcessor().getName(low)};
    return String.join(SEPARATOR, arr);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
418
4
Gpt3D_Clone418_4.java 1 26
Gpt3D_Clone418_4.java 27 43
----------------------------------------

public String getName (String value) {
    StringBuilder buffer = new StringBuilder ();
    String high, low;
    if (value.length () < getPartDivider ()) {
        high = "";
        low = value;
    } else {
        int index = value.length () - getPartDivider ();
        high = value.substring (0, index);
        low = value.substring (index);
    }
    String highName = getHighProcessor ().getName (high);
    String lowName = getLowProcessor ().getName (low);
    if (! highName.isEmpty ()) {
        buffer.append (highName);
        buffer.append (SEPARATOR);
        buffer.append (getToken ());
        if (! lowName.isEmpty ()) {
            buffer.append (SEPARATOR);
        }
    }
    if (! lowName.isEmpty ()) {
        buffer.append (lowName);
    }
    return buffer.toString ();
}
----------------------------------------

 public String getName(String value){
    String high = "", low = value;
    if (value.length() >= getPartDivider()){
        int index = value.length() - getPartDivider();
        high = value.substring(0, index);
        low = value.substring(index);
    }
    StringJoiner sj = new StringJoiner(SEPARATOR);
    sj.add(getHighProcessor().getName(high));
    sj.add(getToken());
    sj.add(getLowProcessor().getName(low));
    return sj.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
418
5
Gpt3D_Clone418_5.java 1 26
Gpt3D_Clone418_5.java 27 42
----------------------------------------

public String getName (String value) {
    StringBuilder buffer = new StringBuilder ();
    String high, low;
    if (value.length () < getPartDivider ()) {
        high = "";
        low = value;
    } else {
        int index = value.length () - getPartDivider ();
        high = value.substring (0, index);
        low = value.substring (index);
    }
    String highName = getHighProcessor ().getName (high);
    String lowName = getLowProcessor ().getName (low);
    if (! highName.isEmpty ()) {
        buffer.append (highName);
        buffer.append (SEPARATOR);
        buffer.append (getToken ());
        if (! lowName.isEmpty ()) {
            buffer.append (SEPARATOR);
        }
    }
    if (! lowName.isEmpty ()) {
        buffer.append (lowName);
    }
    return buffer.toString ();
}
----------------------------------------

 public String getName(String value){
    String[] parts = value.split(SEPARATOR); 
    String high = "", low = value;
    int index = value.length() - getPartDivider();
    if (value.length() >= getPartDivider()){
        high = value.substring(0, index);
        low = value.substring(index);
    }
    String highName = getHighProcessor().getName(high);
    String lowName = getLowProcessor().getName(low);
    return highName + SEPARATOR + getToken() + SEPARATOR + lowName;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
418
6
Gpt3D_Clone418_6.java 1 26
Gpt3D_Clone418_6.java 27 40
----------------------------------------

public String getName (String value) {
    StringBuilder buffer = new StringBuilder ();
    String high, low;
    if (value.length () < getPartDivider ()) {
        high = "";
        low = value;
    } else {
        int index = value.length () - getPartDivider ();
        high = value.substring (0, index);
        low = value.substring (index);
    }
    String highName = getHighProcessor ().getName (high);
    String lowName = getLowProcessor ().getName (low);
    if (! highName.isEmpty ()) {
        buffer.append (highName);
        buffer.append (SEPARATOR);
        buffer.append (getToken ());
        if (! lowName.isEmpty ()) {
            buffer.append (SEPARATOR);
        }
    }
    if (! lowName.isEmpty ()) {
        buffer.append (lowName);
    }
    return buffer.toString ();
}
----------------------------------------

 public String getName (String value) {
    int index = value.length () - getPartDivider ();
    String highName = getHighProcessor ().getName (value.substring(0, index));
    String lowName = getLowProcessor ().getName (value.substring(index));
    
    StringJoiner sj = new StringJoiner(SEPARATOR);
    sj.add(highName);
    sj.add(getToken());
    sj.add(lowName);
    return sj.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
418
7
Gpt3D_Clone418_7.java 1 26
Gpt3D_Clone418_7.java 27 39
----------------------------------------

public String getName (String value) {
    StringBuilder buffer = new StringBuilder ();
    String high, low;
    if (value.length () < getPartDivider ()) {
        high = "";
        low = value;
    } else {
        int index = value.length () - getPartDivider ();
        high = value.substring (0, index);
        low = value.substring (index);
    }
    String highName = getHighProcessor ().getName (high);
    String lowName = getLowProcessor ().getName (low);
    if (! highName.isEmpty ()) {
        buffer.append (highName);
        buffer.append (SEPARATOR);
        buffer.append (getToken ());
        if (! lowName.isEmpty ()) {
            buffer.append (SEPARATOR);
        }
    }
    if (! lowName.isEmpty ()) {
        buffer.append (lowName);
    }
    return buffer.toString ();
}
----------------------------------------

 public String getName(String value){
    if (value.length() < getPartDivider()){
        return getLowProcessor().getName(value);
    }
    int index = value.length() - getPartDivider();
    String highName = getHighProcessor().getName(value.substring(0, index));
    String lowName = getLowProcessor().getName(value.substring(index));
    return highName + SEPARATOR + getToken() + SEPARATOR + lowName;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
418
8
Gpt3D_Clone418_8.java 1 26
Gpt3D_Clone418_8.java 27 39
----------------------------------------

public String getName (String value) {
    StringBuilder buffer = new StringBuilder ();
    String high, low;
    if (value.length () < getPartDivider ()) {
        high = "";
        low = value;
    } else {
        int index = value.length () - getPartDivider ();
        high = value.substring (0, index);
        low = value.substring (index);
    }
    String highName = getHighProcessor ().getName (high);
    String lowName = getLowProcessor ().getName (low);
    if (! highName.isEmpty ()) {
        buffer.append (highName);
        buffer.append (SEPARATOR);
        buffer.append (getToken ());
        if (! lowName.isEmpty ()) {
            buffer.append (SEPARATOR);
        }
    }
    if (! lowName.isEmpty ()) {
        buffer.append (lowName);
    }
    return buffer.toString ();
}
----------------------------------------

 public String getName(String value){
    if(value.length() < getPartDivider()){
        return getLowProcessor().getName(value);
    }
    int index = value.length() - getPartDivider();
    String high = value.substring(0, index);
    String low = value.substring(index);
    return getHighProcessor().getName(high) + SEPARATOR + getToken() + SEPARATOR + getLowProcessor().getName(low);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
418
9
Gpt3D_Clone418_9.java 1 26
Gpt3D_Clone418_9.java 27 38
----------------------------------------

public String getName (String value) {
    StringBuilder buffer = new StringBuilder ();
    String high, low;
    if (value.length () < getPartDivider ()) {
        high = "";
        low = value;
    } else {
        int index = value.length () - getPartDivider ();
        high = value.substring (0, index);
        low = value.substring (index);
    }
    String highName = getHighProcessor ().getName (high);
    String lowName = getLowProcessor ().getName (low);
    if (! highName.isEmpty ()) {
        buffer.append (highName);
        buffer.append (SEPARATOR);
        buffer.append (getToken ());
        if (! lowName.isEmpty ()) {
            buffer.append (SEPARATOR);
        }
    }
    if (! lowName.isEmpty ()) {
        buffer.append (lowName);
    }
    return buffer.toString ();
}
----------------------------------------

 public String getName (String value) {
    String high, low;
    int index = value.length () - getPartDivider ();
    high = value.substring (0, index);
    low = value.substring (index);
    String joinedStrings = getHighProcessor().getName(high) + SEPARATOR + getToken() + SEPARATOR + getLowProcessor().getName(low);
    return joinedStrings;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
41
7
Gpt3D_Clone41_7.java 1 10
Gpt3D_Clone41_7.java 11 15
----------------------------------------

public static void shuffle (Object [] a) {
    int n = a.length;
    for (int i = 0;
    i < n; i ++) {
        int r = i + (int) (Math.random () * (n - i));
        Object swap = a [r];
        a [r] = a [i];
        a [i] = swap;
    }
}
----------------------------------------

 public static void shuffle (Object [] a) {
	Collections.shuffle(Arrays.asList(a));	
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
423
4
Gpt3D_Clone423_4.java 1 32
Gpt3D_Clone423_4.java 33 67
----------------------------------------

public String getName (String value) {
    boolean negative = false;
    if (value.startsWith ("-")) {
        negative = true;
        value = value.substring (1);
    }
    int decimals = value.indexOf (".");
    String decimalValue = null;
    if (0 <= decimals) {
        decimalValue = value.substring (decimals + 1);
        value = value.substring (0, decimals);
    }
    String name = processor.getName (value);
    if ("".equals (name)) {
        name = ZERO_TOKEN;
    } else if (negative) {
        name = MINUS.concat (SEPARATOR).concat (name);
    }
    if (! (null == decimalValue || "".equals (decimalValue))) {
        String zeroDecimalValue = "";
        for (int i = 0;
        i < decimalValue.length (); i ++) {
            zeroDecimalValue = zeroDecimalValue + "0";
        }
        if (decimalValue.equals (zeroDecimalValue)) {
            name = name.concat (SEPARATOR).concat (UNION_AND).concat (SEPARATOR).concat ("zero").concat (SEPARATOR).concat (SCALE.getName (- decimalValue.length ()));
        } else {
            name = name.concat (SEPARATOR).concat (UNION_AND).concat (SEPARATOR).concat (processor.getName (decimalValue)).concat (SEPARATOR).concat (SCALE.getName (- decimalValue.length ()));
        }
    }
    return name;
}
----------------------------------------

 public String getName (String value) {
    boolean negative = false;
    String decimalValue = null;
    String name = "";
    
    if (value.charAt(0) == '-') {
        negative = true;
        value = value.substring (1);
    }
    int decimals = value.indexOf (".");
    if(decimals > 0){
        decimalValue = value.substring (decimals + 1);
        value = value.substring (0, decimals);
    }
    name = processor.getName (value);
        
    if (negative) {
        name = "-" + SEPARATOR + name;
    }
    if (! (decimalValue == null || decimalValue.equals(""))) {
        String zeroDecimalValue = "";
        for (int i = 0; i < decimalValue.length (); i ++) {
            zeroDecimalValue += "0";
        }
            
        if (decimalValue.equals (zeroDecimalValue)) {
            name = name + SEPARATOR + UNION_AND + SEPARATOR + "zero" + SEPARATOR + SCALE.getName (-decimalValue.length ());
        } else {
            name = name + SEPARATOR + UNION_AND + SEPARATOR + processor.getName (decimalValue) + SEPARATOR + SCALE.getName (-decimalValue.length ());
        }
    }
    return name;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
423
5
Gpt3D_Clone423_5.java 1 32
Gpt3D_Clone423_5.java 33 67
----------------------------------------

public String getName (String value) {
    boolean negative = false;
    if (value.startsWith ("-")) {
        negative = true;
        value = value.substring (1);
    }
    int decimals = value.indexOf (".");
    String decimalValue = null;
    if (0 <= decimals) {
        decimalValue = value.substring (decimals + 1);
        value = value.substring (0, decimals);
    }
    String name = processor.getName (value);
    if ("".equals (name)) {
        name = ZERO_TOKEN;
    } else if (negative) {
        name = MINUS.concat (SEPARATOR).concat (name);
    }
    if (! (null == decimalValue || "".equals (decimalValue))) {
        String zeroDecimalValue = "";
        for (int i = 0;
        i < decimalValue.length (); i ++) {
            zeroDecimalValue = zeroDecimalValue + "0";
        }
        if (decimalValue.equals (zeroDecimalValue)) {
            name = name.concat (SEPARATOR).concat (UNION_AND).concat (SEPARATOR).concat ("zero").concat (SEPARATOR).concat (SCALE.getName (- decimalValue.length ()));
        } else {
            name = name.concat (SEPARATOR).concat (UNION_AND).concat (SEPARATOR).concat (processor.getName (decimalValue)).concat (SEPARATOR).concat (SCALE.getName (- decimalValue.length ()));
        }
    }
    return name;
}
----------------------------------------

 public String getName (String value) {
    boolean negative = false;
    String decimalValue = null;
    String name = "";
    
    if (value.charAt(0) == '-') {
        negative = true;
        value = value.substring (1);
    }
    int decimals = value.indexOf (".");
    if (decimals > 0) {
        decimalValue = value.substring (decimals + 1);
        value = value.substring (0, decimals);
    }
    name = processor.getName (value);
        
    if (negative) {
        name = "-" + SEPARATOR + name;
    }
    if (decimalValue != null && !decimalValue.equals("")) {
        String zeroDecimalValue = "";
        for (int i = 0; i < decimalValue.length (); i ++) {
            zeroDecimalValue += "0";
        }
            
        if (decimalValue.equals (zeroDecimalValue)) {
            name = name + SEPARATOR + UNION_AND + SEPARATOR + "zero" + SEPARATOR + SCALE.getName (-decimalValue.length ());
        } else {
            name = name + SEPARATOR + UNION_AND + SEPARATOR + processor.getName (decimalValue) + SEPARATOR + SCALE.getName (-decimalValue.length ());
        }
    }
    return name;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
423
7
Gpt3D_Clone423_7.java 1 32
Gpt3D_Clone423_7.java 33 67
----------------------------------------

public String getName (String value) {
    boolean negative = false;
    if (value.startsWith ("-")) {
        negative = true;
        value = value.substring (1);
    }
    int decimals = value.indexOf (".");
    String decimalValue = null;
    if (0 <= decimals) {
        decimalValue = value.substring (decimals + 1);
        value = value.substring (0, decimals);
    }
    String name = processor.getName (value);
    if ("".equals (name)) {
        name = ZERO_TOKEN;
    } else if (negative) {
        name = MINUS.concat (SEPARATOR).concat (name);
    }
    if (! (null == decimalValue || "".equals (decimalValue))) {
        String zeroDecimalValue = "";
        for (int i = 0;
        i < decimalValue.length (); i ++) {
            zeroDecimalValue = zeroDecimalValue + "0";
        }
        if (decimalValue.equals (zeroDecimalValue)) {
            name = name.concat (SEPARATOR).concat (UNION_AND).concat (SEPARATOR).concat ("zero").concat (SEPARATOR).concat (SCALE.getName (- decimalValue.length ()));
        } else {
            name = name.concat (SEPARATOR).concat (UNION_AND).concat (SEPARATOR).concat (processor.getName (decimalValue)).concat (SEPARATOR).concat (SCALE.getName (- decimalValue.length ()));
        }
    }
    return name;
}
----------------------------------------

 public String getName (String value) {
    boolean negative = false;
    String decimalValue = null;
    String name = "";
    
    if (value.substring (0,1).equals ("-")) {
        negative = true;
        value = value.substring (1);
    }
    int decimals = value.indexOf (".");
    if(decimals > 0){
        decimalValue = value.substring (decimals + 1);
        value = value.substring (0, decimals);
    }
    name = processor.getName (value);
        
    if (negative) {
        name = "-" + SEPARATOR + name;
    }
    if (decimalValue != null && !decimalValue.equals("")) {
        String zeroDecimalValue = "";
        for (int i = 0; i < decimalValue.length (); i ++) {
            zeroDecimalValue += "0";
        }
            
        if (decimalValue.equals (zeroDecimalValue)) {
            name = name + SEPARATOR + UNION_AND + SEPARATOR + "zero" + SEPARATOR + SCALE.getName (-decimalValue.length ());
        } else {
            name = name + SEPARATOR + UNION_AND + SEPARATOR + processor.getName (decimalValue) + SEPARATOR + SCALE.getName (-decimalValue.length ());
        }
    }
    return name;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
428
0
Gpt3D_Clone428_0.java 1 32
Gpt3D_Clone428_0.java 33 77
----------------------------------------

public String getName (String value) {
    boolean negative = false;
    if (value.startsWith ("-")) {
        negative = true;
        value = value.substring (1);
    }
    int decimals = value.indexOf (".");
    String decimalValue = null;
    if (0 <= decimals) {
        decimalValue = value.substring (decimals + 1);
        value = value.substring (0, decimals);
    }
    String name = processor.getName (value);
    if ("".equals (name)) {
        name = ZERO_TOKEN;
    } else if (negative) {
        name = MINUS.concat (SEPARATOR).concat (name);
    }
    if (! (null == decimalValue || "".equals (decimalValue))) {
        String zeroDecimalValue = "";
        for (int i = 0;
        i < decimalValue.length (); i ++) {
            zeroDecimalValue = zeroDecimalValue + "0";
        }
        if (decimalValue.equals (zeroDecimalValue)) {
            name = name.concat (SEPARATOR).concat (UNION_AND).concat (SEPARATOR).concat ("zero").concat (SEPARATOR).concat (SCALE.getName (- decimalValue.length ()));
        } else {
            name = name.concat (SEPARATOR).concat (UNION_AND).concat (SEPARATOR).concat (processor.getName (decimalValue)).concat (SEPARATOR).concat (SCALE.getName (- decimalValue.length ()));
        }
    }
    return name;
}
----------------------------------------

 public String getName (String userInput) {
    int decimalIndex = userInput.indexOf(".");
    String decimalValue = null;
    String name = null;
    boolean negative;
    if (userInput.startsWith("-")) {
        userInput = userInput.substring(1);
        negative = true;
    }
    else {
        negative = false;
    }
    if (decimalIndex >= 0) {
        decimalValue = userInput.substring(decimalIndex + 1);
        userInput = userInput.substring(0, decimalIndex);
    }
    name = processor.getName(userInput);
    if (name.equals("")) {
        name = ZERO_TOKEN;
    }
    else if (negative) {
        name = MINUS + SEPARATOR + name;
    }
    if (decimalValue != null && !decimalValue.equals("")) {
        String leadingZeros = "";
        int decimalLength = decimalValue.length();
        for (int i = 0; i < decimalLength; i++)
            leadingZeros = leadingZeros + "0";
        if (decimalValue.equals(leadingZeros)) {
            name = name + SEPARATOR + UNION_AND + SEPARATOR + "zero" + SEPARATOR + SCALE.getName(-1 * decimalLength);
        }
        else {
            name = name + SEPARATOR + UNION_AND + SEPARATOR + processor.getName(decimalValue) + SEPARATOR + SCALE.getName(-1 * decimalLength);
        }
    }
    return name;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
428
1
Gpt3D_Clone428_1.java 1 32
Gpt3D_Clone428_1.java 33 72
----------------------------------------

public String getName (String value) {
    boolean negative = false;
    if (value.startsWith ("-")) {
        negative = true;
        value = value.substring (1);
    }
    int decimals = value.indexOf (".");
    String decimalValue = null;
    if (0 <= decimals) {
        decimalValue = value.substring (decimals + 1);
        value = value.substring (0, decimals);
    }
    String name = processor.getName (value);
    if ("".equals (name)) {
        name = ZERO_TOKEN;
    } else if (negative) {
        name = MINUS.concat (SEPARATOR).concat (name);
    }
    if (! (null == decimalValue || "".equals (decimalValue))) {
        String zeroDecimalValue = "";
        for (int i = 0;
        i < decimalValue.length (); i ++) {
            zeroDecimalValue = zeroDecimalValue + "0";
        }
        if (decimalValue.equals (zeroDecimalValue)) {
            name = name.concat (SEPARATOR).concat (UNION_AND).concat (SEPARATOR).concat ("zero").concat (SEPARATOR).concat (SCALE.getName (- decimalValue.length ()));
        } else {
            name = name.concat (SEPARATOR).concat (UNION_AND).concat (SEPARATOR).concat (processor.getName (decimalValue)).concat (SEPARATOR).concat (SCALE.getName (- decimalValue.length ()));
        }
    }
    return name;
}
----------------------------------------

 public String getName (String userInput) {
    int decimalIndex = userInput.indexOf(".");
    String decimalValue = null;
    String name;
    boolean negative = userInput.startsWith(minus);
    if (negative) {
        userInput = userInput.substring(1);
    }
    if (decimalIndex >= 0) {
        decimalValue = userInput.substring(decimalIndex + 1);
        userInput = userInput.substring(0, decimalIndex);
    }
    name = processor.getName(userInput);
    if (name.equals("")) {
        name = "zero";
    } else if (negative) {
        name = MINUS + SEPARATOR + name;
    }
    if (decimalValue != null && !decimalValue.equals("")) {
        String leadingZeros = "";
        int decimalLength = decimalValue.length();
        for (int i = 0; i < decimalLength; i++) {
            leadingZeros = leadingZeros + "0";
        }
        if (decimalValue.equals(leadingZeros)) {
            name = name + SEPARATOR + UNION_AND + SEPARATOR + "zero" + SEPARATOR + SCALE.getName(-1 * decimalLength);
        }
        else {
            name = name + SEPARATOR + UNION_AND + SEPARATOR + processor.getName(decimalValue) + SEPARATOR + SCALE.getName(-1 * decimalLength);
        }
    }
    return name;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
428
2
Gpt3D_Clone428_2.java 1 32
Gpt3D_Clone428_2.java 33 73
----------------------------------------

public String getName (String value) {
    boolean negative = false;
    if (value.startsWith ("-")) {
        negative = true;
        value = value.substring (1);
    }
    int decimals = value.indexOf (".");
    String decimalValue = null;
    if (0 <= decimals) {
        decimalValue = value.substring (decimals + 1);
        value = value.substring (0, decimals);
    }
    String name = processor.getName (value);
    if ("".equals (name)) {
        name = ZERO_TOKEN;
    } else if (negative) {
        name = MINUS.concat (SEPARATOR).concat (name);
    }
    if (! (null == decimalValue || "".equals (decimalValue))) {
        String zeroDecimalValue = "";
        for (int i = 0;
        i < decimalValue.length (); i ++) {
            zeroDecimalValue = zeroDecimalValue + "0";
        }
        if (decimalValue.equals (zeroDecimalValue)) {
            name = name.concat (SEPARATOR).concat (UNION_AND).concat (SEPARATOR).concat ("zero").concat (SEPARATOR).concat (SCALE.getName (- decimalValue.length ()));
        } else {
            name = name.concat (SEPARATOR).concat (UNION_AND).concat (SEPARATOR).concat (processor.getName (decimalValue)).concat (SEPARATOR).concat (SCALE.getName (- decimalValue.length ()));
        }
    }
    return name;
}
----------------------------------------

 public String getName (String userInput) {
    int decimalIndex = userInput.indexOf(".");
    String decimalValue = null;
    String name;
    boolean negative = userInput.startsWith(minus);
    if (negative) {
        userInput = userInput.substring(1);
    }
    if (decimalIndex >= 0) {
        decimalValue = userInput.substring(decimalIndex + 1);
        userInput = userInput.substring(0, decimalIndex);
    }
    name = processor.getName(userInput);
    if (name.equals("")) {
        name = ZERO_TOKEN;
    }
    else if (negative) {
        name = MINUS + SEPARATOR + name;
    }
    if (decimalValue != null && !decimalValue.equals("")) {
        String zeroDecimalValue = "";
        int decimalLength = decimalValue.length();
        for (int i = 0; i < decimalLength; i++) {
            zeroDecimalValue = zeroDecimalValue + "0";
        }
        if (decimalValue.equals(zeroDecimalValue)) {
            name = name.concat (SEPARATOR).concat (UNION_AND).concat (SEPARATOR).concat ("zero").concat (SEPARATOR).concat (SCALE.getName (- decimalLength));
        }
        else {
            name = name.concat (SEPARATOR).concat (UNION_AND).concat (SEPARATOR).concat (processor.getName (decimalValue)).concat (SEPARATOR).concat (SCALE.getName (- decimalLength));
        }
    }
    return name;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
428
4
Gpt3D_Clone428_4.java 1 32
Gpt3D_Clone428_4.java 33 73
----------------------------------------

public String getName (String value) {
    boolean negative = false;
    if (value.startsWith ("-")) {
        negative = true;
        value = value.substring (1);
    }
    int decimals = value.indexOf (".");
    String decimalValue = null;
    if (0 <= decimals) {
        decimalValue = value.substring (decimals + 1);
        value = value.substring (0, decimals);
    }
    String name = processor.getName (value);
    if ("".equals (name)) {
        name = ZERO_TOKEN;
    } else if (negative) {
        name = MINUS.concat (SEPARATOR).concat (name);
    }
    if (! (null == decimalValue || "".equals (decimalValue))) {
        String zeroDecimalValue = "";
        for (int i = 0;
        i < decimalValue.length (); i ++) {
            zeroDecimalValue = zeroDecimalValue + "0";
        }
        if (decimalValue.equals (zeroDecimalValue)) {
            name = name.concat (SEPARATOR).concat (UNION_AND).concat (SEPARATOR).concat ("zero").concat (SEPARATOR).concat (SCALE.getName (- decimalValue.length ()));
        } else {
            name = name.concat (SEPARATOR).concat (UNION_AND).concat (SEPARATOR).concat (processor.getName (decimalValue)).concat (SEPARATOR).concat (SCALE.getName (- decimalValue.length ()));
        }
    }
    return name;
}
----------------------------------------

 public String getName (String userInput) {
    int decimalIndex = userInput.indexOf(".");
    String decimalValue = null;
    String name = null;
    boolean negative;
    if (userInput.startsWith("-")) {
        userInput = userInput.substring(1);
        negative = true;
    }
    else
        negative = false;
    if (decimalIndex >= 0) {
        decimalValue = userInput.substring(decimals + 1);
        userInput = userInput.substring(0, decimalIndex);
    }
    name = processor.getName(userInput);
    if (name.equals(""))
        name = ZERO_TOKEN;
    else if (negative)
        name = MINUS + SEPARATOR + name;
    if (decimalValue != null && !decimalValue.equals("")) {
        String zeroes = "";
        int decimalLength = decimalValue.length();
        for (int i = 0; i < decimalLength; i++)
            zeroes = zeroes + "0";
        if (decimalValue.equals(zeroes)) {
            name = name + SEPARATOR + UNION_AND + SEPARATOR + "zero" + SEPARATOR + SCALE.getName(-1 * decimalLength);
        }
        else {
            name = name + SEPARATOR + UNION_AND + SEPARATOR + processor.getName(decimalValue) + SEPARATOR + SCALE.getName(-1 * decimalLength);
        }
    }
    return name;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
42
2
Gpt3D_Clone42_2.java 1 41
Gpt3D_Clone42_2.java 42 63
----------------------------------------

public static void main (String [] args) {
    int number = 2345;
    number = Math.min (3999, Math.max (1, number));
    String asRomanNumerals = "";
    String [] RN = {"I", "V", "X", "L", "C", "D", "M"};
    int i = 0;
    while (number > 0) {
        switch (number % 10) {
            case 1 :
                asRomanNumerals = RN [i] + asRomanNumerals;
                break;
            case 2 :
                asRomanNumerals = RN [i] + RN [i] + asRomanNumerals;
                break;
            case 3 :
                asRomanNumerals = RN [i] + RN [i] + RN [i] + asRomanNumerals;
                break;
            case 4 :
                asRomanNumerals = RN [i] + RN [i + 1] + asRomanNumerals;
                break;
            case 5 :
                asRomanNumerals = RN [i + 1] + asRomanNumerals;
                break;
            case 6 :
                asRomanNumerals = RN [i + 1] + RN [i] + asRomanNumerals;
                break;
            case 7 :
                asRomanNumerals = RN [i + 1] + RN [i] + RN [i] + asRomanNumerals;
                break;
            case 8 :
                asRomanNumerals = RN [i + 1] + RN [i] + RN [i] + RN [i] + asRomanNumerals;
                break;
            case 9 :
                asRomanNumerals = RN [i] + RN [i + 2] + asRomanNumerals;
                break;
        }
        number = (int) number / 10;
        i += 2;
    }
    System.out.println (asRomanNumerals);
}
----------------------------------------

 public static void main (String [] args) {
    int number = 2345;
    number = Math.min (3999, Math.max (1, number));
    String asRomanNumerals = "";
    String [] RN = {"I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M"};
    int i = 0;
    while (number > 0) {
        int remainder = number % 10;
        if (remainder < 4) {
            asRomanNumerals = repeat(RN[i], remainder) + asRomanNumerals;
        } else if (remainder < 9) {
            asRomanNumerals = RN[i-remainder+4] + asRomanNumerals;
        } else {
            asRomanNumerals = RN[i] + RN[i+2] + asRomanNumerals;
        }
        number /= 10;
        i += 2;
    }
    System.out.println(asRomanNumerals);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
42
3
Gpt3D_Clone42_3.java 1 41
Gpt3D_Clone42_3.java 42 63
----------------------------------------

public static void main (String [] args) {
    int number = 2345;
    number = Math.min (3999, Math.max (1, number));
    String asRomanNumerals = "";
    String [] RN = {"I", "V", "X", "L", "C", "D", "M"};
    int i = 0;
    while (number > 0) {
        switch (number % 10) {
            case 1 :
                asRomanNumerals = RN [i] + asRomanNumerals;
                break;
            case 2 :
                asRomanNumerals = RN [i] + RN [i] + asRomanNumerals;
                break;
            case 3 :
                asRomanNumerals = RN [i] + RN [i] + RN [i] + asRomanNumerals;
                break;
            case 4 :
                asRomanNumerals = RN [i] + RN [i + 1] + asRomanNumerals;
                break;
            case 5 :
                asRomanNumerals = RN [i + 1] + asRomanNumerals;
                break;
            case 6 :
                asRomanNumerals = RN [i + 1] + RN [i] + asRomanNumerals;
                break;
            case 7 :
                asRomanNumerals = RN [i + 1] + RN [i] + RN [i] + asRomanNumerals;
                break;
            case 8 :
                asRomanNumerals = RN [i + 1] + RN [i] + RN [i] + RN [i] + asRomanNumerals;
                break;
            case 9 :
                asRomanNumerals = RN [i] + RN [i + 2] + asRomanNumerals;
                break;
        }
        number = (int) number / 10;
        i += 2;
    }
    System.out.println (asRomanNumerals);
}
----------------------------------------

 public static void main (String [] args) {
    int number = 2345;
    number = Math.min (3999, Math.max (1, number));
    String asRomanNumerals = "";
    String [] RN = {"M", "D", "C", "L", "X", "V", "I"};
    int i = 6;
    while (number > 0) {
        int remainder = number % 10;
        if (remainder < 4) {
            asRomanNumerals = repeat(RN[i], remainder) + asRomanNumerals;
        } else if (remainder < 9) {
            asRomanNumerals = RN[i-remainder+4] + asRomanNumerals;
        } else {
            asRomanNumerals = RN[i] + RN[i-2] + asRomanNumerals;
        }
        number /= 10;
        i -= 2;
    }
    System.out.println(asRomanNumerals);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
42
4
Gpt3D_Clone42_4.java 1 41
Gpt3D_Clone42_4.java 42 56
----------------------------------------

public static void main (String [] args) {
    int number = 2345;
    number = Math.min (3999, Math.max (1, number));
    String asRomanNumerals = "";
    String [] RN = {"I", "V", "X", "L", "C", "D", "M"};
    int i = 0;
    while (number > 0) {
        switch (number % 10) {
            case 1 :
                asRomanNumerals = RN [i] + asRomanNumerals;
                break;
            case 2 :
                asRomanNumerals = RN [i] + RN [i] + asRomanNumerals;
                break;
            case 3 :
                asRomanNumerals = RN [i] + RN [i] + RN [i] + asRomanNumerals;
                break;
            case 4 :
                asRomanNumerals = RN [i] + RN [i + 1] + asRomanNumerals;
                break;
            case 5 :
                asRomanNumerals = RN [i + 1] + asRomanNumerals;
                break;
            case 6 :
                asRomanNumerals = RN [i + 1] + RN [i] + asRomanNumerals;
                break;
            case 7 :
                asRomanNumerals = RN [i + 1] + RN [i] + RN [i] + asRomanNumerals;
                break;
            case 8 :
                asRomanNumerals = RN [i + 1] + RN [i] + RN [i] + RN [i] + asRomanNumerals;
                break;
            case 9 :
                asRomanNumerals = RN [i] + RN [i + 2] + asRomanNumerals;
                break;
        }
        number = (int) number / 10;
        i += 2;
    }
    System.out.println (asRomanNumerals);
}
----------------------------------------

 public static void main (String [] args) {
    int number = 2345;
    number = Math.min (3999, Math.max (1, number));
    String asRomanNumerals = "";
    String [] RN = {"I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M"};
    while (number > 0) {
        int remainder = number % 10;
        int pos = findPosition(remainder);
        asRomanNumerals = repeat(RN[pos], remainder/5) + asRomanNumerals;
        number /= 10;
    }
    System.out.println(asRomanNumerals);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
42
5
Gpt3D_Clone42_5.java 1 41
Gpt3D_Clone42_5.java 42 56
----------------------------------------

public static void main (String [] args) {
    int number = 2345;
    number = Math.min (3999, Math.max (1, number));
    String asRomanNumerals = "";
    String [] RN = {"I", "V", "X", "L", "C", "D", "M"};
    int i = 0;
    while (number > 0) {
        switch (number % 10) {
            case 1 :
                asRomanNumerals = RN [i] + asRomanNumerals;
                break;
            case 2 :
                asRomanNumerals = RN [i] + RN [i] + asRomanNumerals;
                break;
            case 3 :
                asRomanNumerals = RN [i] + RN [i] + RN [i] + asRomanNumerals;
                break;
            case 4 :
                asRomanNumerals = RN [i] + RN [i + 1] + asRomanNumerals;
                break;
            case 5 :
                asRomanNumerals = RN [i + 1] + asRomanNumerals;
                break;
            case 6 :
                asRomanNumerals = RN [i + 1] + RN [i] + asRomanNumerals;
                break;
            case 7 :
                asRomanNumerals = RN [i + 1] + RN [i] + RN [i] + asRomanNumerals;
                break;
            case 8 :
                asRomanNumerals = RN [i + 1] + RN [i] + RN [i] + RN [i] + asRomanNumerals;
                break;
            case 9 :
                asRomanNumerals = RN [i] + RN [i + 2] + asRomanNumerals;
                break;
        }
        number = (int) number / 10;
        i += 2;
    }
    System.out.println (asRomanNumerals);
}
----------------------------------------

 public static void main (String [] args) {
    int number = 2345;
    number = Math.min (3999, Math.max (1, number));
    String asRomanNumerals = "";
    String [] RN = {"I", "V", "X", "L", "C", "D", "M"};
    while (number > 0) {
        int remainder = number % 10;
        int i = findPosition(remainder);
        asRomanNumerals = repeat(RN[i], remainder) + asRomanNumerals;
        number /= 10;
    }
    System.out.println(asRomanNumerals);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
430
0
Gpt3D_Clone430_0.java 1 25
Gpt3D_Clone430_0.java 26 53
----------------------------------------

public String getName (String value) {
    StringBuilder buffer = new StringBuilder ();
    boolean tensFound = false;
    int number;
    if (value.length () > 3) {
        number = Integer.valueOf (value.substring (value.length () - 3), 10);
    } else {
        number = Integer.valueOf (value, 10);
    }
    number %= 100;
    if (number >= 20) {
        buffer.append (TOKENS [(number / 10) - 2]);
        number %= 10;
        tensFound = true;
    } else {
        number %= 20;
    }
    if (number != 0) {
        if (tensFound) {
            buffer.append (UNION_SEPARATOR);
        }
        buffer.append (unitProcessor.getName (number));
    }
    return buffer.toString ();
}
----------------------------------------

 public String getName (String value) {
    StringBuilder buffer = new StringBuilder ();
    int number;
    if (value.length () > 3) {
        number = Integer.valueOf (value.substring (value.length () - 3), 10);
    } else {
        number = Integer.valueOf (value, 10);
    }
    int hundreds = number / 100;
    int tens = (number % 100) / 10;
    int units = number % 10;
    if (hundreds > 0) {
        buffer.append(TOKENS[hundreds - 2]);
        buffer.append(UNION_SEPARATOR);
    }
    if (tens > 0) {
        buffer.append(TOKENS[tens - 2]);
    }
    if (tens > 0 && tens%10 > 0 || tens == 2) {
        buffer.append(UNION_SEPARATOR);
    }
    if (units > 0) {
        buffer.append(unitProcessor.getName (units));
    }
    return buffer.toString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
430
1
Gpt3D_Clone430_1.java 1 25
Gpt3D_Clone430_1.java 26 48
----------------------------------------

public String getName (String value) {
    StringBuilder buffer = new StringBuilder ();
    boolean tensFound = false;
    int number;
    if (value.length () > 3) {
        number = Integer.valueOf (value.substring (value.length () - 3), 10);
    } else {
        number = Integer.valueOf (value, 10);
    }
    number %= 100;
    if (number >= 20) {
        buffer.append (TOKENS [(number / 10) - 2]);
        number %= 10;
        tensFound = true;
    } else {
        number %= 20;
    }
    if (number != 0) {
        if (tensFound) {
            buffer.append (UNION_SEPARATOR);
        }
        buffer.append (unitProcessor.getName (number));
    }
    return buffer.toString ();
}
----------------------------------------

 public String getName (String value) {
    StringBuilder buffer = new StringBuilder ();
    int number;
    if (value.length () > 3) {
        number = Integer.valueOf (value.substring (value.length () - 3), 10);
    } else {
        number = Integer.valueOf (value, 10);
    }
    int tenths = number / 10;
    int units = number % 10;
    if (tenths > 1) {
        buffer.append(TOKENS[tenths - 2]);
    }
    if (tenths > 1 && units > 0) {
        buffer.append(UNION_SEPARATOR);
    }
    if (units > 0) {
        buffer.append(unitProcessor.getName (units));
    }
    return buffer.toString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
430
2
Gpt3D_Clone430_2.java 1 25
Gpt3D_Clone430_2.java 26 50
----------------------------------------

public String getName (String value) {
    StringBuilder buffer = new StringBuilder ();
    boolean tensFound = false;
    int number;
    if (value.length () > 3) {
        number = Integer.valueOf (value.substring (value.length () - 3), 10);
    } else {
        number = Integer.valueOf (value, 10);
    }
    number %= 100;
    if (number >= 20) {
        buffer.append (TOKENS [(number / 10) - 2]);
        number %= 10;
        tensFound = true;
    } else {
        number %= 20;
    }
    if (number != 0) {
        if (tensFound) {
            buffer.append (UNION_SEPARATOR);
        }
        buffer.append (unitProcessor.getName (number));
    }
    return buffer.toString ();
}
----------------------------------------

 public String getName (String value) {
    int number;
    if (value.length() > 3) {
        number = Integer.parseInt(value.substring(value.length() - 3), 10);
    } else {
        number = Integer.parseInt(value, 10);
    }
    int tens = number / 10;
    int unit = number % 10;
    StringBuilder buffer = new StringBuilder();
    if (tens > 1) {
        buffer.append(TOKENS[tens - 2]);
        if (tens % 10 != 0 && unit > 0) {
            buffer.append(UNION_SEPARATOR);
        }
    }
    if (unit > 0) {
        buffer.append(unitProcessor.getName(unit));
    }
    return buffer.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
430
4
Gpt3D_Clone430_4.java 1 25
Gpt3D_Clone430_4.java 26 49
----------------------------------------

public String getName (String value) {
    StringBuilder buffer = new StringBuilder ();
    boolean tensFound = false;
    int number;
    if (value.length () > 3) {
        number = Integer.valueOf (value.substring (value.length () - 3), 10);
    } else {
        number = Integer.valueOf (value, 10);
    }
    number %= 100;
    if (number >= 20) {
        buffer.append (TOKENS [(number / 10) - 2]);
        number %= 10;
        tensFound = true;
    } else {
        number %= 20;
    }
    if (number != 0) {
        if (tensFound) {
            buffer.append (UNION_SEPARATOR);
        }
        buffer.append (unitProcessor.getName (number));
    }
    return buffer.toString ();
}
----------------------------------------

 public String getName (String value) {
    int number;
    if (value.length () > 3) {
        number = Integer.parseInt (value.substring (value.length () - 3), 10);
    } else {
        number = Integer.parseInt (value, 10);
    }
    int tens = (number / 10) - 2;
    int units = number % 10;
    StringBuilder buffer = new StringBuilder(); 
 
    if (tens > 0) {
        buffer.append(TOKENS [tens]);
    }
    if (units > 0 && tens > 0) {
        buffer.append(UNION_SEPARATOR);
    }
    if (units > 0) {
        buffer.append(unitProcessor.getName (units));
    }
    return buffer.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
430
5
Gpt3D_Clone430_5.java 1 25
Gpt3D_Clone430_5.java 26 50
----------------------------------------

public String getName (String value) {
    StringBuilder buffer = new StringBuilder ();
    boolean tensFound = false;
    int number;
    if (value.length () > 3) {
        number = Integer.valueOf (value.substring (value.length () - 3), 10);
    } else {
        number = Integer.valueOf (value, 10);
    }
    number %= 100;
    if (number >= 20) {
        buffer.append (TOKENS [(number / 10) - 2]);
        number %= 10;
        tensFound = true;
    } else {
        number %= 20;
    }
    if (number != 0) {
        if (tensFound) {
            buffer.append (UNION_SEPARATOR);
        }
        buffer.append (unitProcessor.getName (number));
    }
    return buffer.toString ();
}
----------------------------------------

 public String getName (String value) {
    int number;
    if (value.length() > 3) {
        number = Integer.parseInt(value.substring(value.length() - 3), 10);
    } else {
        number = Integer.parseInt(value, 10);
    }
    int tens = number / 10;
    int units = number % 10;
    StringBuilder buffer = new StringBuilder();
    if (tens > 1) {
        buffer.append(TOKENS[tens - 2]);
    }
    if (tens % 10 != 0 && units != 0) {
        buffer.append(UNION_SEPARATOR);
    }
    if (units != 0) {
        buffer.append(unitProcessor.getName(units));
    }
    return buffer.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
430
6
Gpt3D_Clone430_6.java 1 25
Gpt3D_Clone430_6.java 26 50
----------------------------------------

public String getName (String value) {
    StringBuilder buffer = new StringBuilder ();
    boolean tensFound = false;
    int number;
    if (value.length () > 3) {
        number = Integer.valueOf (value.substring (value.length () - 3), 10);
    } else {
        number = Integer.valueOf (value, 10);
    }
    number %= 100;
    if (number >= 20) {
        buffer.append (TOKENS [(number / 10) - 2]);
        number %= 10;
        tensFound = true;
    } else {
        number %= 20;
    }
    if (number != 0) {
        if (tensFound) {
            buffer.append (UNION_SEPARATOR);
        }
        buffer.append (unitProcessor.getName (number));
    }
    return buffer.toString ();
}
----------------------------------------

 public String getName (String value) {
    int number;
    if (value.length () > 3) {
        number = Integer.valueOf (value.substring (value.length () - 3), 10);
    } else {
        number = Integer.valueOf (value, 10);
    }
 
    int tenths = number / 10;
    int units = number % 10;
 
    StringBuilder buffer = new StringBuilder();
    if (tenths > 1) {
        buffer.append(TOKENS[tenths - 2]);
        if ((tenths == 2 || tens > 2) && units > 0) {
            buffer.append(UNION_SEPARATOR);
        }
    }
    if (units > 0) {
        buffer.append(unitProcessor.getName (units));
    }
    return buffer.toString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
430
7
Gpt3D_Clone430_7.java 1 25
Gpt3D_Clone430_7.java 26 48
----------------------------------------

public String getName (String value) {
    StringBuilder buffer = new StringBuilder ();
    boolean tensFound = false;
    int number;
    if (value.length () > 3) {
        number = Integer.valueOf (value.substring (value.length () - 3), 10);
    } else {
        number = Integer.valueOf (value, 10);
    }
    number %= 100;
    if (number >= 20) {
        buffer.append (TOKENS [(number / 10) - 2]);
        number %= 10;
        tensFound = true;
    } else {
        number %= 20;
    }
    if (number != 0) {
        if (tensFound) {
            buffer.append (UNION_SEPARATOR);
        }
        buffer.append (unitProcessor.getName (number));
    }
    return buffer.toString ();
}
----------------------------------------

 public String getName (String value) {
    StringBuilder buffer = new StringBuilder ();
    int number;
    if (value.length () > 3) {
        number = Integer.valueOf (value.substring (value.length () - 3), 10);
    } else {
        number = Integer.valueOf (value, 10);
    }
    int tens = number / 10;
    int units = number % 10;
    if (tens > 1) {
        buffer.append(TOKENS[tens - 2]);
    }
    if ((tens > 2 || tens == 2) && tens%10 > 0) {
        buffer.append(UNION_SEPARATOR);
    }
    if (units > 0) {
        buffer.append(unitProcessor.getName (units));
    }
    return buffer.toString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
430
8
Gpt3D_Clone430_8.java 1 25
Gpt3D_Clone430_8.java 26 49
----------------------------------------

public String getName (String value) {
    StringBuilder buffer = new StringBuilder ();
    boolean tensFound = false;
    int number;
    if (value.length () > 3) {
        number = Integer.valueOf (value.substring (value.length () - 3), 10);
    } else {
        number = Integer.valueOf (value, 10);
    }
    number %= 100;
    if (number >= 20) {
        buffer.append (TOKENS [(number / 10) - 2]);
        number %= 10;
        tensFound = true;
    } else {
        number %= 20;
    }
    if (number != 0) {
        if (tensFound) {
            buffer.append (UNION_SEPARATOR);
        }
        buffer.append (unitProcessor.getName (number));
    }
    return buffer.toString ();
}
----------------------------------------

 public String getName (String value) {
     StringBuilder buffer = new StringBuilder ();
     int number;
     if (value.length () > 3) {
         number = Integer.valueOf (value.substring (value.length () - 3), 10);
     } else {
         number = Integer.valueOf (value, 10);
     }
     String tensName = unitProcessor.getName (number / 10 - 2);
     String unitName = unitProcessor.getName (number % 10);
 
     if (!tensName.isEmpty()) { 
         buffer.append(tensName);
     } 
     if (!unitName.isEmpty()) { 
         if (!tensName.isEmpty()) {
             buffer.append(UNION_SEPARATOR);
         }
         buffer.append(unitName);
     } 
     return buffer.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
430
9
Gpt3D_Clone430_9.java 1 25
Gpt3D_Clone430_9.java 26 50
----------------------------------------

public String getName (String value) {
    StringBuilder buffer = new StringBuilder ();
    boolean tensFound = false;
    int number;
    if (value.length () > 3) {
        number = Integer.valueOf (value.substring (value.length () - 3), 10);
    } else {
        number = Integer.valueOf (value, 10);
    }
    number %= 100;
    if (number >= 20) {
        buffer.append (TOKENS [(number / 10) - 2]);
        number %= 10;
        tensFound = true;
    } else {
        number %= 20;
    }
    if (number != 0) {
        if (tensFound) {
            buffer.append (UNION_SEPARATOR);
        }
        buffer.append (unitProcessor.getName (number));
    }
    return buffer.toString ();
}
----------------------------------------

 public String getName (String value) {
    int number;
    if (value.length () > 3) {
        number = Integer.parseInt (value.substring (value.length () - 3), 10);
    } else {
        number = Integer.parseInt (value, 10);
    }
 
    int tenths = number / 10;
    int units = number % 10;
 
    StringBuilder buffer = new StringBuilder();
    if (tenths > 1) {
        buffer.append(TOKENS[tenths - 2]);
        if (tenths % 10 != 0 && units > 0) {
            buffer.append(UNION_SEPARATOR);
        }
    }
    if (units > 0) {
        buffer.append(unitProcessor.getName (units));
    }
    return buffer.toString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
433
2
Gpt3D_Clone433_2.java 1 32
Gpt3D_Clone433_2.java 33 68
----------------------------------------

public String getName (String value) {
    boolean negative = false;
    if (value.startsWith ("-")) {
        negative = true;
        value = value.substring (1);
    }
    int decimals = value.indexOf (".");
    String decimalValue = null;
    if (0 <= decimals) {
        decimalValue = value.substring (decimals + 1);
        value = value.substring (0, decimals);
    }
    String name = processor.getName (value);
    if ("".equals (name)) {
        name = ZERO_TOKEN;
    } else if (negative) {
        name = MINUS.concat (SEPARATOR).concat (name);
    }
    if (! (null == decimalValue || "".equals (decimalValue))) {
        String zeroDecimalValue = "";
        for (int i = 0;
        i < decimalValue.length (); i ++) {
            zeroDecimalValue = zeroDecimalValue + "0";
        }
        if (decimalValue.equals (zeroDecimalValue)) {
            name = name.concat (SEPARATOR).concat (UNION_AND).concat (SEPARATOR).concat ("zero").concat (SEPARATOR).concat (SCALE.getName (- decimalValue.length ()));
        } else {
            name = name.concat (SEPARATOR).concat (UNION_AND).concat (SEPARATOR).concat (processor.getName (decimalValue)).concat (SEPARATOR).concat (SCALE.getName (- decimalValue.length ()));
        }
    }
    return name;
}
----------------------------------------

 public static String getName (String fetchvalue) {
    boolean negative = false;
    int decimals = -1;
    String decimalValue = null;
    if(fetchvalue.startsWith("-")){
        negative = true;
        fetchvalue = fetchvalue.substring(1);
    }
    if(fetchvalue.contains(".")){
        decimals = fetchvalue.indexOf(".");
        decimalValue = fetchvalue.substring(decimals + 1);
        fetchvalue = fetchvalue.substring(0, decimals);
    }
    String name = processor.getName(fetchvalue);
    if("".equals(name))
        name = ZERO_TOKEN;
    else if(negative)
        name = MINUS + SEPARATOR + name;
    if(decimalValue != null && ! decimalValue.equals("")){
        String zeroDecimalValue = "";
        for(int i=0; i<decimalValue.length(); i++){
            zeroDecimalValue += "0";
        }
        if(decimalValue.equals(zeroDecimalValue))
            name += SEPARATOR + UNION_AND + SEPARATOR + "zero"
                        + SEPARATOR + SCALE.getName(-decimalValue.length());
        else
            name += SEPARATOR + UNION_AND + SEPARATOR + processor.getName(decimalValue)
                        + SEPARATOR + SCALE.getName(-decimalValue.length());
    }
    return name;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
434
0
Gpt3D_Clone434_0.java 1 23
Gpt3D_Clone434_0.java 24 139
----------------------------------------

public static void main (String [] args) {
    System.out.println ("Enter Number to convert into words");
    Scanner sc = new Scanner (System.in);
    long num = sc.nextInt ();
    int rem = 0;
    int i = 0;
    while (num > 0) {
        if (i == 0) {
            rem = (int) (num % 1000);
            printText (rem);
            num = num / 1000;
            i ++;
        } else if (num > 0) {
            rem = (int) (num % 100);
            if (rem > 0) text = denom.values () [i - 1] + " " + text;
            printText (rem);
            num = num / 100;
            i ++;
        }
    }
    if (i > 0) System.out.println (text);
    else System.out.println ("Zero");
}
----------------------------------------

 public static void main (String [] args) { 
    System.out.println ("Enter a number to convert into words");  
    Scanner sc = new Scanner (System.in);  
    int number = sc.nextInt ();  
    int rem = 0;  
    int n = number;  
    int count = 0;  
    String convertedText = "";  
  
    while (n != 0) {  
        rem = n % 10;  
        switch (count) {  
            case 0:  
                switch (rem) {  
                    case 1:  
                        convertedText = "One " + convertedText;  
                        break;  
                    case 2:  
                        convertedText = "Two " + convertedText;  
                        break;  
                    case 3:  
                        convertedText = "Three " + convertedText;  
                        break;  
                    case 4:  
                        convertedText = "Four " + convertedText;  
                        break;  
                    case 5:  
                        convertedText = "Five " + convertedText;  
                        break;  
                    case 6:  
                        convertedText = "Six " + convertedText;  
                        break;  
                    case 7:  
                        convertedText = "Seven " + convertedText;  
                        break;  
                    case 8:  
                        convertedText = "Eight " + convertedText;  
                        break;  
                    case 9:  
                        convertedText = "Nine " + convertedText;  
                        break;  
                }  
                break;  
            case 1:  
                switch (rem) {  
                    case 1:  
                        convertedText = "Eleven " + convertedText;  
                        break;  
                    case 2:  
                        convertedText = "Twelve " + convertedText;  
                        break;  
                    case 3:  
                        convertedText = "Thirteen " + convertedText;  
                        break;  
                    case 4:  
                        convertedText = "Fourteen " + convertedText;  
                        break;  
                    case 5:  
                        convertedText = "Fifteen " + convertedText;  
                        break;  
                    case 6:  
                        convertedText = "Sixteen " + convertedText;  
                        break;  
                    case 7:  
                        convertedText = "Seventeen " + convertedText;  
                        break;  
                    case 8:  
                        convertedText = "Eighteen " + convertedText;  
                        break;  
                    case 9:  
                        convertedText = "Nineteen " + convertedText;  
                        break;  
                }  
                break;  
            case 2:  
                switch (rem) {  
                    case 1:  
                        convertedText = "One Hundred " + convertedText;  
                        break;  
                    case 2:  
                        convertedText = "Two Hundred " + convertedText;  
                        break;  
                    case 3:  
                        convertedText = "Three Hundred " + convertedText;  
                        break;  
                    case 4:  
                        convertedText = "Four Hundred " + convertedText;  
                        break;  
                    case 5:  
                        convertedText = "Five Hundred " + convertedText;  
                        break;  
                    case 6:  
                        convertedText = "Six Hundred " + convertedText;  
                        break;  
                    case 7:  
                        convertedText = "Seven Hundred " + convertedText;  
                        break;  
                    case 8:  
                        convertedText = "Eight Hundred " + convertedText;  
                        break;  
                    case 9:  
                        convertedText = "Nine Hundred " + convertedText;  
                        break;  
                }  
                break;  
        }  
        n = n / 10;  
        count++;  
    }  
    if (number == 0)  
        System.out.println ("Zero");  
    else  
        System.out.println (convertedText);  
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
434
1
Gpt3D_Clone434_1.java 1 23
Gpt3D_Clone434_1.java 24 139
----------------------------------------

public static void main (String [] args) {
    System.out.println ("Enter Number to convert into words");
    Scanner sc = new Scanner (System.in);
    long num = sc.nextInt ();
    int rem = 0;
    int i = 0;
    while (num > 0) {
        if (i == 0) {
            rem = (int) (num % 1000);
            printText (rem);
            num = num / 1000;
            i ++;
        } else if (num > 0) {
            rem = (int) (num % 100);
            if (rem > 0) text = denom.values () [i - 1] + " " + text;
            printText (rem);
            num = num / 100;
            i ++;
        }
    }
    if (i > 0) System.out.println (text);
    else System.out.println ("Zero");
}
----------------------------------------

 public static void main (String [] args) { 
    System.out.println ("Enter a number to convert into words");  
    Scanner sc = new Scanner (System.in);  
    int number = sc.nextInt ();  
    int rem = 0;  
    int n = number;  
    int count = 0;  
    String convertedText = "";  
  
    while (n != 0) {  
        rem = n % 10;  
        switch (count) {  
            case 0:  
                switch (rem) {  
                    case 1:  
                        convertedText = "One " + convertedText;  
                        break;  
                    case 2:  
                        convertedText = "Two " + convertedText;  
                        break;  
                    case 3:  
                        convertedText = "Three " + convertedText;  
                        break;  
                    case 4:  
                        convertedText = "Four " + convertedText;  
                        break;  
                    case 5:  
                        convertedText = "Five " + convertedText;  
                        break;  
                    case 6:  
                        convertedText = "Six " + convertedText;  
                        break;  
                    case 7:  
                        convertedText = "Seven " + convertedText;  
                        break;  
                    case 8:  
                        convertedText = "Eight " + convertedText;  
                        break;  
                    case 9:  
                        convertedText = "Nine " + convertedText;  
                        break;  
                }  
                break;  
            case 1:  
                switch (rem) {  
                    case 1:  
                        convertedText = "Ten " + convertedText;  
                        break;  
                    case 2:  
                        convertedText = "Twenty " + convertedText;  
                        break;  
                    case 3:  
                        convertedText = "Thirty " + convertedText;  
                        break;  
                    case 4:  
                        convertedText = "Forty " + convertedText;  
                        break;  
                    case 5:  
                        convertedText = "Fifty " + convertedText;  
                        break;  
                    case 6:  
                        convertedText = "Sixty " + convertedText;  
                        break;  
                    case 7:  
                        convertedText = "Seventy " + convertedText;  
                        break;  
                    case 8:  
                        convertedText = "Eighty " + convertedText;  
                        break;  
                    case 9:  
                        convertedText = "Ninety " + convertedText;  
                        break;  
                }  
                break;  
            case 2:  
                switch (rem) {  
                    case 1:  
                        convertedText = "One Hundred " + convertedText;  
                        break;  
                    case 2:  
                        convertedText = "Two Hundred " + convertedText;  
                        break;  
                    case 3:  
                        convertedText = "Three Hundred " + convertedText;  
                        break;  
                    case 4:  
                        convertedText = "Four Hundred " + convertedText;  
                        break;  
                    case 5:  
                        convertedText = "Five Hundred " + convertedText;  
                        break;  
                    case 6:  
                        convertedText = "Six Hundred " + convertedText;  
                        break;  
                    case 7:  
                        convertedText = "Seven Hundred " + convertedText;  
                        break;  
                    case 8:  
                        convertedText = "Eight Hundred " + convertedText;  
                        break;  
                    case 9:  
                        convertedText = "Nine Hundred " + convertedText;  
                        break;  
                }  
                break;  
        }  
        n = n / 10;  
        count++;  
    }  
    if (number == 0)  
        System.out.println ("Zero");  
    else  
        System.out.println (convertedText);  
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
442
0
Gpt3D_Clone442_0.java 1 22
Gpt3D_Clone442_0.java 23 47
----------------------------------------

public static void main (String...args) {
    processor = new DefaultProcessor ();
    long [] values = new long [] {0, 4, 10, 12, 100, 108, 299, 1000, 1003, 2040, 45213, 100000, 100005, 100010, 202020, 202022, 999999, 1000000, 1000001, 10000000, 10000007, 99999999, Long.MAX_VALUE, Long.MIN_VALUE};
    String [] strValues = new String [] {"0", "1.30", "0001.00", "3.141592"};
    for (long val : values) {
        System.out.println (val + " = " + processor.getName (val));
    }
    for (String strVal : strValues) {
        System.out.println (strVal + " = " + processor.getName (strVal));
    }
    StringBuilder bigNumber = new StringBuilder ();
    for (int d = 0;
    d < 66; d ++) {
        bigNumber.append ((char) ((Math.random () * 10) + '0'));
    }
    bigNumber.append (".");
    for (int d = 0;
    d < 26; d ++) {
        bigNumber.append ((char) ((Math.random () * 10) + '0'));
    }
    System.out.println (bigNumber.toString () + " = " + processor.getName (bigNumber.toString ()));
}
----------------------------------------

 public static void main(String... args) {
    processor = new DefaultProcessor();
    long[] values = {0, 4, 10, 12, 100, 108, 299, 1000, 1003, 2040, 45213, 100000, 100005, 100010, 202020, 202022, 999999, 1000000, 1000001, 10000000, 10000007, 99999999, Long.MAX_VALUE, Long.MIN_VALUE};
    String[] strValues = {"0", "1.30", "0001.00", "3.141592"};
    for (long val : values) {
        String valString = String.valueOf(val);
        System.out.printf("%s = %s\n", valString, processor.getName(valString));
    }
    for (String strVal : strValues) {
        System.out.printf("%s = %s\n", strVal, processor.getName(strVal));
    }
    StringBuilder bigNumber = new StringBuilder();
    for (int d = 0; d < 66; d++) {
        int randomNumber = (int)(Math.random() * 10) + 48;
        bigNumber.append((char) randomNumber);
    }
    bigNumber.append(".");
    for (int d = 0; d < 26; d++) {
        int randomNumber = (int)(Math.random() * 10) + 48;
        bigNumber.append((char) randomNumber);
    }
    System.out.printf("%s = %s\n", bigNumber.toString(), processor.getName(bigNumber.toString()));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
448
0
Gpt3D_Clone448_0.java 1 32
Gpt3D_Clone448_0.java 33 77
----------------------------------------

public String getName (String value) {
    boolean negative = false;
    if (value.startsWith ("-")) {
        negative = true;
        value = value.substring (1);
    }
    int decimals = value.indexOf (".");
    String decimalValue = null;
    if (0 <= decimals) {
        decimalValue = value.substring (decimals + 1);
        value = value.substring (0, decimals);
    }
    String name = processor.getName (value);
    if ("".equals (name)) {
        name = ZERO_TOKEN;
    } else if (negative) {
        name = MINUS.concat (SEPARATOR).concat (name);
    }
    if (! (null == decimalValue || "".equals (decimalValue))) {
        String zeroDecimalValue = "";
        for (int i = 0;
        i < decimalValue.length (); i ++) {
            zeroDecimalValue = zeroDecimalValue + "0";
        }
        if (decimalValue.equals (zeroDecimalValue)) {
            name = name.concat (SEPARATOR).concat (UNION_AND).concat (SEPARATOR).concat ("zero").concat (SEPARATOR).concat (SCALE.getName (- decimalValue.length ()));
        } else {
            name = name.concat (SEPARATOR).concat (UNION_AND).concat (SEPARATOR).concat (processor.getName (decimalValue)).concat (SEPARATOR).concat (SCALE.getName (- decimalValue.length ()));
        }
    }
    return name;
}
----------------------------------------

 public String getName (String value) {
   String name;
   boolean negative = false;
   
   int decimals = value.indexOf(".");
   if (decimals > 0) 
   {
	   String decimalValue = value.substring(decimals + 1);
	   value = value.substring(0, decimals);
	   name = processor.getName(value);
	   
	   if ("".equals(name)) 
		   name = ZERO_TOKEN;
	   else if (negative) 
		   name = MINUS.concat(SEPARATOR).concat(name);
	   
	   if (!("".equals(decimalValue)))
	   {
		   String zeroDecimalValue = "";
		   for (int i = 0; i < decimalValue.length(); i++)
		   {
			   zeroDecimalValue = zeroDecimalValue + "0";
		   }
		   if (decimalValue == zeroDecimalValue)
			   name = name.concat(SEPARATOR).concat(UNION_AND).concat(SEPARATOR).concat("zero").concat(SEPARATOR).concat(SCALE.getName(-decimalValue.length()));
		   else 
			   name = name.concat(SEPARATOR).concat(UNION_AND).concat(SEPARATOR).concat(processor.getName(decimalValue)).concat(SEPARATOR).concat(SCALE.getName(-decimalValue.length()));
	   }
   }
   else 
   {
	   negative = (value.charAt(0) == '-');
	   name = processor.getName(value);
	   
	   if ("".equals(name))
		   name = ZERO_TOKEN;
	   else if (negative) 
		   name = MINUS.concat(SEPARATOR).concat(name);
   }
   
   return name;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
44
0
Gpt3D_Clone44_0.java 1 23
Gpt3D_Clone44_0.java 24 49
----------------------------------------

public static String output (String [] fourLetter, String [] fiveLetter, String [] sixLetter) {
    String answer = "";
    int count = 1;
    for (int i = 0;
    i < Math.max (Math.max (fourLetter.length, fiveLetter.length), sixLetter.length); i ++) {
        if (sixLetter.length > i) {
            answer += sixLetter [i] + " ";
        }
        if (fiveLetter.length > i) {
            answer += fiveLetter [i] + " ";
        }
        if (fourLetter.length > i) {
            answer += fourLetter [i];
        }
        answer += "\n";
        for (int j = 0;
        j < count; j ++) {
            answer += "\t";
        }
        count ++;
    }
    return answer;
}
----------------------------------------

    public static String output(String[] fourLetter, String[] fiveLetter, String[] sixLetter) {
        StringBuilder sb = new StringBuilder();
        int tabCount = 1;
        int maxLength = Math.max (Math.max (fourLetter.length, fiveLetter.length), sixLetter.length);
        for (int i = 0; i < maxLength; i++) {
            if (sixLetter.length > i) {
                sb.append (sixLetter[i]);
            }
            if (fiveLetter.length > i) {
                sb.append (" ");
                sb.append (fiveLetter[i]);
            }
            if (fourLetter.length > i) {
                sb.append (" ");
                sb.append (fourLetter[i]);
            }
            for (int j = 0; j < tabCount; j++) {
                sb.append ("\t");
            }
            tabCount++;
            sb.append ("\n");
        }
        return sb.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
452
0
Gpt3D_Clone452_0.java 1 15
Gpt3D_Clone452_0.java 16 49
----------------------------------------

public static void main (String [] args) {
    int len = args.length;
    if (len == 0) {
        sopl ("\n\tUsage: java echo <args:String[]>");
        System.exit (0);
    }
    sop ("\n\t");
    for (int i = 0;
    i < len; i ++) {
        sop (args [i] + " ");
    }
    sop ("\n\t");
    while (len > 0) sop (args [args.length - len --] + " ");
    sopl ("");
}
----------------------------------------

 public static void main (String [] args) {
    int len = args.length;
    if (len == 0) {
        sopl ("\n\tUsage: java echo <args:String[]>");
        System.exit (0);
    }
    sopl("\tEchoing inputs: \n");
    int times = len / 10;
    int remainder = len % 10;
    for (int i = 0; i < times; i++){
        for (int j = 0; j < 10; j++){
            sop(args[i * 10 + j] + " ");
        }
        sopl();
    }
    for (int i = 0; i < remainder; i++){
        sop(args[times*10 + i] + " ");
    }
    sopl("\n\tReversing the order: \n");
    times = len / 10;
    remainder = len % 10;
    for (int i = times; i > 0; i--){
        for (int j = 0; j < 10; j++){
            sop(args[(i-1) * 10 + j] + " ");
        }
        sopl();
    }
    for (int i = remainder-1; i >= 0; i--){
        sop(args[times*10 + i] + " ");
    }
    sopl();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
452
1
Gpt3D_Clone452_1.java 1 15
Gpt3D_Clone452_1.java 16 45
----------------------------------------

public static void main (String [] args) {
    int len = args.length;
    if (len == 0) {
        sopl ("\n\tUsage: java echo <args:String[]>");
        System.exit (0);
    }
    sop ("\n\t");
    for (int i = 0;
    i < len; i ++) {
        sop (args [i] + " ");
    }
    sop ("\n\t");
    while (len > 0) sop (args [args.length - len --] + " ");
    sopl ("");
}
----------------------------------------

 public static void main (String [] args) {
    int len = args.length;
    if (len == 0) {
        sopl ("\n\tUsage: java echo <args:String[]>");
        System.exit (0);
    }
    sopl("\n\tEchoing inputs: \n");
    int i = 0;
    while (i < len) {
        sop(args[i] + " ");
        i++;
        if (i % 10 == 0) {
            sopl();
        }
    }
    sopl();
    sopl("\n\tReversing the order: \n");
    for (int j = len-1; j >= 0; j--) {
        sop(args[j] + " ");
        if ((len-j)%10 == 0){
            sopl();
        }
    }
    if (len % 10 != 0){
        sopl();
    }
    sopl("");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
452
2
Gpt3D_Clone452_2.java 1 15
Gpt3D_Clone452_2.java 16 43
----------------------------------------

public static void main (String [] args) {
    int len = args.length;
    if (len == 0) {
        sopl ("\n\tUsage: java echo <args:String[]>");
        System.exit (0);
    }
    sop ("\n\t");
    for (int i = 0;
    i < len; i ++) {
        sop (args [i] + " ");
    }
    sop ("\n\t");
    while (len > 0) sop (args [args.length - len --] + " ");
    sopl ("");
}
----------------------------------------

  public static void main (String [] args) {
    int len = args.length;
    if (len == 0) {
        sopl ("\n\tUsage: java echo <args:String[]>");
        System.exit (0);
    }
    sopl ("\n\tEchoing inputs: \n");
    for (int i = 0; i < len; i ++) {
        if (i == len - 1) {
            sopl (args [i]);
        } else {
            sop (args [i] + " ");
        }
    }
    sopl ("\n\tReversing the order: \n");
    int j = 0;
    for (int i = len - 1; i >= 0; i --) {
        if (j == len - 1) {
            sopl (args [i]);
        } else {
            sop (args [i] + " ");
        }
        j++;
    }
    sopl ("");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
452
3
Gpt3D_Clone452_3.java 1 15
Gpt3D_Clone452_3.java 16 45
----------------------------------------

public static void main (String [] args) {
    int len = args.length;
    if (len == 0) {
        sopl ("\n\tUsage: java echo <args:String[]>");
        System.exit (0);
    }
    sop ("\n\t");
    for (int i = 0;
    i < len; i ++) {
        sop (args [i] + " ");
    }
    sop ("\n\t");
    while (len > 0) sop (args [args.length - len --] + " ");
    sopl ("");
}
----------------------------------------

 public static void main (String [] args) {
    int len = args.length;
    if (len == 0) {
        sopl ("\n\tUsage: java echo <args:String[]>");
        System.exit (0);
    }
    sopl("\n\tEchoing inputs: \n");
    for (int i = 0; i < len; i++){
        System.out.printf("\t%-15s", args[i]);
        if ((i+1)%3 == 0){
            System.out.println();
        }
    }
    if (len % 3 != 0){
        System.out.println();
    }
    sopl("\n\tReversing the order: \n");
    for (int j = len-1; j >= 0; j--) {
        System.out.printf("\t%-15s", args[j]);
        if ((len-j)%3 == 0){
            System.out.println();
        }
    }
    if (len % 3 != 0) {
        System.out.println();
    }
    sopl("");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
452
4
Gpt3D_Clone452_4.java 1 15
Gpt3D_Clone452_4.java 16 41
----------------------------------------

public static void main (String [] args) {
    int len = args.length;
    if (len == 0) {
        sopl ("\n\tUsage: java echo <args:String[]>");
        System.exit (0);
    }
    sop ("\n\t");
    for (int i = 0;
    i < len; i ++) {
        sop (args [i] + " ");
    }
    sop ("\n\t");
    while (len > 0) sop (args [args.length - len --] + " ");
    sopl ("");
}
----------------------------------------

 public static void main (String [] args) {
    int len = args.length;
    if (len == 0) {
        sopl ("\n\tUsage: java echo <args:String[]>");
        System.exit (0);
    }
    sopl("\n\tEchoing inputs: \n");
    for (int i = 0; i < len; i++) {
        sop(args[i]);
        for (int j = i + 1; j < len; j++) {
            sop(" " + args[j]);
        }
        sopl();
    }
    sopl("\n\tReversing the order: \n");
    for (int i = len-1; i >= 0; i--) {
        sop(args[i]);
        for (int j = i - 1; j >= 0; j--) {
            sop(" " + args[j]);
        }
        sopl();
    }
    sopl("");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
453
0
Gpt3D_Clone453_0.java 1 13
Gpt3D_Clone453_0.java 14 44
----------------------------------------

public static void main (String [] args) {
    int len = args.length;
    if (len <= 0) {
        System.out.println (" ERROR: Please input a value of 1-5");
        System.exit (0);
    }
    int j;
    for (int i = 0;
    i <= len; i ++) {
        for (j = 0; j <= i; j ++) System.out.print ("*");
        System.out.println ("");
    }
}
----------------------------------------

 //using switch-case block
public static void main (String [] args) {
    int len = args.length;
    int j;
     
    if (len <= 0) {
        System.out.println (" ERROR: Please input a value of 1-5");
        System.exit (0);
    }
     
    switch(len) {
        case 1 : 
            System.out.println("*");
            break;
        case 2 :
            System.out.println("* \n**");
            break;
        case 3 :
            System.out.println("* \n** \n***");
            break;
        case 4 :
            System.out.println("* \n** \n*** \n****");
            break;
        case 5 :
            System.out.println("* \n** \n*** \n**** \n*****");
            break;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
453
1
Gpt3D_Clone453_1.java 1 13
Gpt3D_Clone453_1.java 14 41
----------------------------------------

public static void main (String [] args) {
    int len = args.length;
    if (len <= 0) {
        System.out.println (" ERROR: Please input a value of 1-5");
        System.exit (0);
    }
    int j;
    for (int i = 0;
    i <= len; i ++) {
        for (j = 0; j <= i; j ++) System.out.print ("*");
        System.out.println ("");
    }
}
----------------------------------------

 //using loop unrolling
public static void main (String [] args) {
    int len = args.length;
    int j;
    int i;
    if (len <= 0) {
        System.out.println (" ERROR: Please input a value of 1-5");
        System.exit (0);
    }
    if(len >= 1) { 
        System.out.println ("*"); 
    }
    if(len >= 2) { 
        System.out.println ("**"); 
    }
    if(len >= 3) { 
        System.out.println ("***"); 
    }
    if(len >= 4) { 
        System.out.println ("****"); 
    }
    if(len >= 5) { 
        System.out.println ("*****"); 
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
453
2
Gpt3D_Clone453_2.java 1 13
Gpt3D_Clone453_2.java 14 36
----------------------------------------

public static void main (String [] args) {
    int len = args.length;
    if (len <= 0) {
        System.out.println (" ERROR: Please input a value of 1-5");
        System.exit (0);
    }
    int j;
    for (int i = 0;
    i <= len; i ++) {
        for (j = 0; j <= i; j ++) System.out.print ("*");
        System.out.println ("");
    }
}
----------------------------------------

 //using do while loop
public static void main (String [] args) {
    int len = args.length;
    int j;
     
    if (len <= 0) {
        System.out.println (" ERROR: Please input a value of 1-5");
        System.exit (0);
    }
     
    int i = 0;
    do {
       j = 0;
       do {
          System.out.print("*");
          j++;
       }while (j <= i);
       System.out.println("");
       i++;
    }while (i <= len);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
453
3
Gpt3D_Clone453_3.java 1 13
Gpt3D_Clone453_3.java 14 40
----------------------------------------

public static void main (String [] args) {
    int len = args.length;
    if (len <= 0) {
        System.out.println (" ERROR: Please input a value of 1-5");
        System.exit (0);
    }
    int j;
    for (int i = 0;
    i <= len; i ++) {
        for (j = 0; j <= i; j ++) System.out.print ("*");
        System.out.println ("");
    }
}
----------------------------------------

 //using multiple if-else block
public static void main (String [] args) {
    int len = args.length;
    int j;
    if (len <= 0) {
        System.out.println (" ERROR: Please input a value of 1-5");
        System.exit (0);
    }
    if(len == 1) {
        System.out.println("*");
    }
    else if (len == 2) {
        System.out.println("* \n**");
    }
    else if (len == 3) {
        System.out.println("* \n** \n***");
    }
    else if (len == 4) {
        System.out.println("* \n** \n*** \n****");
    }
    else if (len == 5) {
        System.out.println("* \n** \n*** \n**** \n*****");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
453
4
Gpt3D_Clone453_4.java 1 13
Gpt3D_Clone453_4.java 14 39
----------------------------------------

public static void main (String [] args) {
    int len = args.length;
    if (len <= 0) {
        System.out.println (" ERROR: Please input a value of 1-5");
        System.exit (0);
    }
    int j;
    for (int i = 0;
    i <= len; i ++) {
        for (j = 0; j <= i; j ++) System.out.print ("*");
        System.out.println ("");
    }
}
----------------------------------------

  //using if-else-if
public static void main (String [] args) {
    int len = args.length;
     
    if (len <= 0) {
        System.out.println (" ERROR: Please input a value of 1-5");
        System.exit (0);
    }
    else if (len == 1) {
        System.out.println ("*");
    }
    else if (len == 2) {
        System.out.println ("* \n**");
    }
    else if (len == 3) {
        System.out.println ("* \n** \n***");
    }
    else if (len == 4) {
        System.out.println ("* \n** \n*** \n****");
    }
    else if (len == 5) {
        System.out.println ("* \n** \n*** \n**** \n*****");
    }
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
453
5
Gpt3D_Clone453_5.java 1 13
Gpt3D_Clone453_5.java 14 35
----------------------------------------

public static void main (String [] args) {
    int len = args.length;
    if (len <= 0) {
        System.out.println (" ERROR: Please input a value of 1-5");
        System.exit (0);
    }
    int j;
    for (int i = 0;
    i <= len; i ++) {
        for (j = 0; j <= i; j ++) System.out.print ("*");
        System.out.println ("");
    }
}
----------------------------------------

 //using while loop
public static void main (String [] args) {
    int len = args.length;
    int j;
    if (len <= 0) {
        System.out.println (" ERROR: Please input a value of 1-5");
        System.exit (0);
    }
     
    int i = 0;
    while (i <= len) {
        j = 0;
        while (j <= i) {
            System.out.print("*");
            j++;
        }
        System.out.println("");
        i++;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
456
0
Gpt3D_Clone456_0.java 1 15
Gpt3D_Clone456_0.java 16 31
----------------------------------------

public static void main (String [] args) throws InterruptedException {
    BlockingQueue < Object > expensiveObjects = new LinkedBlockingQueue < > ();
    expensiveObjects.put (new Object ());
    expensiveObjects.put (new Object ());
    expensiveObjects.put (new Object ());
    expensiveObjects.put (new Object ());
    ExecutorService executorService = Executors.newFixedThreadPool (4);
    for (int i = 0;
    i < 4; i ++) {
        executorService.execute (new MyRunnable (expensiveObjects));
    }
    executorService.shutdown ();
    executorService.awaitTermination (5, TimeUnit.SECONDS);
    System.out.println ("Final: " + outputCount.get ());
}
----------------------------------------

public static void main (String [] args) throws InterruptedException {
    BlockingQueue < Integer > expensiveObjects = new ArrayBlockingQueue < > (4);
    expensiveObjects.put (1);
    expensiveObjects.put (2);
    expensiveObjects.put (3);
    expensiveObjects.put (4);
    ExecutorService executorService = Executors.newSingleThreadExecutor ();
    for (int i = 0; i < 4; i++) {
        executorService.execute (new MyRunnable (expensiveObjects));
    }
    executorService.shutdown ();
    executorService.awaitTermination (5, TimeUnit.SECONDS);
    System.out.println ("Final: " + outputCount.get ());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
463
0
Gpt3D_Clone463_0.java 1 11
Gpt3D_Clone463_0.java 12 25
----------------------------------------

public String generateRandomPassword (final int length) {
    if (length < 1) {
        throw new IllegalArgumentException ("length must be greater than 0");
    }
    final char [] buf = new char [length];
    for (int idx = 0;
    idx < buf.length; ++ idx) {
        buf [idx] = symbols [RANDOM.nextInt (symbols.length)];
    }
    return shuffle (new String (buf));
}
----------------------------------------

 public String generateRandomPassword (final int length) {
    if (length < 1) {
        throw new IllegalArgumentException ("length must be greater than 0");
    }
    SecureRandom random = new SecureRandom();
    char[] buf = new char[length];
    for (int i = 0; i <buf.length ; i++) {
        int index = random.nextInt(symbols.length);
        buf[i] = symbols[index];
    }
    return new String(buf);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
463
1
Gpt3D_Clone463_1.java 1 11
Gpt3D_Clone463_1.java 12 24
----------------------------------------

public String generateRandomPassword (final int length) {
    if (length < 1) {
        throw new IllegalArgumentException ("length must be greater than 0");
    }
    final char [] buf = new char [length];
    for (int idx = 0;
    idx < buf.length; ++ idx) {
        buf [idx] = symbols [RANDOM.nextInt (symbols.length)];
    }
    return shuffle (new String (buf));
}
----------------------------------------

 public String generateRandomPassword ( final int length ) {
    if ( length < 1 ) {
        throw new IllegalArgumentException ( "length must be greater than 0" );
    }
    final StringBuilder sb = new StringBuilder ();
    for ( int i = 0; i < length; i++ ) {
        int j = ( int ) ( Math.random () * symbols.length );
        sb.append ( symbols[j] );
    }
    return sb.toString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
463
4
Gpt3D_Clone463_4.java 1 11
Gpt3D_Clone463_4.java 12 24
----------------------------------------

public String generateRandomPassword (final int length) {
    if (length < 1) {
        throw new IllegalArgumentException ("length must be greater than 0");
    }
    final char [] buf = new char [length];
    for (int idx = 0;
    idx < buf.length; ++ idx) {
        buf [idx] = symbols [RANDOM.nextInt (symbols.length)];
    }
    return shuffle (new String (buf));
}
----------------------------------------

 public String generateRandomPassword ( final int length ) {
    if ( length < 1 ) {
        throw new IllegalArgumentException ( "length must be greater than 0" );
    }
    final char[] buf = new char[length];
    for ( int i = 0; i < buf.length; i++ ) {
        int j = new Random().nextInt ( symbols.length );
        buf[i] = symbols[j];
    }
    return new String(buf);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
463
5
Gpt3D_Clone463_5.java 1 11
Gpt3D_Clone463_5.java 12 24
----------------------------------------

public String generateRandomPassword (final int length) {
    if (length < 1) {
        throw new IllegalArgumentException ("length must be greater than 0");
    }
    final char [] buf = new char [length];
    for (int idx = 0;
    idx < buf.length; ++ idx) {
        buf [idx] = symbols [RANDOM.nextInt (symbols.length)];
    }
    return shuffle (new String (buf));
}
----------------------------------------

 public String generateRandomPassword ( final int length ) {
    if ( length < 1 ) {
        throw new IllegalArgumentException ( "length must be greater than 0" );
    }
    final char[] buf = new char[length];
    for ( int i = 0; i < buf.length; i++ ) {
        int j = RandomUtils.nextInt ( 0, symbols.length-1 );
        buf [i] = symbols [j];
    }
    return new String (buf);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
463
7
Gpt3D_Clone463_7.java 1 11
Gpt3D_Clone463_7.java 12 23
----------------------------------------

public String generateRandomPassword (final int length) {
    if (length < 1) {
        throw new IllegalArgumentException ("length must be greater than 0");
    }
    final char [] buf = new char [length];
    for (int idx = 0;
    idx < buf.length; ++ idx) {
        buf [idx] = symbols [RANDOM.nextInt (symbols.length)];
    }
    return shuffle (new String (buf));
}
----------------------------------------

 public String generateRandomPassword (final int length) {
    if (length < 1) {
        throw new IllegalArgumentException ("length must be greater than 0");
    }
    char [] buf = new char [length];
    for (int i= 0; i<buf.length; i++) {
        buf[i] = symbols[ThreadLocalRandom.current().nextInt(symbols.length)];
    }
    return new String (buf);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
464
0
Gpt3D_Clone464_0.java 1 4
Gpt3D_Clone464_0.java 5 11
----------------------------------------

public FileVisitResult visitFile (Path file, BasicFileAttributes attrs) throws IOException {
                System.out.println (file);
                return FileVisitResult.CONTINUE;
}
----------------------------------------

 public FileVisitResult visitFile (Path file, BasicFileAttributes attrs) throws IOException {
                Long size = Files.size(file); 
                System.out.println("Size of " + file + " is " + size);
                return FileVisitResult.CONTINUE;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
466
0
Gpt3D_Clone466_0.java 1 15
Gpt3D_Clone466_0.java 16 81
----------------------------------------

public static void main (String [] argv) {
    int counter = 0;
    for (int year = 1901, last_year = 2000;
    year <= last_year; year ++) {
        for (int month = 1, last_month = 12;
        month <= last_month; month ++) {
            Date d = new GregorianCalendar (year, month - 1, 1).getTime ();
            if (d.getDay () == 0) {
                counter ++;
                System.out.println (String.valueOf (counter) + " " + d);
            }
        }
    }
    System.out.println ("Total sunday in XX century: " + counter);
}
----------------------------------------

  public static void main (String [] argv) {
        int counter = 0;
        Calendar cal = Calendar.getInstance ();
        for (int year = 1901; year <= 2000; year++) {
            for (int month = 1; month <= 12; month++) {
                cal.set (Calendar.YEAR, year);
                cal.set (Calendar.MONTH, month-1 );
                cal.set (Calendar.DAY_OF_MONTH,1);
                Date d = cal.getTime ();
                if (d.getDay () == 0) {
                    counter ++;
                    System.out.println (String.valueOf (counter) + " " + d);
                    System.out.println("Month : " + getMonthName (month));
                } 
            }
        }
        System.out.println ("Total sunday in XX century: " + counter);
    }    
    private static String getMonthName (int month) {
        String retval = "";
        switch (month) {
            case 1:
                retval = "January";
                break;
            case 2:
                retval = "February";
                break;
            case 3:
                retval = "March";
                break;
            case 4:
                retval = "April";
                break;
            case 5:
                retval = "May";
                break;
            case 6:
                retval = "June";
                break;
            case 7:
                retval = "July";
                break;
            case 8:
                retval = "August";
                break;
            case 9:
                retval = "September";
                break;
            case 10:
                retval = "October";
                break;
            case 11:
                retval = "November";
                break;
            case 12:
                retval = "December";
                break;
            default:
                retval = "Invalid month";
                break;
        }
        return retval;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
466
2
Gpt3D_Clone466_2.java 1 15
Gpt3D_Clone466_2.java 16 32
----------------------------------------

public static void main (String [] argv) {
    int counter = 0;
    for (int year = 1901, last_year = 2000;
    year <= last_year; year ++) {
        for (int month = 1, last_month = 12;
        month <= last_month; month ++) {
            Date d = new GregorianCalendar (year, month - 1, 1).getTime ();
            if (d.getDay () == 0) {
                counter ++;
                System.out.println (String.valueOf (counter) + " " + d);
            }
        }
    }
    System.out.println ("Total sunday in XX century: " + counter);
}
----------------------------------------

  public static void main (String [] argv) {
        int counter = 0;
        for (int year = 1901; year <= 2000; year++) {
            for (int month = 1; month <= 12; month++) {
                GregorianCalendar cal = new GregorianCalendar (year, month - 1, 1);
                Date d = cal.getTime ();
                if (d.getDay () == 0) {
                    counter ++;
                    System.out.println (String.valueOf (counter) + " " + cal.getTime ());
                    System.out.println ("Month: " + cal.getDisplayName(Calendar.MONTH, Calendar.LONG, Locale.US));
                }
            }
        }
        System.out.println ("Total sunday in XX century: " + counter);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
468
0
Gpt3D_Clone468_0.java 1 9
Gpt3D_Clone468_0.java 10 39
----------------------------------------

public static void main (String [] args) throws UnknownHostException, IOException {
    InetAddress inet;
    inet = InetAddress.getByAddress (new byte [] {127, 0, 0, 1});
    System.out.println ("Sending Ping Request to " + inet);
    System.out.println (inet.isReachable (5000) ? "Host is reachable" : "Host is NOT reachable");
    inet = InetAddress.getByAddress (new byte [] {(byte) 173, (byte) 194, 32, 38});
    System.out.println ("Sending Ping Request to " + inet);
    System.out.println (inet.isReachable (5000) ? "Host is reachable" : "Host is NOT reachable");
}
----------------------------------------

public static void main (String [] args) throws IOException {
    byte[] IP1 = {127, 0, 0, 1};
    byte[] IP2 = {(byte) 173, (byte) 194, 32, 38};
    try {
       InetAddress inetAddress1 = InetAddress.getByAddress(IP1);
       InetAddress inetAddress2 = InetAddress.getByAddress(IP2);
       System.out.println ("Sending Ping Request to " + inetAddress1);
       if(inetAddress1.isReachable (5000)) {
            System.out.println("Host is reachable");
       }
       else {
            System.out.println("Host is NOT reachable");
       }
       System.out.println ("Sending Ping Request to " + inetAddress2);
       if(inetAddress2.isReachable (5000)) {
            System.out.println("Host is reachable");
       }
       else {
            System.out.println("Host is NOT reachable");
       }
    }
    catch(UnknownHostException e) {
       System.out.println("Error: UnknownHostException");
    }
    catch(IOException e) {
       System.out.println("Error connecting to host");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
469
0
Gpt3D_Clone469_0.java 1 9
Gpt3D_Clone469_0.java 10 23
----------------------------------------

public static void main (String [] args) throws UnknownHostException, IOException {
    InetAddress inet;
    inet = InetAddress.getByAddress (new byte [] {127, 0, 0, 1});
    System.out.println ("Sending Ping Request to " + inet);
    System.out.println (inet.isReachable (5000) ? "Host is reachable" : "Host is NOT reachable");
    inet = InetAddress.getByAddress (new byte [] {(byte) 173, (byte) 194, 32, 38});
    System.out.println ("Sending Ping Request to " + inet);
    System.out.println (inet.isReachable (5000) ? "Host is reachable" : "Host is NOT reachable");
}
----------------------------------------

 public static void main (String [] args) throws UnknownHostException, IOException {InetAddress inet = InetAddress.getByAddress("120.0.1".getBytes());
   System.out.println ("Sending Ping Request to " + inet);
   System.out.println (inet.isReachable (5000) ? "Host is reachable" : "Host is NOT reachable");
   String ipAddr2 = "173.194.32.38";
   byte[] bytes = new byte[ipAddr2.length()];
   for (int i =0; i <  ipAddr2.length(); i++) {
       bytes[i] = (byte) Integer.parseInt(ipAddr2.substring(i, i + 1));
   }
   InetAddress inet2 = InetAddress.getByAddress (bytes);
   System.out.println ("Sending Ping Request to " + inet2);
   System.out.println (inet2.isReachable (5000) ? "Host is reachable" : "Host is NOT reachable");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
469
1
Gpt3D_Clone469_1.java 1 9
Gpt3D_Clone469_1.java 10 22
----------------------------------------

public static void main (String [] args) throws UnknownHostException, IOException {
    InetAddress inet;
    inet = InetAddress.getByAddress (new byte [] {127, 0, 0, 1});
    System.out.println ("Sending Ping Request to " + inet);
    System.out.println (inet.isReachable (5000) ? "Host is reachable" : "Host is NOT reachable");
    inet = InetAddress.getByAddress (new byte [] {(byte) 173, (byte) 194, 32, 38});
    System.out.println ("Sending Ping Request to " + inet);
    System.out.println (inet.isReachable (5000) ? "Host is reachable" : "Host is NOT reachable");
}
----------------------------------------

 public static void main (String [] args) throws UnknownHostException, IOException {String ipString1 = "120.0.1";
   byte[] bytes1 = ipString1.getBytes();
   InetAddress inet = InetAddress.getByAddress(bytes1);
   System.out.println ("Sending Ping Request to " + inet);
   System.out.println (inet.isReachable (5000) ? "Host is reachable" : "Host is NOT reachable");
   String ipString2 = "173.194.32.38";
   byte[] bytes2 = ipString2.getBytes();
   InetAddress inet2 = InetAddress.getByAddress (bytes2);
   System.out.println ("Sending Ping Request to " + inet2);
   System.out.println (inet2.isReachable (5000) ? "Host is reachable" : "Host is NOT reachable");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
469
3
Gpt3D_Clone469_3.java 1 9
Gpt3D_Clone469_3.java 10 18
----------------------------------------

public static void main (String [] args) throws UnknownHostException, IOException {
    InetAddress inet;
    inet = InetAddress.getByAddress (new byte [] {127, 0, 0, 1});
    System.out.println ("Sending Ping Request to " + inet);
    System.out.println (inet.isReachable (5000) ? "Host is reachable" : "Host is NOT reachable");
    inet = InetAddress.getByAddress (new byte [] {(byte) 173, (byte) 194, 32, 38});
    System.out.println ("Sending Ping Request to " + inet);
    System.out.println (inet.isReachable (5000) ? "Host is reachable" : "Host is NOT reachable");
}
----------------------------------------

 public static void main (String [] args) throws UnknownHostException, IOException {InetAddress inet = InetAddress.getByName("120.0.1");
   System.out.println ("Sending Ping Request to " + inet.getHostName());
   System.out.println (inet.isReachable (5000) ? "Host is reachable" : "Host is NOT reachable");
   InetAddress inet2 = InetAddress.getByName ("173.194.32.38");
   System.out.println ("Sending Ping Request to " + inet2.getHostName());
   System.out.println (inet2.isReachable (5000) ? "Host is reachable" : "Host is NOT reachable");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
469
5
Gpt3D_Clone469_5.java 1 9
Gpt3D_Clone469_5.java 10 18
----------------------------------------

public static void main (String [] args) throws UnknownHostException, IOException {
    InetAddress inet;
    inet = InetAddress.getByAddress (new byte [] {127, 0, 0, 1});
    System.out.println ("Sending Ping Request to " + inet);
    System.out.println (inet.isReachable (5000) ? "Host is reachable" : "Host is NOT reachable");
    inet = InetAddress.getByAddress (new byte [] {(byte) 173, (byte) 194, 32, 38});
    System.out.println ("Sending Ping Request to " + inet);
    System.out.println (inet.isReachable (5000) ? "Host is reachable" : "Host is NOT reachable");
}
----------------------------------------

 public static void main (String [] args) throws UnknownHostException, IOException {InetAddress inet = InetAddress.getByName("120.0.1");
   System.out.println ("Sending Ping Request to " + inet.getCanonicalHostName());
   System.out.println (inet.isReachable (5000) ? "Host is reachable" : "Host is NOT reachable");
   InetAddress inet2 = InetAddress.getByAddress (new byte []{(byte) 173, (byte) 194, 32, 38});
   System.out.println ("Sending Ping Request to " + inet2.getCanonicalHostName());
   System.out.println (inet2.isReachable (5000) ? "Host is reachable" : "Host is NOT reachable");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
471
0
Gpt3D_Clone471_0.java 1 11
Gpt3D_Clone471_0.java 12 28
----------------------------------------

private String capitalize (String s) {
    if (s == null || s.length () == 0) {
        return "";
    }
    char first = s.charAt (0);
    if (Character.isUpperCase (first)) {
        return s;
    } else {
        return Character.toUpperCase (first) + s.substring (1);
    }
}
----------------------------------------

 private String capitalize(String s) {
    if (s == null || s.length () == 0) {
        return "";
    }
    if (Character.isUpperCase(s.charAt(0))) {
        return s;
    } else {
        StringBuilder sb = new StringBuilder();
        sb.append(Character.toUpperCase(s.charAt(0)));
        for (int i = 1; i < s.length(); i++){
            sb.append(s.charAt(i));
        }
        return sb.toString();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
471
1
Gpt3D_Clone471_1.java 1 11
Gpt3D_Clone471_1.java 12 28
----------------------------------------

private String capitalize (String s) {
    if (s == null || s.length () == 0) {
        return "";
    }
    char first = s.charAt (0);
    if (Character.isUpperCase (first)) {
        return s;
    } else {
        return Character.toUpperCase (first) + s.substring (1);
    }
}
----------------------------------------

 private String capitalize(String s) {
    if (s == null || s.length() == 0) return "";
    
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < s.length(); i++) {
        char charAtI = s.charAt(i);
        if (i == 0) {
            sb.append(Character.toUpperCase(charAtI));
        } else {
            sb.append(charAtI);
        }
    }
    
    return sb.toString(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
471
2
Gpt3D_Clone471_2.java 1 11
Gpt3D_Clone471_2.java 12 28
----------------------------------------

private String capitalize (String s) {
    if (s == null || s.length () == 0) {
        return "";
    }
    char first = s.charAt (0);
    if (Character.isUpperCase (first)) {
        return s;
    } else {
        return Character.toUpperCase (first) + s.substring (1);
    }
}
----------------------------------------

  private String capitalize(String s) {
	  if (s == null || s.length() == 0) {
	    return "";
	  }
	  if (Character.isUpperCase(s.charAt(0))) {
	    return s;
	  }
	  char[] chars = s.toCharArray();
	  chars[0] = Character.toUpperCase(chars[0]);
	  String modifiedString = String.copyValueOf(chars);
	  return modifiedString;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
471
3
Gpt3D_Clone471_3.java 1 11
Gpt3D_Clone471_3.java 12 23
----------------------------------------

private String capitalize (String s) {
    if (s == null || s.length () == 0) {
        return "";
    }
    char first = s.charAt (0);
    if (Character.isUpperCase (first)) {
        return s;
    } else {
        return Character.toUpperCase (first) + s.substring (1);
    }
}
----------------------------------------

 private String capitalize(String s) {
    if (s == null || s.length() == 0) {
        return "";
    }
    StringBuilder sb = new StringBuilder();
    sb.append(Character.toUpperCase(s.charAt(0)));
    sb.append(s.substring(1)); 
    return sb.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
471
4
Gpt3D_Clone471_4.java 1 11
Gpt3D_Clone471_4.java 12 23
----------------------------------------

private String capitalize (String s) {
    if (s == null || s.length () == 0) {
        return "";
    }
    char first = s.charAt (0);
    if (Character.isUpperCase (first)) {
        return s;
    } else {
        return Character.toUpperCase (first) + s.substring (1);
    }
}
----------------------------------------

 private String capitalize(String s) {
	  if (s == null || s.equals("")) {
	    return s;
	  }
	  char[] chars = s.toCharArray();
	  chars[0] = Character.toUpperCase(chars[0]);
	  return new String(chars);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
471
5
Gpt3D_Clone471_5.java 1 11
Gpt3D_Clone471_5.java 12 23
----------------------------------------

private String capitalize (String s) {
    if (s == null || s.length () == 0) {
        return "";
    }
    char first = s.charAt (0);
    if (Character.isUpperCase (first)) {
        return s;
    } else {
        return Character.toUpperCase (first) + s.substring (1);
    }
}
----------------------------------------

  private String capitalize(String s) {
    if(s == null || s.length() == 0){
        return "";
    }
	String firstLetter = s.substring(0,1);
	String remainder = s.substring(1);
	return firstLetter.toUpperCase() + remainder;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
471
6
Gpt3D_Clone471_6.java 1 11
Gpt3D_Clone471_6.java 12 25
----------------------------------------

private String capitalize (String s) {
    if (s == null || s.length () == 0) {
        return "";
    }
    char first = s.charAt (0);
    if (Character.isUpperCase (first)) {
        return s;
    } else {
        return Character.toUpperCase (first) + s.substring (1);
    }
}
----------------------------------------

  private String capitalize(String s) {
    if (s == null) {
      return "";
    }
    if (s.length() == 0) {
      return "";
    }
    return s.substring(0, 1).toUpperCase() + s.substring(1);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
471
7
Gpt3D_Clone471_7.java 1 11
Gpt3D_Clone471_7.java 12 21
----------------------------------------

private String capitalize (String s) {
    if (s == null || s.length () == 0) {
        return "";
    }
    char first = s.charAt (0);
    if (Character.isUpperCase (first)) {
        return s;
    } else {
        return Character.toUpperCase (first) + s.substring (1);
    }
}
----------------------------------------

  private String capitalize(String s) {
	  if (s == null || s.length() == 0) {
	    return "";
	  } else {
	    String capitalized = s.substring(0, 1).toUpperCase() + s.substring(1);
	    return capitalized;
	  }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
471
8
Gpt3D_Clone471_8.java 1 11
Gpt3D_Clone471_8.java 12 21
----------------------------------------

private String capitalize (String s) {
    if (s == null || s.length () == 0) {
        return "";
    }
    char first = s.charAt (0);
    if (Character.isUpperCase (first)) {
        return s;
    } else {
        return Character.toUpperCase (first) + s.substring (1);
    }
}
----------------------------------------

 private String capitalize(String s) {
	  if (s == null || s.length() == 0) {
	    return "";
	  }
	  char upperChar = Character.toUpperCase(s.charAt(0));
	  return upperChar + s.substring(1, s.length());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
471
9
Gpt3D_Clone471_9.java 1 11
Gpt3D_Clone471_9.java 12 20
----------------------------------------

private String capitalize (String s) {
    if (s == null || s.length () == 0) {
        return "";
    }
    char first = s.charAt (0);
    if (Character.isUpperCase (first)) {
        return s;
    } else {
        return Character.toUpperCase (first) + s.substring (1);
    }
}
----------------------------------------

  private String capitalize(String s) {
    if (s == null || s.isEmpty()) {
        return "";
    }
    return s.substring(0, 1).toUpperCase() + s.substring(1, s.length());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
473
5
Gpt3D_Clone473_5.java 1 16
Gpt3D_Clone473_5.java 17 38
----------------------------------------

public static void pack (String sourceDirPath, String zipFilePath) throws IOException {
    Path p = Files.createFile (Paths.get (zipFilePath));
    Path pp = Paths.get (sourceDirPath);
    try (ZipOutputStream zs = new ZipOutputStream (Files.newOutputStream (p)); Stream < Path > paths = Files.walk (pp)) {
        paths.filter (path -> ! Files.isDirectory (path)).forEach (path -> {
            ZipEntry zipEntry = new ZipEntry (pp.relativize (path).toString ());
            try {
                zs.putNextEntry (zipEntry);
                Files.copy (path, zs);
                zs.closeEntry ();
            } catch (IOException e) {
                System.err.println (e);
            }
        });
    }
}
----------------------------------------

 public static void pack(String sourceDirPath, String zipFilePath) throws IOException {
            byte[] buffer = new byte[1024];
            FileOutputStream fos = new FileOutputStream(zipFilePath);
            ZipOutputStream zos = new ZipOutputStream(fos);
            File dir = new File(sourceDirPath);
            File[] files = dir.listFiles();
            for (File file : files) {
                if (file.isFile()) {
                    FileInputStream fis = new FileInputStream(file);
                    zos.putNextEntry(new ZipEntry(file.getName()));
                    int length;
                    while ((length = fis.read(buffer)) > 0) {
                        zos.write(buffer, 0, length);
                    }
                    zos.closeEntry();
                    fis.close();
                }
            }
            zos.close();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
473
7
Gpt3D_Clone473_7.java 1 16
Gpt3D_Clone473_7.java 17 39
----------------------------------------

public static void pack (String sourceDirPath, String zipFilePath) throws IOException {
    Path p = Files.createFile (Paths.get (zipFilePath));
    Path pp = Paths.get (sourceDirPath);
    try (ZipOutputStream zs = new ZipOutputStream (Files.newOutputStream (p)); Stream < Path > paths = Files.walk (pp)) {
        paths.filter (path -> ! Files.isDirectory (path)).forEach (path -> {
            ZipEntry zipEntry = new ZipEntry (pp.relativize (path).toString ());
            try {
                zs.putNextEntry (zipEntry);
                Files.copy (path, zs);
                zs.closeEntry ();
            } catch (IOException e) {
                System.err.println (e);
            }
        });
    }
}
----------------------------------------

 public static void pack(String sourceDirPath, String zipFilePath) throws IOException {
            File sourceDir = new File(sourceDirPath);
            File zipFile = new File(zipFilePath);
            try (ZipOutputStream zs = new ZipOutputStream(new FileOutputStream(zipFile))) {
                File[] files = sourceDir.listFiles();
                for (File file : files) {
                    if (file.isFile()) {
                        byte[] buffer = new byte[1024];
                        try (FileInputStream fis = new FileInputStream(file)) {
                            zs.putNextEntry(new ZipEntry(file.getPath()));
                            int len;
                            while ((len = fis.read(buffer)) > 0) {
                                zs.write(buffer, 0, len);
                            }
                            zs.closeEntry();
                        }
                    }
                }
            }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
473
8
Gpt3D_Clone473_8.java 1 16
Gpt3D_Clone473_8.java 17 39
----------------------------------------

public static void pack (String sourceDirPath, String zipFilePath) throws IOException {
    Path p = Files.createFile (Paths.get (zipFilePath));
    Path pp = Paths.get (sourceDirPath);
    try (ZipOutputStream zs = new ZipOutputStream (Files.newOutputStream (p)); Stream < Path > paths = Files.walk (pp)) {
        paths.filter (path -> ! Files.isDirectory (path)).forEach (path -> {
            ZipEntry zipEntry = new ZipEntry (pp.relativize (path).toString ());
            try {
                zs.putNextEntry (zipEntry);
                Files.copy (path, zs);
                zs.closeEntry ();
            } catch (IOException e) {
                System.err.println (e);
            }
        });
    }
}
----------------------------------------

  public static void pack (String sourceDirPath, String zipFilePath) throws IOException {
        try (ZipOutputStream zs = new ZipOutputStream (new FileOutputStream (zipFilePath))) {
            File directory = new File (sourceDirPath);
            for (File file : directory.listFiles ()) {
                if (file.isFile ()) {
                    ZipEntry zipEntry = new ZipEntry (file.getName ());
                    zs.putNextEntry (zipEntry);
                    try (FileInputStream inputStream = new FileInputStream (file)) {
                        byte[] b = new byte[1024];
                        int count;
                        while ((count = inputStream.read (b)) > 0) {
                            zs.write (b, 0, count);
                        }
                        zs.closeEntry ();
                        inputStream.close ();
                    }
                }
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
474
0
Gpt3D_Clone474_0.java 1 16
Gpt3D_Clone474_0.java 17 36
----------------------------------------

public static void pack (String sourceDirPath, String zipFilePath) throws IOException {
    Path p = Files.createFile (Paths.get (zipFilePath));
    try (ZipOutputStream zs = new ZipOutputStream (Files.newOutputStream (p))) {
        Path pp = Paths.get (sourceDirPath);
        Files.walk (pp).filter (path -> ! Files.isDirectory (path)).forEach (path -> {
            ZipEntry zipEntry = new ZipEntry (pp.relativize (path).toString ());
            try {
                zs.putNextEntry (zipEntry);
                Files.copy (path, zs);
                zs.closeEntry ();
            } catch (IOException e) {
                System.err.println (e);
            }
        });
    }
}
----------------------------------------

 public static void pack (String sourceDirPath, String zipFilePath) throws IOException { 
    FileOutputStream fos = new FileOutputStream(zipFilePath); 
    ZipOutputStream zos = new ZipOutputStream(fos); 
    File dir = new File(sourceDirPath); 
    File[] files = dir.listFiles(); 
    byte[] buffer = new byte[1024]; 
    for (File file : files) { 
        FileInputStream fis = new FileInputStream(file); 
        zos.putNextEntry(new ZipEntry(file.getName())); 
        int length; 
        while ((length = fis.read(buffer)) > 0) { 
            zos.write(buffer, 0, length); 
        } 
    } 
    zos.closeEntry(); 
    zos.close(); 
    fos.close(); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
474
1
Gpt3D_Clone474_1.java 1 16
Gpt3D_Clone474_1.java 17 39
----------------------------------------

public static void pack (String sourceDirPath, String zipFilePath) throws IOException {
    Path p = Files.createFile (Paths.get (zipFilePath));
    try (ZipOutputStream zs = new ZipOutputStream (Files.newOutputStream (p))) {
        Path pp = Paths.get (sourceDirPath);
        Files.walk (pp).filter (path -> ! Files.isDirectory (path)).forEach (path -> {
            ZipEntry zipEntry = new ZipEntry (pp.relativize (path).toString ());
            try {
                zs.putNextEntry (zipEntry);
                Files.copy (path, zs);
                zs.closeEntry ();
            } catch (IOException e) {
                System.err.println (e);
            }
        });
    }
}
----------------------------------------

 public static void pack(String sourceDirPath, String zipFilePath) throws IOException{
    Path p = Paths.get(zipFilePath);
    try(ZipOutputStream zs = new ZipOutputStream(Files.newOutputStream(p))){
        Files.walkFileTree(Paths.get(sourceDirPath), new SimpleFileVisitor<Path>(){
            @Override
            public FileVisitResult visitFile(Path file, BasicFileAttributes attributes){
                try{
                    zs.putNextEntry(new ZipEntry(sourceDirPath.relativize(file).toString()));
                    Files.copy(file,zs);
                    zs.closeEntry();
                }
                catch(IOException e){
                    System.err.println(e);
                }
                return FileVisitResult.CONTINUE;
            }
        });
    }
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
474
4
Gpt3D_Clone474_4.java 1 16
Gpt3D_Clone474_4.java 17 37
----------------------------------------

public static void pack (String sourceDirPath, String zipFilePath) throws IOException {
    Path p = Files.createFile (Paths.get (zipFilePath));
    try (ZipOutputStream zs = new ZipOutputStream (Files.newOutputStream (p))) {
        Path pp = Paths.get (sourceDirPath);
        Files.walk (pp).filter (path -> ! Files.isDirectory (path)).forEach (path -> {
            ZipEntry zipEntry = new ZipEntry (pp.relativize (path).toString ());
            try {
                zs.putNextEntry (zipEntry);
                Files.copy (path, zs);
                zs.closeEntry ();
            } catch (IOException e) {
                System.err.println (e);
            }
        });
    }
}
----------------------------------------

public static void pack(String sourceDirPath, String zipFilePath) throws IOException{
    File f = new File(sourceDirPath);
   
    ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(zipFilePath)); 
    for (File file : f.listFiles()) { 
        zos.putNextEntry(new ZipEntry(file.getName())); 
        FileInputStream fis = new FileInputStream(file); 
        byte[] bytes = new byte[1024]; 
        int length;
        while((length = fis.read(bytes)) >= 0) { 
            zos.write(bytes, 0, length); 
        } 
        zos.closeEntry(); 
        fis.close(); 
    } 
    zos.close();
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
474
5
Gpt3D_Clone474_5.java 1 16
Gpt3D_Clone474_5.java 17 38
----------------------------------------

public static void pack (String sourceDirPath, String zipFilePath) throws IOException {
    Path p = Files.createFile (Paths.get (zipFilePath));
    try (ZipOutputStream zs = new ZipOutputStream (Files.newOutputStream (p))) {
        Path pp = Paths.get (sourceDirPath);
        Files.walk (pp).filter (path -> ! Files.isDirectory (path)).forEach (path -> {
            ZipEntry zipEntry = new ZipEntry (pp.relativize (path).toString ());
            try {
                zs.putNextEntry (zipEntry);
                Files.copy (path, zs);
                zs.closeEntry ();
            } catch (IOException e) {
                System.err.println (e);
            }
        });
    }
}
----------------------------------------

 public static void pack(String sourceDirPath, String zipFilePath) throws IOException{
    File folder = new File(sourceDirPath);
    File zipFile = new File(zipFilePath);
    ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(zipFile));
    for (File file : folder.listFiles()) {
        try (FileInputStream in = new FileInputStream(file)) { 
            zos.putNextEntry(new ZipEntry(file.getName())); 
            byte[] buffer = new byte[1024];
            int len;
            while ((len = in.read(buffer)) > 0) {
                zos.write(buffer, 0, len);
            }
        }
    }
    zos.closeEntry();
    zos.close();
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
475
9
Gpt3D_Clone475_9.java 1 14
Gpt3D_Clone475_9.java 15 27
----------------------------------------

private void addFolderToZip (String path, String srcFolder, ZipOutputStream zip) throws IOException {
    File folder = new File (srcFolder);
    if (folder.list ().length == 0) {
        addFileToZip (path, srcFolder, zip, true);
    } else {
        for (String fileName : folder.list ()) {
            if (path.equals ("")) {
                addFileToZip (folder.getName (), srcFolder + "/" + fileName, zip, false);
            } else {
                addFileToZip (path + "/" + folder.getName (), srcFolder + "/" + fileName, zip, false);
            }
        }
    }
}
----------------------------------------

  private void addFolderToZip(String path, String srcFolder, ZipOutputStream zip) throws IOException {
        File directory = new File(srcFolder);
        if(directory.list().length == 0) {
            addFileToZip(path, directory.getPath(), zip, true);
        } else {
            for(String fileName : directory.list()) {
                String folderPath = path.equals("") ? directory.getName() : path + "/" + directory.getName(); 
                addFileToZip(folderPath, srcFolder + "/" + fileName, zip, false);
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
47
0
Gpt3D_Clone47_0.java 1 16
Gpt3D_Clone47_0.java 17 34
----------------------------------------

public static boolean hasLoop (Node root) {
    if (root == null) return false;
    Node slow = root, fast = root;
    int taken = 0, limit = 2;
    while (fast.next != null) {
        fast = fast.next;
        taken ++;
        if (slow == fast) return true;
        if (taken == limit) {
            taken = 0;
            limit <<= 1;
            slow = fast;
        }
    }
    return false;
}
----------------------------------------

 public static boolean hasLoop(Node root) {
    if (root == null) return false;
    Node slow = root;
    Node fast = root.next;
    while (true) {
        if (fast == null || fast.next == null) {
            return false;
        } else if (fast == slow || fast.next == slow) {
            return true;
        } else {
            slow = slow.next;
            fast = fast.next.next;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
47
1
Gpt3D_Clone47_1.java 1 16
Gpt3D_Clone47_1.java 17 33
----------------------------------------

public static boolean hasLoop (Node root) {
    if (root == null) return false;
    Node slow = root, fast = root;
    int taken = 0, limit = 2;
    while (fast.next != null) {
        fast = fast.next;
        taken ++;
        if (slow == fast) return true;
        if (taken == limit) {
            taken = 0;
            limit <<= 1;
            slow = fast;
        }
    }
    return false;
}
----------------------------------------

 public static boolean hasLoop(Node root) {
    if (root == null) return false;
    Node active = root;
    Node inactive = root.next;
    while (inactive != null && inactive.next != null) {
        if (active == inactive || active == inactive.next) {
            return true;
        } else {
            active = active.next;
            inactive = inactive.next.next;
        }
    } 
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
47
2
Gpt3D_Clone47_2.java 1 16
Gpt3D_Clone47_2.java 17 33
----------------------------------------

public static boolean hasLoop (Node root) {
    if (root == null) return false;
    Node slow = root, fast = root;
    int taken = 0, limit = 2;
    while (fast.next != null) {
        fast = fast.next;
        taken ++;
        if (slow == fast) return true;
        if (taken == limit) {
            taken = 0;
            limit <<= 1;
            slow = fast;
        }
    }
    return false;
}
----------------------------------------

 public static boolean hasLoop(Node root) {
    if (root == null) return false;
    Node anchor = root;
    Node diver = root.next;
    while (diver != null && diver.next != null) {
        if (anchor == diver || anchor == diver.next) {
            return true;
        } else {
            anchor = anchor.next;
            diver = diver.next.next;
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
47
3
Gpt3D_Clone47_3.java 1 16
Gpt3D_Clone47_3.java 17 33
----------------------------------------

public static boolean hasLoop (Node root) {
    if (root == null) return false;
    Node slow = root, fast = root;
    int taken = 0, limit = 2;
    while (fast.next != null) {
        fast = fast.next;
        taken ++;
        if (slow == fast) return true;
        if (taken == limit) {
            taken = 0;
            limit <<= 1;
            slow = fast;
        }
    }
    return false;
}
----------------------------------------

 public static boolean hasLoop(Node root) {
    if (root == null) return false;
    Node explorer = root;
    Node searcher = root.next;
    while (searcher!=null && searcher.next != null) {
        if (explorer == searcher|| explorer == searcher.next) {
            return true;
        } else {
            explorer = explorer.next;
            searcher = searcher.next.next;
        }
    } 
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
47
4
Gpt3D_Clone47_4.java 1 16
Gpt3D_Clone47_4.java 17 33
----------------------------------------

public static boolean hasLoop (Node root) {
    if (root == null) return false;
    Node slow = root, fast = root;
    int taken = 0, limit = 2;
    while (fast.next != null) {
        fast = fast.next;
        taken ++;
        if (slow == fast) return true;
        if (taken == limit) {
            taken = 0;
            limit <<= 1;
            slow = fast;
        }
    }
    return false;
}
----------------------------------------

 public static boolean hasLoop(Node root) {
    if (root == null) return false;
    Node tartget = root;
    Node detour = root.next;
    while (detour != null && detour.next != null) {
        if (tartget == detour || tartget == detour.next) {
            return true;
        } else {
            tartget = tartget.next;
            detour = detour.next.next;
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
47
5
Gpt3D_Clone47_5.java 1 16
Gpt3D_Clone47_5.java 17 33
----------------------------------------

public static boolean hasLoop (Node root) {
    if (root == null) return false;
    Node slow = root, fast = root;
    int taken = 0, limit = 2;
    while (fast.next != null) {
        fast = fast.next;
        taken ++;
        if (slow == fast) return true;
        if (taken == limit) {
            taken = 0;
            limit <<= 1;
            slow = fast;
        }
    }
    return false;
}
----------------------------------------

 public static boolean hasLoop(Node root) {
    if (root == null) return false;
    Node crawler = root;
    Node runner = root.next;
    while (runner != null && runner.next != null) {
        if (crawler == runner || crawler == runner.next) { 
            return true;
        } else {
            crawler = crawler.next;
            runner = runner.next.next;
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
47
6
Gpt3D_Clone47_6.java 1 16
Gpt3D_Clone47_6.java 17 33
----------------------------------------

public static boolean hasLoop (Node root) {
    if (root == null) return false;
    Node slow = root, fast = root;
    int taken = 0, limit = 2;
    while (fast.next != null) {
        fast = fast.next;
        taken ++;
        if (slow == fast) return true;
        if (taken == limit) {
            taken = 0;
            limit <<= 1;
            slow = fast;
        }
    }
    return false;
}
----------------------------------------

 public static boolean hasLoop(Node root) {
    if (root == null) return false;
    Node runner1 = root;
    Node runner2 = root.next;
    while (runner2 !=null && runner2.next != null) {
        if (runner1 == runner2 || runner1 == runner2.next) {
            return true;
        } else {
            runner1 = runner1.next;
            runner2 = runner2.next.next;
        }
    } 
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
47
7
Gpt3D_Clone47_7.java 1 16
Gpt3D_Clone47_7.java 17 32
----------------------------------------

public static boolean hasLoop (Node root) {
    if (root == null) return false;
    Node slow = root, fast = root;
    int taken = 0, limit = 2;
    while (fast.next != null) {
        fast = fast.next;
        taken ++;
        if (slow == fast) return true;
        if (taken == limit) {
            taken = 0;
            limit <<= 1;
            slow = fast;
        }
    }
    return false;
}
----------------------------------------

 public static boolean hasLoop(Node root) {
    if (root == null) return false;
    Node current = root;
    Node next = root;
    while (next != null && next.next != null) {
        current = current.next;
        next = next.next.next;
        if (current == next) {
            return true;
        }
    } 
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
47
8
Gpt3D_Clone47_8.java 1 16
Gpt3D_Clone47_8.java 17 32
----------------------------------------

public static boolean hasLoop (Node root) {
    if (root == null) return false;
    Node slow = root, fast = root;
    int taken = 0, limit = 2;
    while (fast.next != null) {
        fast = fast.next;
        taken ++;
        if (slow == fast) return true;
        if (taken == limit) {
            taken = 0;
            limit <<= 1;
            slow = fast;
        }
    }
    return false;
}
----------------------------------------

 public static boolean hasLoop(Node root) {
    if (root == null) return false;
    Node slow = root;
    Node fast = root;
    while (fast.next != null && fast.next.next != null) { 
        slow = slow.next;
        fast = fast.next.next;
        if (slow == fast) {
            return true;
        } 
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
47
9
Gpt3D_Clone47_9.java 1 16
Gpt3D_Clone47_9.java 17 32
----------------------------------------

public static boolean hasLoop (Node root) {
    if (root == null) return false;
    Node slow = root, fast = root;
    int taken = 0, limit = 2;
    while (fast.next != null) {
        fast = fast.next;
        taken ++;
        if (slow == fast) return true;
        if (taken == limit) {
            taken = 0;
            limit <<= 1;
            slow = fast;
        }
    }
    return false;
}
----------------------------------------

 public static boolean hasLoop(Node root) {
    if (root == null) return false;
    Node walker = root;
    Node runner = root;
    while(runner.next != null && runner.next.next != null) { 
        walker = walker.next;
        runner = runner.next.next;
        if (walker == runner) {
            return true;
        } 
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
491
6
Gpt3D_Clone491_6.java 1 9
Gpt3D_Clone491_6.java 10 18
----------------------------------------

public synchronized void run () {
    try {
        while (true) {
            System.out.println (info);
            wait ();
        }
    } catch (Exception e) {
    }
}
----------------------------------------

 public synchronized void run () {
    while (true) {
        System.out.println (info); 
        Object obj = new Object();
        obj.wait(); 
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
491
7
Gpt3D_Clone491_7.java 1 9
Gpt3D_Clone491_7.java 10 19
----------------------------------------

public synchronized void run () {
    try {
        while (true) {
            System.out.println (info);
            wait ();
        }
    } catch (Exception e) {
    }
}
----------------------------------------

 public synchronized void run () {
    while (true) {
        System.out.println (info); 
        synchronized(this) {
            this.wait();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
491
9
Gpt3D_Clone491_9.java 1 9
Gpt3D_Clone491_9.java 10 17
----------------------------------------

public synchronized void run () {
    try {
        while (true) {
            System.out.println (info);
            wait ();
        }
    } catch (Exception e) {
    }
}
----------------------------------------

 public synchronized void run () {
    while (true) {
        System.out.println (info); 
        wait(1000);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
492
7
Gpt3D_Clone492_7.java 1 19
Gpt3D_Clone492_7.java 20 34
----------------------------------------

public Component getTableCellRendererComponent (JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int col) {
    Component c = super.getTableCellRendererComponent (table, value, isSelected, hasFocus, row, col);
    c.setBackground (Color.WHITE);
    c.setForeground (Color.BLACK);
    JLabel l = (JLabel) super.getTableCellRendererComponent (table, value, isSelected, hasFocus, row, col);
    if (separatedVariable.equals ("YOUR VALUE TO GREEN")) {
        l.setBackground (Color.GREEN);
        return l;
    } else {
        if (separatedValue.equals ("YOUR VALUE TO YELLOW")) {
            l.setBackground (Color.YELLOW);
            return l;
        } else if (separatedValue.equals ("YOUR VALUE TO RED")) {
            l.setBaground (Color.RED);
            return l;
        }
    }
    return c;
}
----------------------------------------

   public Component getTableCellRendererComponent (JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int col) {  Component c = super.getTableCellRendererComponent (table, value, isSelected, hasFocus, row, col);
        if(separatedVariable.equals("YOUR VALUE TO GREEN")) {
            c.setBackground(Color.GREEN);
        } 
        else if(separatedValue.equals("YOUR VALUE TO YELLOW")) {
            c.setBackground(Color.YELLOW);
        }
        else if (separatedValue.equals("YOUR VALUE TO RED")) {
            c.setBackground(Color.RED);
        }
        c.setForeground(Color.BLACK);
        return c;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
494
0
Gpt3D_Clone494_0.java 1 10
Gpt3D_Clone494_0.java 11 21
----------------------------------------

public void move (Container container) {
    if (x >= canvasWidth || x <= 0) {
        deltaX = - 1 * deltaX;
    }
    if (y >= canvasHeight || y <= 0) {
        deltaY = - 1 * deltaY;
    }
    x += deltaX;
    y += deltaY;
}
----------------------------------------

 public void move (Container container) {if (container.getX() >= canvasWidth || container.getX() <= 0){
    container.setDeltaX(container.getDeltaX() * -1);
   }
   if (container.getY() >= canvasHeight || container.getY() <= 0){
    container.setDeltaY(container.getDeltaY() * -1);
   }
    container.setX(container.getX() + container.getDeltaX());
    container.setY(container.getY() + container.getDeltaY());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
494
1
Gpt3D_Clone494_1.java 1 10
Gpt3D_Clone494_1.java 11 21
----------------------------------------

public void move (Container container) {
    if (x >= canvasWidth || x <= 0) {
        deltaX = - 1 * deltaX;
    }
    if (y >= canvasHeight || y <= 0) {
        deltaY = - 1 * deltaY;
    }
    x += deltaX;
    y += deltaY;
}
----------------------------------------

 public void move (Container container) {if (container.coordinateX >= canvasWidth || container.coordinateX <= 0){
        container.directionX *= -1;
   }
   if (container.coordinateY >= canvasHeight || container.coordinateY <= 0){
        container.directionY *= -1;
   }
    container.coordinateX += container.directionX;
    container.coordinateY += container.directionY;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
494
2
Gpt3D_Clone494_2.java 1 10
Gpt3D_Clone494_2.java 11 21
----------------------------------------

public void move (Container container) {
    if (x >= canvasWidth || x <= 0) {
        deltaX = - 1 * deltaX;
    }
    if (y >= canvasHeight || y <= 0) {
        deltaY = - 1 * deltaY;
    }
    x += deltaX;
    y += deltaY;
}
----------------------------------------

 public void move (Container container) {if (container.xCoor >= canvasWidth || container.xCoor <= 0){
        container.diffX *= -1;
   }
   if (container.yCoor >= canvasHeight || container.yCoor <= 0){
        container.diffY *= -1;
   }
   container.xCoor += container.diffX;
    container.yCoor += container.diffY;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
494
3
Gpt3D_Clone494_3.java 1 10
Gpt3D_Clone494_3.java 11 21
----------------------------------------

public void move (Container container) {
    if (x >= canvasWidth || x <= 0) {
        deltaX = - 1 * deltaX;
    }
    if (y >= canvasHeight || y <= 0) {
        deltaY = - 1 * deltaY;
    }
    x += deltaX;
    y += deltaY;
}
----------------------------------------

 public void move (Container container) {if ( x>= canvasWidth || x<= 0){
    deltaX = deltaX * -1;
   }
   if ( y>= canvasHeight || y<= 0){
    deltaY = deltaY * -1;
   }
    x = x + deltaX;
    y = y + deltaY;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
494
4
Gpt3D_Clone494_4.java 1 10
Gpt3D_Clone494_4.java 11 21
----------------------------------------

public void move (Container container) {
    if (x >= canvasWidth || x <= 0) {
        deltaX = - 1 * deltaX;
    }
    if (y >= canvasHeight || y <= 0) {
        deltaY = - 1 * deltaY;
    }
    x += deltaX;
    y += deltaY;
}
----------------------------------------

 public void move (Container container) {if (container.x >= canvasWidth || container.x <= 0){
    container.deltaX *= -1;
   }
   if (container.y >= canvasHeight || container.y <= 0){
    container.deltaY *= -1;
   }
    container.x += container.deltaX;
    container.y += container.deltaY;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
494
5
Gpt3D_Clone494_5.java 1 10
Gpt3D_Clone494_5.java 11 21
----------------------------------------

public void move (Container container) {
    if (x >= canvasWidth || x <= 0) {
        deltaX = - 1 * deltaX;
    }
    if (y >= canvasHeight || y <= 0) {
        deltaY = - 1 * deltaY;
    }
    x += deltaX;
    y += deltaY;
}
----------------------------------------

 public void move (Container container) {if (container.getPosX() >= canvasWidth || container.getPosX() <= 0){
        container.setDirectionX(container.getDirectionX() * -1);
   }
   if (container.getPosY() >= canvasHeight || container.getPosY() <= 0){
        container.setDirectionY(container.getDirectionY() * -1);
   }
    container.setPosX(container.getPosX() + container.getDirectionX());
    container.setPosY(container.getPosY() + container.getDirectionY());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
494
6
Gpt3D_Clone494_6.java 1 10
Gpt3D_Clone494_6.java 11 21
----------------------------------------

public void move (Container container) {
    if (x >= canvasWidth || x <= 0) {
        deltaX = - 1 * deltaX;
    }
    if (y >= canvasHeight || y <= 0) {
        deltaY = - 1 * deltaY;
    }
    x += deltaX;
    y += deltaY;
}
----------------------------------------

 public void move (Container container) {if (container.positionX >= canvasWidth || container.positionX <= 0){
        container.changeX *= -1;
   }
   if (container.positionY >= canvasHeight || container.positionY <= 0){
        container.changeY *= -1;
   }
    container.positionX += container.changeX;
    container.positionY += container.changeY;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
494
8
Gpt3D_Clone494_8.java 1 10
Gpt3D_Clone494_8.java 11 21
----------------------------------------

public void move (Container container) {
    if (x >= canvasWidth || x <= 0) {
        deltaX = - 1 * deltaX;
    }
    if (y >= canvasHeight || y <= 0) {
        deltaY = - 1 * deltaY;
    }
    x += deltaX;
    y += deltaY;
}
----------------------------------------

 public void move (Container container) {if (container.posX >= canvasWidth || container.posX <= 0){
        container.deltaX *= -1;
    }
    if (container.posY >= canvasHeight || container.posY <= 0){
        container.deltaY *= -1;
    }
    container.posX += container.deltaX;
    container.posY += container.deltaY;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
4
0
Gpt3D_Clone4_0.java 1 7
Gpt3D_Clone4_0.java 8 27
----------------------------------------

public FileVisitResult visitFile (Path file, BasicFileAttributes attrs) throws IOException {
                File dstFile = new File (strAbsPathDest + file.toAbsolutePath ().toString ().substring (strAbsPathSrc.length ()));
                if (dstFile.exists ()) return FileVisitResult.CONTINUE;
                if (! dstFile.getParentFile ().exists ()) dstFile.getParentFile ().mkdirs ();
                Files.copy (file, dstFile.toPath ());
                return FileVisitResult.CONTINUE;
}
----------------------------------------

public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException{
	  File dstFile = new File(strAbsPathDest + file.toAbsolutePath().toString().substring(strAbsPathSrc.length()));
	  if(!dstFile.exists()) {
	    if(dstFile.getParentFile().exists()) {
	      Files.copy(file, dstFile.toPath());
	    } else {
	      try {
		dstFile.getParentFile().mkdir();
		Files.copy(file, dstFile.toPath());
	      } catch (IOException e) {
		return FileVisitResult.CONTINUE;
	      }
	    }
	    return FileVisitResult.CONTINUE;
	  }
	  return FileVisitResult.CONTINUE;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
4
1
Gpt3D_Clone4_1.java 1 7
Gpt3D_Clone4_1.java 8 26
----------------------------------------

public FileVisitResult visitFile (Path file, BasicFileAttributes attrs) throws IOException {
                File dstFile = new File (strAbsPathDest + file.toAbsolutePath ().toString ().substring (strAbsPathSrc.length ()));
                if (dstFile.exists ()) return FileVisitResult.CONTINUE;
                if (! dstFile.getParentFile ().exists ()) dstFile.getParentFile ().mkdirs ();
                Files.copy (file, dstFile.toPath ());
                return FileVisitResult.CONTINUE;
}
----------------------------------------

public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException{
	  File dstFile = new File(strAbsPathDest + file.toAbsolutePath().toString().substring(strAbsPathSrc.length()));
	  if(dstFile.exists()) {
	    return FileVisitResult.CONTINUE;
	  } else {
	    if(!dstFile.getParentFile().exists()) {
	      dstFile.getParentFile().mkdir();
	    }
	    try {
	      Files.copy(file, dstFile.toPath());
	    } catch(IOException e) {
	      return FileVisitResult.CONTINUE;
	    }
	    return FileVisitResult.CONTINUE;
	  }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
4
2
Gpt3D_Clone4_2.java 1 7
Gpt3D_Clone4_2.java 8 26
----------------------------------------

public FileVisitResult visitFile (Path file, BasicFileAttributes attrs) throws IOException {
                File dstFile = new File (strAbsPathDest + file.toAbsolutePath ().toString ().substring (strAbsPathSrc.length ()));
                if (dstFile.exists ()) return FileVisitResult.CONTINUE;
                if (! dstFile.getParentFile ().exists ()) dstFile.getParentFile ().mkdirs ();
                Files.copy (file, dstFile.toPath ());
                return FileVisitResult.CONTINUE;
}
----------------------------------------

public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException{
    File dstFile = new File(strAbsPathDest + file.toAbsolutePath().toString().substring(strAbsPathSrc.length()));
    if(dstFile.exists()) {
        return FileVisitResult.CONTINUE;
    } else {
        try {
            if(!dstFile.getParentFile().exists()) {
                dstFile.getParentFile().mkdir();
            }
            Files.copy(file, dstFile.toPath());
        } catch (IOException e) {
            return FileVisitResult.CONTINUE;
        }
        return FileVisitResult.CONTINUE;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
4
3
Gpt3D_Clone4_3.java 1 7
Gpt3D_Clone4_3.java 8 25
----------------------------------------

public FileVisitResult visitFile (Path file, BasicFileAttributes attrs) throws IOException {
                File dstFile = new File (strAbsPathDest + file.toAbsolutePath ().toString ().substring (strAbsPathSrc.length ()));
                if (dstFile.exists ()) return FileVisitResult.CONTINUE;
                if (! dstFile.getParentFile ().exists ()) dstFile.getParentFile ().mkdirs ();
                Files.copy (file, dstFile.toPath ());
                return FileVisitResult.CONTINUE;
}
----------------------------------------

 
public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException{
    File dstFile = new File(strAbsPathDest + file.toAbsolutePath().toString().substring(strAbsPathSrc.length()));
    if(dstFile.exists()) {
        return FileVisitResult.CONTINUE;
    } else {
        if(!dstFile.getParentFile().exists()) {
            dstFile.getParentFile().mkdir();
            Files.copy(file, dstFile.toPath());
        } else {
            dstFile.getParentFile().mkdirs();
            Files.copy(file, dstFile.toPath());
        }
        return FileVisitResult.CONTINUE;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
4
4
Gpt3D_Clone4_4.java 1 7
Gpt3D_Clone4_4.java 8 26
----------------------------------------

public FileVisitResult visitFile (Path file, BasicFileAttributes attrs) throws IOException {
                File dstFile = new File (strAbsPathDest + file.toAbsolutePath ().toString ().substring (strAbsPathSrc.length ()));
                if (dstFile.exists ()) return FileVisitResult.CONTINUE;
                if (! dstFile.getParentFile ().exists ()) dstFile.getParentFile ().mkdirs ();
                Files.copy (file, dstFile.toPath ());
                return FileVisitResult.CONTINUE;
}
----------------------------------------

 
public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException{
	  File dstFile = new File(strAbsPathDest + file.toAbsolutePath().toString().substring(strAbsPathSrc.length()));
	  if(dstFile.exists()) {
	    return FileVisitResult.CONTINUE;
	  } else {
	    try {
	      if(!dstFile.getParentFile().exists()) {
		dstFile.getParentFile().mkdirs();
	      }
	      Files.copy(file, dstFile.toPath());
	    } catch (IOException e) {
	      return FileVisitResult.CONTINUE;
	    }
	    return FileVisitResult.CONTINUE;
	  }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
4
5
Gpt3D_Clone4_5.java 1 7
Gpt3D_Clone4_5.java 8 24
----------------------------------------

public FileVisitResult visitFile (Path file, BasicFileAttributes attrs) throws IOException {
                File dstFile = new File (strAbsPathDest + file.toAbsolutePath ().toString ().substring (strAbsPathSrc.length ()));
                if (dstFile.exists ()) return FileVisitResult.CONTINUE;
                if (! dstFile.getParentFile ().exists ()) dstFile.getParentFile ().mkdirs ();
                Files.copy (file, dstFile.toPath ());
                return FileVisitResult.CONTINUE;
}
----------------------------------------

public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException{
	  File dstFile = new File(strAbsPathDest + file.toAbsolutePath().toString().substring(strAbsPathSrc.length()));
	  if(dstFile.exists()) {
	    return FileVisitResult.CONTINUE;
	  } else {
	    if(dstFile.getParentFile().exists()) {
	      Files.copy(file, dstFile.toPath());
	    } else {
	      dstFile.getParentFile().mkdirs();
	      Files.copy(file, dstFile.toPath());
	    }
	    return FileVisitResult.CONTINUE;
	  }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
4
6
Gpt3D_Clone4_6.java 1 7
Gpt3D_Clone4_6.java 8 23
----------------------------------------

public FileVisitResult visitFile (Path file, BasicFileAttributes attrs) throws IOException {
                File dstFile = new File (strAbsPathDest + file.toAbsolutePath ().toString ().substring (strAbsPathSrc.length ()));
                if (dstFile.exists ()) return FileVisitResult.CONTINUE;
                if (! dstFile.getParentFile ().exists ()) dstFile.getParentFile ().mkdirs ();
                Files.copy (file, dstFile.toPath ());
                return FileVisitResult.CONTINUE;
}
----------------------------------------

public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
	  File dstFile = new File(strAbsPathDest + file.toAbsolutePath().toString().substring(strAbsPathSrc.length()));
	  if(!dstFile.exists()) {
	    if(dstFile.getParentFile().exists()) {
	      Files.copy(file, dstFile.toPath());
	    } else {
	      dstFile.getParentFile().mkdirs();
	      Files.copy(file, dstFile.toPath());
	    }
	    return FileVisitResult.CONTINUE;
	  }
	  return FileVisitResult.CONTINUE;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
4
7
Gpt3D_Clone4_7.java 1 7
Gpt3D_Clone4_7.java 8 23
----------------------------------------

public FileVisitResult visitFile (Path file, BasicFileAttributes attrs) throws IOException {
                File dstFile = new File (strAbsPathDest + file.toAbsolutePath ().toString ().substring (strAbsPathSrc.length ()));
                if (dstFile.exists ()) return FileVisitResult.CONTINUE;
                if (! dstFile.getParentFile ().exists ()) dstFile.getParentFile ().mkdirs ();
                Files.copy (file, dstFile.toPath ());
                return FileVisitResult.CONTINUE;
}
----------------------------------------

public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
	  File dstFile = new File(strAbsPathDest + file.toAbsolutePath().toString().substring(strAbsPathSrc.length()));
	  if(dstFile.exists()) {
	    if(dstFile.getParentFile().exists()) {
	      Files.copy(file, dstFile.toPath());
	    } else {
	      dstFile.getParentFile().mkdirs();
	      Files.copy(file, dstFile.toPath());
	    }
	    return FileVisitResult.CONTINUE;
	  }
	  return FileVisitResult.CONTINUE;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
4
8
Gpt3D_Clone4_8.java 1 7
Gpt3D_Clone4_8.java 8 22
----------------------------------------

public FileVisitResult visitFile (Path file, BasicFileAttributes attrs) throws IOException {
                File dstFile = new File (strAbsPathDest + file.toAbsolutePath ().toString ().substring (strAbsPathSrc.length ()));
                if (dstFile.exists ()) return FileVisitResult.CONTINUE;
                if (! dstFile.getParentFile ().exists ()) dstFile.getParentFile ().mkdirs ();
                Files.copy (file, dstFile.toPath ());
                return FileVisitResult.CONTINUE;
}
----------------------------------------

public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException{
	  File dstFile = new File(strAbsPathDest + file.toAbsolutePath().toString().substring(strAbsPathSrc.length()));
	  if(dstFile.exists()) {
	    return FileVisitResult.CONTINUE;
	  } else {
	    if(!dstFile.getParentFile().exists()) {
	      dstFile.getParentFile().mkdirs();
	    }
	    Files.copy(file, dstFile.toPath());
	    return FileVisitResult.CONTINUE;
	  }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
4
9
Gpt3D_Clone4_9.java 1 7
Gpt3D_Clone4_9.java 8 21
----------------------------------------

public FileVisitResult visitFile (Path file, BasicFileAttributes attrs) throws IOException {
                File dstFile = new File (strAbsPathDest + file.toAbsolutePath ().toString ().substring (strAbsPathSrc.length ()));
                if (dstFile.exists ()) return FileVisitResult.CONTINUE;
                if (! dstFile.getParentFile ().exists ()) dstFile.getParentFile ().mkdirs ();
                Files.copy (file, dstFile.toPath ());
                return FileVisitResult.CONTINUE;
}
----------------------------------------

public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException{
	  File dstFile = new File(strAbsPathDest + file.toAbsolutePath().toString().substring(strAbsPathSrc.length()));
	  if(!dstFile.exists()) {
	    if(!dstFile.getParentFile().exists()) {
	      dstFile.getParentFile().mkdirs();
	    }
	    Files.copy(file, dstFile.toPath());
	    return FileVisitResult.CONTINUE;
	  }
	  return FileVisitResult.CONTINUE;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
506
0
Gpt3D_Clone506_0.java 1 14
Gpt3D_Clone506_0.java 15 35
----------------------------------------

public void displayImage (String strfilename, JLabel JLlabel) {
    BufferedImage image = null;
    if (! isImageExist (strfilename)) {
        image = ImageIO.read (new File ("NOIMAGE.jpg"));
    } else {
        try {
            image = ImageIO.read (new File (strfilename + ".jpg"));
        } catch (IOException ioe) {
            ioe.printStackTrace ();
        }
    }
    ImageIcon icon = new ImageIcon (image);
    JLlabel.setIcon (icon);
}
----------------------------------------

 public void displayImage (String strfilename, JLabel JLlabel) {
    ImageIcon icon;
    if (isImageExist (strfilename)) {
        try {
            BufferedImage image = ImageIO.read (new File (strfilename + ".jpg"));
            icon = new ImageIcon (image);
        } catch (IOException ioe) {
            ioe.printStackTrace ();
        }
    } else {
        try {
            BufferedImage image = ImageIO.read (new File ("NOIMAGE.jpg"));
            icon = new ImageIcon (image);
        } catch (IOException ioe) {
            ioe.printStackTrace ();
        }
    }
    JLlabel.setIcon (icon);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
506
1
Gpt3D_Clone506_1.java 1 14
Gpt3D_Clone506_1.java 15 35
----------------------------------------

public void displayImage (String strfilename, JLabel JLlabel) {
    BufferedImage image = null;
    if (! isImageExist (strfilename)) {
        image = ImageIO.read (new File ("NOIMAGE.jpg"));
    } else {
        try {
            image = ImageIO.read (new File (strfilename + ".jpg"));
        } catch (IOException ioe) {
            ioe.printStackTrace ();
        }
    }
    ImageIcon icon = new ImageIcon (image);
    JLlabel.setIcon (icon);
}
----------------------------------------

 public void displayImage (String strfilename, JLabel JLlabel) {
    ImageIcon icon;
    if (isImageExist (strfilename)) {
        try {
            URL url = new URL ("file:" + strfilename + ".jpg");
            icon = new ImageIcon (url);
        } catch (IOException ioe) {
            ioe.printStackTrace ();
        }
    } else {
        try {
            URL url = new URL ("file:" + NOIMAGE_PATH);
            icon = new ImageIcon (url);
        } catch (IOException ioe) {
            ioe.printStackTrace ();
        }
    }
    JLlabel.setIcon (icon);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
506
3
Gpt3D_Clone506_3.java 1 14
Gpt3D_Clone506_3.java 15 33
----------------------------------------

public void displayImage (String strfilename, JLabel JLlabel) {
    BufferedImage image = null;
    if (! isImageExist (strfilename)) {
        image = ImageIO.read (new File ("NOIMAGE.jpg"));
    } else {
        try {
            image = ImageIO.read (new File (strfilename + ".jpg"));
        } catch (IOException ioe) {
            ioe.printStackTrace ();
        }
    }
    ImageIcon icon = new ImageIcon (image);
    JLlabel.setIcon (icon);
}
----------------------------------------

 public void displayImage (String strfilename, JLabel JLlabel) {
    ImageIcon icon;
    if (isImageExist (strfilename)) {
        try {
            icon = new ImageIcon (ImageIO.read (new File (strfilename + ".jpg")));
        } catch (IOException ioe) {
            ioe.printStackTrace ();
        }
    } else {
        try {
            icon = new ImageIcon (ImageIO.read (new File ("NOIMAGE.jpg")));
        } catch (IOException ioe) {
            ioe.printStackTrace ();
        }
    }
    JLlabel.setIcon (icon);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
506
4
Gpt3D_Clone506_4.java 1 14
Gpt3D_Clone506_4.java 15 31
----------------------------------------

public void displayImage (String strfilename, JLabel JLlabel) {
    BufferedImage image = null;
    if (! isImageExist (strfilename)) {
        image = ImageIO.read (new File ("NOIMAGE.jpg"));
    } else {
        try {
            image = ImageIO.read (new File (strfilename + ".jpg"));
        } catch (IOException ioe) {
            ioe.printStackTrace ();
        }
    }
    ImageIcon icon = new ImageIcon (image);
    JLlabel.setIcon (icon);
}
----------------------------------------

 public void displayImage (String strfilename, JLabel JLlabel) {
    ImageIcon icon = null;
    try {
        if (isImageExist (strfilename)) {
            BufferedImage image = ImageIO.read (new File (strfilename + ".jpg"));
            icon = new ImageIcon (image);
        } else {
            BufferedImage image = ImageIO.read (new File ("NOIMAGE.jpg"));
            icon = new ImageIcon (image);
        }
    } catch (IOException ioe) {
        ioe.printStackTrace ();
    }
    JLlabel.setIcon (icon);
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
506
5
Gpt3D_Clone506_5.java 1 14
Gpt3D_Clone506_5.java 15 30
----------------------------------------

public void displayImage (String strfilename, JLabel JLlabel) {
    BufferedImage image = null;
    if (! isImageExist (strfilename)) {
        image = ImageIO.read (new File ("NOIMAGE.jpg"));
    } else {
        try {
            image = ImageIO.read (new File (strfilename + ".jpg"));
        } catch (IOException ioe) {
            ioe.printStackTrace ();
        }
    }
    ImageIcon icon = new ImageIcon (image);
    JLlabel.setIcon (icon);
}
----------------------------------------

 public void displayImage (String strfilename, JLabel JLlabel) {
    ImageIcon icon;
    if (isImageExist (strfilename)) {
        try {
            BufferedImage image = ImageIO.read (new File (strfilename + ".jpg"));
            icon = new ImageIcon (image);
        } catch (IOException ioe) {
            ioe.printStackTrace ();
        }
    } else {
        icon = new ImageIcon (NO_IMAGE_PATH);
    }
    JLlabel.setIcon (icon);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
506
9
Gpt3D_Clone506_9.java 1 14
Gpt3D_Clone506_9.java 15 24
----------------------------------------

public void displayImage (String strfilename, JLabel JLlabel) {
    BufferedImage image = null;
    if (! isImageExist (strfilename)) {
        image = ImageIO.read (new File ("NOIMAGE.jpg"));
    } else {
        try {
            image = ImageIO.read (new File (strfilename + ".jpg"));
        } catch (IOException ioe) {
            ioe.printStackTrace ();
        }
    }
    ImageIcon icon = new ImageIcon (image);
    JLlabel.setIcon (icon);
}
----------------------------------------

 public void displayImage (String strfilename, JLabel JLlabel) {
    ImageIcon icon;
    if (isImageExist (strfilename))
        icon = new ImageIcon (strfilename + ".jpg");
    else
        icon = new ImageIcon ("NOIMAGE.jpg");
    JLlabel.setIcon (icon);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
510
0
Gpt3D_Clone510_0.java 1 9
Gpt3D_Clone510_0.java 10 28
----------------------------------------

public void shuffle (int numberOfCards) {
    for (int i = 0;
    i < numberOfCards; i ++) {
        int j = rand.nextInt (protoDeck.length - i) + i;
        Card tmp = deck [i];
        deck [i] = deck [j];
        deck [j] = tmp;
    }
}
----------------------------------------

 
public void shuffle(int numberOfCards) {
    int j;
    Random randGen = new Random();
    for (int i = 0; i < numberOfCards; i++) {
      j = randGen.nextInt(protoDeck.length - i) + i;
      Card temp = deck[i];
      int shiftPos = j;
      while (shiftPos > i) {
        deck[shiftPos] = deck[shiftPos - 1];
        shiftPos--;
      }
      deck[i] = deck[j];
      deck[j] = temp;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
510
1
Gpt3D_Clone510_1.java 1 9
Gpt3D_Clone510_1.java 10 26
----------------------------------------

public void shuffle (int numberOfCards) {
    for (int i = 0;
    i < numberOfCards; i ++) {
        int j = rand.nextInt (protoDeck.length - i) + i;
        Card tmp = deck [i];
        deck [i] = deck [j];
        deck [j] = tmp;
    }
}
----------------------------------------

 
public void shuffle(int numberOfCards) {
    Random rand = new Random();
    for (int i = 0; i < numberOfCards; i++) {
        int j = rand.nextInt(protoDeck.length - i) + i;
        Card temp = deck[i];
        deck[i] = deck[j];
        int position = j;
        while (position > i) {
            deck[position] = deck[position - 1];
            position--;
        }
        deck[i+1] = temp;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
510
4
Gpt3D_Clone510_4.java 1 9
Gpt3D_Clone510_4.java 10 26
----------------------------------------

public void shuffle (int numberOfCards) {
    for (int i = 0;
    i < numberOfCards; i ++) {
        int j = rand.nextInt (protoDeck.length - i) + i;
        Card tmp = deck [i];
        deck [i] = deck [j];
        deck [j] = tmp;
    }
}
----------------------------------------

 
public void shuffle(int numberOfCards) {
    Random randGenerator = new Random();
    for (int i = 0; i < numberOfCards; i++) {
        int j = randGenerator.nextInt(protoDeck.length - i) + i;
        Card temp = deck[i];
        deck[i] = deck[j];
        int k = j;
        while (k > i) {
            deck[k] = deck[k - 1];
            k--;
        }
        deck[i+1] = temp;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
510
5
Gpt3D_Clone510_5.java 1 9
Gpt3D_Clone510_5.java 10 26
----------------------------------------

public void shuffle (int numberOfCards) {
    for (int i = 0;
    i < numberOfCards; i ++) {
        int j = rand.nextInt (protoDeck.length - i) + i;
        Card tmp = deck [i];
        deck [i] = deck [j];
        deck [j] = tmp;
    }
}
----------------------------------------

 
public void shuffle(int numberOfCards) {
    int j = 0;
    Random rand = new Random();
    for (int i = 0; i < numberOfCards; i++) {
        j = rand.nextInt(protoDeck.length - i) + i;
        Card temp = deck[i];
        deck[i] = deck[j];
        while (j > i + 1) {
          deck[j] = deck[j - 1];
          j--;
        }
        deck[i+1] = temp;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
511
0
Gpt3D_Clone511_0.java 1 10
Gpt3D_Clone511_0.java 11 45
----------------------------------------

public static boolean isBetween (int currentMonth, int currentDay, int fromMonth, int fromDay, int untilMonth, int untilDay) {
    MonthDay current = MonthDay.of (currentMonth, currentDay);
    MonthDay from = MonthDay.of (fromMonth, fromDay);
    MonthDay until = MonthDay.of (untilMonth, untilDay);
    if (from.compareTo (until) <= 0) {
        return from.compareTo (current) <= 0 && current.compareTo (until) <= 0;
    } else {
        return current.compareTo (until) <= 0 || current.compareTo (from) >= 0;
    }
}
----------------------------------------

 public static boolean isBetween (int currentMonth, int currentDay, int fromMonth, int fromDay, int untilMonth, int untilDay) {
    MonthDay curr = MonthDay.of (currentMonth, currentDay);
    MonthDay start = MonthDay.of (fromMonth, fromDay);
    MonthDay end = MonthDay.of (untilMonth, untilDay);
    
    boolean isAfterStart = false;
    boolean isBeforeEnd = false;
    
    //if the start comes before the end
    if (start.compareTo (end) <= 0) {
        //check if the current time comes after the start
        if (curr.compareTo (start) >= 0) {
            isAfterStart = true;
        }
        //check if the current time comes before end
        if (curr.compareTo (end) <= 0) {
            isBeforeEnd = true;
        }
    //if the end comes before the start
    } else {
        //check if the current time comes before end
        if (curr.compareTo (end) <= 0) {
            isBeforeEnd = true;
        }
        //check if the current time comes after start
        if (curr.compareTo (start) >= 0) {
            isAfterStart = true;
        }
    }
    //return the result
    return (isAfterStart && isBeforeEnd);
    
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
511
1
Gpt3D_Clone511_1.java 1 10
Gpt3D_Clone511_1.java 11 29
----------------------------------------

public static boolean isBetween (int currentMonth, int currentDay, int fromMonth, int fromDay, int untilMonth, int untilDay) {
    MonthDay current = MonthDay.of (currentMonth, currentDay);
    MonthDay from = MonthDay.of (fromMonth, fromDay);
    MonthDay until = MonthDay.of (untilMonth, untilDay);
    if (from.compareTo (until) <= 0) {
        return from.compareTo (current) <= 0 && current.compareTo (until) <= 0;
    } else {
        return current.compareTo (until) <= 0 || current.compareTo (from) >= 0;
    }
}
----------------------------------------

 public static boolean isBetween (int currentMonth, int currentDay, int fromMonth, int fromDay, int untilMonth, int untilDay) {
    MonthDay today = MonthDay.of (currentMonth, currentDay);
    MonthDay start = MonthDay.of (fromMonth, fromDay);
    MonthDay end = MonthDay.of (untilMonth, untilDay);
    MonthDay temporary; 
    //swap the values of start and end if end comes before start
    if (start.compareTo (end) > 0) {  
        temporary = start;  
        start = end;  
        end = temporary;  
    }
    //check if the current time comes after start and before end
    if (today.compareTo (start) >= 0 && today.compareTo (end) <= 0) {
        return true;
    //or if the current time comes before end or after start 
    } else return (today.compareTo (end) <= 0) || (today.compareTo (start) >= 0);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
511
2
Gpt3D_Clone511_2.java 1 10
Gpt3D_Clone511_2.java 11 30
----------------------------------------

public static boolean isBetween (int currentMonth, int currentDay, int fromMonth, int fromDay, int untilMonth, int untilDay) {
    MonthDay current = MonthDay.of (currentMonth, currentDay);
    MonthDay from = MonthDay.of (fromMonth, fromDay);
    MonthDay until = MonthDay.of (untilMonth, untilDay);
    if (from.compareTo (until) <= 0) {
        return from.compareTo (current) <= 0 && current.compareTo (until) <= 0;
    } else {
        return current.compareTo (until) <= 0 || current.compareTo (from) >= 0;
    }
}
----------------------------------------

 public static boolean isBetween (int currentMonth, int currentDay, int fromMonth, int fromDay, int untilMonth, int untilDay) {
    MonthDay currently = MonthDay.of (currentMonth, currentDay);
    MonthDay beginning = MonthDay.of (fromMonth, fromDay);
    MonthDay ending = MonthDay.of (untilMonth, untilDay);
    int start = beginning.compareTo (ending);
    int nowStart = currently.compareTo (beginning);
    int nowEnd = currently.compareTo (ending);
    //check if the start comes before the end
    if (start <= 0) {
         // return true if the current day falls between start and end
        return (nowStart >= 0) && (nowEnd <= 0);
    //check if the start comes after the end
    } else if (start > 0) {
        //return true if current falls before end or after start
        return (nowEnd <= 0) || (nowStart >= 0); 
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
511
3
Gpt3D_Clone511_3.java 1 10
Gpt3D_Clone511_3.java 11 31
----------------------------------------

public static boolean isBetween (int currentMonth, int currentDay, int fromMonth, int fromDay, int untilMonth, int untilDay) {
    MonthDay current = MonthDay.of (currentMonth, currentDay);
    MonthDay from = MonthDay.of (fromMonth, fromDay);
    MonthDay until = MonthDay.of (untilMonth, untilDay);
    if (from.compareTo (until) <= 0) {
        return from.compareTo (current) <= 0 && current.compareTo (until) <= 0;
    } else {
        return current.compareTo (until) <= 0 || current.compareTo (from) >= 0;
    }
}
----------------------------------------

 public static boolean isBetween (int currentMonth, int currentDay, int fromMonth, int fromDay, int untilMonth, int untilDay) {
    MonthDay now = MonthDay.of (currentMonth, currentDay);
    MonthDay begin = MonthDay.of (fromMonth, fromDay);
    MonthDay end = MonthDay.of (untilMonth, untilDay);
    MonthDay tmp;
    //swap the values of initial and last if last comes before initial
    if (begin.compareTo (end) > 0) {
        tmp = begin;
        begin = end;
        end = tmp;
    }
    //check if the current time comes after start and before end
    if (now.compareTo (begin) >= 0 && now.compareTo (end) <= 0) {
        return true;
    }
    //or if the current time comes before end or after start
    else return (now.compareTo (end) <= 0) || (now.compareTo (begin) >= 0);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
511
4
Gpt3D_Clone511_4.java 1 10
Gpt3D_Clone511_4.java 11 32
----------------------------------------

public static boolean isBetween (int currentMonth, int currentDay, int fromMonth, int fromDay, int untilMonth, int untilDay) {
    MonthDay current = MonthDay.of (currentMonth, currentDay);
    MonthDay from = MonthDay.of (fromMonth, fromDay);
    MonthDay until = MonthDay.of (untilMonth, untilDay);
    if (from.compareTo (until) <= 0) {
        return from.compareTo (current) <= 0 && current.compareTo (until) <= 0;
    } else {
        return current.compareTo (until) <= 0 || current.compareTo (from) >= 0;
    }
}
----------------------------------------

 public static boolean isBetween (int currentMonth, int currentDay, int fromMonth, int fromDay, int untilMonth, int untilDay) {
     MonthDay today = MonthDay.of (currentMonth, currentDay);
    MonthDay starting = MonthDay.of (fromMonth, fromDay);
    MonthDay stopping = MonthDay.of (untilMonth, untilDay);
    int beginCheck = starting.compareTo (stopping);
    //check if the start comes before the end
    if (beginCheck <= 0) {
        //check if the current day comes after start and before end
        if (today.compareTo (starting) >= 0 && today.compareTo (stopping) <= 0) {
            return true;
        } 
    //check if the start comes after the end 
    } else if (beginCheck > 0) {
        //return true if current day is before end and after start
        if (today.compareTo (stopping) <= 0 || today.compareTo (starting) >= 0) {
            return true;
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
511
5
Gpt3D_Clone511_5.java 1 10
Gpt3D_Clone511_5.java 11 32
----------------------------------------

public static boolean isBetween (int currentMonth, int currentDay, int fromMonth, int fromDay, int untilMonth, int untilDay) {
    MonthDay current = MonthDay.of (currentMonth, currentDay);
    MonthDay from = MonthDay.of (fromMonth, fromDay);
    MonthDay until = MonthDay.of (untilMonth, untilDay);
    if (from.compareTo (until) <= 0) {
        return from.compareTo (current) <= 0 && current.compareTo (until) <= 0;
    } else {
        return current.compareTo (until) <= 0 || current.compareTo (from) >= 0;
    }
}
----------------------------------------

 public static boolean isBetween (int currentMonth, int currentDay, int fromMonth, int fromDay, int untilMonth, int untilDay) {
    MonthDay currentTime = MonthDay.of (currentMonth, currentDay);
    MonthDay startTime = MonthDay.of (fromMonth, fromDay);
    MonthDay endTime = MonthDay.of (untilMonth, untilDay);
    int startCompare = startTime.compareTo (endTime);
    int currentCompareStart = currentTime.compareTo (startTime);
    int currentCompareEnd = currentTime.compareTo (endTime);
    //check if the start comes before the end
    if (startCompare <= 0) {
        //returns true if current day is between start and end
        return (currentCompareStart >= 0) && (currentCompareEnd <= 0);
    //check if the end comes before the start    
    } else if (startCompare > 0) {
        //returns true if current day is before end and after start
        return (currentCompareEnd <= 0) || (currentCompareStart >= 0);
    } 
    
    //return false if all conditions fail
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
511
6
Gpt3D_Clone511_6.java 1 10
Gpt3D_Clone511_6.java 11 30
----------------------------------------

public static boolean isBetween (int currentMonth, int currentDay, int fromMonth, int fromDay, int untilMonth, int untilDay) {
    MonthDay current = MonthDay.of (currentMonth, currentDay);
    MonthDay from = MonthDay.of (fromMonth, fromDay);
    MonthDay until = MonthDay.of (untilMonth, untilDay);
    if (from.compareTo (until) <= 0) {
        return from.compareTo (current) <= 0 && current.compareTo (until) <= 0;
    } else {
        return current.compareTo (until) <= 0 || current.compareTo (from) >= 0;
    }
}
----------------------------------------

 public static boolean isBetween (int currentMonth, int currentDay, int fromMonth, int fromDay, int untilMonth, int untilDay) {
    MonthDay rightNow = MonthDay.of (currentMonth, currentDay);
    MonthDay startDate = MonthDay.of (fromMonth, fromDay);
    MonthDay finishDate = MonthDay.of (untilMonth, untilDay);
    int beginCompare = startDate.compareTo (finishDate);
    int currentStart = rightNow.compareTo (startDate);
    int currentFinish = rightNow.compareTo (finishDate);
    //if the start comes before the end
    if (beginCompare <= 0) {
         //return true if current falls between start and end
        return (currentStart >= 0) && (currentFinish <= 0);
    //if the end comes before the start    
    } else if (beginCompare > 0) {
        //return true if current falls before end or after start
        return (currentFinish <= 0) || (currentStart >= 0);
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
511
7
Gpt3D_Clone511_7.java 1 10
Gpt3D_Clone511_7.java 11 28
----------------------------------------

public static boolean isBetween (int currentMonth, int currentDay, int fromMonth, int fromDay, int untilMonth, int untilDay) {
    MonthDay current = MonthDay.of (currentMonth, currentDay);
    MonthDay from = MonthDay.of (fromMonth, fromDay);
    MonthDay until = MonthDay.of (untilMonth, untilDay);
    if (from.compareTo (until) <= 0) {
        return from.compareTo (current) <= 0 && current.compareTo (until) <= 0;
    } else {
        return current.compareTo (until) <= 0 || current.compareTo (from) >= 0;
    }
}
----------------------------------------

 public static boolean isBetween (int currentMonth, int currentDay, int fromMonth, int fromDay, int untilMonth, int untilDay) {
    MonthDay present = MonthDay.of (currentMonth, currentDay);
    MonthDay initial = MonthDay.of (fromMonth, fromDay);
    MonthDay last = MonthDay.of (untilMonth, untilDay);
    
    //swap the values of initial and last if last comes before initial
    if (initial.compareTo (last) > 0) {
        MonthDay temp = last;
        last = initial;
        initial = temp;
    }
    if (present.compareTo (initial) >= 0 && present.compareTo (last) <= 0) {
        return true;
    }
    else return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
511
8
Gpt3D_Clone511_8.java 1 10
Gpt3D_Clone511_8.java 11 26
----------------------------------------

public static boolean isBetween (int currentMonth, int currentDay, int fromMonth, int fromDay, int untilMonth, int untilDay) {
    MonthDay current = MonthDay.of (currentMonth, currentDay);
    MonthDay from = MonthDay.of (fromMonth, fromDay);
    MonthDay until = MonthDay.of (untilMonth, untilDay);
    if (from.compareTo (until) <= 0) {
        return from.compareTo (current) <= 0 && current.compareTo (until) <= 0;
    } else {
        return current.compareTo (until) <= 0 || current.compareTo (from) >= 0;
    }
}
----------------------------------------

 public static boolean isBetween (int currentMonth, int currentDay, int fromMonth, int fromDay, int untilMonth, int untilDay) {
    MonthDay now = MonthDay.of (currentMonth, currentDay);
    MonthDay start = MonthDay.of (fromMonth, fromDay);
    MonthDay end = MonthDay.of (untilMonth, untilDay);
    MonthDay temp; 
       
    if (start.compareTo (end) > 0) {  
        temp = start;  
        start = end;  
        end = temp;  
    }
      
    return now.compareTo (start) >= 0 && now.compareTo (end) <= 0; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
513
0
Gpt3D_Clone513_0.java 1 9
Gpt3D_Clone513_0.java 10 24
----------------------------------------

public void itemStateChanged (ItemEvent e) {
    size = Integer.parseInt ((String) box.getSelectedItem ());
    if (e.getStateChange () == ItemEvent.SELECTED) {
        for (i = 1; i <= size; i ++) {
            System.out.print (" " + i);
        }
        System.out.println ();
    }
}
----------------------------------------

	public void itemStateChanged (ItemEvent e) {
    size = Integer.parseInt ((String) box.getSelectedItem ());
    if (e.getStateChange () == ItemEvent.SELECTED) {
        for (int x=1; x<=size; x++) {
            System.out.print(x + " ");
            int y = x;
            while (y < size) {
                System.out.print(++y + " ");
            }
            System.out.println();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
513
1
Gpt3D_Clone513_1.java 1 9
Gpt3D_Clone513_1.java 10 23
----------------------------------------

public void itemStateChanged (ItemEvent e) {
    size = Integer.parseInt ((String) box.getSelectedItem ());
    if (e.getStateChange () == ItemEvent.SELECTED) {
        for (i = 1; i <= size; i ++) {
            System.out.print (" " + i);
        }
        System.out.println ();
    }
}
----------------------------------------

	public void itemStateChanged (ItemEvent e) {
    size = Integer.parseInt ((String) box.getSelectedItem ());
    if (e.getStateChange () == ItemEvent.SELECTED) {
        for (int i = 0; i < size; i++) {
            System.out.print((i+1) + " ");
            for (int j = i + 1; j < size; j++) {
            System.out.print((j+1) + " ");
            }
           System.out.println();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
513
2
Gpt3D_Clone513_2.java 1 9
Gpt3D_Clone513_2.java 10 23
----------------------------------------

public void itemStateChanged (ItemEvent e) {
    size = Integer.parseInt ((String) box.getSelectedItem ());
    if (e.getStateChange () == ItemEvent.SELECTED) {
        for (i = 1; i <= size; i ++) {
            System.out.print (" " + i);
        }
        System.out.println ();
    }
}
----------------------------------------

	public void itemStateChanged (ItemEvent e) {
    size = Integer.parseInt ((String) box.getSelectedItem ());
    String num_string = "";
    if (e.getStateChange () == ItemEvent.SELECTED) {
        for (int i = 1; i <= size; i ++) {
            num_string = i + num_string;
            if (i == size) 
                num_string = " " + num_string;
        }
        System.out.println (num_string);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
513
3
Gpt3D_Clone513_3.java 1 9
Gpt3D_Clone513_3.java 10 22
----------------------------------------

public void itemStateChanged (ItemEvent e) {
    size = Integer.parseInt ((String) box.getSelectedItem ());
    if (e.getStateChange () == ItemEvent.SELECTED) {
        for (i = 1; i <= size; i ++) {
            System.out.print (" " + i);
        }
        System.out.println ();
    }
}
----------------------------------------

	public void itemStateChanged (ItemEvent e) {
    size = Integer.parseInt ((String) box.getSelectedItem ());
    if (e.getStateChange () == ItemEvent.SELECTED) {
        String[] num_strings = new String[size];
        for (int i = 0; i < size; i++) {
            num_strings[i] = Integer.toString(i + 1);
        }
        String num_string = String.join(" ", num_strings);
        System.out.println(num_string);
    }  
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
513
5
Gpt3D_Clone513_5.java 1 9
Gpt3D_Clone513_5.java 10 21
----------------------------------------

public void itemStateChanged (ItemEvent e) {
    size = Integer.parseInt ((String) box.getSelectedItem ());
    if (e.getStateChange () == ItemEvent.SELECTED) {
        for (i = 1; i <= size; i ++) {
            System.out.print (" " + i);
        }
        System.out.println ();
    }
}
----------------------------------------

	public void itemStateChanged (ItemEvent e) {
    size = Integer.parseInt ((String) box.getSelectedItem ());
    String num_string = "";
    if (e.getStateChange () == ItemEvent.SELECTED) {
        for (int i = size; i > 0; i --) {
            num_string = num_string + " " + i;
        }
        System.out.println (num_string);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
518
0
Gpt3D_Clone518_0.java 1 12
Gpt3D_Clone518_0.java 13 30
----------------------------------------

static int search (int [] A, int K) {
    int l = 0;
    int u = A.length - 1;
    int m;
    while (l <= u) {
        m = (u - l) / 2 + l;
        if (A [m] < K) l = m + 1;
        else if (A [m] == K) return m;
        else u = m - 1;
    }
    return - 1;
}
----------------------------------------

  static int search (int [] A, int K) {
    int low = 0;
    int high = A.length - 1;
    int mid;
    while (low <= high) {
        mid = low + (high - low) / 2;
        if (A[mid] == K) {
            return mid;
        } else if (A[mid] < K) {
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }
    return -1;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
518
3
Gpt3D_Clone518_3.java 1 12
Gpt3D_Clone518_3.java 13 30
----------------------------------------

static int search (int [] A, int K) {
    int l = 0;
    int u = A.length - 1;
    int m;
    while (l <= u) {
        m = (u - l) / 2 + l;
        if (A [m] < K) l = m + 1;
        else if (A [m] == K) return m;
        else u = m - 1;
    }
    return - 1;
}
----------------------------------------

 static int search(int[] array, int K){
    int low = 0;
    int high = array.length - 1;
    int mid;
    while(low <= high){
        mid = low + (high - low) / 2;
        if(array[mid] < K){
            low = mid + 1;
        }else if(array[mid] == K){
            return mid;
        }else{
            high = mid - 1;
        }
    }
    return -1;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
518
9
Gpt3D_Clone518_9.java 1 12
Gpt3D_Clone518_9.java 13 30
----------------------------------------

static int search (int [] A, int K) {
    int l = 0;
    int u = A.length - 1;
    int m;
    while (l <= u) {
        m = (u - l) / 2 + l;
        if (A [m] < K) l = m + 1;
        else if (A [m] == K) return m;
        else u = m - 1;
    }
    return - 1;
}
----------------------------------------

 static int search(int[] arr, int K){
    int low = 0;
    int high = arr.length - 1;
    
    while(low <= high ){
        int mid = low + (high - low) / 2;
        if(arr[mid] == K){
            return mid;
        }else if(arr[mid] < K){
            low = mid + 1;
        }else{
            high = mid - 1;
        }
    }
    return -1;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
519
1
Gpt3D_Clone519_1.java 1 22
Gpt3D_Clone519_1.java 23 40
----------------------------------------

public void inOrder () {
    if (m_root == null) {
        return;
    }
    Stack < BSTNode > myStack = new Stack < BSTNode > ();
    BSTNode current = m_root;
    while (current != null) {
        myStack.push (current);
        current = current.getLeft ();
    }
    while (! myStack.isEmpty ()) {
        current = (BSTNode) myStack.pop ();
        System.out.print (current.getInfo () + " ");
        if (current.getRight () != null) {
            current = current.getRight ();
            while (current != null) {
                myStack.push (current);
                current = current.getLeft ();
            }
        }
    }
}
----------------------------------------

 public void inOrder() {
        if (m_root == null) {
            return;
        }
        BSTNode current = m_root;
        if (current != null)
	        inOrder(current);
    }
     
    private void inOrder(BSTNode root) {
        if (root == null) 
            return;
        inOrder(root.getLeft()); 
        System.out.print(root.getInfo() + " ");
        inOrder(root.getRight());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
519
2
Gpt3D_Clone519_2.java 1 22
Gpt3D_Clone519_2.java 23 40
----------------------------------------

public void inOrder () {
    if (m_root == null) {
        return;
    }
    Stack < BSTNode > myStack = new Stack < BSTNode > ();
    BSTNode current = m_root;
    while (current != null) {
        myStack.push (current);
        current = current.getLeft ();
    }
    while (! myStack.isEmpty ()) {
        current = (BSTNode) myStack.pop ();
        System.out.print (current.getInfo () + " ");
        if (current.getRight () != null) {
            current = current.getRight ();
            while (current != null) {
                myStack.push (current);
                current = current.getLeft ();
            }
        }
    }
}
----------------------------------------

 public void inOrder() {
        if (m_root == null) {
            return;
        }
        BSTNode current = m_root;
        if (current != null)
	        inOrder(current);
    }
     
    private void inOrder(BSTNode root) {
        if (root == null) 
            return;
        inOrder(root.getLeft()); 
        System.out.print(root.getInfo() + " ");
        inOrder(root.getRight());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
519
3
Gpt3D_Clone519_3.java 1 22
Gpt3D_Clone519_3.java 23 41
----------------------------------------

public void inOrder () {
    if (m_root == null) {
        return;
    }
    Stack < BSTNode > myStack = new Stack < BSTNode > ();
    BSTNode current = m_root;
    while (current != null) {
        myStack.push (current);
        current = current.getLeft ();
    }
    while (! myStack.isEmpty ()) {
        current = (BSTNode) myStack.pop ();
        System.out.print (current.getInfo () + " ");
        if (current.getRight () != null) {
            current = current.getRight ();
            while (current != null) {
                myStack.push (current);
                current = current.getLeft ();
            }
        }
    }
}
----------------------------------------

 public void inOrder() {
        if (m_root == null) {
            return;
        }
        BSTNode current = m_root;
        inOrder(current);
    }
     
    private void inOrder(BSTNode root) { 
		String str="";
        if (root == null) 
            return;		
        str+=Integer.toString(root.getInfo());
        inOrder(root.getLeft()); 
        System.out.print(str + " ");
        inOrder(root.getRight());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
519
4
Gpt3D_Clone519_4.java 1 22
Gpt3D_Clone519_4.java 23 41
----------------------------------------

public void inOrder () {
    if (m_root == null) {
        return;
    }
    Stack < BSTNode > myStack = new Stack < BSTNode > ();
    BSTNode current = m_root;
    while (current != null) {
        myStack.push (current);
        current = current.getLeft ();
    }
    while (! myStack.isEmpty ()) {
        current = (BSTNode) myStack.pop ();
        System.out.print (current.getInfo () + " ");
        if (current.getRight () != null) {
            current = current.getRight ();
            while (current != null) {
                myStack.push (current);
                current = current.getLeft ();
            }
        }
    }
}
----------------------------------------

 public void inOrder() {
        if (m_root == null) {
            return;
        }
        BSTNode current = m_root;
        inOrder(current);
    }
     
    private void inOrder(BSTNode root) { 
		String str="";
        if (root == null) 
            return;		
        inOrder(root.getLeft()); 
        str+=Integer.toString(root.getInfo());
        System.out.print(str + " ");
        inOrder(root.getRight());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
520
0
Gpt3D_Clone520_0.java 1 9
Gpt3D_Clone520_0.java 10 28
----------------------------------------

private byte [] readData (File f, int startByte, int chunkSize) throws Exception {
    RandomAccessFile raf = new RandomAccessFile (f, "r");
    raf.seek (startByte);
    byte [] data = new byte [chunkSize];
    int read = raf.read (data);
    raf.close ();
    if (read == data.length) return data;
    else return Arrays.copyOf (data, read);
}
----------------------------------------

    private byte [] readData (File f, int startByte, int chunkSize) throws Exception {
    FileInputStream fis = new FileInputStream(f);
    int position = (int)startByte;
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    int size = (int)(f.length() - startByte);
    int readSize;
    size = Math.min(size, chunkSize);
    byte[] buff = new byte[size];
    while ( (readSize = fis.read(buff, position, size)) != -1 ) {
    baos.write(buff, 0, readSize);
    size -= readSize;
    position += readSize;
    if ( size <= 0 ) break;
    }
    fis.close();
    return baos.toByteArray();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
520
1
Gpt3D_Clone520_1.java 1 9
Gpt3D_Clone520_1.java 10 27
----------------------------------------

private byte [] readData (File f, int startByte, int chunkSize) throws Exception {
    RandomAccessFile raf = new RandomAccessFile (f, "r");
    raf.seek (startByte);
    byte [] data = new byte [chunkSize];
    int read = raf.read (data);
    raf.close ();
    if (read == data.length) return data;
    else return Arrays.copyOf (data, read);
}
----------------------------------------

    private byte [] readData (File f, int startByte, int chunkSize) throws Exception {
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    FileInputStream fis = new FileInputStream(f);
    fis.skip(startByte);
    int size = (int)(f.length() - startByte);
    int readSize;
    size = Math.min(size, chunkSize);
    byte[] buff = new byte[size];
    while ( (readSize = fis.read(buff)) != -1 ) {
    baos.write(buff, 0, readSize);
    size -= readSize;
    if ( size <= 0 ) break;
    }
    fis.close();
    return baos.toByteArray();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
520
2
Gpt3D_Clone520_2.java 1 9
Gpt3D_Clone520_2.java 10 28
----------------------------------------

private byte [] readData (File f, int startByte, int chunkSize) throws Exception {
    RandomAccessFile raf = new RandomAccessFile (f, "r");
    raf.seek (startByte);
    byte [] data = new byte [chunkSize];
    int read = raf.read (data);
    raf.close ();
    if (read == data.length) return data;
    else return Arrays.copyOf (data, read);
}
----------------------------------------

    private byte [] readData (String path, int startByte, int chunkSize) throws Exception {
    FileChannel fc = new RandomAccessFile(new File(path), "r").getChannel();
    ByteBuffer buff = ByteBuffer.allocate(chunkSize);
    fc.position(startByte);
    int readSize = fc.read(buff);
    fc.close();
    if (readSize == chunkSize) {
        buff.flip();
        return buff.array();
    }
    else {
        buff.limit(readSize);
        byte[] data = new byte[readSize];
        buff.get(data);
        return data;
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
520
3
Gpt3D_Clone520_3.java 1 9
Gpt3D_Clone520_3.java 10 24
----------------------------------------

private byte [] readData (File f, int startByte, int chunkSize) throws Exception {
    RandomAccessFile raf = new RandomAccessFile (f, "r");
    raf.seek (startByte);
    byte [] data = new byte [chunkSize];
    int read = raf.read (data);
    raf.close ();
    if (read == data.length) return data;
    else return Arrays.copyOf (data, read);
}
----------------------------------------

    private byte [] readData (File f, int startByte, int chunkSize) throws Exception {
    byte[] output = new byte[chunkSize];
    int position = 0;
    try(RandomAccessFile ra = new RandomAccessFile(f, "r")) {
        ra.seek( startByte );
        int resultSize = ra.read(output);
        if (resultSize < chunkSize) {
            return Arrays.copyOf(output, resultSize);
        }
    }
    return output;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
520
7
Gpt3D_Clone520_7.java 1 9
Gpt3D_Clone520_7.java 10 19
----------------------------------------

private byte [] readData (File f, int startByte, int chunkSize) throws Exception {
    RandomAccessFile raf = new RandomAccessFile (f, "r");
    raf.seek (startByte);
    byte [] data = new byte [chunkSize];
    int read = raf.read (data);
    raf.close ();
    if (read == data.length) return data;
    else return Arrays.copyOf (data, read);
}
----------------------------------------

   private byte [] readData (File f, int startByte, int chunkSize) throws Exception {
  SeekableByteChannel sbc = Files.newByteChannel(f.toPath(), EnumSet.of(StandardOpenOption.READ));
  byte data[] = new byte[(int)f.length()];
  sbc.position(startByte);
  sbc.read(ByteBuffer.wrap(data, 0, chunkSize));
  sbc.close();
  return data;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
520
8
Gpt3D_Clone520_8.java 1 9
Gpt3D_Clone520_8.java 10 18
----------------------------------------

private byte [] readData (File f, int startByte, int chunkSize) throws Exception {
    RandomAccessFile raf = new RandomAccessFile (f, "r");
    raf.seek (startByte);
    byte [] data = new byte [chunkSize];
    int read = raf.read (data);
    raf.close ();
    if (read == data.length) return data;
    else return Arrays.copyOf (data, read);
}
----------------------------------------

    private byte [] readData (File f, int startByte, int chunkSize) throws Exception {
  FileChannel fc = new RandomAccessFile(f, "r").getChannel();
  ByteBuffer bb = ByteBuffer.allocate(chunkSize);
  int numBytesRead = fc.read(bb,  startByte);
  fc.close();
  return readBytes(bb, numBytesRead);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
520
9
Gpt3D_Clone520_9.java 1 9
Gpt3D_Clone520_9.java 10 19
----------------------------------------

private byte [] readData (File f, int startByte, int chunkSize) throws Exception {
    RandomAccessFile raf = new RandomAccessFile (f, "r");
    raf.seek (startByte);
    byte [] data = new byte [chunkSize];
    int read = raf.read (data);
    raf.close ();
    if (read == data.length) return data;
    else return Arrays.copyOf (data, read);
}
----------------------------------------

    private byte [] readData(String filename, int startByte, int chunkSize) throws Exception {
    Path path = Paths.get(filename);
    byte[] bytes = Files.readAllBytes(path); 
    if (startByte+chunkSize<=bytes.length) 
        return Arrays.copyOfRange(bytes, startByte, startByte+chunkSize); 
    else
        return Arrays.copyOfRange(bytes, startByte, bytes.length);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
524
0
Gpt3D_Clone524_0.java 1 15
Gpt3D_Clone524_0.java 16 34
----------------------------------------

public static String decrypt (final String msg) {
    final Pattern regex = Pattern.compile ("((\\d\\d)(#)|(\\d))");
    final Matcher regexMatcher = regex.matcher (msg);
    final StringBuffer result = new StringBuffer ();
    String c;
    while (regexMatcher.find ()) {
        if (regexMatcher.group (2) == null) {
            c = regexMatcher.group (1);
        } else {
            c = regexMatcher.group (2);
        }
        result.append ((char) ((Integer.parseInt (c) + 'a') - 1));
    }
    return result.toString ();
}
----------------------------------------

 public static String decrypt(final String msg) {
    Pattern pattern = Pattern.compile("(\\d(\\d#)?)");
    Matcher matcher = pattern.matcher(msg);
    StringBuilder decryptedMessage = new StringBuilder();
    while (matcher.find()) {
        String matchedString = matcher.group(0);
        String substring;
        if (matchedString.length() == 3) {
            substring = matchedString.substring(0,2);
        } else {
            substring = matchedString.substring(0,1);
        }
        char decryptionChar = (char) (Integer.parseInt(substring) + 'a' - 1);
        decryptedMessage.append(decryptionChar);
    }
    return decryptedMessage.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
524
1
Gpt3D_Clone524_1.java 1 15
Gpt3D_Clone524_1.java 16 34
----------------------------------------

public static String decrypt (final String msg) {
    final Pattern regex = Pattern.compile ("((\\d\\d)(#)|(\\d))");
    final Matcher regexMatcher = regex.matcher (msg);
    final StringBuffer result = new StringBuffer ();
    String c;
    while (regexMatcher.find ()) {
        if (regexMatcher.group (2) == null) {
            c = regexMatcher.group (1);
        } else {
            c = regexMatcher.group (2);
        }
        result.append ((char) ((Integer.parseInt (c) + 'a') - 1));
    }
    return result.toString ();
}
----------------------------------------

 public static String decrypt(final String msg) {
    Pattern pattern = Pattern.compile("(\\d(\\d#)?)");
   Matcher matcher = pattern.matcher(msg);
    StringBuilder decryptedMessage = new StringBuilder();
    while (matcher.find()) {
        String matchedString = matcher.group(0);
        String substring;
        if (matchedString.length() == 3) {
            substring = matchedString.substring(0,2);
        } else {
            substring = matchedString.substring(0,1);
        }
        int decryptionNum = Integer.parseInt(substring) + 'a' - 1;
        decryptedMessage.append((char) decryptionNum);
    }
    return decryptedMessage.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
524
2
Gpt3D_Clone524_2.java 1 15
Gpt3D_Clone524_2.java 16 34
----------------------------------------

public static String decrypt (final String msg) {
    final Pattern regex = Pattern.compile ("((\\d\\d)(#)|(\\d))");
    final Matcher regexMatcher = regex.matcher (msg);
    final StringBuffer result = new StringBuffer ();
    String c;
    while (regexMatcher.find ()) {
        if (regexMatcher.group (2) == null) {
            c = regexMatcher.group (1);
        } else {
            c = regexMatcher.group (2);
        }
        result.append ((char) ((Integer.parseInt (c) + 'a') - 1));
    }
    return result.toString ();
}
----------------------------------------

 public static String decrypt(final String msg) {
    String message = "";
    char[] split_msg = msg.toCharArray();
    for (int i = 0; i < split_msg.length; i++) {
        int character = 0;
        if (split_msg[i] == '#') {
            character = Integer.parseInt(split_msg[i - 2] + "" + split_msg[i - 1]) - 1 + 'a';
        } else if (split_msg[i] >= '0' && split_msg[i] <= '9') {
            character = (split_msg[i] - '0') + 'a' - 1;
        }
        if (character > 0) {
            message += (char) character;
        }
    }
    return message;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
524
5
Gpt3D_Clone524_5.java 1 15
Gpt3D_Clone524_5.java 16 33
----------------------------------------

public static String decrypt (final String msg) {
    final Pattern regex = Pattern.compile ("((\\d\\d)(#)|(\\d))");
    final Matcher regexMatcher = regex.matcher (msg);
    final StringBuffer result = new StringBuffer ();
    String c;
    while (regexMatcher.find ()) {
        if (regexMatcher.group (2) == null) {
            c = regexMatcher.group (1);
        } else {
            c = regexMatcher.group (2);
        }
        result.append ((char) ((Integer.parseInt (c) + 'a') - 1));
    }
    return result.toString ();
}
----------------------------------------

 public static String decrypt(final String msg) {
    String message = "";
    int j = 0;
    for (int i = 0; i < msg.length(); i++, j++) {
        if (msg.charAt(i) == '#' && (i > 1 && i < msg.length())) {
            String period = msg.substring((i - 2), i);
            int key = Integer.parseInt(period) - 1 + 'a';
            message += (char) key;
        } else if (msg.charAt(i) >= '0' && msg.charAt(i) <= '9' && j < 2) {
            int key = (msg.charAt(i) - '0') + 'a' - 1;
            message += (char) key;
        }
    }
    return message;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
524
6
Gpt3D_Clone524_6.java 1 15
Gpt3D_Clone524_6.java 16 29
----------------------------------------

public static String decrypt (final String msg) {
    final Pattern regex = Pattern.compile ("((\\d\\d)(#)|(\\d))");
    final Matcher regexMatcher = regex.matcher (msg);
    final StringBuffer result = new StringBuffer ();
    String c;
    while (regexMatcher.find ()) {
        if (regexMatcher.group (2) == null) {
            c = regexMatcher.group (1);
        } else {
            c = regexMatcher.group (2);
        }
        result.append ((char) ((Integer.parseInt (c) + 'a') - 1));
    }
    return result.toString ();
}
----------------------------------------

 public static String decrypt(final String msg) {
    Pattern pattern = Pattern.compile("((\\d+)(#)|(\\d))");
    Matcher matcher = pattern.matcher(msg);
    StringBuffer sb = new StringBuffer();
    while (matcher.find()) {
        String c;
        c = matcher.group(2) == null ? matcher.group(1) : matcher.group(2);
        char character = (char) ((Integer.parseInt(c) + 'a') - 1);
        sb.append(character);
    }
    return sb.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
524
7
Gpt3D_Clone524_7.java 1 15
Gpt3D_Clone524_7.java 16 28
----------------------------------------

public static String decrypt (final String msg) {
    final Pattern regex = Pattern.compile ("((\\d\\d)(#)|(\\d))");
    final Matcher regexMatcher = regex.matcher (msg);
    final StringBuffer result = new StringBuffer ();
    String c;
    while (regexMatcher.find ()) {
        if (regexMatcher.group (2) == null) {
            c = regexMatcher.group (1);
        } else {
            c = regexMatcher.group (2);
        }
        result.append ((char) ((Integer.parseInt (c) + 'a') - 1));
    }
    return result.toString ();
}
----------------------------------------

 public static String decrypt(final String msg) {
    String message = "";
    String[] split_msg = msg.split("(#)|(\\d\\d)");
    for (int i = 0; i < split_msg.length; i++) {
        if (split_msg[i] != "") {
            char c = (char) (Integer.parseInt(split_msg[i]) + 'a' - 1);
            message += c;
        }
    }
    return message;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
526
5
Gpt3D_Clone526_5.java 1 28
Gpt3D_Clone526_5.java 29 54
----------------------------------------

private static String decrypt (final String s) {
    final List < Integer > crypt = new ArrayList < > ();
    final String [] groups = s.split ("#");
    for (int i = 0;
    i < groups.length; i ++) {
        final String group = groups [i];
        int j = 0;
        if ((i == (groups.length - 1)) && ! s.endsWith ("#")) {
            j = group.length ();
        }
        if (group.length () > 2) {
            j = group.length () - 2;
        }
        for (int k = 0;
        k < j; k ++) {
            crypt.add (Integer.valueOf (group.substring (k, k + 1)));
        }
        if (j < group.length ()) {
            crypt.add (Integer.valueOf (group.substring (j, group.length ())));
        }
    }
    final StringBuilder n = new StringBuilder (crypt.size ());
    for (final Integer c : crypt) {
        final char d = (char) (('a' + c) - 1);
        n.append (d);
    }
    return n.toString ();
}
----------------------------------------

 private static String decrypt(final String s) {
    List < Integer > crypt = new ArrayList < > ();
    String[] groups = s.split("#");
    for (int i = 0; i < groups.length; i++) {
        String group = groups[i];
        int j = 0;
        if (i == (groups.length - 1) && !s.endsWith("#")) {
            j = group.length() - 1;
        } else if (group.length() > 2) {
            j = group.length() - 2;
        }
        for (int k = 0; k < j; k++) {
            crypt.add(Integer.valueOf(group.substring(k, k + 1)));
        }
        if (j < group.length()) {
            crypt.add(Integer.valueOf(group.substring(j, group.length())));
        }
    }
    StringBuilder n = new StringBuilder(crypt.size());
    for (Integer c : crypt) {
        n.append((char)(('a' + c) - 1));
    }
    return n.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
526
6
Gpt3D_Clone526_6.java 1 28
Gpt3D_Clone526_6.java 29 54
----------------------------------------

private static String decrypt (final String s) {
    final List < Integer > crypt = new ArrayList < > ();
    final String [] groups = s.split ("#");
    for (int i = 0;
    i < groups.length; i ++) {
        final String group = groups [i];
        int j = 0;
        if ((i == (groups.length - 1)) && ! s.endsWith ("#")) {
            j = group.length ();
        }
        if (group.length () > 2) {
            j = group.length () - 2;
        }
        for (int k = 0;
        k < j; k ++) {
            crypt.add (Integer.valueOf (group.substring (k, k + 1)));
        }
        if (j < group.length ()) {
            crypt.add (Integer.valueOf (group.substring (j, group.length ())));
        }
    }
    final StringBuilder n = new StringBuilder (crypt.size ());
    for (final Integer c : crypt) {
        final char d = (char) (('a' + c) - 1);
        n.append (d);
    }
    return n.toString ();
}
----------------------------------------

 private static String decrypt(final String s) {
    List<Integer> crypt = new ArrayList<>();
    String[] groups = s.split("#");
    for (int i = 0; i < groups.length; i++) {
        String group = groups[i];
        int maximumLength = group.length();
        if (i == groups.length - 1 && !s.endsWith("#")) {
            maximumLength = group.length() - 1;
        } else if (group.length() > 2) {
            maximumLength = group.length() - 2;
        }
        for (int j = 0; j < maximumLength; j++) {
            crypt.add(Integer.valueOf(group.substring(j, j + 1)));
        }
        if (maximumLength < group.length()) {
            crypt.add(Integer.valueOf(group.substring(maximumLength, group.length())));
        }
    }
    StringBuilder n = new StringBuilder(crypt.size());
    for (Integer c : crypt) {
        n.append((char)(('a' + c) - 1));
    }
    return n.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
526
7
Gpt3D_Clone526_7.java 1 28
Gpt3D_Clone526_7.java 29 49
----------------------------------------

private static String decrypt (final String s) {
    final List < Integer > crypt = new ArrayList < > ();
    final String [] groups = s.split ("#");
    for (int i = 0;
    i < groups.length; i ++) {
        final String group = groups [i];
        int j = 0;
        if ((i == (groups.length - 1)) && ! s.endsWith ("#")) {
            j = group.length ();
        }
        if (group.length () > 2) {
            j = group.length () - 2;
        }
        for (int k = 0;
        k < j; k ++) {
            crypt.add (Integer.valueOf (group.substring (k, k + 1)));
        }
        if (j < group.length ()) {
            crypt.add (Integer.valueOf (group.substring (j, group.length ())));
        }
    }
    final StringBuilder n = new StringBuilder (crypt.size ());
    for (final Integer c : crypt) {
        final char d = (char) (('a' + c) - 1);
        n.append (d);
    }
    return n.toString ();
}
----------------------------------------

 private static String decrypt(final String s) {
    List<Integer> crypt = new ArrayList<>();
    String[] groups = s.split("#");
    for (int i = 0; i < groups.length; i++) {
        String group = groups[i];
        int maxLength = (i == (groups.length - 1) && !s.endsWith("#") ?  group.length() - 1 : group.length());
        for (int j = 0; j < maxLength; j++) {
            crypt.add(Integer.valueOf(group.substring(j, j + 1)));
         }
        if (maxLength < group.length()) {
            crypt.add(Integer.valueOf(group.substring(maxLength, group.length())));
        }
    }
    StringBuilder n = new StringBuilder(crypt.size());
    for (Integer c : crypt) {
        n.append((char)(('a' + c) - 1));
    }
    return n.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
527
1
Gpt3D_Clone527_1.java 1 10
Gpt3D_Clone527_1.java 11 24
----------------------------------------

public void refund (int balance) {
    while (balance >= 10) {
        System.out.println ("Balance: " + balance);
        balance -= 10;
    }
    while (balance >= 0) {
        System.out.println ("Balance: " + balance);
        balance -= 1;
    }
}
----------------------------------------

  public void refund (int balance) {
    if (balance >= 10) {
        for (int i=balance; i>=10; i-=10) {
            System.out.println("Balance: " + i);
            balance -= 10;
        }
    }
    int numRefunds = balance; 
    for(int i = 0; i < numRefunds; i++) {
        System.out.println("Balance: " + (balance - i));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
527
2
Gpt3D_Clone527_2.java 1 10
Gpt3D_Clone527_2.java 11 23
----------------------------------------

public void refund (int balance) {
    while (balance >= 10) {
        System.out.println ("Balance: " + balance);
        balance -= 10;
    }
    while (balance >= 0) {
        System.out.println ("Balance: " + balance);
        balance -= 1;
    }
}
----------------------------------------

  public void refund (int balance) {
    while(balance > 0) {
        if (balance >= 10) { 
            System.out.println("Balance: " + (balance-10));
            balance -= 10; 
        } else {
            System.out.println("Balance: " + balance);
            balance--;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
527
3
Gpt3D_Clone527_3.java 1 10
Gpt3D_Clone527_3.java 11 23
----------------------------------------

public void refund (int balance) {
    while (balance >= 10) {
        System.out.println ("Balance: " + balance);
        balance -= 10;
    }
    while (balance >= 0) {
        System.out.println ("Balance: " + balance);
        balance -= 1;
    }
}
----------------------------------------

  public void refund (int balance) {
    if (balance >= 10) {
        for (int i=balance; i>=10; i-=10) {
            System.out.println ("Balance: " + i);
        }
    }
    while (balance > 0) {
        System.out.println ("Balance: " + balance);
        balance--;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
527
7
Gpt3D_Clone527_7.java 1 10
Gpt3D_Clone527_7.java 11 19
----------------------------------------

public void refund (int balance) {
    while (balance >= 10) {
        System.out.println ("Balance: " + balance);
        balance -= 10;
    }
    while (balance >= 0) {
        System.out.println ("Balance: " + balance);
        balance -= 1;
    }
}
----------------------------------------

 public void refund (int balance) { 
    while (balance > 0) { 
        int amount = Math.min(10, balance); 
        balance-=amount; 
        System.out.println("Balance: " + balance); 
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
527
8
Gpt3D_Clone527_8.java 1 10
Gpt3D_Clone527_8.java 11 24
----------------------------------------

public void refund (int balance) {
    while (balance >= 10) {
        System.out.println ("Balance: " + balance);
        balance -= 10;
    }
    while (balance >= 0) {
        System.out.println ("Balance: " + balance);
        balance -= 1;
    }
}
----------------------------------------

  public void refund (int balance) {
    for(int i=balance;i>=0;i-=10)
    {
        if(i>=10)
            System.out.println("Balance: "+i);
    }
    for(int i=balance;i>0;i--)
    {
        System.out.println("Balance: "+i);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
527
9
Gpt3D_Clone527_9.java 1 10
Gpt3D_Clone527_9.java 11 18
----------------------------------------

public void refund (int balance) {
    while (balance >= 10) {
        System.out.println ("Balance: " + balance);
        balance -= 10;
    }
    while (balance >= 0) {
        System.out.println ("Balance: " + balance);
        balance -= 1;
    }
}
----------------------------------------

  public void refund (int balance) {
    while (balance >= 0) {
        System.out.println("Balance: " + Math.max(balance,10));
        balance -= 10;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
528
0
Gpt3D_Clone528_0.java 1 9
Gpt3D_Clone528_0.java 10 46
----------------------------------------

public View getView (int position, View convertView, ViewGroup parent) {
    convertView = mInflater.inflate (R.layout.listview_row, null);
    TextView tvTimer = (TextView) convertView.findViewById (R.id.textview_timer);
    TextView tvName = (TextView) convertView.findViewById (R.id.textview_name);
    Item item = data.get (position);
    tvName.setText (item.getName ());
    myTimer.setTimer (tvTimer, item.getTime ());
    return convertView;
}
----------------------------------------

  public View getView (int position, View convertView, ViewGroup parent) {
    if (convertView == null) {
        convertView = mInflater.inflate(R.layout.listview_row,parent, false);
    }
    ViewHolder holder;
    holder = (ViewHolder) convertView.getTag();
    if(holder == null) {
        holder = new ViewHolder();
        holder.tvName = (TextView) convertView.findViewById (R.id.textview_name);
        holder.tvTimer = (TextView) convertView.findViewById (R.id.textview_timer);
        convertView.setTag(holder);
    }
    Item item = data.get (position);
    holder.tvName.setText (item.getName ());
     myTimer.setTimer (holder.tvTimer, item.getTime ());
    return convertView;
   }
 public View getView (int position, View convertView, ViewGroup parent) {
    if(convertView == null) {
        convertView = mInflater.inflate(R.layout.listview_row, parent, false);
        ViewHolder holder = new ViewHolder();
        holder.tvName = (TextView) convertView.findViewById(R.id.textview_name);
        holder.tvTimer = (TextView) convertView.findViewById(R.id.textview_timer);
        convertView.setTag(holder);
    }
    ViewHolder holder = (ViewHolder) convertView.getTag();
    Item item = data.get (position);
    holder.tvName.setText (item.getName ());
    myTimer.setTimer (holder.tvTimer, item.getTime ());
    return convertView;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
528
1
Gpt3D_Clone528_1.java 1 9
Gpt3D_Clone528_1.java 10 56
----------------------------------------

public View getView (int position, View convertView, ViewGroup parent) {
    convertView = mInflater.inflate (R.layout.listview_row, null);
    TextView tvTimer = (TextView) convertView.findViewById (R.id.textview_timer);
    TextView tvName = (TextView) convertView.findViewById (R.id.textview_name);
    Item item = data.get (position);
    tvName.setText (item.getName ());
    myTimer.setTimer (tvTimer, item.getTime ());
    return convertView;
}
----------------------------------------

 public View getView (int position, View convertView, ViewGroup parent) {
    if(convertView == null) {
        convertView = mInflater.inflate (R.layout.listview_row, parent, false);
        TextView tvName = (TextView) convertView.findViewById (R.id.textview_name);
        TextView tvTimer = (TextView) convertView.findViewById (R.id.textview_timer);
        convertView.setTag(tvName);
        convertView.setTag(tvTimer);
    }
    Item item = data.get (position);
    tvName.setText (item.getName ());
    myTimer.setTimer (tvTimer, item.getTime ());
    return convertView;
    }
  public View getView (int position, View convertView, ViewGroup parent) {
    convertView = mInflater.inflate (R.layout.listview_row, parent, false);
    ViewHolder holder;
    if (holder == null) {
        holder = new ViewHolder();
        holder.tvName = (TextView) convertView.findViewById(R.id.textview_name);
        holder.tvTimer = (TextView) convertView.findViewById(R.id.textview_timer);
        convertView.setTag(holder);
    } else {
        holder = (ViewHolder) convertView.getTag();
    }
    Item item = data.get (position);
    holder.tvName.setText (item.getName ());
     myTimer.setTimer (holder.tvTimer, item.getTime ());
    return convertView;
   }
  public View getView (int position, View convertView, ViewGroup parent) {
     convertView = mInflater.inflate (R.layout.listview_row, null);
    ViewHolder holder;
    holder = new ViewHolder();
    holder.tvTimer = (TextView) convertView.findViewById (R.id.textview_timer);
    holder.tvName = (TextView) convertView.findViewById (R.id.textview_name);
    Item item = data.get (position);
    holder.tvName.setText (item.getName ());
    myTimer.setTimer (holder.tvTimer, item.getTime ());
    convertView.setTag(holder);
    return convertView;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
528
2
Gpt3D_Clone528_2.java 1 9
Gpt3D_Clone528_2.java 10 46
----------------------------------------

public View getView (int position, View convertView, ViewGroup parent) {
    convertView = mInflater.inflate (R.layout.listview_row, null);
    TextView tvTimer = (TextView) convertView.findViewById (R.id.textview_timer);
    TextView tvName = (TextView) convertView.findViewById (R.id.textview_name);
    Item item = data.get (position);
    tvName.setText (item.getName ());
    myTimer.setTimer (tvTimer, item.getTime ());
    return convertView;
}
----------------------------------------

  public View getView (int position, View convertView, ViewGroup parent) {
    if (convertView == null) {
        convertView = mInflater.inflate(R.layout.listview_row,parent, false);
    }
    ViewHolder holder;
    holder = (ViewHolder) convertView.getTag();
    if(holder == null) {
        holder = new ViewHolder();
        holder.tvName = (TextView) convertView.findViewById (R.id.textview_name);
        holder.tvTimer = (TextView) convertView.findViewById (R.id.textview_timer);
        convertView.setTag(holder);
    }
    Item item = data.get (position);
    holder.tvName.setText (item.getName ());
     myTimer.setTimer (holder.tvTimer, item.getTime ());
    return convertView;
   }
 public View getView (int position, View convertView, ViewGroup parent) {
    if(convertView == null) {
        convertView = mInflater.inflate(R.layout.listview_row, parent, false);
        ViewHolder holder = new ViewHolder();
        holder.tvName = (TextView) convertView.findViewById(R.id.textview_name);
        holder.tvTimer = (TextView) convertView.findViewById(R.id.textview_timer);
        convertView.setTag(holder);
    }
    ViewHolder holder = (ViewHolder) convertView.getTag();
    Item item = data.get (position);
    holder.tvName.setText (item.getName ());
    myTimer.setTimer (holder.tvTimer, item.getTime ());
    return convertView;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
528
4
Gpt3D_Clone528_4.java 1 9
Gpt3D_Clone528_4.java 10 56
----------------------------------------

public View getView (int position, View convertView, ViewGroup parent) {
    convertView = mInflater.inflate (R.layout.listview_row, null);
    TextView tvTimer = (TextView) convertView.findViewById (R.id.textview_timer);
    TextView tvName = (TextView) convertView.findViewById (R.id.textview_name);
    Item item = data.get (position);
    tvName.setText (item.getName ());
    myTimer.setTimer (tvTimer, item.getTime ());
    return convertView;
}
----------------------------------------

 public View getView (int position, View convertView, ViewGroup parent) {
    if(convertView == null) {
        convertView = mInflater.inflate (R.layout.listview_row, parent, false);
        TextView tvName = (TextView) convertView.findViewById (R.id.textview_name);
        TextView tvTimer = (TextView) convertView.findViewById (R.id.textview_timer);
        convertView.setTag(tvName);
        convertView.setTag(tvTimer);
    }
    Item item = data.get (position);
    tvName.setText (item.getName ());
    myTimer.setTimer (tvTimer, item.getTime ());
    return convertView;
    }
  public View getView (int position, View convertView, ViewGroup parent) {
    convertView = mInflater.inflate (R.layout.listview_row, parent, false);
    ViewHolder holder;
    if (holder == null) {
        holder = new ViewHolder();
        holder.tvName = (TextView) convertView.findViewById(R.id.textview_name);
        holder.tvTimer = (TextView) convertView.findViewById(R.id.textview_timer);
        convertView.setTag(holder);
    } else {
        holder = (ViewHolder) convertView.getTag();
    }
    Item item = data.get (position);
    holder.tvName.setText (item.getName ());
     myTimer.setTimer (holder.tvTimer, item.getTime ());
    return convertView;
   }
  public View getView (int position, View convertView, ViewGroup parent) {
     convertView = mInflater.inflate (R.layout.listview_row, null);
    ViewHolder holder;
    holder = new ViewHolder();
    holder.tvTimer = (TextView) convertView.findViewById (R.id.textview_timer);
    holder.tvName = (TextView) convertView.findViewById (R.id.textview_name);
    Item item = data.get (position);
    holder.tvName.setText (item.getName ());
    myTimer.setTimer (holder.tvTimer, item.getTime ());
    convertView.setTag(holder);
    return convertView;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
529
0
Gpt3D_Clone529_0.java 1 12
Gpt3D_Clone529_0.java 13 32
----------------------------------------

public void run () {
    try {
        int retValue = pro.waitFor ();
        println ("Command exit with return value " + retValue);
        outStream.close ();
        outStream = null;
    } catch (InterruptedException e) {
        e.printStackTrace ();
    } catch (IOException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

 public void run() {
    try {
        int retValue = pro.waitFor();
        System.out.println("Command exit with return value " + retValue);
    } catch (InterruptedException e) {
        e.printStackTrace();
    } finally {
        if (outStream != null) {
            try {
                outStream.close();
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                outStream = null;
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
529
1
Gpt3D_Clone529_1.java 1 12
Gpt3D_Clone529_1.java 13 29
----------------------------------------

public void run () {
    try {
        int retValue = pro.waitFor ();
        println ("Command exit with return value " + retValue);
        outStream.close ();
        outStream = null;
    } catch (InterruptedException e) {
        e.printStackTrace ();
    } catch (IOException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

 public void run() {
    int retVal;
    try {
        retVal = pro.waitFor();
        if (outStream != null) {
            outStream.close();
        }
    } catch (InterruptedException | IOException e) {
        System.err.println("Encountered error while running the command " + e.getMessage());
        return;
    } finally {
        System.out.println("Command exited with return value " + retVal);
        outStream = null;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
529
2
Gpt3D_Clone529_2.java 1 12
Gpt3D_Clone529_2.java 13 29
----------------------------------------

public void run () {
    try {
        int retValue = pro.waitFor ();
        println ("Command exit with return value " + retValue);
        outStream.close ();
        outStream = null;
    } catch (InterruptedException e) {
        e.printStackTrace ();
    } catch (IOException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

 public void run() {
    int value;
    try {
        value = pro.waitFor();
        if (outStream != null) {
            outStream.close();
        }
        print("Command exited with return value " + value);
    } catch (InterruptedException | IOException ex) {
        System.err.println("Encountered error " + ex.getMessage());
    } finally {
        outStream = null;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
529
3
Gpt3D_Clone529_3.java 1 12
Gpt3D_Clone529_3.java 13 28
----------------------------------------

public void run () {
    try {
        int retValue = pro.waitFor ();
        println ("Command exit with return value " + retValue);
        outStream.close ();
        outStream = null;
    } catch (InterruptedException e) {
        e.printStackTrace ();
    } catch (IOException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

 public void run() {
    int retVal = 0;
    try {
        retVal = pro.waitFor();
        if (outStream != null) {
            outStream.close();
            outStream = null;
        }
    } catch (InterruptedException | IOException e) {
        e.printStackTrace();
        System.err.println("Encountered error while running the command: " + e.getMessage());
    } 
    System.out.println("Command exited with return value " + retVal);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
529
4
Gpt3D_Clone529_4.java 1 12
Gpt3D_Clone529_4.java 13 31
----------------------------------------

public void run () {
    try {
        int retValue = pro.waitFor ();
        println ("Command exit with return value " + retValue);
        outStream.close ();
        outStream = null;
    } catch (InterruptedException e) {
        e.printStackTrace ();
    } catch (IOException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

 public void run() {
    int retValue = 0;
    try {
        retValue = pro.waitFor();
        if (outStream != null) {
            outStream.close();
        }
    } catch (InterruptedException | IOException e) {
        e.printStackTrace();
    } finally {
        System.out.println("Command exit with return value " + retValue);
        outStream = null;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
529
5
Gpt3D_Clone529_5.java 1 12
Gpt3D_Clone529_5.java 13 28
----------------------------------------

public void run () {
    try {
        int retValue = pro.waitFor ();
        println ("Command exit with return value " + retValue);
        outStream.close ();
        outStream = null;
    } catch (InterruptedException e) {
        e.printStackTrace ();
    } catch (IOException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

 public void run(){
    int retValue;
    try{
        retValue = pro.waitFor();
        System.err.println("Command exit with return value " + retValue);
        if(outStream != null){
            outStream.close();
        }
    }catch (InterruptedException | IOException e){
        e.printStackTrace();
    }finally{
        outStream = null;
    }
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
529
6
Gpt3D_Clone529_6.java 1 12
Gpt3D_Clone529_6.java 13 27
----------------------------------------

public void run () {
    try {
        int retValue = pro.waitFor ();
        println ("Command exit with return value " + retValue);
        outStream.close ();
        outStream = null;
    } catch (InterruptedException e) {
        e.printStackTrace ();
    } catch (IOException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

 public void run() {
    int retVal = 0;
    try {
        retVal = pro.waitFor();
        if (outStream != null) {
            outStream.close();
        }
        System.out.println("Command exited with return value " + retVal);
    } catch (InterruptedException | IOException e) {
        System.err.println("Encountered error while running the command: " + e.getMessage());
    }
    outStream = null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
529
7
Gpt3D_Clone529_7.java 1 12
Gpt3D_Clone529_7.java 13 28
----------------------------------------

public void run () {
    try {
        int retValue = pro.waitFor ();
        println ("Command exit with return value " + retValue);
        outStream.close ();
        outStream = null;
    } catch (InterruptedException e) {
        e.printStackTrace ();
    } catch (IOException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

 public void run() {
    int value;
    try {
        value = pro.waitFor();
        if (outStream != null)
            outStream.close();
    } catch (InterruptedException | IOException e) {
        System.out.println("Error Occur: " + e.getMessage());
        return;
    }
    outStream = null;
    System.out.println("Command exit with return value " + value);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
529
8
Gpt3D_Clone529_8.java 1 12
Gpt3D_Clone529_8.java 13 26
----------------------------------------

public void run () {
    try {
        int retValue = pro.waitFor ();
        println ("Command exit with return value " + retValue);
        outStream.close ();
        outStream = null;
    } catch (InterruptedException e) {
        e.printStackTrace ();
    } catch (IOException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

 public void run() {
    int retVal = 0;
    try {
        retVal = pro.waitFor();
        if (outStream != null)
            outStream.close();
    } catch (InterruptedException | IOException e) {
        System.err.println("Encountered error while running the command: " + e.getMessage());
    }
    outStream = null;
    System.out.println("Command exit with return value " + retVal);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
534
0
Gpt3D_Clone534_0.java 1 13
Gpt3D_Clone534_0.java 14 35
----------------------------------------

public static void main (String s []) throws VTDException, java.io.UnsupportedEncodingException, java.io.IOException {
    VTDGen vg = new VTDGen ();
    if (! vg.parseFile ("input.xml", false)) return;
    VTDNav vn = vg.getNav ();
    AutoPilot ap = new AutoPilot (vn);
    XMLModifier xm = new XMLModifier (vn);
    ap.selectXPath ("/*/place[@id=\"p14\" and   @initialMarking=\"2\"]/@initialMarking");
    int i = 0;
    while ((i = ap.evalXPath ()) != - 1) {
        xm.updateToken (i + 1, "499");
    }
    xm.output ("new.xml");
}
----------------------------------------

 public static void main (String s []) throws VTDException, java.io.UnsupportedEncodingException, java.io.IOException {VTDGen vg = new VTDGen();
	if (!vg.parseFile("input.xml", true)) return;
	VTDNav vn = vg.getNav();
	AutoPilot ap = new AutoPilot(vn);
	XMLModifier xm = new XMLModifier(vn);
	ap.selectXPath("/*/place[@id=\"p14\" and @initialMarking=\"2\"]/@initialMarking");
	int i;
	try {
		do {
			i = ap.evalXPath();
			if (i != -1) { 
				xm.updateToken(i + 1, "499");			
				xm.output("new.xml");
			}		
		} while (i != -1);
	}
	catch (VTDException e) {
		e.printStackTrace();
	}
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
534
1
Gpt3D_Clone534_1.java 1 13
Gpt3D_Clone534_1.java 14 35
----------------------------------------

public static void main (String s []) throws VTDException, java.io.UnsupportedEncodingException, java.io.IOException {
    VTDGen vg = new VTDGen ();
    if (! vg.parseFile ("input.xml", false)) return;
    VTDNav vn = vg.getNav ();
    AutoPilot ap = new AutoPilot (vn);
    XMLModifier xm = new XMLModifier (vn);
    ap.selectXPath ("/*/place[@id=\"p14\" and   @initialMarking=\"2\"]/@initialMarking");
    int i = 0;
    while ((i = ap.evalXPath ()) != - 1) {
        xm.updateToken (i + 1, "499");
    }
    xm.output ("new.xml");
}
----------------------------------------

 public static void main (String s []) throws VTDException, java.io.UnsupportedEncodingException, java.io.IOException {VTDGen vg = new VTDGen();
	if (!vg.parseFile("input.xml", true)) return;
	VTDNav vn = vg.getNav();
	AutoPilot ap = new AutoPilot(vn);
	XMLModifier xm = new XMLModifier(vn);
	ap.selectXPath("/*/place[@id=\"p14\" and @initialMarking=\"2\"]/@initialMarking");
	int i;
	try {
		while (true)  {
			i = ap.evalXPath();
			if (i == -1)
				break;
			xm.updateToken(i + 1, "499");
			xm.output("new.xml");
		}
	}
	catch (VTDException e) {
		e.printStackTrace();
	}
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
535
2
Gpt3D_Clone535_2.java 1 12
Gpt3D_Clone535_2.java 13 27
----------------------------------------

public synchronized void run () {
    if (! this.infinite) {
        if (this.repeatCounter > 0) {
            this.command.run ();
            this.repeatCounter --;
        } else {
            this.control.cancel (false);
        }
    } else {
        this.command.run ();
    }
}
----------------------------------------

 public synchronized void invoke() {
        if (!this.infinite && this.repeatCounter > 0) {
            for (int i = this.repeatCounter; i > 0; i--) {
                this.command.run();
            }
        } else if (this.infinite) {
            while (this.infinite) {
                this.command.run();
            }
        } else {
            this.control.cancel(false);
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
535
4
Gpt3D_Clone535_4.java 1 12
Gpt3D_Clone535_4.java 13 26
----------------------------------------

public synchronized void run () {
    if (! this.infinite) {
        if (this.repeatCounter > 0) {
            this.command.run ();
            this.repeatCounter --;
        } else {
            this.control.cancel (false);
        }
    } else {
        this.command.run ();
    }
}
----------------------------------------

 public synchronized void invoke() {
        if (this.infinite) {
            do {
                this.command.run();
            } while (this.infinite);
        } else {
            for (int i = this.repeatCounter; i > 0; i--) {
                this.command.run();
            }
            this.control.cancel(false);
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
535
5
Gpt3D_Clone535_5.java 1 12
Gpt3D_Clone535_5.java 13 27
----------------------------------------

public synchronized void run () {
    if (! this.infinite) {
        if (this.repeatCounter > 0) {
            this.command.run ();
            this.repeatCounter --;
        } else {
            this.control.cancel (false);
        }
    } else {
        this.command.run ();
    }
}
----------------------------------------

 public synchronized void execute() {
        if (this.infinite) {
            while (this.infinite) {
                this.command.run();
            }
        } else {
            int repeatCounter = this.repeatCounter;
            while (repeatCounter-- > 0) {
                this.command.run();
            }
            this.control.cancel(false);
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
535
7
Gpt3D_Clone535_7.java 1 12
Gpt3D_Clone535_7.java 13 25
----------------------------------------

public synchronized void run () {
    if (! this.infinite) {
        if (this.repeatCounter > 0) {
            this.command.run ();
            this.repeatCounter --;
        } else {
            this.control.cancel (false);
        }
    } else {
        this.command.run ();
    }
}
----------------------------------------

  public synchronized void runLoop() {
        if (this.infinite) {
            while (this.infinite)
                this.command.run();
        } else if (this.repeatCounter > 0) {
            while (this.repeatCounter-- > 0)
                this.command.run();
        } else {
            this.control.cancel(false);
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
0
Gpt3D_Clone53_0.java 1 14
Gpt3D_Clone53_0.java 15 39
----------------------------------------

public boolean isBalanced (String strExpression) {
    Map < Character, Character > bracketPair = new HashMap < Character, Character > ();
    bracketPair.put ('(', ')');
    bracketPair.put ('[', ']');
    bracketPair.put ('{', '}');
    Stack < Character > stk = new Stack < Character > ();
    for (int i = 0;
    i < strExpression.length (); i ++) {
        if (bracketPair.containsKey (strExpression.charAt (i))) stk.push (strExpression.charAt (i));
        else if (bracketPair.containsValue (strExpression.charAt (i))) if (stk.isEmpty () || bracketPair.get (stk.pop ()) != strExpression.charAt (i)) return false;
    }
    if (stk.isEmpty ()) return true;
    else return false;
}
----------------------------------------

 public boolean isBalanced(String string) {
    Map<Character, Character> brackets = new HashMap<>();
    brackets.put('(', ')');
    brackets.put('[', ']');
    brackets.put('{', '}');
    Stack<Character> bracketStack = new Stack<>();
    for (int i = 0; i < string.length(); i++) {
        char curChar = string.charAt(i);
        if (brackets.containsKey(curChar)) bracketStack.push(curChar);
        else if (brackets.containsValue(curChar)) {
            if (bracketStack.empty()) return false;
            else {
                char openedBracket = bracketStack.pop();
                char closedBracket = brackets.get(openedBracket);
                if (closedBracket != curChar) return false;
            }
        }
    }
    if (bracketStack.isEmpty()) return true;
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
1
Gpt3D_Clone53_1.java 1 14
Gpt3D_Clone53_1.java 15 32
----------------------------------------

public boolean isBalanced (String strExpression) {
    Map < Character, Character > bracketPair = new HashMap < Character, Character > ();
    bracketPair.put ('(', ')');
    bracketPair.put ('[', ']');
    bracketPair.put ('{', '}');
    Stack < Character > stk = new Stack < Character > ();
    for (int i = 0;
    i < strExpression.length (); i ++) {
        if (bracketPair.containsKey (strExpression.charAt (i))) stk.push (strExpression.charAt (i));
        else if (bracketPair.containsValue (strExpression.charAt (i))) if (stk.isEmpty () || bracketPair.get (stk.pop ()) != strExpression.charAt (i)) return false;
    }
    if (stk.isEmpty ()) return true;
    else return false;
}
----------------------------------------

 public boolean isBalanced(String string) {
    Map<Character, Character> mapping = new HashMap<>();
    mapping.put('(', ')');
    mapping.put('[', ']');
    mapping.put('{', '}');
    Stack<Character> openBrackets = new Stack<>();
    for (int i = 0; i < string.length(); i++) {
        Character character = string.charAt(i);
        if (mapping.containsKey(character)) openBrackets.push(character);
        else if (mapping.containsValue(character)) 
			if (openBrackets.isEmpty() || mapping.get(openBrackets.pop()) != character) 
				return false;
    }
    return openBrackets.isEmpty();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
4
Gpt3D_Clone53_4.java 1 14
Gpt3D_Clone53_4.java 15 32
----------------------------------------

public boolean isBalanced (String strExpression) {
    Map < Character, Character > bracketPair = new HashMap < Character, Character > ();
    bracketPair.put ('(', ')');
    bracketPair.put ('[', ']');
    bracketPair.put ('{', '}');
    Stack < Character > stk = new Stack < Character > ();
    for (int i = 0;
    i < strExpression.length (); i ++) {
        if (bracketPair.containsKey (strExpression.charAt (i))) stk.push (strExpression.charAt (i));
        else if (bracketPair.containsValue (strExpression.charAt (i))) if (stk.isEmpty () || bracketPair.get (stk.pop ()) != strExpression.charAt (i)) return false;
    }
    if (stk.isEmpty ()) return true;
    else return false;
}
----------------------------------------

 public boolean isBalanced(String expression) {
    Map<Character, Character> balancedChars = new HashMap<>();
    balancedChars.put('(', ')');
    balancedChars.put('[', ']');
    balancedChars.put('{', '}');
    Stack<Character> openBrackets = new Stack<>();
    for (int i = 0; i < expression.length(); i++) {
        Character character = expression.charAt(i);
        if (balancedChars.containsKey(character)) openBrackets.push(character);
        else if (balancedChars.containsValue(character)) 
			if (openBrackets.isEmpty() || balancedChars.get(openBrackets.pop()) != character) 
				return false;
    }
    return openBrackets.isEmpty();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
541
1
Gpt3D_Clone541_1.java 1 18
Gpt3D_Clone541_1.java 19 37
----------------------------------------

private int interpolateColor (int a, int b, float proportion) {
    if (proportion > 1 || proportion < 0) {
        throw new IllegalArgumentException ("proportion must be [0 - 1]");
    }
    float [] hsva = new float [3];
    float [] hsvb = new float [3];
    float [] hsv_output = new float [3];
    Color.colorToHSV (a, hsva);
    Color.colorToHSV (b, hsvb);
    for (int i = 0;
    i < 3; i ++) {
        hsv_output [i] = interpolate (hsva [i], hsvb [i], proportion);
    }
    int alpha_a = Color.alpha (a);
    int alpha_b = Color.alpha (b);
    float alpha_output = interpolate (alpha_a, alpha_b, proportion);
    return Color.HSVToColor ((int) alpha_output, hsv_output);
}
----------------------------------------

  private int interpolateColor (int a, int b, float proportion) {
        if (proportion > 1 || proportion < 0) {
            throw new IllegalArgumentException ("proportion must be [0 - 1]");
        }
        int[] hsva = new int[3];
        int[] hsvb = new int[3];
        int[] hsv_output = new int[3];
        Color.colorToHSV(a, hsva);
        Color.colorToHSV(b, hsvb);
        for(int i=0; i<hsv_output.length; i++) {
            hsv_output[i] = (int) interpolate(hsva[i], hsvb[i], proportion);
        }
        int alpha_a = Color.alpha(a);
        int alpha_b = Color.alpha(b);
        int alpha_output = (int) interpolate(alpha_a, alpha_b, proportion);
        return Color.HSVToColor(alpha_output, hsv_output);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
544
0
Gpt3D_Clone544_0.java 1 19
Gpt3D_Clone544_0.java 20 42
----------------------------------------

public static Boolean isAnagram (String word, String anagram_word) {
    if (word.length () != anagram_word.length ()) {
        return false;
    }
    char [] words_char = word.toCharArray ();
    char [] anagram_word_char = anagram_word.toCharArray ();
    int words_char_num = 1;
    int anagram_word_num = 1;
    Map < Character, Integer > wordPrimeMap = wordPrimeMap ();
    for (int i = 0;
    i < words_char.length; i ++) {
        words_char_num *= wordPrimeMap.get (words_char [i]);
    }
    for (int i = 0;
    i < anagram_word_char.length; i ++) {
        anagram_word_num *= wordPrimeMap.get (anagram_word_char [i]);
    }
    return anagram_word_num == words_char_num;
}
----------------------------------------

 public static Boolean isAnagram(String word, String anagram_word) {
    if (word.length() != anagram_word.length()) {
        return false;
    }
    int[] word_count = new int[128];
    int[] anagram_words_count = new int[128];
    for (char c : word.toCharArray()) {
        int index = (int)c;
        word_count[index]++;
    }
    for (char c : anagram_word.toCharArray()) {
        int index = (int)c;
        anagram_words_count[index]++;
    }
    for (int i = 0; i < 128; i++) {
        if (word_count[i] != anagram_words_count[i]) {
            return false;
        }
    }
    return true; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
544
1
Gpt3D_Clone544_1.java 1 19
Gpt3D_Clone544_1.java 20 45
----------------------------------------

public static Boolean isAnagram (String word, String anagram_word) {
    if (word.length () != anagram_word.length ()) {
        return false;
    }
    char [] words_char = word.toCharArray ();
    char [] anagram_word_char = anagram_word.toCharArray ();
    int words_char_num = 1;
    int anagram_word_num = 1;
    Map < Character, Integer > wordPrimeMap = wordPrimeMap ();
    for (int i = 0;
    i < words_char.length; i ++) {
        words_char_num *= wordPrimeMap.get (words_char [i]);
    }
    for (int i = 0;
    i < anagram_word_char.length; i ++) {
        anagram_word_num *= wordPrimeMap.get (anagram_word_char [i]);
    }
    return anagram_word_num == words_char_num;
}
----------------------------------------

 public static Boolean isAnagram(String word, String anagram_word) {
    if (word.length() != anagram_word.length()) {
        return false;
    }
    int[] word_count = new int[128];
    int[] anagram_count = new int[128];
    for (char c : word.toCharArray()) {
        int index = (int)c;
        word_count[index]++;
    }
    for (char c : anagram_word.toCharArray()) {
        int index = (int)c;
        anagram_count[index]++;
    }
    for (int i = 0; i < 128; i++) {
        if (word_count[i] != anagram_count[i]) {
            return false;
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
544
2
Gpt3D_Clone544_2.java 1 19
Gpt3D_Clone544_2.java 20 42
----------------------------------------

public static Boolean isAnagram (String word, String anagram_word) {
    if (word.length () != anagram_word.length ()) {
        return false;
    }
    char [] words_char = word.toCharArray ();
    char [] anagram_word_char = anagram_word.toCharArray ();
    int words_char_num = 1;
    int anagram_word_num = 1;
    Map < Character, Integer > wordPrimeMap = wordPrimeMap ();
    for (int i = 0;
    i < words_char.length; i ++) {
        words_char_num *= wordPrimeMap.get (words_char [i]);
    }
    for (int i = 0;
    i < anagram_word_char.length; i ++) {
        anagram_word_num *= wordPrimeMap.get (anagram_word_char [i]);
    }
    return anagram_word_num == words_char_num;
}
----------------------------------------

 public static Boolean isAnagram (String word, String anagram_word) {
    if (word.length() != anagram_word.length()) {
        return false;
    }
    int[] word_count = new int[26];
    int[] anagram_count = new int[26];
    for (char c : word.toLowerCase().toCharArray()) {
        int index = c - 'a';
        word_count[index]++;
    }
    for (char c : anagram_word.toLowerCase().toCharArray()) {
        int index = c - 'a';
        anagram_count[index]++;
    }
    for (int i = 0 ; i < 26 ; i++) {
        if (word_count[i] != anagram_count[i]) {
            return false;
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
544
3
Gpt3D_Clone544_3.java 1 19
Gpt3D_Clone544_3.java 20 42
----------------------------------------

public static Boolean isAnagram (String word, String anagram_word) {
    if (word.length () != anagram_word.length ()) {
        return false;
    }
    char [] words_char = word.toCharArray ();
    char [] anagram_word_char = anagram_word.toCharArray ();
    int words_char_num = 1;
    int anagram_word_num = 1;
    Map < Character, Integer > wordPrimeMap = wordPrimeMap ();
    for (int i = 0;
    i < words_char.length; i ++) {
        words_char_num *= wordPrimeMap.get (words_char [i]);
    }
    for (int i = 0;
    i < anagram_word_char.length; i ++) {
        anagram_word_num *= wordPrimeMap.get (anagram_word_char [i]);
    }
    return anagram_word_num == words_char_num;
}
----------------------------------------

 public static Boolean isAnagram (String word, String anagram_word) {
    if (word.length() != anagram_word.length()) {
        return false;
    }
    HashMap<Character, Integer> word_map = new HashMap<>();
    for (char c : word.toCharArray()) {
        word_map.put(c, word_map.getOrDefault(c, 0) + 1);
    }
    for (char c : anagram_word.toCharArray()) {
        if (!word_map.containsKey(c)) {
            return false;
        }
        word_map.put(c, word_map.get(c) - 1);
    }
    for (char c : word_map.keySet()) {
        if (word_map.get(c) != 0) {
            return false;
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
544
4
Gpt3D_Clone544_4.java 1 19
Gpt3D_Clone544_4.java 20 40
----------------------------------------

public static Boolean isAnagram (String word, String anagram_word) {
    if (word.length () != anagram_word.length ()) {
        return false;
    }
    char [] words_char = word.toCharArray ();
    char [] anagram_word_char = anagram_word.toCharArray ();
    int words_char_num = 1;
    int anagram_word_num = 1;
    Map < Character, Integer > wordPrimeMap = wordPrimeMap ();
    for (int i = 0;
    i < words_char.length; i ++) {
        words_char_num *= wordPrimeMap.get (words_char [i]);
    }
    for (int i = 0;
    i < anagram_word_char.length; i ++) {
        anagram_word_num *= wordPrimeMap.get (anagram_word_char [i]);
    }
    return anagram_word_num == words_char_num;
}
----------------------------------------

 public static Boolean isAnagram (String word, String anagram_word) {
    if (word.length() != anagram_word.length()) {
        return false;
    }
    int[] word_count = new int[256];
    int[] anagram_count = new int[256];
    for (char c : word.toCharArray()) {
        word_count[c]++;
    }
    for (char c : anagram_word.toCharArray()) {
        anagram_count[c]++;
    }
    for (int i = 0 ; i < 256 ; i++) {
        if (word_count[i] != anagram_count[i]) {
            return false;
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
544
5
Gpt3D_Clone544_5.java 1 19
Gpt3D_Clone544_5.java 20 40
----------------------------------------

public static Boolean isAnagram (String word, String anagram_word) {
    if (word.length () != anagram_word.length ()) {
        return false;
    }
    char [] words_char = word.toCharArray ();
    char [] anagram_word_char = anagram_word.toCharArray ();
    int words_char_num = 1;
    int anagram_word_num = 1;
    Map < Character, Integer > wordPrimeMap = wordPrimeMap ();
    for (int i = 0;
    i < words_char.length; i ++) {
        words_char_num *= wordPrimeMap.get (words_char [i]);
    }
    for (int i = 0;
    i < anagram_word_char.length; i ++) {
        anagram_word_num *= wordPrimeMap.get (anagram_word_char [i]);
    }
    return anagram_word_num == words_char_num;
}
----------------------------------------

 public static Boolean isAnagram(String word, String anagram_word) {
    if (word.length() != anagram_word.length()) {
        return false;
    }
    int[] word_count = new int[256];
    int[] anagram_words_count = new int[256];
    for (char c : word.toCharArray()) {
        word_count[c]++;
    }
    for (char c : anagram_word.toCharArray()) {
        anagram_words_count[c]++;
    }
    for (int i = 0; i < 256; i++) {
        if (word_count[i] != anagram_words_count[i]) {
            return false;
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
544
6
Gpt3D_Clone544_6.java 1 19
Gpt3D_Clone544_6.java 20 40
----------------------------------------

public static Boolean isAnagram (String word, String anagram_word) {
    if (word.length () != anagram_word.length ()) {
        return false;
    }
    char [] words_char = word.toCharArray ();
    char [] anagram_word_char = anagram_word.toCharArray ();
    int words_char_num = 1;
    int anagram_word_num = 1;
    Map < Character, Integer > wordPrimeMap = wordPrimeMap ();
    for (int i = 0;
    i < words_char.length; i ++) {
        words_char_num *= wordPrimeMap.get (words_char [i]);
    }
    for (int i = 0;
    i < anagram_word_char.length; i ++) {
        anagram_word_num *= wordPrimeMap.get (anagram_word_char [i]);
    }
    return anagram_word_num == words_char_num;
}
----------------------------------------

 public static Boolean isAnagram(String word, String anagram_word) {
    if (word.length() != anagram_word.length()) {
        return false;
    }
    Map<Character, Integer> word_map = new HashMap<>();
    Map<Character, Integer> anagram_words_map = new HashMap<>();
    for (char c : word.toCharArray()) {
        word_map.put(c, word_map.getOrDefault(c, 0) + 1);
    }
    for (char c : anagram_word.toCharArray()) {
        anagram_words_map.put(c, anagram_words_map.getOrDefault(c, 0) + 1);
    }
    for (char c : word_map.keySet()) {
        if (!anagram_words_map.containsKey(c) || anagram_words_map.get(c) != word_map.get(c)) {
            return false;
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
544
7
Gpt3D_Clone544_7.java 1 19
Gpt3D_Clone544_7.java 20 40
----------------------------------------

public static Boolean isAnagram (String word, String anagram_word) {
    if (word.length () != anagram_word.length ()) {
        return false;
    }
    char [] words_char = word.toCharArray ();
    char [] anagram_word_char = anagram_word.toCharArray ();
    int words_char_num = 1;
    int anagram_word_num = 1;
    Map < Character, Integer > wordPrimeMap = wordPrimeMap ();
    for (int i = 0;
    i < words_char.length; i ++) {
        words_char_num *= wordPrimeMap.get (words_char [i]);
    }
    for (int i = 0;
    i < anagram_word_char.length; i ++) {
        anagram_word_num *= wordPrimeMap.get (anagram_word_char [i]);
    }
    return anagram_word_num == words_char_num;
}
----------------------------------------

 public static Boolean isAnagram(String word, String anagram_word) {
    if (word.length() != anagram_word.length()) {
        return false;
    }
    int[] word_count = new int[127];
    int[] anagram_count = new int[127];
    for (char c : word.toCharArray()) {
        word_count[(int)c]++;
    }
    for (char c : anagram_word.toCharArray()) {
        anagram_count[(int)c]++;
    }
    for (int i = 0; i < 127; i++) {
        if (word_count[i] != anagram_count[i]) {
            return false;
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
544
8
Gpt3D_Clone544_8.java 1 19
Gpt3D_Clone544_8.java 20 37
----------------------------------------

public static Boolean isAnagram (String word, String anagram_word) {
    if (word.length () != anagram_word.length ()) {
        return false;
    }
    char [] words_char = word.toCharArray ();
    char [] anagram_word_char = anagram_word.toCharArray ();
    int words_char_num = 1;
    int anagram_word_num = 1;
    Map < Character, Integer > wordPrimeMap = wordPrimeMap ();
    for (int i = 0;
    i < words_char.length; i ++) {
        words_char_num *= wordPrimeMap.get (words_char [i]);
    }
    for (int i = 0;
    i < anagram_word_char.length; i ++) {
        anagram_word_num *= wordPrimeMap.get (anagram_word_char [i]);
    }
    return anagram_word_num == words_char_num;
}
----------------------------------------

 public static Boolean isAnagram (String word, String anagram_word) {
    if (word.length() != anagram_word.length()) {
        return false;
    }
    List<Character> word_list = new ArrayList<>();
    List<Character> anagram_word_list = new ArrayList<>();
    for (char c : word.toCharArray()) {
        word_list.add(c);
    }
    for (char c : anagram_word.toCharArray()) {
        anagram_word_list.add(c);
    }
    Collections.sort(word_list);
    Collections.sort(anagram_word_list);
    return word_list.equals(anagram_word_list);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
545
0
Gpt3D_Clone545_0.java 1 27
Gpt3D_Clone545_0.java 28 48
----------------------------------------

public static boolean isAnagram (String first, String second) {
    String positive = first.toLowerCase ();
    String negative = second.toLowerCase ();
    if (positive.length () != negative.length ()) {
        return false;
    }
    int [] counts = new int [26];
    int diff = 0;
    for (int i = 0;
    i < positive.length (); i ++) {
        int pos = (int) positive.charAt (i) - 97;
        if (counts [pos] >= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [pos] ++;
        int neg = (int) negative.charAt (i) - 97;
        if (counts [neg] <= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [neg] --;
    }
    return diff == 0;
}
----------------------------------------

 public static boolean isAnagram (String first, String second) {
    first = first.toLowerCase ();
    second = second.toLowerCase ();
    if (first.length() != second.length()) {
        return false;
    }
    int[] letters = new int[26];
    for (int i = 0; i < first.length(); i++) {
        letters[first.charAt(i) - 'a']++;
        letters[second.charAt(i) - 'a']--;
    }
    for (int counter : letters) {
        if (counter != 0) {
            return false;
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
545
1
Gpt3D_Clone545_1.java 1 27
Gpt3D_Clone545_1.java 28 47
----------------------------------------

public static boolean isAnagram (String first, String second) {
    String positive = first.toLowerCase ();
    String negative = second.toLowerCase ();
    if (positive.length () != negative.length ()) {
        return false;
    }
    int [] counts = new int [26];
    int diff = 0;
    for (int i = 0;
    i < positive.length (); i ++) {
        int pos = (int) positive.charAt (i) - 97;
        if (counts [pos] >= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [pos] ++;
        int neg = (int) negative.charAt (i) - 97;
        if (counts [neg] <= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [neg] --;
    }
    return diff == 0;
}
----------------------------------------

 public static boolean isAnagram (String first, String second) {
    first = first.toLowerCase();
    second = second.toLowerCase();
    if (first.length() != second.length()) {
        return false;
    }
    int[] occurrences = new int[26];
    for (int i = 0; i < first.length(); i++) {
        occurrences[first.charAt(i) - 'a']++;
        occurrences[second.charAt(i) - 'a']--;
    }
    for (int difference : occurrences) {
        if (difference != 0) {
            return false;
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
545
2
Gpt3D_Clone545_2.java 1 27
Gpt3D_Clone545_2.java 28 47
----------------------------------------

public static boolean isAnagram (String first, String second) {
    String positive = first.toLowerCase ();
    String negative = second.toLowerCase ();
    if (positive.length () != negative.length ()) {
        return false;
    }
    int [] counts = new int [26];
    int diff = 0;
    for (int i = 0;
    i < positive.length (); i ++) {
        int pos = (int) positive.charAt (i) - 97;
        if (counts [pos] >= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [pos] ++;
        int neg = (int) negative.charAt (i) - 97;
        if (counts [neg] <= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [neg] --;
    }
    return diff == 0;
}
----------------------------------------

 public static boolean isAnagram (String first, String second) {
    first = first.toLowerCase ();
    second = second.toLowerCase ();
    if (first.length() != second.length()) {
        return false;
    }
    int[] counts = new int[26];
    for (int i = 0; i < first.length(); i++) {
        counts[first.charAt(i) - 'a']++;
        counts[second.charAt(i) - 'a']--;
    }
    for (int i = 0; i < counts.length; i++) {
        if (counts[i] != 0) {
            return false;
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
545
3
Gpt3D_Clone545_3.java 1 27
Gpt3D_Clone545_3.java 28 46
----------------------------------------

public static boolean isAnagram (String first, String second) {
    String positive = first.toLowerCase ();
    String negative = second.toLowerCase ();
    if (positive.length () != negative.length ()) {
        return false;
    }
    int [] counts = new int [26];
    int diff = 0;
    for (int i = 0;
    i < positive.length (); i ++) {
        int pos = (int) positive.charAt (i) - 97;
        if (counts [pos] >= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [pos] ++;
        int neg = (int) negative.charAt (i) - 97;
        if (counts [neg] <= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [neg] --;
    }
    return diff == 0;
}
----------------------------------------

 public static boolean isAnagram (String first, String second) {
    first = first.toLowerCase ();
    second = second.toLowerCase ();
    if (first.length() != second.length())
        return false;
    int[] letters = new int[26];
    for (int i = 0; i < first.length(); i++){
        letters[first.charAt(i)-'a']++;
        letters[second.charAt(i)-'a']--;
    }
    boolean isAnagram = true;
    for(int j=0; j<26; j++){
        if(letters[j] != 0)
            isAnagram = false;
    }
    return isAnagram;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
545
4
Gpt3D_Clone545_4.java 1 27
Gpt3D_Clone545_4.java 28 46
----------------------------------------

public static boolean isAnagram (String first, String second) {
    String positive = first.toLowerCase ();
    String negative = second.toLowerCase ();
    if (positive.length () != negative.length ()) {
        return false;
    }
    int [] counts = new int [26];
    int diff = 0;
    for (int i = 0;
    i < positive.length (); i ++) {
        int pos = (int) positive.charAt (i) - 97;
        if (counts [pos] >= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [pos] ++;
        int neg = (int) negative.charAt (i) - 97;
        if (counts [neg] <= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [neg] --;
    }
    return diff == 0;
}
----------------------------------------

 public static boolean isAnagram (String first, String second) {
    first = first.toLowerCase ();
    second = second.toLowerCase ();
    if (first.length () != second.length())
        return false;
    int[] count = new int[26];
    for (int i = 0; i < first.length(); i++) {
        count[first.charAt(i) - 'a']++;
        count[second.charAt(i) - 'a']--;
    }
    for (int j=0; j<26; j++) {
        if(count[j]!=0) {
            return false;
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
545
5
Gpt3D_Clone545_5.java 1 27
Gpt3D_Clone545_5.java 28 50
----------------------------------------

public static boolean isAnagram (String first, String second) {
    String positive = first.toLowerCase ();
    String negative = second.toLowerCase ();
    if (positive.length () != negative.length ()) {
        return false;
    }
    int [] counts = new int [26];
    int diff = 0;
    for (int i = 0;
    i < positive.length (); i ++) {
        int pos = (int) positive.charAt (i) - 97;
        if (counts [pos] >= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [pos] ++;
        int neg = (int) negative.charAt (i) - 97;
        if (counts [neg] <= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [neg] --;
    }
    return diff == 0;
}
----------------------------------------

  public static boolean isAnagram (String first, String second) {
    first = first.toLowerCase ();
    second = second.toLowerCase ();
    int[] firstArray = new int[26];
    int[] secondArray = new int[26];
 
    // process each character in the strings by adding them to their respective arrays
    for(int i=0; i<first.length(); i++){
        firstArray[first.charAt(i) - 'a']++;
        secondArray[second.charAt(i) - 'a']++;
    }
 
    // check if the contents of the two array are exactly the same
    for(int i=0; i<26; i++){
        if(firstArray[i] != secondArray[i]){
            return false;
        }
    }
 
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
545
6
Gpt3D_Clone545_6.java 1 27
Gpt3D_Clone545_6.java 28 47
----------------------------------------

public static boolean isAnagram (String first, String second) {
    String positive = first.toLowerCase ();
    String negative = second.toLowerCase ();
    if (positive.length () != negative.length ()) {
        return false;
    }
    int [] counts = new int [26];
    int diff = 0;
    for (int i = 0;
    i < positive.length (); i ++) {
        int pos = (int) positive.charAt (i) - 97;
        if (counts [pos] >= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [pos] ++;
        int neg = (int) negative.charAt (i) - 97;
        if (counts [neg] <= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [neg] --;
    }
    return diff == 0;
}
----------------------------------------

 public static boolean isAnagram (String first, String second) {
    if (first.length () != second.length ())
        return false;
    int[] count = new int[26];
    first = first.toLowerCase ();
    second = second.toLowerCase ();
    for (int i = 0; i < first.length (); i++) {
        count[first.charAt(i) - 'a']++;
        count[second.charAt(i) - 'a']--;
    }
    for (int num : count) {
        // go through each element in array and check if any, other than 0
        if (num != 0) {
            return false;
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
545
7
Gpt3D_Clone545_7.java 1 27
Gpt3D_Clone545_7.java 28 47
----------------------------------------

public static boolean isAnagram (String first, String second) {
    String positive = first.toLowerCase ();
    String negative = second.toLowerCase ();
    if (positive.length () != negative.length ()) {
        return false;
    }
    int [] counts = new int [26];
    int diff = 0;
    for (int i = 0;
    i < positive.length (); i ++) {
        int pos = (int) positive.charAt (i) - 97;
        if (counts [pos] >= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [pos] ++;
        int neg = (int) negative.charAt (i) - 97;
        if (counts [neg] <= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [neg] --;
    }
    return diff == 0;
}
----------------------------------------

 public static boolean isAnagram (String first, String second) {
    first = first.toLowerCase ();
    second = second.toLowerCase ();
    int[] counts = new int[26];
    if (first.length () != second.length()) 
        return false;
    for (int i = 0; i < first.length(); i++) {
        counts[first.charAt(i) - 'a']++;
        counts[second.charAt(i) - 'a']--;
    }
    for (int count : counts) {
        //go through each element in array and check if any, other than 0
        if (count != 0) {
            return false;
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
545
8
Gpt3D_Clone545_8.java 1 27
Gpt3D_Clone545_8.java 28 44
----------------------------------------

public static boolean isAnagram (String first, String second) {
    String positive = first.toLowerCase ();
    String negative = second.toLowerCase ();
    if (positive.length () != negative.length ()) {
        return false;
    }
    int [] counts = new int [26];
    int diff = 0;
    for (int i = 0;
    i < positive.length (); i ++) {
        int pos = (int) positive.charAt (i) - 97;
        if (counts [pos] >= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [pos] ++;
        int neg = (int) negative.charAt (i) - 97;
        if (counts [neg] <= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [neg] --;
    }
    return diff == 0;
}
----------------------------------------

  public static boolean isAnagram (String first, String second) {
    first = first.toLowerCase ();
    second = second.toLowerCase ();
    if (first.length() != second.length())
        return false;
    int[] letters = new int[26];
    for (int i = 0; i < first.length(); i++){
        letters[first.charAt(i)-'a']++;
        letters[second.charAt(i)-'a']--;
    }
    for (int i = 0; i < 26; i++)
        if (letters[i] != 0)
            return false;
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
545
9
Gpt3D_Clone545_9.java 1 27
Gpt3D_Clone545_9.java 28 44
----------------------------------------

public static boolean isAnagram (String first, String second) {
    String positive = first.toLowerCase ();
    String negative = second.toLowerCase ();
    if (positive.length () != negative.length ()) {
        return false;
    }
    int [] counts = new int [26];
    int diff = 0;
    for (int i = 0;
    i < positive.length (); i ++) {
        int pos = (int) positive.charAt (i) - 97;
        if (counts [pos] >= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [pos] ++;
        int neg = (int) negative.charAt (i) - 97;
        if (counts [neg] <= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [neg] --;
    }
    return diff == 0;
}
----------------------------------------

 public static boolean isAnagram (String first, String second) {
    int[] letters = new int[26];
    first = first.toLowerCase ();
    second = second.toLowerCase ();
    if (second.length () != first.length ())
        return false;
    for (int i = 0; i < first.length (); i++)
        letters[first.charAt (i) - 'a']++;
    for (int i = 0; i < second.length (); i++)
        letters[second.charAt (i) - 'a']--;
    for (int i = 0; i < letters.length; i++) 
        if (letters[i] != 0) 
            return false;
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
548
0
Gpt3D_Clone548_0.java 1 27
Gpt3D_Clone548_0.java 28 56
----------------------------------------

public static boolean isAnagram (String first, String second) {
    String positive = first.toLowerCase ();
    String negative = second.toLowerCase ();
    if (positive.length () != negative.length ()) {
        return false;
    }
    int [] counts = new int [26];
    int diff = 0;
    for (int i = 0;
    i < positive.length (); i ++) {
        int pos = (int) positive.charAt (i) - 97;
        if (counts [pos] >= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [pos] ++;
        int neg = (int) negative.charAt (i) - 97;
        if (counts [neg] <= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [neg] --;
    }
    return diff == 0;
}
----------------------------------------

 public static boolean isAnagram (String first, String second)
{
    first = first.toLowerCase ();
    second = second.toLowerCase ();
    if (first.length() != second.length())
        return false;
    Dictionary<Character, Integer> counts1 = new Hashtable<Character, Integer>();
    Dictionary<Character, Integer> counts2 = new Hashtable<Character, Integer>();
    for (char c : first.toCharArray()) {
        if (counts1.containsKey(c))
            counts1.put(c, counts1.get(c) + 1);
        else
            counts1.put(c, 1);
    }
    for (char c : second.toCharArray()) {
        if (counts2.containsKey(c))
            counts2.put(c, counts2.get(c) + 1);
        else
            counts2.put(c, 1);
    }
    for (Enumeration<Character> e1 = counts1.keys(); e1.hasMoreElements();) {
        char c = e1.nextElement();
        if (counts1.get(c) != counts2.get(c))
            return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
548
1
Gpt3D_Clone548_1.java 1 27
Gpt3D_Clone548_1.java 28 53
----------------------------------------

public static boolean isAnagram (String first, String second) {
    String positive = first.toLowerCase ();
    String negative = second.toLowerCase ();
    if (positive.length () != negative.length ()) {
        return false;
    }
    int [] counts = new int [26];
    int diff = 0;
    for (int i = 0;
    i < positive.length (); i ++) {
        int pos = (int) positive.charAt (i) - 97;
        if (counts [pos] >= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [pos] ++;
        int neg = (int) negative.charAt (i) - 97;
        if (counts [neg] <= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [neg] --;
    }
    return diff == 0;
}
----------------------------------------

 public static boolean isAnagram (String first, String second)
{
    first = first.toLowerCase ();
    second = second.toLowerCase ();
    if(first.length () != second.length ())
        return false;
    int[] characterCount = new int[26];
    for (int i = 0; i < first.length (); i++) 
    {
        int indexInArray = (int) first.charAt (i) - 97;
        characterCount [indexInArray] ++;
    }
    for (int i = 0; i < second.length (); i++) 
    {
        int indexInArray = (int) second.charAt (i) - 97;
        characterCount [indexInArray] --;   
    }
    for (int i = 0; i < 26; i++)
    {
        if (characterCount [i] != 0) 
            return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
548
2
Gpt3D_Clone548_2.java 1 27
Gpt3D_Clone548_2.java 28 50
----------------------------------------

public static boolean isAnagram (String first, String second) {
    String positive = first.toLowerCase ();
    String negative = second.toLowerCase ();
    if (positive.length () != negative.length ()) {
        return false;
    }
    int [] counts = new int [26];
    int diff = 0;
    for (int i = 0;
    i < positive.length (); i ++) {
        int pos = (int) positive.charAt (i) - 97;
        if (counts [pos] >= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [pos] ++;
        int neg = (int) negative.charAt (i) - 97;
        if (counts [neg] <= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [neg] --;
    }
    return diff == 0;
}
----------------------------------------

 public static boolean isAnagram (String first, String second) { 
    first = first.toLowerCase(); 
    second = second.toLowerCase(); 
    if (first.length() != second.length()) 
        return false; 
    int[] charactersFrequency1 = new int[26]; 
    int[] charactersFrequency2 = new int[26]; 
    for (int i = 0; i < first.length(); i++) 
    { 
        char ch = first.charAt(i); 
        charactersFrequency1[ch - 'a']++; 
        char c = second.charAt(i); 
        charactersFrequency2[c - 'a']++; 
    } 
    for (int i = 0; i < 26; i++) 
    { 
        if (charactersFrequency1[i] != charactersFrequency2[i]) 
            return false; 
    } 
    return true; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
548
3
Gpt3D_Clone548_3.java 1 27
Gpt3D_Clone548_3.java 28 54
----------------------------------------

public static boolean isAnagram (String first, String second) {
    String positive = first.toLowerCase ();
    String negative = second.toLowerCase ();
    if (positive.length () != negative.length ()) {
        return false;
    }
    int [] counts = new int [26];
    int diff = 0;
    for (int i = 0;
    i < positive.length (); i ++) {
        int pos = (int) positive.charAt (i) - 97;
        if (counts [pos] >= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [pos] ++;
        int neg = (int) negative.charAt (i) - 97;
        if (counts [neg] <= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [neg] --;
    }
    return diff == 0;
}
----------------------------------------

 public static boolean isAnagram (String first, String second)
{ 
    if (first.length() != second.length())
        return false;
    Map<Character, Integer> map1 = new HashMap<>();
    Map<Character, Integer> map2 = new HashMap<>();
    for (int i = 0; i < first.length(); i++)
    {
        if (!map1.containsKey(first.charAt(i)))
            map1.put(first.charAt(i), 1);
        else
        {
            int oldValue = map1.get(first.charAt(i));
            map1.put(first.charAt(i), oldValue + 1);
        }
        if (!map2.containsKey(second.charAt(i)))
            map2.put(second.charAt(i), 1);
        else
        {
            int oldValue = map2.get(second.charAt(i));
            map2.put(second.charAt(i), oldValue + 1);
        }
    }
    return map1.equals(map2);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
548
4
Gpt3D_Clone548_4.java 1 27
Gpt3D_Clone548_4.java 28 50
----------------------------------------

public static boolean isAnagram (String first, String second) {
    String positive = first.toLowerCase ();
    String negative = second.toLowerCase ();
    if (positive.length () != negative.length ()) {
        return false;
    }
    int [] counts = new int [26];
    int diff = 0;
    for (int i = 0;
    i < positive.length (); i ++) {
        int pos = (int) positive.charAt (i) - 97;
        if (counts [pos] >= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [pos] ++;
        int neg = (int) negative.charAt (i) - 97;
        if (counts [neg] <= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [neg] --;
    }
    return diff == 0;
}
----------------------------------------

 public static boolean isAnagram (String first, String second)
{
    first = first.toLowerCase ();
    second = second.toLowerCase ();
    if(first.length () != second.length ())
        return false;
    int[] characterCount = new int[26];
    for (int i = 0; i < first.length (); i++) 
    {
        int indexInArray = (int) first.charAt (i) - 97;
        characterCount [indexInArray] ++;
        indexInArray = (int) second.charAt (i) - 97;
        characterCount [indexInArray] --;
    }
    for (int i = 0; i < 26; i++)
    {
        if (characterCount [i] != 0) 
            return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
548
5
Gpt3D_Clone548_5.java 1 27
Gpt3D_Clone548_5.java 28 45
----------------------------------------

public static boolean isAnagram (String first, String second) {
    String positive = first.toLowerCase ();
    String negative = second.toLowerCase ();
    if (positive.length () != negative.length ()) {
        return false;
    }
    int [] counts = new int [26];
    int diff = 0;
    for (int i = 0;
    i < positive.length (); i ++) {
        int pos = (int) positive.charAt (i) - 97;
        if (counts [pos] >= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [pos] ++;
        int neg = (int) negative.charAt (i) - 97;
        if (counts [neg] <= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [neg] --;
    }
    return diff == 0;
}
----------------------------------------

 public static boolean isAnagram (String first, String second)
{ 
    ArrayList<Character> firstAlphabet = new ArrayList<> ();
    ArrayList<Character> secondAlphabet = new ArrayList<> ();
    first = first.toLowerCase ();
    second = second.toLowerCase ();
    for (char ch : first.toCharArray ()) {
       firstAlphabet.add(ch);
    }
    for (char ch : second.toCharArray ()) {
       secondAlphabet.add(ch);
    }
    Collections.sort(firstAlphabet);
    Collections.sort(secondAlphabet);
    return firstAlphabet.equals(secondAlphabet);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
548
6
Gpt3D_Clone548_6.java 1 27
Gpt3D_Clone548_6.java 28 44
----------------------------------------

public static boolean isAnagram (String first, String second) {
    String positive = first.toLowerCase ();
    String negative = second.toLowerCase ();
    if (positive.length () != negative.length ()) {
        return false;
    }
    int [] counts = new int [26];
    int diff = 0;
    for (int i = 0;
    i < positive.length (); i ++) {
        int pos = (int) positive.charAt (i) - 97;
        if (counts [pos] >= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [pos] ++;
        int neg = (int) negative.charAt (i) - 97;
        if (counts [neg] <= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [neg] --;
    }
    return diff == 0;
}
----------------------------------------

 public static boolean isAnagram (String first, String second)
{
    first = first.toLowerCase ();
    second = second.toLowerCase ();
    if (first.length () != second.length () )
    {
        return false; 
    }
    char[] firstArray = first.toCharArray();
    char[] secondArray = second. toCharArray();
    Arrays.sort(firstArray);
    Arrays.sort(secondArray);
 
    return Arrays.equals(firstArray, secondArray);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
548
7
Gpt3D_Clone548_7.java 1 27
Gpt3D_Clone548_7.java 28 43
----------------------------------------

public static boolean isAnagram (String first, String second) {
    String positive = first.toLowerCase ();
    String negative = second.toLowerCase ();
    if (positive.length () != negative.length ()) {
        return false;
    }
    int [] counts = new int [26];
    int diff = 0;
    for (int i = 0;
    i < positive.length (); i ++) {
        int pos = (int) positive.charAt (i) - 97;
        if (counts [pos] >= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [pos] ++;
        int neg = (int) negative.charAt (i) - 97;
        if (counts [neg] <= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [neg] --;
    }
    return diff == 0;
}
----------------------------------------

 public static boolean isAnagram (String first, String second)
{ 
    TreeMap<Character, Integer> countsOfFirstWord = new TreeMap<> ();
    TreeMap<Character, Integer> countsOfSecondWord = new TreeMap<> ();
    first = first.toLowerCase ();
    second = second.toLowerCase ();
    for (char ch : first.toCharArray ()) {
        countsOfFirstWord.put (ch, countsOfFirstWord.getOrDefault (ch, 0) + 1);
    }
    for (char ch : second.toCharArray ()) {
        countsOfSecondWord.put (ch, countsOfSecondWord.getOrDefault (ch, 0) + 1);
    }
    return countsOfFirstWord.equals (countsOfSecondWord);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
548
8
Gpt3D_Clone548_8.java 1 27
Gpt3D_Clone548_8.java 28 46
----------------------------------------

public static boolean isAnagram (String first, String second) {
    String positive = first.toLowerCase ();
    String negative = second.toLowerCase ();
    if (positive.length () != negative.length ()) {
        return false;
    }
    int [] counts = new int [26];
    int diff = 0;
    for (int i = 0;
    i < positive.length (); i ++) {
        int pos = (int) positive.charAt (i) - 97;
        if (counts [pos] >= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [pos] ++;
        int neg = (int) negative.charAt (i) - 97;
        if (counts [neg] <= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [neg] --;
    }
    return diff == 0;
}
----------------------------------------

 public static boolean isAnagram (String first, String second) 
{ 
    if (first.length() != second.length()) 
        return false; 
    int[] counter = new int[26]; 
    for (int i = 0; i < first.length(); i++) 
    { 
        counter[first.charAt(i) - 97]++; 
        counter[second.charAt(i) - 97]--; 
    } 
    for (int i : counter) 
    { 
        if (i != 0) 
            return false; 
    } 
    return true; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
548
9
Gpt3D_Clone548_9.java 1 27
Gpt3D_Clone548_9.java 28 37
----------------------------------------

public static boolean isAnagram (String first, String second) {
    String positive = first.toLowerCase ();
    String negative = second.toLowerCase ();
    if (positive.length () != negative.length ()) {
        return false;
    }
    int [] counts = new int [26];
    int diff = 0;
    for (int i = 0;
    i < positive.length (); i ++) {
        int pos = (int) positive.charAt (i) - 97;
        if (counts [pos] >= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [pos] ++;
        int neg = (int) negative.charAt (i) - 97;
        if (counts [neg] <= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [neg] --;
    }
    return diff == 0;
}
----------------------------------------

  public static boolean isAnagram (String first, String second) 
{ 
    char[] firstCharArray = first.toLowerCase().toCharArray(); 
    char[] secondCharArray = second.toLowerCase().toCharArray(); 
    Arrays.sort(firstCharArray); 
    Arrays.sort(secondCharArray); 
    return Arrays.equals(firstCharArray, secondCharArray); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
54
0
Gpt3D_Clone54_0.java 1 18
Gpt3D_Clone54_0.java 19 47
----------------------------------------

public static boolean isBalanced (String brackets) {
    Map < Character, Character > braces = new HashMap < > ();
    braces.put ('(', ')');
    braces.put ('[', ']');
    braces.put ('{', '}');
    if (brackets.length () % 2 != 0) {
        return false;
    }
    Stack < Character > halfBraces = new Stack ();
    for (char ch : brackets.toCharArray ()) {
        if (braces.containsKey (ch)) {
            halfBraces.push (braces.get (ch));
        } else if (halfBraces.isEmpty () || ch != halfBraces.pop ()) {
            return false;
        }
    }
    return halfBraces.isEmpty ();
}
----------------------------------------

  public static boolean isBalanced (String brackets) {
    ArrayList<Character> list = new ArrayList<>();
    list.add('(');
    list.add(')');
    list.add('[');
    list.add(']');
    list.add('{');
    list.add('}');
    if(brackets.length() % 2 != 0) {
        return false;
    } 
    int counter = 0;
    for(int i = 0; i < brackets.length(); i++) {
        char ch = brackets.charAt(i);
        if(list.contains(ch)) {
            counter++;
        if(counter % 2 != 0) {
            return false;
        }
       }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
54
2
Gpt3D_Clone54_2.java 1 18
Gpt3D_Clone54_2.java 19 43
----------------------------------------

public static boolean isBalanced (String brackets) {
    Map < Character, Character > braces = new HashMap < > ();
    braces.put ('(', ')');
    braces.put ('[', ']');
    braces.put ('{', '}');
    if (brackets.length () % 2 != 0) {
        return false;
    }
    Stack < Character > halfBraces = new Stack ();
    for (char ch : brackets.toCharArray ()) {
        if (braces.containsKey (ch)) {
            halfBraces.push (braces.get (ch));
        } else if (halfBraces.isEmpty () || ch != halfBraces.pop ()) {
            return false;
        }
    }
    return halfBraces.isEmpty ();
}
----------------------------------------

  public static boolean isBalanced(String brackets) {
    if (brackets.length() % 2 != 0){
        return false;
    }
    HashMap<Character, Character> hm = new HashMap<>();
    hm.put('{', '}');
    hm.put('(', ')');
    hm.put('[', ']');
    Deque<Character> stack = new ArrayDeque<>();
    for (int i = 0; i < brackets.length(); i++) {
        char ch = brackets.charAt(i);
        if (hm.containsKey(ch)){
            stack.push(hm.get(ch));
        }
        else if (stack.isEmpty() || stack.peek() != ch){
            return false;
        }
        else {
            stack.pop();
        }
    }
    return (stack.isEmpty());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
54
4
Gpt3D_Clone54_4.java 1 18
Gpt3D_Clone54_4.java 19 65
----------------------------------------

public static boolean isBalanced (String brackets) {
    Map < Character, Character > braces = new HashMap < > ();
    braces.put ('(', ')');
    braces.put ('[', ']');
    braces.put ('{', '}');
    if (brackets.length () % 2 != 0) {
        return false;
    }
    Stack < Character > halfBraces = new Stack ();
    for (char ch : brackets.toCharArray ()) {
        if (braces.containsKey (ch)) {
            halfBraces.push (braces.get (ch));
        } else if (halfBraces.isEmpty () || ch != halfBraces.pop ()) {
            return false;
        }
    }
    return halfBraces.isEmpty ();
}
----------------------------------------

 public static boolean isBalanced (String brackets) { 
        Map<Character, Character> map = new HashMap<Character, Character>();
        map.put('(', ')'); 
        map.put('[', ']'); 
        map.put('{', '}'); 
        if (brackets.length() % 2 != 0) 
            return false; 
        Stack<Character> stack = new Stack<Character>(); 
        for (int i = 0; i < brackets.length(); i++) { 
            char curr = brackets.charAt(i); 
            if (map.containsKey(curr)) { 
                stack.push(map.get(curr));
            }  
            else if (!stack.isEmpty() && 
                     stack.peek() == curr) { 
                stack.pop(); 
            }
            else {
                return false; 
            }
        } 
        return stack.isEmpty(); 
    } 
 public static boolean isBalanced(String brackets) {
    if (brackets.length() % 2 != 0) {
        return false;
    }
    Map<Character, Character> map = new HashMap<>();
    map.put('(', ')');
    map.put('[', ']');
    map.put('{', '}');
    Stack<Character> stack = new Stack<>();
    for (int i = 0; i < brackets.length(); i++) {
        char curr = brackets.charAt(i);
        if (map.containsKey(curr)) {
            stack.push(map.get(curr));
        } else if (stack.empty() || stack.peek() != curr) {
            return false;
        } else {
            stack.pop();
        }
    }
    return stack.empty();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
54
7
Gpt3D_Clone54_7.java 1 18
Gpt3D_Clone54_7.java 19 65
----------------------------------------

public static boolean isBalanced (String brackets) {
    Map < Character, Character > braces = new HashMap < > ();
    braces.put ('(', ')');
    braces.put ('[', ']');
    braces.put ('{', '}');
    if (brackets.length () % 2 != 0) {
        return false;
    }
    Stack < Character > halfBraces = new Stack ();
    for (char ch : brackets.toCharArray ()) {
        if (braces.containsKey (ch)) {
            halfBraces.push (braces.get (ch));
        } else if (halfBraces.isEmpty () || ch != halfBraces.pop ()) {
            return false;
        }
    }
    return halfBraces.isEmpty ();
}
----------------------------------------

 public static boolean isBalanced(String brackets) { 
        Stack<Character> stack  = new Stack<>(); 
        int lenString = brackets.length(); 
        if (lenString % 2 != 0){
         return false; 
        }
        else { 
            for (int i = 0; i < lenString; i++){ 
                char ch = brackets.charAt(i); 
                if (ch == '{') 
                    stack.push('}'); 
                else if (ch == '[') 
                    stack.push(']'); 
                else if (ch == '(') 
                    stack.push(')'); 
                else if (stack.isEmpty() || stack.peek() != ch) 
                    return false; 
                else
                    stack.pop(); 
            }
            return stack.isEmpty(); 
        } 
    } 
  public static boolean isBalanced(String brackets) {
    if (brackets.length() % 2 != 0) {
        return false;
    }
    Map<Character, Character> map = new HashMap<>();
    map.put('(', ')'); 
    map.put('[', ']'); 
    map.put('{', '}'); 
    Deque<Character> stack = new ArrayDeque<Character>();
    for (int i = 0; i < brackets.length(); i++) {
        char curr = brackets.charAt(i);
        if (map.containsKey(curr)) {
            stack.addLast(map.get(curr));
        } else if(!stack.isEmpty() && stack.getLast() == curr) {
            stack.removeLast();
        } else {
            return false;
        }
    }
    return stack.isEmpty();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
550
0
Gpt3D_Clone550_0.java 1 27
Gpt3D_Clone550_0.java 28 59
----------------------------------------

public static boolean isAnagram (String first, String second) {
    String positive = first.toLowerCase ();
    String negative = second.toLowerCase ();
    if (positive.length () != negative.length ()) {
        return false;
    }
    int [] counts = new int [26];
    int diff = 0;
    for (int i = 0;
    i < positive.length (); i ++) {
        int pos = (int) positive.charAt (i) - 97;
        if (counts [pos] >= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [pos] ++;
        int neg = (int) negative.charAt (i) - 97;
        if (counts [neg] <= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [neg] --;
    }
    return diff == 0;
}
----------------------------------------

 public static boolean isAnagram (String first, String second) {
	  String positive = first.toLowerCase();
	  String negative = second.toLowerCase();
	  if (positive.length() != negative.length()) {
	    return false;
	  }
	  Map<Character, Integer> counts = new HashMap<>();
	  for (int i = 0; i < positive.length(); i++) {
	    int pos = (int) positive.charAt(i) - 97;
	    if (counts.containsKey((char) (pos + 97))) {
	      int val = counts.get((char) (pos + 97));
	      counts.put((char) (pos + 97), val + 1);
	    } else {
	      counts.put((char) (pos + 97), 1);
	    }
	    int neg = (int) negative.charAt(i) - 97;
	    if (counts.containsKey((char) (neg + 97))) {
	      int val = counts.get((char) (neg + 97));
	      counts.put((char) (neg + 97), val - 1);
	    } else {
	      return false;
	    }
	  }
	  for (int num : counts.values()) {
	    if (num != 0) {
	      return false;
	    }
	  }
	  return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
550
1
Gpt3D_Clone550_1.java 1 27
Gpt3D_Clone550_1.java 28 58
----------------------------------------

public static boolean isAnagram (String first, String second) {
    String positive = first.toLowerCase ();
    String negative = second.toLowerCase ();
    if (positive.length () != negative.length ()) {
        return false;
    }
    int [] counts = new int [26];
    int diff = 0;
    for (int i = 0;
    i < positive.length (); i ++) {
        int pos = (int) positive.charAt (i) - 97;
        if (counts [pos] >= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [pos] ++;
        int neg = (int) negative.charAt (i) - 97;
        if (counts [neg] <= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [neg] --;
    }
    return diff == 0;
}
----------------------------------------

 public static boolean isAnagram (String first, String second) {
	  String pos = first.toLowerCase();
	  String neg = second.toLowerCase();
	  if (pos.length() != neg.length()) {
	    return false;
	  }
	  Map<Character, Integer> counts = new HashMap<>();
	  for (char c : pos.toCharArray()) {
	    if (counts.containsKey(c)) {
	      counts.put(c, counts.get(c) + 1);
	    } else {
	      counts.put(c, 1);
	    }
	  }
	  for (char c : neg.toCharArray()) {
	    if (counts.containsKey(c)) {
	      counts.put(c, counts.get(c) - 1);
	    } else {
	      return false;
	    }
	  }
	  for (int num : counts.values()) {
	    if (num != 0) {
	      return false;
	    }
	  }
	  return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
550
2
Gpt3D_Clone550_2.java 1 27
Gpt3D_Clone550_2.java 28 51
----------------------------------------

public static boolean isAnagram (String first, String second) {
    String positive = first.toLowerCase ();
    String negative = second.toLowerCase ();
    if (positive.length () != negative.length ()) {
        return false;
    }
    int [] counts = new int [26];
    int diff = 0;
    for (int i = 0;
    i < positive.length (); i ++) {
        int pos = (int) positive.charAt (i) - 97;
        if (counts [pos] >= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [pos] ++;
        int neg = (int) negative.charAt (i) - 97;
        if (counts [neg] <= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [neg] --;
    }
    return diff == 0;
}
----------------------------------------

 public static boolean isAnagram(String first, String second){
	  String positive = first.toLowerCase();
	  String negative = second.toLowerCase();
	  if (positive.length() != negative.length()) {
	    return false;
	  }
	  Map<Character, Integer> counts = new HashMap<>();
	  for (int i = 0; i < positive.length(); i++) {
	    char pos = positive.charAt(i);
	    char neg = negative.charAt(i); 
	    counts.putIfAbsent(pos, 0);
	    counts.put(pos, counts.get(pos)+1); 
	    counts.putIfAbsent(neg, 0);
	    counts.put(neg, counts.get(neg)-1); 
	  }
	  for (Integer num : counts.values()) {
	    if (num != 0) {
	      return false;
	    }
	  }
	  return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
550
3
Gpt3D_Clone550_3.java 1 27
Gpt3D_Clone550_3.java 28 51
----------------------------------------

public static boolean isAnagram (String first, String second) {
    String positive = first.toLowerCase ();
    String negative = second.toLowerCase ();
    if (positive.length () != negative.length ()) {
        return false;
    }
    int [] counts = new int [26];
    int diff = 0;
    for (int i = 0;
    i < positive.length (); i ++) {
        int pos = (int) positive.charAt (i) - 97;
        if (counts [pos] >= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [pos] ++;
        int neg = (int) negative.charAt (i) - 97;
        if (counts [neg] <= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [neg] --;
    }
    return diff == 0;
}
----------------------------------------

 public static boolean isAnagram (String first, String second) {
	  String positive = first.toLowerCase();
	  String negative = second.toLowerCase();
	  if (positive.length() != negative.length()) {
	    return false;
	  }
	  char[] pos = positive.toCharArray();
	  char[] neg = negative.toCharArray();
	  int[] count = new int[26];
	  for (char c : pos) {
	    count[c-97]++;
	  }
	  for (char c : neg) {
	    count[c-97]--;
	  }
	  for (int n : count) {
	    if (n != 0) {
	      return false;
	    }
	  }
	  return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
550
4
Gpt3D_Clone550_4.java 1 27
Gpt3D_Clone550_4.java 28 48
----------------------------------------

public static boolean isAnagram (String first, String second) {
    String positive = first.toLowerCase ();
    String negative = second.toLowerCase ();
    if (positive.length () != negative.length ()) {
        return false;
    }
    int [] counts = new int [26];
    int diff = 0;
    for (int i = 0;
    i < positive.length (); i ++) {
        int pos = (int) positive.charAt (i) - 97;
        if (counts [pos] >= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [pos] ++;
        int neg = (int) negative.charAt (i) - 97;
        if (counts [neg] <= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [neg] --;
    }
    return diff == 0;
}
----------------------------------------

 public static boolean isAnagram (String first, String second) { 
	  String positive = first.toLowerCase(); 
	  String negative = second.toLowerCase(); 
	  if (positive.length() != negative.length()) { 
	    return false; 
	  } 
	  int[] checksum = new int[26]; 
	  for (int i = 0; i < positive.length(); i++) { 
	    int pos = positive.charAt(i) - 97; 
	    checksum[pos]++; 
	    int neg = negative.charAt(i) - 97; 
	    checksum[neg]--; 
	  } 
	  int diff = 0; 
	  for (int val : checksum) { 
	    diff += val; 
	  } 
	  return diff == 0; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
550
5
Gpt3D_Clone550_5.java 1 27
Gpt3D_Clone550_5.java 28 50
----------------------------------------

public static boolean isAnagram (String first, String second) {
    String positive = first.toLowerCase ();
    String negative = second.toLowerCase ();
    if (positive.length () != negative.length ()) {
        return false;
    }
    int [] counts = new int [26];
    int diff = 0;
    for (int i = 0;
    i < positive.length (); i ++) {
        int pos = (int) positive.charAt (i) - 97;
        if (counts [pos] >= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [pos] ++;
        int neg = (int) negative.charAt (i) - 97;
        if (counts [neg] <= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [neg] --;
    }
    return diff == 0;
}
----------------------------------------

 public static boolean isAnagram (String first, String second) {
	  String pos = first.toLowerCase();
	  String neg = second.toLowerCase();
	  if (pos.length() != neg.length()) {
	    return false;
	  }
	  int[] alphabet = new int[26];
	  for (int i = 0; i < pos.length(); i++) {
	    char c = pos.charAt(i);
	    alphabet[c - 'a'] += 1;
	  }
	  for (int i = 0; i < neg.length(); i++) {
	    char c = neg.charAt(i);
	    alphabet[c - 'a'] -= 1;
	    if (alphabet[c - 'a'] < 0) {
	      return false;
	    }
	  }
	  return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
550
6
Gpt3D_Clone550_6.java 1 27
Gpt3D_Clone550_6.java 28 49
----------------------------------------

public static boolean isAnagram (String first, String second) {
    String positive = first.toLowerCase ();
    String negative = second.toLowerCase ();
    if (positive.length () != negative.length ()) {
        return false;
    }
    int [] counts = new int [26];
    int diff = 0;
    for (int i = 0;
    i < positive.length (); i ++) {
        int pos = (int) positive.charAt (i) - 97;
        if (counts [pos] >= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [pos] ++;
        int neg = (int) negative.charAt (i) - 97;
        if (counts [neg] <= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [neg] --;
    }
    return diff == 0;
}
----------------------------------------

 public static boolean isAnagram (String first, String second) {
	  String positive = first.toLowerCase();
	  String negative = second.toLowerCase();
	  if (positive.length() != negative.length()) {
	    return false;
	  }
	  int[] count = new int[26];
	  for (int i = 0; i < positive.length(); i++) {
	    int pos = positive.charAt(i) - 97;
	    count[pos]++;
	    int neg = negative.charAt(i) - 97;
	    count[neg]--;
	  }
	  for (int n : count) {
	    if (n != 0) {
	      return false;
	    }
	  }
	  return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
550
7
Gpt3D_Clone550_7.java 1 27
Gpt3D_Clone550_7.java 28 50
----------------------------------------

public static boolean isAnagram (String first, String second) {
    String positive = first.toLowerCase ();
    String negative = second.toLowerCase ();
    if (positive.length () != negative.length ()) {
        return false;
    }
    int [] counts = new int [26];
    int diff = 0;
    for (int i = 0;
    i < positive.length (); i ++) {
        int pos = (int) positive.charAt (i) - 97;
        if (counts [pos] >= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [pos] ++;
        int neg = (int) negative.charAt (i) - 97;
        if (counts [neg] <= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [neg] --;
    }
    return diff == 0;
}
----------------------------------------

 public static boolean isAnagram (String first, String second) {
	  String positive = first.toLowerCase();
	  String negative = second.toLowerCase();
	  if (positive.length() != negative.length()) {
	    return false;
	  }
	  int[] count = new int[26];
	  for (int i = 0; i < positive.length(); i++) {
	    int pos = (positive.charAt(i) - 'a'); 
	    count[pos]++;
	    int neg = (negative.charAt(i) - 'a');
	    count[neg]--;
	  }
	  for (int i : count) {
	    if (i > 0) {
	      return false;
	    }
	  }
	  return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
550
8
Gpt3D_Clone550_8.java 1 27
Gpt3D_Clone550_8.java 28 48
----------------------------------------

public static boolean isAnagram (String first, String second) {
    String positive = first.toLowerCase ();
    String negative = second.toLowerCase ();
    if (positive.length () != negative.length ()) {
        return false;
    }
    int [] counts = new int [26];
    int diff = 0;
    for (int i = 0;
    i < positive.length (); i ++) {
        int pos = (int) positive.charAt (i) - 97;
        if (counts [pos] >= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [pos] ++;
        int neg = (int) negative.charAt (i) - 97;
        if (counts [neg] <= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [neg] --;
    }
    return diff == 0;
}
----------------------------------------

 public static boolean isAnagram (String first, String second) {
	  String pos = first.toLowerCase();
	  String neg = second.toLowerCase();
	  if (pos.length() != neg.length()) {
	    return false;
	  }
	  StringBuilder sb = new StringBuilder();
	  sb.append(pos);
	  for (int i = 0; i < neg.length(); i++) {
	    char c = neg.charAt(i);
	    if (sb.indexOf(String.valueOf(c)) == -1) {
	      return false;
	    }
	    else {
	      sb.deleteCharAt(sb.indexOf(String.valueOf(c)));
	    }
	  }
	  return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
550
9
Gpt3D_Clone550_9.java 1 27
Gpt3D_Clone550_9.java 28 46
----------------------------------------

public static boolean isAnagram (String first, String second) {
    String positive = first.toLowerCase ();
    String negative = second.toLowerCase ();
    if (positive.length () != negative.length ()) {
        return false;
    }
    int [] counts = new int [26];
    int diff = 0;
    for (int i = 0;
    i < positive.length (); i ++) {
        int pos = (int) positive.charAt (i) - 97;
        if (counts [pos] >= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [pos] ++;
        int neg = (int) negative.charAt (i) - 97;
        if (counts [neg] <= 0) {
            diff ++;
        } else {
            diff --;
        }
        counts [neg] --;
    }
    return diff == 0;
}
----------------------------------------

 public static boolean isAnagram (String first, String second) {
	  String pos = first.toLowerCase();
	  String neg = second.toLowerCase();
	  if (pos.length() != neg.length()) {
	    return false;
	  }
	  char[] posArray = pos.toCharArray();
	  char[] negArray = neg.toCharArray();
	  Arrays.sort(posArray);
	  Arrays.sort(negArray);
	  for (int i = 0; i < pos.length(); i++) {
	    if (posArray[i] != negArray[i]) {
	      return false;
	    }
	  }
	  return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
553
0
Gpt3D_Clone553_0.java 1 30
Gpt3D_Clone553_0.java 31 65
----------------------------------------

public static boolean areAnagrams (String one, String two) {
    if (one.length () == two.length ()) {
        String s0 = one.toLowerCase ();
        String s1 = two.toLowerCase ();
        HashMap < Character, Integer > chars = new HashMap < Character, Integer > (one.length ());
        Integer count;
        for (char c : s0.toCharArray ()) {
            count = chars.get (c);
            count = Integer.valueOf (count != null ? count + 1 : 1);
            chars.put (c, count);
        }
        for (char c : s1.toCharArray ()) {
            count = chars.get (c);
            if (count == null) {
                return false;
            } else {
                count --;
                chars.put (c, count);
            }
        }
        for (Integer i : chars.values ()) {
            if (i != 0) {
                return false;
            }
        }
        return true;
    } else {
        return false;
    }
}
----------------------------------------

 public static boolean areAnagrams (String one, String two) {
	if (one.length () == two.length ()) {
	  Map<Character, Integer> map1 = new HashMap<>();
	  Map<Character, Integer> map2 = new HashMap<>();
	  for (char c : one.toLowerCase().toCharArray()) {
	    if (map1.containsKey(c)) {
	      map1.put(c, map1.get(c) + 1);
	    }
	    else {
	      map1.put(c, 1);
	    }
	  }
	  for (char c : two.toLowerCase().toCharArray()) {
	    if (map2.containsKey(c)) {
	      map2.put(c, map2.get(c) + 1);
	    }
	    else {
	      map2.put(c, 1);
	    }
	  }
	  for(Map.Entry<Character, Integer> entry1 : map1.entrySet()) {
	    Character key = entry1.getKey();
	    Integer value = entry1.getValue();
	     if(value != map2.get(key))
	      return false;
	  }
	 
	  return true;
	}
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
553
1
Gpt3D_Clone553_1.java 1 30
Gpt3D_Clone553_1.java 31 62
----------------------------------------

public static boolean areAnagrams (String one, String two) {
    if (one.length () == two.length ()) {
        String s0 = one.toLowerCase ();
        String s1 = two.toLowerCase ();
        HashMap < Character, Integer > chars = new HashMap < Character, Integer > (one.length ());
        Integer count;
        for (char c : s0.toCharArray ()) {
            count = chars.get (c);
            count = Integer.valueOf (count != null ? count + 1 : 1);
            chars.put (c, count);
        }
        for (char c : s1.toCharArray ()) {
            count = chars.get (c);
            if (count == null) {
                return false;
            } else {
                count --;
                chars.put (c, count);
            }
        }
        for (Integer i : chars.values ()) {
            if (i != 0) {
                return false;
            }
        }
        return true;
    } else {
        return false;
    }
}
----------------------------------------

 public static boolean areAnagrams (String one, String two) {if (one.length() == two.length()) {
	  Map<Character, Integer> map = new HashMap<>();
	 
	  for (char c: one.toLowerCase().toCharArray()) {
	    if (map.containsKey(c)) {
	      map.put(c, map.get(c) + 1);
	    }
	    else {
	      map.put(c, 1);
	    }
	  }
	 
	  for (char c : two.toLowerCase().toCharArray()) {
	    if (!map.containsKey(c)) {
	      return false;
	    }
	    else {
	      int count = map.get(c);
	      if (count == 1) {
		map.remove(c);
	      }
	      else {
		map.put(c, count - 1);
	      }
	    }
	  }
	 
	  return map.isEmpty();
	  }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
553
2
Gpt3D_Clone553_2.java 1 30
Gpt3D_Clone553_2.java 31 54
----------------------------------------

public static boolean areAnagrams (String one, String two) {
    if (one.length () == two.length ()) {
        String s0 = one.toLowerCase ();
        String s1 = two.toLowerCase ();
        HashMap < Character, Integer > chars = new HashMap < Character, Integer > (one.length ());
        Integer count;
        for (char c : s0.toCharArray ()) {
            count = chars.get (c);
            count = Integer.valueOf (count != null ? count + 1 : 1);
            chars.put (c, count);
        }
        for (char c : s1.toCharArray ()) {
            count = chars.get (c);
            if (count == null) {
                return false;
            } else {
                count --;
                chars.put (c, count);
            }
        }
        for (Integer i : chars.values ()) {
            if (i != 0) {
                return false;
            }
        }
        return true;
    } else {
        return false;
    }
}
----------------------------------------

 public static boolean areAnagrams (String one, String two) {
	if (one.length() == two.length()) 
	{ 
	    char[] firstWord = one.toLowerCase().toCharArray(); 
	    char[] secondWord = two.toLowerCase().toCharArray(); 
	    int[] word1 = new int[26]; 
	    int[] word2 = new int[26]; 
	    for(int i = 0; i < firstWord.length; i++) 
	    { 
		word1[firstWord[i] - 'a']++; 
		word2[secondWord[i] - 'a']++; 
	    } 
	    if(Arrays.equals(word1, word2)) 
	    { 
		return true; 
	    } 
	    return false; 
	} 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
553
3
Gpt3D_Clone553_3.java 1 30
Gpt3D_Clone553_3.java 31 52
----------------------------------------

public static boolean areAnagrams (String one, String two) {
    if (one.length () == two.length ()) {
        String s0 = one.toLowerCase ();
        String s1 = two.toLowerCase ();
        HashMap < Character, Integer > chars = new HashMap < Character, Integer > (one.length ());
        Integer count;
        for (char c : s0.toCharArray ()) {
            count = chars.get (c);
            count = Integer.valueOf (count != null ? count + 1 : 1);
            chars.put (c, count);
        }
        for (char c : s1.toCharArray ()) {
            count = chars.get (c);
            if (count == null) {
                return false;
            } else {
                count --;
                chars.put (c, count);
            }
        }
        for (Integer i : chars.values ()) {
            if (i != 0) {
                return false;
            }
        }
        return true;
    } else {
        return false;
    }
}
----------------------------------------

 public static boolean areAnagrams (String one, String two) {if (one.length() == two.length()) {
	  int[] letters = new int[128];
	 
	  for (char c : one.toLowerCase().toCharArray()) {
	    letters[c]++;
	  }
	 
	  for (char c : two.toLowerCase().toCharArray()) {
	    letters[c]--;
	  }
	 
	  for (int i : letters) {
	    if (i != 0) {
	      return false;
	    }
	  }
	 
	  return true;
	  }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
553
4
Gpt3D_Clone553_4.java 1 30
Gpt3D_Clone553_4.java 31 52
----------------------------------------

public static boolean areAnagrams (String one, String two) {
    if (one.length () == two.length ()) {
        String s0 = one.toLowerCase ();
        String s1 = two.toLowerCase ();
        HashMap < Character, Integer > chars = new HashMap < Character, Integer > (one.length ());
        Integer count;
        for (char c : s0.toCharArray ()) {
            count = chars.get (c);
            count = Integer.valueOf (count != null ? count + 1 : 1);
            chars.put (c, count);
        }
        for (char c : s1.toCharArray ()) {
            count = chars.get (c);
            if (count == null) {
                return false;
            } else {
                count --;
                chars.put (c, count);
            }
        }
        for (Integer i : chars.values ()) {
            if (i != 0) {
                return false;
            }
        }
        return true;
    } else {
        return false;
    }
}
----------------------------------------

 public static boolean areAnagrams (String one, String two) {
	if (one.length() == two.length()) {
	  int[] array1 = new int[128];
	  int[] array2 = new int[128];
	 
	  for (int i = 0; i < one.length(); i++) {
	    array1[one.charAt(i)]++;
	  }
	 
	  for (int i = 0; i < two.length(); i++) {
	    array2[two.charAt(i)]++;
	  }
	 
	  if (Arrays.equals(array1, array2)) {
	    return true;
	  }
	 
	  return false;
	}
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
553
5
Gpt3D_Clone553_5.java 1 30
Gpt3D_Clone553_5.java 31 49
----------------------------------------

public static boolean areAnagrams (String one, String two) {
    if (one.length () == two.length ()) {
        String s0 = one.toLowerCase ();
        String s1 = two.toLowerCase ();
        HashMap < Character, Integer > chars = new HashMap < Character, Integer > (one.length ());
        Integer count;
        for (char c : s0.toCharArray ()) {
            count = chars.get (c);
            count = Integer.valueOf (count != null ? count + 1 : 1);
            chars.put (c, count);
        }
        for (char c : s1.toCharArray ()) {
            count = chars.get (c);
            if (count == null) {
                return false;
            } else {
                count --;
                chars.put (c, count);
            }
        }
        for (Integer i : chars.values ()) {
            if (i != 0) {
                return false;
            }
        }
        return true;
    } else {
        return false;
    }
}
----------------------------------------

 public static boolean areAnagrams (String one, String two) {
	if (one.length() == two.length()) {
	   String s0 = one.toLowerCase(); 
	   String s1 = two.toLowerCase();
	   s0 = s0.replaceAll("\\s+", "");
	   s1 = s1.replaceAll("\\s+", "");
	   Char[] oneChars = s0.toCharArray(); 
	   Char[] twoChars = s1.toCharArray(); 
	   Arrays.sort(oneChars);
	   Arrays.sort(twoChars);
	   return Arrays.equals(oneChars, twoChars);
	}
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
553
6
Gpt3D_Clone553_6.java 1 30
Gpt3D_Clone553_6.java 31 48
----------------------------------------

public static boolean areAnagrams (String one, String two) {
    if (one.length () == two.length ()) {
        String s0 = one.toLowerCase ();
        String s1 = two.toLowerCase ();
        HashMap < Character, Integer > chars = new HashMap < Character, Integer > (one.length ());
        Integer count;
        for (char c : s0.toCharArray ()) {
            count = chars.get (c);
            count = Integer.valueOf (count != null ? count + 1 : 1);
            chars.put (c, count);
        }
        for (char c : s1.toCharArray ()) {
            count = chars.get (c);
            if (count == null) {
                return false;
            } else {
                count --;
                chars.put (c, count);
            }
        }
        for (Integer i : chars.values ()) {
            if (i != 0) {
                return false;
            }
        }
        return true;
    } else {
        return false;
    }
}
----------------------------------------

 public static boolean areAnagrams (String one, String two) {
	if (one.length () == two.length ()) {
	  int[] letters = new int[128];
	  for (int i = 0; i < one.length (); i++) {
	    letters [Character.toLowerCase (one.charAt (i))]++;
	  }
	  for (int i = 0; i < two.length (); i++) {
	    letters [Character.toLowerCase (two.charAt (i))]--;
	  }
	  for (int i = 0; i < 128; i++) {
	    if (letters [i] != 0)
	      return false;
	  }
	  return true;
	}
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
553
7
Gpt3D_Clone553_7.java 1 30
Gpt3D_Clone553_7.java 31 45
----------------------------------------

public static boolean areAnagrams (String one, String two) {
    if (one.length () == two.length ()) {
        String s0 = one.toLowerCase ();
        String s1 = two.toLowerCase ();
        HashMap < Character, Integer > chars = new HashMap < Character, Integer > (one.length ());
        Integer count;
        for (char c : s0.toCharArray ()) {
            count = chars.get (c);
            count = Integer.valueOf (count != null ? count + 1 : 1);
            chars.put (c, count);
        }
        for (char c : s1.toCharArray ()) {
            count = chars.get (c);
            if (count == null) {
                return false;
            } else {
                count --;
                chars.put (c, count);
            }
        }
        for (Integer i : chars.values ()) {
            if (i != 0) {
                return false;
            }
        }
        return true;
    } else {
        return false;
    }
}
----------------------------------------

 public static boolean areAnagrams (String one, String two) {if (one.length() == two.length()) {
	  char[] a = one.toLowerCase().toLowerCase().toCharArray();
	  char[] b = two.toLowerCase().toLowerCase().toCharArray();
	  Arrays.sort(a);
	  Arrays.sort(b);
	 
	  if (Arrays.equals(a, b)) {
	    return true;
	  } 
	  return false;
	  }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
553
8
Gpt3D_Clone553_8.java 1 30
Gpt3D_Clone553_8.java 31 49
----------------------------------------

public static boolean areAnagrams (String one, String two) {
    if (one.length () == two.length ()) {
        String s0 = one.toLowerCase ();
        String s1 = two.toLowerCase ();
        HashMap < Character, Integer > chars = new HashMap < Character, Integer > (one.length ());
        Integer count;
        for (char c : s0.toCharArray ()) {
            count = chars.get (c);
            count = Integer.valueOf (count != null ? count + 1 : 1);
            chars.put (c, count);
        }
        for (char c : s1.toCharArray ()) {
            count = chars.get (c);
            if (count == null) {
                return false;
            } else {
                count --;
                chars.put (c, count);
            }
        }
        for (Integer i : chars.values ()) {
            if (i != 0) {
                return false;
            }
        }
        return true;
    } else {
        return false;
    }
}
----------------------------------------

 public static boolean areAnagrams (String one, String two) {
	if (one.length () == two.length ()) {
	  int[] letters = new int[128];
	  for (int i = 0; i < one.length (); i++) {
	    letters [Character.toLowerCase (one.charAt (i))]++;
	    letters [Character.toLowerCase (two.charAt (i))]--;
	  }
	  for (int i = 0; i < 128; i++) {
	    if (letters [i] != 0)
	      return false;
	  }
	  return true;
	}
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
553
9
Gpt3D_Clone553_9.java 1 30
Gpt3D_Clone553_9.java 31 43
----------------------------------------

public static boolean areAnagrams (String one, String two) {
    if (one.length () == two.length ()) {
        String s0 = one.toLowerCase ();
        String s1 = two.toLowerCase ();
        HashMap < Character, Integer > chars = new HashMap < Character, Integer > (one.length ());
        Integer count;
        for (char c : s0.toCharArray ()) {
            count = chars.get (c);
            count = Integer.valueOf (count != null ? count + 1 : 1);
            chars.put (c, count);
        }
        for (char c : s1.toCharArray ()) {
            count = chars.get (c);
            if (count == null) {
                return false;
            } else {
                count --;
                chars.put (c, count);
            }
        }
        for (Integer i : chars.values ()) {
            if (i != 0) {
                return false;
            }
        }
        return true;
    } else {
        return false;
    }
}
----------------------------------------

 public static boolean areAnagrams (String one, String two) {
	if (one.length() == two.length()) {
	  char[] oneChars = one.toLowerCase().toCharArray();
	  char[] twoChars = two.toLowerCase().toCharArray();
	 
	  Arrays.sort(oneChars);
	  Arrays.sort(twoChars);
	 
	  return Arrays.equals(oneChars, twoChars);
	}
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
554
3
Gpt3D_Clone554_3.java 1 11
Gpt3D_Clone554_3.java 12 24
----------------------------------------

public static void main (String [] args) {
    String str = "my name is khan";
    String words [] = str.split ("\\s");
    String capitalizedWord = "";
    for (String w : words) {
        String first = w.substring (0, 1);
        String f_after = w.substring (1);
        capitalizedWord += first.toUpperCase () + f_after + " ";
    }
    System.out.println (capitalizedWord);
}
----------------------------------------

 public static void main(String[] args) {
    String str = "my name is khan";
    String[] words = str.split("\\s");
    StringBuilder capitalizedWord = new StringBuilder();
    for (String w : words) {
        String first = String.valueOf(w.charAt(0)).toUpperCase();
        String f_after = w.substring(1);
        capitalizedWord.append(first).append(f_after).append(" ");
    }
    System.out.println("The capitalized string is : " + capitalizedWord);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
554
6
Gpt3D_Clone554_6.java 1 11
Gpt3D_Clone554_6.java 12 25
----------------------------------------

public static void main (String [] args) {
    String str = "my name is khan";
    String words [] = str.split ("\\s");
    String capitalizedWord = "";
    for (String w : words) {
        String first = w.substring (0, 1);
        String f_after = w.substring (1);
        capitalizedWord += first.toUpperCase () + f_after + " ";
    }
    System.out.println (capitalizedWord);
}
----------------------------------------

 public static void main(String[] args) {
    String str = "my name is khan";
    String words[] = str.split("\\s");
    for (int i = 0; i < words.length; i++) {
        words[i] = words[i].substring(0, 1).toUpperCase() + words[i].substring(1);
    }
    String capitalizedString = String.join(" ", words);
    System.out.println(capitalizedString);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
554
7
Gpt3D_Clone554_7.java 1 11
Gpt3D_Clone554_7.java 12 22
----------------------------------------

public static void main (String [] args) {
    String str = "my name is khan";
    String words [] = str.split ("\\s");
    String capitalizedWord = "";
    for (String w : words) {
        String first = w.substring (0, 1);
        String f_after = w.substring (1);
        capitalizedWord += first.toUpperCase () + f_after + " ";
    }
    System.out.println (capitalizedWord);
}
----------------------------------------

 public static void main(String[] args) {
    String str = "my name is khan";
    String[] words = str.split("\\s");
    for (int i = 0; i < words.length; i++) {
        words[i] = Character.toUpperCase(words[i].charAt(0)) + words[i].substring(1);
    }
    String capitalizedString = String.join(" ", words);
    System.out.println(capitalizedString);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
555
0
Gpt3D_Clone555_0.java 1 13
Gpt3D_Clone555_0.java 14 28
----------------------------------------

private String capitalizer (String word) {
    String [] words = word.split (" ");
    StringBuilder sb = new StringBuilder ();
    if (words [0].length () > 0) {
        sb.append (Character.toUpperCase (words [0].charAt (0)) + words [0].subSequence (1, words [0].length ()).toString ().toLowerCase ());
        for (int i = 1;
        i < words.length; i ++) {
            sb.append (" ");
            sb.append (Character.toUpperCase (words [i].charAt (0)) + words [i].subSequence (1, words [i].length ()).toString ().toLowerCase ());
        }
    }
    return sb.toString ();
}
----------------------------------------

 private String capitalizer(String word) {
    String[] words = word.split(" ");
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < words.length; i++) {
        String w = words[i];
        if (w.length() > 0) {
            String firstLetter = w.substring(0,1).toUpperCase();
            sb.append(firstLetter + w.substring(1).toLowerCase() + " ");
        }
    }
    return sb.toString().trim();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
555
1
Gpt3D_Clone555_1.java 1 13
Gpt3D_Clone555_1.java 14 27
----------------------------------------

private String capitalizer (String word) {
    String [] words = word.split (" ");
    StringBuilder sb = new StringBuilder ();
    if (words [0].length () > 0) {
        sb.append (Character.toUpperCase (words [0].charAt (0)) + words [0].subSequence (1, words [0].length ()).toString ().toLowerCase ());
        for (int i = 1;
        i < words.length; i ++) {
            sb.append (" ");
            sb.append (Character.toUpperCase (words [i].charAt (0)) + words [i].subSequence (1, words [i].length ()).toString ().toLowerCase ());
        }
    }
    return sb.toString ();
}
----------------------------------------

 private String capitalizer(String word) {
    String[] words = word.split(" ");
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < words.length; i++) {
        if (words[i].length() > 0) {
            String first =Character.toUpperCase(words[i].charAt(0)) + "";
            String rest = words[i].substring(1).toLowerCase();
            sb.append(first+rest).append(" ");
        }
    }
    return sb.toString().trim();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
555
10
Gpt3D_Clone555_10.java 1 13
Gpt3D_Clone555_10.java 14 18
----------------------------------------

private String capitalizer (String word) {
    String [] words = word.split (" ");
    StringBuilder sb = new StringBuilder ();
    if (words [0].length () > 0) {
        sb.append (Character.toUpperCase (words [0].charAt (0)) + words [0].subSequence (1, words [0].length ()).toString ().toLowerCase ());
        for (int i = 1;
        i < words.length; i ++) {
            sb.append (" ");
            sb.append (Character.toUpperCase (words [i].charAt (0)) + words [i].subSequence (1, words [i].length ()).toString ().toLowerCase ());
        }
    }
    return sb.toString ();
}
----------------------------------------

 private String capitalizeWord(String word) {
    return Character.toUpperCase(word.charAt(0)) + word.substring(1).toLowerCase();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
555
2
Gpt3D_Clone555_2.java 1 13
Gpt3D_Clone555_2.java 14 26
----------------------------------------

private String capitalizer (String word) {
    String [] words = word.split (" ");
    StringBuilder sb = new StringBuilder ();
    if (words [0].length () > 0) {
        sb.append (Character.toUpperCase (words [0].charAt (0)) + words [0].subSequence (1, words [0].length ()).toString ().toLowerCase ());
        for (int i = 1;
        i < words.length; i ++) {
            sb.append (" ");
            sb.append (Character.toUpperCase (words [i].charAt (0)) + words [i].subSequence (1, words [i].length ()).toString ().toLowerCase ());
        }
    }
    return sb.toString ();
}
----------------------------------------

 private String capitalizer(String word) {
    String[] words = word.split(" ");
    StringBuilder sb = new StringBuilder();
    for(String w : words) {
        if(w.length() > 0) {
            String modWord = w.substring(0, 1).toUpperCase() + w.substring(1).toLowerCase();
            sb.append(modWord).append(" ");
        }
    }
    return sb.toString().trim();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
555
3
Gpt3D_Clone555_3.java 1 13
Gpt3D_Clone555_3.java 14 26
----------------------------------------

private String capitalizer (String word) {
    String [] words = word.split (" ");
    StringBuilder sb = new StringBuilder ();
    if (words [0].length () > 0) {
        sb.append (Character.toUpperCase (words [0].charAt (0)) + words [0].subSequence (1, words [0].length ()).toString ().toLowerCase ());
        for (int i = 1;
        i < words.length; i ++) {
            sb.append (" ");
            sb.append (Character.toUpperCase (words [i].charAt (0)) + words [i].subSequence (1, words [i].length ()).toString ().toLowerCase ());
        }
    }
    return sb.toString ();
}
----------------------------------------

  private String capitalizer(String word) {
    String[] words = word.split(" ");
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < words.length; i++) {
        if (words[i].length() > 0) {
            char firstL = words[i].toLowerCase().charAt(0);
            sb.append(Character.toUpperCase(firstL)).append(words[i].substring(1).toLowerCase()).append(" ");
        }
    }
    return sb.toString().trim();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
555
4
Gpt3D_Clone555_4.java 1 13
Gpt3D_Clone555_4.java 14 25
----------------------------------------

private String capitalizer (String word) {
    String [] words = word.split (" ");
    StringBuilder sb = new StringBuilder ();
    if (words [0].length () > 0) {
        sb.append (Character.toUpperCase (words [0].charAt (0)) + words [0].subSequence (1, words [0].length ()).toString ().toLowerCase ());
        for (int i = 1;
        i < words.length; i ++) {
            sb.append (" ");
            sb.append (Character.toUpperCase (words [i].charAt (0)) + words [i].subSequence (1, words [i].length ()).toString ().toLowerCase ());
        }
    }
    return sb.toString ();
}
----------------------------------------

 private String capitalizer(String word) {
    String[] words = word.split(" ");
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < words.length; i++) {
        Character c = Character.toUpperCase(words[i].charAt(0));
        String rest = words[i].substring(1).toLowerCase();
        sb.append(c).append(rest).append(" ");
    }
    return sb.toString().trim();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
555
5
Gpt3D_Clone555_5.java 1 13
Gpt3D_Clone555_5.java 14 28
----------------------------------------

private String capitalizer (String word) {
    String [] words = word.split (" ");
    StringBuilder sb = new StringBuilder ();
    if (words [0].length () > 0) {
        sb.append (Character.toUpperCase (words [0].charAt (0)) + words [0].subSequence (1, words [0].length ()).toString ().toLowerCase ());
        for (int i = 1;
        i < words.length; i ++) {
            sb.append (" ");
            sb.append (Character.toUpperCase (words [i].charAt (0)) + words [i].subSequence (1, words [i].length ()).toString ().toLowerCase ());
        }
    }
    return sb.toString ();
}
----------------------------------------

 private String capitalizer(String word) {
    String[] words = word.split(" ");
    StringBuilder sb = new StringBuilder();
    
    for (String w : words) {
        if (w.length() > 0) {
            String modified = w.substring(0, 1).toUpperCase() + w.substring(1).toLowerCase();
            sb.append(modified).append(" ");
        }
    }
    return sb.toString().trim();
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
555
6
Gpt3D_Clone555_6.java 1 13
Gpt3D_Clone555_6.java 14 26
----------------------------------------

private String capitalizer (String word) {
    String [] words = word.split (" ");
    StringBuilder sb = new StringBuilder ();
    if (words [0].length () > 0) {
        sb.append (Character.toUpperCase (words [0].charAt (0)) + words [0].subSequence (1, words [0].length ()).toString ().toLowerCase ());
        for (int i = 1;
        i < words.length; i ++) {
            sb.append (" ");
            sb.append (Character.toUpperCase (words [i].charAt (0)) + words [i].subSequence (1, words [i].length ()).toString ().toLowerCase ());
        }
    }
    return sb.toString ();
}
----------------------------------------

 private String capitalizer(String word) {
    String[] words = word.split(" ");
    StringBuilder sb = new StringBuilder();
    for (String w : words) {
        if(w.length() > 0) {
            sb.append(w.substring(0,1).toUpperCase().concat(w.substring(1).toLowerCase())).append(" ");
        }
    }
    return sb.toString().trim();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
555
7
Gpt3D_Clone555_7.java 1 13
Gpt3D_Clone555_7.java 14 25
----------------------------------------

private String capitalizer (String word) {
    String [] words = word.split (" ");
    StringBuilder sb = new StringBuilder ();
    if (words [0].length () > 0) {
        sb.append (Character.toUpperCase (words [0].charAt (0)) + words [0].subSequence (1, words [0].length ()).toString ().toLowerCase ());
        for (int i = 1;
        i < words.length; i ++) {
            sb.append (" ");
            sb.append (Character.toUpperCase (words [i].charAt (0)) + words [i].subSequence (1, words [i].length ()).toString ().toLowerCase ());
        }
    }
    return sb.toString ();
}
----------------------------------------

 private String capitalizer(String word) {
    String[] words = word.split(" ");
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < words.length; i++) {
        char c = words[i].charAt(0);
        sb.append(Character.toUpperCase(c)).append(words[i].substring(1).toLowerCase()).append(" ");
    }
    return sb.toString().trim();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
555
8
Gpt3D_Clone555_8.java 1 13
Gpt3D_Clone555_8.java 14 23
----------------------------------------

private String capitalizer (String word) {
    String [] words = word.split (" ");
    StringBuilder sb = new StringBuilder ();
    if (words [0].length () > 0) {
        sb.append (Character.toUpperCase (words [0].charAt (0)) + words [0].subSequence (1, words [0].length ()).toString ().toLowerCase ());
        for (int i = 1;
        i < words.length; i ++) {
            sb.append (" ");
            sb.append (Character.toUpperCase (words [i].charAt (0)) + words [i].subSequence (1, words [i].length ()).toString ().toLowerCase ());
        }
    }
    return sb.toString ();
}
----------------------------------------

private String capitalizer(String word) {
    String[] words = word.split(" ");
    StringBuilder sb = new StringBuilder();
    for (String w : words) {
        sb.append(capitalizeWord(w)).append(" ");
    }
    return sb.toString().trim();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
555
9
Gpt3D_Clone555_9.java 1 13
Gpt3D_Clone555_9.java 14 25
----------------------------------------

private String capitalizer (String word) {
    String [] words = word.split (" ");
    StringBuilder sb = new StringBuilder ();
    if (words [0].length () > 0) {
        sb.append (Character.toUpperCase (words [0].charAt (0)) + words [0].subSequence (1, words [0].length ()).toString ().toLowerCase ());
        for (int i = 1;
        i < words.length; i ++) {
            sb.append (" ");
            sb.append (Character.toUpperCase (words [i].charAt (0)) + words [i].subSequence (1, words [i].length ()).toString ().toLowerCase ());
        }
    }
    return sb.toString ();
}
----------------------------------------

 private String capitalize (String val) {
    String result = "";
    for (String word : val.split(" ")) {
        if (word.length() > 0) {
            result += Character.toUpperCase(word.charAt(0)) + word.substring(1).toLowerCase() + " ";
        }
    }
    return result.trim();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
562
0
Gpt3D_Clone562_0.java 1 15
Gpt3D_Clone562_0.java 16 35
----------------------------------------

public void actionPerformed (ActionEvent e) {
    int x = (int) (Math.random () * getWidth ());
    int y = (int) (Math.random () * getHeight ());
    int width = (int) (Math.random () * (getWidth () / 4));
    int height = (int) (Math.random () * (getHeight () / 4));
    if (x + width > getWidth ()) {
        x = getWidth () - width;
    }
    if (y + height > getHeight ()) {
        y = getHeight () - height;
    }
    Color color = new Color ((int) (Math.random () * 255), (int) (Math.random () * 255), (int) (Math.random () * 255));
    lstShapes.add (new MyRectangle (x, y, width, height, color));
    repaint ();
}
----------------------------------------

  public void actionPerformed (ActionEvent e) {
     int x = (int) (Math.random () * (getWidth () -100));
     int y = (int) (Math.random () * (getHeight () -100));
     int width = (int) (Math.random () * (getWidth () / 7) + 20);
     int height = (int) (Math.random () * (getHeight () / 7) + 20);
     if (x + width > getWidth ()) {
         x = getWidth () - width;
     }
     if (y + height > getHeight ()) {
         y = getHeight () - height;
     }
     float r = (float) (Math.random () * 255);
     float g = (float) (Math.random () * 255);
     float b = (float) (Math.random () * 255);
     Color color = new Color (r, g, b);
     lstShapes.add (new MyRectangle (x, y, width, height, color));
     repaint ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
562
2
Gpt3D_Clone562_2.java 1 15
Gpt3D_Clone562_2.java 16 35
----------------------------------------

public void actionPerformed (ActionEvent e) {
    int x = (int) (Math.random () * getWidth ());
    int y = (int) (Math.random () * getHeight ());
    int width = (int) (Math.random () * (getWidth () / 4));
    int height = (int) (Math.random () * (getHeight () / 4));
    if (x + width > getWidth ()) {
        x = getWidth () - width;
    }
    if (y + height > getHeight ()) {
        y = getHeight () - height;
    }
    Color color = new Color ((int) (Math.random () * 255), (int) (Math.random () * 255), (int) (Math.random () * 255));
    lstShapes.add (new MyRectangle (x, y, width, height, color));
    repaint ();
}
----------------------------------------

  public void actionPerformed (ActionEvent e) {
     int x = (int) (20+ Math.random () * (getWidth () -50));
     int y = (int) (20+ Math.random () * (getHeight () -60));
     int width = (int) (Math.random () * (getWidth () / 4) + 30);
     int height = (int) (Math.random () * (getHeight () / 4) + 30);
     if (x + width > getWidth ()) {
         x = getWidth () - width;
     }
     if (y + height > getHeight ()) {
         y = getHeight () - height;
     }
     float a = (float) (Math.random () * 360);
     float b = (float) (Math.random () * 1);
     float c = (float) (Math.random () * 1);
     Color color = Color.getHSBColor(a, b, c);
     lstShapes.add (new MyRectangle (x, y, width, height, color));
     repaint ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
562
5
Gpt3D_Clone562_5.java 1 15
Gpt3D_Clone562_5.java 16 35
----------------------------------------

public void actionPerformed (ActionEvent e) {
    int x = (int) (Math.random () * getWidth ());
    int y = (int) (Math.random () * getHeight ());
    int width = (int) (Math.random () * (getWidth () / 4));
    int height = (int) (Math.random () * (getHeight () / 4));
    if (x + width > getWidth ()) {
        x = getWidth () - width;
    }
    if (y + height > getHeight ()) {
        y = getHeight () - height;
    }
    Color color = new Color ((int) (Math.random () * 255), (int) (Math.random () * 255), (int) (Math.random () * 255));
    lstShapes.add (new MyRectangle (x, y, width, height, color));
    repaint ();
}
----------------------------------------

 public void actionPerformed (ActionEvent e) {
    int x = (int) (Math.random () * getWidth () -60);
    int y = (int) (Math.random () * getHeight () -60);
    int width = (int) (60 + Math.random () * (getWidth () / 6));
    int height = (int) (60 + Math.random () * (getHeight () / 6));
    if (x + width > getWidth ()) {
        x = getWidth () - width;
    }
    if (y + height > getHeight ()) {
        y = getHeight () - height;
    }
    float a = (float) (Math.random () * 255);
    float b = (float) (Math.random () * 255);
    float c = (float) (Math.random () * 255);
    Color color = new Color (a, b, c);
    lstShapes.add (new MyRectangle (x, y, width, height, color));
    repaint ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
562
6
Gpt3D_Clone562_6.java 1 15
Gpt3D_Clone562_6.java 16 35
----------------------------------------

public void actionPerformed (ActionEvent e) {
    int x = (int) (Math.random () * getWidth ());
    int y = (int) (Math.random () * getHeight ());
    int width = (int) (Math.random () * (getWidth () / 4));
    int height = (int) (Math.random () * (getHeight () / 4));
    if (x + width > getWidth ()) {
        x = getWidth () - width;
    }
    if (y + height > getHeight ()) {
        y = getHeight () - height;
    }
    Color color = new Color ((int) (Math.random () * 255), (int) (Math.random () * 255), (int) (Math.random () * 255));
    lstShapes.add (new MyRectangle (x, y, width, height, color));
    repaint ();
}
----------------------------------------

  public void actionPerformed (ActionEvent e) {
     int x = (int) (Math.random () * (getWidth () -150));
     int y = (int) (Math.random () * (getHeight () -150));
     int width = (int) (Math.random () * (getWidth () / 8) + 30);
     int height = (int) (Math.random () * (getHeight () / 8) + 30);
     if (x + width > getWidth ()) {
         x = getWidth () - width;
     }
     if (y + height > getHeight ()) {
         y = getHeight () - height;
     }
     int r = (int) (Math.random () * 175 );
     int g = (int) (Math.random () * 150);
     int b = (int) (Math.random () * 100);
     Color color = new Color (r, g, b);
     lstShapes.add (new MyRectangle (x, y, width, height, color));
     repaint ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
563
2
Gpt3D_Clone563_2.java 1 15
Gpt3D_Clone563_2.java 16 26
----------------------------------------

public void actionPerformed (ActionEvent e) {
    int x = (int) (Math.random () * getWidth ());
    int y = (int) (Math.random () * getHeight ());
    int width = (int) (Math.random () * (getWidth () / 4));
    int height = (int) (Math.random () * (getHeight () / 4));
    if (x + width > getWidth ()) {
        x = getWidth () - width;
    }
    if (y + height > getHeight ()) {
        y = getHeight () - height;
    }
    Color color = new Color ((int) (Math.random () * 255), (int) (Math.random () * 255), (int) (Math.random () * 255));
    lstShapes.add (new MyRectangle (x, y, width, height, color));
    repaint ();
}
----------------------------------------

  public void actionPerformed (ActionEvent e) {
        int x = (int) (Math.random () * getWidth ());
        int y = (int) (Math.random () * getHeight ());
        int radius = (int) (Math.random () * (getWidth () / 4));
        Color color = new Color ((int) (Math.random () * 255), (int) (Math.random () * 255), (int) (Math.random () * 255));
        lstShapes.add (new MyCircle (x, y, radius, color));
        repaint ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
564
0
Gpt3D_Clone564_0.java 1 15
Gpt3D_Clone564_0.java 16 40
----------------------------------------

public void actionPerformed (ActionEvent e) {
    int x = (int) (Math.random () * getWidth ());
    int y = (int) (Math.random () * getHeight ());
    int width = (int) (Math.random () * (getWidth () / 4));
    int height = (int) (Math.random () * (getHeight () / 4));
    if (x + width > getWidth ()) {
        x = getWidth () - width;
    }
    if (y + height > getHeight ()) {
        y = getHeight () - height;
    }
    Color color = new Color ((int) (Math.random () * 255), (int) (Math.random () * 255), (int) (Math.random () * 255));
    lstShapes.add (new MyRectangle (x, y, width, height, color));
    repaint ();
}
----------------------------------------

 public void actionPerformed (ActionEvent e) { 
	int x = (int) (Math.random () * (getWidth() / 4));
    int y = (int) (Math.random () * (getHeight() / 4));
    double xRandom = Math.random();
    double yRandom = Math.random();
    int xRange = (int) (xRandom * (getWidth () / 4));
    int xOffset = (int) (getWidth() - xRange);
    x = (int) (xRandom * getWidth()) + xOffset;
    int yRange = (int) (yRandom * (getHeight () / 4));
    int yOffset = (int) (getHeight() - yRange);
    y = (int) (yRandom * getHeight()) + yOffset;
    int width = (int) (xRandom * (getWidth () / 8));
    int height = (int) (yRandom * (getHeight () / 8));
    if (x + width > getWidth()) {
        x = getWidth() - width;
    }
    if (y + height > getHeight()) {
        y = getHeight() - height;
    }
    Color color = new Color ((int) (Math.random () * 255), (int) (Math.random () * 255), (int) (Math.random () * 255));
    lstShapes.add (new MyRectangle (x, y, width, height, color));
    repaint ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
564
1
Gpt3D_Clone564_1.java 1 15
Gpt3D_Clone564_1.java 16 40
----------------------------------------

public void actionPerformed (ActionEvent e) {
    int x = (int) (Math.random () * getWidth ());
    int y = (int) (Math.random () * getHeight ());
    int width = (int) (Math.random () * (getWidth () / 4));
    int height = (int) (Math.random () * (getHeight () / 4));
    if (x + width > getWidth ()) {
        x = getWidth () - width;
    }
    if (y + height > getHeight ()) {
        y = getHeight () - height;
    }
    Color color = new Color ((int) (Math.random () * 255), (int) (Math.random () * 255), (int) (Math.random () * 255));
    lstShapes.add (new MyRectangle (x, y, width, height, color));
    repaint ();
}
----------------------------------------

 public void actionPerformed (ActionEvent e) { 
	int x = (int) (Math.random () * getWidth ());
    int y = (int) (Math.random () * getHeight ());
    double xRandom = Math.random();
    double yRandom = Math.random();
    int xRange = (int) (xRandom * (getWidth() * 0.75));
    int xOffset = (int) (getWidth() - xRange);
    x = (int) (xRandom * getWidth()) + xOffset;
    int yRange = (int) (yRandom * (getHeight() * 0.75));
    int yOffset = (int) (getHeight() - yRange);
    y = (int) (yRandom * getHeight()) + yOffset;
    int width = (int) (xRandom * (getWidth () / 4));
    int height = (int) (yRandom * (getHeight () / 4));
    if (x + width > getWidth()) {
        x = getWidth() - width;
    }
    if (y + height > getHeight()) {
        y = getHeight() - height;
    }
    Color color = new Color ((int) (Math.random () * 255), (int) (Math.random () * 255), (int) (Math.random () * 255));
    lstShapes.add (new MyRectangle (x, y, width, height, color));
    repaint ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
564
2
Gpt3D_Clone564_2.java 1 15
Gpt3D_Clone564_2.java 16 38
----------------------------------------

public void actionPerformed (ActionEvent e) {
    int x = (int) (Math.random () * getWidth ());
    int y = (int) (Math.random () * getHeight ());
    int width = (int) (Math.random () * (getWidth () / 4));
    int height = (int) (Math.random () * (getHeight () / 4));
    if (x + width > getWidth ()) {
        x = getWidth () - width;
    }
    if (y + height > getHeight ()) {
        y = getHeight () - height;
    }
    Color color = new Color ((int) (Math.random () * 255), (int) (Math.random () * 255), (int) (Math.random () * 255));
    lstShapes.add (new MyRectangle (x, y, width, height, color));
    repaint ();
}
----------------------------------------

  public void actionPerformed (ActionEvent e) { 
	double xRandom = Math.random();
    double yRandom = Math.random();
    int xRange = (int) (xRandom * getWidth() * 0.75);
    int xOffset = (int) (getWidth() - xRange);
    int x = (int) (xRandom * getWidth()) + xOffset;
    int yRange = (int) (yRandom * getHeight() * 0.75);
    int yOffset = (int) (getHeight() - yRange);
    int y = (int) (yRandom * getHeight()) + yOffset;
    int width = (int) (xRandom * (getWidth () / 4));
    int height = (int) (yRandom * (getHeight () / 4));
    if (x + width > getWidth()) {
        x = getWidth() - width;
    }
    if (y + height > getHeight()) {
        y = getHeight() - height;
    }
    Color color = new Color ((int) (Math.random () * 255), (int) (Math.random () * 255), (int) (Math.random () * 255));
    lstShapes.add (new MyRectangle (x, y, width, height, color));
    repaint ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
564
3
Gpt3D_Clone564_3.java 1 15
Gpt3D_Clone564_3.java 16 36
----------------------------------------

public void actionPerformed (ActionEvent e) {
    int x = (int) (Math.random () * getWidth ());
    int y = (int) (Math.random () * getHeight ());
    int width = (int) (Math.random () * (getWidth () / 4));
    int height = (int) (Math.random () * (getHeight () / 4));
    if (x + width > getWidth ()) {
        x = getWidth () - width;
    }
    if (y + height > getHeight ()) {
        y = getHeight () - height;
    }
    Color color = new Color ((int) (Math.random () * 255), (int) (Math.random () * 255), (int) (Math.random () * 255));
    lstShapes.add (new MyRectangle (x, y, width, height, color));
    repaint ();
}
----------------------------------------

 public void actionPerformed (ActionEvent e) { 
    double xRandom = Math.random();
    double yRandom = Math.random();
    int xOffset = (int) (xRandom * (getWidth()/2));
    int x = (int) (xRandom * getWidth()) - xOffset;
    int yOffset = (int) (yRandom * (getHeight()/2));
    int y = (int) (yRandom * getHeight()) - yOffset;
    int width = (int) (xRandom * (getWidth()/4));
    int height = (int) (yRandom * (getHeight()/4));
    if (x + width > getWidth()) {
        x = getWidth() - width;
    }
    if (y + height > getHeight()) {
        y = getHeight() - height;
    }
    Color color = new Color ((int) (Math.random () * 255), (int) (Math.random () * 255), (int) (Math.random () * 255));
    lstShapes.add (new MyRectangle (x, y, width, height, color));
    repaint ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
564
4
Gpt3D_Clone564_4.java 1 15
Gpt3D_Clone564_4.java 16 32
----------------------------------------

public void actionPerformed (ActionEvent e) {
    int x = (int) (Math.random () * getWidth ());
    int y = (int) (Math.random () * getHeight ());
    int width = (int) (Math.random () * (getWidth () / 4));
    int height = (int) (Math.random () * (getHeight () / 4));
    if (x + width > getWidth ()) {
        x = getWidth () - width;
    }
    if (y + height > getHeight ()) {
        y = getHeight () - height;
    }
    Color color = new Color ((int) (Math.random () * 255), (int) (Math.random () * 255), (int) (Math.random () * 255));
    lstShapes.add (new MyRectangle (x, y, width, height, color));
    repaint ();
}
----------------------------------------

 public void actionPerformed (ActionEvent e) { 
	int x = (int) (Math.random () * getWidth());
    int y = (int) (Math.random () * getHeight());
    int widthRange = (int) (Math.random () * getWidth() * 0.5);
	int widthOffset = (int) (getWidth() - widthRange);
    int width = widthOffset + (int) (Math.random () * widthRange);
    
    int heightRange = (int) (Math.random () * getHeight() * 0.5);
	int heightOffset = (int) (getHeight() - heightRange);
    int height = heightOffset + (int) (Math.random () * heightRange);
    
    Color color = new Color ((int) (Math.random () * 255), (int) (Math.random () * 255), (int) (Math.random () * 255));
    lstShapes.add (new MyRectangle (x, y, width, height, color));
    repaint ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
564
5
Gpt3D_Clone564_5.java 1 15
Gpt3D_Clone564_5.java 16 32
----------------------------------------

public void actionPerformed (ActionEvent e) {
    int x = (int) (Math.random () * getWidth ());
    int y = (int) (Math.random () * getHeight ());
    int width = (int) (Math.random () * (getWidth () / 4));
    int height = (int) (Math.random () * (getHeight () / 4));
    if (x + width > getWidth ()) {
        x = getWidth () - width;
    }
    if (y + height > getHeight ()) {
        y = getHeight () - height;
    }
    Color color = new Color ((int) (Math.random () * 255), (int) (Math.random () * 255), (int) (Math.random () * 255));
    lstShapes.add (new MyRectangle (x, y, width, height, color));
    repaint ();
}
----------------------------------------

 public void actionPerformed (ActionEvent e) { 
	int x = (int) (Math.random () * getWidth()) / 2;
    int y = (int) (Math.random () * getHeight()) / 2;
    int widthRange = (int) (Math.random () * getWidth());
	int widthOffset = (int) (widthRange * 0.75);
    int width = widthOffset - (int) (Math.random () * widthRange);
    
    int heightRange = (int) (Math.random () * getHeight());
	int heightOffset = (int) (heightRange * 0.75);
    int height = heightOffset - (int) (Math.random () * heightRange);
    
    Color color = new Color ((int) (Math.random () * 255), (int) (Math.random () * 255), (int) (Math.random () * 255));
    lstShapes.add (new MyRectangle (x, y, width, height, color));
    repaint ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
564
6
Gpt3D_Clone564_6.java 1 15
Gpt3D_Clone564_6.java 16 32
----------------------------------------

public void actionPerformed (ActionEvent e) {
    int x = (int) (Math.random () * getWidth ());
    int y = (int) (Math.random () * getHeight ());
    int width = (int) (Math.random () * (getWidth () / 4));
    int height = (int) (Math.random () * (getHeight () / 4));
    if (x + width > getWidth ()) {
        x = getWidth () - width;
    }
    if (y + height > getHeight ()) {
        y = getHeight () - height;
    }
    Color color = new Color ((int) (Math.random () * 255), (int) (Math.random () * 255), (int) (Math.random () * 255));
    lstShapes.add (new MyRectangle (x, y, width, height, color));
    repaint ();
}
----------------------------------------

 public void actionPerformed (ActionEvent e) { 
	int x = (int) ((Math.random () * getWidth()) / 1.5);
    int y = (int) ((Math.random () * getHeight()) / 1.5);
    int widthRange = (int) (Math.random () * (getWidth() / 2));
	int widthOffset = (int) (getWidth() - widthRange);
    int width = widthOffset + (int) (Math.random () * widthRange);
    
    int heightRange = (int) (Math.random () * (getHeight() / 2));
	int heightOffset = (int) (getHeight() - heightRange);
    int height = heightOffset + (int) (Math.random () * heightRange);
    
    Color color = new Color ((int) (Math.random () * 255), (int) (Math.random () * 255), (int) (Math.random () * 255));
    lstShapes.add (new MyRectangle (x, y, width, height, color));
    repaint ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
564
7
Gpt3D_Clone564_7.java 1 15
Gpt3D_Clone564_7.java 16 32
----------------------------------------

public void actionPerformed (ActionEvent e) {
    int x = (int) (Math.random () * getWidth ());
    int y = (int) (Math.random () * getHeight ());
    int width = (int) (Math.random () * (getWidth () / 4));
    int height = (int) (Math.random () * (getHeight () / 4));
    if (x + width > getWidth ()) {
        x = getWidth () - width;
    }
    if (y + height > getHeight ()) {
        y = getHeight () - height;
    }
    Color color = new Color ((int) (Math.random () * 255), (int) (Math.random () * 255), (int) (Math.random () * 255));
    lstShapes.add (new MyRectangle (x, y, width, height, color));
    repaint ();
}
----------------------------------------

 public void actionPerformed (ActionEvent e) { 
	int x = (int) (Math.random () * (getWidth() / 2));
    int y = (int) (Math.random () * (getHeight() / 2));
    int widthRange = (int) (Math.random () * getWidth() * 0.25);
	int widthOffset = (int) (getWidth() - widthRange);
    int width = widthOffset + (int) (Math.random () * widthRange);
    
    int heightRange = (int) (Math.random () * getHeight() * 0.25);
	int heightOffset = (int) (getHeight() - heightRange);
    int height = heightOffset + (int) (Math.random () * heightRange);
    
    Color color = new Color ((int) (Math.random () * 255), (int) (Math.random () * 255), (int) (Math.random () * 255));
    lstShapes.add (new MyRectangle (x, y, width, height, color));
    repaint ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
564
8
Gpt3D_Clone564_8.java 1 15
Gpt3D_Clone564_8.java 16 33
----------------------------------------

public void actionPerformed (ActionEvent e) {
    int x = (int) (Math.random () * getWidth ());
    int y = (int) (Math.random () * getHeight ());
    int width = (int) (Math.random () * (getWidth () / 4));
    int height = (int) (Math.random () * (getHeight () / 4));
    if (x + width > getWidth ()) {
        x = getWidth () - width;
    }
    if (y + height > getHeight ()) {
        y = getHeight () - height;
    }
    Color color = new Color ((int) (Math.random () * 255), (int) (Math.random () * 255), (int) (Math.random () * 255));
    lstShapes.add (new MyRectangle (x, y, width, height, color));
    repaint ();
}
----------------------------------------

 public void actionPerformed (ActionEvent e) { 
	int xRange = (int) (Math.random () * getWidth() * 0.5);
	int xOffset = (int) (Math.random () * (getWidth() - xRange) + (getWidth() * 0.5));
    int x = xOffset - (int) (Math.random () * xRange);
    
    int yRange = (int) (Math.random () * getHeight() * 0.5);
	int yOffset = (int) (Math.random () * (getHeight() - yRange) + (getHeight() * 0.5));
    int y = yOffset - (int) (Math.random () * yRange);
   
    int width = (int) (Math.random () * min(xRange, yRange));
    int height = (Math.random () * min(xRange, yRange));
    
    Color color = new Color ((int) (Math.random () * 255), (int) (Math.random () * 255), (int) (Math.random () * 255));
    lstShapes.add (new MyRectangle (x, y, width, height, color));
    repaint ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
564
9
Gpt3D_Clone564_9.java 1 15
Gpt3D_Clone564_9.java 16 33
----------------------------------------

public void actionPerformed (ActionEvent e) {
    int x = (int) (Math.random () * getWidth ());
    int y = (int) (Math.random () * getHeight ());
    int width = (int) (Math.random () * (getWidth () / 4));
    int height = (int) (Math.random () * (getHeight () / 4));
    if (x + width > getWidth ()) {
        x = getWidth () - width;
    }
    if (y + height > getHeight ()) {
        y = getHeight () - height;
    }
    Color color = new Color ((int) (Math.random () * 255), (int) (Math.random () * 255), (int) (Math.random () * 255));
    lstShapes.add (new MyRectangle (x, y, width, height, color));
    repaint ();
}
----------------------------------------

 public void actionPerformed (ActionEvent e) { 
    int xRange = (int) (Math.random () * getWidth () * 0.75);
	int xOffset = (int) (Math.random () * (getWidth() - xRange));
    int x = xOffset + (int) (Math.random () * xRange);
    
    int yRange = (int) (Math.random () * getHeight () * 0.75);
	int yOffset = (int) (Math.random () * (getHeight() - yRange));
    int y = yOffset + (int) (Math.random () * yRange);
   
    int width = (int) (Math.random () * min(xRange, yRange));
    int height = (Math.random () * min(xRange, yRange));
    
    Color color = new Color ((int) (Math.random () * 255), (int) (Math.random () * 255), (int) (Math.random () * 255));
    lstShapes.add (new MyRectangle (x, y, width, height, color));
    repaint ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
565
0
Gpt3D_Clone565_0.java 1 18
Gpt3D_Clone565_0.java 19 60
----------------------------------------

public boolean equals (Object obj) {
    if (this == obj) return true;
    if (obj == null) return false;
    if (getClass () != obj.getClass ()) return false;
    Connection other = (Connection) obj;
    if (dstAddr == null) {
        if (other.dstAddr != null) return false;
    } else if (! dstAddr.equals (other.dstAddr)) return false;
    if (dstPort != other.dstPort) return false;
    if (protocol == null) {
        if (other.protocol != null) return false;
    } else if (! protocol.equals (other.protocol)) return false;
    if (srcAddr == null) {
        if (other.srcAddr != null) return false;
    } else if (! srcAddr.equals (other.srcAddr)) return false;
    if (srcPort != other.srcPort) return false;
    return true;
}
----------------------------------------

 public boolean equals (Object obj) {
    if (this == obj) {
		return true;
	}
	if (obj == null) {
		return false;
	}
	if (this.getClass() != obj.getClass()) {
		return false;
	}
	Connection other = (Connection) obj;
	if (this.dstAddr == null) {
		if (other.dstAddr != null) {
			return false;
		}
	} else if (! this.dstAddr.equals(other.dstAddr)) {
		return false;
	}
	if (this.dstPort != other.dstPort) {
		return false;
	}
	if (this.protocol == null) {
		if (other.protocol != null) {
			return false;
		}
	} else if (! this.protocol.equals(other.protocol)) {
		return false;
	}
	if (this.srcAddr == null) {
		if (other.srcAddr != null) {
			return false;
		}
	} else if (! this.srcAddr.equals(other.srcAddr)) {
		return false;
	}
	if (this.srcPort != other.srcPort) {
		return false;
	}
	return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
565
1
Gpt3D_Clone565_1.java 1 18
Gpt3D_Clone565_1.java 19 41
----------------------------------------

public boolean equals (Object obj) {
    if (this == obj) return true;
    if (obj == null) return false;
    if (getClass () != obj.getClass ()) return false;
    Connection other = (Connection) obj;
    if (dstAddr == null) {
        if (other.dstAddr != null) return false;
    } else if (! dstAddr.equals (other.dstAddr)) return false;
    if (dstPort != other.dstPort) return false;
    if (protocol == null) {
        if (other.protocol != null) return false;
    } else if (! protocol.equals (other.protocol)) return false;
    if (srcAddr == null) {
        if (other.srcAddr != null) return false;
    } else if (! srcAddr.equals (other.srcAddr)) return false;
    if (srcPort != other.srcPort) return false;
    return true;
}
----------------------------------------

 public boolean equals(Object obj) {
    if (this == obj) {
        return true; 
    } else if (obj instanceof Connection) {
        Connection other = (Connection) obj;
        if (!(this.dstAddr == null ? other.dstAddr == null : this.dstAddr.equals(other.dstAddr))) {
            return false;
        } else if (this.dstPort != other.dstPort) {
            return false;
        } else if (!(this.protocol == null ? other.protocol == null : this.protocol.equals(other.protocol))) {
            return false;
        } else if (!(this.srcAddr == null ? other.srcAddr == null : this.srcAddr.equals(other.srcAddr))) {
            return false;
        } else if (this.srcPort != other.srcPort) {
            return false;
        }
        return true;
    } else {
        return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
565
2
Gpt3D_Clone565_2.java 1 18
Gpt3D_Clone565_2.java 19 46
----------------------------------------

public boolean equals (Object obj) {
    if (this == obj) return true;
    if (obj == null) return false;
    if (getClass () != obj.getClass ()) return false;
    Connection other = (Connection) obj;
    if (dstAddr == null) {
        if (other.dstAddr != null) return false;
    } else if (! dstAddr.equals (other.dstAddr)) return false;
    if (dstPort != other.dstPort) return false;
    if (protocol == null) {
        if (other.protocol != null) return false;
    } else if (! protocol.equals (other.protocol)) return false;
    if (srcAddr == null) {
        if (other.srcAddr != null) return false;
    } else if (! srcAddr.equals (other.srcAddr)) return false;
    if (srcPort != other.srcPort) return false;
    return true;
}
----------------------------------------

 public boolean equals(Object obj) {
    if (this == obj)
        return true;
        
    if (obj instanceof Connection) {
        Connection other = (Connection) obj;
        if ((this.dstAddr != null && other.dstAddr != null &&  this.dstAddr.equals(other.dstAddr))
            || (this.dstAddr == null && other.dstAddr == null)) 
        {
            if (this.dstPort == other.dstPort) {
                if (( this.protocol != null && other.protocol != null && this.protocol.equals(other.protocol))
                    || ( this.protocol == null && other.protocol == null)) 
                {
                    if (( this.srcAddr != null && other.srcAddr != null && this.srcAddr.equals(other.srcAddr))
                        || ( this.srcAddr == null && other.srcAddr == null)) 
                    {
                        if (this.srcPort == other.srcPort) {
                            return true;
                        }
                    }
                }
            }
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
565
3
Gpt3D_Clone565_3.java 1 18
Gpt3D_Clone565_3.java 19 37
----------------------------------------

public boolean equals (Object obj) {
    if (this == obj) return true;
    if (obj == null) return false;
    if (getClass () != obj.getClass ()) return false;
    Connection other = (Connection) obj;
    if (dstAddr == null) {
        if (other.dstAddr != null) return false;
    } else if (! dstAddr.equals (other.dstAddr)) return false;
    if (dstPort != other.dstPort) return false;
    if (protocol == null) {
        if (other.protocol != null) return false;
    } else if (! protocol.equals (other.protocol)) return false;
    if (srcAddr == null) {
        if (other.srcAddr != null) return false;
    } else if (! srcAddr.equals (other.srcAddr)) return false;
    if (srcPort != other.srcPort) return false;
    return true;
}
----------------------------------------

 public boolean equals (Object obj) {
    if (this == obj) 
        return true;
    if (obj == null || this.getClass() != obj.getClass()) 
        return false;
    Connection other = (Connection) obj;
    if (((this.dstAddr == null && other.dstAddr != null) ||
        (this.dstAddr != null && ! this.dstAddr.equals(other.dstAddr))) ||
        this.dstPort != other.dstPort ||
        ((this.protocol == null && other.protocol != null) ||
        (this.protocol != null && ! this.protocol.equals(other.protocol))) ||
        ((this.srcAddr == null && other.srcAddr != null) ||
        (this.srcAddr != null && ! this.srcAddr.equals(other.srcAddr))) ||
        this.srcPort != other.srcPort)
        return false;
    else return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
566
0
Gpt3D_Clone566_0.java 1 22
Gpt3D_Clone566_0.java 23 40
----------------------------------------

public static String readFileAsString (String fileName, String charsetName) throws java.io.IOException {
    java.io.InputStream is = new java.io.FileInputStream (fileName);
    try {
        final int bufsize = 4096;
        int available = is.available ();
        byte [] data = new byte [available < bufsize ? bufsize : available];
        int used = 0;
        while (true) {
            if (data.length - used < bufsize) {
                byte [] newData = new byte [data.length << 1];
                System.arraycopy (data, 0, newData, 0, used);
                data = newData;
            }
            int got = is.read (data, used, data.length - used);
            if (got <= 0) break;
            used += got;
        }
        return charsetName != null ? new String (data, 0, used, charsetName) : new String (data, 0, used);
    } finally {
        is.close ();
    }
}
----------------------------------------

	public static String readFileAsString (String fileName, String charsetName) throws IOException {
    FileInputStream fis = new FileInputStream(fileName);
    ByteArrayOutputStream bos = new ByteArrayOutputStream();
    byte[] buf = new byte[4096];
    try {
        for (int readNum; (readNum = fis.read(buf)) != -1; ) {
            bos.write(buf, 0, readNum);
        }
    } catch (IOException ex) {
        throw ex;
    } finally {
        fis.close();
    }
    byte[] bytes = bos.toByteArray();
    return charsetName != null ? new String(bytes, charsetName) : new String(bytes);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
566
1
Gpt3D_Clone566_1.java 1 22
Gpt3D_Clone566_1.java 23 42
----------------------------------------

public static String readFileAsString (String fileName, String charsetName) throws java.io.IOException {
    java.io.InputStream is = new java.io.FileInputStream (fileName);
    try {
        final int bufsize = 4096;
        int available = is.available ();
        byte [] data = new byte [available < bufsize ? bufsize : available];
        int used = 0;
        while (true) {
            if (data.length - used < bufsize) {
                byte [] newData = new byte [data.length << 1];
                System.arraycopy (data, 0, newData, 0, used);
                data = newData;
            }
            int got = is.read (data, used, data.length - used);
            if (got <= 0) break;
            used += got;
        }
        return charsetName != null ? new String (data, 0, used, charsetName) : new String (data, 0, used);
    } finally {
        is.close ();
    }
}
----------------------------------------

	public static String readFileAsString(String fileName, String charsetName) throws IOException {
	FileInputStream fis = new FileInputStream(fileName);
	try {
		byte[] medBuffer = new byte[4096];
		int got;
		String fileContent = "";
		while ((got = fis.read(medBuffer)) != -1) {
            fileContent += new String(medBuffer, 0, got);
        }
		return charsetName != null ? new String(fileContent.getBytes(), charsetName) : fileContent;
	} finally {
		fis.close();
	}
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
566
2
Gpt3D_Clone566_2.java 1 22
Gpt3D_Clone566_2.java 23 37
----------------------------------------

public static String readFileAsString (String fileName, String charsetName) throws java.io.IOException {
    java.io.InputStream is = new java.io.FileInputStream (fileName);
    try {
        final int bufsize = 4096;
        int available = is.available ();
        byte [] data = new byte [available < bufsize ? bufsize : available];
        int used = 0;
        while (true) {
            if (data.length - used < bufsize) {
                byte [] newData = new byte [data.length << 1];
                System.arraycopy (data, 0, newData, 0, used);
                data = newData;
            }
            int got = is.read (data, used, data.length - used);
            if (got <= 0) break;
            used += got;
        }
        return charsetName != null ? new String (data, 0, used, charsetName) : new String (data, 0, used);
    } finally {
        is.close ();
    }
}
----------------------------------------

 public static String readFileAsString(String fileName, String charsetName) throws IOException {
    java.io.InputStream is = new java.io.FileInputStream (fileName);
    int bufferSize = 4096;
    byte[] buffer = new byte[bufferSize];
    String result = "";
    while(is.available() > 0) {
        int size = Math.min(is.available(), bufferSize);
        is.read(buffer, 0, size);
        result += new String(buffer, 0, size, charsetName);
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
567
0
Gpt3D_Clone567_0.java 1 24
Gpt3D_Clone567_0.java 25 63
----------------------------------------

public static void main (String [] args) {
    if (args.length != 2) {
        System.out.println ("usage: ./zipf size skew");
        System.exit (- 1);
    }
    ZipfGenerator zipf = new ZipfGenerator (Integer.valueOf (args [0]), Double.valueOf (args [1]));
    for (int i = 1;
    i <= 10; i ++) {
        System.out.println (i + " " + zipf.getProbability (i));
    }
    int hist [] = new int [12];
    for (int i = 0;
    i < 12; i ++) {
        hist [i] = 0;
    }
    System.out.println ("Testing the probability distribution:");
    int sum = 0;
    for (int i = 1;
    i <= 1000000; i ++) {
        hist [zipf.next ()] ++;
    }
    for (int i = 0;
    i < 12; i ++) System.out.println (i + " " + hist [i] / 1000000.0);
}
----------------------------------------

public static void main (String [] args) {
    if (args.length != 2) {
        System.out.println ("usage: ./zipf size skew");
        System.exit (- 1);
    }
    int size = Integer.valueOf (args [0]);
    double dSkew = Double.valueOf (args [1]);
    ZipfGenerator zipf = new ZipfGenerator (size, dSkew);
    double[] probArray = new double[size+1];
    for (int i =1; i<=size ;i++){
        probArray[i] = zipf.getProbability (i);
        System.out.println (i + " " + probArray[i]);
    }
    double sum;
    int[] hist = new int[size+1];
    for (int i = 0;
    i <=size ; i ++) {
        hist [i] = 0;
    }
    System.out.println ("Testing the probability distribution:");
    Random rand = new Random();
    sum=0;
    for (int i = 0;
    i < 1000000; i ++) {
        double random = rand.nextDouble();
        int index = 0;
        while(sum < random){
            sum += probArray[index];
            index++;
        }
        hist[index]++;
        sum=0;
    }
    for (int i = 0;
    i < size; i ++) System.out.println (i + " " + hist [i] / 1000000.0);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
567
1
Gpt3D_Clone567_1.java 1 24
Gpt3D_Clone567_1.java 25 60
----------------------------------------

public static void main (String [] args) {
    if (args.length != 2) {
        System.out.println ("usage: ./zipf size skew");
        System.exit (- 1);
    }
    ZipfGenerator zipf = new ZipfGenerator (Integer.valueOf (args [0]), Double.valueOf (args [1]));
    for (int i = 1;
    i <= 10; i ++) {
        System.out.println (i + " " + zipf.getProbability (i));
    }
    int hist [] = new int [12];
    for (int i = 0;
    i < 12; i ++) {
        hist [i] = 0;
    }
    System.out.println ("Testing the probability distribution:");
    int sum = 0;
    for (int i = 1;
    i <= 1000000; i ++) {
        hist [zipf.next ()] ++;
    }
    for (int i = 0;
    i < 12; i ++) System.out.println (i + " " + hist [i] / 1000000.0);
}
----------------------------------------

public static void main (String [] args) {
    if (args.length != 2) {
        System.out.println ("usage: ./zipf size skew");
        System.exit (- 1);
    }
    int size = Integer.valueOf (args [0]);
    double dSkew = Double.valueOf (args [1]);
    ZipfGenerator zipf = new ZipfGenerator (size, dSkew);
    double[] probArray = new double[size+1];
    for (int i =1; i<=size ;i++){
        probArray[i] = zipf.getProbability (i);
        System.out.println (i + " " + probArray[i]);
    }
    HashMap<Integer, Integer> hist = new HashMap<>();
    for (int i = 0;
    i < size; i ++) {
        hist.put(i, 0);
    }
    System.out.println ("Testing the probability distribution:");
    int sum = 0;
    int previousTotal = 0;
    for (int i = 1;
    i <= 1000000; i ++) {
        int random = zipf.getNumberByProbabilityAtIndex(previousTotal, i);
        previousTotal += random;
        if(hist.containsKey(random)) {
            int count = hist.get(random);
            hist.put(random, count+1);
        }
    }
    for (int i = 0;
    i < size; i ++) System.out.println (i + " " + (hist.get(i) / 1000000.0));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
567
2
Gpt3D_Clone567_2.java 1 24
Gpt3D_Clone567_2.java 25 61
----------------------------------------

public static void main (String [] args) {
    if (args.length != 2) {
        System.out.println ("usage: ./zipf size skew");
        System.exit (- 1);
    }
    ZipfGenerator zipf = new ZipfGenerator (Integer.valueOf (args [0]), Double.valueOf (args [1]));
    for (int i = 1;
    i <= 10; i ++) {
        System.out.println (i + " " + zipf.getProbability (i));
    }
    int hist [] = new int [12];
    for (int i = 0;
    i < 12; i ++) {
        hist [i] = 0;
    }
    System.out.println ("Testing the probability distribution:");
    int sum = 0;
    for (int i = 1;
    i <= 1000000; i ++) {
        hist [zipf.next ()] ++;
    }
    for (int i = 0;
    i < 12; i ++) System.out.println (i + " " + hist [i] / 1000000.0);
}
----------------------------------------

public static void main (String [] args) {
    if (args.length != 2) {
        System.out.println ("usage: ./zipf size skew");
        System.exit (- 1);
    }
    int size = Integer.valueOf (args [0]);
    double dSkew = Double.valueOf (args [1]);
    ZipfGenerator zipf = new ZipfGenerator (size, dSkew);
    double[] probArray = new double[size+1];
    for (int i =1; i<=size ;i++){
        probArray[i] = zipf.getProbability (i);
        System.out.println (i + " " + probArray[i]);
    }
    int hist [] = new int [size];
    for (int i = 0;
    i < size; i ++) {
        hist [i] = 0;
    }
    System.out.println ("Testing the probability distribution:");
    int sum = 0;
    Random r = new Random();
    for (int i = 0;
    i <= 1000000; i ++) {
        double random = r.nextDouble();
        for(int j = 0 ; j<size; j++){
            if(random < probArray[j]){
                hist[j]++;
                break;
            }
        }
    }
    for (int i = 0;
    i < size; i ++) System.out.println (i + " " + hist [i] / 1000000.0);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
567
3
Gpt3D_Clone567_3.java 1 24
Gpt3D_Clone567_3.java 25 60
----------------------------------------

public static void main (String [] args) {
    if (args.length != 2) {
        System.out.println ("usage: ./zipf size skew");
        System.exit (- 1);
    }
    ZipfGenerator zipf = new ZipfGenerator (Integer.valueOf (args [0]), Double.valueOf (args [1]));
    for (int i = 1;
    i <= 10; i ++) {
        System.out.println (i + " " + zipf.getProbability (i));
    }
    int hist [] = new int [12];
    for (int i = 0;
    i < 12; i ++) {
        hist [i] = 0;
    }
    System.out.println ("Testing the probability distribution:");
    int sum = 0;
    for (int i = 1;
    i <= 1000000; i ++) {
        hist [zipf.next ()] ++;
    }
    for (int i = 0;
    i < 12; i ++) System.out.println (i + " " + hist [i] / 1000000.0);
}
----------------------------------------

public static void main (String [] args) {
    if (args.length != 2) {
        System.out.println ("usage: ./zipf size skew");
        System.exit (- 1);
    }
    int size = Integer.valueOf (args [0]);
    double dSkew = Double.valueOf (args [1]);
    ZipfGenerator zipf = new ZipfGenerator (size, dSkew);
    double[] probArray = new double[size+1];
    for (int i =1; i<=size ;i++){
        probArray[i] = zipf.getProbability (i);
        System.out.println (i + " " + probArray[i]);
    }
    int hist [] = new int [size];
    for (int i = 0;
    i < size; i ++) {
        hist [i] = 0;
    }
    System.out.println ("Testing the probability distribution:");
    int random;
    for (int i = 0;
    i < 1000000; i ++) {
        if(i < size){
            random = zipf.getNumberByLinearDistributionAtIndex(i);
            hist[random]++;
        } else {
            random = zipf.nextByLinearDistribution(i);
            hist[random]++;
        }
    }
    for (int i = 0;
    i < size; i ++) System.out.println (i + " " + hist [i] / 1000000.0);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
567
4
Gpt3D_Clone567_4.java 1 24
Gpt3D_Clone567_4.java 25 58
----------------------------------------

public static void main (String [] args) {
    if (args.length != 2) {
        System.out.println ("usage: ./zipf size skew");
        System.exit (- 1);
    }
    ZipfGenerator zipf = new ZipfGenerator (Integer.valueOf (args [0]), Double.valueOf (args [1]));
    for (int i = 1;
    i <= 10; i ++) {
        System.out.println (i + " " + zipf.getProbability (i));
    }
    int hist [] = new int [12];
    for (int i = 0;
    i < 12; i ++) {
        hist [i] = 0;
    }
    System.out.println ("Testing the probability distribution:");
    int sum = 0;
    for (int i = 1;
    i <= 1000000; i ++) {
        hist [zipf.next ()] ++;
    }
    for (int i = 0;
    i < 12; i ++) System.out.println (i + " " + hist [i] / 1000000.0);
}
----------------------------------------

public static void main (String [] args) {
    if (args.length != 2) {
        System.out.println ("usage: ./zipf size skew");
        System.exit (- 1);
    }
    int size = Integer.valueOf (args [0]);
    double dSkew = Double.valueOf (args [1]);
    ZipfGenerator zipf = new ZipfGenerator (size, dSkew);
    double[] probArray = new double[size+1];
    for (int i =1; i<=size ;i++){
        probArray[i] = zipf.getProbability (i);
        System.out.println (i + " " + probArray[i]);
    }
    Map<Integer, Integer> hist = new HashMap<>();
    for (int i = 0;
    i < size; i ++) {
        hist.put(i, 0);
    }
    System.out.println ("Testing the probability distribution:");
    int sum = 0;
    for (int i = 1;
    i <= 1000000; i ++) {
        int random = zipf.next();
        if(hist.containsKey(random)) {
            int count = hist.get(random);
            hist.put(random, count+1);
        }
    }
    for (int i = 0;
    i < size; i ++) System.out.println (i + " " + (hist.get(i) / 1000000.0));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
567
5
Gpt3D_Clone567_5.java 1 24
Gpt3D_Clone567_5.java 25 55
----------------------------------------

public static void main (String [] args) {
    if (args.length != 2) {
        System.out.println ("usage: ./zipf size skew");
        System.exit (- 1);
    }
    ZipfGenerator zipf = new ZipfGenerator (Integer.valueOf (args [0]), Double.valueOf (args [1]));
    for (int i = 1;
    i <= 10; i ++) {
        System.out.println (i + " " + zipf.getProbability (i));
    }
    int hist [] = new int [12];
    for (int i = 0;
    i < 12; i ++) {
        hist [i] = 0;
    }
    System.out.println ("Testing the probability distribution:");
    int sum = 0;
    for (int i = 1;
    i <= 1000000; i ++) {
        hist [zipf.next ()] ++;
    }
    for (int i = 0;
    i < 12; i ++) System.out.println (i + " " + hist [i] / 1000000.0);
}
----------------------------------------

public static void main (String [] args) {
    if (args.length != 2) {
        System.out.println ("usage: ./zipf size skew");
        System.exit (- 1);
    }
    int size = Integer.valueOf (args [0]);
    double dSkew = Double.valueOf (args [1]);
    ZipfGenerator zipf = new ZipfGenerator (size, dSkew);
    double[] probArray = new double[size+1];
    for (int i =1; i<=size ;i++){
        probArray[i] = zipf.getProbability (i);
        System.out.println (i + " " + probArray[i]);
    }
    int hist [] = new int [size];
    for (int i = 0;
    i < size; i ++) {
        hist [i] = 0;
    }
    System.out.println ("Testing the probability distribution:");
    int sum = 0;
    for (int i = 1;
    i <= 1000000; i ++) {
        int random = zipf.next();
        hist[random]++;
    }
    for (int i = 0;
    i < size; i ++) System.out.println (i + " " + hist [i] / 1000000.0);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
567
6
Gpt3D_Clone567_6.java 1 24
Gpt3D_Clone567_6.java 25 55
----------------------------------------

public static void main (String [] args) {
    if (args.length != 2) {
        System.out.println ("usage: ./zipf size skew");
        System.exit (- 1);
    }
    ZipfGenerator zipf = new ZipfGenerator (Integer.valueOf (args [0]), Double.valueOf (args [1]));
    for (int i = 1;
    i <= 10; i ++) {
        System.out.println (i + " " + zipf.getProbability (i));
    }
    int hist [] = new int [12];
    for (int i = 0;
    i < 12; i ++) {
        hist [i] = 0;
    }
    System.out.println ("Testing the probability distribution:");
    int sum = 0;
    for (int i = 1;
    i <= 1000000; i ++) {
        hist [zipf.next ()] ++;
    }
    for (int i = 0;
    i < 12; i ++) System.out.println (i + " " + hist [i] / 1000000.0);
}
----------------------------------------

public static void main (String [] args) {
    if (args.length != 2) {
        System.out.println ("usage: ./zipf size skew");
        System.exit (- 1);
    }
    int size = Integer.valueOf (args [0]);
    double dSkew = Double.valueOf (args [1]);
    ZipfGenerator zipf = new ZipfGenerator (size, dSkew);
    double[] probArray = new double[size+1];
    for (int i =1; i<=size ;i++){
        probArray[i] = zipf.getProbability (i);
        System.out.println (i + " " + probArray[i]);
    }
    int hist [] = new int [size];
    for (int i = 0;
    i < size; i ++) {
        hist [i] = 0;
    }
    System.out.println ("Testing the probability distribution:");
    int sum = 0;
    for (int i = 0;
    i < 1000000; i ++) {
        int random = zipf.nextByLogFraction(i);
        hist[random]++;
    }
    for (int i = 0;
    i < size; i ++) System.out.println (i + " " + hist [i] / 1000000.0);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
567
7
Gpt3D_Clone567_7.java 1 24
Gpt3D_Clone567_7.java 25 55
----------------------------------------

public static void main (String [] args) {
    if (args.length != 2) {
        System.out.println ("usage: ./zipf size skew");
        System.exit (- 1);
    }
    ZipfGenerator zipf = new ZipfGenerator (Integer.valueOf (args [0]), Double.valueOf (args [1]));
    for (int i = 1;
    i <= 10; i ++) {
        System.out.println (i + " " + zipf.getProbability (i));
    }
    int hist [] = new int [12];
    for (int i = 0;
    i < 12; i ++) {
        hist [i] = 0;
    }
    System.out.println ("Testing the probability distribution:");
    int sum = 0;
    for (int i = 1;
    i <= 1000000; i ++) {
        hist [zipf.next ()] ++;
    }
    for (int i = 0;
    i < 12; i ++) System.out.println (i + " " + hist [i] / 1000000.0);
}
----------------------------------------

public static void main (String [] args) {
    if (args.length != 2) {
        System.out.println ("usage: ./zipf size skew");
        System.exit (- 1);
    }
    int size = Integer.valueOf (args [0]);
    double dSkew = Double.valueOf (args [1]);
    ZipfGenerator zipf = new ZipfGenerator (size, dSkew);
    double[] probArray = new double[size+1];
    for (int i =1; i<=size ;i++){
        probArray[i] = zipf.getProbability (i);
        System.out.println (i + " " + probArray[i]);
    }
    int hist [] = new int [size];
    for (int i = 0;
    i < size; i ++) {
        hist [i] = 0;
    }
    System.out.println ("Testing the probability distribution:");
    int sum = 0;
    for (int i = 0;
    i < 1000000; i ++) {
        int random = zipf.nextByFraction(i);
        hist[random]++;
    }
    for (int i = 0;
    i < size; i ++) System.out.println (i + " " + hist [i] / 1000000.0);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
569
3
Gpt3D_Clone569_3.java 1 35
Gpt3D_Clone569_3.java 36 66
----------------------------------------

public static void main (String args []) {
    int i;
    int largestSize = 4;
    int array [] = {33, 55, 13, 46, 87, 42, 10, 34};
    int large [] = Arrays.copyOf (array, largestSize);
    int smallest = large [0];
    int smallestIndex = 0;
    for (int j = 1;
    j < large.length; ++ j) {
        if (smallest > large [j]) {
            smallest = large [j];
            smallestIndex = j;
        }
    }
    for (i = large.length; i < array.length; i ++) {
        if (smallest < array [i]) {
            large [smallestIndex] = array [i];
            smallest = large [0];
            smallestIndex = 0;
            for (int j = 1;
            j < large.length; ++ j) {
                if (smallest > large [j]) {
                    smallest = large [j];
                    smallestIndex = j;
                }
            }
        }
    }
    for (int j = 0;
    j < large.length; j ++) {
        System.out.println ("Largest 5 : " + large [j]);
    }
    System.out.println ();
    System.out.println ("Largest is: " + getHighest (large));
}
----------------------------------------

 public static void main (String args []) {
    int largestSize = 4;
    int array [] = {33, 55, 13, 46, 87, 42, 10, 34};
    int[] large = new int[largestSize];
    int smallest = Integer.MAX_VALUE;
    int smallestIndex = 0;
    for (int i = 0; i < array.length; ++i) {
        if (smallest > array[i]) {
            smallest = array[i];
            smallestIndex = i;
        }
    }
    large[0] = smallest;
    int j = 1;
    while (j < large.length && j + smallestIndex < array.length) {
        // largest elements are in descending order
        large[j] = array[j + smallestIndex];
        j++;
    }
    for (int k = 0; k < large.length; ++k) {
        System.out.println("Largest " + (k + 1) + ": " + large[k]);
    }
    System.out.println();
    System.out.println("Largest is: " + getHighest(large));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
571
0
Gpt3D_Clone571_0.java 1 10
Gpt3D_Clone571_0.java 11 35
----------------------------------------

public static void main (String [] args) {
    int large [] = new int [10];
    int array [] = {33, 55, 13, 46, 87, 42, 10, 34, 43, 56};
    int k = 0;
    for (int i = 0;
    i < array.length; i ++) {
        large [k ++] = getMax (0, array);
    }
    System.out.println ("Largest 5 is: " + Arrays.toString (Arrays.copyOf (large, 5)));
}
----------------------------------------

 public static void main (String [] args) {
    int large [] = new int [10];
    int array [] = {33, 55, 13, 46, 87, 42, 10, 34, 43, 56};
    int k = 0;
    
    for (int i = 0; i < 10; i++) {
        int max = array[0]; 
        int maxIndex = 0;
        for (int j = 0; j < array.length; j++) {
            if (max < array[j]) {
                max = array[j];
                maxIndex = j;
            }
            
        }
        large[k++] = max;
        
        for (; maxIndex < array.length - 1; maxIndex++) {
            array[maxIndex] = array[maxIndex + 1];
        }
    }
    System.out.println ("Largest 5 is: " + Arrays.toString (Arrays.copyOf (large, 5)));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
571
1
Gpt3D_Clone571_1.java 1 10
Gpt3D_Clone571_1.java 11 30
----------------------------------------

public static void main (String [] args) {
    int large [] = new int [10];
    int array [] = {33, 55, 13, 46, 87, 42, 10, 34, 43, 56};
    int k = 0;
    for (int i = 0;
    i < array.length; i ++) {
        large [k ++] = getMax (0, array);
    }
    System.out.println ("Largest 5 is: " + Arrays.toString (Arrays.copyOf (large, 5)));
}
----------------------------------------

 public static void main (String [] args) {
    int large [] = new int [10];
    int array [] = {33, 55, 13, 46, 87, 42, 10, 34, 43, 56};
    int k = 0;
    while (k < 10) {
        int max = Integer.MIN_VALUE; 
        int maxIndex = 0;
        for (int j = 0; j < array.length; j++) {
            if (max < array[j]) {
                max = array[j];
                maxIndex = j;
            }
        }
        large[k++] = max;
        array[maxIndex] = Integer.MIN_VALUE;
    }
    System.out.println ("Largest 5 is: " + Arrays.toString (Arrays.copyOf (large, 5)));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
571
2
Gpt3D_Clone571_2.java 1 10
Gpt3D_Clone571_2.java 11 32
----------------------------------------

public static void main (String [] args) {
    int large [] = new int [10];
    int array [] = {33, 55, 13, 46, 87, 42, 10, 34, 43, 56};
    int k = 0;
    for (int i = 0;
    i < array.length; i ++) {
        large [k ++] = getMax (0, array);
    }
    System.out.println ("Largest 5 is: " + Arrays.toString (Arrays.copyOf (large, 5)));
}
----------------------------------------

 public static void main (String [] args) {
    int large [] = new int [10];
    int array [] = {33, 55, 13, 46, 87, 42, 10, 34, 43, 56};
    int k = 0;
    while (k < 10) {
        int max = Integer.MIN_VALUE; 
        for (int j = 0; j < array.length; j++) {
            max = Math.max(max, array[j]);
        }
        large[k++] = max;
        
        for (int i = 0; i < array.length; i++) {
            if (max == array[i]) {
                array[i] = Integer.MIN_VALUE;
                break;
            }
        }
    }
    System.out.println ("Largest 5 is: " + Arrays.toString (Arrays.copyOf (large, 5)));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
571
3
Gpt3D_Clone571_3.java 1 10
Gpt3D_Clone571_3.java 11 30
----------------------------------------

public static void main (String [] args) {
    int large [] = new int [10];
    int array [] = {33, 55, 13, 46, 87, 42, 10, 34, 43, 56};
    int k = 0;
    for (int i = 0;
    i < array.length; i ++) {
        large [k ++] = getMax (0, array);
    }
    System.out.println ("Largest 5 is: " + Arrays.toString (Arrays.copyOf (large, 5)));
}
----------------------------------------

 public static void main (String [] args) {
    int large [] = new int [10];
    int array [] = {33, 55, 13, 46, 87, 42, 10, 34, 43, 56};
    int k = 0;
    for (int i = 0;
    i < array.length; i ++) {
        int max = Integer.MIN_VALUE; 
        int j;
        for (j = 0; j < array.length; j++) {
            if (max < array[j]) {
                max = array[j];
            }
        }
        large[k++] = max;
        array[j - 1] = Integer.MIN_VALUE;
    }
    System.out.println ("Largest 5 is: " + Arrays.toString (Arrays.copyOf (large, 5)));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
571
4
Gpt3D_Clone571_4.java 1 10
Gpt3D_Clone571_4.java 11 34
----------------------------------------

public static void main (String [] args) {
    int large [] = new int [10];
    int array [] = {33, 55, 13, 46, 87, 42, 10, 34, 43, 56};
    int k = 0;
    for (int i = 0;
    i < array.length; i ++) {
        large [k ++] = getMax (0, array);
    }
    System.out.println ("Largest 5 is: " + Arrays.toString (Arrays.copyOf (large, 5)));
}
----------------------------------------

 public static void main (String [] args) {
    int large [] = new int [10];
    int array [] = {33, 55, 13, 46, 87, 42, 10, 34, 43, 56};
    
    for (int i = 0;
    i < 10; i++) {
        
        int max = array[0];
        int maxIndex = 0;
        for (int j = 0; j < array.length; j++) {
            if (max < array[j]) {
                max = array[j];
                maxIndex = j;
            }
        }
       
        large[i] = max; 
        array[maxIndex] = Integer.MIN_VALUE;
        
    }
    System.out.println ("Largest 5 is: " + Arrays.toString (Arrays.copyOf (large, 5)));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
571
5
Gpt3D_Clone571_5.java 1 10
Gpt3D_Clone571_5.java 11 31
----------------------------------------

public static void main (String [] args) {
    int large [] = new int [10];
    int array [] = {33, 55, 13, 46, 87, 42, 10, 34, 43, 56};
    int k = 0;
    for (int i = 0;
    i < array.length; i ++) {
        large [k ++] = getMax (0, array);
    }
    System.out.println ("Largest 5 is: " + Arrays.toString (Arrays.copyOf (large, 5)));
}
----------------------------------------

 public static void main (String [] args) {
    int large [] = new int [10];
    int array [] = {33, 55, 13, 46, 87, 42, 10, 34, 43, 56}; 
    int k = 0; 
    while (k < 10) {
        
        int maxIndex = 0;
        for (int j = 0; j < array.length; j++) {
            if (array[maxIndex] < array[j]) {
                maxIndex = j;
            }
        }
       
        large[k++] = array[maxIndex]; 
        array[maxIndex] = Integer.MIN_VALUE;
        
    }
    System.out.println ("Largest 5 is: " + Arrays.toString (Arrays.copyOf (large, 5)));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
571
6
Gpt3D_Clone571_6.java 1 10
Gpt3D_Clone571_6.java 11 29
----------------------------------------

public static void main (String [] args) {
    int large [] = new int [10];
    int array [] = {33, 55, 13, 46, 87, 42, 10, 34, 43, 56};
    int k = 0;
    for (int i = 0;
    i < array.length; i ++) {
        large [k ++] = getMax (0, array);
    }
    System.out.println ("Largest 5 is: " + Arrays.toString (Arrays.copyOf (large, 5)));
}
----------------------------------------

 public static void main (String [] args) {
    int large [] = new int [10];
    int array [] = {33, 55, 13, 46, 87, 42, 10, 34, 43, 56};
    
    ArrayList <Integer> list = new ArrayList <> (array.length); 
    for (int i = 0;
    i < array.length; i++) {
        list.add(array[i]);
    }
    Collections.sort(list); 
    Collections.reverse(list); 
    
    for (int i = 0; i < 10; i++) {
        large[i] = list.get(i);
    }
    System.out.println ("Largest 5 is: " + Arrays.toString (Arrays.copyOf (large, 5)));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
572
8
Gpt3D_Clone572_8.java 1 10
Gpt3D_Clone572_8.java 11 24
----------------------------------------

public static void main (String [] args) {
    int large [] = new int [10];
    int array [] = {33, 55, 13, 46, 87, 42, 10, 34, 43, 56};
    int k = 0;
    for (int i = 0;
    i < array.length; i ++) {
        large [k ++] = getMax (0, array);
    }
    System.out.println ("Largest 5 is: " + Arrays.toString (Arrays.copyOf (large, 5)));
}
----------------------------------------

 public static void main (String [] args) {
    int large [] = new int [10];
    int array [] = {33, 55, 13, 46, 87, 42, 10, 34, 43, 56};
    for (int i = 0, maxVal = Integer.MIN_VALUE;
    i < array.length; i ++) {
        if (array[i] > maxVal) {
            maxVal = array[i];
            large[i] = maxVal;
        }
    }
    System.out.println ("Largest 5 is: " + Arrays.toString (Arrays.copyOf (large, 5)));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
576
0
Gpt3D_Clone576_0.java 1 23
Gpt3D_Clone576_0.java 24 53
----------------------------------------

static void stars () {
    final int MAX_WIDTH = 7;
    for (int i = 0;
    i < 7; ++ i) {
        int width;
        if (i < 3) width = MAX_WIDTH - i * 2;
        else if (i > 3) width = (i - 3) * 2 + 1;
        else width = 1;
        for (int j = 0;
        j < (MAX_WIDTH - width) / 2; ++ j) {
            System.out.print (" ");
        }
        for (int j = 0;
        j < width; ++ j) {
            System.out.print ("*");
        }
        for (int j = 0;
        j < (MAX_WIDTH - width) / 2; ++ j) {
            System.out.print (" ");
        }
        System.out.println ();
    }
}
----------------------------------------

  static void stars() {
    for (int i = 0; i < 7; i++) {
        int width;
        if (i < 3) {
            width = (7-2*i);
        } else if (i > 3) {
            width = 2*(i-3) + 1;
        } else {
            width = 1;
        }
        int k = 0;
        while (k < (7 - width) / 2) {
            System.out.print(" ");
            k++;
        }
        int j = 0;
        while (j < width) {
            System.out.print("*");
            j++;
        }
        int m = 0;
        while (m < (7 - width) / 2) {
            System.out.print(" ");
            m++;
        }
        System.out.println();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
576
1
Gpt3D_Clone576_1.java 1 23
Gpt3D_Clone576_1.java 24 57
----------------------------------------

static void stars () {
    final int MAX_WIDTH = 7;
    for (int i = 0;
    i < 7; ++ i) {
        int width;
        if (i < 3) width = MAX_WIDTH - i * 2;
        else if (i > 3) width = (i - 3) * 2 + 1;
        else width = 1;
        for (int j = 0;
        j < (MAX_WIDTH - width) / 2; ++ j) {
            System.out.print (" ");
        }
        for (int j = 0;
        j < width; ++ j) {
            System.out.print ("*");
        }
        for (int j = 0;
        j < (MAX_WIDTH - width) / 2; ++ j) {
            System.out.print (" ");
        }
        System.out.println ();
    }
}
----------------------------------------

  static void stars() {
	final int MAX_WIDTH = 7;
		
	for (int i = 0; i < MAX_WIDTH; i++) {
		
		// Set the width
		int width;
		if (i < 3) {
			width = MAX_WIDTH - (2 * i);
		} else if (i > 3) {
			width = (2 * (i - 3)) + 1;
		} else {
			width = 1;
		}
		
		// Print the stars
		for (int j = 0; j < (MAX_WIDTH - width) / 2; j++) {
			System.out.print(" ");
		}
		for (int j = 0; j < width; j++) {
			System.out.print("*");
		}
		for (int j = 0; j < (MAX_WIDTH - width) / 2; j++) {
			System.out.print(" ");
		}
		
		// Print the new line
		System.out.println();
	}
	
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
576
2
Gpt3D_Clone576_2.java 1 23
Gpt3D_Clone576_2.java 24 48
----------------------------------------

static void stars () {
    final int MAX_WIDTH = 7;
    for (int i = 0;
    i < 7; ++ i) {
        int width;
        if (i < 3) width = MAX_WIDTH - i * 2;
        else if (i > 3) width = (i - 3) * 2 + 1;
        else width = 1;
        for (int j = 0;
        j < (MAX_WIDTH - width) / 2; ++ j) {
            System.out.print (" ");
        }
        for (int j = 0;
        j < width; ++ j) {
            System.out.print ("*");
        }
        for (int j = 0;
        j < (MAX_WIDTH - width) / 2; ++ j) {
            System.out.print (" ");
        }
        System.out.println ();
    }
}
----------------------------------------

  static void stars() {
    int MAX_WIDTH = 7;
    for (int i = 0; i < MAX_WIDTH; i++) {
        int width;
        if (i < 3) {
            width = MAX_WIDTH - (i * 2);
        } else if (i > 3) {
            width = (i - 3) * 2 + 1;
        } else {
            width = 1;
        }
        for (int k = 0; k < (MAX_WIDTH - width) / 2; k++) {
            System.out.print(" ");
        }
        for (int j = 0; j < width; j++) {
            System.out.print("*");
        }
        for (int m = 0; m < (MAX_WIDTH - width) / 2; m++) {
            System.out.print(" ");
        }
        System.out.println();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
576
3
Gpt3D_Clone576_3.java 1 23
Gpt3D_Clone576_3.java 24 48
----------------------------------------

static void stars () {
    final int MAX_WIDTH = 7;
    for (int i = 0;
    i < 7; ++ i) {
        int width;
        if (i < 3) width = MAX_WIDTH - i * 2;
        else if (i > 3) width = (i - 3) * 2 + 1;
        else width = 1;
        for (int j = 0;
        j < (MAX_WIDTH - width) / 2; ++ j) {
            System.out.print (" ");
        }
        for (int j = 0;
        j < width; ++ j) {
            System.out.print ("*");
        }
        for (int j = 0;
        j < (MAX_WIDTH - width) / 2; ++ j) {
            System.out.print (" ");
        }
        System.out.println ();
    }
}
----------------------------------------

  static void stars() {
    final int MAX_WIDTH = 7;
    for (int i = 0; i < MAX_WIDTH; i++) {
        int width;
        if (i < 3) {
            width = MAX_WIDTH - 2 * i;
        } else if (i > 3) {
            width = (i - 3) * 2 + 1;
        } else {
            width = 1;
        }
        for (int k = 0; k < (MAX_WIDTH - width) / 2; k++) {
            System.out.print(' ');
        }
        for (int j = 0; j < width; j++) {
            System.out.print('*');
        }
        for (int m = 0; m < (MAX_WIDTH - width) / 2; m++) {
            System.out.print(' ');
        }
        System.out.println();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
576
4
Gpt3D_Clone576_4.java 1 23
Gpt3D_Clone576_4.java 24 45
----------------------------------------

static void stars () {
    final int MAX_WIDTH = 7;
    for (int i = 0;
    i < 7; ++ i) {
        int width;
        if (i < 3) width = MAX_WIDTH - i * 2;
        else if (i > 3) width = (i - 3) * 2 + 1;
        else width = 1;
        for (int j = 0;
        j < (MAX_WIDTH - width) / 2; ++ j) {
            System.out.print (" ");
        }
        for (int j = 0;
        j < width; ++ j) {
            System.out.print ("*");
        }
        for (int j = 0;
        j < (MAX_WIDTH - width) / 2; ++ j) {
            System.out.print (" ");
        }
        System.out.println ();
    }
}
----------------------------------------

  static void stars() {
    final int MAX_WIDTH = 7;
    for (int i = 0; i < MAX_WIDTH; i++) {
        int width;
        if (i < 3) {
            width = 2 * i - MAX_WIDTH ;
        } else if (i > 3) {
            width = (i - 3) * 2 - 1;
        } else {
            width = 1;
        }
        for (int j = 0; j < (MAX_WIDTH - width) / 2 ; j++) {
            System.out.print(" ");
        }
        for (int j = 0; j < width; j++) {
            System.out.print("*");
        }
        System.out.println();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
576
5
Gpt3D_Clone576_5.java 1 23
Gpt3D_Clone576_5.java 24 47
----------------------------------------

static void stars () {
    final int MAX_WIDTH = 7;
    for (int i = 0;
    i < 7; ++ i) {
        int width;
        if (i < 3) width = MAX_WIDTH - i * 2;
        else if (i > 3) width = (i - 3) * 2 + 1;
        else width = 1;
        for (int j = 0;
        j < (MAX_WIDTH - width) / 2; ++ j) {
            System.out.print (" ");
        }
        for (int j = 0;
        j < width; ++ j) {
            System.out.print ("*");
        }
        for (int j = 0;
        j < (MAX_WIDTH - width) / 2; ++ j) {
            System.out.print (" ");
        }
        System.out.println ();
    }
}
----------------------------------------

  static void stars() {
    final int MAX_WIDTH = 7;
    for (int i = 0; i < MAX_WIDTH; ++i) {
        int width;
        if (i < 3) {
            width = MAX_WIDTH - i * 2;
        } else if (i > 3) {
            width = (i - 3) * 2 + 1;
        } else {
            width = 1;
        }
        String spaces = new String(new char[( MAX_WIDTH - width ) / 2]).replace('\0', ' ');
        StringBuilder stars = new StringBuilder(width);
        for (int s = 0; s < width; s++) {
            stars.append('*');
        }
        System.out.println(spaces + stars + spaces);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
576
6
Gpt3D_Clone576_6.java 1 23
Gpt3D_Clone576_6.java 24 42
----------------------------------------

static void stars () {
    final int MAX_WIDTH = 7;
    for (int i = 0;
    i < 7; ++ i) {
        int width;
        if (i < 3) width = MAX_WIDTH - i * 2;
        else if (i > 3) width = (i - 3) * 2 + 1;
        else width = 1;
        for (int j = 0;
        j < (MAX_WIDTH - width) / 2; ++ j) {
            System.out.print (" ");
        }
        for (int j = 0;
        j < width; ++ j) {
            System.out.print ("*");
        }
        for (int j = 0;
        j < (MAX_WIDTH - width) / 2; ++ j) {
            System.out.print (" ");
        }
        System.out.println ();
    }
}
----------------------------------------

  static void stars() {
    int MAX_WIDTH = 7;
    for (int i = 0; i < MAX_WIDTH; i++) {
        int width;
        if (i < 3) {
            width = MAX_WIDTH - i * 2;
        } else if (i > 3) {
            width = (i - 3) * 2 + 1;
        } else {
            width = 1;
        }
        int numSpaces = MAX_WIDTH - width;
        final int numFrontSpaces = numSpaces / 2;
        final int numBackSpaces = numSpaces - numFrontSpaces;
        System.out.println(repeat(' ', numFrontSpaces) + repeat('*', width) + repeat(' ', numBackSpaces));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
576
7
Gpt3D_Clone576_7.java 1 23
Gpt3D_Clone576_7.java 24 42
----------------------------------------

static void stars () {
    final int MAX_WIDTH = 7;
    for (int i = 0;
    i < 7; ++ i) {
        int width;
        if (i < 3) width = MAX_WIDTH - i * 2;
        else if (i > 3) width = (i - 3) * 2 + 1;
        else width = 1;
        for (int j = 0;
        j < (MAX_WIDTH - width) / 2; ++ j) {
            System.out.print (" ");
        }
        for (int j = 0;
        j < width; ++ j) {
            System.out.print ("*");
        }
        for (int j = 0;
        j < (MAX_WIDTH - width) / 2; ++ j) {
            System.out.print (" ");
        }
        System.out.println ();
    }
}
----------------------------------------

  static void stars() {
    int MAX_WIDTH = 7;
    for (int i = 0; i < MAX_WIDTH; ++i) {
        int width;
        if (i < 3) {
            width = MAX_WIDTH - i * 2;
        } else if (i > 3) {
            width = (i - 3) * 2 + 1;
        } else {
            width = 1;
        }
        char[] arr = new char[width];
        Arrays.fill(arr, '*');
        System.out.println(String.format("%" + (MAX_WIDTH - width) / 2 + "s%s%" + (MAX_WIDTH - width) / 2 + "s", "",
                new String(arr), ""));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
576
8
Gpt3D_Clone576_8.java 1 23
Gpt3D_Clone576_8.java 24 42
----------------------------------------

static void stars () {
    final int MAX_WIDTH = 7;
    for (int i = 0;
    i < 7; ++ i) {
        int width;
        if (i < 3) width = MAX_WIDTH - i * 2;
        else if (i > 3) width = (i - 3) * 2 + 1;
        else width = 1;
        for (int j = 0;
        j < (MAX_WIDTH - width) / 2; ++ j) {
            System.out.print (" ");
        }
        for (int j = 0;
        j < width; ++ j) {
            System.out.print ("*");
        }
        for (int j = 0;
        j < (MAX_WIDTH - width) / 2; ++ j) {
            System.out.print (" ");
        }
        System.out.println ();
    }
}
----------------------------------------

  static void stars() {
    int MAX_WIDTH = 7;
    for (int i = 0; i < MAX_WIDTH; ++i) {
        int width;
        if (i < 3) {
            width = MAX_WIDTH - 2 * i;
        } else if (i > 3) {
            width = (i - 3) * 2 + 1;
        } else {
            width = 1;
        }
        char[] chars = new char[width];
        Arrays.fill(chars, '*');
        System.out.println(String.format("%" + (MAX_WIDTH - width) / 2 + "s%s%" + (MAX_WIDTH - width) / 2 + "s", "",
                new String(chars), ""));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
576
9
Gpt3D_Clone576_9.java 1 23
Gpt3D_Clone576_9.java 24 41
----------------------------------------

static void stars () {
    final int MAX_WIDTH = 7;
    for (int i = 0;
    i < 7; ++ i) {
        int width;
        if (i < 3) width = MAX_WIDTH - i * 2;
        else if (i > 3) width = (i - 3) * 2 + 1;
        else width = 1;
        for (int j = 0;
        j < (MAX_WIDTH - width) / 2; ++ j) {
            System.out.print (" ");
        }
        for (int j = 0;
        j < width; ++ j) {
            System.out.print ("*");
        }
        for (int j = 0;
        j < (MAX_WIDTH - width) / 2; ++ j) {
            System.out.print (" ");
        }
        System.out.println ();
    }
}
----------------------------------------

  static void stars() {
    final int MAX_WIDTH = 7;
    for (int i = 0; i < MAX_WIDTH; i++) {
        int width;
        if (i < 3) {
            width = MAX_WIDTH - 2 * i;
        } else if (i > 3) {
            width = MAX_WIDTH - (i - 3) * 2 - 1;
        } else {
            width = 1;
        }
        String output = String.format("%" + (MAX_WIDTH - width) / 2 + "s%s%" + (MAX_WIDTH - width) / 2 + "s", "",
                new String(new char[width]).replace('\0', '*'), "");
        System.out.println(output);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
577
1
Gpt3D_Clone577_1.java 1 12
Gpt3D_Clone577_1.java 13 22
----------------------------------------

private static float getRandomNumberBetween (float numberOne, float numberTwo) throws Exception {
    if (numberOne == numberTwo) {
        throw new Exception ("Both the numbers can not be equal");
    }
    float rand = (float) Math.random ();
    float highRange = Math.max (numberOne, numberTwo);
    float lowRange = Math.min (numberOne, numberTwo);
    float lowRand = (float) Math.floor (rand - 1);
    float highRand = (float) Math.ceil (rand + 1);
    float genRand = (highRange - lowRange) * ((rand - lowRand) / (highRand - lowRand)) + lowRange;
    return genRand;
}
----------------------------------------

 private static float getRandomNumberBetween (float firstVal, float secondVal) throws Exception {
    if (firstVal == secondVal) {
        throw new Exception ("Both numbers can not be equal");
    }
    float diff = secondVal - firstVal;
    double randVal = Math.random() * diff;
    return (float)(randVal + firstVal);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
577
2
Gpt3D_Clone577_2.java 1 12
Gpt3D_Clone577_2.java 13 22
----------------------------------------

private static float getRandomNumberBetween (float numberOne, float numberTwo) throws Exception {
    if (numberOne == numberTwo) {
        throw new Exception ("Both the numbers can not be equal");
    }
    float rand = (float) Math.random ();
    float highRange = Math.max (numberOne, numberTwo);
    float lowRange = Math.min (numberOne, numberTwo);
    float lowRand = (float) Math.floor (rand - 1);
    float highRand = (float) Math.ceil (rand + 1);
    float genRand = (highRange - lowRange) * ((rand - lowRand) / (highRand - lowRand)) + lowRange;
    return genRand;
}
----------------------------------------

 private static float getRandomNumberBetween (float min, float max) throws Exception {
    if (min == max) {
        throw new Exception ("Both numbers can not be equal");
    }
    float delta = max - min;
    float randomNumberInRange = (float) (Math.random() * delta) + min;
    return randomNumberInRange;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
577
3
Gpt3D_Clone577_3.java 1 12
Gpt3D_Clone577_3.java 13 22
----------------------------------------

private static float getRandomNumberBetween (float numberOne, float numberTwo) throws Exception {
    if (numberOne == numberTwo) {
        throw new Exception ("Both the numbers can not be equal");
    }
    float rand = (float) Math.random ();
    float highRange = Math.max (numberOne, numberTwo);
    float lowRange = Math.min (numberOne, numberTwo);
    float lowRand = (float) Math.floor (rand - 1);
    float highRand = (float) Math.ceil (rand + 1);
    float genRand = (highRange - lowRange) * ((rand - lowRand) / (highRand - lowRand)) + lowRange;
    return genRand;
}
----------------------------------------

 private static float getRandomNumberBetween (float a, float b) throws Exception {
    if (a == b) {
        throw new Exception ("Both numbers can not be equal");
    }
    float difference = b - a;
    float randomNumberInRange = (float) (Math.random() * difference + a);
    return randomNumberInRange;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
577
4
Gpt3D_Clone577_4.java 1 12
Gpt3D_Clone577_4.java 13 21
----------------------------------------

private static float getRandomNumberBetween (float numberOne, float numberTwo) throws Exception {
    if (numberOne == numberTwo) {
        throw new Exception ("Both the numbers can not be equal");
    }
    float rand = (float) Math.random ();
    float highRange = Math.max (numberOne, numberTwo);
    float lowRange = Math.min (numberOne, numberTwo);
    float lowRand = (float) Math.floor (rand - 1);
    float highRand = (float) Math.ceil (rand + 1);
    float genRand = (highRange - lowRange) * ((rand - lowRand) / (highRand - lowRand)) + lowRange;
    return genRand;
}
----------------------------------------

 private static float getRandomNumberBetween (float lowerNum, float higherNum) throws Exception {
    if (lowerNum == higherNum) {
        throw new Exception ("Both the numbers can not be equal");
    }
    float multiplier = (float)(Math.random() * (higherNum - lowerNum) + 1);
    return lowerNum + multiplier;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
577
5
Gpt3D_Clone577_5.java 1 12
Gpt3D_Clone577_5.java 13 21
----------------------------------------

private static float getRandomNumberBetween (float numberOne, float numberTwo) throws Exception {
    if (numberOne == numberTwo) {
        throw new Exception ("Both the numbers can not be equal");
    }
    float rand = (float) Math.random ();
    float highRange = Math.max (numberOne, numberTwo);
    float lowRange = Math.min (numberOne, numberTwo);
    float lowRand = (float) Math.floor (rand - 1);
    float highRand = (float) Math.ceil (rand + 1);
    float genRand = (highRange - lowRange) * ((rand - lowRand) / (highRand - lowRand)) + lowRange;
    return genRand;
}
----------------------------------------

 private static float getRandomNumberBetween (float lowNum, float highNum) throws Exception {
    if (lowNum == highNum) {
        throw new Exception ("Both the numbers can not be equal");
    }
    float range = highNum - lowNum;
    return range * (float)(Math.random()) + lowNum;  
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
577
6
Gpt3D_Clone577_6.java 1 12
Gpt3D_Clone577_6.java 13 21
----------------------------------------

private static float getRandomNumberBetween (float numberOne, float numberTwo) throws Exception {
    if (numberOne == numberTwo) {
        throw new Exception ("Both the numbers can not be equal");
    }
    float rand = (float) Math.random ();
    float highRange = Math.max (numberOne, numberTwo);
    float lowRange = Math.min (numberOne, numberTwo);
    float lowRand = (float) Math.floor (rand - 1);
    float highRand = (float) Math.ceil (rand + 1);
    float genRand = (highRange - lowRange) * ((rand - lowRand) / (highRand - lowRand)) + lowRange;
    return genRand;
}
----------------------------------------

 private static float getRandomNumberBetween (float numberOne, float numberTwo) throws Exception {
    if (numberOne >= numberTwo) {
        throw new Exception ("Number 1 must be a lower value than number 2");
    }
    float diff = numberTwo - numberOne;
    return (float) (Math.random() * diff + numberOne);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
577
7
Gpt3D_Clone577_7.java 1 12
Gpt3D_Clone577_7.java 13 20
----------------------------------------

private static float getRandomNumberBetween (float numberOne, float numberTwo) throws Exception {
    if (numberOne == numberTwo) {
        throw new Exception ("Both the numbers can not be equal");
    }
    float rand = (float) Math.random ();
    float highRange = Math.max (numberOne, numberTwo);
    float lowRange = Math.min (numberOne, numberTwo);
    float lowRand = (float) Math.floor (rand - 1);
    float highRand = (float) Math.ceil (rand + 1);
    float genRand = (highRange - lowRange) * ((rand - lowRand) / (highRand - lowRand)) + lowRange;
    return genRand;
}
----------------------------------------

 private static float getRandomNumberBetween (float minimum, float maximum) throws Exception {
    if(minimum == maximum)
        throw new Exception("Both numbers can not be equal");
    float range = maximum - minimum;
    return (float)((Math.random() * range) + minimum);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
584
0
Gpt3D_Clone584_0.java 1 11
Gpt3D_Clone584_0.java 12 27
----------------------------------------

public static final void main (String...aArgs) {
    log ("Generating 10 random integers in range 1..10.");
    int START = 1;
    int END = 10;
    Random randomGenerator = new Random ();
    for (int idx = 1;
    idx <= 10; ++ idx) {
        showRandomInteger (START, END, randomGenerator);
    }
    log ("Done");
}
----------------------------------------

public static final void main (String...aArgs) {
    log ("Generating 10 random integers in range 1..10.");
    int START = 1;
    int END = 10;
    Random randomGenerator = new Random ();
    int[] arr = new int[10];
    int randomInt;
    for (int i = 0; i < arr.length; i++){
        randomInt = START + (int)(Math.random() * ((END - START) + 1));
        arr[i] = randomInt;
        log ("Generated : " + arr[i] );
    }
    log ("Done");	
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
588
0
Gpt3D_Clone588_0.java 1 14
Gpt3D_Clone588_0.java 15 30
----------------------------------------

public static void main (String [] args) {
    try {
        ArrayList < String > sentences = null;
        sentences = new ArrayList < String > ();
        sentences.add ("Mary and Meera are my classmates.");
        sentences.add ("Mary and Meera are my classmates.");
        sentences.add ("Meera and Mary are my classmates.");
        sentences.add ("Alice and Bobe are not my classmates.");
        sentences.add ("Some totally different sentence.");
        wordAnalyser (sentences);
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------

  public static void main (String [] args) {
    try {
        BidiMap < String, String > sentences = null;
        sentences = new TreeBidiMap < String, String > ();
        sentences.put ("Mary and Meera are my classmates.", "This is sentence 1");
        sentences.put ("Mary and Meera are my classmates.", "This is sentence 2");
        sentences.put ("Meera and Mary are my classmates.", "This is sentence 3");
        sentences.put ("Alice and Bobe are not my classmates.", "This is sentence 4");
        sentences.put ("Some totally different sentence.", "This is sentence 5");
        wordAnalyser (sentences);
    } catch (Exception e) {
        e.printStackTrace ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
58
0
Gpt3D_Clone58_0.java 1 14
Gpt3D_Clone58_0.java 15 36
----------------------------------------

public static void main (String [] args) throws FileNotFoundException, IOException {
    FileInputStream fin = new FileInputStream ("line.srt");
    BufferedReader reader = new BufferedReader (new InputStreamReader (fin));
    PrintWriter out = new PrintWriter ("newline.srt");
    int i = 0;
    String line = reader.readLine ();
    while (line != null) {
        if (! line.trim ().equals ("")) {
            out.println (line);
        }
        line = reader.readLine ();
    }
    out.close ();
}
----------------------------------------

  public static void main (String [] args) throws FileNotFoundException, IOException {
    FileInputStream fin = new FileInputStream ("line.srt");
    List<String> lines = new ArrayList<>();
    BufferedReader reader = new BufferedReader(new InputStreamReader(fin));
    String line;
    while ((line = reader.readLine()) != null) {
      if (!line.trim().equals("")) {
        lines.add(line);
      }
    }
    reader.close();
    
    FileOutputStream fout = new FileOutputStream ("newline.srt");
    BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(fout));
    for (String str : lines) {
      writer.write(str);
      writer.newLine();
    }
    writer.close();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
58
1
Gpt3D_Clone58_1.java 1 14
Gpt3D_Clone58_1.java 15 33
----------------------------------------

public static void main (String [] args) throws FileNotFoundException, IOException {
    FileInputStream fin = new FileInputStream ("line.srt");
    BufferedReader reader = new BufferedReader (new InputStreamReader (fin));
    PrintWriter out = new PrintWriter ("newline.srt");
    int i = 0;
    String line = reader.readLine ();
    while (line != null) {
        if (! line.trim ().equals ("")) {
            out.println (line);
        }
        line = reader.readLine ();
    }
    out.close ();
}
----------------------------------------

 public static void main (String [] args) throws FileNotFoundException, IOException {
    InputStreamReader fin = new InputStreamReader (new FileInputStream("line.srt"));
    BufferedReader reader = new BufferedReader(fin);
    StringBuilder builder = new StringBuilder();
    String line;
    
    while((line = reader.readLine()) != null){
        if(!line.trim().equals("")){
            builder.append(line).append("\n");
        }
    }
    reader.close();
    
    PrintWriter out = new PrintWriter ("newline.srt");
    out.println(builder.toString());
    out.close();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
58
3
Gpt3D_Clone58_3.java 1 14
Gpt3D_Clone58_3.java 15 33
----------------------------------------

public static void main (String [] args) throws FileNotFoundException, IOException {
    FileInputStream fin = new FileInputStream ("line.srt");
    BufferedReader reader = new BufferedReader (new InputStreamReader (fin));
    PrintWriter out = new PrintWriter ("newline.srt");
    int i = 0;
    String line = reader.readLine ();
    while (line != null) {
        if (! line.trim ().equals ("")) {
            out.println (line);
        }
        line = reader.readLine ();
    }
    out.close ();
}
----------------------------------------

 public static void main (String [] args) throws FileNotFoundException, IOException {
    InputStreamReader fin = new InputStreamReader (new FileInputStream("line.srt"));
    BufferedReader reader = new BufferedReader(fin);
    StringBuilder builder = new StringBuilder();
    String line;
    
    while((line = reader.readLine()) != null){
        if(!line.trim().equals("")){
            builder.append(line).append("\n");
        }
    }
    reader.close();
    
    PrintWriter out = new PrintWriter ("newline.srt");
    out.println(builder.toString());
    out.close();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
58
6
Gpt3D_Clone58_6.java 1 14
Gpt3D_Clone58_6.java 15 32
----------------------------------------

public static void main (String [] args) throws FileNotFoundException, IOException {
    FileInputStream fin = new FileInputStream ("line.srt");
    BufferedReader reader = new BufferedReader (new InputStreamReader (fin));
    PrintWriter out = new PrintWriter ("newline.srt");
    int i = 0;
    String line = reader.readLine ();
    while (line != null) {
        if (! line.trim ().equals ("")) {
            out.println (line);
        }
        line = reader.readLine ();
    }
    out.close ();
}
----------------------------------------

 public static void main (String [] args) throws IOException {
    BufferedReader reader = new BufferedReader(new InputStreamReader(
        new FileInputStream("line.srt")
    ));
    BufferedWriter writer = new BufferedWriter(new FileWriter("newline.srt"));
    
    String line;
    while ((line = reader.readLine()) != null) {
        if(!line.trim().equals("")) {
            writer.write(line);
            writer.newLine();
        }
    }
    reader.close();
    writer.close();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
58
7
Gpt3D_Clone58_7.java 1 14
Gpt3D_Clone58_7.java 15 30
----------------------------------------

public static void main (String [] args) throws FileNotFoundException, IOException {
    FileInputStream fin = new FileInputStream ("line.srt");
    BufferedReader reader = new BufferedReader (new InputStreamReader (fin));
    PrintWriter out = new PrintWriter ("newline.srt");
    int i = 0;
    String line = reader.readLine ();
    while (line != null) {
        if (! line.trim ().equals ("")) {
            out.println (line);
        }
        line = reader.readLine ();
    }
    out.close ();
}
----------------------------------------

 public static void main (String [] args) throws FileNotFoundException, IOException {
    Scanner fin = new Scanner (new File ("line.srt"));
    PrintWriter out = new PrintWriter (new File ("newline.srt"));
    
    while (fin.hasNextLine()) {
        String line = fin.nextLine();
        if (!line.trim().equals("")) {
            out.println(line);
        }
     }
    
    fin.close();
    out.close();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
58
8
Gpt3D_Clone58_8.java 1 14
Gpt3D_Clone58_8.java 15 29
----------------------------------------

public static void main (String [] args) throws FileNotFoundException, IOException {
    FileInputStream fin = new FileInputStream ("line.srt");
    BufferedReader reader = new BufferedReader (new InputStreamReader (fin));
    PrintWriter out = new PrintWriter ("newline.srt");
    int i = 0;
    String line = reader.readLine ();
    while (line != null) {
        if (! line.trim ().equals ("")) {
            out.println (line);
        }
        line = reader.readLine ();
    }
    out.close ();
}
----------------------------------------

 public static void main (String [] args) throws IOException {
    LineNumberReader in = new LineNumberReader(
        new FileReader("line.srt"));
    PrintWriter out = new PrintWriter("newline.srt");
    String line;
    while ((line = in.readLine()) != null) {
      if (!line.trim().equals(""))
        out.println(line);
    }
    in.close();
    out.close();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
58
9
Gpt3D_Clone58_9.java 1 14
Gpt3D_Clone58_9.java 15 31
----------------------------------------

public static void main (String [] args) throws FileNotFoundException, IOException {
    FileInputStream fin = new FileInputStream ("line.srt");
    BufferedReader reader = new BufferedReader (new InputStreamReader (fin));
    PrintWriter out = new PrintWriter ("newline.srt");
    int i = 0;
    String line = reader.readLine ();
    while (line != null) {
        if (! line.trim ().equals ("")) {
            out.println (line);
        }
        line = reader.readLine ();
    }
    out.close ();
}
----------------------------------------

 public static void main(String[] args) throws FileNotFoundException, IOException {
    BufferedReader in = new BufferedReader(
        new InputStreamReader(
            new FileInputStream("line.srt")));
    BufferedWriter out = new BufferedWriter(
        new OutputStreamWriter(
            new FileOutputStream("newline.srt")));
    String line;
    while((line = in.readLine()) != null) {
        if(!line.trim().equals(""))
            out.write(line + "\n");
    }
    in.close();
    out.close();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
593
0
Gpt3D_Clone593_0.java 1 9
Gpt3D_Clone593_0.java 10 20
----------------------------------------

public static void main (String args []) {
    Object sharedObject = new Object ();
    MyClass sampleA = new MyClass ();
    sampleA.myObject = sharedObject;
    MyClass sampleB = new MyClass ();
    sampleB.myObject = sharedObject;
    System.out.println (sampleA.sharedObject == sampleB.sharedObject);
    System.out.println (sampleA == sampleB);
}
----------------------------------------

 public static void main (String [] args) {
    Object sharedObject = new Object ();
    MyClass sampleA = new MyClass ();
    MyClass sampleB = new MyClass ();
    sampleA.linkObject(sharedObject);
    sampleB.linkObject(sharedObject);
    System.out.println (sampleA.sharedObject == sampleB.sharedObject);
    System.out.println (sampleA.equals(sampleB));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
593
1
Gpt3D_Clone593_1.java 1 9
Gpt3D_Clone593_1.java 10 20
----------------------------------------

public static void main (String args []) {
    Object sharedObject = new Object ();
    MyClass sampleA = new MyClass ();
    sampleA.myObject = sharedObject;
    MyClass sampleB = new MyClass ();
    sampleB.myObject = sharedObject;
    System.out.println (sampleA.sharedObject == sampleB.sharedObject);
    System.out.println (sampleA == sampleB);
}
----------------------------------------

 public static void main (String [] args) {
    Object sharedObject = new Object ();
    MyClass sampleA = new MyClass ();
    MyClass sampleB = new MyClass ();
    sampleA.assignObject(sharedObject);
    sampleB.assignObject(sharedObject);
    System.out.println (sampleA.sharedObject == sampleB.sharedObject);
    System.out.println (sampleA.equals(sampleB));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
593
2
Gpt3D_Clone593_2.java 1 9
Gpt3D_Clone593_2.java 10 20
----------------------------------------

public static void main (String args []) {
    Object sharedObject = new Object ();
    MyClass sampleA = new MyClass ();
    sampleA.myObject = sharedObject;
    MyClass sampleB = new MyClass ();
    sampleB.myObject = sharedObject;
    System.out.println (sampleA.sharedObject == sampleB.sharedObject);
    System.out.println (sampleA == sampleB);
}
----------------------------------------

 public static void main (String [] args) {
    Object sharedObject = new Object ();
    MyClass sampleA = new MyClass ();
    MyClass sampleB = new MyClass ();
    sampleA.updateObject(sharedObject);
    sampleB.updateObject(sharedObject);
    System.out.println (sampleA.sharedObject == sampleB.sharedObject);
    System.out.println (sampleA.equals(sampleB));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
593
3
Gpt3D_Clone593_3.java 1 9
Gpt3D_Clone593_3.java 10 20
----------------------------------------

public static void main (String args []) {
    Object sharedObject = new Object ();
    MyClass sampleA = new MyClass ();
    sampleA.myObject = sharedObject;
    MyClass sampleB = new MyClass ();
    sampleB.myObject = sharedObject;
    System.out.println (sampleA.sharedObject == sampleB.sharedObject);
    System.out.println (sampleA == sampleB);
}
----------------------------------------

 public static void main (String [] args) {
    Object sharedObject = new Object ();
    MyClass sampleA = new MyClass ();
    MyClass sampleB = new MyClass ();
    sampleA.setMyObject(sharedObject);
    sampleB.setMyObject(sharedObject);
    System.out.println (sampleA.sharedObject == sampleB.sharedObject);
    System.out.println (sampleA.equals(sampleB));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
593
5
Gpt3D_Clone593_5.java 1 9
Gpt3D_Clone593_5.java 10 20
----------------------------------------

public static void main (String args []) {
    Object sharedObject = new Object ();
    MyClass sampleA = new MyClass ();
    sampleA.myObject = sharedObject;
    MyClass sampleB = new MyClass ();
    sampleB.myObject = sharedObject;
    System.out.println (sampleA.sharedObject == sampleB.sharedObject);
    System.out.println (sampleA == sampleB);
}
----------------------------------------

 public static void main (String [] args) {
    Object sharedObject = new Object ();
    MyClass sampleA = new MyClass ();
    MyClass sampleB = new MyClass ();
    sampleA.addObject(sharedObject);
    sampleB.addObject(sharedObject);
    System.out.println (sampleA.sharedObject == sampleB.sharedObject);
    System.out.println (sampleA.equals(sampleB));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
593
6
Gpt3D_Clone593_6.java 1 9
Gpt3D_Clone593_6.java 10 20
----------------------------------------

public static void main (String args []) {
    Object sharedObject = new Object ();
    MyClass sampleA = new MyClass ();
    sampleA.myObject = sharedObject;
    MyClass sampleB = new MyClass ();
    sampleB.myObject = sharedObject;
    System.out.println (sampleA.sharedObject == sampleB.sharedObject);
    System.out.println (sampleA == sampleB);
}
----------------------------------------

 public static void main (String [] args) {
    Object sharedObject = new Object ();
    MyClass sampleA = new MyClass ();
    MyClass sampleB = new MyClass ();
    sampleA.assignSharedObject(sharedObject);
    sampleB.assignSharedObject(sharedObject);
    System.out.println (sampleA.sharedObject == sampleB.sharedObject);
    System.out.println (sampleA.equals(sampleB));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
593
7
Gpt3D_Clone593_7.java 1 9
Gpt3D_Clone593_7.java 10 20
----------------------------------------

public static void main (String args []) {
    Object sharedObject = new Object ();
    MyClass sampleA = new MyClass ();
    sampleA.myObject = sharedObject;
    MyClass sampleB = new MyClass ();
    sampleB.myObject = sharedObject;
    System.out.println (sampleA.sharedObject == sampleB.sharedObject);
    System.out.println (sampleA == sampleB);
}
----------------------------------------

 public static void main (String [] args) {
    Object sharedObject = new Object ();
    MyClass sampleA = new MyClass ();
    MyClass sampleB = new MyClass ();
    sampleA.setSampleObject(sharedObject);
    sampleB.setSampleObject(sharedObject);
    System.out.println (sampleA.sharedObject == sampleB.sharedObject);
    System.out.println (sampleA.equals(sampleB));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
593
8
Gpt3D_Clone593_8.java 1 9
Gpt3D_Clone593_8.java 10 18
----------------------------------------

public static void main (String args []) {
    Object sharedObject = new Object ();
    MyClass sampleA = new MyClass ();
    sampleA.myObject = sharedObject;
    MyClass sampleB = new MyClass ();
    sampleB.myObject = sharedObject;
    System.out.println (sampleA.sharedObject == sampleB.sharedObject);
    System.out.println (sampleA == sampleB);
}
----------------------------------------

 public static void main (String [] args) {
    Object sharedObject = new Object ();
    MyClass sampleA = new MyClass (sharedObject);
    MyClass sampleB = new MyClass (sharedObject);
    System.out.println (Objects.same(sampleA.sharedObject, sampleB.sharedObject));
    System.out.println (sampleA == sampleB);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
593
9
Gpt3D_Clone593_9.java 1 9
Gpt3D_Clone593_9.java 10 18
----------------------------------------

public static void main (String args []) {
    Object sharedObject = new Object ();
    MyClass sampleA = new MyClass ();
    sampleA.myObject = sharedObject;
    MyClass sampleB = new MyClass ();
    sampleB.myObject = sharedObject;
    System.out.println (sampleA.sharedObject == sampleB.sharedObject);
    System.out.println (sampleA == sampleB);
}
----------------------------------------

 public static void main (String args []) {
    Object sharedObject = new Object ();
    MyClass sampleA = new MyClass (sharedObject);
    MyClass sampleB = new MyClass (sharedObject);
    System.out.println (sampleA.sharedObject == sampleB.sharedObject);
    System.out.println (sampleA == sampleB);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
594
0
Gpt3D_Clone594_0.java 1 12
Gpt3D_Clone594_0.java 13 32
----------------------------------------

public static int [] front11 (int [] a, int [] b) {
    int alen = (a != null) ? a.length : 0, blen = (b != null) ? b.length : 0;
    if (alen > 0 && blen > 0) {
        return new int [] {a [0], b [0]};
    } else if (alen > 0) {
        return new int [] {a [0]};
    } else if (blen > 0) {
        return new int [] {b [0]};
    } else {
        return new int [0];
    }
}
----------------------------------------

  public static int[] front11(int[] a, int[] b) {
    int alen = a != null ? a.length : 0;
    int blen = b != null ? b.length : 0;
    int[] result = new int[2];
    if (alen > 0 && blen > 0) {
        result[0] = a[0];
        result[1] = b[0];
        return result;
    } else if (alen > 0) {
        result[0] = a[0];
        return result;
    } else if (blen > 0) {
        result[0] = b[0];
        return result;
    } else {
        return result;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
594
1
Gpt3D_Clone594_1.java 1 12
Gpt3D_Clone594_1.java 13 33
----------------------------------------

public static int [] front11 (int [] a, int [] b) {
    int alen = (a != null) ? a.length : 0, blen = (b != null) ? b.length : 0;
    if (alen > 0 && blen > 0) {
        return new int [] {a [0], b [0]};
    } else if (alen > 0) {
        return new int [] {a [0]};
    } else if (blen > 0) {
        return new int [] {b [0]};
    } else {
        return new int [0];
    }
}
----------------------------------------

  public static int[] front11(int[] a, int[] b) {
    int alen = a != null ? a.length : 0;
    int blen = b != null ? b.length : 0;
    int[] result = new int[2];
    if (alen > 0 && blen > 0) {
        result[0] = a[0];
        result[1] = b[0];
        return result;
    } else if (alen > 0) {
        result[0] = a[0];
    } else if (blen > 0) {
        result[0] = b[0];
    }
    int[] finalResult = new int[result[0] != 0 ? 1 : 0];
    if (result[0] != 0) {
        finalResult[0] = result[0];
    }
    return finalResult;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
594
2
Gpt3D_Clone594_2.java 1 12
Gpt3D_Clone594_2.java 13 34
----------------------------------------

public static int [] front11 (int [] a, int [] b) {
    int alen = (a != null) ? a.length : 0, blen = (b != null) ? b.length : 0;
    if (alen > 0 && blen > 0) {
        return new int [] {a [0], b [0]};
    } else if (alen > 0) {
        return new int [] {a [0]};
    } else if (blen > 0) {
        return new int [] {b [0]};
    } else {
        return new int [0];
    }
}
----------------------------------------

 public static int[] front11(int[] a, int[] b) {
    int lenA = a != null ? a.length : 0;
    int lenB = b != null ? b.length : 0;
    int len = lenA + lenB;
    int[] arr = new int[len];
    if (lenA > 0) {
        arr[0] = a[0];
    }
    if (lenB > 0) {
        arr[1] = b[0];
    }
    if (len == 0) {
        return new int[0];
    } else if (len == 1) {
        return Arrays.copyOfRange(arr, 0, 1);
    } else {
        return Arrays.copyOf(arr, 2);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
594
3
Gpt3D_Clone594_3.java 1 12
Gpt3D_Clone594_3.java 13 33
----------------------------------------

public static int [] front11 (int [] a, int [] b) {
    int alen = (a != null) ? a.length : 0, blen = (b != null) ? b.length : 0;
    if (alen > 0 && blen > 0) {
        return new int [] {a [0], b [0]};
    } else if (alen > 0) {
        return new int [] {a [0]};
    } else if (blen > 0) {
        return new int [] {b [0]};
    } else {
        return new int [0];
    }
}
----------------------------------------

 public static int[] front11(int[] a, int[] b) {
	int alen = (a != null) ? a.length : 0;
    int blen = (b != null) ? b.length : 0;
    int[] result = new int[2];
    if (alen > 0 && blen > 0) {
        result [0] = a [0];
        result [1] = b [0];
        return result;
    } else if (alen > 0) {
        result [0] = a [0];
        // reduce size of array if one array is empty
        result = Arrays.copyOfRange(result, 0, 1);
    } else if (blen > 0) {
        result [0] = b [0];
        // reduce size of array if one array is empty
        result = Arrays.copyOfRange(result, 0, 1);
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
594
4
Gpt3D_Clone594_4.java 1 12
Gpt3D_Clone594_4.java 13 31
----------------------------------------

public static int [] front11 (int [] a, int [] b) {
    int alen = (a != null) ? a.length : 0, blen = (b != null) ? b.length : 0;
    if (alen > 0 && blen > 0) {
        return new int [] {a [0], b [0]};
    } else if (alen > 0) {
        return new int [] {a [0]};
    } else if (blen > 0) {
        return new int [] {b [0]};
    } else {
        return new int [0];
    }
}
----------------------------------------

 public static int[] front11(int[] a, int[] b) {
	int alen = a == null ? 0 : a.length;	
	int blen = b == null ? 0 : b.length;	
	int[] result = new int[2];	
	if (alen > 0 && blen > 0) {		
		result[0] = a[0];		
		result[1] = b[0];	
	} else if (alen > 0) {		
		result[0] = a[0];	
	} else if (blen > 0) {		
		result[0] = b[0];	
	}	
	if (result[0] != 0 || result[1] != 0) {		
		return result;	
	}
	return new int[0];
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
594
5
Gpt3D_Clone594_5.java 1 12
Gpt3D_Clone594_5.java 13 31
----------------------------------------

public static int [] front11 (int [] a, int [] b) {
    int alen = (a != null) ? a.length : 0, blen = (b != null) ? b.length : 0;
    if (alen > 0 && blen > 0) {
        return new int [] {a [0], b [0]};
    } else if (alen > 0) {
        return new int [] {a [0]};
    } else if (blen > 0) {
        return new int [] {b [0]};
    } else {
        return new int [0];
    }
}
----------------------------------------

 public static int[] front11(int[] a, int[] b) {
    int alen = (a != null) ? a.length : 0;
    int blen = (b != null) ? b.length : 0;
    int[] result;
    if (alen > 0 || blen > 0) {
        result = new int[Math.max(alen, blen)];
    } else {
        return new int[0];
    }
    if (alen > 0) {
        result[0] = a[0];
    }
    if (blen > 0) {
        result[1] = b[0];
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
594
6
Gpt3D_Clone594_6.java 1 12
Gpt3D_Clone594_6.java 13 27
----------------------------------------

public static int [] front11 (int [] a, int [] b) {
    int alen = (a != null) ? a.length : 0, blen = (b != null) ? b.length : 0;
    if (alen > 0 && blen > 0) {
        return new int [] {a [0], b [0]};
    } else if (alen > 0) {
        return new int [] {a [0]};
    } else if (blen > 0) {
        return new int [] {b [0]};
    } else {
        return new int [0];
    }
}
----------------------------------------

  public static int[] front11(int[] a, int[] b) {
    int alen = (a != null) ? a.length : 0, blen = (b != null) ? b.length : 0;
    int[] result = new int[2];
    if (alen > 0 && blen > 0) {
        result [0] = a [0];
        result [1] = b [0];
    } else if (alen > 0) {
        result [0] = a [0];
    } else if (blen > 0) {
        result [0] = b [0];
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
594
7
Gpt3D_Clone594_7.java 1 12
Gpt3D_Clone594_7.java 13 27
----------------------------------------

public static int [] front11 (int [] a, int [] b) {
    int alen = (a != null) ? a.length : 0, blen = (b != null) ? b.length : 0;
    if (alen > 0 && blen > 0) {
        return new int [] {a [0], b [0]};
    } else if (alen > 0) {
        return new int [] {a [0]};
    } else if (blen > 0) {
        return new int [] {b [0]};
    } else {
        return new int [0];
    }
}
----------------------------------------

 public static int[] front11(int[] a, int[] b) {
    int alen = (a != null) ? a.length : 0;
    int blen = (b != null) ? b.length : 0;
    if ((alen == 0) && (blen == 0)) {
        return new int[0];
    } else if (alen == 0) {
        return new int[] {b[0]};
    } else if (blen == 0) {
        return new int[] {a[0]};
    } else {
        return new int[] {a[0], b[0]};
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
594
8
Gpt3D_Clone594_8.java 1 12
Gpt3D_Clone594_8.java 13 29
----------------------------------------

public static int [] front11 (int [] a, int [] b) {
    int alen = (a != null) ? a.length : 0, blen = (b != null) ? b.length : 0;
    if (alen > 0 && blen > 0) {
        return new int [] {a [0], b [0]};
    } else if (alen > 0) {
        return new int [] {a [0]};
    } else if (blen > 0) {
        return new int [] {b [0]};
    } else {
        return new int [0];
    }
}
----------------------------------------

 public static int[] front11(int[] a, int[] b) {
    int alen = (a != null) ? a.length : 0;
    int blen = (b != null) ? b.length : 0;
    if (blen == 0 && alen == 0) {
        return new int[0];
    }
    int[] result = new int[Math.max(alen,blen)];
    if (alen > 0) {
        result[0] = a[0];
    }
    if (blen > 0) {
        result[1] = b[0];
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
596
0
Gpt3D_Clone596_0.java 1 19
Gpt3D_Clone596_0.java 20 46
----------------------------------------

public static void main (String [] args) {
    List < Character > characters = new ArrayList < Character > ();
    for (char c = 'a';
    c <= 'z'; c ++) {
        characters.add (c);
    }
    List < String > allStrings = new ArrayList < String > ();
    for (Character c : characters) {
        for (Character d : characters) {
            for (Character e : characters) {
                for (Character f : characters) {
                    String s = "" + c + d + e + f;
                    allStrings.add (s);
                }
            }
        }
    }
    System.out.println (allStrings.size ());
}
----------------------------------------

 public static void main (String [] args) {
    int last = 'z';
    char[] charactersArray = new char[last - 96];
    int counter = 0;
    for (char c = 'a'; c <= 'z'; c++) {
        charactersArray[counter] = c;
        counter++;
    }
    List < String > allStrings = new ArrayList < String > ();
    for (char x : charactersArray) {
        for (char y : charactersArray) {
            for (char z : charactersArray) {
                for (char w : charactersArray) {
                    String s = Character.toString(x) + Character.toString(y)
                      + Character.toString(z) + Character.toString(w);
                    allStrings.add (s);
                }
            }
        }
    }
    System.out.println (allStrings.size ());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
596
1
Gpt3D_Clone596_1.java 1 19
Gpt3D_Clone596_1.java 20 42
----------------------------------------

public static void main (String [] args) {
    List < Character > characters = new ArrayList < Character > ();
    for (char c = 'a';
    c <= 'z'; c ++) {
        characters.add (c);
    }
    List < String > allStrings = new ArrayList < String > ();
    for (Character c : characters) {
        for (Character d : characters) {
            for (Character e : characters) {
                for (Character f : characters) {
                    String s = "" + c + d + e + f;
                    allStrings.add (s);
                }
            }
        }
    }
    System.out.println (allStrings.size ());
}
----------------------------------------

 public static void main (String [] args) {
    char[] characters = new char[26];
    int counter = 0;
    for (char c = 'a'; c <= 'z'; c++) {
        characters[counter] = c;
        counter++;
    }
    List < String > allStrings = new ArrayList < String > ();
    for (int i = 0; i < characters.length; i++) {
        for (int j = 0; j < characters.length; j++) {
            for (int k = 0; k < characters.length; k++) {
                for (int l = 0; l < characters.length; l++) {
                    String s = "" + characters[i] + characters[j]
                      + characters[k] + characters[l];
                    allStrings.add (s);
                }
            }
        }
    }
    System.out.println (allStrings.size ());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
596
2
Gpt3D_Clone596_2.java 1 19
Gpt3D_Clone596_2.java 20 43
----------------------------------------

public static void main (String [] args) {
    List < Character > characters = new ArrayList < Character > ();
    for (char c = 'a';
    c <= 'z'; c ++) {
        characters.add (c);
    }
    List < String > allStrings = new ArrayList < String > ();
    for (Character c : characters) {
        for (Character d : characters) {
            for (Character e : characters) {
                for (Character f : characters) {
                    String s = "" + c + d + e + f;
                    allStrings.add (s);
                }
            }
        }
    }
    System.out.println (allStrings.size ());
}
----------------------------------------

 public static void main (String [] args) {
    char c = 'a';
    List < Character > characters = new ArrayList < Character > ();
    while(c <= 'z'){
        characters.add (c);
        c++;
    }
    List < String > allStrings = new ArrayList < String > ();
    for(int i=0; i<characters.size(); i++){
        for(int j=0; j<characters.size(); j++){
            for(int k=0; k<characters.size(); k++){
                for(int l=0; l<characters.size(); l++){
                    String s = characters.get(i).toString() + characters.get(j).toString()+
                      characters.get(k).toString() + characters.get(l).toString();
                    allStrings.add(s);
                }
            }
        }
    }
    System.out.println (allStrings.size ());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
596
3
Gpt3D_Clone596_3.java 1 19
Gpt3D_Clone596_3.java 20 41
----------------------------------------

public static void main (String [] args) {
    List < Character > characters = new ArrayList < Character > ();
    for (char c = 'a';
    c <= 'z'; c ++) {
        characters.add (c);
    }
    List < String > allStrings = new ArrayList < String > ();
    for (Character c : characters) {
        for (Character d : characters) {
            for (Character e : characters) {
                for (Character f : characters) {
                    String s = "" + c + d + e + f;
                    allStrings.add (s);
                }
            }
        }
    }
    System.out.println (allStrings.size ());
}
----------------------------------------

 public static void main (String [] args) {
    List < Character > characters = new ArrayList < Character > ();
    for (int c = 'a'; c <= 'z'; c++) {
        characters.add ((char)c);
    }
    List < String > allStrings = new ArrayList < String > ();
    for (int i = 0; i < characters.size(); i++) {
        for (int j = 0; j < characters.size(); j++) {
            for (int k = 0; k < characters.size(); k++) {
                for (int l = 0; l < characters.size(); l++) {
                    String s = "" + characters.get(i) + characters.get(j)
                      + characters.get(k) + characters.get(l);
                    allStrings.add(s);
                }
            }
        }
    }
    System.out.println (allStrings.size ());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
596
4
Gpt3D_Clone596_4.java 1 19
Gpt3D_Clone596_4.java 20 40
----------------------------------------

public static void main (String [] args) {
    List < Character > characters = new ArrayList < Character > ();
    for (char c = 'a';
    c <= 'z'; c ++) {
        characters.add (c);
    }
    List < String > allStrings = new ArrayList < String > ();
    for (Character c : characters) {
        for (Character d : characters) {
            for (Character e : characters) {
                for (Character f : characters) {
                    String s = "" + c + d + e + f;
                    allStrings.add (s);
                }
            }
        }
    }
    System.out.println (allStrings.size ());
}
----------------------------------------

 public static void main (String [] args) {
    List < Character > characters = new ArrayList < Character > ();
    for (char c = 'a';
    c <= 'z'; c ++) 
    characters.add (c);
    List < String > allStrings = new ArrayList < String > ();
    for (int i = 0; i < characters.size(); i++) {
        for (int j = 0; j < characters.size(); j++) {
            for (int k = 0; k < characters.size(); k++) {
                for (int l = 0; l < characters.size(); l++) {
                    String s = "" + characters.get(i) + characters.get(j)
                      + characters.get(k) + characters.get(l);
                    allStrings.add(s);
                }
            }
        }
    }
    System.out.println (allStrings.size ());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
596
5
Gpt3D_Clone596_5.java 1 19
Gpt3D_Clone596_5.java 20 40
----------------------------------------

public static void main (String [] args) {
    List < Character > characters = new ArrayList < Character > ();
    for (char c = 'a';
    c <= 'z'; c ++) {
        characters.add (c);
    }
    List < String > allStrings = new ArrayList < String > ();
    for (Character c : characters) {
        for (Character d : characters) {
            for (Character e : characters) {
                for (Character f : characters) {
                    String s = "" + c + d + e + f;
                    allStrings.add (s);
                }
            }
        }
    }
    System.out.println (allStrings.size ());
}
----------------------------------------

 public static void main (String [] args) {
    List < Character > characters = new ArrayList < Character > ();
    for (char c = 'a'; c <= 'z'; c++) 
        characters.add (c);
    List < String > allStrings = new ArrayList < String > ();
    for (int i = 0; i < characters.size(); i++) {
        for (int j = 0; j < characters.size(); j++) {
            for (int k = 0; k < characters.size(); k++) {
                for (int l = 0; l < characters.size(); l++) {
                    String s = "" + characters.get(i) + characters.get(j)
                      + characters.get(k) + characters.get(l);
                    allStrings.add (s);
                }
            }
        }
    }
    System.out.println (allStrings.size ());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
596
6
Gpt3D_Clone596_6.java 1 19
Gpt3D_Clone596_6.java 20 38
----------------------------------------

public static void main (String [] args) {
    List < Character > characters = new ArrayList < Character > ();
    for (char c = 'a';
    c <= 'z'; c ++) {
        characters.add (c);
    }
    List < String > allStrings = new ArrayList < String > ();
    for (Character c : characters) {
        for (Character d : characters) {
            for (Character e : characters) {
                for (Character f : characters) {
                    String s = "" + c + d + e + f;
                    allStrings.add (s);
                }
            }
        }
    }
    System.out.println (allStrings.size ());
}
----------------------------------------

 public static void main (String [] args) {
    char[] characters  = "abcdefghijklmnopqrstuvwxyz".toCharArray ();
    List < String > allStrings = new ArrayList < String > ();
    for (int i = 0; i < characters.length; i++) {
        for (int j = 0; j < characters.length; j++) {
            for (int k = 0; k < characters.length; k++) {
                for (int l = 0; l < characters.length; l++) {
                    String s = "" + characters[i] + characters[j]
                      + characters[k] + characters[l];
                    allStrings.add (s);
                }
            }
        }
    }
    System.out.println (allStrings.size ());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
596
7
Gpt3D_Clone596_7.java 1 19
Gpt3D_Clone596_7.java 20 37
----------------------------------------

public static void main (String [] args) {
    List < Character > characters = new ArrayList < Character > ();
    for (char c = 'a';
    c <= 'z'; c ++) {
        characters.add (c);
    }
    List < String > allStrings = new ArrayList < String > ();
    for (Character c : characters) {
        for (Character d : characters) {
            for (Character e : characters) {
                for (Character f : characters) {
                    String s = "" + c + d + e + f;
                    allStrings.add (s);
                }
            }
        }
    }
    System.out.println (allStrings.size ());
}
----------------------------------------

 public static void main (String [] args) {
    char[] characters  = "abcdefghijklmnopqrstuvwxyz".toCharArray ();
    List < String > allStrings = new ArrayList < String > ();
    for (int i = 0; i < characters.length; i++) {
        for (int j = 0; j < characters.length; j++) {
            for (int k = 0; k < characters.length; k++) {
                for (int l = 0; l < characters.length; l++) {
                    String s = new String (new char[] {characters[i],
                      characters[j], characters[k], characters[l]});
                    allStrings.add (s);
                }
            }
        }
    }
    System.out.println (allStrings.size ());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
596
8
Gpt3D_Clone596_8.java 1 19
Gpt3D_Clone596_8.java 20 30
----------------------------------------

public static void main (String [] args) {
    List < Character > characters = new ArrayList < Character > ();
    for (char c = 'a';
    c <= 'z'; c ++) {
        characters.add (c);
    }
    List < String > allStrings = new ArrayList < String > ();
    for (Character c : characters) {
        for (Character d : characters) {
            for (Character e : characters) {
                for (Character f : characters) {
                    String s = "" + c + d + e + f;
                    allStrings.add (s);
                }
            }
        }
    }
    System.out.println (allStrings.size ());
}
----------------------------------------

 public static void main (String [] args) {
    List < Character > characters = IntStream.rangeClosed('a', 'z').mapToObj(c -> (char)c).collect(Collectors.toList());
    List<String> allStrings = new ArrayList<String>();
    characters.forEach(e1 -> characters.forEach(e2 -> characters.forEach(e3 -> characters.forEach(e4 ->
            allStrings.add("" + e1 + e2 + e3 + e4)))));
    System.out.println(allStrings.size());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
597
0
Gpt3D_Clone597_0.java 1 11
Gpt3D_Clone597_0.java 12 32
----------------------------------------

public static int countLines (String str) {
    if (str == null || str.isEmpty ()) {
        return 0;
    }
    int lines = 1;
    int pos = 0;
    while ((pos = str.indexOf ("\n", pos) + 1) != 0) {
        lines ++;
    }
    return lines;
}
----------------------------------------

 public static int countLines (String str) {
    if (str == null || str.isEmpty ()) {
        return 0;
    }
    int lines = 0;
    int pos = 0;
    while (pos >= 0) {
        int prevPos = pos;
        pos = str.indexOf("\n", prevPos);
        if (pos >= 0) {
            lines++;
            pos++;
        }
        else {
            return lines;
        }
    }
    return lines;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
597
8
Gpt3D_Clone597_8.java 1 11
Gpt3D_Clone597_8.java 12 21
----------------------------------------

public static int countLines (String str) {
    if (str == null || str.isEmpty ()) {
        return 0;
    }
    int lines = 1;
    int pos = 0;
    while ((pos = str.indexOf ("\n", pos) + 1) != 0) {
        lines ++;
    }
    return lines;
}
----------------------------------------

 public static int countLines (String str) {
    if (str == null || str.isEmpty ()) {
        return 0;
    }
    String[] arrOfStr = str.split("\\r?\\n");
    return arrOfStr.length;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
599
0
Gpt3D_Clone599_0.java 1 12
Gpt3D_Clone599_0.java 13 34
----------------------------------------

public static String compress (String text) {
    String result = "";
    int index = 0;
    while (index < text.length ()) {
        char c = text.charAt (index);
        int count = count (text, index);
        if (count == 1) result += "" + c;
        else result += "" + count + c;
        index += count;
    }
    return result;
}
----------------------------------------

 public static String compress (String text){
        String result = "";
        int index = 0;
        while(index < text.length()){
            char c = text.charAt(index);
            int count = 0;
            while(c == text.charAt(index)){
                count++;
                index++;
            }
            if(count == 1){
                result += "" + c;
            }
            else{
                result += "" + count + c;
            }
        }
        return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
599
1
Gpt3D_Clone599_1.java 1 12
Gpt3D_Clone599_1.java 13 33
----------------------------------------

public static String compress (String text) {
    String result = "";
    int index = 0;
    while (index < text.length ()) {
        char c = text.charAt (index);
        int count = count (text, index);
        if (count == 1) result += "" + c;
        else result += "" + count + c;
        index += count;
    }
    return result;
}
----------------------------------------

  public static String compress (String text){
        String result = "";
        int i = 0;
        while(i < text.length()){
            char character = text.charAt(i);
            int count = 0;
            while(i < text.length() && character == text.charAt(i)){
                count++;
                i++;
            }
            if(count == 1){
                result += "" + character;
            }
            else{
                result += "" + count + character;
            }
        }
        return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
59
2
Gpt3D_Clone59_2.java 1 15
Gpt3D_Clone59_2.java 16 28
----------------------------------------

public static void main (String [] args) {
    List < String > keywords = Arrays.asList ("Apple", "Ananas", "Mango", "Banana", "Beer");
    Map < Character, List < String > > result = new HashMap < Character, List < String > > ();
    for (String k : keywords) {
        char firstChar = k.charAt (0);
        if (! result.containsKey (firstChar)) {
            result.put (firstChar, new ArrayList < String > ());
        }
        result.get (firstChar).add (k);
    }
    for (List < String > list : result.values ()) {
        Collections.sort (list);
    }
    System.out.println (result);
}
----------------------------------------

 public static void main (String [] args) {
    List<String> keywords = Arrays.asList("Apple", "Ananas", "Mango", "Banana", "Beer");
    LinkedHashMap<Character, List<String>> result = new LinkedHashMap<>();
    keywords.forEach(k -> {
        char firstChar = k.charAt(0);
        result.putIfAbsent(firstChar, new ArrayList<>());
        result.get(firstChar).add(k);
    });
    result.values().forEach(list -> list.sort(String::compareTo));
    System.out.println(result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
59
3
Gpt3D_Clone59_3.java 1 15
Gpt3D_Clone59_3.java 16 28
----------------------------------------

public static void main (String [] args) {
    List < String > keywords = Arrays.asList ("Apple", "Ananas", "Mango", "Banana", "Beer");
    Map < Character, List < String > > result = new HashMap < Character, List < String > > ();
    for (String k : keywords) {
        char firstChar = k.charAt (0);
        if (! result.containsKey (firstChar)) {
            result.put (firstChar, new ArrayList < String > ());
        }
        result.get (firstChar).add (k);
    }
    for (List < String > list : result.values ()) {
        Collections.sort (list);
    }
    System.out.println (result);
}
----------------------------------------

 public static void main (String [] args) {
    List<String> keywords = Arrays.asList("Apple", "Ananas", "Mango", "Banana", "Beer");
    HashMap<Character, List<String>> result = new HashMap<>();
    keywords.forEach(k -> {
        char firstChar = k.charAt(0);
        result.putIfAbsent(firstChar, new ArrayList<>());
        result.get(firstChar).add(k);
    });
    result.values().forEach(list -> Collections.sort(list));
    System.out.println(result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
59
6
Gpt3D_Clone59_6.java 1 15
Gpt3D_Clone59_6.java 16 27
----------------------------------------

public static void main (String [] args) {
    List < String > keywords = Arrays.asList ("Apple", "Ananas", "Mango", "Banana", "Beer");
    Map < Character, List < String > > result = new HashMap < Character, List < String > > ();
    for (String k : keywords) {
        char firstChar = k.charAt (0);
        if (! result.containsKey (firstChar)) {
            result.put (firstChar, new ArrayList < String > ());
        }
        result.get (firstChar).add (k);
    }
    for (List < String > list : result.values ()) {
        Collections.sort (list);
    }
    System.out.println (result);
}
----------------------------------------

 public static void main (String [] args) {
    List<String> keywords = Arrays.asList("Apple", "Ananas", "Mango", "Banana", "Beer");
    HashMap<Character, List<String>> result = new HashMap<>();
    for(String k : keywords) {
        char firstChar = k.charAt(0);
        result.computeIfAbsent(firstChar, list -> new ArrayList<>()).add(k);
    }
    result.forEach((character, strings) -> Collections.sort(strings));
    System.out.println(result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
59
7
Gpt3D_Clone59_7.java 1 15
Gpt3D_Clone59_7.java 16 27
----------------------------------------

public static void main (String [] args) {
    List < String > keywords = Arrays.asList ("Apple", "Ananas", "Mango", "Banana", "Beer");
    Map < Character, List < String > > result = new HashMap < Character, List < String > > ();
    for (String k : keywords) {
        char firstChar = k.charAt (0);
        if (! result.containsKey (firstChar)) {
            result.put (firstChar, new ArrayList < String > ());
        }
        result.get (firstChar).add (k);
    }
    for (List < String > list : result.values ()) {
        Collections.sort (list);
    }
    System.out.println (result);
}
----------------------------------------

 public static void main (String [] args) {
    List<String> keywords = Arrays.asList("Apple", "Ananas", "Mango", "Banana", "Beer");
    TreeMap<Character, List<String>> result = new TreeMap<>();
    for(String k : keywords) {
        char firstChar = k.charAt(0);
        result.computeIfAbsent(firstChar, list -> new ArrayList<>()).add(k);
    }
    result.values().forEach(list -> list.sort(Comparator.naturalOrder()));
    System.out.println(result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
59
8
Gpt3D_Clone59_8.java 1 15
Gpt3D_Clone59_8.java 16 27
----------------------------------------

public static void main (String [] args) {
    List < String > keywords = Arrays.asList ("Apple", "Ananas", "Mango", "Banana", "Beer");
    Map < Character, List < String > > result = new HashMap < Character, List < String > > ();
    for (String k : keywords) {
        char firstChar = k.charAt (0);
        if (! result.containsKey (firstChar)) {
            result.put (firstChar, new ArrayList < String > ());
        }
        result.get (firstChar).add (k);
    }
    for (List < String > list : result.values ()) {
        Collections.sort (list);
    }
    System.out.println (result);
}
----------------------------------------

 public static void main (String [] args) {
    List<String> keywords = Arrays.asList("Apple", "Ananas", "Mango", "Banana", "Beer");
    LinkedHashMap<Character, List<String>> result = new LinkedHashMap<>();
    for(String k : keywords) {
        char firstChar = k.charAt(0);
        result.computeIfAbsent(firstChar, list -> new ArrayList<>()).add(k);
    }
    result.forEach((character, strings) -> strings.sort(Comparator.naturalOrder()));
    System.out.println(result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
600
0
Gpt3D_Clone600_0.java 1 20
Gpt3D_Clone600_0.java 21 43
----------------------------------------

public static void main (String [] args) {
    String str = "AAABBBBCC";
    int length = str.length ();
    StringBuilder sb = new StringBuilder ();
    int count = 1;
    for (int i = 0;
    i < length; i ++) {
        if (i == length - 1) {
            sb.append (str.charAt (i) + "" + count);
            break;
        }
        if (str.charAt (i) == str.charAt (i + 1)) {
            count ++;
        } else {
            sb.append (str.charAt (i) + "" + count);
            count = 1;
        }
    }
    System.out.println (sb.toString ());
}
----------------------------------------

 public static void main(String[] args) { 
   String str = "AAABBBBCC"; 
    int length = str.length(); 
    int i = 0;
    int count = 0;
    char currentChar;
    String result = "";
    
    
    while (i < length) {
        currentChar = str.charAt(i);
        count = 1; 
        while (i+1 < length && currentChar == str.charAt(i+1)) { 
            count++;
            i++; 
        } 
        result += currentChar + String.valueOf(count);
        i++; 
    } 
    System.out.println(result); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
600
4
Gpt3D_Clone600_4.java 1 20
Gpt3D_Clone600_4.java 21 42
----------------------------------------

public static void main (String [] args) {
    String str = "AAABBBBCC";
    int length = str.length ();
    StringBuilder sb = new StringBuilder ();
    int count = 1;
    for (int i = 0;
    i < length; i ++) {
        if (i == length - 1) {
            sb.append (str.charAt (i) + "" + count);
            break;
        }
        if (str.charAt (i) == str.charAt (i + 1)) {
            count ++;
        } else {
            sb.append (str.charAt (i) + "" + count);
            count = 1;
        }
    }
    System.out.println (sb.toString ());
}
----------------------------------------

 public static void main(String[] args) {
    String str = "AAABBBBCC";
    int i, length, count;
    char character;
    length = str.length();
    count = 1;
    System.out.print("" + str.charAt(0));
    for (i = 1; i < length; i++) {
        character = str.charAt(i);
        if (str.charAt(i) == str.charAt(i - 1)) {
            count++;
        } else {
            System.out.print(count + "" + character);
            count = 1;
        }
    }
    System.out.println(count);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
601
0
Gpt3D_Clone601_0.java 1 14
Gpt3D_Clone601_0.java 15 44
----------------------------------------

public static void main (String args []) {
    inp = new Scanner (System.in);
    String str = inp.nextLine ();
    List < Character > arrlist = new ArrayList < Character > ();
    for (int i = 0;
    i < str.length (); i ++) {
        arrlist.add (str.charAt (i));
    }
    for (int i = 0;
    i < str.length (); i ++) {
        int freq = Collections.frequency (arrlist, str.charAt (i));
        System.out.println ("Frequency of " + str.charAt (i) + "  is:   " + freq);
    }
}
----------------------------------------

 public static void main(String[] args) {
	  Scanner scanner = new Scanner(System.in);
	  String inputString = scanner.nextLine();
	  char[] character = inputString.toCharArray(); 
	  int count[] = new int[256]; 
	  for (int i = 0; i < 256; i++) {
	      count[i] = 0;
	  }
	  // hash table
	  int len = inputString.length(); 
	  for (int i = 0; i < len; i++) {
	      count[inputString.charAt(i)]++;
	  }
	  char ch[] = new char[inputString.length()];
	  for (int i = 0; i < len; i++) {
	      ch[i] = inputString.charAt(i);
	      int find = 0;
	      for (int j = 0; j <= i; j++) {
		  // count occurence
		  if (inputString.charAt(i) == ch[j])
		      find++;
	      }
	      if (find == 1)
		  System.out.println("Frequency of " + inputString.charAt(i) +
		    " is:  " + count[inputString.charAt(i)]);
	  }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
601
1
Gpt3D_Clone601_1.java 1 14
Gpt3D_Clone601_1.java 15 39
----------------------------------------

public static void main (String args []) {
    inp = new Scanner (System.in);
    String str = inp.nextLine ();
    List < Character > arrlist = new ArrayList < Character > ();
    for (int i = 0;
    i < str.length (); i ++) {
        arrlist.add (str.charAt (i));
    }
    for (int i = 0;
    i < str.length (); i ++) {
        int freq = Collections.frequency (arrlist, str.charAt (i));
        System.out.println ("Frequency of " + str.charAt (i) + "  is:   " + freq);
    }
}
----------------------------------------

 public static void main (String[] args) {
	  Scanner sc = new Scanner(System.in);
	  System.out.print("Enter a string: ");
	  String str = sc.nextLine();
	  // build hash table
	  HashMap<Character, Integer> charsMap = new HashMap<Character, Integer>();
	  for (int i = 0; i < str.length(); i++) {
	      char ch = str.charAt(i);
	      Integer n = charsMap.get(ch);
	      if (n == null) {
		  charsMap.put(ch, 1);
	      } else {
		  charsMap.put(ch, n + 1);
	      }
	  }
	  for (Map.Entry<Character, Integer> entry: charsMap.entrySet()) {
	      char currentChar = entry.getKey();
	      int count = entry.getValue();
	      System.out.println("Frequency of "+currentChar+"  is:   "+count);
	  }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
601
2
Gpt3D_Clone601_2.java 1 14
Gpt3D_Clone601_2.java 15 37
----------------------------------------

public static void main (String args []) {
    inp = new Scanner (System.in);
    String str = inp.nextLine ();
    List < Character > arrlist = new ArrayList < Character > ();
    for (int i = 0;
    i < str.length (); i ++) {
        arrlist.add (str.charAt (i));
    }
    for (int i = 0;
    i < str.length (); i ++) {
        int freq = Collections.frequency (arrlist, str.charAt (i));
        System.out.println ("Frequency of " + str.charAt (i) + "  is:   " + freq);
    }
}
----------------------------------------

 public static void main (String args[]) { 
	  Scanner scanner = new Scanner(System.in);
	  System.out.print("Enter string: ");
	  String str = scanner.nextLine(); 
	  int length = str.length();
	  int count;
	  Set<Character> strAlphabets = new HashSet<>();
	  for (int i=0; i<length;i++){
	      char c = str.charAt(i);
	      if (!strAlphabets.contains(c)) {
		  strAlphabets.add(c);
		  count = 1;
		  for (int j = i + 1; j<length;j++) {
		      if (c == str.charAt(j)){
		          count++;
		      }
		  }
	      System.out.println("Frequency of " + c + "  is:   " + count);
	      }
	  }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
601
3
Gpt3D_Clone601_3.java 1 14
Gpt3D_Clone601_3.java 15 36
----------------------------------------

public static void main (String args []) {
    inp = new Scanner (System.in);
    String str = inp.nextLine ();
    List < Character > arrlist = new ArrayList < Character > ();
    for (int i = 0;
    i < str.length (); i ++) {
        arrlist.add (str.charAt (i));
    }
    for (int i = 0;
    i < str.length (); i ++) {
        int freq = Collections.frequency (arrlist, str.charAt (i));
        System.out.println ("Frequency of " + str.charAt (i) + "  is:   " + freq);
    }
}
----------------------------------------

 public static void main (String args[]) {
	  Scanner inp = new Scanner(System.in);
	  System.out.print("Enter string: ");
	  String str = inp.nextLine();
	  HashMap<Character,Integer> map=new HashMap<Character,Integer>();
	  for(int i=0;i<str.length();i++){
	      char ch=str.charAt(i);
	      if(map.containsKey(ch)){
		  int count=map.get(ch);
		  count++;
		  map.put(ch,count);
	      }
	      else{
		  map.put(ch,1);
	      }
	  }  
	  for ( Map.Entry<Character,Integer> entry : map.entrySet()) {
	       System.out.println("Frequency of " + entry.getKey().toString()+"  is:   " + entry.getValue());
	  }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
601
4
Gpt3D_Clone601_4.java 1 14
Gpt3D_Clone601_4.java 15 36
----------------------------------------

public static void main (String args []) {
    inp = new Scanner (System.in);
    String str = inp.nextLine ();
    List < Character > arrlist = new ArrayList < Character > ();
    for (int i = 0;
    i < str.length (); i ++) {
        arrlist.add (str.charAt (i));
    }
    for (int i = 0;
    i < str.length (); i ++) {
        int freq = Collections.frequency (arrlist, str.charAt (i));
        System.out.println ("Frequency of " + str.charAt (i) + "  is:   " + freq);
    }
}
----------------------------------------

 public static void main(String[] args) {
	  Scanner sc = new Scanner(System.in);
	  System.out.print("Enter a string: ");
	  String str = sc.nextLine();
	  char[] charsInString = str.toCharArray();
	  Map<Character, Integer> freqMap = new HashMap<Character, Integer>();
	  for (char c : charsInString) {
	      if (freqMap.containsKey(c)) {
		  freqMap.put(c, freqMap.get(c) + 1);
	      } else {
		  freqMap.put(c, 1);
	      }
	  }
	  for (Map.Entry<Character, Integer> entry : freqMap.entrySet()) {
	      char key = entry.getKey();
	      Integer value = entry.getValue();
	      System.out.println("Frequency of " + Character.toString(key) + "  is:   " + value);
	  }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
601
5
Gpt3D_Clone601_5.java 1 14
Gpt3D_Clone601_5.java 15 36
----------------------------------------

public static void main (String args []) {
    inp = new Scanner (System.in);
    String str = inp.nextLine ();
    List < Character > arrlist = new ArrayList < Character > ();
    for (int i = 0;
    i < str.length (); i ++) {
        arrlist.add (str.charAt (i));
    }
    for (int i = 0;
    i < str.length (); i ++) {
        int freq = Collections.frequency (arrlist, str.charAt (i));
        System.out.println ("Frequency of " + str.charAt (i) + "  is:   " + freq);
    }
}
----------------------------------------

 public static void main(String[] args) {
	  Scanner scanner = new Scanner(System.in);
	  String inputStr = scanner.nextLine();
	  int freq = 0;
	  HashMap<Character, Integer> hMap = new HashMap<Character, Integer>();
	  for (int i = 0; i < inputStr.length(); i++) {
	      for (int j = 0; j < inputStr.length(); j++) {
		  if (inputStr.charAt(i) == inputStr.charAt(j))
		      freq++;
	      }
	      hMap.put(inputStr.charAt(i), freq);
	      freq = 0;
	  }
	  for (Map.Entry<Character, Integer> entry : hMap.entrySet()) {
	      char key = entry.getKey();
	      int value = entry.getValue();
	      System.out.println("Frequency of " + Character.toString(key) + "  is:   " + value);
	  }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
601
6
Gpt3D_Clone601_6.java 1 14
Gpt3D_Clone601_6.java 15 39
----------------------------------------

public static void main (String args []) {
    inp = new Scanner (System.in);
    String str = inp.nextLine ();
    List < Character > arrlist = new ArrayList < Character > ();
    for (int i = 0;
    i < str.length (); i ++) {
        arrlist.add (str.charAt (i));
    }
    for (int i = 0;
    i < str.length (); i ++) {
        int freq = Collections.frequency (arrlist, str.charAt (i));
        System.out.println ("Frequency of " + str.charAt (i) + "  is:   " + freq);
    }
}
----------------------------------------

 public static void main (String[] args) { 
	  Scanner scanner = new Scanner(System.in);
	  System.out.print("Enter a string: ");
	  // Reads a line of text
	  String str = scanner.nextLine();
	  Map<Character, Integer> charactersMap = new HashMap<Character, Integer>();
	  for (int i = 0; i < str.length(); i++) {
	      char currentChar = str.charAt(i);
	      if (charactersMap.containsKey(currentChar)) {
		  charactersMap.put(currentChar, charactersMap.get(currentChar) + 1);
	      } else {
		  charactersMap.put(currentChar, 1);
	      }
	  }
	  
	  Set<Character> charactersInString = charactersMap.keySet();
	  for (Character ch : charactersInString) {
	      if (charactersMap.get(ch) == 1)
		  System.out.println("Frequency of " + ch + "  is:   " + charactersMap.get(ch));
	  }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
601
7
Gpt3D_Clone601_7.java 1 14
Gpt3D_Clone601_7.java 15 33
----------------------------------------

public static void main (String args []) {
    inp = new Scanner (System.in);
    String str = inp.nextLine ();
    List < Character > arrlist = new ArrayList < Character > ();
    for (int i = 0;
    i < str.length (); i ++) {
        arrlist.add (str.charAt (i));
    }
    for (int i = 0;
    i < str.length (); i ++) {
        int freq = Collections.frequency (arrlist, str.charAt (i));
        System.out.println ("Frequency of " + str.charAt (i) + "  is:   " + freq);
    }
}
----------------------------------------

public static void main (String args[]) { 
	  Scanner inp = new Scanner(System.in); 
	  String str = inp.nextLine(); 
	  Map<Character, Integer> map = new HashMap<Character, Integer>(); 
	  for (int i = 0; i<str.length(); i++) { 
	      Character ch = str.charAt(i); 
	      if(map.get(ch) == null) { 
		  map.put(ch, 1); 
	      } 
	      else { 
		  map.put(ch, map.get(ch)+1); 
	      }  
	  } 
	  for(Character c : map.keySet()){     
	      System.out.println("Frequency of " + c + "  is:   " + map.get(c));
	  } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
601
8
Gpt3D_Clone601_8.java 1 14
Gpt3D_Clone601_8.java 15 34
----------------------------------------

public static void main (String args []) {
    inp = new Scanner (System.in);
    String str = inp.nextLine ();
    List < Character > arrlist = new ArrayList < Character > ();
    for (int i = 0;
    i < str.length (); i ++) {
        arrlist.add (str.charAt (i));
    }
    for (int i = 0;
    i < str.length (); i ++) {
        int freq = Collections.frequency (arrlist, str.charAt (i));
        System.out.println ("Frequency of " + str.charAt (i) + "  is:   " + freq);
    }
}
----------------------------------------

 public static void main (String args[]){
	  Scanner scanner = new Scanner(System.in);
	  String inputString = scanner.next();
	  char[] character = inputString.toCharArray();
	  Map<Character, Integer> charCountMap = new HashMap<>();
	  for(char c : character){
	    if(charCountMap.containsKey(c)){
		charCountMap.put(c, charCountMap.get(c)+1);
	    } else {
		charCountMap.put(c, 1);
	    }
	  }
	  //Getting the Character and its count frequency
	  for (Map.Entry entry : charCountMap.entrySet()){
	      System.out.println("Character = "+ entry.getKey() + 
		      "    Frequency =" + entry.getValue());
	  }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
601
9
Gpt3D_Clone601_9.java 1 14
Gpt3D_Clone601_9.java 15 28
----------------------------------------

public static void main (String args []) {
    inp = new Scanner (System.in);
    String str = inp.nextLine ();
    List < Character > arrlist = new ArrayList < Character > ();
    for (int i = 0;
    i < str.length (); i ++) {
        arrlist.add (str.charAt (i));
    }
    for (int i = 0;
    i < str.length (); i ++) {
        int freq = Collections.frequency (arrlist, str.charAt (i));
        System.out.println ("Frequency of " + str.charAt (i) + "  is:   " + freq);
    }
}
----------------------------------------

 public static void main (String args []) {
    Scanner inp = new Scanner (System.in);
    String str = inp.nextLine ();
    int[] freq = new int[256];
    for(int i=0; i<str.length(); i++) {
        freq[str.charAt(i)]++;
    }
    for(int i=0; i<256; i++) {
        if(freq[i]!=0)
            System.out.println("Frequency of " + (char)i + "  is:   " + freq[i]);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
602
0
Gpt3D_Clone602_0.java 1 19
Gpt3D_Clone602_0.java 20 49
----------------------------------------

public static void main (String [] args) {
    String string = "aaabbbbbaccc";
    int counter;
    String result = "";
    int i = 0;
    while (i < string.length ()) {
        counter = 1;
        for (int j = i + 1;
        j < string.length (); j ++) {
            System.out.println ("string length =" + string.length ());
            if (string.charAt (i) == string.charAt (j)) {
                counter ++;
            }
        }
        result = result + string.charAt (i) + counter;
        string = string.replaceAll (String.valueOf (string.charAt (i)), "");
    }
    System.out.println ("result is = " + result);
}
----------------------------------------

public static void main (String [] args) {
    String string = "aaabbbbbaccc";
    int i = 0;
    int counter = 1;
    String result = "";
    HashMap<Character, Integer> map = new HashMap<>();
    while (i < string.length()) {
        while (i + 1 < string.length() && string.charAt(i) == string.charAt(i + 1)) {
            counter++;
            i++;
        }
        char currentChar = string.charAt(i);
        if (map.containsKey(currentChar)) {
            counter = map.get(currentChar) + counter;
        }
        map.put(currentChar, counter);
        counter = 1;
        i++;
    }
    for (Map.Entry<Character, Integer> entry : map.entrySet()) {
        Character c = entry.getKey();
        Integer count = entry.getValue();
        result = result + c + count;
    }
    System.out.println ("result is = " + result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
602
1
Gpt3D_Clone602_1.java 1 19
Gpt3D_Clone602_1.java 20 46
----------------------------------------

public static void main (String [] args) {
    String string = "aaabbbbbaccc";
    int counter;
    String result = "";
    int i = 0;
    while (i < string.length ()) {
        counter = 1;
        for (int j = i + 1;
        j < string.length (); j ++) {
            System.out.println ("string length =" + string.length ());
            if (string.charAt (i) == string.charAt (j)) {
                counter ++;
            }
        }
        result = result + string.charAt (i) + counter;
        string = string.replaceAll (String.valueOf (string.charAt (i)), "");
    }
    System.out.println ("result is = " + result);
}
----------------------------------------

public static void main (String [] args) {
    String string = "aaabbbbbaccc";                       
    int counter;
    String result = "";
    int i = 0;
    HashMap<Character, Integer> map = new HashMap<>();
    for(i = 0; i < string.length(); i++) {
        char c = string.charAt(i);
        if(map.containsKey(c)) {
            counter = map.get(c);
            counter++;
            map.put(c, counter);
        } else {
            map.put(c, 1);
        }
    }
    
    for (Map.Entry<Character, Integer> entry : map.entrySet()) {
        Character c = entry.getKey();
        Integer count = entry.getValue();
        result = result + c + count;
    }
    System.out.println ("result is = " + result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
602
2
Gpt3D_Clone602_2.java 1 19
Gpt3D_Clone602_2.java 20 47
----------------------------------------

public static void main (String [] args) {
    String string = "aaabbbbbaccc";
    int counter;
    String result = "";
    int i = 0;
    while (i < string.length ()) {
        counter = 1;
        for (int j = i + 1;
        j < string.length (); j ++) {
            System.out.println ("string length =" + string.length ());
            if (string.charAt (i) == string.charAt (j)) {
                counter ++;
            }
        }
        result = result + string.charAt (i) + counter;
        string = string.replaceAll (String.valueOf (string.charAt (i)), "");
    }
    System.out.println ("result is = " + result);
}
----------------------------------------

public static void main (String [] args) {
	String string = "aaabbbbbaccc";		
	String result = "";			
	char currentChar;	
	int counter = 1;
	
	for (int i = 0; i < string.length(); i++) {
		currentChar = string.charAt(i);
		if (i + 1 < string.length()) {
			if (currentChar == string.charAt(i+1)) {
				counter++;
			}
			else {
				result += (currentChar + "" + counter);
				counter = 1;
			}
		}
		else {
			result += (currentChar + "" + counter);	
		}
	}
	
	System.out.println("result is = " + result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
602
3
Gpt3D_Clone602_3.java 1 19
Gpt3D_Clone602_3.java 20 46
----------------------------------------

public static void main (String [] args) {
    String string = "aaabbbbbaccc";
    int counter;
    String result = "";
    int i = 0;
    while (i < string.length ()) {
        counter = 1;
        for (int j = i + 1;
        j < string.length (); j ++) {
            System.out.println ("string length =" + string.length ());
            if (string.charAt (i) == string.charAt (j)) {
                counter ++;
            }
        }
        result = result + string.charAt (i) + counter;
        string = string.replaceAll (String.valueOf (string.charAt (i)), "");
    }
    System.out.println ("result is = " + result);
}
----------------------------------------

public static void main(String[] args) {
    String string = "aaabbbbbaccc";
    int resultIndex = 0;
    int count = 1;
    char[] resultArray = new char[string.length() * 2];
    for(int i = 1; i < string.length(); i++) {
        if(string.charAt(i) == string.charAt(i - 1)) {
            count++;
        } else {
            resultArray[resultIndex++] = string.charAt(i - 1);
            resultArray[resultIndex++] = (char)(count + '0');
            count = 1;
        }
        if(i == string.length() - 1) {
            resultArray[resultIndex++] = string.charAt(i);
            resultArray[resultIndex++] = (char)(count + '0');
        }
    }
    System.out.println("result is = " + new String(resultArray));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
602
4
Gpt3D_Clone602_4.java 1 19
Gpt3D_Clone602_4.java 20 47
----------------------------------------

public static void main (String [] args) {
    String string = "aaabbbbbaccc";
    int counter;
    String result = "";
    int i = 0;
    while (i < string.length ()) {
        counter = 1;
        for (int j = i + 1;
        j < string.length (); j ++) {
            System.out.println ("string length =" + string.length ());
            if (string.charAt (i) == string.charAt (j)) {
                counter ++;
            }
        }
        result = result + string.charAt (i) + counter;
        string = string.replaceAll (String.valueOf (string.charAt (i)), "");
    }
    System.out.println ("result is = " + result);
}
----------------------------------------

public static void main (String [] args) {
    String string = "aaabbbbbaccc";                   
    String result = "";
    int counter = 1;
    for (int i = 0; i < string.length(); i++) {
        if (i == 0) {
            counter = 1;
        }
        else {
            if (string.charAt(i) == string.charAt(i-1)) {
                counter++;
            }
            else {
                result = result + string.charAt(i - 1) + counter ;
                counter = 1;
            }
        }
    }
    result = result + string.charAt (string.length() - 1) + counter;
    System.out.println("result is = " + result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
602
5
Gpt3D_Clone602_5.java 1 19
Gpt3D_Clone602_5.java 20 51
----------------------------------------

public static void main (String [] args) {
    String string = "aaabbbbbaccc";
    int counter;
    String result = "";
    int i = 0;
    while (i < string.length ()) {
        counter = 1;
        for (int j = i + 1;
        j < string.length (); j ++) {
            System.out.println ("string length =" + string.length ());
            if (string.charAt (i) == string.charAt (j)) {
                counter ++;
            }
        }
        result = result + string.charAt (i) + counter;
        string = string.replaceAll (String.valueOf (string.charAt (i)), "");
    }
    System.out.println ("result is = " + result);
}
----------------------------------------

public static void main (String [] args) {
	String string = "aaabbbbbaccc";		
	StringBuilder result = new StringBuilder();	
	int counter = 1;
	
	for(int i = 0;i < string.length(); i++){
        char letter = string.charAt(i);	
        for(int j = i+1; j < string.length(); j++)
        {
            if(letter == string.charAt(j))
            {
                counter++;
            }
            else
            {
                break;
            }
        }
        result.append(letter);
        result.append(Integer.toString(counter));
        counter = 1;
    }
    System.out.println("result is = " + result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
602
6
Gpt3D_Clone602_6.java 1 19
Gpt3D_Clone602_6.java 20 41
----------------------------------------

public static void main (String [] args) {
    String string = "aaabbbbbaccc";
    int counter;
    String result = "";
    int i = 0;
    while (i < string.length ()) {
        counter = 1;
        for (int j = i + 1;
        j < string.length (); j ++) {
            System.out.println ("string length =" + string.length ());
            if (string.charAt (i) == string.charAt (j)) {
                counter ++;
            }
        }
        result = result + string.charAt (i) + counter;
        string = string.replaceAll (String.valueOf (string.charAt (i)), "");
    }
    System.out.println ("result is = " + result);
}
----------------------------------------

 
public static void main (String [] args) {
    String string = "aaabbbbbaccc";
    int counter = 1;
    String result = "";
    char current;
    
    for(int i = 0; i < string.length(); i++) {
        current = string.charAt(i);
        if(i + 1 < string.length() && current == string.charAt(i + 1)) {
            counter++;
        } else {
            result += current + "" + counter;
            counter = 1;
        }
    }
    System.out.println("result is = " + result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
602
7
Gpt3D_Clone602_7.java 1 19
Gpt3D_Clone602_7.java 20 40
----------------------------------------

public static void main (String [] args) {
    String string = "aaabbbbbaccc";
    int counter;
    String result = "";
    int i = 0;
    while (i < string.length ()) {
        counter = 1;
        for (int j = i + 1;
        j < string.length (); j ++) {
            System.out.println ("string length =" + string.length ());
            if (string.charAt (i) == string.charAt (j)) {
                counter ++;
            }
        }
        result = result + string.charAt (i) + counter;
        string = string.replaceAll (String.valueOf (string.charAt (i)), "");
    }
    System.out.println ("result is = " + result);
}
----------------------------------------

public static void main (String [] args) {
    String string = "aaabbbbbaccc";
    int counter = 1;
    StringBuilder result = new StringBuilder();
    for(int i = 0; i < string.length(); i++) {
        char c = string.charAt(i);
        if(i + 1 < string.length() && c == string.charAt(i + 1)) {
            counter++;
        } else { 
            result.append(c);
            result.append(Integer.toString(counter));
            counter = 1;
        }
    }
    System.out.println("result is = " + result.toString());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
602
8
Gpt3D_Clone602_8.java 1 19
Gpt3D_Clone602_8.java 20 39
----------------------------------------

public static void main (String [] args) {
    String string = "aaabbbbbaccc";
    int counter;
    String result = "";
    int i = 0;
    while (i < string.length ()) {
        counter = 1;
        for (int j = i + 1;
        j < string.length (); j ++) {
            System.out.println ("string length =" + string.length ());
            if (string.charAt (i) == string.charAt (j)) {
                counter ++;
            }
        }
        result = result + string.charAt (i) + counter;
        string = string.replaceAll (String.valueOf (string.charAt (i)), "");
    }
    System.out.println ("result is = " + result);
}
----------------------------------------

public static void main(String[] args) {
	String string = "aaabbbbbaccc";
	int counter = 1;
	String result = "";
	for (int i = 0; i < string.length(); i++) {
		if ((i + 1 < string.length()) && (string.charAt(i) == string.charAt(i + 1))) {
			counter++;
		} else {
			result += string.charAt(i) + "" + counter;
			counter = 1;
		}
	}
	System.out.println("result is = " + result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
602
9
Gpt3D_Clone602_9.java 1 19
Gpt3D_Clone602_9.java 20 38
----------------------------------------

public static void main (String [] args) {
    String string = "aaabbbbbaccc";
    int counter;
    String result = "";
    int i = 0;
    while (i < string.length ()) {
        counter = 1;
        for (int j = i + 1;
        j < string.length (); j ++) {
            System.out.println ("string length =" + string.length ());
            if (string.charAt (i) == string.charAt (j)) {
                counter ++;
            }
        }
        result = result + string.charAt (i) + counter;
        string = string.replaceAll (String.valueOf (string.charAt (i)), "");
    }
    System.out.println ("result is = " + result);
}
----------------------------------------

public static void main (String [] args) {
    String string = "aaabbbbbaccc";
    int counter = 1;
    String result = "";
    for (int i = 0; i < string.length(); i++) {
        if (string.charAt (i) == string.charAt (i + 1)) {
            counter++;
        } else {
            result = result + string.charAt (i) + counter;
            counter = 1;
        }
    }
    System.out.println("result is = " + result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
603
0
Gpt3D_Clone603_0.java 1 10
Gpt3D_Clone603_0.java 11 27
----------------------------------------

public static void main (String [] args) {
    String output = "";
    Multiset < String > wordsMultiset = HashMultiset.create ();
    String [] words = "AAABBBBCC".split ("");
    wordsMultiset.addAll (Arrays.asList (words));
    for (Entry < String > string : wordsMultiset.entrySet ()) {
        if (! string.getElement ().isEmpty ()) output += string.getCount () + "" + string.getElement ();
    }
    System.out.println (output);
}
----------------------------------------

 public static void main(String [] args) { 
    String output = "";
    Map<String, Integer> wordsCountMap = new HashMap<>();
    
    String [] words = "AAABBBBCC".split ("");
    for (String word : words) {
        Integer currentCount = wordsCountMap.get(word);
        
        wordsCountMap.put(word, (currentCount == null) ? 1 : currentCount + 1);
    }
    for (Map.Entry<String, Integer> entry : wordsCountMap.entrySet()) {
        output += entry.getValue() + "" + entry.getKey();
    }
    System.out.println (output);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
603
1
Gpt3D_Clone603_1.java 1 10
Gpt3D_Clone603_1.java 11 27
----------------------------------------

public static void main (String [] args) {
    String output = "";
    Multiset < String > wordsMultiset = HashMultiset.create ();
    String [] words = "AAABBBBCC".split ("");
    wordsMultiset.addAll (Arrays.asList (words));
    for (Entry < String > string : wordsMultiset.entrySet ()) {
        if (! string.getElement ().isEmpty ()) output += string.getCount () + "" + string.getElement ();
    }
    System.out.println (output);
}
----------------------------------------

 public static void main (String [] args) { 
    String output = "";
    Map<String, Integer> wordsCountMap = new TreeMap<>();
    
    String [] words = "AAABBBBCC".split ("");
    for (String word : words) {
        Integer currentCount = wordsCountMap.get(word);
        
        wordsCountMap.put(word, (currentCount == null) ? 1 : currentCount + 1);
    }
    for (Map.Entry<String, Integer> entry : wordsCountMap.entrySet()) {
        output += entry.getValue() + "" + entry.getKey();
    }
    System.out.println (output);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
603
2
Gpt3D_Clone603_2.java 1 10
Gpt3D_Clone603_2.java 11 24
----------------------------------------

public static void main (String [] args) {
    String output = "";
    Multiset < String > wordsMultiset = HashMultiset.create ();
    String [] words = "AAABBBBCC".split ("");
    wordsMultiset.addAll (Arrays.asList (words));
    for (Entry < String > string : wordsMultiset.entrySet ()) {
        if (! string.getElement ().isEmpty ()) output += string.getCount () + "" + string.getElement ();
    }
    System.out.println (output);
}
----------------------------------------

 public static void main (String [] args) {
    String output = "";
    Counter<String> wordsMultiset = new Counter<>();
    String [] words = "AAABBBBCC".split ("");
    for (String word : words) {
        wordsMultiset.increment(word);
    }
    for (Entry<String, Integer> entry : wordsMultiset.entrySet()) {
       output += entry.getValue() + "" + entry.getKey();
    }
    System.out.println (output);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
604
0
Gpt3D_Clone604_0.java 1 14
Gpt3D_Clone604_0.java 15 39
----------------------------------------

public static void main (String args []) {
    inp = new Scanner (System.in);
    String str = inp.nextLine ();
    List < Character > arrlist = new ArrayList < Character > ();
    for (int i = 0;
    i < str.length (); i ++) {
        arrlist.add (str.charAt (i));
    }
    for (int i = 0;
    i < str.length (); i ++) {
        int freq = Collections.frequency (arrlist, str.charAt (i));
        System.out.println ("Frequency of " + str.charAt (i) + "  is:   " + freq);
    }
}
----------------------------------------

 public static void main (String args []) {
    Scanner inp = new Scanner (System.in);
    String str = inp.nextLine ();
    char[] arr = str.toCharArray(); 
    Arrays.sort(arr);
    Set<Character> charSet = new LinkedHashSet<Character>();
    Map<Character, Integer> map = new HashMap<Character, Integer>();
    for (int i = 0; i < arr.length; i++) {
        charSet.add(arr[i]);
    }
    for (Character c: charSet) {
        int freq = 0;
        for (int j = 0; j < arr.length; j++) {
            if (c == arr[j]) freq++;
        }
        map.put(c, freq);
    }
    for(Character c: map.keySet()){
        System.out.println("Frequency of " + c + "  is:   " + map.get(c));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
604
1
Gpt3D_Clone604_1.java 1 14
Gpt3D_Clone604_1.java 15 36
----------------------------------------

public static void main (String args []) {
    inp = new Scanner (System.in);
    String str = inp.nextLine ();
    List < Character > arrlist = new ArrayList < Character > ();
    for (int i = 0;
    i < str.length (); i ++) {
        arrlist.add (str.charAt (i));
    }
    for (int i = 0;
    i < str.length (); i ++) {
        int freq = Collections.frequency (arrlist, str.charAt (i));
        System.out.println ("Frequency of " + str.charAt (i) + "  is:   " + freq);
    }
}
----------------------------------------

 public static void main (String args []) {
    Scanner inp = new Scanner (System.in);
    String str = inp.nextLine ();
    Set < Character > charSet = new HashSet < Character >();
    List < Integer > freqList = new ArrayList < Integer >();
    for (int i = 0; i < str.length(); i++) {
        charSet.add(str.charAt(i));
    }
    for (Character c: charSet) {
        int freq = 0;
        for (int j = 0; j < str.length(); j++) {
            if (c == str.charAt(j)) freq++;
        }
        freqList.add(freq);
    }
    for (int i = 0; i < charSet.size(); i++) {
        System.out.println("Frequency of " + (char)charSet.toArray()[i] + "  is:   " + (int)freqList.toArray()[i]);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
604
2
Gpt3D_Clone604_2.java 1 14
Gpt3D_Clone604_2.java 15 34
----------------------------------------

public static void main (String args []) {
    inp = new Scanner (System.in);
    String str = inp.nextLine ();
    List < Character > arrlist = new ArrayList < Character > ();
    for (int i = 0;
    i < str.length (); i ++) {
        arrlist.add (str.charAt (i));
    }
    for (int i = 0;
    i < str.length (); i ++) {
        int freq = Collections.frequency (arrlist, str.charAt (i));
        System.out.println ("Frequency of " + str.charAt (i) + "  is:   " + freq);
    }
}
----------------------------------------

 public static void main (String args []) {
    Scanner inp = new Scanner (System.in);
    String str = inp.nextLine ();
    char[] arr = str.toCharArray(); 
    Arrays.sort(arr);
    int i = 0;
    while(i < arr.length){
        int freq = 1;
        int j = i; 
        while(j < arr.length - 1 && arr[j] == arr[j+1]){
            j++;
            freq++;
        }
        System.out.println("Frequency of " + arr[i] + "  is:   " + freq);
        i = j+1; 
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
604
3
Gpt3D_Clone604_3.java 1 14
Gpt3D_Clone604_3.java 15 34
----------------------------------------

public static void main (String args []) {
    inp = new Scanner (System.in);
    String str = inp.nextLine ();
    List < Character > arrlist = new ArrayList < Character > ();
    for (int i = 0;
    i < str.length (); i ++) {
        arrlist.add (str.charAt (i));
    }
    for (int i = 0;
    i < str.length (); i ++) {
        int freq = Collections.frequency (arrlist, str.charAt (i));
        System.out.println ("Frequency of " + str.charAt (i) + "  is:   " + freq);
    }
}
----------------------------------------

 public static void main (String args []) {
    Scanner inp = new Scanner (System.in);
    String str = inp.nextLine ();
    char[] arr = str.toCharArray(); 
    Arrays.sort(arr);
    Map<Character, Integer> map = new HashMap<Character, Integer>();
    for (int i = 0; i < arr.length; i++) {
        if(!map.containsKey(arr[i])){
            map.put(arr[i], 1);
        } else {
            map.put(arr[i], map.get(arr[i]) + 1);
        }
    }
    for(Character c: map.keySet()){
        System.out.println("Frequency of " + c + "  is:   " + map.get(c));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
604
4
Gpt3D_Clone604_4.java 1 14
Gpt3D_Clone604_4.java 15 34
----------------------------------------

public static void main (String args []) {
    inp = new Scanner (System.in);
    String str = inp.nextLine ();
    List < Character > arrlist = new ArrayList < Character > ();
    for (int i = 0;
    i < str.length (); i ++) {
        arrlist.add (str.charAt (i));
    }
    for (int i = 0;
    i < str.length (); i ++) {
        int freq = Collections.frequency (arrlist, str.charAt (i));
        System.out.println ("Frequency of " + str.charAt (i) + "  is:   " + freq);
    }
}
----------------------------------------

 public static void main (String args []) {
    Scanner inp = new Scanner (System.in);
    String str = inp.nextLine ();
    char[] arr = str.toCharArray(); 
    Arrays.sort(arr);
    Set<Character> charSet = new LinkedHashSet<Character>();
    for (int i = 0; i < arr.length; i++) {
        charSet.add(arr[i]);
    }
    for (Character c: charSet) {
        int freq = 0;
        for (int j = 0; j < arr.length; j++) {
            if (c == arr[j]) freq++;
        }
        System.out.println("Frequency of " + c + "  is:   " + freq);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
604
5
Gpt3D_Clone604_5.java 1 14
Gpt3D_Clone604_5.java 15 34
----------------------------------------

public static void main (String args []) {
    inp = new Scanner (System.in);
    String str = inp.nextLine ();
    List < Character > arrlist = new ArrayList < Character > ();
    for (int i = 0;
    i < str.length (); i ++) {
        arrlist.add (str.charAt (i));
    }
    for (int i = 0;
    i < str.length (); i ++) {
        int freq = Collections.frequency (arrlist, str.charAt (i));
        System.out.println ("Frequency of " + str.charAt (i) + "  is:   " + freq);
    }
}
----------------------------------------

 public static void main (String args []) {
    Scanner inp = new Scanner (System.in);
    String str = inp.nextLine ();
    char[] arr = str.toCharArray();
    Arrays.sort(arr);
    int freq = 1;
    for (int i = 0; i < str.length() - 1; i++) {
        if (arr[i] == arr[i+1]) {
            freq++;
        } else {
            System.out.println("Frequency of " + arr[i] + "  is:   " + freq);
            freq = 1;
        }
    }
    // To print the count of the last character
    System.out.println("Frequency of " + arr[arr.length - 1] + "  is:   " + freq);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
604
6
Gpt3D_Clone604_6.java 1 14
Gpt3D_Clone604_6.java 15 33
----------------------------------------

public static void main (String args []) {
    inp = new Scanner (System.in);
    String str = inp.nextLine ();
    List < Character > arrlist = new ArrayList < Character > ();
    for (int i = 0;
    i < str.length (); i ++) {
        arrlist.add (str.charAt (i));
    }
    for (int i = 0;
    i < str.length (); i ++) {
        int freq = Collections.frequency (arrlist, str.charAt (i));
        System.out.println ("Frequency of " + str.charAt (i) + "  is:   " + freq);
    }
}
----------------------------------------

 public static void main (String args []) {
    Scanner inp = new Scanner (System.in);
    String str = inp.nextLine ();
    int[] arr = new int[str.length()];
    Set < Character > charSet = new HashSet < Character >();
    for (int i = 0; i < str.length(); i++) {
        charSet.add(str.charAt(i));
    }
    for (Character c: charSet) {
        int freq = 0;
        for (int j = 0; j < str.length(); j++) {
            if (c == str.charAt(j)) freq++;
        }
        System.out.println("Frequency of " + c + "  is:   " + freq);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
604
8
Gpt3D_Clone604_8.java 1 14
Gpt3D_Clone604_8.java 15 32
----------------------------------------

public static void main (String args []) {
    inp = new Scanner (System.in);
    String str = inp.nextLine ();
    List < Character > arrlist = new ArrayList < Character > ();
    for (int i = 0;
    i < str.length (); i ++) {
        arrlist.add (str.charAt (i));
    }
    for (int i = 0;
    i < str.length (); i ++) {
        int freq = Collections.frequency (arrlist, str.charAt (i));
        System.out.println ("Frequency of " + str.charAt (i) + "  is:   " + freq);
    }
}
----------------------------------------

 public static void main (String args []) {
    Scanner inp = new Scanner (System.in);
    String str = inp.nextLine ();
    Map<Character, Integer> map = new HashMap<Character, Integer>();
    for (int i = 0; i < str.length(); i++) {
       if(!map.containsKey(str.charAt(i))){
            map.put(str.charAt(i), 1);
        } else {
            map.put(str.charAt(i), map.get(str.charAt(i)) + 1);
        }
    }
    for(Character c: map.keySet()){
        System.out.println("Frequency of " + c + "  is:   " + map.get(c));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
606
0
Gpt3D_Clone606_0.java 1 10
Gpt3D_Clone606_0.java 11 28
----------------------------------------

public static void main (String [] args) {
    String output = "";
    Multiset < String > wordsMultiset = HashMultiset.create ();
    String [] words = "AAABBBBCC".split ("");
    wordsMultiset.addAll (Arrays.asList (words));
    for (Entry < String > string : wordsMultiset.entrySet ()) {
        if (! string.getElement ().isEmpty ()) output += string.getCount () + "" + string.getElement ();
    }
    System.out.println (output);
}
----------------------------------------

 public static void main (String [] args) 
{
    String output = "";
    HashMultiset <String> wordsMultiset = HashMultiset.create();
    String[] words = "AAABBBBCC".split("");
    for (String word : words) {
        wordsMultiset.add(word);
    }
    Iterator<String> itemsIterator = wordsMultiset.iterator();
    while (itemsIterator.hasNext()) {
        String item = itemsIterator.next();
        if (!item.isEmpty())
            output += wordsMultiset.count(item) + "" + item;
    }
    System.out.println(output);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
606
4
Gpt3D_Clone606_4.java 1 10
Gpt3D_Clone606_4.java 11 27
----------------------------------------

public static void main (String [] args) {
    String output = "";
    Multiset < String > wordsMultiset = HashMultiset.create ();
    String [] words = "AAABBBBCC".split ("");
    wordsMultiset.addAll (Arrays.asList (words));
    for (Entry < String > string : wordsMultiset.entrySet ()) {
        if (! string.getElement ().isEmpty ()) output += string.getCount () + "" + string.getElement ();
    }
    System.out.println (output);
}
----------------------------------------

 public static void main (String [] args) 
{
    String output = "";
    HashMultiset <String> wordsMultiset = HashMultiset.create();
    for (String string : "AAABBBBCC".split("")) {
        wordsMultiset.add(string);
    }
    Iterator<String> itemsIterator = wordsMultiset.iterator();
    while (itemsIterator.hasNext()) {
        String item = itemsIterator.next();
        if (!item.isEmpty())
            output += wordsMultiset.count(item) + "" + item;
    }
    System.out.println(output);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
606
5
Gpt3D_Clone606_5.java 1 10
Gpt3D_Clone606_5.java 11 27
----------------------------------------

public static void main (String [] args) {
    String output = "";
    Multiset < String > wordsMultiset = HashMultiset.create ();
    String [] words = "AAABBBBCC".split ("");
    wordsMultiset.addAll (Arrays.asList (words));
    for (Entry < String > string : wordsMultiset.entrySet ()) {
        if (! string.getElement ().isEmpty ()) output += string.getCount () + "" + string.getElement ();
    }
    System.out.println (output);
}
----------------------------------------

 public static void main (String [] args)
{
    String output = "";
    HashMultiset<String> wordsMultiset = HashMultiset.create();
    for (Character character : "AAABBBBCC".toCharArray()) {
        wordsMultiset.add(character.toString());
    }
    Iterator<String> itemsIterator = wordsMultiset.iterator();
    while (itemsIterator.hasNext()) {
        String item = itemsIterator.next();
        if (!item.isEmpty())
            output += wordsMultiset.count(item) + "" + item;
    }
    System.out.println(output);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
606
7
Gpt3D_Clone606_7.java 1 10
Gpt3D_Clone606_7.java 11 25
----------------------------------------

public static void main (String [] args) {
    String output = "";
    Multiset < String > wordsMultiset = HashMultiset.create ();
    String [] words = "AAABBBBCC".split ("");
    wordsMultiset.addAll (Arrays.asList (words));
    for (Entry < String > string : wordsMultiset.entrySet ()) {
        if (! string.getElement ().isEmpty ()) output += string.getCount () + "" + string.getElement ();
    }
    System.out.println (output);
}
----------------------------------------

 public static void main (String [] args)
{
    String output = "";
    Multiset<String> wordsMultiset = HashMultiset.create();
    for (Character character : "AAABBBBCC".toCharArray()) {
        wordsMultiset.add(character.toString());
    }
    for (String string : wordsMultiset.elementSet()) {
        if (!string.isEmpty())
            output += wordsMultiset.count(string) + "" + string;
    }
    System.out.println(output);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
606
8
Gpt3D_Clone606_8.java 1 10
Gpt3D_Clone606_8.java 11 24
----------------------------------------

public static void main (String [] args) {
    String output = "";
    Multiset < String > wordsMultiset = HashMultiset.create ();
    String [] words = "AAABBBBCC".split ("");
    wordsMultiset.addAll (Arrays.asList (words));
    for (Entry < String > string : wordsMultiset.entrySet ()) {
        if (! string.getElement ().isEmpty ()) output += string.getCount () + "" + string.getElement ();
    }
    System.out.println (output);
}
----------------------------------------

 public static void main(String [] args) {
    String output = "";
    Multiset<String> wordsMultiset = HashMultiset.create();
    for (String string : "AAABBBBCC".split("")) {
        wordsMultiset.add(string);
    }
    for (String string : wordsMultiset.elementSet()) {
        if (!string.isEmpty())
            output += wordsMultiset.count(string) + "" + string;
    }
    System.out.println(output);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
607
0
Gpt3D_Clone607_0.java 1 19
Gpt3D_Clone607_0.java 20 41
----------------------------------------

public static void main (String [] args) {
    String string = "aaabbbbbaccc";
    int counter;
    String result = "";
    int i = 0;
    while (i < string.length ()) {
        counter = 1;
        for (int j = i + 1;
        j < string.length (); j ++) {
            System.out.println ("string length =" + string.length ());
            if (string.charAt (i) == string.charAt (j)) {
                counter ++;
            }
        }
        result = result + string.charAt (i) + counter;
        string = string.replaceAll (String.valueOf (string.charAt (i)), "");
    }
    System.out.println ("result is = " + result);
}
----------------------------------------

 public static void main (String [] args){
    String str = "aaabbbbbaccc";
    StringBuilder result = new StringBuilder();
    int count = 1;
    char lastChar = str.charAt(0);
    for(int i=1; i<str.length(); i++) {
        char currentChar = str.charAt(i);
        if(currentChar == lastChar) {
            count++;
        } else {
            result.append(lastChar);
            result.append(count);
            lastChar = currentChar;
            count = 1;
        }
    }
    result.append(lastChar);
    result.append(count);
    System.out.println("result is ="+ result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
607
1
Gpt3D_Clone607_1.java 1 19
Gpt3D_Clone607_1.java 20 42
----------------------------------------

public static void main (String [] args) {
    String string = "aaabbbbbaccc";
    int counter;
    String result = "";
    int i = 0;
    while (i < string.length ()) {
        counter = 1;
        for (int j = i + 1;
        j < string.length (); j ++) {
            System.out.println ("string length =" + string.length ());
            if (string.charAt (i) == string.charAt (j)) {
                counter ++;
            }
        }
        result = result + string.charAt (i) + counter;
        string = string.replaceAll (String.valueOf (string.charAt (i)), "");
    }
    System.out.println ("result is = " + result);
}
----------------------------------------

 public static void main (String [] args){
    String str = "aaabbbbbaccc";
    char arr[] = str.toCharArray();
    String result = "";
    int counter = 1;
    for (int i= 0; i < str.length(); i++) {
        if (i < arr.length-1){
            if (arr[i] == arr[i+1]){
                counter++;
            }
            else {
                result = result + arr[i] + counter;
                counter = 1;
            }
        }
        else {
            result = result + arr[i] + counter;
        }
    }
    System.out.println("result is = "+result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
607
2
Gpt3D_Clone607_2.java 1 19
Gpt3D_Clone607_2.java 20 39
----------------------------------------

public static void main (String [] args) {
    String string = "aaabbbbbaccc";
    int counter;
    String result = "";
    int i = 0;
    while (i < string.length ()) {
        counter = 1;
        for (int j = i + 1;
        j < string.length (); j ++) {
            System.out.println ("string length =" + string.length ());
            if (string.charAt (i) == string.charAt (j)) {
                counter ++;
            }
        }
        result = result + string.charAt (i) + counter;
        string = string.replaceAll (String.valueOf (string.charAt (i)), "");
    }
    System.out.println ("result is = " + result);
}
----------------------------------------

 public static void main (String [] args){
    String str = "aaabbbbbaccc";
    String result = "";
    int counter;
    char array[] = str.toCharArray();
    for(int i = 0; i < array.length; i++) {
        char ch = array[i];
        counter = 1;
        for(int j = i + 1; j < array.length; j++){
            if(array[j] == ch)
                counter++;
            array[j] = 0;  
        }
        result = result + ch + counter;
        array[i] = 0;
    }
    System.out.println("result is = "+result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
607
4
Gpt3D_Clone607_4.java 1 19
Gpt3D_Clone607_4.java 20 39
----------------------------------------

public static void main (String [] args) {
    String string = "aaabbbbbaccc";
    int counter;
    String result = "";
    int i = 0;
    while (i < string.length ()) {
        counter = 1;
        for (int j = i + 1;
        j < string.length (); j ++) {
            System.out.println ("string length =" + string.length ());
            if (string.charAt (i) == string.charAt (j)) {
                counter ++;
            }
        }
        result = result + string.charAt (i) + counter;
        string = string.replaceAll (String.valueOf (string.charAt (i)), "");
    }
    System.out.println ("result is = " + result);
}
----------------------------------------

 public static void main (String [] args) {
    String str = "aaabbbbbaccc";
    char array[] = str.toCharArray();
    int counter;
    String result = "";
    for (int i=0; i<array.length; i++) {
        counter = 1;
        for (int j=i+1; j<array.length; j++) {
            if (array[i] == array[j]) {
                counter++;
                array[j] = 0;
            }
        }
        result = result + array[i] + counter; 
        array[i] = 0;
    }
    System.out.println("result is = "+result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
607
5
Gpt3D_Clone607_5.java 1 19
Gpt3D_Clone607_5.java 20 38
----------------------------------------

public static void main (String [] args) {
    String string = "aaabbbbbaccc";
    int counter;
    String result = "";
    int i = 0;
    while (i < string.length ()) {
        counter = 1;
        for (int j = i + 1;
        j < string.length (); j ++) {
            System.out.println ("string length =" + string.length ());
            if (string.charAt (i) == string.charAt (j)) {
                counter ++;
            }
        }
        result = result + string.charAt (i) + counter;
        string = string.replaceAll (String.valueOf (string.charAt (i)), "");
    }
    System.out.println ("result is = " + result);
}
----------------------------------------

 public static void main (String [] args) {
    String string = "aaabbbbbaccc";
    char ch;
    int count = 0;
    String result = "";
    for ( int i = 0; i <string.length(); i++) {
        ch = string.charAt(i);
        for (int j = 0; j < string.length(); j++) {
            if (string.charAt(j) == ch) 
                count++;
        }
    string = string.replace(Character.toString(ch),"");
    result = result + ch + count;
    count = 0;
    }
    System.out.println ("result is = " + result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
607
6
Gpt3D_Clone607_6.java 1 19
Gpt3D_Clone607_6.java 20 37
----------------------------------------

public static void main (String [] args) {
    String string = "aaabbbbbaccc";
    int counter;
    String result = "";
    int i = 0;
    while (i < string.length ()) {
        counter = 1;
        for (int j = i + 1;
        j < string.length (); j ++) {
            System.out.println ("string length =" + string.length ());
            if (string.charAt (i) == string.charAt (j)) {
                counter ++;
            }
        }
        result = result + string.charAt (i) + counter;
        string = string.replaceAll (String.valueOf (string.charAt (i)), "");
    }
    System.out.println ("result is = " + result);
}
----------------------------------------

 public static void main (String [] args) {
    String str = "aaabbbbbaccc";
    int counter;
    String result = "";
    while (!str.equals("")) {
        counter = 1;
        char c = str.charAt(0);
        str = str.substring(1);
        while (str.indexOf(c) != -1) {
            counter++;
            str = str.replaceFirst(Character.toString(c), "");
        }
        result = result + c + counter;
    }
    System.out.println("result is = "+result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
607
7
Gpt3D_Clone607_7.java 1 19
Gpt3D_Clone607_7.java 20 38
----------------------------------------

public static void main (String [] args) {
    String string = "aaabbbbbaccc";
    int counter;
    String result = "";
    int i = 0;
    while (i < string.length ()) {
        counter = 1;
        for (int j = i + 1;
        j < string.length (); j ++) {
            System.out.println ("string length =" + string.length ());
            if (string.charAt (i) == string.charAt (j)) {
                counter ++;
            }
        }
        result = result + string.charAt (i) + counter;
        string = string.replaceAll (String.valueOf (string.charAt (i)), "");
    }
    System.out.println ("result is = " + result);
}
----------------------------------------

 public static void main (String [] args){
    String str = "aaabbbbbaccc";
    char array[] = str.toCharArray();
    str = "";
    int counter;
    for(int i=0; i<array.length; i++){
        counter = 1;
        for(int j=i+1; j<array.length; j++){
            if(array[i]==array[j]){
                counter++;
            }
        }
        str = str + array[i] + counter;
        array[i] = 0;
    }
    System.out.println("result is = " + str);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
607
8
Gpt3D_Clone607_8.java 1 19
Gpt3D_Clone607_8.java 20 37
----------------------------------------

public static void main (String [] args) {
    String string = "aaabbbbbaccc";
    int counter;
    String result = "";
    int i = 0;
    while (i < string.length ()) {
        counter = 1;
        for (int j = i + 1;
        j < string.length (); j ++) {
            System.out.println ("string length =" + string.length ());
            if (string.charAt (i) == string.charAt (j)) {
                counter ++;
            }
        }
        result = result + string.charAt (i) + counter;
        string = string.replaceAll (String.valueOf (string.charAt (i)), "");
    }
    System.out.println ("result is = " + result);
}
----------------------------------------

 public static void main (String [] args){
    String str = "aaabbbbbaccc";
    int counter = 1;
    String result = "";
    for (int i = 0; i < str.length(); i++){
        if (i == str.length() - 1) { // Last character
            result = result + str.charAt(i) + counter; 
        } else if (str.charAt(i) != str.charAt(i+1)){ //Character mismatch
            result = result + str.charAt(i) + counter;
            counter = 1; 
        } else { //Character match
            counter++;
        }
    }
    System.out.println("result is = "+result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
607
9
Gpt3D_Clone607_9.java 1 19
Gpt3D_Clone607_9.java 20 37
----------------------------------------

public static void main (String [] args) {
    String string = "aaabbbbbaccc";
    int counter;
    String result = "";
    int i = 0;
    while (i < string.length ()) {
        counter = 1;
        for (int j = i + 1;
        j < string.length (); j ++) {
            System.out.println ("string length =" + string.length ());
            if (string.charAt (i) == string.charAt (j)) {
                counter ++;
            }
        }
        result = result + string.charAt (i) + counter;
        string = string.replaceAll (String.valueOf (string.charAt (i)), "");
    }
    System.out.println ("result is = " + result);
}
----------------------------------------

 public static void main(String [] args){
    String str = "aaabbbbbaccc";
    String result = "";
    int counter;
    while(str.length()!=0){
        counter = 1;
        char c = str.charAt(0);
        str = str.substring(1);
        while(str.contains(String.valueOf(c))){
            counter++;
            str = str.substring(0,str.indexOf(c)) + str.substring(str.indexOf(c)+1);
        }
        result = result + c + counter;   
    }
    System.out.println("result is = "+result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
608
2
Gpt3D_Clone608_2.java 1 10
Gpt3D_Clone608_2.java 11 23
----------------------------------------

public static void main (String [] args) {
    String output = "";
    Multiset < String > wordsMultiset = HashMultiset.create ();
    String [] words = "AAABBBBCC".split ("");
    wordsMultiset.addAll (Arrays.asList (words));
    for (Entry < String > string : wordsMultiset.entrySet ()) {
        if (! string.getElement ().isEmpty ()) output += string.getCount () + "" + string.getElement ();
    }
    System.out.println (output);
}
----------------------------------------

 public static void main(String[] args) {
    String output = "";
    Multiset<String> wordsMultiset = ConcurrentHashMultiset.create();
    wordsMultiset.addAll(Arrays.asList("AAABBBBCC".split("")));
    Iterator<String> iterator = wordsMultiset.iterator();
    while(iterator.hasNext()) {
        String string = iterator.next();
        if (! string.isEmpty()) output += wordsMultiset.count(string) + "" + string;
    }
    System.out.println(output);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
608
7
Gpt3D_Clone608_7.java 1 10
Gpt3D_Clone608_7.java 11 21
----------------------------------------

public static void main (String [] args) {
    String output = "";
    Multiset < String > wordsMultiset = HashMultiset.create ();
    String [] words = "AAABBBBCC".split ("");
    wordsMultiset.addAll (Arrays.asList (words));
    for (Entry < String > string : wordsMultiset.entrySet ()) {
        if (! string.getElement ().isEmpty ()) output += string.getCount () + "" + string.getElement ();
    }
    System.out.println (output);
}
----------------------------------------

 public static void main(String[] args) {
    String output = "";
    Multiset<String> wordsMultiset = TreeMultiset.create();
    wordsMultiset.addAll(Arrays.asList("AAABBBBCC".split("")));
    for(String string : wordsMultiset) {
        if (! string.isEmpty()) output += wordsMultiset.count(string) + "" + string;
    }
    System.out.println(output);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
608
8
Gpt3D_Clone608_8.java 1 10
Gpt3D_Clone608_8.java 11 20
----------------------------------------

public static void main (String [] args) {
    String output = "";
    Multiset < String > wordsMultiset = HashMultiset.create ();
    String [] words = "AAABBBBCC".split ("");
    wordsMultiset.addAll (Arrays.asList (words));
    for (Entry < String > string : wordsMultiset.entrySet ()) {
        if (! string.getElement ().isEmpty ()) output += string.getCount () + "" + string.getElement ();
    }
    System.out.println (output);
}
----------------------------------------

 public static void main(String[] args) { 
    String output = "";
    Multiset<String> wordsMultiset = ImmutableMultiset.copyOf(Arrays.asList("AAABBBBCC".split("")));
    for(String word : wordsMultiset.elementSet()) {
        if (!word.isEmpty()) output += wordsMultiset.count(word) + "" + word;
    }
    System.out.println(output);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
608
9
Gpt3D_Clone608_9.java 1 10
Gpt3D_Clone608_9.java 11 20
----------------------------------------

public static void main (String [] args) {
    String output = "";
    Multiset < String > wordsMultiset = HashMultiset.create ();
    String [] words = "AAABBBBCC".split ("");
    wordsMultiset.addAll (Arrays.asList (words));
    for (Entry < String > string : wordsMultiset.entrySet ()) {
        if (! string.getElement ().isEmpty ()) output += string.getCount () + "" + string.getElement ();
    }
    System.out.println (output);
}
----------------------------------------

 public static void main(String[] args) {
    String output = "";
    Multiset<String> wordsMultiset = EnumMultiset.create(Arrays.asList("AAABBBBCC".split("")));
    for(String string : wordsMultiset.elementSet()) {
        if (! string.isEmpty()) output += wordsMultiset.count(string) + "" + string;
    }
    System.out.println(output);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
611
0
Gpt3D_Clone611_0.java 1 3
Gpt3D_Clone611_0.java 4 9
----------------------------------------

        public void run () {
            new Game ();
}
----------------------------------------

 public void run(){
    Game game = new Game();
    game.start();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
611
1
Gpt3D_Clone611_1.java 1 3
Gpt3D_Clone611_1.java 4 9
----------------------------------------

        public void run () {
            new Game ();
}
----------------------------------------

 public void runGame(){
    Game game = new Game();
    game.initGame();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
611
2
Gpt3D_Clone611_2.java 1 3
Gpt3D_Clone611_2.java 4 9
----------------------------------------

        public void run () {
            new Game ();
}
----------------------------------------

 public void run(){
    Game game = new Game();
    game.begin();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
611
3
Gpt3D_Clone611_3.java 1 3
Gpt3D_Clone611_3.java 4 9
----------------------------------------

        public void run () {
            new Game ();
}
----------------------------------------

 public void run(){
    Game game = new Game();
    game.init();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
611
4
Gpt3D_Clone611_4.java 1 3
Gpt3D_Clone611_4.java 4 9
----------------------------------------

        public void run () {
            new Game ();
}
----------------------------------------

 public void run(){
    Game game = new Game();
    game.execute();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
611
5
Gpt3D_Clone611_5.java 1 3
Gpt3D_Clone611_5.java 4 9
----------------------------------------

        public void run () {
            new Game ();
}
----------------------------------------

 public void run(){
    Game game = new Game();
    game.play();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
611
6
Gpt3D_Clone611_6.java 1 3
Gpt3D_Clone611_6.java 4 9
----------------------------------------

        public void run () {
            new Game ();
}
----------------------------------------

 public void run(){
    Game game = new Game();
    game.initiate();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
611
7
Gpt3D_Clone611_7.java 1 3
Gpt3D_Clone611_7.java 4 9
----------------------------------------

        public void run () {
            new Game ();
}
----------------------------------------

 public void runAll(){
    Game game = new Game();
    game.run();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
611
8
Gpt3D_Clone611_8.java 1 3
Gpt3D_Clone611_8.java 4 9
----------------------------------------

        public void run () {
            new Game ();
}
----------------------------------------

 public void run(){
    Game game = new Game();
    game.activate();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
611
9
Gpt3D_Clone611_9.java 1 3
Gpt3D_Clone611_9.java 4 9
----------------------------------------

        public void run () {
            new Game ();
}
----------------------------------------

 public void run(){
    Game game = new Game();
    game.launch();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
615
0
Gpt3D_Clone615_0.java 1 14
Gpt3D_Clone615_0.java 15 26
----------------------------------------

public void run () {
    synchronized (lock) {
        if (bar.isDisposed () || bar.getShell ().isDisposed ()) {
            return;
        }
        currentSize [0] = bar.getShell ().getSize ().y;
        if (currentSize [0] != orgSize [0]) {
            return;
        } else {
            bar.getShell ().layout (true);
            bar.getShell ().pack (true);
        }
    }
}
----------------------------------------

 public void run () { synchronized (lock) {
        if (!bar.isDisposed () && !bar.getShell ().isDisposed ()) {
            int currSize = bar.getShell ().getSize ().y;
            if (currSize == orgSize [0]) {
                bar.getShell ().layout (true);
                bar.getShell ().pack (true);
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
615
1
Gpt3D_Clone615_1.java 1 14
Gpt3D_Clone615_1.java 15 26
----------------------------------------

public void run () {
    synchronized (lock) {
        if (bar.isDisposed () || bar.getShell ().isDisposed ()) {
            return;
        }
        currentSize [0] = bar.getShell ().getSize ().y;
        if (currentSize [0] != orgSize [0]) {
            return;
        } else {
            bar.getShell ().layout (true);
            bar.getShell ().pack (true);
        }
    }
}
----------------------------------------

 public void run () { synchronized (lock) {
        if (bar.isAvailable() && bar.getShell().isAvailable()) {
            int currSize = bar.getShell().getSize().y;
            if (currSize == orgSize[0]) {
                bar.getShell().arrange(true);
                bar.getShell().balance(true);
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
615
2
Gpt3D_Clone615_2.java 1 14
Gpt3D_Clone615_2.java 15 26
----------------------------------------

public void run () {
    synchronized (lock) {
        if (bar.isDisposed () || bar.getShell ().isDisposed ()) {
            return;
        }
        currentSize [0] = bar.getShell ().getSize ().y;
        if (currentSize [0] != orgSize [0]) {
            return;
        } else {
            bar.getShell ().layout (true);
            bar.getShell ().pack (true);
        }
    }
}
----------------------------------------

 public void run () { synchronized (lock) {
        if (bar.isUntampered() && bar.getShell().isUntampered()) {
            int currSize = bar.getShell().getSize().y;
            if (currSize == orgSize[0]) {
                bar.getShell().reposition(true);
                bar.getShell().reconfigure(true);
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
615
3
Gpt3D_Clone615_3.java 1 14
Gpt3D_Clone615_3.java 15 26
----------------------------------------

public void run () {
    synchronized (lock) {
        if (bar.isDisposed () || bar.getShell ().isDisposed ()) {
            return;
        }
        currentSize [0] = bar.getShell ().getSize ().y;
        if (currentSize [0] != orgSize [0]) {
            return;
        } else {
            bar.getShell ().layout (true);
            bar.getShell ().pack (true);
        }
    }
}
----------------------------------------

 public void run () { synchronized (lock) {
        if( !bar.onDisposal() && !bar.getShell().onDisposal() ) {
            int currSize = bar.getShell().getSize().y;
            if (currSize == orgSize[0]) {
                bar.getShell().relayout(true);
                bar.getShell().resize(true);
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
615
4
Gpt3D_Clone615_4.java 1 14
Gpt3D_Clone615_4.java 15 26
----------------------------------------

public void run () {
    synchronized (lock) {
        if (bar.isDisposed () || bar.getShell ().isDisposed ()) {
            return;
        }
        currentSize [0] = bar.getShell ().getSize ().y;
        if (currentSize [0] != orgSize [0]) {
            return;
        } else {
            bar.getShell ().layout (true);
            bar.getShell ().pack (true);
        }
    }
}
----------------------------------------

 public void run () { synchronized (lock) {
        if (bar.notDisposed() && bar.getShell().notDisposed()) {
            int currSize = bar.getShell().getSize().y;
            if (currSize == orgSize[0]) {
                bar.getShell().refreshLayout(true);
                bar.getShell().refreshSize(true);
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
615
5
Gpt3D_Clone615_5.java 1 14
Gpt3D_Clone615_5.java 15 26
----------------------------------------

public void run () {
    synchronized (lock) {
        if (bar.isDisposed () || bar.getShell ().isDisposed ()) {
            return;
        }
        currentSize [0] = bar.getShell ().getSize ().y;
        if (currentSize [0] != orgSize [0]) {
            return;
        } else {
            bar.getShell ().layout (true);
            bar.getShell ().pack (true);
        }
    }
}
----------------------------------------

 public void run () { synchronized (lock) {
        if (bar.isNotTerminated() && bar.getShell().isNotTerminated()) {
            int currSize = bar.getShell().getSize().y;
            if (currSize == orgSize[0]) {
                bar.getShell().align(true);
                bar.getShell().contain(true);
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
615
6
Gpt3D_Clone615_6.java 1 14
Gpt3D_Clone615_6.java 15 26
----------------------------------------

public void run () {
    synchronized (lock) {
        if (bar.isDisposed () || bar.getShell ().isDisposed ()) {
            return;
        }
        currentSize [0] = bar.getShell ().getSize ().y;
        if (currentSize [0] != orgSize [0]) {
            return;
        } else {
            bar.getShell ().layout (true);
            bar.getShell ().pack (true);
        }
    }
}
----------------------------------------

 public void run () { synchronized (lock) {
        if (bar.isNotDestroyed() && bar.getShell().isNotDestroyed()) {
            int currSize = bar.getShell().getSize().y;
            if (currSize == orgSize[0]) {
                bar.getShell().rearrange(true);
                bar.getShell().rescale(true);
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
615
7
Gpt3D_Clone615_7.java 1 14
Gpt3D_Clone615_7.java 15 25
----------------------------------------

public void run () {
    synchronized (lock) {
        if (bar.isDisposed () || bar.getShell ().isDisposed ()) {
            return;
        }
        currentSize [0] = bar.getShell ().getSize ().y;
        if (currentSize [0] != orgSize [0]) {
            return;
        } else {
            bar.getShell ().layout (true);
            bar.getShell ().pack (true);
        }
    }
}
----------------------------------------

 public void run () { synchronized (lock) {
        if (bar.notClosed() && bar.getShell().notClosed()) {
            if (bar.getShell().getSize().y == orgSize[0]) {
                bar.getShell().redraw(true);
                bar.getShell().reorganize(true);
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
615
8
Gpt3D_Clone615_8.java 1 14
Gpt3D_Clone615_8.java 15 25
----------------------------------------

public void run () {
    synchronized (lock) {
        if (bar.isDisposed () || bar.getShell ().isDisposed ()) {
            return;
        }
        currentSize [0] = bar.getShell ().getSize ().y;
        if (currentSize [0] != orgSize [0]) {
            return;
        } else {
            bar.getShell ().layout (true);
            bar.getShell ().pack (true);
        }
    }
}
----------------------------------------

 public void run () { synchronized (lock) {
        if (bar.isActive() && bar.getShell().isActive()) {
            if (bar.getShell().getSize().y == orgSize[0]) {
                bar.getShell().layout(true);
                bar.getShell().pack(true);
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
615
9
Gpt3D_Clone615_9.java 1 14
Gpt3D_Clone615_9.java 15 25
----------------------------------------

public void run () {
    synchronized (lock) {
        if (bar.isDisposed () || bar.getShell ().isDisposed ()) {
            return;
        }
        currentSize [0] = bar.getShell ().getSize ().y;
        if (currentSize [0] != orgSize [0]) {
            return;
        } else {
            bar.getShell ().layout (true);
            bar.getShell ().pack (true);
        }
    }
}
----------------------------------------

 public void run () {synchronized (lock) {
        if (bar.isGood() && bar.getShell().isGood()) {
            if (bar.getShell().getSize().y == orgSize[0]) {
                bar.getShell().reallocate(true);
                bar.getShell().recalibrate(true);
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
617
0
Gpt3D_Clone617_0.java 1 9
Gpt3D_Clone617_0.java 10 40
----------------------------------------

public static boolean contains (String a, String b) {
    int diff = a.length () - b.length ();
    while (a.length () > 0) {
        b = b.replace (a.substring (0, 1), "");
        a = a.replace (a.substring (0, 1), "");
        if (diff != a.length () - b.length ()) return false;
    }
    return true;
}
----------------------------------------

 public static boolean contains(String a, String b) {
    if (a.length() != b.length())
        return false;
    HashMap<Character, Integer> map = new HashMap<Character,Integer>();
    for(int i = 0; i < a.length(); i++) {
        char ch = a.charAt(i);
        if(map.containsKey(ch)) {
            int count = map.get(ch);
            map.put(ch, count + 1);
        } else {
            map.put(ch, 1);
        }
    }
    for(int i = 0; i < b.length(); i++) {
        char ch = b.charAt(i);
        if(map.containsKey(ch)) {
            int count = map.get(ch);
            map.put(ch, count - 1);
        } else {
            return false;
        }
    }
    for(Integer i : map.values()) {
        if(i != 0) {
            return false;
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
617
1
Gpt3D_Clone617_1.java 1 9
Gpt3D_Clone617_1.java 10 42
----------------------------------------

public static boolean contains (String a, String b) {
    int diff = a.length () - b.length ();
    while (a.length () > 0) {
        b = b.replace (a.substring (0, 1), "");
        a = a.replace (a.substring (0, 1), "");
        if (diff != a.length () - b.length ()) return false;
    }
    return true;
}
----------------------------------------

 public static boolean contains(String a, String b) {
    int aSize = a.length();
    int bSize = b.length();
    if (aSize != bSize){
        return false;
    }
    char[] charA = a.toCharArray();
    char[] charB = b.toCharArray();
    int[] asciiA = new int[256];
    int[] asciiB = new int[256];
    for (int i = 0; i < charA.length; i++){
        int val = charA[i];
        asciiA[val]++;
    }
    for (int i = 0; i < charB.length; i++){
        int val = charB[i];
        asciiB[val]++;
    }
    for (int i = 0; i < charA.length; i++){
        if (asciiA[i] != asciiB[i]){
            return false;
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
617
2
Gpt3D_Clone617_2.java 1 9
Gpt3D_Clone617_2.java 10 37
----------------------------------------

public static boolean contains (String a, String b) {
    int diff = a.length () - b.length ();
    while (a.length () > 0) {
        b = b.replace (a.substring (0, 1), "");
        a = a.replace (a.substring (0, 1), "");
        if (diff != a.length () - b.length ()) return false;
    }
    return true;
}
----------------------------------------

 public static boolean contains(String a, String b) {
    if (a.length() != b.length()) {
        return false;
    }
    char[] aLetters = new char[a.length()];
    char[] bLetters = new char[b.length()];
    // store each character of the strings in their respective char arrays
    for (int i = 0; i < a.length(); i++) {
        aLetters[i] = a.charAt(i);
        bLetters[i] = b.charAt(i);
    }
    Arrays.sort(aLetters);
    Arrays.sort(bLetters);
    // need to check each character in the char array to see if they have the same values
    for (int j = 0; j < a.length(); j++) {
        if (aLetters[j] != bLetters[j]) {
            return false;
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
617
3
Gpt3D_Clone617_3.java 1 9
Gpt3D_Clone617_3.java 10 30
----------------------------------------

public static boolean contains (String a, String b) {
    int diff = a.length () - b.length ();
    while (a.length () > 0) {
        b = b.replace (a.substring (0, 1), "");
        a = a.replace (a.substring (0, 1), "");
        if (diff != a.length () - b.length ()) return false;
    }
    return true;
}
----------------------------------------

 public static boolean contains(String a, String b) {
    if (a.length() != b.length()) {
        return false;
    }
    int[] seen = new int[128];
    for (int i = 0; i < a.length(); i++) {
        seen[a.charAt(i)]++;
    }
    for (int i = 0; i < b.length(); i++) {
        seen[b.charAt(i)]--;
    }
    for (int i : seen) {
        if (i != 0) {
            return false;
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
617
4
Gpt3D_Clone617_4.java 1 9
Gpt3D_Clone617_4.java 10 31
----------------------------------------

public static boolean contains (String a, String b) {
    int diff = a.length () - b.length ();
    while (a.length () > 0) {
        b = b.replace (a.substring (0, 1), "");
        a = a.replace (a.substring (0, 1), "");
        if (diff != a.length () - b.length ()) return false;
    }
    return true;
}
----------------------------------------

 public static boolean contains (String a, String b) { 
    // Store the frequency of characters in the two strings 
    int[] stringA = new int[26]; 
    int[] stringB = new int[26]; 
  
    if (a.length() != b.length()) 
        return false; 
  
    for (int i = 0; i < a.length(); i++) { 
        int charA = a.charAt(i) - 'A'; 
        int charB = b.charAt(i) - 'A'; 
        stringA[charA]++; 
        stringB[charB]++; 
    } 
    for (int i = 0; i < 26; i++) { 
        if (stringA[i] != stringB[i]) 
            return false; 
    } 
    return true; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
617
5
Gpt3D_Clone617_5.java 1 9
Gpt3D_Clone617_5.java 10 29
----------------------------------------

public static boolean contains (String a, String b) {
    int diff = a.length () - b.length ();
    while (a.length () > 0) {
        b = b.replace (a.substring (0, 1), "");
        a = a.replace (a.substring (0, 1), "");
        if (diff != a.length () - b.length ()) return false;
    }
    return true;
}
----------------------------------------

 public static boolean contains(String a, String b) {
    if (a.length() != b.length())
        return false;
 
    int[] aChars = new int[256];
    int[] bChars = new int[256];
 
    for (int i = 0; i < a.length(); i++) {
        aChars[a.charAt(i)]++;
        bChars[b.charAt(i)]++;
    }
 
    for (int i = 0; i < 256; i++)
        if (aChars[i] != bChars[i])
            return false;
 
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
617
6
Gpt3D_Clone617_6.java 1 9
Gpt3D_Clone617_6.java 10 33
----------------------------------------

public static boolean contains (String a, String b) {
    int diff = a.length () - b.length ();
    while (a.length () > 0) {
        b = b.replace (a.substring (0, 1), "");
        a = a.replace (a.substring (0, 1), "");
        if (diff != a.length () - b.length ()) return false;
    }
    return true;
}
----------------------------------------

 public static boolean contains(String a, String b) {
    if (a.length() != b.length()) 
        return false; 
  
    // Store count of all  
    // characters of second String 
    int count[] = new int[256]; 
    int i; 
    for (i = 0; i < b.length(); i++) 
        count[b.charAt(i)]++; 
  
    // Find count of characters of 
    // first String 
    for (i = 0; i < a.length(); i++) { 
        if (count[a.charAt(i)] == 0) 
            return false; 
  
        count[a.charAt(i)]--; 
    } 
  
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
617
7
Gpt3D_Clone617_7.java 1 9
Gpt3D_Clone617_7.java 10 33
----------------------------------------

public static boolean contains (String a, String b) {
    int diff = a.length () - b.length ();
    while (a.length () > 0) {
        b = b.replace (a.substring (0, 1), "");
        a = a.replace (a.substring (0, 1), "");
        if (diff != a.length () - b.length ()) return false;
    }
    return true;
}
----------------------------------------

 public static boolean contains(String a, String b) {
    if (a.length() != b.length()) 
        return false; 
    int [] lettercountsA = new int[26];
    int [] lettercountsB = new int[26];
   
    // each letter occupies an index, representing a count 0 
    
    for (int i = 0; i < a.length(); i++)
        lettercountsA[a.charAt(i) - 'a']++;
  
    for (int i = 0; i < b.length(); i++)
        lettercountsB[b.charAt(i) - 'a']++;
  
    // loop through and check all the letter counts in A and B
    for (int i = 0; i < 26; i++) 
        if (lettercountsA[i] != lettercountsB[i]) 
            return false; 
   
    return true;
    
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
617
8
Gpt3D_Clone617_8.java 1 9
Gpt3D_Clone617_8.java 10 31
----------------------------------------

public static boolean contains (String a, String b) {
    int diff = a.length () - b.length ();
    while (a.length () > 0) {
        b = b.replace (a.substring (0, 1), "");
        a = a.replace (a.substring (0, 1), "");
        if (diff != a.length () - b.length ()) return false;
    }
    return true;
}
----------------------------------------

 public static boolean contains(String a, String b) {
    if (a.length() != b.length())
        return false; 
    int[] char_countsA = new int[128];
    int[] char_countsB = new int[128]; 
  
    for (int i = 0; i < a.length(); i++) 
        char_countsA[a.charAt(i)]++; 
  
    for (int i = 0; i < b.length(); i++) 
        char_countsB[b.charAt(i)]++; 
  
 
    for (int i = 0; i < 128; i++) 
        if (char_countsA[i] != char_countsB[i]) 
            return false; 
  
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
618
0
Gpt3D_Clone618_0.java 1 27
Gpt3D_Clone618_0.java 28 56
----------------------------------------

public static boolean contains (String a, String b) {
    boolean status = true;
    Map < String, Integer > mapA = new HashMap < > ();
    Map < String, Integer > mapB = new HashMap < > ();
    for (char i : a.toCharArray ()) {
        Integer val = mapA.get ("" + i);
        if (val != null) {
            mapA.put ("" + i, val + 1);
        } else {
            mapA.put ("" + i, 1);
        }
    }
    for (char i : b.toCharArray ()) {
        Integer val = mapB.get ("" + i);
        if (val != null) {
            mapB.put ("" + i, val + 1);
        } else {
            mapB.put ("" + i, 1);
        }
    }
    for (Map.Entry < String, Integer > entry : mapA.entrySet ()) {
        if (mapB.get (entry.getKey ()) == null || entry.getValue () > mapB.get (entry.getKey ())) {
            status = false;
        }
    }
    return status;
}
----------------------------------------

 public static boolean contains(String a, String b) {
    int a_length = a.length();
    int b_length = b.length();
    int[][] char_counts = new int[a_length][b_length];
    boolean status = true;
    for (int i = 0; i < a_length; i++) {
        for (int j = 0; j < b_length; j++) {
            if (a.charAt(i) == b.charAt(j)) {
                char_counts[i][j] = 1;
            }
        }
    }
    for (int i = 0; i < a_length; i++) {
        int count = 0;
        for (int j = 0; j < b_length; j++) {
            count += char_counts[i][j];
        }
        if (count == 0) {
            status = false;
            break;
        }
    }
    return status;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
618
1
Gpt3D_Clone618_1.java 1 27
Gpt3D_Clone618_1.java 28 54
----------------------------------------

public static boolean contains (String a, String b) {
    boolean status = true;
    Map < String, Integer > mapA = new HashMap < > ();
    Map < String, Integer > mapB = new HashMap < > ();
    for (char i : a.toCharArray ()) {
        Integer val = mapA.get ("" + i);
        if (val != null) {
            mapA.put ("" + i, val + 1);
        } else {
            mapA.put ("" + i, 1);
        }
    }
    for (char i : b.toCharArray ()) {
        Integer val = mapB.get ("" + i);
        if (val != null) {
            mapB.put ("" + i, val + 1);
        } else {
            mapB.put ("" + i, 1);
        }
    }
    for (Map.Entry < String, Integer > entry : mapA.entrySet ()) {
        if (mapB.get (entry.getKey ()) == null || entry.getValue () > mapB.get (entry.getKey ())) {
            status = false;
        }
    }
    return status;
}
----------------------------------------

 public static boolean contains (String a, String b) {
    Map<Character, Integer> mapA = new HashMap<>();
    Map<Character, Integer> mapB = new HashMap<>();
    for (char c : a.toCharArray()) {
      if (mapA.containsKey(c))
        mapA.put(c, mapA.get(c) + 1);
      else
        mapA.put(c, 1);
    }
    for (char c : b.toCharArray()) {
      if (mapB.containsKey(c))
        mapB.put(c, mapB.get(c) + 1);
      else
        mapB.put(c, 1);
    }
    boolean status = true;
    for (Character key : mapA.keySet()) {
      if (!(mapB.containsKey(key) && (mapA.get(key) <= mapB.get(key))))
        status = false;
    }
    return status;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
618
2
Gpt3D_Clone618_2.java 1 27
Gpt3D_Clone618_2.java 28 50
----------------------------------------

public static boolean contains (String a, String b) {
    boolean status = true;
    Map < String, Integer > mapA = new HashMap < > ();
    Map < String, Integer > mapB = new HashMap < > ();
    for (char i : a.toCharArray ()) {
        Integer val = mapA.get ("" + i);
        if (val != null) {
            mapA.put ("" + i, val + 1);
        } else {
            mapA.put ("" + i, 1);
        }
    }
    for (char i : b.toCharArray ()) {
        Integer val = mapB.get ("" + i);
        if (val != null) {
            mapB.put ("" + i, val + 1);
        } else {
            mapB.put ("" + i, 1);
        }
    }
    for (Map.Entry < String, Integer > entry : mapA.entrySet ()) {
        if (mapB.get (entry.getKey ()) == null || entry.getValue () > mapB.get (entry.getKey ())) {
            status = false;
        }
    }
    return status;
}
----------------------------------------

 public static boolean contains(String a, String b) {
    Map<Character, Integer> mapA = new HashMap<>();
    Map<Character, Integer> mapB = new HashMap<>();
    for(int i = 0; i < a.length(); i++){
        char curr = a.charAt(i);
        mapA.merge(curr, 1, Integer::sum);
    }
    for(int i = 0; i < b.length(); i++){
        char curr = b.charAt(i);
        mapB.merge(curr, 1, Integer::sum);
    }
    boolean status = true;
    for(Character key : mapA.keySet()) {
        if (!(mapB.containsKey(key) && (mapA.get(key) <= mapB.get(key))))
            status = false;
    }
    return status;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
618
3
Gpt3D_Clone618_3.java 1 27
Gpt3D_Clone618_3.java 28 50
----------------------------------------

public static boolean contains (String a, String b) {
    boolean status = true;
    Map < String, Integer > mapA = new HashMap < > ();
    Map < String, Integer > mapB = new HashMap < > ();
    for (char i : a.toCharArray ()) {
        Integer val = mapA.get ("" + i);
        if (val != null) {
            mapA.put ("" + i, val + 1);
        } else {
            mapA.put ("" + i, 1);
        }
    }
    for (char i : b.toCharArray ()) {
        Integer val = mapB.get ("" + i);
        if (val != null) {
            mapB.put ("" + i, val + 1);
        } else {
            mapB.put ("" + i, 1);
        }
    }
    for (Map.Entry < String, Integer > entry : mapA.entrySet ()) {
        if (mapB.get (entry.getKey ()) == null || entry.getValue () > mapB.get (entry.getKey ())) {
            status = false;
        }
    }
    return status;
}
----------------------------------------

 public static boolean contains(String a, String b) {
    int[] counterA = new int[26];
    int[] counterB = new int[26];
    for(int i = 0; i < a.length(); i++){
        char currentChar = Character.toLowerCase(a.charAt(i));
        counterA[currentChar - 'a']++;
    }
    for(int i = 0; i < b.length(); i++){
        char currentChar = Character.toLowerCase(b.charAt(i));
        counterB[currentChar - 'a']++;
    }
    boolean status = true;
    for(int i = 0; i < 26; i++){
        if (counterA[i] > counterB[i])
            status = false;
    }
    return status;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
618
4
Gpt3D_Clone618_4.java 1 27
Gpt3D_Clone618_4.java 28 48
----------------------------------------

public static boolean contains (String a, String b) {
    boolean status = true;
    Map < String, Integer > mapA = new HashMap < > ();
    Map < String, Integer > mapB = new HashMap < > ();
    for (char i : a.toCharArray ()) {
        Integer val = mapA.get ("" + i);
        if (val != null) {
            mapA.put ("" + i, val + 1);
        } else {
            mapA.put ("" + i, 1);
        }
    }
    for (char i : b.toCharArray ()) {
        Integer val = mapB.get ("" + i);
        if (val != null) {
            mapB.put ("" + i, val + 1);
        } else {
            mapB.put ("" + i, 1);
        }
    }
    for (Map.Entry < String, Integer > entry : mapA.entrySet ()) {
        if (mapB.get (entry.getKey ()) == null || entry.getValue () > mapB.get (entry.getKey ())) {
            status = false;
        }
    }
    return status;
}
----------------------------------------

 public static boolean contains (String a, String b) {
    Set<Character> setA = new TreeSet<>();
    Set<Character> setB = new TreeSet<>();
    
    for(int i=0; i<a.length(); i++){
        setA.add(a.charAt(i));
    }
    for(int i=0; i<b.length(); i++){
        setB.add(b.charAt(i));
    }
    boolean status = true;
    for(char c : setA) {
        if (!setB.contains(c))
            status = false;
    }
    return status;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
618
5
Gpt3D_Clone618_5.java 1 27
Gpt3D_Clone618_5.java 28 47
----------------------------------------

public static boolean contains (String a, String b) {
    boolean status = true;
    Map < String, Integer > mapA = new HashMap < > ();
    Map < String, Integer > mapB = new HashMap < > ();
    for (char i : a.toCharArray ()) {
        Integer val = mapA.get ("" + i);
        if (val != null) {
            mapA.put ("" + i, val + 1);
        } else {
            mapA.put ("" + i, 1);
        }
    }
    for (char i : b.toCharArray ()) {
        Integer val = mapB.get ("" + i);
        if (val != null) {
            mapB.put ("" + i, val + 1);
        } else {
            mapB.put ("" + i, 1);
        }
    }
    for (Map.Entry < String, Integer > entry : mapA.entrySet ()) {
        if (mapB.get (entry.getKey ()) == null || entry.getValue () > mapB.get (entry.getKey ())) {
            status = false;
        }
    }
    return status;
}
----------------------------------------

 public static boolean contains(String a, String b) {
    int[] frequencyA = new int[128];
    int[] frequencyB = new int[128];
    for (int i = 0; i < a.length(); i++) {
        frequencyA[a.charAt(i)]++;
    }
    for (int i = 0; i < b.length(); i++) {
        frequencyB[b.charAt(i)]++;
    }
    boolean status = true;
    for (int i = 0; i < 128; i++) {
        if (frequencyA[i] > frequencyB[i])
            status = false;
    }
    return status;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
618
6
Gpt3D_Clone618_6.java 1 27
Gpt3D_Clone618_6.java 28 50
----------------------------------------

public static boolean contains (String a, String b) {
    boolean status = true;
    Map < String, Integer > mapA = new HashMap < > ();
    Map < String, Integer > mapB = new HashMap < > ();
    for (char i : a.toCharArray ()) {
        Integer val = mapA.get ("" + i);
        if (val != null) {
            mapA.put ("" + i, val + 1);
        } else {
            mapA.put ("" + i, 1);
        }
    }
    for (char i : b.toCharArray ()) {
        Integer val = mapB.get ("" + i);
        if (val != null) {
            mapB.put ("" + i, val + 1);
        } else {
            mapB.put ("" + i, 1);
        }
    }
    for (Map.Entry < String, Integer > entry : mapA.entrySet ()) {
        if (mapB.get (entry.getKey ()) == null || entry.getValue () > mapB.get (entry.getKey ())) {
            status = false;
        }
    }
    return status;
}
----------------------------------------

 public static boolean contains (String a, String b) {
    List<Character> listA = new ArrayList<Character>();
    List<Character> listB = new ArrayList<Character>();
	for (char c : a.toCharArray()) {
	  if (!listA.contains(c))
	    listA.add(c);
	}
	for (char c : b.toCharArray()) {
	  if (!listB.contains(c))
	    listB.add(c);
	}
	boolean status = true;
	for (Character c : listA) {
	  if (!listB.contains(c))
	    status = false;
	}
	return status;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
618
7
Gpt3D_Clone618_7.java 1 27
Gpt3D_Clone618_7.java 28 47
----------------------------------------

public static boolean contains (String a, String b) {
    boolean status = true;
    Map < String, Integer > mapA = new HashMap < > ();
    Map < String, Integer > mapB = new HashMap < > ();
    for (char i : a.toCharArray ()) {
        Integer val = mapA.get ("" + i);
        if (val != null) {
            mapA.put ("" + i, val + 1);
        } else {
            mapA.put ("" + i, 1);
        }
    }
    for (char i : b.toCharArray ()) {
        Integer val = mapB.get ("" + i);
        if (val != null) {
            mapB.put ("" + i, val + 1);
        } else {
            mapB.put ("" + i, 1);
        }
    }
    for (Map.Entry < String, Integer > entry : mapA.entrySet ()) {
        if (mapB.get (entry.getKey ()) == null || entry.getValue () > mapB.get (entry.getKey ())) {
            status = false;
        }
    }
    return status;
}
----------------------------------------

 public static boolean contains (String a, String b) {
    int[] charCountA = new int[128];
    int[] charCountB = new int[128];
    
    for(int i=0; i<a.length(); i++) {
        charCountA[a.charAt(i)]++;
    }
    for(int i=0; i<b.length(); i++) {
        charCountB[b.charAt(i)]++;
     }
    boolean status = true;
    for(int i=0; i<128; i++) {
        if (charCountA[i] > charCountB[i])
            status = false;
    }
    return status;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
618
8
Gpt3D_Clone618_8.java 1 27
Gpt3D_Clone618_8.java 28 46
----------------------------------------

public static boolean contains (String a, String b) {
    boolean status = true;
    Map < String, Integer > mapA = new HashMap < > ();
    Map < String, Integer > mapB = new HashMap < > ();
    for (char i : a.toCharArray ()) {
        Integer val = mapA.get ("" + i);
        if (val != null) {
            mapA.put ("" + i, val + 1);
        } else {
            mapA.put ("" + i, 1);
        }
    }
    for (char i : b.toCharArray ()) {
        Integer val = mapB.get ("" + i);
        if (val != null) {
            mapB.put ("" + i, val + 1);
        } else {
            mapB.put ("" + i, 1);
        }
    }
    for (Map.Entry < String, Integer > entry : mapA.entrySet ()) {
        if (mapB.get (entry.getKey ()) == null || entry.getValue () > mapB.get (entry.getKey ())) {
            status = false;
        }
    }
    return status;
}
----------------------------------------

 public static boolean contains(String a, String b) {
    Map<Character, Integer> mapA = new HashMap<>();
    for(int i = 0; i < a.length(); i++) {
        char c = a.charAt(i);
        mapA.putIfAbsent(c, 0);
        mapA.put(c, mapA.get(c) + 1);
    }
    for(int i = 0; i < b.length(); i++) {
        char c = b.charAt(i);
        if(!mapA.containsKey(c))
            return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
618
9
Gpt3D_Clone618_9.java 1 27
Gpt3D_Clone618_9.java 28 48
----------------------------------------

public static boolean contains (String a, String b) {
    boolean status = true;
    Map < String, Integer > mapA = new HashMap < > ();
    Map < String, Integer > mapB = new HashMap < > ();
    for (char i : a.toCharArray ()) {
        Integer val = mapA.get ("" + i);
        if (val != null) {
            mapA.put ("" + i, val + 1);
        } else {
            mapA.put ("" + i, 1);
        }
    }
    for (char i : b.toCharArray ()) {
        Integer val = mapB.get ("" + i);
        if (val != null) {
            mapB.put ("" + i, val + 1);
        } else {
            mapB.put ("" + i, 1);
        }
    }
    for (Map.Entry < String, Integer > entry : mapA.entrySet ()) {
        if (mapB.get (entry.getKey ()) == null || entry.getValue () > mapB.get (entry.getKey ())) {
            status = false;
        }
    }
    return status;
}
----------------------------------------

 public static boolean contains(String a, String b) {
    Map<Character, Integer> mapA = new HashMap<>();
    for(int i=0; i<a.length(); i++) {
        char currChar = a.charAt(i);
        if (!mapA.containsKey(currChar))
            mapA.put(currChar, 1);
        else 
            mapA.put(currChar, mapA.get(currChar)+1);
    }
    for(int i=0; i<b.length(); i++) {
        char currChar = b.charAt(i);
        if (!mapA.containsKey(currChar))
            return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
619
0
Gpt3D_Clone619_0.java 1 27
Gpt3D_Clone619_0.java 28 64
----------------------------------------

public static boolean contains (String a, String b) {
    boolean status = true;
    Map < String, Integer > mapA = new HashMap < > ();
    Map < String, Integer > mapB = new HashMap < > ();
    for (char i : a.toCharArray ()) {
        Integer val = mapA.get ("" + i);
        if (val != null) {
            mapA.put ("" + i, val + 1);
        } else {
            mapA.put ("" + i, 1);
        }
    }
    for (char i : b.toCharArray ()) {
        Integer val = mapB.get ("" + i);
        if (val != null) {
            mapB.put ("" + i, val + 1);
        } else {
            mapB.put ("" + i, 1);
        }
    }
    for (Map.Entry < String, Integer > entry : mapA.entrySet ()) {
        if (mapB.get (entry.getKey ()) == null || entry.getValue () > mapB.get (entry.getKey ())) {
            status = false;
        }
    }
    return status;
}
----------------------------------------

 public static boolean contains(String a, String b) {
    boolean status = true;
    Map<Character, Integer> mapA = new HashMap<>();
    Map<Character, Integer> mapB = new HashMap<>();
    for (int i = 0; i < a.length(); i++) {
        char currentChar = a.charAt(i);
        if (mapA.containsKey(currentChar)) {
            int count = mapA.get(currentChar);
            mapA.put(currentChar, count + 1);
        } else {
            mapA.put(currentChar, 1);
        }
    }
    for (int i = 0; i < b.length(); i++) {
        char currentChar = b.charAt(i);
        if (mapB.containsKey(currentChar)) {
            int count = mapB.get(currentChar);
            mapB.put(currentChar, count + 1);
        } else {
            mapB.put(currentChar, 1);
        }
    }
    for (Character character : mapA.keySet()) {
        int countA = mapA.get(character);
        int countB = mapB.getOrDefault(character, 0);
        if (countB < countA) {
            status = false;
            break;
        }
    }
    return status;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
619
1
Gpt3D_Clone619_1.java 1 27
Gpt3D_Clone619_1.java 28 139
----------------------------------------

public static boolean contains (String a, String b) {
    boolean status = true;
    Map < String, Integer > mapA = new HashMap < > ();
    Map < String, Integer > mapB = new HashMap < > ();
    for (char i : a.toCharArray ()) {
        Integer val = mapA.get ("" + i);
        if (val != null) {
            mapA.put ("" + i, val + 1);
        } else {
            mapA.put ("" + i, 1);
        }
    }
    for (char i : b.toCharArray ()) {
        Integer val = mapB.get ("" + i);
        if (val != null) {
            mapB.put ("" + i, val + 1);
        } else {
            mapB.put ("" + i, 1);
        }
    }
    for (Map.Entry < String, Integer > entry : mapA.entrySet ()) {
        if (mapB.get (entry.getKey ()) == null || entry.getValue () > mapB.get (entry.getKey ())) {
            status = false;
        }
    }
    return status;
}
----------------------------------------

 public static boolean contains(String a, String b) {
        boolean status = true;
        Map<Character, Integer> mapA = new HashMap<>();
        Map<Character, Integer> mapB = new HashMap<>();
        // Add characters of string A to the map
        for (int i = 0; i < a.length(); i++) {
            char currentChar = a.charAt(i);
            if (mapA.containsKey(currentChar)) {
                mapA.put(currentChar, mapA.get(currentChar) + 1);
            } else {
                mapA.put(currentChar, 1);
            }
        }
        // Add characters of string B to the map
        for (int i = 0; i < b.length(); i++) {
            char currentChar = b.charAt(i);
            if (mapB.containsKey(currentChar)) {
                mapB.put(currentChar, mapB.get(currentChar) + 1);
            } else {
                mapB.put(currentChar, 1);
            }
        }
        // Iterate through mapA to check if each character is in mapB
        for (Character character : mapA.keySet()) {
            int countA = mapA.get(character);
            int countB = mapB.get(character);
            // Character is not in mapB or count in A is more than in B
            if (countB < countA) {
                status = false;
            }
        }
        return status;
    }
 public static boolean contains(String a, String b) {
        boolean status = true;
        Map<Character, Integer> mapA = new HashMap<>();
        Map<Character, Integer> mapB = new HashMap<>();
        // Add characters of string A to the map
        for (int i = 0; i < a.length(); i++) {
            char currentChar = a.charAt(i);
            if (mapA.containsKey(currentChar)) {
                int count = mapA.get(currentChar);
                mapA.put(currentChar, count + 1);
            } else {
                mapA.put(currentChar, 1);
            }
        }
        // Add characters of string B to the map
        for (int i = 0; i < b.length(); i++) {
            char currentChar = b.charAt(i);
            if (mapB.containsKey(currentChar)) {
                int count = mapB.get(currentChar);
                mapB.put(currentChar, count + 1);
            } else {
                mapB.put(currentChar, 1);
            }
        }
        // Iterate through mapA to check if each character is in mapB
        for (Character character : mapA.keySet()) {
            int countA = mapA.get(character);
            int countB = mapB.getOrDefault(character, 0);
            // Character is not in mapB or count in A is more than in B
            if (countB < countA) {
                status = false;
            }
        }
        return status;
    }
 public static boolean contains(String a, String b) {
    boolean status = true;
    Map<Character, Integer> mapA = new HashMap<>();
    Map<Character, Integer> mapB = new HashMap<>();
    for (int i = 0; i < a.length(); i++) {
        char currentChar = a.charAt(i);
        if (mapA.containsKey(currentChar)) {
            int count = mapA.get(currentChar);
            mapA.put(currentChar, count + 1);
        } else {
            mapA.put(currentChar, 1);
        }
    }
    for (int i = 0; i < b.length(); i++) {
        char currentChar = b.charAt(i);
        if (mapB.containsKey(currentChar)) {
            int count = mapB.get(currentChar);
            mapB.put(currentChar, count + 1);
        } else {
            mapB.put(currentChar, 1);
        }
    }
    for (Character character : mapA.keySet()) {
        int countA = mapA.get(character);
        int countB = mapB.getOrDefault(character, 0);
        if (countB < countA) {
            status = false;
        }
    }
    return status;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
619
2
Gpt3D_Clone619_2.java 1 27
Gpt3D_Clone619_2.java 28 139
----------------------------------------

public static boolean contains (String a, String b) {
    boolean status = true;
    Map < String, Integer > mapA = new HashMap < > ();
    Map < String, Integer > mapB = new HashMap < > ();
    for (char i : a.toCharArray ()) {
        Integer val = mapA.get ("" + i);
        if (val != null) {
            mapA.put ("" + i, val + 1);
        } else {
            mapA.put ("" + i, 1);
        }
    }
    for (char i : b.toCharArray ()) {
        Integer val = mapB.get ("" + i);
        if (val != null) {
            mapB.put ("" + i, val + 1);
        } else {
            mapB.put ("" + i, 1);
        }
    }
    for (Map.Entry < String, Integer > entry : mapA.entrySet ()) {
        if (mapB.get (entry.getKey ()) == null || entry.getValue () > mapB.get (entry.getKey ())) {
            status = false;
        }
    }
    return status;
}
----------------------------------------

 public static boolean contains(String a, String b) {
        boolean status = true;
        Map<Character, Integer> mapA = new HashMap<>();
        Map<Character, Integer> mapB = new HashMap<>();
        // Add characters of string A to the map
        for (int i = 0; i < a.length(); i++) {
            char currentChar = a.charAt(i);
            if (mapA.containsKey(currentChar)) {
                mapA.put(currentChar, mapA.get(currentChar) + 1);
            } else {
                mapA.put(currentChar, 1);
            }
        }
        // Add characters of string B to the map
        for (int i = 0; i < b.length(); i++) {
            char currentChar = b.charAt(i);
            if (mapB.containsKey(currentChar)) {
                mapB.put(currentChar, mapB.get(currentChar) + 1);
            } else {
                mapB.put(currentChar, 1);
            }
        }
        // Iterate through mapA to check if each character is in mapB
        for (Character character : mapA.keySet()) {
            int countA = mapA.get(character);
            int countB = mapB.get(character);
            // Character is not in mapB or count in A is more than in B
            if (countB < countA) {
                status = false;
            }
        }
        return status;
    }
 public static boolean contains(String a, String b) {
        boolean status = true;
        Map<Character, Integer> mapA = new HashMap<>();
        Map<Character, Integer> mapB = new HashMap<>();
        // Add characters of string A to the map
        for (int i = 0; i < a.length(); i++) {
            char currentChar = a.charAt(i);
            if (mapA.containsKey(currentChar)) {
                int count = mapA.get(currentChar);
                mapA.put(currentChar, count + 1);
            } else {
                mapA.put(currentChar, 1);
            }
        }
        // Add characters of string B to the map
        for (int i = 0; i < b.length(); i++) {
            char currentChar = b.charAt(i);
            if (mapB.containsKey(currentChar)) {
                int count = mapB.get(currentChar);
                mapB.put(currentChar, count + 1);
            } else {
                mapB.put(currentChar, 1);
            }
        }
        // Iterate through mapA to check if each character is in mapB
        for (Character character : mapA.keySet()) {
            int countA = mapA.get(character);
            int countB = mapB.getOrDefault(character, 0);
            // Character is not in mapB or count in A is more than in B
            if (countB < countA) {
                status = false;
            }
        }
        return status;
    }
 public static boolean contains(String a, String b) {
    boolean status = true;
    Map<Character, Integer> mapA = new HashMap<>();
    Map<Character, Integer> mapB = new HashMap<>();
    for (int i = 0; i < a.length(); i++) {
        char currentChar = a.charAt(i);
        if (mapA.containsKey(currentChar)) {
            int count = mapA.get(currentChar);
            mapA.put(currentChar, count + 1);
        } else {
            mapA.put(currentChar, 1);
        }
    }
    for (int i = 0; i < b.length(); i++) {
        char currentChar = b.charAt(i);
        if (mapB.containsKey(currentChar)) {
            int count = mapB.get(currentChar);
            mapB.put(currentChar, count + 1);
        } else {
            mapB.put(currentChar, 1);
        }
    }
    for (Character character : mapA.keySet()) {
        int countA = mapA.get(character);
        int countB = mapB.getOrDefault(character, 0);
        if (countB < countA) {
            status = false;
        }
    }
    return status;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
619
3
Gpt3D_Clone619_3.java 1 27
Gpt3D_Clone619_3.java 28 104
----------------------------------------

public static boolean contains (String a, String b) {
    boolean status = true;
    Map < String, Integer > mapA = new HashMap < > ();
    Map < String, Integer > mapB = new HashMap < > ();
    for (char i : a.toCharArray ()) {
        Integer val = mapA.get ("" + i);
        if (val != null) {
            mapA.put ("" + i, val + 1);
        } else {
            mapA.put ("" + i, 1);
        }
    }
    for (char i : b.toCharArray ()) {
        Integer val = mapB.get ("" + i);
        if (val != null) {
            mapB.put ("" + i, val + 1);
        } else {
            mapB.put ("" + i, 1);
        }
    }
    for (Map.Entry < String, Integer > entry : mapA.entrySet ()) {
        if (mapB.get (entry.getKey ()) == null || entry.getValue () > mapB.get (entry.getKey ())) {
            status = false;
        }
    }
    return status;
}
----------------------------------------

  public static boolean contains (String a, String b) {
    
       Map<Character, Integer> mapA = new HashMap<>();
       Map<Character, Integer> mapB = new HashMap<>();
       boolean contains = true;
       
       //iterate through each character in string a and add to a map 
       for (int i = 0; i < a.length(); i++){
          
           char currentChar = a.charAt(i);
           
           //if the character already exists, increase count 
           if (mapA.containsKey(currentChar)){
               mapA.put (currentChar, mapA.get(currentChar) +1);
           }else{
               mapA.put (currentChar, 1);
           }
       }
       
       //iterate through each character in string b and add to a map 
       for (int i = 0; i < b.length(); i++){
          
           char currentChar = b.charAt(i);
           
           //if character already exists, increase count 
           if (mapB.containsKey(currentChar)){
               mapB.put (currentChar, mapB.get(currentChar) +1);
           }else{
               mapB.put (currentChar, 1);
           }
       }
       
       //iterate through the map of a and check if b contains the character 
       for (Map.Entry<Character, Integer> entry : mapA.entrySet()) {
           
          if (mapB.get(entry.getKey()) == null || entry.getValue() > mapB.get(entry.getKey()) ){
              contains = false;
          }
       }
       return contains;
    }
 public static boolean contains(String a, String b) {
    boolean status = true;
    Map<Character, Integer> mapA = new HashMap<>();
    Map<Character, Integer> mapB = new HashMap<>();
  
    for (int i = 0; i < a.length(); i++){
        char c = a.charAt(i);
        if (mapA.containsKey(c)) {
            mapA.put(c, mapA.get(c) + 1);
        } else {
            mapA.put(c, 1);
        }
    }
    for (int i = 0; i < b.length(); i++){
        char c = b.charAt(i);
        if (mapB.containsKey(c)) {
            mapB.put(c, mapB.get(c) + 1);
        } else {
            mapB.put(c, 1);
        }
    }
    for (Character character : mapA.keySet()) {
        int countA = mapA.get(character);
        int countB = mapB.get(character);
        if (countB < countA) {
            status = false;
            break;
        }
    }
    return status;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
619
4
Gpt3D_Clone619_4.java 1 27
Gpt3D_Clone619_4.java 28 61
----------------------------------------

public static boolean contains (String a, String b) {
    boolean status = true;
    Map < String, Integer > mapA = new HashMap < > ();
    Map < String, Integer > mapB = new HashMap < > ();
    for (char i : a.toCharArray ()) {
        Integer val = mapA.get ("" + i);
        if (val != null) {
            mapA.put ("" + i, val + 1);
        } else {
            mapA.put ("" + i, 1);
        }
    }
    for (char i : b.toCharArray ()) {
        Integer val = mapB.get ("" + i);
        if (val != null) {
            mapB.put ("" + i, val + 1);
        } else {
            mapB.put ("" + i, 1);
        }
    }
    for (Map.Entry < String, Integer > entry : mapA.entrySet ()) {
        if (mapB.get (entry.getKey ()) == null || entry.getValue () > mapB.get (entry.getKey ())) {
            status = false;
        }
    }
    return status;
}
----------------------------------------

 public static boolean contains(String a, String b) {
    boolean status = true;
    Map<Character, Integer> mapA = new HashMap<>();
    Map<Character, Integer> mapB = new HashMap<>();
    
    for (int i = 0; i < a.length(); i++) {
        char currentCharacter = a.charAt(i);
        if (mapA.containsKey(currentCharacter)) {
            mapA.put(currentCharacter, mapA.get(currentCharacter) + 1);
        } else {
            mapA.put(currentCharacter, 1);
        }
    }
    
    for (int i = 0; i < b.length(); i++) {
        char currentCharacter = b.charAt(i);
        if (mapB.containsKey(currentCharacter)) {
            mapB.put(currentCharacter, mapB.get(currentCharacter) + 1);
        } else {
            mapB.put(currentCharacter, 1);
        }
    }
    
    for (Character character : mapA.keySet()) {
        int aValue = mapA.get(character);
        int bValue = mapB.get(character);
        if (bValue < aValue) {
            status = false;
        }
    }
    return status;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
619
5
Gpt3D_Clone619_5.java 1 27
Gpt3D_Clone619_5.java 28 67
----------------------------------------

public static boolean contains (String a, String b) {
    boolean status = true;
    Map < String, Integer > mapA = new HashMap < > ();
    Map < String, Integer > mapB = new HashMap < > ();
    for (char i : a.toCharArray ()) {
        Integer val = mapA.get ("" + i);
        if (val != null) {
            mapA.put ("" + i, val + 1);
        } else {
            mapA.put ("" + i, 1);
        }
    }
    for (char i : b.toCharArray ()) {
        Integer val = mapB.get ("" + i);
        if (val != null) {
            mapB.put ("" + i, val + 1);
        } else {
            mapB.put ("" + i, 1);
        }
    }
    for (Map.Entry < String, Integer > entry : mapA.entrySet ()) {
        if (mapB.get (entry.getKey ()) == null || entry.getValue () > mapB.get (entry.getKey ())) {
            status = false;
        }
    }
    return status;
}
----------------------------------------

 public static boolean contains(String a, String b) {
    boolean status = true;
    Map<Character, Integer> mapA = new HashMap<>();
    Map<Character, Integer> mapB = new HashMap<>();
    // iterate through every character in a and add to mapA
    for (int i = 0; i < a.length(); i++) {
        char currentChar = a.charAt(i);
        
        if (mapA.containsKey(currentChar)) {
            mapA.put(currentChar, mapA.get(currentChar) + 1);
        } else {
            mapA.put(currentChar, 1);
        }
    }
    // iterate through every character in b and add to mapB
    for (int i = 0; i < b.length(); i++) {
        char currentChar = b.charAt(i);
        if (mapB.containsKey(currentChar)) {
            mapB.put(currentChar, mapB.get(currentChar) + 1);
        } else {
            mapB.put(currentChar, 1);
        }
    }
    // iterate through mapA to see if the character exists in mapB
    for (Character character : mapA.keySet()) {
        int countA = mapA.get(character);
        int countB = mapB.getOrDefault(character, 0);
        if (countB < countA) {
            status = false;
        }
    }
    return status;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
619
6
Gpt3D_Clone619_6.java 1 27
Gpt3D_Clone619_6.java 28 139
----------------------------------------

public static boolean contains (String a, String b) {
    boolean status = true;
    Map < String, Integer > mapA = new HashMap < > ();
    Map < String, Integer > mapB = new HashMap < > ();
    for (char i : a.toCharArray ()) {
        Integer val = mapA.get ("" + i);
        if (val != null) {
            mapA.put ("" + i, val + 1);
        } else {
            mapA.put ("" + i, 1);
        }
    }
    for (char i : b.toCharArray ()) {
        Integer val = mapB.get ("" + i);
        if (val != null) {
            mapB.put ("" + i, val + 1);
        } else {
            mapB.put ("" + i, 1);
        }
    }
    for (Map.Entry < String, Integer > entry : mapA.entrySet ()) {
        if (mapB.get (entry.getKey ()) == null || entry.getValue () > mapB.get (entry.getKey ())) {
            status = false;
        }
    }
    return status;
}
----------------------------------------

 public static boolean contains(String a, String b) {
        boolean status = true;
        Map<Character, Integer> mapA = new HashMap<>();
        Map<Character, Integer> mapB = new HashMap<>();
        // Add characters of string A to the map
        for (int i = 0; i < a.length(); i++) {
            char currentChar = a.charAt(i);
            if (mapA.containsKey(currentChar)) {
                mapA.put(currentChar, mapA.get(currentChar) + 1);
            } else {
                mapA.put(currentChar, 1);
            }
        }
        // Add characters of string B to the map
        for (int i = 0; i < b.length(); i++) {
            char currentChar = b.charAt(i);
            if (mapB.containsKey(currentChar)) {
                mapB.put(currentChar, mapB.get(currentChar) + 1);
            } else {
                mapB.put(currentChar, 1);
            }
        }
        // Iterate through mapA to check if each character is in mapB
        for (Character character : mapA.keySet()) {
            int countA = mapA.get(character);
            int countB = mapB.get(character);
            // Character is not in mapB or count in A is more than in B
            if (countB < countA) {
                status = false;
            }
        }
        return status;
    }
 public static boolean contains(String a, String b) {
        boolean status = true;
        Map<Character, Integer> mapA = new HashMap<>();
        Map<Character, Integer> mapB = new HashMap<>();
        // Add characters of string A to the map
        for (int i = 0; i < a.length(); i++) {
            char currentChar = a.charAt(i);
            if (mapA.containsKey(currentChar)) {
                int count = mapA.get(currentChar);
                mapA.put(currentChar, count + 1);
            } else {
                mapA.put(currentChar, 1);
            }
        }
        // Add characters of string B to the map
        for (int i = 0; i < b.length(); i++) {
            char currentChar = b.charAt(i);
            if (mapB.containsKey(currentChar)) {
                int count = mapB.get(currentChar);
                mapB.put(currentChar, count + 1);
            } else {
                mapB.put(currentChar, 1);
            }
        }
        // Iterate through mapA to check if each character is in mapB
        for (Character character : mapA.keySet()) {
            int countA = mapA.get(character);
            int countB = mapB.getOrDefault(character, 0);
            // Character is not in mapB or count in A is more than in B
            if (countB < countA) {
                status = false;
            }
        }
        return status;
    }
 public static boolean contains(String a, String b) {
    boolean status = true;
    Map<Character, Integer> mapA = new HashMap<>();
    Map<Character, Integer> mapB = new HashMap<>();
    for (int i = 0; i < a.length(); i++) {
        char currentChar = a.charAt(i);
        if (mapA.containsKey(currentChar)) {
            int count = mapA.get(currentChar);
            mapA.put(currentChar, count + 1);
        } else {
            mapA.put(currentChar, 1);
        }
    }
    for (int i = 0; i < b.length(); i++) {
        char currentChar = b.charAt(i);
        if (mapB.containsKey(currentChar)) {
            int count = mapB.get(currentChar);
            mapB.put(currentChar, count + 1);
        } else {
            mapB.put(currentChar, 1);
        }
    }
    for (Character character : mapA.keySet()) {
        int countA = mapA.get(character);
        int countB = mapB.getOrDefault(character, 0);
        if (countB < countA) {
            status = false;
        }
    }
    return status;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
619
7
Gpt3D_Clone619_7.java 1 27
Gpt3D_Clone619_7.java 28 56
----------------------------------------

public static boolean contains (String a, String b) {
    boolean status = true;
    Map < String, Integer > mapA = new HashMap < > ();
    Map < String, Integer > mapB = new HashMap < > ();
    for (char i : a.toCharArray ()) {
        Integer val = mapA.get ("" + i);
        if (val != null) {
            mapA.put ("" + i, val + 1);
        } else {
            mapA.put ("" + i, 1);
        }
    }
    for (char i : b.toCharArray ()) {
        Integer val = mapB.get ("" + i);
        if (val != null) {
            mapB.put ("" + i, val + 1);
        } else {
            mapB.put ("" + i, 1);
        }
    }
    for (Map.Entry < String, Integer > entry : mapA.entrySet ()) {
        if (mapB.get (entry.getKey ()) == null || entry.getValue () > mapB.get (entry.getKey ())) {
            status = false;
        }
    }
    return status;
}
----------------------------------------

 public static boolean contains (String a, String b) {
    boolean status = true;
    Map < char, Integer > mapA = new HashMap < > ();
    Map < char, Integer > mapB = new HashMap < > ();
    for (int i = 0; i < a.length(); i++) {
        Integer val = mapA.get (a.charAt(i));
        if (val != null) {
            mapA.put (a.charAt(i), val + 1);
        } else {
            mapA.put (a.charAt(i), 1);
        }
    }
    for (int j = 0; j < b.length(); j++) {
        Integer val = mapB.get (b.charAt(j));
        if (val != null) {
            mapB.put (b.charAt(j), val + 1);
        } else {
            mapB.put (b.charAt(j), 1);
        }
    }
    for (Map.Entry < char, Integer > entry : mapA.entrySet ()) {
        if (mapB.get (entry.getKey ()) == null || entry.getValue () > mapB.get (entry.getKey ())) {
            status = false;
        }
    }
    return status;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
619
8
Gpt3D_Clone619_8.java 1 27
Gpt3D_Clone619_8.java 28 104
----------------------------------------

public static boolean contains (String a, String b) {
    boolean status = true;
    Map < String, Integer > mapA = new HashMap < > ();
    Map < String, Integer > mapB = new HashMap < > ();
    for (char i : a.toCharArray ()) {
        Integer val = mapA.get ("" + i);
        if (val != null) {
            mapA.put ("" + i, val + 1);
        } else {
            mapA.put ("" + i, 1);
        }
    }
    for (char i : b.toCharArray ()) {
        Integer val = mapB.get ("" + i);
        if (val != null) {
            mapB.put ("" + i, val + 1);
        } else {
            mapB.put ("" + i, 1);
        }
    }
    for (Map.Entry < String, Integer > entry : mapA.entrySet ()) {
        if (mapB.get (entry.getKey ()) == null || entry.getValue () > mapB.get (entry.getKey ())) {
            status = false;
        }
    }
    return status;
}
----------------------------------------

  public static boolean contains (String a, String b) {
    
       Map<Character, Integer> mapA = new HashMap<>();
       Map<Character, Integer> mapB = new HashMap<>();
       boolean contains = true;
       
       //iterate through each character in string a and add to a map 
       for (int i = 0; i < a.length(); i++){
          
           char currentChar = a.charAt(i);
           
           //if the character already exists, increase count 
           if (mapA.containsKey(currentChar)){
               mapA.put (currentChar, mapA.get(currentChar) +1);
           }else{
               mapA.put (currentChar, 1);
           }
       }
       
       //iterate through each character in string b and add to a map 
       for (int i = 0; i < b.length(); i++){
          
           char currentChar = b.charAt(i);
           
           //if character already exists, increase count 
           if (mapB.containsKey(currentChar)){
               mapB.put (currentChar, mapB.get(currentChar) +1);
           }else{
               mapB.put (currentChar, 1);
           }
       }
       
       //iterate through the map of a and check if b contains the character 
       for (Map.Entry<Character, Integer> entry : mapA.entrySet()) {
           
          if (mapB.get(entry.getKey()) == null || entry.getValue() > mapB.get(entry.getKey()) ){
              contains = false;
          }
       }
       return contains;
    }
 public static boolean contains(String a, String b) {
    boolean status = true;
    Map<Character, Integer> mapA = new HashMap<>();
    Map<Character, Integer> mapB = new HashMap<>();
  
    for (int i = 0; i < a.length(); i++){
        char c = a.charAt(i);
        if (mapA.containsKey(c)) {
            mapA.put(c, mapA.get(c) + 1);
        } else {
            mapA.put(c, 1);
        }
    }
    for (int i = 0; i < b.length(); i++){
        char c = b.charAt(i);
        if (mapB.containsKey(c)) {
            mapB.put(c, mapB.get(c) + 1);
        } else {
            mapB.put(c, 1);
        }
    }
    for (Character character : mapA.keySet()) {
        int countA = mapA.get(character);
        int countB = mapB.get(character);
        if (countB < countA) {
            status = false;
            break;
        }
    }
    return status;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
619
9
Gpt3D_Clone619_9.java 1 27
Gpt3D_Clone619_9.java 28 59
----------------------------------------

public static boolean contains (String a, String b) {
    boolean status = true;
    Map < String, Integer > mapA = new HashMap < > ();
    Map < String, Integer > mapB = new HashMap < > ();
    for (char i : a.toCharArray ()) {
        Integer val = mapA.get ("" + i);
        if (val != null) {
            mapA.put ("" + i, val + 1);
        } else {
            mapA.put ("" + i, 1);
        }
    }
    for (char i : b.toCharArray ()) {
        Integer val = mapB.get ("" + i);
        if (val != null) {
            mapB.put ("" + i, val + 1);
        } else {
            mapB.put ("" + i, 1);
        }
    }
    for (Map.Entry < String, Integer > entry : mapA.entrySet ()) {
        if (mapB.get (entry.getKey ()) == null || entry.getValue () > mapB.get (entry.getKey ())) {
            status = false;
        }
    }
    return status;
}
----------------------------------------

 public static boolean contains(String a, String b) {
    //store characters and occurrences in map
    Map<Character, Integer> charCountA = new HashMap<>();
    for(char c : a.toCharArray()){
        if (charCountA.containsKey(c)) {
            charCountA.put(c, charCountA.get(c) + 1);
        } else {
            charCountA.put(c, 1);
        }
    }
    Map<Character, Integer> charCountB = new HashMap<>();
    for(char c : b.toCharArray()){
        if (charCountB.containsKey(c)) {
            charCountB.put(c, charCountB.get(c) + 1);
        } else {
            charCountB.put(c, 1);
        }
    }
    //check if each character of a is in b 
    boolean status = true;
    for(char c : charCountA.keySet()){
        if (!charCountB.containsKey(c) || charCountB.get(c) < charCountA.get(c)) {
            status = false;
            break;
        }
    }
    return status;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
623
0
Gpt3D_Clone623_0.java 1 17
Gpt3D_Clone623_0.java 18 56
----------------------------------------

public static int [] removeDuplicates (int [] arr) {
    int end = arr.length;
    for (int i = 0;
    i < end; i ++) {
        for (int j = i + 1;
        j < end; j ++) {
            if (arr [i] == arr [j]) {
                arr [j] = arr [end - 1];
                end --;
                j --;
            }
        }
    }
    int [] whitelist = new int [end];
    System.arraycopy (arr, 0, whitelist, 0, end);
    return whitelist;
}
----------------------------------------

 public static int [] removeDuplicates (int [] arr) 
{ 
    // Result 
    int[] whitelist = new int[arr.length]; 
  
    int count = 0;
    int end = arr.length;
    for (int i = 0; i < end; i++)  
    { 
        boolean found = false; 
        for (int j = 0; j < count; j++) 
        { 
            if (whitelist[j] == arr[i]) 
            { 
                found = true; 
            } 
        } 
  
        // If not found in previously visited elements 
        if (!found) 
        { 
            // Add to whitelist array 
            whitelist[count] = arr[i]; 
            count++; 
        } 
    } 
    // Copy elements from whitelist array 
    int[] tx = new int[count]; 
    for (int i = 0; i < count; i++) 
    { 
        tx[i] = whitelist[i]; 
    } 
    // Return new array 
    return tx; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
623
1
Gpt3D_Clone623_1.java 1 17
Gpt3D_Clone623_1.java 18 59
----------------------------------------

public static int [] removeDuplicates (int [] arr) {
    int end = arr.length;
    for (int i = 0;
    i < end; i ++) {
        for (int j = i + 1;
        j < end; j ++) {
            if (arr [i] == arr [j]) {
                arr [j] = arr [end - 1];
                end --;
                j --;
            }
        }
    }
    int [] whitelist = new int [end];
    System.arraycopy (arr, 0, whitelist, 0, end);
    return whitelist;
}
----------------------------------------

 public static int[] removeDuplicates(int[] arr) 
{ 
    // Result 
    int[] whitelist = new int[arr.length]; 
  
    // Index for whitelist array 
    int k = 0; 
  
    // Iterate over given array 
    for (int i = 0; i < arr.length; i++) 
    { 
        // Exclude previously found elements 
        boolean found = false; 
        for (int j = 0; j < i; j++) 
        { 
            if (arr[i] == arr[j]) 
            { 
                found = true; 
            } 
        } 
  
        // If not found in previously visited elements 
        if (!found) 
        { 
            // Add to whitelist array 
            whitelist[k] = arr[i]; 
            k++; 
        } 
    } 
  
    // Copy elements from whitelist array 
    int[] tx = new int[k]; 
    for (int i = 0; i < k; i++) 
    { 
        tx[i] = whitelist[i]; 
    } 
  
    // Return new array 
    return tx; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
623
2
Gpt3D_Clone623_2.java 1 17
Gpt3D_Clone623_2.java 18 39
----------------------------------------

public static int [] removeDuplicates (int [] arr) {
    int end = arr.length;
    for (int i = 0;
    i < end; i ++) {
        for (int j = i + 1;
        j < end; j ++) {
            if (arr [i] == arr [j]) {
                arr [j] = arr [end - 1];
                end --;
                j --;
            }
        }
    }
    int [] whitelist = new int [end];
    System.arraycopy (arr, 0, whitelist, 0, end);
    return whitelist;
}
----------------------------------------

 public static int [] removeDuplicates (int [] arr) {
    int end = arr.length;
    int [] whitelist = new int [end];
    int count = 0;
    for (int i = 0;i<end;i++) {
        int mark = 0;
        for (int j = 0; j < i; j++) {
            if (arr[i] == arr[j]) {
                ++mark;
            }
        }
        if (mark == 0) {
            whitelist[count] = arr[i];
            count++;
        } 
    }
    int [] tx = new int [count];
    System.arraycopy(whitelist, 0, tx, 0, count); 
    return tx;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
623
3
Gpt3D_Clone623_3.java 1 17
Gpt3D_Clone623_3.java 18 58
----------------------------------------

public static int [] removeDuplicates (int [] arr) {
    int end = arr.length;
    for (int i = 0;
    i < end; i ++) {
        for (int j = i + 1;
        j < end; j ++) {
            if (arr [i] == arr [j]) {
                arr [j] = arr [end - 1];
                end --;
                j --;
            }
        }
    }
    int [] whitelist = new int [end];
    System.arraycopy (arr, 0, whitelist, 0, end);
    return whitelist;
}
----------------------------------------

 public static int [] removeDuplicates (int [] arr) 
{ 
    // Result 
    int[] whitelist = new int[arr.length]; 
  
    // Index for whitelist array 
    int k = 0; 
  
    // Iterate over given array 
    for (int i = 0; i < arr.length; i++) 
    { 
        boolean found = false; 
        for (int j = i+1; j < arr.length; j++) 
        { 
            if (arr[i] == arr[j]) 
            { 
                found = true; 
            } 
        } 
  
        // If not found in previously visited elements 
        if (!found) 
        { 
            // Add to whitelist array 
            whitelist[k] = arr[i]; 
            k++; 
        } 
    } 
  
    // Copy elements from whitelist array 
    int[] tx = new int[k]; 
    for (int i = 0; i < k; i++) 
    { 
        tx[i] = whitelist[i]; 
    } 
  
    // Return new array 
    return tx; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
623
4
Gpt3D_Clone623_4.java 1 17
Gpt3D_Clone623_4.java 18 62
----------------------------------------

public static int [] removeDuplicates (int [] arr) {
    int end = arr.length;
    for (int i = 0;
    i < end; i ++) {
        for (int j = i + 1;
        j < end; j ++) {
            if (arr [i] == arr [j]) {
                arr [j] = arr [end - 1];
                end --;
                j --;
            }
        }
    }
    int [] whitelist = new int [end];
    System.arraycopy (arr, 0, whitelist, 0, end);
    return whitelist;
}
----------------------------------------

 public static int [] removeDuplicates (int [] arr) 
{  
    // Sorting the array 
    Arrays.sort(arr); 
  
    // Result 
    int[] whitelist = new int[arr.length]; 
  
    // Index for whitelist array 
    int k = 0; 
  
    for (int i = 0; i < arr.length-1; i++) 
    { 
        // If current element  
        // is not equal to next 
        // element then store that 
        // current element 
        if (arr[i] != arr[i+1]) { 
            whitelist[k] = arr[i]; 
  
            // Increment count of valid 
            // elements 
            k++; 
        }    
    } 
  
    // Store the last element  
    // as whether it is unique 
    // or repeated, it hasn't 
    // stored previously 
    whitelist[k] = arr[arr.length-1]; 
    k++; 
  
    // Copy elements from whitelist array 
    int[] tx = new int[k]; 
    for (int i = 0; i < k; i++) 
    { 
        tx[i] = whitelist[i]; 
    } 
  
    // Return new array 
    return tx; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
623
5
Gpt3D_Clone623_5.java 1 17
Gpt3D_Clone623_5.java 18 35
----------------------------------------

public static int [] removeDuplicates (int [] arr) {
    int end = arr.length;
    for (int i = 0;
    i < end; i ++) {
        for (int j = i + 1;
        j < end; j ++) {
            if (arr [i] == arr [j]) {
                arr [j] = arr [end - 1];
                end --;
                j --;
            }
        }
    }
    int [] whitelist = new int [end];
    System.arraycopy (arr, 0, whitelist, 0, end);
    return whitelist;
}
----------------------------------------

 public static int[] removeDuplicates(int[] arr) {
    int uniqueCount = 0;
    int[] uniqueArr = new int[arr.length];
    outer : for(int i=0;i<arr.length;i++){
        for(int j=0;j<uniqueCount;j++){
            if(uniqueArr[j]==arr[i]){
                continue outer;
            }     
        }
        uniqueArr[uniqueCount] = arr[i];
        uniqueCount++;
    }
    int[] whitelist = new int[uniqueCount];
    System.arraycopy(uniqueArr, 0, whitelist, 0, uniqueCount);
    return whitelist;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
623
6
Gpt3D_Clone623_6.java 1 17
Gpt3D_Clone623_6.java 18 34
----------------------------------------

public static int [] removeDuplicates (int [] arr) {
    int end = arr.length;
    for (int i = 0;
    i < end; i ++) {
        for (int j = i + 1;
        j < end; j ++) {
            if (arr [i] == arr [j]) {
                arr [j] = arr [end - 1];
                end --;
                j --;
            }
        }
    }
    int [] whitelist = new int [end];
    System.arraycopy (arr, 0, whitelist, 0, end);
    return whitelist;
}
----------------------------------------

 public static int [] removeDuplicates (int [] arr) {
    int end = arr.length;
    Set<Integer> sett = new LinkedHashSet<>();
    for (int i = 0; i < end; i++) {
        sett.add(arr[i]);
    }
    int[] whitelist = new int[arr.length - sett.size()];
    int j = 0;
    for (Integer x : sett) {
        whitelist[j] = x; 
        j++;
    }
    return whitelist;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
623
7
Gpt3D_Clone623_7.java 1 17
Gpt3D_Clone623_7.java 18 33
----------------------------------------

public static int [] removeDuplicates (int [] arr) {
    int end = arr.length;
    for (int i = 0;
    i < end; i ++) {
        for (int j = i + 1;
        j < end; j ++) {
            if (arr [i] == arr [j]) {
                arr [j] = arr [end - 1];
                end --;
                j --;
            }
        }
    }
    int [] whitelist = new int [end];
    System.arraycopy (arr, 0, whitelist, 0, end);
    return whitelist;
}
----------------------------------------

 public static int [] removeDuplicates (int [] arr) {
    int end = arr.length;
    HashSet<Integer> set = new HashSet<>(end);
    for (int i = 0; i < end; i++) {
        set.add(arr[i]);
    }
    int[] whitelist = new int[set.size()];
    int j = 0;
    for (Integer x : set) {
        whitelist[j] = x; 
        j++;
    }
    return whitelist;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
623
8
Gpt3D_Clone623_8.java 1 17
Gpt3D_Clone623_8.java 18 38
----------------------------------------

public static int [] removeDuplicates (int [] arr) {
    int end = arr.length;
    for (int i = 0;
    i < end; i ++) {
        for (int j = i + 1;
        j < end; j ++) {
            if (arr [i] == arr [j]) {
                arr [j] = arr [end - 1];
                end --;
                j --;
            }
        }
    }
    int [] whitelist = new int [end];
    System.arraycopy (arr, 0, whitelist, 0, end);
    return whitelist;
}
----------------------------------------

 public static int [] removeDuplicates (int [] arr) 
{ 
    int end = arr.length; 
    int [] whitelist = new int [end]; 
       
    int i = 0, j = 0;
    HashSet<Integer> set = new HashSet<>(); 
       
    while ( i < end ) 
    {
        if ( set.add(arr[i]) ) 
        { 
            whitelist[j++] = arr[i]; 
        } 
        i++;
    } 
       
    return whitelist; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
624
0
Gpt3D_Clone624_0.java 1 20
Gpt3D_Clone624_0.java 21 40
----------------------------------------

public static int [] removeDuplicates (int [] arr) {
    boolean [] set = new boolean [1001];
    int totalItems = 0;
    for (int i = 0;
    i < arr.length; ++ i) {
        if (! set [arr [i]]) {
            set [arr [i]] = true;
            totalItems ++;
        }
    }
    int [] ret = new int [totalItems];
    int c = 0;
    for (int i = 0;
    i < set.length; ++ i) {
        if (set [i]) {
            ret [c ++] = i;
        }
    }
    return ret;
}
----------------------------------------

 public static int[] removeDuplicates(int[] arr) {
    int[] noDupes = new int[arr.length]; 
    int currIdx = 0;
    boolean notUnique;
    for (int j = 0; j < arr.length; j++) {
        notUnique = false;
        for (int i = 0; i < currIdx; i++) {
            if (arr[j] == noDupes[i]) {
                notUnique = true;
                break;
            }
        }
        if (!notUnique) {
            noDupes[currIdx++] = arr[j];
        }
    }
    return Arrays.copyOf(noDupes, currIdx);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
624
1
Gpt3D_Clone624_1.java 1 20
Gpt3D_Clone624_1.java 21 39
----------------------------------------

public static int [] removeDuplicates (int [] arr) {
    boolean [] set = new boolean [1001];
    int totalItems = 0;
    for (int i = 0;
    i < arr.length; ++ i) {
        if (! set [arr [i]]) {
            set [arr [i]] = true;
            totalItems ++;
        }
    }
    int [] ret = new int [totalItems];
    int c = 0;
    for (int i = 0;
    i < set.length; ++ i) {
        if (set [i]) {
            ret [c ++] = i;
        }
    }
    return ret;
}
----------------------------------------

 public static int[] removeDuplicates(int[] arr) {
    int[] uniqueElements = new int[arr.length];
    int uniqueIndex = 0;
    for (int i = 0; i < arr.length; i++) {
        boolean isUnique = true;
        for (int j = 0; j < uniqueIndex; j++) {
            if (arr[i] == uniqueElements[j]) {
                isUnique = false;
                break;
            }
        }
        if (isUnique) {
            uniqueElements[uniqueIndex++] = arr[i];
        }
    }
    return Arrays.copyOfRange(uniqueElements, 0, uniqueIndex);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
624
2
Gpt3D_Clone624_2.java 1 20
Gpt3D_Clone624_2.java 21 36
----------------------------------------

public static int [] removeDuplicates (int [] arr) {
    boolean [] set = new boolean [1001];
    int totalItems = 0;
    for (int i = 0;
    i < arr.length; ++ i) {
        if (! set [arr [i]]) {
            set [arr [i]] = true;
            totalItems ++;
        }
    }
    int [] ret = new int [totalItems];
    int c = 0;
    for (int i = 0;
    i < set.length; ++ i) {
        if (set [i]) {
            ret [c ++] = i;
        }
    }
    return ret;
}
----------------------------------------

 public static int[] removeDuplicates(int[] arr) {
    HashSet<Integer> set = new HashSet<>();
    for (int i : arr) 
        set.add(i);
   
    int[] result = new int[set.size()];
    int ptr = 0;
    Iterator<Integer> iterator = set.iterator();
    while (iterator.hasNext() && ptr < result.length) {
        result[ptr] = iterator.next();
        ptr++;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
624
3
Gpt3D_Clone624_3.java 1 20
Gpt3D_Clone624_3.java 21 36
----------------------------------------

public static int [] removeDuplicates (int [] arr) {
    boolean [] set = new boolean [1001];
    int totalItems = 0;
    for (int i = 0;
    i < arr.length; ++ i) {
        if (! set [arr [i]]) {
            set [arr [i]] = true;
            totalItems ++;
        }
    }
    int [] ret = new int [totalItems];
    int c = 0;
    for (int i = 0;
    i < set.length; ++ i) {
        if (set [i]) {
            ret [c ++] = i;
        }
    }
    return ret;
}
----------------------------------------

 public static int[] removeDuplicates(int[] arr) {
    int j = 0;
    int i = 1;
    if (arr.length == 0)
        return arr;
    while (i < arr.length) {
        if (arr[i] == arr[j])
            i++;
        else
            arr[++j] = arr[i++];
    }
    int[] newArr = Arrays.copyOf(arr, j + 1);
    return newArr;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
624
4
Gpt3D_Clone624_4.java 1 20
Gpt3D_Clone624_4.java 21 35
----------------------------------------

public static int [] removeDuplicates (int [] arr) {
    boolean [] set = new boolean [1001];
    int totalItems = 0;
    for (int i = 0;
    i < arr.length; ++ i) {
        if (! set [arr [i]]) {
            set [arr [i]] = true;
            totalItems ++;
        }
    }
    int [] ret = new int [totalItems];
    int c = 0;
    for (int i = 0;
    i < set.length; ++ i) {
        if (set [i]) {
            ret [c ++] = i;
        }
    }
    return ret;
}
----------------------------------------

 public static int[] removeDuplicates(int[] arr) {
    Set<Integer> set = new HashSet<Integer>();
    for (int i : arr) {
        set.add(i);
    }
 
    int[] ret = new int[set.size()];
    Iterator<Integer> iterator = set.iterator();
    for (int i = 0; iterator.hasNext(); i++) {
        ret[i] = iterator.next();
    }
    return ret;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
624
5
Gpt3D_Clone624_5.java 1 20
Gpt3D_Clone624_5.java 21 35
----------------------------------------

public static int [] removeDuplicates (int [] arr) {
    boolean [] set = new boolean [1001];
    int totalItems = 0;
    for (int i = 0;
    i < arr.length; ++ i) {
        if (! set [arr [i]]) {
            set [arr [i]] = true;
            totalItems ++;
        }
    }
    int [] ret = new int [totalItems];
    int c = 0;
    for (int i = 0;
    i < set.length; ++ i) {
        if (set [i]) {
            ret [c ++] = i;
        }
    }
    return ret;
}
----------------------------------------

 public static int[] removeDuplicates(int[] arr) {
    Set<Integer> set = new TreeSet<Integer>();
    for (int i : arr) {
        set.add(i);
    }
 
    int[] res = new int[set.size()];
    Iterator<Integer> iterator = set.iterator();
    for (int i = 0; iterator.hasNext(); i++) {
        res[i] = iterator.next();
    }
    return res;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
624
6
Gpt3D_Clone624_6.java 1 20
Gpt3D_Clone624_6.java 21 35
----------------------------------------

public static int [] removeDuplicates (int [] arr) {
    boolean [] set = new boolean [1001];
    int totalItems = 0;
    for (int i = 0;
    i < arr.length; ++ i) {
        if (! set [arr [i]]) {
            set [arr [i]] = true;
            totalItems ++;
        }
    }
    int [] ret = new int [totalItems];
    int c = 0;
    for (int i = 0;
    i < set.length; ++ i) {
        if (set [i]) {
            ret [c ++] = i;
        }
    }
    return ret;
}
----------------------------------------

 public static int[] removeDuplicates(int[] arr) {
    List<Integer> res = new ArrayList<>();
    for (int n : arr) {
        if (!res.contains(n)) {
            res.add(n);
        }
    }
    int[] resArray = new int[res.size()];
    for (int i = 0; i < res.size(); i++) {
        resArray[i] = res.get(i);
    }
    return resArray;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
624
7
Gpt3D_Clone624_7.java 1 20
Gpt3D_Clone624_7.java 21 33
----------------------------------------

public static int [] removeDuplicates (int [] arr) {
    boolean [] set = new boolean [1001];
    int totalItems = 0;
    for (int i = 0;
    i < arr.length; ++ i) {
        if (! set [arr [i]]) {
            set [arr [i]] = true;
            totalItems ++;
        }
    }
    int [] ret = new int [totalItems];
    int c = 0;
    for (int i = 0;
    i < set.length; ++ i) {
        if (set [i]) {
            ret [c ++] = i;
        }
    }
    return ret;
}
----------------------------------------

 public static int[] removeDuplicates(int[] arr) {
    int[] ret = new int[arr.length];
    int count = 0;
    for (int i = 0; i < arr.length; i++) {
        if (Arrays.stream(ret).noneMatch(e -> e == arr[i])) {
            ret[count] = arr[i];
            count++;
        }
    }
    return Arrays.copyOfRange(ret, 0, count);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
624
8
Gpt3D_Clone624_8.java 1 20
Gpt3D_Clone624_8.java 21 26
----------------------------------------

public static int [] removeDuplicates (int [] arr) {
    boolean [] set = new boolean [1001];
    int totalItems = 0;
    for (int i = 0;
    i < arr.length; ++ i) {
        if (! set [arr [i]]) {
            set [arr [i]] = true;
            totalItems ++;
        }
    }
    int [] ret = new int [totalItems];
    int c = 0;
    for (int i = 0;
    i < set.length; ++ i) {
        if (set [i]) {
            ret [c ++] = i;
        }
    }
    return ret;
}
----------------------------------------

 public static int[] removeDuplicates(int[] arr) {
    int[] tempArr = Arrays.stream(arr).distinct().toArray();
    return Arrays.copyOf(tempArr, tempArr.length);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
625
0
Gpt3D_Clone625_0.java 1 20
Gpt3D_Clone625_0.java 21 37
----------------------------------------

public static int [] removeDuplicates (int [] arr) {
    boolean [] set = new boolean [1001];
    int totalItems = 0;
    for (int i = 0;
    i < arr.length; ++ i) {
        if (! set [arr [i]]) {
            set [arr [i]] = true;
            totalItems ++;
        }
    }
    int [] ret = new int [totalItems];
    int c = 0;
    for (int i = 0;
    i < set.length; ++ i) {
        if (set [i]) {
            ret [c ++] = i;
        }
    }
    return ret;
}
----------------------------------------

 public static int[] removeDuplicates(int[] arr) {
    LinkedHashSet<Integer> set = new LinkedHashSet<>();  
    for(int i:arr){
        if(!set.contains(i)){
            set.add(i); 
        }
    }
    int[] ret = new int[set.size()];
    Iterator<Integer> iter = set.iterator(); 
    int c = 0;
    while (iter.hasNext()) {
        ret[c++] = iter.next();
    }
    return ret;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
625
1
Gpt3D_Clone625_1.java 1 20
Gpt3D_Clone625_1.java 21 35
----------------------------------------

public static int [] removeDuplicates (int [] arr) {
    boolean [] set = new boolean [1001];
    int totalItems = 0;
    for (int i = 0;
    i < arr.length; ++ i) {
        if (! set [arr [i]]) {
            set [arr [i]] = true;
            totalItems ++;
        }
    }
    int [] ret = new int [totalItems];
    int c = 0;
    for (int i = 0;
    i < set.length; ++ i) {
        if (set [i]) {
            ret [c ++] = i;
        }
    }
    return ret;
}
----------------------------------------

 public static int[] removeDuplicates(int[] arr) {
    LinkedHashSet<Integer> set = new LinkedHashSet<>();
    int[] ret = new int[arr.length];
    int c = 0;
    for (int i = 0; i < arr.length; i++) {
        if(!set.contains(arr[i])) { 
            set.add(arr[i]); 
            ret[c] = arr[i];
            c++;
        }
    }
    return Arrays.copyOf(ret, c);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
625
2
Gpt3D_Clone625_2.java 1 20
Gpt3D_Clone625_2.java 21 35
----------------------------------------

public static int [] removeDuplicates (int [] arr) {
    boolean [] set = new boolean [1001];
    int totalItems = 0;
    for (int i = 0;
    i < arr.length; ++ i) {
        if (! set [arr [i]]) {
            set [arr [i]] = true;
            totalItems ++;
        }
    }
    int [] ret = new int [totalItems];
    int c = 0;
    for (int i = 0;
    i < set.length; ++ i) {
        if (set [i]) {
            ret [c ++] = i;
        }
    }
    return ret;
}
----------------------------------------

 public static int[] removeDuplicates(int[] arr) {
    int c = 0; 
    int[] ret = new int[arr.length];
    Set<Integer> seen = new HashSet<Integer>();
    for (int i = 0; i < arr.length; i++) {
        if(!seen.contains(arr[i])) {
            ret[c] = arr[i];
            c++;
            seen.add(arr[i]);
        }
    }
    return Arrays.copyOf(ret, c);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
625
3
Gpt3D_Clone625_3.java 1 20
Gpt3D_Clone625_3.java 21 35
----------------------------------------

public static int [] removeDuplicates (int [] arr) {
    boolean [] set = new boolean [1001];
    int totalItems = 0;
    for (int i = 0;
    i < arr.length; ++ i) {
        if (! set [arr [i]]) {
            set [arr [i]] = true;
            totalItems ++;
        }
    }
    int [] ret = new int [totalItems];
    int c = 0;
    for (int i = 0;
    i < set.length; ++ i) {
        if (set [i]) {
            ret [c ++] = i;
        }
    }
    return ret;
}
----------------------------------------

 public static int[] removeDuplicates(int[] arr) {
    Set<Integer> set = new HashSet<Integer>();
    for (int i: arr) {
        set.add(i);
    }
    int[] ret = new int[set.size()];
    Iterator<Integer> iter = set.iterator(); 
    int c = 0;
    while (iter.hasNext()) {
        ret[c++] = iter.next();
    }
    return ret;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
625
4
Gpt3D_Clone625_4.java 1 20
Gpt3D_Clone625_4.java 21 34
----------------------------------------

public static int [] removeDuplicates (int [] arr) {
    boolean [] set = new boolean [1001];
    int totalItems = 0;
    for (int i = 0;
    i < arr.length; ++ i) {
        if (! set [arr [i]]) {
            set [arr [i]] = true;
            totalItems ++;
        }
    }
    int [] ret = new int [totalItems];
    int c = 0;
    for (int i = 0;
    i < set.length; ++ i) {
        if (set [i]) {
            ret [c ++] = i;
        }
    }
    return ret;
}
----------------------------------------

 public static int[] removeDuplicates(int[] arr) {
    boolean[] checked = new boolean[arr.length];
    int c = 0;
    for (int i = 0; i < arr.length; i++) {
        if (!checked[i]) {
            checked[i] = true;
            arr[c] = arr[i];
            c++;
        }
    }
    return Arrays.copyOf(arr, c);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
625
5
Gpt3D_Clone625_5.java 1 20
Gpt3D_Clone625_5.java 21 34
----------------------------------------

public static int [] removeDuplicates (int [] arr) {
    boolean [] set = new boolean [1001];
    int totalItems = 0;
    for (int i = 0;
    i < arr.length; ++ i) {
        if (! set [arr [i]]) {
            set [arr [i]] = true;
            totalItems ++;
        }
    }
    int [] ret = new int [totalItems];
    int c = 0;
    for (int i = 0;
    i < set.length; ++ i) {
        if (set [i]) {
            ret [c ++] = i;
        }
    }
    return ret;
}
----------------------------------------

 public static int[] removeDuplicates(int[] arr) {
    Set<Integer> repeated = new HashSet<>(arr.length);
    int[] ret = new int[arr.length];
    int c = 0; 
    for (int i = 0; i < arr.length; i++) {
        if(!repeated.contains(arr[i])) {
            repeated.add(arr[i]);
            ret[c++] = arr[i];
        }
    }
    return Arrays.copyOf(ret, c);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
625
6
Gpt3D_Clone625_6.java 1 20
Gpt3D_Clone625_6.java 21 34
----------------------------------------

public static int [] removeDuplicates (int [] arr) {
    boolean [] set = new boolean [1001];
    int totalItems = 0;
    for (int i = 0;
    i < arr.length; ++ i) {
        if (! set [arr [i]]) {
            set [arr [i]] = true;
            totalItems ++;
        }
    }
    int [] ret = new int [totalItems];
    int c = 0;
    for (int i = 0;
    i < set.length; ++ i) {
        if (set [i]) {
            ret [c ++] = i;
        }
    }
    return ret;
}
----------------------------------------

 public static int[] removeDuplicates(int[] arr) {
    Set<Integer> seen = new HashSet<>();
    int[] ret = new int[arr.length];
    int c= 0;
    for (int value : arr) {
        if (!seen.contains(value)) {
            ret[c++] = value;
            seen.add(value);
        }
    }
    return Arrays.copyOf(ret, c);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
625
7
Gpt3D_Clone625_7.java 1 20
Gpt3D_Clone625_7.java 21 34
----------------------------------------

public static int [] removeDuplicates (int [] arr) {
    boolean [] set = new boolean [1001];
    int totalItems = 0;
    for (int i = 0;
    i < arr.length; ++ i) {
        if (! set [arr [i]]) {
            set [arr [i]] = true;
            totalItems ++;
        }
    }
    int [] ret = new int [totalItems];
    int c = 0;
    for (int i = 0;
    i < set.length; ++ i) {
        if (set [i]) {
            ret [c ++] = i;
        }
    }
    return ret;
}
----------------------------------------

 public static int[] removeDuplicates(int[] arr) {
    Arrays.sort(arr); 
    int c = 0;
    int[] ret = new int[arr.length];
    for (int i = 0; i < arr.length; i++) {
        if (i == 0 || arr[i] > arr[i - 1]) {
            ret[c] = arr[i];
            c++;
        }
    }
    return Arrays.copyOf(ret, c);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
625
8
Gpt3D_Clone625_8.java 1 20
Gpt3D_Clone625_8.java 21 33
----------------------------------------

public static int [] removeDuplicates (int [] arr) {
    boolean [] set = new boolean [1001];
    int totalItems = 0;
    for (int i = 0;
    i < arr.length; ++ i) {
        if (! set [arr [i]]) {
            set [arr [i]] = true;
            totalItems ++;
        }
    }
    int [] ret = new int [totalItems];
    int c = 0;
    for (int i = 0;
    i < set.length; ++ i) {
        if (set [i]) {
            ret [c ++] = i;
        }
    }
    return ret;
}
----------------------------------------

 public static int[] removeDuplicates(int[] arr) {
    int[] ret = new int[arr.length];
    int j = 0;
    for (int i:arr) {
        if (!contains(ret, i)) {
            ret[j] = i;
            j++;
        }
    }
    return Arrays.copyOf(ret, j);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
625
9
Gpt3D_Clone625_9.java 1 20
Gpt3D_Clone625_9.java 21 33
----------------------------------------

public static int [] removeDuplicates (int [] arr) {
    boolean [] set = new boolean [1001];
    int totalItems = 0;
    for (int i = 0;
    i < arr.length; ++ i) {
        if (! set [arr [i]]) {
            set [arr [i]] = true;
            totalItems ++;
        }
    }
    int [] ret = new int [totalItems];
    int c = 0;
    for (int i = 0;
    i < set.length; ++ i) {
        if (set [i]) {
            ret [c ++] = i;
        }
    }
    return ret;
}
----------------------------------------

 public static int[] removeDuplicates(int[] arr) {
   Set<Integer> seen = new HashSet<>();
   int[] ret = new int[arr.length];
   int c = 0;
   for (int i = 0; i < arr.length; i++) {
      if (seen.add(arr[i])) {
          ret[c++] = arr[i];
      }
   }
   return Arrays.copyOf(ret, c);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
626
4
Gpt3D_Clone626_4.java 1 36
Gpt3D_Clone626_4.java 37 58
----------------------------------------

public static void main (String args []) throws Exception {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.println ("enter size of the array");
    int l = Integer.parseInt (br.readLine ());
    int [] a = new int [l];
    for (int i = 0;
    i < l; i ++) {
        System.out.println ("enter a element");
        int el = Integer.parseInt (br.readLine ());
        a [i] = el;
    }
    for (int i = 0;
    i < l; i ++) {
        for (int j = 0;
        j < l - 1; j ++) {
            if (a [j] > a [j + 1]) {
                int temp = a [j];
                a [j] = a [j + 1];
                a [j + 1] = temp;
            }
        }
    }
    int b = 0;
    a [b] = a [0];
    for (int i = 1;
    i < l; i ++) {
        if (a [b] != a [i]) {
            b ++;
            a [b] = a [i];
        }
    }
    for (int i = 0;
    i <= b; i ++) {
        System.out.println (a [i]);
    }
}
----------------------------------------

 public static void main (String args []) throws Exception {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.println ("enter size of the array");
    int l = Integer.parseInt (br.readLine ());
    int [] a = new int [l];
    for (int i = 0;
    i < l; i ++) {
        System.out.println ("enter a element");
        int el = Integer.parseInt (br.readLine ());
        a [i] = el;
    }
    Arrays.sort(a);
    HashSet<Integer> set = new HashSet<>();  
    for (int i : a) {
        set.add(i); 
    }
    for (int i : set) {
        System.out.println(i);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
626
5
Gpt3D_Clone626_5.java 1 36
Gpt3D_Clone626_5.java 37 56
----------------------------------------

public static void main (String args []) throws Exception {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.println ("enter size of the array");
    int l = Integer.parseInt (br.readLine ());
    int [] a = new int [l];
    for (int i = 0;
    i < l; i ++) {
        System.out.println ("enter a element");
        int el = Integer.parseInt (br.readLine ());
        a [i] = el;
    }
    for (int i = 0;
    i < l; i ++) {
        for (int j = 0;
        j < l - 1; j ++) {
            if (a [j] > a [j + 1]) {
                int temp = a [j];
                a [j] = a [j + 1];
                a [j + 1] = temp;
            }
        }
    }
    int b = 0;
    a [b] = a [0];
    for (int i = 1;
    i < l; i ++) {
        if (a [b] != a [i]) {
            b ++;
            a [b] = a [i];
        }
    }
    for (int i = 0;
    i <= b; i ++) {
        System.out.println (a [i]);
    }
}
----------------------------------------

 public static void main (String args []) throws Exception {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.println ("enter size of the array");
    int l = Integer.parseInt (br.readLine ());
    int [] a = new int [l];
    for (int i = 0;
    i < l; i ++) {
        System.out.println ("enter a element");
        int el = Integer.parseInt (br.readLine ());
        a [i] = el;
    }
    Arrays.sort(a);
    List<Integer> list = new ArrayList<>(Arrays.asList(a));
    List < Integer > distinctList = list.stream().distinct().collect(Collectors.toList());
    for (Integer el : distinctList) {
        System.out.println(el);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
626
6
Gpt3D_Clone626_6.java 1 36
Gpt3D_Clone626_6.java 37 58
----------------------------------------

public static void main (String args []) throws Exception {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.println ("enter size of the array");
    int l = Integer.parseInt (br.readLine ());
    int [] a = new int [l];
    for (int i = 0;
    i < l; i ++) {
        System.out.println ("enter a element");
        int el = Integer.parseInt (br.readLine ());
        a [i] = el;
    }
    for (int i = 0;
    i < l; i ++) {
        for (int j = 0;
        j < l - 1; j ++) {
            if (a [j] > a [j + 1]) {
                int temp = a [j];
                a [j] = a [j + 1];
                a [j + 1] = temp;
            }
        }
    }
    int b = 0;
    a [b] = a [0];
    for (int i = 1;
    i < l; i ++) {
        if (a [b] != a [i]) {
            b ++;
            a [b] = a [i];
        }
    }
    for (int i = 0;
    i <= b; i ++) {
        System.out.println (a [i]);
    }
}
----------------------------------------

 public static void main (String args []) throws Exception {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.println ("enter size of the array");
    int l = Integer.parseInt (br.readLine ());
    int [] a = new int [l];
    for (int i = 0;
    i < l; i ++) {
        System.out.println ("enter a element");
        int el = Integer.parseInt (br.readLine ());
        a [i] = el;
    }
    Arrays.sort(a); 
    LinkedList<Integer> linkedList = new LinkedList<>(); 
    for (Integer el : a) {
        linkedList.add(el); 
    }
    
    while (!linkedList.isEmpty())
        System.out.println(linkedList.remove());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
626
7
Gpt3D_Clone626_7.java 1 36
Gpt3D_Clone626_7.java 37 58
----------------------------------------

public static void main (String args []) throws Exception {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.println ("enter size of the array");
    int l = Integer.parseInt (br.readLine ());
    int [] a = new int [l];
    for (int i = 0;
    i < l; i ++) {
        System.out.println ("enter a element");
        int el = Integer.parseInt (br.readLine ());
        a [i] = el;
    }
    for (int i = 0;
    i < l; i ++) {
        for (int j = 0;
        j < l - 1; j ++) {
            if (a [j] > a [j + 1]) {
                int temp = a [j];
                a [j] = a [j + 1];
                a [j + 1] = temp;
            }
        }
    }
    int b = 0;
    a [b] = a [0];
    for (int i = 1;
    i < l; i ++) {
        if (a [b] != a [i]) {
            b ++;
            a [b] = a [i];
        }
    }
    for (int i = 0;
    i <= b; i ++) {
        System.out.println (a [i]);
    }
}
----------------------------------------

 public static void main (String args []) throws Exception {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.println ("enter size of the array");
    int l = Integer.parseInt (br.readLine ());
    int [] a = new int [l];
    for (int i = 0;
    i < l; i ++) {
        System.out.println ("enter a element");
        int el = Integer.parseInt (br.readLine ());
        a [i] = el;
    }
    Arrays.sort(a);
    Queue<Integer> queue = new LinkedList<>(); 
        for (Integer el : a) {
            queue.add(el);
        }
    
        while (!queue.isEmpty())
            System.out.println(queue.poll());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
626
8
Gpt3D_Clone626_8.java 1 36
Gpt3D_Clone626_8.java 37 57
----------------------------------------

public static void main (String args []) throws Exception {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.println ("enter size of the array");
    int l = Integer.parseInt (br.readLine ());
    int [] a = new int [l];
    for (int i = 0;
    i < l; i ++) {
        System.out.println ("enter a element");
        int el = Integer.parseInt (br.readLine ());
        a [i] = el;
    }
    for (int i = 0;
    i < l; i ++) {
        for (int j = 0;
        j < l - 1; j ++) {
            if (a [j] > a [j + 1]) {
                int temp = a [j];
                a [j] = a [j + 1];
                a [j + 1] = temp;
            }
        }
    }
    int b = 0;
    a [b] = a [0];
    for (int i = 1;
    i < l; i ++) {
        if (a [b] != a [i]) {
            b ++;
            a [b] = a [i];
        }
    }
    for (int i = 0;
    i <= b; i ++) {
        System.out.println (a [i]);
    }
}
----------------------------------------

 public static void main (String args []) throws Exception {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.println ("enter size of the array");
    int l = Integer.parseInt (br.readLine ());
    int [] a = new int [l];
    for (int i = 0;
    i < l; i ++) {
        System.out.println ("enter a element");
        int el = Integer.parseInt (br.readLine ());
        a [i] = el;
    }
    TreeSet<Integer> treeSet = new TreeSet<>(); 
    for (Integer el : a) {
        treeSet.add(el); 
    }
    for (Integer output : treeSet) {
        System.out.println(output);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
626
9
Gpt3D_Clone626_9.java 1 36
Gpt3D_Clone626_9.java 37 58
----------------------------------------

public static void main (String args []) throws Exception {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.println ("enter size of the array");
    int l = Integer.parseInt (br.readLine ());
    int [] a = new int [l];
    for (int i = 0;
    i < l; i ++) {
        System.out.println ("enter a element");
        int el = Integer.parseInt (br.readLine ());
        a [i] = el;
    }
    for (int i = 0;
    i < l; i ++) {
        for (int j = 0;
        j < l - 1; j ++) {
            if (a [j] > a [j + 1]) {
                int temp = a [j];
                a [j] = a [j + 1];
                a [j + 1] = temp;
            }
        }
    }
    int b = 0;
    a [b] = a [0];
    for (int i = 1;
    i < l; i ++) {
        if (a [b] != a [i]) {
            b ++;
            a [b] = a [i];
        }
    }
    for (int i = 0;
    i <= b; i ++) {
        System.out.println (a [i]);
    }
}
----------------------------------------

 public static void main (String args []) throws Exception {
    BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
    System.out.println ("enter size of the array");
    int l = Integer.parseInt (br.readLine ());
    int [] a = new int [l];
    for (int i = 0;
    i < l; i ++) {
        System.out.println ("enter a element");
        int el = Integer.parseInt (br.readLine ());
        a [i] = el;
    }
    Stack<Integer> stack = new Stack<>(); 
    for (int el : a) {
        stack.add(el);
    }
    
    while (!stack.isEmpty())
        System.out.println(stack.pop());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
627
0
Gpt3D_Clone627_0.java 1 29
Gpt3D_Clone627_0.java 30 71
----------------------------------------

public static Comparable [] findCommonElements (Comparable [] [] collections) {
    Comparable [] arr1 = collections [0];
    Comparable [] arr2 = collections [1];
    Comparable [] arr3 = collections [2];
    if (arr1.length < arr2.length && arr1.length < arr3.length || arr2.length <= arr3.length) {
        hashArray = arr1;
        queryArray = ArrayUtils.addAll (arr2, arr3);
    } else if (arr2.length < arr1.length && arr2.length < arr3.length || arr1.length <= arr3.length) {
        hashArray = arr2;
        queryArray = ArrayUtils.addAll (arr1, arr3);
    } else if (arr3.length < arr1.length && arr3.length < arr2.length || arr1.length <= arr2.length) {
        hashArray = arr3;
        queryArray = ArrayUtils.addAll (arr1, arr2);
    }
    HashSet < Comparable > intersectionSet = new HashSet < > ();
    HashSet < Comparable > arrayToHash = new HashSet < > ();
    for (Comparable element : hashArray) {
        arrayToHash.add (element);
    }
    for (Comparable element : queryArray) {
        if (element != null) {
            comparisons ++;
        }
        if (arrayToHash.contains (element)) {
            intersectionSet.add (element);
        }
    }
    return intersectionSet.toArray (new Comparable [0]);
}
----------------------------------------

 public static Comparable[] findCommonElements(Comparable[][] collections) {
    Comparable[] arr1 = collections[0];
    Comparable[] arr2 = collections[1];
    Comparable[] arr3 = collections[2];
    Comparable[] x;
    Comparable[] y;
    Comparable[] z;
    if (arr1.length <= arr2.length && arr1.length <= arr3.length) {
        x = arr1;
        y = arr2;
        z = arr3;
    } else if (arr2.length <= arr1.length && arr2.length <= arr3.length) {
        x = arr2;
        y = arr1;
        z = arr3;
    } else {
        x = arr3;
        y = arr1;
        z = arr2;
    }
    HashSet<Comparable> resultSet = new HashSet<>();
    for (int i = 0; i < x.length; i++) {
        Comparable e = x[i];
        for (int j = 0; j < y.length; j++) {
            if (e.equals(y[j])) {
                for (int k = 0; k < z.length; k++) {
                    if (e.equals(z[k])) {
                        resultSet.add(e);
                        break;
                    }
                }
            }
        }
    }
    return resultSet.toArray(new Comparable[0]);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
627
1
Gpt3D_Clone627_1.java 1 29
Gpt3D_Clone627_1.java 30 70
----------------------------------------

public static Comparable [] findCommonElements (Comparable [] [] collections) {
    Comparable [] arr1 = collections [0];
    Comparable [] arr2 = collections [1];
    Comparable [] arr3 = collections [2];
    if (arr1.length < arr2.length && arr1.length < arr3.length || arr2.length <= arr3.length) {
        hashArray = arr1;
        queryArray = ArrayUtils.addAll (arr2, arr3);
    } else if (arr2.length < arr1.length && arr2.length < arr3.length || arr1.length <= arr3.length) {
        hashArray = arr2;
        queryArray = ArrayUtils.addAll (arr1, arr3);
    } else if (arr3.length < arr1.length && arr3.length < arr2.length || arr1.length <= arr2.length) {
        hashArray = arr3;
        queryArray = ArrayUtils.addAll (arr1, arr2);
    }
    HashSet < Comparable > intersectionSet = new HashSet < > ();
    HashSet < Comparable > arrayToHash = new HashSet < > ();
    for (Comparable element : hashArray) {
        arrayToHash.add (element);
    }
    for (Comparable element : queryArray) {
        if (element != null) {
            comparisons ++;
        }
        if (arrayToHash.contains (element)) {
            intersectionSet.add (element);
        }
    }
    return intersectionSet.toArray (new Comparable [0]);
}
----------------------------------------

 public static Comparable[] findCommonElements(Comparable[][] collections) {
    Comparable[] arr1 = collections[0];
    Comparable[] arr2 = collections[1];
    Comparable[] arr3 = collections[2];
    Comparable[] x;
    Comparable[] y;
    Comparable[] z;
    if (arr1.length <= arr2.length && arr1.length <= arr3.length) {
        x = arr1;
        y = arr2;
        z = arr3;
    } else if (arr2.length <= arr1.length && arr2.length <= arr3.length) {
        x = arr2;
        y = arr1;
        z = arr3;
    } else {
        x = arr3;
        y = arr1;
        z = arr2;
    }
    HashSet<Comparable> resultSet = new HashSet<>();
    for (int i = 0; i < x.length; i++) {
        for (int j = 0; j < y.length; j++) {
            if (x[i].equals(y[j])) {
                for (int k = 0; k < z.length; k++) {
                    if (y[j].equals(z[k])) {
                        resultSet.add(z[k]);
                    }
                }
            }
        }
    }
    return resultSet.toArray(new Comparable[0]);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
627
6
Gpt3D_Clone627_6.java 1 29
Gpt3D_Clone627_6.java 30 61
----------------------------------------

public static Comparable [] findCommonElements (Comparable [] [] collections) {
    Comparable [] arr1 = collections [0];
    Comparable [] arr2 = collections [1];
    Comparable [] arr3 = collections [2];
    if (arr1.length < arr2.length && arr1.length < arr3.length || arr2.length <= arr3.length) {
        hashArray = arr1;
        queryArray = ArrayUtils.addAll (arr2, arr3);
    } else if (arr2.length < arr1.length && arr2.length < arr3.length || arr1.length <= arr3.length) {
        hashArray = arr2;
        queryArray = ArrayUtils.addAll (arr1, arr3);
    } else if (arr3.length < arr1.length && arr3.length < arr2.length || arr1.length <= arr2.length) {
        hashArray = arr3;
        queryArray = ArrayUtils.addAll (arr1, arr2);
    }
    HashSet < Comparable > intersectionSet = new HashSet < > ();
    HashSet < Comparable > arrayToHash = new HashSet < > ();
    for (Comparable element : hashArray) {
        arrayToHash.add (element);
    }
    for (Comparable element : queryArray) {
        if (element != null) {
            comparisons ++;
        }
        if (arrayToHash.contains (element)) {
            intersectionSet.add (element);
        }
    }
    return intersectionSet.toArray (new Comparable [0]);
}
----------------------------------------

 public static Comparable[] findCommonElements(Comparable[][] collections) {
    Comparable[] arr1 = collections[0];
    Comparable[] arr2 = collections[1];
    Comparable[] arr3 = collections[2];
    Map<Comparable, Integer> map = new HashMap<>();
    int count = 0;
    for (Comparable c : arr1) {
        map.put(c, count);
        count++;
    }
    List<Comparable> resultList = new ArrayList<>();
    for (Comparable c : arr2) {
        if (map.containsKey(c)) {
            resultList.add(c);
        }
    }
    for (Comparable c : arr3) {
        if (map.containsKey(c)) {
            if (!resultList.contains(c)) {
                resultList.add(c);
            }
        }
    }
    return resultList.toArray(new Comparable[0]);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
627
8
Gpt3D_Clone627_8.java 1 29
Gpt3D_Clone627_8.java 30 55
----------------------------------------

public static Comparable [] findCommonElements (Comparable [] [] collections) {
    Comparable [] arr1 = collections [0];
    Comparable [] arr2 = collections [1];
    Comparable [] arr3 = collections [2];
    if (arr1.length < arr2.length && arr1.length < arr3.length || arr2.length <= arr3.length) {
        hashArray = arr1;
        queryArray = ArrayUtils.addAll (arr2, arr3);
    } else if (arr2.length < arr1.length && arr2.length < arr3.length || arr1.length <= arr3.length) {
        hashArray = arr2;
        queryArray = ArrayUtils.addAll (arr1, arr3);
    } else if (arr3.length < arr1.length && arr3.length < arr2.length || arr1.length <= arr2.length) {
        hashArray = arr3;
        queryArray = ArrayUtils.addAll (arr1, arr2);
    }
    HashSet < Comparable > intersectionSet = new HashSet < > ();
    HashSet < Comparable > arrayToHash = new HashSet < > ();
    for (Comparable element : hashArray) {
        arrayToHash.add (element);
    }
    for (Comparable element : queryArray) {
        if (element != null) {
            comparisons ++;
        }
        if (arrayToHash.contains (element)) {
            intersectionSet.add (element);
        }
    }
    return intersectionSet.toArray (new Comparable [0]);
}
----------------------------------------

 public static Comparable[] findCommonElements(Comparable[][] collections) {
    Comparable[] arr1 = collections[0];
    Comparable[] arr2 = collections[1];
    Comparable[] arr3 = collections[2];
    HashSet<Comparable> hashSet = new HashSet<>();
    List<Comparable> resultList = new ArrayList<>();
    for (Comparable s : arr1) {
        if (hashSet.add(s)) {
            for (Comparable s2 : arr2) {
                if (s.equals(s2)) {
                    for (Comparable s3 : arr3) {
                        if (s2.equals(s3)) {
                            resultList.add(s3);
                        }
                    }
                }
            }
        }
    }
    return resultList.toArray(new Comparable[0]);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
627
9
Gpt3D_Clone627_9.java 1 29
Gpt3D_Clone627_9.java 30 52
----------------------------------------

public static Comparable [] findCommonElements (Comparable [] [] collections) {
    Comparable [] arr1 = collections [0];
    Comparable [] arr2 = collections [1];
    Comparable [] arr3 = collections [2];
    if (arr1.length < arr2.length && arr1.length < arr3.length || arr2.length <= arr3.length) {
        hashArray = arr1;
        queryArray = ArrayUtils.addAll (arr2, arr3);
    } else if (arr2.length < arr1.length && arr2.length < arr3.length || arr1.length <= arr3.length) {
        hashArray = arr2;
        queryArray = ArrayUtils.addAll (arr1, arr3);
    } else if (arr3.length < arr1.length && arr3.length < arr2.length || arr1.length <= arr2.length) {
        hashArray = arr3;
        queryArray = ArrayUtils.addAll (arr1, arr2);
    }
    HashSet < Comparable > intersectionSet = new HashSet < > ();
    HashSet < Comparable > arrayToHash = new HashSet < > ();
    for (Comparable element : hashArray) {
        arrayToHash.add (element);
    }
    for (Comparable element : queryArray) {
        if (element != null) {
            comparisons ++;
        }
        if (arrayToHash.contains (element)) {
            intersectionSet.add (element);
        }
    }
    return intersectionSet.toArray (new Comparable [0]);
}
----------------------------------------

 public static Comparable[] findCommonElements(Comparable[][] collections) {
    Comparable[] arr1 = collections[0];
    Comparable[] arr2 = collections[1];
    Comparable[] arr3 = collections[2];
    HashSet<Comparable> intersectionSet = new HashSet<>();
    for (int i = 0; i < arr1.length; i++) {
        for (int j = 0; j < arr2.length; j++) {
            if (arr1[i].equals(arr2[j])) {
                for (int k = 0; k < arr3.length; k++) {
                    if (arr2[j].equals(arr3[k])) {
                        intersectionSet.add(arr1[i]);
                    }
                }
            }
        }
    }
    return intersectionSet.toArray(new Comparable[0]);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
631
0
Gpt3D_Clone631_0.java 1 9
Gpt3D_Clone631_0.java 10 22
----------------------------------------

public void run () {
    Object o = object;
    for (;;) {
        try {
            sleep (Long.MAX_VALUE);
        } catch (InterruptedException e) {
        }
    }
}
----------------------------------------

 public void run () {
     Object o = object;
     long startTime = System.nanoTime();
     long endTime = startTime + Long.MAX_VALUE;
     while (System.nanoTime() <= endTime){
        try {
            Thread.sleep(Long.MAX_VALUE);
        } catch (InterruptedException e) {
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
632
0
Gpt3D_Clone632_0.java 1 9
Gpt3D_Clone632_0.java 10 22
----------------------------------------

public static void main (String [] args) throws InterruptedException {
    while (makeMore) {
        new Leakee (0).check ();
    }
    while (true) {
        Thread.sleep (1000);
        System.out.println ("memory=" + Runtime.getRuntime ().freeMemory () + " / " + Runtime.getRuntime ().totalMemory ());
    }
}
----------------------------------------

 public static void main (String [] args) throws InterruptedException {while(makeMore){
	   Leakee leakedInspection = new Leakee(0);
	   checkLeaks(leakedInspection);
	  }
	  while(true){
	    long freeMemory = Runtime.getRuntime().freeMemory();
	    long totalMemory = Runtime.getRuntime().totalMemory();
	    System.out.println("memory=" + freeMemory + "/" + totalMemory);
	    Thread.sleep(1000);
	  }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
637
0
Gpt3D_Clone637_0.java 1 13
Gpt3D_Clone637_0.java 14 27
----------------------------------------

boolean isPerfectSquare (long number) {
    if (number < 0) return false;
    if (number < 2) return true;
    for (int i = 0;
    ; i ++) {
        long square = squareTable [i];
        if (square > number) return false;
        while (number % square == 0) {
            number /= square;
        }
        if (number == 1) return true;
    }
}
----------------------------------------

 boolean isPerfectSquare (long number) {
    if (number < 0) return false;
    if (number == 0 || number == 1) return true;
    long num=2;
    while (true) {
        long square = num*num;
        if(square > number ) return false;
        if(number % square == 0) number /= square;
        num++;
        if (number == 1) return true;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
637
1
Gpt3D_Clone637_1.java 1 13
Gpt3D_Clone637_1.java 14 27
----------------------------------------

boolean isPerfectSquare (long number) {
    if (number < 0) return false;
    if (number < 2) return true;
    for (int i = 0;
    ; i ++) {
        long square = squareTable [i];
        if (square > number) return false;
        while (number % square == 0) {
            number /= square;
        }
        if (number == 1) return true;
    }
}
----------------------------------------

 boolean isPerfectSquare (long number) {
    if (number < 0) return false;
    if (number == 0 || number == 1) return true;
    int i = 2;
    while (true) {
        long square = i * i;
        if (square > number) return false;
        if (number % square == 0) number /= square;
        i ++;
        if (number == 1) return true;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
637
2
Gpt3D_Clone637_2.java 1 13
Gpt3D_Clone637_2.java 14 26
----------------------------------------

boolean isPerfectSquare (long number) {
    if (number < 0) return false;
    if (number < 2) return true;
    for (int i = 0;
    ; i ++) {
        long square = squareTable [i];
        if (square > number) return false;
        while (number % square == 0) {
            number /= square;
        }
        if (number == 1) return true;
    }
}
----------------------------------------

 boolean isPerfectSquare (long number) {
    if (number < 0) return false;
    if (number == 0 || number == 1) return true;
    long odd=2;
    while (true){
        if(number%odd == 0) number /=odd;
        odd=odd+2;
        if (number == 1) return true;
        if (odd > number) return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
637
3
Gpt3D_Clone637_3.java 1 13
Gpt3D_Clone637_3.java 14 26
----------------------------------------

boolean isPerfectSquare (long number) {
    if (number < 0) return false;
    if (number < 2) return true;
    for (int i = 0;
    ; i ++) {
        long square = squareTable [i];
        if (square > number) return false;
        while (number % square == 0) {
            number /= square;
        }
        if (number == 1) return true;
    }
}
----------------------------------------

 boolean isPerfectSquare (long number) {
    if (number < 0) return false;
    if (number == 0 || number == 1) return true;
    long odd = 1;
    while (true) {
        if (number % odd == 0) number /= odd;
        odd += 2;
        if (number == 1) return true;
        if (odd > number) return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
637
4
Gpt3D_Clone637_4.java 1 13
Gpt3D_Clone637_4.java 14 26
----------------------------------------

boolean isPerfectSquare (long number) {
    if (number < 0) return false;
    if (number < 2) return true;
    for (int i = 0;
    ; i ++) {
        long square = squareTable [i];
        if (square > number) return false;
        while (number % square == 0) {
            number /= square;
        }
        if (number == 1) return true;
    }
}
----------------------------------------

 boolean isPerfectSquare (long number) {
    if (number < 0) return false;
    if (number == 0 || number == 1) return true;
    long odd=3;
    while (true){
        if(number%odd== 0) number /=odd;
        odd=odd+2;
        if (number == 1) return true;
        if (odd > number) return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
637
5
Gpt3D_Clone637_5.java 1 13
Gpt3D_Clone637_5.java 14 26
----------------------------------------

boolean isPerfectSquare (long number) {
    if (number < 0) return false;
    if (number < 2) return true;
    for (int i = 0;
    ; i ++) {
        long square = squareTable [i];
        if (square > number) return false;
        while (number % square == 0) {
            number /= square;
        }
        if (number == 1) return true;
    }
}
----------------------------------------

 boolean isPerfectSquare (long number) {
    if (number < 0) return false;
    if (number == 0 || number == 1) return true;
    for (long i = 2; i <= Math.sqrt(number); i ++) {
        if(number % i == 0) {
            if (number / i == i) return true;
            else return false;
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
637
6
Gpt3D_Clone637_6.java 1 13
Gpt3D_Clone637_6.java 14 26
----------------------------------------

boolean isPerfectSquare (long number) {
    if (number < 0) return false;
    if (number < 2) return true;
    for (int i = 0;
    ; i ++) {
        long square = squareTable [i];
        if (square > number) return false;
        while (number % square == 0) {
            number /= square;
        }
        if (number == 1) return true;
    }
}
----------------------------------------

 boolean isPerfectSquare (long number) {
    if (number < 0) return false;
    if (number == 0 || number == 1) return true;
    for (long i = 3; i <= Math.sqrt(number); i += 2) {
        if(number % i == 0) {
            if (number / i == i) return true;
            else return false;
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
637
7
Gpt3D_Clone637_7.java 1 13
Gpt3D_Clone637_7.java 14 25
----------------------------------------

boolean isPerfectSquare (long number) {
    if (number < 0) return false;
    if (number < 2) return true;
    for (int i = 0;
    ; i ++) {
        long square = squareTable [i];
        if (square > number) return false;
        while (number % square == 0) {
            number /= square;
        }
        if (number == 1) return true;
    }
}
----------------------------------------

 boolean isPerfectSquare (long number) {
    if (number < 0) return false;
    if (number == 0 || number == 1) return true;
    long num = 2;
    while (true) {
        if (num > number/2) return false;
        if (number % num == 0 && number / num == num) return true;
        num ++;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
637
8
Gpt3D_Clone637_8.java 1 13
Gpt3D_Clone637_8.java 14 26
----------------------------------------

boolean isPerfectSquare (long number) {
    if (number < 0) return false;
    if (number < 2) return true;
    for (int i = 0;
    ; i ++) {
        long square = squareTable [i];
        if (square > number) return false;
        while (number % square == 0) {
            number /= square;
        }
        if (number == 1) return true;
    }
}
----------------------------------------

 boolean isPerfectSquare (long number) {
    if (number < 0) return false;
    if (number == 0 || number == 1) return true;
    for (long i = 2; i <= Math.sqrt(number); i+=2) {
        if(number % i == 0) {
            if (number / i == i) return true;
            else return false;
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
637
9
Gpt3D_Clone637_9.java 1 13
Gpt3D_Clone637_9.java 14 25
----------------------------------------

boolean isPerfectSquare (long number) {
    if (number < 0) return false;
    if (number < 2) return true;
    for (int i = 0;
    ; i ++) {
        long square = squareTable [i];
        if (square > number) return false;
        while (number % square == 0) {
            number /= square;
        }
        if (number == 1) return true;
    }
}
----------------------------------------

 boolean isPerfectSquare (long number) {
    if (number < 0) return false;
    if (number == 0 || number == 1) return true;
    long num = 3;
    while (true) {
        if (num > number/2) return false;
        if (number % num == 0 && number / num == num) return true;
        num +=2;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
638
0
Gpt3D_Clone638_0.java 1 63
Gpt3D_Clone638_0.java 64 88
----------------------------------------

public static boolean isPerfectSquare (long n) {
    if (n < 0) {
        return false;
    } else {
        switch ((byte) n) {
            case - 128 :
            case - 127 :
            case - 124 :
            case - 119 :
            case - 112 :
            case - 111 :
            case - 103 :
            case - 95 :
            case - 92 :
            case - 87 :
            case - 79 :
            case - 71 :
            case - 64 :
            case - 63 :
            case - 60 :
            case - 55 :
            case - 47 :
            case - 39 :
            case - 31 :
            case - 28 :
            case - 23 :
            case - 15 :
            case - 7 :
            case 0 :
            case 1 :
            case 4 :
            case 9 :
            case 16 :
            case 17 :
            case 25 :
            case 33 :
            case 36 :
            case 41 :
            case 49 :
            case 57 :
            case 64 :
            case 65 :
            case 68 :
            case 73 :
            case 81 :
            case 89 :
            case 97 :
            case 100 :
            case 105 :
            case 113 :
            case 121 :
                long i = (n * INV3465)>>> 52;
                if (! good3465 [(int) i]) {
                    return false;
                } else {
                    long r = round (Math.sqrt (n));
                    return r * r == n;
                }
            default :
                return false;
        }
    }
}
----------------------------------------

 public static boolean isPerfectSquare (long n) {
    if (n < 0) {
        return false;
    }
    if (n == 0 || n == 1) {
        return true;
    }
    long left = 0;
    long right = n/2;
    while (left <= right) {
        long mid = (left + right)/2;
        long sq = midPowTwo (mid);
        if (sq == n) {
            return true;
        }
        if (sq < n) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
638
1
Gpt3D_Clone638_1.java 1 63
Gpt3D_Clone638_1.java 64 85
----------------------------------------

public static boolean isPerfectSquare (long n) {
    if (n < 0) {
        return false;
    } else {
        switch ((byte) n) {
            case - 128 :
            case - 127 :
            case - 124 :
            case - 119 :
            case - 112 :
            case - 111 :
            case - 103 :
            case - 95 :
            case - 92 :
            case - 87 :
            case - 79 :
            case - 71 :
            case - 64 :
            case - 63 :
            case - 60 :
            case - 55 :
            case - 47 :
            case - 39 :
            case - 31 :
            case - 28 :
            case - 23 :
            case - 15 :
            case - 7 :
            case 0 :
            case 1 :
            case 4 :
            case 9 :
            case 16 :
            case 17 :
            case 25 :
            case 33 :
            case 36 :
            case 41 :
            case 49 :
            case 57 :
            case 64 :
            case 65 :
            case 68 :
            case 73 :
            case 81 :
            case 89 :
            case 97 :
            case 100 :
            case 105 :
            case 113 :
            case 121 :
                long i = (n * INV3465)>>> 52;
                if (! good3465 [(int) i]) {
                    return false;
                } else {
                    long r = round (Math.sqrt (n));
                    return r * r == n;
                }
            default :
                return false;
        }
    }
}
----------------------------------------

 public static boolean isPerfectSquare (long n) {
    if (n < 0) {
        return false;
    }
    long low = 0;
    long high = n;
    while (low <= high) {
        long mid = low + (high - low) / 2;
        if (mid*mid == n) {
            return true;
        }
        else if (mid*mid < n) {
            low = mid + 1;
        }
        else {
            high = mid - 1;
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
638
2
Gpt3D_Clone638_2.java 1 63
Gpt3D_Clone638_2.java 64 83
----------------------------------------

public static boolean isPerfectSquare (long n) {
    if (n < 0) {
        return false;
    } else {
        switch ((byte) n) {
            case - 128 :
            case - 127 :
            case - 124 :
            case - 119 :
            case - 112 :
            case - 111 :
            case - 103 :
            case - 95 :
            case - 92 :
            case - 87 :
            case - 79 :
            case - 71 :
            case - 64 :
            case - 63 :
            case - 60 :
            case - 55 :
            case - 47 :
            case - 39 :
            case - 31 :
            case - 28 :
            case - 23 :
            case - 15 :
            case - 7 :
            case 0 :
            case 1 :
            case 4 :
            case 9 :
            case 16 :
            case 17 :
            case 25 :
            case 33 :
            case 36 :
            case 41 :
            case 49 :
            case 57 :
            case 64 :
            case 65 :
            case 68 :
            case 73 :
            case 81 :
            case 89 :
            case 97 :
            case 100 :
            case 105 :
            case 113 :
            case 121 :
                long i = (n * INV3465)>>> 52;
                if (! good3465 [(int) i]) {
                    return false;
                } else {
                    long r = round (Math.sqrt (n));
                    return r * r == n;
                }
            default :
                return false;
        }
    }
}
----------------------------------------

 public static boolean isPerfectSquare (long n) {
    if (n < 0) {
        return false;
    }
    if(n == 0 || n == 1)
        return true;
    long start = 1, end = n;
    while (start <= end) {
        long mid = (start + end) / 2;
        if (midAliveS (mid) == n)
            return true;
        if (midAliveS (mid) < n)
            start = mid + 1;
        else
            end = mid - 1;
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
638
3
Gpt3D_Clone638_3.java 1 63
Gpt3D_Clone638_3.java 64 79
----------------------------------------

public static boolean isPerfectSquare (long n) {
    if (n < 0) {
        return false;
    } else {
        switch ((byte) n) {
            case - 128 :
            case - 127 :
            case - 124 :
            case - 119 :
            case - 112 :
            case - 111 :
            case - 103 :
            case - 95 :
            case - 92 :
            case - 87 :
            case - 79 :
            case - 71 :
            case - 64 :
            case - 63 :
            case - 60 :
            case - 55 :
            case - 47 :
            case - 39 :
            case - 31 :
            case - 28 :
            case - 23 :
            case - 15 :
            case - 7 :
            case 0 :
            case 1 :
            case 4 :
            case 9 :
            case 16 :
            case 17 :
            case 25 :
            case 33 :
            case 36 :
            case 41 :
            case 49 :
            case 57 :
            case 64 :
            case 65 :
            case 68 :
            case 73 :
            case 81 :
            case 89 :
            case 97 :
            case 100 :
            case 105 :
            case 113 :
            case 121 :
                long i = (n * INV3465)>>> 52;
                if (! good3465 [(int) i]) {
                    return false;
                } else {
                    long r = round (Math.sqrt (n));
                    return r * r == n;
                }
            default :
                return false;
        }
    }
}
----------------------------------------

 public static boolean isPerfectSquare (long n) {
    if (n < 0) {
        return false;
    }
    long guess = 1;
    while (guess * guess < n) {
        guess++;
    }
    if (guess * guess == n) {
        return true;
    } else {
        return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
638
4
Gpt3D_Clone638_4.java 1 63
Gpt3D_Clone638_4.java 64 78
----------------------------------------

public static boolean isPerfectSquare (long n) {
    if (n < 0) {
        return false;
    } else {
        switch ((byte) n) {
            case - 128 :
            case - 127 :
            case - 124 :
            case - 119 :
            case - 112 :
            case - 111 :
            case - 103 :
            case - 95 :
            case - 92 :
            case - 87 :
            case - 79 :
            case - 71 :
            case - 64 :
            case - 63 :
            case - 60 :
            case - 55 :
            case - 47 :
            case - 39 :
            case - 31 :
            case - 28 :
            case - 23 :
            case - 15 :
            case - 7 :
            case 0 :
            case 1 :
            case 4 :
            case 9 :
            case 16 :
            case 17 :
            case 25 :
            case 33 :
            case 36 :
            case 41 :
            case 49 :
            case 57 :
            case 64 :
            case 65 :
            case 68 :
            case 73 :
            case 81 :
            case 89 :
            case 97 :
            case 100 :
            case 105 :
            case 113 :
            case 121 :
                long i = (n * INV3465)>>> 52;
                if (! good3465 [(int) i]) {
                    return false;
                } else {
                    long r = round (Math.sqrt (n));
                    return r * r == n;
                }
            default :
                return false;
        }
    }
}
----------------------------------------

 public static boolean isPerfectSquare (long n) {
    if (n < 0) {
        return false;
    }
    int count = 0;
    for (long i = 0; i < n; i++) {
        if (i * i == n && count == 0) {
            count++;
            return true;
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
638
5
Gpt3D_Clone638_5.java 1 63
Gpt3D_Clone638_5.java 64 79
----------------------------------------

public static boolean isPerfectSquare (long n) {
    if (n < 0) {
        return false;
    } else {
        switch ((byte) n) {
            case - 128 :
            case - 127 :
            case - 124 :
            case - 119 :
            case - 112 :
            case - 111 :
            case - 103 :
            case - 95 :
            case - 92 :
            case - 87 :
            case - 79 :
            case - 71 :
            case - 64 :
            case - 63 :
            case - 60 :
            case - 55 :
            case - 47 :
            case - 39 :
            case - 31 :
            case - 28 :
            case - 23 :
            case - 15 :
            case - 7 :
            case 0 :
            case 1 :
            case 4 :
            case 9 :
            case 16 :
            case 17 :
            case 25 :
            case 33 :
            case 36 :
            case 41 :
            case 49 :
            case 57 :
            case 64 :
            case 65 :
            case 68 :
            case 73 :
            case 81 :
            case 89 :
            case 97 :
            case 100 :
            case 105 :
            case 113 :
            case 121 :
                long i = (n * INV3465)>>> 52;
                if (! good3465 [(int) i]) {
                    return false;
                } else {
                    long r = round (Math.sqrt (n));
                    return r * r == n;
                }
            default :
                return false;
        }
    }
}
----------------------------------------

 public static boolean isPerfectSquare (long n) {
    if (n < 0) {
        return false;
    }
    if (n == 0 || n == 1) {
        return true;
    }
    for (long i = 0; i <= n; i++) {
        if (i * i == n) {
            return true;
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
638
6
Gpt3D_Clone638_6.java 1 63
Gpt3D_Clone638_6.java 64 78
----------------------------------------

public static boolean isPerfectSquare (long n) {
    if (n < 0) {
        return false;
    } else {
        switch ((byte) n) {
            case - 128 :
            case - 127 :
            case - 124 :
            case - 119 :
            case - 112 :
            case - 111 :
            case - 103 :
            case - 95 :
            case - 92 :
            case - 87 :
            case - 79 :
            case - 71 :
            case - 64 :
            case - 63 :
            case - 60 :
            case - 55 :
            case - 47 :
            case - 39 :
            case - 31 :
            case - 28 :
            case - 23 :
            case - 15 :
            case - 7 :
            case 0 :
            case 1 :
            case 4 :
            case 9 :
            case 16 :
            case 17 :
            case 25 :
            case 33 :
            case 36 :
            case 41 :
            case 49 :
            case 57 :
            case 64 :
            case 65 :
            case 68 :
            case 73 :
            case 81 :
            case 89 :
            case 97 :
            case 100 :
            case 105 :
            case 113 :
            case 121 :
                long i = (n * INV3465)>>> 52;
                if (! good3465 [(int) i]) {
                    return false;
                } else {
                    long r = round (Math.sqrt (n));
                    return r * r == n;
                }
            default :
                return false;
        }
    }
}
----------------------------------------

 public static boolean isPerfectSquare (long n) {
    if (n < 0) {
        return false;
    }
    if (n == 0 || n == 1) {
        return true;
    }
    long i = 0;
    while (i * i < n) {
        i++;
    }
    return (i * i == n);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
638
7
Gpt3D_Clone638_7.java 1 63
Gpt3D_Clone638_7.java 64 79
----------------------------------------

public static boolean isPerfectSquare (long n) {
    if (n < 0) {
        return false;
    } else {
        switch ((byte) n) {
            case - 128 :
            case - 127 :
            case - 124 :
            case - 119 :
            case - 112 :
            case - 111 :
            case - 103 :
            case - 95 :
            case - 92 :
            case - 87 :
            case - 79 :
            case - 71 :
            case - 64 :
            case - 63 :
            case - 60 :
            case - 55 :
            case - 47 :
            case - 39 :
            case - 31 :
            case - 28 :
            case - 23 :
            case - 15 :
            case - 7 :
            case 0 :
            case 1 :
            case 4 :
            case 9 :
            case 16 :
            case 17 :
            case 25 :
            case 33 :
            case 36 :
            case 41 :
            case 49 :
            case 57 :
            case 64 :
            case 65 :
            case 68 :
            case 73 :
            case 81 :
            case 89 :
            case 97 :
            case 100 :
            case 105 :
            case 113 :
            case 121 :
                long i = (n * INV3465)>>> 52;
                if (! good3465 [(int) i]) {
                    return false;
                } else {
                    long r = round (Math.sqrt (n));
                    return r * r == n;
                }
            default :
                return false;
        }
    }
}
----------------------------------------

 public static boolean isPerfectSquare (long n) {
    if (n < 0) {
        return false;
    }
    if (n == 0 || n == 1) {
        return true;
    }
    for (long i = 2; i * i < n; i++) {
        if (n % i == 0) {
            return false;
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
638
8
Gpt3D_Clone638_8.java 1 63
Gpt3D_Clone638_8.java 64 76
----------------------------------------

public static boolean isPerfectSquare (long n) {
    if (n < 0) {
        return false;
    } else {
        switch ((byte) n) {
            case - 128 :
            case - 127 :
            case - 124 :
            case - 119 :
            case - 112 :
            case - 111 :
            case - 103 :
            case - 95 :
            case - 92 :
            case - 87 :
            case - 79 :
            case - 71 :
            case - 64 :
            case - 63 :
            case - 60 :
            case - 55 :
            case - 47 :
            case - 39 :
            case - 31 :
            case - 28 :
            case - 23 :
            case - 15 :
            case - 7 :
            case 0 :
            case 1 :
            case 4 :
            case 9 :
            case 16 :
            case 17 :
            case 25 :
            case 33 :
            case 36 :
            case 41 :
            case 49 :
            case 57 :
            case 64 :
            case 65 :
            case 68 :
            case 73 :
            case 81 :
            case 89 :
            case 97 :
            case 100 :
            case 105 :
            case 113 :
            case 121 :
                long i = (n * INV3465)>>> 52;
                if (! good3465 [(int) i]) {
                    return false;
                } else {
                    long r = round (Math.sqrt (n));
                    return r * r == n;
                }
            default :
                return false;
        }
    }
}
----------------------------------------

 public static boolean isPerfectSquare (long n) {
    if (n < 0) {
        return false;
    }
    for (long i = 0; i <= n; i++) {
        if (i * i == n) {
            return true;
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
638
9
Gpt3D_Clone638_9.java 1 63
Gpt3D_Clone638_9.java 64 73
----------------------------------------

public static boolean isPerfectSquare (long n) {
    if (n < 0) {
        return false;
    } else {
        switch ((byte) n) {
            case - 128 :
            case - 127 :
            case - 124 :
            case - 119 :
            case - 112 :
            case - 111 :
            case - 103 :
            case - 95 :
            case - 92 :
            case - 87 :
            case - 79 :
            case - 71 :
            case - 64 :
            case - 63 :
            case - 60 :
            case - 55 :
            case - 47 :
            case - 39 :
            case - 31 :
            case - 28 :
            case - 23 :
            case - 15 :
            case - 7 :
            case 0 :
            case 1 :
            case 4 :
            case 9 :
            case 16 :
            case 17 :
            case 25 :
            case 33 :
            case 36 :
            case 41 :
            case 49 :
            case 57 :
            case 64 :
            case 65 :
            case 68 :
            case 73 :
            case 81 :
            case 89 :
            case 97 :
            case 100 :
            case 105 :
            case 113 :
            case 121 :
                long i = (n * INV3465)>>> 52;
                if (! good3465 [(int) i]) {
                    return false;
                } else {
                    long r = round (Math.sqrt (n));
                    return r * r == n;
                }
            default :
                return false;
        }
    }
}
----------------------------------------

 public static boolean isPerfectSquare (long n) {
    if (n < 0) {
        return false;
    } else {
        long root = (long) Math.sqrt(n);
        return root * root == n;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
639
0
Gpt3D_Clone639_0.java 1 63
Gpt3D_Clone639_0.java 64 126
----------------------------------------

public static boolean isPerfectSquare (long n) {
    if (n < 0) {
        return false;
    } else {
        switch ((byte) n) {
            case - 128 :
            case - 127 :
            case - 124 :
            case - 119 :
            case - 112 :
            case - 111 :
            case - 103 :
            case - 95 :
            case - 92 :
            case - 87 :
            case - 79 :
            case - 71 :
            case - 64 :
            case - 63 :
            case - 60 :
            case - 55 :
            case - 47 :
            case - 39 :
            case - 31 :
            case - 28 :
            case - 23 :
            case - 15 :
            case - 7 :
            case 0 :
            case 1 :
            case 4 :
            case 9 :
            case 16 :
            case 17 :
            case 25 :
            case 33 :
            case 36 :
            case 41 :
            case 49 :
            case 57 :
            case 64 :
            case 65 :
            case 68 :
            case 73 :
            case 81 :
            case 89 :
            case 97 :
            case 100 :
            case 105 :
            case 113 :
            case 121 :
                long i = (n * INV3465)>>> 52;
                if (! good3465 [(int) i]) {
                    return false;
                } else {
                    long r = round (Math.sqrt (n));
                    return r * r == n;
                }
            default :
                return false;
        }
    }
}
----------------------------------------

 
public static boolean isPerfectSquare (long n) {
    if (n < 0) {
        return false;
    } else {
        long nums[] = new long[36];
        nums[0] = -128L;
        nums[1] = -127L;
        nums[2] = -124L;
        nums[3] = -119L;
        nums[4] = -112L;
        nums[5] = -111L;
        nums[6] = -103L;
        nums[7] = -95L;
        nums[8] = -92L;
        nums[9] = -87L;
        nums[10] = -79L;
        nums[11] = -71L;
        nums[12] = -64L;
        nums[13] = -63L;
        nums[14] = -60L;
        nums[15] = -55L;
        nums[16] = -47L;
        nums[17] = -39L;
        nums[18] = -31L;
        nums[19] = -28L;
        nums[20] = -23L;
        nums[21] = -15L;
        nums[22] = -7L;
        nums[23] = 0L;
        nums[24] = 1L;
        nums[25] = 4L;
        nums[26] = 9L;
        nums[27] = 16L;
        nums[28] = 17L;
        nums[29] = 25L;
        nums[30] = 33L;
        nums[31] = 36L;
        nums[32] = 41L;
        nums[33] = 49L;
        nums[34] = 57L;
        nums[35] = 64L;
        nums[36] = 65L;
        nums[37] = 68L;
        nums[38] = 73L;
        nums[39] = 81L;
        nums[40] = 89L;
        nums[41] = 97L;
        nums[42] = 100L;
        nums[43] = 105L;
        nums[44] = 113L;
        nums[45] = 121L;     
        for (long i : nums) { 
            if (n == i) {
                long r = round (Math.sqrt (n));
                return r * r == n;
            }
        }
        return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
639
1
Gpt3D_Clone639_1.java 1 63
Gpt3D_Clone639_1.java 64 126
----------------------------------------

public static boolean isPerfectSquare (long n) {
    if (n < 0) {
        return false;
    } else {
        switch ((byte) n) {
            case - 128 :
            case - 127 :
            case - 124 :
            case - 119 :
            case - 112 :
            case - 111 :
            case - 103 :
            case - 95 :
            case - 92 :
            case - 87 :
            case - 79 :
            case - 71 :
            case - 64 :
            case - 63 :
            case - 60 :
            case - 55 :
            case - 47 :
            case - 39 :
            case - 31 :
            case - 28 :
            case - 23 :
            case - 15 :
            case - 7 :
            case 0 :
            case 1 :
            case 4 :
            case 9 :
            case 16 :
            case 17 :
            case 25 :
            case 33 :
            case 36 :
            case 41 :
            case 49 :
            case 57 :
            case 64 :
            case 65 :
            case 68 :
            case 73 :
            case 81 :
            case 89 :
            case 97 :
            case 100 :
            case 105 :
            case 113 :
            case 121 :
                long i = (n * INV3465)>>> 52;
                if (! good3465 [(int) i]) {
                    return false;
                } else {
                    long r = round (Math.sqrt (n));
                    return r * r == n;
                }
            default :
                return false;
        }
    }
}
----------------------------------------

public static boolean isPerfectSquare (long n) {
    if (n < 0) {
        return false;
    } else {
        int[] good5871 = new int[36];
        good5871[0] = -128;
        good5871[1] = -127;
        good5871[2] = -124;
        good5871[3] = -119;
        good5871[4] = -112;
        good5871[5] = -111;
        good5871[6] = -103;
        good5871[7] = -95;
        good5871[8] = -92;
        good5871[9] = -87;
        good5871[10] = -79;
        good5871[11] = -71;
        good5871[12] = -64;
        good5871[13] = -63;
        good5871[14] = -60;
        good5871[15] = -55;
        good5871[16] = -47;
        good5871[17] = -39;
        good5871[18] = -31;
        good5871[19] = -28;
        good5871[20] = -23;
        good5871[21] = -15;
        good5871[22] = -7;
        good5871[23] = 0;
        good5871[24] = 1;
        good5871[25] = 4;
        good5871[26] = 9;
        good5871[27] = 16;
        good5871[28] = 17;
        good5871[29] = 25;
        good5871[30] = 33;
        good5871[31] = 36;
        good5871[32] = 41;
        good5871[33] = 49;
        good5871[34] = 57;
        good5871[35] = 64;
        good5871[36] = 65;
        good5871[37] = 68;
        good5871[38] = 73;
        good5871[39] = 81;
        good5871[40] = 89;
        good5871[41] = 97;
        good5871[42] = 100;
        good5871[43] = 105;
        good5871[44] = 113;
        good5871[45] = 121;
        for (int i = 0; i < good5871.length; i++) { 
            if (n == good5871[i]) {
                long r = round (Math.sqrt (n));
                return r * r == n;
            }
        }
        return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
639
2
Gpt3D_Clone639_2.java 1 63
Gpt3D_Clone639_2.java 64 81
----------------------------------------

public static boolean isPerfectSquare (long n) {
    if (n < 0) {
        return false;
    } else {
        switch ((byte) n) {
            case - 128 :
            case - 127 :
            case - 124 :
            case - 119 :
            case - 112 :
            case - 111 :
            case - 103 :
            case - 95 :
            case - 92 :
            case - 87 :
            case - 79 :
            case - 71 :
            case - 64 :
            case - 63 :
            case - 60 :
            case - 55 :
            case - 47 :
            case - 39 :
            case - 31 :
            case - 28 :
            case - 23 :
            case - 15 :
            case - 7 :
            case 0 :
            case 1 :
            case 4 :
            case 9 :
            case 16 :
            case 17 :
            case 25 :
            case 33 :
            case 36 :
            case 41 :
            case 49 :
            case 57 :
            case 64 :
            case 65 :
            case 68 :
            case 73 :
            case 81 :
            case 89 :
            case 97 :
            case 100 :
            case 105 :
            case 113 :
            case 121 :
                long i = (n * INV3465)>>> 52;
                if (! good3465 [(int) i]) {
                    return false;
                } else {
                    long r = round (Math.sqrt (n));
                    return r * r == n;
                }
            default :
                return false;
        }
    }
}
----------------------------------------

 
public static boolean isPerfectSquare (long n) {
    if (n < 0) {
        return false;
    } else {
        int[] good1409 = { - 128, - 127, - 124, - 119, - 112, - 111, - 103, - 95, - 92, - 87, - 79, - 71, - 64, - 63, -60, - 55, - 47, - 39, - 31, - 28, - 23, - 15, - 7, 0, 1, 4, 9, 16, 17,25, 33, 36, 41, 49, 57, 64, 65, 68, 73, 81, 89, 97, 100, 105, 113, 121 }; 
        for (int i = 0; i < good1409.length; i++) { 
            if (n == good1409[i]) {
                long r = round (Math.sqrt (n));
                return r * r == n;
            }
        }
        return false;
    }
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
639
3
Gpt3D_Clone639_3.java 1 63
Gpt3D_Clone639_3.java 64 80
----------------------------------------

public static boolean isPerfectSquare (long n) {
    if (n < 0) {
        return false;
    } else {
        switch ((byte) n) {
            case - 128 :
            case - 127 :
            case - 124 :
            case - 119 :
            case - 112 :
            case - 111 :
            case - 103 :
            case - 95 :
            case - 92 :
            case - 87 :
            case - 79 :
            case - 71 :
            case - 64 :
            case - 63 :
            case - 60 :
            case - 55 :
            case - 47 :
            case - 39 :
            case - 31 :
            case - 28 :
            case - 23 :
            case - 15 :
            case - 7 :
            case 0 :
            case 1 :
            case 4 :
            case 9 :
            case 16 :
            case 17 :
            case 25 :
            case 33 :
            case 36 :
            case 41 :
            case 49 :
            case 57 :
            case 64 :
            case 65 :
            case 68 :
            case 73 :
            case 81 :
            case 89 :
            case 97 :
            case 100 :
            case 105 :
            case 113 :
            case 121 :
                long i = (n * INV3465)>>> 52;
                if (! good3465 [(int) i]) {
                    return false;
                } else {
                    long r = round (Math.sqrt (n));
                    return r * r == n;
                }
            default :
                return false;
        }
    }
}
----------------------------------------

 
public static boolean isPerfectSquare (long n) {
    if (n < 0) {
        return false;
    } else {
        int[] good4185 = { - 128, - 127, - 124, - 119, - 112, - 111, - 103, - 95, - 92, - 87, - 79, - 71, - 64, - 63, -60, - 55, - 47, - 39, - 31, - 28, - 23, - 15, - 7, 0, 1, 4, 9, 16, 17,25, 33, 36, 41, 49, 57, 64, 65, 68, 73, 81, 89, 97, 100, 105, 113, 121 }; 
        for (int i = 0; i < good4185.length; i++) { 
            if (n == good4185[i]) {
                long r = round (Math.sqrt (n));
                return r * r == n;
            }
        }
        return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
639
4
Gpt3D_Clone639_4.java 1 63
Gpt3D_Clone639_4.java 64 80
----------------------------------------

public static boolean isPerfectSquare (long n) {
    if (n < 0) {
        return false;
    } else {
        switch ((byte) n) {
            case - 128 :
            case - 127 :
            case - 124 :
            case - 119 :
            case - 112 :
            case - 111 :
            case - 103 :
            case - 95 :
            case - 92 :
            case - 87 :
            case - 79 :
            case - 71 :
            case - 64 :
            case - 63 :
            case - 60 :
            case - 55 :
            case - 47 :
            case - 39 :
            case - 31 :
            case - 28 :
            case - 23 :
            case - 15 :
            case - 7 :
            case 0 :
            case 1 :
            case 4 :
            case 9 :
            case 16 :
            case 17 :
            case 25 :
            case 33 :
            case 36 :
            case 41 :
            case 49 :
            case 57 :
            case 64 :
            case 65 :
            case 68 :
            case 73 :
            case 81 :
            case 89 :
            case 97 :
            case 100 :
            case 105 :
            case 113 :
            case 121 :
                long i = (n * INV3465)>>> 52;
                if (! good3465 [(int) i]) {
                    return false;
                } else {
                    long r = round (Math.sqrt (n));
                    return r * r == n;
                }
            default :
                return false;
        }
    }
}
----------------------------------------

 
public static boolean isPerfectSquare (long n) {
    if (n < 0) {
        return false;
    } else {
        short[] good3109 = { - 128, - 127, - 124, - 119, - 112, - 111, - 103, - 95, - 92, - 87, - 79, - 71, - 64, - 63, -60, - 55, - 47, - 39, - 31, - 28, - 23, - 15, - 7, 0, 1, 4, 9, 16, 17,25, 33, 36, 41, 49, 57, 64, 65, 68, 73, 81, 89, 97, 100, 105, 113, 121 }; 
        for (int i = 0; i < good3109.length; i++) { 
            if (n == good3109[i]) {
                long r = round (Math.sqrt (n));
                return r * r == n;
            }
        }
        return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
639
5
Gpt3D_Clone639_5.java 1 63
Gpt3D_Clone639_5.java 64 80
----------------------------------------

public static boolean isPerfectSquare (long n) {
    if (n < 0) {
        return false;
    } else {
        switch ((byte) n) {
            case - 128 :
            case - 127 :
            case - 124 :
            case - 119 :
            case - 112 :
            case - 111 :
            case - 103 :
            case - 95 :
            case - 92 :
            case - 87 :
            case - 79 :
            case - 71 :
            case - 64 :
            case - 63 :
            case - 60 :
            case - 55 :
            case - 47 :
            case - 39 :
            case - 31 :
            case - 28 :
            case - 23 :
            case - 15 :
            case - 7 :
            case 0 :
            case 1 :
            case 4 :
            case 9 :
            case 16 :
            case 17 :
            case 25 :
            case 33 :
            case 36 :
            case 41 :
            case 49 :
            case 57 :
            case 64 :
            case 65 :
            case 68 :
            case 73 :
            case 81 :
            case 89 :
            case 97 :
            case 100 :
            case 105 :
            case 113 :
            case 121 :
                long i = (n * INV3465)>>> 52;
                if (! good3465 [(int) i]) {
                    return false;
                } else {
                    long r = round (Math.sqrt (n));
                    return r * r == n;
                }
            default :
                return false;
        }
    }
}
----------------------------------------

 
public static boolean isPerfectSquare (long n) {
    if (n < 0) {
        return false;
    } else {
        long nums[] = { - 128L, - 127L, - 124L, - 119L, - 112L, - 111L, - 103L, - 95L, - 92L, - 87L, - 79L, - 71L, - 64L, - 63L, -60L, - 55L, - 47L, - 39L, - 31L, - 28L, - 23L, - 15L, - 7L, 0L, 1L, 4L, 9L, 16L, 17L,25L, 33L, 36L, 41L, 49L, 57L, 64L, 65L, 68L, 73L, 81L, 89L, 97L, 100L, 105L, 113L, 121L };
        for (long i : nums) { 
            if (n == i) {
                long r = round (Math.sqrt (n));
                return r * r == n;
            }
        }
        return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
639
6
Gpt3D_Clone639_6.java 1 63
Gpt3D_Clone639_6.java 64 80
----------------------------------------

public static boolean isPerfectSquare (long n) {
    if (n < 0) {
        return false;
    } else {
        switch ((byte) n) {
            case - 128 :
            case - 127 :
            case - 124 :
            case - 119 :
            case - 112 :
            case - 111 :
            case - 103 :
            case - 95 :
            case - 92 :
            case - 87 :
            case - 79 :
            case - 71 :
            case - 64 :
            case - 63 :
            case - 60 :
            case - 55 :
            case - 47 :
            case - 39 :
            case - 31 :
            case - 28 :
            case - 23 :
            case - 15 :
            case - 7 :
            case 0 :
            case 1 :
            case 4 :
            case 9 :
            case 16 :
            case 17 :
            case 25 :
            case 33 :
            case 36 :
            case 41 :
            case 49 :
            case 57 :
            case 64 :
            case 65 :
            case 68 :
            case 73 :
            case 81 :
            case 89 :
            case 97 :
            case 100 :
            case 105 :
            case 113 :
            case 121 :
                long i = (n * INV3465)>>> 52;
                if (! good3465 [(int) i]) {
                    return false;
                } else {
                    long r = round (Math.sqrt (n));
                    return r * r == n;
                }
            default :
                return false;
        }
    }
}
----------------------------------------

 
public static boolean isPerfectSquare (long n) {
    if (n < 0) {
        return false;
    } else {
        int[]good6667 = new int[] { -128, -127, -124, -119, -112, -111, -103, -95, -92, -87, -79, -71, -64, -63, -60, -55, -47, -39, -31, -28, -23, -15, -7, 0, 1, 4, 9, 16, 17, 25, 33, 36, 41, 49, 57, 64, 65, 68, 73, 81, 89, 97, 100, 105, 113, 121 }; 
        for (int i : good6667) { 
            if (n == i) {
                long r = round (Math.sqrt (n));
                return r * r == n;
            }
        }
        return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
639
7
Gpt3D_Clone639_7.java 1 63
Gpt3D_Clone639_7.java 64 80
----------------------------------------

public static boolean isPerfectSquare (long n) {
    if (n < 0) {
        return false;
    } else {
        switch ((byte) n) {
            case - 128 :
            case - 127 :
            case - 124 :
            case - 119 :
            case - 112 :
            case - 111 :
            case - 103 :
            case - 95 :
            case - 92 :
            case - 87 :
            case - 79 :
            case - 71 :
            case - 64 :
            case - 63 :
            case - 60 :
            case - 55 :
            case - 47 :
            case - 39 :
            case - 31 :
            case - 28 :
            case - 23 :
            case - 15 :
            case - 7 :
            case 0 :
            case 1 :
            case 4 :
            case 9 :
            case 16 :
            case 17 :
            case 25 :
            case 33 :
            case 36 :
            case 41 :
            case 49 :
            case 57 :
            case 64 :
            case 65 :
            case 68 :
            case 73 :
            case 81 :
            case 89 :
            case 97 :
            case 100 :
            case 105 :
            case 113 :
            case 121 :
                long i = (n * INV3465)>>> 52;
                if (! good3465 [(int) i]) {
                    return false;
                } else {
                    long r = round (Math.sqrt (n));
                    return r * r == n;
                }
            default :
                return false;
        }
    }
}
----------------------------------------

 
public static boolean isPerfectSquare (long n) {
    if (n < 0) {
        return false;
    } else {    
        long[] good4979 = { - 128L, - 127L, - 124L, - 119L, - 112L, - 111L, - 103L, - 95L, - 92L, - 87L, - 79L, - 71L, - 64L, - 63L, -60L, - 55L, - 47L, - 39L, - 31L, - 28L, - 23L, - 15L, - 7L, 0L, 1L, 4L, 9L, 16L, 17L,25L, 33L, 36L, 41L, 49L, 57L, 64L, 65L, 68L, 73L, 81L, 89L, 97L, 100L, 105L, 113L, 121L }; 
        for (int i = 0; i < good4979.length; i++) { 
            if (n == good4979[i]) {
                long r = round (Math.sqrt (n));
                return r * r == n;
            }
        }
        return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
639
8
Gpt3D_Clone639_8.java 1 63
Gpt3D_Clone639_8.java 64 77
----------------------------------------

public static boolean isPerfectSquare (long n) {
    if (n < 0) {
        return false;
    } else {
        switch ((byte) n) {
            case - 128 :
            case - 127 :
            case - 124 :
            case - 119 :
            case - 112 :
            case - 111 :
            case - 103 :
            case - 95 :
            case - 92 :
            case - 87 :
            case - 79 :
            case - 71 :
            case - 64 :
            case - 63 :
            case - 60 :
            case - 55 :
            case - 47 :
            case - 39 :
            case - 31 :
            case - 28 :
            case - 23 :
            case - 15 :
            case - 7 :
            case 0 :
            case 1 :
            case 4 :
            case 9 :
            case 16 :
            case 17 :
            case 25 :
            case 33 :
            case 36 :
            case 41 :
            case 49 :
            case 57 :
            case 64 :
            case 65 :
            case 68 :
            case 73 :
            case 81 :
            case 89 :
            case 97 :
            case 100 :
            case 105 :
            case 113 :
            case 121 :
                long i = (n * INV3465)>>> 52;
                if (! good3465 [(int) i]) {
                    return false;
                } else {
                    long r = round (Math.sqrt (n));
                    return r * r == n;
                }
            default :
                return false;
        }
    }
}
----------------------------------------

 
public static boolean isPerfectSquare (long n) {
    if (n < 0) {
        return false;
    } else {
        if (n == -128 || n == -127 || n == -124 || n == -119 || n == -112 || n == -111 || n == -103 || n == -95 || n == -92 || n == -87 || n == -79|| n == -71 || n == -64 || n == -63 || n == -60 || n == -55 || n == -47 || n == -39 || n == -31 || n == -28 || n == -23|| n == -15 || n == -7 || n == 0 || n == 1 || n == 4 || n == 9 || n == 16 || n == 17 || n == 25 || n == 33 || n == 36 || n == 41 || n == 49 || n == 57 || n == 64 || n == 65 || n == 68|| n == 73 || n == 81 || n == 89 || n == 97 || n == 100 || n == 105 || n == 113 || n == 121) {
            long r = round (Math.sqrt (n));
            return r * r == n;
        }
        return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
641
0
Gpt3D_Clone641_0.java 1 12
Gpt3D_Clone641_0.java 13 26
----------------------------------------

public static String join (String delimiter, String...inStr) {
    StringBuilder sb = new StringBuilder ();
    if (inStr.length > 0) {
        sb.append (inStr [0]);
        for (int i = 1;
        i < inStr.length; i ++) {
            sb.append (delimiter);
            sb.append (inStr [i]);
        }
    }
    return sb.toString ();
}
----------------------------------------

 public static String join(String delimiter, String... inStr) {
    String result = "";
    for(int i = 0; i < inStr.length; i++) {
        if(i > 0) {
            nextString = delimiter + inStr[i];
        } else {
            nextString = inStr[i];
        }
        result = result + nextString;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
641
1
Gpt3D_Clone641_1.java 1 12
Gpt3D_Clone641_1.java 13 25
----------------------------------------

public static String join (String delimiter, String...inStr) {
    StringBuilder sb = new StringBuilder ();
    if (inStr.length > 0) {
        sb.append (inStr [0]);
        for (int i = 1;
        i < inStr.length; i ++) {
            sb.append (delimiter);
            sb.append (inStr [i]);
        }
    }
    return sb.toString ();
}
----------------------------------------

 public static String join(String delimiter, String... inStr) {
    StringBuilder stringBuilder = new StringBuilder();
    for (String str : inStr) {
        if (stringBuilder.length() > 0) {
            stringBuilder.append(delimiter);
        }
        stringBuilder.append(str);
    }
    return stringBuilder.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
641
2
Gpt3D_Clone641_2.java 1 12
Gpt3D_Clone641_2.java 13 21
----------------------------------------

public static String join (String delimiter, String...inStr) {
    StringBuilder sb = new StringBuilder ();
    if (inStr.length > 0) {
        sb.append (inStr [0]);
        for (int i = 1;
        i < inStr.length; i ++) {
            sb.append (delimiter);
            sb.append (inStr [i]);
        }
    }
    return sb.toString ();
}
----------------------------------------

 public static String join(String delimiter, String... inStr) {
    StringBuilder stringBuilder = new StringBuilder(inStr[0]);
    for(int i = 1; i < inStr.length; i++) {
        stringBuilder.append(delimiter).append(inStr[i]);
    }
    return stringBuilder.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
641
3
Gpt3D_Clone641_3.java 1 12
Gpt3D_Clone641_3.java 13 21
----------------------------------------

public static String join (String delimiter, String...inStr) {
    StringBuilder sb = new StringBuilder ();
    if (inStr.length > 0) {
        sb.append (inStr [0]);
        for (int i = 1;
        i < inStr.length; i ++) {
            sb.append (delimiter);
            sb.append (inStr [i]);
        }
    }
    return sb.toString ();
}
----------------------------------------

 public static String join(String delimiter, String... inStr) {
    StringJoiner stringJoiner = new StringJoiner(delimiter);
    for (String str : inStr) {
        stringJoiner.add(str);
    }
    return stringJoiner.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
641
4
Gpt3D_Clone641_4.java 1 12
Gpt3D_Clone641_4.java 13 20
----------------------------------------

public static String join (String delimiter, String...inStr) {
    StringBuilder sb = new StringBuilder ();
    if (inStr.length > 0) {
        sb.append (inStr [0]);
        for (int i = 1;
        i < inStr.length; i ++) {
            sb.append (delimiter);
            sb.append (inStr [i]);
        }
    }
    return sb.toString ();
}
----------------------------------------

  public static String join(String delimiter, String... inStr) {
    String result = "";
    for(String str : inStr)
        result = result + (str + delimiter);
    return result.substring(0, result.length() - delimiter.length());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
641
5
Gpt3D_Clone641_5.java 1 12
Gpt3D_Clone641_5.java 13 20
----------------------------------------

public static String join (String delimiter, String...inStr) {
    StringBuilder sb = new StringBuilder ();
    if (inStr.length > 0) {
        sb.append (inStr [0]);
        for (int i = 1;
        i < inStr.length; i ++) {
            sb.append (delimiter);
            sb.append (inStr [i]);
        }
    }
    return sb.toString ();
}
----------------------------------------

 public static String join(String delimiter, String... inStr) {
    String str = "";
    for(String s : inStr)
        str = str + s + delimiter;
    return str.substring(0, str.length() - delimiter.length());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
641
6
Gpt3D_Clone641_6.java 1 12
Gpt3D_Clone641_6.java 13 18
----------------------------------------

public static String join (String delimiter, String...inStr) {
    StringBuilder sb = new StringBuilder ();
    if (inStr.length > 0) {
        sb.append (inStr [0]);
        for (int i = 1;
        i < inStr.length; i ++) {
            sb.append (delimiter);
            sb.append (inStr [i]);
        }
    }
    return sb.toString ();
}
----------------------------------------

 public static String join(String delimiter, String... inStr) {
    String str = Arrays.stream(inStr).collect(Collectors.joining(delimiter));
    return str;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
641
7
Gpt3D_Clone641_7.java 1 12
Gpt3D_Clone641_7.java 13 18
----------------------------------------

public static String join (String delimiter, String...inStr) {
    StringBuilder sb = new StringBuilder ();
    if (inStr.length > 0) {
        sb.append (inStr [0]);
        for (int i = 1;
        i < inStr.length; i ++) {
            sb.append (delimiter);
            sb.append (inStr [i]);
        }
    }
    return sb.toString ();
}
----------------------------------------

 public static String join(String delimiter, String... inStr) {
    String sortedStr = String.join(delimiter, inStr);
    return sortedStr;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
641
8
Gpt3D_Clone641_8.java 1 12
Gpt3D_Clone641_8.java 13 18
----------------------------------------

public static String join (String delimiter, String...inStr) {
    StringBuilder sb = new StringBuilder ();
    if (inStr.length > 0) {
        sb.append (inStr [0]);
        for (int i = 1;
        i < inStr.length; i ++) {
            sb.append (delimiter);
            sb.append (inStr [i]);
        }
    }
    return sb.toString ();
}
----------------------------------------

 public static String join(String delimiter, String... inStr) {
    String result = String.join(delimiter, inStr);
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
641
9
Gpt3D_Clone641_9.java 1 12
Gpt3D_Clone641_9.java 13 17
----------------------------------------

public static String join (String delimiter, String...inStr) {
    StringBuilder sb = new StringBuilder ();
    if (inStr.length > 0) {
        sb.append (inStr [0]);
        for (int i = 1;
        i < inStr.length; i ++) {
            sb.append (delimiter);
            sb.append (inStr [i]);
        }
    }
    return sb.toString ();
}
----------------------------------------

 public static String join(String delimiter, String... inStr) {
    return Arrays.stream(inStr).reduce((x, y) -> x + delimiter + y).orElse("");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
642
1
Gpt3D_Clone642_1.java 1 12
Gpt3D_Clone642_1.java 13 23
----------------------------------------

private String join (String [] input, String delimiter) {
    StringBuilder sb = new StringBuilder ();
    for (String value : input) {
        sb.append (value);
        sb.append (delimiter);
    }
    int length = sb.length ();
    if (length > 0) {
        sb.setLength (length - delimiter.length ());
    }
    return sb.toString ();
}
----------------------------------------

 private String join (String [] input, String delimiter) {
    StringBuilder sb = new StringBuilder ();
    int i;
    for (i = 0; i < input.length - 1; i++) {
        sb.append (input[i] + delimiter);
    }
    sb.append(input[i]);
    return sb.toString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
642
2
Gpt3D_Clone642_2.java 1 12
Gpt3D_Clone642_2.java 13 24
----------------------------------------

private String join (String [] input, String delimiter) {
    StringBuilder sb = new StringBuilder ();
    for (String value : input) {
        sb.append (value);
        sb.append (delimiter);
    }
    int length = sb.length ();
    if (length > 0) {
        sb.setLength (length - delimiter.length ());
    }
    return sb.toString ();
}
----------------------------------------

 private String join (String [] input, String delimiter) {
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < input.length; i++) {
        sb.append(input[i]);
        sb.append(delimiter);
    }
    if(sb.length() > 0)
        return sb.substring(0, sb.length()-delimiter.length());
    return "";
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
642
3
Gpt3D_Clone642_3.java 1 12
Gpt3D_Clone642_3.java 13 23
----------------------------------------

private String join (String [] input, String delimiter) {
    StringBuilder sb = new StringBuilder ();
    for (String value : input) {
        sb.append (value);
        sb.append (delimiter);
    }
    int length = sb.length ();
    if (length > 0) {
        sb.setLength (length - delimiter.length ());
    }
    return sb.toString ();
}
----------------------------------------

 private String join (String [] input, String delimiter) {
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < input.length-1; i++) {
        sb.append(input[i]);
        sb.append(delimiter);
    }
    sb.append(input[input.length-1]);
    return sb.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
642
4
Gpt3D_Clone642_4.java 1 12
Gpt3D_Clone642_4.java 13 22
----------------------------------------

private String join (String [] input, String delimiter) {
    StringBuilder sb = new StringBuilder ();
    for (String value : input) {
        sb.append (value);
        sb.append (delimiter);
    }
    int length = sb.length ();
    if (length > 0) {
        sb.setLength (length - delimiter.length ());
    }
    return sb.toString ();
}
----------------------------------------

 private String join (String [] input, String delimiter) {
    String output = "";
    for (String value : input) {
        output += value;
        output += delimiter;
    }
    return output.substring(0,output.length() - delimiter.length());
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
642
5
Gpt3D_Clone642_5.java 1 12
Gpt3D_Clone642_5.java 13 21
----------------------------------------

private String join (String [] input, String delimiter) {
    StringBuilder sb = new StringBuilder ();
    for (String value : input) {
        sb.append (value);
        sb.append (delimiter);
    }
    int length = sb.length ();
    if (length > 0) {
        sb.setLength (length - delimiter.length ());
    }
    return sb.toString ();
}
----------------------------------------

 private String join (String [] input, String delimiter) {
    String output = "";
    for (String value : input) {
        output = output + value + delimiter;
    }
    return output.substring(0, output.length() - delimiter.length());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
642
6
Gpt3D_Clone642_6.java 1 12
Gpt3D_Clone642_6.java 13 19
----------------------------------------

private String join (String [] input, String delimiter) {
    StringBuilder sb = new StringBuilder ();
    for (String value : input) {
        sb.append (value);
        sb.append (delimiter);
    }
    int length = sb.length ();
    if (length > 0) {
        sb.setLength (length - delimiter.length ());
    }
    return sb.toString ();
}
----------------------------------------

 private String join (String [] input, String delimiter) {
    String output = Arrays.stream(input)
                        .collect(Collectors.joining(delimiter));
    return output.substring(0, output.length() - delimiter.length());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
642
7
Gpt3D_Clone642_7.java 1 12
Gpt3D_Clone642_7.java 13 19
----------------------------------------

private String join (String [] input, String delimiter) {
    StringBuilder sb = new StringBuilder ();
    for (String value : input) {
        sb.append (value);
        sb.append (delimiter);
    }
    int length = sb.length ();
    if (length > 0) {
        sb.setLength (length - delimiter.length ());
    }
    return sb.toString ();
}
----------------------------------------

 private String join (String [] input, String delimiter) {
    String output = Arrays.stream(input)
                            .map(x -> x + delimiter).collect(Collectors.joining());
    return output.substring(0, output.length() - delimiter.length());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
642
8
Gpt3D_Clone642_8.java 1 12
Gpt3D_Clone642_8.java 13 19
----------------------------------------

private String join (String [] input, String delimiter) {
    StringBuilder sb = new StringBuilder ();
    for (String value : input) {
        sb.append (value);
        sb.append (delimiter);
    }
    int length = sb.length ();
    if (length > 0) {
        sb.setLength (length - delimiter.length ());
    }
    return sb.toString ();
}
----------------------------------------

 private String join (String [] input, String delimiter) {
    String output = Arrays.stream(input)
                            .collect(Collectors.joining(delimiter));
    return output;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
642
9
Gpt3D_Clone642_9.java 1 12
Gpt3D_Clone642_9.java 13 19
----------------------------------------

private String join (String [] input, String delimiter) {
    StringBuilder sb = new StringBuilder ();
    for (String value : input) {
        sb.append (value);
        sb.append (delimiter);
    }
    int length = sb.length ();
    if (length > 0) {
        sb.setLength (length - delimiter.length ());
    }
    return sb.toString ();
}
----------------------------------------

 private String join (String [] input, String delimiter) {
    return Arrays.stream(input)
                    .reduce("", (acc,curr)-> acc + curr + delimiter)
                    .substring(0, input.length*delimiter.length() - delimiter.length());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
643
0
Gpt3D_Clone643_0.java 1 14
Gpt3D_Clone643_0.java 15 40
----------------------------------------

public static String join (Object [] objects, String delimiter) {
    if (objects.length == 0) {
        return "";
    }
    int capacityGuess = (objects.length * objects [0].toString ().length ()) + ((objects.length - 1) * delimiter.length ());
    StringBuilder ret = new StringBuilder (capacityGuess);
    ret.append (objects [0]);
    for (int i = 1;
    i < objects.length; i ++) {
        ret.append (delimiter);
        ret.append (objects [i]);
    }
    return ret.toString ();
}
----------------------------------------

 public static String join(Object[] objects, String delimiter) { 
    if (objects.length == 0) { 
        return ""; 
    } 
  
    StringBuilder retString = new StringBuilder(); 
    int i = 0; 
  
    // Loop through the objects 
    while (i < objects.length) { 
        // Append the object to the string 
        retString.append(objects[i]); 
  
        // If not the last object 
        if (i != objects.length - 1) { 
            // Append delimiter 
            retString.append(delimiter); 
        } 
  
        i++; 
    } 
  
    return retString.toString(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
643
1
Gpt3D_Clone643_1.java 1 14
Gpt3D_Clone643_1.java 15 30
----------------------------------------

public static String join (Object [] objects, String delimiter) {
    if (objects.length == 0) {
        return "";
    }
    int capacityGuess = (objects.length * objects [0].toString ().length ()) + ((objects.length - 1) * delimiter.length ());
    StringBuilder ret = new StringBuilder (capacityGuess);
    ret.append (objects [0]);
    for (int i = 1;
    i < objects.length; i ++) {
        ret.append (delimiter);
        ret.append (objects [i]);
    }
    return ret.toString ();
}
----------------------------------------

 public static String join (Object [] objects, String delimiter) {
    String retString = "";
    int limit = objects.length - 1;
    if(objects.length == 0) {
        return "";
    }
    for (int i = 0; i <= limit; i++) {
        retString += objects[i];
        if(i < limit) {
            retString += delimiter;
        }
    }
    return retString;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
643
2
Gpt3D_Clone643_2.java 1 14
Gpt3D_Clone643_2.java 15 34
----------------------------------------

public static String join (Object [] objects, String delimiter) {
    if (objects.length == 0) {
        return "";
    }
    int capacityGuess = (objects.length * objects [0].toString ().length ()) + ((objects.length - 1) * delimiter.length ());
    StringBuilder ret = new StringBuilder (capacityGuess);
    ret.append (objects [0]);
    for (int i = 1;
    i < objects.length; i ++) {
        ret.append (delimiter);
        ret.append (objects [i]);
    }
    return ret.toString ();
}
----------------------------------------

 public static String join(Object[] objects, String delimiter) {
    if (objects == null || objects.length == 0) {
        return "";
    }
    StringBuilder output = new StringBuilder();
    for (int i = 0; i < objects.length; i++)
    {
        output.append(objects[i]);
        //If it's not the last object, append the delimiter
        if (i != objects.length - 1) {
            output.append(delimiter);
        }
    }
    return output.toString(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
643
3
Gpt3D_Clone643_3.java 1 14
Gpt3D_Clone643_3.java 15 29
----------------------------------------

public static String join (Object [] objects, String delimiter) {
    if (objects.length == 0) {
        return "";
    }
    int capacityGuess = (objects.length * objects [0].toString ().length ()) + ((objects.length - 1) * delimiter.length ());
    StringBuilder ret = new StringBuilder (capacityGuess);
    ret.append (objects [0]);
    for (int i = 1;
    i < objects.length; i ++) {
        ret.append (delimiter);
        ret.append (objects [i]);
    }
    return ret.toString ();
}
----------------------------------------

 public static String join (Object [] objects, String delimiter) {
    if (objects.length == 0) {
        return "";
    }
    int capacityGuess = (objects.length * objects [0].toString ().length ()) + ((objects.length - 1) * delimiter.length ());
    String ret = objects[0].toString();
    for (int i = 1;
    i < objects.length; i ++) {
        ret += delimiter;
        ret += objects [i].toString();
    }
    return ret;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
643
5
Gpt3D_Clone643_5.java 1 14
Gpt3D_Clone643_5.java 15 26
----------------------------------------

public static String join (Object [] objects, String delimiter) {
    if (objects.length == 0) {
        return "";
    }
    int capacityGuess = (objects.length * objects [0].toString ().length ()) + ((objects.length - 1) * delimiter.length ());
    StringBuilder ret = new StringBuilder (capacityGuess);
    ret.append (objects [0]);
    for (int i = 1;
    i < objects.length; i ++) {
        ret.append (delimiter);
        ret.append (objects [i]);
    }
    return ret.toString ();
}
----------------------------------------

 public static String join(Object[] objects, String delimiter) {
    String result = "";
    for (Object o : objects) {
        result += o.toString();
        if (!o.equals(objects[objects.length - 1])) {
            result += delimiter;
        }
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
643
6
Gpt3D_Clone643_6.java 1 14
Gpt3D_Clone643_6.java 15 26
----------------------------------------

public static String join (Object [] objects, String delimiter) {
    if (objects.length == 0) {
        return "";
    }
    int capacityGuess = (objects.length * objects [0].toString ().length ()) + ((objects.length - 1) * delimiter.length ());
    StringBuilder ret = new StringBuilder (capacityGuess);
    ret.append (objects [0]);
    for (int i = 1;
    i < objects.length; i ++) {
        ret.append (delimiter);
        ret.append (objects [i]);
    }
    return ret.toString ();
}
----------------------------------------

 public static String join (Object [] objects, String delimiter) {
    StringBuilder builder = new StringBuilder((objects.length * objects [0].toString().length()) + ((objects.length - 1) * delimiter.length()));
    for (int x = 0; x < objects.length; x++) {
        builder.append(objects[x]);
        if (x+1 < objects.length) {
            builder.append(delimiter);
        }
    }
    return builder.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
643
7
Gpt3D_Clone643_7.java 1 14
Gpt3D_Clone643_7.java 15 27
----------------------------------------

public static String join (Object [] objects, String delimiter) {
    if (objects.length == 0) {
        return "";
    }
    int capacityGuess = (objects.length * objects [0].toString ().length ()) + ((objects.length - 1) * delimiter.length ());
    StringBuilder ret = new StringBuilder (capacityGuess);
    ret.append (objects [0]);
    for (int i = 1;
    i < objects.length; i ++) {
        ret.append (delimiter);
        ret.append (objects [i]);
    }
    return ret.toString ();
}
----------------------------------------

 public static String join (Object [] objects, String delimiter) {
    String output = "";
    for (int i = 0; i < objects.length; i++) {
        output += objects[i];
        // Don't append the delimiter when we reaches the last object.
        if (i != objects.length - 1) {
            output += delimiter;
        }
    }
    return output;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
643
8
Gpt3D_Clone643_8.java 1 14
Gpt3D_Clone643_8.java 15 26
----------------------------------------

public static String join (Object [] objects, String delimiter) {
    if (objects.length == 0) {
        return "";
    }
    int capacityGuess = (objects.length * objects [0].toString ().length ()) + ((objects.length - 1) * delimiter.length ());
    StringBuilder ret = new StringBuilder (capacityGuess);
    ret.append (objects [0]);
    for (int i = 1;
    i < objects.length; i ++) {
        ret.append (delimiter);
        ret.append (objects [i]);
    }
    return ret.toString ();
}
----------------------------------------

 public static String join (Object [] objects, String delimiter) {
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < objects.length; i++) {
        sb.append(objects[i]);
        if (i != objects.length - 1) {
            sb.append(delimiter);
        }
    }
    return sb.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
643
9
Gpt3D_Clone643_9.java 1 14
Gpt3D_Clone643_9.java 15 24
----------------------------------------

public static String join (Object [] objects, String delimiter) {
    if (objects.length == 0) {
        return "";
    }
    int capacityGuess = (objects.length * objects [0].toString ().length ()) + ((objects.length - 1) * delimiter.length ());
    StringBuilder ret = new StringBuilder (capacityGuess);
    ret.append (objects [0]);
    for (int i = 1;
    i < objects.length; i ++) {
        ret.append (delimiter);
        ret.append (objects [i]);
    }
    return ret.toString ();
}
----------------------------------------

 public static String join(Object[] objects, String delimiter) {
    StringBuilder sb = new StringBuilder();
    for (Object o : objects) {
        sb.append(o);
        sb.append(delimiter);
    }
    return sb.substring(0, sb.length() - delimiter.length());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
644
0
Gpt3D_Clone644_0.java 1 11
Gpt3D_Clone644_0.java 12 29
----------------------------------------

public static String join (String r [], String d) {
    if (r.length == 0) return "";
    StringBuilder sb = new StringBuilder ();
    int i;
    for (i = 0; i < r.length - 1; i ++) {
        sb.append (r [i]);
        sb.append (d);
    }
    sb.append (r [i]);
    return sb.toString ();
}
----------------------------------------

public static String join(String[] r, String d)
{
    String result= "";
    if(r.length == 0)
        return result;
 
    StringBuffer sb = new StringBuffer();
    for(int i= 0; i < r.length-1; i++)
    {
        sb.append(r[i]);
        sb.append(d);
    }
    sb.append(r[r.length-1]);
    result = result.concat(sb.toString());
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
644
2
Gpt3D_Clone644_2.java 1 11
Gpt3D_Clone644_2.java 12 26
----------------------------------------

public static String join (String r [], String d) {
    if (r.length == 0) return "";
    StringBuilder sb = new StringBuilder ();
    int i;
    for (i = 0; i < r.length - 1; i ++) {
        sb.append (r [i]);
        sb.append (d);
    }
    sb.append (r [i]);
    return sb.toString ();
}
----------------------------------------

public static String join (String[] r, String d) { 
    if (r.length == 0) 
        return ""; 
      
    String sep = ""; 
    StringBuilder sb = new StringBuilder(); 
      
    for (String e : r) { 
        sb.append(sep).append(e); 
        sep = d; 
    } 
    return sb.toString(); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
644
4
Gpt3D_Clone644_4.java 1 11
Gpt3D_Clone644_4.java 12 25
----------------------------------------

public static String join (String r [], String d) {
    if (r.length == 0) return "";
    StringBuilder sb = new StringBuilder ();
    int i;
    for (i = 0; i < r.length - 1; i ++) {
        sb.append (r [i]);
        sb.append (d);
    }
    sb.append (r [i]);
    return sb.toString ();
}
----------------------------------------

public static String join(String[] arr, String delim) {
    if(arr.length == 0) 
        return "";
    
    StringBuilder stringBuilder = new StringBuilder(arr[0]);
    for (int i = 1; i < arr.length; i++) {
        stringBuilder.append(delim);
        stringBuilder.append(arr[i]);
    }
    
    return stringBuilder.toString();
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
644
5
Gpt3D_Clone644_5.java 1 11
Gpt3D_Clone644_5.java 12 23
----------------------------------------

public static String join (String r [], String d) {
    if (r.length == 0) return "";
    StringBuilder sb = new StringBuilder ();
    int i;
    for (i = 0; i < r.length - 1; i ++) {
        sb.append (r [i]);
        sb.append (d);
    }
    sb.append (r [i]);
    return sb.toString ();
}
----------------------------------------

public static String join (String [] r, String d) { 
    if (r.length == 0) return "";
    
    String str = r[0];
    for (int i = 1; i < r.length; i++) {
        str = str.concat(d + r[i]);
    }
    
    return str;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
646
0
Gpt3D_Clone646_0.java 1 9
Gpt3D_Clone646_0.java 10 20
----------------------------------------

public static void main (String [] args) {
    String set = new java.util.BitSet () {
        {
            set (1, 100 + 1);
        }
    }
    .toString ();
    System.out.append (set, 1, set.length () - 1);
}
----------------------------------------

 public static void main(String[] args) 
{ 
    BitSet set = new BitSet(100); 
    set.set(1); 
    for (int i=2; i<=100; i++) {
        set.set(i,set.get(i-1)); 
    } 
    System.out.println(set.toString().substring(1, set.toString().length() -1)); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
646
1
Gpt3D_Clone646_1.java 1 9
Gpt3D_Clone646_1.java 10 20
----------------------------------------

public static void main (String [] args) {
    String set = new java.util.BitSet () {
        {
            set (1, 100 + 1);
        }
    }
    .toString ();
    System.out.append (set, 1, set.length () - 1);
}
----------------------------------------

 public static void main(String[] args) 
{ 
   BitSet set = new BitSet(101);
    for (int i= 0; i<=100; i++) {
        set.clear(i); 
    }
    set.set(1,101); 
    System.out.println(set); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
646
2
Gpt3D_Clone646_2.java 1 9
Gpt3D_Clone646_2.java 10 18
----------------------------------------

public static void main (String [] args) {
    String set = new java.util.BitSet () {
        {
            set (1, 100 + 1);
        }
    }
    .toString ();
    System.out.append (set, 1, set.length () - 1);
}
----------------------------------------

  public static void main(String[] args) 
{ 
    BitSet set = new BitSet(101); 
    set.clear(0,100); 
    set.set(1,101); 
    System.out.println(set.toString().substring(1, set.toString().length() -1)); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
646
3
Gpt3D_Clone646_3.java 1 9
Gpt3D_Clone646_3.java 10 19
----------------------------------------

public static void main (String [] args) {
    String set = new java.util.BitSet () {
        {
            set (1, 100 + 1);
        }
    }
    .toString ();
    System.out.append (set, 1, set.length () - 1);
}
----------------------------------------

public static void main(String[] args) 
{ 
    BitSet set = new BitSet(); 
    for (int i= 0; i<=100; i++){
        set.set(i); 
    }
    System.out.println(set); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
646
4
Gpt3D_Clone646_4.java 1 9
Gpt3D_Clone646_4.java 10 19
----------------------------------------

public static void main (String [] args) {
    String set = new java.util.BitSet () {
        {
            set (1, 100 + 1);
        }
    }
    .toString ();
    System.out.append (set, 1, set.length () - 1);
}
----------------------------------------

 public static void main(String[] args) 
{ 
    BitSet set = new BitSet(101); 
    for (int i= 0; i<=100; i++) {
        set.set(i,true); 
    }
    System.out.println(set.toString().substring(1)); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
646
5
Gpt3D_Clone646_5.java 1 9
Gpt3D_Clone646_5.java 10 19
----------------------------------------

public static void main (String [] args) {
    String set = new java.util.BitSet () {
        {
            set (1, 100 + 1);
        }
    }
    .toString ();
    System.out.append (set, 1, set.length () - 1);
}
----------------------------------------

  public static void main(String[] args) 
{ 
    BitSet set = new BitSet(); 
    for (int i= 0; i<=100; i++) {
        set.set(i,true); 
    }
    System.out.println(set.toString().substring(1, set.toString().length() -1)); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
646
6
Gpt3D_Clone646_6.java 1 9
Gpt3D_Clone646_6.java 10 20
----------------------------------------

public static void main (String [] args) {
    String set = new java.util.BitSet () {
        {
            set (1, 100 + 1);
        }
    }
    .toString ();
    System.out.append (set, 1, set.length () - 1);
}
----------------------------------------

 public static void main(String[] args) 
{ 
    BitSet set = new BitSet(101); 
    for (int i= 0; i<=100; i++) {
        set.set(i);    
    }
    System.out.println(set.toString().substring(1)); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
646
7
Gpt3D_Clone646_7.java 1 9
Gpt3D_Clone646_7.java 10 19
----------------------------------------

public static void main (String [] args) {
    String set = new java.util.BitSet () {
        {
            set (1, 100 + 1);
        }
    }
    .toString ();
    System.out.append (set, 1, set.length () - 1);
}
----------------------------------------

public static void main(String[] args) 
{ 
    BitSet set = new BitSet(101); 
    for (int i=1; i<=100; i++){
        set.set(i); 
    }
    System.out.println(set.toString().substring(1, set.toString().length() -1)); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
646
8
Gpt3D_Clone646_8.java 1 9
Gpt3D_Clone646_8.java 10 17
----------------------------------------

public static void main (String [] args) {
    String set = new java.util.BitSet () {
        {
            set (1, 100 + 1);
        }
    }
    .toString ();
    System.out.append (set, 1, set.length () - 1);
}
----------------------------------------

 public static void main(String[] args) 
{ 
    BitSet set = new BitSet(101); 
    set.set(1,101); 
    System.out.println(set.toString()); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
647
0
Gpt3D_Clone647_0.java 1 3
Gpt3D_Clone647_0.java 4 9
----------------------------------------

        public void run () {
            System.out.println (++ n);
}
----------------------------------------

 public void run () {
            System.out.println (n++);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
648
0
Gpt3D_Clone648_0.java 1 3
Gpt3D_Clone648_0.java 4 10
----------------------------------------

        public String toString () {
            return Integer.toString (++ count);
}
----------------------------------------

  public String toString() {
        int x = ++count;
        return "Counter is currently at "+x;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
648
1
Gpt3D_Clone648_1.java 1 3
Gpt3D_Clone648_1.java 4 9
----------------------------------------

        public String toString () {
            return Integer.toString (++ count);
}
----------------------------------------

 public String toString() {
        int x = count + 1;
        return "The current counter value is "+x;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
648
2
Gpt3D_Clone648_2.java 1 3
Gpt3D_Clone648_2.java 4 9
----------------------------------------

        public String toString () {
            return Integer.toString (++ count);
}
----------------------------------------

  public String toString() {
        int x = count++;
        return "The number of incrementation = "+x;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
648
3
Gpt3D_Clone648_3.java 1 3
Gpt3D_Clone648_3.java 4 9
----------------------------------------

        public String toString () {
            return Integer.toString (++ count);
}
----------------------------------------

  public String toString() {
        int x = ++count;
        return "The counter was just incremented to "+x;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
648
4
Gpt3D_Clone648_4.java 1 3
Gpt3D_Clone648_4.java 4 9
----------------------------------------

        public String toString () {
            return Integer.toString (++ count);
}
----------------------------------------

  public String toString() {
        int x = count+1;
        return "Number has now incremented to "+x;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
648
5
Gpt3D_Clone648_5.java 1 3
Gpt3D_Clone648_5.java 4 8
----------------------------------------

        public String toString () {
            return Integer.toString (++ count);
}
----------------------------------------

  public String toString() {
        return "Number is now "+ count++;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
648
6
Gpt3D_Clone648_6.java 1 3
Gpt3D_Clone648_6.java 4 8
----------------------------------------

        public String toString () {
            return Integer.toString (++ count);
}
----------------------------------------

  public String toString() {
        return "The counter is now at "+(count+1);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
648
7
Gpt3D_Clone648_7.java 1 3
Gpt3D_Clone648_7.java 4 8
----------------------------------------

        public String toString () {
            return Integer.toString (++ count);
}
----------------------------------------

  public String toString() {
        return "Counter incremented to: "+ ++count;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
648
8
Gpt3D_Clone648_8.java 1 3
Gpt3D_Clone648_8.java 4 8
----------------------------------------

        public String toString () {
            return Integer.toString (++ count);
}
----------------------------------------

  public String toString() {
        return "Incremented counter is now at "+ (count+1);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
648
9
Gpt3D_Clone648_9.java 1 3
Gpt3D_Clone648_9.java 4 8
----------------------------------------

        public String toString () {
            return Integer.toString (++ count);
}
----------------------------------------

  public String toString() {
        return "Incrementing counter: "+ (++ count);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
649
0
Gpt3D_Clone649_0.java 1 5
Gpt3D_Clone649_0.java 6 18
----------------------------------------

        void go () {
            acquireUninterruptibly ();
            System.err.println (max - availablePermits ());
            go ();
}
----------------------------------------

 void go() {
	  ReentrantLock lock = new ReentrantLock();
	  lock.lock();
	  try {
	    acquireUninterruptibly();
	    System.err.println(max - availablePermits());
	    go();
	  } finally {
	    lock.unlock();
	  }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
651
0
Gpt3D_Clone651_0.java 1 3
Gpt3D_Clone651_0.java 4 10
----------------------------------------

        public String toString () {
            return Integer.toString (++ count);
}
----------------------------------------

 public String toString() {
       int temp = count;
       count = temp + 1;
       return Integer.toString(temp+1);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
651
1
Gpt3D_Clone651_1.java 1 3
Gpt3D_Clone651_1.java 4 10
----------------------------------------

        public String toString () {
            return Integer.toString (++ count);
}
----------------------------------------

  public String toString() {
       int currentCount = count + 1;
       count = currentCount;
       return Integer.toString(currentCount);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
651
2
Gpt3D_Clone651_2.java 1 3
Gpt3D_Clone651_2.java 4 10
----------------------------------------

        public String toString () {
            return Integer.toString (++ count);
}
----------------------------------------

  public String toString() {
       count++;
       int nextCount = count;
       return Integer.toString(nextCount);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
651
3
Gpt3D_Clone651_3.java 1 3
Gpt3D_Clone651_3.java 4 10
----------------------------------------

        public String toString () {
            return Integer.toString (++ count);
}
----------------------------------------

  public String toString() {
       int temp = count + 1;
       count++;
       return temp + " called";
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
651
4
Gpt3D_Clone651_4.java 1 3
Gpt3D_Clone651_4.java 4 10
----------------------------------------

        public String toString () {
            return Integer.toString (++ count);
}
----------------------------------------

  public String toString() {
       int c = count;
       count++;
       return String.valueOf(c+1);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
651
5
Gpt3D_Clone651_5.java 1 3
Gpt3D_Clone651_5.java 4 10
----------------------------------------

        public String toString () {
            return Integer.toString (++ count);
}
----------------------------------------

  public String toString() {
       int val = count + 1;
       count = val;
       return Integer.toString(val);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
651
6
Gpt3D_Clone651_6.java 1 3
Gpt3D_Clone651_6.java 4 9
----------------------------------------

        public String toString () {
            return Integer.toString (++ count);
}
----------------------------------------

  public String toString() {
       count++;
       return Integer.toString(count);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
651
7
Gpt3D_Clone651_7.java 1 3
Gpt3D_Clone651_7.java 4 9
----------------------------------------

        public String toString () {
            return Integer.toString (++ count);
}
----------------------------------------

  public String toString() {
       count= count + 1;
       return String.valueOf(count);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
651
8
Gpt3D_Clone651_8.java 1 3
Gpt3D_Clone651_8.java 4 8
----------------------------------------

        public String toString () {
            return Integer.toString (++ count);
}
----------------------------------------

  public String toString() {
       return "This method has been called " + Integer.toString(++count) + " times";
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
651
9
Gpt3D_Clone651_9.java 1 3
Gpt3D_Clone651_9.java 4 8
----------------------------------------

        public String toString () {
            return Integer.toString (++ count);
}
----------------------------------------

  public String toString() {
       return Integer.toString(count+1) + " times called";
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
655
0
Gpt3D_Clone655_0.java 1 5
Gpt3D_Clone655_0.java 6 16
----------------------------------------

        void go () {
            acquireUninterruptibly ();
            System.err.println (max - availablePermits ());
            go ();
}
----------------------------------------

 void go() { 
    acquireUninterruptibly(); 
    int remain = max - availablePermits(); 
    if (remain > 0) { 
        System.err.println("Remaining permits: " + remain); 
        release(remain); 
    } 
    go();   
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
655
1
Gpt3D_Clone655_1.java 1 5
Gpt3D_Clone655_1.java 6 16
----------------------------------------

        void go () {
            acquireUninterruptibly ();
            System.err.println (max - availablePermits ());
            go ();
}
----------------------------------------

 void go() { 
    acquireUninterruptibly ();
    int remain = max - availablePermits (); 
    if (remain > 0) { 
        System.err.println (String.format ( "There are still %d permits to go.", remain )); 
        release (remain); 
    } 
    go (); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
655
2
Gpt3D_Clone655_2.java 1 5
Gpt3D_Clone655_2.java 6 17
----------------------------------------

        void go () {
            acquireUninterruptibly ();
            System.err.println (max - availablePermits ());
            go ();
}
----------------------------------------

 void go() { 
    while (true) { 
        acquireUninterruptibly(); 
        int remain = max - availablePermits(); 
        if (remain > 0) { 
            System.err.println("Remaining permits: " + remain); 
            release(remain); 
        } 
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
655
3
Gpt3D_Clone655_3.java 1 5
Gpt3D_Clone655_3.java 6 15
----------------------------------------

        void go () {
            acquireUninterruptibly ();
            System.err.println (max - availablePermits ());
            go ();
}
----------------------------------------

 void go() { 
    acquireUninterruptibly ();
    int remain = max - availablePermits (); 
    String message = String.format ( "There are %d remaining permits.", remain ); 
    System.err.println(message); 
    release (remain); 
    go (); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
655
4
Gpt3D_Clone655_4.java 1 5
Gpt3D_Clone655_4.java 6 16
----------------------------------------

        void go () {
            acquireUninterruptibly ();
            System.err.println (max - availablePermits ());
            go ();
}
----------------------------------------

 void go() { 
    acquireUninterruptibly(); 
    int permits = availablePermits(); 
    if(permits!=max) { 
        System.err.println("Remaining permits: " + (max - permits)); 
        release(max-permits); 
    } 
    go(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
655
5
Gpt3D_Clone655_5.java 1 5
Gpt3D_Clone655_5.java 6 15
----------------------------------------

        void go () {
            acquireUninterruptibly ();
            System.err.println (max - availablePermits ());
            go ();
}
----------------------------------------

 void go() { 
    acquireUninterruptibly(); 
    while(availablePermits() < max) { 
        release(1); 
    } 
    System.err.println("Remaining permits: " + (max - availablePermits())); 
    go(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
655
6
Gpt3D_Clone655_6.java 1 5
Gpt3D_Clone655_6.java 6 14
----------------------------------------

        void go () {
            acquireUninterruptibly ();
            System.err.println (max - availablePermits ());
            go ();
}
----------------------------------------

 void go() { 
    acquireUninterruptibly ();
    int remain = max - availablePermits (); 
    System.err.println (String.format ( "There are %d more permits to acquire.", remain )); 
    release (remain); 
    go (); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
655
7
Gpt3D_Clone655_7.java 1 5
Gpt3D_Clone655_7.java 6 14
----------------------------------------

        void go () {
            acquireUninterruptibly ();
            System.err.println (max - availablePermits ());
            go ();
}
----------------------------------------

 void go() { 
    acquireUninterruptibly ();
    int remain = max - availablePermits (); 
    System.err.println (String.format ( "There are %d remaining permits.", remain )); 
    release (remain); 
    go (); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
655
8
Gpt3D_Clone655_8.java 1 5
Gpt3D_Clone655_8.java 6 15
----------------------------------------

        void go () {
            acquireUninterruptibly ();
            System.err.println (max - availablePermits ());
            go ();
}
----------------------------------------

  void go() { 
    acquireUninterruptibly(); 
    long remain = max - availablePermits(); 
    System.err.println("Remaining permits: " + remain); 
    release(remain); 
    go(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
656
0
Gpt3D_Clone656_0.java 1 14
Gpt3D_Clone656_0.java 15 37
----------------------------------------

public static String myTrim (String input, String list) {
    String r = "";
    for (int i = 0;
    i < input.length (); i ++) {
        int k = 0;
        for (; k < list.length (); k ++) {
            if (input.charAt (i) == list.charAt (k)) {
                break;
            }
        }
        if (k == list.length ()) r += input.charAt (i);
    }
    return r;
}
----------------------------------------

 public static String myTrim(String input, String list) {
    char[] inputCharacters = input.toCharArray();
    char[] listCharacters = list.toCharArray();
    StringBuilder result = new StringBuilder();
    for (int i = 0; i < inputCharacters.length; i++) {
        boolean isInList = false;
        for (int j = 0; j < listCharacters.length; j++) {
            if (listCharacters[j] == inputCharacters[i]) {
                isInList = true;
                break;
            }
        }
        if (!isInList) {
            result.append(inputCharacters[i]);
        }
    }
    return result.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
656
1
Gpt3D_Clone656_1.java 1 14
Gpt3D_Clone656_1.java 15 41
----------------------------------------

public static String myTrim (String input, String list) {
    String r = "";
    for (int i = 0;
    i < input.length (); i ++) {
        int k = 0;
        for (; k < list.length (); k ++) {
            if (input.charAt (i) == list.charAt (k)) {
                break;
            }
        }
        if (k == list.length ()) r += input.charAt (i);
    }
    return r;
}
----------------------------------------

 public static String myTrim(String input, String list)
{
    StringBuilder output = new StringBuilder();
    for(int i=0; i < input.length(); i++)
    {
        char currentChar = input.charAt(i);
        boolean found = false;
        for(int k=0; k < list.length(); k++)
        {
            char targetChar = list.charAt(k);
            if(currentChar == targetChar)
            {
                found = true;
                break;
            }
        }
        if(!found)
        {
            output.append(currentChar);
        }
    }
    return output.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
656
2
Gpt3D_Clone656_2.java 1 14
Gpt3D_Clone656_2.java 15 36
----------------------------------------

public static String myTrim (String input, String list) {
    String r = "";
    for (int i = 0;
    i < input.length (); i ++) {
        int k = 0;
        for (; k < list.length (); k ++) {
            if (input.charAt (i) == list.charAt (k)) {
                break;
            }
        }
        if (k == list.length ()) r += input.charAt (i);
    }
    return r;
}
----------------------------------------

 public static String myTrim(String input, String list) 
{
    char[] s = input.toCharArray();
    char[] t = list.toCharArray();
    String result = "";
    for (int i=0;i<s.length;i++) {
        boolean flag = true;
        for (int j=0;j<t.length;j++) {
            if (s[i] == t[j])
            {
                flag = false;
                break;
            }
        }
        if (flag) { 
            result +=s[i];
        }
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
656
4
Gpt3D_Clone656_4.java 1 14
Gpt3D_Clone656_4.java 15 36
----------------------------------------

public static String myTrim (String input, String list) {
    String r = "";
    for (int i = 0;
    i < input.length (); i ++) {
        int k = 0;
        for (; k < list.length (); k ++) {
            if (input.charAt (i) == list.charAt (k)) {
                break;
            }
        }
        if (k == list.length ()) r += input.charAt (i);
    }
    return r;
}
----------------------------------------

 public static String myTrim(String input, String list) {
    char[] inputArray = input.toCharArray();
    char[] listArray = list.toCharArray();
    StringBuilder resultString = new StringBuilder();
    for (int i = 0; i < inputArray.length; i++) {
        boolean isFound = false;
        for (char letter : listArray) {
            if (letter == inputArray[i]) {
                isFound = true;
                break;
            }
        }
        if (!isFound) {
            resultString.append(inputArray[i]);
        }
    }
    return resultString.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
656
5
Gpt3D_Clone656_5.java 1 14
Gpt3D_Clone656_5.java 15 40
----------------------------------------

public static String myTrim (String input, String list) {
    String r = "";
    for (int i = 0;
    i < input.length (); i ++) {
        int k = 0;
        for (; k < list.length (); k ++) {
            if (input.charAt (i) == list.charAt (k)) {
                break;
            }
        }
        if (k == list.length ()) r += input.charAt (i);
    }
    return r;
}
----------------------------------------

 public static String myTrim(String input, String list)
{
    StringBuilder resultBuilder = new StringBuilder();
    for(char c : input.toCharArray())
    {
        boolean isContained = false;
        
        for(int i=0; i < list.length(); i++)
        {
            if(c == list.charAt(i))
            {
                isContained = true;
            }
        }
        
        if(!isContained)
        {
            resultBuilder.append(c);
        }
    }
    
    return resultBuilder.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
656
6
Gpt3D_Clone656_6.java 1 14
Gpt3D_Clone656_6.java 15 28
----------------------------------------

public static String myTrim (String input, String list) {
    String r = "";
    for (int i = 0;
    i < input.length (); i ++) {
        int k = 0;
        for (; k < list.length (); k ++) {
            if (input.charAt (i) == list.charAt (k)) {
                break;
            }
        }
        if (k == list.length ()) r += input.charAt (i);
    }
    return r;
}
----------------------------------------

 public static String myTrim(String input, String list)
{
    StringBuilder trimmedString = new StringBuilder();
    for (char letter : input.toCharArray())
    {
        if (!list.contains(String.valueOf(letter)))
        {
            trimmedString.append(letter);
        }
    }
    return trimmedString.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
657
0
Gpt3D_Clone657_0.java 1 16
Gpt3D_Clone657_0.java 17 33
----------------------------------------

public void show (String columnName) {
    Object o = hiddenColumns.remove (columnName);
    if (o == null) {
        return;
    }
    tcm.addColumn ((TableColumn) o);
    o = hiddenColumns.remove (":" + columnName);
    if (o == null) {
        return;
    }
    int column = ((Integer) o).intValue ();
    int lastColumn = tcm.getColumnCount () - 1;
    if (column < lastColumn) {
        tcm.moveColumn (lastColumn, column);
    }
}
----------------------------------------

 public void show (String columnName) {
	  Object removedObject = hiddenColumns.remove(columnName);
	  if(removedObject != null){
	      TableColumn castRemovedObject = (TableColumn)removedObject;
	      tcm.addColumn(castRemovedObject);
	  }
	  Object removedObject2 = hiddenColumns.remove(":"+ columnName);
	  if (removedObject2 != null) {
	      int column = ((Integer)removedObject2).intValue();
	      int lastColumn = tcm.getColumnCount() - 1;
	      if (column < lastColumn) {
		tcm.moveColumn(lastColumn, column);
	      } 
	  } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
657
1
Gpt3D_Clone657_1.java 1 16
Gpt3D_Clone657_1.java 17 37
----------------------------------------

public void show (String columnName) {
    Object o = hiddenColumns.remove (columnName);
    if (o == null) {
        return;
    }
    tcm.addColumn ((TableColumn) o);
    o = hiddenColumns.remove (":" + columnName);
    if (o == null) {
        return;
    }
    int column = ((Integer) o).intValue ();
    int lastColumn = tcm.getColumnCount () - 1;
    if (column < lastColumn) {
        tcm.moveColumn (lastColumn, column);
    }
}
----------------------------------------

 public void show (String columnName){
	  Object removedObject = hiddenColumns.remove(columnName);
	  
	  if(removedObject != null){
	    TableColumn castObject = (TableColumn)removedObject;
	    tcm.addColumn(castObject);
	  }
	  
	  Object removedObject2 = hiddenColumns.remove(":"+columnName);
	  if(removedObject2 != null){
	    int column = ((Integer)removedObject2).intValue();
	    int lastColumn = tcm.getColumnCount()-1;
	    
	    if(column<lastColumn){
	      tcm.moveColumn(lastColumn,column);
	    }
	  }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
657
2
Gpt3D_Clone657_2.java 1 16
Gpt3D_Clone657_2.java 17 37
----------------------------------------

public void show (String columnName) {
    Object o = hiddenColumns.remove (columnName);
    if (o == null) {
        return;
    }
    tcm.addColumn ((TableColumn) o);
    o = hiddenColumns.remove (":" + columnName);
    if (o == null) {
        return;
    }
    int column = ((Integer) o).intValue ();
    int lastColumn = tcm.getColumnCount () - 1;
    if (column < lastColumn) {
        tcm.moveColumn (lastColumn, column);
    }
}
----------------------------------------

 public void show(String columnName){
	  Object removedObject = hiddenColumns.remove(columnName);
	  
	  if(removedObject != null){
	    TableColumn castRemovedObject = (TableColumn)removedObject;
	    tcm.addColumn(castRemovedObject);
	    
	    Object removedObject2 = hiddenColumns.remove(":"+ columnName);
	    if(removedObject2 != null){
	      int column = ((Integer)removedObject2).intValue();
	      int lastColumn = tcm.getColumnCount() - 1;
	      
	      if(column < lastColumn){
		tcm.moveColumn(lastColumn, column);
	      }
	    }
	  }
  
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
657
3
Gpt3D_Clone657_3.java 1 16
Gpt3D_Clone657_3.java 17 33
----------------------------------------

public void show (String columnName) {
    Object o = hiddenColumns.remove (columnName);
    if (o == null) {
        return;
    }
    tcm.addColumn ((TableColumn) o);
    o = hiddenColumns.remove (":" + columnName);
    if (o == null) {
        return;
    }
    int column = ((Integer) o).intValue ();
    int lastColumn = tcm.getColumnCount () - 1;
    if (column < lastColumn) {
        tcm.moveColumn (lastColumn, column);
    }
}
----------------------------------------

 public void show(String columnName){
	  Object removedObject = hiddenColumns.remove(columnName);
	  if(removedObject != null){
	    TableColumn castObject = (TableColumn)removedObject;
	    tcm.addColumn(castObject);
	  }
	  Object removedObject2 = hiddenColumns.remove(":"+columnName);
	  if(removedObject2 != null){
	    int column = ((Integer)removedObject2).intValue();
	    int lastColumn = tcm.getColumnCount()-1;
	    if(column<lastColumn){
	      tcm.moveColumn(lastColumn,column);
	    }
	  }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
657
4
Gpt3D_Clone657_4.java 1 16
Gpt3D_Clone657_4.java 17 33
----------------------------------------

public void show (String columnName) {
    Object o = hiddenColumns.remove (columnName);
    if (o == null) {
        return;
    }
    tcm.addColumn ((TableColumn) o);
    o = hiddenColumns.remove (":" + columnName);
    if (o == null) {
        return;
    }
    int column = ((Integer) o).intValue ();
    int lastColumn = tcm.getColumnCount () - 1;
    if (column < lastColumn) {
        tcm.moveColumn (lastColumn, column);
    }
}
----------------------------------------

 public void show (String columnName) {
    Object o = hiddenColumns.remove(columnName);
    if (o != null) {
        TableColumn castedObject = (TableColumn) o;
        tcm.addColumn(castedObject);
        Object o2 = hiddenColumns.remove(":" + columnName);
        if (o2 != null) {
            int column = ((Integer) o2).intValue();
            int lastColumn = tcm.getColumnCount() - 1;
            if (column < lastColumn) {
                tcm.moveColumn(lastColumn, column);
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
657
5
Gpt3D_Clone657_5.java 1 16
Gpt3D_Clone657_5.java 17 37
----------------------------------------

public void show (String columnName) {
    Object o = hiddenColumns.remove (columnName);
    if (o == null) {
        return;
    }
    tcm.addColumn ((TableColumn) o);
    o = hiddenColumns.remove (":" + columnName);
    if (o == null) {
        return;
    }
    int column = ((Integer) o).intValue ();
    int lastColumn = tcm.getColumnCount () - 1;
    if (column < lastColumn) {
        tcm.moveColumn (lastColumn, column);
    }
}
----------------------------------------

 public void show(String columnName){
	  Object o = hiddenColumns.remove(columnName);
	  
	  if(o != null){
	    TableColumn castedObject = (TableColumn)o;
	    tcm.addColumn(castedObject);
	    
	    Object o2 = hiddenColumns.remove(":"+columnName);
	    
	    if(o2 != null){
	      int column = ((Integer)o2).intValue();
	      int lastCol = tcm.getColumnCount()-1;
	      
	      if(column < lastCol){
		tcm.moveColumn(lastCol, column);
	      }
	    }
	  }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
657
6
Gpt3D_Clone657_6.java 1 16
Gpt3D_Clone657_6.java 17 33
----------------------------------------

public void show (String columnName) {
    Object o = hiddenColumns.remove (columnName);
    if (o == null) {
        return;
    }
    tcm.addColumn ((TableColumn) o);
    o = hiddenColumns.remove (":" + columnName);
    if (o == null) {
        return;
    }
    int column = ((Integer) o).intValue ();
    int lastColumn = tcm.getColumnCount () - 1;
    if (column < lastColumn) {
        tcm.moveColumn (lastColumn, column);
    }
}
----------------------------------------

 public void show(String columnName) {
	  Object removedObject = hiddenColumns.remove(columnName);
	  if(removedObject != null) {
	    TableColumn castRemovedObject = (TableColumn)removedObject;
	    tcm.addColumn(castRemovedObject);
	    Object removedObject2 = hiddenColumns.remove(":" + columnName);
	    if (removedObject2 != null) {
	      int column = ((Integer)removedObject2).intValue();
	      int lastColumn = tcm.getColumnCount() - 1;
	      if (column < lastColumn) {
		tcm.moveColumn(lastColumn, column);
	      }
	    }
	  }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
657
7
Gpt3D_Clone657_7.java 1 16
Gpt3D_Clone657_7.java 17 33
----------------------------------------

public void show (String columnName) {
    Object o = hiddenColumns.remove (columnName);
    if (o == null) {
        return;
    }
    tcm.addColumn ((TableColumn) o);
    o = hiddenColumns.remove (":" + columnName);
    if (o == null) {
        return;
    }
    int column = ((Integer) o).intValue ();
    int lastColumn = tcm.getColumnCount () - 1;
    if (column < lastColumn) {
        tcm.moveColumn (lastColumn, column);
    }
}
----------------------------------------

 public void show (String columnName) {
	  Object removedObject = hiddenColumns.remove(columnName);
	  if (removedObject != null) {
	    TableColumn castRemovedObject = (TableColumn)removedObject;
	    tcm.addColumn (castRemovedObject);
	  }
	  Object removedObject2 = hiddenColumns.remove(":"+columnName);
	  if (removedObject2 != null) {
	    int column = ((Integer)removedObject2).intValue();
	    int lastColumn = tcm.getColumnCount() - 1;
	    if (column < lastColumn) {
	      tcm.moveColumn(lastColumn,column);
	    }
	  }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
657
8
Gpt3D_Clone657_8.java 1 16
Gpt3D_Clone657_8.java 17 33
----------------------------------------

public void show (String columnName) {
    Object o = hiddenColumns.remove (columnName);
    if (o == null) {
        return;
    }
    tcm.addColumn ((TableColumn) o);
    o = hiddenColumns.remove (":" + columnName);
    if (o == null) {
        return;
    }
    int column = ((Integer) o).intValue ();
    int lastColumn = tcm.getColumnCount () - 1;
    if (column < lastColumn) {
        tcm.moveColumn (lastColumn, column);
    }
}
----------------------------------------

 public void show (String columnName) {
    Object removedObject = hiddenColumns.remove (columnName);
    if (removedObject != null) {
        TableColumn castObject = (TableColumn) removedObject;
        tcm.addColumn (castObject);
        Object secondRemovedObject = hiddenColumns.remove (":"+columnName);
        if (secondRemovedObject != null) {
            int column = ((Integer) secondRemovedObject).intValue;
            int lastColumn = tcm.getColumnCount () - 1;
            if (column < lastColumn) {
                tcm.moveColumn (lastColumn, column);
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
657
9
Gpt3D_Clone657_9.java 1 16
Gpt3D_Clone657_9.java 17 34
----------------------------------------

public void show (String columnName) {
    Object o = hiddenColumns.remove (columnName);
    if (o == null) {
        return;
    }
    tcm.addColumn ((TableColumn) o);
    o = hiddenColumns.remove (":" + columnName);
    if (o == null) {
        return;
    }
    int column = ((Integer) o).intValue ();
    int lastColumn = tcm.getColumnCount () - 1;
    if (column < lastColumn) {
        tcm.moveColumn (lastColumn, column);
    }
}
----------------------------------------

 public void show(String columnName){
	  Object removedObject = hiddenColumns.remove(columnName);
	  if(removedObject != null) {
	    TableColumn castObject = (TableColumn)removedObject;
	    tcm.addColumn(castObject);
	    Object removedObject2 = hiddenColumns.remove(":"+columnName);
	  
	    if (removedObject2 != null){
	      int column = ((Integer)removedObject2).intValue();
	      int lastColumn = tcm.getColumnCount() - 1;
	      if(column < lastColumn){
		tcm.moveColumn(lastColumn,column);
	      } 
	    } 
	  }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
658
0
Gpt3D_Clone658_0.java 1 10
Gpt3D_Clone658_0.java 11 29
----------------------------------------

private static char findFirstCharacter (String s) {
    HashSet < Character > unique = new LinkedHashSet < > (), seen = new HashSet < > ();
    for (int i = 0;
    i < s.length (); i ++) {
        char c = s.charAt (i);
        if (seen.add (c)) unique.add (c);
        else unique.remove (c);
    }
    return unique.isEmpty () ? '_' : unique.iterator ().next ();
}
----------------------------------------

 private static Character findFirstCharacter (String s) { 
    Set<Character> seen = new HashSet<Character>();
    Set<Character> single = new HashSet<Character>();
    for (int i=0; i < s.length(); i++) {
        char c = s.charAt(i);
        if (seen.contains(c)) {
            single.remove(c);
        } else {
            seen.add(c);
            single.add(c);
        }
    }
    if (!single.isEmpty()) {
        return single.iterator().next();
    }
    return '_';
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
658
1
Gpt3D_Clone658_1.java 1 10
Gpt3D_Clone658_1.java 11 35
----------------------------------------

private static char findFirstCharacter (String s) {
    HashSet < Character > unique = new LinkedHashSet < > (), seen = new HashSet < > ();
    for (int i = 0;
    i < s.length (); i ++) {
        char c = s.charAt (i);
        if (seen.add (c)) unique.add (c);
        else unique.remove (c);
    }
    return unique.isEmpty () ? '_' : unique.iterator ().next ();
}
----------------------------------------

 private static Character findFirstCharacter (String s) { 
    LinkedHashMap<Character, Integer> freq = new LinkedHashMap<>();
    for (int i=0;i<s.length();i++) 
    {  
         char c = s.charAt(i); 
        if(freq.containsKey(c)){
            freq.put(c,freq.get(c)+1);
        }
        else {
            freq.put(c,1);
        }
    } 
    
     for(char c : freq.keySet()) {
        if(freq.get(c) == 1) {
            return c;
        }
     }
return '_'; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
658
2
Gpt3D_Clone658_2.java 1 10
Gpt3D_Clone658_2.java 11 28
----------------------------------------

private static char findFirstCharacter (String s) {
    HashSet < Character > unique = new LinkedHashSet < > (), seen = new HashSet < > ();
    for (int i = 0;
    i < s.length (); i ++) {
        char c = s.charAt (i);
        if (seen.add (c)) unique.add (c);
        else unique.remove (c);
    }
    return unique.isEmpty () ? '_' : unique.iterator ().next ();
}
----------------------------------------

 private static Character findFirstCharacter (String s) { 
    char firstUnique = Character.MAX_VALUE;
    Set<Character> seenChars = new HashSet<>();
    for (int i = 0; i < s.length (); i++) {
        char character = s.charAt (i);
        if (! seenChars.contains (character)) {
            firstUnique = character;
            seenChars.add (character);
        } else {
            firstUnique = Character.MAX_VALUE;
        }
    }
    return firstUnique == Character.MAX_VALUE ? '_' : firstUnique;
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
658
3
Gpt3D_Clone658_3.java 1 10
Gpt3D_Clone658_3.java 11 28
----------------------------------------

private static char findFirstCharacter (String s) {
    HashSet < Character > unique = new LinkedHashSet < > (), seen = new HashSet < > ();
    for (int i = 0;
    i < s.length (); i ++) {
        char c = s.charAt (i);
        if (seen.add (c)) unique.add (c);
        else unique.remove (c);
    }
    return unique.isEmpty () ? '_' : unique.iterator ().next ();
}
----------------------------------------

 private static Character findFirstCharacter (String s) { 
    Character c = Character.MIN_VALUE;
    Set<Character> seenChars = new HashSet<>();
    for (int i = 0; i < s.length (); i++) {
        char character = s.charAt (i);
        if (! seenChars.contains (character)) {
            c = character;
            seenChars.add (character);
        } else {
            c = Character.MIN_VALUE;
        }
    }
    return c == Character.MIN_VALUE ? '_' : c;
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
658
4
Gpt3D_Clone658_4.java 1 10
Gpt3D_Clone658_4.java 11 28
----------------------------------------

private static char findFirstCharacter (String s) {
    HashSet < Character > unique = new LinkedHashSet < > (), seen = new HashSet < > ();
    for (int i = 0;
    i < s.length (); i ++) {
        char c = s.charAt (i);
        if (seen.add (c)) unique.add (c);
        else unique.remove (c);
    }
    return unique.isEmpty () ? '_' : unique.iterator ().next ();
}
----------------------------------------

 private static Character findFirstCharacter (String s) { 
    char firstUnique = '_';
    Set<Character> seenChars = new HashSet<>();
    for (int i = 0; i < s.length (); i++) {
        char character = s.charAt (i);
        if (! seenChars.contains (character)) {
            firstUnique = character;
            seenChars.add (character);
        } else {
            firstUnique = '_';
        }
    }
    return firstUnique;
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
658
5
Gpt3D_Clone658_5.java 1 10
Gpt3D_Clone658_5.java 11 26
----------------------------------------

private static char findFirstCharacter (String s) {
    HashSet < Character > unique = new LinkedHashSet < > (), seen = new HashSet < > ();
    for (int i = 0;
    i < s.length (); i ++) {
        char c = s.charAt (i);
        if (seen.add (c)) unique.add (c);
        else unique.remove (c);
    }
    return unique.isEmpty () ? '_' : unique.iterator ().next ();
}
----------------------------------------

 private static Character findFirstCharacter (String s) { 
    Set<Character> seen = new HashSet<Character>();
    Character f = Character.MAX_VALUE;
    for (int i=0; i < s.length(); i++) {
        char c = s.charAt(i);
        if (seen.contains(c)) {
            if (c < f)
                f = c;
        } else {
            seen.add(c);
        }
    }
    return f == Character.MAX_VALUE ? '_' : f;
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
658
6
Gpt3D_Clone658_6.java 1 10
Gpt3D_Clone658_6.java 11 28
----------------------------------------

private static char findFirstCharacter (String s) {
    HashSet < Character > unique = new LinkedHashSet < > (), seen = new HashSet < > ();
    for (int i = 0;
    i < s.length (); i ++) {
        char c = s.charAt (i);
        if (seen.add (c)) unique.add (c);
        else unique.remove (c);
    }
    return unique.isEmpty () ? '_' : unique.iterator ().next ();
}
----------------------------------------

 private static Character findFirstCharacter (String s) { 
    HashMap<Character, Boolean> map = new HashMap<>(); 
    for (int i = 0; i < s.length(); i++) { 
        char c = s.charAt(i); 
        if (map.containsKey(c)) 
            map.put(c, false); 
        else
            map.put(c, true); 
    } 
    for (int i = 0; i < s.length(); i++) { 
        char c = s.charAt(i); 
        if (map.get(c)) 
            return c; 
    } 
    return '_'; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
658
7
Gpt3D_Clone658_7.java 1 10
Gpt3D_Clone658_7.java 11 27
----------------------------------------

private static char findFirstCharacter (String s) {
    HashSet < Character > unique = new LinkedHashSet < > (), seen = new HashSet < > ();
    for (int i = 0;
    i < s.length (); i ++) {
        char c = s.charAt (i);
        if (seen.add (c)) unique.add (c);
        else unique.remove (c);
    }
    return unique.isEmpty () ? '_' : unique.iterator ().next ();
}
----------------------------------------

 private static Character findFirstCharacter (String s) { 
    LinkedHashSet<Character> seenChars = new LinkedHashSet<>();
    for (int i = 0; i < s.length (); i++ ) {
        char character = s.charAt (i);
        if (seenChars.contains (character)) {
            seenChars.remove (character);
        } else {
            seenChars.add (character);
        }
    }
    return seenChars.isEmpty () ? '_' : seenChars.iterator ().next ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
658
8
Gpt3D_Clone658_8.java 1 10
Gpt3D_Clone658_8.java 11 23
----------------------------------------

private static char findFirstCharacter (String s) {
    HashSet < Character > unique = new LinkedHashSet < > (), seen = new HashSet < > ();
    for (int i = 0;
    i < s.length (); i ++) {
        char c = s.charAt (i);
        if (seen.add (c)) unique.add (c);
        else unique.remove (c);
    }
    return unique.isEmpty () ? '_' : unique.iterator ().next ();
}
----------------------------------------

 private static Character findFirstCharacter (String s) { 
     Map<Character, Integer> countMap = new LinkedHashMap<>();
     for (int i = 0; i < s.length (); i++) {
          char c = s.charAt(i);
          countMap.put(c, countMap.getOrDefault(c, 0) + 1);
     } 
     for (char c : countMap.keySet()) {
          if (countMap.get(c) == 1) return c;
     }
     return '_';
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
659
0
Gpt3D_Clone659_0.java 1 14
Gpt3D_Clone659_0.java 15 31
----------------------------------------

public static void main (String...args) throws Exception {
    List < char [] > myArray = new ArrayList < char [] > ();
    myArray.add ("string1".toCharArray ());
    myArray.add ("string2".toCharArray ());
    myArray.add ("string3".toCharArray ());
    char [] [] charArray2D = myArray.toArray (new char [0] [0]);
    System.out.println (charArray2D.length);
    StringBuilder s = new StringBuilder ();
    for (char [] c : myArray) {
        s.append (String.copyValueOf (c));
    }
    char [] charArray1D = s.toString ().toCharArray ();
    System.out.println (charArray1D.length);
}
----------------------------------------

 public static void main(String... args) throws Exception {
    List<Character[]> myArray = new ArrayList<>();
    myArray.add("string1".chars().mapToObj(c -> (char) c).toArray(Character[]::new));
    myArray.add("string2".chars().mapToObj(c -> (char) c).toArray(Character[]::new));
    myArray.add("string3".chars().mapToObj(c -> (char) c).toArray(Character[]::new));
    Character[][] charArray2D = new Character[myArray.size()][];
    charArray2D = myArray.toArray(charArray2D);
    System.out.println(charArray2D.length);
    StringBuilder s = new StringBuilder();
    for (Character[] c : myArray) {
        s.append(String.valueOf(c));
    }
    char[] charArray1D = s.toString().toCharArray();
    System.out.println(charArray1D.length);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
65
0
Gpt3D_Clone65_0.java 1 3
Gpt3D_Clone65_0.java 4 9
----------------------------------------

        public void run () {
            new LinePanel ().display ();
}
----------------------------------------

 public void drive(){
        LinePanel linePanelInstance = new LinePanel();
        linePanelInstance.display();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
65
1
Gpt3D_Clone65_1.java 1 3
Gpt3D_Clone65_1.java 4 9
----------------------------------------

        public void run () {
            new LinePanel ().display ();
}
----------------------------------------

 public void initiate(){
        LinePanel linePanelInstance = new LinePanel();
        linePanelInstance.display(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
65
2
Gpt3D_Clone65_2.java 1 3
Gpt3D_Clone65_2.java 4 9
----------------------------------------

        public void run () {
            new LinePanel ().display ();
}
----------------------------------------

 public void launch(){
        LinePanel linePanel = new LinePanel();
        linePanel.display();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
65
3
Gpt3D_Clone65_3.java 1 3
Gpt3D_Clone65_3.java 4 9
----------------------------------------

        public void run () {
            new LinePanel ().display ();
}
----------------------------------------

 public void run(){
        LinePanel panelObject = new LinePanel();
        panelObject.display();  
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
65
4
Gpt3D_Clone65_4.java 1 3
Gpt3D_Clone65_4.java 4 9
----------------------------------------

        public void run () {
            new LinePanel ().display ();
}
----------------------------------------

 public void start(){
        LinePanel panel = new LinePanel();
        panel.display();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
65
5
Gpt3D_Clone65_5.java 1 3
Gpt3D_Clone65_5.java 4 9
----------------------------------------

        public void run () {
            new LinePanel ().display ();
}
----------------------------------------

 public void perform(){
        LinePanel linePanelObject = new LinePanel();
        linePanelObject.display();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
663
0
Gpt3D_Clone663_0.java 1 20
Gpt3D_Clone663_0.java 21 41
----------------------------------------

public synchronized void run () {
    int i = 2;
    while (i < 50) {
        while (s.getState () != 1) {
            synchronized (s) {
                try {
                    s.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
        }
        synchronized (s) {
            if (s.getState () == 1) System.out.println ("t2 " + i);
            s.setState (2);
            i = i + 3;
            s.notifyAll ();
        }
    }
}
----------------------------------------

 public synchronized void run () {while (true) {
		synchronized (s) {
		    if (s.getState () == 1) {
		        System.out.println ("t2 " + i);
		        s.setState (2);
		        i = i + 3;
		        s.notifyAll ();
		        break;
		    }
		    else {
		        try {
		            s.wait ();
		        } catch (InterruptedException e) {
		            e.printStackTrace ();
		        }
		    }
		}
	    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
663
2
Gpt3D_Clone663_2.java 1 20
Gpt3D_Clone663_2.java 21 40
----------------------------------------

public synchronized void run () {
    int i = 2;
    while (i < 50) {
        while (s.getState () != 1) {
            synchronized (s) {
                try {
                    s.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
        }
        synchronized (s) {
            if (s.getState () == 1) System.out.println ("t2 " + i);
            s.setState (2);
            i = i + 3;
            s.notifyAll ();
        }
    }
}
----------------------------------------

 public synchronized void run () {while (i < 50) {
        if (s.getState () == 1) {
            synchronized (s) {
                System.out.println ("t2 " + i);
                s.setState (2);
                i = i + 3;
                s.notifyAll ();
            }
        }
        else {
            try {
                s.wait ();
            } catch (InterruptedException e) {
                e.printStackTrace ();
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
665
0
Gpt3D_Clone665_0.java 1 10
Gpt3D_Clone665_0.java 11 26
----------------------------------------

public void run () {
    try {
        for (int i = 0;
        i < 2; i ++) {
            System.out.println ("tic");
        }
    } catch (Exception e) {
        e.getStackTrace ();
    }
}
----------------------------------------

  public void run () {
    boolean proceed = true;
    while(proceed) {
        try {
            for (int i = 0; i < 2; i++){
                System.out.println ("tic");
            }
            proceed = false;
        } catch (Exception e) {
            System.out.println("Error occurred: " + e);
            break;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
667
0
Gpt3D_Clone667_0.java 1 10
Gpt3D_Clone667_0.java 11 29
----------------------------------------

public void run () {
    try {
        for (int i = 0;
        i < 2; i ++) {
            System.out.println ("toe");
        }
    } catch (Exception e) {
        e.getStackTrace ();
    }
}
----------------------------------------

 public static void run() {
        try {
            for(int i = 0; i < 2; i++) {
            if(i == 0) {
                System.out.println("toe");
            }else {
                try{
                    System.out.println("toe");
                }catch(Exception e){
                    e.printStackTrace();
                }
            }
          }
        }catch(Exception e) {
            e.printStackTrace();
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
667
2
Gpt3D_Clone667_2.java 1 10
Gpt3D_Clone667_2.java 11 23
----------------------------------------

public void run () {
    try {
        for (int i = 0;
        i < 2; i ++) {
            System.out.println ("toe");
        }
    } catch (Exception e) {
        e.getStackTrace ();
    }
}
----------------------------------------

 public static void run() {
        try {
            int i = 0;
            do {
                System.out.println("toe");
                i++;
            } while (i < 2);
        } catch (Exception e) {
            e.printStackTrace();
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
667
7
Gpt3D_Clone667_7.java 1 10
Gpt3D_Clone667_7.java 11 22
----------------------------------------

public void run () {
    try {
        for (int i = 0;
        i < 2; i ++) {
            System.out.println ("toe");
        }
    } catch (Exception e) {
        e.getStackTrace ();
    }
}
----------------------------------------

 public static void run() {
       int i = 0;
       while(true) {
            System.out.println("toe");
            i++;
            if(i >= 2) {
                 break;
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
667
8
Gpt3D_Clone667_8.java 1 10
Gpt3D_Clone667_8.java 11 17
----------------------------------------

public void run () {
    try {
        for (int i = 0;
        i < 2; i ++) {
            System.out.println ("toe");
        }
    } catch (Exception e) {
        e.getStackTrace ();
    }
}
----------------------------------------

  public void run () {
        for (int i = 0; i < 2; i ++) {
            System.out.println ("toe");
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
669
3
Gpt3D_Clone669_3.java 1 20
Gpt3D_Clone669_3.java 21 36
----------------------------------------

public synchronized void run () {
    int i = 2;
    while (i < 50) {
        while (s.getState () != 1) {
            synchronized (s) {
                try {
                    s.wait ();
                } catch (InterruptedException e) {
                    e.printStackTrace ();
                }
            }
        }
        synchronized (s) {
            if (s.getState () == 1) System.out.println ("t2 " + i);
            s.setState (2);
            i = i + 3;
            s.notifyAll ();
        }
    }
}
----------------------------------------

 public void run() {
    int i = 2;
    while (i < 50) {
        synchronized (s) {
            while (s.getState () != 1) {
                s.wait ();
            }
            System.out.println ("t2 " + i);
            s.setState (2);
            i = i + 3;
            s.notifyAll ();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
66
0
Gpt3D_Clone66_0.java 1 18
Gpt3D_Clone66_0.java 19 30
----------------------------------------

public void actionPerformed (ActionEvent e) {
    switch (direction) {
        case UP :
            draw.incrementY (false);
            break;
        case DOWN :
            draw.incrementY (true);
            break;
        case LEFT :
            draw.incrementX (false);
            break;
        case RIGHT :
            draw.incrementX (true);
            break;
        default :
            break;
    }
}
----------------------------------------

 public void actionPerformed (ActionEvent e) {if (e.getActionCommand().equals("UP")) { 
	    draw.incrementY(false);
	} else if (e.getActionCommand().equals("DOWN")) {
	    draw.incrementY(true);
	} else if (e.getActionCommand().equals("LEFT")) {
	    draw.incrementX(false);
	} else if (e.getActionCommand().equals("RIGHT")) {
	    draw.incrementX(true);
	}
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
66
1
Gpt3D_Clone66_1.java 1 18
Gpt3D_Clone66_1.java 19 30
----------------------------------------

public void actionPerformed (ActionEvent e) {
    switch (direction) {
        case UP :
            draw.incrementY (false);
            break;
        case DOWN :
            draw.incrementY (true);
            break;
        case LEFT :
            draw.incrementX (false);
            break;
        case RIGHT :
            draw.incrementX (true);
            break;
        default :
            break;
    }
}
----------------------------------------

 public void actionPerformed (ActionEvent e) {if (direction.equalsIgnoreCase("up")) {
	    draw.incrementY(false);
	} else if (direction.equalsIgnoreCase("down")) {
	    draw.incrementY(true);
	} else if (direction.equalsIgnoreCase("left")) {
	    draw.incrementX(false);
	} else if (direction.equalsIgnoreCase("right")) {
	    draw.incrementX(true);
	}
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
66
2
Gpt3D_Clone66_2.java 1 18
Gpt3D_Clone66_2.java 19 30
----------------------------------------

public void actionPerformed (ActionEvent e) {
    switch (direction) {
        case UP :
            draw.incrementY (false);
            break;
        case DOWN :
            draw.incrementY (true);
            break;
        case LEFT :
            draw.incrementX (false);
            break;
        case RIGHT :
            draw.incrementX (true);
            break;
        default :
            break;
    }
}
----------------------------------------

 public void actionPerformed (ActionEvent e) {if (direction.equals(Direction.UP)) {
	    draw.incrementY(false);
	    } else if (direction.equals(Direction.DOWN)) {
	    draw.incrementY(true);
	    } else if (direction.equals(Direction.LEFT)) {
	    draw.incrementX(false);
	    } else if (direction.equals(Direction.RIGHT)) {
	    draw.incrementX(true);
	}
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
66
3
Gpt3D_Clone66_3.java 1 18
Gpt3D_Clone66_3.java 19 33
----------------------------------------

public void actionPerformed (ActionEvent e) {
    switch (direction) {
        case UP :
            draw.incrementY (false);
            break;
        case DOWN :
            draw.incrementY (true);
            break;
        case LEFT :
            draw.incrementX (false);
            break;
        case RIGHT :
            draw.incrementX (true);
            break;
        default :
            break;
    }
}
----------------------------------------

 public void actionPerformed (ActionEvent e) {if(direction == Direction.UP) { 
	    draw.incrementY(false);
	  } 
	  else if(direction == Direction.DOWN) { 
	    draw.incrementY(true);
	  } 
	  else if(direction == Direction.LEFT) {
	    draw.incrementX(false);
	  } 
	  else if(direction == Direction.RIGHT) { 
	    draw.incrementX(true); 
	  }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
66
4
Gpt3D_Clone66_4.java 1 18
Gpt3D_Clone66_4.java 19 30
----------------------------------------

public void actionPerformed (ActionEvent e) {
    switch (direction) {
        case UP :
            draw.incrementY (false);
            break;
        case DOWN :
            draw.incrementY (true);
            break;
        case LEFT :
            draw.incrementX (false);
            break;
        case RIGHT :
            draw.incrementX (true);
            break;
        default :
            break;
    }
}
----------------------------------------

 public void actionPerformed (ActionEvent e) {if (direction == "up" ) {
    draw.incrementY(false);
    } else if (direction == "down") {
    draw.incrementY(true);
    } else if (direction == "left") {
    draw.incrementX(false);
    } else if (direction == "right") {
    draw.incrementX(true);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
673
1
Gpt3D_Clone673_1.java 1 10
Gpt3D_Clone673_1.java 11 24
----------------------------------------

public void run () {
    try {
        for (int i = 0;
        i < 2; i ++) {
            System.out.println ("toe");
        }
    } catch (Exception e) {
        e.getStackTrace ();
    }
}
----------------------------------------

 public void run () {
	  try {
	      int counter = 0;
	      while (counter < 2) {
		  String msg = String.format("toe number %s", counter+1);
		  System.out.println(msg);
		  counter++;
	      }
	  } catch (Exception e) {
	      e.getStackTrace();
	  }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
674
0
Gpt3D_Clone674_0.java 1 9
Gpt3D_Clone674_0.java 10 32
----------------------------------------

public static void main (String [] args) {
    State s = new State ();
    Thread t1 = new Thread (new T1 (s));
    Thread t2 = new Thread (new T2 (s));
    Thread t3 = new Thread (new T3 (s));
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------

 public static void main (String [] args) {
    State s = new State ();
    Thread t1 = new Thread (new Runnable(){
        public void run(){
            new T1 (s);
        }
    });
    Thread t2 = new Thread (new Runnable(){
        public void run(){
            new T2 (s);
        }
    });
    Thread t3 = new Thread (new Runnable(){
        public void run(){
            new T3 (s);
        }
    });
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
674
2
Gpt3D_Clone674_2.java 1 9
Gpt3D_Clone674_2.java 10 23
----------------------------------------

public static void main (String [] args) {
    State s = new State ();
    Thread t1 = new Thread (new T1 (s));
    Thread t2 = new Thread (new T2 (s));
    Thread t3 = new Thread (new T3 (s));
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------

 public static void main (String [] args) {
    State s = new State ();
    Runnable t1 = () -> new T1 (s);
    Runnable t2 = () -> new T2 (s);
    Runnable t3 = () -> new T3 (s);
    Thread thread1 = new Thread (t1);
    Thread thread2 = new Thread (t2);
    Thread thread3 = new Thread (t3);
    thread1.start ();
    thread2.start ();
    thread3.start ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
674
5
Gpt3D_Clone674_5.java 1 9
Gpt3D_Clone674_5.java 10 18
----------------------------------------

public static void main (String [] args) {
    State s = new State ();
    Thread t1 = new Thread (new T1 (s));
    Thread t2 = new Thread (new T2 (s));
    Thread t3 = new Thread (new T3 (s));
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------

public static void main (String [] args) {
    State s = new State ();
    ExecutorService service = Executors.newFixedThreadPool(3);
    service.submit(new T1 (s));
    service.submit(new T2 (s)); 
    service.submit(new T3 (s));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
674
6
Gpt3D_Clone674_6.java 1 9
Gpt3D_Clone674_6.java 10 18
----------------------------------------

public static void main (String [] args) {
    State s = new State ();
    Thread t1 = new Thread (new T1 (s));
    Thread t2 = new Thread (new T2 (s));
    Thread t3 = new Thread (new T3 (s));
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------

public static void main (String [] args) {
    State s = new State ();
    ForkJoinPool fjPool = new ForkJoinPool( 3 );
    fjPool.submit(new T1 (s));
    fjPool.submit(new T2 (s)); 
    fjPool.submit(new T3 (s)); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
674
7
Gpt3D_Clone674_7.java 1 9
Gpt3D_Clone674_7.java 10 18
----------------------------------------

public static void main (String [] args) {
    State s = new State ();
    Thread t1 = new Thread (new T1 (s));
    Thread t2 = new Thread (new T2 (s));
    Thread t3 = new Thread (new T3 (s));
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------

public static void main (String [] args) {
    State s = new State ();
    ThreadPoolExecutor threadPool = (ThreadPoolExecutor) Executors.newFixedThreadPool(3);
    threadPool.execute( new T1 (s));
    threadPool.execute( new T2 (s));
    threadPool.execute( new T3 (s));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
674
8
Gpt3D_Clone674_8.java 1 9
Gpt3D_Clone674_8.java 10 18
----------------------------------------

public static void main (String [] args) {
    State s = new State ();
    Thread t1 = new Thread (new T1 (s));
    Thread t2 = new Thread (new T2 (s));
    Thread t3 = new Thread (new T3 (s));
    t1.start ();
    t2.start ();
    t3.start ();
}
----------------------------------------

public static void main (String [] args) {
    State s = new State ();
    ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(3);
    scheduledExecutorService.scheduleAtFixedRate(new T1 (s), 0, 1, TimeUnit.MILLISECONDS);
    scheduledExecutorService.scheduleAtFixedRate(new T2 (s), 0, 1, TimeUnit.MILLISECONDS);
    scheduledExecutorService.scheduleAtFixedRate(new T3 (s), 0, 1, TimeUnit.MILLISECONDS);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
676
0
Gpt3D_Clone676_0.java 1 10
Gpt3D_Clone676_0.java 11 23
----------------------------------------

public void run () {
    try {
        for (int i = 0;
        i < 2; i ++) {
            System.out.println ("tic");
        }
    } catch (Exception e) {
        e.getStackTrace ();
    }
}
----------------------------------------

 public void run() {
   int counter = 0;
   while (true) {
       if (counter < 2) {
           System.out.println("tic");
           counter++;
       } else {
           break;
       }
   }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
676
5
Gpt3D_Clone676_5.java 1 10
Gpt3D_Clone676_5.java 11 19
----------------------------------------

public void run () {
    try {
        for (int i = 0;
        i < 2; i ++) {
            System.out.println ("tic");
        }
    } catch (Exception e) {
        e.getStackTrace ();
    }
}
----------------------------------------

 public void run() {
    int counter = 0;
    do {
        System.out.println("tic");
        counter++;
    } while (counter < 2);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
676
6
Gpt3D_Clone676_6.java 1 10
Gpt3D_Clone676_6.java 11 19
----------------------------------------

public void run () {
    try {
        for (int i = 0;
        i < 2; i ++) {
            System.out.println ("tic");
        }
    } catch (Exception e) {
        e.getStackTrace ();
    }
}
----------------------------------------

 public void run() {
   int i = 0;
   while (i < 2) {
       System.out.println("tic");
       i++;
   }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
677
5
Gpt3D_Clone677_5.java 1 10
Gpt3D_Clone677_5.java 11 20
----------------------------------------

public void run () {
    try {
        for (int i = 0;
        i < 2; i ++) {
            System.out.println ("tac");
        }
    } catch (Exception e) {
        e.getStackTrace ();
    }
}
----------------------------------------

public void execute(int loop_count) {
    System.out.print(loop_count);
    if(loop_count > 0) {
        System.out.println("tac");
        execute (--loop_count);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
677
7
Gpt3D_Clone677_7.java 1 10
Gpt3D_Clone677_7.java 11 17
----------------------------------------

public void run () {
    try {
        for (int i = 0;
        i < 2; i ++) {
            System.out.println ("tac");
        }
    } catch (Exception e) {
        e.getStackTrace ();
    }
}
----------------------------------------

 public void run() throws Exception {
    for (int i = 0; i < 2; i++) {
        System.out.println("tac");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
678
0
Gpt3D_Clone678_0.java 1 10
Gpt3D_Clone678_0.java 11 28
----------------------------------------

public void run () {
    try {
        for (int i = 0;
        i < 2; i ++) {
            System.out.println ("toe");
        }
    } catch (Exception e) {
        e.getStackTrace ();
    }
}
----------------------------------------

 public void run () {
    try {
        for (int i = 0; i < 2; i++) {
            switch (i) {
                case 0:
                    System.out.println("toe");
                    break;
                case 1:
                    System.out.println("tow");
                    break;
            }
        }
    } catch (Exception e) {
        e.getStackTrace();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
678
1
Gpt3D_Clone678_1.java 1 10
Gpt3D_Clone678_1.java 11 27
----------------------------------------

public void run () {
    try {
        for (int i = 0;
        i < 2; i ++) {
            System.out.println ("toe");
        }
    } catch (Exception e) {
        e.getStackTrace ();
    }
}
----------------------------------------

 public void run () {
    try {
        int i = 0;
        while (true) {
            if (i < 2) {
                System.out.println("toe");
                i++;
            } else {
                break;
            }
        }
    } catch (Exception e) {
        e.getStackTrace();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
678
2
Gpt3D_Clone678_2.java 1 10
Gpt3D_Clone678_2.java 11 27
----------------------------------------

public void run () {
    try {
        for (int i = 0;
        i < 2; i ++) {
            System.out.println ("toe");
        }
    } catch (Exception e) {
        e.getStackTrace ();
    }
}
----------------------------------------

 public void run () {
    try {
        int i = 0;
        while (i < 2) {
            System.out.println("toe");
            if (i < 1){
                i++;
            } else {
                break;
            }
        }
    } catch (Exception e) {
        e.getStackTrace();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
678
3
Gpt3D_Clone678_3.java 1 10
Gpt3D_Clone678_3.java 11 25
----------------------------------------

public void run () {
    try {
        for (int i = 0;
        i < 2; i ++) {
            System.out.println ("toe");
        }
    } catch (Exception e) {
        e.getStackTrace ();
    }
}
----------------------------------------

 public void run() {
    try {
        int i = 0;
        do {
            if (i < 2) {
                System.out.println("toe");
                i++;
            }
        } while (i < 2);
    } catch (Exception e) {
        e.getStackTrace();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
679
0
Gpt3D_Clone679_0.java 1 10
Gpt3D_Clone679_0.java 11 26
----------------------------------------

public void run () {
    try {
        for (int i = 0;
        i < 2; i ++) {
            System.out.println ("tic");
        }
    } catch (Exception e) {
        e.getStackTrace ();
    }
}
----------------------------------------

  public void run () {
    try {
        Timer timer = new Timer();
        TimerTask task = new TimerTask(){
            public void run () {
                System.out.println("tic");
            }
        };
        timer.scheduleAtFixedRate(task, 0, 2000);
        timer.cancel();
    } catch (Exception e) {
        e.getStackTrace ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
0
Gpt3D_Clone67_0.java 1 10
Gpt3D_Clone67_0.java 11 18
----------------------------------------

public static void main (final String [] args) {
    final Console console = System.console ();
    if (console != null) {
        final SortNames sortNames = new SortNames (console);
        sortNames.run ();
    } else {
        System.err.println ("Sorry, no console.");
        System.exit (1);
    }
}
----------------------------------------

 public static void main (final String [] args) {
    InputStreamReader reader = new InputStreamReader(System.in);
    BufferedReader br = new BufferedReader(reader);
    final SortNames sortNames = new SortNames (br);
    sortNames.run ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
1
Gpt3D_Clone67_1.java 1 10
Gpt3D_Clone67_1.java 11 17
----------------------------------------

public static void main (final String [] args) {
    final Console console = System.console ();
    if (console != null) {
        final SortNames sortNames = new SortNames (console);
        sortNames.run ();
    } else {
        System.err.println ("Sorry, no console.");
        System.exit (1);
    }
}
----------------------------------------

 public static void main (final String [] args) {
    final Reader reader = new InputStreamReader(System.in);
    final SortNames sortNames = new SortNames (reader);
    sortNames.run ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
2
Gpt3D_Clone67_2.java 1 10
Gpt3D_Clone67_2.java 11 17
----------------------------------------

public static void main (final String [] args) {
    final Console console = System.console ();
    if (console != null) {
        final SortNames sortNames = new SortNames (console);
        sortNames.run ();
    } else {
        System.err.println ("Sorry, no console.");
        System.exit (1);
    }
}
----------------------------------------

 public static void main (final String [] args) {
    Scanner scanner = new Scanner(System.in);
    final SortNames sortNames = new SortNames (scanner);
    sortNames.run ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
3
Gpt3D_Clone67_3.java 1 10
Gpt3D_Clone67_3.java 11 17
----------------------------------------

public static void main (final String [] args) {
    final Console console = System.console ();
    if (console != null) {
        final SortNames sortNames = new SortNames (console);
        sortNames.run ();
    } else {
        System.err.println ("Sorry, no console.");
        System.exit (1);
    }
}
----------------------------------------

 public static void main (final String [] args) {
    final BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    final SortNames sortNames = new SortNames (br);
    sortNames.run ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
4
Gpt3D_Clone67_4.java 1 10
Gpt3D_Clone67_4.java 11 17
----------------------------------------

public static void main (final String [] args) {
    final Console console = System.console ();
    if (console != null) {
        final SortNames sortNames = new SortNames (console);
        sortNames.run ();
    } else {
        System.err.println ("Sorry, no console.");
        System.exit (1);
    }
}
----------------------------------------

 public static void main (final String [] args) {
    final ConsoleReader consoleReader = new ConsoleReader();
    final SortNames sortNames = new SortNames (consoleReader);
    sortNames.run ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
5
Gpt3D_Clone67_5.java 1 10
Gpt3D_Clone67_5.java 11 17
----------------------------------------

public static void main (final String [] args) {
    final Console console = System.console ();
    if (console != null) {
        final SortNames sortNames = new SortNames (console);
        sortNames.run ();
    } else {
        System.err.println ("Sorry, no console.");
        System.exit (1);
    }
}
----------------------------------------

 public static void main (final String [] args) {
    final Scanner scanner = new Scanner(System.in);
    final SortNames sortNames = new SortNames (scanner);
    sortNames.run ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
6
Gpt3D_Clone67_6.java 1 10
Gpt3D_Clone67_6.java 11 16
----------------------------------------

public static void main (final String [] args) {
    final Console console = System.console ();
    if (console != null) {
        final SortNames sortNames = new SortNames (console);
        sortNames.run ();
    } else {
        System.err.println ("Sorry, no console.");
        System.exit (1);
    }
}
----------------------------------------

 public static void main (final String [] args) {
    final SortNames sortNames = new SortNames (Console.readChar);
    sortNames.run ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
7
Gpt3D_Clone67_7.java 1 10
Gpt3D_Clone67_7.java 11 16
----------------------------------------

public static void main (final String [] args) {
    final Console console = System.console ();
    if (console != null) {
        final SortNames sortNames = new SortNames (console);
        sortNames.run ();
    } else {
        System.err.println ("Sorry, no console.");
        System.exit (1);
    }
}
----------------------------------------

 public static void main (final String [] args) {
    final SortNames sortNames = new SortNames (Console.readLine);
    sortNames.run ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
8
Gpt3D_Clone67_8.java 1 10
Gpt3D_Clone67_8.java 11 16
----------------------------------------

public static void main (final String [] args) {
    final Console console = System.console ();
    if (console != null) {
        final SortNames sortNames = new SortNames (console);
        sortNames.run ();
    } else {
        System.err.println ("Sorry, no console.");
        System.exit (1);
    }
}
----------------------------------------

 public static void main (final String [] args) {
    final SortNames sortNames = new SortNames (new ConsoleReader());
    sortNames.run ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
9
Gpt3D_Clone67_9.java 1 10
Gpt3D_Clone67_9.java 11 16
----------------------------------------

public static void main (final String [] args) {
    final Console console = System.console ();
    if (console != null) {
        final SortNames sortNames = new SortNames (console);
        sortNames.run ();
    } else {
        System.err.println ("Sorry, no console.");
        System.exit (1);
    }
}
----------------------------------------

 public static void main (final String [] args) {
    final SortNames sortNames = new SortNames (Console.readPassword);
    sortNames.run ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
681
0
Gpt3D_Clone681_0.java 1 3
Gpt3D_Clone681_0.java 4 8
----------------------------------------

        public void run () {
            new Main ();
}
----------------------------------------

 public void run() {
   Main m= new Main();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
681
1
Gpt3D_Clone681_1.java 1 3
Gpt3D_Clone681_1.java 4 8
----------------------------------------

        public void run () {
            new Main ();
}
----------------------------------------

 public void perform() {
   Main m= new Main();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
681
2
Gpt3D_Clone681_2.java 1 3
Gpt3D_Clone681_2.java 4 8
----------------------------------------

        public void run () {
            new Main ();
}
----------------------------------------

 public void invoke() {
   Main m= new Main();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
681
3
Gpt3D_Clone681_3.java 1 3
Gpt3D_Clone681_3.java 4 8
----------------------------------------

        public void run () {
            new Main ();
}
----------------------------------------

 public void launch() {
   Main m= new Main();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
681
4
Gpt3D_Clone681_4.java 1 3
Gpt3D_Clone681_4.java 4 8
----------------------------------------

        public void run () {
            new Main ();
}
----------------------------------------

 public void execute() {
   Main m= new Main();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
681
5
Gpt3D_Clone681_5.java 1 3
Gpt3D_Clone681_5.java 4 8
----------------------------------------

        public void run () {
            new Main ();
}
----------------------------------------

 public void activate() {
   Main m= new Main();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
681
6
Gpt3D_Clone681_6.java 1 3
Gpt3D_Clone681_6.java 4 8
----------------------------------------

        public void run () {
            new Main ();
}
----------------------------------------

 public void begin() {
   Main m= new Main();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
681
7
Gpt3D_Clone681_7.java 1 3
Gpt3D_Clone681_7.java 4 8
----------------------------------------

        public void run () {
            new Main ();
}
----------------------------------------

 public void initiate() {
   Main m= new Main();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
681
8
Gpt3D_Clone681_8.java 1 3
Gpt3D_Clone681_8.java 4 8
----------------------------------------

        public void run () {
            new Main ();
}
----------------------------------------

 public void start() {
   Main m= new Main();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
681
9
Gpt3D_Clone681_9.java 1 3
Gpt3D_Clone681_9.java 4 8
----------------------------------------

        public void run () {
            new Main ();
}
----------------------------------------

 public void go() {
   Main m= new Main();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
682
0
Gpt3D_Clone682_0.java 1 19
Gpt3D_Clone682_0.java 20 40
----------------------------------------

public static void main (String [] args) {
    String s = "harikrishna";
    String s2 = "";
    for (int i = 0;
    i < s.length (); i ++) {
        Boolean found = false;
        for (int j = 0;
        j < s2.length (); j ++) {
            if (s.charAt (i) == s2.charAt (j)) {
                found = true;
                break;
            }
        }
        if (found == false) {
            s2 = s2.concat (String.valueOf (s.charAt (i)));
        }
    }
    System.out.println (s2);
}
----------------------------------------

 public static void main(String[] args) {
    String s = "harikrishna";
    StringBuilder sb = new StringBuilder();
    boolean found;
    for(int i=0;i<s.length();i++){
        char s_char = s.charAt(i);
        found = false;
        for(int j=0; j<sb.length();j++){
            if(s_char == sb.charAt(j)){
                found = true;
                break;
            }
        }
        if(!found){
            sb.append(s_char);
        }
    }
    System.out.println(sb.toString());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
682
2
Gpt3D_Clone682_2.java 1 19
Gpt3D_Clone682_2.java 20 35
----------------------------------------

public static void main (String [] args) {
    String s = "harikrishna";
    String s2 = "";
    for (int i = 0;
    i < s.length (); i ++) {
        Boolean found = false;
        for (int j = 0;
        j < s2.length (); j ++) {
            if (s.charAt (i) == s2.charAt (j)) {
                found = true;
                break;
            }
        }
        if (found == false) {
            s2 = s2.concat (String.valueOf (s.charAt (i)));
        }
    }
    System.out.println (s2);
}
----------------------------------------

 public static void main (String[] args) { 
	String s = "harikrishna"; 
	String s2 = "";
	Character[] chars = new Character[s.length()];
	int count = 0;
	for (int i = 0; i<s.length(); i++) {
	   if (!(Arrays.asList(chars).contains(s.charAt(i)))) {
	       chars[count] = s.charAt(i);
	       count++;
	       s2 = s2.concat(String.valueOf(s.charAt(i)));
	    }
	}
	System.out.println(s2);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
682
3
Gpt3D_Clone682_3.java 1 19
Gpt3D_Clone682_3.java 20 36
----------------------------------------

public static void main (String [] args) {
    String s = "harikrishna";
    String s2 = "";
    for (int i = 0;
    i < s.length (); i ++) {
        Boolean found = false;
        for (int j = 0;
        j < s2.length (); j ++) {
            if (s.charAt (i) == s2.charAt (j)) {
                found = true;
                break;
            }
        }
        if (found == false) {
            s2 = s2.concat (String.valueOf (s.charAt (i)));
        }
    }
    System.out.println (s2);
}
----------------------------------------

 public static void main (String[] args){
	String s = "harikrishna";
	char[] charArray = s.toCharArray();
	Set<Character> set = new HashSet<>();
	for (char c : charArray) {
	    if (!(set.contains(c))) {
		set.add(c);
	    }
	}
	StringBuilder sb = new StringBuilder();
	for (char c : set) {
	   sb.append(c);
	}
	System.out.println(sb.toString());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
682
4
Gpt3D_Clone682_4.java 1 19
Gpt3D_Clone682_4.java 20 33
----------------------------------------

public static void main (String [] args) {
    String s = "harikrishna";
    String s2 = "";
    for (int i = 0;
    i < s.length (); i ++) {
        Boolean found = false;
        for (int j = 0;
        j < s2.length (); j ++) {
            if (s.charAt (i) == s2.charAt (j)) {
                found = true;
                break;
            }
        }
        if (found == false) {
            s2 = s2.concat (String.valueOf (s.charAt (i)));
        }
    }
    System.out.println (s2);
}
----------------------------------------

 public static void main (String[] args) { 
	String s = "harikrishna"; 
	String s2 = "";
	Map<Character, Integer> map = new LinkedHashMap<>();
	for (int i = 0; i<s.length(); i++) {
	   if (!(map.containsKey(s.charAt(i)))) {
	       map.put(s.charAt(i), i);
	       s2 = s2.concat(String.valueOf(s.charAt(i)));
	    }
	}
	System.out.println(s2);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
682
5
Gpt3D_Clone682_5.java 1 19
Gpt3D_Clone682_5.java 20 34
----------------------------------------

public static void main (String [] args) {
    String s = "harikrishna";
    String s2 = "";
    for (int i = 0;
    i < s.length (); i ++) {
        Boolean found = false;
        for (int j = 0;
        j < s2.length (); j ++) {
            if (s.charAt (i) == s2.charAt (j)) {
                found = true;
                break;
            }
        }
        if (found == false) {
            s2 = s2.concat (String.valueOf (s.charAt (i)));
        }
    }
    System.out.println (s2);
}
----------------------------------------

 public static void main(String[] args) {
    String s = "harikrishna";
    String s2 = "";
    List<Character> list = new ArrayList<>();
    for (int i = 0; i < s.length(); i++) {
        if (!(list.contains(s.charAt(i)))) {
            list.add(s.charAt(i));
            s2 = s2.concat(String.valueOf(s.charAt(i)));
        }
    }
    System.out.println(s2);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
682
6
Gpt3D_Clone682_6.java 1 19
Gpt3D_Clone682_6.java 20 33
----------------------------------------

public static void main (String [] args) {
    String s = "harikrishna";
    String s2 = "";
    for (int i = 0;
    i < s.length (); i ++) {
        Boolean found = false;
        for (int j = 0;
        j < s2.length (); j ++) {
            if (s.charAt (i) == s2.charAt (j)) {
                found = true;
                break;
            }
        }
        if (found == false) {
            s2 = s2.concat (String.valueOf (s.charAt (i)));
        }
    }
    System.out.println (s2);
}
----------------------------------------

 public static void main (String[] args) { 
	String s = "harikrishna"; 
	String s2 = "";
	Set<Character> set = new HashSet<>();
	for (int i = 0; i < s.length(); i++) {
	   if (!(set.contains(s.charAt(i)))) {
	       set.add(s.charAt(i));
	       s2 = s2.concat(String.valueOf(s.charAt(i)));
	    }
	 }
	System.out.println(s2);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
682
7
Gpt3D_Clone682_7.java 1 19
Gpt3D_Clone682_7.java 20 33
----------------------------------------

public static void main (String [] args) {
    String s = "harikrishna";
    String s2 = "";
    for (int i = 0;
    i < s.length (); i ++) {
        Boolean found = false;
        for (int j = 0;
        j < s2.length (); j ++) {
            if (s.charAt (i) == s2.charAt (j)) {
                found = true;
                break;
            }
        }
        if (found == false) {
            s2 = s2.concat (String.valueOf (s.charAt (i)));
        }
    }
    System.out.println (s2);
}
----------------------------------------

 public static void main (String[] args) {
    String s = "harikrishna";
    String s2 = "";
    HashMap<Character, Integer> map = new HashMap<>();
    for (int i = 0; i < s.length(); i++) {
        if (!(map.containsKey(s.charAt(i)))) {
            map.put(s.charAt(i), i);
            s2 = s2.concat(String.valueOf(s.charAt(i)));
        }
    }
    System.out.println(s2);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
682
8
Gpt3D_Clone682_8.java 1 19
Gpt3D_Clone682_8.java 20 32
----------------------------------------

public static void main (String [] args) {
    String s = "harikrishna";
    String s2 = "";
    for (int i = 0;
    i < s.length (); i ++) {
        Boolean found = false;
        for (int j = 0;
        j < s2.length (); j ++) {
            if (s.charAt (i) == s2.charAt (j)) {
                found = true;
                break;
            }
        }
        if (found == false) {
            s2 = s2.concat (String.valueOf (s.charAt (i)));
        }
    }
    System.out.println (s2);
}
----------------------------------------

 public static void main(String[] args) {
    String s = "harikrishna";
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < s.length(); i++) {
        String s_char = s.substring(i, i + 1);
        if (sb.indexOf(s_char) == -1) {
            sb.append(s.charAt(i));
        }
    }
    System.out.println(sb.toString());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
684
2
Gpt3D_Clone684_2.java 1 17
Gpt3D_Clone684_2.java 18 38
----------------------------------------

public static int [] MaxNumber (String [] arr) {
    int [] Number_arr = new int [11];
    int count = 1;
    int j = 0;
    int k = 0;
    for (int i = 0;
    i < arr.length - 1; i ++) {
        if (arr [i].equals (arr [i + 1])) count ++;
        else {
            Number_arr [j] = count;
            j ++;
            count = 1;
        }
    }
    Number_arr [j] = count;
    return Number_arr;
}
----------------------------------------

 public static int [] MaxNumber (String [] arr) {
    int [] Number_arr = new int [11];
    int count = 0;
    int j = 0;
    for (int i = 0; i < arr.length; i ++) {
        if (i == 0 || !arr[i].equals(arr[i-1])) {
            int k = i;
            while (k + 1 < arr.length && arr[k].equals(arr[k+1])) {
                count++;
                k++;
            }
            Number_arr[j] = count + 1;
            j++;
            count = 0;
        }
    }
    return Number_arr;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
685
0
Gpt3D_Clone685_0.java 1 3
Gpt3D_Clone685_0.java 4 15
----------------------------------------

        public void run () {
            createAndShowGUI ();
}
----------------------------------------

  public void run() {
            try {
                SwingUtilities.invokeAndWait (new Runnable () {
                    public void run () {
                        createAndShowGUI ();
                    }
                });
            } catch (InvocationTargetException | InterruptedException e) {
            }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
685
1
Gpt3D_Clone685_1.java 1 3
Gpt3D_Clone685_1.java 4 12
----------------------------------------

        public void run () {
            createAndShowGUI ();
}
----------------------------------------

  private void run() {
              java.awt.EventQueue.invokeLater(new Runnable() {
                  public void run() {
                      createAndShowGUI();
                  }
              });
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
685
2
Gpt3D_Clone685_2.java 1 3
Gpt3D_Clone685_2.java 4 12
----------------------------------------

        public void run () {
            createAndShowGUI ();
}
----------------------------------------

  public void run() {
             EventQueue.invokeLater (new Thread () {
                public void run () {
                   createAndShowGUI ();
                 }
              });
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
685
3
Gpt3D_Clone685_3.java 1 3
Gpt3D_Clone685_3.java 4 12
----------------------------------------

        public void run () {
            createAndShowGUI ();
}
----------------------------------------

  public void run() {
              SwingUtilities.invokeLater(new Runnable() {
                  public void run(){ 
                      createAndShowGUI();
                  }
              });
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
685
4
Gpt3D_Clone685_4.java 1 3
Gpt3D_Clone685_4.java 4 10
----------------------------------------

        public void run () {
            createAndShowGUI ();
}
----------------------------------------

  private void run() {
              SwingUtilities.invokeLater(() -> {
                  createAndShowGUI();
              });
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
685
5
Gpt3D_Clone685_5.java 1 3
Gpt3D_Clone685_5.java 4 10
----------------------------------------

        public void run () {
            createAndShowGUI ();
}
----------------------------------------

  private void run() { 
              javax.swing.SwingUtilities.invokeLater(() -> { 
                   createAndShowGUI(); 
              }); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
685
6
Gpt3D_Clone685_6.java 1 3
Gpt3D_Clone685_6.java 4 10
----------------------------------------

        public void run () {
            createAndShowGUI ();
}
----------------------------------------

  public void run() {
             SwingUtilities.invokeLater(() -> {
                 createAndShowGUI();
             });
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
685
7
Gpt3D_Clone685_7.java 1 3
Gpt3D_Clone685_7.java 4 10
----------------------------------------

        public void run () {
            createAndShowGUI ();
}
----------------------------------------

  public void run() {
             SwingUtilities.invokeLater(() -> {
                  this.createAndShowGUI();
              });
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
688
0
Gpt3D_Clone688_0.java 1 19
Gpt3D_Clone688_0.java 20 39
----------------------------------------

public static int [] genRandoms (int total, int numberOfRandoms, int minimumValue) {
    int [] ret = new int [numberOfRandoms];
    Random rnd = new Random ();
    int totalLeft = total;
    for (int i = 0;
    i < numberOfRandoms; i ++) {
        final int rollsLeft = numberOfRandoms - i;
        int thisMax = totalLeft - (rollsLeft - 1) * minimumValue;
        int thisMin = Math.max (minimumValue, totalLeft / rollsLeft);
        int range = thisMax - thisMin;
        if (range < 0) throw new IllegalArgumentException ("Cannot have " + minimumValue + " * " + numberOfRandoms + " < " + total);
        int rndValue = range;
        for (int j = 0;
        j * j < rollsLeft; j ++) rndValue = rnd.nextInt (rndValue + 1);
        totalLeft -= ret [i] = rndValue + thisMin;
    }
    Collections.shuffle (Arrays.asList (ret), rnd);
    return ret;
}
----------------------------------------

 public static int [] genRandoms (int total, int numberOfRandoms, int minimumValue) {
    int [] ret = new int [numberOfRandoms];
    int[] array = new int[total];
    for (int i = 0; i < total; i++) {
        array[i] = i + 1;
    }
    Random rnd = new Random ();
    int totalLeft = total;
    for (int i = 0;
    i < numberOfRandoms; i ++) {
        int rndIndex = rnd.nextInt(totalLeft);
        ret[i] = array[rndIndex] + minimumValue;
        array[rndIndex] = array[totalLeft - 1];
        totalLeft--;
    }
    Collections.shuffle (Arrays.asList (ret), rnd);
    return ret;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
688
8
Gpt3D_Clone688_8.java 1 19
Gpt3D_Clone688_8.java 20 34
----------------------------------------

public static int [] genRandoms (int total, int numberOfRandoms, int minimumValue) {
    int [] ret = new int [numberOfRandoms];
    Random rnd = new Random ();
    int totalLeft = total;
    for (int i = 0;
    i < numberOfRandoms; i ++) {
        final int rollsLeft = numberOfRandoms - i;
        int thisMax = totalLeft - (rollsLeft - 1) * minimumValue;
        int thisMin = Math.max (minimumValue, totalLeft / rollsLeft);
        int range = thisMax - thisMin;
        if (range < 0) throw new IllegalArgumentException ("Cannot have " + minimumValue + " * " + numberOfRandoms + " < " + total);
        int rndValue = range;
        for (int j = 0;
        j * j < rollsLeft; j ++) rndValue = rnd.nextInt (rndValue + 1);
        totalLeft -= ret [i] = rndValue + thisMin;
    }
    Collections.shuffle (Arrays.asList (ret), rnd);
    return ret;
}
----------------------------------------

  public static int [] genRandoms (int total, int numberOfRandoms, int minimumValue) {
    int [] ret = new int [numberOfRandoms];
    Random rnd = new Random ();
    int totalLeft = total;
    for (int i = 0;
    i < numberOfRandoms; i ++) {
        int rndValue = Math.abs (rnd.nextInt (totalLeft) + 1);
        ret[i] = rndValue + minimumValue;
        totalLeft -= rndValue;
    }
    Collections.shuffle (Arrays.asList (ret), rnd);
    return ret;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
690
0
Gpt3D_Clone690_0.java 1 12
Gpt3D_Clone690_0.java 13 27
----------------------------------------

public static Date addBusinessDays (Date date, int days) {
    DateTime result = new DateTime (date);
    result = isWeekEnd (result) ? getPreviousBusinessDate (result) : result;
    for (int i = 0;
    i < days; i ++) {
        if (isWeekEnd (result)) {
            i --;
        }
        result = result.plusDays (1);
    }
    return result.toDate ();
}
----------------------------------------

 public static Date addBusinessDays (Date date, int days) {
    DateTime result = new DateTime (date);
    int num = 0;
    while (num < days) {
        if ((result.getDayOfWeek() == DateTimeConstants.SATURDAY) || (result.getDayOfWeek() == DateTimeConstants.SUNDAY)) {
            result = result.plusDays (1);
        } else {
            num++;
            result = result.plusDays (1);
        }
    }
    return result.toDate ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
690
1
Gpt3D_Clone690_1.java 1 12
Gpt3D_Clone690_1.java 13 27
----------------------------------------

public static Date addBusinessDays (Date date, int days) {
    DateTime result = new DateTime (date);
    result = isWeekEnd (result) ? getPreviousBusinessDate (result) : result;
    for (int i = 0;
    i < days; i ++) {
        if (isWeekEnd (result)) {
            i --;
        }
        result = result.plusDays (1);
    }
    return result.toDate ();
}
----------------------------------------

 public static Date addBusinessDays (Date date, int days) {
    DateTime result = new DateTime (date);
    int numOfDays = 0;
    while (numOfDays < days) {
        if (isWeekEnd (result)) {
            result = getPreviousBusinessDate (result);
            continue;
        }
        numOfDays++;
        result = result.plusDays (1);
    }
    return result.toDate ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
690
2
Gpt3D_Clone690_2.java 1 12
Gpt3D_Clone690_2.java 13 27
----------------------------------------

public static Date addBusinessDays (Date date, int days) {
    DateTime result = new DateTime (date);
    result = isWeekEnd (result) ? getPreviousBusinessDate (result) : result;
    for (int i = 0;
    i < days; i ++) {
        if (isWeekEnd (result)) {
            i --;
        }
        result = result.plusDays (1);
    }
    return result.toDate ();
}
----------------------------------------

 public static Date addBusinessDays (Date date, int days) {
    DateTime result = new DateTime (date);
    int numDays = 0;
    while (numDays < days) {
        if (isWeekEnd (result)) {
            result = result.plusDays (1);
        } else {
            numDays++;
            result = result.plusDays (1);
        }
    }
    return result.toDate ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
690
3
Gpt3D_Clone690_3.java 1 12
Gpt3D_Clone690_3.java 13 26
----------------------------------------

public static Date addBusinessDays (Date date, int days) {
    DateTime result = new DateTime (date);
    result = isWeekEnd (result) ? getPreviousBusinessDate (result) : result;
    for (int i = 0;
    i < days; i ++) {
        if (isWeekEnd (result)) {
            i --;
        }
        result = result.plusDays (1);
    }
    return result.toDate ();
}
----------------------------------------

  public static Date addBusinessDays (Date date, int days) {
    Calendar cal = Calendar.getInstance ();
    cal.setTime (date);
    int num = 0;
    while (num<days) {
        cal.add (Calendar.DATE,1);
        if(cal.get (Calendar.DAY_OF_WEEK) != Calendar.SATURDAY && cal.get (Calendar.DAY_OF_WEEK) != Calendar.SUNDAY) {
           num ++;
        }
    }
    return cal.getTime ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
690
4
Gpt3D_Clone690_4.java 1 12
Gpt3D_Clone690_4.java 13 26
----------------------------------------

public static Date addBusinessDays (Date date, int days) {
    DateTime result = new DateTime (date);
    result = isWeekEnd (result) ? getPreviousBusinessDate (result) : result;
    for (int i = 0;
    i < days; i ++) {
        if (isWeekEnd (result)) {
            i --;
        }
        result = result.plusDays (1);
    }
    return result.toDate ();
}
----------------------------------------

 public static Date addBusinessDays (Date date, int days) {
    DateTime result = new DateTime (date);
    int day = 0;
    while (day < days) {
        while (isWeekEnd (result)) {
            result = result.plusDays (1);
        }
        day ++;
        result = result.plusDays (1);
    }
    return result.toDate ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
690
5
Gpt3D_Clone690_5.java 1 12
Gpt3D_Clone690_5.java 13 27
----------------------------------------

public static Date addBusinessDays (Date date, int days) {
    DateTime result = new DateTime (date);
    result = isWeekEnd (result) ? getPreviousBusinessDate (result) : result;
    for (int i = 0;
    i < days; i ++) {
        if (isWeekEnd (result)) {
            i --;
        }
        result = result.plusDays (1);
    }
    return result.toDate ();
}
----------------------------------------

  public static Date addBusinessDays (Date date, int days) {
    DateTime result = new DateTime (date);
    int day = 0;
    while (day < days) {
        while (result.getDayOfWeek () == DateTimeConstants.SATURDAY || 
               result.getDayOfWeek () == DateTimeConstants.SUNDAY) {
            result = result.plusDays (1);
        }
        day ++;
        result = result.plusDays (1);
    }
    return result.toDate ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
690
6
Gpt3D_Clone690_6.java 1 12
Gpt3D_Clone690_6.java 13 27
----------------------------------------

public static Date addBusinessDays (Date date, int days) {
    DateTime result = new DateTime (date);
    result = isWeekEnd (result) ? getPreviousBusinessDate (result) : result;
    for (int i = 0;
    i < days; i ++) {
        if (isWeekEnd (result)) {
            i --;
        }
        result = result.plusDays (1);
    }
    return result.toDate ();
}
----------------------------------------

 public static Date addBusinessDays( Date date, int businessDays ) {
    int daysAdded = 0;
    DateTime result = new DateTime( date );
    while( daysAdded < businessDays ) {
        result = result.plusDays( 1 );
        if( isWeekend( result ) )
            continue;
 
        daysAdded++;
    }
 
    return result.toDate();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
690
8
Gpt3D_Clone690_8.java 1 12
Gpt3D_Clone690_8.java 13 26
----------------------------------------

public static Date addBusinessDays (Date date, int days) {
    DateTime result = new DateTime (date);
    result = isWeekEnd (result) ? getPreviousBusinessDate (result) : result;
    for (int i = 0;
    i < days; i ++) {
        if (isWeekEnd (result)) {
            i --;
        }
        result = result.plusDays (1);
    }
    return result.toDate ();
}
----------------------------------------

 public static Date addBusinessDays( Date date, int businessDays ) {
    DateTime result = new DateTime( date );
    while( businessDays > 0 ) {
        result = result.plusDays( 1 );
        if( isWeekend( result ) )
            continue;
 
        businessDays--;
    }
 
    return result.toDate();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
692
5
Gpt3D_Clone692_5.java 1 30
Gpt3D_Clone692_5.java 31 72
----------------------------------------

public void start (final Stage primaryStage) {
    Alert alert = new Alert (Alert.AlertType.CONFIRMATION);
    alert.setTitle ("Title");
    alert.setHeaderText ("Some Text");
    alert.setContentText ("Choose your option.");
    ButtonType buttonTypeOne = new ButtonType ("Yes");
    alert.initModality (Modality.NONE);
    ButtonType buttonTypeCancel = new ButtonType ("No", ButtonBar.ButtonData.CANCEL_CLOSE);
    alert.getButtonTypes ().setAll (buttonTypeOne, buttonTypeCancel);
    Button b = new Button ("close alert");
    b.setOnAction ((ActionEvent event) -> {
        for (ButtonType bt : alert.getDialogPane ().getButtonTypes ()) {
            System.out.println ("bt = " + bt);
            if (bt.getButtonData () == ButtonBar.ButtonData.CANCEL_CLOSE) {
                Button cancelButton = (Button) alert.getDialogPane ().lookupButton (bt);
                cancelButton.fire ();
                break;
            }
        }
    });
    final Scene scene = new Scene (new Group (b), 400, 300);
    primaryStage.setScene (scene);
    primaryStage.show ();
    Optional < ButtonType > result = alert.showAndWait ();
    if (result.get () == buttonTypeOne) {
        System.out.println ("one ");
    } else if (result.get () == buttonTypeCancel) {
        System.out.println ("cancel ");
    }
}
----------------------------------------

 public void start (final Stage primaryStage) {
    Alert alert = new Alert (AlertType.CONFIRMATION, "Choose your option.", ButtonType.YES, ButtonType.NO);
    alert.setTitle ("Title");
    alert.setHeaderText ("Some Text");
    alert.getButtonTypes ().setAll (ButtonType.YES, ButtonType.NO);
    Button btnYes = new Button("Yes");
    btnYes.setPrefSize (50, 20);
    Button btnNo = new Button("No");
    btnNo.setPrefSize (50, 20);
    FlowPane flowPane = new FlowPane ();
    flowPane.getChildren ().add (btnYes);
    flowPane.getChildren ().add (btnNo);
    btnYes.setOnAction ((ActionEvent event) -> {
        for (ButtonType bt : alert.getButtonTypes ()) {
            System.out.println ("bt = " + bt);
            if (bt == ButtonType.NO) {
                alert.close ();
            }
        }
    });
    btnNo.setOnAction ((ActionEvent event) -> {
        for (ButtonType bt : alert.getButtonTypes ()) {
            System.out.println ("bt = " + bt);
            if (bt == ButtonType.NO) {
                alert.close ();
            }
        }
    });
    
    final Scene scene = new Scene (flowPane, 400, 300);
    primaryStage.setScene (scene);
    primaryStage.show ();
    
    Optional <ButtonType> result = alert.showAndWait ();
    if (result.get () == ButtonType.YES) {
        System.out.println ("Yes ");
    } else if (result.get () == ButtonType.NO) {
        System.out.println ("No ");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
694
2
Gpt3D_Clone694_2.java 1 11
Gpt3D_Clone694_2.java 12 23
----------------------------------------

public ResponseEntity < ? > match (@PathVariable
String matchId,@RequestBody
String body, HttpServletRequest request, HttpServletResponse response) {
    Product p;
    try {
        p = service.getProduct (request.getProductId ());
    } catch (Exception ex) {
        return new ResponseEntity < String > (HttpStatus.BAD_REQUEST);
    }
    return new ResponseEntity (p, HttpStatus.OK);
}
----------------------------------------

 public ResponseEntity match(@PathVariable String matchId,@RequestBody String body, HttpServletRequest request, HttpServletResponse response) {
        try {
            Optional<Product> p =  service.getProduct(request.getProductId());
            if(p.isPresent())
                    return new ResponseEntity < Product >(p.get(), HttpStatus.OK);
             else return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        } catch (Exception ex) {
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
694
5
Gpt3D_Clone694_5.java 1 11
Gpt3D_Clone694_5.java 12 21
----------------------------------------

public ResponseEntity < ? > match (@PathVariable
String matchId,@RequestBody
String body, HttpServletRequest request, HttpServletResponse response) {
    Product p;
    try {
        p = service.getProduct (request.getProductId ());
    } catch (Exception ex) {
        return new ResponseEntity < String > (HttpStatus.BAD_REQUEST);
    }
    return new ResponseEntity (p, HttpStatus.OK);
}
----------------------------------------

 public ResponseEntity<Product> match(@PathVariable String matchId,@RequestBody String body, HttpServletRequest request, HttpServletResponse response) {
        try {
           Product p =  service.getProduct(request.getProductId());
            return new ResponseEntity <>(p, HttpStatus.OK);
        } catch (Exception ex) {
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
694
6
Gpt3D_Clone694_6.java 1 11
Gpt3D_Clone694_6.java 12 22
----------------------------------------

public ResponseEntity < ? > match (@PathVariable
String matchId,@RequestBody
String body, HttpServletRequest request, HttpServletResponse response) {
    Product p;
    try {
        p = service.getProduct (request.getProductId ());
    } catch (Exception ex) {
        return new ResponseEntity < String > (HttpStatus.BAD_REQUEST);
    }
    return new ResponseEntity (p, HttpStatus.OK);
}
----------------------------------------

  public ResponseEntity<Object> match(@PathVariable String matchId,@RequestBody String body, HttpServletRequest request, HttpServletResponse response){
           Optional<Product> product = service.getProduct(request.getProductId());
           if(product.isPresent())
               return new ResponseEntity<>(product.get(), HttpStatus.OK);
           else 
               return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
695
0
Gpt3D_Clone695_0.java 1 14
Gpt3D_Clone695_0.java 15 50
----------------------------------------

static int [] sort (int arr []) {
    for (int i = 0;
    i < arr.length; i ++) {
        for (int j = i;
        j < arr.length; j ++) {
            if (arr [j] < arr [i]) {
                int temp = arr [i];
                arr [i] = arr [j];
                arr [j] = temp;
            }
        }
    }
    return arr;
}
----------------------------------------

 
static int [] sort (int arr []) {
    int n = arr.length;
    for (int cycleStart = 0; cycleStart <= n - 2; cycleStart++) { 
        int item = arr [cycleStart];
        int pos = cycleStart; 
        for (int i = cycleStart + 1; i < n; i++) 
            if (arr [i] < item) 
                pos ++;
        if (pos == cycleStart) 
            continue;
        while (item == arr [pos]) 
            pos += 1;
        if (pos != cycleStart) { 
            int temp = item; 
            item = arr [pos]; 
            arr [pos] = temp; 
        }
        while (pos != cycleStart) { 
            pos = cycleStart; 
            for (int i = cycleStart + 1; i < n; i++) 
                if (arr [i] < item) 
                    pos += 1; 
            while (item == arr [pos]) 
                pos += 1;
            if (item != arr [pos]) { 
                int temp = item; 
                item = arr[pos]; 
                arr [pos] = temp; 
            }
        }
    }
    return arr;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
695
1
Gpt3D_Clone695_1.java 1 14
Gpt3D_Clone695_1.java 15 52
----------------------------------------

static int [] sort (int arr []) {
    for (int i = 0;
    i < arr.length; i ++) {
        for (int j = i;
        j < arr.length; j ++) {
            if (arr [j] < arr [i]) {
                int temp = arr [i];
                arr [i] = arr [j];
                arr [j] = temp;
            }
        }
    }
    return arr;
}
----------------------------------------

 
static int [] sort (int arr []) {
    if (arr.length > 1) {
        int mid = arr.length / 2;
        int[] left = Arrays.copyOfRange (arr, 0, mid);
        int[] right = Arrays.copyOfRange (arr, mid, arr.length);
        sort (left);
        sort (right);
        merge (left, right, arr);
    }
    return arr;
	}
	private static void merge (int [] left, int [] right, int [] arr) {
	    int l = 0, r = 0, m = 0;
	    while (l < left.length && r < right.length) {
		if (left [l] < right [r]) {
		    arr [m] = left [l];
		    l ++;
		} else {
		    arr [m] = right [r];
		    r ++;
		}
		m ++;
	    }
	    while (l < left.length) {
		arr [m] = left [l];
		l ++;
		m ++;
	    }
	    while (r < right.length) {
		arr [m] = right [r];
		r ++;
		m ++;
	    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
695
10
Gpt3D_Clone695_10.java 1 14
Gpt3D_Clone695_10.java 15 29
----------------------------------------

static int [] sort (int arr []) {
    for (int i = 0;
    i < arr.length; i ++) {
        for (int j = i;
        j < arr.length; j ++) {
            if (arr [j] < arr [i]) {
                int temp = arr [i];
                arr [i] = arr [j];
                arr [j] = temp;
            }
        }
    }
    return arr;
}
----------------------------------------

static int [] sort (int arr []) {
    for (int i = 0; i < arr.length - 1; i ++) {
        for (int j = 0; j < arr.length - i - 1; j ++) {
            if (arr [j] > arr [j + 1]) {
                int temp = arr [j];
                arr [j] = arr [j + 1];
                arr [j + 1] = temp;
            }
        }
    }
    return arr;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
695
11
Gpt3D_Clone695_11.java 1 14
Gpt3D_Clone695_11.java 15 51
----------------------------------------

static int [] sort (int arr []) {
    for (int i = 0;
    i < arr.length; i ++) {
        for (int j = i;
        j < arr.length; j ++) {
            if (arr [j] < arr [i]) {
                int temp = arr [i];
                arr [i] = arr [j];
                arr [j] = temp;
            }
        }
    }
    return arr;
}
----------------------------------------

static int [] sort (int arr []) {
	    int n = arr.length; 
	    int max = getMax (arr, n); 
	    for (int exp = 1; max / exp > 0; exp *= 10) 
		countSort (arr, n, exp);
	    return arr;
	}
	  
	private static void countSort (int [] arr, int n, int exp) {
	    int output [] = new int [n]; 
	    int count [] = new int [10]; 
	    Arrays.fill (count, 0); 
	    for (int i = 0; i < n; i ++) {
		count [(arr [i] / exp) % 10] ++;
	    }
	    for (int i = 1; i < 10; i ++) {
		count [i] += count [i - 1];
	    }
	    for (int i = n - 1; i >= 0; i --) {
		output [count [ (arr [i] / exp) % 10] - 1] = arr [i]; 
		count [(arr [i] / exp) % 10] --; 
	    }
	    for (int i = 0; i < n; i ++)
		arr [i] = output [i]; 
	}
	  
	private static int getMax (int [] arr, int n) {
	    int mx = arr [0]; 
	    for (int i = 1; i < n; i ++) {
		if (arr [i] > mx) 
		    mx = arr [i]; 
	    }
	    return mx; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
695
12
Gpt3D_Clone695_12.java 1 14
Gpt3D_Clone695_12.java 15 51
----------------------------------------

static int [] sort (int arr []) {
    for (int i = 0;
    i < arr.length; i ++) {
        for (int j = i;
        j < arr.length; j ++) {
            if (arr [j] < arr [i]) {
                int temp = arr [i];
                arr [i] = arr [j];
                arr [j] = temp;
            }
        }
    }
    return arr;
}
----------------------------------------

static int [] sort (int arr []) {
	    int n = arr.length; 
	    int max = getMax (arr, n); 
	    for (int exp = 1; max / exp > 0; exp *= 10) 
		countSort (arr, n, exp);
	    return arr;
	}
	  
	private static void countSort (int [] arr, int n, int exp) {
	    int output [] = new int [n]; 
	    int count [] = new int [10]; 
	    Arrays.fill (count, 0); 
	    for (int i = 0; i < n; i ++) {
		count [(arr [i] / exp) % 10] ++;
	    }
	    for (int i = 1; i < 10; i ++) {
		count [i] += count [i - 1];
	    }
	    for (int i = n - 1; i >= 0; i --) {
		output [count [ (arr [i] / exp) % 10] - 1] = arr [i]; 
		count [(arr [i] / exp) % 10] --; 
	    }
	    for (int i = 0; i < n; i ++)
		arr [i] = output [i]; 
	}
	  
	private static int getMax (int [] arr, int n) {
	    int mx = arr [0]; 
	    for (int i = 1; i < n; i ++) {
		if (arr [i] > mx) 
		    mx = arr [i]; 
	    }
	    return mx; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
695
13
Gpt3D_Clone695_13.java 1 14
Gpt3D_Clone695_13.java 15 46
----------------------------------------

static int [] sort (int arr []) {
    for (int i = 0;
    i < arr.length; i ++) {
        for (int j = i;
        j < arr.length; j ++) {
            if (arr [j] < arr [i]) {
                int temp = arr [i];
                arr [i] = arr [j];
                arr [j] = temp;
            }
        }
    }
    return arr;
}
----------------------------------------

 
static int [] sort (int arr[]){
    int n = arr.length;
    int gap = n;
    boolean swapped = true;
    while (gap != 1 || swapped == true)
    {
        gap = getNextGap(gap);
        swapped = false;
        for (int i=0; i<n-gap; i++)
        {
            if (arr[i] > arr[i+gap])
            {
                int temp = arr[i];
                arr[i] = arr[i+gap];
                arr[i+gap] = temp;
                swapped = true;
            }
        }
    }
    return arr;
	}
	private static int getNextGap(int gap)
	{
	    gap = (gap*10)/13;
	    if (gap < 1)
		return 1;
	    return gap;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
695
14
Gpt3D_Clone695_14.java 1 14
Gpt3D_Clone695_14.java 15 46
----------------------------------------

static int [] sort (int arr []) {
    for (int i = 0;
    i < arr.length; i ++) {
        for (int j = i;
        j < arr.length; j ++) {
            if (arr [j] < arr [i]) {
                int temp = arr [i];
                arr [i] = arr [j];
                arr [j] = temp;
            }
        }
    }
    return arr;
}
----------------------------------------

 
static int [] sort (int arr []) {
	    quickSort (arr, 0, arr.length - 1);
	    return arr;
	}
	private static void quickSort (int [] arr, int low, int high) {
	    int i = low;
	    int j = high; 
	    int pivot = arr [(high + low) / 2]; 
	    while (i <= j) {  
		while (arr [i] < pivot) {
		    i ++;
		} 
		while (arr [j] > pivot) {
		    j --;
		}
		if (i <= j) {  
		    int temp = arr [i];
		    arr [i] = arr [j];
		    arr [j] = temp;
		    i ++;
		    j --;
		}  
	    } 
	    if (low < j) 
		quickSort (arr, low, j);  
	    if (i < high) 
		quickSort (arr, i, high); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
695
2
Gpt3D_Clone695_2.java 1 14
Gpt3D_Clone695_2.java 15 46
----------------------------------------

static int [] sort (int arr []) {
    for (int i = 0;
    i < arr.length; i ++) {
        for (int j = i;
        j < arr.length; j ++) {
            if (arr [j] < arr [i]) {
                int temp = arr [i];
                arr [i] = arr [j];
                arr [j] = temp;
            }
        }
    }
    return arr;
}
----------------------------------------

 
static int [] sort (int arr []) {
	    quickSort (arr, 0, arr.length - 1);
	    return arr;
	}
	private static void quickSort (int [] arr, int low, int high) {
	    int i = low;
	    int j = high; 
	    int pivot = arr [(high + low) / 2]; 
	    while (i <= j) {  
		while (arr [i] < pivot) {
		    i ++;
		} 
		while (arr [j] > pivot) {
		    j --;
		}
		if (i <= j) {  
		    int temp = arr [i];
		    arr [i] = arr [j];
		    arr [j] = temp;
		    i ++;
		    j --;
		}  
	    } 
	    if (low < j) 
		quickSort (arr, low, j);  
	    if (i < high) 
		quickSort (arr, i, high); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
695
3
Gpt3D_Clone695_3.java 1 14
Gpt3D_Clone695_3.java 15 46
----------------------------------------

static int [] sort (int arr []) {
    for (int i = 0;
    i < arr.length; i ++) {
        for (int j = i;
        j < arr.length; j ++) {
            if (arr [j] < arr [i]) {
                int temp = arr [i];
                arr [i] = arr [j];
                arr [j] = temp;
            }
        }
    }
    return arr;
}
----------------------------------------

 
static int [] sort (int arr[]){
    int n = arr.length;
    int gap = n;
    boolean swapped = true;
    while (gap != 1 || swapped == true)
    {
        gap = getNextGap(gap);
        swapped = false;
        for (int i=0; i<n-gap; i++)
        {
            if (arr[i] > arr[i+gap])
            {
                int temp = arr[i];
                arr[i] = arr[i+gap];
                arr[i+gap] = temp;
                swapped = true;
            }
        }
    }
    return arr;
	}
	private static int getNextGap(int gap)
	{
	    gap = (gap*10)/13;
	    if (gap < 1)
		return 1;
	    return gap;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
695
4
Gpt3D_Clone695_4.java 1 14
Gpt3D_Clone695_4.java 15 48
----------------------------------------

static int [] sort (int arr []) {
    for (int i = 0;
    i < arr.length; i ++) {
        for (int j = i;
        j < arr.length; j ++) {
            if (arr [j] < arr [i]) {
                int temp = arr [i];
                arr [i] = arr [j];
                arr [j] = temp;
            }
        }
    }
    return arr;
}
----------------------------------------

 
 static int [] sort (int arr []) {
    int n = arr.length;
    for (int i = n / 2 - 1; i >= 0; i --) {
        heapify (arr, n, i);
    }
    for (int i = n - 1; i >= 0; i--) {
        int temp = arr [0];
        arr [0] = arr [i];
        arr [i] = temp;
        heapify (arr, i, 0);
    }
    return arr;
	}
	private static void heapify (int [] arr, int n, int i) {
	    int largest = i;
	    int l = 2 * i + 1;
	    int r = 2 * i + 2;
	    if (l < n && arr [l] > arr [largest]) {
		largest = l;
	    }
	    if (r < n && arr [r] > arr [largest]) {
		largest = r;
	    }
	    if (largest != i) {
		int temp = arr [i];
		arr [i] = arr [largest];
		arr [largest] = temp;
		heapify (arr, n, largest);
	    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
695
6
Gpt3D_Clone695_6.java 1 14
Gpt3D_Clone695_6.java 15 48
----------------------------------------

static int [] sort (int arr []) {
    for (int i = 0;
    i < arr.length; i ++) {
        for (int j = i;
        j < arr.length; j ++) {
            if (arr [j] < arr [i]) {
                int temp = arr [i];
                arr [i] = arr [j];
                arr [j] = temp;
            }
        }
    }
    return arr;
}
----------------------------------------

 
 static int [] sort (int arr []) {
    int n = arr.length;
    for (int i = n / 2 - 1; i >= 0; i --) {
        heapify (arr, n, i);
    }
    for (int i = n - 1; i >= 0; i--) {
        int temp = arr [0];
        arr [0] = arr [i];
        arr [i] = temp;
        heapify (arr, i, 0);
    }
    return arr;
	}
	private static void heapify (int [] arr, int n, int i) {
	    int largest = i;
	    int l = 2 * i + 1;
	    int r = 2 * i + 2;
	    if (l < n && arr [l] > arr [largest]) {
		largest = l;
	    }
	    if (r < n && arr [r] > arr [largest]) {
		largest = r;
	    }
	    if (largest != i) {
		int temp = arr [i];
		arr [i] = arr [largest];
		arr [largest] = temp;
		heapify (arr, n, largest);
	    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
695
7
Gpt3D_Clone695_7.java 1 14
Gpt3D_Clone695_7.java 15 30
----------------------------------------

static int [] sort (int arr []) {
    for (int i = 0;
    i < arr.length; i ++) {
        for (int j = i;
        j < arr.length; j ++) {
            if (arr [j] < arr [i]) {
                int temp = arr [i];
                arr [i] = arr [j];
                arr [j] = temp;
            }
        }
    }
    return arr;
}
----------------------------------------

 
static int [] sort (int arr []) {
    for (int i = 1;
    i < arr.length; i ++) {
        int j = i;
        while (j > 0 && arr [j] < arr [j - 1]) {
            int temp = arr [j];
            arr [j] = arr [j - 1];
            arr [j - 1] = temp;
            j --;
        }
    }
    return arr;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
695
8
Gpt3D_Clone695_8.java 1 14
Gpt3D_Clone695_8.java 15 52
----------------------------------------

static int [] sort (int arr []) {
    for (int i = 0;
    i < arr.length; i ++) {
        for (int j = i;
        j < arr.length; j ++) {
            if (arr [j] < arr [i]) {
                int temp = arr [i];
                arr [i] = arr [j];
                arr [j] = temp;
            }
        }
    }
    return arr;
}
----------------------------------------

 
static int [] sort (int arr []) {
    if (arr.length > 1) {
        int mid = arr.length / 2;
        int[] left = Arrays.copyOfRange (arr, 0, mid);
        int[] right = Arrays.copyOfRange (arr, mid, arr.length);
        sort (left);
        sort (right);
        merge (left, right, arr);
    }
    return arr;
	}
	private static void merge (int [] left, int [] right, int [] arr) {
	    int l = 0, r = 0, m = 0;
	    while (l < left.length && r < right.length) {
		if (left [l] < right [r]) {
		    arr [m] = left [l];
		    l ++;
		} else {
		    arr [m] = right [r];
		    r ++;
		}
		m ++;
	    }
	    while (l < left.length) {
		arr [m] = left [l];
		l ++;
		m ++;
	    }
	    while (r < right.length) {
		arr [m] = right [r];
		r ++;
		m ++;
	    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
695
9
Gpt3D_Clone695_9.java 1 14
Gpt3D_Clone695_9.java 15 30
----------------------------------------

static int [] sort (int arr []) {
    for (int i = 0;
    i < arr.length; i ++) {
        for (int j = i;
        j < arr.length; j ++) {
            if (arr [j] < arr [i]) {
                int temp = arr [i];
                arr [i] = arr [j];
                arr [j] = temp;
            }
        }
    }
    return arr;
}
----------------------------------------

static int [] sort (int arr[]){
    int n = arr.length;
    for (int gap = n/2; gap > 0; gap /= 2) {
        for (int i = gap; i < n; i += 1) {
            int tmp = arr[i];
            int j;
            for (j = i; j >= gap && arr[j - gap] > tmp; j -= gap)
                arr[j] = arr[j - gap];
            arr[j] = tmp;
        }
    }
    return arr;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
696
0
Gpt3D_Clone696_0.java 1 12
Gpt3D_Clone696_0.java 13 25
----------------------------------------

public static String interleave (String you, String me) {
    char [] a = you.toCharArray ();
    char [] b = me.toCharArray ();
    StringBuilder out = new StringBuilder ();
    int maxLength = Math.max (a.length, b.length);
    for (int i = 0;
    i < maxLength; i ++) {
        if (i < a.length) out.append (a [i]);
        if (i < b.length) out.append (b [i]);
    }
    return out.toString ();
}
----------------------------------------

 public static String interleave(String you, String me) {
    int maxLength = Math.max(you.length(), me.length());
    StringBuilder out = new StringBuilder();
    for(int i=0; i<maxLength; i++) {
        char c = i < you.length() ? you.charAt(i) : ' ';
        out.append(c);
        char d = i < me.length() ? me.charAt(i) : ' ';
        out.append(d);
    }
    return out.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
696
1
Gpt3D_Clone696_1.java 1 12
Gpt3D_Clone696_1.java 13 23
----------------------------------------

public static String interleave (String you, String me) {
    char [] a = you.toCharArray ();
    char [] b = me.toCharArray ();
    StringBuilder out = new StringBuilder ();
    int maxLength = Math.max (a.length, b.length);
    for (int i = 0;
    i < maxLength; i ++) {
        if (i < a.length) out.append (a [i]);
        if (i < b.length) out.append (b [i]);
    }
    return out.toString ();
}
----------------------------------------

 public static String interleave(String you, String me) {
    int maxLength = Math.max(you.length(), me.length());
    String joinedString = "";
    for (int i = 0; i < maxLength; i++) {
        if(i<you.length()) joinedString+=you.charAt(i);
        if(i<me.length()) joinedString+=me.charAt(i);
    }
    return joinedString;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
696
2
Gpt3D_Clone696_2.java 1 12
Gpt3D_Clone696_2.java 13 23
----------------------------------------

public static String interleave (String you, String me) {
    char [] a = you.toCharArray ();
    char [] b = me.toCharArray ();
    StringBuilder out = new StringBuilder ();
    int maxLength = Math.max (a.length, b.length);
    for (int i = 0;
    i < maxLength; i ++) {
        if (i < a.length) out.append (a [i]);
        if (i < b.length) out.append (b [i]);
    }
    return out.toString ();
}
----------------------------------------

 public static String interleave(String you, String me) {
    int maxLength = Math.max(you.length(), me.length());
    String resultString = "";
    for (int i = 0; i < maxLength; i++) {
        if(i < you.length()) resultString = resultString + you.charAt(i);
        if(i < me.length()) resultString = resultString + me.charAt(i);
    }
    return resultString;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
696
3
Gpt3D_Clone696_3.java 1 12
Gpt3D_Clone696_3.java 13 23
----------------------------------------

public static String interleave (String you, String me) {
    char [] a = you.toCharArray ();
    char [] b = me.toCharArray ();
    StringBuilder out = new StringBuilder ();
    int maxLength = Math.max (a.length, b.length);
    for (int i = 0;
    i < maxLength; i ++) {
        if (i < a.length) out.append (a [i]);
        if (i < b.length) out.append (b [i]);
    }
    return out.toString ();
}
----------------------------------------

 public static String interleave(String you, String me) {
    int maxLength = Math.max(you.length(), me.length());
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < maxLength; i++) {
        if(i < you.length()) sb.append(you.charAt(i));
        if(i < me.length()) sb.append(me.charAt(i));
    }
    return sb.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
696
4
Gpt3D_Clone696_4.java 1 12
Gpt3D_Clone696_4.java 13 23
----------------------------------------

public static String interleave (String you, String me) {
    char [] a = you.toCharArray ();
    char [] b = me.toCharArray ();
    StringBuilder out = new StringBuilder ();
    int maxLength = Math.max (a.length, b.length);
    for (int i = 0;
    i < maxLength; i ++) {
        if (i < a.length) out.append (a [i]);
        if (i < b.length) out.append (b [i]);
    }
    return out.toString ();
}
----------------------------------------

 public static String interleave(String you, String me) {
    int maxLength = Math.max(you.length(), me.length());
    StringBuilder output = new StringBuilder();
    for(int i = 0; i < maxLength; i++) {
        if(i < you.length()) output.append(you.charAt(i));
        if(i < me.length()) output.append(me.charAt(i));
    }
    return output.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
696
5
Gpt3D_Clone696_5.java 1 12
Gpt3D_Clone696_5.java 13 23
----------------------------------------

public static String interleave (String you, String me) {
    char [] a = you.toCharArray ();
    char [] b = me.toCharArray ();
    StringBuilder out = new StringBuilder ();
    int maxLength = Math.max (a.length, b.length);
    for (int i = 0;
    i < maxLength; i ++) {
        if (i < a.length) out.append (a [i]);
        if (i < b.length) out.append (b [i]);
    }
    return out.toString ();
}
----------------------------------------

 public static String interleave(String you, String me) {
    int maxLength = Math.max(you.length(), me.length());
    String out = "";
    for (int i = 0; i < maxLength; i++) {
        if(i < you.length()) out += you.charAt(i);
        if(i < me.length()) out += me.charAt(i);
    }
    return out;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
696
6
Gpt3D_Clone696_6.java 1 12
Gpt3D_Clone696_6.java 13 23
----------------------------------------

public static String interleave (String you, String me) {
    char [] a = you.toCharArray ();
    char [] b = me.toCharArray ();
    StringBuilder out = new StringBuilder ();
    int maxLength = Math.max (a.length, b.length);
    for (int i = 0;
    i < maxLength; i ++) {
        if (i < a.length) out.append (a [i]);
        if (i < b.length) out.append (b [i]);
    }
    return out.toString ();
}
----------------------------------------

 public static String interleave(String you, String me) {
    int maxLength = Math.max(you.length(), me.length());
    String temp = "";
    for (int i = 0; i < maxLength; i++) {
        if(i < you.length()) temp = temp + you.charAt(i);
        if(i < me.length()) temp = temp + me.charAt(i);
    }
    return temp;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
696
7
Gpt3D_Clone696_7.java 1 12
Gpt3D_Clone696_7.java 13 23
----------------------------------------

public static String interleave (String you, String me) {
    char [] a = you.toCharArray ();
    char [] b = me.toCharArray ();
    StringBuilder out = new StringBuilder ();
    int maxLength = Math.max (a.length, b.length);
    for (int i = 0;
    i < maxLength; i ++) {
        if (i < a.length) out.append (a [i]);
        if (i < b.length) out.append (b [i]);
    }
    return out.toString ();
}
----------------------------------------

 public static String interleave(String you, String me) {
    int maxLength = Math.max(you.length(), me.length());
    StringBuffer sb = new StringBuffer();
    for(int i = 0; i < maxLength; i++) {
        if(i < you.length()) sb.append(you.charAt(i));
        if(i < me.length()) sb.append(me.charAt(i));
    }
    return sb.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
696
8
Gpt3D_Clone696_8.java 1 12
Gpt3D_Clone696_8.java 13 23
----------------------------------------

public static String interleave (String you, String me) {
    char [] a = you.toCharArray ();
    char [] b = me.toCharArray ();
    StringBuilder out = new StringBuilder ();
    int maxLength = Math.max (a.length, b.length);
    for (int i = 0;
    i < maxLength; i ++) {
        if (i < a.length) out.append (a [i]);
        if (i < b.length) out.append (b [i]);
    }
    return out.toString ();
}
----------------------------------------

 public static String interleave(String you, String me) {
    int maxLength = Math.max(you.length(), me.length());
    String output = "";
    for (int i = 0; i < maxLength; i++) {
        if(i < you.length()) output += you.charAt(i);
        if(i < me.length()) output += me.charAt(i);
    }
    return output;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
696
9
Gpt3D_Clone696_9.java 1 12
Gpt3D_Clone696_9.java 13 23
----------------------------------------

public static String interleave (String you, String me) {
    char [] a = you.toCharArray ();
    char [] b = me.toCharArray ();
    StringBuilder out = new StringBuilder ();
    int maxLength = Math.max (a.length, b.length);
    for (int i = 0;
    i < maxLength; i ++) {
        if (i < a.length) out.append (a [i]);
        if (i < b.length) out.append (b [i]);
    }
    return out.toString ();
}
----------------------------------------

 public static String interleave(String you, String me) {
    int maxLength = Math.max(you.length(), me.length());
    String outputStr = "";
    for (int i = 0; i < maxLength; i++) {
        if(i<you.length()) outputStr += you.charAt(i);
        if(i<me.length()) outputStr += me.charAt(i);
    }
    return outputStr;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
701
0
Gpt3D_Clone701_0.java 1 11
Gpt3D_Clone701_0.java 12 34
----------------------------------------

public static void printTable (String [] countries, int [] populations) {
    if (countries.length == 0 || populations.length == 0 || countries.length != populations.length) {
        return;
    }
    int longestCountry = Arrays.stream (countries).map (String :: toString).mapToInt (String :: length).max ().getAsInt ();
    int longestPop = Arrays.stream (populations).mapToObj (Integer :: toString).mapToInt (String :: length).max ().getAsInt ();
    for (int i = 0;
    i < countries.length; i ++) {
        System.out.printf ("%-" + longestCountry + "s | %" + longestPop + "d%n", countries [i], populations [i]);
    }
}
----------------------------------------

 public static void printTable (String [] countries, int [] populations) {
    if (countries.length == 0 || populations.length == 0 || countries.length != populations.length) {
        return;
    }
    int longestCountry = 0; 
    int longestPop = 0; 
    for(int i = 0; i < countries.length; i++){
        int currentCountryLength = countries[i].length();
        if(currentCountryLength > longestCountry){
            longestCountry = currentCountryLength;
        }
        int currentPopulationLength = Integer.toString(populations[i]).length();
        if(currentPopulationLength > longestPop){
            longestPop = currentPopulationLength;
        }
    }
    for (int i = 0;
    i < countries.length; i ++) {
        System.out.printf ("%-" + longestCountry + "s | %" + longestPop + "d%n", countries [i], populations [i]);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
701
1
Gpt3D_Clone701_1.java 1 11
Gpt3D_Clone701_1.java 12 36
----------------------------------------

public static void printTable (String [] countries, int [] populations) {
    if (countries.length == 0 || populations.length == 0 || countries.length != populations.length) {
        return;
    }
    int longestCountry = Arrays.stream (countries).map (String :: toString).mapToInt (String :: length).max ().getAsInt ();
    int longestPop = Arrays.stream (populations).mapToObj (Integer :: toString).mapToInt (String :: length).max ().getAsInt ();
    for (int i = 0;
    i < countries.length; i ++) {
        System.out.printf ("%-" + longestCountry + "s | %" + longestPop + "d%n", countries [i], populations [i]);
    }
}
----------------------------------------

 public static void printTable (String [] countries, int [] populations) {
    if (countries.length == 0 || populations.length == 0 || countries.length != populations.length) {
        return;
    }
    int longestCountry = 0;
    int longestPop = 0;
    for (int i=0; i<countries.length; i++) {
        int len1 = countries[i].length();
        if (longestCountry < len1) {
            longestCountry = len1;
        }
        int len2 = Integer.toString(populations[i]).length();
        if (longestPop < len2) {
            longestPop = len2;
        }
    }
    for (int i = 0;
    i < countries.length; i ++) {
        System.out.printf ("%-" + longestCountry + "s | %" + longestPop + "d%n", countries [i], populations [i]);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
701
2
Gpt3D_Clone701_2.java 1 11
Gpt3D_Clone701_2.java 12 35
----------------------------------------

public static void printTable (String [] countries, int [] populations) {
    if (countries.length == 0 || populations.length == 0 || countries.length != populations.length) {
        return;
    }
    int longestCountry = Arrays.stream (countries).map (String :: toString).mapToInt (String :: length).max ().getAsInt ();
    int longestPop = Arrays.stream (populations).mapToObj (Integer :: toString).mapToInt (String :: length).max ().getAsInt ();
    for (int i = 0;
    i < countries.length; i ++) {
        System.out.printf ("%-" + longestCountry + "s | %" + longestPop + "d%n", countries [i], populations [i]);
    }
}
----------------------------------------

 public static void printTable (String [] countries, int [] populations) {       
    if (countries.length == 0 || populations.length == 0 || countries.length != populations.length) {
        return;
    }
  
    int longestCountry = 0;
    int longestPop = 0;
    for (int i=0; i<countries.length; i++) {
        if (longestCountry < countries[i].length()) {
            longestCountry = countries[i].length();
        }
        if (longestPop < Integer.toString(populations[i]).length()) {
            longestPop = Integer.toString(populations[i]).length();
        }
    }
    for (int i = 0;
    i < countries.length; i ++) {
        System.out.printf ("%-" + longestCountry + "s | %" + longestPop + "d%n", countries [i], populations [i]);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
701
3
Gpt3D_Clone701_3.java 1 11
Gpt3D_Clone701_3.java 12 33
----------------------------------------

public static void printTable (String [] countries, int [] populations) {
    if (countries.length == 0 || populations.length == 0 || countries.length != populations.length) {
        return;
    }
    int longestCountry = Arrays.stream (countries).map (String :: toString).mapToInt (String :: length).max ().getAsInt ();
    int longestPop = Arrays.stream (populations).mapToObj (Integer :: toString).mapToInt (String :: length).max ().getAsInt ();
    for (int i = 0;
    i < countries.length; i ++) {
        System.out.printf ("%-" + longestCountry + "s | %" + longestPop + "d%n", countries [i], populations [i]);
    }
}
----------------------------------------

 public static void printTable (String [] countries, int [] populations) {
    if (countries.length == 0 || populations.length == 0 || countries.length != populations.length) {
        return;
    }
    int longestCountry = 0;
    int longestPop = 0;
    for(int i = 0; i < countries.length; i++){
        if(countries[i].length() > longestCountry){
            longestCountry = countries[i].length();
        }
        if(Integer.toString(populations[i]).length() > longestPop){
            longestPop = Integer.toString(populations[i]).length();
        }
    }
    for (int i = 0;
    i < countries.length; i ++) {
        System.out.printf ("%-" + longestCountry + "s | %" + longestPop + "d%n", countries [i], populations [i]);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
701
4
Gpt3D_Clone701_4.java 1 11
Gpt3D_Clone701_4.java 12 32
----------------------------------------

public static void printTable (String [] countries, int [] populations) {
    if (countries.length == 0 || populations.length == 0 || countries.length != populations.length) {
        return;
    }
    int longestCountry = Arrays.stream (countries).map (String :: toString).mapToInt (String :: length).max ().getAsInt ();
    int longestPop = Arrays.stream (populations).mapToObj (Integer :: toString).mapToInt (String :: length).max ().getAsInt ();
    for (int i = 0;
    i < countries.length; i ++) {
        System.out.printf ("%-" + longestCountry + "s | %" + longestPop + "d%n", countries [i], populations [i]);
    }
}
----------------------------------------

 public static void printTable (String [] countries, int [] populations) {
    if (countries.length == 0 || populations.length == 0 || countries.length != populations.length) {
        return;
    }
    int longestCountry = 0;
    int longestPop = 0;
    for (int i = 0; i < countries.length; i++) {
        if (longestCountry == 0 || longestCountry < countries[i].length()) {
            longestCountry = countries[i].length();
        }
        if (longestPop == 0 || longestPop < Integer.toString(populations[i]).length()) {
            longestPop = Integer.toString(populations[i]).length();
        }
    }
    for (int i = 0;
    i < countries.length; i ++) {
        System.out.printf ("%-" + longestCountry + "s | %" + longestPop + "d%n", countries [i], populations [i]);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
701
5
Gpt3D_Clone701_5.java 1 11
Gpt3D_Clone701_5.java 12 32
----------------------------------------

public static void printTable (String [] countries, int [] populations) {
    if (countries.length == 0 || populations.length == 0 || countries.length != populations.length) {
        return;
    }
    int longestCountry = Arrays.stream (countries).map (String :: toString).mapToInt (String :: length).max ().getAsInt ();
    int longestPop = Arrays.stream (populations).mapToObj (Integer :: toString).mapToInt (String :: length).max ().getAsInt ();
    for (int i = 0;
    i < countries.length; i ++) {
        System.out.printf ("%-" + longestCountry + "s | %" + longestPop + "d%n", countries [i], populations [i]);
    }
}
----------------------------------------

 public static void printTable (String [] countries, int [] populations) {
    if (countries.length == 0 || populations.length == 0 || countries.length != populations.length) {
        return;
    }
    int longestCountry = 0;
    int longestPop = 0;
    for (int i = 0; i < countries.length; i++) {
        if (longestCountry < countries[i].length()) {
            longestCountry = countries[i].length();
        }
        if (longestPop < Integer.toString(populations[i]).length()) {
            longestPop = Integer.toString(populations[i]).length();
        }
    }
    for (int i = 0;
    i < countries.length; i ++) {
        System.out.printf ("%-" + longestCountry + "s | %" + longestPop + "d%n", countries [i], populations [i]);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
701
6
Gpt3D_Clone701_6.java 1 11
Gpt3D_Clone701_6.java 12 33
----------------------------------------

public static void printTable (String [] countries, int [] populations) {
    if (countries.length == 0 || populations.length == 0 || countries.length != populations.length) {
        return;
    }
    int longestCountry = Arrays.stream (countries).map (String :: toString).mapToInt (String :: length).max ().getAsInt ();
    int longestPop = Arrays.stream (populations).mapToObj (Integer :: toString).mapToInt (String :: length).max ().getAsInt ();
    for (int i = 0;
    i < countries.length; i ++) {
        System.out.printf ("%-" + longestCountry + "s | %" + longestPop + "d%n", countries [i], populations [i]);
    }
}
----------------------------------------

 public static void printTable (String [] countries, int [] populations) {
    if (countries.length == 0 || populations.length == 0 || countries.length != populations.length) {
        return;
    }
    int maxCountry = 0;
    int maxPop = 0;
    for (int i=0; i<countries.length; i++) {
        if (countries[i].length() > maxCountry) {
            maxCountry = countries[i].length();
        }
        if (Integer.toString(populations[i]).length() > maxPop) {
            maxPop = Integer.toString(populations[i]).length();
        }
    }
    for (int i = 0;
    i < countries.length; i ++) {
        System.out.printf ("%-" + maxCountry + "s | %" + maxPop + "d%n", countries [i], populations [i]);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
701
7
Gpt3D_Clone701_7.java 1 11
Gpt3D_Clone701_7.java 12 33
----------------------------------------

public static void printTable (String [] countries, int [] populations) {
    if (countries.length == 0 || populations.length == 0 || countries.length != populations.length) {
        return;
    }
    int longestCountry = Arrays.stream (countries).map (String :: toString).mapToInt (String :: length).max ().getAsInt ();
    int longestPop = Arrays.stream (populations).mapToObj (Integer :: toString).mapToInt (String :: length).max ().getAsInt ();
    for (int i = 0;
    i < countries.length; i ++) {
        System.out.printf ("%-" + longestCountry + "s | %" + longestPop + "d%n", countries [i], populations [i]);
    }
}
----------------------------------------

 public static void printTable (String [] countries, int [] populations) {
    if (countries.length == 0 || populations.length == 0 || countries.length != populations.length) {
        return;
    }
    int longestCountry = 0;
    for(String country : countries){
        if(longestCountry < country.length())
            longestCountry = country.length();
    }
    int longestPop = 0;
    for(int population : populations){
        if(longestPop < Integer.toString(population).length())
            longestPop = Integer.toString(population).length();
    }
    for (int i = 0;
    i < countries.length; i ++) {
        System.out.printf ("%-" + longestCountry + "s | %" + longestPop + "d%n", countries [i], populations [i]);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
701
8
Gpt3D_Clone701_8.java 1 11
Gpt3D_Clone701_8.java 12 32
----------------------------------------

public static void printTable (String [] countries, int [] populations) {
    if (countries.length == 0 || populations.length == 0 || countries.length != populations.length) {
        return;
    }
    int longestCountry = Arrays.stream (countries).map (String :: toString).mapToInt (String :: length).max ().getAsInt ();
    int longestPop = Arrays.stream (populations).mapToObj (Integer :: toString).mapToInt (String :: length).max ().getAsInt ();
    for (int i = 0;
    i < countries.length; i ++) {
        System.out.printf ("%-" + longestCountry + "s | %" + longestPop + "d%n", countries [i], populations [i]);
    }
}
----------------------------------------

 public static void printTable (String [] countries, int [] populations) {
    if (countries.length == 0 || populations.length == 0 || countries.length != populations.length) {
        return;
    }
    int longestCountry = 0;
    int longestPop = 0;
    for (String country : countries) {
        if (longestCountry == 0 || longestCountry < country.length())
            longestCountry = country.length();
    }
    for (int population : populations) {
        if (longestPop == 0 || longestPop < Integer.toString(population).length())
            longestPop = Integer.toString(population).length();
    }
    for (int i = 0;
    i < countries.length; i ++) {
        System.out.printf ("%-" + longestCountry + "s | %" + longestPop + "d%n", countries [i], populations [i]);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
701
9
Gpt3D_Clone701_9.java 1 11
Gpt3D_Clone701_9.java 12 31
----------------------------------------

public static void printTable (String [] countries, int [] populations) {
    if (countries.length == 0 || populations.length == 0 || countries.length != populations.length) {
        return;
    }
    int longestCountry = Arrays.stream (countries).map (String :: toString).mapToInt (String :: length).max ().getAsInt ();
    int longestPop = Arrays.stream (populations).mapToObj (Integer :: toString).mapToInt (String :: length).max ().getAsInt ();
    for (int i = 0;
    i < countries.length; i ++) {
        System.out.printf ("%-" + longestCountry + "s | %" + longestPop + "d%n", countries [i], populations [i]);
    }
}
----------------------------------------

 public static void printTable (String [] countries, int [] populations) {
    if (countries.length == 0 || populations.length == 0 || countries.length != populations.length) {
        return;
    }
  
    int longestCountry = 0; 
    int longestPopulation = 0;
    for(int i = 0; i < countries.length; i++) {
        if(countries[i].length() > longestCountry)
            longestCountry = countries[i].length();
        if(Integer.toString(populations[i]).length() > longestPopulation)
            longestPopulation = Integer.toString(populations[i]).length();
    }
    for (int i = 0;
    i < countries.length; i ++) {
        System.out.printf ("%-" + longestCountry + "s | %" + longestPop + "d%n", countries [i], populations [i]);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
702
0
Gpt3D_Clone702_0.java 1 23
Gpt3D_Clone702_0.java 24 52
----------------------------------------

public static void printTable (String [] countries, int [] populations) {
    if (countries.length != 0) {
        int longestNameInput = countries [0].length ();
        int longestPopInput = String.valueOf (populations [0]).length ();
        for (int i = 0;
        i < countries.length; i ++) {
            int countLength = countries [i].length ();
            int popLength = String.valueOf (populations [i]).length ();
            if (countLength > longestNameInput) longestNameInput = countLength;
            if (popLength > longestPopInput) longestPopInput = popLength;
        }
        for (int i = 0;
        i < countries.length; i ++) {
            System.out.print (countries [i]);
            for (int j = 0;
            j < (longestNameInput - countries [i].length ()); j ++) System.out.print (" ");
            System.out.print (" | ");
            for (int k = 0;
            k < (longestPopInput - String.valueOf (populations [i]).length ()); k ++) System.out.print (" ");
            System.out.println (populations [i]);
        }
    }
}
----------------------------------------

 public static void printTable (String [] countries, int [] populations) { if (countries.length > 0) {
        List<String> populationString = new ArrayList<>();
        int longestNameInput = countries [0].length ();
        int longestPopInput = String.valueOf (populations [0]).length ();
        for (int i = 0; i < populations.length; i++){
            populationString.add(String.valueOf(populations[i]));
        }
        for(int i = 1; i < countries.length; i++){
            int nameLength = countries[i].length();
            int popLength = populationString.get(i).length();
            if(nameLength > longestNameInput){
                longestNameInput = nameLength;
            }
            if(popLength > longestPopInput){
                longestPopInput = popLength;
            }
        }
        for (int i = 0; i < countries.length; i++){
            String wordLeftPadded = String.format("%1$-" + longestNameInput + "s", countries[i]);
            String popLeftPadded = String.format("%1$-" + longestPopInput + "s", populationString.get(i));
            System.out.println(wordLeftPadded + " | " + popLeftPadded);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
702
5
Gpt3D_Clone702_5.java 1 23
Gpt3D_Clone702_5.java 24 44
----------------------------------------

public static void printTable (String [] countries, int [] populations) {
    if (countries.length != 0) {
        int longestNameInput = countries [0].length ();
        int longestPopInput = String.valueOf (populations [0]).length ();
        for (int i = 0;
        i < countries.length; i ++) {
            int countLength = countries [i].length ();
            int popLength = String.valueOf (populations [i]).length ();
            if (countLength > longestNameInput) longestNameInput = countLength;
            if (popLength > longestPopInput) longestPopInput = popLength;
        }
        for (int i = 0;
        i < countries.length; i ++) {
            System.out.print (countries [i]);
            for (int j = 0;
            j < (longestNameInput - countries [i].length ()); j ++) System.out.print (" ");
            System.out.print (" | ");
            for (int k = 0;
            k < (longestPopInput - String.valueOf (populations [i]).length ()); k ++) System.out.print (" ");
            System.out.println (populations [i]);
        }
    }
}
----------------------------------------

 public static void printTable (String [] countries, int [] populations) {if (countries.length > 0) {
        // Finding the length of the longest input from both the input arrays
        int longestNameInput = 0;
        int longestPopInput = 0;
        for (int i = 0; 
        i < countries.length; i++) {
            longestNameInput = Math.max (longestNameInput, countries [i].length ());
            longestPopInput = Math.max (longestPopInput, String.valueOf (populations [i]).length ());
        }
        // Printing the input values in tabular format
        for (int i = 0; 
        i < countries.length; i ++) {
            System.out.print (String.format ("%-" + longestNameInput + "s", countries [i]));
            System.out.print (" | ");
            System.out.println (String.format ("%" + longestPopInput + "s", populations [i]));
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
702
6
Gpt3D_Clone702_6.java 1 23
Gpt3D_Clone702_6.java 24 41
----------------------------------------

public static void printTable (String [] countries, int [] populations) {
    if (countries.length != 0) {
        int longestNameInput = countries [0].length ();
        int longestPopInput = String.valueOf (populations [0]).length ();
        for (int i = 0;
        i < countries.length; i ++) {
            int countLength = countries [i].length ();
            int popLength = String.valueOf (populations [i]).length ();
            if (countLength > longestNameInput) longestNameInput = countLength;
            if (popLength > longestPopInput) longestPopInput = popLength;
        }
        for (int i = 0;
        i < countries.length; i ++) {
            System.out.print (countries [i]);
            for (int j = 0;
            j < (longestNameInput - countries [i].length ()); j ++) System.out.print (" ");
            System.out.print (" | ");
            for (int k = 0;
            k < (longestPopInput - String.valueOf (populations [i]).length ()); k ++) System.out.print (" ");
            System.out.println (populations [i]);
        }
    }
}
----------------------------------------

 public static void printTable (String [] countries, int [] populations) {if (countries.length > 0) {
        int longestNameInput = countries [0].length ();
        int longestPopInput = String.valueOf (populations [0]).length ();
        for (int i = 0;
        i < countries.length; i++) {
            longestNameInput = Math.max(longestNameInput, countries[i].length());
            longestPopInput = Math.max(longestPopInput, String.valueOf(populations[i]).length());
        }
        for (int i = 0; 
        i < countries.length; i ++) {
           System.out.print(String.format("%-" + longestNameInput + "s", countries[i]));
            System.out.print(" | ");
            System.out.println(String.format("%" + longestPopInput + "s", populations[i]));
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
702
7
Gpt3D_Clone702_7.java 1 23
Gpt3D_Clone702_7.java 24 44
----------------------------------------

public static void printTable (String [] countries, int [] populations) {
    if (countries.length != 0) {
        int longestNameInput = countries [0].length ();
        int longestPopInput = String.valueOf (populations [0]).length ();
        for (int i = 0;
        i < countries.length; i ++) {
            int countLength = countries [i].length ();
            int popLength = String.valueOf (populations [i]).length ();
            if (countLength > longestNameInput) longestNameInput = countLength;
            if (popLength > longestPopInput) longestPopInput = popLength;
        }
        for (int i = 0;
        i < countries.length; i ++) {
            System.out.print (countries [i]);
            for (int j = 0;
            j < (longestNameInput - countries [i].length ()); j ++) System.out.print (" ");
            System.out.print (" | ");
            for (int k = 0;
            k < (longestPopInput - String.valueOf (populations [i]).length ()); k ++) System.out.print (" ");
            System.out.println (populations [i]);
        }
    }
}
----------------------------------------

 public static void printTable (String [] countries, int [] populations) { if (countries.length > 0) {
        // Finding the length of longest input from the given arrays
        int maxStringLength = Integer.MIN_VALUE;
        for (String country : countries) {
            maxStringLength = Math.max (maxStringLength, country.length ());
        }
        for (int population : populations) {
            maxStringLength = Math.max (maxStringLength, String.valueOf (population).length ());
        }
        // Appending a space character to the end of the input to create a tabular format
        for (int i = 0;
        i < countries.length; i ++) {
            System.out.print (String.format ("%-" + (maxStringLength + 1) + "s", countries [i]));
            System.out.print ("|");
            System.out.println (String.format ("%" + (maxStringLength + 1) + "s", populations [i]));
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
702
8
Gpt3D_Clone702_8.java 1 23
Gpt3D_Clone702_8.java 24 41
----------------------------------------

public static void printTable (String [] countries, int [] populations) {
    if (countries.length != 0) {
        int longestNameInput = countries [0].length ();
        int longestPopInput = String.valueOf (populations [0]).length ();
        for (int i = 0;
        i < countries.length; i ++) {
            int countLength = countries [i].length ();
            int popLength = String.valueOf (populations [i]).length ();
            if (countLength > longestNameInput) longestNameInput = countLength;
            if (popLength > longestPopInput) longestPopInput = popLength;
        }
        for (int i = 0;
        i < countries.length; i ++) {
            System.out.print (countries [i]);
            for (int j = 0;
            j < (longestNameInput - countries [i].length ()); j ++) System.out.print (" ");
            System.out.print (" | ");
            for (int k = 0;
            k < (longestPopInput - String.valueOf (populations [i]).length ()); k ++) System.out.print (" ");
            System.out.println (populations [i]);
        }
    }
}
----------------------------------------

 public static void printTable (String [] countries, int [] populations) {if (countries.length > 0) {
        int longestNameInput = 0;
        int longestPopInput = 0;
        //finding the length of the longest elements present in the input arrays
        for (int i = 0; 
        i < countries.length; i ++) {
            longestNameInput = Math.max (longestNameInput, countries [i].length ());
            longestPopInput = Math.max (longestPopInput, String.valueOf (populations [i]).length ());
        }
        String paddedFormatString = String.format ("%%-%ds | %%%ds %%n", longestNameInput, longestPopInput);
        for (int i = 0; 
        i < countries.length; i ++) {
            System.out.printf (paddedFormatString, countries [i], populations [i]);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
702
9
Gpt3D_Clone702_9.java 1 23
Gpt3D_Clone702_9.java 24 40
----------------------------------------

public static void printTable (String [] countries, int [] populations) {
    if (countries.length != 0) {
        int longestNameInput = countries [0].length ();
        int longestPopInput = String.valueOf (populations [0]).length ();
        for (int i = 0;
        i < countries.length; i ++) {
            int countLength = countries [i].length ();
            int popLength = String.valueOf (populations [i]).length ();
            if (countLength > longestNameInput) longestNameInput = countLength;
            if (popLength > longestPopInput) longestPopInput = popLength;
        }
        for (int i = 0;
        i < countries.length; i ++) {
            System.out.print (countries [i]);
            for (int j = 0;
            j < (longestNameInput - countries [i].length ()); j ++) System.out.print (" ");
            System.out.print (" | ");
            for (int k = 0;
            k < (longestPopInput - String.valueOf (populations [i]).length ()); k ++) System.out.print (" ");
            System.out.println (populations [i]);
        }
    }
}
----------------------------------------

 public static void printTable (String [] countries, int [] populations) {if (countries.length > 0) {
        int longestNameInput = countries [0].length ();
        int longestPopInput = String.valueOf (populations [0]).length ();
        for (int i = 1; 
        i < countries.length; i ++) {
            longestNameInput = Math.max (longestNameInput, countries [i].length ());
            longestPopInput = Math.max (longestPopInput, String.valueOf (populations [i]).length ());
        }
        String format = String.format ("%%-%ds | %%%ds %%n", longestNameInput, longestPopInput);
        for (int i = 0; 
        i < countries.length; i ++) {
            System.out.printf (format, countries [i], populations [i]);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
703
0
Gpt3D_Clone703_0.java 1 9
Gpt3D_Clone703_0.java 10 42
----------------------------------------

public static void printTable (String [] countries, int [] populations) {
    int defaultLength = 10;
    int maxCountryLength = stream (countries).mapToInt (String :: length).max ().orElse (defaultLength);
    int maxPopulationLength = stream (populations).mapToObj (Integer :: toString).mapToInt (String :: length).max ().orElse (defaultLength);
    for (int i = 0;
    i < countries.length; i ++) {
        System.out.format ("%-" + maxCountryLength + "s | %" + maxPopulationLength + "d\n", countries [i], populations [i]);
    }
}
----------------------------------------

 public static void printTable (String [] countries, int [] populations) {
    int defaultLength = 10;
    int maxCountryLength = 0;
    int maxPopulationLength = 0;
    
    // loop through all countries to find max string length
    for(int i = 0; i < countries.length; i++) {
        if (maxCountryLength < countries[i].length()) {
            maxCountryLength = countries[i].length();
        }
    }
    
    // loop through all populations to find max int length
    for (int j = 0; j < populations.length; j++) {
        int population = populations[j];
        int populationLength = 0;
        
        // finds digits in population
        while (population > 0) {
            population = population/10;
            populationLength++;
        }
        if (populationLength> maxPopulationLength) {
            maxPopulationLength = populationLength;
        }
    }
    // printing
    for (int k = 0; k< countries.length; k++) {
        System.out.format("%-"+maxCountryLength+"s | %" +maxPopulationLength+"d\n", countries[k], populations[k]);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
703
1
Gpt3D_Clone703_1.java 1 9
Gpt3D_Clone703_1.java 10 42
----------------------------------------

public static void printTable (String [] countries, int [] populations) {
    int defaultLength = 10;
    int maxCountryLength = stream (countries).mapToInt (String :: length).max ().orElse (defaultLength);
    int maxPopulationLength = stream (populations).mapToObj (Integer :: toString).mapToInt (String :: length).max ().orElse (defaultLength);
    for (int i = 0;
    i < countries.length; i ++) {
        System.out.format ("%-" + maxCountryLength + "s | %" + maxPopulationLength + "d\n", countries [i], populations [i]);
    }
}
----------------------------------------

 public static void printTable(String [] countries, int [] populations) {
    int defaultLength = 10;
    int maxCountryLength= 0;
    int maxPopulationLength = 0;
    
    //find maximum length of country string
    for (int i = 0; i< countries.length; i++) {
        if(maxCountryLength < countries[i].length()) {
            maxCountryLength = countries[i].length(); 
        }
    }
    
    //loop thorugh populations to find the longest number
    for(int i =0; i < populations.length; i++) {
        int number = populations[i]; 
        int numberLength = 0;
        
        //counts number of digits in population 
        while(number > 0) {
            number = number/10;
            numberLength++; 
        }
        if(numberLength > maxPopulationLength) {
            maxPopulationLength = numberLength; 
        }
    }
    //print population 
    for(int i = 0; i< countries.length; i++) {
        System.out.format("%-"+maxCountryLength+"s | %" +maxPopulationLength+"d\n", countries[i], populations[i]); 
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
703
2
Gpt3D_Clone703_2.java 1 9
Gpt3D_Clone703_2.java 10 33
----------------------------------------

public static void printTable (String [] countries, int [] populations) {
    int defaultLength = 10;
    int maxCountryLength = stream (countries).mapToInt (String :: length).max ().orElse (defaultLength);
    int maxPopulationLength = stream (populations).mapToObj (Integer :: toString).mapToInt (String :: length).max ().orElse (defaultLength);
    for (int i = 0;
    i < countries.length; i ++) {
        System.out.format ("%-" + maxCountryLength + "s | %" + maxPopulationLength + "d\n", countries [i], populations [i]);
    }
}
----------------------------------------

 public static void printTable (String [] countries, int [] populations) {
    int defaultLength = 10;
    int maxCountryLength = 0;
    int maxPopulationLength = 0;
    for (int i = 0; i < countries.length; i++) {
        if (maxCountryLength < countries [i].length ()) {
            maxCountryLength = countries [i].length ();
        }
        int population = populations [i];
        int populationLength = 0;
        while (population > 0) {
            population = population / 10;
            populationLength++;
        }
        if (populationLength > maxPopulationLength) {
            maxPopulationLength = populationLength;
        }
    }
    for (int i = 0; i < countries.length; i++) {
        System.out.format ("%-" + maxCountryLength + "s | %" + maxPopulationLength + "d\n", countries [i], populations [i]);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
703
3
Gpt3D_Clone703_3.java 1 9
Gpt3D_Clone703_3.java 10 34
----------------------------------------

public static void printTable (String [] countries, int [] populations) {
    int defaultLength = 10;
    int maxCountryLength = stream (countries).mapToInt (String :: length).max ().orElse (defaultLength);
    int maxPopulationLength = stream (populations).mapToObj (Integer :: toString).mapToInt (String :: length).max ().orElse (defaultLength);
    for (int i = 0;
    i < countries.length; i ++) {
        System.out.format ("%-" + maxCountryLength + "s | %" + maxPopulationLength + "d\n", countries [i], populations [i]);
    }
}
----------------------------------------

 public static void printTable(String[] countries, int[] populations){
    int maxCountryLength = 0;
    int maxPopLength = 0;
    for(int i = 0; i < countries.length; i++){
        if(maxCountryLength < countries[i].length())
            maxCountryLength = countries[i].length();
    } 
    for(int i = 0; i < populations.length; i++){ 
        int tempPop = populations[i];
        int tempPopLen = 0;
        while(tempPop != 0){
            tempPop = tempPop/10;
            tempPopLen++;
        }
        if(tempPopLen > maxPopLength){
            maxPopLength = tempPopLen;
        }
    }
    for(int i = 0; i< countries.length; i++){
        System.out.format("%-"+maxCountryLength+"s | %"+maxPopLength+"d\n", countries[i], populations[i]);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
703
4
Gpt3D_Clone703_4.java 1 9
Gpt3D_Clone703_4.java 10 33
----------------------------------------

public static void printTable (String [] countries, int [] populations) {
    int defaultLength = 10;
    int maxCountryLength = stream (countries).mapToInt (String :: length).max ().orElse (defaultLength);
    int maxPopulationLength = stream (populations).mapToObj (Integer :: toString).mapToInt (String :: length).max ().orElse (defaultLength);
    for (int i = 0;
    i < countries.length; i ++) {
        System.out.format ("%-" + maxCountryLength + "s | %" + maxPopulationLength + "d\n", countries [i], populations [i]);
    }
}
----------------------------------------

 public static void printTable(String[] countries, int[] populations) { 
    int longestCountryName = 0; 
    int maxPopulationLength = 0; 
 
    for (int i = 0; i < countries.length; i++) { 
        if (longestCountryName < countries[i].length()) { 
            longestCountryName = countries[i].length(); 
        } 
        int population = populations[i]; 
        int populationLength = 0; 
        while (population > 0) { 
            population = population / 10; 
            populationLength++; 
        } 
        if (populationLength > maxPopulationLength) { 
            maxPopulationLength = populationLength; 
        } 
    } 
    for (int i = 0; i < countries.length; i++) { 
        System.out.format("%-" + longestCountryName + "s | %" + maxPopulationLength + "d\n", countries[i], populations[i]); 
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
703
5
Gpt3D_Clone703_5.java 1 9
Gpt3D_Clone703_5.java 10 35
----------------------------------------

public static void printTable (String [] countries, int [] populations) {
    int defaultLength = 10;
    int maxCountryLength = stream (countries).mapToInt (String :: length).max ().orElse (defaultLength);
    int maxPopulationLength = stream (populations).mapToObj (Integer :: toString).mapToInt (String :: length).max ().orElse (defaultLength);
    for (int i = 0;
    i < countries.length; i ++) {
        System.out.format ("%-" + maxCountryLength + "s | %" + maxPopulationLength + "d\n", countries [i], populations [i]);
    }
}
----------------------------------------

  public static void printTable (String [] countries, int [] populations) {
    int defaultLength = 10;
    int maxCountryLength = 0;
    int maxPopulationLength = 0;
    for (int i = 0; i < countries.length; i++) {
        int countryLength = countries[i].length();
        if (maxCountryLength > countryLength)
            maxCountryLength = countryLength;
 
        int populationLength = 0;
        int population = populations[i];
        while (population > 0) {
            population = population/10;
            populationLength++;
        }
 
        if (populationLength > maxPopulationLength)
            maxPopulationLength = populationLength;
 
        for (int j = 0; j < countries.length; j++){
            System.out.format("%-" + maxCountryLength + "s| %" + maxPopulationLength + "d\n", countries[j], populations[j]);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
703
6
Gpt3D_Clone703_6.java 1 9
Gpt3D_Clone703_6.java 10 29
----------------------------------------

public static void printTable (String [] countries, int [] populations) {
    int defaultLength = 10;
    int maxCountryLength = stream (countries).mapToInt (String :: length).max ().orElse (defaultLength);
    int maxPopulationLength = stream (populations).mapToObj (Integer :: toString).mapToInt (String :: length).max ().orElse (defaultLength);
    for (int i = 0;
    i < countries.length; i ++) {
        System.out.format ("%-" + maxCountryLength + "s | %" + maxPopulationLength + "d\n", countries [i], populations [i]);
    }
}
----------------------------------------

 public static void printTable (String [] countries, int [] populations) {
    int defaultLength = 10;
    int maxCountryLength = stream (countries).mapToInt (x -> x.length()).max ().orElse (defaultLength);
    int maxPopulationLength = 0;
    for(int i = 0; i < countries.length; i++){
        int population = populations[i];
        int populationLength = 0;
        while(population > 0){
            population /= 10;
            populationLength++;
        }
        if(populationLength > maxPopulationLength)
            maxPopulationLength = populationLength;
    }
    for(int i = 0; i < countries.length; i++){
        System.out.format("%-" + maxCountryLength + "s | %" + maxPopulationLength + "d\n", countries[i], populations[i]);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
703
8
Gpt3D_Clone703_8.java 1 9
Gpt3D_Clone703_8.java 10 22
----------------------------------------

public static void printTable (String [] countries, int [] populations) {
    int defaultLength = 10;
    int maxCountryLength = stream (countries).mapToInt (String :: length).max ().orElse (defaultLength);
    int maxPopulationLength = stream (populations).mapToObj (Integer :: toString).mapToInt (String :: length).max ().orElse (defaultLength);
    for (int i = 0;
    i < countries.length; i ++) {
        System.out.format ("%-" + maxCountryLength + "s | %" + maxPopulationLength + "d\n", countries [i], populations [i]);
    }
}
----------------------------------------

 public static void printTable(String [] countries, int [] populations) {
    int defaultLength = 10;
    int maxCountryLength = stream (countries).mapToInt (x -> x.length()).max ().orElse (defaultLength);
    int maxPopulationLength = stream (populations).mapToObj (Integer :: toString).mapToInt (x -> x.length()).max ().orElse (defaultLength);
    for (int i = 0;i < countries.length; i ++) {
        String countryName = String.format("%-"+maxCountryLength+"s",countries[i]);
        String populationValue = String.format("%"+maxPopulationLength+"d", populations[i]);
        System.out.println(countryName + " | "+ populationValue); 
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
704
2
Gpt3D_Clone704_2.java 1 23
Gpt3D_Clone704_2.java 24 45
----------------------------------------

public static void printTable (String [] countries, int [] populations) {
    if (countries.length != 0) {
        int longestNameInput = countries [0].length ();
        int longestPopInput = String.valueOf (populations [0]).length ();
        for (int i = 0;
        i < countries.length; i ++) {
            int countLength = countries [i].length ();
            int popLength = String.valueOf (populations [i]).length ();
            if (countLength > longestNameInput) longestNameInput = countLength;
            if (popLength > longestPopInput) longestPopInput = popLength;
        }
        for (int i = 0;
        i < countries.length; i ++) {
            System.out.print (countries [i]);
            for (int j = 0;
            j < (longestNameInput - countries [i].length ()); j ++) System.out.print (" ");
            System.out.print (" | ");
            for (int k = 0;
            k < (longestPopInput - String.valueOf (populations [i]).length ()); k ++) System.out.print (" ");
            System.out.println (populations [i]);
        }
    }
}
----------------------------------------

  public static void printTable (String [] countries, int [] populations) {
    if (countries.length != 0) {
        int maxNameInput = 0;
        int maxPopInput = 0;
        for(int i = 0; i < countries.length; i++) {
            int countLength = countries[i].length();
            int popLength = String.valueOf(populations[i]).length();
            if(countLength > maxNameInput) {
                maxNameInput = countLength;
            }
            if(popLength > maxPopInput) {
                maxPopInput = popLength;
            }
        }
        for(int i = 0; i < countries.length; i++) {
            System.out.printf("%- " + (maxNameInput+3) + "s|%" + (maxPopInput+1) + "d\n", countries[i], populations[i]);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
704
3
Gpt3D_Clone704_3.java 1 23
Gpt3D_Clone704_3.java 24 41
----------------------------------------

public static void printTable (String [] countries, int [] populations) {
    if (countries.length != 0) {
        int longestNameInput = countries [0].length ();
        int longestPopInput = String.valueOf (populations [0]).length ();
        for (int i = 0;
        i < countries.length; i ++) {
            int countLength = countries [i].length ();
            int popLength = String.valueOf (populations [i]).length ();
            if (countLength > longestNameInput) longestNameInput = countLength;
            if (popLength > longestPopInput) longestPopInput = popLength;
        }
        for (int i = 0;
        i < countries.length; i ++) {
            System.out.print (countries [i]);
            for (int j = 0;
            j < (longestNameInput - countries [i].length ()); j ++) System.out.print (" ");
            System.out.print (" | ");
            for (int k = 0;
            k < (longestPopInput - String.valueOf (populations [i]).length ()); k ++) System.out.print (" ");
            System.out.println (populations [i]);
        }
    }
}
----------------------------------------

  public static void printTable (String [] countries, int [] populations) {
    if (countries.length != 0) {
        int maxNameLength = 0;
        int maxPopLength = 0;
        for (int i = 0; i < countries.length; i++) {
            int nameLength = countries[i].length();
            int populationLength = String.valueOf(populations[i]).length();
            maxNameLength = Math.max(maxNameLength, nameLength);
            maxPopLength = Math.max(maxPopLength, populationLength);
        }
        for (int i = 0; i < countries.length; i++) {
            String output = String.format("%-" + (maxNameLength+3) + "s | %" + (maxPopLength + 1) + "d", countries[i], populations[i]);
            System.out.println(output);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
704
5
Gpt3D_Clone704_5.java 1 23
Gpt3D_Clone704_5.java 24 40
----------------------------------------

public static void printTable (String [] countries, int [] populations) {
    if (countries.length != 0) {
        int longestNameInput = countries [0].length ();
        int longestPopInput = String.valueOf (populations [0]).length ();
        for (int i = 0;
        i < countries.length; i ++) {
            int countLength = countries [i].length ();
            int popLength = String.valueOf (populations [i]).length ();
            if (countLength > longestNameInput) longestNameInput = countLength;
            if (popLength > longestPopInput) longestPopInput = popLength;
        }
        for (int i = 0;
        i < countries.length; i ++) {
            System.out.print (countries [i]);
            for (int j = 0;
            j < (longestNameInput - countries [i].length ()); j ++) System.out.print (" ");
            System.out.print (" | ");
            for (int k = 0;
            k < (longestPopInput - String.valueOf (populations [i]).length ()); k ++) System.out.print (" ");
            System.out.println (populations [i]);
        }
    }
}
----------------------------------------

  public static void printTable (String [] countries, int [] populations) {
    if (countries.length != 0) {
        int longestNameLength = Integer.MIN_VALUE;
        int longestPopLength = Integer.MIN_VALUE;
        for (int i = 0 ; i < countries.length ; i++){
            int nameLength = countries[i].length();
            int populationLength = String.valueOf(populations[i]).length();
            longestNameLength = Math.max(longestNameLength, nameLength);
            longestPopLength = Math.max(longestPopLength, populationLength);
        }
        for (int i = 0; i < countries.length; i++) {
            System.out.printf("%-" + (longestNameLength+3) + "s | %" + (longestPopLength + 1) + "d \n", countries[i], populations[i]);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
705
0
Gpt3D_Clone705_0.java 1 9
Gpt3D_Clone705_0.java 10 21
----------------------------------------

public static void printTable (String [] countries, int [] populations) {
    int defaultLength = 10;
    int maxCountryLength = stream (countries).mapToInt (String :: length).max ().orElse (defaultLength);
    int maxPopulationLength = stream (populations).mapToObj (Integer :: toString).mapToInt (String :: length).max ().orElse (defaultLength);
    for (int i = 0;
    i < countries.length; i ++) {
        System.out.format ("%-" + maxCountryLength + "s | %" + maxPopulationLength + "d\n", countries [i], populations [i]);
    }
}
----------------------------------------

public static void printTable(String[] countries, int[] populations) {
    int defaultLength = 10;
    int maxCountryLength = Arrays.stream(countries).map(String::length).max(Integer::compareTo).orElse(defaultLength);
    int maxPopulationLength = Arrays.stream(populations).mapToObj(Integer::toString).map(String::length).max(Integer::compareTo).orElse(defaultLength);
    String format = String.format("%%-%ds | %%%dd\n", maxCountryLength, maxPopulationLength);
    for (int i = 0; i < countries.length; i++) {
        System.out.format(format, countries[i], populations[i]);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
705
1
Gpt3D_Clone705_1.java 1 9
Gpt3D_Clone705_1.java 10 21
----------------------------------------

public static void printTable (String [] countries, int [] populations) {
    int defaultLength = 10;
    int maxCountryLength = stream (countries).mapToInt (String :: length).max ().orElse (defaultLength);
    int maxPopulationLength = stream (populations).mapToObj (Integer :: toString).mapToInt (String :: length).max ().orElse (defaultLength);
    for (int i = 0;
    i < countries.length; i ++) {
        System.out.format ("%-" + maxCountryLength + "s | %" + maxPopulationLength + "d\n", countries [i], populations [i]);
    }
}
----------------------------------------

 
public static void printTable(String[] countries, int[] populations) {
    int defaultLength = 10;
    int maxCountryLength = Stream.of(countries).mapToInt(String::length).max().orElse(defaultLength);
    int maxPopulationLength = Stream.of(populations).mapToObj(Integer::toString).mapToInt(String::length).max().orElse(defaultLength);
    String format = String.format("%%-%ds | %%%dd\n", maxCountryLength, maxPopulationLength);
    for (int i = 0; i < countries.length; i++) {
        System.out.format(format, countries[i], populations[i]);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
705
5
Gpt3D_Clone705_5.java 1 9
Gpt3D_Clone705_5.java 10 20
----------------------------------------

public static void printTable (String [] countries, int [] populations) {
    int defaultLength = 10;
    int maxCountryLength = stream (countries).mapToInt (String :: length).max ().orElse (defaultLength);
    int maxPopulationLength = stream (populations).mapToObj (Integer :: toString).mapToInt (String :: length).max ().orElse (defaultLength);
    for (int i = 0;
    i < countries.length; i ++) {
        System.out.format ("%-" + maxCountryLength + "s | %" + maxPopulationLength + "d\n", countries [i], populations [i]);
    }
}
----------------------------------------

 
public static void printTable(String[] countries, int[] populations) {
    int defaultLength = 10;
    int maxCountryLength = Arrays.stream(countries).mapToInt(String::length).max().orElse(defaultLength);
    int maxPopulationLength = Arrays.stream(populations).mapToObj(Integer::toString).mapToInt(String::length).max().orElse(defaultLength);
    for (int i = 0; i < countries.length; i++) {
        System.out.format(String.format("%%-%ds | %%%dd\n", maxCountryLength, maxPopulationLength), countries[i], populations[i]);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
706
4
Gpt3D_Clone706_4.java 1 16
Gpt3D_Clone706_4.java 17 46
----------------------------------------

public boolean equals (Object obj) {
    if (obj == null) {
        return false;
    }
    if (! Person.class.isAssignableFrom (obj.getClass ())) {
        return false;
    }
    final Person other = (Person) obj;
    if ((this.name == null) ? (other.name != null) : ! this.name.equals (other.name)) {
        return false;
    }
    if (this.age != other.age) {
        return false;
    }
    return true;
}
----------------------------------------

 public boolean equals (Object obj){
    if(obj == null){
        return false;
    }
    if(Person.class != obj.getClass()){
        return false;
    }
    Person other = (Person) obj;
    if ( ( this.name == null ) ? ( other.name == null ) : this.name.equals(other.name) ) {
    if( this.age == other.age ){
        return true;
        }
    }
    return false;
    }
 public boolean equals (Object obj) {
    if (obj == null || !(obj instanceof Person)) {
        return false;
    }
    final Person other = (Person) obj;
    if ((this.name == null) ? (other.name == null) : this.name.equals (other.name)) {
        if (this.age == other.age) {
            return true;
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
706
5
Gpt3D_Clone706_5.java 1 16
Gpt3D_Clone706_5.java 17 31
----------------------------------------

public boolean equals (Object obj) {
    if (obj == null) {
        return false;
    }
    if (! Person.class.isAssignableFrom (obj.getClass ())) {
        return false;
    }
    final Person other = (Person) obj;
    if ((this.name == null) ? (other.name != null) : ! this.name.equals (other.name)) {
        return false;
    }
    if (this.age != other.age) {
        return false;
    }
    return true;
}
----------------------------------------

 public boolean equals (Object obj) {
    if (obj == null || !Person.class.isInstance(obj)) {
        return false;
    }
    final Person other = (Person) obj;
    int checkName = this.name !=null && other.name != null? this.name.equals(other.name) ? 0 : 1 : -1;
    if (checkName == 0){
        boolean isAgeEqual = this.age == other.age;
        return isAgeEqual;
    } else {
        return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
706
7
Gpt3D_Clone706_7.java 1 16
Gpt3D_Clone706_7.java 17 29
----------------------------------------

public boolean equals (Object obj) {
    if (obj == null) {
        return false;
    }
    if (! Person.class.isAssignableFrom (obj.getClass ())) {
        return false;
    }
    final Person other = (Person) obj;
    if ((this.name == null) ? (other.name != null) : ! this.name.equals (other.name)) {
        return false;
    }
    if (this.age != other.age) {
        return false;
    }
    return true;
}
----------------------------------------

 public boolean equals (Object obj) {
    if (obj == null || !obj.getClass().equals(Person.class)) {
        return false;
    }
    final Person other = (Person) obj;
    if (Objects.equals(this.name, other.name) && this.age == other.age) {
        return true;
    } else {
         return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
706
8
Gpt3D_Clone706_8.java 1 16
Gpt3D_Clone706_8.java 17 46
----------------------------------------

public boolean equals (Object obj) {
    if (obj == null) {
        return false;
    }
    if (! Person.class.isAssignableFrom (obj.getClass ())) {
        return false;
    }
    final Person other = (Person) obj;
    if ((this.name == null) ? (other.name != null) : ! this.name.equals (other.name)) {
        return false;
    }
    if (this.age != other.age) {
        return false;
    }
    return true;
}
----------------------------------------

 public boolean equals (Object obj){
    if(obj == null){
        return false;
    }
    if(Person.class != obj.getClass()){
        return false;
    }
    Person other = (Person) obj;
    if ( ( this.name == null ) ? ( other.name == null ) : this.name.equals(other.name) ) {
    if( this.age == other.age ){
        return true;
        }
    }
    return false;
    }
 public boolean equals (Object obj) {
    if (obj == null || !(obj instanceof Person)) {
        return false;
    }
    final Person other = (Person) obj;
    if ((this.name == null) ? (other.name == null) : this.name.equals (other.name)) {
        if (this.age == other.age) {
            return true;
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
707
1
Gpt3D_Clone707_1.java 1 10
Gpt3D_Clone707_1.java 11 23
----------------------------------------

public boolean equals (Object other) {
    boolean result;
    if ((other == null) || (getClass () != other.getClass ())) {
        result = false;
    } else {
        People otherPeople = (People) other;
        result = name.equals (otherPeople.name) && age == otherPeople.age;
    }
    return result;
}
----------------------------------------

 public boolean equals (Object other) {boolean result = false; 
   if(other != null) { 
      if(other instanceof People) { 
         People otherPeople = (People) other; 
         if(name.equals(otherPeople.name) && age == otherPeople.age) { 
            result = true; 
         } 
      } 
   } 
   return result; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
707
2
Gpt3D_Clone707_2.java 1 10
Gpt3D_Clone707_2.java 11 21
----------------------------------------

public boolean equals (Object other) {
    boolean result;
    if ((other == null) || (getClass () != other.getClass ())) {
        result = false;
    } else {
        People otherPeople = (People) other;
        result = name.equals (otherPeople.name) && age == otherPeople.age;
    }
    return result;
}
----------------------------------------

 public boolean equals (Object other) {boolean result = false; 
   if(other != null) { 
      People otherPeople = (People) other;
      if(getClass() == other.getClass()) {
         result = name.equals(otherPeople.name) && age == otherPeople.age; 
      }
   } 
   return result; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
707
3
Gpt3D_Clone707_3.java 1 10
Gpt3D_Clone707_3.java 11 21
----------------------------------------

public boolean equals (Object other) {
    boolean result;
    if ((other == null) || (getClass () != other.getClass ())) {
        result = false;
    } else {
        People otherPeople = (People) other;
        result = name.equals (otherPeople.name) && age == otherPeople.age;
    }
    return result;
}
----------------------------------------

 public boolean equals (Object other) {boolean result = false; 
    if(other != null && other instanceof People) { 
      People otherPeople = (People) other; 
      if(name.equals(otherPeople.name) && age == otherPeople.age) { 
         result = true; 
      } 
   } 
   return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
707
4
Gpt3D_Clone707_4.java 1 10
Gpt3D_Clone707_4.java 11 19
----------------------------------------

public boolean equals (Object other) {
    boolean result;
    if ((other == null) || (getClass () != other.getClass ())) {
        result = false;
    } else {
        People otherPeople = (People) other;
        result = name.equals (otherPeople.name) && age == otherPeople.age;
    }
    return result;
}
----------------------------------------

 public boolean equals (Object other) {boolean result = false; 
   if(other != null && other instanceof People) { 
      People otherPeople = (People) other; 
      result = name.equals(otherPeople.name) && age == otherPeople.age; 
   } 
   return result; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
707
5
Gpt3D_Clone707_5.java 1 10
Gpt3D_Clone707_5.java 11 16
----------------------------------------

public boolean equals (Object other) {
    boolean result;
    if ((other == null) || (getClass () != other.getClass ())) {
        result = false;
    } else {
        People otherPeople = (People) other;
        result = name.equals (otherPeople.name) && age == otherPeople.age;
    }
    return result;
}
----------------------------------------

 public boolean equals (Object other) {return other != null && getClass() == other.getClass() && 
       ((People) other).age == this.age && 
       ((People) other).name.equals(this.name); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
708
0
Gpt3D_Clone708_0.java 1 10
Gpt3D_Clone708_0.java 11 26
----------------------------------------

public boolean equals (Object other) {
    boolean result;
    if ((other == null) || (getClass () != other.getClass ())) {
        result = false;
    } else {
        People otherPeople = (People) other;
        result = name.equals (otherPeople.name) && age == otherPeople.age;
    }
    return result;
}
----------------------------------------

 public boolean equals (Object other) {
      if (this == other) { 
          return true; 
      }
      if (other == null) {
          return false;
      }
      if (getClass () != other.getClass ()) {
          return false;
      }
      People otherPeople = (People) other;
      return name.equals (otherPeople.name) && age == otherPeople.age;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
708
1
Gpt3D_Clone708_1.java 1 10
Gpt3D_Clone708_1.java 11 23
----------------------------------------

public boolean equals (Object other) {
    boolean result;
    if ((other == null) || (getClass () != other.getClass ())) {
        result = false;
    } else {
        People otherPeople = (People) other;
        result = name.equals (otherPeople.name) && age == otherPeople.age;
    }
    return result;
}
----------------------------------------

 public boolean equals (Object other) {
      if (this == other) { 
          return true; 
      }
      if (other == null || getClass () != other.getClass ()) {
          return false;
      }
      People otherPeople = (People) other;
      boolean result = name.equals (otherPeople.name) && age == otherPeople.age;
      return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
708
2
Gpt3D_Clone708_2.java 1 10
Gpt3D_Clone708_2.java 11 22
----------------------------------------

public boolean equals (Object other) {
    boolean result;
    if ((other == null) || (getClass () != other.getClass ())) {
        result = false;
    } else {
        People otherPeople = (People) other;
        result = name.equals (otherPeople.name) && age == otherPeople.age;
    }
    return result;
}
----------------------------------------

 public boolean equals (Object other) {
      if (other instanceof People && this == other) { 
          return true; 
      }
      if (other != null && getClass () == other.getClass ()) {
          People otherPeople = (People) other;
          return name.equals (otherPeople.name) && age == otherPeople.age;
      }
      return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
708
3
Gpt3D_Clone708_3.java 1 10
Gpt3D_Clone708_3.java 11 23
----------------------------------------

public boolean equals (Object other) {
    boolean result;
    if ((other == null) || (getClass () != other.getClass ())) {
        result = false;
    } else {
        People otherPeople = (People) other;
        result = name.equals (otherPeople.name) && age == otherPeople.age;
    }
    return result;
}
----------------------------------------

 public boolean equals (Object other) {
      if (this == other) { 
          return true; 
      }
      if (!(other instanceof People)) {
          return false;
      }
      People otherPeople = (People) other;
      return name.equals (otherPeople.name) && age == otherPeople.age;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
708
4
Gpt3D_Clone708_4.java 1 10
Gpt3D_Clone708_4.java 11 23
----------------------------------------

public boolean equals (Object other) {
    boolean result;
    if ((other == null) || (getClass () != other.getClass ())) {
        result = false;
    } else {
        People otherPeople = (People) other;
        result = name.equals (otherPeople.name) && age == otherPeople.age;
    }
    return result;
}
----------------------------------------

 public boolean equals (Object other) {
      if (this == other) { 
          return true; 
      }
      if ((other == null) || (getClass () != other.getClass ())) {
          return false;
      }
      People otherPeople = (People) other;
      return name.equals (otherPeople.name) && age == otherPeople.age;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
708
5
Gpt3D_Clone708_5.java 1 10
Gpt3D_Clone708_5.java 11 22
----------------------------------------

public boolean equals (Object other) {
    boolean result;
    if ((other == null) || (getClass () != other.getClass ())) {
        result = false;
    } else {
        People otherPeople = (People) other;
        result = name.equals (otherPeople.name) && age == otherPeople.age;
    }
    return result;
}
----------------------------------------

 public boolean equals (Object other) {
      if (this == other) { 
          return true; 
      }
      if (other == null || getClass () != other.getClass ()) {
          return false;
      }
      People otherPeople = (People) other;
      return Objects.equals(name, otherPeople.name) && Objects.equals(age, otherPeople.age);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
708
6
Gpt3D_Clone708_6.java 1 10
Gpt3D_Clone708_6.java 11 22
----------------------------------------

public boolean equals (Object other) {
    boolean result;
    if ((other == null) || (getClass () != other.getClass ())) {
        result = false;
    } else {
        People otherPeople = (People) other;
        result = name.equals (otherPeople.name) && age == otherPeople.age;
    }
    return result;
}
----------------------------------------

 public boolean equals (Object other) {
      if (this == other) { 
          return true; 
      } 
      if (other == null || !getClass ().equals (other.getClass ())) {
          return false;
      }
      People otherPeople = (People) other;
      return name.equals (otherPeople.name) && age == otherPeople.age;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
708
7
Gpt3D_Clone708_7.java 1 10
Gpt3D_Clone708_7.java 11 22
----------------------------------------

public boolean equals (Object other) {
    boolean result;
    if ((other == null) || (getClass () != other.getClass ())) {
        result = false;
    } else {
        People otherPeople = (People) other;
        result = name.equals (otherPeople.name) && age == otherPeople.age;
    }
    return result;
}
----------------------------------------

 public boolean equals (Object other) {
      if (this == other) { 
          return true; 
      }
      if (other != null && getClass () == other.getClass ()) {
          People otherPeople = (People) other;
          return name.equals (otherPeople.name) && age == otherPeople.age;
      }
      return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
708
8
Gpt3D_Clone708_8.java 1 10
Gpt3D_Clone708_8.java 11 22
----------------------------------------

public boolean equals (Object other) {
    boolean result;
    if ((other == null) || (getClass () != other.getClass ())) {
        result = false;
    } else {
        People otherPeople = (People) other;
        result = name.equals (otherPeople.name) && age == otherPeople.age;
    }
    return result;
}
----------------------------------------

 public boolean equals (Object other) {
      if (other == null || getClass() != other.getClass()) {
          return false;
      }
      People otherPeople = (People) other;
      if (this == other) { 
          return true; 
      }
      return name.equals (otherPeople.name) && age == otherPeople.age;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
708
9
Gpt3D_Clone708_9.java 1 10
Gpt3D_Clone708_9.java 11 22
----------------------------------------

public boolean equals (Object other) {
    boolean result;
    if ((other == null) || (getClass () != other.getClass ())) {
        result = false;
    } else {
        People otherPeople = (People) other;
        result = name.equals (otherPeople.name) && age == otherPeople.age;
    }
    return result;
}
----------------------------------------

 public boolean equals (Object other) {
      if (other instanceof People && this == other) {
          return true;
      }
      if ((other == null) || !(other instanceof People)) {
          return false;
      }
      People otherPeople = (People) other;
      return name.equals (otherPeople.name) && age == otherPeople.age;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
713
0
Gpt3D_Clone713_0.java 1 26
Gpt3D_Clone713_0.java 27 64
----------------------------------------

public static void main (String [] args) {
    for (int row = 1;
    row <= 7; row += 2) {
        for (int space = 7;
        space >= row; space -= 2) {
            System.out.print ("*");
        }
        for (int i = 1;
        i <= row; i ++) {
            System.out.print (" ");
        }
        System.out.print ("\n");
    }
    for (int row = 5;
    row >= 1; row -= 2) {
        for (int space = 7;
        space >= row; space -= 2) {
            System.out.print ("*");
        }
        for (int i = 1;
        i <= row; i ++) {
            System.out.print (" ");
        }
        System.out.print ("\n");
    }
}
----------------------------------------

 public static void main (String [] args) {
    int stars = 0;
    int spaces = 7;
    while (stars < 8) {
        int currentSpaces = spaces;
        while (currentSpaces > 0) {
            System.out.print ("*");
            currentSpaces --;
        }
        int lineLineStars = stars;
        while (lineLineStars > 0) {
            System.out.print (" ");
            lineLineStars --;
        }
        stars += 2;
        spaces = stars;
        System.out.print ("\n");
    }
    stars = 7;
    spaces = 0;
    while (stars > 0) {
        int currentSpaces = spaces;
        while (currentSpaces < 7) {
            System.out.print ("*");
            currentSpaces ++;
        }
        int lineLineStars = stars;
        while (lineLineStars > 0) {
            System.out.print (" ");
            lineLineStars --;
        }
        stars -= 2;
        spaces = 8 - stars;
        System.out.print ("\n");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
713
1
Gpt3D_Clone713_1.java 1 26
Gpt3D_Clone713_1.java 27 62
----------------------------------------

public static void main (String [] args) {
    for (int row = 1;
    row <= 7; row += 2) {
        for (int space = 7;
        space >= row; space -= 2) {
            System.out.print ("*");
        }
        for (int i = 1;
        i <= row; i ++) {
            System.out.print (" ");
        }
        System.out.print ("\n");
    }
    for (int row = 5;
    row >= 1; row -= 2) {
        for (int space = 7;
        space >= row; space -= 2) {
            System.out.print ("*");
        }
        for (int i = 1;
        i <= row; i ++) {
            System.out.print (" ");
        }
        System.out.print ("\n");
    }
}
----------------------------------------

 public static void main (String [] args) {
    int stars = 0;
    int spaces = 7;
    while (stars < 8) {
        while (spaces > 0) {
            System.out.print ("*");
            spaces --;
        }
        int lineLineStars = stars;
        while (lineLineStars > 0) {
            System.out.print (" ");
            lineLineStars --;
        }
        stars += 2;
        spaces = stars;
        System.out.print ("\n");
    }
    stars = 7;
    spaces = 0;
    while (stars > 0) {
        while (spaces < 7) {
            System.out.print ("*");
            spaces ++;
        }
        int lineLineStars = stars;
        while (lineLineStars > 0) {
            System.out.print (" ");
            lineLineStars --;
        }
        stars -= 2;
        spaces = 8 - stars;
        System.out.print ("\n");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
713
2
Gpt3D_Clone713_2.java 1 26
Gpt3D_Clone713_2.java 27 60
----------------------------------------

public static void main (String [] args) {
    for (int row = 1;
    row <= 7; row += 2) {
        for (int space = 7;
        space >= row; space -= 2) {
            System.out.print ("*");
        }
        for (int i = 1;
        i <= row; i ++) {
            System.out.print (" ");
        }
        System.out.print ("\n");
    }
    for (int row = 5;
    row >= 1; row -= 2) {
        for (int space = 7;
        space >= row; space -= 2) {
            System.out.print ("*");
        }
        for (int i = 1;
        i <= row; i ++) {
            System.out.print (" ");
        }
        System.out.print ("\n");
    }
}
----------------------------------------

 public static void main (String [] args) {
    int stars = 0;
    int spaces = 7;
    while (stars < 8) {
        int currentSpaces = spaces;
        while (currentSpaces > 0) {
            System.out.print ("*");
            currentSpaces --;
        }
        for (int i = 0; i < stars; i++) {
            System.out.print (" ");
        }
        stars += 2;
        spaces = stars;
        System.out.print ("\n");
    }
    stars = 7;
    spaces = 0;
    while (stars > 0) {
        int currentSpaces = spaces;
        while (currentSpaces < 7) {
            System.out.print ("*");
            currentSpaces ++;
        }
        for (int i = 0; i < stars; i++) {
            System.out.print (" ");
        }
        stars -= 2;
        spaces = 8 - stars;
        System.out.print ("\n");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
713
3
Gpt3D_Clone713_3.java 1 26
Gpt3D_Clone713_3.java 27 56
----------------------------------------

public static void main (String [] args) {
    for (int row = 1;
    row <= 7; row += 2) {
        for (int space = 7;
        space >= row; space -= 2) {
            System.out.print ("*");
        }
        for (int i = 1;
        i <= row; i ++) {
            System.out.print (" ");
        }
        System.out.print ("\n");
    }
    for (int row = 5;
    row >= 1; row -= 2) {
        for (int space = 7;
        space >= row; space -= 2) {
            System.out.print ("*");
        }
        for (int i = 1;
        i <= row; i ++) {
            System.out.print (" ");
        }
        System.out.print ("\n");
    }
}
----------------------------------------

 public static void main (String [] args) {
    for (int row = 1; row <= 7; row += 2) {
        int currentSpaces = 7;
        while (currentSpaces >= row) {
            System.out.print ("*");
            currentSpaces--;
        }
        int currentStars = row;
        while (currentStars > 0) {
            System.out.print (" ");
            currentStars--;
        }
        System.out.print ("\n");
    }
    for (int row = 5; row >= 1; row -= 2) {
        int currentSpaces = 7;
        while (currentSpaces >= row) {
            System.out.print ("*");
            currentSpaces--;
        }
        int currentStars = row;
        while (currentStars > 0) {
            System.out.print (" ");
            currentStars--;
        }
        System.out.print ("\n");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
713
4
Gpt3D_Clone713_4.java 1 26
Gpt3D_Clone713_4.java 27 56
----------------------------------------

public static void main (String [] args) {
    for (int row = 1;
    row <= 7; row += 2) {
        for (int space = 7;
        space >= row; space -= 2) {
            System.out.print ("*");
        }
        for (int i = 1;
        i <= row; i ++) {
            System.out.print (" ");
        }
        System.out.print ("\n");
    }
    for (int row = 5;
    row >= 1; row -= 2) {
        for (int space = 7;
        space >= row; space -= 2) {
            System.out.print ("*");
        }
        for (int i = 1;
        i <= row; i ++) {
            System.out.print (" ");
        }
        System.out.print ("\n");
    }
}
----------------------------------------

 public static void main (String [] args) {
    int stars = 0;
    while (stars < 8) {
        for (int i = 0; i < 7 - stars; i++) {
            System.out.print ("*");
        }
        int currentSpaces = stars;
        while (currentSpaces > 0) {
            System.out.print (" ");
            currentSpaces--;
        }
        stars += 2;
        System.out.println ();
    }
    stars = 7;
    while (stars > 0) {
        for (int i = 0; i < 8 - stars; i++) {
            System.out.print ("*");
        }
        int currentSpaces = stars;
        while (currentSpaces > 0) {
            System.out.print (" ");
            currentSpaces--;
        }
        stars -= 2;
        System.out.println ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
713
5
Gpt3D_Clone713_5.java 1 26
Gpt3D_Clone713_5.java 27 56
----------------------------------------

public static void main (String [] args) {
    for (int row = 1;
    row <= 7; row += 2) {
        for (int space = 7;
        space >= row; space -= 2) {
            System.out.print ("*");
        }
        for (int i = 1;
        i <= row; i ++) {
            System.out.print (" ");
        }
        System.out.print ("\n");
    }
    for (int row = 5;
    row >= 1; row -= 2) {
        for (int space = 7;
        space >= row; space -= 2) {
            System.out.print ("*");
        }
        for (int i = 1;
        i <= row; i ++) {
            System.out.print (" ");
        }
        System.out.print ("\n");
    }
}
----------------------------------------

 public static void main (String [] args) {
    int stars = 0;
    int spaces = 7;
    while (stars < 8) {
        for (int i = spaces; i > 0; i--) {
            System.out.print ("*");
        }
        for (int i = 0; i < stars; i++) {
            System.out.print (" ");
        }
        stars += 2;
        spaces = stars;
        System.out.println ();
    }
    stars = 7;
    spaces = 0;
    while (stars > 0) {
        for (int i = 0; i < spaces; i++) {
            System.out.print ("*");
        }
        for (int i = stars; i > 0; i--) {
            System.out.print (" ");
        }
        stars -= 2;
        spaces = 8 - stars;
        System.out.println ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
713
6
Gpt3D_Clone713_6.java 1 26
Gpt3D_Clone713_6.java 27 56
----------------------------------------

public static void main (String [] args) {
    for (int row = 1;
    row <= 7; row += 2) {
        for (int space = 7;
        space >= row; space -= 2) {
            System.out.print ("*");
        }
        for (int i = 1;
        i <= row; i ++) {
            System.out.print (" ");
        }
        System.out.print ("\n");
    }
    for (int row = 5;
    row >= 1; row -= 2) {
        for (int space = 7;
        space >= row; space -= 2) {
            System.out.print ("*");
        }
        for (int i = 1;
        i <= row; i ++) {
            System.out.print (" ");
        }
        System.out.print ("\n");
    }
}
----------------------------------------

 public static void main (String [] args) {
    int stars = 0;
    int spaces = 7;
    while (stars < 8) {
        for (int i = spaces; i > 0; i--) {
            System.out.print ("*");
        }
        for (int i = 0; i < stars; i++) {
            System.out.print (" ");
        }
        stars += 2;
        spaces = stars;
        System.out.println ();
    }
    stars = 7;
    spaces = 0;
    while (stars > 0) {
        for (int i = 0; i < spaces; i++) {
            System.out.print ("*");
        }
        for (int i = stars; i > 0; i--) {
            System.out.print (" ");
        }
        stars -= 2;
        spaces = 8 - stars;
        System.out.println ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
715
0
Gpt3D_Clone715_0.java 1 16
Gpt3D_Clone715_0.java 17 64
----------------------------------------

private static void decimalToHex (int decimal) {
    if (decimal >= 256) {
        returnHex (decimal / 256);
        decimal %= 256;
    } else {
        System.out.print ("0");
    }
    if (decimal >= 16) {
        returnHex (decimal / 16);
        decimal %= 16;
    } else {
        System.out.print ("0");
    }
    returnHex (decimal);
    decimal /= 16;
}
----------------------------------------

  private static void decimalToHex (int decimal) {
	  if (decimal >= 268435456) {
	    returnHex (decimal / 268435456);
	    decimal %= 268435456;
	  } else {
	    System.out.print ("000");
	  }
	  if (decimal >= 16777216) {
	    returnHex (decimal / 16777216);
	    decimal %= 16777216;
	  } else {
	    System.out.print ("000");
	  }
	  if (decimal >= 1048576) {
	    returnHex (decimal / 1048576);
	    decimal %= 1048576;
	  } else {
	    System.out.print ("000");
	  }
	  if (decimal >= 65536) {
	    returnHex (decimal / 65536);
	    decimal %= 65536;
	  } else {
	    System.out.print ("0000");
	  }
	  if (decimal >= 4096) {
	    returnHex (decimal / 4096);
	    decimal %= 4096;
	  } else {
	    System.out.print ("0000");
	  }
	  if (decimal >= 256) {
	    returnHex (decimal / 256);
	    decimal %= 256;
	  } else {
	    System.out.print ("0000");
	  }
	  if (decimal >= 16) {
	    returnHex (decimal / 16);
	    decimal %= 16;
	  } else {
	    System.out.print ("0000");
	  }
	  returnHex (decimal);
	  decimal /= 16;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
715
2
Gpt3D_Clone715_2.java 1 16
Gpt3D_Clone715_2.java 17 37
----------------------------------------

private static void decimalToHex (int decimal) {
    if (decimal >= 256) {
        returnHex (decimal / 256);
        decimal %= 256;
    } else {
        System.out.print ("0");
    }
    if (decimal >= 16) {
        returnHex (decimal / 16);
        decimal %= 16;
    } else {
        System.out.print ("0");
    }
    returnHex (decimal);
    decimal /= 16;
}
----------------------------------------

 private static void decimalToHex(int decimal) {
	StringBuilder sb = new StringBuilder();
	for (int i = 7; i > 0; --i) {
		int k = (int)Math.pow(16, i);
		int hex = decimal / k;
		decimal = decimal % k;
		
		if (hex < 10) {
			sb.append(hex);
		} else {
			char c = (char)('A' + (hex - 10));
			sb.append(c);
		}
	}
	
	sb.append(decimal);
	System.out.print(sb.toString());
	decimal /= 16;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
715
3
Gpt3D_Clone715_3.java 1 16
Gpt3D_Clone715_3.java 17 35
----------------------------------------

private static void decimalToHex (int decimal) {
    if (decimal >= 256) {
        returnHex (decimal / 256);
        decimal %= 256;
    } else {
        System.out.print ("0");
    }
    if (decimal >= 16) {
        returnHex (decimal / 16);
        decimal %= 16;
    } else {
        System.out.print ("0");
    }
    returnHex (decimal);
    decimal /= 16;
}
----------------------------------------

  private static void decimalToHex (int decimal) {
	  StringBuilder output = new StringBuilder();
	  while (decimal > 0) {
	    if (decimal % 16 < 10) {
	      output.append((char)(48 + (decimal % 16)));
	    } else {
	      output.append((char)(55 + (decimal % 16)));
	    }
	    decimal /= 16;
	  }
	  if (output.length() < 8) {
	    while (output.length() < 8)
	      output.append("0");
	  }
	  System.out.print(output.reverse());
	  decimal /= 16;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
715
4
Gpt3D_Clone715_4.java 1 16
Gpt3D_Clone715_4.java 17 35
----------------------------------------

private static void decimalToHex (int decimal) {
    if (decimal >= 256) {
        returnHex (decimal / 256);
        decimal %= 256;
    } else {
        System.out.print ("0");
    }
    if (decimal >= 16) {
        returnHex (decimal / 16);
        decimal %= 16;
    } else {
        System.out.print ("0");
    }
    returnHex (decimal);
    decimal /= 16;
}
----------------------------------------

 private static void decimalToHex (int decimal) {
	  StringBuilder output = new StringBuilder();
	  while (decimal > 0)
	  {
	    int hexdigit = (decimal & 0xF);
	    if (hexdigit < 10) 	
	      output.append((char)('0' + hexdigit));
	    else
	      output.append((char)('A' + (hexdigit - 10)));
	    decimal = decimal >> 4;
	  }
	  int lenDiff = Math.max(0,8-output.length());
	  for (int i=0;i<lenDiff;i++)
	    output.append('0');
	  System.out.print(output.reverse());
	  decimal /= 16;	
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
715
5
Gpt3D_Clone715_5.java 1 16
Gpt3D_Clone715_5.java 17 39
----------------------------------------

private static void decimalToHex (int decimal) {
    if (decimal >= 256) {
        returnHex (decimal / 256);
        decimal %= 256;
    } else {
        System.out.print ("0");
    }
    if (decimal >= 16) {
        returnHex (decimal / 16);
        decimal %= 16;
    } else {
        System.out.print ("0");
    }
    returnHex (decimal);
    decimal /= 16;
}
----------------------------------------

 private static void decimalToHex (int decimal) {
	  StringBuilder output = new StringBuilder();
	    while (decimal>0)
	    {
	      if (decimal % 16 < 10)
		output.append(decimal % 16);
	      else
		output.append((char)(decimal % 16 + 55)); 
	      decimal = decimal/16;
	    } 
	  
	    int padding = 8-output.length();
	    for(int i = 0; i<padding; i++)
	    {
	      output.append('0');
	    }
	    for (int i = output.length() - 1; i >= 0; i--)
	      System.out.print(output.charAt(i));
	  
	  decimal /=16;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
715
6
Gpt3D_Clone715_6.java 1 16
Gpt3D_Clone715_6.java 17 33
----------------------------------------

private static void decimalToHex (int decimal) {
    if (decimal >= 256) {
        returnHex (decimal / 256);
        decimal %= 256;
    } else {
        System.out.print ("0");
    }
    if (decimal >= 16) {
        returnHex (decimal / 16);
        decimal %= 16;
    } else {
        System.out.print ("0");
    }
    returnHex (decimal);
    decimal /= 16;
}
----------------------------------------

 private static void decimalToHex (int decimal) {
	  StringBuilder hex = new StringBuilder();
	  
	  for (int i = 32; i > 0; i -= 4){
	    int hexdigit = (decimal >> i) & 0xF;
	    if (hexdigit == 0 && hex.length() == 0)
	      continue;  
	    if (hexdigit >= 0 && hexdigit <= 9)
	      hex.append((char)(hexdigit + '0'));
	    else
	      hex.append((char)(hexdigit - 10 + 'A'));  
	  }
	  System.out.println(hex.toString());
	  decimal /= 16;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
715
7
Gpt3D_Clone715_7.java 1 16
Gpt3D_Clone715_7.java 17 31
----------------------------------------

private static void decimalToHex (int decimal) {
    if (decimal >= 256) {
        returnHex (decimal / 256);
        decimal %= 256;
    } else {
        System.out.print ("0");
    }
    if (decimal >= 16) {
        returnHex (decimal / 16);
        decimal %= 16;
    } else {
        System.out.print ("0");
    }
    returnHex (decimal);
    decimal /= 16;
}
----------------------------------------

  private static void decimalToHex(int decimal) {
	String hexString = Integer.toHexString(decimal);
	
	if (hexString.length() < 8) {
		int lenDiff = 8 - hexString.length();
		for (int i = 0; i < lenDiff; i++) {
			System.out.print("0");
		}
	} 
  
	System.out.print(hexString.toUpperCase());
	decimal /= 16;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
715
8
Gpt3D_Clone715_8.java 1 16
Gpt3D_Clone715_8.java 17 29
----------------------------------------

private static void decimalToHex (int decimal) {
    if (decimal >= 256) {
        returnHex (decimal / 256);
        decimal %= 256;
    } else {
        System.out.print ("0");
    }
    if (decimal >= 16) {
        returnHex (decimal / 16);
        decimal %= 16;
    } else {
        System.out.print ("0");
    }
    returnHex (decimal);
    decimal /= 16;
}
----------------------------------------

  private static void decimalToHex (int decimal) {
	  while (decimal > 0) {
	    int hexChar = decimal % 16;
	    decimal = decimal / 16;
	    if (hexChar < 10)
	      System.out.print( hexChar );
	    else
	      System.out.print((char)( hexChar + 55 ));
	  }
	  decimal /= 16;
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
715
9
Gpt3D_Clone715_9.java 1 16
Gpt3D_Clone715_9.java 17 27
----------------------------------------

private static void decimalToHex (int decimal) {
    if (decimal >= 256) {
        returnHex (decimal / 256);
        decimal %= 256;
    } else {
        System.out.print ("0");
    }
    if (decimal >= 16) {
        returnHex (decimal / 16);
        decimal %= 16;
    } else {
        System.out.print ("0");
    }
    returnHex (decimal);
    decimal /= 16;
}
----------------------------------------

 private static void decimalToHex (int decimal) {
	    while (decimal >= 256) {
	      int remainder = decimal % 256;
	      returnHex (remainder);
	      decimal /= 256;
	    }
	    returnHex (decimal);
	    decimal /= 16;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
717
0
Gpt3D_Clone717_0.java 1 19
Gpt3D_Clone717_0.java 20 50
----------------------------------------

public int [] zeroFront (int [] nums) {
    if (nums == null) {
        return null;
    }
    int [] result = new int [nums.length];
    int zeroesPos = 0;
    int othersPos = result.length - 1;
    for (int i = 0;
    i < nums.length; ++ i) {
        if (nums [i] == 0) {
            result [zeroesPos] = 0;
            ++ zeroesPos;
        } else {
            result [othersPos] = nums [i];
            -- othersPos;
        }
    }
    return result;
}
----------------------------------------

 public int [] zeroFront(int [] nums) {
    if (nums == null) {
        return null;
    }
    int [] result = new int [nums.length];
    int zeroesCount = 0;
    for(int i=0;i<nums.length;i++) {
        if(nums[i] == 0) {
            zeroesCount++;
        }
    }
    int index = 0;
    while (zeroesCount > 0) {
        result[index] = 0;
        index++;
        zeroesCount--;
    }
    for(int i=0;i<nums.length;i++) {
        if(nums[i] != 0) {
            result[index] = nums[i];
            index++;
        }
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
718
2
Gpt3D_Clone718_2.java 1 19
Gpt3D_Clone718_2.java 20 40
----------------------------------------

public int [] zeroFront (int [] nums) {
    if (nums == null) {
        return null;
    }
    int [] result = new int [nums.length];
    int zeroesPos = 0;
    int othersPos = result.length - 1;
    for (int i = 0;
    i < nums.length; ++ i) {
        if (nums [i] == 0) {
            result [zeroesPos] = 0;
            ++ zeroesPos;
        } else {
            result [othersPos] = nums [i];
            -- othersPos;
        }
    }
    return result;
}
----------------------------------------

  public int [] zeroFront (int [] nums) {
    if (nums == null || nums.length < 1) {
        return null;
    }
    int size = nums.length; 
    int [] result = new int [size];
    int left = 0;
    int right = size - 1;
    while (left < size && right > -1) {
        if (nums[left] == 0) {
            result[left++] = 0;
        } else if (nums[right] != 0) {
            result[right--] = nums[right];
        } else {
            result[left++] = nums[right--];
        }
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
718
5
Gpt3D_Clone718_5.java 1 19
Gpt3D_Clone718_5.java 20 41
----------------------------------------

public int [] zeroFront (int [] nums) {
    if (nums == null) {
        return null;
    }
    int [] result = new int [nums.length];
    int zeroesPos = 0;
    int othersPos = result.length - 1;
    for (int i = 0;
    i < nums.length; ++ i) {
        if (nums [i] == 0) {
            result [zeroesPos] = 0;
            ++ zeroesPos;
        } else {
            result [othersPos] = nums [i];
            -- othersPos;
        }
    }
    return result;
}
----------------------------------------

 public int [] zeroFront (int[] nums) {
    if (nums == null) {
        return null; 
    }
    int[] result = new int[nums.length];
    int index = 0;
    for (int num : nums) {
        if (num == 0){
            result[index] = 0;
            index++;
        }
    }
    for (int num : nums) { 
        if (num != 0) {
            result[index] = num;
            index++;
        }
     }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
718
7
Gpt3D_Clone718_7.java 1 19
Gpt3D_Clone718_7.java 20 37
----------------------------------------

public int [] zeroFront (int [] nums) {
    if (nums == null) {
        return null;
    }
    int [] result = new int [nums.length];
    int zeroesPos = 0;
    int othersPos = result.length - 1;
    for (int i = 0;
    i < nums.length; ++ i) {
        if (nums [i] == 0) {
            result [zeroesPos] = 0;
            ++ zeroesPos;
        } else {
            result [othersPos] = nums [i];
            -- othersPos;
        }
    }
    return result;
}
----------------------------------------

 public int [] zeroFront (int [] nums) {
    if (nums == null || nums.length == 0) return null;
    int[] result = new int[nums.length];
    int zeroPos = 0;
    int endPos = result.length - 1;
    int pos = 0;
    while (pos < nums.length) {
        if (nums[pos] == 0) {
            result[zeroPos++] = 0;
            pos++; 
        } else {
            result[endPos--] = nums[pos++];
        }
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
718
8
Gpt3D_Clone718_8.java 1 19
Gpt3D_Clone718_8.java 20 39
----------------------------------------

public int [] zeroFront (int [] nums) {
    if (nums == null) {
        return null;
    }
    int [] result = new int [nums.length];
    int zeroesPos = 0;
    int othersPos = result.length - 1;
    for (int i = 0;
    i < nums.length; ++ i) {
        if (nums [i] == 0) {
            result [zeroesPos] = 0;
            ++ zeroesPos;
        } else {
            result [othersPos] = nums [i];
            -- othersPos;
        }
    }
    return result;
}
----------------------------------------

  public int [] zeroFront (int [] nums) {
    if (nums == null) {
        return null;
    }
    int [] result = new int [nums.length];
    int writePos = 0; 
    for (int num : nums) { 
        if (num == 0) { 
            result[writePos++] = 0;
        }
    }
    for (int num : nums) {
        if (num != 0) {
            result[writePos++] = num;
        }
    }
    return result; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
718
9
Gpt3D_Clone718_9.java 1 19
Gpt3D_Clone718_9.java 20 39
----------------------------------------

public int [] zeroFront (int [] nums) {
    if (nums == null) {
        return null;
    }
    int [] result = new int [nums.length];
    int zeroesPos = 0;
    int othersPos = result.length - 1;
    for (int i = 0;
    i < nums.length; ++ i) {
        if (nums [i] == 0) {
            result [zeroesPos] = 0;
            ++ zeroesPos;
        } else {
            result [othersPos] = nums [i];
            -- othersPos;
        }
    }
    return result;
}
----------------------------------------

 public int [] zeroFront (int [] nums) {
    if (nums == null) {
        return null;
    }
    int [] result = new int [nums.length];
    int beginIndex = 0; 
    for (int i = 0; i < nums.length; i++) {
        if (nums[i] == 0) {
            result[beginIndex++] = 0;
        }
    }
    for (int i = 0; i < nums.length; i++) {
        if (nums[i] != 0) {
            result[beginIndex++] = nums[i];
        }
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
721
0
Gpt3D_Clone721_0.java 1 24
Gpt3D_Clone721_0.java 25 46
----------------------------------------

public static void main (String [] args) {
    Scanner stdin = new Scanner (System.in);
    String [] wordArray = new String [10000];
    int [] wordCount = new int [10000];
    int numWords = 0;
    while (stdin.hasNextLine ()) {
        String s = stdin.nextLine ();
        ArrayList < String > noDuplicated = new ArrayList < String > ();
        String [] words = s.replaceAll ("a-zA-Z ", "").toLowerCase ().split ("s+");
        for (int i = 0;
        i < words.length; i ++) {
            if (! noDuplicated.contains (words [i])) noDuplicated.add (words [i]);
        }
        for (int i = 0;
        i < noDuplicated.size (); i ++) {
            int count = 0;
            for (int j = 0;
            j < words.length; j ++) {
                if (noDuplicated.get (i).equals (words [j])) count ++;
            }
            System.out.println ("word count: " + words [i] + " " + count);
        }
    }
}
----------------------------------------

 public static void main(String[] args) { 
    Scanner scanner = new Scanner(System.in); 
    List<String> words = new ArrayList<>(); 
    while (scanner.hasNextLine()) { 
        String line = scanner.nextLine().replaceAll("a-zA-Z", "").toLowerCase();
        words.addAll(Arrays.asList(line.split("s+"))); 
    }
    Map<String, Integer> wordCount = new HashMap<>(); 
    for (String word : words) {
        if(!wordCount.containsKey(word)) {
            wordCount.put(word, 1); 
        } else {
            int count = wordCount.get(word); 
            wordCount.put(word, count + 1);
        }
    }
    for (Map.Entry<String, Integer> entry : wordCount.entrySet()) {
        System.out.println("Word count: " + entry.getKey() + " " + entry.getValue()); 
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
721
1
Gpt3D_Clone721_1.java 1 24
Gpt3D_Clone721_1.java 25 46
----------------------------------------

public static void main (String [] args) {
    Scanner stdin = new Scanner (System.in);
    String [] wordArray = new String [10000];
    int [] wordCount = new int [10000];
    int numWords = 0;
    while (stdin.hasNextLine ()) {
        String s = stdin.nextLine ();
        ArrayList < String > noDuplicated = new ArrayList < String > ();
        String [] words = s.replaceAll ("[a-zA-Z ]", "").toLowerCase ().split ("s+");
        for (int i = 0;
        i < words.length; i ++) {
            if (! noDuplicated.contains (words [i])) noDuplicated.add (words [i]);
        }
        for (int i = 0;
        i < noDuplicated.size (); i ++) {
            int count = 0;
            for (int j = 0;
            j < words.length; j ++) {
                if (noDuplicated.get (i).equals (words [j])) count ++;
            }
            System.out.println ("word count: " + words [i] + " " + count);
        }
    }
}
----------------------------------------

 public static void main(String[] args) { 
    Scanner scanner = new Scanner(System.in); 
    while (scanner.hasNextLine()) { 
        String s = scanner.nextLine(); 
        String[] words = s.replaceAll("[a-zA-Z]", "").toLowerCase().split("s+"); 
        Set<String> noDuplicated = new HashSet<>(); 
        for (int i = 0; i < words.length; i++) { 
            noDuplicated.add(words[i]); 
        } 
        for (String key : noDuplicated) { 
            int count = 0; 
            for (int j = 0; j < words.length; j++) { 
                if (key.equals(words[j])) { 
                    count++; 
                } 
            } 
            System.out.println("Word count: " + key + " " + count); 
        } 
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
721
2
Gpt3D_Clone721_2.java 1 24
Gpt3D_Clone721_2.java 25 46
----------------------------------------

public static void main (String [] args) {
    Scanner stdin = new Scanner (System.in);
    String [] wordArray = new String [10000];
    int [] wordCount = new int [10000];
    int numWords = 0;
    while (stdin.hasNextLine ()) {
        String s = stdin.nextLine ();
        ArrayList < String > noDuplicated = new ArrayList < String > ();
        String [] words = s.replaceAll ("[a-zA-Z ]", "").toLowerCase ().split ("s+");
        for (int i = 0;
        i < words.length; i ++) {
            if (! noDuplicated.contains (words [i])) noDuplicated.add (words [i]);
        }
        for (int i = 0;
        i < noDuplicated.size (); i ++) {
            int count = 0;
            for (int j = 0;
            j < words.length; j ++) {
                if (noDuplicated.get (i).equals (words [j])) count ++;
            }
            System.out.println ("word count: " + words [i] + " " + count);
        }
    }
}
----------------------------------------

 public static void main(String[] args) { 
    Scanner scanner = new Scanner(System.in); 
    while (scanner.hasNextLine()) { 
        String str = scanner.nextLine().toLowerCase().trim(); 
        String[] words = str.split("s+"); 
        Map<String, Integer> map = new HashMap<>(); 
        for (String word : words) { 
            int count = 0; 
            for (String splitWord : words) { 
                if (word.equals(splitWord)) { 
                    count++; 
                } 
            }
            map.put(word, count); 
        } 
        for (String word : map.keySet()) { 
            System.out.println("Word count: " + word + " " + map.get(word));
        } 
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
721
3
Gpt3D_Clone721_3.java 1 24
Gpt3D_Clone721_3.java 25 44
----------------------------------------

public static void main (String [] args) {
    Scanner stdin = new Scanner (System.in);
    String [] wordArray = new String [10000];
    int [] wordCount = new int [10000];
    int numWords = 0;
    while (stdin.hasNextLine ()) {
        String s = stdin.nextLine ();
        ArrayList < String > noDuplicated = new ArrayList < String > ();
        String [] words = s.replaceAll ("a-zA-Z ", "").toLowerCase ().split ("s+");
        for (int i = 0;
        i < words.length; i ++) {
            if (! noDuplicated.contains (words [i])) noDuplicated.add (words [i]);
        }
        for (int i = 0;
        i < noDuplicated.size (); i ++) {
            int count = 0;
            for (int j = 0;
            j < words.length; j ++) {
                if (noDuplicated.get (i).equals (words [j])) count ++;
            }
            System.out.println ("word count: " + words [i] + " " + count);
        }
    }
}
----------------------------------------

 public static void main(String[] args) { 
    Scanner scanner = new Scanner(System.in); 
    while (scanner.hasNextLine()) { 
        String str = scanner.nextLine(); 
        String[] words = str.replaceAll("a-zA-Z", "").toLowerCase().split("s+"); 
        Map<String, Integer> wordMap = new HashMap<>(); 
        for (String word : words) {
            Integer count = wordMap.get(word); 
            if (count == null) { 
                count = 0; 
            }
            wordMap.put(word, count + 1); 
        } 
        for (Map.Entry<String, Integer> entry : wordMap.entrySet()) { 
            System.out.println("Word count: " + entry.getKey() + " " + entry.getValue());
        } 
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
721
4
Gpt3D_Clone721_4.java 1 24
Gpt3D_Clone721_4.java 25 44
----------------------------------------

public static void main (String [] args) {
    Scanner stdin = new Scanner (System.in);
    String [] wordArray = new String [10000];
    int [] wordCount = new int [10000];
    int numWords = 0;
    while (stdin.hasNextLine ()) {
        String s = stdin.nextLine ();
        ArrayList < String > noDuplicated = new ArrayList < String > ();
        String [] words = s.replaceAll ("[a-zA-Z ]", "").toLowerCase ().split ("s+");
        for (int i = 0;
        i < words.length; i ++) {
            if (! noDuplicated.contains (words [i])) noDuplicated.add (words [i]);
        }
        for (int i = 0;
        i < noDuplicated.size (); i ++) {
            int count = 0;
            for (int j = 0;
            j < words.length; j ++) {
                if (noDuplicated.get (i).equals (words [j])) count ++;
            }
            System.out.println ("word count: " + words [i] + " " + count);
        }
    }
}
----------------------------------------

 public static void main(String[] args) { 
    Scanner sc = new Scanner(System.in); 
    while (sc.hasNextLine()) { 
        String line = sc.nextLine().trim(); 
        String[] words = line.replaceAll("[a-zA-Z]", "").toLowerCase().split("s+"); 
        HashMap<String, Integer> hmap = new HashMap<String, Integer>(); 
        for (String word : words) { 
            if (hmap.get(word) == null) { 
                hmap.put(word, 1); 
            } else { 
                hmap.put(word, hmap.get(word) + 1); 
            } 
        } 
        for (String key : hmap.keySet()) { 
            System.out.println("Word count: " + key + " " + hmap.get(key)); 
        } 
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
721
5
Gpt3D_Clone721_5.java 1 24
Gpt3D_Clone721_5.java 25 43
----------------------------------------

public static void main (String [] args) {
    Scanner stdin = new Scanner (System.in);
    String [] wordArray = new String [10000];
    int [] wordCount = new int [10000];
    int numWords = 0;
    while (stdin.hasNextLine ()) {
        String s = stdin.nextLine ();
        ArrayList < String > noDuplicated = new ArrayList < String > ();
        String [] words = s.replaceAll ("[a-zA-Z ]", "").toLowerCase ().split ("s+");
        for (int i = 0;
        i < words.length; i ++) {
            if (! noDuplicated.contains (words [i])) noDuplicated.add (words [i]);
        }
        for (int i = 0;
        i < noDuplicated.size (); i ++) {
            int count = 0;
            for (int j = 0;
            j < words.length; j ++) {
                if (noDuplicated.get (i).equals (words [j])) count ++;
            }
            System.out.println ("word count: " + words [i] + " " + count);
        }
    }
}
----------------------------------------

 public static void main (String [] args) {
    Scanner scan = new Scanner (System.in);
    List <String> words = new ArrayList <String> ();
    while (scan.hasNextLine ()) {
        String s = scan.nextLine ();
        s = s.replaceAll("[a-zA-Z]", "").toLowerCase();
        words.addAll (Arrays.asList (s.split("s+")));
    }
    Map<String, Integer> wordCount = new HashMap<>();
    for (String word : words) {
        wordCount.putIfAbsent(word, 0);
        wordCount.put(word, wordCount.get(word) + 1);
    }
    for (String key : wordCount.keySet()) {
        System.out.println("Word count: " + key + " " + wordCount.get(key));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
721
6
Gpt3D_Clone721_6.java 1 24
Gpt3D_Clone721_6.java 25 43
----------------------------------------

public static void main (String [] args) {
    Scanner stdin = new Scanner (System.in);
    String [] wordArray = new String [10000];
    int [] wordCount = new int [10000];
    int numWords = 0;
    while (stdin.hasNextLine ()) {
        String s = stdin.nextLine ();
        ArrayList < String > noDuplicated = new ArrayList < String > ();
        String [] words = s.replaceAll ("[a-zA-Z ]", "").toLowerCase ().split ("s+");
        for (int i = 0;
        i < words.length; i ++) {
            if (! noDuplicated.contains (words [i])) noDuplicated.add (words [i]);
        }
        for (int i = 0;
        i < noDuplicated.size (); i ++) {
            int count = 0;
            for (int j = 0;
            j < words.length; j ++) {
                if (noDuplicated.get (i).equals (words [j])) count ++;
            }
            System.out.println ("word count: " + words [i] + " " + count);
        }
    }
}
----------------------------------------

 public static void main(String[] args) { 
    Scanner scanner = new Scanner(System.in); 
    while (scanner.hasNextLine()) { 
        String str = scanner.nextLine(); 
        str = str.replaceAll("[a-zA-Z]", "").toLowerCase(); 
        String[] words = str.split("s+"); 
        Map<String, Integer> wordMap = new HashMap<>(); 
        for (String word : words) { 
            wordMap.putIfAbsent(word, 0); 
            int count = wordMap.get(word); 
            wordMap.put(word, count + 1); 
        }
        for (Map.Entry<String, Integer> entry : wordMap.entrySet()) { 
            System.out.println("Word count: " + entry.getKey() + " " + entry.getValue());
        } 
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
721
7
Gpt3D_Clone721_7.java 1 24
Gpt3D_Clone721_7.java 25 43
----------------------------------------

public static void main (String [] args) {
    Scanner stdin = new Scanner (System.in);
    String [] wordArray = new String [10000];
    int [] wordCount = new int [10000];
    int numWords = 0;
    while (stdin.hasNextLine ()) {
        String s = stdin.nextLine ();
        ArrayList < String > noDuplicated = new ArrayList < String > ();
        String [] words = s.replaceAll ("[a-zA-Z ]", "").toLowerCase ().split ("s+");
        for (int i = 0;
        i < words.length; i ++) {
            if (! noDuplicated.contains (words [i])) noDuplicated.add (words [i]);
        }
        for (int i = 0;
        i < noDuplicated.size (); i ++) {
            int count = 0;
            for (int j = 0;
            j < words.length; j ++) {
                if (noDuplicated.get (i).equals (words [j])) count ++;
            }
            System.out.println ("word count: " + words [i] + " " + count);
        }
    }
}
----------------------------------------

 public static void main(String[] args) { 
    Scanner scanner = new Scanner(System.in); 
    Map<String, Integer> wordCounts = new HashMap<>(); 
    while (scanner.hasNextLine()) { 
        String str = scanner.nextLine().toLowerCase().trim(); 
        String[] words = str.split("s+"); 
        for (String word : words) { 
            int count = 0; 
            for (String splitWord : words) {
                if (word.equals(splitWord)) { 
                    count++; 
                } 
            }
            System.out.println("Word count: " + word + " " + count); 
        } 
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
721
8
Gpt3D_Clone721_8.java 1 24
Gpt3D_Clone721_8.java 25 41
----------------------------------------

public static void main (String [] args) {
    Scanner stdin = new Scanner (System.in);
    String [] wordArray = new String [10000];
    int [] wordCount = new int [10000];
    int numWords = 0;
    while (stdin.hasNextLine ()) {
        String s = stdin.nextLine ();
        ArrayList < String > noDuplicated = new ArrayList < String > ();
        String [] words = s.replaceAll ("[a-zA-Z ]", "").toLowerCase ().split ("s+");
        for (int i = 0;
        i < words.length; i ++) {
            if (! noDuplicated.contains (words [i])) noDuplicated.add (words [i]);
        }
        for (int i = 0;
        i < noDuplicated.size (); i ++) {
            int count = 0;
            for (int j = 0;
            j < words.length; j ++) {
                if (noDuplicated.get (i).equals (words [j])) count ++;
            }
            System.out.println ("word count: " + words [i] + " " + count);
        }
    }
}
----------------------------------------

 public static void main(String[] args) { 
    Scanner scanner = new Scanner(System.in); 
    Map<String, Integer> wordCounts = new HashMap<>(); 
    while (scanner.hasNextLine()) { 
        String input = scanner.nextLine(); 
        String[] words = input.replaceAll("[a-zA-Z]", "").toLowerCase().split("s+"); 
        for (String word : words) { 
            wordCounts.putIfAbsent(word, 0); 
            wordCounts.put(word, wordCounts.get(word) + 1); 
        } 
    } 
    for (String key : wordCounts.keySet()) { 
        System.out.println("Word count: " + key + " " + wordCounts.get(key)); 
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
722
0
Gpt3D_Clone722_0.java 1 7
Gpt3D_Clone722_0.java 8 19
----------------------------------------

private static void removeEven (int [] k, int n) {
    int counter = 0;
    for (int i = 0;
    i < n; i ++) if (k [i] % 2 == 1) k [counter ++] = k [i];
    for (int i = counter;
    i < n; i ++) k [i] = 0;
}
----------------------------------------

  private static void removeEven (int [] k, int n) {
    int counter = 0;
    for (int i = n - 1; i >= 0; i--) 
        if (k[i]%2 != 0) {
            k[counter] = k[i];
            counter++;
        }
    for(int j = counter; j < n; j++) 
        k[j] = 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
724
1
Gpt3D_Clone724_1.java 1 17
Gpt3D_Clone724_1.java 18 46
----------------------------------------

public void onPageScrollStateChanged (int state) {
    if (state == ViewPager.SCROLL_STATE_IDLE) {
        PagerAdapter pagerAdapter = viewPager.getAdapter ();
        if (pagerAdapter != null) {
            int itemCount = pagerAdapter.getCount ();
            if (itemCount < 2) {
                return;
            }
            int index = viewPager.getCurrentItem ();
            if (index == 0) {
                viewPager.setCurrentItem (itemCount - 2, false);
            } else if (index == itemCount - 1) {
                viewPager.setCurrentItem (1, false);
            }
        }
    }
}
----------------------------------------

	 public void onPageScrollStateChanged (int state) {
    if (state == ViewPager.SCROLL_STATE_IDLE) {
        PagerAdapter pagerAdapter = viewPager.getAdapter ();
        if (pagerAdapter != null) {
            int itemCount = pagerAdapter.getCount ();
            if (itemCount < 2) {
                return;
            }
            int index = viewPager.getCurrentItem ();
            if (index == 0) {
                viewPager.postDelayed(new Runnable() {
                    @Override
                    public void run() {
                        viewPager.setCurrentItem (itemCount - 2, true);
                    }
                }, 500);
            } else if (index == itemCount - 1) {
                viewPager.postDelayed(new Runnable() {
                    @Override
                    public void run() {
                        viewPager.setCurrentItem (1, true);
                    }
                }, 500);
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
732
0
Gpt3D_Clone732_0.java 1 10
Gpt3D_Clone732_0.java 11 30
----------------------------------------

public void doFilter (ServletRequest arg0, ServletResponse response, FilterChain chain) throws IOException, ServletException {
    logger.info ("checking client id in filter");
    HttpServletRequest request = (HttpServletRequest) arg0;
    String clientId = request.getHeader ("clientId");
    if (StringUtils.isNotEmpty (clientId)) {
        chain.doFilter (request, response);
    } else {
        logger.error ("client id missing.");
    }
}
----------------------------------------

 public void doFilter (ServletRequest arg0, ServletResponse response, FilterChain chain) throws IOException, ServletException {
    logger.info ("checking client id in filter");
    String sessionId = arg0.getParameter("jsessionid");
    HttpSession session = ((HttpServletRequest) arg0).getSession(false);
    if (session == null) {
        session = ((HttpServletRequest) arg0).getSession(true);
        session.setAttribute("jsessionid", sessionId);
        String clientId = session.getAttribute("clientId").toString();
    }
    else {
        String clientId = session.getAttribute("clientId").toString();
    }
    if (StringUtils.isNotEmpty (clientId)) {
        chain.doFilter (arg0, response);
    } else {
        logger.error ("client id missing.");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
733
2
Gpt3D_Clone733_2.java 1 15
Gpt3D_Clone733_2.java 16 25
----------------------------------------

public String getInput (String filename) {
    BufferedReader infile = null;
    try {
        infile = new BufferedReader (new FileReader (filename));
        String response = infile.readLine ();
        return response;
    } catch (IOException e) {
    } finally {
        try {
            infile.close ();
        } catch (IOException e) {
        }
    }
    return null;
}
----------------------------------------

	public String getInput (String filename) {
    try (BufferedReader infile = new BufferedReader (new FileReader (filename))) {
        String response = infile.readLine ();
        return response;
    } catch (IOException e) {
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
738
2
Gpt3D_Clone738_2.java 1 15
Gpt3D_Clone738_2.java 16 31
----------------------------------------

public int read () throws IOException {
    if (currentFilePos <= 0 && currentBufferPos < 0 && currentLineReadPos < 0) {
        return - 1;
    }
    if (! lineBuffered) {
        fillLineBuffer ();
    }
    if (lineBuffered) {
        if (currentLineReadPos == 0) {
            lineBuffered = false;
        }
        return currentLine [currentLineReadPos --];
    }
    return 0;
}
----------------------------------------

 public int read() throws IOException { 
   if ((currentFilePos > 0) || (currentBufferPos > 0) || (currentLineReadPos > 0)) { 
      if (!lineBuffered) 
         fillLineBuffer(); 
      if (lineBuffered) { 
         if (currentLineReadPos == 0) 
            lineBuffered = false; 
         return currentLine[currentLineReadPos--]; 
      } 
   } else { 
      return -1; 
   } 
   return 0; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
738
3
Gpt3D_Clone738_3.java 1 15
Gpt3D_Clone738_3.java 16 30
----------------------------------------

public int read () throws IOException {
    if (currentFilePos <= 0 && currentBufferPos < 0 && currentLineReadPos < 0) {
        return - 1;
    }
    if (! lineBuffered) {
        fillLineBuffer ();
    }
    if (lineBuffered) {
        if (currentLineReadPos == 0) {
            lineBuffered = false;
        }
        return currentLine [currentLineReadPos --];
    }
    return 0;
}
----------------------------------------

 public int read() throws IOException { 
   if (currentFilePos <= 0 && currentBufferPos < 0 && currentLineReadPos < 0) 
      return -1; 
   if (lineBuffered == false) 
      fillLineBuffer(); 
   if (lineBuffered == true) { 
      if (currentLineReadPos == 0) { 
         lineBuffered = false; 
      } 
      return currentLine[currentLineReadPos--]; 
   } 
   return 0; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
738
4
Gpt3D_Clone738_4.java 1 15
Gpt3D_Clone738_4.java 16 30
----------------------------------------

public int read () throws IOException {
    if (currentFilePos <= 0 && currentBufferPos < 0 && currentLineReadPos < 0) {
        return - 1;
    }
    if (! lineBuffered) {
        fillLineBuffer ();
    }
    if (lineBuffered) {
        if (currentLineReadPos == 0) {
            lineBuffered = false;
        }
        return currentLine [currentLineReadPos --];
    }
    return 0;
}
----------------------------------------

 public int read () throws IOException { 
   if (currentFilePos <= 0 && currentBufferPos < 0 && currentLineReadPos < 0)  
    return -1; 
   if (lineBuffered == false) 
      fillLineBuffer(); 
   if (lineBuffered == true) { 
      if (currentLineReadPos == 0) 
         lineBuffered = false; 
      int character = currentLine [currentLineReadPos--];
	  return (int) character;
   } 
   return 0; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
738
5
Gpt3D_Clone738_5.java 1 15
Gpt3D_Clone738_5.java 16 29
----------------------------------------

public int read () throws IOException {
    if (currentFilePos <= 0 && currentBufferPos < 0 && currentLineReadPos < 0) {
        return - 1;
    }
    if (! lineBuffered) {
        fillLineBuffer ();
    }
    if (lineBuffered) {
        if (currentLineReadPos == 0) {
            lineBuffered = false;
        }
        return currentLine [currentLineReadPos --];
    }
    return 0;
}
----------------------------------------

 public int read () throws IOException { 
   if (currentFilePos < 0 && currentBufferPos < 0 && currentLineReadPos < 0) 
      return -1; 
   if (lineBuffered == false) 
      fillLineBuffer(); 
   if (lineBuffered == true) { 
      if (currentLineReadPos == 0) 
         lineBuffered = false; 
      return currentLine[currentLineReadPos--]; 
   } 
   return 0; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
738
6
Gpt3D_Clone738_6.java 1 15
Gpt3D_Clone738_6.java 16 29
----------------------------------------

public int read () throws IOException {
    if (currentFilePos <= 0 && currentBufferPos < 0 && currentLineReadPos < 0) {
        return - 1;
    }
    if (! lineBuffered) {
        fillLineBuffer ();
    }
    if (lineBuffered) {
        if (currentLineReadPos == 0) {
            lineBuffered = false;
        }
        return currentLine [currentLineReadPos --];
    }
    return 0;
}
----------------------------------------

 public int read() throws IOException { 
   if (currentFilePos <= 0 && currentBufferPos < 0 && currentLineReadPos < 0)  
      return -1; 
   if (lineBuffered == false) 
      fillLineBuffer(); 
   if (lineBuffered == true) { 
      if (currentLineReadPos == 0) 
         lineBuffered = false; 
      return (int)currentLine[--currentLineReadPos]; 
   } 
   return 0; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
739
0
Gpt3D_Clone739_0.java 1 15
Gpt3D_Clone739_0.java 16 37
----------------------------------------

public int read () throws IOException {
    if (currentFilePos <= 0 && currentBufferPos < 0 && currentLineReadPos < 0) {
        return - 1;
    }
    if (! lineBuffered) {
        fillLineBuffer ();
    }
    if (lineBuffered) {
        if (currentLineReadPos == 0) {
            lineBuffered = false;
        }
        return currentLine [currentLineReadPos --];
    }
    return 0;
}
----------------------------------------

 public int read() throws IOException {
    if (currentFilePos <= 0 && currentBufferPos < 0 && currentLineReadPos < 0) 
        return -1;
    if (!lineBuffered) {
        fillLineBuffer();
    }
    if (lineBuffered) {
        if (currentLineReadPos == 0) {
            lineBuffered = false;
            return 0;
        }
        int result = currentLine[currentLineReadPos];
        if(--currentLineReadPos >= 0) {
            return result;
        } else {
            return 0;
        }
    }
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
739
1
Gpt3D_Clone739_1.java 1 15
Gpt3D_Clone739_1.java 16 35
----------------------------------------

public int read () throws IOException {
    if (currentFilePos <= 0 && currentBufferPos < 0 && currentLineReadPos < 0) {
        return - 1;
    }
    if (! lineBuffered) {
        fillLineBuffer ();
    }
    if (lineBuffered) {
        if (currentLineReadPos == 0) {
            lineBuffered = false;
        }
        return currentLine [currentLineReadPos --];
    }
    return 0;
}
----------------------------------------

	public int read() throws IOException {
    if (currentFilePos <= 0 && currentBufferPos < 0 && currentLineReadPos < 0) 
        return -1; 
    if (!lineBuffered) 
        fillLineBuffer();
    if (lineBuffered) {
        if (currentLineReadPos == 0)
            lineBuffered = false;
        int result = currentLine[currentLineReadPos];
        if (currentLineReadPos > 0){
            --currentLineReadPos;
        } else {
            return 0;
        }
        return result;
    }
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
739
2
Gpt3D_Clone739_2.java 1 15
Gpt3D_Clone739_2.java 16 34
----------------------------------------

public int read () throws IOException {
    if (currentFilePos <= 0 && currentBufferPos < 0 && currentLineReadPos < 0) {
        return - 1;
    }
    if (! lineBuffered) {
        fillLineBuffer ();
    }
    if (lineBuffered) {
        if (currentLineReadPos == 0) {
            lineBuffered = false;
        }
        return currentLine [currentLineReadPos --];
    }
    return 0;
}
----------------------------------------

	public int read() throws IOException {
    if (currentFilePos <= 0 && currentBufferPos < 0 && currentLineReadPos < 0) 
        return -1;
    if (!lineBuffered) 
        fillLineBuffer();
    if (lineBuffered) {
        if (currentLineReadPos == 0) 
            lineBuffered = false;
        int result = currentLine[currentLineReadPos];
        --currentLineReadPos;
        if (currentLineReadPos >= 0) 
            return result;
        else
            return 0;
    } 
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
739
3
Gpt3D_Clone739_3.java 1 15
Gpt3D_Clone739_3.java 16 34
----------------------------------------

public int read () throws IOException {
    if (currentFilePos <= 0 && currentBufferPos < 0 && currentLineReadPos < 0) {
        return - 1;
    }
    if (! lineBuffered) {
        fillLineBuffer ();
    }
    if (lineBuffered) {
        if (currentLineReadPos == 0) {
            lineBuffered = false;
        }
        return currentLine [currentLineReadPos --];
    }
    return 0;
}
----------------------------------------

    public int read() throws IOException {
    if (currentFilePos <= 0 && currentBufferPos < 0 && currentLineReadPos < 0) 
        return -1;                                                
    if (!lineBuffered) {
        fillLineBuffer();
    }                                                            
    if (lineBuffered) {
        if (currentLineReadPos == 0) 
            lineBuffered = false;                                
        int result = currentLine[currentLineReadPos];
        if (currentLineReadPos > 0) 
            --currentLineReadPos;
        return result;
    }
    else
        return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
739
4
Gpt3D_Clone739_4.java 1 15
Gpt3D_Clone739_4.java 16 32
----------------------------------------

public int read () throws IOException {
    if (currentFilePos <= 0 && currentBufferPos < 0 && currentLineReadPos < 0) {
        return - 1;
    }
    if (! lineBuffered) {
        fillLineBuffer ();
    }
    if (lineBuffered) {
        if (currentLineReadPos == 0) {
            lineBuffered = false;
        }
        return currentLine [currentLineReadPos --];
    }
    return 0;
}
----------------------------------------

	public int read() throws IOException {
    if (currentFilePos <= 0 && currentBufferPos < 0 && currentLineReadPos < 0) 
        return -1;
    if (!lineBuffered) 
        fillLineBuffer();
    if (lineBuffered) {
        if (currentLineReadPos == 0) 
            lineBuffered = false;
        int result = currentLine[currentLineReadPos];
        if (currentLineReadPos > 0)
            --currentLineReadPos;
        return result;
    }
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
739
7
Gpt3D_Clone739_7.java 1 15
Gpt3D_Clone739_7.java 16 29
----------------------------------------

public int read () throws IOException {
    if (currentFilePos <= 0 && currentBufferPos < 0 && currentLineReadPos < 0) {
        return - 1;
    }
    if (! lineBuffered) {
        fillLineBuffer ();
    }
    if (lineBuffered) {
        if (currentLineReadPos == 0) {
            lineBuffered = false;
        }
        return currentLine [currentLineReadPos --];
    }
    return 0;
}
----------------------------------------

	public int read() throws IOException {
    if (currentFilePos <= 0 && currentBufferPos < 0 && currentLineReadPos < 0) 
        return -1;
    if (lineBuffered) {
        if (currentLineReadPos == 0)
            lineBuffered = false;
        return currentLine[currentLineReadPos--];
    } 
    else
        fillLineBuffer();
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
739
8
Gpt3D_Clone739_8.java 1 15
Gpt3D_Clone739_8.java 16 29
----------------------------------------

public int read () throws IOException {
    if (currentFilePos <= 0 && currentBufferPos < 0 && currentLineReadPos < 0) {
        return - 1;
    }
    if (! lineBuffered) {
        fillLineBuffer ();
    }
    if (lineBuffered) {
        if (currentLineReadPos == 0) {
            lineBuffered = false;
        }
        return currentLine [currentLineReadPos --];
    }
    return 0;
}
----------------------------------------

	public int read() throws IOException {
    if (currentFilePos <= 0 && currentBufferPos < 0 && currentLineReadPos < 0) 
        return -1;
    if (lineBuffered) {
        if (currentLineReadPos == 0) 
            lineBuffered = false;
        return currentLine[--currentLineReadPos];
    } 
    else
        fillLineBuffer();
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
740
0
Gpt3D_Clone740_0.java 1 7
Gpt3D_Clone740_0.java 8 18
----------------------------------------

        public void run () {
            fileChooser.setSelectedFile (new File (file));
            if (fileChooser.showOpenDialog (button) == JFileChooser.APPROVE_OPTION) {
                file = fileChooser.getSelectedFile ().getAbsolutePath ();
            }
            fireEditingStopped ();
}
----------------------------------------

  public void run () {
            File selectedFile = new File (file);
            fileChooser.setSelectedFile (selectedFile);
            if (fileChooser.showOpenDialog (file, button) == JFileChooser.APPROVE_OPTION) {
                file = fileChooser.getSelectedFile ().getAbsolutePath ();
            }
            updateFileList ();
            fireEditingStopped ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
740
1
Gpt3D_Clone740_1.java 1 7
Gpt3D_Clone740_1.java 8 18
----------------------------------------

        public void run () {
            fileChooser.setSelectedFile (new File (file));
            if (fileChooser.showOpenDialog (button) == JFileChooser.APPROVE_OPTION) {
                file = fileChooser.getSelectedFile ().getAbsolutePath ();
            }
            fireEditingStopped ();
}
----------------------------------------

  public void run () {
            File selectedFile = new File (file);
            fileChooser.setSelectedFile (selectedFile);
            if (fileChooser.showOpenDialog (file, button) == JFileChooser.APPROVE_OPTION) {
                file = fileChooser.getSelectedFile ().getAbsolutePath ();
            }
            reportFileSelection (selectedFile);
            fireEditingStopped ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
740
2
Gpt3D_Clone740_2.java 1 7
Gpt3D_Clone740_2.java 8 17
----------------------------------------

        public void run () {
            fileChooser.setSelectedFile (new File (file));
            if (fileChooser.showOpenDialog (button) == JFileChooser.APPROVE_OPTION) {
                file = fileChooser.getSelectedFile ().getAbsolutePath ();
            }
            fireEditingStopped ();
}
----------------------------------------

  public void run () {
            customFileChooser ().setSelectedFile (new File (file));
            if (customFileChooser().showOpenDialog (button) == JFileChooser.APPROVE_OPTION) {
                file = customFileChooser().getSelectedFile ().getAbsolutePath ();
            }
            customFileChooser().delete ();
            fireEditingStopped ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
740
3
Gpt3D_Clone740_3.java 1 7
Gpt3D_Clone740_3.java 8 17
----------------------------------------

        public void run () {
            fileChooser.setSelectedFile (new File (file));
            if (fileChooser.showOpenDialog (button) == JFileChooser.APPROVE_OPTION) {
                file = fileChooser.getSelectedFile ().getAbsolutePath ();
            }
            fireEditingStopped ();
}
----------------------------------------

  public void run () {
           getCurrentWorkingDirectory (new File (file));
            if (fileChooser.showOpenDialog (file, button) == JFileChooser.APPROVE_OPTION) {
                file = fileChooser.getSelectedFile ().getAbsolutePath ();
            }
           setNewWorkingDirectory ();
            fireEditingStopped ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
740
4
Gpt3D_Clone740_4.java 1 7
Gpt3D_Clone740_4.java 8 17
----------------------------------------

        public void run () {
            fileChooser.setSelectedFile (new File (file));
            if (fileChooser.showOpenDialog (button) == JFileChooser.APPROVE_OPTION) {
                file = fileChooser.getSelectedFile ().getAbsolutePath ();
            }
            fireEditingStopped ();
}
----------------------------------------

  public void run () {
            Iterator listFiles = getListFiles (); 
            if (fileChooser.showOpenDialog (file, button) == JFileChooser.APPROVE_OPTION) {
                file = fileChooser.getSelectedFile ().getAbsolutePath ();
            }
            listFiles.remove ();
            fireEditingStopped ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
740
5
Gpt3D_Clone740_5.java 1 7
Gpt3D_Clone740_5.java 8 17
----------------------------------------

        public void run () {
            fileChooser.setSelectedFile (new File (file));
            if (fileChooser.showOpenDialog (button) == JFileChooser.APPROVE_OPTION) {
                file = fileChooser.getSelectedFile ().getAbsolutePath ();
            }
            fireEditingStopped ();
}
----------------------------------------

  public void run () {
            createNewFile (file);
            if (fileChooser.showOpenDialog (file, button) == JFileChooser.APPROVE_OPTION) {
                file = fileChooser.getSelectedFile ().getAbsolutePath ();
            }
            deleteOldFile ();
            fireEditingStopped ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
740
6
Gpt3D_Clone740_6.java 1 7
Gpt3D_Clone740_6.java 8 17
----------------------------------------

        public void run () {
            fileChooser.setSelectedFile (new File (file));
            if (fileChooser.showOpenDialog (button) == JFileChooser.APPROVE_OPTION) {
                file = fileChooser.getSelectedFile ().getAbsolutePath ();
            }
            fireEditingStopped ();
}
----------------------------------------

  public void run () {
            binarySearchTree ().accept (new File (file));
            if (binarySearchTree().contains (file, button) == JFileChooser.APPROVE_OPTION) {
                file = binarySearchTree().retrieve (file).getAbsolutePath ();
            }
            binarySearchTree().destroy ();
            fireEditingStopped ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
740
7
Gpt3D_Clone740_7.java 1 7
Gpt3D_Clone740_7.java 8 17
----------------------------------------

        public void run () {
            fileChooser.setSelectedFile (new File (file));
            if (fileChooser.showOpenDialog (button) == JFileChooser.APPROVE_OPTION) {
                file = fileChooser.getSelectedFile ().getAbsolutePath ();
            }
            fireEditingStopped ();
}
----------------------------------------

  public void run () {
            getRestrictedFiles ();
            if (fileChooser.showOpenDialog (file, button) == JFileChooser.APPROVE_OPTION) {
                file = fileChooser.getSelectedFile ().getAbsolutePath ();
            }
            removeRestrictedFiles ();
            fireEditingStopped ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
740
8
Gpt3D_Clone740_8.java 1 7
Gpt3D_Clone740_8.java 8 17
----------------------------------------

        public void run () {
            fileChooser.setSelectedFile (new File (file));
            if (fileChooser.showOpenDialog (button) == JFileChooser.APPROVE_OPTION) {
                file = fileChooser.getSelectedFile ().getAbsolutePath ();
            }
            fireEditingStopped ();
}
----------------------------------------

  public void run () {
            initializeFileChooser ();
            if (fileChooser.showOpenDialog (file, button) == JFileChooser.APPROVE_OPTION) {
                file = fileChooser.getSelectedFile ().getAbsolutePath ();
            }
            finishFileChooser ();
            fireEditingStopped ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
740
9
Gpt3D_Clone740_9.java 1 7
Gpt3D_Clone740_9.java 8 17
----------------------------------------

        public void run () {
            fileChooser.setSelectedFile (new File (file));
            if (fileChooser.showOpenDialog (button) == JFileChooser.APPROVE_OPTION) {
                file = fileChooser.getSelectedFile ().getAbsolutePath ();
            }
            fireEditingStopped ();
}
----------------------------------------

  public void run () {
            instantiateFile (file);
            if (fileChooser.showOpenDialog (file, button) == JFileChooser.APPROVE_OPTION) {
                file = fileChooser.getSelectedFile ().getAbsolutePath ();
            }
            deleteInstantiatedFile ();
            fireEditingStopped ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
742
0
Gpt3D_Clone742_0.java 1 4
Gpt3D_Clone742_0.java 5 25
----------------------------------------

            public FileVisitResult postVisitDirectory (Path directory, IOException ioException) throws IOException {
                Files.delete (directory);
                return FileVisitResult.CONTINUE;
}
----------------------------------------

 public FileVisitResult postVisitDirectory (Path directory, IOException ioException) throws IOException {if (ioException == null) {
        Path dirName = directory.getFileName();
        Files.walkFileTree(dirName, new SimpleFileVisitor<>() {
            @Override
            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)
                    throws IOException {
                Files.delete(file);
                return FileVisitResult.CONTINUE;
            }
            @Override
            public FileVisitResult postVisitDirectory(Path dir, IOException exc)
                    throws IOException {
                Files.delete(dir);
                return FileVisitResult.CONTINUE;
            }
        });
        return FileVisitResult.CONTINUE;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
742
1
Gpt3D_Clone742_1.java 1 4
Gpt3D_Clone742_1.java 5 16
----------------------------------------

            public FileVisitResult postVisitDirectory (Path directory, IOException ioException) throws IOException {
                Files.delete (directory);
                return FileVisitResult.CONTINUE;
}
----------------------------------------

 public FileVisitResult postVisitDirectory (Path directory, IOException ioException) throws IOException {if (ioException == null) {
        Files.list(directory).skip(1).forEach(file -> {
            try{
                Files.delete(file);
            } catch(IOException e) {}
        });
        Files.delete(directory);
        return FileVisitResult.CONTINUE;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
742
2
Gpt3D_Clone742_2.java 1 4
Gpt3D_Clone742_2.java 5 16
----------------------------------------

            public FileVisitResult postVisitDirectory (Path directory, IOException ioException) throws IOException {
                Files.delete (directory);
                return FileVisitResult.CONTINUE;
}
----------------------------------------

 public FileVisitResult postVisitDirectory (Path directory, IOException ioException) throws IOException {if (ioException == null) {
        try (DirectoryStream<Path> dirStream = Files.newDirectoryStream(directory)) {
            for (Path subPath : dirStream) {
                Files.delete(subPath);
            }
            Files.delete(directory);
            return FileVisitResult.CONTINUE;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
742
3
Gpt3D_Clone742_3.java 1 4
Gpt3D_Clone742_3.java 5 15
----------------------------------------

            public FileVisitResult postVisitDirectory (Path directory, IOException ioException) throws IOException {
                Files.delete (directory);
                return FileVisitResult.CONTINUE;
}
----------------------------------------

 public FileVisitResult postVisitDirectory (Path directory, IOException ioException) throws IOException {if (ioException == null) {
        Path[] subPaths = Files.list(directory).toArray(Path[]::new);
        for (Path subPath : subPaths) {
            Files.delete(subPath);
        }
        Files.delete(directory);
        return FileVisitResult.CONTINUE;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
742
4
Gpt3D_Clone742_4.java 1 4
Gpt3D_Clone742_4.java 5 13
----------------------------------------

            public FileVisitResult postVisitDirectory (Path directory, IOException ioException) throws IOException {
                Files.delete (directory);
                return FileVisitResult.CONTINUE;
}
----------------------------------------

 public FileVisitResult postVisitDirectory (Path directory, IOException ioException) throws IOException {if (ioException == null) {
        Path parentDir = directory.getParent();
        Files.delete(directory);
        Files.delete(parentDir);
        return FileVisitResult.CONTINUE;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
742
5
Gpt3D_Clone742_5.java 1 4
Gpt3D_Clone742_5.java 5 13
----------------------------------------

            public FileVisitResult postVisitDirectory (Path directory, IOException ioException) throws IOException {
                Files.delete (directory);
                return FileVisitResult.CONTINUE;
}
----------------------------------------

 public FileVisitResult postVisitDirectory (Path directory, IOException ioException) throws IOException {if (ioException == null) {
        dirStream = Files.newDirectoryStream(directory);
        dirStream.close();
        Files.delete(directory);
        return FileVisitResult.CONTINUE;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
742
9
Gpt3D_Clone742_9.java 1 4
Gpt3D_Clone742_9.java 5 14
----------------------------------------

            public FileVisitResult postVisitDirectory (Path directory, IOException ioException) throws IOException {
                Files.delete (directory);
                return FileVisitResult.CONTINUE;
}
----------------------------------------

 public FileVisitResult postVisitDirectory (Path directory, IOException ioException) throws IOException {if(ioException == null){
        Files.walk(directory)
            .sorted(Comparator.reverseOrder())
            .map(Path::toFile)
            .forEach(File::delete);
        return FileVisitResult.CONTINUE;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
743
0
Gpt3D_Clone743_0.java 1 13
Gpt3D_Clone743_0.java 14 34
----------------------------------------

private static long factorial (int n, int depth) {
    String spaces = repeat (' ', depth);
    System.out.print (spaces);
    System.out.println ("factorial(" + n + ")");
    if (n <= 1) {
        System.out.println (spaces + " return 1");
        return 1;
    }
    long fac = factorial (n - 1, depth + 1);
    System.out.print (spaces);
    System.out.printf ("return %d * %d = %d%n", n, fac, n * fac);
    return n * fac;
}
----------------------------------------

 private static long factorial(int n, int depth) {
    String spaces = repeat(' ', depth);
    System.out.print (spaces);
    System.out.println("factorial(" + n + ")");
    if (n <= 1) {
        System.out.println(spaces + " return 1");
        return 1;
    }
    int iterator = n;
    long fac = 1;
    while (iterator > 0) {
        long result = iterator * fac;
        System.out.print(spaces);
        System.out.printf("return %d * %d = %d%n", iterator, fac, result); 
        fac = result;
        iterator--;
    }
    return fac;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
743
1
Gpt3D_Clone743_1.java 1 13
Gpt3D_Clone743_1.java 14 34
----------------------------------------

private static long factorial (int n, int depth) {
    String spaces = repeat (' ', depth);
    System.out.print (spaces);
    System.out.println ("factorial(" + n + ")");
    if (n <= 1) {
        System.out.println (spaces + " return 1");
        return 1;
    }
    long fac = factorial (n - 1, depth + 1);
    System.out.print (spaces);
    System.out.printf ("return %d * %d = %d%n", n, fac, n * fac);
    return n * fac;
}
----------------------------------------

 private static long factorial(int n, int depth) {
    String spaces = repeat(' ', depth);
    System.out.print(spaces);
    System.out.println("factorial(" + n + ")");
    if (n <= 1) {
        System.out.println(spaces + " return 1");
        return 1;
    }
    long fac = 1;
    int currentN = n;
    while (currentN > 1) {
        System.out.print(spaces);
        long result = currentN * fac;
        System.out.printf("return %d * %d = %d%n", currentN, fac, result);
        fac = result;
        currentN--;
    }
    return fac;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
743
4
Gpt3D_Clone743_4.java 1 13
Gpt3D_Clone743_4.java 14 31
----------------------------------------

private static long factorial (int n, int depth) {
    String spaces = repeat (' ', depth);
    System.out.print (spaces);
    System.out.println ("factorial(" + n + ")");
    if (n <= 1) {
        System.out.println (spaces + " return 1");
        return 1;
    }
    long fac = factorial (n - 1, depth + 1);
    System.out.print (spaces);
    System.out.printf ("return %d * %d = %d%n", n, fac, n * fac);
    return n * fac;
}
----------------------------------------

 private static long factorial (int n, int depth) {
    String spaces = repeat (' ', depth);
    System.out.println (spaces + "factorial(" + n + ")");
    if (n <= 1) {
        System.out.println (spaces + " return 1");
        return 1;
    }
    int fac = 1;
    while(n>1){
        fac=fac*n;
        System.out.println(spaces+ fac +" * "+n+" = "+ fac);
        n--;
    }
    System.out.println(spaces + "return " + fac);
    return fac;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
743
5
Gpt3D_Clone743_5.java 1 13
Gpt3D_Clone743_5.java 14 30
----------------------------------------

private static long factorial (int n, int depth) {
    String spaces = repeat (' ', depth);
    System.out.print (spaces);
    System.out.println ("factorial(" + n + ")");
    if (n <= 1) {
        System.out.println (spaces + " return 1");
        return 1;
    }
    long fac = factorial (n - 1, depth + 1);
    System.out.print (spaces);
    System.out.printf ("return %d * %d = %d%n", n, fac, n * fac);
    return n * fac;
}
----------------------------------------

 private static long factorial(int n, int depth) {
    String spaces = repeat(' ', depth);
    if (n <= 1) {
        System.out.println(spaces + "return 1");
        return 1;
    }
    long fac = 1;
    for (int i = 1; i <= n; i++) {
        long result = i * fac;
        System.out.println(spaces + fac +" * "+n+" = "+ result);
        fac = result;
    }
    System.out.println(spaces + "return " + fac);
    return fac;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
743
6
Gpt3D_Clone743_6.java 1 13
Gpt3D_Clone743_6.java 14 29
----------------------------------------

private static long factorial (int n, int depth) {
    String spaces = repeat (' ', depth);
    System.out.print (spaces);
    System.out.println ("factorial(" + n + ")");
    if (n <= 1) {
        System.out.println (spaces + " return 1");
        return 1;
    }
    long fac = factorial (n - 1, depth + 1);
    System.out.print (spaces);
    System.out.printf ("return %d * %d = %d%n", n, fac, n * fac);
    return n * fac;
}
----------------------------------------

 private static long factorial(int n, int depth) {
    long result = 1;
    System.out.println( repeat(' ', depth) + "factorial(" + n + ")");
    if (n <= 1) {
        System.out.println( repeat(' ', depth) + "return 1");
        return result;
    }
    while (n > 1) {
        result *= n;
        System.out.println(repeat(' ', depth) + "return " + result);
        n--;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
743
7
Gpt3D_Clone743_7.java 1 13
Gpt3D_Clone743_7.java 14 28
----------------------------------------

private static long factorial (int n, int depth) {
    String spaces = repeat (' ', depth);
    System.out.print (spaces);
    System.out.println ("factorial(" + n + ")");
    if (n <= 1) {
        System.out.println (spaces + " return 1");
        return 1;
    }
    long fac = factorial (n - 1, depth + 1);
    System.out.print (spaces);
    System.out.printf ("return %d * %d = %d%n", n, fac, n * fac);
    return n * fac;
}
----------------------------------------

 private static long factorial (int n, int depth) {    
    int number = 1;
    if (n <= 1) {
        return number;
    }
    for (int i = 1; i <= n; i++) {
        System.out.println(i + ": " + number + " * " + n + " = " + number * n);
        number *= n;
        n--;
    }
    System.out.println("Total: " + number);
    return number;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
743
8
Gpt3D_Clone743_8.java 1 13
Gpt3D_Clone743_8.java 14 24
----------------------------------------

private static long factorial (int n, int depth) {
    String spaces = repeat (' ', depth);
    System.out.print (spaces);
    System.out.println ("factorial(" + n + ")");
    if (n <= 1) {
        System.out.println (spaces + " return 1");
        return 1;
    }
    long fac = factorial (n - 1, depth + 1);
    System.out.print (spaces);
    System.out.printf ("return %d * %d = %d%n", n, fac, n * fac);
    return n * fac;
}
----------------------------------------

 private static long factorial(int n, int depth) {
    if (n <= 1) {
        return 1;
    }
    System.out.println(repeat(' ', depth) + n);
    long fac = factorial(n - 1, depth + 1);
    System.out.printf(repeat(' ', depth) + "%d * %d = %d%n", fac, n, fac * n);
    return n * fac;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
745
0
Gpt3D_Clone745_0.java 1 9
Gpt3D_Clone745_0.java 10 32
----------------------------------------

public static int evenDigits (int n) {
    if ((n & 1) != 0) {
        return evenDigits (n / 10);
    }
    if (n < 10) {
        return n;
    }
    return n % 10 + evenDigits (n / 10) * 10;
}
----------------------------------------

//10.
public static int evenDigits (int n) {
    if (n < 10) {
        if ((n & 1) != 0) 
            return 0;
        else
            return n;
    }
    int num = 0;
    int x = 0;
    while (n > 0) {
        int remainder = n % 10;
        if ((remainder & 1) == 0) {
            num += remainder * (int)Math.pow(10, x);
            x++;
        }
        n /= 10;
    }
    return num;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
745
1
Gpt3D_Clone745_1.java 1 9
Gpt3D_Clone745_1.java 10 30
----------------------------------------

public static int evenDigits (int n) {
    if ((n & 1) != 0) {
        return evenDigits (n / 10);
    }
    if (n < 10) {
        return n;
    }
    return n % 10 + evenDigits (n / 10) * 10;
}
----------------------------------------

//8.
public static int evenDigits (int n) {
    if (n < 10) 
        return (n & 1) == 0 ? n : 0;
    int res = 0;
    int val = n;
    int pass = 1;
    while (val > 0){
        int remainder = val % 10; 
        
        if ((remainder & 1) == 0)
            res += (pass * remainder);
        pass *= 10;
        val = val/10; 
    }
    
    return res;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
745
2
Gpt3D_Clone745_2.java 1 9
Gpt3D_Clone745_2.java 10 27
----------------------------------------

public static int evenDigits (int n) {
    if ((n & 1) != 0) {
        return evenDigits (n / 10);
    }
    if (n < 10) {
        return n;
    }
    return n % 10 + evenDigits (n / 10) * 10;
}
----------------------------------------

//9.
public static int evenDigits (int n) {
    if(n < 10 && ((n & 1) != 0)) return 0;
    
    int div = 10;
    int rem = 0;
    int result = 0;
    while(n > 0) {
        rem = n % div;
        if((rem & 1) == 0){
            result = (result * 10) + rem;
        }
        n /= 10;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
745
3
Gpt3D_Clone745_3.java 1 9
Gpt3D_Clone745_3.java 10 28
----------------------------------------

public static int evenDigits (int n) {
    if ((n & 1) != 0) {
        return evenDigits (n / 10);
    }
    if (n < 10) {
        return n;
    }
    return n % 10 + evenDigits (n / 10) * 10;
}
----------------------------------------

//7.
public static int evenDigits (int n) {
    if (n < 10) 
        return (n & 1) == 0 ? n : 0;
    int ans = 0;
    int multiplier = 1;
    
    while(n > 0) {
        int remainder = n % 10;
        if ((remainder & 1) == 0) 
            ans += remainder * multiplier;
        multiplier *= 10;
        n /= 10;
    }
    return ans;
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
745
4
Gpt3D_Clone745_4.java 1 9
Gpt3D_Clone745_4.java 10 25
----------------------------------------

public static int evenDigits (int n) {
    if ((n & 1) != 0) {
        return evenDigits (n / 10);
    }
    if (n < 10) {
        return n;
    }
    return n % 10 + evenDigits (n / 10) * 10;
}
----------------------------------------

//3.
public static int evenDigits (int n) {
    int temp = n;
    int evenDigitsFound = 0;
    
    while (temp > 0) {
        int digit = temp % 10;
        if (digit % 2 == 0) {
            evenDigitsFound = evenDigitsFound * 10 + digit;
        }
            temp /= 10;
    }
  return evenDigitsFound;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
745
5
Gpt3D_Clone745_5.java 1 9
Gpt3D_Clone745_5.java 10 24
----------------------------------------

public static int evenDigits (int n) {
    if ((n & 1) != 0) {
        return evenDigits (n / 10);
    }
    if (n < 10) {
        return n;
    }
    return n % 10 + evenDigits (n / 10) * 10;
}
----------------------------------------

//1.
public static int evenDigits (int n) {
    int temp = n;
    int evenSum = 0;
    while(temp > 0) {
        int remainder = temp % 10;
        if((remainder & 1) == 0) {
            evenSum = evenSum*10 + remainder;
        }
        temp /= 10;
    }
    return evenSum;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
745
6
Gpt3D_Clone745_6.java 1 9
Gpt3D_Clone745_6.java 10 23
----------------------------------------

public static int evenDigits (int n) {
    if ((n & 1) != 0) {
        return evenDigits (n / 10);
    }
    if (n < 10) {
        return n;
    }
    return n % 10 + evenDigits (n / 10) * 10;
}
----------------------------------------

//2.
public static int evenDigits (int n) {
    int remainder, sum = 0;
    while (n != 0) 
    {
        remainder = n % 10; 
        if ((remainder & 1) == 0)  
        sum = (sum * 10) + remainder; 
        n /= 10;
    }
    return sum; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
745
7
Gpt3D_Clone745_7.java 1 9
Gpt3D_Clone745_7.java 10 23
----------------------------------------

public static int evenDigits (int n) {
    if ((n & 1) != 0) {
        return evenDigits (n / 10);
    }
    if (n < 10) {
        return n;
    }
    return n % 10 + evenDigits (n / 10) * 10;
}
----------------------------------------

//4.
public static int evenDigits (int n) {
    if (n < 10)  
        if(n % 2 == 0) 
            return n;
        else
            return 0;
    if ((n % 10) %2 ==0)  
         return (n % 10 + evenDigits ( n / 10) * 10);
    else
         return 0 +  evenDigits (n / 10) * 10;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
745
8
Gpt3D_Clone745_8.java 1 9
Gpt3D_Clone745_8.java 10 29
----------------------------------------

public static int evenDigits (int n) {
    if ((n & 1) != 0) {
        return evenDigits (n / 10);
    }
    if (n < 10) {
        return n;
    }
    return n % 10 + evenDigits (n / 10) * 10;
}
----------------------------------------

//5.
public static int evenDigits (int n) {
    if (n < 10) {
        return (n % 2 == 0) ? n : 0;
    }
    return (n % 10 % 2 != 0) ? 0 + evenDigits (n / 10) * 10 : n % 10 + evenDigits (n / 10) * 10;
}    
//6.
public static int evenDigits (int n) {
    if (n < 10) 
        return (n & 1) == 0 ? n : 0;
    if ((n % 10 & 1) == 0) 
        return n % 10 + evenDigits(n / 10) * 10; 
    else
        return 0 + evenDigits(n / 10) * 10; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
745
9
Gpt3D_Clone745_9.java 1 9
Gpt3D_Clone745_9.java 10 29
----------------------------------------

public static int evenDigits (int n) {
    if ((n & 1) != 0) {
        return evenDigits (n / 10);
    }
    if (n < 10) {
        return n;
    }
    return n % 10 + evenDigits (n / 10) * 10;
}
----------------------------------------

//5.
public static int evenDigits (int n) {
    if (n < 10) {
        return (n % 2 == 0) ? n : 0;
    }
    return (n % 10 % 2 != 0) ? 0 + evenDigits (n / 10) * 10 : n % 10 + evenDigits (n / 10) * 10;
}    
//6.
public static int evenDigits (int n) {
    if (n < 10) 
        return (n & 1) == 0 ? n : 0;
    if ((n % 10 & 1) == 0) 
        return n % 10 + evenDigits(n / 10) * 10; 
    else
        return 0 + evenDigits(n / 10) * 10; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
746
1
Gpt3D_Clone746_1.java 1 9
Gpt3D_Clone746_1.java 10 18
----------------------------------------

public void mouseReleased (int mod, Point loc) {
    if (pressLocation != null && dragLocation != null) {
        pressLocation = null;
    } else if (dragLocation != null) {
    } else {
    }
    pressLocation = null;
    dragLocation = null;
}
----------------------------------------

  public void mouseReleased (int mod, Point loc) {
    boolean areNull = pressLocation == null && dragLocation == null;
    if (!areNull) {
        pressLocation = null;
        dragLocation = null;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
746
2
Gpt3D_Clone746_2.java 1 9
Gpt3D_Clone746_2.java 10 17
----------------------------------------

public void mouseReleased (int mod, Point loc) {
    if (pressLocation != null && dragLocation != null) {
        pressLocation = null;
    } else if (dragLocation != null) {
    } else {
    }
    pressLocation = null;
    dragLocation = null;
}
----------------------------------------

 public void mouseReleased (int mod, Point loc) {
    if (!(pressLocation == null && dragLocation == null)) {
        pressLocation = null;
        dragLocation = null;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
746
3
Gpt3D_Clone746_3.java 1 9
Gpt3D_Clone746_3.java 10 17
----------------------------------------

public void mouseReleased (int mod, Point loc) {
    if (pressLocation != null && dragLocation != null) {
        pressLocation = null;
    } else if (dragLocation != null) {
    } else {
    }
    pressLocation = null;
    dragLocation = null;
}
----------------------------------------

 public void mouseReleased (int mod, Point loc) {
    if (pressLocation != null || dragLocation != null) {
        pressLocation = null;
        dragLocation = null;
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
747
5
Gpt3D_Clone747_5.java 1 22
Gpt3D_Clone747_5.java 23 39
----------------------------------------

static int countClamps (int [] arr) {
    int result = 0;
    int prev = 0;
    boolean same = false;
    for (int i = 0;
    i < arr.length; i ++) {
        if (i == 0) {
            prev = arr [i];
        } else {
            if (arr [i] == prev) {
                if (! same) {
                    result ++;
                    same = true;
                }
            } else {
                prev = arr [i];
                same = false;
            }
        }
    }
    return result;
}
----------------------------------------

  static int countClamps(int[] arr) {
    int count = 0;
    boolean repeated = false;
    
    for (int i = 0; i < arr.length; i++){
        if(i == 0) continue;
        if (arr[i] == arr[i-1] && !repeated){
            repeated = true;
            count++;
        }
        else
            repeated = false;
    }
    return count;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
747
6
Gpt3D_Clone747_6.java 1 22
Gpt3D_Clone747_6.java 23 37
----------------------------------------

static int countClamps (int [] arr) {
    int result = 0;
    int prev = 0;
    boolean same = false;
    for (int i = 0;
    i < arr.length; i ++) {
        if (i == 0) {
            prev = arr [i];
        } else {
            if (arr [i] == prev) {
                if (! same) {
                    result ++;
                    same = true;
                }
            } else {
                prev = arr [i];
                same = false;
            }
        }
    }
    return result;
}
----------------------------------------

  static int countClamps (int [] arr) {
    int count = 0;
    int prevNum = arr[0];
    for (int i = 1; i < arr.length; i++) {
        if (arr[i] == prevNum) {
            if (i != 0) {
                count++;
            }
        }
        prevNum = arr[i];
    }
    return count;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
747
7
Gpt3D_Clone747_7.java 1 22
Gpt3D_Clone747_7.java 23 36
----------------------------------------

static int countClamps (int [] arr) {
    int result = 0;
    int prev = 0;
    boolean same = false;
    for (int i = 0;
    i < arr.length; i ++) {
        if (i == 0) {
            prev = arr [i];
        } else {
            if (arr [i] == prev) {
                if (! same) {
                    result ++;
                    same = true;
                }
            } else {
                prev = arr [i];
                same = false;
            }
        }
    }
    return result;
}
----------------------------------------

  static int countClamps(int[] array) {
    int clamps = 0;
    int elementBefore = array[0];
    for (int element : array) {
    
        if (element == elementBefore) {
            clamps++;
        }
        elementBefore = element;
    }
    return clamps;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
747
8
Gpt3D_Clone747_8.java 1 22
Gpt3D_Clone747_8.java 23 35
----------------------------------------

static int countClamps (int [] arr) {
    int result = 0;
    int prev = 0;
    boolean same = false;
    for (int i = 0;
    i < arr.length; i ++) {
        if (i == 0) {
            prev = arr [i];
        } else {
            if (arr [i] == prev) {
                if (! same) {
                    result ++;
                    same = true;
                }
            } else {
                prev = arr [i];
                same = false;
            }
        }
    }
    return result;
}
----------------------------------------

  static int countClamps(int[] arr) {
    int count = 0;
    int prevNum = arr[0];
    for (int i = 1; i < arr.length; i++) {
        if (arr[i] == prevNum && i != 0) {
            count++;
        }
        prevNum = arr[i];
    }
    return count;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
74
3
Gpt3D_Clone74_3.java 1 27
Gpt3D_Clone74_3.java 28 42
----------------------------------------

public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {
    String lsStart = "";
    String lsInsert = "";
    String lsEnd = "";
    String lsText = "";
    Log.d ("debug", moPattern.toString ());
    Log.d ("debug", "source: " + source + ", start: " + start + ", end:" + end + ", dest: " + dest + ", dstart: " + dstart + ", dend: " + dend);
    lsText = dest.toString ();
    if (lsText.length () > 0) {
        lsStart = lsText.substring (0, dstart);
        Log.d ("debug", "lsStart : " + lsStart);
        if (source != "") {
            lsInsert = source.toString ();
            Log.d ("debug", "lsInsert: " + lsInsert);
        }
        lsEnd = lsText.substring (dend);
        Log.d ("debug", "lsEnd   : " + lsEnd);
        lsText = lsStart + lsInsert + lsEnd;
        Log.d ("debug", "lsText  : " + lsText);
    }
    Matcher loMatcher = moPattern.matcher (lsText);
    Log.d ("debug", "loMatcher.matches(): " + loMatcher.matches () + ", lsText: " + lsText);
    if (! loMatcher.matches ()) {
        return "";
    }
    return null;
}
----------------------------------------

 public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {String lsStart = ""; 
    String lsInsert = ""; 
    String lsEnd = ""; 
    String lsText = "";
    Log.d("debug", moPattern.toString());
    Log.d("debug", "source: " + source + ", start: " + start + ", end:" + end + ", dest: " + dest + ", dstart: " + dstart + ", dend: " + dend);
    lsText = dest.substring(0, dstart)+ source.substring(start, end) + dest.substring(dend, dest.length());
    Matcher loMatcher = moPattern.matcher(lsText);
    Log.d("debug", "loMatcher.matches(): " + loMatcher.matches() + ", lsText: " + lsText);
    if (! loMatcher.matches())
        return "";
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
74
4
Gpt3D_Clone74_4.java 1 27
Gpt3D_Clone74_4.java 28 39
----------------------------------------

public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {
    String lsStart = "";
    String lsInsert = "";
    String lsEnd = "";
    String lsText = "";
    Log.d ("debug", moPattern.toString ());
    Log.d ("debug", "source: " + source + ", start: " + start + ", end:" + end + ", dest: " + dest + ", dstart: " + dstart + ", dend: " + dend);
    lsText = dest.toString ();
    if (lsText.length () > 0) {
        lsStart = lsText.substring (0, dstart);
        Log.d ("debug", "lsStart : " + lsStart);
        if (source != "") {
            lsInsert = source.toString ();
            Log.d ("debug", "lsInsert: " + lsInsert);
        }
        lsEnd = lsText.substring (dend);
        Log.d ("debug", "lsEnd   : " + lsEnd);
        lsText = lsStart + lsInsert + lsEnd;
        Log.d ("debug", "lsText  : " + lsText);
    }
    Matcher loMatcher = moPattern.matcher (lsText);
    Log.d ("debug", "loMatcher.matches(): " + loMatcher.matches () + ", lsText: " + lsText);
    if (! loMatcher.matches ()) {
        return "";
    }
    return null;
}
----------------------------------------

 public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {char[] lsStart = new char[dstart], lsInsert = new char[end-start], lsEnd = new char[dest.length()-dend];
   dest.subSequence(0, dstart).getChars(0, dstart-1, lsStart, 0);
   source.subSequence(start, end).getChars(0, end-start-1, lsInsert, 0);
   dest.subSequence(dend, dest.length()).getChars(0, dest.length()-dend-1, lsEnd, 0);
   String lsText = new String(lsStart) + new String(lsInsert) + new String(lsEnd);
   Matcher loMatcher = moPattern.matcher(lsText);
   if (!loMatcher.matches())
       return "";
   return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
74
5
Gpt3D_Clone74_5.java 1 27
Gpt3D_Clone74_5.java 28 38
----------------------------------------

public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {
    String lsStart = "";
    String lsInsert = "";
    String lsEnd = "";
    String lsText = "";
    Log.d ("debug", moPattern.toString ());
    Log.d ("debug", "source: " + source + ", start: " + start + ", end:" + end + ", dest: " + dest + ", dstart: " + dstart + ", dend: " + dend);
    lsText = dest.toString ();
    if (lsText.length () > 0) {
        lsStart = lsText.substring (0, dstart);
        Log.d ("debug", "lsStart : " + lsStart);
        if (source != "") {
            lsInsert = source.toString ();
            Log.d ("debug", "lsInsert: " + lsInsert);
        }
        lsEnd = lsText.substring (dend);
        Log.d ("debug", "lsEnd   : " + lsEnd);
        lsText = lsStart + lsInsert + lsEnd;
        Log.d ("debug", "lsText  : " + lsText);
    }
    Matcher loMatcher = moPattern.matcher (lsText);
    Log.d ("debug", "loMatcher.matches(): " + loMatcher.matches () + ", lsText: " + lsText);
    if (! loMatcher.matches ()) {
        return "";
    }
    return null;
}
----------------------------------------

 public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) { String lsStart = String.valueOf(dest, 0, dstart);
   String lsInsert = source.subSequence(start, end).toString();
   String lsEnd = String.valueOf(dest, dend, dest.length());
   String lsText = lsStart + lsInsert + lsEnd;
   Matcher loMatcher = moPattern.matcher(lsText);
   if (!loMatcher.matches())
       return "";
   return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
74
6
Gpt3D_Clone74_6.java 1 27
Gpt3D_Clone74_6.java 28 37
----------------------------------------

public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {
    String lsStart = "";
    String lsInsert = "";
    String lsEnd = "";
    String lsText = "";
    Log.d ("debug", moPattern.toString ());
    Log.d ("debug", "source: " + source + ", start: " + start + ", end:" + end + ", dest: " + dest + ", dstart: " + dstart + ", dend: " + dend);
    lsText = dest.toString ();
    if (lsText.length () > 0) {
        lsStart = lsText.substring (0, dstart);
        Log.d ("debug", "lsStart : " + lsStart);
        if (source != "") {
            lsInsert = source.toString ();
            Log.d ("debug", "lsInsert: " + lsInsert);
        }
        lsEnd = lsText.substring (dend);
        Log.d ("debug", "lsEnd   : " + lsEnd);
        lsText = lsStart + lsInsert + lsEnd;
        Log.d ("debug", "lsText  : " + lsText);
    }
    Matcher loMatcher = moPattern.matcher (lsText);
    Log.d ("debug", "loMatcher.matches(): " + loMatcher.matches () + ", lsText: " + lsText);
    if (! loMatcher.matches ()) {
        return "";
    }
    return null;
}
----------------------------------------

 public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {StringBuilder sb = new StringBuilder(dest);
   sb.replace(dstart, dend, source.subSequence(start, end).toString());
   String lsText = sb.toString();
   Matcher loMatcher = moPattern.matcher(lsText);
   if (!loMatcher.matches())
       return "";
   return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
74
7
Gpt3D_Clone74_7.java 1 27
Gpt3D_Clone74_7.java 28 35
----------------------------------------

public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {
    String lsStart = "";
    String lsInsert = "";
    String lsEnd = "";
    String lsText = "";
    Log.d ("debug", moPattern.toString ());
    Log.d ("debug", "source: " + source + ", start: " + start + ", end:" + end + ", dest: " + dest + ", dstart: " + dstart + ", dend: " + dend);
    lsText = dest.toString ();
    if (lsText.length () > 0) {
        lsStart = lsText.substring (0, dstart);
        Log.d ("debug", "lsStart : " + lsStart);
        if (source != "") {
            lsInsert = source.toString ();
            Log.d ("debug", "lsInsert: " + lsInsert);
        }
        lsEnd = lsText.substring (dend);
        Log.d ("debug", "lsEnd   : " + lsEnd);
        lsText = lsStart + lsInsert + lsEnd;
        Log.d ("debug", "lsText  : " + lsText);
    }
    Matcher loMatcher = moPattern.matcher (lsText);
    Log.d ("debug", "loMatcher.matches(): " + loMatcher.matches () + ", lsText: " + lsText);
    if (! loMatcher.matches ()) {
        return "";
    }
    return null;
}
----------------------------------------

 public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {String lsText = dest.toString().substring(0, dstart) + source.subSequence(start, end).toString() + dest.toString().substring(dend);
   Matcher loMatcher = moPattern.matcher(lsText);
   if (!loMatcher.matches())
         return "";
   return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
74
8
Gpt3D_Clone74_8.java 1 27
Gpt3D_Clone74_8.java 28 35
----------------------------------------

public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {
    String lsStart = "";
    String lsInsert = "";
    String lsEnd = "";
    String lsText = "";
    Log.d ("debug", moPattern.toString ());
    Log.d ("debug", "source: " + source + ", start: " + start + ", end:" + end + ", dest: " + dest + ", dstart: " + dstart + ", dend: " + dend);
    lsText = dest.toString ();
    if (lsText.length () > 0) {
        lsStart = lsText.substring (0, dstart);
        Log.d ("debug", "lsStart : " + lsStart);
        if (source != "") {
            lsInsert = source.toString ();
            Log.d ("debug", "lsInsert: " + lsInsert);
        }
        lsEnd = lsText.substring (dend);
        Log.d ("debug", "lsEnd   : " + lsEnd);
        lsText = lsStart + lsInsert + lsEnd;
        Log.d ("debug", "lsText  : " + lsText);
    }
    Matcher loMatcher = moPattern.matcher (lsText);
    Log.d ("debug", "loMatcher.matches(): " + loMatcher.matches () + ", lsText: " + lsText);
    if (! loMatcher.matches ()) {
        return "";
    }
    return null;
}
----------------------------------------

 public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {String lsText = dest.toString().replace(dest.toString().substring(dstart,dend), source.subSequence(start, end).toString());
   Matcher loMatcher = moPattern.matcher(lsText);
   if (! loMatcher.matches())
       return "";
   return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
755
0
Gpt3D_Clone755_0.java 1 11
Gpt3D_Clone755_0.java 12 27
----------------------------------------

public static void main (String [] args) {
    Integer n = Integer.parseInt (args [0]);
    Queue < Integer > q = new Queue < Integer > ();
    while (! StdIn.isEmpty ()) {
        q.enqueue (StdIn.readInt ());
    }
    while (q.size () > n) {
        q.dequeue ();
    }
    StdOut.println (q.peek ().toString ());
}
----------------------------------------

  public static void main (String [] args) {
	  Integer n = Integer.parseInt (args [0]);
	  ArrayList<Integer> list = new ArrayList<>();
	  while (System.in.available() > 0)
	  {
	      list.add(System.in.readInt());
	  }
	  Collections.sort(list);
	  while (list.size() > n)
	  {
	      list.remove(0);
	  }
	  System.out.println(list.get(0).toString());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
755
1
Gpt3D_Clone755_1.java 1 11
Gpt3D_Clone755_1.java 12 30
----------------------------------------

public static void main (String [] args) {
    Integer n = Integer.parseInt (args [0]);
    Queue < Integer > q = new Queue < Integer > ();
    while (! StdIn.isEmpty ()) {
        q.enqueue (StdIn.readInt ());
    }
    while (q.size () > n) {
        q.dequeue ();
    }
    StdOut.println (q.peek ().toString ());
}
----------------------------------------

 public static void main (String [] args) {
    Integer n = Integer.parseInt (args [0]);
    List<Integer> intlist = new ArrayList<Integer>();
    while (System.in.available() > 0) 
    {
        intlist.add(System.in.read());
    }
    intlist.sort(null);
    while (intlist.size() > n) 
    {
        intlist.remove(0);
    }
    System.out.println(intlist.get(0).toString());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
755
2
Gpt3D_Clone755_2.java 1 11
Gpt3D_Clone755_2.java 12 24
----------------------------------------

public static void main (String [] args) {
    Integer n = Integer.parseInt (args [0]);
    Queue < Integer > q = new Queue < Integer > ();
    while (! StdIn.isEmpty ()) {
        q.enqueue (StdIn.readInt ());
    }
    while (q.size () > n) {
        q.dequeue ();
    }
    StdOut.println (q.peek ().toString ());
}
----------------------------------------

 public static void main (String [] args) {
    Integer n = Integer.parseInt (args [0]);
    LinkedList<Integer> list = new LinkedList<>();
    while (System.in.available () > 0) {
        list.add(System.in.readInt());
    }
    while (list.size() > n) {
        list.removeFirst();
    }
    System.out.println(list.getFirst().toString());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
755
4
Gpt3D_Clone755_4.java 1 11
Gpt3D_Clone755_4.java 12 26
----------------------------------------

public static void main (String [] args) {
    Integer n = Integer.parseInt (args [0]);
    Queue < Integer > q = new Queue < Integer > ();
    while (! StdIn.isEmpty ()) {
        q.enqueue (StdIn.readInt ());
    }
    while (q.size () > n) {
        q.dequeue ();
    }
    StdOut.println (q.peek ().toString ());
}
----------------------------------------

 public static void main (String [] args) {
    Integer n = Integer.parseInt (args [0]);
    Vector<Integer> vec = new Vector<>();
    while (System.in.available() > 0)
    {
        vec.add(System.in.readInt());
    }
    while (vec.size() > n) 
    {
        vec.remove(0);
    }
    System.out.println(vec.elementAt(0).toString());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
755
6
Gpt3D_Clone755_6.java 1 11
Gpt3D_Clone755_6.java 12 26
----------------------------------------

public static void main (String [] args) {
    Integer n = Integer.parseInt (args [0]);
    Queue < Integer > q = new Queue < Integer > ();
    while (! StdIn.isEmpty ()) {
        q.enqueue (StdIn.readInt ());
    }
    while (q.size () > n) {
        q.dequeue ();
    }
    StdOut.println (q.peek ().toString ());
}
----------------------------------------

 public static void main (String [] args) {
    Integer n = Integer.parseInt (args [0]);
    TreeSet<Integer> ts = new TreeSet<>();
    while (System.in.available() > 0)
    {
        ts.add(System.in.readInt());
    }
    while (ts.size() > n)
    {
        ts.pollFirst();
    }
    System.out.println(ts.first().toString());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
755
7
Gpt3D_Clone755_7.java 1 11
Gpt3D_Clone755_7.java 12 26
----------------------------------------

public static void main (String [] args) {
    Integer n = Integer.parseInt (args [0]);
    Queue < Integer > q = new Queue < Integer > ();
    while (! StdIn.isEmpty ()) {
        q.enqueue (StdIn.readInt ());
    }
    while (q.size () > n) {
        q.dequeue ();
    }
    StdOut.println (q.peek ().toString ());
}
----------------------------------------

 public static void main (String [] args) {
    Integer n = Integer.parseInt (args [0]);
    Stack<Integer> stack = new Stack<>();
    while (System.in.available() > 0)
    {
        stack.push(System.in.readInt());
    }
    while (stack.size() > n)
    {
        stack.pop();
    }
    System.out.println(stack.peek().toString());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
755
8
Gpt3D_Clone755_8.java 1 11
Gpt3D_Clone755_8.java 12 25
----------------------------------------

public static void main (String [] args) {
    Integer n = Integer.parseInt (args [0]);
    Queue < Integer > q = new Queue < Integer > ();
    while (! StdIn.isEmpty ()) {
        q.enqueue (StdIn.readInt ());
    }
    while (q.size () > n) {
        q.dequeue ();
    }
    StdOut.println (q.peek ().toString ());
}
----------------------------------------

  public static void main (String [] args) {
    Integer n = Integer.parseInt (args [0]);
    ArrayDeque<Integer> ad = new ArrayDeque<>();
    while(System.in.available() > 0) {
        ad.addFirst(System.in.readInt());
    }
    while(ad.size() > n) {
        ad.removeLast();
    }
    System.out.println(ad.peekFirst().toString());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
756
0
Gpt3D_Clone756_0.java 1 7
Gpt3D_Clone756_0.java 8 19
----------------------------------------

        public void changed (ObservableValue < ? extends Bounds > observable, Bounds oldValue, Bounds newValue) {
            if (oldHeight != newValue.getHeight ()) {
                System.out.println ("newValue = " + newValue.getHeight ());
                oldHeight = newValue.getHeight ();
                textArea.setPrefHeight (textHolder.getLayoutBounds ().getHeight () + 20);
            }
}
----------------------------------------

  public void changed (ObservableValue < ? extends Bounds > observable, Bounds oldValue, Bounds newValue) {if (oldHeight != newValue.getHeight()) {
      System.out.println("newValue = " + newValue.getHeight());
      oldHeight = newValue.getHeight();
      if (textArea.getPrefHeight() < textHolder.getLayoutBounds().getHeight()) {
          double difference = Math.abs(oldHeight - newValue.getHeight());
          double newHeight = textHolder.getLayoutBounds().getHeight() + 20 + difference;
          textArea.setPrefHeight(newHeight);
      }
   }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
762
0
Gpt3D_Clone762_0.java 1 11
Gpt3D_Clone762_0.java 12 33
----------------------------------------

public IntList get (int i) {
    if (i < 0) {
        throw new IndexOutOfBoundsException ("Index is negative!");
    }
    if (i == 0) {
        return this;
    } else if (next != null) {
        return next.get (i - 1);
    }
    throw new IndexOutOfBoundsException ("Index exceeds bounds");
}
----------------------------------------

 public IntList get (int i) {
    if (i < 0) 
        throw new IndexOutOfBoundsException ("Index is negative!");
    
    else if (i == 0) 
        return this;
    
    IntList previous = this;
    IntList current = next;
    for (int j = 1; j <= i; j++) {
        if (current == null) break;
        previous = current;
        current = current.next;
    }
    if (i != 0 && current == null)
        throw new IndexOutOfBoundsException("Index exceeds bounds");
    else 
        return previous;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
762
1
Gpt3D_Clone762_1.java 1 11
Gpt3D_Clone762_1.java 12 30
----------------------------------------

public IntList get (int i) {
    if (i < 0) {
        throw new IndexOutOfBoundsException ("Index is negative!");
    }
    if (i == 0) {
        return this;
    } else if (next != null) {
        return next.get (i - 1);
    }
    throw new IndexOutOfBoundsException ("Index exceeds bounds");
}
----------------------------------------

 public IntList get(int i) {
	if (i < 0)
	 throw new IndexOutOfBoundsException("Index is negative!");
	 
	IntList currentIndex = this;
	int count = 0;
	 while(true) {
	 if (count == i)
	  return currentIndex;
	 
	if (currentIndex.next == null)
	  throw new IndexOutOfBoundsException("Index exceeds bounds!");
	  
	 currentIndex = currentIndex.next;
	 count++;
	 }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
762
2
Gpt3D_Clone762_2.java 1 11
Gpt3D_Clone762_2.java 12 31
----------------------------------------

public IntList get (int i) {
    if (i < 0) {
        throw new IndexOutOfBoundsException ("Index is negative!");
    }
    if (i == 0) {
        return this;
    } else if (next != null) {
        return next.get (i - 1);
    }
    throw new IndexOutOfBoundsException ("Index exceeds bounds");
}
----------------------------------------

 public IntList get (int i) {
    if (i < 0) 
        throw new IndexOutOfBoundsException ("Index is negative!");
    
    else if (i == 0) 
        return this;
    
    IntList previous = this;
    for (int j = 1; j <= i; j++) {
        if (previous.next == null) break;
        previous = previous.next;
    }
    if (i != 0 && previous.next == null) 
        throw new IndexOutOfBoundsException("Index exceeds bounds");
    else 
        return previous;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
762
3
Gpt3D_Clone762_3.java 1 11
Gpt3D_Clone762_3.java 12 26
----------------------------------------

public IntList get (int i) {
    if (i < 0) {
        throw new IndexOutOfBoundsException ("Index is negative!");
    }
    if (i == 0) {
        return this;
    } else if (next != null) {
        return next.get (i - 1);
    }
    throw new IndexOutOfBoundsException ("Index exceeds bounds");
}
----------------------------------------

 public IntList get(int i) {
	if (i < 0)
	 throw new IndexOutOfBoundsException("Index can't be negative!");
	 
	IntList index = this;
	while(i > 0) {
	 if (index.next == null)
	  throw new IndexOutOfBoundsException("Index exceeds bounds!");
	 index = index.next;
	 i--;
	 }
	 return index;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
762
4
Gpt3D_Clone762_4.java 1 11
Gpt3D_Clone762_4.java 12 29
----------------------------------------

public IntList get (int i) {
    if (i < 0) {
        throw new IndexOutOfBoundsException ("Index is negative!");
    }
    if (i == 0) {
        return this;
    } else if (next != null) {
        return next.get (i - 1);
    }
    throw new IndexOutOfBoundsException ("Index exceeds bounds");
}
----------------------------------------

 public IntList get (int i) {
    if (i < 0) 
        throw new IndexOutOfBoundsException ("Index is negative!");
    
    if (i == 0) 
        return this;
    
    IntList current = this;
    for (int j = 1; j <= i; j++) {
        if (current.next == null) 
            throw new IndexOutOfBoundsException("Index exceeds bounds"); 
        current = current.next;
    }
    return current;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
762
5
Gpt3D_Clone762_5.java 1 11
Gpt3D_Clone762_5.java 12 29
----------------------------------------

public IntList get (int i) {
    if (i < 0) {
        throw new IndexOutOfBoundsException ("Index is negative!");
    }
    if (i == 0) {
        return this;
    } else if (next != null) {
        return next.get (i - 1);
    }
    throw new IndexOutOfBoundsException ("Index exceeds bounds");
}
----------------------------------------

 public IntList get (int i) {
    if (i < 0) 
        throw new IndexOutOfBoundsException ("Index is negative!");
    
    if (i == 0) 
        return this;
    
    IntList temp = this;
    for (int j = 0; j < i - 1; j++) {
        temp = temp.next;
        if (temp == null)
            throw new IndexOutOfBoundsException("Index exceeds bounds"); 
    }
    return temp.next;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
762
6
Gpt3D_Clone762_6.java 1 11
Gpt3D_Clone762_6.java 12 27
----------------------------------------

public IntList get (int i) {
    if (i < 0) {
        throw new IndexOutOfBoundsException ("Index is negative!");
    }
    if (i == 0) {
        return this;
    } else if (next != null) {
        return next.get (i - 1);
    }
    throw new IndexOutOfBoundsException ("Index exceeds bounds");
}
----------------------------------------

 public IntList get(int i) {
	if (i < 0)
	 throw new IndexOutOfBoundsException("Index is negative!");
	 
	IntList result = this;
	 
	for (int j=0; j<i; j++) {
	 if (result.next == null)
	  throw new IndexOutOfBoundsException("Index exceeds bounds!");
	 else
	  result = result.next;
	 }
	 return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
762
7
Gpt3D_Clone762_7.java 1 11
Gpt3D_Clone762_7.java 12 26
----------------------------------------

public IntList get (int i) {
    if (i < 0) {
        throw new IndexOutOfBoundsException ("Index is negative!");
    }
    if (i == 0) {
        return this;
    } else if (next != null) {
        return next.get (i - 1);
    }
    throw new IndexOutOfBoundsException ("Index exceeds bounds");
}
----------------------------------------

 public IntList get (int i) {
    if (i < 0) 
        throw new IndexOutOfBoundsException ("Index is negative!");
    
    IntList current = this;
    for (int j = 0; j < i; j++) {
        if (current.next == null)
            throw new IndexOutOfBoundsException("Index exceeds bounds"); 
        current = current.next;
    }
    return current;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
762
8
Gpt3D_Clone762_8.java 1 11
Gpt3D_Clone762_8.java 12 26
----------------------------------------

public IntList get (int i) {
    if (i < 0) {
        throw new IndexOutOfBoundsException ("Index is negative!");
    }
    if (i == 0) {
        return this;
    } else if (next != null) {
        return next.get (i - 1);
    }
    throw new IndexOutOfBoundsException ("Index exceeds bounds");
}
----------------------------------------

 public IntList get (int i) {
    if (i < 0 || i > this.length())
        throw new IndexOutOfBoundsException ("Index is either negative or exceeds bounds!");
    
    if (i == 0) 
        return this;
    
    IntList current = this;
    while (i-- > 0) 
        current = current.next;
    return current;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
762
9
Gpt3D_Clone762_9.java 1 11
Gpt3D_Clone762_9.java 12 27
----------------------------------------

public IntList get (int i) {
    if (i < 0) {
        throw new IndexOutOfBoundsException ("Index is negative!");
    }
    if (i == 0) {
        return this;
    } else if (next != null) {
        return next.get (i - 1);
    }
    throw new IndexOutOfBoundsException ("Index exceeds bounds");
}
----------------------------------------

 public IntList get (int i) {
    if (i < 0) 
        throw new IndexOutOfBoundsException ("Index is negative!");
    IntList current = this;
    while (i-- > 0 && current.next != null) 
        current = current.next;
    if (i == -1)
        return current;
    else 
        throw new IndexOutOfBoundsException ("Index exceeds bounds");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
766
0
Gpt3D_Clone766_0.java 1 9
Gpt3D_Clone766_0.java 10 33
----------------------------------------

public static String removeAdjacentDuplicates (String input) {
    if (input.length () <= 1) {
        return input;
    }
    StringBuilder sb = new StringBuilder ();
    sb.append (input.charAt (0));
    IntStream.range (1, input.length ()).mapToObj (i -> input.charAt (i) != input.charAt (i - 1) ? input.charAt (i) : "").forEach (sb :: append);
    return sb.toString ();
}
----------------------------------------

 public static String removeAdjacentDuplicates(String input) {
    if (input.length() <= 1)
        return input;
    StringBuilder output = new StringBuilder();
    int j = 0;
    while (input.length() - j > 0) {
        int i = j + 1;
        char current = input.charAt(j);
        while (i < input.length()) {
            if (input.charAt(i - 1) != input.charAt(i)) {
                current = input.charAt(i);
                break;
            }
            i++;
        }
        output.append(current);
        j = i;
    }
    return output.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
766
1
Gpt3D_Clone766_1.java 1 9
Gpt3D_Clone766_1.java 10 34
----------------------------------------

public static String removeAdjacentDuplicates (String input) {
    if (input.length () <= 1) {
        return input;
    }
    StringBuilder sb = new StringBuilder ();
    sb.append (input.charAt (0));
    IntStream.range (1, input.length ()).mapToObj (i -> input.charAt (i) != input.charAt (i - 1) ? input.charAt (i) : "").forEach (sb :: append);
    return sb.toString ();
}
----------------------------------------

 public static String removeAdjacentDuplicates(String input) {
	  if (input.length() <= 1) {
	    return input;
	  }
	 
	  int len = input.length();
	  StringBuilder sb = new StringBuilder();
	  char prev = input.charAt(0);
	  sb.append(prev);
	 
	  for (int i = 1; i < len; i++) {
	    char curr = input.charAt(i);
	    
	    if (curr != prev) {
	      sb.append(curr);
	      prev = curr;
	    }
	  }
	 
	  return sb.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
766
2
Gpt3D_Clone766_2.java 1 9
Gpt3D_Clone766_2.java 10 29
----------------------------------------

public static String removeAdjacentDuplicates (String input) {
    if (input.length () <= 1) {
        return input;
    }
    StringBuilder sb = new StringBuilder ();
    sb.append (input.charAt (0));
    IntStream.range (1, input.length ()).mapToObj (i -> input.charAt (i) != input.charAt (i - 1) ? input.charAt (i) : "").forEach (sb :: append);
    return sb.toString ();
}
----------------------------------------

 public static String removeAdjacentDuplicates(String input) {
    if (input == null || input.isEmpty()) {
        return input;
    }
    String result = "";
    for (int i = 0; i < input.length(); i++) {
        if (i == 0) {
            result = String.valueOf(input.charAt(0));
            continue;
        }
        char currentChar = input.charAt(i);
        char prevChar = input.charAt(i - 1);
        if (currentChar != prevChar) {
            result += currentChar;
        }
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
766
3
Gpt3D_Clone766_3.java 1 9
Gpt3D_Clone766_3.java 10 31
----------------------------------------

public static String removeAdjacentDuplicates (String input) {
    if (input.length () <= 1) {
        return input;
    }
    StringBuilder sb = new StringBuilder ();
    sb.append (input.charAt (0));
    IntStream.range (1, input.length ()).mapToObj (i -> input.charAt (i) != input.charAt (i - 1) ? input.charAt (i) : "").forEach (sb :: append);
    return sb.toString ();
}
----------------------------------------

 public static String removeAdjacentDuplicates(String input) {
	  if (input.length() <= 1) {
	    return input;
	  }
	 
	  int index = 0;
	  char[] inputAsCharArray = input.toCharArray();
	  int i = 0;
	 
	  while (i < inputAsCharArray.length) {
	 
	    if (index == 0 || (inputAsCharArray[index - 1] != inputAsCharArray[i])) {
	      inputAsCharArray[index] = inputAsCharArray[i];
	      index++;
	    }
	    i++;
	  }
	  return new String(inputAsCharArray, 0, index);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
766
4
Gpt3D_Clone766_4.java 1 9
Gpt3D_Clone766_4.java 10 29
----------------------------------------

public static String removeAdjacentDuplicates (String input) {
    if (input.length () <= 1) {
        return input;
    }
    StringBuilder sb = new StringBuilder ();
    sb.append (input.charAt (0));
    IntStream.range (1, input.length ()).mapToObj (i -> input.charAt (i) != input.charAt (i - 1) ? input.charAt (i) : "").forEach (sb :: append);
    return sb.toString ();
}
----------------------------------------

 public static String removeAdjacentDuplicates(String input){
	  if(input == null || input.length() <= 1){
	    return input;
	  } else {
	    int len = input.length();
	    char letter [] = input.toCharArray();
	    StringBuilder sb = new StringBuilder();
	    for(int i = 0; i < len-1; i++){
	      if(letter[i] != letter[i+1]){
		sb.append(letter[i]);
	      }
	    }
	    sb.append(letter[len-1]);
	    return sb.toString();
	  }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
766
5
Gpt3D_Clone766_5.java 1 9
Gpt3D_Clone766_5.java 10 29
----------------------------------------

public static String removeAdjacentDuplicates (String input) {
    if (input.length () <= 1) {
        return input;
    }
    StringBuilder sb = new StringBuilder ();
    sb.append (input.charAt (0));
    IntStream.range (1, input.length ()).mapToObj (i -> input.charAt (i) != input.charAt (i - 1) ? input.charAt (i) : "").forEach (sb :: append);
    return sb.toString ();
}
----------------------------------------

 public static String removeAdjacentDuplicates(String input) {
	  String res = "";
	  int i = 0;
	  
	  while (i < input.length()) {
	      if (i == 0) {
		  res = res + input.charAt(i);
		  i++;
	      } else {
		  if (input.charAt(i) != input.charAt(i-1)) {
		      res = res + input.charAt(i); 
		  }
		  i++;
	      }
	  }
	  return res;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
766
6
Gpt3D_Clone766_6.java 1 9
Gpt3D_Clone766_6.java 10 33
----------------------------------------

public static String removeAdjacentDuplicates (String input) {
    if (input.length () <= 1) {
        return input;
    }
    StringBuilder sb = new StringBuilder ();
    sb.append (input.charAt (0));
    IntStream.range (1, input.length ()).mapToObj (i -> input.charAt (i) != input.charAt (i - 1) ? input.charAt (i) : "").forEach (sb :: append);
    return sb.toString ();
}
----------------------------------------

 public static String removeAdjacentDuplicates(String input) {
	  String ans = "";
	  int n = input.length();
	  for (int i=0; i<n; i++)
	  {
	  // Picking a character from input String
	  char ch2 = input.charAt(i);
	  // Last character of string isn't compared with its previous
	    if (i == n-1) {
	      ans = ans + ch2;
	    }
	    else if (input.charAt(i+1) == ch2) { 
	      continue;
	    }
	    else {
	      ans = ans + ch2;
	    }
	  }
	  return ans;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
766
7
Gpt3D_Clone766_7.java 1 9
Gpt3D_Clone766_7.java 10 29
----------------------------------------

public static String removeAdjacentDuplicates (String input) {
    if (input.length () <= 1) {
        return input;
    }
    StringBuilder sb = new StringBuilder ();
    sb.append (input.charAt (0));
    IntStream.range (1, input.length ()).mapToObj (i -> input.charAt (i) != input.charAt (i - 1) ? input.charAt (i) : "").forEach (sb :: append);
    return sb.toString ();
}
----------------------------------------

 public static String removeAdjacentDuplicates(String input) {
	  if (input == null || input.isEmpty()) {
	    return input;
	  }
	  StringBuilder sb = new StringBuilder();
	  char previousChar = input.charAt(0);
	  sb.append(previousChar);
	  for (int i = 1; i < input.length(); i++) {
	    char currentChar = input.charAt(i);
	    if (currentChar != previousChar)
	      sb.append(currentChar);
	    previousChar = currentChar;
	  }
	  return sb.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
766
8
Gpt3D_Clone766_8.java 1 9
Gpt3D_Clone766_8.java 10 28
----------------------------------------

public static String removeAdjacentDuplicates (String input) {
    if (input.length () <= 1) {
        return input;
    }
    StringBuilder sb = new StringBuilder ();
    sb.append (input.charAt (0));
    IntStream.range (1, input.length ()).mapToObj (i -> input.charAt (i) != input.charAt (i - 1) ? input.charAt (i) : "").forEach (sb :: append);
    return sb.toString ();
}
----------------------------------------

 public static String removeAdjacentDuplicates(String input) {
	  if (input.length() == 0) return "";
	 
	  StringBuilder result = new StringBuilder();
	  char prev = input.charAt(0);
	  result.append(prev);
	 
	  for(int i = 1; i < input.length(); i++) {
	    char curr = input.charAt(i);
	    if (curr != prev) {
	      result.append(curr);
	      prev = curr;
	    }
	  }
	 
	  return result.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
766
9
Gpt3D_Clone766_9.java 1 9
Gpt3D_Clone766_9.java 10 27
----------------------------------------

public static String removeAdjacentDuplicates (String input) {
    if (input.length () <= 1) {
        return input;
    }
    StringBuilder sb = new StringBuilder ();
    sb.append (input.charAt (0));
    IntStream.range (1, input.length ()).mapToObj (i -> input.charAt (i) != input.charAt (i - 1) ? input.charAt (i) : "").forEach (sb :: append);
    return sb.toString ();
}
----------------------------------------

 public static String removeAdjacentDuplicates(String input) {
	  if (input.length() < 2) {
	    return input;
	  }
	  char[] chars = input.toCharArray();
	  int j = 0; // index of the next character to be put in the new string
	 
	  for (int i = 1; i < chars.length; i++) {
	    if (chars[i] != chars[j]) {
	      chars[++j] = chars[i];
	    }
	  }
	 
	  return new String(chars, 0, j + 1);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
768
0
Gpt3D_Clone768_0.java 1 10
Gpt3D_Clone768_0.java 11 24
----------------------------------------

boolean isPalindrome (String s) {
    int n = s.length ();
    for (int i = 0;
    i < (n / 2); ++ i) {
        if (s.charAt (i) != s.charAt (n - i - 1)) {
            return false;
        }
    }
    return true;
}
----------------------------------------

 boolean isPalindrome (String s) {
   String revString = "";
    for (int i=s.length()-1;i>=0;i--){
        revString = revString + s.charAt(i);
    }
    if(revString.equals(s)){
        return true;
    }
    else{
        return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
768
4
Gpt3D_Clone768_4.java 1 10
Gpt3D_Clone768_4.java 11 22
----------------------------------------

boolean isPalindrome (String s) {
    int n = s.length ();
    for (int i = 0;
    i < (n / 2); ++ i) {
        if (s.charAt (i) != s.charAt (n - i - 1)) {
            return false;
        }
    }
    return true;
}
----------------------------------------

 boolean isPalindrome (String s) {
    int j = s.length () - 1;
    for (int i = 0; i < s.length ()/2; i++) {
        if (s.charAt(i) != s.charAt(j)) {
            return false;
        }
        j--;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
768
7
Gpt3D_Clone768_7.java 1 10
Gpt3D_Clone768_7.java 11 20
----------------------------------------

boolean isPalindrome (String s) {
    int n = s.length ();
    for (int i = 0;
    i < (n / 2); ++ i) {
        if (s.charAt (i) != s.charAt (n - i - 1)) {
            return false;
        }
    }
    return true;
}
----------------------------------------

 boolean isPalindrome (String s) {
    for (int i = 0; i < s.length ()/2; i++) {
        if (s.charAt(i) != s.charAt(s.length () - i - 1)) {
            return false;
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
769
0
Gpt3D_Clone769_0.java 1 19
Gpt3D_Clone769_0.java 20 36
----------------------------------------

public static boolean isPalindrome (String str) {
    str = str.toUpperCase ();
    char [] strChars = str.toCharArray ();
    List < Character > word = new ArrayList < > ();
    for (char c : strChars) {
        word.add (c);
    }
    while (true) {
        if ((word.size () == 1) || (word.size () == 0)) {
            return true;
        }
        if (word.get (0) == word.get (word.size () - 1)) {
            word.remove (0);
            word.remove (word.size () - 1);
        } else {
            return false;
        }
    }
}
----------------------------------------

 public static boolean isPalindrome (String str) {
    str = str.toUpperCase ();
    int start = 0;
    int end = str.length()-1;
    while (start < end){
        char first = str.charAt(start);
        char last = str.charAt(end);
        if(first != last){
            return false;
        }
        start++;
        end--;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
769
1
Gpt3D_Clone769_1.java 1 19
Gpt3D_Clone769_1.java 20 35
----------------------------------------

public static boolean isPalindrome (String str) {
    str = str.toUpperCase ();
    char [] strChars = str.toCharArray ();
    List < Character > word = new ArrayList < > ();
    for (char c : strChars) {
        word.add (c);
    }
    while (true) {
        if ((word.size () == 1) || (word.size () == 0)) {
            return true;
        }
        if (word.get (0) == word.get (word.size () - 1)) {
            word.remove (0);
            word.remove (word.size () - 1);
        } else {
            return false;
        }
    }
}
----------------------------------------

 public static boolean isPalindrome (String str) {
    str = str.toUpperCase ();
    int right = str.length() - 1;
    int left = 0;
    while (left < right) {
        if(str.charAt(left) == str.charAt(right)) {
            left++;
            right--;
        }
        else 
            return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
769
2
Gpt3D_Clone769_2.java 1 19
Gpt3D_Clone769_2.java 20 34
----------------------------------------

public static boolean isPalindrome (String str) {
    str = str.toUpperCase ();
    char [] strChars = str.toCharArray ();
    List < Character > word = new ArrayList < > ();
    for (char c : strChars) {
        word.add (c);
    }
    while (true) {
        if ((word.size () == 1) || (word.size () == 0)) {
            return true;
        }
        if (word.get (0) == word.get (word.size () - 1)) {
            word.remove (0);
            word.remove (word.size () - 1);
        } else {
            return false;
        }
    }
}
----------------------------------------

 public static boolean isPalindrome (String str) {
    str = str.toUpperCase ();
    int i=0;
    int j=str.length()-1;
    while (i<=j){
        if (str.charAt(i)!=str.charAt(j)){
            return false;
        }
        i++;
        j--;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
769
3
Gpt3D_Clone769_3.java 1 19
Gpt3D_Clone769_3.java 20 34
----------------------------------------

public static boolean isPalindrome (String str) {
    str = str.toUpperCase ();
    char [] strChars = str.toCharArray ();
    List < Character > word = new ArrayList < > ();
    for (char c : strChars) {
        word.add (c);
    }
    while (true) {
        if ((word.size () == 1) || (word.size () == 0)) {
            return true;
        }
        if (word.get (0) == word.get (word.size () - 1)) {
            word.remove (0);
            word.remove (word.size () - 1);
        } else {
            return false;
        }
    }
}
----------------------------------------

 public static boolean isPalindrome (String str) {
    str = str.toUpperCase ();
    int start = 0;
    int end = str.length() - 1;
    while(start <= end){
        if(str.charAt(start) != str.charAt(end)){
            return false;
        }
        start++;
        end--;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
769
4
Gpt3D_Clone769_4.java 1 19
Gpt3D_Clone769_4.java 20 34
----------------------------------------

public static boolean isPalindrome (String str) {
    str = str.toUpperCase ();
    char [] strChars = str.toCharArray ();
    List < Character > word = new ArrayList < > ();
    for (char c : strChars) {
        word.add (c);
    }
    while (true) {
        if ((word.size () == 1) || (word.size () == 0)) {
            return true;
        }
        if (word.get (0) == word.get (word.size () - 1)) {
            word.remove (0);
            word.remove (word.size () - 1);
        } else {
            return false;
        }
    }
}
----------------------------------------

  public static boolean isPalindrome (String str) {
    str = str.toUpperCase();
	int n = str.length();
	boolean isPalindrome = true;
 
	for (int i = 0; i < n/2; ++i) { 
    	if (str.charAt(i) != str.charAt(n - i - 1)) { 
        	isPalindrome = false;
        	break;
        } 
    }
    return isPalindrome;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
769
5
Gpt3D_Clone769_5.java 1 19
Gpt3D_Clone769_5.java 20 35
----------------------------------------

public static boolean isPalindrome (String str) {
    str = str.toUpperCase ();
    char [] strChars = str.toCharArray ();
    List < Character > word = new ArrayList < > ();
    for (char c : strChars) {
        word.add (c);
    }
    while (true) {
        if ((word.size () == 1) || (word.size () == 0)) {
            return true;
        }
        if (word.get (0) == word.get (word.size () - 1)) {
            word.remove (0);
            word.remove (word.size () - 1);
        } else {
            return false;
        }
    }
}
----------------------------------------

 public static boolean isPalindrome (String str) {
    str = str.toUpperCase ();
    int begin = 0;
    int end = str.length()-1;
 
    while(begin < end){
        if(str.charAt(begin) != str.charAt(end))
        return false;
        
        begin++;
        end--;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
769
6
Gpt3D_Clone769_6.java 1 19
Gpt3D_Clone769_6.java 20 31
----------------------------------------

public static boolean isPalindrome (String str) {
    str = str.toUpperCase ();
    char [] strChars = str.toCharArray ();
    List < Character > word = new ArrayList < > ();
    for (char c : strChars) {
        word.add (c);
    }
    while (true) {
        if ((word.size () == 1) || (word.size () == 0)) {
            return true;
        }
        if (word.get (0) == word.get (word.size () - 1)) {
            word.remove (0);
            word.remove (word.size () - 1);
        } else {
            return false;
        }
    }
}
----------------------------------------

 public static boolean isPalindrome (String str) {
    str = str.toUpperCase ();
    StringBuilder string;
    string = new StringBuilder(str);
    string.reverse();
    if(str.equals(string.toString()))
        return true;
    else 
        return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
769
7
Gpt3D_Clone769_7.java 1 19
Gpt3D_Clone769_7.java 20 31
----------------------------------------

public static boolean isPalindrome (String str) {
    str = str.toUpperCase ();
    char [] strChars = str.toCharArray ();
    List < Character > word = new ArrayList < > ();
    for (char c : strChars) {
        word.add (c);
    }
    while (true) {
        if ((word.size () == 1) || (word.size () == 0)) {
            return true;
        }
        if (word.get (0) == word.get (word.size () - 1)) {
            word.remove (0);
            word.remove (word.size () - 1);
        } else {
            return false;
        }
    }
}
----------------------------------------

  public static boolean isPalindrome (String str) {
    str = str.toUpperCase ();
    int length = str.length();
	for(int i=0; i<length/2; ++i) {
        if(str.charAt(i) != str.charAt(length-i-1)) {
            return false;
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
769
8
Gpt3D_Clone769_8.java 1 19
Gpt3D_Clone769_8.java 20 31
----------------------------------------

public static boolean isPalindrome (String str) {
    str = str.toUpperCase ();
    char [] strChars = str.toCharArray ();
    List < Character > word = new ArrayList < > ();
    for (char c : strChars) {
        word.add (c);
    }
    while (true) {
        if ((word.size () == 1) || (word.size () == 0)) {
            return true;
        }
        if (word.get (0) == word.get (word.size () - 1)) {
            word.remove (0);
            word.remove (word.size () - 1);
        } else {
            return false;
        }
    }
}
----------------------------------------

 public static boolean isPalindrome (String str) {
    str = str.toUpperCase ();
    if (str.length() == 0 || str.length() == 1) {
        return true;
    }
    if (str.charAt(0) == str.charAt(str.length() - 1)) {
        return isPalindrome(str.substring(1, str.length() - 1));
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
769
9
Gpt3D_Clone769_9.java 1 19
Gpt3D_Clone769_9.java 20 31
----------------------------------------

public static boolean isPalindrome (String str) {
    str = str.toUpperCase ();
    char [] strChars = str.toCharArray ();
    List < Character > word = new ArrayList < > ();
    for (char c : strChars) {
        word.add (c);
    }
    while (true) {
        if ((word.size () == 1) || (word.size () == 0)) {
            return true;
        }
        if (word.get (0) == word.get (word.size () - 1)) {
            word.remove (0);
            word.remove (word.size () - 1);
        } else {
            return false;
        }
    }
}
----------------------------------------

 public static boolean isPalindrome (String str) {
    str = str.toUpperCase ();
    int n = str.length();
    if (n <= 1)
        return true;
    for (int i = 0; i <= n / 2; i++) 
        if (str.charAt(i) != str.charAt(n - i - 1)) 
            return false;
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
76
0
Gpt3D_Clone76_0.java 1 8
Gpt3D_Clone76_0.java 9 23
----------------------------------------

public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {
    String replacement = source.subSequence (start, end).toString ();
    String newVal = dest.subSequence (0, dstart).toString () + replacement + dest.subSequence (dend, dest.length ()).toString ();
    Matcher matcher = mPattern.matcher (newVal);
    if (matcher.matches ()) return null;
    if (TextUtils.isEmpty (source)) return dest.subSequence (dstart, dend);
    else return "";
}
----------------------------------------

  public CharSequence filter(CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {
        if (TextUtils.isEmpty(source)) {
            return dest.subSequence(dstart, dend); 
        } else {
            String replacement = source.subSequence(start, end).toString();
            String newVal = dest.subSequence(0, dstart).toString() + replacement + dest.subSequence(dend, dest.length()).toString();
            Matcher matcher = mPattern.matcher(newVal);
            if (matcher.matches())
                return "";
            else 
                return source.subSequence(start, end);
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
76
1
Gpt3D_Clone76_1.java 1 8
Gpt3D_Clone76_1.java 9 23
----------------------------------------

public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {
    String replacement = source.subSequence (start, end).toString ();
    String newVal = dest.subSequence (0, dstart).toString () + replacement + dest.subSequence (dend, dest.length ()).toString ();
    Matcher matcher = mPattern.matcher (newVal);
    if (matcher.matches ()) return null;
    if (TextUtils.isEmpty (source)) return dest.subSequence (dstart, dend);
    else return "";
}
----------------------------------------

 public CharSequence filter(CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {
        if (TextUtils.isEmpty(source))
            return dest.subSequence(dstart, dend);
        else {
            String replacement = source.subSequence(start, end).toString();
            String newVal = dest.subSequence(0, dstart).toString() + replacement + dest.subSequence(dend, dest.length()).toString();
            Matcher matcher = mPattern.matcher(newVal);
            if (matcher.matches())
                return "";
            else 
                return source.subSequence(start, end);
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
76
3
Gpt3D_Clone76_3.java 1 8
Gpt3D_Clone76_3.java 9 23
----------------------------------------

public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {
    String replacement = source.subSequence (start, end).toString ();
    String newVal = dest.subSequence (0, dstart).toString () + replacement + dest.subSequence (dend, dest.length ()).toString ();
    Matcher matcher = mPattern.matcher (newVal);
    if (matcher.matches ()) return null;
    if (TextUtils.isEmpty (source)) return dest.subSequence (dstart, dend);
    else return "";
}
----------------------------------------

  public CharSequence filter(CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {
        if (TextUtils.isEmpty(source))
            return dest.subSequence(dstart, dend);
        else { 
            String replacement = source.subSequence(start, end).toString();
            String newVal = dest.subSequence(0, dstart).toString() + replacement + dest.subSequence(dend, dest.length()).toString();
            Matcher matcher = mPattern.matcher(newVal);
            if (matcher.matches()) 
                return "";
            else 
                return source.subSequence(start, end);
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
76
5
Gpt3D_Clone76_5.java 1 8
Gpt3D_Clone76_5.java 9 23
----------------------------------------

public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {
    String replacement = source.subSequence (start, end).toString ();
    String newVal = dest.subSequence (0, dstart).toString () + replacement + dest.subSequence (dend, dest.length ()).toString ();
    Matcher matcher = mPattern.matcher (newVal);
    if (matcher.matches ()) return null;
    if (TextUtils.isEmpty (source)) return dest.subSequence (dstart, dend);
    else return "";
}
----------------------------------------

  public CharSequence filter(CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {
        if (TextUtils.isEmpty(source))
            return dest.subSequence(dstart, dend);
        else { 
            String replacement = source.subSequence(start, end).toString();
            String newVal = dest.subSequence(0, dstart).toString() + replacement + dest.subSequence(dend, dest.length()).toString();
            Matcher matcher = mPattern.matcher(newVal);
            if (matcher.matches())
                return "";
            else 
                return source.subSequence(start, end); 
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
76
6
Gpt3D_Clone76_6.java 1 8
Gpt3D_Clone76_6.java 9 23
----------------------------------------

public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {
    String replacement = source.subSequence (start, end).toString ();
    String newVal = dest.subSequence (0, dstart).toString () + replacement + dest.subSequence (dend, dest.length ()).toString ();
    Matcher matcher = mPattern.matcher (newVal);
    if (matcher.matches ()) return null;
    if (TextUtils.isEmpty (source)) return dest.subSequence (dstart, dend);
    else return "";
}
----------------------------------------

  public CharSequence filter(CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {
        if (TextUtils.isEmpty(source))
            return "";
        else {
            String replacement = source.subSequence(start, end).toString();
            String newVal = dest.subSequence(0, dstart).toString() + replacement + dest.subSequence(dend, dest.length()).toString();
            Matcher matcher = mPattern.matcher(newVal);
            if (matcher.matches())
                return dest.subSequence(dstart, dend);
            else 
                return source.subSequence(start, end);
        } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
770
0
Gpt3D_Clone770_0.java 1 19
Gpt3D_Clone770_0.java 20 35
----------------------------------------

public static boolean isPalindrome (String str) {
    str = str.toUpperCase ();
    char [] strChars = str.toCharArray ();
    List < Character > word = new ArrayList < > ();
    for (char c : strChars) {
        word.add (c);
    }
    while (true) {
        if ((word.size () == 1) || (word.size () == 0)) {
            return true;
        }
        if (word.get (0) == word.get (word.size () - 1)) {
            word.remove (0);
            word.remove (word.size () - 1);
        } else {
            return false;
        }
    }
}
----------------------------------------

 public static boolean isPalindrome (String str) {
    str = str.toUpperCase ();
    char [] strChars = str.toCharArray ();
    int i = 0;
    int j = str.length() - 1;
    while (j > i) {
        if (str.charAt(i) != str.charAt(j)) {
            return false;
        }
        i++;
        j--;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
770
1
Gpt3D_Clone770_1.java 1 19
Gpt3D_Clone770_1.java 20 36
----------------------------------------

public static boolean isPalindrome (String str) {
    str = str.toUpperCase ();
    char [] strChars = str.toCharArray ();
    List < Character > word = new ArrayList < > ();
    for (char c : strChars) {
        word.add (c);
    }
    while (true) {
        if ((word.size () == 1) || (word.size () == 0)) {
            return true;
        }
        if (word.get (0) == word.get (word.size () - 1)) {
            word.remove (0);
            word.remove (word.size () - 1);
        } else {
            return false;
        }
    }
}
----------------------------------------

 public static boolean isPalindrome (String str) {
    str = str.toUpperCase ();
    Stack<Character> s = new Stack<>();
    Queue<Character> q = new LinkedList<>();
    for (char c : str.toCharArray()) {
        s.push(c);
        q.add(c);
    }
    while (! s.isEmpty()) {
        if (s.pop() != q.remove()) {
            return false;
        }
    }
     return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
770
2
Gpt3D_Clone770_2.java 1 19
Gpt3D_Clone770_2.java 20 31
----------------------------------------

public static boolean isPalindrome (String str) {
    str = str.toUpperCase ();
    char [] strChars = str.toCharArray ();
    List < Character > word = new ArrayList < > ();
    for (char c : strChars) {
        word.add (c);
    }
    while (true) {
        if ((word.size () == 1) || (word.size () == 0)) {
            return true;
        }
        if (word.get (0) == word.get (word.size () - 1)) {
            word.remove (0);
            word.remove (word.size () - 1);
        } else {
            return false;
        }
    }
}
----------------------------------------

  public static boolean isPalindrome (String str) {
    str = str.toUpperCase ();
    char [] strChars = str.toCharArray ();
   char[] reversedStrChars = new char[strChars.length];
    int j= strChars.length - 1;
    for (int i = 0; i < strChars.length; i++) {
        reversedStrChars[i] = strChars[j--];
    }
    return Arrays.equals(strChars, reversedStrChars);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
770
3
Gpt3D_Clone770_3.java 1 19
Gpt3D_Clone770_3.java 20 33
----------------------------------------

public static boolean isPalindrome (String str) {
    str = str.toUpperCase ();
    char [] strChars = str.toCharArray ();
    List < Character > word = new ArrayList < > ();
    for (char c : strChars) {
        word.add (c);
    }
    while (true) {
        if ((word.size () == 1) || (word.size () == 0)) {
            return true;
        }
        if (word.get (0) == word.get (word.size () - 1)) {
            word.remove (0);
            word.remove (word.size () - 1);
        } else {
            return false;
        }
    }
}
----------------------------------------

 public static boolean isPalindrome (String str) {
    str = str.toUpperCase ();
    char [] strChars = str.toCharArray ();
    int j = strChars.length-1;
    for (int i = 0; i < strChars.length / 2;i ++) {
        if (strChars[i] != strChars[j--]) {
            return false;
        }
    }
    return true;       
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
770
4
Gpt3D_Clone770_4.java 1 19
Gpt3D_Clone770_4.java 20 31
----------------------------------------

public static boolean isPalindrome (String str) {
    str = str.toUpperCase ();
    char [] strChars = str.toCharArray ();
    List < Character > word = new ArrayList < > ();
    for (char c : strChars) {
        word.add (c);
    }
    while (true) {
        if ((word.size () == 1) || (word.size () == 0)) {
            return true;
        }
        if (word.get (0) == word.get (word.size () - 1)) {
            word.remove (0);
            word.remove (word.size () - 1);
        } else {
            return false;
        }
    }
}
----------------------------------------

 public static boolean isPalindrome (String str) {
    str = str.toUpperCase ();
    char [] strChars = str.toCharArray ();
    for (int i = 0; i < strChars.length / 2; i++) {
        if (strChars[i] != strChars[strChars.length - i - 1]) {
            return false;
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
770
5
Gpt3D_Clone770_5.java 1 19
Gpt3D_Clone770_5.java 20 31
----------------------------------------

public static boolean isPalindrome (String str) {
    str = str.toUpperCase ();
    char [] strChars = str.toCharArray ();
    List < Character > word = new ArrayList < > ();
    for (char c : strChars) {
        word.add (c);
    }
    while (true) {
        if ((word.size () == 1) || (word.size () == 0)) {
            return true;
        }
        if (word.get (0) == word.get (word.size () - 1)) {
            word.remove (0);
            word.remove (word.size () - 1);
        } else {
            return false;
        }
    }
}
----------------------------------------

 public static boolean isPalindrome(String str) {
    str = str.toUpperCase();
    int end = str.length()-1;
    for(int i=0; i<str.length() / 2; i++, end--) {
        if(str.charAt(i)!= str.charAt(end)) {
            return false;
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
770
6
Gpt3D_Clone770_6.java 1 19
Gpt3D_Clone770_6.java 20 31
----------------------------------------

public static boolean isPalindrome (String str) {
    str = str.toUpperCase ();
    char [] strChars = str.toCharArray ();
    List < Character > word = new ArrayList < > ();
    for (char c : strChars) {
        word.add (c);
    }
    while (true) {
        if ((word.size () == 1) || (word.size () == 0)) {
            return true;
        }
        if (word.get (0) == word.get (word.size () - 1)) {
            word.remove (0);
            word.remove (word.size () - 1);
        } else {
            return false;
        }
    }
}
----------------------------------------

 public static boolean isPalindrome (String str) {
    str = str.toUpperCase ();
    char[] letters = str.toCharArray();
    for (int i = 0; i < letters.length / 2; i++) {
        if (letters[i] != letters[letters.length - 1 - i]) {
            return false;
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
770
7
Gpt3D_Clone770_7.java 1 19
Gpt3D_Clone770_7.java 20 30
----------------------------------------

public static boolean isPalindrome (String str) {
    str = str.toUpperCase ();
    char [] strChars = str.toCharArray ();
    List < Character > word = new ArrayList < > ();
    for (char c : strChars) {
        word.add (c);
    }
    while (true) {
        if ((word.size () == 1) || (word.size () == 0)) {
            return true;
        }
        if (word.get (0) == word.get (word.size () - 1)) {
            word.remove (0);
            word.remove (word.size () - 1);
        } else {
            return false;
        }
    }
}
----------------------------------------

 public static boolean isPalindrome (String str) {
    str = str.toUpperCase ();
    int n = str.length()-1;
    int i = 0;
    while (n > i) {
        if (str.charAt(i++) != str.charAt(n--)) return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
770
8
Gpt3D_Clone770_8.java 1 19
Gpt3D_Clone770_8.java 20 30
----------------------------------------

public static boolean isPalindrome (String str) {
    str = str.toUpperCase ();
    char [] strChars = str.toCharArray ();
    List < Character > word = new ArrayList < > ();
    for (char c : strChars) {
        word.add (c);
    }
    while (true) {
        if ((word.size () == 1) || (word.size () == 0)) {
            return true;
        }
        if (word.get (0) == word.get (word.size () - 1)) {
            word.remove (0);
            word.remove (word.size () - 1);
        } else {
            return false;
        }
    }
}
----------------------------------------

 public static boolean isPalindrome (String str)  {
    str = str.toUpperCase();
    for (int i = 0; i < str.length() / 2; i++) {
        if (str.charAt(i)!= str.charAt(str.length() - i - 1)) {
            return false;
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
770
9
Gpt3D_Clone770_9.java 1 19
Gpt3D_Clone770_9.java 20 27
----------------------------------------

public static boolean isPalindrome (String str) {
    str = str.toUpperCase ();
    char [] strChars = str.toCharArray ();
    List < Character > word = new ArrayList < > ();
    for (char c : strChars) {
        word.add (c);
    }
    while (true) {
        if ((word.size () == 1) || (word.size () == 0)) {
            return true;
        }
        if (word.get (0) == word.get (word.size () - 1)) {
            word.remove (0);
            word.remove (word.size () - 1);
        } else {
            return false;
        }
    }
}
----------------------------------------

 public static boolean isPalindrome (String str) {
    str = str.toUpperCase ();
    StringBuilder sb = new StringBuilder(str);
    String reverse = sb.reverse().toString();
    return str.equals(reverse);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
774
0
Gpt3D_Clone774_0.java 1 10
Gpt3D_Clone774_0.java 11 35
----------------------------------------

public static void main (String arg []) {
    Integer [] v1 = {1, - 10, 3, 9, 7, 99, - 25};
    Integer [] v2 = {1, - 10, 3, 9, 7, 99, - 25};
    double p_int = ArrayMath.ScalarProduct (v1, v2);
    Double [] v1_d = {1.1, - 10.5, 3.7, 9.98, 7.4, 9.9, - 2.5};
    Double [] v2_d = {1.1, - 10.5, 3.7, 9.98, 7.4, 9.9, - 2.5};
    Double p_double = ArrayMath.ScalarProduct (v1_d, v2_d);
    System.out.println ("p_int:" + p_int);
    System.out.println ("p_double:" + p_double);
}
----------------------------------------

 
public static void main (String[] args) {
    Integer[] v1 = new Integer[7];
    v1[0] = 1; v1[1] = -10; v1[2] = 3;
    v1[3] = 9; v1[4] = 7; v1[5] = 99;
    v1[6] = -25;
    Integer[] v2 = new Integer[7];
    v2[0] = 1; v2[1] = -10; v2[2] = 3;
    v2[3] = 9; v2[4] = 7; v2[5] = 99;
    v2[6] = -25;
    int p_int = ArrayMath.scalarProduct(v1, v2);
    Double[] v1_d = new Double[7];
    v1_d[0] = 1.1; v1_d[1] = -10.5; v1_d[2] = 3.7;
    v1_d[3] = 9.98; v1_d[4] = 7.4; v1_d[5] = 9.9;
    v1_d[6] = -2.5;
    Double[] v2_d = new Double[7];
    v2_d[0] = 1.1; v2_d[1] = -10.5; v2_d[2] = 3.7;
    v2_d[3] = 9.98; v2_d[4] = 7.4; v2_d[5] = 9.9;
    v2_d[6] = -2.5;
    double p_double = ArrayMath.scalarProduct(v1_d, v2_d);
    System.out.println("p_int:" + p_int);
    System.out.println("p_double:" + p_double);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
774
1
Gpt3D_Clone774_1.java 1 10
Gpt3D_Clone774_1.java 11 35
----------------------------------------

public static void main (String arg []) {
    Integer [] v1 = {1, - 10, 3, 9, 7, 99, - 25};
    Integer [] v2 = {1, - 10, 3, 9, 7, 99, - 25};
    double p_int = ArrayMath.ScalarProduct (v1, v2);
    Double [] v1_d = {1.1, - 10.5, 3.7, 9.98, 7.4, 9.9, - 2.5};
    Double [] v2_d = {1.1, - 10.5, 3.7, 9.98, 7.4, 9.9, - 2.5};
    Double p_double = ArrayMath.ScalarProduct (v1_d, v2_d);
    System.out.println ("p_int:" + p_int);
    System.out.println ("p_double:" + p_double);
}
----------------------------------------

 
public static void main (String[] args) {
    int[] v1 = new int[7];
    v1[0] = 1; v1[1] = -10; v1[2] = 3;
    v1[3] = 9; v1[4] = 7; v1[5] = 99;
    v1[6] = -25;
    int[] v2 = new int[7];
    v2[0] = 1; v2[1] = -10; v2[2] = 3;
    v2[3] = 9; v2[4] = 7; v2[5] = 99;
    v2[6] = -25;
    int p_int = ArrayMath.scalarProduct(v1, v2); 
    double[] v1_d = new double[7];
    v1_d[0] = 1.1; v1_d[1] = -10.5; v1_d[2] = 3.7;
    v1_d[3] = 9.98; v1_d[4] = 7.4; v1_d[5] = 9.9;
    v1_d[6] = -2.5;
    double[] v2_d = new double[7];
    v2_d[0] = 1.1; v2_d[1] = -10.5; v2_d[2] = 3.7;
    v2_d[3] = 9.98; v2_d[4] = 7.4; v2_d[5] = 9.9;
    v2_d[6] = -2.5;
    double p_double = ArrayMath.ScalarProduct(v1_d, v2_d);
    System.out.println("p_int:" + p_int);
    System.out.println("p_double:" + p_double);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
774
4
Gpt3D_Clone774_4.java 1 10
Gpt3D_Clone774_4.java 11 23
----------------------------------------

public static void main (String arg []) {
    Integer [] v1 = {1, - 10, 3, 9, 7, 99, - 25};
    Integer [] v2 = {1, - 10, 3, 9, 7, 99, - 25};
    double p_int = ArrayMath.ScalarProduct (v1, v2);
    Double [] v1_d = {1.1, - 10.5, 3.7, 9.98, 7.4, 9.9, - 2.5};
    Double [] v2_d = {1.1, - 10.5, 3.7, 9.98, 7.4, 9.9, - 2.5};
    Double p_double = ArrayMath.ScalarProduct (v1_d, v2_d);
    System.out.println ("p_int:" + p_int);
    System.out.println ("p_double:" + p_double);
}
----------------------------------------

 
public static void main (String[] args) {
    Integer[] v1 = new Integer[]{1, - 10, 3, 9, 7, 99, - 25};
    Integer[] v2 = new Integer[] {1, - 10, 3, 9, 7, 99, - 25};
    int p_int = ArrayMath.scalarProduct(v1, v2);
    Double[] v1_d = new Double[]{1.1, - 10.5, 3.7, 9.98, 7.4, 9.9, - 2.5};
    Double[] v2_d = new Double[]{1.1, - 10.5, 3.7, 9.98, 7.4, 9.9, - 2.5};
    double p_double = ArrayMath.scalarProduct(v1_d, v2_d);
    System.out.println("p_int:" + p_int);
    System.out.println("p_double:" + p_double);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
774
6
Gpt3D_Clone774_6.java 1 10
Gpt3D_Clone774_6.java 11 23
----------------------------------------

public static void main (String arg []) {
    Integer [] v1 = {1, - 10, 3, 9, 7, 99, - 25};
    Integer [] v2 = {1, - 10, 3, 9, 7, 99, - 25};
    double p_int = ArrayMath.ScalarProduct (v1, v2);
    Double [] v1_d = {1.1, - 10.5, 3.7, 9.98, 7.4, 9.9, - 2.5};
    Double [] v2_d = {1.1, - 10.5, 3.7, 9.98, 7.4, 9.9, - 2.5};
    Double p_double = ArrayMath.ScalarProduct (v1_d, v2_d);
    System.out.println ("p_int:" + p_int);
    System.out.println ("p_double:" + p_double);
}
----------------------------------------

 
public static void main (String [] arg) {
      Integer[] v1 = new Integer[]{1, -10, 3, 9, 7, 99, -25};
      Integer[] v2 = new Integer[] {1, -10, 3, 9, 7, 99, -25};
      int p_int = ArrayMath.scalarProductValues(v1, v2);
      Double[] v1_d = new Double[]{1.1, -10.5, 3.7, 9.98, 7.4, 9.9, -2.5};
      Double[] v2_d = new Double[]{1.1, -10.5, 3.7, 9.98, 7.4, 9.9, -2.5};
      double p_double = ArrayMath.scalarProductValues(v1_d, v2_d);
      System.out.println("p_int:" + p_int);
      System.out.println("p_double:" + p_double);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
774
7
Gpt3D_Clone774_7.java 1 10
Gpt3D_Clone774_7.java 11 23
----------------------------------------

public static void main (String arg []) {
    Integer [] v1 = {1, - 10, 3, 9, 7, 99, - 25};
    Integer [] v2 = {1, - 10, 3, 9, 7, 99, - 25};
    double p_int = ArrayMath.ScalarProduct (v1, v2);
    Double [] v1_d = {1.1, - 10.5, 3.7, 9.98, 7.4, 9.9, - 2.5};
    Double [] v2_d = {1.1, - 10.5, 3.7, 9.98, 7.4, 9.9, - 2.5};
    Double p_double = ArrayMath.ScalarProduct (v1_d, v2_d);
    System.out.println ("p_int:" + p_int);
    System.out.println ("p_double:" + p_double);
}
----------------------------------------

 
public static void main (String[] args) {
    int[] v1 = {1, - 10, 3, 9, 7, 99, - 25};
    int[] v2 = {1, - 10, 3, 9, 7, 99, - 25};
    int p_int = ArrayMath.scalarProductInt(v1, v2);
    double[] v1_d = {1.1, - 10.5, 3.7, 9.98, 7.4, 9.9, - 2.5};
    double[] v2_d = {1.1, - 10.5, 3.7, 9.98, 7.4, 9.9, - 2.5};
    double p_double = ArrayMath.scalarProductDouble(v1_d, v2_d);
    System.out.println("p_int:" + p_int);
    System.out.println("p_double:" + p_double);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
774
8
Gpt3D_Clone774_8.java 1 10
Gpt3D_Clone774_8.java 11 23
----------------------------------------

public static void main (String arg []) {
    Integer [] v1 = {1, - 10, 3, 9, 7, 99, - 25};
    Integer [] v2 = {1, - 10, 3, 9, 7, 99, - 25};
    double p_int = ArrayMath.ScalarProduct (v1, v2);
    Double [] v1_d = {1.1, - 10.5, 3.7, 9.98, 7.4, 9.9, - 2.5};
    Double [] v2_d = {1.1, - 10.5, 3.7, 9.98, 7.4, 9.9, - 2.5};
    Double p_double = ArrayMath.ScalarProduct (v1_d, v2_d);
    System.out.println ("p_int:" + p_int);
    System.out.println ("p_double:" + p_double);
}
----------------------------------------

 
public static void main (String arg []) {
    int[] v1 = {1, - 10, 3, 9, 7, 99, - 25};
    int[] v2 = {1, - 10, 3, 9, 7, 99, - 25};
    int p_int = ArrayMath.scalarProduct(v1, v2);
    double[] v1_d = {1.1, - 10.5, 3.7, 9.98, 7.4, 9.9, - 2.5};
    double[] v2_d = {1.1, - 10.5, 3.7, 9.98, 7.4, 9.9, - 2.5};
    double p_double = ArrayMath.scalarProduct(v1_d, v2_d);
    System.out.println("p_int:" + p_int);
    System.out.println("p_double:" + p_double);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
775
0
Gpt3D_Clone775_0.java 1 10
Gpt3D_Clone775_0.java 11 26
----------------------------------------

public static boolean check (double x1, double y1, double x2, double y2, double x, double y) {
    if (x1 == x2) {
        return y1 < y2 ? (y1 <= y && y <= y2) : (y2 <= y && y <= y1);
    }
    double m = (y2 - y1) / (x2 - x1);
    double r1 = x1 + m * y1;
    double r2 = x2 + m * y2;
    double r = x + m * y;
    return r1 < r2 ? (r1 <= r && r <= r2) : (r2 <= r && r <= r1);
}
----------------------------------------

 public boolean check(double x1, double y1, double x2, double y2, double x, double y) {
    if(x1 == x2) {
		if(y2 > y1)
			return (y >= y1 && y <= y2);
		return (y >= y2 && y <= y1);
	}
	double m = (y2 - y1) / (x2 - x1);
	double r1 = x1 + m*y1;
	double r2 = x2 + m*y2;
	double r = x + m*y;
	if(r2 > r1) 
	    return (r >= r1 && r <= r2);
	return (r >= r2 && r <= r1);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
775
4
Gpt3D_Clone775_4.java 1 10
Gpt3D_Clone775_4.java 11 22
----------------------------------------

public static boolean check (double x1, double y1, double x2, double y2, double x, double y) {
    if (x1 == x2) {
        return y1 < y2 ? (y1 <= y && y <= y2) : (y2 <= y && y <= y1);
    }
    double m = (y2 - y1) / (x2 - x1);
    double r1 = x1 + m * y1;
    double r2 = x2 + m * y2;
    double r = x + m * y;
    return r1 < r2 ? (r1 <= r && r <= r2) : (r2 <= r && r <= r1);
}
----------------------------------------

 public boolean check(double x1, double y1, double x2, double y2, double x, double y) {
    if (x1 == x2) 
        return (y1 < y2 ? (y >= y1 && y <=y2) : (y >= y2 && y <=y1));
    double m = (y2 - y1)/(x2 - x1);
    double r1 = x1 + m * y1;
    double r2 = x2 + m * y2;
    double r = x + m * y;
    
    return (r1 < r2 ? (r >= r1 && r <= r2) : (r >= r2 && r <= r1));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
775
5
Gpt3D_Clone775_5.java 1 10
Gpt3D_Clone775_5.java 11 22
----------------------------------------

public static boolean check (double x1, double y1, double x2, double y2, double x, double y) {
    if (x1 == x2) {
        return y1 < y2 ? (y1 <= y && y <= y2) : (y2 <= y && y <= y1);
    }
    double m = (y2 - y1) / (x2 - x1);
    double r1 = x1 + m * y1;
    double r2 = x2 + m * y2;
    double r = x + m * y;
    return r1 < r2 ? (r1 <= r && r <= r2) : (r2 <= r && r <= r1);
}
----------------------------------------

 public boolean check(double x1, double y1, double x2, double y2, double x, double y) {
    if (x1 == x2) 
        return (y1 < y2 && y >= y1 && y <= y2 || y2 < y1 && y >= y2 && y <= y1);
    double m = (y2 - y1)/(x2 - x1);
    double r1 = m * y1 + x1;
    double r2 = m * y2 + x2;
    double r = m * y + x;
    
    return (r1 < r2 && r >= r1 && r <= r2 || r2 < r1 && r >= r2 && r <= r1);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
775
6
Gpt3D_Clone775_6.java 1 10
Gpt3D_Clone775_6.java 11 21
----------------------------------------

public static boolean check (double x1, double y1, double x2, double y2, double x, double y) {
    if (x1 == x2) {
        return y1 < y2 ? (y1 <= y && y <= y2) : (y2 <= y && y <= y1);
    }
    double m = (y2 - y1) / (x2 - x1);
    double r1 = x1 + m * y1;
    double r2 = x2 + m * y2;
    double r = x + m * y;
    return r1 < r2 ? (r1 <= r && r <= r2) : (r2 <= r && r <= r1);
}
----------------------------------------

 public boolean check(double x1, double y1, double x2, double y2, double x, double y) {
    if (x1 == x2) 
        return (y1 < y2) ? (y >= y1 && y <= y2) : (y2 <= y && y <= y1);
    double m = (y2 - y1)/(x2 - x1);
    double r1 = x1 + m * y1;
    double r2 = x2 + m * y2;
    double r = x + m * y;
    return (r1 < r2) ? (r >= r1 && r <= r2) : (r2 <= r && r <= r1);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
775
7
Gpt3D_Clone775_7.java 1 10
Gpt3D_Clone775_7.java 11 22
----------------------------------------

public static boolean check (double x1, double y1, double x2, double y2, double x, double y) {
    if (x1 == x2) {
        return y1 < y2 ? (y1 <= y && y <= y2) : (y2 <= y && y <= y1);
    }
    double m = (y2 - y1) / (x2 - x1);
    double r1 = x1 + m * y1;
    double r2 = x2 + m * y2;
    double r = x + m * y;
    return r1 < r2 ? (r1 <= r && r <= r2) : (r2 <= r && r <= r1);
}
----------------------------------------

 public boolean check(double x1, double y1, double x2, double y2, double x, double y) {
    if (x1 == x2) 
        return (y1 < y2 && y >= y1 && y <= y2 || y2 < y1 && y >= y2 && y <= y1);
    double m = (y2 - y1)/(x2 - x1);
    double r1 = x1 + m * y1;
    double r2 = x2 + m * y2;
    double r = x + m * y;
    
    return (r1 < r2 && r >= r1 && r <= r2 || r2 < r1 && r >= r2 && r <= r1);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
775
8
Gpt3D_Clone775_8.java 1 10
Gpt3D_Clone775_8.java 11 22
----------------------------------------

public static boolean check (double x1, double y1, double x2, double y2, double x, double y) {
    if (x1 == x2) {
        return y1 < y2 ? (y1 <= y && y <= y2) : (y2 <= y && y <= y1);
    }
    double m = (y2 - y1) / (x2 - x1);
    double r1 = x1 + m * y1;
    double r2 = x2 + m * y2;
    double r = x + m * y;
    return r1 < r2 ? (r1 <= r && r <= r2) : (r2 <= r && r <= r1);
}
----------------------------------------

 public boolean check(double x1, double y1, double x2, double y2, double x, double y) {
    if (x1 == x2) 
        return (y1 < y2) ? (y >= y1 && y <= y2) : (y >= y2 && y <= y1);
    double m = (y2 - y1)/(x2 - x1);
    double r1 = x1 + y1 * m;
    double r2 = x2 + y2 * m;
    double r = x + y * m;
    
    return (r1 < r2 && r >= r1 && r <= r2 || r2 < r1 && r >= r2 && r <= r1);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
775
9
Gpt3D_Clone775_9.java 1 10
Gpt3D_Clone775_9.java 11 21
----------------------------------------

public static boolean check (double x1, double y1, double x2, double y2, double x, double y) {
    if (x1 == x2) {
        return y1 < y2 ? (y1 <= y && y <= y2) : (y2 <= y && y <= y1);
    }
    double m = (y2 - y1) / (x2 - x1);
    double r1 = x1 + m * y1;
    double r2 = x2 + m * y2;
    double r = x + m * y;
    return r1 < r2 ? (r1 <= r && r <= r2) : (r2 <= r && r <= r1);
}
----------------------------------------

 public boolean check(double x1, double y1, double x2, double y2, double x, double y) {
    if (x1 == x2) 
        return (y1 < y2) ? (y >= y1 && y <= y2) : (y2 >= y && y >= y1);
    double m = (y2 - y1)/(x2 - x1);
    double r1 = x1 + m * y1;
    double r2 = x2 + m * y2;
    double r = x + m * y;
    return (r1 < r2) ? (r >= r1 && r <= r2) : (r2 >= r && r >= r1);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
778
0
Gpt3D_Clone778_0.java 1 14
Gpt3D_Clone778_0.java 15 35
----------------------------------------

public static boolean twoDuplicates (int [] values) {
    for (int i = 0;
    i < values.length; i ++) {
        int counter = 0;
        for (int z = i + 1;
        z <= values.length - 1; z ++) {
            if (values [i] == values [z]) {
                counter ++;
                if (counter == 2) return true;
            }
        }
    }
    return false;
}
----------------------------------------

 public static boolean twoDuplicates(int[] values) {
    for (int i = 0; i < values.length - 1; i++) {
        for (int j = i + 1; j < values.length; j++) {
            if (values[i] == values[j]) {
                int count = 0;
                for (int k = 0; k < values.length; k++) {
                    if (values[i] == values[k]) {
                        count++;
                        if (count == 2) {
                            return true;
                        }
                    }
                }
                break;
            }
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
778
1
Gpt3D_Clone778_1.java 1 14
Gpt3D_Clone778_1.java 15 31
----------------------------------------

public static boolean twoDuplicates (int [] values) {
    for (int i = 0;
    i < values.length; i ++) {
        int counter = 0;
        for (int z = i + 1;
        z <= values.length - 1; z ++) {
            if (values [i] == values [z]) {
                counter ++;
                if (counter == 2) return true;
            }
        }
    }
    return false;
}
----------------------------------------

 public static boolean twoDuplicates(int[] values) {
    for (int i = 0; i < values.length; i++) {
      int count = 0;
      int valueToCheck = values[i];
      for (int j = i + 1; j < values.length; j++ ) {
          if (valueToCheck == values[j]) {
              count++;
              if (count == 2) {
                  return true;
              }
          }
      }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
778
6
Gpt3D_Clone778_6.java 1 14
Gpt3D_Clone778_6.java 15 27
----------------------------------------

public static boolean twoDuplicates (int [] values) {
    for (int i = 0;
    i < values.length; i ++) {
        int counter = 0;
        for (int z = i + 1;
        z <= values.length - 1; z ++) {
            if (values [i] == values [z]) {
                counter ++;
                if (counter == 2) return true;
            }
        }
    }
    return false;
}
----------------------------------------

 public static boolean twoDuplicates(int[] values) {
    HashSet<Integer> set = new HashSet<>();
    for (int num : values) {
        if (set.contains(num)) {
            return true;
        } else {
            set.add(num);
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
778
7
Gpt3D_Clone778_7.java 1 14
Gpt3D_Clone778_7.java 15 27
----------------------------------------

public static boolean twoDuplicates (int [] values) {
    for (int i = 0;
    i < values.length; i ++) {
        int counter = 0;
        for (int z = i + 1;
        z <= values.length - 1; z ++) {
            if (values [i] == values [z]) {
                counter ++;
                if (counter == 2) return true;
            }
        }
    }
    return false;
}
----------------------------------------

 public static boolean twoDuplicates(int[] values) {
    HashSet<Integer> counts = new HashSet<>();
    for (int num : values) {
        if (counts.contains(num)) {
            return true;
        } else {
            counts.add(num);
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
778
8
Gpt3D_Clone778_8.java 1 14
Gpt3D_Clone778_8.java 15 28
----------------------------------------

public static boolean twoDuplicates (int [] values) {
    for (int i = 0;
    i < values.length; i ++) {
        int counter = 0;
        for (int z = i + 1;
        z <= values.length - 1; z ++) {
            if (values [i] == values [z]) {
                counter ++;
                if (counter == 2) return true;
            }
        }
    }
    return false;
}
----------------------------------------

 public static boolean twoDuplicates(int[] values) {
    HashMap<Integer, Integer> map = new HashMap<>();
    for (int num : values) {
        if (map.containsKey(num)) {
            return true;
        } else {
            map.put(num, 1);
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
778
9
Gpt3D_Clone778_9.java 1 14
Gpt3D_Clone778_9.java 15 27
----------------------------------------

public static boolean twoDuplicates (int [] values) {
    for (int i = 0;
    i < values.length; i ++) {
        int counter = 0;
        for (int z = i + 1;
        z <= values.length - 1; z ++) {
            if (values [i] == values [z]) {
                counter ++;
                if (counter == 2) return true;
            }
        }
    }
    return false;
}
----------------------------------------

 public static boolean twoDuplicates(int[] values) {
    HashMap<Integer, Integer> frq = new HashMap<>();
    for (int num : values) {
        if (frq.containsKey(num)) {
            return true;
        } else {
            frq.put(num, 1);
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
77
0
Gpt3D_Clone77_0.java 1 27
Gpt3D_Clone77_0.java 28 47
----------------------------------------

public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {
    String lsStart = "";
    String lsInsert = "";
    String lsEnd = "";
    String lsText = "";
    Log.d ("debug", moPattern.toString ());
    Log.d ("debug", "source: " + source + ", start: " + start + ", end:" + end + ", dest: " + dest + ", dstart: " + dstart + ", dend: " + dend);
    lsText = dest.toString ();
    if (lsText.length () > 0) {
        lsStart = lsText.substring (0, dstart);
        Log.d ("debug", "lsStart : " + lsStart);
        if (source != "") {
            lsInsert = source.toString ();
            Log.d ("debug", "lsInsert: " + lsInsert);
        }
        lsEnd = lsText.substring (dend);
        Log.d ("debug", "lsEnd   : " + lsEnd);
        lsText = lsStart + lsInsert + lsEnd;
        Log.d ("debug", "lsText  : " + lsText);
    }
    Matcher loMatcher = moPattern.matcher (lsText);
    Log.d ("debug", "loMatcher.matches(): " + loMatcher.matches () + ", lsText: " + lsText);
    if (! loMatcher.matches ()) {
        return "";
    }
    return null;
}
----------------------------------------

 public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {if(source.length() > 0){
        String sStart = dest.substring(0, dstart); 
        String sInsert = source.toString(); 
        String sEnd = dest.substring(dend); 
        String sText = sStart + sInsert + sEnd; 
        Matcher matcher = moPattern.matcher(sText); 
        if(!matcher.matches()) 
            return ""; 
        else 
            return null; 
    } else { 
        Matcher matcher = moPattern.matcher(dest); 
        if (!matcher.matches())
            return ""; 
        else 
            return null;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
77
1
Gpt3D_Clone77_1.java 1 27
Gpt3D_Clone77_1.java 28 45
----------------------------------------

public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {
    String lsStart = "";
    String lsInsert = "";
    String lsEnd = "";
    String lsText = "";
    Log.d ("debug", moPattern.toString ());
    Log.d ("debug", "source: " + source + ", start: " + start + ", end:" + end + ", dest: " + dest + ", dstart: " + dstart + ", dend: " + dend);
    lsText = dest.toString ();
    if (lsText.length () > 0) {
        lsStart = lsText.substring (0, dstart);
        Log.d ("debug", "lsStart : " + lsStart);
        if (source != "") {
            lsInsert = source.toString ();
            Log.d ("debug", "lsInsert: " + lsInsert);
        }
        lsEnd = lsText.substring (dend);
        Log.d ("debug", "lsEnd   : " + lsEnd);
        lsText = lsStart + lsInsert + lsEnd;
        Log.d ("debug", "lsText  : " + lsText);
    }
    Matcher loMatcher = moPattern.matcher (lsText);
    Log.d ("debug", "loMatcher.matches(): " + loMatcher.matches () + ", lsText: " + lsText);
    if (! loMatcher.matches ()) {
        return "";
    }
    return null;
}
----------------------------------------

 public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {int length = end - start; 
    if(length > 0){
        String sText = dest.substring(0, dstart) + source + dest.substring(dend); 
        Matcher matcher = moPattern.matcher(sText);
        if(!matcher.matches()) 
            return "";
        else 
            return null; 
    } else { 
        Matcher matcher = moPattern.matcher(dest);
        if(!matcher.matches()) 
            return "";
        else 
            return null;  
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
77
2
Gpt3D_Clone77_2.java 1 27
Gpt3D_Clone77_2.java 28 46
----------------------------------------

public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {
    String lsStart = "";
    String lsInsert = "";
    String lsEnd = "";
    String lsText = "";
    Log.d ("debug", moPattern.toString ());
    Log.d ("debug", "source: " + source + ", start: " + start + ", end:" + end + ", dest: " + dest + ", dstart: " + dstart + ", dend: " + dend);
    lsText = dest.toString ();
    if (lsText.length () > 0) {
        lsStart = lsText.substring (0, dstart);
        Log.d ("debug", "lsStart : " + lsStart);
        if (source != "") {
            lsInsert = source.toString ();
            Log.d ("debug", "lsInsert: " + lsInsert);
        }
        lsEnd = lsText.substring (dend);
        Log.d ("debug", "lsEnd   : " + lsEnd);
        lsText = lsStart + lsInsert + lsEnd;
        Log.d ("debug", "lsText  : " + lsText);
    }
    Matcher loMatcher = moPattern.matcher (lsText);
    Log.d ("debug", "loMatcher.matches(): " + loMatcher.matches () + ", lsText: " + lsText);
    if (! loMatcher.matches ()) {
        return "";
    }
    return null;
}
----------------------------------------

 public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {if(source != ""){
        String sText = dest.substring(0, dstart) + 
                        source + 
                        dest.substring(dend); 
        Matcher matcher = moPattern.matcher(sText);
        if(!matcher.matches()) 
            return "";
        else 
            return null; 
    } else { 
        Matcher matcher = moPattern.matcher(dest); 
        if(!matcher.matches()) 
            return "";
        else 
            return null; 
    }   
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
77
3
Gpt3D_Clone77_3.java 1 27
Gpt3D_Clone77_3.java 28 44
----------------------------------------

public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {
    String lsStart = "";
    String lsInsert = "";
    String lsEnd = "";
    String lsText = "";
    Log.d ("debug", moPattern.toString ());
    Log.d ("debug", "source: " + source + ", start: " + start + ", end:" + end + ", dest: " + dest + ", dstart: " + dstart + ", dend: " + dend);
    lsText = dest.toString ();
    if (lsText.length () > 0) {
        lsStart = lsText.substring (0, dstart);
        Log.d ("debug", "lsStart : " + lsStart);
        if (source != "") {
            lsInsert = source.toString ();
            Log.d ("debug", "lsInsert: " + lsInsert);
        }
        lsEnd = lsText.substring (dend);
        Log.d ("debug", "lsEnd   : " + lsEnd);
        lsText = lsStart + lsInsert + lsEnd;
        Log.d ("debug", "lsText  : " + lsText);
    }
    Matcher loMatcher = moPattern.matcher (lsText);
    Log.d ("debug", "loMatcher.matches(): " + loMatcher.matches () + ", lsText: " + lsText);
    if (! loMatcher.matches ()) {
        return "";
    }
    return null;
}
----------------------------------------

 public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {if(source != ""){ 
        String sText = dest.substring(0, dstart) + source + dest.substring(dend); 
        Matcher matcher = moPattern.matcher(sText); 
        if(!matcher.matches()) 
            return ""; 
        else 
            return null; 
    } else { 
        Matcher matcher = moPattern.matcher(dest); 
        if(!matcher.matches()) 
            return ""; 
        else 
            return null; 
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
77
4
Gpt3D_Clone77_4.java 1 27
Gpt3D_Clone77_4.java 28 46
----------------------------------------

public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {
    String lsStart = "";
    String lsInsert = "";
    String lsEnd = "";
    String lsText = "";
    Log.d ("debug", moPattern.toString ());
    Log.d ("debug", "source: " + source + ", start: " + start + ", end:" + end + ", dest: " + dest + ", dstart: " + dstart + ", dend: " + dend);
    lsText = dest.toString ();
    if (lsText.length () > 0) {
        lsStart = lsText.substring (0, dstart);
        Log.d ("debug", "lsStart : " + lsStart);
        if (source != "") {
            lsInsert = source.toString ();
            Log.d ("debug", "lsInsert: " + lsInsert);
        }
        lsEnd = lsText.substring (dend);
        Log.d ("debug", "lsEnd   : " + lsEnd);
        lsText = lsStart + lsInsert + lsEnd;
        Log.d ("debug", "lsText  : " + lsText);
    }
    Matcher loMatcher = moPattern.matcher (lsText);
    Log.d ("debug", "loMatcher.matches(): " + loMatcher.matches () + ", lsText: " + lsText);
    if (! loMatcher.matches ()) {
        return "";
    }
    return null;
}
----------------------------------------

 public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {if(source.length() > 0){
        String sText = dest.substring(0, dstart) +
                        source + 
                        dest.substring(dend); 
        Matcher matcher = moPattern.matcher(sText); 
        if (!matcher.matches()) 
            return "";
        else 
            return null; 
    } else { 
        Matcher matcher = moPattern.matcher(dest); 
        if (!matcher.matches()) 
            return "";
        else 
            return null; 
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
77
5
Gpt3D_Clone77_5.java 1 27
Gpt3D_Clone77_5.java 28 39
----------------------------------------

public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {
    String lsStart = "";
    String lsInsert = "";
    String lsEnd = "";
    String lsText = "";
    Log.d ("debug", moPattern.toString ());
    Log.d ("debug", "source: " + source + ", start: " + start + ", end:" + end + ", dest: " + dest + ", dstart: " + dstart + ", dend: " + dend);
    lsText = dest.toString ();
    if (lsText.length () > 0) {
        lsStart = lsText.substring (0, dstart);
        Log.d ("debug", "lsStart : " + lsStart);
        if (source != "") {
            lsInsert = source.toString ();
            Log.d ("debug", "lsInsert: " + lsInsert);
        }
        lsEnd = lsText.substring (dend);
        Log.d ("debug", "lsEnd   : " + lsEnd);
        lsText = lsStart + lsInsert + lsEnd;
        Log.d ("debug", "lsText  : " + lsText);
    }
    Matcher loMatcher = moPattern.matcher (lsText);
    Log.d ("debug", "loMatcher.matches(): " + loMatcher.matches () + ", lsText: " + lsText);
    if (! loMatcher.matches ()) {
        return "";
    }
    return null;
}
----------------------------------------

 public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {String sStart = dest.substring(0, dstart - start); 
   String sInsert = source.toString(); 
   String sEnd = dest.substring(dend - start); 
   String sText = sStart + sInsert + sEnd;
   Matcher matcher = moPattern.matcher(sText); 
   if (!matcher.matches()) 
      return "";
   else 
      return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
77
6
Gpt3D_Clone77_6.java 1 27
Gpt3D_Clone77_6.java 28 40
----------------------------------------

public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {
    String lsStart = "";
    String lsInsert = "";
    String lsEnd = "";
    String lsText = "";
    Log.d ("debug", moPattern.toString ());
    Log.d ("debug", "source: " + source + ", start: " + start + ", end:" + end + ", dest: " + dest + ", dstart: " + dstart + ", dend: " + dend);
    lsText = dest.toString ();
    if (lsText.length () > 0) {
        lsStart = lsText.substring (0, dstart);
        Log.d ("debug", "lsStart : " + lsStart);
        if (source != "") {
            lsInsert = source.toString ();
            Log.d ("debug", "lsInsert: " + lsInsert);
        }
        lsEnd = lsText.substring (dend);
        Log.d ("debug", "lsEnd   : " + lsEnd);
        lsText = lsStart + lsInsert + lsEnd;
        Log.d ("debug", "lsText  : " + lsText);
    }
    Matcher loMatcher = moPattern.matcher (lsText);
    Log.d ("debug", "loMatcher.matches(): " + loMatcher.matches () + ", lsText: " + lsText);
    if (! loMatcher.matches ()) {
        return "";
    }
    return null;
}
----------------------------------------

 public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {String sStart = dest.substring(0, dstart); 
   String sInsert = source.toString(); 
   String sEnd = dest.substring(dend); 
   String sText = sStart + sInsert + sEnd;
   Matcher matcher = moPattern.matcher(sText); 
   if (!matcher.matches()) 
      return "";
   else 
      return null; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
77
7
Gpt3D_Clone77_7.java 1 27
Gpt3D_Clone77_7.java 28 36
----------------------------------------

public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {
    String lsStart = "";
    String lsInsert = "";
    String lsEnd = "";
    String lsText = "";
    Log.d ("debug", moPattern.toString ());
    Log.d ("debug", "source: " + source + ", start: " + start + ", end:" + end + ", dest: " + dest + ", dstart: " + dstart + ", dend: " + dend);
    lsText = dest.toString ();
    if (lsText.length () > 0) {
        lsStart = lsText.substring (0, dstart);
        Log.d ("debug", "lsStart : " + lsStart);
        if (source != "") {
            lsInsert = source.toString ();
            Log.d ("debug", "lsInsert: " + lsInsert);
        }
        lsEnd = lsText.substring (dend);
        Log.d ("debug", "lsEnd   : " + lsEnd);
        lsText = lsStart + lsInsert + lsEnd;
        Log.d ("debug", "lsText  : " + lsText);
    }
    Matcher loMatcher = moPattern.matcher (lsText);
    Log.d ("debug", "loMatcher.matches(): " + loMatcher.matches () + ", lsText: " + lsText);
    if (! loMatcher.matches ()) {
        return "";
    }
    return null;
}
----------------------------------------

 public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {String sText = dest.substring(0, start) + source + dest.substring(end); 
   Matcher matcher = moPattern.matcher(sText); 
   if (!matcher.matches())
      return "";
   else 
      return null;  
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
77
8
Gpt3D_Clone77_8.java 1 27
Gpt3D_Clone77_8.java 28 36
----------------------------------------

public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {
    String lsStart = "";
    String lsInsert = "";
    String lsEnd = "";
    String lsText = "";
    Log.d ("debug", moPattern.toString ());
    Log.d ("debug", "source: " + source + ", start: " + start + ", end:" + end + ", dest: " + dest + ", dstart: " + dstart + ", dend: " + dend);
    lsText = dest.toString ();
    if (lsText.length () > 0) {
        lsStart = lsText.substring (0, dstart);
        Log.d ("debug", "lsStart : " + lsStart);
        if (source != "") {
            lsInsert = source.toString ();
            Log.d ("debug", "lsInsert: " + lsInsert);
        }
        lsEnd = lsText.substring (dend);
        Log.d ("debug", "lsEnd   : " + lsEnd);
        lsText = lsStart + lsInsert + lsEnd;
        Log.d ("debug", "lsText  : " + lsText);
    }
    Matcher loMatcher = moPattern.matcher (lsText);
    Log.d ("debug", "loMatcher.matches(): " + loMatcher.matches () + ", lsText: " + lsText);
    if (! loMatcher.matches ()) {
        return "";
    }
    return null;
}
----------------------------------------

 public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {String sText = source + dest.substring(start, dstart) + dest.substring(dend);
   Matcher matcher = moPattern.matcher(sText);
   if (!matcher.matches()) 
        return ""; 
   else
        return null; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
77
9
Gpt3D_Clone77_9.java 1 27
Gpt3D_Clone77_9.java 28 36
----------------------------------------

public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {
    String lsStart = "";
    String lsInsert = "";
    String lsEnd = "";
    String lsText = "";
    Log.d ("debug", moPattern.toString ());
    Log.d ("debug", "source: " + source + ", start: " + start + ", end:" + end + ", dest: " + dest + ", dstart: " + dstart + ", dend: " + dend);
    lsText = dest.toString ();
    if (lsText.length () > 0) {
        lsStart = lsText.substring (0, dstart);
        Log.d ("debug", "lsStart : " + lsStart);
        if (source != "") {
            lsInsert = source.toString ();
            Log.d ("debug", "lsInsert: " + lsInsert);
        }
        lsEnd = lsText.substring (dend);
        Log.d ("debug", "lsEnd   : " + lsEnd);
        lsText = lsStart + lsInsert + lsEnd;
        Log.d ("debug", "lsText  : " + lsText);
    }
    Matcher loMatcher = moPattern.matcher (lsText);
    Log.d ("debug", "loMatcher.matches(): " + loMatcher.matches () + ", lsText: " + lsText);
    if (! loMatcher.matches ()) {
        return "";
    }
    return null;
}
----------------------------------------

 public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {String sText = dest.substring(0, dstart) + source + dest.substring(dend); 
   Matcher match = moPattern.matcher(sText);
   if (!match.matches())   
      return "";
   else
      return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
780
1
Gpt3D_Clone780_1.java 1 16
Gpt3D_Clone780_1.java 17 31
----------------------------------------

public static int binarySearch (int anArray [], int first, int last, int value) {
    do {
        if (first > last) {
            return - 1;
        } else {
            int mid = (first + last) / 2;
            if (value == anArray [mid]) {
                return mid;
            } else if (value < anArray [mid]) {
                last = mid - 1;
            } else {
                first = mid + 1;
            }
        }
    } while (true);
}
----------------------------------------

 public static int binarySearch(int anArray[], int first, int last, int value) {
    int mid;
    while (first <= last) {
        mid = first + (last - first) >> 1;
        if (value == anArray[mid]) {
            return mid;
        } else if (value < anArray[mid])
            last = mid - 1;
        else
            first = mid + 1;
    }
    return -1;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
780
2
Gpt3D_Clone780_2.java 1 16
Gpt3D_Clone780_2.java 17 31
----------------------------------------

public static int binarySearch (int anArray [], int first, int last, int value) {
    do {
        if (first > last) {
            return - 1;
        } else {
            int mid = (first + last) / 2;
            if (value == anArray [mid]) {
                return mid;
            } else if (value < anArray [mid]) {
                last = mid - 1;
            } else {
                first = mid + 1;
            }
        }
    } while (true);
}
----------------------------------------

 public static int binarySearch(int anArray[], int first, int last, int value) {
    int mid;
    while (first <= last) {
        mid = first + (last - first) >> 1;
        if (value == anArray[mid]) {
            return mid;
        } else if (value < anArray[mid])
            last = mid - 1;
        else
            first = mid + 1;
    }
    return -1;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
780
3
Gpt3D_Clone780_3.java 1 16
Gpt3D_Clone780_3.java 17 31
----------------------------------------

public static int binarySearch (int anArray [], int first, int last, int value) {
    do {
        if (first > last) {
            return - 1;
        } else {
            int mid = (first + last) / 2;
            if (value == anArray [mid]) {
                return mid;
            } else if (value < anArray [mid]) {
                last = mid - 1;
            } else {
                first = mid + 1;
            }
        }
    } while (true);
}
----------------------------------------

	public static int binarySearch(int anArray[], int first, int last, int value) {
    int mid;
    while (first <= last) {
        mid = (first + last) >> 1;
        if (value == anArray[mid]) {
            return mid;
        } else if (value < anArray[mid])
            last = mid - 1;
        else
            first = mid + 1;
    }
    return -1;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
780
4
Gpt3D_Clone780_4.java 1 16
Gpt3D_Clone780_4.java 17 31
----------------------------------------

public static int binarySearch (int anArray [], int first, int last, int value) {
    do {
        if (first > last) {
            return - 1;
        } else {
            int mid = (first + last) / 2;
            if (value == anArray [mid]) {
                return mid;
            } else if (value < anArray [mid]) {
                last = mid - 1;
            } else {
                first = mid + 1;
            }
        }
    } while (true);
}
----------------------------------------

 public static int binarySearch(int anArray[], int first, int last, int value) {
    int mid;
    while (first <= last) {
        mid = (first + last) / 2;
        if (value == anArray[mid]) {
            return mid;
        } else if (value < anArray[mid])
            last = mid - 1;
        else
            first = mid + 1;
    }
    return -1;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
780
5
Gpt3D_Clone780_5.java 1 16
Gpt3D_Clone780_5.java 17 31
----------------------------------------

public static int binarySearch (int anArray [], int first, int last, int value) {
    do {
        if (first > last) {
            return - 1;
        } else {
            int mid = (first + last) / 2;
            if (value == anArray [mid]) {
                return mid;
            } else if (value < anArray [mid]) {
                last = mid - 1;
            } else {
                first = mid + 1;
            }
        }
    } while (true);
}
----------------------------------------

 public static int binarySearch(int anArray[], int first, int last, int value) {
    int mid = (first + last) / 2;
    while (first < last) {
        if (value == anArray[mid]) {
            return mid;
        } else if (value < anArray[mid])
            last = mid;
        else
            first = mid + 1;
        mid = (first + last) / 2;
    }
    return -1;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
780
6
Gpt3D_Clone780_6.java 1 16
Gpt3D_Clone780_6.java 17 31
----------------------------------------

public static int binarySearch (int anArray [], int first, int last, int value) {
    do {
        if (first > last) {
            return - 1;
        } else {
            int mid = (first + last) / 2;
            if (value == anArray [mid]) {
                return mid;
            } else if (value < anArray [mid]) {
                last = mid - 1;
            } else {
                first = mid + 1;
            }
        }
    } while (true);
}
----------------------------------------

 public static int binarySearch(int anArray[], int first, int last, int value) {
    int mid;
    while (first <= last) {
        mid = first + (last - first) / 2;
        if (value == anArray[mid]) {
            return mid;
        } else if (value < anArray[mid])
            last = mid - 1;
        else
            first = mid + 1;
    }
    return -1;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
780
7
Gpt3D_Clone780_7.java 1 16
Gpt3D_Clone780_7.java 17 31
----------------------------------------

public static int binarySearch (int anArray [], int first, int last, int value) {
    do {
        if (first > last) {
            return - 1;
        } else {
            int mid = (first + last) / 2;
            if (value == anArray [mid]) {
                return mid;
            } else if (value < anArray [mid]) {
                last = mid - 1;
            } else {
                first = mid + 1;
            }
        }
    } while (true);
}
----------------------------------------

 public static int binarySearch(int anArray[], int first, int last, int value) {
    int mid;
    while (first <= last) {
        mid = first + (last - first) / 2;
        if (value == anArray[mid]) {
            return mid;
        } else if (value < anArray[mid])
            last = mid - 1;
        else
            first = mid + 1;
    }
    return -1;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
780
8
Gpt3D_Clone780_8.java 1 16
Gpt3D_Clone780_8.java 17 31
----------------------------------------

public static int binarySearch (int anArray [], int first, int last, int value) {
    do {
        if (first > last) {
            return - 1;
        } else {
            int mid = (first + last) / 2;
            if (value == anArray [mid]) {
                return mid;
            } else if (value < anArray [mid]) {
                last = mid - 1;
            } else {
                first = mid + 1;
            }
        }
    } while (true);
}
----------------------------------------

	public static int binarySearch(int anArray[], int first, int last, int value) {
    int mid = (first + last) >> 1;
    while (first < last) {
        if (value == anArray[mid]) {
            return mid;
        } else if (value < anArray[mid])
            last = mid;
        else
            first = mid + 1;
        mid = (first + last) >> 1;
    }
    return -1;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
780
9
Gpt3D_Clone780_9.java 1 16
Gpt3D_Clone780_9.java 17 31
----------------------------------------

public static int binarySearch (int anArray [], int first, int last, int value) {
    do {
        if (first > last) {
            return - 1;
        } else {
            int mid = (first + last) / 2;
            if (value == anArray [mid]) {
                return mid;
            } else if (value < anArray [mid]) {
                last = mid - 1;
            } else {
                first = mid + 1;
            }
        }
    } while (true);
}
----------------------------------------

 public static int binarySearch(int anArray[], int first, int last, int value) {
    int mid = (first + last) >> 1;
    while (first <= last) {
        if (value == anArray[mid]) {
            return mid;
        } else if (value < anArray[mid])
            last = mid - 1;
        else
            first = mid + 1;
        mid = (first + last) >> 1;
    }
    return -1;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
785
0
Gpt3D_Clone785_0.java 1 9
Gpt3D_Clone785_0.java 10 23
----------------------------------------

public static void main (String [] args) {
    String x = "gdfg";
    System.out.println ("x length: " + x.length ());
    String [] lines = Split (x, 30, 210);
    for (int i = 0;
    i < lines.length; i ++) {
        System.out.println ("lines[" + i + "]: (len: " + lines [i].length () + ") : " + lines [i]);
    }
}
----------------------------------------

 public static void main(String [] args){
    String x = "gdfg";
    int xLength = x.length();
    System.out.println("x length: " + xLength);
    System.out.println();
    String[] xLines = Split(x, 30, 210);
    for(int i=0; i<xLines.length; i++){
        int lineLength = xLines[i].length();
        System.out.println("lines[" + i + "]: (len: " + lineLength + ") : " + xLines[i]);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
785
1
Gpt3D_Clone785_1.java 1 9
Gpt3D_Clone785_1.java 10 22
----------------------------------------

public static void main (String [] args) {
    String x = "gdfg";
    System.out.println ("x length: " + x.length ());
    String [] lines = Split (x, 30, 210);
    for (int i = 0;
    i < lines.length; i ++) {
        System.out.println ("lines[" + i + "]: (len: " + lines [i].length () + ") : " + lines [i]);
    }
}
----------------------------------------

 public static void main(String [] args){
    String x = "gdfg";
    int lenX = x.length();
    System.out.println("x length: " + lenX);
    System.out.println();
    String [] LinArr = Split(x, 30, 210);
    for(int i=0; i<LinArr.length; i++){
        int lenLin = LinArr[i].length();
        System.out.println("lines[" + i + "]: (len: " + lenLin + ") : " + LinArr[i]);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
785
2
Gpt3D_Clone785_2.java 1 9
Gpt3D_Clone785_2.java 10 22
----------------------------------------

public static void main (String [] args) {
    String x = "gdfg";
    System.out.println ("x length: " + x.length ());
    String [] lines = Split (x, 30, 210);
    for (int i = 0;
    i < lines.length; i ++) {
        System.out.println ("lines[" + i + "]: (len: " + lines [i].length () + ") : " + lines [i]);
    }
}
----------------------------------------

 public static void main (String [] args){ 
    String x = "gdfg"; 
    int xLength = x.length(); 
    System.out.println("x length: " + xLength);
    System.out.println(); 
    String [] lines = Split(x, 30, 210); 
    for (int i=0; i<lines.length; i++) {
        int lineLength = lines[i].length(); 
        System.out.println("lines[" + i +"]: (len: " + lineLength +") :" + lines[i]); 
    }
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
785
3
Gpt3D_Clone785_3.java 1 9
Gpt3D_Clone785_3.java 10 22
----------------------------------------

public static void main (String [] args) {
    String x = "gdfg";
    System.out.println ("x length: " + x.length ());
    String [] lines = Split (x, 30, 210);
    for (int i = 0;
    i < lines.length; i ++) {
        System.out.println ("lines[" + i + "]: (len: " + lines [i].length () + ") : " + lines [i]);
    }
}
----------------------------------------

 public static void main (String [] args){ 
    String x = "gdfg"; 
    int lengthX = x.length(); 
    System.out.println("x length: " +lengthX); 
    String [] output = Split(x, 30, 210); 
    System.out.println(); 
    for (int i = 0; i < output.length; i++) { 
        int lenX = output[i].length(); 
        System.out.println("lines[" + i +"]: (len: " + lenX +") :" + output[i]); 
    } 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
785
4
Gpt3D_Clone785_4.java 1 9
Gpt3D_Clone785_4.java 10 22
----------------------------------------

public static void main (String [] args) {
    String x = "gdfg";
    System.out.println ("x length: " + x.length ());
    String [] lines = Split (x, 30, 210);
    for (int i = 0;
    i < lines.length; i ++) {
        System.out.println ("lines[" + i + "]: (len: " + lines [i].length () + ") : " + lines [i]);
    }
}
----------------------------------------

 public static void main(String [] args){
    String x = "gdfg";
    int xLen = x.length();
    System.out.println("x length: " + xLen);
    System.out.println();
    String [] letters = Split(x, 30, 210);
    for(int i=0; i<letters.length; i++){
        int lineLen = letters[i].length();
        System.out.println("lines[" + i + "]: (len: " + lineLen + ") : " + letters[i]);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
785
5
Gpt3D_Clone785_5.java 1 9
Gpt3D_Clone785_5.java 10 22
----------------------------------------

public static void main (String [] args) {
    String x = "gdfg";
    System.out.println ("x length: " + x.length ());
    String [] lines = Split (x, 30, 210);
    for (int i = 0;
    i < lines.length; i ++) {
        System.out.println ("lines[" + i + "]: (len: " + lines [i].length () + ") : " + lines [i]);
    }
}
----------------------------------------

 public static void main(String [] args){
    String x = "gdfg";
    int xLeng = x.length();
    System.out.println("x length: " + xLeng);
    System.out.println();
    String[] LineArr = Split(x, 30, 210);
    for(int i=0; i<LineArr.length; i++){
        int lineLeng = LineArr[i].length();
        System.out.println("lines[" + i + "]: (len: " + lineLeng + ") : " + LineArr[i]);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
786
0
Gpt3D_Clone786_0.java 1 11
Gpt3D_Clone786_0.java 12 26
----------------------------------------

public void makeGrid (int size) {
    this.lines = size;
    grid = new Cell [size] [size];
    for (int i = 0;
    i < size; i ++) {
        for (int j = 0;
        j < size; j ++) {
            grid [i] [j] = new Cell ();
        }
    }
}
----------------------------------------

 public void makeGrid (int size) {
    this.lines = size;
    grid = new Cell [size] [size];
    int x = 0;
    while (x < size) { 
        int y = 0; 
        while (y < size) {
            grid [x] [y] = new Cell ();
            y++;
        }
        x++;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
786
1
Gpt3D_Clone786_1.java 1 11
Gpt3D_Clone786_1.java 12 26
----------------------------------------

public void makeGrid (int size) {
    this.lines = size;
    grid = new Cell [size] [size];
    for (int i = 0;
    i < size; i ++) {
        for (int j = 0;
        j < size; j ++) {
            grid [i] [j] = new Cell ();
        }
    }
}
----------------------------------------

 public void makeGrid (int size) {
    this.lines = size;
    grid = new Cell[size][size];
    int x = 0;
    while (x < size) {
        int y = 0;
        while (y < size) {
            grid[x][y] = new Cell ();
            y++;
        }
        x++;
     }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
786
2
Gpt3D_Clone786_2.java 1 11
Gpt3D_Clone786_2.java 12 22
----------------------------------------

public void makeGrid (int size) {
    this.lines = size;
    grid = new Cell [size] [size];
    for (int i = 0;
    i < size; i ++) {
        for (int j = 0;
        j < size; j ++) {
            grid [i] [j] = new Cell ();
        }
    }
}
----------------------------------------

 public void makeGrid (int size) {
    this.lines = size;
    grid = new Cell[size][size];
    int i = 0;
    while (i < size)
        for (int j = 0; j < size; j++) 
            grid[i][j] = new Cell();
        i++;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
786
3
Gpt3D_Clone786_3.java 1 11
Gpt3D_Clone786_3.java 12 22
----------------------------------------

public void makeGrid (int size) {
    this.lines = size;
    grid = new Cell [size] [size];
    for (int i = 0;
    i < size; i ++) {
        for (int j = 0;
        j < size; j ++) {
            grid [i] [j] = new Cell ();
        }
    }
}
----------------------------------------

public void makeGrid (int size) {
    this.lines = size;
    grid = new Cell[size][size];
    int i = 0;
    while (i < size)
        for (int j = 0; j < size; j++) 
            grid[i][j] = new Cell();
        i++;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
786
5
Gpt3D_Clone786_5.java 1 11
Gpt3D_Clone786_5.java 12 21
----------------------------------------

public void makeGrid (int size) {
    this.lines = size;
    grid = new Cell [size] [size];
    for (int i = 0;
    i < size; i ++) {
        for (int j = 0;
        j < size; j ++) {
            grid [i] [j] = new Cell ();
        }
    }
}
----------------------------------------

public void makeGrid (int size) {
    this.lines = size;
    grid = new Cell[size][size];
    for (int i = 0;
    i < size; i++) 
        for (int j = 0; j < size; j++)
            grid[i][j] = new Cell();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
786
6
Gpt3D_Clone786_6.java 1 11
Gpt3D_Clone786_6.java 12 20
----------------------------------------

public void makeGrid (int size) {
    this.lines = size;
    grid = new Cell [size] [size];
    for (int i = 0;
    i < size; i ++) {
        for (int j = 0;
        j < size; j ++) {
            grid [i] [j] = new Cell ();
        }
    }
}
----------------------------------------

 public void makeGrid (int size) {
    this.lines = size;
    grid = new Cell[size][size];
    for (int i = 0; i < size; i++) 
        for (int j = 0; j < size; j++) 
            grid[i][j] = new Cell();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
788
0
Gpt3D_Clone788_0.java 1 11
Gpt3D_Clone788_0.java 12 36
----------------------------------------

public void dispatchEvent (Event event) {
    checkNotNull (event);
    CancellableEvent cancellableEvent = null;
    boolean cancellable;
    if (cancellable = event instanceof CancellableEvent) {
        cancellableEvent = (CancellableEvent) event;
        checkArgument (cancellableEvent.isCancelled ());
    }
    fireEvents (false, event, cancellableEvent, cancellable);
    fireEvents (true, event, cancellableEvent, cancellable);
}
----------------------------------------

 public void dispatchEvent (Event event) {
    if (event == null) {
        throw new IllegalArgumentException ("event cannot be null");
    }
    boolean cancellable = false;
    CancellableEvent cancellableEvent  = null;
    if (event instanceof CancellableEvent) {
        cancellableEvent = (CancellableEvent) event;
        cancellable = true;
    }
    if (cancellable && !cancellableEvent.isCancelled ()) {
        throw new IllegalArgumentException ("cancellable event must be cancelled");
    }
    for (int i = 0; i < 2; i++) {
        if (i == 0) {
            fireEvents (false, event, cancellableEvent, cancellable);
        } else {
            fireEvents (true, event, cancellableEvent, cancellable);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
788
1
Gpt3D_Clone788_1.java 1 11
Gpt3D_Clone788_1.java 12 31
----------------------------------------

public void dispatchEvent (Event event) {
    checkNotNull (event);
    CancellableEvent cancellableEvent = null;
    boolean cancellable;
    if (cancellable = event instanceof CancellableEvent) {
        cancellableEvent = (CancellableEvent) event;
        checkArgument (cancellableEvent.isCancelled ());
    }
    fireEvents (false, event, cancellableEvent, cancellable);
    fireEvents (true, event, cancellableEvent, cancellable);
}
----------------------------------------

 public void dispatchEvent (Event event) {
    if (event != null) {
        CancellableEvent cancellableEvent = null;
        boolean cancellable = false;
        if (event instanceof CancellableEvent) {
            cancellableEvent = (CancellableEvent) event;
            if (cancellableEvent.isCancelled ()) {
                cancellable = true;
            } else {
                throw new IllegalArgumentException ("cancellable event must be cancelled");
            }
        }
        fireEventsThen (true, event, cancellableEvent, cancellable);
        fireEventsThen (false, event, cancellableEvent, cancellable);
    } else {
        throw new IllegalArgumentException ("event cannot be null");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
788
2
Gpt3D_Clone788_2.java 1 11
Gpt3D_Clone788_2.java 12 31
----------------------------------------

public void dispatchEvent (Event event) {
    checkNotNull (event);
    CancellableEvent cancellableEvent = null;
    boolean cancellable;
    if (cancellable = event instanceof CancellableEvent) {
        cancellableEvent = (CancellableEvent) event;
        checkArgument (cancellableEvent.isCancelled ());
    }
    fireEvents (false, event, cancellableEvent, cancellable);
    fireEvents (true, event, cancellableEvent, cancellable);
}
----------------------------------------

 public void dispatchEvent (Event event) {
    if (event != null) {
        boolean cancellable = false;
        CancellableEvent cancellableEvent = null;
        if (event instanceof CancellableEvent) {
            cancellableEvent = (CancellableEvent) event;
            if (cancellableEvent.isCancelled ()) {
                cancellable = true;
            } else {
                throw new IllegalArgumentException ("cancellable event must be cancelled");
            }
        }
        fireEvents (true, event, cancellableEvent, cancellable);
        fireEvents (false, event, cancellableEvent, cancellable);
    } else {
        throw new IllegalArgumentException ("event cannot be null");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
788
3
Gpt3D_Clone788_3.java 1 11
Gpt3D_Clone788_3.java 12 28
----------------------------------------

public void dispatchEvent (Event event) {
    checkNotNull (event);
    CancellableEvent cancellableEvent = null;
    boolean cancellable;
    if (cancellable = event instanceof CancellableEvent) {
        cancellableEvent = (CancellableEvent) event;
        checkArgument (cancellableEvent.isCancelled ());
    }
    fireEvents (false, event, cancellableEvent, cancellable);
    fireEvents (true, event, cancellableEvent, cancellable);
}
----------------------------------------

 public void dispatchEvent (Event event) {
    checkNotNull (event);
    boolean cancellable;
    CancellableEvent cancellableEvent = null;
    if (cancellable = (event instanceof CancellableEvent)) {
        if (((CancellableEvent) event).isCancelled ()) {
            cancellableEvent = (CancellableEvent) event;
        } else {
            checkArgument (false, "Cancellable event must be cancelled");
            return;
        }
    }
    fireEvents (true, event, cancellableEvent, cancellable);
    fireEvents (false, event, cancellableEvent, cancellable);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
788
4
Gpt3D_Clone788_4.java 1 11
Gpt3D_Clone788_4.java 12 29
----------------------------------------

public void dispatchEvent (Event event) {
    checkNotNull (event);
    CancellableEvent cancellableEvent = null;
    boolean cancellable;
    if (cancellable = event instanceof CancellableEvent) {
        cancellableEvent = (CancellableEvent) event;
        checkArgument (cancellableEvent.isCancelled ());
    }
    fireEvents (false, event, cancellableEvent, cancellable);
    fireEvents (true, event, cancellableEvent, cancellable);
}
----------------------------------------

 public void dispatchEvent (Event event) {
    Objects.requireNonNull (event, "event cannot be null");
    boolean cancellable = false;
    CancellableEvent cancellableEvent = null;
    if (event instanceof CancellableEvent) {
        cancellableEvent = (CancellableEvent) event;
        if (!cancellableEvent.isCancelled ()) {
            throw new IllegalArgumentException ("cancellable event must be cancelled");
        }
        cancellable = true;
    }
    fireEvents (true, event, cancellableEvent, cancellable);
    fireEvents (false, event, cancellableEvent, cancellable);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
788
5
Gpt3D_Clone788_5.java 1 11
Gpt3D_Clone788_5.java 12 28
----------------------------------------

public void dispatchEvent (Event event) {
    checkNotNull (event);
    CancellableEvent cancellableEvent = null;
    boolean cancellable;
    if (cancellable = event instanceof CancellableEvent) {
        cancellableEvent = (CancellableEvent) event;
        checkArgument (cancellableEvent.isCancelled ());
    }
    fireEvents (false, event, cancellableEvent, cancellable);
    fireEvents (true, event, cancellableEvent, cancellable);
}
----------------------------------------

 public void dispatchEvent (Event event) {
    checkNotNull (event);
    boolean cancellable;
    CancellableEvent cancellableEvent = null;
    if (cancellable = (event instanceof CancellableEvent)) {
        if (!((CancellableEvent) event).isCancelled ()) {
            checkArgument (false, "Cancellable event must be cancelled");
            return;
        }
        cancellableEvent = (CancellableEvent) event;
    }
    fireEvents (true, event, cancellableEvent, cancellable);
    fireEvents (false, event, cancellableEvent, cancellable);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
788
6
Gpt3D_Clone788_6.java 1 11
Gpt3D_Clone788_6.java 12 39
----------------------------------------

public void dispatchEvent (Event event) {
    checkNotNull (event);
    CancellableEvent cancellableEvent = null;
    boolean cancellable;
    if (cancellable = event instanceof CancellableEvent) {
        cancellableEvent = (CancellableEvent) event;
        checkArgument (cancellableEvent.isCancelled ());
    }
    fireEvents (false, event, cancellableEvent, cancellable);
    fireEvents (true, event, cancellableEvent, cancellable);
}
----------------------------------------

 public void dispatchEvent (Event event) {
        Preconditions.checkNotNull (event);
        boolean cancellable = false;
        CancellableEvent cancellableEvent = null;
        if (event instanceof CancellableEvent) {
            cancellableEvent = (CancellableEvent) event;
            Preconditions.checkArgument (cancellableEvent.isCancelled (),
                    "Cancellable event must be cancelled");
            cancellable = true;
        }
        fireEvents (true, event, cancellableEvent, cancellable);
        fireEvents (false, event, cancellableEvent, cancellable);
    }
 public void dispatchEvent (Event event) {
    requireNonNull (event);
    boolean cancellable = false;
    CancellableEvent cancellableEvent = null;
    if (event instanceof CancellableEvent) {
        cancellableEvent = (CancellableEvent) event;
        requireArgument (cancellableEvent.isCancelled ());
        cancellable = true;
    }
    fireEvents (true, event, cancellableEvent, cancellable);
    fireEvents (false, event, cancellableEvent, cancellable);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
788
8
Gpt3D_Clone788_8.java 1 11
Gpt3D_Clone788_8.java 12 27
----------------------------------------

public void dispatchEvent (Event event) {
    checkNotNull (event);
    CancellableEvent cancellableEvent = null;
    boolean cancellable;
    if (cancellable = event instanceof CancellableEvent) {
        cancellableEvent = (CancellableEvent) event;
        checkArgument (cancellableEvent.isCancelled ());
    }
    fireEvents (false, event, cancellableEvent, cancellable);
    fireEvents (true, event, cancellableEvent, cancellable);
}
----------------------------------------

 public void dispatchEvent (Event event) {
    if (event == null)
        throw new IllegalArgumentException ("event cannot be null");
    boolean cancellable = false;
    CancellableEvent cancellableEvent = null;
    if (event instanceof CancellableEvent) {
        cancellableEvent = (CancellableEvent) event;
        cancellable = true;
    }
    if (cancellableEvent != null && !cancellableEvent.isCancelled ())
        throw new IllegalArgumentException ("cancellable event must be cancelled");
    fireEvents (false, event, cancellableEvent, cancellable);
    fireEvents (true, event, cancellableEvent, cancellable);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
78
1
Gpt3D_Clone78_1.java 1 24
Gpt3D_Clone78_1.java 25 35
----------------------------------------

public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {
    int dotPos = - 1;
    int len = dest.length ();
    for (int i = 0;
    i < len; i ++) {
        char c = dest.charAt (i);
        if (c == '.' || c == ',') {
            dotPos = i;
            break;
        }
    }
    if (dotPos >= 0) {
        if (source.equals (".") || source.equals (",")) {
            return "";
        }
        if (dend <= dotPos) {
            return null;
        }
        if (len - dotPos > decimalDigits) {
            return "";
        }
    }
    return null;
}
----------------------------------------

 public CharSequence filter (CharSequence source, int start, int end, Spanned dest, int dstart, int dend) { if(source.equals(".") || source.equals(","))
        return "";
    int dotPos = -1;
    if(dotPos>= 0){
        if(len - dotPos > decimalDigits)
            return "";
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
790
1
Gpt3D_Clone790_1.java 1 9
Gpt3D_Clone790_1.java 10 22
----------------------------------------

int findCombinationsCount (int amount, int coins [], int checkFromIndex) {
    if (amount == 0) return 1;
    else if (amount < 0 || coins.length == checkFromIndex) return 0;
    else {
        int withFirstCoin = findCombinationsCount (amount - coins [checkFromIndex], coins, checkFromIndex);
        int withoutFirstCoin = findCombinationsCount (amount, coins, checkFromIndex + 1);
        return withFirstCoin + withoutFirstCoin;
    }
}
----------------------------------------

int findCombinationsCount (int amount, int coins [], int checkFromIndex) {
    if (checkFromIndex == coins.length && amount != 0) return 0;
    else if (amount == 0) return 1;
    else {
        int withFirstCoin = findCombinationsCount (amount - coins [checkFromIndex], coins, checkFromIndex + 1);
        int withoutFirstCoin = findCombinationsCount (amount, coins, checkFromIndex);
        return withFirstCoin + withoutFirstCoin;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
790
4
Gpt3D_Clone790_4.java 1 9
Gpt3D_Clone790_4.java 10 22
----------------------------------------

int findCombinationsCount (int amount, int coins [], int checkFromIndex) {
    if (amount == 0) return 1;
    else if (amount < 0 || coins.length == checkFromIndex) return 0;
    else {
        int withFirstCoin = findCombinationsCount (amount - coins [checkFromIndex], coins, checkFromIndex);
        int withoutFirstCoin = findCombinationsCount (amount, coins, checkFromIndex + 1);
        return withFirstCoin + withoutFirstCoin;
    }
}
----------------------------------------

int findCombinationsCount (int amount, int coins [], int checkFromIndex) {
    if (amount < 0 || checkFromIndex == coins.length) return 0;
    else if (amount == 0) return 1;
    else {
        int withFirstCoin = findCombinationsCount (amount - coins [checkFromIndex], coins, checkFromIndex + 1);
        int withoutFirstCoin = findCombinationsCount (amount, coins, checkFromIndex);
        return withFirstCoin + withoutFirstCoin;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
793
0
Gpt3D_Clone793_0.java 1 10
Gpt3D_Clone793_0.java 11 22
----------------------------------------

public static void main (String [] args) {
    LinkedHashMap < String, Vector < String > > data = new LinkedHashMap < String, Vector < String > > ();
    data.put ("foo", new Vector < String > (Arrays.asList ("1", "2", "3")));
    data.put ("bar", new Vector < String > (Arrays.asList ("3", "2")));
    data.put ("baz", new Vector < String > (Arrays.asList ("5", "6", "7")));
    Foo foo = new Foo (data);
    for (String [] combination : foo.allUniqueCombinations ()) {
        System.out.println (Arrays.toString (combination));
    }
}
----------------------------------------

public static void main (String [] args) {
    Map < String, List < String > > data = new HashMap <> ();
    data.put ("foo", Arrays.asList ("1", "2", "3"));
    data.put ("bar", Arrays.asList ("3", "2"));
    data.put ("baz", Arrays.asList ("5", "6", "7"));
    Foo foo = new Foo (data);
    for (String[] combination : foo.allUniqueCombinations ()) {
        System.out.println (Arrays.toString (combination));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
793
1
Gpt3D_Clone793_1.java 1 10
Gpt3D_Clone793_1.java 11 22
----------------------------------------

public static void main (String [] args) {
    LinkedHashMap < String, Vector < String > > data = new LinkedHashMap < String, Vector < String > > ();
    data.put ("foo", new Vector < String > (Arrays.asList ("1", "2", "3")));
    data.put ("bar", new Vector < String > (Arrays.asList ("3", "2")));
    data.put ("baz", new Vector < String > (Arrays.asList ("5", "6", "7")));
    Foo foo = new Foo (data);
    for (String [] combination : foo.allUniqueCombinations ()) {
        System.out.println (Arrays.toString (combination));
    }
}
----------------------------------------

public static void main (String [] args) {
    Map < String, Collection < String > > data = new LinkedHashMap <> ();
    data.put ("foo", Collections.unmodifiableList (Arrays.asList ("1", "2", "3")));
    data.put ("bar", Collections.unmodifiableList (Arrays.asList ("3", "2")));
    data.put ("baz", Collections.unmodifiableList (Arrays.asList ("5", "6", "7")));
    Foo foo = new Foo (data);
    for (String[] combination : foo.allUniqueCombinations ()) {
        System.out.println (Arrays.toString (combination));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
793
2
Gpt3D_Clone793_2.java 1 10
Gpt3D_Clone793_2.java 11 22
----------------------------------------

public static void main (String [] args) {
    LinkedHashMap < String, Vector < String > > data = new LinkedHashMap < String, Vector < String > > ();
    data.put ("foo", new Vector < String > (Arrays.asList ("1", "2", "3")));
    data.put ("bar", new Vector < String > (Arrays.asList ("3", "2")));
    data.put ("baz", new Vector < String > (Arrays.asList ("5", "6", "7")));
    Foo foo = new Foo (data);
    for (String [] combination : foo.allUniqueCombinations ()) {
        System.out.println (Arrays.toString (combination));
    }
}
----------------------------------------

public static void main (String [] args) {
    LinkedHashMap < String, ArrayList < String > > data = new LinkedHashMap <> ();
    data.put ("foo", new ArrayList <> (Arrays.asList ("1", "2", "3")));
    data.put ("bar", new ArrayList <> (Arrays.asList ("3", "2")));
    data.put ("baz", new ArrayList <> (Arrays.asList ("5", "6", "7")));
    Foo foo = new Foo (data);
    for (String[] combination : foo.allUniqueCombinations ()) {
        System.out.println (Arrays.toString (combination));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
793
3
Gpt3D_Clone793_3.java 1 10
Gpt3D_Clone793_3.java 11 22
----------------------------------------

public static void main (String [] args) {
    LinkedHashMap < String, Vector < String > > data = new LinkedHashMap < String, Vector < String > > ();
    data.put ("foo", new Vector < String > (Arrays.asList ("1", "2", "3")));
    data.put ("bar", new Vector < String > (Arrays.asList ("3", "2")));
    data.put ("baz", new Vector < String > (Arrays.asList ("5", "6", "7")));
    Foo foo = new Foo (data);
    for (String [] combination : foo.allUniqueCombinations ()) {
        System.out.println (Arrays.toString (combination));
    }
}
----------------------------------------

public static void main (String [] args) {
    Map < String, Set < String > > data = new LinkedHashMap <> ();
    data.put ("foo", new TreeSet <> (Arrays.asList ("1", "2", "3")));
    data.put ("bar", new TreeSet <> (Arrays.asList ("3", "2")));
    data.put ("baz", new TreeSet <> (Arrays.asList ("5", "6", "7")));
    Foo foo = new Foo (data);
    for (String[] combination : foo.allUniqueCombinations ()) {
        System.out.println (Arrays.toString (combination));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
793
4
Gpt3D_Clone793_4.java 1 10
Gpt3D_Clone793_4.java 11 22
----------------------------------------

public static void main (String [] args) {
    LinkedHashMap < String, Vector < String > > data = new LinkedHashMap < String, Vector < String > > ();
    data.put ("foo", new Vector < String > (Arrays.asList ("1", "2", "3")));
    data.put ("bar", new Vector < String > (Arrays.asList ("3", "2")));
    data.put ("baz", new Vector < String > (Arrays.asList ("5", "6", "7")));
    Foo foo = new Foo (data);
    for (String [] combination : foo.allUniqueCombinations ()) {
        System.out.println (Arrays.toString (combination));
    }
}
----------------------------------------

public static void main (String [] args) {
    Map < String, HashSet < String > > data = new LinkedHashMap <> ();
    data.put ("foo", new HashSet <> (Arrays.asList ("1", "2", "3")));
    data.put ("bar", new HashSet <> (Arrays.asList ("3", "2")));
    data.put ("baz", new HashSet <> (Arrays.asList ("5", "6", "7")));
    Foo foo = new Foo (data);
    for (String[] combination : foo.allUniqueCombinations ()) {
        System.out.println (Arrays.toString (combination));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
793
5
Gpt3D_Clone793_5.java 1 10
Gpt3D_Clone793_5.java 11 22
----------------------------------------

public static void main (String [] args) {
    LinkedHashMap < String, Vector < String > > data = new LinkedHashMap < String, Vector < String > > ();
    data.put ("foo", new Vector < String > (Arrays.asList ("1", "2", "3")));
    data.put ("bar", new Vector < String > (Arrays.asList ("3", "2")));
    data.put ("baz", new Vector < String > (Arrays.asList ("5", "6", "7")));
    Foo foo = new Foo (data);
    for (String [] combination : foo.allUniqueCombinations ()) {
        System.out.println (Arrays.toString (combination));
    }
}
----------------------------------------

public static void main (String [] args) {
    Map < String, TreeSet < String > > data = new LinkedHashMap <> ();
    data.put ("foo", new TreeSet <> (Arrays.asList ("1", "2", "3")));
    data.put ("bar", new TreeSet <> (Arrays.asList ("3", "2")));
    data.put ("baz", new TreeSet <> (Arrays.asList ("5", "6", "7")));
    Foo foo = new Foo (data);
    for (String[] combination : foo.allUniqueCombinations ()) {
        System.out.println (Arrays.toString (combination));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
793
6
Gpt3D_Clone793_6.java 1 10
Gpt3D_Clone793_6.java 11 22
----------------------------------------

public static void main (String [] args) {
    LinkedHashMap < String, Vector < String > > data = new LinkedHashMap < String, Vector < String > > ();
    data.put ("foo", new Vector < String > (Arrays.asList ("1", "2", "3")));
    data.put ("bar", new Vector < String > (Arrays.asList ("3", "2")));
    data.put ("baz", new Vector < String > (Arrays.asList ("5", "6", "7")));
    Foo foo = new Foo (data);
    for (String [] combination : foo.allUniqueCombinations ()) {
        System.out.println (Arrays.toString (combination));
    }
}
----------------------------------------

public static void main (String [] args) {
    Map < String, List < String > > data = new LinkedHashMap <> ();
    data.put ("foo", Collections.unmodifiableList (Arrays.asList ("1", "2", "3")));
    data.put ("bar", Collections.unmodifiableList (Arrays.asList ("3", "2")));
    data.put ("baz", Collections.unmodifiableList (Arrays.asList ("5", "6", "7")));
    Foo foo = new Foo (data);
    for (String[] combination : foo.allUniqueCombinations ()) {
        System.out.println (Arrays.toString (combination));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
793
7
Gpt3D_Clone793_7.java 1 10
Gpt3D_Clone793_7.java 11 22
----------------------------------------

public static void main (String [] args) {
    LinkedHashMap < String, Vector < String > > data = new LinkedHashMap < String, Vector < String > > ();
    data.put ("foo", new Vector < String > (Arrays.asList ("1", "2", "3")));
    data.put ("bar", new Vector < String > (Arrays.asList ("3", "2")));
    data.put ("baz", new Vector < String > (Arrays.asList ("5", "6", "7")));
    Foo foo = new Foo (data);
    for (String [] combination : foo.allUniqueCombinations ()) {
        System.out.println (Arrays.toString (combination));
    }
}
----------------------------------------

public static void main (String [] args) {
    ConcurrentHashMap < String, ArrayList < String > > data = new LinkedHashMap <> ();
    data.put ("foo", new ArrayList <> (Arrays.asList ("1", "2", "3")));
    data.put ("bar", new ArrayList <> (Arrays.asList ("3", "2")));
    data.put ("baz", new ArrayList <> (Arrays.asList ("5", "6", "7")));
    Foo foo = new Foo (data);
    for (String[] combination : foo.allUniqueCombinations ()) {
        System.out.println (Arrays.toString (combination));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
793
8
Gpt3D_Clone793_8.java 1 10
Gpt3D_Clone793_8.java 11 22
----------------------------------------

public static void main (String [] args) {
    LinkedHashMap < String, Vector < String > > data = new LinkedHashMap < String, Vector < String > > ();
    data.put ("foo", new Vector < String > (Arrays.asList ("1", "2", "3")));
    data.put ("bar", new Vector < String > (Arrays.asList ("3", "2")));
    data.put ("baz", new Vector < String > (Arrays.asList ("5", "6", "7")));
    Foo foo = new Foo (data);
    for (String [] combination : foo.allUniqueCombinations ()) {
        System.out.println (Arrays.toString (combination));
    }
}
----------------------------------------

public static void main (String [] args) {
    HashMap < String, ArrayList < String > > data = new LinkedHashMap <> ();
    data.put ("foo", new ArrayList <> (Arrays.asList ("1", "2", "3")));
    data.put ("bar", new ArrayList <> (Arrays.asList ("3", "2")));
    data.put ("baz", new ArrayList <> (Arrays.asList ("5", "6", "7")));
    Foo foo = new Foo (data);
    for (String[] combination : foo.allUniqueCombinations ()) {
        System.out.println (Arrays.toString (combination));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
793
9
Gpt3D_Clone793_9.java 1 10
Gpt3D_Clone793_9.java 11 22
----------------------------------------

public static void main (String [] args) {
    LinkedHashMap < String, Vector < String > > data = new LinkedHashMap < String, Vector < String > > ();
    data.put ("foo", new Vector < String > (Arrays.asList ("1", "2", "3")));
    data.put ("bar", new Vector < String > (Arrays.asList ("3", "2")));
    data.put ("baz", new Vector < String > (Arrays.asList ("5", "6", "7")));
    Foo foo = new Foo (data);
    for (String [] combination : foo.allUniqueCombinations ()) {
        System.out.println (Arrays.toString (combination));
    }
}
----------------------------------------

public static void main (String [] args) {
    HashMap < String, Vector < String > > data = new LinkedHashMap <> ();
    data.put ("foo", new Vector <> (Arrays.asList ("1", "2", "3")));
    data.put ("bar", new Vector <> (Arrays.asList ("3", "2")));
    data.put ("baz", new Vector <> (Arrays.asList ("5", "6", "7")));
    Foo foo = new Foo (data);
    for (String[] combination : foo.allUniqueCombinations ()) {
        System.out.println (Arrays.toString (combination));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
794
0
Gpt3D_Clone794_0.java 1 20
Gpt3D_Clone794_0.java 21 51
----------------------------------------

public String [] [] allUniqueCombinations () {
    int n = dataStructure.keySet ().size ();
    int solutions = 1;
    for (Vector < String > vector : dataStructure.values ()) {
        solutions *= vector.size ();
    }
    String [] [] allCombinations = new String [solutions + 1] [];
    allCombinations [0] = dataStructure.keySet ().toArray (new String [n]);
    for (int i = 0;
    i < solutions; i ++) {
        Vector < String > combination = new Vector < String > (n);
        int j = 1;
        for (Vector < String > vec : dataStructure.values ()) {
            combination.add (vec.get ((i / j) % vec.size ()));
            j *= vec.size ();
        }
        allCombinations [i + 1] = combination.toArray (new String [n]);
    }
    return allCombinations;
}
----------------------------------------

 public String[][] allUniqueCombinations() {
    int n = dataStructure.keySet().size();
    int solutions = 1;
    for (Vector<String> vector : dataStructure.values()) {
        solutions *= vector.size();
    }
    String[][] allCombinations = new String[solutions + 1][];
    allCombinations[0] = dataStructure.keySet().toArray(new String[n]);
    int[] product = new int[dataStructure.values().size()];
    int offset = 1;
    for (Vector<String> vec : dataStructure.values()) {
        product[offset - 1] = vec.size();
        int idx = 0;
        while (idx < product[offset - 1]) {
            String[] combination = new String[n];
            int i = 0;
            for (Vector<String> v : dataStructure.values()) {
                combination[i] = v.get(idx);
                i++;
            }
            for (int j = 0; j < offset; j++) {
                allCombinations[offset + j] = append(allCombinations[offset + j], combination);
            }
            offset += offset;
            idx++;
        }
    }
    return allCombinations;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
794
2
Gpt3D_Clone794_2.java 1 20
Gpt3D_Clone794_2.java 21 48
----------------------------------------

public String [] [] allUniqueCombinations () {
    int n = dataStructure.keySet ().size ();
    int solutions = 1;
    for (Vector < String > vector : dataStructure.values ()) {
        solutions *= vector.size ();
    }
    String [] [] allCombinations = new String [solutions + 1] [];
    allCombinations [0] = dataStructure.keySet ().toArray (new String [n]);
    for (int i = 0;
    i < solutions; i ++) {
        Vector < String > combination = new Vector < String > (n);
        int j = 1;
        for (Vector < String > vec : dataStructure.values ()) {
            combination.add (vec.get ((i / j) % vec.size ()));
            j *= vec.size ();
        }
        allCombinations [i + 1] = combination.toArray (new String [n]);
    }
    return allCombinations;
}
----------------------------------------

 public String[][] allUniqueCombinations() {
    int n = dataStructure.keySet().size();
    int solutions = (int) Math.pow(dataStructure.values().stream().mapToDouble(list -> list.size()).reduce(1, (x, y) -> x * y));
    String[][] allCombinations = new String[solutions + 1][];
    allCombinations[0] = dataStructure.keySet().toArray(new String[n]);
    String[] combination;
    int offset = 1;
    for (Vector<String> vec : dataStructure.values()) {
        int index = 0;
        combination = new String[vec.size()];
        while (index < combination.length) {
            combination[index] = vec.get(index);
            if (index != 0) {
                System.arraycopy(allCombinations, 0, allCombinations, offset * vec.size(), index * vec.size());
            }
            for (int i = 0; i < vec.size(); i++) {
                for (int j = 0; j < index; j++) {
                    allCombinations[offset + j] = append(allCombinations[offset + j], combination[i]);
                }
            }
            offset += index;
            index++;
        }
    }
    return allCombinations;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
794
3
Gpt3D_Clone794_3.java 1 20
Gpt3D_Clone794_3.java 21 50
----------------------------------------

public String [] [] allUniqueCombinations () {
    int n = dataStructure.keySet ().size ();
    int solutions = 1;
    for (Vector < String > vector : dataStructure.values ()) {
        solutions *= vector.size ();
    }
    String [] [] allCombinations = new String [solutions + 1] [];
    allCombinations [0] = dataStructure.keySet ().toArray (new String [n]);
    for (int i = 0;
    i < solutions; i ++) {
        Vector < String > combination = new Vector < String > (n);
        int j = 1;
        for (Vector < String > vec : dataStructure.values ()) {
            combination.add (vec.get ((i / j) % vec.size ()));
            j *= vec.size ();
        }
        allCombinations [i + 1] = combination.toArray (new String [n]);
    }
    return allCombinations;
}
----------------------------------------

 public String[][] allUniqueCombinations() {
    int n = dataStructure.keySet().size();
    int solutions = (int) dataStructure.values()
            .stream()
            .mapToInt(list -> list.size())
            .reduce(1, (x, y) -> x * y);
    String[][] allCombinations = new String[solutions + 1][];
    allCombinations[0] = dataStructure.keySet().toArray(new String[n]);
    List<Integer> indices = new ArrayList<>();
    for (Vector<String> vec : dataStructure.values()) {
        indices.add(0);
    }
    int index = 0;
    while (index != solutions) {
        Vector<String> combination = new Vector<String>(n);
        int j = 0;
        for (Vector<String> vec : dataStructure.values()) {
            combination.add(vec.get(indices.get(j)));
            if (++indices.get(j).intValue() == vec.size()) {
                indices.set(j, 0);
            }
            j++;
        }
        allCombinations[index + 1] = combination.stream().toArray(String[]::new);
        index++;
    }
    return allCombinations;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
794
4
Gpt3D_Clone794_4.java 1 20
Gpt3D_Clone794_4.java 21 47
----------------------------------------

public String [] [] allUniqueCombinations () {
    int n = dataStructure.keySet ().size ();
    int solutions = 1;
    for (Vector < String > vector : dataStructure.values ()) {
        solutions *= vector.size ();
    }
    String [] [] allCombinations = new String [solutions + 1] [];
    allCombinations [0] = dataStructure.keySet ().toArray (new String [n]);
    for (int i = 0;
    i < solutions; i ++) {
        Vector < String > combination = new Vector < String > (n);
        int j = 1;
        for (Vector < String > vec : dataStructure.values ()) {
            combination.add (vec.get ((i / j) % vec.size ()));
            j *= vec.size ();
        }
        allCombinations [i + 1] = combination.toArray (new String [n]);
    }
    return allCombinations;
}
----------------------------------------

 public String[][] allUniqueCombinations() {
    int n = dataStructure.keySet().size();
    int solutions = (int) dataStructure.values().stream()
            .mapToInt(list -> list.size())
            .reduce(1, (x, y) -> x * y);
    String[][] allCombinations = new String[solutions + 1][];
    allCombinations[0] = dataStructure.keySet().toArray(new String[n]);
    List<Integer> indices = new ArrayList<>();
    int offset = 0;
    for (Vector<String> vec : dataStructure.values()) {
        indices.add(0);
        while (indices.get(offset) < vec.size()) {
            String[] combination = new String[n];
            int i = 0;
            for (Vector<String> v : dataStructure.values()) {
                combination[i] = v.get(indices.get(i));
                i++;
            }
            allCombinations[offset + 1] = combination;
            offset++;
            indices.set(offset - 1, indices.get(offset - 1) + 1);
        }
    }
    return allCombinations;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
794
8
Gpt3D_Clone794_8.java 1 20
Gpt3D_Clone794_8.java 21 42
----------------------------------------

public String [] [] allUniqueCombinations () {
    int n = dataStructure.keySet ().size ();
    int solutions = 1;
    for (Vector < String > vector : dataStructure.values ()) {
        solutions *= vector.size ();
    }
    String [] [] allCombinations = new String [solutions + 1] [];
    allCombinations [0] = dataStructure.keySet ().toArray (new String [n]);
    for (int i = 0;
    i < solutions; i ++) {
        Vector < String > combination = new Vector < String > (n);
        int j = 1;
        for (Vector < String > vec : dataStructure.values ()) {
            combination.add (vec.get ((i / j) % vec.size ()));
            j *= vec.size ();
        }
        allCombinations [i + 1] = combination.toArray (new String [n]);
    }
    return allCombinations;
}
----------------------------------------

 public String[][] allUniqueCombinations() {
    int n = dataStructure.keySet().size();
    int solutions = (int) dataStructure.values().stream().mapToInt(list -> list.size()).reduce(1, (x, y) -> x * y);
    String[][] allCombinations = new String[solutions + 1][];
    allCombinations[0] = dataStructure.keySet().toArray(new String[n]);
    int[] indices = new int[dataStructure.values().size()];
    for (int i = 0; i < solutions; i++) {
        String[] combination = new String[n];
        int j = 0;
        for (Vector<String> vec : dataStructure.values()) {
            combination[j] = vec.get(indices[j]);
            if (++indices[j] == vec.size()) {
                indices[j] = 0;
            }
            j++;
        }
        allCombinations[i + 1] = combination;
    }
    return allCombinations;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
796
0
Gpt3D_Clone796_0.java 1 18
Gpt3D_Clone796_0.java 19 36
----------------------------------------

private static String merge (String...strings) {
    StringBuilder sb = new StringBuilder ();
    int adv;
    boolean edited;
    adv = 0;
    edited = true;
    while (edited) {
        edited = false;
        for (String s : strings) {
            if (adv < s.length ()) {
                sb.append (s.charAt (adv));
                edited = true;
            }
        }
        adv ++;
    }
    return sb.toString ();
}
----------------------------------------

 private static String merge (String...strings) {
    StringBuilder sb = new StringBuilder();
    boolean finished = false;
    int counter = 0;
    while (!finished) {
        finished = true;
        for (int i = 0; i < strings.length; i++) {
            if (counter < strings[i].length()) {
                sb.append(strings[i].charAt(counter));
                finished = false;
            }
        }
            counter++;
    }
    return sb.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
796
1
Gpt3D_Clone796_1.java 1 18
Gpt3D_Clone796_1.java 19 34
----------------------------------------

private static String merge (String...strings) {
    StringBuilder sb = new StringBuilder ();
    int adv;
    boolean edited;
    adv = 0;
    edited = true;
    while (edited) {
        edited = false;
        for (String s : strings) {
            if (adv < s.length ()) {
                sb.append (s.charAt (adv));
                edited = true;
            }
        }
        adv ++;
    }
    return sb.toString ();
}
----------------------------------------

 private static String merge (String...strings) {
    StringBuilder sb = new StringBuilder();
    int i, j;
    i = 0;
    j = 0;
    while (i < strings.length) {
        while (j < strings[i].length()) {
            sb.append(strings[i].charAt(j));
            ++j;
        }
        ++i;
    } 
    return sb.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
796
2
Gpt3D_Clone796_2.java 1 18
Gpt3D_Clone796_2.java 19 33
----------------------------------------

private static String merge (String...strings) {
    StringBuilder sb = new StringBuilder ();
    int adv;
    boolean edited;
    adv = 0;
    edited = true;
    while (edited) {
        edited = false;
        for (String s : strings) {
            if (adv < s.length ()) {
                sb.append (s.charAt (adv));
                edited = true;
            }
        }
        adv ++;
    }
    return sb.toString ();
}
----------------------------------------

  private static String merge (String...strings) {
    char[] out = new char[128];
    int i = 0, j = 0;
    while (i < strings.length) {
        int idx = 0; 
        while (idx < strings[i].length()) {
            out[j++] = strings[i].charAt(idx);
            ++idx;
        }
        ++i;
    } 
    return new String(out).trim();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
796
3
Gpt3D_Clone796_3.java 1 18
Gpt3D_Clone796_3.java 19 35
----------------------------------------

private static String merge (String...strings) {
    StringBuilder sb = new StringBuilder ();
    int adv;
    boolean edited;
    adv = 0;
    edited = true;
    while (edited) {
        edited = false;
        for (String s : strings) {
            if (adv < s.length ()) {
                sb.append (s.charAt (adv));
                edited = true;
            }
        }
        adv ++;
    }
    return sb.toString ();
}
----------------------------------------

 private static String merge (String...strings) {
    final StringBuilder sb = new StringBuilder();
    int maxLen = 0;
    for (String s : strings) {
        maxLen = Math.max(maxLen, s.length());
    }
    for (int i = 0; i < maxLen; i++) {
        for (String s : strings) {
            if (i < s.length()) {
                sb.append(s.charAt(i));
            }
        }
    }
    return sb.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
796
4
Gpt3D_Clone796_4.java 1 18
Gpt3D_Clone796_4.java 19 33
----------------------------------------

private static String merge (String...strings) {
    StringBuilder sb = new StringBuilder ();
    int adv;
    boolean edited;
    adv = 0;
    edited = true;
    while (edited) {
        edited = false;
        for (String s : strings) {
            if (adv < s.length ()) {
                sb.append (s.charAt (adv));
                edited = true;
            }
        }
        adv ++;
    }
    return sb.toString ();
}
----------------------------------------

 private static String merge (String...strings) {
    String output = "";
    int arrSize; 
    arrSize = strings.length;
    for (int i = 0; i < strings[0].length(); i++){
        for (int j = 0; j < arrSize ; j++){ 
            if (i < strings[j].length()){
                output += strings[j].charAt(i);
            }
        }
    } 
    return output;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
796
5
Gpt3D_Clone796_5.java 1 18
Gpt3D_Clone796_5.java 19 33
----------------------------------------

private static String merge (String...strings) {
    StringBuilder sb = new StringBuilder ();
    int adv;
    boolean edited;
    adv = 0;
    edited = true;
    while (edited) {
        edited = false;
        for (String s : strings) {
            if (adv < s.length ()) {
                sb.append (s.charAt (adv));
                edited = true;
            }
        }
        adv ++;
    }
    return sb.toString ();
}
----------------------------------------

 private static String merge (String...strings) {
    String output = "";
    int minLen = strings[0].length(); 
    for (int i = 0; i < strings.length - 1; i++){
        minLen = Math.min(minLen, strings[i+1].length());
    }
    for (int i = 0; i < minLen; i++){
        for (int j = 0; j < strings.length ; j++){ 
            output += strings[j].charAt(i);
        }
    }
    return output;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
796
6
Gpt3D_Clone796_6.java 1 18
Gpt3D_Clone796_6.java 19 33
----------------------------------------

private static String merge (String...strings) {
    StringBuilder sb = new StringBuilder ();
    int adv;
    boolean edited;
    adv = 0;
    edited = true;
    while (edited) {
        edited = false;
        for (String s : strings) {
            if (adv < s.length ()) {
                sb.append (s.charAt (adv));
                edited = true;
            }
        }
        adv ++;
    }
    return sb.toString ();
}
----------------------------------------

 private static String merge (String...strings) {
    String output = "";
    int minLen = Integer.MAX_VALUE;
    for (int i = 0; i < strings.length; i++) {
        minLen = Math.min(minLen, strings[i].length());
    }
    for (int i = 0; i < minLen; i++) {
        for (int j = 0; j < strings.length; j++) {
            output += strings[j].charAt(i);
        }
    }
    return output;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
796
7
Gpt3D_Clone796_7.java 1 18
Gpt3D_Clone796_7.java 19 30
----------------------------------------

private static String merge (String...strings) {
    StringBuilder sb = new StringBuilder ();
    int adv;
    boolean edited;
    adv = 0;
    edited = true;
    while (edited) {
        edited = false;
        for (String s : strings) {
            if (adv < s.length ()) {
                sb.append (s.charAt (adv));
                edited = true;
            }
        }
        adv ++;
    }
    return sb.toString ();
}
----------------------------------------

 private static String merge (String...strings) {
    String output = "";
    int len; 
    len = Math.min(strings[0].length(), strings[1].length());
    for (int i = 0; i < len; i++){
        output += strings[0].charAt(i);
        output += strings[1].charAt(i);
    } 
    return output;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
796
8
Gpt3D_Clone796_8.java 1 18
Gpt3D_Clone796_8.java 19 30
----------------------------------------

private static String merge (String...strings) {
    StringBuilder sb = new StringBuilder ();
    int adv;
    boolean edited;
    adv = 0;
    edited = true;
    while (edited) {
        edited = false;
        for (String s : strings) {
            if (adv < s.length ()) {
                sb.append (s.charAt (adv));
                edited = true;
            }
        }
        adv ++;
    }
    return sb.toString ();
}
----------------------------------------

 private static String merge (String...strings) {
    StringBuilder sb = new StringBuilder();
    int len; 
    len = Math.min(strings[0].length(), strings[1].length());
    for (int i = 0; i < len; i++){
        sb.append(strings[0].charAt(i));
        sb.append(strings[1].charAt(i));
    } 
    return sb.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
796
9
Gpt3D_Clone796_9.java 1 18
Gpt3D_Clone796_9.java 19 29
----------------------------------------

private static String merge (String...strings) {
    StringBuilder sb = new StringBuilder ();
    int adv;
    boolean edited;
    adv = 0;
    edited = true;
    while (edited) {
        edited = false;
        for (String s : strings) {
            if (adv < s.length ()) {
                sb.append (s.charAt (adv));
                edited = true;
            }
        }
        adv ++;
    }
    return sb.toString ();
}
----------------------------------------

  private static String merge (String...strings) {
    StringBuilder sb = new StringBuilder();
    for (String str : strings) {
        for (int i = 0; i < str.length(); i++) {
            sb.append(str.charAt(i));
        }
    }
    return sb.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
797
0
Gpt3D_Clone797_0.java 1 8
Gpt3D_Clone797_0.java 9 36
----------------------------------------

public static String merge (String...strings) {
    int maxLength = 0;
    StringBuilder sb = new StringBuilder ();
    for (String s : strings) if (s.length () > maxLength) maxLength = s.length ();
    for (int i = 0;
    i < maxLength; i ++) for (String s : strings) if (s.length () > i) sb.append (s.charAt (i));
    return sb.toString ();
}
----------------------------------------

 public static String merge (String...strings) {
    int minLength = Integer.MAX_VALUE;
    int maxLength = 0;
    StringBuilder sb = new StringBuilder();
    for (String s : strings) {
        if (s.length() < minLength) {
            minLength = s.length();
        }
        if (s.length() > maxLength) {
            maxLength = s.length();
        }
    }
    for (int i = 0; i < minLength; i++) {
        for (String s : strings) {
            sb.append(s.charAt(i));
        }
    }
    for (int i = minLength; i < maxLength; i++) {
        for (String s : strings) {
            if (s.length() > i) {
                sb.append(s.charAt(i));
            }
        }
    }
    return sb.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
797
1
Gpt3D_Clone797_1.java 1 8
Gpt3D_Clone797_1.java 9 27
----------------------------------------

public static String merge (String...strings) {
    int maxLength = 0;
    StringBuilder sb = new StringBuilder ();
    for (String s : strings) if (s.length () > maxLength) maxLength = s.length ();
    for (int i = 0;
    i < maxLength; i ++) for (String s : strings) if (s.length () > i) sb.append (s.charAt (i));
    return sb.toString ();
}
----------------------------------------

 public static String merge (String...strings) { 
    StringBuilder mergedString = new StringBuilder();
    int maxLength = 0; 
    for (String s : strings) {
        if (s.length() > maxLength) {
            maxLength = s.length();
        }
    }
    for (int i = 0; i < maxLength; i++) { 
        for (int k = 0; k < strings.length; k++) {
            if (strings[k].length() > i) {
                mergedString.append(strings[k].charAt(i));
            }
        } 
    } 
    return mergedString.toString(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
797
2
Gpt3D_Clone797_2.java 1 8
Gpt3D_Clone797_2.java 9 27
----------------------------------------

public static String merge (String...strings) {
    int maxLength = 0;
    StringBuilder sb = new StringBuilder ();
    for (String s : strings) if (s.length () > maxLength) maxLength = s.length ();
    for (int i = 0;
    i < maxLength; i ++) for (String s : strings) if (s.length () > i) sb.append (s.charAt (i));
    return sb.toString ();
}
----------------------------------------

 public static String merge (String...strings) {
    StringBuilder result = new StringBuilder (); 
    int maxLength = 0; 
    for (String s : strings) {
        if (s.length() > maxLength)
            maxLength = s.length();
    }
    for (int i = 0; i < maxLength; i++) { 
        for (String s : strings) {
            if (s.length() > i) {
                char c = s.charAt(i);
                result.append(c);
            }
        }
    }
    return result.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
797
3
Gpt3D_Clone797_3.java 1 8
Gpt3D_Clone797_3.java 9 27
----------------------------------------

public static String merge (String...strings) {
    int maxLength = 0;
    StringBuilder sb = new StringBuilder ();
    for (String s : strings) if (s.length () > maxLength) maxLength = s.length ();
    for (int i = 0;
    i < maxLength; i ++) for (String s : strings) if (s.length () > i) sb.append (s.charAt (i));
    return sb.toString ();
}
----------------------------------------

 public static String merge (String...strings) {
    int maxLength = 0;
    StringBuilder mergedStrings = new StringBuilder();
    for (String s : strings) {
        if (s.length() > maxLength) {
            maxLength = s.length();
        }
    }
    for (int i = 0; i < maxLength; i++) {
        for (String s : strings) {
            if (s.length() > i) {
                mergedStrings.append(s.charAt(i));
            }
        }
    }
    return mergedStrings.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
797
4
Gpt3D_Clone797_4.java 1 8
Gpt3D_Clone797_4.java 9 25
----------------------------------------

public static String merge (String...strings) {
    int maxLength = 0;
    StringBuilder sb = new StringBuilder ();
    for (String s : strings) if (s.length () > maxLength) maxLength = s.length ();
    for (int i = 0;
    i < maxLength; i ++) for (String s : strings) if (s.length () > i) sb.append (s.charAt (i));
    return sb.toString ();
}
----------------------------------------

 public static String merge (String...strings) { 
    int maxLength = 0;
    StringBuilder sb = new StringBuilder ();
    for (String s : strings) {
        if (s.length() > maxLength) maxLength = s.length();
    }
    for (int i = 0; i < maxLength; i++) {
        for (String s : strings) {
            if (s.length() > i) {
                sb.append(s.charAt(i));
            }
        }
    }
    return sb.toString(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
797
7
Gpt3D_Clone797_7.java 1 8
Gpt3D_Clone797_7.java 9 20
----------------------------------------

public static String merge (String...strings) {
    int maxLength = 0;
    StringBuilder sb = new StringBuilder ();
    for (String s : strings) if (s.length () > maxLength) maxLength = s.length ();
    for (int i = 0;
    i < maxLength; i ++) for (String s : strings) if (s.length () > i) sb.append (s.charAt (i));
    return sb.toString ();
}
----------------------------------------

 public static String merge (String...strings) {
    String output = "";
    int maxLength = 0;
    for (String s : strings) if (s.length() > maxLength) maxLength = s.length();
    for (int k = 0; k < maxLength; k++) 
        for (int i = 0; i < strings.length; i++)
            if (strings[i].length() > k)
                output+= strings[i].charAt(k);
    return output;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
798
0
Gpt3D_Clone798_0.java 1 8
Gpt3D_Clone798_0.java 9 23
----------------------------------------

public static String merge (String...strings) {
    int maxLength = 0;
    StringBuilder sb = new StringBuilder ();
    for (String s : strings) if (s.length () > maxLength) maxLength = s.length ();
    for (int i = 0;
    i < maxLength; i ++) for (String s : strings) if (s.length () > i) sb.append (s.charAt (i));
    return sb.toString ();
}
----------------------------------------

  public static String merge (String...strings) {
    StringBuilder sb = new StringBuilder ();
    int maxSize = 0;
    //find the maximum length string
    for (String s : strings) 
        maxSize = Math.max(maxSize, s.length());
    //add characters to the string builder for each string in the array
    for (int i = 0; i < maxSize; i++)
        for(String s: strings)          
            if(i < s.length())
                sb.append(s.charAt(i));
    return sb.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
79
1
Gpt3D_Clone79_1.java 1 15
Gpt3D_Clone79_1.java 16 38
----------------------------------------

public synchronized void afterTextChanged (final Editable text) {
    String cost = text.toString ().trim ();
    if (! cost.endsWith (".") && cost.contains (".")) {
        String numberBeforeDecimal = cost.split ("\\.") [0];
        String numberAfterDecimal = cost.split ("\\.") [1];
        if (numberAfterDecimal.length () > 2) {
            numberAfterDecimal = numberAfterDecimal.substring (0, 2);
        }
        cost = numberBeforeDecimal + "." + numberAfterDecimal;
    }
    costEditText.removeTextChangedListener (this);
    costEditText.setText (cost);
    costEditText.setSelection (costEditText.getText ().toString ().trim ().length ());
    costEditText.addTextChangedListener (this);
}
----------------------------------------

 public synchronized void afterTextChanged (final Editable text) {
    String cost = text.toString().trim();
    int numDecimalSpaces = 0;
    if(cost.contains(".")) {
        numDecimalSpaces = cost.split("\\.")[1].length();
    }
    if (!cost.endsWith(".") && numDecimalSpaces > 2) {
        String[] costArray = cost.split("\\.");
        double numberBeforeDecimal = Double.parseDouble(costArray[0]);
        double numberAfterDecimal = Double.parseDouble("0."+costArray[1]);
        if(numberAfterDecimal > 0.99) {
            numberAfterDecimal = 0.99;
        }
        String formattedDecimal = String.format("%.2f", numberAfterDecimal);
        cost = numberBeforeDecimal + "." + formattedDecimal.split("\\.")[1];
    }
    costEditText.removeTextChangedListener(this);
    costEditText.setText(cost);
    costEditText.setSelection(costEditText.getText().toString().trim().length());
    costEditText.addTextChangedListener(this);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
79
2
Gpt3D_Clone79_2.java 1 15
Gpt3D_Clone79_2.java 16 36
----------------------------------------

public synchronized void afterTextChanged (final Editable text) {
    String cost = text.toString ().trim ();
    if (! cost.endsWith (".") && cost.contains (".")) {
        String numberBeforeDecimal = cost.split ("\\.") [0];
        String numberAfterDecimal = cost.split ("\\.") [1];
        if (numberAfterDecimal.length () > 2) {
            numberAfterDecimal = numberAfterDecimal.substring (0, 2);
        }
        cost = numberBeforeDecimal + "." + numberAfterDecimal;
    }
    costEditText.removeTextChangedListener (this);
    costEditText.setText (cost);
    costEditText.setSelection (costEditText.getText ().toString ().trim ().length ());
    costEditText.addTextChangedListener (this);
}
----------------------------------------

 public synchronized void afterTextChanged (final Editable text) {
    String cost = text.toString ().trim ();
    if (! cost.endsWith (".") && cost.contains (".")) {
        String[] costArray = cost.split("\\.");
        int numBeforeDecimal = Integer.parseInt(costArray[0]);
        int numAfterDecimal = Integer.parseInt(costArray[1]);
        if(numAfterDecimal > 99) {
            numAfterDecimal = 99;
        }
        double doubleDecimal = Double.parseDouble(numBeforeDecimal + "." + numAfterDecimal);
        doubleDecimal = Math.round(doubleDecimal * 100.0) / 100.0;
        String doubleDecimalString = String.format("%.2f", doubleDecimal);
        cost = doubleDecimalString;
    }
    costEditText.removeTextChangedListener(this);
    costEditText.setText(cost);
    costEditText.setSelection(costEditText.getText().toString().trim().length());
    costEditText.addTextChangedListener(this);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
79
5
Gpt3D_Clone79_5.java 1 15
Gpt3D_Clone79_5.java 16 34
----------------------------------------

public synchronized void afterTextChanged (final Editable text) {
    String cost = text.toString ().trim ();
    if (! cost.endsWith (".") && cost.contains (".")) {
        String numberBeforeDecimal = cost.split ("\\.") [0];
        String numberAfterDecimal = cost.split ("\\.") [1];
        if (numberAfterDecimal.length () > 2) {
            numberAfterDecimal = numberAfterDecimal.substring (0, 2);
        }
        cost = numberBeforeDecimal + "." + numberAfterDecimal;
    }
    costEditText.removeTextChangedListener (this);
    costEditText.setText (cost);
    costEditText.setSelection (costEditText.getText ().toString ().trim ().length ());
    costEditText.addTextChangedListener (this);
}
----------------------------------------

 public synchronized void afterTextChanged (final Editable text) {
    String cost = text.toString ().trim ();
    if (! cost.endsWith (".") && cost.contains (".")) {
        String[] costArray = cost.split ("\\.");
        String numberBeforeDecimal = costArray [0];
        double numberAfterDecimal = Double.parseDouble ("0." + costArray [1]);
        if (numberAfterDecimal > 0.99){
            numberAfterDecimal = 0.99;
        }
        DecimalFormat df = new DecimalFormat("#.00");
        cost = numberBeforeDecimal + "." + df.format(numberAfterDecimal).split ("\\.")[1];
    }
    costEditText.removeTextChangedListener (this);
    costEditText.setText (cost);
    costEditText.setSelection (costEditText.getText ().toString ().trim ().length ());
    costEditText.addTextChangedListener (this);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
801
7
Gpt3D_Clone801_7.java 1 8
Gpt3D_Clone801_7.java 9 20
----------------------------------------

static String shuffle (String text) {
    if (text.length () <= 1) return text;
    int split = text.length () / 2;
    String temp1 = shuffle (text.substring (0, split));
    String temp2 = shuffle (text.substring (split));
    if (Math.random () > 0.5) return temp1 + temp2;
    else return temp2 + temp1;
}
----------------------------------------

 static String shuffle (String str) { 
    if (str.length () <= 1) 
        return str; 
    String t1 = shuffle(str.substring(0, str.length()/2));
    String t2 = shuffle(str.substring(str.length()/2));
    if (Math.random() > 0.5) 
        return t1 + t2; 
    
    return t2 + t1; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
802
0
Gpt3D_Clone802_0.java 1 11
Gpt3D_Clone802_0.java 12 28
----------------------------------------

public static String shuffle (String text) {
    char [] characters = text.toCharArray ();
    for (int i = 0;
    i < characters.length; i ++) {
        int randomIndex = (int) (Math.random () * characters.length);
        char temp = characters [i];
        characters [i] = characters [randomIndex];
        characters [randomIndex] = temp;
    }
    return new String (characters);
}
----------------------------------------

 public static String shuffle(String text){
    int len = text.length();
    char[] characters = new char[len];
    for(int i=0; i<len; i++){
        int r = (int)(Math.random()*len);
        if(characters[r]==0){
            characters[r] = text.charAt(i);
        }
        else{
            i--;
        }
    }
    return new String(characters);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
802
6
Gpt3D_Clone802_6.java 1 11
Gpt3D_Clone802_6.java 12 22
----------------------------------------

public static String shuffle (String text) {
    char [] characters = text.toCharArray ();
    for (int i = 0;
    i < characters.length; i ++) {
        int randomIndex = (int) (Math.random () * characters.length);
        char temp = characters [i];
        characters [i] = characters [randomIndex];
        characters [randomIndex] = temp;
    }
    return new String (characters);
}
----------------------------------------

 public static String shuffle(String text){
    int len = text.length();
    char[] characters = new char[len];
    for(int i=0; i<len; i++){
        int r = (int)(Math.random()*len);
        characters[r] = text.charAt(i);
    }
    return new String(characters);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
803
0
Gpt3D_Clone803_0.java 1 8
Gpt3D_Clone803_0.java 9 24
----------------------------------------

static String shuffle (String text) {
    if (text.length () <= 1) return text;
    int split = text.length () / 2;
    String temp1 = shuffle (text.substring (0, split));
    String temp2 = shuffle (text.substring (split));
    if (Math.random () > 0.5) return temp1 + temp2;
    else return temp2 + temp1;
}
----------------------------------------

 static String shuffle (String text) {
    if (text.length () <= 1) return text;
    int split = text.length() / 8;
    String temp1 = shuffle (text.substring (0, split));
    String temp2 = shuffle (text.substring (split, split * 2));
    String temp3 = shuffle (text.substring (split * 2, split * 3));
    String temp4 = shuffle (text.substring (split * 3, split * 4));
    String temp5 = shuffle (text.substring (split * 4, split * 5));
    String temp6 = shuffle (text.substring (split * 5, split * 6));
    String temp7 = shuffle (text.substring (split * 6, split * 7));
    String temp8 = shuffle (text.substring (split * 7));
    if(Math.random () > 0.5) return temp1 + temp2 + temp3 + temp4 + temp5 + temp6 + temp7 + temp8; 
    else return temp8 + temp7 + temp6 + temp5 + temp4 + temp3 + temp2 + temp1; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
803
1
Gpt3D_Clone803_1.java 1 8
Gpt3D_Clone803_1.java 9 23
----------------------------------------

static String shuffle (String text) {
    if (text.length () <= 1) return text;
    int split = text.length () / 2;
    String temp1 = shuffle (text.substring (0, split));
    String temp2 = shuffle (text.substring (split));
    if (Math.random () > 0.5) return temp1 + temp2;
    else return temp2 + temp1;
}
----------------------------------------

 static String shuffle (String text) {
    if (text.length () <= 1) return text;
    int split = text.length() / 7;
    String temp1 = shuffle (text.substring (0, split));
    String temp2 = shuffle (text.substring (split, split * 2));
    String temp3 = shuffle (text.substring (split * 2, split * 3));
    String temp4 = shuffle (text.substring (split * 3, split * 4));
    String temp5 = shuffle (text.substring (split * 4, split * 5));
    String temp6 = shuffle (text.substring (split * 5, split * 6));
    String temp7 = shuffle (text.substring (split * 6));
    if(Math.random () > 0.5) return temp1 + temp2 + temp3 + temp4 + temp5 + temp6 + temp7; 
    else return temp7 + temp6 + temp5 + temp4 + temp3 + temp2 + temp1; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
803
2
Gpt3D_Clone803_2.java 1 8
Gpt3D_Clone803_2.java 9 22
----------------------------------------

static String shuffle (String text) {
    if (text.length () <= 1) return text;
    int split = text.length () / 2;
    String temp1 = shuffle (text.substring (0, split));
    String temp2 = shuffle (text.substring (split));
    if (Math.random () > 0.5) return temp1 + temp2;
    else return temp2 + temp1;
}
----------------------------------------

 static String shuffle (String text) {
    if (text.length () <= 1) return text;
    int split = text.length () / 2; 
    int split2 = text.length() / 3;
    int split3 = text.length()/4;
    String temp1 = shuffle (text.substring (0, split));
    String temp2 = shuffle (text.substring (split, split2 * 2));
    String temp3 = shuffle (text.substring (split2 * 2, split3 * 3));
    String temp4 = shuffle (text.substring (split3 * 3));
    if (Math.random () > 0.5) return temp1 + temp2 + temp3 + temp4; 
    else return temp4 + temp3 + temp2 + temp1; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
803
3
Gpt3D_Clone803_3.java 1 8
Gpt3D_Clone803_3.java 9 22
----------------------------------------

static String shuffle (String text) {
    if (text.length () <= 1) return text;
    int split = text.length () / 2;
    String temp1 = shuffle (text.substring (0, split));
    String temp2 = shuffle (text.substring (split));
    if (Math.random () > 0.5) return temp1 + temp2;
    else return temp2 + temp1;
}
----------------------------------------

 static String shuffle (String text) {
    if (text.length () <= 1) return text;
    int split = text.length() / 6;
    String temp1 = shuffle (text.substring (0, split));
    String temp2 = shuffle (text.substring (split, split * 2));
    String temp3 = shuffle (text.substring (split * 2, split * 3));
    String temp4 = shuffle (text.substring (split * 3, split * 4));
    String temp5 = shuffle (text.substring (split * 4, split * 5));
    String temp6 = shuffle (text.substring (split * 5));
    if(Math.random () > 0.5) return temp1 + temp2 + temp3 + temp4 + temp5 + temp6; 
    else return temp6 + temp5 + temp4 + temp3 + temp2 + temp1; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
803
4
Gpt3D_Clone803_4.java 1 8
Gpt3D_Clone803_4.java 9 21
----------------------------------------

static String shuffle (String text) {
    if (text.length () <= 1) return text;
    int split = text.length () / 2;
    String temp1 = shuffle (text.substring (0, split));
    String temp2 = shuffle (text.substring (split));
    if (Math.random () > 0.5) return temp1 + temp2;
    else return temp2 + temp1;
}
----------------------------------------

 static String shuffle (String text) {
    if (text.length () <= 1) return text;
    int split = text.length() / 5;
    String temp1 = shuffle (text.substring (0, split));
    String temp2 = shuffle (text.substring (split, split * 2));
    String temp3 = shuffle (text.substring (split * 2, split * 3));
    String temp4 = shuffle (text.substring (split * 3, split * 4));
    String temp5 = shuffle (text.substring (split * 4));
    if(Math.random () > 0.5) return temp1 + temp2 + temp3 + temp4 + temp5; 
    else return temp5 + temp4 + temp3 + temp2 + temp1; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
803
5
Gpt3D_Clone803_5.java 1 8
Gpt3D_Clone803_5.java 9 20
----------------------------------------

static String shuffle (String text) {
    if (text.length () <= 1) return text;
    int split = text.length () / 2;
    String temp1 = shuffle (text.substring (0, split));
    String temp2 = shuffle (text.substring (split));
    if (Math.random () > 0.5) return temp1 + temp2;
    else return temp2 + temp1;
}
----------------------------------------

 static String shuffle (String text) {
    if (text.length () <= 1) return text;
    int split = text.length () / 2; 
    int split2 = text.length() / 3;
    String temp1 = shuffle (text.substring (0, split));
    String temp2 = shuffle (text.substring (split, split2 * 2));
    String temp3 = shuffle (text.substring (split2 * 2));
    if (Math.random () > 0.5) return temp1 + temp2 + temp3; 
    else return temp3 + temp2 + temp1; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
803
6
Gpt3D_Clone803_6.java 1 8
Gpt3D_Clone803_6.java 9 20
----------------------------------------

static String shuffle (String text) {
    if (text.length () <= 1) return text;
    int split = text.length () / 2;
    String temp1 = shuffle (text.substring (0, split));
    String temp2 = shuffle (text.substring (split));
    if (Math.random () > 0.5) return temp1 + temp2;
    else return temp2 + temp1;
}
----------------------------------------

 static String shuffle (String text) {
    if (text.length () <= 1) return text;
    int split = text.length() / 4;
    String temp1 = shuffle (text.substring (0, split));
    String temp2 = shuffle (text.substring (split, split * 2));
    String temp3 = shuffle (text.substring (split * 2, split * 3));
    String temp4 = shuffle (text.substring (split * 3));
    if(Math.random () > 0.5) return temp1 + temp2 + temp3 + temp4; 
    else return temp4 + temp3 + temp2 + temp1; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
803
7
Gpt3D_Clone803_7.java 1 8
Gpt3D_Clone803_7.java 9 20
----------------------------------------

static String shuffle (String text) {
    if (text.length () <= 1) return text;
    int split = text.length () / 2;
    String temp1 = shuffle (text.substring (0, split));
    String temp2 = shuffle (text.substring (split));
    if (Math.random () > 0.5) return temp1 + temp2;
    else return temp2 + temp1;
}
----------------------------------------

 static String shuffle (String text) {
    if (text.length () <= 1) return text;
    int split = text.length () / 2;
    int split2 = text.length () / 4;
    String temp1 = shuffle (text.substring (0, split));
    String temp2 = shuffle (text.substring (split, split2 * 3));
    String temp3 = shuffle (text.substring (split2 * 3));
    if (Math.random () > 0.5) return temp1 + temp2 + temp3;
    else return temp3 + temp2 + temp1;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
803
8
Gpt3D_Clone803_8.java 1 8
Gpt3D_Clone803_8.java 9 19
----------------------------------------

static String shuffle (String text) {
    if (text.length () <= 1) return text;
    int split = text.length () / 2;
    String temp1 = shuffle (text.substring (0, split));
    String temp2 = shuffle (text.substring (split));
    if (Math.random () > 0.5) return temp1 + temp2;
    else return temp2 + temp1;
}
----------------------------------------

 static String shuffle (String text) {
    if (text.length () <= 1) return text;
    int split = text.length() / 3;
    String temp1 = shuffle (text.substring (0, split));
    String temp2 = shuffle (text.substring (split, split * 2));
    String temp3 = shuffle (text.substring (split * 2));
    if(Math.random () > 0.5) return temp1 + temp2 + temp3; 
    else return temp3 + temp2 + temp1; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
804
0
Gpt3D_Clone804_0.java 1 11
Gpt3D_Clone804_0.java 12 23
----------------------------------------

public static String shuffle (String text) {
    char [] characters = text.toCharArray ();
    for (int i = 0;
    i < characters.length; i ++) {
        int randomIndex = (int) (Math.random () * characters.length);
        char temp = characters [i];
        characters [i] = characters [randomIndex];
        characters [randomIndex] = temp;
    }
    return new String (characters);
}
----------------------------------------

 public static String shuffle (String text) {
    List<Character> characters = new ArrayList<>();
    for(char c :  text.toCharArray())
        characters.add(c);
    Collections.shuffle(characters);
    StringBuilder sb = new StringBuilder(text.length());
    for (Character c : characters)
        sb.append(c);
    return sb.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
805
0
Gpt3D_Clone805_0.java 1 11
Gpt3D_Clone805_0.java 12 36
----------------------------------------

public static String shuffle (String text) {
    char [] characters = text.toCharArray ();
    for (int i = 0;
    i < characters.length; i ++) {
        int randomIndex = (int) (Math.random () * characters.length);
        char temp = characters [i];
        characters [i] = characters [randomIndex];
        characters [randomIndex] = temp;
    }
    return new String (characters);
}
----------------------------------------

 public static String shuffle(String text) 
{ 
    int[] array = new int[text.length()]; 
    for(int i = 0; i < text.length(); i++) 
    { 
        array[i] = text.charAt(i); 
    } 
    for(int i = 0; i < text.length(); i++) 
    { 
        int randomIndex = (int)(Math.random() * text.length()); 
          
        int temp = array[i]; 
        array[i] = array[randomIndex]; 
        array[randomIndex] = temp; 
    } 
  
    char[] shuffledText = new char[array.length]; 
    for(int i = 0; i < shuffledText.length; i++) 
    { 
        shuffledText[i] = (char)array[i]; 
    } 
    return new String(shuffledText); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
805
1
Gpt3D_Clone805_1.java 1 11
Gpt3D_Clone805_1.java 12 31
----------------------------------------

public static String shuffle (String text) {
    char [] characters = text.toCharArray ();
    for (int i = 0;
    i < characters.length; i ++) {
        int randomIndex = (int) (Math.random () * characters.length);
        char temp = characters [i];
        characters [i] = characters [randomIndex];
        characters [randomIndex] = temp;
    }
    return new String (characters);
}
----------------------------------------

 public static String shuffle (String text) 
{ 
    char[] tmp = text.toCharArray(); 
     
    int index; 
    char temp;
     
    Random rand = new Random(); 
    for (int i = tmp.length - 1; i > 0; i--) 
    { 
        index = rand.nextInt(i + 1); 
        temp = tmp[index]; 
        tmp[index] = tmp[i]; 
        tmp[i] = temp; 
    } 
     
    return String.valueOf(tmp); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
805
2
Gpt3D_Clone805_2.java 1 11
Gpt3D_Clone805_2.java 12 29
----------------------------------------

public static String shuffle (String text) {
    char [] characters = text.toCharArray ();
    for (int i = 0;
    i < characters.length; i ++) {
        int randomIndex = (int) (Math.random () * characters.length);
        char temp = characters [i];
        characters [i] = characters [randomIndex];
        characters [randomIndex] = temp;
    }
    return new String (characters);
}
----------------------------------------

 public static String shuffle(String text) 
{ 
    List<Character> characters = new ArrayList<>(); 
    for (char c : text.toCharArray()) { 
        characters.add(c);
    } 
     
    StringBuilder sb = new StringBuilder(text.length()); 
    while (characters.size() != 0) 
    {
        int randPicker = (int) (Math.random() * characters.size()); 
        sb.append(characters.remove(randPicker)); 
    } 
     
    return sb.toString(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
805
3
Gpt3D_Clone805_3.java 1 11
Gpt3D_Clone805_3.java 12 29
----------------------------------------

public static String shuffle (String text) {
    char [] characters = text.toCharArray ();
    for (int i = 0;
    i < characters.length; i ++) {
        int randomIndex = (int) (Math.random () * characters.length);
        char temp = characters [i];
        characters [i] = characters [randomIndex];
        characters [randomIndex] = temp;
    }
    return new String (characters);
}
----------------------------------------

 public static String shuffle(String text) 
{ 
    List<Character> characters = new LinkedList<>(); 
    for (char c : text.toCharArray()) { 
        characters.add(c);
    } 
     
    StringBuilder sb = new StringBuilder(text.length()); 
    while (characters.size() != 0) 
    {
        int randPicker = (int) (Math.random() * characters.size()); 
        sb.append(characters.remove(randPicker)); 
    } 
     
    return sb.toString(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
805
5
Gpt3D_Clone805_5.java 1 11
Gpt3D_Clone805_5.java 12 27
----------------------------------------

public static String shuffle (String text) {
    char [] characters = text.toCharArray ();
    for (int i = 0;
    i < characters.length; i ++) {
        int randomIndex = (int) (Math.random () * characters.length);
        char temp = characters [i];
        characters [i] = characters [randomIndex];
        characters [randomIndex] = temp;
    }
    return new String (characters);
}
----------------------------------------

 public static String shuffle(String text) 
{ 
    char[] characters = text.toCharArray();
    char[] tmp = new char[text.length()];
    Random random = new Random();
 
    for (int i = 0; i < text.length(); i++) {
        int j = random.nextInt(text.length());
        tmp[i] = characters[j];
        characters[j] = characters[i];
    }
    
    return new String(tmp);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
805
6
Gpt3D_Clone805_6.java 1 11
Gpt3D_Clone805_6.java 12 29
----------------------------------------

public static String shuffle (String text) {
    char [] characters = text.toCharArray ();
    for (int i = 0;
    i < characters.length; i ++) {
        int randomIndex = (int) (Math.random () * characters.length);
        char temp = characters [i];
        characters [i] = characters [randomIndex];
        characters [randomIndex] = temp;
    }
    return new String (characters);
}
----------------------------------------

 public static String shuffle (String text)
{ 
    char [] characters = text.toCharArray(); 
    List<Character> list = new ArrayList<>(); 
   
    for (char c : characters) 
        list.add(c); 
       
    Collections.shuffle(list); 
   
    StringBuilder output = new StringBuilder(list.size()); 
    for (Character c : list) 
        output.append(c); 
       
    return output.toString(); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
805
7
Gpt3D_Clone805_7.java 1 11
Gpt3D_Clone805_7.java 12 27
----------------------------------------

public static String shuffle (String text) {
    char [] characters = text.toCharArray ();
    for (int i = 0;
    i < characters.length; i ++) {
        int randomIndex = (int) (Math.random () * characters.length);
        char temp = characters [i];
        characters [i] = characters [randomIndex];
        characters [randomIndex] = temp;
    }
    return new String (characters);
}
----------------------------------------

 public static String shuffle(String text) 
{ 
    List<Character> textList = new ArrayList<Character>();
    for(char c : text.toCharArray())
        textList.add(c);
     
    Collections.shuffle(textList); 
     
    StringBuilder sb= new StringBuilder();
    for(char c : textList)
        sb.append(c);
     
    return sb.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
808
0
Gpt3D_Clone808_0.java 1 9
Gpt3D_Clone808_0.java 10 21
----------------------------------------

public String toString () {
    StringBuilder sb = new StringBuilder ();
    sb.append (a + "\n");
    sb.append (b + "\n");
    for (A elem : aList) {
        sb.append (elem + "\n");
    }
    return sb.toString ();
}
----------------------------------------

  public String toString () {
    StringBuilder sb = new StringBuilder ();
    sb.append("Attributes a and b are: ");
    sb.append ("a:" + a + "\t");
    sb.append ("b:" + b + "\n");
    for (A elem : aList) {
        sb.append (elem.toString() + "\n");
    }
    return sb.toString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
808
1
Gpt3D_Clone808_1.java 1 9
Gpt3D_Clone808_1.java 10 20
----------------------------------------

public String toString () {
    StringBuilder sb = new StringBuilder ();
    sb.append (a + "\n");
    sb.append (b + "\n");
    for (A elem : aList) {
        sb.append (elem + "\n");
    }
    return sb.toString ();
}
----------------------------------------

  public String toString () {
    String[] strArray = new String[aList.length + 2];
    strArray[0] = a;
    strArray[1] = b;
    for (int i = 0; i < aList.length; i++) {
        strArray[i + 2] = aList[i];
    }
    return String.join("\n", strArray);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
808
3
Gpt3D_Clone808_3.java 1 9
Gpt3D_Clone808_3.java 10 20
----------------------------------------

public String toString () {
    StringBuilder sb = new StringBuilder ();
    sb.append (a + "\n");
    sb.append (b + "\n");
    for (A elem : aList) {
        sb.append (elem + "\n");
    }
    return sb.toString ();
}
----------------------------------------

  public String toString () {
    List<String> lstString = new ArrayList<>();
    lstString.add(a);
    lstString.add(b);
    for (A elem : aList) {
        lstString.add(elem.toString());
    }
    return StringUtils.join(lstString, "\n");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
808
5
Gpt3D_Clone808_5.java 1 9
Gpt3D_Clone808_5.java 10 20
----------------------------------------

public String toString () {
    StringBuilder sb = new StringBuilder ();
    sb.append (a + "\n");
    sb.append (b + "\n");
    for (A elem : aList) {
        sb.append (elem + "\n");
    }
    return sb.toString ();
}
----------------------------------------

  public String toString () {
    String str = "";
    str += a + "\n";
    str += b + "\n";
    for (A elem : aList) {
        str += elem + "\n";
    }
    return str;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
808
6
Gpt3D_Clone808_6.java 1 9
Gpt3D_Clone808_6.java 10 19
----------------------------------------

public String toString () {
    StringBuilder sb = new StringBuilder ();
    sb.append (a + "\n");
    sb.append (b + "\n");
    for (A elem : aList) {
        sb.append (elem + "\n");
    }
    return sb.toString ();
}
----------------------------------------

  public String toString () {
    String str = "";
    str += "Object contains a = " + a + " and b = " + b + "\n";
    for (A elem : aList) {
        str += elem + "\n";
    }
    return str;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
808
9
Gpt3D_Clone808_9.java 1 9
Gpt3D_Clone808_9.java 10 19
----------------------------------------

public String toString () {
    StringBuilder sb = new StringBuilder ();
    sb.append (a + "\n");
    sb.append (b + "\n");
    for (A elem : aList) {
        sb.append (elem + "\n");
    }
    return sb.toString ();
}
----------------------------------------

  public String toString () {
    List<String> lstString = new ArrayList<>();
    lstString.add("Attributes are a = " + a + " and b = " + b);
    for (A elem : aList) {
        lstString.add(elem.toString());
    }
    return String.join("\n", lstString);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
809
0
Gpt3D_Clone809_0.java 1 9
Gpt3D_Clone809_0.java 10 19
----------------------------------------

public String toString () {
    StringBuilder sb = new StringBuilder ();
    sb.append ("--------" + v + "\n");
    sb.append ("--------" + w + "\n");
    for (B elem : bList) {
        sb.append (elem + "\n");
    }
    return sb.toString ();
}
----------------------------------------

 public String toString() {
    String constructedString = "--------" + v + "\n";
    constructedString += "--------" + w + "\n";
    for (B elem : bList) {
        constructedString += elem + "\n";
    }
    return constructedString;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
809
1
Gpt3D_Clone809_1.java 1 9
Gpt3D_Clone809_1.java 10 19
----------------------------------------

public String toString () {
    StringBuilder sb = new StringBuilder ();
    sb.append ("--------" + v + "\n");
    sb.append ("--------" + w + "\n");
    for (B elem : bList) {
        sb.append (elem + "\n");
    }
    return sb.toString ();
}
----------------------------------------

 public String toString() {
    String outputString = "--------" + v + "\n";
    outputString += "--------" + w + "\n";
    for (int i = 0; i < bList.size(); i++) {
        outputString += bList.get(i) + "\n";
    }
    return outputString;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
809
2
Gpt3D_Clone809_2.java 1 9
Gpt3D_Clone809_2.java 10 19
----------------------------------------

public String toString () {
    StringBuilder sb = new StringBuilder ();
    sb.append ("--------" + v + "\n");
    sb.append ("--------" + w + "\n");
    for (B elem : bList) {
        sb.append (elem + "\n");
    }
    return sb.toString ();
}
----------------------------------------

 public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(String.format("--------%s%n--------%s%n", v, w));
    for (int i = 0; i < bList.size(); i++) {
        sb.append(bList.get(i) + "\n");
    }
    return sb.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
809
4
Gpt3D_Clone809_4.java 1 9
Gpt3D_Clone809_4.java 10 18
----------------------------------------

public String toString () {
    StringBuilder sb = new StringBuilder ();
    sb.append ("--------" + v + "\n");
    sb.append ("--------" + w + "\n");
    for (B elem : bList) {
        sb.append (elem + "\n");
    }
    return sb.toString ();
}
----------------------------------------

 public String toString() {
    String constructedString = new String("--------" + v + "\n" + "--------" + w + "\n");
    for (B elem : bList) {
        constructedString += elem + "\n";
    }
    return constructedString;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
809
5
Gpt3D_Clone809_5.java 1 9
Gpt3D_Clone809_5.java 10 18
----------------------------------------

public String toString () {
    StringBuilder sb = new StringBuilder ();
    sb.append ("--------" + v + "\n");
    sb.append ("--------" + w + "\n");
    for (B elem : bList) {
        sb.append (elem + "\n");
    }
    return sb.toString ();
}
----------------------------------------

 public String toString() {
    String outputString = new String("--------" + v + "\n" + "--------" + w + "\n");
    for (int i = 0; i < bList.size(); i++) {
        outputString += bList.get(i) + "\n";
    }
    return outputString;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
809
6
Gpt3D_Clone809_6.java 1 9
Gpt3D_Clone809_6.java 10 18
----------------------------------------

public String toString () {
    StringBuilder sb = new StringBuilder ();
    sb.append ("--------" + v + "\n");
    sb.append ("--------" + w + "\n");
    for (B elem : bList) {
        sb.append (elem + "\n");
    }
    return sb.toString ();
}
----------------------------------------

 public String toString() {
    StringBuilder sb = new StringBuilder("--------" + v + "\n" + "--------" + w + "\n");
    for (int i = 0; i < bList.size(); i++) {
        sb.append(bList.get(i) + "\n");
    }
    return sb.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
809
7
Gpt3D_Clone809_7.java 1 9
Gpt3D_Clone809_7.java 10 18
----------------------------------------

public String toString () {
    StringBuilder sb = new StringBuilder ();
    sb.append ("--------" + v + "\n");
    sb.append ("--------" + w + "\n");
    for (B elem : bList) {
        sb.append (elem + "\n");
    }
    return sb.toString ();
}
----------------------------------------

 public String toString() {
    String constructedString = String.format("--------%s%n--------%s%n", v, w);
    for (B elem : bList) {
        constructedString += elem + "\n";
    }
    return constructedString;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
809
9
Gpt3D_Clone809_9.java 1 9
Gpt3D_Clone809_9.java 10 18
----------------------------------------

public String toString () {
    StringBuilder sb = new StringBuilder ();
    sb.append ("--------" + v + "\n");
    sb.append ("--------" + w + "\n");
    for (B elem : bList) {
        sb.append (elem + "\n");
    }
    return sb.toString ();
}
----------------------------------------

 public String toString() {
    String outputString = String.format("--------%s%n--------%s%n", v, w);
    for (int i = 0; i < bList.size(); i++) {
        outputString += bList.get(i) + "\n";
    }
    return outputString;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
814
1
Gpt3D_Clone814_1.java 1 22
Gpt3D_Clone814_1.java 23 48
----------------------------------------

public static void countString (String str) {
    if (str != null) {
        int length = str.length ();
        char ch [] = str.toCharArray ();
        Arrays.sort (ch);
        if (length > 0) {
            char x = ch [0];
            int count = 1;
            for (int i = 1;
            i < length; i ++) {
                if (ch [i] == x) {
                    count ++;
                } else {
                    System.out.println ("Number of Occurrence of '" + ch [i - 1] + "' is: " + count);
                    x = ch [i];
                    count = 1;
                }
            }
            System.out.println ("Number of Occurrence of '" + ch [length - 1] + "' is: " + count);
        }
    }
}
----------------------------------------

public static void countString (String str) {
    if (str != null) {
        int length = str.length ();
        char ch [] = str.toCharArray ();
        Arrays.sort (ch);
        Integer prev = null;
        int count = 0;
        for(char one : ch) {
            if(null != prev && !prev.equals(one)) {
                System.out.println("Number of Occurrence of '" + prev + "' is: " + count); 
                prev = one;
                count = 0;
            }
            count++;
            prev = one;
        }
        
        if(count > 0) {
            System.out.println("Number of Occurrence of '" + prev + "' is: " + count); 
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
814
2
Gpt3D_Clone814_2.java 1 22
Gpt3D_Clone814_2.java 23 43
----------------------------------------

public static void countString (String str) {
    if (str != null) {
        int length = str.length ();
        char ch [] = str.toCharArray ();
        Arrays.sort (ch);
        if (length > 0) {
            char x = ch [0];
            int count = 1;
            for (int i = 1;
            i < length; i ++) {
                if (ch [i] == x) {
                    count ++;
                } else {
                    System.out.println ("Number of Occurrence of '" + ch [i - 1] + "' is: " + count);
                    x = ch [i];
                    count = 1;
                }
            }
            System.out.println ("Number of Occurrence of '" + ch [length - 1] + "' is: " + count);
        }
    }
}
----------------------------------------

 
public static void countString (String str) {
    if (str != null) {
        int length = str.length ();
        char ch [] = str.toCharArray ();
        int currentIndex = 0;
        while (currentIndex < length) {
            int nextIndex = str.indexOf(ch[currentIndex], currentIndex + 1);
            int count = 1;
            while (nextIndex != -1) {
                count++;
                currentIndex = nextIndex;
                nextIndex = str.indexOf(ch[currentIndex], nextIndex + 1);
            }
            System.out.println("Number of Occurrence of '" + ch[currentIndex] + "' is: " + count); 
            currentIndex++;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
814
3
Gpt3D_Clone814_3.java 1 22
Gpt3D_Clone814_3.java 23 44
----------------------------------------

public static void countString (String str) {
    if (str != null) {
        int length = str.length ();
        char ch [] = str.toCharArray ();
        Arrays.sort (ch);
        if (length > 0) {
            char x = ch [0];
            int count = 1;
            for (int i = 1;
            i < length; i ++) {
                if (ch [i] == x) {
                    count ++;
                } else {
                    System.out.println ("Number of Occurrence of '" + ch [i - 1] + "' is: " + count);
                    x = ch [i];
                    count = 1;
                }
            }
            System.out.println ("Number of Occurrence of '" + ch [length - 1] + "' is: " + count);
        }
    }
}
----------------------------------------

 
public static void countString (String str) {
    if (str != null) {
        int length = str.length ();
        char ch [] = str.toCharArray ();
        Arrays.sort (ch);
        int i = 0;
        while (i < length) { 
            int count = 1;
            while (i < length - 1 && ch[i] == ch[i+1]) 
            { 
                count++; 
                i++; 
            }
            System.out.println("Number of Occurrence of '" + ch[i] + "' is: " + count); 
            i++; 
        }
  
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
814
4
Gpt3D_Clone814_4.java 1 22
Gpt3D_Clone814_4.java 23 43
----------------------------------------

public static void countString (String str) {
    if (str != null) {
        int length = str.length ();
        char ch [] = str.toCharArray ();
        Arrays.sort (ch);
        if (length > 0) {
            char x = ch [0];
            int count = 1;
            for (int i = 1;
            i < length; i ++) {
                if (ch [i] == x) {
                    count ++;
                } else {
                    System.out.println ("Number of Occurrence of '" + ch [i - 1] + "' is: " + count);
                    x = ch [i];
                    count = 1;
                }
            }
            System.out.println ("Number of Occurrence of '" + ch [length - 1] + "' is: " + count);
        }
    }
}
----------------------------------------

 
public static void countString (String str) {
    if (str != null) {
        int length = str.length ();
        char ch [] = str.toCharArray ();
        Map<Character, Integer> map = new HashMap<Character, Integer>();
        for (int i = 0; i < length; i++) {
            char c = ch[i];
            if (map.containsKey(c)) {
                map.put(c,  map.get(c) + 1);
            } else {
                map.put(c, 1);
            }
        }
        for (Map.Entry<Character, Integer> entry : map.entrySet()) {
            System.out.println("Number of Occurrence of '" + entry.getKey() + "' is: " + entry.getValue());
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
814
5
Gpt3D_Clone814_5.java 1 22
Gpt3D_Clone814_5.java 23 43
----------------------------------------

public static void countString (String str) {
    if (str != null) {
        int length = str.length ();
        char ch [] = str.toCharArray ();
        Arrays.sort (ch);
        if (length > 0) {
            char x = ch [0];
            int count = 1;
            for (int i = 1;
            i < length; i ++) {
                if (ch [i] == x) {
                    count ++;
                } else {
                    System.out.println ("Number of Occurrence of '" + ch [i - 1] + "' is: " + count);
                    x = ch [i];
                    count = 1;
                }
            }
            System.out.println ("Number of Occurrence of '" + ch [length - 1] + "' is: " + count);
        }
    }
}
----------------------------------------

 
public static void countString (String str) {
    if (str != null) {
        int length = str.length ();
        char ch [] = str.toCharArray ();
        Arrays.sort (ch);
        int i = 0;
        while (i < length) { 
            int count = 1;
            while (i < length - 1 && ch[i] == ch[i+1]) 
            { 
                count++; 
                i++; 
            }
            System.out.println("Number of Occurrence of '" + ch[i] + "' is: " + count); 
            i++; 
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
814
6
Gpt3D_Clone814_6.java 1 22
Gpt3D_Clone814_6.java 23 43
----------------------------------------

public static void countString (String str) {
    if (str != null) {
        int length = str.length ();
        char ch [] = str.toCharArray ();
        Arrays.sort (ch);
        if (length > 0) {
            char x = ch [0];
            int count = 1;
            for (int i = 1;
            i < length; i ++) {
                if (ch [i] == x) {
                    count ++;
                } else {
                    System.out.println ("Number of Occurrence of '" + ch [i - 1] + "' is: " + count);
                    x = ch [i];
                    count = 1;
                }
            }
            System.out.println ("Number of Occurrence of '" + ch [length - 1] + "' is: " + count);
        }
    }
}
----------------------------------------

 
public static void countString (String str) {
    if (str != null) {
        int length = str.length ();
        Map<Character, Integer> map = new HashMap<Character, Integer>();
        for (int i=0;i<str.length();i++) {
            char temp=str.charAt(i);
            if(map.containsKey(temp)) {
                map.put(temp, map.get(temp)+1);
            }
            else {
                map.put(temp, 1);
            }
        }
        for(Map.Entry<Character, Integer> item : map.entrySet) {
            System.out.println("Number of Occurrence of '" + item.getKey() + "' is: " + item.getValue());
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
814
7
Gpt3D_Clone814_7.java 1 22
Gpt3D_Clone814_7.java 23 43
----------------------------------------

public static void countString (String str) {
    if (str != null) {
        int length = str.length ();
        char ch [] = str.toCharArray ();
        Arrays.sort (ch);
        if (length > 0) {
            char x = ch [0];
            int count = 1;
            for (int i = 1;
            i < length; i ++) {
                if (ch [i] == x) {
                    count ++;
                } else {
                    System.out.println ("Number of Occurrence of '" + ch [i - 1] + "' is: " + count);
                    x = ch [i];
                    count = 1;
                }
            }
            System.out.println ("Number of Occurrence of '" + ch [length - 1] + "' is: " + count);
        }
    }
}
----------------------------------------

 
public static void countString (String str) {
    if (str != null) {
        int length = str.length ();
        Map<Character, Integer> map = new HashMap<Character, Integer>();
        for (int i=0;i<str.length();i++) {
            char c=str.charAt(i);
            if(map.containsKey(c)) {
                map.put(c, map.get(c)+1);
            }
            else {
                map.put(c, 1);
            }
        }
        for(Map.Entry<Character, Integer> item : map.entrySet){
            System.out.println("Number of Occurrence of '" + item.getKey() + "' is: " + item.getValue());
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
814
8
Gpt3D_Clone814_8.java 1 22
Gpt3D_Clone814_8.java 23 40
----------------------------------------

public static void countString (String str) {
    if (str != null) {
        int length = str.length ();
        char ch [] = str.toCharArray ();
        Arrays.sort (ch);
        if (length > 0) {
            char x = ch [0];
            int count = 1;
            for (int i = 1;
            i < length; i ++) {
                if (ch [i] == x) {
                    count ++;
                } else {
                    System.out.println ("Number of Occurrence of '" + ch [i - 1] + "' is: " + count);
                    x = ch [i];
                    count = 1;
                }
            }
            System.out.println ("Number of Occurrence of '" + ch [length - 1] + "' is: " + count);
        }
    }
}
----------------------------------------

 
public static void countString (String str) {
    if (str != null) {
        int length = str.length ();
        char ch [] = str.toCharArray ();
        int[] count=new int[128];
        for(int i=0;i<str.length();i++){ 
            count[str.charAt(i)]++;
        }
        for(int i=0;i<size;i++){ 
            if(count[str.charAt(i)]>0){  
                System.out.println("Number of Occurrence of '" + ch[i] + "' is: " + count[str.charAt(i)]); 
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
814
9
Gpt3D_Clone814_9.java 1 22
Gpt3D_Clone814_9.java 23 42
----------------------------------------

public static void countString (String str) {
    if (str != null) {
        int length = str.length ();
        char ch [] = str.toCharArray ();
        Arrays.sort (ch);
        if (length > 0) {
            char x = ch [0];
            int count = 1;
            for (int i = 1;
            i < length; i ++) {
                if (ch [i] == x) {
                    count ++;
                } else {
                    System.out.println ("Number of Occurrence of '" + ch [i - 1] + "' is: " + count);
                    x = ch [i];
                    count = 1;
                }
            }
            System.out.println ("Number of Occurrence of '" + ch [length - 1] + "' is: " + count);
        }
    }
}
----------------------------------------

 
public static void countString (String str) {
    if (str != null) {
        int length = str.length ();
        char ch [] = str.toCharArray ();
        int[] charCount = new int[256]; 
  
        for (int i = 0; i < length; i++) {
            charCount[ch[i]]++; 
        }
            for (int i = 0; i < 256; i++) { 
            if (charCount[i] != 0) { 
                System.out.println("Number of Occurrence of " + (char)i +  
                        " is " + charCount[i]); 
            } 
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
815
0
Gpt3D_Clone815_0.java 1 21
Gpt3D_Clone815_0.java 22 37
----------------------------------------

public static void countString (String str, char value) {
    String [] arr = str.split ("");
    StringBuffer tempString = new StringBuffer ();
    for (String s : arr) {
        tempString.append (s);
        for (char ch : s.toCharArray ()) {
            System.out.println ("Number of Occurrence of " + ch + " is:" + tempString.chars ().filter (i -> i == ch).count ());
        }
    }
    if (! (Character.toString (value).isEmpty ())) {
        StringBuffer tempString2 = new StringBuffer ();
        for (String s : arr) {
            tempString2.append (s);
            for (char ch : s.toCharArray ()) {
                if (ch == value) {
                    System.out.println ("Number of Occurrence of " + ch + " is:" + tempString2.chars ().filter (i -> i == ch).count ());
                }
            }
        }
    }
}
----------------------------------------

 public static void countString (String str, char value) {
    int count = 0;
    int index = 0;
    while (index >= 0 ) {
        int loc = str.indexOf(value, index);
        if (loc >= 0) {
            count++;
            index = loc + 1;
        } else {
            index = -1;
        }
    }
    System.out.println("Number of Occurrence of " + value + " is: " + count);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
815
1
Gpt3D_Clone815_1.java 1 21
Gpt3D_Clone815_1.java 22 33
----------------------------------------

public static void countString (String str, char value) {
    String [] arr = str.split ("");
    StringBuffer tempString = new StringBuffer ();
    for (String s : arr) {
        tempString.append (s);
        for (char ch : s.toCharArray ()) {
            System.out.println ("Number of Occurrence of " + ch + " is:" + tempString.chars ().filter (i -> i == ch).count ());
        }
    }
    if (! (Character.toString (value).isEmpty ())) {
        StringBuffer tempString2 = new StringBuffer ();
        for (String s : arr) {
            tempString2.append (s);
            for (char ch : s.toCharArray ()) {
                if (ch == value) {
                    System.out.println ("Number of Occurrence of " + ch + " is:" + tempString2.chars ().filter (i -> i == ch).count ());
                }
            }
        }
    }
}
----------------------------------------

 public static void countString (String str, char value) {
    int count = 0;
    for (int i=0; i <str.length() ;i++) {
        String s = String.valueOf(str.charAt(i));
        if (s.equals(Character.toString(value))){ 
            count++;
        }
    }
    System.out.println ("Number of Occurrence of "+value+" is: " + count);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
815
2
Gpt3D_Clone815_2.java 1 21
Gpt3D_Clone815_2.java 22 33
----------------------------------------

public static void countString (String str, char value) {
    String [] arr = str.split ("");
    StringBuffer tempString = new StringBuffer ();
    for (String s : arr) {
        tempString.append (s);
        for (char ch : s.toCharArray ()) {
            System.out.println ("Number of Occurrence of " + ch + " is:" + tempString.chars ().filter (i -> i == ch).count ());
        }
    }
    if (! (Character.toString (value).isEmpty ())) {
        StringBuffer tempString2 = new StringBuffer ();
        for (String s : arr) {
            tempString2.append (s);
            for (char ch : s.toCharArray ()) {
                if (ch == value) {
                    System.out.println ("Number of Occurrence of " + ch + " is:" + tempString2.chars ().filter (i -> i == ch).count ());
                }
            }
        }
    }
}
----------------------------------------

 public static void countString (String str, char value) {
    String tempString = str.replaceAll(" ", "");
    int count = 0;
    for (int i=0; i < tempString.length(); i++) {
        if (tempString.charAt(i) == value) {
            count++;
        }
    }
    System.out.println("Number of Occurrence of " + value + " is: " + count);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
815
3
Gpt3D_Clone815_3.java 1 21
Gpt3D_Clone815_3.java 22 33
----------------------------------------

public static void countString (String str, char value) {
    String [] arr = str.split ("");
    StringBuffer tempString = new StringBuffer ();
    for (String s : arr) {
        tempString.append (s);
        for (char ch : s.toCharArray ()) {
            System.out.println ("Number of Occurrence of " + ch + " is:" + tempString.chars ().filter (i -> i == ch).count ());
        }
    }
    if (! (Character.toString (value).isEmpty ())) {
        StringBuffer tempString2 = new StringBuffer ();
        for (String s : arr) {
            tempString2.append (s);
            for (char ch : s.toCharArray ()) {
                if (ch == value) {
                    System.out.println ("Number of Occurrence of " + ch + " is:" + tempString2.chars ().filter (i -> i == ch).count ());
                }
            }
        }
    }
}
----------------------------------------

 public static void countString (String str, char value) {
    String[] arr = str.split("");
    int count = 0;
    for (String s : arr) {
        if (s.charAt(0) == value) {
            count++;
        }
    }
    System.out.println("Number of Occurrence of " + value + " is: " + count);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
815
4
Gpt3D_Clone815_4.java 1 21
Gpt3D_Clone815_4.java 22 32
----------------------------------------

public static void countString (String str, char value) {
    String [] arr = str.split ("");
    StringBuffer tempString = new StringBuffer ();
    for (String s : arr) {
        tempString.append (s);
        for (char ch : s.toCharArray ()) {
            System.out.println ("Number of Occurrence of " + ch + " is:" + tempString.chars ().filter (i -> i == ch).count ());
        }
    }
    if (! (Character.toString (value).isEmpty ())) {
        StringBuffer tempString2 = new StringBuffer ();
        for (String s : arr) {
            tempString2.append (s);
            for (char ch : s.toCharArray ()) {
                if (ch == value) {
                    System.out.println ("Number of Occurrence of " + ch + " is:" + tempString2.chars ().filter (i -> i == ch).count ());
                }
            }
        }
    }
}
----------------------------------------

 public static void countString (String str, char value) {
    int count = 0;
    for (int i = 0; i < str.length(); i++) {
        if (str.charAt(i) == value) {
            count++;
        }
    }
    System.out.println("Number of Occurrence of " + value + " is: " + count);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
815
5
Gpt3D_Clone815_5.java 1 21
Gpt3D_Clone815_5.java 22 32
----------------------------------------

public static void countString (String str, char value) {
    String [] arr = str.split ("");
    StringBuffer tempString = new StringBuffer ();
    for (String s : arr) {
        tempString.append (s);
        for (char ch : s.toCharArray ()) {
            System.out.println ("Number of Occurrence of " + ch + " is:" + tempString.chars ().filter (i -> i == ch).count ());
        }
    }
    if (! (Character.toString (value).isEmpty ())) {
        StringBuffer tempString2 = new StringBuffer ();
        for (String s : arr) {
            tempString2.append (s);
            for (char ch : s.toCharArray ()) {
                if (ch == value) {
                    System.out.println ("Number of Occurrence of " + ch + " is:" + tempString2.chars ().filter (i -> i == ch).count ());
                }
            }
        }
    }
}
----------------------------------------

 public static void countString (String str, char value) {
    int count = 0;
    for (char c : str.toCharArray()) {
        if (c == value) {
            count++;
        }
    }
    System.out.println("Number of Occurrence of " + value + " is: " + count);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
815
6
Gpt3D_Clone815_6.java 1 21
Gpt3D_Clone815_6.java 22 31
----------------------------------------

public static void countString (String str, char value) {
    String [] arr = str.split ("");
    StringBuffer tempString = new StringBuffer ();
    for (String s : arr) {
        tempString.append (s);
        for (char ch : s.toCharArray ()) {
            System.out.println ("Number of Occurrence of " + ch + " is:" + tempString.chars ().filter (i -> i == ch).count ());
        }
    }
    if (! (Character.toString (value).isEmpty ())) {
        StringBuffer tempString2 = new StringBuffer ();
        for (String s : arr) {
            tempString2.append (s);
            for (char ch : s.toCharArray ()) {
                if (ch == value) {
                    System.out.println ("Number of Occurrence of " + ch + " is:" + tempString2.chars ().filter (i -> i == ch).count ());
                }
            }
        }
    }
}
----------------------------------------

 public static void countString (String str, char value) {
    int count = 0;
    for (int i=0; i <str.length() ;i++) {
        if(str.substring(i,i+1).equals(Character.toString(value))) 
            count++;
    }
    System.out.println ("Number of Occurrence of "+value+" is: " + count);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
815
7
Gpt3D_Clone815_7.java 1 21
Gpt3D_Clone815_7.java 22 31
----------------------------------------

public static void countString (String str, char value) {
    String [] arr = str.split ("");
    StringBuffer tempString = new StringBuffer ();
    for (String s : arr) {
        tempString.append (s);
        for (char ch : s.toCharArray ()) {
            System.out.println ("Number of Occurrence of " + ch + " is:" + tempString.chars ().filter (i -> i == ch).count ());
        }
    }
    if (! (Character.toString (value).isEmpty ())) {
        StringBuffer tempString2 = new StringBuffer ();
        for (String s : arr) {
            tempString2.append (s);
            for (char ch : s.toCharArray ()) {
                if (ch == value) {
                    System.out.println ("Number of Occurrence of " + ch + " is:" + tempString2.chars ().filter (i -> i == ch).count ());
                }
            }
        }
    }
}
----------------------------------------

 public static void countString (String str, char value) {
    int count = 0;
    for (int i = 0; i < str.length(); i++) {
        if (str.charAt(i) == value) count++;
    }
    System.out.println("Number of Occurrence of " + value + " is: " + count);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
815
8
Gpt3D_Clone815_8.java 1 21
Gpt3D_Clone815_8.java 22 30
----------------------------------------

public static void countString (String str, char value) {
    String [] arr = str.split ("");
    StringBuffer tempString = new StringBuffer ();
    for (String s : arr) {
        tempString.append (s);
        for (char ch : s.toCharArray ()) {
            System.out.println ("Number of Occurrence of " + ch + " is:" + tempString.chars ().filter (i -> i == ch).count ());
        }
    }
    if (! (Character.toString (value).isEmpty ())) {
        StringBuffer tempString2 = new StringBuffer ();
        for (String s : arr) {
            tempString2.append (s);
            for (char ch : s.toCharArray ()) {
                if (ch == value) {
                    System.out.println ("Number of Occurrence of " + ch + " is:" + tempString2.chars ().filter (i -> i == ch).count ());
                }
            }
        }
    }
}
----------------------------------------

 public static void countString (String str, char value) {
    int count = 0;
    for (Character c : str.toCharArray()) 
        if (c == value) 
            count++;
    System.out.println ("Number of Occurrence of "+value+" is: " + count);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
815
9
Gpt3D_Clone815_9.java 1 21
Gpt3D_Clone815_9.java 22 30
----------------------------------------

public static void countString (String str, char value) {
    String [] arr = str.split ("");
    StringBuffer tempString = new StringBuffer ();
    for (String s : arr) {
        tempString.append (s);
        for (char ch : s.toCharArray ()) {
            System.out.println ("Number of Occurrence of " + ch + " is:" + tempString.chars ().filter (i -> i == ch).count ());
        }
    }
    if (! (Character.toString (value).isEmpty ())) {
        StringBuffer tempString2 = new StringBuffer ();
        for (String s : arr) {
            tempString2.append (s);
            for (char ch : s.toCharArray ()) {
                if (ch == value) {
                    System.out.println ("Number of Occurrence of " + ch + " is:" + tempString2.chars ().filter (i -> i == ch).count ());
                }
            }
        }
    }
}
----------------------------------------

 public static void countString (String str, char value) {
    int count = 0;
    for (int i = 0; i < str.length (); i++) 
        if (str.charAt (i) == value) 
            count++;
    System.out.println ("Number of Occurrence of "+value+" is: " + count);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
816
0
Gpt3D_Clone816_0.java 1 8
Gpt3D_Clone816_0.java 9 21
----------------------------------------

public static void countString (String str, char searchKey) {
    String count = "";
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.charAt (i) == searchKey) count += str.charAt (i) + "\n";
    }
    System.out.println (count + "\nNumber of Occurrence of " + searchKey + " is " + count.length () + " in string " + str);
}
----------------------------------------

 public static void countString (String str, char searchKey) {
    String count = "";
    int ctr = 0;
    for (int i = 0; i < str.length (); i++) {
        if (str.charAt (i) == searchKey) { 
            count += str.charAt (i); 
            ctr += 1;
        }
    }
    System.out.println ("Number of Occurrence of " + searchKey + " is " + ctr + " in string " + str + "\nOccurrences: " + count);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
816
1
Gpt3D_Clone816_1.java 1 8
Gpt3D_Clone816_1.java 9 21
----------------------------------------

public static void countString (String str, char searchKey) {
    String count = "";
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.charAt (i) == searchKey) count += str.charAt (i) + "\n";
    }
    System.out.println (count + "\nNumber of Occurrence of " + searchKey + " is " + count.length () + " in string " + str);
}
----------------------------------------

 public static void countString (String str, char searchKey) {
    String count = "";
    int ctr = 0;
    for (int i = 0; i < str.length (); i++) {
        if (str.charAt (i) == searchKey) { 
            count += str.charAt (i); 
            ctr++;
        }
    }
    System.out.println (count + "\nNumber of Occurrence of " + searchKey + " is " + ctr + " in string " + str);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
816
2
Gpt3D_Clone816_2.java 1 8
Gpt3D_Clone816_2.java 9 19
----------------------------------------

public static void countString (String str, char searchKey) {
    String count = "";
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.charAt (i) == searchKey) count += str.charAt (i) + "\n";
    }
    System.out.println (count + "\nNumber of Occurrence of " + searchKey + " is " + count.length () + " in string " + str);
}
----------------------------------------

 public static void countString (String str, char searchKey) {
    int ctr = 0;
    for (int i = 0; i < str.length (); i++) {
        if (str.charAt (i) == searchKey) { 
            ctr ++;
        }
    }
    System.out.println("Number of Times '" + searchKey + "' appears in the string '" + str + "': " +  ctr);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
816
3
Gpt3D_Clone816_3.java 1 8
Gpt3D_Clone816_3.java 9 19
----------------------------------------

public static void countString (String str, char searchKey) {
    String count = "";
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.charAt (i) == searchKey) count += str.charAt (i) + "\n";
    }
    System.out.println (count + "\nNumber of Occurrence of " + searchKey + " is " + count.length () + " in string " + str);
}
----------------------------------------

 public static void countString (String str, char searchKey) {
    int ctr = 0;
    for (int i = 0; i < str.length (); i++) {
        if (str.charAt (i) == searchKey) { 
            ctr++;
        }
    }
    System.out.println("Number of Occurrences of '" + searchKey + "' in the string '" + str + "': " + ctr);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
816
4
Gpt3D_Clone816_4.java 1 8
Gpt3D_Clone816_4.java 9 19
----------------------------------------

public static void countString (String str, char searchKey) {
    String count = "";
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.charAt (i) == searchKey) count += str.charAt (i) + "\n";
    }
    System.out.println (count + "\nNumber of Occurrence of " + searchKey + " is " + count.length () + " in string " + str);
}
----------------------------------------

 public static void countString (String str, char searchKey) {
    int ctr = 0;
    for (int i = 0; i < str.length (); i++) {
        if (str.charAt (i) == searchKey) { 
            ctr += 1; 
        }
    }
    System.out.println("Number of Occurrences of " + searchKey + " is " + ctr + " in string " + str);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
816
5
Gpt3D_Clone816_5.java 1 8
Gpt3D_Clone816_5.java 9 19
----------------------------------------

public static void countString (String str, char searchKey) {
    String count = "";
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.charAt (i) == searchKey) count += str.charAt (i) + "\n";
    }
    System.out.println (count + "\nNumber of Occurrence of " + searchKey + " is " + count.length () + " in string " + str);
}
----------------------------------------

 public static void countString (String str, char searchKey) {
    int count = 0;
    for (int i = 0; i < str.length (); i++) {
        if (str.charAt (i) == searchKey) { 
            count++;
        }
    }
    System.out.println("Number of Occurrences of " + searchKey + " is " + count + " in string " + str);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
816
6
Gpt3D_Clone816_6.java 1 8
Gpt3D_Clone816_6.java 9 19
----------------------------------------

public static void countString (String str, char searchKey) {
    String count = "";
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.charAt (i) == searchKey) count += str.charAt (i) + "\n";
    }
    System.out.println (count + "\nNumber of Occurrence of " + searchKey + " is " + count.length () + " in string " + str);
}
----------------------------------------

 public static void countString (String str, char searchKey) {
    int ctr = 0;
    for (int i = 0; i < str.length (); i++) {
        if (str.charAt (i) == searchKey) { 
            ctr++;
        }
    }
    System.out.println("Number of Occurrences of '" + searchKey + "' in the string '" + str + "': " + ctr);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
816
7
Gpt3D_Clone816_7.java 1 8
Gpt3D_Clone816_7.java 9 19
----------------------------------------

public static void countString (String str, char searchKey) {
    String count = "";
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.charAt (i) == searchKey) count += str.charAt (i) + "\n";
    }
    System.out.println (count + "\nNumber of Occurrence of " + searchKey + " is " + count.length () + " in string " + str);
}
----------------------------------------

 public static void countString(String str, char searchKey){
    int count = 0;
    for (int i = 0; i<str.length(); i++){
        if (str.charAt(i) == searchKey){
            count++;
        }
    }
    System.out.println("Number of Occurrences of " + searchKey + " is " + count + " in string " + str);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
816
8
Gpt3D_Clone816_8.java 1 8
Gpt3D_Clone816_8.java 9 17
----------------------------------------

public static void countString (String str, char searchKey) {
    String count = "";
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.charAt (i) == searchKey) count += str.charAt (i) + "\n";
    }
    System.out.println (count + "\nNumber of Occurrence of " + searchKey + " is " + count.length () + " in string " + str);
}
----------------------------------------

 public static void countString (String str, char searchKey) {
    int ctr = 0;
    for (int i = 0; i < str.length (); i++) {
        if (str.charAt (i) == searchKey) ctr++;
    }
    System.out.println("Number of Occurrence of " + searchKey + " is " + ctr + " in string " + str);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
816
9
Gpt3D_Clone816_9.java 1 8
Gpt3D_Clone816_9.java 9 18
----------------------------------------

public static void countString (String str, char searchKey) {
    String count = "";
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.charAt (i) == searchKey) count += str.charAt (i) + "\n";
    }
    System.out.println (count + "\nNumber of Occurrence of " + searchKey + " is " + count.length () + " in string " + str);
}
----------------------------------------

 public static void countString (String str, char searchKey) {
    int ctr = 0;
    for (int i = 0; i < str.length (); i++) {
        if (str.charAt (i) == searchKey) 
            ctr++;
    }
    System.out.println("The char '" + searchKey + "' appears " + ctr + " times in the string '" + str + "'");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
818
0
Gpt3D_Clone818_0.java 1 8
Gpt3D_Clone818_0.java 9 22
----------------------------------------

public static void countString (String str, char searchKey) {
    String count = "";
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.charAt (i) == searchKey) count += str.charAt (i) + "\n";
    }
    System.out.println (count + "\nNumber of Occurrence of " + searchKey + " is " + count.length () + " in string " + str);
}
----------------------------------------

 public static void countString (String str, char searchKey){ 
    String temp = str; 
    int count = 0; 
    for(int i=0; i<temp.length(); i++){ 
        if(temp.charAt(i)==searchKey){ 
            count++; 
            temp = temp.substring(i + 1); 
        } 
    } 
    System.out.println(" Number of Occurrence of " + searchKey + 
                       " is " + count + " in string " + str); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
818
1
Gpt3D_Clone818_1.java 1 8
Gpt3D_Clone818_1.java 9 23
----------------------------------------

public static void countString (String str, char searchKey) {
    String count = "";
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.charAt (i) == searchKey) count += str.charAt (i) + "\n";
    }
    System.out.println (count + "\nNumber of Occurrence of " + searchKey + " is " + count.length () + " in string " + str);
}
----------------------------------------

 public static void countString(String str, char searchKey){ 
    int count = 0; 
    for (int i = 0; i < str.length(); i++){ 
        if(str.charAt(i)==searchKey){ 
            if(i == 0 || str.charAt(i-1) != searchKey){ 
            count++; 
            } 
        } 
    } 
    System.out.println("Number of Occurrence of " + searchKey + 
                       " is " + count + " in string " + str); 
                                       
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
818
2
Gpt3D_Clone818_2.java 1 8
Gpt3D_Clone818_2.java 9 22
----------------------------------------

public static void countString (String str, char searchKey) {
    String count = "";
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.charAt (i) == searchKey) count += str.charAt (i) + "\n";
    }
    System.out.println (count + "\nNumber of Occurrence of " + searchKey + " is " + count.length () + " in string " + str);
}
----------------------------------------

 public static void countString(String str, char searchKey) 
{ 
    int counter = 0; 
    int index = str.indexOf(searchKey); 
    while (index != -1) 
    { 
        counter++; 
        index = str.indexOf(searchKey, index + 1); 
    } 
    System.out.println("Number of Occurrence of " + searchKey + 
                       " is " + counter + " in string " + str); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
818
3
Gpt3D_Clone818_3.java 1 8
Gpt3D_Clone818_3.java 9 21
----------------------------------------

public static void countString (String str, char searchKey) {
    String count = "";
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.charAt (i) == searchKey) count += str.charAt (i) + "\n";
    }
    System.out.println (count + "\nNumber of Occurrence of " + searchKey + " is " + count.length () + " in string " + str);
}
----------------------------------------

 public static void countString (String str, char searchKey){ 
    int count = 0; 
    char[] charArray = str.toCharArray(); 
    for (int i = 0; i < charArray.length; i++){ 
            if (charArray[i] == searchKey) { 
                count++; 
             } 
        } 
    System.out.println("Number of Occurrence of " + searchKey + 
                       " is " + count + " in string " + str); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
818
4
Gpt3D_Clone818_4.java 1 8
Gpt3D_Clone818_4.java 9 21
----------------------------------------

public static void countString (String str, char searchKey) {
    String count = "";
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.charAt (i) == searchKey) count += str.charAt (i) + "\n";
    }
    System.out.println (count + "\nNumber of Occurrence of " + searchKey + " is " + count.length () + " in string " + str);
}
----------------------------------------

 public static void countString(String str, char searchKey){ 
    int count = 0; 
    int len = str.length(); 
    for(int pos = 0; pos<len ; pos++){ 
        if(str.charAt(pos) == searchKey){ 
            count++;  
        } 
    } 
    System.out.println(" Number of Occurrence of " + searchKey + 
                       " is " + count + " in string " + str); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
818
5
Gpt3D_Clone818_5.java 1 8
Gpt3D_Clone818_5.java 9 20
----------------------------------------

public static void countString (String str, char searchKey) {
    String count = "";
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.charAt (i) == searchKey) count += str.charAt (i) + "\n";
    }
    System.out.println (count + "\nNumber of Occurrence of " + searchKey + " is " + count.length () + " in string " + str);
}
----------------------------------------

 public static void countString (String str, char searchKey) {
    String count = "";
    int len = str.length ();
    for (int i = 0; i < len; i ++) {
        if (str.charAt (i) == searchKey) {
            count += str.charAt (i) + "\n";
        }
    }
    System.out.println (count + "\nNumber of Occurrence of " + searchKey + " is " + count.length () + " in string " + str);
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
818
6
Gpt3D_Clone818_6.java 1 8
Gpt3D_Clone818_6.java 9 22
----------------------------------------

public static void countString (String str, char searchKey) {
    String count = "";
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.charAt (i) == searchKey) count += str.charAt (i) + "\n";
    }
    System.out.println (count + "\nNumber of Occurrence of " + searchKey + " is " + count.length () + " in string " + str);
}
----------------------------------------

 public static void countString (String str, char searchKey){ 
     int count = 0; 
     char[] strArray = str.toCharArray(); 
     
     for (int i = 0; i < strArray.length; i++) { 
            if (strArray[i] == searchKey) { 
                count++; 
             } 
        } 
     System.out.println("Number of Occurrence of " + searchKey + 
                        " is " + count + " in string " + str); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
818
7
Gpt3D_Clone818_7.java 1 8
Gpt3D_Clone818_7.java 9 20
----------------------------------------

public static void countString (String str, char searchKey) {
    String count = "";
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.charAt (i) == searchKey) count += str.charAt (i) + "\n";
    }
    System.out.println (count + "\nNumber of Occurrence of " + searchKey + " is " + count.length () + " in string " + str);
}
----------------------------------------

 public static void countString (String str, char searchKey){ 
    int count = 0; 
    for (char c : str.toCharArray()){ 
        if (c == searchKey) { 
        count++; 
        } 
    } 
    System.out.println("Number ofOccurence of " + searchKey + 
    " is " + count + " in string " + str); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
818
8
Gpt3D_Clone818_8.java 1 8
Gpt3D_Clone818_8.java 9 20
----------------------------------------

public static void countString (String str, char searchKey) {
    String count = "";
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.charAt (i) == searchKey) count += str.charAt (i) + "\n";
    }
    System.out.println (count + "\nNumber of Occurrence of " + searchKey + " is " + count.length () + " in string " + str);
}
----------------------------------------

 public static void countString (String str, char searchKey) {
    int count = 0;
    for(char ch : str.toCharArray()){
        if(ch == searchKey) {
            count++;
        }
    }
    System.out.println("Number of Occurrence of " + searchKey + 
                        " is " + count + " in string " + str); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
818
9
Gpt3D_Clone818_9.java 1 8
Gpt3D_Clone818_9.java 9 21
----------------------------------------

public static void countString (String str, char searchKey) {
    String count = "";
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.charAt (i) == searchKey) count += str.charAt (i) + "\n";
    }
    System.out.println (count + "\nNumber of Occurrence of " + searchKey + " is " + count.length () + " in string " + str);
}
----------------------------------------

 public static void countString (String str, char searchKey) 
{ 
    int count = 0; 
    for (int i = 0; i < str.length(); i++) 
    { 
        if (str.charAt(i) == searchKey) 
            count++; 
    } 
    System.out.println(" Number of Occurrence of " + searchKey + 
                       " is " + count + " in string " + str); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
819
0
Gpt3D_Clone819_0.java 1 8
Gpt3D_Clone819_0.java 9 22
----------------------------------------

public static void countString (String str, char searchKey) {
    String count = "";
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.charAt (i) == searchKey) count += str.charAt (i) + "\n";
    }
    System.out.println (count + "\nNumber of Occurrence of " + searchKey + " is " + count.length () + " in string " + str);
}
----------------------------------------

 public static void countString(String str, char searchKey){
   int count = 0;
   int index = 0;
   while (index >= 0 ){
      index = str.indexOf(searchKey, index);
      if (index >= 0){
        count++;
        index++;
      }
   }
   System.out.println("Number of Occurrence of " + searchKey + " is " + count + " in string " + str);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
819
1
Gpt3D_Clone819_1.java 1 8
Gpt3D_Clone819_1.java 9 18
----------------------------------------

public static void countString (String str, char searchKey) {
    String count = "";
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.charAt (i) == searchKey) count += str.charAt (i) + "\n";
    }
    System.out.println (count + "\nNumber of Occurrence of " + searchKey + " is " + count.length () + " in string " + str);
}
----------------------------------------

 public static void countString (String str, char searchKey) {
    int count = 0;
    char[] ch = str.toCharArray();
    for (int i = 0; i < ch.length; i++) {
        if (ch[i] == searchKey) count++;
    }
    System.out.println ("Number of Occurrence of " + searchKey + " is " + count + " in string " + str);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
819
2
Gpt3D_Clone819_2.java 1 8
Gpt3D_Clone819_2.java 9 20
----------------------------------------

public static void countString (String str, char searchKey) {
    String count = "";
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.charAt (i) == searchKey) count += str.charAt (i) + "\n";
    }
    System.out.println (count + "\nNumber of Occurrence of " + searchKey + " is " + count.length () + " in string " + str);
}
----------------------------------------

 public static void countString (String str, char searchKey) {
    int count = 0;
    for (int i = 0; i < str.length();i++){
     if (str.charAt(i) == searchKey){ 
            count++;
        }
    }
    System.out.println ("Number of Occurrence of " + searchKey + " is " + count + " in string " + str);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
819
3
Gpt3D_Clone819_3.java 1 8
Gpt3D_Clone819_3.java 9 17
----------------------------------------

public static void countString (String str, char searchKey) {
    String count = "";
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.charAt (i) == searchKey) count += str.charAt (i) + "\n";
    }
    System.out.println (count + "\nNumber of Occurrence of " + searchKey + " is " + count.length () + " in string " + str);
}
----------------------------------------

 public static void countString(String str, char searchKey){
    int count = 0;
    char[] car = str.toCharArray();
    for (int i=0; i< str.length(); i++) 
        if (car[i]== searchKey) count++;
    System.out.println("Number of Occurrence of " + searchKey + " is " + count + " in string " + str);
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
819
4
Gpt3D_Clone819_4.java 1 8
Gpt3D_Clone819_4.java 9 18
----------------------------------------

public static void countString (String str, char searchKey) {
    String count = "";
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.charAt (i) == searchKey) count += str.charAt (i) + "\n";
    }
    System.out.println (count + "\nNumber of Occurrence of " + searchKey + " is " + count.length () + " in string " + str);
}
----------------------------------------

 public static void countString (String str, char searchKey) {
    int count = 0;
    for (int i = str.indexOf (searchKey); i != -1;
        i = str.indexOf (searchKey, i + 1)) { 
        count++; 
    }
    System.out.println ("Number of Occurrence of " + searchKey + " is " + count + " in string " + str);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
819
5
Gpt3D_Clone819_5.java 1 8
Gpt3D_Clone819_5.java 9 17
----------------------------------------

public static void countString (String str, char searchKey) {
    String count = "";
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.charAt (i) == searchKey) count += str.charAt (i) + "\n";
    }
    System.out.println (count + "\nNumber of Occurrence of " + searchKey + " is " + count.length () + " in string " + str);
}
----------------------------------------

 public static void countString(String str, char searchKey){
    int count = 0;
    String[] arr = str.split("");
    for(int i = 0; i < arr.length; i++)
        if(arr[i].equals(Character.toString(searchKey))) count++;
    System.out.println("Number of Occurrence of " + searchKey + " is " + count + " in string " + str);
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
819
6
Gpt3D_Clone819_6.java 1 8
Gpt3D_Clone819_6.java 9 18
----------------------------------------

public static void countString (String str, char searchKey) {
    String count = "";
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.charAt (i) == searchKey) count += str.charAt (i) + "\n";
    }
    System.out.println (count + "\nNumber of Occurrence of " + searchKey + " is " + count.length () + " in string " + str);
}
----------------------------------------

 public static void countString (String str, char searchKey) {
    int count = 0;
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.charAt (i) == searchKey) count++;
    }
    System.out.println ("Number of Occurrence of " + searchKey + " is " + count + " in string " + str);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
819
7
Gpt3D_Clone819_7.java 1 8
Gpt3D_Clone819_7.java 9 16
----------------------------------------

public static void countString (String str, char searchKey) {
    String count = "";
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.charAt (i) == searchKey) count += str.charAt (i) + "\n";
    }
    System.out.println (count + "\nNumber of Occurrence of " + searchKey + " is " + count.length () + " in string " + str);
}
----------------------------------------

 public static void countString(String str, char searchKey){
    int count = 0;
    for(char ch : str.toCharArray() )
        if(ch == searchKey) count++;
    System.out.println("Number of Occurrence of " + searchKey + " is " + count + " in string " + str);  
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
819
8
Gpt3D_Clone819_8.java 1 8
Gpt3D_Clone819_8.java 9 16
----------------------------------------

public static void countString (String str, char searchKey) {
    String count = "";
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.charAt (i) == searchKey) count += str.charAt (i) + "\n";
    }
    System.out.println (count + "\nNumber of Occurrence of " + searchKey + " is " + count.length () + " in string " + str);
}
----------------------------------------

 public static void countString(String str, char searchKey){
    int count = 0;
    for(int i=0; i<str.length(); i++)
        if(str.charAt(i) == searchKey) count++;
    System.out.println("Number of Occurrence of " + searchKey + " is " + count + " in string " + str);
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
819
9
Gpt3D_Clone819_9.java 1 8
Gpt3D_Clone819_9.java 9 16
----------------------------------------

public static void countString (String str, char searchKey) {
    String count = "";
    for (int i = 0;
    i < str.length (); i ++) {
        if (str.charAt (i) == searchKey) count += str.charAt (i) + "\n";
    }
    System.out.println (count + "\nNumber of Occurrence of " + searchKey + " is " + count.length () + " in string " + str);
}
----------------------------------------

 public static void countString(String str, char searchKey){
    int count =0;
    for(String ch : str.split(""))
        if(ch.equals(Character.toString(searchKey))) count++;
    System.out.println("Number of Occurrence of " + searchKey + " is " + count + " in string " + str);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
820
0
Gpt3D_Clone820_0.java 1 16
Gpt3D_Clone820_0.java 17 35
----------------------------------------

public static String numLetters (String s) {
    int [] count = new int [26];
    for (int i = 0;
    i < s.length (); i ++) {
        char c = s.charAt (i);
        count [(int) (c - 'a')] ++;
    }
    String ans = "";
    for (int i = 0;
    i < 26; i ++) {
        if (count [i] != 0) {
            ans += String.valueOf (count [i]) + (char) (i + 'a');
        }
    }
    return ans;
}
----------------------------------------

 public static String numLetters (String s){
    StringBuilder ans = new StringBuilder("");
    HashMap<Character, Integer> map = new HashMap<>();
    for(int i = 0; i < s.length(); i++){
        char c = s.charAt(i);
        if(map.containsKey(c)){
            map.put(c, map.get(c) + 1);
        }
        else{
            map.put(c, 1);
        }
    }
    for (Map.Entry c : map.entrySet()){
        ans.append(String.valueOf(c.getValue())).append((char) (c.getKey()));
    }
    return ans.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
820
3
Gpt3D_Clone820_3.java 1 16
Gpt3D_Clone820_3.java 17 36
----------------------------------------

public static String numLetters (String s) {
    int [] count = new int [26];
    for (int i = 0;
    i < s.length (); i ++) {
        char c = s.charAt (i);
        count [(int) (c - 'a')] ++;
    }
    String ans = "";
    for (int i = 0;
    i < 26; i ++) {
        if (count [i] != 0) {
            ans += String.valueOf (count [i]) + (char) (i + 'a');
        }
    }
    return ans;
}
----------------------------------------

 public static String numLetters (String s) {
    TreeMap<Character, Integer> tree = new TreeMap<>();
    String ans = "";
    for (int i = 0; i < s.length(); i++) {
        char c = s.charAt(i);
        if (tree.containsKey(c))
            tree.put(c, tree.get(c) + 1);
        else
            tree.put(c, 1);
    }
    for (Map.Entry<Character, Integer> set : tree.entrySet()) {
        ans += set.getValue() + Character.toString(set.getKey());
    }
    return ans;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
820
4
Gpt3D_Clone820_4.java 1 16
Gpt3D_Clone820_4.java 17 32
----------------------------------------

public static String numLetters (String s) {
    int [] count = new int [26];
    for (int i = 0;
    i < s.length (); i ++) {
        char c = s.charAt (i);
        count [(int) (c - 'a')] ++;
    }
    String ans = "";
    for (int i = 0;
    i < 26; i ++) {
        if (count [i] != 0) {
            ans += String.valueOf (count [i]) + (char) (i + 'a');
        }
    }
    return ans;
}
----------------------------------------

 public static String numLetters (String s) {
    int [] count = new int[26];
    for(int i = 0; i < s.length(); i++) {
        int charPos = (int) (s.charAt(i) - 'a');
        count[charPos]++;
    }
    StringBuilder sb = new StringBuilder();
    for(int i = 0; i < 26; i++){
        if(count[i] != 0){
            sb.append(count[i]).append(Character.toString((char)(i + 'a')));
        }
    }
    return sb.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
820
5
Gpt3D_Clone820_5.java 1 16
Gpt3D_Clone820_5.java 17 31
----------------------------------------

public static String numLetters (String s) {
    int [] count = new int [26];
    for (int i = 0;
    i < s.length (); i ++) {
        char c = s.charAt (i);
        count [(int) (c - 'a')] ++;
    }
    String ans = "";
    for (int i = 0;
    i < 26; i ++) {
        if (count [i] != 0) {
            ans += String.valueOf (count [i]) + (char) (i + 'a');
        }
    }
    return ans;
}
----------------------------------------

 public static String numLetters (String s){
    String ans = "";
    int [] count = new int[26];
    for(int i = 0; i < s.length(); i++) {
        int charPos = (int) (s.charAt(i) - 'a');
        count[charPos]++;
    }
    for(int i = 0; i < 26; i++){
        if(count[i] != 0)
            ans += Integer.toString(count[i]) + Character.toString((char) (i + 'a'));
    }
    return ans;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
820
6
Gpt3D_Clone820_6.java 1 16
Gpt3D_Clone820_6.java 17 34
----------------------------------------

public static String numLetters (String s) {
    int [] count = new int [26];
    for (int i = 0;
    i < s.length (); i ++) {
        char c = s.charAt (i);
        count [(int) (c - 'a')] ++;
    }
    String ans = "";
    for (int i = 0;
    i < 26; i ++) {
        if (count [i] != 0) {
            ans += String.valueOf (count [i]) + (char) (i + 'a');
        }
    }
    return ans;
}
----------------------------------------

 public static String numLetters (String s) {
    int [] count = new int [26];
    for (int i = 0;
    i < s.length (); i ++) {
        count[s.charAt(i) - 'a'] ++;
    }
    StringBuilder sb = new StringBuilder();
    for (int i = 0;
    i < 26; i ++) {
        if (count [i] != 0) {
            sb.append(Integer.toString(count [i]) + Character.toString((char) (i + 'a')));
        }
    }
    return sb.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
820
8
Gpt3D_Clone820_8.java 1 16
Gpt3D_Clone820_8.java 17 33
----------------------------------------

public static String numLetters (String s) {
    int [] count = new int [26];
    for (int i = 0;
    i < s.length (); i ++) {
        char c = s.charAt (i);
        count [(int) (c - 'a')] ++;
    }
    String ans = "";
    for (int i = 0;
    i < 26; i ++) {
        if (count [i] != 0) {
            ans += String.valueOf (count [i]) + (char) (i + 'a');
        }
    }
    return ans;
}
----------------------------------------

 public static String numLetters (String s) {
    int [] count = new int [26];
    for (char ch : s.toCharArray()) {
        count[ch - 'a'] ++;
    }
    StringBuilder sb = new StringBuilder();
    for (int i = 0;
    i < 26; i ++) {
        if (count [i] != 0) {
            sb.append(count [i]).append((char) (i + 'a'));
        }
    }
    return sb.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
820
9
Gpt3D_Clone820_9.java 1 16
Gpt3D_Clone820_9.java 17 29
----------------------------------------

public static String numLetters (String s) {
    int [] count = new int [26];
    for (int i = 0;
    i < s.length (); i ++) {
        char c = s.charAt (i);
        count [(int) (c - 'a')] ++;
    }
    String ans = "";
    for (int i = 0;
    i < 26; i ++) {
        if (count [i] != 0) {
            ans += String.valueOf (count [i]) + (char) (i + 'a');
        }
    }
    return ans;
}
----------------------------------------

 public static String numLetters (String s) {
    Map<Character, Integer> counts = new HashMap<>();
    for(char c : s.toCharArray()) {
        counts.put(c, counts.getOrDefault(c, 0) + 1);
    }
    StringBuilder sb = new StringBuilder();
    for(Map.Entry<Character, Integer> e : counts.entrySet()) {
        sb.append(e.getValue()).append(e.getKey());
    }
    return sb.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
822
0
Gpt3D_Clone822_0.java 1 9
Gpt3D_Clone822_0.java 10 25
----------------------------------------

public void filter (String [] words, String text) {
    for (int i = 0;
    i < words.length; i ++) {
        if (text.toLowerCase ().contains (words [i].toLowerCase ())) {
            System.out.println (text);
            break;
        }
    }
}
----------------------------------------

 public void filter (String [] words, String text) {
    String [] allWords = text.split(" ");
    boolean isFound = false;
    for (String word : words) {
        for (int i = 0; i < allWords.length; i++) {
            if (word.equalsIgnoreCase(allWords[i])) {
                isFound = true;
            }
        }
    }
    if (isFound) {
        System.out.println(text);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
822
5
Gpt3D_Clone822_5.java 1 9
Gpt3D_Clone822_5.java 10 18
----------------------------------------

public void filter (String [] words, String text) {
    for (int i = 0;
    i < words.length; i ++) {
        if (text.toLowerCase ().contains (words [i].toLowerCase ())) {
            System.out.println (text);
            break;
        }
    }
}
----------------------------------------

 public void filter (String [] words, String text) {
    List<String> wordList = Arrays.asList(words);
   
    if(wordList.stream().anyMatch(text::contains)){
        System.out.println (text);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
823
0
Gpt3D_Clone823_0.java 1 9
Gpt3D_Clone823_0.java 10 32
----------------------------------------

public void filter (String [] words, String text) {
    for (int i = 0;
    i < words.length; i ++) {
        if (text.toLowerCase ().contains (words [i].toLowerCase ())) {
            System.out.println (text);
            break;
        }
    }
}
----------------------------------------

  public void filter (String [] words, String text) {
    String[] testWords = text.split("\\s+");
    boolean allWordsFound = true;
    for (String word : words) {
        boolean found = false;
        for (String tWord : testWords) {
            if (tWord.toLowerCase().contains(word.toLowerCase())) {
                found = true;
                break;
            } 
        }
        if (!found) {
            allWordsFound = false;
            break;
        }
    }
    
    if (allWordsFound) {
        System.out.println(text);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
823
1
Gpt3D_Clone823_1.java 1 9
Gpt3D_Clone823_1.java 10 28
----------------------------------------

public void filter (String [] words, String text) {
    for (int i = 0;
    i < words.length; i ++) {
        if (text.toLowerCase ().contains (words [i].toLowerCase ())) {
            System.out.println (text);
            break;
        }
    }
}
----------------------------------------

  public void filter (String [] words, String text) {
    String[] testWords = text.split("\\s+");
    boolean flag = true;
    for (String word : words) {
        for (String tWord : testWords) {
            flag = true;
            if (tWord.toLowerCase().contains(word.toLowerCase())) {
                flag = false;
                break;
            } 
        }
    }
    
    if (flag) {
        System.out.println(text);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
823
2
Gpt3D_Clone823_2.java 1 9
Gpt3D_Clone823_2.java 10 27
----------------------------------------

public void filter (String [] words, String text) {
    for (int i = 0;
    i < words.length; i ++) {
        if (text.toLowerCase ().contains (words [i].toLowerCase ())) {
            System.out.println (text);
            break;
        }
    }
}
----------------------------------------

  public void filter (String [] words, String text) {
    String[] testWords = text.split("\\s+");
    boolean flag = true;
    for (String word : words) {
        for (String tWord : testWords) {
            if (tWord.toLowerCase().contains(word.toLowerCase())) {
                flag = false;
                break;
            } 
        }
    }
    
    if (flag) {
        System.out.println(text);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
823
3
Gpt3D_Clone823_3.java 1 9
Gpt3D_Clone823_3.java 10 27
----------------------------------------

public void filter (String [] words, String text) {
    for (int i = 0;
    i < words.length; i ++) {
        if (text.toLowerCase ().contains (words [i].toLowerCase ())) {
            System.out.println (text);
            break;
        }
    }
}
----------------------------------------

  public void filter (String [] words, String text) {
    String[] testWords = text.split("\\s+");
    boolean found = false;
    for (String word : words) {
        for (String tWord : testWords) {
            if (tWord.toLowerCase().contains(word.toLowerCase())) {
                found = true;
                break;
            } 
        }
    }
    
    if (!found) {
        System.out.println(text);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
823
4
Gpt3D_Clone823_4.java 1 9
Gpt3D_Clone823_4.java 10 25
----------------------------------------

public void filter (String [] words, String text) {
    for (int i = 0;
    i < words.length; i ++) {
        if (text.toLowerCase ().contains (words [i].toLowerCase ())) {
            System.out.println (text);
            break;
        }
    }
}
----------------------------------------

  public void filter (String [] words, String text) {
    boolean match = true;
    for (int i = 0;
    i < words.length; i ++) {
        if (!text.toLowerCase().contains(words[i].toLowerCase())) {
            match = false;
            break;
        } 
    }
    
    if (!match) {
        System.out.println(text);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
823
5
Gpt3D_Clone823_5.java 1 9
Gpt3D_Clone823_5.java 10 25
----------------------------------------

public void filter (String [] words, String text) {
    for (int i = 0;
    i < words.length; i ++) {
        if (text.toLowerCase ().contains (words [i].toLowerCase ())) {
            System.out.println (text);
            break;
        }
    }
}
----------------------------------------

  public void filter (String [] words, String text) {
    boolean flag = true;
     
    for (String word : words) {
        if (text.toLowerCase().contains(word.toLowerCase())) {
            flag = false;
            break;
        } 
    }
    
    if (flag) {
        System.out.println(text);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
823
6
Gpt3D_Clone823_6.java 1 9
Gpt3D_Clone823_6.java 10 24
----------------------------------------

public void filter (String [] words, String text) {
    for (int i = 0;
    i < words.length; i ++) {
        if (text.toLowerCase ().contains (words [i].toLowerCase ())) {
            System.out.println (text);
            break;
        }
    }
}
----------------------------------------

  public void filter (String [] words, String text) {
    boolean found = false;
    for (String word : words) {
        if (text.toLowerCase().contains(word.toLowerCase())) {
            found = true;
            break;
        } 
    }
    
    if (!found) {
        System.out.println(text);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
823
7
Gpt3D_Clone823_7.java 1 9
Gpt3D_Clone823_7.java 10 24
----------------------------------------

public void filter (String [] words, String text) {
    for (int i = 0;
    i < words.length; i ++) {
        if (text.toLowerCase ().contains (words [i].toLowerCase ())) {
            System.out.println (text);
            break;
        }
    }
}
----------------------------------------

  public void filter (String [] words, String text) {
    boolean found = true;
    for (String word : words) {
        if (!text.toLowerCase().contains(word.toLowerCase())) {
            found = false;
            break;
        } 
    }
    
    if (found) {
        System.out.println(text);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
823
8
Gpt3D_Clone823_8.java 1 9
Gpt3D_Clone823_8.java 10 25
----------------------------------------

public void filter (String [] words, String text) {
    for (int i = 0;
    i < words.length; i ++) {
        if (text.toLowerCase ().contains (words [i].toLowerCase ())) {
            System.out.println (text);
            break;
        }
    }
}
----------------------------------------

  public void filter (String [] words, String text) {
    boolean flag = true;
    for (int i = 0;
    i < words.length; i ++) {
        if (text.toLowerCase().contains(words[i].toLowerCase())) {
            flag = false;
            break;
        } 
    }
    
    if (flag) {
        System.out.println(text);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
823
9
Gpt3D_Clone823_9.java 1 9
Gpt3D_Clone823_9.java 10 25
----------------------------------------

public void filter (String [] words, String text) {
    for (int i = 0;
    i < words.length; i ++) {
        if (text.toLowerCase ().contains (words [i].toLowerCase ())) {
            System.out.println (text);
            break;
        }
    }
}
----------------------------------------

  public void filter (String [] words, String text) {
    boolean flag = false;
    for (int i = 0;
    i < words.length; i ++) {
        if (text.toLowerCase().contains(words[i].toLowerCase())) {
            flag = true;
            break;
        } 
    }
    
    if (!flag) {
        System.out.println(text);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
824
1
Gpt3D_Clone824_1.java 1 29
Gpt3D_Clone824_1.java 30 51
----------------------------------------

public static int [] solution (String S, int [] P, int [] Q) {
    int [] arr = new int [S.length ()];
    for (int i = 0;
    i < S.length (); i ++) {
        switch (S.charAt (i)) {
            case 'A' :
                arr [i] = 1;
                break;
            case 'C' :
                arr [i] = 2;
                break;
            case 'G' :
                arr [i] = 3;
                break;
            case 'T' :
                arr [i] = 4;
                break;
            default :
                break;
        }
    }
    segmentNode root = buildTree (arr, 0, S.length () - 1);
    int [] result = new int [P.length];
    for (int i = 0;
    i < P.length; i ++) {
        result [i] = getMin (root, P [i], Q [i]);
    }
    return result;
}
----------------------------------------

  public static int[] solution (String S, int[] P, int[] Q) {
    int[] arr = new int[S.length()];
    for (int x = 0; x < S.length(); x ++) {
        if (S.charAt (x) == 'A')
            arr[x] = 1;
        else if (S.charAt (x) == 'C')
            arr[x] = 2;
        else if (S.charAt (x) == 'G')
            arr[x] = 3;
        else if (S.charAt (x) == 'T')
            arr[x] = 4;
    }
    segmentNode root = buildTree(arr, 0, S.length() - 1);
    int[] result = new int[P.length];
    for (int i = 0; i < P.length; i++) {
      result[i] = getMin(root, P[i], Q[i]);
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
824
2
Gpt3D_Clone824_2.java 1 29
Gpt3D_Clone824_2.java 30 50
----------------------------------------

public static int [] solution (String S, int [] P, int [] Q) {
    int [] arr = new int [S.length ()];
    for (int i = 0;
    i < S.length (); i ++) {
        switch (S.charAt (i)) {
            case 'A' :
                arr [i] = 1;
                break;
            case 'C' :
                arr [i] = 2;
                break;
            case 'G' :
                arr [i] = 3;
                break;
            case 'T' :
                arr [i] = 4;
                break;
            default :
                break;
        }
    }
    segmentNode root = buildTree (arr, 0, S.length () - 1);
    int [] result = new int [P.length];
    for (int i = 0;
    i < P.length; i ++) {
        result [i] = getMin (root, P [i], Q [i]);
    }
    return result;
}
----------------------------------------

  public static int[] solution (String S, int[] P, int[] Q) {
    int[] arr = new int[S.length()];
    for (int i = 0; i < S.length(); i++) {
      if (S.charAt(i) == 'A')
        arr[i] = 1;
      if (S.charAt(i) == 'C')
        arr[i] = 2;
      if (S.charAt(i) == 'G')
        arr[i] = 3;
      if (S.charAt(i) == 'T')
        arr[i] = 4;
    }
    segmentNode root = buildTree(arr, 0, S.length() - 1);
    int[] result = new int[P.length];
    for (int i = 0; i < P.length; i++) {
      result[i] = getMin(root, P[i], Q[i]);
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
825
0
Gpt3D_Clone825_0.java 1 20
Gpt3D_Clone825_0.java 21 49
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    final char [] characterInput = S.toCharArray ();
    final int [] integerInput = new int [characterInput.length];
    for (int counter = 0;
    counter < characterInput.length; counter ++) {
        integerInput [counter] = characterMapping.get (characterInput [counter]);
    }
    int [] result = new int [P.length];
    for (int index = 0;
    index < P.length; index ++) {
        if (P [index] == Q [index]) {
            result [index] = integerInput [P [index]];
            break;
        }
        final int [] subArray = Arrays.copyOfRange (integerInput, P [index], Q [index] + 1);
        final int minimumValue = minimum (subArray);
        result [index] = minimumValue;
    }
    return result;
}
----------------------------------------

 public int[] solution (String S, int[] P, int[] Q) {
    int[] result = new int[P.length];
    char[] characterInput = S.toCharArray();
    int[] integerInput = new int[characterInput.length];
    for(int counter = 0; counter < characterInput.length; counter++) {
        switch (characterInput[counter]) {
            case 'A': integerInput[counter] = 1; break;
            case 'C': integerInput[counter] = 2; break;
            case 'G': integerInput[counter] = 3; break;
            case 'T': integerInput[counter] = 4; break;
        }
    }
    for (int index = 0; index < P.length; index++) {
        int[] subArray = new int[Q[index] - P[index] + 1];
        int i = 0;
        for(int position = P[index]; position <= Q[index]; position++) {
            subArray[i] = integerInput[position];
            i++;
        }
        int minimumValue = minimum (subArray);
        result[index] = minimumValue;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
825
1
Gpt3D_Clone825_1.java 1 20
Gpt3D_Clone825_1.java 21 47
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    final char [] characterInput = S.toCharArray ();
    final int [] integerInput = new int [characterInput.length];
    for (int counter = 0;
    counter < characterInput.length; counter ++) {
        integerInput [counter] = characterMapping.get (characterInput [counter]);
    }
    int [] result = new int [P.length];
    for (int index = 0;
    index < P.length; index ++) {
        if (P [index] == Q [index]) {
            result [index] = integerInput [P [index]];
            break;
        }
        final int [] subArray = Arrays.copyOfRange (integerInput, P [index], Q [index] + 1);
        final int minimumValue = minimum (subArray);
        result [index] = minimumValue;
    }
    return result;
}
----------------------------------------

 public int[] solution (String S, int[] P, int[] Q) {
    int[] result = new int[P.length];
    char[] characterInput = S.toCharArray();
    int[] integerInput = new int[characterInput.length];
    for(int counter = 0; counter < characterInput.length; counter++) {
        switch (characterInput[counter]) {
            case 'A': integerInput[counter] = 1; break;
            case 'C': integerInput[counter] = 2; break;
            case 'G': integerInput[counter] = 3; break;
            case 'T': integerInput[counter] = 4; break;
        }
    }
    for (int index = 0; index < P.length; index++) {
        int[] subArray = new int[Q[index] - P[index] + 1];
        for(int i = 0; P[index] + i <= Q[index]; i++) {
            subArray[i] = integerInput[P[index] + i];
        }
        int minimumValue = minimum (subArray);
        result[index] = minimumValue;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
825
2
Gpt3D_Clone825_2.java 1 20
Gpt3D_Clone825_2.java 21 52
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    final char [] characterInput = S.toCharArray ();
    final int [] integerInput = new int [characterInput.length];
    for (int counter = 0;
    counter < characterInput.length; counter ++) {
        integerInput [counter] = characterMapping.get (characterInput [counter]);
    }
    int [] result = new int [P.length];
    for (int index = 0;
    index < P.length; index ++) {
        if (P [index] == Q [index]) {
            result [index] = integerInput [P [index]];
            break;
        }
        final int [] subArray = Arrays.copyOfRange (integerInput, P [index], Q [index] + 1);
        final int minimumValue = minimum (subArray);
        result [index] = minimumValue;
    }
    return result;
}
----------------------------------------

 public int[] solution (String S, int[] P, int[] Q) {
   int[] result = new int[P.length];
   String[] characterInput = S.split("");
   int[] integerInput = new int[characterInput.length];
   for(int counter = 0; counter < characterInput.length; counter++) {
       switch(characterInput[counter]) {
           case "A":
               integerInput[counter] = 1;
               break;
           case "C":
               integerInput[counter] = 2;
               break;
           case "G":
               integerInput[counter] = 3;
               break;
           case "T":
               integerInput[counter] = 4;
               break;
       }
   }
   for (int index = 0; index < P.length; index++) {
       int[] subArray = Arrays.copyOfRange(integerInput, P[index], Q[index] + 1);
       int minimumValue = minimum (subArray);
       result[index] = minimumValue;
   }
   return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
825
3
Gpt3D_Clone825_3.java 1 20
Gpt3D_Clone825_3.java 21 44
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    final char [] characterInput = S.toCharArray ();
    final int [] integerInput = new int [characterInput.length];
    for (int counter = 0;
    counter < characterInput.length; counter ++) {
        integerInput [counter] = characterMapping.get (characterInput [counter]);
    }
    int [] result = new int [P.length];
    for (int index = 0;
    index < P.length; index ++) {
        if (P [index] == Q [index]) {
            result [index] = integerInput [P [index]];
            break;
        }
        final int [] subArray = Arrays.copyOfRange (integerInput, P [index], Q [index] + 1);
        final int minimumValue = minimum (subArray);
        result [index] = minimumValue;
    }
    return result;
}
----------------------------------------

 public int[] solution (String S, int[] P, int[] Q) {
    int[] result = new int[P.length];
    char[] characterInput = S.toCharArray();
    int[] integerInput = new int[characterInput.length];
    for(int counter = 0; counter < characterInput.length; counter++) {
        switch (characterInput[counter]) {
            case 'A': integerInput[counter] = 1;  break;
            case 'C': integerInput[counter] = 2;  break;
            case 'G': integerInput[counter] = 3;  break;
            case 'T': integerInput[counter] = 4;  break;
        }
    }
    for (int index = 0; index < P.length; index++) {
        int[] subArray = Arrays.copyOfRange(integerInput, P[index], Q[index] + 1);
        int minimumValue = minimum (subArray);
        result[index] = minimumValue;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
825
4
Gpt3D_Clone825_4.java 1 20
Gpt3D_Clone825_4.java 21 49
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    final char [] characterInput = S.toCharArray ();
    final int [] integerInput = new int [characterInput.length];
    for (int counter = 0;
    counter < characterInput.length; counter ++) {
        integerInput [counter] = characterMapping.get (characterInput [counter]);
    }
    int [] result = new int [P.length];
    for (int index = 0;
    index < P.length; index ++) {
        if (P [index] == Q [index]) {
            result [index] = integerInput [P [index]];
            break;
        }
        final int [] subArray = Arrays.copyOfRange (integerInput, P [index], Q [index] + 1);
        final int minimumValue = minimum (subArray);
        result [index] = minimumValue;
    }
    return result;
}
----------------------------------------

 public int[] solution (String S, int[] P, int[] Q) {
    int[] result = new int[P.length];
    char[] characterInput = S.toCharArray();
    int[] integerInput = new int[characterInput.length];
    for(int counter = 0; counter < characterInput.length; counter++) {
        if (characterInput[counter] == 'A') integerInput[counter] = 1;
        else if (characterInput[counter] == 'C') integerInput[counter] = 2;
        else if (characterInput[counter] == 'G') integerInput[counter] = 3;
        else if (characterInput[counter] == 'T') integerInput[counter] = 4;
    }
    for (int index = 0; index < P.length; index++) {
        int[] subArray = new int[Q[index] - P[index] + 1];
        int i = 0;
        int position = P[index];
        while(position <= Q[index]) {
            subArray[i] = integerInput[position];
            i++;
            position++;
        }
        int minimumValue = minimum (subArray);
        result[index] = minimumValue;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
825
5
Gpt3D_Clone825_5.java 1 20
Gpt3D_Clone825_5.java 21 47
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    final char [] characterInput = S.toCharArray ();
    final int [] integerInput = new int [characterInput.length];
    for (int counter = 0;
    counter < characterInput.length; counter ++) {
        integerInput [counter] = characterMapping.get (characterInput [counter]);
    }
    int [] result = new int [P.length];
    for (int index = 0;
    index < P.length; index ++) {
        if (P [index] == Q [index]) {
            result [index] = integerInput [P [index]];
            break;
        }
        final int [] subArray = Arrays.copyOfRange (integerInput, P [index], Q [index] + 1);
        final int minimumValue = minimum (subArray);
        result [index] = minimumValue;
    }
    return result;
}
----------------------------------------

 public int[] solution (String S, int[] P, int[] Q) {
    int[] result = new int[P.length];
    char[] characterInput = S.toCharArray();
    int[] integerInput = new int[characterInput.length];
    for(int counter = 0; counter < characterInput.length; counter++) {
        if (characterInput[counter] == 'A') {
            integerInput[counter] = 1;
        } else if (characterInput[counter] == 'C') {
            integerInput[counter] = 2;
        } else if (characterInput[counter] == 'G') {
            integerInput[counter] = 3;
        } else if (characterInput[counter] == 'T') {
            integerInput[counter] = 4;
        }
    }
    for (int index = 0; index < P.length; index++) {
        int[] subArray = Arrays.copyOfRange(integerInput, P[index], Q[index] + 1);
        int minimumValue = minimum (subArray);
        result[index] = minimumValue;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
825
6
Gpt3D_Clone825_6.java 1 20
Gpt3D_Clone825_6.java 21 47
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    final char [] characterInput = S.toCharArray ();
    final int [] integerInput = new int [characterInput.length];
    for (int counter = 0;
    counter < characterInput.length; counter ++) {
        integerInput [counter] = characterMapping.get (characterInput [counter]);
    }
    int [] result = new int [P.length];
    for (int index = 0;
    index < P.length; index ++) {
        if (P [index] == Q [index]) {
            result [index] = integerInput [P [index]];
            break;
        }
        final int [] subArray = Arrays.copyOfRange (integerInput, P [index], Q [index] + 1);
        final int minimumValue = minimum (subArray);
        result [index] = minimumValue;
    }
    return result;
}
----------------------------------------

 public int[] solution (String S, int[] P, int[] Q) {
    int[] result = new int[P.length];
    char[] characterInput = S.toCharArray();
    Map<Character, Integer> characterToIntegerMap = new HashMap<>();
    characterToIntegerMap.put('A', 1);
    characterToIntegerMap.put('C', 2);
    characterToIntegerMap.put('G', 3);
    characterToIntegerMap.put('T', 4);
    int[] integerInput = new int[characterInput.length];
    for(int counter = 0; counter < characterInput.length; counter++) {
        integerInput[counter] = characterToIntegerMap.get(characterInput[counter]);
    }
    for (int index = 0; index < P.length; index++) {
        int[] subArray = new int[Q[index] - P[index] + 1];
        for(int i = 0; i < subArray.length; i++) {
            subArray[i] = integerInput[P[index] + i];
        }
        int minimumValue = minimum (subArray);
        result[index] = minimumValue;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
825
7
Gpt3D_Clone825_7.java 1 20
Gpt3D_Clone825_7.java 21 44
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    final char [] characterInput = S.toCharArray ();
    final int [] integerInput = new int [characterInput.length];
    for (int counter = 0;
    counter < characterInput.length; counter ++) {
        integerInput [counter] = characterMapping.get (characterInput [counter]);
    }
    int [] result = new int [P.length];
    for (int index = 0;
    index < P.length; index ++) {
        if (P [index] == Q [index]) {
            result [index] = integerInput [P [index]];
            break;
        }
        final int [] subArray = Arrays.copyOfRange (integerInput, P [index], Q [index] + 1);
        final int minimumValue = minimum (subArray);
        result [index] = minimumValue;
    }
    return result;
}
----------------------------------------

 public int[] solution (String S, int[] P, int[] Q) {
    int[] result = new int[P.length];
    char[] characterInput = S.toCharArray();
    Map<Character, Integer> characterToIntegerMap = new HashMap<>();
    characterToIntegerMap.put('A', 1);
    characterToIntegerMap.put('C', 2);
    characterToIntegerMap.put('G', 3);
    characterToIntegerMap.put('T', 4);
    int[] integerInput = new int[characterInput.length];
    for(int counter = 0; counter < characterInput.length; counter++) {
        integerInput[counter] = characterToIntegerMap.get(characterInput[counter]);
    }
    for (int index = 0; index < P.length; index++) {
        int[] subArray = Arrays.copyOfRange(integerInput, P[index], Q[index] + 1);
        int minimumValue = minimum (subArray);
        result[index] = minimumValue;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
825
8
Gpt3D_Clone825_8.java 1 20
Gpt3D_Clone825_8.java 21 45
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    final char [] characterInput = S.toCharArray ();
    final int [] integerInput = new int [characterInput.length];
    for (int counter = 0;
    counter < characterInput.length; counter ++) {
        integerInput [counter] = characterMapping.get (characterInput [counter]);
    }
    int [] result = new int [P.length];
    for (int index = 0;
    index < P.length; index ++) {
        if (P [index] == Q [index]) {
            result [index] = integerInput [P [index]];
            break;
        }
        final int [] subArray = Arrays.copyOfRange (integerInput, P [index], Q [index] + 1);
        final int minimumValue = minimum (subArray);
        result [index] = minimumValue;
    }
    return result;
}
----------------------------------------

 public int[] solution (String S, int[] P, int[] Q) {
    int[] result = new int[P.length];
    char[] characterInput = S.toCharArray();
    int[] integerInput = new int[characterInput.length];
    for(int index = 0; index < characterInput.length; index++) {
        if (characterInput[index] == 'A') integerInput[index] = 1;
        else if (characterInput[index] == 'C') integerInput[index] = 2;
        else if (characterInput[index] == 'G') integerInput[index] = 3;
        else if (characterInput[index] == 'T') integerInput[index] = 4;
    }
    for (int counter = 0; counter < P.length; counter++) {
        int[] subArray = new int[Q[counter] - P[counter] + 1];
        for(int position = P[counter]; position <= Q[counter]; position++) {
            subArray[position - P[counter]] = integerInput[position];
        }
        int minimumValue = minimum (subArray);
        result[counter] = minimumValue;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
825
9
Gpt3D_Clone825_9.java 1 20
Gpt3D_Clone825_9.java 21 42
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    final char [] characterInput = S.toCharArray ();
    final int [] integerInput = new int [characterInput.length];
    for (int counter = 0;
    counter < characterInput.length; counter ++) {
        integerInput [counter] = characterMapping.get (characterInput [counter]);
    }
    int [] result = new int [P.length];
    for (int index = 0;
    index < P.length; index ++) {
        if (P [index] == Q [index]) {
            result [index] = integerInput [P [index]];
            break;
        }
        final int [] subArray = Arrays.copyOfRange (integerInput, P [index], Q [index] + 1);
        final int minimumValue = minimum (subArray);
        result [index] = minimumValue;
    }
    return result;
}
----------------------------------------

 public int[] solution (String S, int[] P, int[] Q) {
    int[] result = new int[P.length];
    char[] characterInput = S.toCharArray();
    int[] integerInput = new int[characterInput.length];
    for(int counter = 0; counter < characterInput.length; counter++) {
        if (characterInput[counter] == 'A') integerInput[counter] = 1;
        else if (characterInput[counter] == 'C') integerInput[counter] = 2;
        else if (characterInput[counter] == 'G') integerInput[counter] = 3;
        else if (characterInput[counter] == 'T') integerInput[counter] = 4;
    }
    for (int index = 0; index < P.length; index++) {
        int[] subArray = Arrays.copyOfRange(integerInput, P[index], Q[index] + 1);
        int minimumValue = minimum (subArray);
        result[index] = minimumValue;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
826
1
Gpt3D_Clone826_1.java 1 39
Gpt3D_Clone826_1.java 40 74
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    int [] answer = new int [P.length];
    char [] chars = S.toCharArray ();
    int [] [] cumulativeAnswers = new int [4] [chars.length + 1];
    for (int iii = 0;
    iii < chars.length; iii ++) {
        if (iii > 0) {
            for (int zzz = 0;
            zzz < 4; zzz ++) {
                cumulativeAnswers [zzz] [iii + 1] = cumulativeAnswers [zzz] [iii];
            }
        }
        switch (chars [iii]) {
            case 'A' :
                cumulativeAnswers [0] [iii + 1] ++;
                break;
            case 'C' :
                cumulativeAnswers [1] [iii + 1] ++;
                break;
            case 'G' :
                cumulativeAnswers [2] [iii + 1] ++;
                break;
            case 'T' :
                cumulativeAnswers [3] [iii + 1] ++;
                break;
        }
    }
    for (int iii = 0;
    iii < P.length; iii ++) {
        for (int zzz = 0;
        zzz < 4; zzz ++) {
            if ((cumulativeAnswers [zzz] [Q [iii] + 1] - cumulativeAnswers [zzz] [P [iii]]) > 0) {
                answer [iii] = zzz + 1;
                break;
            }
        }
    }
    return answer;
}
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    int [] answer = new int [P.length];
    
    for (int i = 0; i < P.length; i++) {
        int start = P[i];
        int end = Q[i];
        String subString = S.substring(start, end + 1);
        int minVal = 4; // initialize as biggest nucleotide
        for (int j = 0; j < subString.length(); j++) {
            char c = subString.charAt(j);
            switch (c) {
                case 'A':
                    minVal = 1;
                    break;
                case 'C':
                    if (minVal > 2) {
                        minVal = 2;
                    }
                    break;
                case 'G':
                    if (minVal > 3) {
                        minVal = 3;
                    }
                    break;
            }
            if (minVal == 1)
                break;
        }
        answer[i] = minVal;
    }
    return answer;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
826
3
Gpt3D_Clone826_3.java 1 39
Gpt3D_Clone826_3.java 40 67
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    int [] answer = new int [P.length];
    char [] chars = S.toCharArray ();
    int [] [] cumulativeAnswers = new int [4] [chars.length + 1];
    for (int iii = 0;
    iii < chars.length; iii ++) {
        if (iii > 0) {
            for (int zzz = 0;
            zzz < 4; zzz ++) {
                cumulativeAnswers [zzz] [iii + 1] = cumulativeAnswers [zzz] [iii];
            }
        }
        switch (chars [iii]) {
            case 'A' :
                cumulativeAnswers [0] [iii + 1] ++;
                break;
            case 'C' :
                cumulativeAnswers [1] [iii + 1] ++;
                break;
            case 'G' :
                cumulativeAnswers [2] [iii + 1] ++;
                break;
            case 'T' :
                cumulativeAnswers [3] [iii + 1] ++;
                break;
        }
    }
    for (int iii = 0;
    iii < P.length; iii ++) {
        for (int zzz = 0;
        zzz < 4; zzz ++) {
            if ((cumulativeAnswers [zzz] [Q [iii] + 1] - cumulativeAnswers [zzz] [P [iii]]) > 0) {
                answer [iii] = zzz + 1;
                break;
            }
        }
    }
    return answer;
}
----------------------------------------

 
public int [] solution (String S, int [] P, int [] Q) {
    int [] answer = new int [P.length];
    for (int iii = 0; iii < P.length; iii ++) {
        int start = P[iii];
        int end = Q[iii];
        String subString = S.substring(start, end + 1);
        char[] characters = subString.toCharArray();
        char minChar = 'T';
        for (int zzz = 0; zzz < characters.length; zzz++) {
            if (characters[zzz] < minChar) {
                minChar = characters[zzz];
            }
        }
        if (minChar == 'A') {
            answer[iii] = 1;
        } else if (minChar == 'C') {
            answer[iii] = 2;
        } else if (minChar == 'G') {
            answer[iii] = 3;
        } else {
            answer[iii] = 4;
        }
    }
    return answer;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
828
0
Gpt3D_Clone828_0.java 1 20
Gpt3D_Clone828_0.java 21 44
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    final char [] characterInput = S.toCharArray ();
    final int [] integerInput = new int [characterInput.length];
    for (int counter = 0;
    counter < characterInput.length; counter ++) {
        integerInput [counter] = characterMapping.get (characterInput [counter]);
    }
    int [] result = new int [P.length];
    for (int index = 0;
    index < P.length; index ++) {
        if (P [index] == Q [index]) {
            result [index] = integerInput [P [index]];
            break;
        }
        final int [] subArray = Arrays.copyOfRange (integerInput, P [index], Q [index] + 1);
        final int minimumValue = minimum (subArray);
        result [index] = minimumValue;
    }
    return result;
}
----------------------------------------

  public int[] solution(String S, int[] P, int[] Q) {
        int[] result = new int[P.length];
        char[] inputCharacters = S.toCharArray();
        int[] charToIntMapping = new int[256];
        for (int i = 0; i < 256; i++) {
            charToIntMapping[i] = (int) inputCharacters[i];
        }
        for (int i = 0; i < P.length; i++) {
            int minIntValue = 5;
            for (int j = P[i]; j <= Q[i]; j++) {
                int intValue = charToIntMapping[S.charAt(j)];
                if (intValue < minIntValue) {
                    minIntValue = intValue;
                }
            }
            result[i] = minIntValue;
        }
        return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
828
1
Gpt3D_Clone828_1.java 1 20
Gpt3D_Clone828_1.java 21 44
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    final char [] characterInput = S.toCharArray ();
    final int [] integerInput = new int [characterInput.length];
    for (int counter = 0;
    counter < characterInput.length; counter ++) {
        integerInput [counter] = characterMapping.get (characterInput [counter]);
    }
    int [] result = new int [P.length];
    for (int index = 0;
    index < P.length; index ++) {
        if (P [index] == Q [index]) {
            result [index] = integerInput [P [index]];
            break;
        }
        final int [] subArray = Arrays.copyOfRange (integerInput, P [index], Q [index] + 1);
        final int minimumValue = minimum (subArray);
        result [index] = minimumValue;
    }
    return result;
}
----------------------------------------

  public int[] solution(String S, int[] P, int[] Q) {
        char[] characters = S.toCharArray();
        int[] ints = new int[characters.length];
        for (int i = 0; i < characters.length; i++) {
            ints[i] = charMapping.get(characters[i]);
        }
        int[] result = new int[P.length];
        for (int i = 0; i < P.length; i++) {
            int minVal = 5;
            for (int j = P[i]; j <= Q[i]; j++) {
                int val = ints[j];
                if (val < minVal) {
                    minVal = val;
                }
            }
            result[i] = minVal;
        }
        return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
828
2
Gpt3D_Clone828_2.java 1 20
Gpt3D_Clone828_2.java 21 43
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    final char [] characterInput = S.toCharArray ();
    final int [] integerInput = new int [characterInput.length];
    for (int counter = 0;
    counter < characterInput.length; counter ++) {
        integerInput [counter] = characterMapping.get (characterInput [counter]);
    }
    int [] result = new int [P.length];
    for (int index = 0;
    index < P.length; index ++) {
        if (P [index] == Q [index]) {
            result [index] = integerInput [P [index]];
            break;
        }
        final int [] subArray = Arrays.copyOfRange (integerInput, P [index], Q [index] + 1);
        final int minimumValue = minimum (subArray);
        result [index] = minimumValue;
    }
    return result;
}
----------------------------------------

 public int[] solution(String S, int[] P, int[] Q) {
    int[] result = new int[P.length];
    char[] characterInput = S.toCharArray();
    int[] intInput = new int[characterInput.length];
    for(int i = 0; i< characterInput.length; i++){
        intInput[i] = charMapping.get(characterInput[i]);
    }
    for (int i = 0; i < P.length; i++) {
        int minValue = 5;
        for (int j = P[i]; j <= Q[i]; j++) {
            int val = intInput[j];
            if(val < minValue) minValue = val;
        }
        result[i] = minValue;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
828
3
Gpt3D_Clone828_3.java 1 20
Gpt3D_Clone828_3.java 21 46
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    final char [] characterInput = S.toCharArray ();
    final int [] integerInput = new int [characterInput.length];
    for (int counter = 0;
    counter < characterInput.length; counter ++) {
        integerInput [counter] = characterMapping.get (characterInput [counter]);
    }
    int [] result = new int [P.length];
    for (int index = 0;
    index < P.length; index ++) {
        if (P [index] == Q [index]) {
            result [index] = integerInput [P [index]];
            break;
        }
        final int [] subArray = Arrays.copyOfRange (integerInput, P [index], Q [index] + 1);
        final int minimumValue = minimum (subArray);
        result [index] = minimumValue;
    }
    return result;
}
----------------------------------------

  public int[] solution (String S, int[] P, int[] Q) {
        int[] result = new int[P.length];
        // convert S string to char
        char[] characters = S.toCharArray();
        // map between character and integer
        int[] charMapping = new int[256];
        for (int i = 0; i < 256; i++)
             charMapping[i] = (int) characters[i];
        for (int i = 0; i < P.length; i++) {
            int minValue = 5;
            for (int j = P[i]; j < Q[i]; j++) {
                int num = charMapping[S.charAt(j)];
                if (num < minValue) {
                    minValue = num;
                }
            }
            result[i] = minValue;
        }
        return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
828
4
Gpt3D_Clone828_4.java 1 20
Gpt3D_Clone828_4.java 21 49
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    final char [] characterInput = S.toCharArray ();
    final int [] integerInput = new int [characterInput.length];
    for (int counter = 0;
    counter < characterInput.length; counter ++) {
        integerInput [counter] = characterMapping.get (characterInput [counter]);
    }
    int [] result = new int [P.length];
    for (int index = 0;
    index < P.length; index ++) {
        if (P [index] == Q [index]) {
            result [index] = integerInput [P [index]];
            break;
        }
        final int [] subArray = Arrays.copyOfRange (integerInput, P [index], Q [index] + 1);
        final int minimumValue = minimum (subArray);
        result [index] = minimumValue;
    }
    return result;
}
----------------------------------------

 public int[] solution(String S, int[] P, int[] Q) {
        int[] result = new int[P.length];
 
        // convert S to char array
        char[] characterInput = S.toCharArray();
 
        // map between character and corresponding integer
        int[] characterMapping = new int[256];
        for (int i = 0; i < characterInput.length; i++)
             characterMapping[i] = (int) characterInput[i];
 
        // loop through P and Q arrays
        for (int i = 0; i < P.length; i++) {
            // set minimum value
            int minValue = 5;
            for (int j = P[i]; j <= Q[i]; j++) {
                int number = characterMapping[S.charAt(j)];
                // update minimum value if number is lower
                if (number < minValue) {
                    minValue = number;
                }
            }
            // add minimum value to result
            result[i] = minValue;
        }
        return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
828
5
Gpt3D_Clone828_5.java 1 20
Gpt3D_Clone828_5.java 21 43
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    final char [] characterInput = S.toCharArray ();
    final int [] integerInput = new int [characterInput.length];
    for (int counter = 0;
    counter < characterInput.length; counter ++) {
        integerInput [counter] = characterMapping.get (characterInput [counter]);
    }
    int [] result = new int [P.length];
    for (int index = 0;
    index < P.length; index ++) {
        if (P [index] == Q [index]) {
            result [index] = integerInput [P [index]];
            break;
        }
        final int [] subArray = Arrays.copyOfRange (integerInput, P [index], Q [index] + 1);
        final int minimumValue = minimum (subArray);
        result [index] = minimumValue;
    }
    return result;
}
----------------------------------------

  public int[] solution(String S, int[] P, int[] Q) {
        int[] result = new int[P.length];
        int[] intInput = new int[S.length()];
        for (int i = 0; i < S.length(); i++) {
            intInput[i] = charMapping.get(S.charAt(i));
        }
        for (int i = 0; i < P.length; i++) {
            int minValue = 5;
            for (int j = P[i]; j <= Q[i]; j++) {
                int inputValue = intInput[j];
                if (inputValue < minValue) {
                    minValue = inputValue;
                }
            }
            result[i] = minValue;
        }
        return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
828
6
Gpt3D_Clone828_6.java 1 20
Gpt3D_Clone828_6.java 21 49
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    final char [] characterInput = S.toCharArray ();
    final int [] integerInput = new int [characterInput.length];
    for (int counter = 0;
    counter < characterInput.length; counter ++) {
        integerInput [counter] = characterMapping.get (characterInput [counter]);
    }
    int [] result = new int [P.length];
    for (int index = 0;
    index < P.length; index ++) {
        if (P [index] == Q [index]) {
            result [index] = integerInput [P [index]];
            break;
        }
        final int [] subArray = Arrays.copyOfRange (integerInput, P [index], Q [index] + 1);
        final int minimumValue = minimum (subArray);
        result [index] = minimumValue;
    }
    return result;
}
----------------------------------------

 public int [] solution (String S, int [] P, int [] Q) {
	    char[] chars = S.toCharArray();
	    int [] ints = new int[chars.length];
	    int[] result = new int [P.length];
	    // map characters to integers
	    for (int i = 0; i < chars.length; i++) {
		ints[i] = charMapping.get(chars[i]);
	    }
	    // iterate through both P and Q arrays
	    for (int i = 0; i < P.length; i++) {
		// set the initial minimum value 
		int minVal = 5;
		for (int j = P[i]; j <= Q[i]; j++) {
		    if (ints[j] < minVal) {
		        // update the minimum value
		        minVal = ints[j];
		    }
		}
		// add the minimum value to the result
		result[i] = minVal;
	    }
	    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
828
7
Gpt3D_Clone828_7.java 1 20
Gpt3D_Clone828_7.java 21 43
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    final char [] characterInput = S.toCharArray ();
    final int [] integerInput = new int [characterInput.length];
    for (int counter = 0;
    counter < characterInput.length; counter ++) {
        integerInput [counter] = characterMapping.get (characterInput [counter]);
    }
    int [] result = new int [P.length];
    for (int index = 0;
    index < P.length; index ++) {
        if (P [index] == Q [index]) {
            result [index] = integerInput [P [index]];
            break;
        }
        final int [] subArray = Arrays.copyOfRange (integerInput, P [index], Q [index] + 1);
        final int minimumValue = minimum (subArray);
        result [index] = minimumValue;
    }
    return result;
}
----------------------------------------

 public int[] solution(String S, int[] P, int[] Q) {
        int[] result = new int[P.length];
        // convert S string to int[]
        int[] integers = new int[S.length()];
        for (int i = 0; i < S.length(); i++)
             integers[i] = charMapping.get(S.charAt(i));
        for (int i = 0; i < P.length; i++) {
            int minIntValue = 5;
            for (int j = P[i]; j <= Q[i]; j++) {
                int intValue = integers[j];
                if (intValue < minIntValue) {
                    minIntValue = intValue;
                }
            }
            result[i] = minIntValue;
        }
        return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
828
8
Gpt3D_Clone828_8.java 1 20
Gpt3D_Clone828_8.java 21 39
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    final char [] characterInput = S.toCharArray ();
    final int [] integerInput = new int [characterInput.length];
    for (int counter = 0;
    counter < characterInput.length; counter ++) {
        integerInput [counter] = characterMapping.get (characterInput [counter]);
    }
    int [] result = new int [P.length];
    for (int index = 0;
    index < P.length; index ++) {
        if (P [index] == Q [index]) {
            result [index] = integerInput [P [index]];
            break;
        }
        final int [] subArray = Arrays.copyOfRange (integerInput, P [index], Q [index] + 1);
        final int minimumValue = minimum (subArray);
        result [index] = minimumValue;
    }
    return result;
}
----------------------------------------

  public int[] solution (String S, int[] P, int[] Q) {
        int[] output = new int[P.length];
        int min;
        char[] chrs = S.toCharArray();
        for (int i = 0; i < P.length; i++) {
            min = 5;
            for(int j = P[i]; j <= Q[i]; j++) {
                int chr = charMapping.get(chrs[j]);
                if(chr < min) min = chr;
            }
            output[i] = min;
        }
        return output;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
828
9
Gpt3D_Clone828_9.java 1 20
Gpt3D_Clone828_9.java 21 37
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    final char [] characterInput = S.toCharArray ();
    final int [] integerInput = new int [characterInput.length];
    for (int counter = 0;
    counter < characterInput.length; counter ++) {
        integerInput [counter] = characterMapping.get (characterInput [counter]);
    }
    int [] result = new int [P.length];
    for (int index = 0;
    index < P.length; index ++) {
        if (P [index] == Q [index]) {
            result [index] = integerInput [P [index]];
            break;
        }
        final int [] subArray = Arrays.copyOfRange (integerInput, P [index], Q [index] + 1);
        final int minimumValue = minimum (subArray);
        result [index] = minimumValue;
    }
    return result;
}
----------------------------------------

  public int[] solution(String S, int[] P, int[] Q) {
        int[] result = new int[P.length];
        for (int i = 0; i < P.length; i++) {
            int min = 5;
            for (int j = P[i]; j < Q[i]; j++) {
                int num = S.charAt(j);
                if (num < min) {
                    min = num;
                }
            }
            result[i] = min;
        }
        return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
829
5
Gpt3D_Clone829_5.java 1 39
Gpt3D_Clone829_5.java 40 73
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    int [] answer = new int [P.length];
    char [] chars = S.toCharArray ();
    int [] [] cumulativeAnswers = new int [4] [chars.length + 1];
    for (int iii = 0;
    iii < chars.length; iii ++) {
        if (iii > 0) {
            for (int zzz = 0;
            zzz < 4; zzz ++) {
                cumulativeAnswers [zzz] [iii + 1] = cumulativeAnswers [zzz] [iii];
            }
        }
        switch (chars [iii]) {
            case 'A' :
                cumulativeAnswers [0] [iii + 1] ++;
                break;
            case 'C' :
                cumulativeAnswers [1] [iii + 1] ++;
                break;
            case 'G' :
                cumulativeAnswers [2] [iii + 1] ++;
                break;
            case 'T' :
                cumulativeAnswers [3] [iii + 1] ++;
                break;
        }
    }
    for (int iii = 0;
    iii < P.length; iii ++) {
        for (int zzz = 0;
        zzz < 4; zzz ++) {
            if ((cumulativeAnswers [zzz] [Q [iii] + 1] - cumulativeAnswers [zzz] [P [iii]]) > 0) {
                answer [iii] = zzz + 1;
                break;
            }
        }
    }
    return answer;
}
----------------------------------------

	public int[] solution(String S, int[] P, int[] Q) {
		int[] answer = new int[P.length];
    int[] answers = new int[S.length()];
    for(int i = 0; i < S.length(); i++) {
        int letter = 0;
        switch (S.charAt(i)) {
            case 'A':
                letter = 1;
                break;
            case 'C':
                letter = 2;
                break;
            case 'G':
                letter = 3;
                break;
            case 'T':
                letter = 4;
                break;
        }
        answers[i] = letter;
    }
    for(int i = 0; i < P.length; i++) {
        int minValue = answers[P[i]];
        for(int j = P[i]+1; j <= Q[i]; j++)
            minValue = Math.min(minValue, answers[j]);
        answer[i] = minValue;
    }
    return answer;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
829
6
Gpt3D_Clone829_6.java 1 39
Gpt3D_Clone829_6.java 40 71
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    int [] answer = new int [P.length];
    char [] chars = S.toCharArray ();
    int [] [] cumulativeAnswers = new int [4] [chars.length + 1];
    for (int iii = 0;
    iii < chars.length; iii ++) {
        if (iii > 0) {
            for (int zzz = 0;
            zzz < 4; zzz ++) {
                cumulativeAnswers [zzz] [iii + 1] = cumulativeAnswers [zzz] [iii];
            }
        }
        switch (chars [iii]) {
            case 'A' :
                cumulativeAnswers [0] [iii + 1] ++;
                break;
            case 'C' :
                cumulativeAnswers [1] [iii + 1] ++;
                break;
            case 'G' :
                cumulativeAnswers [2] [iii + 1] ++;
                break;
            case 'T' :
                cumulativeAnswers [3] [iii + 1] ++;
                break;
        }
    }
    for (int iii = 0;
    iii < P.length; iii ++) {
        for (int zzz = 0;
        zzz < 4; zzz ++) {
            if ((cumulativeAnswers [zzz] [Q [iii] + 1] - cumulativeAnswers [zzz] [P [iii]]) > 0) {
                answer [iii] = zzz + 1;
                break;
            }
        }
    }
    return answer;
}
----------------------------------------

	public int[] solution(String S, int[] P, int[] Q) {
    int[] answer = new int[P.length];
    int[] answers = new int[S.length()];
    for (int i = 0; i < S.length(); i++) {
        switch (S.charAt(i)) {
            case 'A':
                answers[i] = 1;
                break;
            case 'C':
                answers[i] = 2;
                break;
            case 'G':
                answers[i] = 3;
                break;
            case 'T':
                answers[i] = 4;
                break;
        }
    }
    for (int i = 0; i < P.length; i++) {
        int minValue = Integer.MAX_VALUE;
        for (int j = P[i]; j <= Q[i]; j++) {
            minValue = Math.min(minValue, answers[j]);
        }
        answer[i] = minValue;
    }
    return answer;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
829
7
Gpt3D_Clone829_7.java 1 39
Gpt3D_Clone829_7.java 40 72
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    int [] answer = new int [P.length];
    char [] chars = S.toCharArray ();
    int [] [] cumulativeAnswers = new int [4] [chars.length + 1];
    for (int iii = 0;
    iii < chars.length; iii ++) {
        if (iii > 0) {
            for (int zzz = 0;
            zzz < 4; zzz ++) {
                cumulativeAnswers [zzz] [iii + 1] = cumulativeAnswers [zzz] [iii];
            }
        }
        switch (chars [iii]) {
            case 'A' :
                cumulativeAnswers [0] [iii + 1] ++;
                break;
            case 'C' :
                cumulativeAnswers [1] [iii + 1] ++;
                break;
            case 'G' :
                cumulativeAnswers [2] [iii + 1] ++;
                break;
            case 'T' :
                cumulativeAnswers [3] [iii + 1] ++;
                break;
        }
    }
    for (int iii = 0;
    iii < P.length; iii ++) {
        for (int zzz = 0;
        zzz < 4; zzz ++) {
            if ((cumulativeAnswers [zzz] [Q [iii] + 1] - cumulativeAnswers [zzz] [P [iii]]) > 0) {
                answer [iii] = zzz + 1;
                break;
            }
        }
    }
    return answer;
}
----------------------------------------

	public int[] solution(String S, int[] P, int[] Q) {
		int[] answer = new int[P.length];
    int[] answers = new int[S.length()];
    for(int i = 0; i < S.length(); i++) {
        char c = S.charAt(i);
        switch (c) {
            case 'A':
                answers[i] = 1;
                break;
            case 'C':
                answers[i] = 2;
                break;
            case 'G':
                answers[i] = 3;
                break;
            case 'T':
                answers[i] = 4;
                break;
        }
    }
    for(int i = 0; i < P.length; i++) {
        int minValue = answers[P[i]];
        for(int j = P[i]+1; j <= Q[i]; j++)
            minValue = Math.min(minValue, answers[j]);
        answer[i] = minValue;
    }
    return answer;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
832
2
Gpt3D_Clone832_2.java 1 61
Gpt3D_Clone832_2.java 62 105
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    int [] result = new int [P.length];
    int [] factor1 = new int [S.length ()];
    int [] factor2 = new int [S.length ()];
    int [] factor3 = new int [S.length ()];
    int [] factor4 = new int [S.length ()];
    int factor1Sum = 0;
    int factor2Sum = 0;
    int factor3Sum = 0;
    int factor4Sum = 0;
    for (int i = 0;
    i < S.length (); i ++) {
        switch (S.charAt (i)) {
            case 'A' :
                factor1Sum ++;
                break;
            case 'C' :
                factor2Sum ++;
                break;
            case 'G' :
                factor3Sum ++;
                break;
            case 'T' :
                factor4Sum ++;
                break;
            default :
                break;
        }
        factor1 [i] = factor1Sum;
        factor2 [i] = factor2Sum;
        factor3 [i] = factor3Sum;
        factor4 [i] = factor4Sum;
    }
    for (int i = 0;
    i < P.length; i ++) {
        int start = P [i];
        int end = Q [i];
        if (start == 0) {
            if (factor1 [end] > 0) {
                result [i] = 1;
            } else if (factor2 [end] > 0) {
                result [i] = 2;
            } else if (factor3 [end] > 0) {
                result [i] = 3;
            } else {
                result [i] = 4;
            }
        } else {
            if (factor1 [end] > factor1 [start - 1]) {
                result [i] = 1;
            } else if (factor2 [end] > factor2 [start - 1]) {
                result [i] = 2;
            } else if (factor3 [end] > factor3 [start - 1]) {
                result [i] = 3;
            } else {
                result [i] = 4;
            }
        }
    }
    return result;
}
----------------------------------------

public int[] solution(String S, int[] P, int[] Q) {
    int[] result = new int[P.length];
    int[] factorCount = {0, 0, 0, 0};
    
    for(int i = 0; i < S.length(); i++){
        switch (S.charAt(i)) {
            case 'A':
                factorCount[0]++;
                break;
            case 'C':
                factorCount[1]++;
                break;
            case 'G':
                factorCount[2]++;
                break;
            case 'T':
                factorCount[3]++;
                break;
        }
        for (int j = 0; j < P.length; j++) {
            int start = P[j];
            int end = Q[j];
            if (i >= start && i <= end) {
                int[] tempFactorCount = new int[4];
                for(int k = 0; k < 4; k++){
                    tempFactorCount[k] = factorCount[k];
                }
                if(tempFactorCount[0] > 0) {
                    result[j] = 1;
                } else if(tempFactorCount[1] > 0) {
                    result[j] = 2;
                } else if(tempFactorCount[2] > 0) {
                    result[j] = 3;
                } else {
                    result[j] = 4;
                }
            }
        }
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
832
3
Gpt3D_Clone832_3.java 1 61
Gpt3D_Clone832_3.java 62 103
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    int [] result = new int [P.length];
    int [] factor1 = new int [S.length ()];
    int [] factor2 = new int [S.length ()];
    int [] factor3 = new int [S.length ()];
    int [] factor4 = new int [S.length ()];
    int factor1Sum = 0;
    int factor2Sum = 0;
    int factor3Sum = 0;
    int factor4Sum = 0;
    for (int i = 0;
    i < S.length (); i ++) {
        switch (S.charAt (i)) {
            case 'A' :
                factor1Sum ++;
                break;
            case 'C' :
                factor2Sum ++;
                break;
            case 'G' :
                factor3Sum ++;
                break;
            case 'T' :
                factor4Sum ++;
                break;
            default :
                break;
        }
        factor1 [i] = factor1Sum;
        factor2 [i] = factor2Sum;
        factor3 [i] = factor3Sum;
        factor4 [i] = factor4Sum;
    }
    for (int i = 0;
    i < P.length; i ++) {
        int start = P [i];
        int end = Q [i];
        if (start == 0) {
            if (factor1 [end] > 0) {
                result [i] = 1;
            } else if (factor2 [end] > 0) {
                result [i] = 2;
            } else if (factor3 [end] > 0) {
                result [i] = 3;
            } else {
                result [i] = 4;
            }
        } else {
            if (factor1 [end] > factor1 [start - 1]) {
                result [i] = 1;
            } else if (factor2 [end] > factor2 [start - 1]) {
                result [i] = 2;
            } else if (factor3 [end] > factor3 [start - 1]) {
                result [i] = 3;
            } else {
                result [i] = 4;
            }
        }
    }
    return result;
}
----------------------------------------

public int[] solution(String S, int[] P, int[] Q) {
    int[] result = new int[P.length];
    int[] count = new int[4];
    for (int i = 0; i < P.length; i++) { 
        int start = P[i];
        int end = Q[i];
        for (int j = start; j <= end; j++) {
            switch (S.charAt(j)) {
                case 'A' :
                    count[0]++;
                    break;
                case 'C' :
                    count[1]++;
                    break;
                case 'G' :
                    count[2]++;
                    break;
                case 'T' :
                    count[3]++;
                    break;
                default :
                    break;
            }
        }
        if (count[0] > 0) {
            result[i] = 1;
        } else if (count[1] > 0) {
            result[i] = 2;
        } else if (count[2] > 0) {
            result[i] = 3;
        } else {
            result[i] = 4;
        }
        for (int j = 0; j < 4; j++) {
            count[j] = 0;
        }
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
832
5
Gpt3D_Clone832_5.java 1 61
Gpt3D_Clone832_5.java 62 102
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    int [] result = new int [P.length];
    int [] factor1 = new int [S.length ()];
    int [] factor2 = new int [S.length ()];
    int [] factor3 = new int [S.length ()];
    int [] factor4 = new int [S.length ()];
    int factor1Sum = 0;
    int factor2Sum = 0;
    int factor3Sum = 0;
    int factor4Sum = 0;
    for (int i = 0;
    i < S.length (); i ++) {
        switch (S.charAt (i)) {
            case 'A' :
                factor1Sum ++;
                break;
            case 'C' :
                factor2Sum ++;
                break;
            case 'G' :
                factor3Sum ++;
                break;
            case 'T' :
                factor4Sum ++;
                break;
            default :
                break;
        }
        factor1 [i] = factor1Sum;
        factor2 [i] = factor2Sum;
        factor3 [i] = factor3Sum;
        factor4 [i] = factor4Sum;
    }
    for (int i = 0;
    i < P.length; i ++) {
        int start = P [i];
        int end = Q [i];
        if (start == 0) {
            if (factor1 [end] > 0) {
                result [i] = 1;
            } else if (factor2 [end] > 0) {
                result [i] = 2;
            } else if (factor3 [end] > 0) {
                result [i] = 3;
            } else {
                result [i] = 4;
            }
        } else {
            if (factor1 [end] > factor1 [start - 1]) {
                result [i] = 1;
            } else if (factor2 [end] > factor2 [start - 1]) {
                result [i] = 2;
            } else if (factor3 [end] > factor3 [start - 1]) {
                result [i] = 3;
            } else {
                result [i] = 4;
            }
        }
    }
    return result;
}
----------------------------------------

public int[] solution(String S, int[] P, int[] Q) {
    int[] result = new int[P.length];
    int[] factorCount = new int[4];
    int factorIndex = 0;
    for(int i = 0; i < S.length(); i++){
        switch (S.charAt(i)) {
            case 'A':
                factorCount[0]++;
                break;
            case 'C':
                factorCount[1]++;
                break;
            case 'G':
                factorCount[2]++;
                break;
            case 'T':
                factorCount[3]++;
                break;
        }
        for (int j = 0; j < P.length; j++) {
            int start = P[j];
            int end = Q[j];
            if (i >= start && i <= end) {
                if (factorCount[0] > 0) {
                    result[factorIndex] = 1;
                } else if (factorCount[1] > 0) {
                    result[factorIndex] = 2;
                } else if (factorCount[2] > 0) {
                    result[factorIndex] = 3;
                } else {
                    result[factorIndex] = 4;
                }
                factorIndex++;
            }
        }
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
832
6
Gpt3D_Clone832_6.java 1 61
Gpt3D_Clone832_6.java 62 93
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    int [] result = new int [P.length];
    int [] factor1 = new int [S.length ()];
    int [] factor2 = new int [S.length ()];
    int [] factor3 = new int [S.length ()];
    int [] factor4 = new int [S.length ()];
    int factor1Sum = 0;
    int factor2Sum = 0;
    int factor3Sum = 0;
    int factor4Sum = 0;
    for (int i = 0;
    i < S.length (); i ++) {
        switch (S.charAt (i)) {
            case 'A' :
                factor1Sum ++;
                break;
            case 'C' :
                factor2Sum ++;
                break;
            case 'G' :
                factor3Sum ++;
                break;
            case 'T' :
                factor4Sum ++;
                break;
            default :
                break;
        }
        factor1 [i] = factor1Sum;
        factor2 [i] = factor2Sum;
        factor3 [i] = factor3Sum;
        factor4 [i] = factor4Sum;
    }
    for (int i = 0;
    i < P.length; i ++) {
        int start = P [i];
        int end = Q [i];
        if (start == 0) {
            if (factor1 [end] > 0) {
                result [i] = 1;
            } else if (factor2 [end] > 0) {
                result [i] = 2;
            } else if (factor3 [end] > 0) {
                result [i] = 3;
            } else {
                result [i] = 4;
            }
        } else {
            if (factor1 [end] > factor1 [start - 1]) {
                result [i] = 1;
            } else if (factor2 [end] > factor2 [start - 1]) {
                result [i] = 2;
            } else if (factor3 [end] > factor3 [start - 1]) {
                result [i] = 3;
            } else {
                result [i] = 4;
            }
        }
    }
    return result;
}
----------------------------------------

public int[] solution(String S, int[] P, int[] Q) {
    int[] result = new int[P.length];
    for (int i = 0; i < P.length; i++) {
        int tempResult;
        int start = P[i];
        int end = Q[i];
        if (S.charAt(start) == 'A') {
            tempResult = 1;
        } else if (S.charAt(start) == 'C') {
            tempResult = 2;
        } else if (S.charAt(start) == 'G') {
            tempResult = 3;
        } else {
            tempResult = 4;
        }
        while (start < end) {
            if (S.charAt(start) == 'A' && tempResult > 1) {
                tempResult = 1;
            } else if (S.charAt(start) == 'C' && tempResult > 2) {
                tempResult = 2;
            } else if (S.charAt(start) == 'G' && tempResult > 3) {
                tempResult = 3;
            }
            start++;
        }
        result[i] = tempResult;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
832
7
Gpt3D_Clone832_7.java 1 61
Gpt3D_Clone832_7.java 62 82
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    int [] result = new int [P.length];
    int [] factor1 = new int [S.length ()];
    int [] factor2 = new int [S.length ()];
    int [] factor3 = new int [S.length ()];
    int [] factor4 = new int [S.length ()];
    int factor1Sum = 0;
    int factor2Sum = 0;
    int factor3Sum = 0;
    int factor4Sum = 0;
    for (int i = 0;
    i < S.length (); i ++) {
        switch (S.charAt (i)) {
            case 'A' :
                factor1Sum ++;
                break;
            case 'C' :
                factor2Sum ++;
                break;
            case 'G' :
                factor3Sum ++;
                break;
            case 'T' :
                factor4Sum ++;
                break;
            default :
                break;
        }
        factor1 [i] = factor1Sum;
        factor2 [i] = factor2Sum;
        factor3 [i] = factor3Sum;
        factor4 [i] = factor4Sum;
    }
    for (int i = 0;
    i < P.length; i ++) {
        int start = P [i];
        int end = Q [i];
        if (start == 0) {
            if (factor1 [end] > 0) {
                result [i] = 1;
            } else if (factor2 [end] > 0) {
                result [i] = 2;
            } else if (factor3 [end] > 0) {
                result [i] = 3;
            } else {
                result [i] = 4;
            }
        } else {
            if (factor1 [end] > factor1 [start - 1]) {
                result [i] = 1;
            } else if (factor2 [end] > factor2 [start - 1]) {
                result [i] = 2;
            } else if (factor3 [end] > factor3 [start - 1]) {
                result [i] = 3;
            } else {
                result [i] = 4;
            }
        }
    }
    return result;
}
----------------------------------------

public int[] solution(String S, int[] P, int[] Q) {
    int[] result = new int[P.length];
    for(int i = 0; i < P.length; i++){
        int start = P[i];
        int end = Q[i];
        String subString = S.substring(start, end+1);
        if(subString.contains("A")) {
            result[i] = 1;
        } else if(subString.contains("C")) {
            result[i] = 2;
        } else if(subString.contains("G")) {
            result[i] = 3;
        } else {
            result[i] = 4;
        }
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
832
8
Gpt3D_Clone832_8.java 1 61
Gpt3D_Clone832_8.java 62 82
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    int [] result = new int [P.length];
    int [] factor1 = new int [S.length ()];
    int [] factor2 = new int [S.length ()];
    int [] factor3 = new int [S.length ()];
    int [] factor4 = new int [S.length ()];
    int factor1Sum = 0;
    int factor2Sum = 0;
    int factor3Sum = 0;
    int factor4Sum = 0;
    for (int i = 0;
    i < S.length (); i ++) {
        switch (S.charAt (i)) {
            case 'A' :
                factor1Sum ++;
                break;
            case 'C' :
                factor2Sum ++;
                break;
            case 'G' :
                factor3Sum ++;
                break;
            case 'T' :
                factor4Sum ++;
                break;
            default :
                break;
        }
        factor1 [i] = factor1Sum;
        factor2 [i] = factor2Sum;
        factor3 [i] = factor3Sum;
        factor4 [i] = factor4Sum;
    }
    for (int i = 0;
    i < P.length; i ++) {
        int start = P [i];
        int end = Q [i];
        if (start == 0) {
            if (factor1 [end] > 0) {
                result [i] = 1;
            } else if (factor2 [end] > 0) {
                result [i] = 2;
            } else if (factor3 [end] > 0) {
                result [i] = 3;
            } else {
                result [i] = 4;
            }
        } else {
            if (factor1 [end] > factor1 [start - 1]) {
                result [i] = 1;
            } else if (factor2 [end] > factor2 [start - 1]) {
                result [i] = 2;
            } else if (factor3 [end] > factor3 [start - 1]) {
                result [i] = 3;
            } else {
                result [i] = 4;
            }
        }
    }
    return result;
}
----------------------------------------

public int[] solution(String S, int[] P, int[] Q) {
    int[] result = new int[P.length];
    for (int i = 0; i < P.length; i++) { 
        int start = P[i];
        int end = Q[i];
        String subStr = S.substring(start, end + 1);
        if (subStr.contains("A")) {
            result[i] = 1;
        } else if (subStr.contains("C")) {
            result[i] = 2;
        } else if (subStr.contains("G")) {
            result[i] = 3;
        } else {
            result[i] = 4;
        }
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
833
0
Gpt3D_Clone833_0.java 1 39
Gpt3D_Clone833_0.java 40 87
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    int N = S.length ();
    int M = P.length;
    int [] result = new int [M];
    lastOccurrencesMap = new int [3] [N];
    int lastA = - 1;
    int lastC = - 1;
    int lastG = - 1;
    for (int i = 0;
    i < N; i ++) {
        char c = S.charAt (i);
        if (c == 'A') {
            lastA = i;
        } else if (c == 'C') {
            lastC = i;
        } else if (c == 'G') {
            lastG = i;
        }
        lastOccurrencesMap [0] [i] = lastA;
        lastOccurrencesMap [1] [i] = lastC;
        lastOccurrencesMap [2] [i] = lastG;
    }
    for (int i = 0;
    i < M; i ++) {
        int startIndex = P [i];
        int endIndex = Q [i];
        int minimum = 4;
        for (int n = 0;
        n < 3; n ++) {
            int lastOccurence = getLastNucleotideOccurrence (startIndex, endIndex, n);
            if (lastOccurence != 0) {
                minimum = n + 1;
                break;
            }
        }
        result [i] = minimum;
    }
    return result;
}
----------------------------------------

 public int[] solution(String S, int[] P, int[] Q) {
    int N = S.length();
    int M = P.length;
    int[] result = new int[M];
    lastOccurrencesMap = new int[3][N];
    int[] minPosA = new int[N];
    int[] minPosC = new int[N];
    int[] minPosG = new int[N];
    int[] minPos = new int[3];
    minPos[0] = N;
    minPos[1] = N;
    minPos[2] = N;
    
    for (int i = 0; i < N; i++) {
        char c = S.charAt(i);
        if (c == 'A') {
            minPosA[i] = i;
            minPos[0] = Math.min(i,minPos[0]);
        } else if (c == 'C') {
            minPosC[i] = i;
            minPos[1] = Math.min(i,minPos[1]);
        } else if (c == 'G') {
            minPosG[i] = i;
            minPos[2] = Math.min(i,minPos[2]);
        }
        lastOccurrencesMap[0][i] = minPosA[i];
        lastOccurrencesMap[1][i] = minPosC[i];
        lastOccurrencesMap[2][i] = minPosG[i];
    }
    for (int i = 0; i < M; i++) {
        int startIndex = P[i];
        int endIndex = Q[i];
        int minimum = 4;
        if (endIndex >= 0 && startIndex <= N-1) { 
            if (minPos[0] >= startIndex && minPos[0] <= endIndex) {
                minimum = 1;
            } else if (minPos[1] >= startIndex && minPos[1] <= endIndex) {
                minimum = 2;     
            } else if (minPos[2] >= startIndex && minPos[2] <= endIndex) {
                minimum = 3; 
            } 
        }
        result[i] = minimum;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
834
0
Gpt3D_Clone834_0.java 1 61
Gpt3D_Clone834_0.java 62 128
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    int [] result = new int [P.length];
    int [] factor1 = new int [S.length ()];
    int [] factor2 = new int [S.length ()];
    int [] factor3 = new int [S.length ()];
    int [] factor4 = new int [S.length ()];
    int factor1Sum = 0;
    int factor2Sum = 0;
    int factor3Sum = 0;
    int factor4Sum = 0;
    for (int i = 0;
    i < S.length (); i ++) {
        switch (S.charAt (i)) {
            case 'A' :
                factor1Sum ++;
                break;
            case 'C' :
                factor2Sum ++;
                break;
            case 'G' :
                factor3Sum ++;
                break;
            case 'T' :
                factor4Sum ++;
                break;
            default :
                break;
        }
        factor1 [i] = factor1Sum;
        factor2 [i] = factor2Sum;
        factor3 [i] = factor3Sum;
        factor4 [i] = factor4Sum;
    }
    for (int i = 0;
    i < P.length; i ++) {
        int start = P [i];
        int end = Q [i];
        if (start == 0) {
            if (factor1 [end] > 0) {
                result [i] = 1;
            } else if (factor2 [end] > 0) {
                result [i] = 2;
            } else if (factor3 [end] > 0) {
                result [i] = 3;
            } else {
                result [i] = 4;
            }
        } else {
            if (factor1 [end] > factor1 [start - 1]) {
                result [i] = 1;
            } else if (factor2 [end] > factor2 [start - 1]) {
                result [i] = 2;
            } else if (factor3 [end] > factor3 [start - 1]) {
                result [i] = 3;
            } else {
                result [i] = 4;
            }
        }
    }
    return result;
}
----------------------------------------

public int[] solution(String S, int[] P, int[] Q) {
    // store the answer
    int[] result = new int[P.length];
    // create a map to mapping the symbols and its corresponding integer
    Map<Character, Integer> factorsMap = new HashMap<>();
    factorsMap.put('A', 1);
    factorsMap.put('C', 2);
    factorsMap.put('G', 3);
    factorsMap.put('T', 4);
    // create a 2D array to store the symbol's number at certain index
    int[][] factor = new int[S.length()][4];
    // [0]: A, [1]: C, [2]: G, [3]: T
    int[] factorSum = {0, 0, 0, 0};
    // calculation
    for (int i = 0; i < S.length(); i++) {
        if (S.charAt(i) == 'A') {
            factorSum[0]++;
        } else if (S.charAt(i) == 'C') {
            factorSum[1]++;
        }
        else if (S.charAt(i) == 'G') {
            factorSum[2]++;
        }
        else {
            factorSum[3]++;
        }
        factor[i][0] = factorSum[0];
        factor[i][1] = factorSum[1];
        factor[i][2] = factorSum[2];
        factor[i][3] = factorSum[3];
    }
 
    // look for the value needed inside the map
    for (int k = 0; k < P.length; k++) {
        // calculate the range
        int start = P[k];
        int end = Q[k];
        int min = 4;
        if (start == 0) {
            if (factor[end][0] > 0) {
                min = factorsMap.get('A');
            } else if (factor[end][1] > 0) {
                min = factorsMap.get('C');
            } else if (factor[end][2] > 0) {
                min = factorsMap.get('G');
            } else {
                min = factorsMap.get('T');
            }
            result[k] = min;
        }
        else {
            for (int i = 0; i < 4; i++) {
                // check the number of character at last index >= number at start index
                if (factor[end][i] >= factor[start][i]) {
                    min = factorsMap.get(Character.forDigit(i+1, 10));
                    break;
                }
            }
            result[k] = min;
        }
 
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
834
1
Gpt3D_Clone834_1.java 1 61
Gpt3D_Clone834_1.java 62 114
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    int [] result = new int [P.length];
    int [] factor1 = new int [S.length ()];
    int [] factor2 = new int [S.length ()];
    int [] factor3 = new int [S.length ()];
    int [] factor4 = new int [S.length ()];
    int factor1Sum = 0;
    int factor2Sum = 0;
    int factor3Sum = 0;
    int factor4Sum = 0;
    for (int i = 0;
    i < S.length (); i ++) {
        switch (S.charAt (i)) {
            case 'A' :
                factor1Sum ++;
                break;
            case 'C' :
                factor2Sum ++;
                break;
            case 'G' :
                factor3Sum ++;
                break;
            case 'T' :
                factor4Sum ++;
                break;
            default :
                break;
        }
        factor1 [i] = factor1Sum;
        factor2 [i] = factor2Sum;
        factor3 [i] = factor3Sum;
        factor4 [i] = factor4Sum;
    }
    for (int i = 0;
    i < P.length; i ++) {
        int start = P [i];
        int end = Q [i];
        if (start == 0) {
            if (factor1 [end] > 0) {
                result [i] = 1;
            } else if (factor2 [end] > 0) {
                result [i] = 2;
            } else if (factor3 [end] > 0) {
                result [i] = 3;
            } else {
                result [i] = 4;
            }
        } else {
            if (factor1 [end] > factor1 [start - 1]) {
                result [i] = 1;
            } else if (factor2 [end] > factor2 [start - 1]) {
                result [i] = 2;
            } else if (factor3 [end] > factor3 [start - 1]) {
                result [i] = 3;
            } else {
                result [i] = 4;
            }
        }
    }
    return result;
}
----------------------------------------

public int[] solution(String S, int[] P, int[] Q) {
    int[] result = new int[P.length];
    int[] nums = new int[S.length()];
    for (int i = 0; i < S.length(); ++i) {
        switch (S.charAt(i)) {
            case 'A':
                nums[i] = 1;
                break;
            case 'C':
                nums[i] = 2;
                break;
            case 'G':
                nums[i] = 3;
                break;
            case 'T':
                nums[i] = 4;
                break;
            default:
                break;
        }
    }
    int[] pre = new int[4];
    int[] sum = new int[4];
    for (int i = 0; i < S.length(); ++i) {
        pre[nums[i] - 1] = 1;
        for (int j = 0; j < 4; ++j) {
            sum[j] = pre[j] + sum[j];
        }
        int start = P[i];
        int end = Q[i];
        // if start is 0, we just need to look for index end
        if (start == 0) {
            for (int n = 0; n < 4; n++) {
                if (sum[n] != 0) {
                    result[i] = n + 1;
                    break;
                }
            }
        } else {
            for (int n = 0; n < 4; n++) {
                // look for index > start and <= end
                if (sum[n] - pre[n] > 0 && sum[n] - pre[n] <= end - start + 1) {
                    result[i] = n + 1;
                    break;
                }
            }
        }
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
834
2
Gpt3D_Clone834_2.java 1 61
Gpt3D_Clone834_2.java 62 125
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    int [] result = new int [P.length];
    int [] factor1 = new int [S.length ()];
    int [] factor2 = new int [S.length ()];
    int [] factor3 = new int [S.length ()];
    int [] factor4 = new int [S.length ()];
    int factor1Sum = 0;
    int factor2Sum = 0;
    int factor3Sum = 0;
    int factor4Sum = 0;
    for (int i = 0;
    i < S.length (); i ++) {
        switch (S.charAt (i)) {
            case 'A' :
                factor1Sum ++;
                break;
            case 'C' :
                factor2Sum ++;
                break;
            case 'G' :
                factor3Sum ++;
                break;
            case 'T' :
                factor4Sum ++;
                break;
            default :
                break;
        }
        factor1 [i] = factor1Sum;
        factor2 [i] = factor2Sum;
        factor3 [i] = factor3Sum;
        factor4 [i] = factor4Sum;
    }
    for (int i = 0;
    i < P.length; i ++) {
        int start = P [i];
        int end = Q [i];
        if (start == 0) {
            if (factor1 [end] > 0) {
                result [i] = 1;
            } else if (factor2 [end] > 0) {
                result [i] = 2;
            } else if (factor3 [end] > 0) {
                result [i] = 3;
            } else {
                result [i] = 4;
            }
        } else {
            if (factor1 [end] > factor1 [start - 1]) {
                result [i] = 1;
            } else if (factor2 [end] > factor2 [start - 1]) {
                result [i] = 2;
            } else if (factor3 [end] > factor3 [start - 1]) {
                result [i] = 3;
            } else {
                result [i] = 4;
            }
        }
    }
    return result;
}
----------------------------------------

 
public int[] solution(String S, int[] P, int[] Q) 
    { 
        int[] result = new int[P.length]; 
  
        // create a 2D array to store the  
        // number of each character 
        int[][] factor = new int[S.length()][4]; 
  
        // [0]: A, [1]: C, [2]: G, [3]: T 
        int[] factorSum = {0, 0, 0, 0}; 
  
        // mapping the symbols and its corresponding integer 
        int[] factorIndice = {1, 2, 3, 4}; 
  
        for (int i = 0; i < S.length(); i++) { 
            if (S.charAt(i) == 'A') 
                factorSum[0]++; 
            else if (S.charAt(i) == 'C') 
                factorSum[1]++; 
            else if (S.charAt(i) == 'G') 
                factorSum[2]++; 
            else
                factorSum[3]++; 
  
            factor[i][0] = factorSum[0]; 
            factor[i][1] = factorSum[1]; 
            factor[i][2] = factorSum[2]; 
            factor[i][3] = factorSum[3]; 
        } 
  
        for (int i = 0; i < P.length; i++) { 
            // calculate the range 
            int start = P[i]; 
            int end = Q[i]; 
            int min = 4; 
            // if start is 0 
            if (start == 0) { 
                for (int j = 0; j < 4; j++) { 
                    // check the number of character 
                    // at last index 
                    if (factor[end][j] != 0) { 
                        min = factorIndice[j]; 
                        break; 
                    } 
                } 
                result[i] = min; 
            } 
            else { 
                // look for index > start and <= end 
                for (int j = 0; j < 4; j++) { 
                    if (factor[end][j] - factor[start - 1][j] > 0) { 
                        min = factorIndice[j]; 
                        break; 
                    } 
                } 
                result[i] = min; 
            } 
        } 
  
        return result; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
834
3
Gpt3D_Clone834_3.java 1 61
Gpt3D_Clone834_3.java 62 117
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    int [] result = new int [P.length];
    int [] factor1 = new int [S.length ()];
    int [] factor2 = new int [S.length ()];
    int [] factor3 = new int [S.length ()];
    int [] factor4 = new int [S.length ()];
    int factor1Sum = 0;
    int factor2Sum = 0;
    int factor3Sum = 0;
    int factor4Sum = 0;
    for (int i = 0;
    i < S.length (); i ++) {
        switch (S.charAt (i)) {
            case 'A' :
                factor1Sum ++;
                break;
            case 'C' :
                factor2Sum ++;
                break;
            case 'G' :
                factor3Sum ++;
                break;
            case 'T' :
                factor4Sum ++;
                break;
            default :
                break;
        }
        factor1 [i] = factor1Sum;
        factor2 [i] = factor2Sum;
        factor3 [i] = factor3Sum;
        factor4 [i] = factor4Sum;
    }
    for (int i = 0;
    i < P.length; i ++) {
        int start = P [i];
        int end = Q [i];
        if (start == 0) {
            if (factor1 [end] > 0) {
                result [i] = 1;
            } else if (factor2 [end] > 0) {
                result [i] = 2;
            } else if (factor3 [end] > 0) {
                result [i] = 3;
            } else {
                result [i] = 4;
            }
        } else {
            if (factor1 [end] > factor1 [start - 1]) {
                result [i] = 1;
            } else if (factor2 [end] > factor2 [start - 1]) {
                result [i] = 2;
            } else if (factor3 [end] > factor3 [start - 1]) {
                result [i] = 3;
            } else {
                result [i] = 4;
            }
        }
    }
    return result;
}
----------------------------------------

 
public int[] solution(String S, int[] P, int[] Q) 
    { 
        int[] result = new int[P.length]; 
  
        // map to store the number of each 
        // character of the given string 
        Map<Character, Integer> charToInt =  
            new HashMap<Character, Integer>(); 
        charToInt.put('A', 1); 
        charToInt.put('C', 2); 
        charToInt.put('G', 3); 
        charToInt.put('T', 4); 
  
        // array to store the number of each  
        // character of the given string 
        int[][] factor = new int[S.length()][4]; 
        int[] temp = new int[4]; 
  
        // iterating through the string to  
        // store the value of each character 
        for (int i = 0; i < S.length(); i++) { 
            int c = charToInt.get(S.charAt(i)); 
            temp[c - 1]++; 
            factor[i][0] = temp[0]; 
            factor[i][1] = temp[1]; 
            factor[i][2] = temp[2]; 
            factor[i][3] = temp[3]; 
        } 
  
        // iterating through the given ranges 
        // and check whether the character is present 
        // or not and store the result in result array 
        for (int i = 0; i < P.length; i++) { 
            int start = P[i]; 
            int end = Q[i]; 
            for (int j = 0; j < 4; j++) { 
                if (start == 0) { 
                    if (factor[end][j] != 0) { 
                        result[i] = j + 1; 
                        break; 
                    } 
                } 
                else { 
                    if (factor[end][j] -  
                        factor[start - 1][j] > 0) { 
                        result[i] = j + 1; 
                        break; 
                    } 
                } 
            } 
        } 
        return result; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
834
4
Gpt3D_Clone834_4.java 1 61
Gpt3D_Clone834_4.java 62 104
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    int [] result = new int [P.length];
    int [] factor1 = new int [S.length ()];
    int [] factor2 = new int [S.length ()];
    int [] factor3 = new int [S.length ()];
    int [] factor4 = new int [S.length ()];
    int factor1Sum = 0;
    int factor2Sum = 0;
    int factor3Sum = 0;
    int factor4Sum = 0;
    for (int i = 0;
    i < S.length (); i ++) {
        switch (S.charAt (i)) {
            case 'A' :
                factor1Sum ++;
                break;
            case 'C' :
                factor2Sum ++;
                break;
            case 'G' :
                factor3Sum ++;
                break;
            case 'T' :
                factor4Sum ++;
                break;
            default :
                break;
        }
        factor1 [i] = factor1Sum;
        factor2 [i] = factor2Sum;
        factor3 [i] = factor3Sum;
        factor4 [i] = factor4Sum;
    }
    for (int i = 0;
    i < P.length; i ++) {
        int start = P [i];
        int end = Q [i];
        if (start == 0) {
            if (factor1 [end] > 0) {
                result [i] = 1;
            } else if (factor2 [end] > 0) {
                result [i] = 2;
            } else if (factor3 [end] > 0) {
                result [i] = 3;
            } else {
                result [i] = 4;
            }
        } else {
            if (factor1 [end] > factor1 [start - 1]) {
                result [i] = 1;
            } else if (factor2 [end] > factor2 [start - 1]) {
                result [i] = 2;
            } else if (factor3 [end] > factor3 [start - 1]) {
                result [i] = 3;
            } else {
                result [i] = 4;
            }
        }
    }
    return result;
}
----------------------------------------

public int[] solution(String S, int[] P, int[] Q) {
    int[] result = new int[P.length];
    // use a 2d array to store the number of each character
    int[][] factor = new int[S.length()][4];
    // [0]: A, [1]: C, [2]: G, [3]: T
    // sum up to the end
    int[] factorSum = {0, 0, 0, 0};
    for(int i = 0; i < S.length(); i++) {
        if (S.charAt(i) == 'A') {
            factorSum[0]++;
        } else if (S.charAt(i) == 'C') {
            factorSum[1]++;
        } else if (S.charAt(i) == 'G') {
            factorSum[2]++;
        } else {
            factorSum[3]++;
        }
        factor[i][0] = factorSum[0];
        factor[i][1] = factorSum[1];
        factor[i][2] = factorSum[2];
        factor[i][3] = factorSum[3];
    }
 
    // Java 7 or higher version
    int[] factorIndice = {1, 2, 3, 4};
    for (int i = 0; i < P.length; i++) {
        int start = P[i];
        int end = Q[i];
        int min = 4;
        for (int j = 0; j < 4; j++) {
            // check the number of character at last index >= number at start index
            if (factor[end][j] >= factor[start][j]) {
                min = factorIndice[j];
                break;
            }
        }
        result[i] = min;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
835
0
Gpt3D_Clone835_0.java 1 39
Gpt3D_Clone835_0.java 40 91
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    int N = S.length ();
    int M = P.length;
    int [] result = new int [M];
    lastOccurrencesMap = new int [3] [N];
    int lastA = - 1;
    int lastC = - 1;
    int lastG = - 1;
    for (int i = 0;
    i < N; i ++) {
        char c = S.charAt (i);
        if (c == 'A') {
            lastA = i;
        } else if (c == 'C') {
            lastC = i;
        } else if (c == 'G') {
            lastG = i;
        }
        lastOccurrencesMap [0] [i] = lastA;
        lastOccurrencesMap [1] [i] = lastC;
        lastOccurrencesMap [2] [i] = lastG;
    }
    for (int i = 0;
    i < M; i ++) {
        int startIndex = P [i];
        int endIndex = Q [i];
        int minimum = 4;
        for (int n = 0;
        n < 3; n ++) {
            int lastOccurence = getLastNucleotideOccurrence (startIndex, endIndex, n);
            if (lastOccurence != 0) {
                minimum = n + 1;
                break;
            }
        }
        result [i] = minimum;
    }
    return result;
}
----------------------------------------

 public int[] solution(String S, int[] P, int[] Q) { 
    int N = S.length();
    int M = P.length;
    int[] result = new int[M];
    int[] lastOccurrencesMap = new int[3]; 
    lastOccurrencesMap[0] = -1;
    lastOccurrencesMap[1] = -1;
    lastOccurrencesMap[2] = -1;
    int minimum = 4;
    for (int i=0; i<N; i++) {
        char c = S.charAt(i);
        switch (c) {
            case 'A' :
                lastOccurrencesMap[0] = i;
                break;
            case 'C' :
                lastOccurrencesMap[1] = i;
                break;
            case 'G' :
                lastOccurrencesMap[2] = i;
                break;
            default :
                break;
        }
    }
    for (int i=0; i<M; i++) {
        int startIndex = P[i];
        int endIndex = Q[i];
        minimum = 4;
        if (lastOccurrencesMap[0] >= startIndex && lastOccurrencesMap[0] <= endIndex){
            minimum = 1;
        }
        else if (lastOccurrencesMap[1] >= startIndex && lastOccurrencesMap[1] <= endIndex){
            minimum = 2;
        }
        else if (lastOccurrencesMap[2] >= startIndex && lastOccurrencesMap[2] <= endIndex){
            minimum = 3;
        }
        result[i] = minimum;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
835
2
Gpt3D_Clone835_2.java 1 39
Gpt3D_Clone835_2.java 40 83
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    int N = S.length ();
    int M = P.length;
    int [] result = new int [M];
    lastOccurrencesMap = new int [3] [N];
    int lastA = - 1;
    int lastC = - 1;
    int lastG = - 1;
    for (int i = 0;
    i < N; i ++) {
        char c = S.charAt (i);
        if (c == 'A') {
            lastA = i;
        } else if (c == 'C') {
            lastC = i;
        } else if (c == 'G') {
            lastG = i;
        }
        lastOccurrencesMap [0] [i] = lastA;
        lastOccurrencesMap [1] [i] = lastC;
        lastOccurrencesMap [2] [i] = lastG;
    }
    for (int i = 0;
    i < M; i ++) {
        int startIndex = P [i];
        int endIndex = Q [i];
        int minimum = 4;
        for (int n = 0;
        n < 3; n ++) {
            int lastOccurence = getLastNucleotideOccurrence (startIndex, endIndex, n);
            if (lastOccurence != 0) {
                minimum = n + 1;
                break;
            }
        }
        result [i] = minimum;
    }
    return result;
}
----------------------------------------

 public int[] solution(String S, int[] P, int[] Q) { 
int N = S.length();
    int M = P.length;
    int[] result = new int[M];
    int[][] lastOccurrencesMap = new int[3][N];
	
	for (int i = 0; i < N; i++) { 
        char c = S.charAt(i);
        if (c == 'A') {
            lastOccurrencesMap[0][i] = i;
            lastOccurrencesMap[1][i] = lastOccurrencesMap[1][i-1];
            lastOccurrencesMap[2][i] = lastOccurrencesMap[2][i-1];
        } else if (c == 'C') {
            lastOccurrencesMap[1][i] = i;
            lastOccurrencesMap[2][i] = lastOccurrencesMap[2][i-1];
            lastOccurrencesMap[0][i] = lastOccurrencesMap[0][i-1];
        } else if (c == 'G') {
            lastOccurrencesMap[2][i] = i;
            lastOccurrencesMap[1][i] = lastOccurrencesMap[1][i-1];
            lastOccurrencesMap[0][i] = lastOccurrencesMap[0][i-1];
        }
        else {
            lastOccurrencesMap[2][i] = lastOccurrencesMap[2][i-1];
            lastOccurrencesMap[1][i] = lastOccurrencesMap[1][i-1];
            lastOccurrencesMap[0][i] = lastOccurrencesMap[0][i-1];
        }
    }
	
	for (int i = 0; i < M; i++) { 
        int startIndex = P[i];
        int endIndex = Q[i];
        int minimum = 4;
        if (lastOccurrencesMap[0][endIndex] >= startIndex) 
            minimum = 1;
        else if (lastOccurrencesMap[1][endIndex] >= startIndex) 
            minimum = 2;
        else if (lastOccurrencesMap[2][endIndex] >= startIndex) 
            minimum = 3;
        result[i] = minimum;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
835
3
Gpt3D_Clone835_3.java 1 39
Gpt3D_Clone835_3.java 40 75
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    int N = S.length ();
    int M = P.length;
    int [] result = new int [M];
    lastOccurrencesMap = new int [3] [N];
    int lastA = - 1;
    int lastC = - 1;
    int lastG = - 1;
    for (int i = 0;
    i < N; i ++) {
        char c = S.charAt (i);
        if (c == 'A') {
            lastA = i;
        } else if (c == 'C') {
            lastC = i;
        } else if (c == 'G') {
            lastG = i;
        }
        lastOccurrencesMap [0] [i] = lastA;
        lastOccurrencesMap [1] [i] = lastC;
        lastOccurrencesMap [2] [i] = lastG;
    }
    for (int i = 0;
    i < M; i ++) {
        int startIndex = P [i];
        int endIndex = Q [i];
        int minimum = 4;
        for (int n = 0;
        n < 3; n ++) {
            int lastOccurence = getLastNucleotideOccurrence (startIndex, endIndex, n);
            if (lastOccurence != 0) {
                minimum = n + 1;
                break;
            }
        }
        result [i] = minimum;
    }
    return result;
}
----------------------------------------

 public int[] solution(String S, int[] P, int[] Q) { 
int N = S.length();
    int M = P.length;
    int[] result = new int[M];
    int[] lastOccurrencesMap = new int[3];
    lastOccurrencesMap[0] = -1;
	lastOccurrencesMap[1] = -1;
	lastOccurrencesMap[2] = -1;
	
	for (int i = 0; i < N; i++) { 
        char c = S.charAt(i);
        if (c == 'A') {
            lastOccurrencesMap[0] = i;
        } else if (c == 'C') {
            lastOccurrencesMap[1] = i;
        } else if (c == 'G') {
            lastOccurrencesMap[2] = i;
        }
    }
	
	for (int i = 0; i < M; i++) { 
        int startIndex = P[i];
        int endIndex = Q[i];
        int minimum = 4;
        if (lastOccurrencesMap[0] >= startIndex && lastOccurrencesMap[0] <= endIndex) 
            minimum = 1;
        else if (lastOccurrencesMap[1] >= startIndex && lastOccurrencesMap[1] <= endIndex) 
            minimum = 2;
        else if (lastOccurrencesMap[2] >= startIndex && lastOccurrencesMap[2] <= endIndex) 
            minimum = 3;
        result[i] = minimum;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
835
4
Gpt3D_Clone835_4.java 1 39
Gpt3D_Clone835_4.java 40 75
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    int N = S.length ();
    int M = P.length;
    int [] result = new int [M];
    lastOccurrencesMap = new int [3] [N];
    int lastA = - 1;
    int lastC = - 1;
    int lastG = - 1;
    for (int i = 0;
    i < N; i ++) {
        char c = S.charAt (i);
        if (c == 'A') {
            lastA = i;
        } else if (c == 'C') {
            lastC = i;
        } else if (c == 'G') {
            lastG = i;
        }
        lastOccurrencesMap [0] [i] = lastA;
        lastOccurrencesMap [1] [i] = lastC;
        lastOccurrencesMap [2] [i] = lastG;
    }
    for (int i = 0;
    i < M; i ++) {
        int startIndex = P [i];
        int endIndex = Q [i];
        int minimum = 4;
        for (int n = 0;
        n < 3; n ++) {
            int lastOccurence = getLastNucleotideOccurrence (startIndex, endIndex, n);
            if (lastOccurence != 0) {
                minimum = n + 1;
                break;
            }
        }
        result [i] = minimum;
    }
    return result;
}
----------------------------------------

 public int[] solution(String S, int[] P, int[] Q) { 
    int N = S.length();
    int M = P.length;
    int[] result = new int[M];
    int lastA = -1;
    int lastC = -1;
    int lastG = -1;
    for(int i = 0; i < N; i++) {
        char c = S.charAt(i);
        if(c == 'A')
            lastA = i;
        else if(c == 'C')
            lastC = i;
        else if(c == 'G')
            lastG = i;
    }
    for(int i = 0; i < M; i++) {
        int startIndex = P[i];
        int endIndex = Q[i];
        int minimum = 4;
        if (startIndex <= lastA && lastA <= endIndex) {
            minimum = 1;
        }
        else if (startIndex <= lastC && lastC <= endIndex) {
            minimum = 2;
        }
        else if (startIndex <= lastG && lastG <= endIndex) {
            minimum = 3;
        }
        result[i] = minimum;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
835
5
Gpt3D_Clone835_5.java 1 39
Gpt3D_Clone835_5.java 40 76
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    int N = S.length ();
    int M = P.length;
    int [] result = new int [M];
    lastOccurrencesMap = new int [3] [N];
    int lastA = - 1;
    int lastC = - 1;
    int lastG = - 1;
    for (int i = 0;
    i < N; i ++) {
        char c = S.charAt (i);
        if (c == 'A') {
            lastA = i;
        } else if (c == 'C') {
            lastC = i;
        } else if (c == 'G') {
            lastG = i;
        }
        lastOccurrencesMap [0] [i] = lastA;
        lastOccurrencesMap [1] [i] = lastC;
        lastOccurrencesMap [2] [i] = lastG;
    }
    for (int i = 0;
    i < M; i ++) {
        int startIndex = P [i];
        int endIndex = Q [i];
        int minimum = 4;
        for (int n = 0;
        n < 3; n ++) {
            int lastOccurence = getLastNucleotideOccurrence (startIndex, endIndex, n);
            if (lastOccurence != 0) {
                minimum = n + 1;
                break;
            }
        }
        result [i] = minimum;
    }
    return result;
}
----------------------------------------

 public int[] solution(String S, int[] P, int[] Q) { 
    int N = S.length();
    int M = P.length;
    int[] result = new int[M];
    int[][] lastOccurrencesMap = new int[3][N];
    for(int i = 0; i < N; i++) {
        char c = S.charAt(i);
        if(c == 'A')
            lastOccurrencesMap[0][i] = i;
        else if(c == 'C')
            lastOccurrencesMap[1][i] = i;
        else if(c == 'G')
            lastOccurrencesMap[2][i] = i;
    }
    for(int i=0; i<M; i++) {
        int startIndex = P[i];
        int endIndex = Q[i];
        int min = 4;
        if(lastOccurrencesMap[0][endIndex] >= startIndex) {
            min = 1;
        }
        else if(lastOccurrencesMap[1][endIndex] >= startIndex) {
            min = 2;
        }
        else if(lastOccurrencesMap[2][endIndex] >= startIndex) {
            min = 3;
        }
        result[i] = min;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
836
0
Gpt3D_Clone836_0.java 1 39
Gpt3D_Clone836_0.java 40 81
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    int N = S.length ();
    int M = P.length;
    int [] result = new int [M];
    lastOccurrencesMap = new int [3] [N];
    int lastA = - 1;
    int lastC = - 1;
    int lastG = - 1;
    for (int i = 0;
    i < N; i ++) {
        char c = S.charAt (i);
        if (c == 'A') {
            lastA = i;
        } else if (c == 'C') {
            lastC = i;
        } else if (c == 'G') {
            lastG = i;
        }
        lastOccurrencesMap [0] [i] = lastA;
        lastOccurrencesMap [1] [i] = lastC;
        lastOccurrencesMap [2] [i] = lastG;
    }
    for (int i = 0;
    i < M; i ++) {
        int startIndex = P [i];
        int endIndex = Q [i];
        int minimum = 4;
        for (int n = 0;
        n < 3; n ++) {
            int lastOccurence = getLastNucleotideOccurrence (startIndex, endIndex, n);
            if (lastOccurence != 0) {
                minimum = n + 1;
                break;
            }
        }
        result [i] = minimum;
    }
    return result;
}
----------------------------------------

  public int [] solution (String S, int [] P, int [] Q) {
    int N = S.length ();
    int M = P.length;
    int [] result = new int [M];
    List<Integer>[] lastOccurrencesMap = new ArrayList [3];
    Set <Character> charactersSet = new HashSet<Character>();
    charactersSet.add('A');
    charactersSet.add('C');
    charactersSet.add('G');
    for (int i = 0; i < 3; i++) {
        lastOccurrencesMap[i] = new ArrayList<Integer>();
    }
    for (int i = 0; i < N; i++) {
        char c = S.charAt(i);
        if (charactersSet.contains(c)) {
            lastOccurrencesMap[c - 'A'].add(i);
        }
    }
    for (int i = 0; i < M; i++) {
        int startIndex = P[i];
        int endIndex = Q[i];
        int minimum = 4;
        for (int n = 0; n < 3; n++) {
            List<Integer> nestedList = lastOccurrencesMap[n];
            int lastOccurenceIndex = -1;
            for (int index : nestedList) {
                if (index >= startIndex && index <= endIndex) {
                    lastOccurenceIndex = index;
                    break;
                }
            }
            if (lastOccurenceIndex != -1) {
                minimum = n + 1;
                break;
            }
        }
        result[i] = minimum;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
836
1
Gpt3D_Clone836_1.java 1 39
Gpt3D_Clone836_1.java 40 80
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    int N = S.length ();
    int M = P.length;
    int [] result = new int [M];
    lastOccurrencesMap = new int [3] [N];
    int lastA = - 1;
    int lastC = - 1;
    int lastG = - 1;
    for (int i = 0;
    i < N; i ++) {
        char c = S.charAt (i);
        if (c == 'A') {
            lastA = i;
        } else if (c == 'C') {
            lastC = i;
        } else if (c == 'G') {
            lastG = i;
        }
        lastOccurrencesMap [0] [i] = lastA;
        lastOccurrencesMap [1] [i] = lastC;
        lastOccurrencesMap [2] [i] = lastG;
    }
    for (int i = 0;
    i < M; i ++) {
        int startIndex = P [i];
        int endIndex = Q [i];
        int minimum = 4;
        for (int n = 0;
        n < 3; n ++) {
            int lastOccurence = getLastNucleotideOccurrence (startIndex, endIndex, n);
            if (lastOccurence != 0) {
                minimum = n + 1;
                break;
            }
        }
        result [i] = minimum;
    }
    return result;
}
----------------------------------------

 public int [] solution (String S, int [] P, int [] Q) {
    int N = S.length ();
    int M = P.length;
    int [] result = new int [M];
    lastOccurrencesMap = new HashMap<Character, Integer>();
    Set <Character> characterSet = new HashSet<Character>();
    characterSet.add('A');
    characterSet.add('C');
    characterSet.add('G');
    for (int i = 0; i < N; i++) {
        char c = S.charAt(i);
        if (characterSet.contains(c)) {
            if (lastOccurrencesMap.containsKey(c)) 
                lastOccurrencesMap.put(c, i);
        }
    }
    for (int i = 0; i < M; i++) {
        int startIndex = P[i];
        int endIndex = Q[i];
        int minimum = 4;
        if (lastOccurrencesMap.containsKey('A')) {
            int lastOccurenceA = lastOccurrencesMap.get('A');
            if (lastOccurenceA >= startIndex && lastOccurenceA <= endIndex) 
               minimum = 1;
        }
        if (lastOccurrencesMap.containsKey('C') && minimum > 1) {
            int lastOccurenceC = lastOccurrencesMap.get('C');
            if (lastOccurenceC >= startIndex && lastOccurenceC <= endIndex) 
                minimum = 2;
        } 
        if (lastOccurrencesMap.containsKey('G') && minimum > 2) {
            int lastOccurenceG = lastOccurrencesMap.get('G');
            if (lastOccurenceG >= startIndex && lastOccurenceG <= endIndex) 
                minimum = 3;
        }
        result[i] = minimum;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
836
3
Gpt3D_Clone836_3.java 1 39
Gpt3D_Clone836_3.java 40 76
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    int N = S.length ();
    int M = P.length;
    int [] result = new int [M];
    lastOccurrencesMap = new int [3] [N];
    int lastA = - 1;
    int lastC = - 1;
    int lastG = - 1;
    for (int i = 0;
    i < N; i ++) {
        char c = S.charAt (i);
        if (c == 'A') {
            lastA = i;
        } else if (c == 'C') {
            lastC = i;
        } else if (c == 'G') {
            lastG = i;
        }
        lastOccurrencesMap [0] [i] = lastA;
        lastOccurrencesMap [1] [i] = lastC;
        lastOccurrencesMap [2] [i] = lastG;
    }
    for (int i = 0;
    i < M; i ++) {
        int startIndex = P [i];
        int endIndex = Q [i];
        int minimum = 4;
        for (int n = 0;
        n < 3; n ++) {
            int lastOccurence = getLastNucleotideOccurrence (startIndex, endIndex, n);
            if (lastOccurence != 0) {
                minimum = n + 1;
                break;
            }
        }
        result [i] = minimum;
    }
    return result;
}
----------------------------------------

 public int [] solution (String S, int [] P, int [] Q) {
    int N = S.length ();
    int M = P.length;
    int [] result = new int [M];
    lastOccurencesIndexes = new ArrayList [3];
    Set <Character> charactersSet = new HashSet<Character>();
    charactersSet.add('A');
    charactersSet.add('C');
    charactersSet.add('G');
    for (int i = 0; i < 3; i++) {
        lastOccurencesIndexes[i] = new ArrayList<Integer>();
    }
    for (int i = 0; i < N; i++){
        char c = S.charAt(i);
        if (charactersSet.contains(c)) {
            lastOccurencesIndexes[c - 'A'].add(i);
        }
    }
    for (int i = 0; i < M; i++) {
        int startIndex = P[i];
        int endIndex = Q[i];
        int minimum = 4;
        for (int n = 0; n < 3; n++) {
            List<Integer> nestedList = lastOccurencesIndexes[n];
            for (int lastOccurenceIndex : nestedList) {
                if (lastOccurenceIndex >= startIndex && lastOccurenceIndex <= endIndex) {
                    minimum = n + 1;
                    break;
                }
            }
        }
        result[i] = minimum;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
836
4
Gpt3D_Clone836_4.java 1 39
Gpt3D_Clone836_4.java 40 73
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    int N = S.length ();
    int M = P.length;
    int [] result = new int [M];
    lastOccurrencesMap = new int [3] [N];
    int lastA = - 1;
    int lastC = - 1;
    int lastG = - 1;
    for (int i = 0;
    i < N; i ++) {
        char c = S.charAt (i);
        if (c == 'A') {
            lastA = i;
        } else if (c == 'C') {
            lastC = i;
        } else if (c == 'G') {
            lastG = i;
        }
        lastOccurrencesMap [0] [i] = lastA;
        lastOccurrencesMap [1] [i] = lastC;
        lastOccurrencesMap [2] [i] = lastG;
    }
    for (int i = 0;
    i < M; i ++) {
        int startIndex = P [i];
        int endIndex = Q [i];
        int minimum = 4;
        for (int n = 0;
        n < 3; n ++) {
            int lastOccurence = getLastNucleotideOccurrence (startIndex, endIndex, n);
            if (lastOccurence != 0) {
                minimum = n + 1;
                break;
            }
        }
        result [i] = minimum;
    }
    return result;
}
----------------------------------------

  public int [] solution (String S, int [] P, int [] Q) {
    int N = S.length ();
    int M = P.length;
    int [] result = new int [M];
    int[] lastOccurancesArray = new int[3];
    for (int i = 0; i < 3; i++) {
        lastOccurancesArray[i] = -1;
    }
    Map<Character, Integer> characterIndexMap = new HashMap<Character, Integer>();
    characterIndexMap.put('A', 0);
    characterIndexMap.put('C', 1);
    characterIndexMap.put('G', 2);
    for (int i = 0; i < N; i++) {
        char c = S.charAt(i);
        if (characterIndexMap.containsKey(c)) {
            lastOccurancesArray[characterIndexMap.get(c)] = i;  
        }
    }
    for (int i = 0; i < M; i++) {
        int startIndex = P[i];
        int endIndex = Q[i];
        int minimum = 4;
        for (int n = 0; n < 3; n++) {
            int lastOccurence = lastOccurancesArray[n];
            if (lastOccurence != -1 && lastOccurence >= startIndex && lastOccurence <= endIndex) {
                minimum = n + 1;
            }
        }
        result[i] = minimum;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
836
5
Gpt3D_Clone836_5.java 1 39
Gpt3D_Clone836_5.java 40 70
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    int N = S.length ();
    int M = P.length;
    int [] result = new int [M];
    lastOccurrencesMap = new int [3] [N];
    int lastA = - 1;
    int lastC = - 1;
    int lastG = - 1;
    for (int i = 0;
    i < N; i ++) {
        char c = S.charAt (i);
        if (c == 'A') {
            lastA = i;
        } else if (c == 'C') {
            lastC = i;
        } else if (c == 'G') {
            lastG = i;
        }
        lastOccurrencesMap [0] [i] = lastA;
        lastOccurrencesMap [1] [i] = lastC;
        lastOccurrencesMap [2] [i] = lastG;
    }
    for (int i = 0;
    i < M; i ++) {
        int startIndex = P [i];
        int endIndex = Q [i];
        int minimum = 4;
        for (int n = 0;
        n < 3; n ++) {
            int lastOccurence = getLastNucleotideOccurrence (startIndex, endIndex, n);
            if (lastOccurence != 0) {
                minimum = n + 1;
                break;
            }
        }
        result [i] = minimum;
    }
    return result;
}
----------------------------------------

 public int [] solution (String S, int [] P, int [] Q) {
    int N = S.length ();
    int M = P.length;
    int [] result = new int [M];
    Integer [][] lastOccurrencesMap = new Integer [3] [N];
    Set <Character> characterSet = new HashSet<Character>();
    characterSet.add('A');
    characterSet.add('C');
    characterSet.add('G');
    for (int i = 0; i < N; i++) {
        char c = S.charAt(i);
        if (characterSet.contains(c)) {
            lastOccurrencesMap[c - 'A'][i] = i;
        }
    }
    for (int i = 0; i < M; i++) {
        int startIndex = P[i];
        int endIndex = Q[i];
        int minimum = 4;
        for (int n = 0; n < 3; n++) {
            if (lastOccurrencesMap[n][endIndex] != null && lastOccurrencesMap[n][endIndex] >= startIndex) {
                minimum = n + 1;
                break;
            }
        }
        result[i] = minimum;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
836
6
Gpt3D_Clone836_6.java 1 39
Gpt3D_Clone836_6.java 40 70
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    int N = S.length ();
    int M = P.length;
    int [] result = new int [M];
    lastOccurrencesMap = new int [3] [N];
    int lastA = - 1;
    int lastC = - 1;
    int lastG = - 1;
    for (int i = 0;
    i < N; i ++) {
        char c = S.charAt (i);
        if (c == 'A') {
            lastA = i;
        } else if (c == 'C') {
            lastC = i;
        } else if (c == 'G') {
            lastG = i;
        }
        lastOccurrencesMap [0] [i] = lastA;
        lastOccurrencesMap [1] [i] = lastC;
        lastOccurrencesMap [2] [i] = lastG;
    }
    for (int i = 0;
    i < M; i ++) {
        int startIndex = P [i];
        int endIndex = Q [i];
        int minimum = 4;
        for (int n = 0;
        n < 3; n ++) {
            int lastOccurence = getLastNucleotideOccurrence (startIndex, endIndex, n);
            if (lastOccurence != 0) {
                minimum = n + 1;
                break;
            }
        }
        result [i] = minimum;
    }
    return result;
}
----------------------------------------

 public int [] solution (String S, int [] P, int [] Q) {
    int N = S.length ();
    int M = P.length;
    int [] result = new int [M];
    int[] lastOccurancesArray = new int[3];
    Map<Character, Integer> characterIndexMap = new HashMap<Character, Integer>();
    characterIndexMap.put('A', 0);
    characterIndexMap.put('C', 1);
    characterIndexMap.put('G', 2);
    for (int i = N - 1; i >= 0; i--) {
        char c = S.charAt(i);
        if (characterIndexMap.containsKey(c)) {
            lastOccurancesArray[characterIndexMap.get(c)] = i;  
        }
    }
    for (int i = 0; i < M; i++) {
        int startIndex = P[i];
        int endIndex = Q[i];
        int minimum = 4;
        for (int n = 0; n < 3; n++) {
            int lastOccurence = lastOccurancesArray[n];
            if (lastOccurence <= endIndex && lastOccurence >= startIndex) {
                minimum = n + 1;
            }
        }
        result[i] = minimum;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
836
7
Gpt3D_Clone836_7.java 1 39
Gpt3D_Clone836_7.java 40 72
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    int N = S.length ();
    int M = P.length;
    int [] result = new int [M];
    lastOccurrencesMap = new int [3] [N];
    int lastA = - 1;
    int lastC = - 1;
    int lastG = - 1;
    for (int i = 0;
    i < N; i ++) {
        char c = S.charAt (i);
        if (c == 'A') {
            lastA = i;
        } else if (c == 'C') {
            lastC = i;
        } else if (c == 'G') {
            lastG = i;
        }
        lastOccurrencesMap [0] [i] = lastA;
        lastOccurrencesMap [1] [i] = lastC;
        lastOccurrencesMap [2] [i] = lastG;
    }
    for (int i = 0;
    i < M; i ++) {
        int startIndex = P [i];
        int endIndex = Q [i];
        int minimum = 4;
        for (int n = 0;
        n < 3; n ++) {
            int lastOccurence = getLastNucleotideOccurrence (startIndex, endIndex, n);
            if (lastOccurence != 0) {
                minimum = n + 1;
                break;
            }
        }
        result [i] = minimum;
    }
    return result;
}
----------------------------------------

  public int [] solution (String S, int [] P, int [] Q) {
    int N = S.length ();
    int M = P.length;
    int [] result = new int [M];
    HashMap<Character, Integer> lastOccurrencesMap = new HashMap();
    for (int i = 0; i < N; i++) {
        lastOccurrencesMap.put(S.charAt(i), i);
    }
    for (int i = 0; i < M; i++) {
        int startIndex = P[i];
        int endIndex = Q[i];
        int minimum = 5;
        if (lastOccurrencesMap.containsKey('A')) {
            int lastOccurenceA = lastOccurrencesMap.get('A');
            if (lastOccurenceA >= startIndex && lastOccurenceA <= endIndex) 
               minimum = 1;
        }
        if (lastOccurrencesMap.containsKey('C') && minimum > 1) {
            int lastOccurenceC = lastOccurrencesMap.get('C');
            if (lastOccurenceC >= startIndex && lastOccurenceC <= endIndex) 
                minimum = 2;
        } 
        if (lastOccurrencesMap.containsKey('G') && minimum > 2) {
            int lastOccurenceG = lastOccurrencesMap.get('G');
            if (lastOccurenceG >= startIndex && lastOccurenceG <= endIndex) 
                minimum = 3;
        }
        result[i] = minimum;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
836
8
Gpt3D_Clone836_8.java 1 39
Gpt3D_Clone836_8.java 40 69
----------------------------------------

public int [] solution (String S, int [] P, int [] Q) {
    int N = S.length ();
    int M = P.length;
    int [] result = new int [M];
    lastOccurrencesMap = new int [3] [N];
    int lastA = - 1;
    int lastC = - 1;
    int lastG = - 1;
    for (int i = 0;
    i < N; i ++) {
        char c = S.charAt (i);
        if (c == 'A') {
            lastA = i;
        } else if (c == 'C') {
            lastC = i;
        } else if (c == 'G') {
            lastG = i;
        }
        lastOccurrencesMap [0] [i] = lastA;
        lastOccurrencesMap [1] [i] = lastC;
        lastOccurrencesMap [2] [i] = lastG;
    }
    for (int i = 0;
    i < M; i ++) {
        int startIndex = P [i];
        int endIndex = Q [i];
        int minimum = 4;
        for (int n = 0;
        n < 3; n ++) {
            int lastOccurence = getLastNucleotideOccurrence (startIndex, endIndex, n);
            if (lastOccurence != 0) {
                minimum = n + 1;
                break;
            }
        }
        result [i] = minimum;
    }
    return result;
}
----------------------------------------

 public int [] solution (String S, int [] P, int [] Q) {
    int N = S.length ();
    int M = P.length;
    int [] result = new int [M];
    lastOccurancesArray = new int [3];
    for (int i = 0; i < 3; i++) {
        lastOccurancesArray[i] = -1;
    }
    for (int i = 0; i < N; i++){
        char c = S.charAt(i);
        if (c == 'A' || c == 'C' || c == 'G') {
            lastOccurancesArray[c - 'A'] = i; 
        }
    }
    for (int i = 0; i < M; i++) {
        int startIndex = P[i];
        int endIndex = Q[i];
        int minimum = 4;
        for (int n = 0; n < 3; n++) {
            int lastOccurence = lastOccurancesArray[n];
            if (lastOccurence != -1 && lastOccurence >= startIndex && lastOccurence <= endIndex) {
                minimum = n + 1;
            }
        }
        result[i] = minimum;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
837
0
Gpt3D_Clone837_0.java 1 10
Gpt3D_Clone837_0.java 11 27
----------------------------------------

bool isPrime (int number) {
    if (number < 2) return false;
    if (number == 2) return true;
    if (number % 2 == 0) return false;
    for (int i = 3;
    (i * i) <= number; i += 2) {
        if (number % i == 0) return false;
    }
    return true;
}
----------------------------------------

 bool isPrime(int n)
{
    int prime = 1;
    if (n < 2) prime = 0;
    else if (n == 2) prime = 1;
    else if (n % 2 == 0) prime = 0;
    int divisor;
    for (divisor = 3; divisor * divisor <= n; divisor += 2)
    {
        if (n % divisor == 0) prime = 0;
    }
    return prime;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
837
5
Gpt3D_Clone837_5.java 1 10
Gpt3D_Clone837_5.java 11 25
----------------------------------------

bool isPrime (int number) {
    if (number < 2) return false;
    if (number == 2) return true;
    if (number % 2 == 0) return false;
    for (int i = 3;
    (i * i) <= number; i += 2) {
        if (number % i == 0) return false;
    }
    return true;
}
----------------------------------------

 bool isPrime(int num) 
{ 
    if (num <= 1)  return false; 
    if (num <= 3)  return true; 
   
    if (num % 2 == 0 || num % 3 == 0) return false; 
   
    for (int i = 5; i * i <= num; i = i + 6) 
        if (num % i == 0 || num % (i + 2) == 0) 
            return false; 
   
    return true; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
837
6
Gpt3D_Clone837_6.java 1 10
Gpt3D_Clone837_6.java 11 28
----------------------------------------

bool isPrime (int number) {
    if (number < 2) return false;
    if (number == 2) return true;
    if (number % 2 == 0) return false;
    for (int i = 3;
    (i * i) <= number; i += 2) {
        if (number % i == 0) return false;
    }
    return true;
}
----------------------------------------

 bool isPrime(int num) 
{ 
    // Corner cases 
    if (num <= 1)  return false; 
    if (num <= 3)  return true; 
   
    // This is checked so that we can skip 
    // middle five numbers in below loop 
    if (num % 2 == 0 || num % 3 == 0) return false; 
   
    for (int i = 5; i * i <= num; i = i + 6) 
        if (num % i == 0 || num % (i + 2) == 0) 
            return false; 
   
    return true; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
837
7
Gpt3D_Clone837_7.java 1 10
Gpt3D_Clone837_7.java 11 28
----------------------------------------

bool isPrime (int number) {
    if (number < 2) return false;
    if (number == 2) return true;
    if (number % 2 == 0) return false;
    for (int i = 3;
    (i * i) <= number; i += 2) {
        if (number % i == 0) return false;
    }
    return true;
}
----------------------------------------

 bool isPrime(int x) 
{ 
    // Corner cases 
    if (x <= 1) return false; 
    if (x <= 3) return true; 
  
    // This is checked so that we can skip  
    // middle five numbers in below loop 
    if (x % 2 == 0 || x % 3 == 0) return false; 
  
    for (int i = 5; i * i <= x; i = i + 6) 
        if (x % i == 0 || x % (i + 2) == 0) 
            return false; 
  
    return true; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
837
8
Gpt3D_Clone837_8.java 1 10
Gpt3D_Clone837_8.java 11 25
----------------------------------------

bool isPrime (int number) {
    if (number < 2) return false;
    if (number == 2) return true;
    if (number % 2 == 0) return false;
    for (int i = 3;
    (i * i) <= number; i += 2) {
        if (number % i == 0) return false;
    }
    return true;
}
----------------------------------------

 bool isPrime(int n) 
{ 
    if (n <= 1)  return false; 
    if (n <= 3)  return true; 
    if (n%2 == 0 || n%3 == 0) return false; 
  
    for (int i=5; i*i<=n; i=i+6) 
        if (n%i == 0 || n%(i+2) == 0) 
           return false; 
  
    return true; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
837
9
Gpt3D_Clone837_9.java 1 10
Gpt3D_Clone837_9.java 11 25
----------------------------------------

bool isPrime (int number) {
    if (number < 2) return false;
    if (number == 2) return true;
    if (number % 2 == 0) return false;
    for (int i = 3;
    (i * i) <= number; i += 2) {
        if (number % i == 0) return false;
    }
    return true;
}
----------------------------------------

 bool isPrime(int num) 
{ 
    if (num == 0 || num == 1) 
        return false; 
    if (num == 2) 
        return true; 
  
    for (int i = 2; i <= num / 2; i++) 
        if (num % i == 0) 
            return false; 
  
    return true; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
838
2
Gpt3D_Clone838_2.java 1 14
Gpt3D_Clone838_2.java 15 28
----------------------------------------

public void tick (float delta) {
    Entity removeEntity = null;
    for (Entity e : entities) {
        e.tick (delta);
        if (e.checkStrength ()) {
            removeEntity = e;
            break;
        }
    }
    if (removeEntity != null) {
        entities.remove (removeEntity);
    }
    player.tick (delta);
}
----------------------------------------

 public void tick (float delta) {
    ListIterator<Entity> iter = entities.listIterator(); 
    while(iter.hasNext()){
        Entity e = iter.next();
        e.tick (delta);
        if (e.checkStrength()) {
            iter.remove();
            break;
        }
    }
    player.tick (delta);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
838
3
Gpt3D_Clone838_3.java 1 14
Gpt3D_Clone838_3.java 15 28
----------------------------------------

public void tick (float delta) {
    Entity removeEntity = null;
    for (Entity e : entities) {
        e.tick (delta);
        if (e.checkStrength ()) {
            removeEntity = e;
            break;
        }
    }
    if (removeEntity != null) {
        entities.remove (removeEntity);
    }
    player.tick (delta);
}
----------------------------------------

 public void tick (float delta) {
    Entity[] tempEntities = entities.toArray(new Entity[0]);
    for (int i = 0; i < tempEntities.length; i++) {
        Entity e = tempEntities[i];
        e.tick(delta);
        if(e.checkStrength()){
            entities.remove(e);
            break;
        }
    }
    player.tick(delta);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
838
4
Gpt3D_Clone838_4.java 1 14
Gpt3D_Clone838_4.java 15 28
----------------------------------------

public void tick (float delta) {
    Entity removeEntity = null;
    for (Entity e : entities) {
        e.tick (delta);
        if (e.checkStrength ()) {
            removeEntity = e;
            break;
        }
    }
    if (removeEntity != null) {
        entities.remove (removeEntity);
    }
    player.tick (delta);
}
----------------------------------------

 public void tick (float delta) {
    Iterator<Entity> iter = entities.iterator();
    while(iter.hasNext()) {
        Entity e = iter.next();
        e.tick (delta);
        if (e.checkStrength()) {
            iter.remove();
            break;
        }
    }
    player.tick (delta);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
838
5
Gpt3D_Clone838_5.java 1 14
Gpt3D_Clone838_5.java 15 28
----------------------------------------

public void tick (float delta) {
    Entity removeEntity = null;
    for (Entity e : entities) {
        e.tick (delta);
        if (e.checkStrength ()) {
            removeEntity = e;
            break;
        }
    }
    if (removeEntity != null) {
        entities.remove (removeEntity);
    }
    player.tick (delta);
}
----------------------------------------

 public void tick (float delta) {
    Iterator<Entity> iter = entities.iterator();
    while(iter.hasNext()) {
        Entity e = iter.next();
        e.tick (delta);
        if (e.checkStrength()) {
            entities.remove(e);
            break;
        }
    }
    player.tick (delta);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
838
6
Gpt3D_Clone838_6.java 1 14
Gpt3D_Clone838_6.java 15 28
----------------------------------------

public void tick (float delta) {
    Entity removeEntity = null;
    for (Entity e : entities) {
        e.tick (delta);
        if (e.checkStrength ()) {
            removeEntity = e;
            break;
        }
    }
    if (removeEntity != null) {
        entities.remove (removeEntity);
    }
    player.tick (delta);
}
----------------------------------------

 public void tick (float delta) {
    for (Iterator<Entity> iterator = entities.iterator(); iterator.hasNext(); ) {
        Entity e = iterator.next();
        e.tick (delta);
        if (e.checkStrength()) {
            entities.remove(e);
            break;
        }
    }
    player.tick (delta);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
838
7
Gpt3D_Clone838_7.java 1 14
Gpt3D_Clone838_7.java 15 28
----------------------------------------

public void tick (float delta) {
    Entity removeEntity = null;
    for (Entity e : entities) {
        e.tick (delta);
        if (e.checkStrength ()) {
            removeEntity = e;
            break;
        }
    }
    if (removeEntity != null) {
        entities.remove (removeEntity);
    }
    player.tick (delta);
}
----------------------------------------

 public void tick (float delta) {
    for (int i = 0; i < entities.size(); i++) {
        Entity e = entities.get(i);
        e.tick (delta);
        if (e.checkStrength()) {
            entities.remove(i);
            break;
        }
    }
    player.tick (delta);
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
840
0
Gpt3D_Clone840_0.java 1 21
Gpt3D_Clone840_0.java 22 39
----------------------------------------

public static String join (String separator, String...values) {
    if (values.length == 0) return "";
    char [] sep = separator.toCharArray ();
    int totalSize = (values.length - 1) * sep.length;
    for (int i = 0;
    i < values.length; i ++) {
        if (values [i] == null) values [i] = "";
        else totalSize += values [i].length ();
    }
    char [] joined = new char [totalSize];
    int pos = 0;
    for (int i = 0, end = values.length - 1;
    i < end; i ++) {
        System.arraycopy (values [i].toCharArray (), 0, joined, pos, values [i].length ());
        pos += values [i].length ();
        System.arraycopy (sep, 0, joined, pos, sep.length);
        pos += sep.length;
    }
    System.arraycopy (values [values.length - 1].toCharArray (), 0, joined, pos, values [values.length - 1].length ());
    return new String (joined);
}
----------------------------------------

 public static String join(String delimiter, String... values) {
    
    if (values.length == 0) return "";
    int totalSize = (values.length - 1) * delimiter.length();
    for (int i = 0; i < values.length; i++) {
        if (values[i] == null) values[i] = "";
        else totalSize += values[i].length();
    }
    StringBuilder joined = new StringBuilder(totalSize);
    for (int i = 0; i < values.length - 1; i++) {
        joined.append(values[i]);
        joined.append(delimiter);
    }
    joined.append(values[values.length - 1]);
    return joined.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
840
1
Gpt3D_Clone840_1.java 1 21
Gpt3D_Clone840_1.java 22 36
----------------------------------------

public static String join (String separator, String...values) {
    if (values.length == 0) return "";
    char [] sep = separator.toCharArray ();
    int totalSize = (values.length - 1) * sep.length;
    for (int i = 0;
    i < values.length; i ++) {
        if (values [i] == null) values [i] = "";
        else totalSize += values [i].length ();
    }
    char [] joined = new char [totalSize];
    int pos = 0;
    for (int i = 0, end = values.length - 1;
    i < end; i ++) {
        System.arraycopy (values [i].toCharArray (), 0, joined, pos, values [i].length ());
        pos += values [i].length ();
        System.arraycopy (sep, 0, joined, pos, sep.length);
        pos += sep.length;
    }
    System.arraycopy (values [values.length - 1].toCharArray (), 0, joined, pos, values [values.length - 1].length ());
    return new String (joined);
}
----------------------------------------

	public static String join (String sep, String... words) { 
    
    if (words.length == 0)
        return "";
    
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < words.length - 1; i++) { 
        sb.append(words[i]); 
        sb.append(sep); 
    } 
    sb.append(words[words.length - 1]); 
    return sb.toString(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
840
2
Gpt3D_Clone840_2.java 1 21
Gpt3D_Clone840_2.java 22 34
----------------------------------------

public static String join (String separator, String...values) {
    if (values.length == 0) return "";
    char [] sep = separator.toCharArray ();
    int totalSize = (values.length - 1) * sep.length;
    for (int i = 0;
    i < values.length; i ++) {
        if (values [i] == null) values [i] = "";
        else totalSize += values [i].length ();
    }
    char [] joined = new char [totalSize];
    int pos = 0;
    for (int i = 0, end = values.length - 1;
    i < end; i ++) {
        System.arraycopy (values [i].toCharArray (), 0, joined, pos, values [i].length ());
        pos += values [i].length ();
        System.arraycopy (sep, 0, joined, pos, sep.length);
        pos += sep.length;
    }
    System.arraycopy (values [values.length - 1].toCharArray (), 0, joined, pos, values [values.length - 1].length ());
    return new String (joined);
}
----------------------------------------

 public static String join (String seperator, String... arguments) 
{
    if (arguments.length == 0) return "";
    StringBuilder sb = new StringBuilder();
    for(int i=0; i<arguments.length - 1 ; i++)
    {
        sb.append(arguments[i] + seperator);
    }
    sb.append(arguments[arguments.length - 1]);
    return sb.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
840
3
Gpt3D_Clone840_3.java 1 21
Gpt3D_Clone840_3.java 22 34
----------------------------------------

public static String join (String separator, String...values) {
    if (values.length == 0) return "";
    char [] sep = separator.toCharArray ();
    int totalSize = (values.length - 1) * sep.length;
    for (int i = 0;
    i < values.length; i ++) {
        if (values [i] == null) values [i] = "";
        else totalSize += values [i].length ();
    }
    char [] joined = new char [totalSize];
    int pos = 0;
    for (int i = 0, end = values.length - 1;
    i < end; i ++) {
        System.arraycopy (values [i].toCharArray (), 0, joined, pos, values [i].length ());
        pos += values [i].length ();
        System.arraycopy (sep, 0, joined, pos, sep.length);
        pos += sep.length;
    }
    System.arraycopy (values [values.length - 1].toCharArray (), 0, joined, pos, values [values.length - 1].length ());
    return new String (joined);
}
----------------------------------------

 public static String join (String sep, String...words) { 
    StringBuilder result = new StringBuilder();
    if (words.length == 0) return ""; 
    
     for (String w: words) { 
        result.append(w); 
        result.append(sep); 
     } 
    
    return result.substring(0, result.length() - sep.length()); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
840
4
Gpt3D_Clone840_4.java 1 21
Gpt3D_Clone840_4.java 22 33
----------------------------------------

public static String join (String separator, String...values) {
    if (values.length == 0) return "";
    char [] sep = separator.toCharArray ();
    int totalSize = (values.length - 1) * sep.length;
    for (int i = 0;
    i < values.length; i ++) {
        if (values [i] == null) values [i] = "";
        else totalSize += values [i].length ();
    }
    char [] joined = new char [totalSize];
    int pos = 0;
    for (int i = 0, end = values.length - 1;
    i < end; i ++) {
        System.arraycopy (values [i].toCharArray (), 0, joined, pos, values [i].length ());
        pos += values [i].length ();
        System.arraycopy (sep, 0, joined, pos, sep.length);
        pos += sep.length;
    }
    System.arraycopy (values [values.length - 1].toCharArray (), 0, joined, pos, values [values.length - 1].length ());
    return new String (joined);
}
----------------------------------------

	public static String join(String delimiter, String... strings) {
    StringBuilder builder = new StringBuilder();
    if (strings.length == 0) return "";
    
    for (int i = 0; i < strings.length - 1; i++) {
        builder.append(strings[i]);
        builder.append(delimiter);
    }
    return builder.append(strings[strings.length - 1]).toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
840
5
Gpt3D_Clone840_5.java 1 21
Gpt3D_Clone840_5.java 22 37
----------------------------------------

public static String join (String separator, String...values) {
    if (values.length == 0) return "";
    char [] sep = separator.toCharArray ();
    int totalSize = (values.length - 1) * sep.length;
    for (int i = 0;
    i < values.length; i ++) {
        if (values [i] == null) values [i] = "";
        else totalSize += values [i].length ();
    }
    char [] joined = new char [totalSize];
    int pos = 0;
    for (int i = 0, end = values.length - 1;
    i < end; i ++) {
        System.arraycopy (values [i].toCharArray (), 0, joined, pos, values [i].length ());
        pos += values [i].length ();
        System.arraycopy (sep, 0, joined, pos, sep.length);
        pos += sep.length;
    }
    System.arraycopy (values [values.length - 1].toCharArray (), 0, joined, pos, values [values.length - 1].length ());
    return new String (joined);
}
----------------------------------------

  public static String join (String delimiter, String...values) 
{ 
    if (values.length == 0) return ""; 
    
     StringBuilder sb = new StringBuilder(); 
    
    for (int i = 0; i < values.length - 1; i++) { 
        sb.append(values[i]).append(delimiter); 
     } 
    
     sb.append(values[values.length - 1]); 
    
     return sb.toString(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
840
6
Gpt3D_Clone840_6.java 1 21
Gpt3D_Clone840_6.java 22 36
----------------------------------------

public static String join (String separator, String...values) {
    if (values.length == 0) return "";
    char [] sep = separator.toCharArray ();
    int totalSize = (values.length - 1) * sep.length;
    for (int i = 0;
    i < values.length; i ++) {
        if (values [i] == null) values [i] = "";
        else totalSize += values [i].length ();
    }
    char [] joined = new char [totalSize];
    int pos = 0;
    for (int i = 0, end = values.length - 1;
    i < end; i ++) {
        System.arraycopy (values [i].toCharArray (), 0, joined, pos, values [i].length ());
        pos += values [i].length ();
        System.arraycopy (sep, 0, joined, pos, sep.length);
        pos += sep.length;
    }
    System.arraycopy (values [values.length - 1].toCharArray (), 0, joined, pos, values [values.length - 1].length ());
    return new String (joined);
}
----------------------------------------

 public static String join (String separator, String...values)
{
    if (values.length== 0)
        return "";
    StringBuilder stringBuilder = new StringBuilder();
    for (String s : values)
    {
        stringBuilder.append(s);
        stringBuilder.append(separator);
    }
    return stringBuilder.substring(0, stringBuilder.length()-separator.length());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
840
7
Gpt3D_Clone840_7.java 1 21
Gpt3D_Clone840_7.java 22 35
----------------------------------------

public static String join (String separator, String...values) {
    if (values.length == 0) return "";
    char [] sep = separator.toCharArray ();
    int totalSize = (values.length - 1) * sep.length;
    for (int i = 0;
    i < values.length; i ++) {
        if (values [i] == null) values [i] = "";
        else totalSize += values [i].length ();
    }
    char [] joined = new char [totalSize];
    int pos = 0;
    for (int i = 0, end = values.length - 1;
    i < end; i ++) {
        System.arraycopy (values [i].toCharArray (), 0, joined, pos, values [i].length ());
        pos += values [i].length ();
        System.arraycopy (sep, 0, joined, pos, sep.length);
        pos += sep.length;
    }
    System.arraycopy (values [values.length - 1].toCharArray (), 0, joined, pos, values [values.length - 1].length ());
    return new String (joined);
}
----------------------------------------

 public static String join (String seperator, String... arguments) 
{
    if (arguments.length == 0) return "";
    
     String concatString = ""; 
    
    for (String str: arguments) { 
        concatString += (str + seperator); 
     } 
    
    return concatString.substring(0, concatString.length() - seperator.length()); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
840
8
Gpt3D_Clone840_8.java 1 21
Gpt3D_Clone840_8.java 22 35
----------------------------------------

public static String join (String separator, String...values) {
    if (values.length == 0) return "";
    char [] sep = separator.toCharArray ();
    int totalSize = (values.length - 1) * sep.length;
    for (int i = 0;
    i < values.length; i ++) {
        if (values [i] == null) values [i] = "";
        else totalSize += values [i].length ();
    }
    char [] joined = new char [totalSize];
    int pos = 0;
    for (int i = 0, end = values.length - 1;
    i < end; i ++) {
        System.arraycopy (values [i].toCharArray (), 0, joined, pos, values [i].length ());
        pos += values [i].length ();
        System.arraycopy (sep, 0, joined, pos, sep.length);
        pos += sep.length;
    }
    System.arraycopy (values [values.length - 1].toCharArray (), 0, joined, pos, values [values.length - 1].length ());
    return new String (joined);
}
----------------------------------------

 public static String join (String separator, String...values) 
{ 
    if (values.length == 0) return ""; 
    
     String tempString = ""; 
    
    for (String s: values) { 
        tempString += (s + separator); 
     } 
    
    return tempString.substring(0, tempString.length() - separator.length()); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
841
0
Gpt3D_Clone841_0.java 1 21
Gpt3D_Clone841_0.java 22 52
----------------------------------------

public static String join (String separator, String...values) {
    if (values.length == 0) return "";
    char [] sep = separator.toCharArray ();
    int totalSize = (values.length - 1) * sep.length;
    for (int i = 0;
    i < values.length; i ++) {
        if (values [i] == null) values [i] = "";
        else totalSize += values [i].length ();
    }
    char [] joined = new char [totalSize];
    int pos = 0;
    for (int i = 0, end = values.length - 1;
    i < end; i ++) {
        System.arraycopy (values [i].toCharArray (), 0, joined, pos, values [i].length ());
        pos += values [i].length ();
        System.arraycopy (sep, 0, joined, pos, sep.length);
        pos += sep.length;
    }
    System.arraycopy (values [values.length - 1].toCharArray (), 0, joined, pos, values [values.length - 1].length ());
    return new String (joined);
}
----------------------------------------

 public static String joinJoin (String separator, String...values) {
    if (values.length == 0) return "";
    String output = values[0];
    int totalSize = output.length();
    for (int i = 0; i < values.length; i++) {
        if (i != 0) {
            output += separator + values[i];
            totalSize += separator.length() + values[i].length();
        }
    }
    if (totalSize != output.length()) {
        char [] arr = new char [totalSize];
        int index = 0;
        for (int i = 0; i < values.length; i++) {
            for (int j = 0 ;j < values[i].length(); j++) {
                arr[index] = values[i].charAt(j);
                index++;
            }
            if (i != values.length -1) {
                for (int k = 0; k < separator.length(); k++) {
                    arr[index] = separator.charAt(k);
                    index++;
                }
            }
        }
        output = new String(arr);
    }
    return output;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
841
1
Gpt3D_Clone841_1.java 1 21
Gpt3D_Clone841_1.java 22 52
----------------------------------------

public static String join (String separator, String...values) {
    if (values.length == 0) return "";
    char [] sep = separator.toCharArray ();
    int totalSize = (values.length - 1) * sep.length;
    for (int i = 0;
    i < values.length; i ++) {
        if (values [i] == null) values [i] = "";
        else totalSize += values [i].length ();
    }
    char [] joined = new char [totalSize];
    int pos = 0;
    for (int i = 0, end = values.length - 1;
    i < end; i ++) {
        System.arraycopy (values [i].toCharArray (), 0, joined, pos, values [i].length ());
        pos += values [i].length ();
        System.arraycopy (sep, 0, joined, pos, sep.length);
        pos += sep.length;
    }
    System.arraycopy (values [values.length - 1].toCharArray (), 0, joined, pos, values [values.length - 1].length ());
    return new String (joined);
}
----------------------------------------

 public static String joinStrings (String separator, String...values) {
    if (values.length == 0) return ""; 
    String joined = values[0];
    int totalSize = joined.length();
    for (int i = 1; i < values.length; i++) {
        joined += separator + values[i];
        if (values[i] != null)
          totalSize += values[i].length();
    }
    if (totalSize != joined.length()) {
        char[] joinedArr = new char[totalSize];
        int pos = 0;
        for (int i = 0, end = values.length - 1; i < end; i++) {
            for (int y = 0; y < values[i].length(); y++) {
                joinedArr[pos + y] = values[i].charAt(y);
            }
            pos += values[i].length();
            for (int z = 0; z < separator.length(); z++) {
                joinedArr[pos + z] = separator.charAt(z);
            }
            pos += separator.length();
            for (int x = 0; x < values[i].length(); x++) {
                joinedArr[pos + x] = values[i].charAt(x);
            }
        }
        joined = new String(joinedArr);
    }
    return joined;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
841
3
Gpt3D_Clone841_3.java 1 21
Gpt3D_Clone841_3.java 22 50
----------------------------------------

public static String join (String separator, String...values) {
    if (values.length == 0) return "";
    char [] sep = separator.toCharArray ();
    int totalSize = (values.length - 1) * sep.length;
    for (int i = 0;
    i < values.length; i ++) {
        if (values [i] == null) values [i] = "";
        else totalSize += values [i].length ();
    }
    char [] joined = new char [totalSize];
    int pos = 0;
    for (int i = 0, end = values.length - 1;
    i < end; i ++) {
        System.arraycopy (values [i].toCharArray (), 0, joined, pos, values [i].length ());
        pos += values [i].length ();
        System.arraycopy (sep, 0, joined, pos, sep.length);
        pos += sep.length;
    }
    System.arraycopy (values [values.length - 1].toCharArray (), 0, joined, pos, values [values.length - 1].length ());
    return new String (joined);
}
----------------------------------------

 public static String joinArrayList (String separator, String...values) {
    if (values.length == 0) return ""; 
    LinkedList<Character> joinedList = new LinkedList<>();
    int totalSize = (values.length - 1) * separator.length();
    for (int i = 0; i < values.length; i++) {
        if (values[i] == null) values[i] = "";
        else totalSize += values[i].length();
    }
    int count = 0;
    for (int i = 0; i < values.length; i++) {
        for (int k = 0; k < values[i].length(); k++) {
            joinedList.add(values[i].charAt(k));
            count++;
        }
        if (i != values.length -1) {
            for (int l = 0; l < separator.length(); l++) {
                joinedList.add(separator.charAt(l));
                count++;
            }
        }
    }
    char[] joinedArr = new char[count];
    for (int p = 0; p < joinedList.size(); p++){
        joinedArr[p] = joinedList.get(p);
    }
    return new String(joinedArr);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
841
4
Gpt3D_Clone841_4.java 1 21
Gpt3D_Clone841_4.java 22 50
----------------------------------------

public static String join (String separator, String...values) {
    if (values.length == 0) return "";
    char [] sep = separator.toCharArray ();
    int totalSize = (values.length - 1) * sep.length;
    for (int i = 0;
    i < values.length; i ++) {
        if (values [i] == null) values [i] = "";
        else totalSize += values [i].length ();
    }
    char [] joined = new char [totalSize];
    int pos = 0;
    for (int i = 0, end = values.length - 1;
    i < end; i ++) {
        System.arraycopy (values [i].toCharArray (), 0, joined, pos, values [i].length ());
        pos += values [i].length ();
        System.arraycopy (sep, 0, joined, pos, sep.length);
        pos += sep.length;
    }
    System.arraycopy (values [values.length - 1].toCharArray (), 0, joined, pos, values [values.length - 1].length ());
    return new String (joined);
}
----------------------------------------

 public static String joinArray (String separator, String...values) { 
    if (values.length == 0) return ""; 
    String joinedStr = "";
    int totalSize = (values.length - 1) * separator.length();
    for (int i = 0; i < values.length; i++) {
        if (values[i] == null) values[i] = "";
        else totalSize += values[i].length();
    }
    String[] joined = new String[totalSize];
    int count = 0;
    for (int i = 0; i < values.length; i++) {
        for (int k = 0; k < values[i].length(); k++) {
            joined[count] = Character.toString(values[i].charAt(k));
            count++;
        }
        if (i != values.length -1) {
            for (int l = 0; l < separator.length(); l++) {
                joined[count] = Character.toString(separator.charAt(l));
                count++;
            }
        }
    }
    for (int m = 0; m < joined.length; m++) {
        joinedStr += joined[m];
    }
    return joinedStr;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
841
5
Gpt3D_Clone841_5.java 1 21
Gpt3D_Clone841_5.java 22 40
----------------------------------------

public static String join (String separator, String...values) {
    if (values.length == 0) return "";
    char [] sep = separator.toCharArray ();
    int totalSize = (values.length - 1) * sep.length;
    for (int i = 0;
    i < values.length; i ++) {
        if (values [i] == null) values [i] = "";
        else totalSize += values [i].length ();
    }
    char [] joined = new char [totalSize];
    int pos = 0;
    for (int i = 0, end = values.length - 1;
    i < end; i ++) {
        System.arraycopy (values [i].toCharArray (), 0, joined, pos, values [i].length ());
        pos += values [i].length ();
        System.arraycopy (sep, 0, joined, pos, sep.length);
        pos += sep.length;
    }
    System.arraycopy (values [values.length - 1].toCharArray (), 0, joined, pos, values [values.length - 1].length ());
    return new String (joined);
}
----------------------------------------

 public static String joinUtil (String separator, String...values) {
    if (values.length == 0) return "";
    StringBuilder joined = new StringBuilder();
    int totalSize = 0;
    for (int i = 0; i < values.length; i++) {
        if (values[i] == null) values[i] = "";
        else totalSize += values[i].length();
    }
    totalSize += (values.length - 1) * separator.length();
    for (int i = 0; i < values.length; i++) {
        joined.append(values[i]);  
        if (i != values.length-1) 
            joined.append(separator);
    }
    return joined.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
841
6
Gpt3D_Clone841_6.java 1 21
Gpt3D_Clone841_6.java 22 39
----------------------------------------

public static String join (String separator, String...values) {
    if (values.length == 0) return "";
    char [] sep = separator.toCharArray ();
    int totalSize = (values.length - 1) * sep.length;
    for (int i = 0;
    i < values.length; i ++) {
        if (values [i] == null) values [i] = "";
        else totalSize += values [i].length ();
    }
    char [] joined = new char [totalSize];
    int pos = 0;
    for (int i = 0, end = values.length - 1;
    i < end; i ++) {
        System.arraycopy (values [i].toCharArray (), 0, joined, pos, values [i].length ());
        pos += values [i].length ();
        System.arraycopy (sep, 0, joined, pos, sep.length);
        pos += sep.length;
    }
    System.arraycopy (values [values.length - 1].toCharArray (), 0, joined, pos, values [values.length - 1].length ());
    return new String (joined);
}
----------------------------------------

 public static String joinBy (String separator, String... values) {
    if (values.length == 0) return ""; 
    int size = (values.length - 1) * separator.length();
    for (int i = 0; i < values.length; i++)
        size += values[i].length();
    char[] joined = new char[size];
    int count = 0;    
    for (int i = 0; i < values.length; i++){
        for (int j= 0; j < values[i].length(); j++)
            joined[count++] = values[i].charAt(j);
        if (i < values.length - 1)
            for (int j = 0; j < separator.length(); j++)
                joined[count++] = separator.charAt(j);
    }
    return new String(joined);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
841
7
Gpt3D_Clone841_7.java 1 21
Gpt3D_Clone841_7.java 22 36
----------------------------------------

public static String join (String separator, String...values) {
    if (values.length == 0) return "";
    char [] sep = separator.toCharArray ();
    int totalSize = (values.length - 1) * sep.length;
    for (int i = 0;
    i < values.length; i ++) {
        if (values [i] == null) values [i] = "";
        else totalSize += values [i].length ();
    }
    char [] joined = new char [totalSize];
    int pos = 0;
    for (int i = 0, end = values.length - 1;
    i < end; i ++) {
        System.arraycopy (values [i].toCharArray (), 0, joined, pos, values [i].length ());
        pos += values [i].length ();
        System.arraycopy (sep, 0, joined, pos, sep.length);
        pos += sep.length;
    }
    System.arraycopy (values [values.length - 1].toCharArray (), 0, joined, pos, values [values.length - 1].length ());
    return new String (joined);
}
----------------------------------------

  public static String joinSeparator(String separator, String...values) {
    StringBuilder result = new StringBuilder();
    if (values.length == 0) return "";
    result.append(values[0]);
    for (int i = 1; i < values.length; i++){
        if (values[i] == null) {
            result.append(separator).append("");
        } else {
            result.append(separator).append(values[i]);
        }
    }
    return result.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
841
8
Gpt3D_Clone841_8.java 1 21
Gpt3D_Clone841_8.java 22 34
----------------------------------------

public static String join (String separator, String...values) {
    if (values.length == 0) return "";
    char [] sep = separator.toCharArray ();
    int totalSize = (values.length - 1) * sep.length;
    for (int i = 0;
    i < values.length; i ++) {
        if (values [i] == null) values [i] = "";
        else totalSize += values [i].length ();
    }
    char [] joined = new char [totalSize];
    int pos = 0;
    for (int i = 0, end = values.length - 1;
    i < end; i ++) {
        System.arraycopy (values [i].toCharArray (), 0, joined, pos, values [i].length ());
        pos += values [i].length ();
        System.arraycopy (sep, 0, joined, pos, sep.length);
        pos += sep.length;
    }
    System.arraycopy (values [values.length - 1].toCharArray (), 0, joined, pos, values [values.length - 1].length ());
    return new String (joined);
}
----------------------------------------

 public static String joinSplit (String separator, String...values) {
    if (values.length == 0) return "";
    StringBuilder result = new StringBuilder();
    for (int i = 0; i < values.length; i++) {
        if (i == values.length-1)
            result.append(values[i]);
        else
            result.append(values[i]).append(separator);
    }
    return result.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
841
9
Gpt3D_Clone841_9.java 1 21
Gpt3D_Clone841_9.java 22 34
----------------------------------------

public static String join (String separator, String...values) {
    if (values.length == 0) return "";
    char [] sep = separator.toCharArray ();
    int totalSize = (values.length - 1) * sep.length;
    for (int i = 0;
    i < values.length; i ++) {
        if (values [i] == null) values [i] = "";
        else totalSize += values [i].length ();
    }
    char [] joined = new char [totalSize];
    int pos = 0;
    for (int i = 0, end = values.length - 1;
    i < end; i ++) {
        System.arraycopy (values [i].toCharArray (), 0, joined, pos, values [i].length ());
        pos += values [i].length ();
        System.arraycopy (sep, 0, joined, pos, sep.length);
        pos += sep.length;
    }
    System.arraycopy (values [values.length - 1].toCharArray (), 0, joined, pos, values [values.length - 1].length ());
    return new String (joined);
}
----------------------------------------

 public static String joinParts (String separator, String...values) {
    if (values.length == 0) return ""; 
    String result = values[0];
    for (int i = 1; i < values.length; i++) {
        if (values[i] == null)
            result += separator;
        else
            result += separator + values[i];
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
843
0
Gpt3D_Clone843_0.java 1 12
Gpt3D_Clone843_0.java 13 34
----------------------------------------

public static String sequenceNums (int [] nums) {
    StringBuilder sb = new StringBuilder ();
    if (nums.length == 0) return sb.toString ();
    int begin = nums [0], end = nums [0];
    for (int cur : nums) if (cur - end <= 1) end = cur;
    else {
        appendRange (sb, begin, end);
        begin = end = cur;
    }
    appendRange (sb, begin, end);
    return sb.substring (1);
}
----------------------------------------

 public static String sequenceNums (int [] nums) {
    StringBuilder sb = new StringBuilder ();
    if (nums.length == 0) return sb.toString ();
    int begin = nums[0], end = nums[0];
    int cur;
    int index = 1;
    while(index < nums.length) {
        cur = nums[index];
        if (cur - end > 1) {
            appendRange (sb, begin, end);
            begin = end = cur;
        }
        else {
            end = cur;
        }
        index++;
    }
    appendRange (sb, begin, end);
    return sb.substring (1);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
844
0
Gpt3D_Clone844_0.java 1 12
Gpt3D_Clone844_0.java 13 37
----------------------------------------

public static String sequenceNums (int [] nums) {
    StringBuilder sb = new StringBuilder ();
    if (nums.length == 0) return sb.toString ();
    int begin = nums [0], end = nums [0];
    for (int cur : nums) if (cur - end <= 1) end = cur;
    else {
        appendRange (sb, begin, end);
        begin = end = cur;
    }
    appendRange (sb, begin, end);
    return sb.substring (1);
}
----------------------------------------

 public static String sequenceNums (int [] nums) {
    StringBuilder sb = new StringBuilder ();
    if (nums.length == 0) return sb.toString ();
    HashSet<Integer> check = new HashSet<>();
    for (int ints : nums) {
        check.add(ints);
    }
    List<Integer> newList = new ArrayList<>(check);
    Collections.sort(newList);
    int startNum = newList.get(0);
    int endNum = newList.get(0);
    for (int i = 1; i < newList.size(); i++){
        if (newList.get(i) - endNum <= 1) {
            endNum = newList.get(i); 
        }
        else {
            appendRange (sb, startNum, endNum);
            startNum = endNum = newList.get(i);
        }
    }
    appendRange (sb, startNum, endNum);
    return sb.substring (1);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
844
1
Gpt3D_Clone844_1.java 1 12
Gpt3D_Clone844_1.java 13 35
----------------------------------------

public static String sequenceNums (int [] nums) {
    StringBuilder sb = new StringBuilder ();
    if (nums.length == 0) return sb.toString ();
    int begin = nums [0], end = nums [0];
    for (int cur : nums) if (cur - end <= 1) end = cur;
    else {
        appendRange (sb, begin, end);
        begin = end = cur;
    }
    appendRange (sb, begin, end);
    return sb.substring (1);
}
----------------------------------------

 public static String sequenceNums (int [] nums) {
    StringBuilder sb = new StringBuilder ();
    if (nums.length == 0) return sb.toString ();
    Arrays.sort(nums);
    int begin = nums[0], end = nums[0];
    List<Integer> myList = new ArrayList<>();
    myList.add(nums[0]);
    for (int i = 1; i < nums.length; i++) {
        if (nums[i] - end <= 1) {
            end = nums[i];
            myList.add(nums[i]);
        } else {
            appendRangeOfList(sb, myList);
            begin = end = nums[i];
            myList.clear();
            myList.add(nums[i]);
        }
    }
    appendRangeOfList(sb, myList);
    return sb.substring (1);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
844
2
Gpt3D_Clone844_2.java 1 12
Gpt3D_Clone844_2.java 13 34
----------------------------------------

public static String sequenceNums (int [] nums) {
    StringBuilder sb = new StringBuilder ();
    if (nums.length == 0) return sb.toString ();
    int begin = nums [0], end = nums [0];
    for (int cur : nums) if (cur - end <= 1) end = cur;
    else {
        appendRange (sb, begin, end);
        begin = end = cur;
    }
    appendRange (sb, begin, end);
    return sb.substring (1);
}
----------------------------------------

 public static String sequenceNums (int [] nums) {
    StringBuilder sb = new StringBuilder ();
    if (nums == null || nums.length == 0) return sb.toString ();
    int begin = nums [0], end = nums [0];
    Stack<Integer> myStack = new Stack<>();
    myStack.push(nums[0]);
    for (int i = 1; i < nums.length; i++) {
        if (nums[i] - end <= 1) {
            end = nums[i];
            myStack.push(nums[i]);
        } else {
            appendRangeOfStack(sb, myStack);
            begin = end = nums[i];
            myStack.clear();
            myStack.push(nums[i]);
        }
    }
    appendRangeOfStack(sb, myStack);
    return sb.substring (1);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
844
3
Gpt3D_Clone844_3.java 1 12
Gpt3D_Clone844_3.java 13 34
----------------------------------------

public static String sequenceNums (int [] nums) {
    StringBuilder sb = new StringBuilder ();
    if (nums.length == 0) return sb.toString ();
    int begin = nums [0], end = nums [0];
    for (int cur : nums) if (cur - end <= 1) end = cur;
    else {
        appendRange (sb, begin, end);
        begin = end = cur;
    }
    appendRange (sb, begin, end);
    return sb.substring (1);
}
----------------------------------------

 public static String sequenceNums (int [] nums) {
    StringBuilder sb = new StringBuilder ();
    if (nums == null || nums.length == 0) return sb.toString ();
    int begin = nums [0], end = nums [0];
    PriorityQueue<Integer> pQueue = new PriorityQueue<>();
    pQueue.add(nums[0]);
    for (int i = 1; i < nums.length; i++) {
        if (nums[i] - end <= 1) {
            end = nums[i];
            pQueue.add(nums[i]);
        } else {
            appendRangeOfQueue(sb, pQueue);
            begin = end = nums[i];
            pQueue.clear();
            pQueue.add(nums[i]);
        }
    }
    appendRangeOfQueue(sb, pQueue);
    return sb.substring (1);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
844
4
Gpt3D_Clone844_4.java 1 12
Gpt3D_Clone844_4.java 13 34
----------------------------------------

public static String sequenceNums (int [] nums) {
    StringBuilder sb = new StringBuilder ();
    if (nums.length == 0) return sb.toString ();
    int begin = nums [0], end = nums [0];
    for (int cur : nums) if (cur - end <= 1) end = cur;
    else {
        appendRange (sb, begin, end);
        begin = end = cur;
    }
    appendRange (sb, begin, end);
    return sb.substring (1);
}
----------------------------------------

 public static String sequenceNums (int [] nums) {
    StringBuilder sb = new StringBuilder ();
    if (nums == null || nums.length == 0) return sb.toString ();
    int begin = nums [0], end = nums [0];
    TreeSet<Integer> treeSet = new TreeSet<>();
    treeSet.add(nums[0]);
    for (int i = 1; i < nums.length; i++) {
        if (nums[i] - end <= 1) {
            end = nums[i];
            treeSet.add(nums[i]);
        } else {
            appendRangeOfTreeSet(sb, treeSet);
            begin = end = nums[i];
            treeSet.clear();
            treeSet.add(nums[i]);
        }
    }
    appendRangeOfTreeSet(sb, treeSet);
    return sb.substring (1);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
844
5
Gpt3D_Clone844_5.java 1 12
Gpt3D_Clone844_5.java 13 34
----------------------------------------

public static String sequenceNums (int [] nums) {
    StringBuilder sb = new StringBuilder ();
    if (nums.length == 0) return sb.toString ();
    int begin = nums [0], end = nums [0];
    for (int cur : nums) if (cur - end <= 1) end = cur;
    else {
        appendRange (sb, begin, end);
        begin = end = cur;
    }
    appendRange (sb, begin, end);
    return sb.substring (1);
}
----------------------------------------

 public static String sequenceNums (int [] nums) {
    StringBuilder sb = new StringBuilder ();
    if (nums == null || nums.length == 0) return sb.toString ();
    int begin = nums [0], end = nums [0];
    deque<Integer> workingDeque = new ArrayDeque<>();
    workingDeque.add(nums[0]);
    for (int i = 1; i < nums.length; i++) {
        if (nums[i] - end <= 1) {
            end = nums[i];
            workingDeque.add(nums[i]);
        } else {
            appendRangeOfDeque(sb, workingDeque);
            begin = end = nums[i];
            workingDeque.clear();
            workingDeque.add(nums[i]);
        }
    }
    appendRangeOfDeque(sb, workingDeque);
    return sb.substring (1);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
844
6
Gpt3D_Clone844_6.java 1 12
Gpt3D_Clone844_6.java 13 34
----------------------------------------

public static String sequenceNums (int [] nums) {
    StringBuilder sb = new StringBuilder ();
    if (nums.length == 0) return sb.toString ();
    int begin = nums [0], end = nums [0];
    for (int cur : nums) if (cur - end <= 1) end = cur;
    else {
        appendRange (sb, begin, end);
        begin = end = cur;
    }
    appendRange (sb, begin, end);
    return sb.substring (1);
}
----------------------------------------

 public static String sequenceNums (int [] nums) {
    StringBuilder sb = new StringBuilder ();
    if (nums == null || nums.length == 0) return sb.toString ();
    int begin = nums [0], end = nums [0];
    LinkedHashMap<Integer, Boolean> lhmap = new LinkedHashMap<>();
    lhmap.put(nums[0], true);
    for (int i = 1; i < nums.length; i++) {
        if (nums[i] - end <= 1) {
            end = nums[i];
            lhmap.put(nums[i], true);
        } else {
            appendRangeOfMap(sb, lhmap);
            begin = end = nums[i];
            lhmap.clear();
            lhmap.put(nums[i], true);
        }
    }
    appendRangeOfMap(sb, lhmap);
    return sb.substring (1);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
844
7
Gpt3D_Clone844_7.java 1 12
Gpt3D_Clone844_7.java 13 34
----------------------------------------

public static String sequenceNums (int [] nums) {
    StringBuilder sb = new StringBuilder ();
    if (nums.length == 0) return sb.toString ();
    int begin = nums [0], end = nums [0];
    for (int cur : nums) if (cur - end <= 1) end = cur;
    else {
        appendRange (sb, begin, end);
        begin = end = cur;
    }
    appendRange (sb, begin, end);
    return sb.substring (1);
}
----------------------------------------

 public static String sequenceNums (int [] nums) {
    StringBuilder sb = new StringBuilder ();
    if (nums.length == 0) return sb.toString ();
    Arrays.sort(nums); 
    int begin = 0, end = 0;
    for (int i = 0; i < nums.length; i++) {
        if (i == 0) {
            begin = end = nums[i];
        } else {
            if (nums[i] - end <= 1) {
                end = nums[i];
            } else {
                appendRange (sb, begin, end);
                begin = end = nums[i];
            }
        }
    }
    appendRange (sb, begin, end);
    return sb.substring (1);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
844
8
Gpt3D_Clone844_8.java 1 12
Gpt3D_Clone844_8.java 13 33
----------------------------------------

public static String sequenceNums (int [] nums) {
    StringBuilder sb = new StringBuilder ();
    if (nums.length == 0) return sb.toString ();
    int begin = nums [0], end = nums [0];
    for (int cur : nums) if (cur - end <= 1) end = cur;
    else {
        appendRange (sb, begin, end);
        begin = end = cur;
    }
    appendRange (sb, begin, end);
    return sb.substring (1);
}
----------------------------------------

 public static String sequenceNums (int [] nums) {
    StringBuilder sb = new StringBuilder();
    if (nums == null || nums.length == 0){
        return sb.toString();
    }
    Arrays.sort(nums);
    int begin = nums[0];
    int end = nums[0];
    for (int i = 1; i < nums.length; i++) {
        if (nums[i] - end <= 1) {
            end = nums[i];
        } else {
            appendRange(sb, begin, end);
            begin = end = nums[i];
        }
    }
    appendRange(sb, begin, end);
    return sb.substring(1);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
845
0
Gpt3D_Clone845_0.java 1 19
Gpt3D_Clone845_0.java 20 52
----------------------------------------

public int tortoiseMoves () {
    switch (tGen ()) {
        case 1 :
        case 2 :
        case 3 :
        case 4 :
        case 5 :
            return 3;
        case 6 :
        case 7 :
        case 8 :
            return 1;
        case 9 :
        case 10 :
            return - 6;
        default :
            return 0;
    }
}
----------------------------------------

 public int tortoiseMoves()
{
    int moveDistance = 0;
    
    switch (tGen())
    {
        case 1 : moveDistance =  3;
        break;
        case 2 : moveDistance =  3;
        break;
        case 3 : moveDistance =  3;
        break;
        case 4 : moveDistance =  3;
        break;
        case 5 : moveDistance =  3;
        break;
        case 6 : moveDistance =  1;
        break;
        case 7 : moveDistance =  1;
        break;
        case 8 : moveDistance =  1;
        break;
        case 9 : moveDistance = -6;
        break;
        case 10 : moveDistance = -6;
        break;
        default : moveDistance = 0;
    }
    
    return moveDistance;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
845
1
Gpt3D_Clone845_1.java 1 19
Gpt3D_Clone845_1.java 20 49
----------------------------------------

public int tortoiseMoves () {
    switch (tGen ()) {
        case 1 :
        case 2 :
        case 3 :
        case 4 :
        case 5 :
            return 3;
        case 6 :
        case 7 :
        case 8 :
            return 1;
        case 9 :
        case 10 :
            return - 6;
        default :
            return 0;
    }
}
----------------------------------------

 public int tortoiseMoves()
{
    int moveDistance = 0;
    int tgenNum = tGen();
    switch (tgenNum) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
            moveDistance = 3;
            break;
        case 6: 
        case 7:
        case 8:
            moveDistance = 1;
            break;
        case 9:
        case 10:
            moveDistance = -6;
            break;
        default:
            moveDistance = 0;
            break;
     }
     return moveDistance;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
845
3
Gpt3D_Clone845_3.java 1 19
Gpt3D_Clone845_3.java 20 40
----------------------------------------

public int tortoiseMoves () {
    switch (tGen ()) {
        case 1 :
        case 2 :
        case 3 :
        case 4 :
        case 5 :
            return 3;
        case 6 :
        case 7 :
        case 8 :
            return 1;
        case 9 :
        case 10 :
            return - 6;
        default :
            return 0;
    }
}
----------------------------------------

 public int tortoiseMoves() {
    int moveDistance;
    int tgenNum = tGen();
    if(tgenNum > 0 && tgenNum < 6) {
        moveDistance = 3;
    }
    else if(tgenNum > 5 && tgenNum < 9) {
        moveDistance = 1;
    }
    else if(tgenNum > 8 && tgenNum < 11) {
        moveDistance = -6;
    }
    else {
        moveDistance = 0;
    }
    return moveDistance;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
845
4
Gpt3D_Clone845_4.java 1 19
Gpt3D_Clone845_4.java 20 44
----------------------------------------

public int tortoiseMoves () {
    switch (tGen ()) {
        case 1 :
        case 2 :
        case 3 :
        case 4 :
        case 5 :
            return 3;
        case 6 :
        case 7 :
        case 8 :
            return 1;
        case 9 :
        case 10 :
            return - 6;
        default :
            return 0;
    }
}
----------------------------------------

 public int tortoiseMoves()
{
    int moveDistance;
    
    if(tGen() <= 5)
    {
        moveDistance = 3;
    }
    else if(tGen() >= 6 && tGen <= 8)
    {
        moveDistance = 1;
    }
    else if(tGen() >= 9 && tGen() <= 10)
    {
        moveDistance = -6;
    }
    else
    {
        moveDistance = 0;
    }
    
    return moveDistance;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
845
5
Gpt3D_Clone845_5.java 1 19
Gpt3D_Clone845_5.java 20 40
----------------------------------------

public int tortoiseMoves () {
    switch (tGen ()) {
        case 1 :
        case 2 :
        case 3 :
        case 4 :
        case 5 :
            return 3;
        case 6 :
        case 7 :
        case 8 :
            return 1;
        case 9 :
        case 10 :
            return - 6;
        default :
            return 0;
    }
}
----------------------------------------

 public int tortoiseMoves()
{
    int moveDistance = 0;
    int num = tGen();
    if( num >= 1 && num <= 5 )
    {
        moveDistance = 3;
    } 
    else if( num >= 6 && num <= 8 )
    {
        moveDistance = 1;
    }
    else if( num >= 9 && num <= 10 )
    {
        moveDistance = -6;
    }
    
    return moveDistance;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
845
6
Gpt3D_Clone845_6.java 1 19
Gpt3D_Clone845_6.java 20 42
----------------------------------------

public int tortoiseMoves () {
    switch (tGen ()) {
        case 1 :
        case 2 :
        case 3 :
        case 4 :
        case 5 :
            return 3;
        case 6 :
        case 7 :
        case 8 :
            return 1;
        case 9 :
        case 10 :
            return - 6;
        default :
            return 0;
    }
}
----------------------------------------

 public int tortoiseMoves() 
{
    int moveDistance = 0;
    if(tGen() == 1 || tGen() == 2 || tGen() == 3 || tGen() == 4 || tGen() == 5) 
    {
        moveDistance = 3;
    }
    
    else if(tGen() == 6 || tGen() == 7 || tGen() == 8)
    {
        moveDistance = 1;
    }
    
    else if(tGen() == 9 || tGen() == 10) 
    {
        moveDistance = -6;
    }
    
    
    return moveDistance;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
845
7
Gpt3D_Clone845_7.java 1 19
Gpt3D_Clone845_7.java 20 28
----------------------------------------

public int tortoiseMoves () {
    switch (tGen ()) {
        case 1 :
        case 2 :
        case 3 :
        case 4 :
        case 5 :
            return 3;
        case 6 :
        case 7 :
        case 8 :
            return 1;
        case 9 :
        case 10 :
            return - 6;
        default :
            return 0;
    }
}
----------------------------------------

 public int tortoiseMoves()
{
    int[] distances = {3,3,3,3,3,1,1,1,-6,-6,0};
    int moveDistance = distances[tGen() - 1];
    
    return moveDistance;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
845
8
Gpt3D_Clone845_8.java 1 19
Gpt3D_Clone845_8.java 20 28
----------------------------------------

public int tortoiseMoves () {
    switch (tGen ()) {
        case 1 :
        case 2 :
        case 3 :
        case 4 :
        case 5 :
            return 3;
        case 6 :
        case 7 :
        case 8 :
            return 1;
        case 9 :
        case 10 :
            return - 6;
        default :
            return 0;
    }
}
----------------------------------------

 public int tortoiseMoves() 
{
    int[] distances = {-6,-6,1,1,1,3,3,3,3,3,0};
    int moveDistance = distances[tGen()];
    
    return moveDistance;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
846
0
Gpt3D_Clone846_0.java 1 19
Gpt3D_Clone846_0.java 20 47
----------------------------------------

public int tortoiseMoves () {
    switch (tGen ()) {
        case 1 :
        case 2 :
        case 3 :
        case 4 :
        case 5 :
            return 3;
        case 6 :
        case 7 :
        case 8 :
            return 1;
        case 9 :
        case 10 :
            return - 6;
        default :
            return 0;
    }
}
----------------------------------------

 public int tortoiseMoves () {
    int newPosition = 0;
    int currentPosition = tGen();
    switch(currentPosition) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
            newPosition = currentPosition + 3;
            break;
        case 6:
        case 7:
        case 8:
            newPosition = currentPosition + 1;
            break;
        case 9:
        case 10:
            newPosition = currentPosition - 6;
            break;
        default:
            newPosition = 0;
            break;
    }
    return newPosition;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
846
1
Gpt3D_Clone846_1.java 1 19
Gpt3D_Clone846_1.java 20 48
----------------------------------------

public int tortoiseMoves () {
    switch (tGen ()) {
        case 1 :
        case 2 :
        case 3 :
        case 4 :
        case 5 :
            return 3;
        case 6 :
        case 7 :
        case 8 :
            return 1;
        case 9 :
        case 10 :
            return - 6;
        default :
            return 0;
    }
}
----------------------------------------

 public int tortoiseMoves () {
    int currentPosition = tGen ();
    int positionChange = 0;
    switch (currentPosition) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
            positionChange = 3;
            break;
        case 6:
        case 7:
        case 8:
            positionChange = 1;
            break;
        case 9:
        case 10:
            positionChange = -6;
            break;
        default:
            positionChange = 0;
            break;
    }
    return currentPosition + positionChange;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
846
5
Gpt3D_Clone846_5.java 1 19
Gpt3D_Clone846_5.java 20 34
----------------------------------------

public int tortoiseMoves () {
    switch (tGen ()) {
        case 1 :
        case 2 :
        case 3 :
        case 4 :
        case 5 :
            return 3;
        case 6 :
        case 7 :
        case 8 :
            return 1;
        case 9 :
        case 10 :
            return - 6;
        default :
            return 0;
    }
}
----------------------------------------

 public int tortoiseMoves() {
    int currentPosition = tGen();
    if (currentPosition  == 1 || currentPosition  == 2 || currentPosition  == 3 || currentPosition  == 4 || currentPosition  == 5) {
        currentPosition += 3;
    } else if (currentPosition  == 6 || currentPosition  == 7 || currentPosition  == 8) {
        currentPosition += 1;
    } else if (currentPosition  == 9 || currentPosition  == 10) {
        currentPosition -= 6;
    } else {
        currentPosition = 0;
    }
    return currentPosition;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
846
6
Gpt3D_Clone846_6.java 1 19
Gpt3D_Clone846_6.java 20 37
----------------------------------------

public int tortoiseMoves () {
    switch (tGen ()) {
        case 1 :
        case 2 :
        case 3 :
        case 4 :
        case 5 :
            return 3;
        case 6 :
        case 7 :
        case 8 :
            return 1;
        case 9 :
        case 10 :
            return - 6;
        default :
            return 0;
    }
}
----------------------------------------

 public int tortoiseMoves () {
    int positionChange, currentPosition = tGen();
    if (currentPosition <= 5) {
        positionChange = 3;
    } 
    else if (currentPosition <= 8) {
        positionChange = 1;
    } 
    else if (currentPosition == 9 || currentPosition == 10) {
        positionChange = -6;
    } else {
        positionChange = 0;
    }
    return currentPosition + positionChange;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
846
7
Gpt3D_Clone846_7.java 1 19
Gpt3D_Clone846_7.java 20 34
----------------------------------------

public int tortoiseMoves () {
    switch (tGen ()) {
        case 1 :
        case 2 :
        case 3 :
        case 4 :
        case 5 :
            return 3;
        case 6 :
        case 7 :
        case 8 :
            return 1;
        case 9 :
        case 10 :
            return - 6;
        default :
            return 0;
    }
}
----------------------------------------

 public int tortoiseMoves () {
    int currentPosition = tGen();
    if (1 <= currentPosition && currentPosition <= 5) {
        currentPosition += 3;
    } else if (6 <= currentPosition && currentPosition<= 8) {
        currentPosition += 1;
    } else if (9 == currentPosition || 10 == currentPosition) {
        currentPosition -= 6;
    } else {
        currentPosition = 0;
    }
    return currentPosition;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
846
8
Gpt3D_Clone846_8.java 1 19
Gpt3D_Clone846_8.java 20 34
----------------------------------------

public int tortoiseMoves () {
    switch (tGen ()) {
        case 1 :
        case 2 :
        case 3 :
        case 4 :
        case 5 :
            return 3;
        case 6 :
        case 7 :
        case 8 :
            return 1;
        case 9 :
        case 10 :
            return - 6;
        default :
            return 0;
    }
}
----------------------------------------

 public int tortoiseMoves() {
    int currentPosition = tGen();
    if (currentPosition  >= 1 && currentPosition  <= 5) {
        currentPosition += 3;
    } else if (currentPosition  >= 6 && currentPosition <= 8) {
        currentPosition += 1;
    } else if (currentPosition  == 9 || currentPosition  == 10) {
        currentPosition -= 6;
    } else {
        currentPosition = 0;
    }
    return currentPosition;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
846
9
Gpt3D_Clone846_9.java 1 19
Gpt3D_Clone846_9.java 20 31
----------------------------------------

public int tortoiseMoves () {
    switch (tGen ()) {
        case 1 :
        case 2 :
        case 3 :
        case 4 :
        case 5 :
            return 3;
        case 6 :
        case 7 :
        case 8 :
            return 1;
        case 9 :
        case 10 :
            return - 6;
        default :
            return 0;
    }
}
----------------------------------------

  public int tortoiseMoves () {
    int currentPosition = tGen();
    if (currentPosition <=5) {
        currentPosition +=3;
    } else if (currentPosition <= 8) {
        currentPosition +=1;
    } else if (currentPosition == 9 || currentPosition == 10) {
        currentPosition -=6;
    } return currentPosition;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
848
0
Gpt3D_Clone848_0.java 1 22
Gpt3D_Clone848_0.java 23 49
----------------------------------------

public static void main (String [] args) {
    Scanner input = new Scanner (System.in);
    final int valid = 6;
    Scanner one = new Scanner (System.in);
    System.out.println ("Enter your username: ");
    String s = one.nextLine ();
    if (s.length () < valid) {
        System.out.println ("Enter a valid username");
        System.out.println ("User name must contain " + valid + " characters");
        System.out.println ("Enter again: ");
        s = one.nextLine ();
    }
    System.out.println ("Username accepted: " + s);
    Scanner two = new Scanner (System.in);
    System.out.println ("Enter your age: ");
    int a = two.nextInt ();
    System.out.println ("Age accepted: " + a);
    Scanner three = new Scanner (System.in);
    System.out.println ("Enter your sex: ");
    String sex = three.nextLine ();
    System.out.println ("Sex accepted: " + sex);
}
----------------------------------------

 public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);
    int valid = 6;
    boolean accepted = false;
    while (!accepted) {
        System.out.println("Enter your username: ");
        String s = scanner.nextLine();
        if (s.length() >= valid) {
            accepted = true;
            System.out.println("Username accepted: " + s);
        } else {
            System.out.println("Username must contain " + valid + " characters");
            System.out.println("Enter again: ");
        }
    }
    System.out.println("Enter your age: ");
    int a = scanner.nextInt();
    System.out.println("Age accepted: " + a);
    String sex;
    do {
        System.out.println("Enter your sex: ");
        sex = scanner.nextLine();
    } while (sex.isEmpty());
    System.out.println("Sex accepted: " + sex);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
84
0
Gpt3D_Clone84_0.java 1 24
Gpt3D_Clone84_0.java 25 62
----------------------------------------

public static final int gcd (int a, int b) {
    if (a == Integer.MIN_VALUE) {
        if (b == Integer.MIN_VALUE) throw new IllegalArgumentException ("gcd() is greater than Integer.MAX_VALUE");
        return 1 << Integer.numberOfTrailingZeros (Math.abs (b));
    }
    if (b == Integer.MIN_VALUE) return 1 << Integer.numberOfTrailingZeros (Math.abs (a));
    a = Math.abs (a);
    b = Math.abs (b);
    if (a == 0) return b;
    if (b == 0) return a;
    int factorsOfTwoInA = Integer.numberOfTrailingZeros (a), factorsOfTwoInB = Integer.numberOfTrailingZeros (b), commonFactorsOfTwo = Math.min (factorsOfTwoInA, factorsOfTwoInB);
    a>>= factorsOfTwoInA;
    b>>= factorsOfTwoInB;
    while (a != b) {
        if (a > b) {
            a = (a - b);
            a>>= Integer.numberOfTrailingZeros (a);
        } else {
            b = (b - a);
            b>>= Integer.numberOfTrailingZeros (b);
        }
    }
    return a << commonFactorsOfTwo;
}
----------------------------------------

 public static final int gcd(int a, int b) {
    if (a == Integer.MIN_VALUE) {
        if (b == Integer.MIN_VALUE) throw new IllegalArgumentException ("gcd() is greater than Integer.MAX_VALUE");
        int x = Math.abs(b);
        while (x % 2 == 0)
            x /= 2;
        return x;
    }
    if (b == Integer.MIN_VALUE) {
        int x = Math.abs(a);
        while (x % 2 == 0)
            x /= 2;
        return x;
    }
    a = Math.abs(a);
    b = Math.abs(b);
    if (a == 0) return b;
    if (b == 0) return a;
    int factorsOfTwoInA = Integer.numberOfTrailingZeros(a);
    int factorsOfTwoInB = Integer.numberOfTrailingZeros(b);
    int commonFactorsOfTwo = Math.min(factorsOfTwoInA, factorsOfTwoInB);
    a >>= factorsOfTwoInA;
    b >>= factorsOfTwoInB;
    int temp; 
    while (a != 0) { 
        temp = a; 
        a = b % a;  
        b = temp; 
    } 
    return b << commonFactorsOfTwo; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
84
1
Gpt3D_Clone84_1.java 1 24
Gpt3D_Clone84_1.java 25 58
----------------------------------------

public static final int gcd (int a, int b) {
    if (a == Integer.MIN_VALUE) {
        if (b == Integer.MIN_VALUE) throw new IllegalArgumentException ("gcd() is greater than Integer.MAX_VALUE");
        return 1 << Integer.numberOfTrailingZeros (Math.abs (b));
    }
    if (b == Integer.MIN_VALUE) return 1 << Integer.numberOfTrailingZeros (Math.abs (a));
    a = Math.abs (a);
    b = Math.abs (b);
    if (a == 0) return b;
    if (b == 0) return a;
    int factorsOfTwoInA = Integer.numberOfTrailingZeros (a), factorsOfTwoInB = Integer.numberOfTrailingZeros (b), commonFactorsOfTwo = Math.min (factorsOfTwoInA, factorsOfTwoInB);
    a>>= factorsOfTwoInA;
    b>>= factorsOfTwoInB;
    while (a != b) {
        if (a > b) {
            a = (a - b);
            a>>= Integer.numberOfTrailingZeros (a);
        } else {
            b = (b - a);
            b>>= Integer.numberOfTrailingZeros (b);
        }
    }
    return a << commonFactorsOfTwo;
}
----------------------------------------

 public static final int gcd(int a, int b) {
        if (a == Integer.MIN_VALUE) {
            if (b == Integer.MIN_VALUE) throw new IllegalArgumentException("gcd() is greater than Integer.MAX_VALUE");
            int x = Math.abs(b);
            return x;
        }
        if (b == Integer.MIN_VALUE) {
            int x = Math.abs(a);
            return x;
        }
        a = Math.abs(a);
        b = Math.abs(b);
        if (a == 0) return b;
        if (b == 0) return a;
        int factorsOfTwoInA = Integer.numberOfTrailingZeros(a);
        int factorsOfTwoInB = Integer.numberOfTrailingZeros(b);
        int commonFactorsOfTwo = Math.min(factorsOfTwoInA, factorsOfTwoInB);
        a >>= factorsOfTwoInA;
        b >>= factorsOfTwoInB;
        int c;
 
		while (b != 0) {
			c = b;
			b = a % b;
			a = c;
		}
        return a << commonFactorsOfTwo;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
84
2
Gpt3D_Clone84_2.java 1 24
Gpt3D_Clone84_2.java 25 58
----------------------------------------

public static final int gcd (int a, int b) {
    if (a == Integer.MIN_VALUE) {
        if (b == Integer.MIN_VALUE) throw new IllegalArgumentException ("gcd() is greater than Integer.MAX_VALUE");
        return 1 << Integer.numberOfTrailingZeros (Math.abs (b));
    }
    if (b == Integer.MIN_VALUE) return 1 << Integer.numberOfTrailingZeros (Math.abs (a));
    a = Math.abs (a);
    b = Math.abs (b);
    if (a == 0) return b;
    if (b == 0) return a;
    int factorsOfTwoInA = Integer.numberOfTrailingZeros (a), factorsOfTwoInB = Integer.numberOfTrailingZeros (b), commonFactorsOfTwo = Math.min (factorsOfTwoInA, factorsOfTwoInB);
    a>>= factorsOfTwoInA;
    b>>= factorsOfTwoInB;
    while (a != b) {
        if (a > b) {
            a = (a - b);
            a>>= Integer.numberOfTrailingZeros (a);
        } else {
            b = (b - a);
            b>>= Integer.numberOfTrailingZeros (b);
        }
    }
    return a << commonFactorsOfTwo;
}
----------------------------------------

 public static final int gcd(int a, int b) {
        if (a == Integer.MIN_VALUE) {
            if (b == Integer.MIN_VALUE) throw new IllegalArgumentException("gcd() is greater than Integer.MAX_VALUE");
            int x = Math.abs(b);
            return x;
        }
        if (b == Integer.MIN_VALUE) {
            int x = Math.abs(a);
            return x;
        }
        a = Math.abs(a);
        b = Math.abs(b);
        if (a == 0) return b;
        if (b == 0) return a;
        int factorsOfTwoInA = Integer.numberOfTrailingZeros(a);
        int factorsOfTwoInB = Integer.numberOfTrailingZeros(b);
        int commonFactorsOfTwo = Math.min(factorsOfTwoInA, factorsOfTwoInB);
        a >>= factorsOfTwoInA;
        b >>= factorsOfTwoInB;
        int temp;
 
        while (a != 0) {
            temp = a;
            a = b % a;
            b = temp;
        }
        return b << commonFactorsOfTwo;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
84
3
Gpt3D_Clone84_3.java 1 24
Gpt3D_Clone84_3.java 25 61
----------------------------------------

public static final int gcd (int a, int b) {
    if (a == Integer.MIN_VALUE) {
        if (b == Integer.MIN_VALUE) throw new IllegalArgumentException ("gcd() is greater than Integer.MAX_VALUE");
        return 1 << Integer.numberOfTrailingZeros (Math.abs (b));
    }
    if (b == Integer.MIN_VALUE) return 1 << Integer.numberOfTrailingZeros (Math.abs (a));
    a = Math.abs (a);
    b = Math.abs (b);
    if (a == 0) return b;
    if (b == 0) return a;
    int factorsOfTwoInA = Integer.numberOfTrailingZeros (a), factorsOfTwoInB = Integer.numberOfTrailingZeros (b), commonFactorsOfTwo = Math.min (factorsOfTwoInA, factorsOfTwoInB);
    a>>= factorsOfTwoInA;
    b>>= factorsOfTwoInB;
    while (a != b) {
        if (a > b) {
            a = (a - b);
            a>>= Integer.numberOfTrailingZeros (a);
        } else {
            b = (b - a);
            b>>= Integer.numberOfTrailingZeros (b);
        }
    }
    return a << commonFactorsOfTwo;
}
----------------------------------------

 public static final int gcd(int a, int b) {
        if (a == Integer.MIN_VALUE) {
            if (b == Integer.MIN_VALUE) throw new IllegalArgumentException("gcd() is greater than Integer.MAX_VALUE");
            int x = Math.abs(b);
            while (x % 2 == 0)
                x /= 2;
            return x;
        }
        if (b == Integer.MIN_VALUE) {
            int x = Math.abs(a);
            while (x % 2 == 0)
                x /= 2;
            return x;
        }
        a = Math.abs(a);
        b = Math.abs(b);
        if (a == 0) return b;
        if (b == 0) return a;
        int factorsOfTwoInA = Integer.numberOfTrailingZeros(a);
        int factorsOfTwoInB = Integer.numberOfTrailingZeros(b);
        int commonFactorsOfTwo = Math.min(factorsOfTwoInA, factorsOfTwoInB);
        a >>= factorsOfTwoInA;
        b >>= factorsOfTwoInB;
        while (a != b) {
            if (a > b)
                a -= b;
            else
                b -= a;
        }
        return (a << commonFactorsOfTwo);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
84
4
Gpt3D_Clone84_4.java 1 24
Gpt3D_Clone84_4.java 25 62
----------------------------------------

public static final int gcd (int a, int b) {
    if (a == Integer.MIN_VALUE) {
        if (b == Integer.MIN_VALUE) throw new IllegalArgumentException ("gcd() is greater than Integer.MAX_VALUE");
        return 1 << Integer.numberOfTrailingZeros (Math.abs (b));
    }
    if (b == Integer.MIN_VALUE) return 1 << Integer.numberOfTrailingZeros (Math.abs (a));
    a = Math.abs (a);
    b = Math.abs (b);
    if (a == 0) return b;
    if (b == 0) return a;
    int factorsOfTwoInA = Integer.numberOfTrailingZeros (a), factorsOfTwoInB = Integer.numberOfTrailingZeros (b), commonFactorsOfTwo = Math.min (factorsOfTwoInA, factorsOfTwoInB);
    a>>= factorsOfTwoInA;
    b>>= factorsOfTwoInB;
    while (a != b) {
        if (a > b) {
            a = (a - b);
            a>>= Integer.numberOfTrailingZeros (a);
        } else {
            b = (b - a);
            b>>= Integer.numberOfTrailingZeros (b);
        }
    }
    return a << commonFactorsOfTwo;
}
----------------------------------------

 public static final int gcd(int a, int b) {
        if (a == Integer.MIN_VALUE) {
            if (b == Integer.MIN_VALUE) throw new IllegalArgumentException("gcd() is greater than Integer.MAX_VALUE");
            int x = Math.abs(b);
            while (x % 2 == 0)
                x /= 2;
            return x;
        }
        if (b == Integer.MIN_VALUE) {
            int x = Math.abs(a);
            while (x % 2 == 0)
                x /= 2;
            return x;
        }
        a = Math.abs(a);
        b = Math.abs(b);
        if (a == 0) return b;
        if (b == 0) return a;
        int factorsOfTwoInA = Integer.numberOfTrailingZeros(a);
        int factorsOfTwoInB = Integer.numberOfTrailingZeros(b);
        int commonFactorsOfTwo = Math.min(factorsOfTwoInA, factorsOfTwoInB);
        a >>= factorsOfTwoInA;
        b >>= factorsOfTwoInB;
        while (a != b) {
            if (a > b)
                a = a % b;
            else
                b = b % a;
        }
        return (a << commonFactorsOfTwo);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
84
5
Gpt3D_Clone84_5.java 1 24
Gpt3D_Clone84_5.java 25 54
----------------------------------------

public static final int gcd (int a, int b) {
    if (a == Integer.MIN_VALUE) {
        if (b == Integer.MIN_VALUE) throw new IllegalArgumentException ("gcd() is greater than Integer.MAX_VALUE");
        return 1 << Integer.numberOfTrailingZeros (Math.abs (b));
    }
    if (b == Integer.MIN_VALUE) return 1 << Integer.numberOfTrailingZeros (Math.abs (a));
    a = Math.abs (a);
    b = Math.abs (b);
    if (a == 0) return b;
    if (b == 0) return a;
    int factorsOfTwoInA = Integer.numberOfTrailingZeros (a), factorsOfTwoInB = Integer.numberOfTrailingZeros (b), commonFactorsOfTwo = Math.min (factorsOfTwoInA, factorsOfTwoInB);
    a>>= factorsOfTwoInA;
    b>>= factorsOfTwoInB;
    while (a != b) {
        if (a > b) {
            a = (a - b);
            a>>= Integer.numberOfTrailingZeros (a);
        } else {
            b = (b - a);
            b>>= Integer.numberOfTrailingZeros (b);
        }
    }
    return a << commonFactorsOfTwo;
}
----------------------------------------

 public static final int gcd(int a, int b) {
        if (a == Integer.MIN_VALUE) {
            if (b == Integer.MIN_VALUE) throw new IllegalArgumentException("gcd() is greater than Integer.MAX_VALUE");
            return (1 << Integer.numberOfTrailingZeros(Math.abs(b)));
        }
        if (b == Integer.MIN_VALUE) return 1 << Integer.numberOfTrailingZeros(Math.abs(a));
        a = Math.abs(a);
        b = Math.abs(b);
        if (a == 0) return b;
        if (b == 0) return a;
        int factorsOfTwoInA = Integer.numberOfTrailingZeros(a);
        int factorsOfTwoInB = Integer.numberOfTrailingZeros(b);
        int commonFactorsOfTwo = Math.min(factorsOfTwoInA, factorsOfTwoInB);
        a >>= factorsOfTwoInA;
        b >>= factorsOfTwoInB;
 
        int t;
        while (b != 0) {
            t = b;
            b = a % b;
            a = t;
        }
        return (a << commonFactorsOfTwo);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
84
6
Gpt3D_Clone84_6.java 1 24
Gpt3D_Clone84_6.java 25 49
----------------------------------------

public static final int gcd (int a, int b) {
    if (a == Integer.MIN_VALUE) {
        if (b == Integer.MIN_VALUE) throw new IllegalArgumentException ("gcd() is greater than Integer.MAX_VALUE");
        return 1 << Integer.numberOfTrailingZeros (Math.abs (b));
    }
    if (b == Integer.MIN_VALUE) return 1 << Integer.numberOfTrailingZeros (Math.abs (a));
    a = Math.abs (a);
    b = Math.abs (b);
    if (a == 0) return b;
    if (b == 0) return a;
    int factorsOfTwoInA = Integer.numberOfTrailingZeros (a), factorsOfTwoInB = Integer.numberOfTrailingZeros (b), commonFactorsOfTwo = Math.min (factorsOfTwoInA, factorsOfTwoInB);
    a>>= factorsOfTwoInA;
    b>>= factorsOfTwoInB;
    while (a != b) {
        if (a > b) {
            a = (a - b);
            a>>= Integer.numberOfTrailingZeros (a);
        } else {
            b = (b - a);
            b>>= Integer.numberOfTrailingZeros (b);
        }
    }
    return a << commonFactorsOfTwo;
}
----------------------------------------

 public static final int gcd(int a, int b) {
        if (a == Integer.MIN_VALUE) {
            if (b == Integer.MIN_VALUE) throw new IllegalArgumentException("gcd() is greater than Integer.MAX_VALUE");
            int x = Math.abs(b);
            while (x % 2 == 0)
                x /= 2;
            return x;
        }
        if (b == Integer.MIN_VALUE) {
            int x = Math.abs(a);
            while (x % 2 == 0)
                x /= 2;
            return x;
        }
        a = Math.abs(a);
        b = Math.abs(b);
        while (b != 0) {  
            int t = b;  
            b = a % b;  
            a = t;  
        }  
        return a;  
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
84
7
Gpt3D_Clone84_7.java 1 24
Gpt3D_Clone84_7.java 25 51
----------------------------------------

public static final int gcd (int a, int b) {
    if (a == Integer.MIN_VALUE) {
        if (b == Integer.MIN_VALUE) throw new IllegalArgumentException ("gcd() is greater than Integer.MAX_VALUE");
        return 1 << Integer.numberOfTrailingZeros (Math.abs (b));
    }
    if (b == Integer.MIN_VALUE) return 1 << Integer.numberOfTrailingZeros (Math.abs (a));
    a = Math.abs (a);
    b = Math.abs (b);
    if (a == 0) return b;
    if (b == 0) return a;
    int factorsOfTwoInA = Integer.numberOfTrailingZeros (a), factorsOfTwoInB = Integer.numberOfTrailingZeros (b), commonFactorsOfTwo = Math.min (factorsOfTwoInA, factorsOfTwoInB);
    a>>= factorsOfTwoInA;
    b>>= factorsOfTwoInB;
    while (a != b) {
        if (a > b) {
            a = (a - b);
            a>>= Integer.numberOfTrailingZeros (a);
        } else {
            b = (b - a);
            b>>= Integer.numberOfTrailingZeros (b);
        }
    }
    return a << commonFactorsOfTwo;
}
----------------------------------------

 public static final int gcd(int a, int b) {
        if (a == Integer.MIN_VALUE) {
            if (b == Integer.MIN_VALUE) throw new IllegalArgumentException("gcd() is greater than Integer.MAX_VALUE");
            return (1 << Integer.numberOfTrailingZeros(Math.abs(b)));
        }
        if (b == Integer.MIN_VALUE) return 1 << Integer.numberOfTrailingZeros(Math.abs(a));
        a = Math.abs(a);
        b = Math.abs(b);
        if (a == 0) return b;
        if (b == 0) return a;
        int factorsOfTwoInA = Integer.numberOfTrailingZeros(a);
        int factorsOfTwoInB = Integer.numberOfTrailingZeros(b);
        int commonFactorsOfTwo = Math.min(factorsOfTwoInA, factorsOfTwoInB);
 
        a >>= factorsOfTwoInA;
        b >>= factorsOfTwoInB;
        for (int t; (t = a % b) != 0; a = b, b = t);
 
        return (b << commonFactorsOfTwo);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
84
9
Gpt3D_Clone84_9.java 1 24
Gpt3D_Clone84_9.java 25 44
----------------------------------------

public static final int gcd (int a, int b) {
    if (a == Integer.MIN_VALUE) {
        if (b == Integer.MIN_VALUE) throw new IllegalArgumentException ("gcd() is greater than Integer.MAX_VALUE");
        return 1 << Integer.numberOfTrailingZeros (Math.abs (b));
    }
    if (b == Integer.MIN_VALUE) return 1 << Integer.numberOfTrailingZeros (Math.abs (a));
    a = Math.abs (a);
    b = Math.abs (b);
    if (a == 0) return b;
    if (b == 0) return a;
    int factorsOfTwoInA = Integer.numberOfTrailingZeros (a), factorsOfTwoInB = Integer.numberOfTrailingZeros (b), commonFactorsOfTwo = Math.min (factorsOfTwoInA, factorsOfTwoInB);
    a>>= factorsOfTwoInA;
    b>>= factorsOfTwoInB;
    while (a != b) {
        if (a > b) {
            a = (a - b);
            a>>= Integer.numberOfTrailingZeros (a);
        } else {
            b = (b - a);
            b>>= Integer.numberOfTrailingZeros (b);
        }
    }
    return a << commonFactorsOfTwo;
}
----------------------------------------

 public static final int gcd(int a, int b) {
    
    if (a == Integer.MIN_VALUE) {
        if (b == Integer.MIN_VALUE) throw new IllegalArgumentException ("gcd() is greater than Integer.MAX_VALUE");
        return (1 << Integer.numberOfTrailingZeros (Math.abs (b)));
    }
    if (b == Integer.MIN_VALUE) return 1 << Integer.numberOfTrailingZeros (Math.abs (a));
    a = Math.abs (a);
    b = Math.abs (b);
    if (a == 0 || b == 0) return a+b;
    int gcd = 1;
    for(int i=2; i<=Math.min(a,b);i++) {
        if(a%i==0 && b%i==0) gcd = i;
    }
    return gcd;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
851
0
Gpt3D_Clone851_0.java 1 8
Gpt3D_Clone851_0.java 9 33
----------------------------------------

public static double [] [] amountOTP (double [] [] a, int x) {
    double [] [] b = new double [x] [x];
    x = Math.min (x, a.length);
    for (int i = 0;
    i < x; i ++) for (int j = 0;
    j < x; j ++) b [i] [j] = a [i] [j];
    return b;
}
----------------------------------------

 public static double[][] amountOTP (double[][] a, int x)
{
    // Create a new double array
    double[][] b = new double[x][x];
    // Use Math.min to set x correctly
    int cols = Math.min (x, a.length);
    int rows = x;
    // Create a for loop to go through each element in array a
    int i, j;
    for (i = 0; i < cols; i++)
    {
        for (j = 0; j < rows; j++) 
        {
            // Assign values from a to b
            b[i][j] = a[i][j];
        }
    }
    // Return filled double array
    return b;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
851
1
Gpt3D_Clone851_1.java 1 8
Gpt3D_Clone851_1.java 9 33
----------------------------------------

public static double [] [] amountOTP (double [] [] a, int x) {
    double [] [] b = new double [x] [x];
    x = Math.min (x, a.length);
    for (int i = 0;
    i < x; i ++) for (int j = 0;
    j < x; j ++) b [i] [j] = a [i] [j];
    return b;
}
----------------------------------------

 public static double[][] amountOTP (double[][] a, int x)
{
    // Create a new double array
    double[][] b = new double[x][x];
    // Use Math.min to set x correctly
    int cols = Math.min(x, a.length);
    int rows = x;
    // Create a for loop to go through each element in array a
    int i, j;
    for (i = 0; i < cols; i++)
    {
        for (j = 0; j < rows; j++) 
        {
            // Assign values from a to b
            b[i][j] = a[i][j];
        }
    }
    // Return the filled double array
    return b;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
851
2
Gpt3D_Clone851_2.java 1 8
Gpt3D_Clone851_2.java 9 33
----------------------------------------

public static double [] [] amountOTP (double [] [] a, int x) {
    double [] [] b = new double [x] [x];
    x = Math.min (x, a.length);
    for (int i = 0;
    i < x; i ++) for (int j = 0;
    j < x; j ++) b [i] [j] = a [i] [j];
    return b;
}
----------------------------------------

 public static double[][] amountOTP (double[][] a, int x) 
{
    // Declare a new double array 
    double[][] b = new double[x][x];
    // Use Math.min to set x correctly
    int cols = Math.min (x, a.length);
    int rows = x;
    // Create a for loop to go through each element in array a
    int i, j;
    for (i = 0; i < cols; i++)
    {
        for (j = 0; j < rows; j++) 
        {
            // Assign values from a to b
            b[i][j] = a[i][j];
        }
    }
    // Return filled double array
    return b;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
851
3
Gpt3D_Clone851_3.java 1 8
Gpt3D_Clone851_3.java 9 33
----------------------------------------

public static double [] [] amountOTP (double [] [] a, int x) {
    double [] [] b = new double [x] [x];
    x = Math.min (x, a.length);
    for (int i = 0;
    i < x; i ++) for (int j = 0;
    j < x; j ++) b [i] [j] = a [i] [j];
    return b;
}
----------------------------------------

 public static double[][] amountOTP (double[][] a, int x)
{
    // Create a new double array
    double[][] b = new double[x][x];
    // Use Math.min() to set x correctly
    x = Math.min (x, a.length);
    // Create a for loop to go through each element in array a
    int i;
    int j;
    for (i = 0; i < x; i++)
    {
        for (j = 0; j < x; j++) 
        {
            // Assign values from a to b
            b[i][j] = a[i][j];
        }
    }
    // Return filled double array
    return b;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
851
4
Gpt3D_Clone851_4.java 1 8
Gpt3D_Clone851_4.java 9 32
----------------------------------------

public static double [] [] amountOTP (double [] [] a, int x) {
    double [] [] b = new double [x] [x];
    x = Math.min (x, a.length);
    for (int i = 0;
    i < x; i ++) for (int j = 0;
    j < x; j ++) b [i] [j] = a [i] [j];
    return b;
}
----------------------------------------

 public static double[][] amountOTP (double[][] a, int x)
{
    // Declare a new double array 
    double[][] b = new double[x][x];
    // Use Math.min to set x correctly
    x = Math.min (x, a.length);
    // Create a for loop to go through each element in array a
    int i, j;
    for (i = 0; i < x; i++)
    {
        for (j = 0; j < x; j++) 
        {
            // Assign values from a to b
            b[i][j] = a[i][j];
        }
    }
    // Return filled double array
    return b;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
851
5
Gpt3D_Clone851_5.java 1 8
Gpt3D_Clone851_5.java 9 32
----------------------------------------

public static double [] [] amountOTP (double [] [] a, int x) {
    double [] [] b = new double [x] [x];
    x = Math.min (x, a.length);
    for (int i = 0;
    i < x; i ++) for (int j = 0;
    j < x; j ++) b [i] [j] = a [i] [j];
    return b;
}
----------------------------------------

 public static double[][] amountOTP (double[][] a, int x)
{
    // Create a new double array
    double[][] b = new double[x][x];
    // Use Math.min to set x correctly
    x = Math.min (x, a.length);
    // Create a for loop to go through each element in array a
    int row, col;
    for (row = 0; row < x; row++) 
    {
        for (col = 0; col < x; col++) 
        {
            // Assign values from a to b
            b[row][col] = a[row][col];
        }
    }
    // Return filled double array
    return b;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
851
6
Gpt3D_Clone851_6.java 1 8
Gpt3D_Clone851_6.java 9 32
----------------------------------------

public static double [] [] amountOTP (double [] [] a, int x) {
    double [] [] b = new double [x] [x];
    x = Math.min (x, a.length);
    for (int i = 0;
    i < x; i ++) for (int j = 0;
    j < x; j ++) b [i] [j] = a [i] [j];
    return b;
}
----------------------------------------

 public static double[][] amountOTP (double[][] a, int x) 
{
    // Declare a new double array 
    double[][] b = new double[x][x];
    // Use Math.min to set x correctly
    int cols = Math.min(x, a.length);
    int rows = x;
    // Create a for loop to go through each element in array a
    for (int i = 0; i < cols; i++) 
    {
        for (int j = 0; j < rows; j++) 
        {
            // Assign values from a to b
            b[i][j] = a[i][j];
        }
    }
    // Return the filled double array
    return b;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
851
7
Gpt3D_Clone851_7.java 1 8
Gpt3D_Clone851_7.java 9 32
----------------------------------------

public static double [] [] amountOTP (double [] [] a, int x) {
    double [] [] b = new double [x] [x];
    x = Math.min (x, a.length);
    for (int i = 0;
    i < x; i ++) for (int j = 0;
    j < x; j ++) b [i] [j] = a [i] [j];
    return b;
}
----------------------------------------

 public static double[][] amountOTP (double[][] a, int x)
{
    // Create a new double array
    double[][] b = new double[x][x];
    // Use Math.min to set x correctly
    int rows = Math.min(x, a.length);
    int cols = x;
    // Create a for loop to go through each element in array a
    for (int i = 0; i < rows; i++) 
    {
        for (int j = 0; j < cols; j++) 
        {
            // Assign values from a to b
            b[i][j] = a[i][j];
        }
    }
    // Return filled double array
    return b;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
853
0
Gpt3D_Clone853_0.java 1 13
Gpt3D_Clone853_0.java 14 35
----------------------------------------

static int [] createArray (int size) {
    int [] result = new int [size];
    int limit = (size + 1) / 2;
    int start = 0, value = 0, idx = 0;
    do {
        for (int i = start;
        i < start + limit && idx < size; ++ i) result [idx ++] = value;
        start += limit;
        limit = (limit + 1) / 2;
        ++ value;
    } while (idx < size);
    return result;
}
----------------------------------------

 static int[] createArray(int size)
{
    int[] result = new int[size];
    int left = 0;
    int right = size - 1;
    int counter = 0;
    while (left < right)
    {
        result[left] = counter;
        result[right] = counter;
        left++;
        right--;
        counter++;
    }
    if (left == right)
    {
        result[left] = counter;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
854
0
Gpt3D_Clone854_0.java 1 31
Gpt3D_Clone854_0.java 32 51
----------------------------------------

public static void main (String [] args) {
    Address address = new Address ();
    address.setSomeCrap (null);
    Person person = new Person ();
    person.setAddress (address);
    long startTime = System.currentTimeMillis ();
    for (int i = 0;
    i < 1000000; i ++) {
        try {
            System.out.println (person.getAddress ().getSomeCrap ().getCrap ());
        } catch (NullPointerException npe) {
        }
    }
    long endTime = System.currentTimeMillis ();
    System.out.println ((endTime - startTime) / 1000F);
    long startTime1 = System.currentTimeMillis ();
    for (int i = 0;
    i < 1000000; i ++) {
        if (person != null) {
            Address address1 = person.getAddress ();
            if (address1 != null) {
                SomeCrap someCrap2 = address1.getSomeCrap ();
                if (someCrap2 != null) {
                    System.out.println (someCrap2.getCrap ());
                }
            }
        }
    }
    long endTime1 = System.currentTimeMillis ();
    System.out.println ((endTime1 - startTime1) / 1000F);
}
----------------------------------------

 public static void main(String[] args) {
    Address address = new Address();
    person.setAddress(address);
    long startTime = System.currentTimeMillis();
    for (int i = 0; i < 1000000; i++) {
        try {
            if (person.getAddress() != null && address.getSomeCrap() != null && address.getSomeCrap().getCrap() != null) {
                System.out.println(address.getSomeCrap().getCrap());
            }
            else {
                throw new NullPointerException();
            }
        } catch (NullPointerException npe) {
        }
    }
    long endTime = System.currentTimeMillis();
    System.out.println((endTime - startTime) / 1000F);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
854
1
Gpt3D_Clone854_1.java 1 31
Gpt3D_Clone854_1.java 32 51
----------------------------------------

public static void main (String [] args) {
    Address address = new Address ();
    address.setSomeCrap (null);
    Person person = new Person ();
    person.setAddress (address);
    long startTime = System.currentTimeMillis ();
    for (int i = 0;
    i < 1000000; i ++) {
        try {
            System.out.println (person.getAddress ().getSomeCrap ().getCrap ());
        } catch (NullPointerException npe) {
        }
    }
    long endTime = System.currentTimeMillis ();
    System.out.println ((endTime - startTime) / 1000F);
    long startTime1 = System.currentTimeMillis ();
    for (int i = 0;
    i < 1000000; i ++) {
        if (person != null) {
            Address address1 = person.getAddress ();
            if (address1 != null) {
                SomeCrap someCrap2 = address1.getSomeCrap ();
                if (someCrap2 != null) {
                    System.out.println (someCrap2.getCrap ());
                }
            }
        }
    }
    long endTime1 = System.currentTimeMillis ();
    System.out.println ((endTime1 - startTime1) / 1000F);
}
----------------------------------------

  public static void main(String[] args) {       
    Address address = new Address();
    person.setAddress(address);
    long startTime = System.currentTimeMillis();
    for (int i = 0; i < 1000000; i++) {
        try {
            if (address.getSomeCrap() != null) {
                System.out.println(address.getSomeCrap().getCrap());
            }
            else{
                throw new NullPointerException();
            }
        } catch (NullPointerException npe) {
        }
    }
    long endTime = System.currentTimeMillis();
    System.out.println((endTime - startTime) / 1000F);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
854
2
Gpt3D_Clone854_2.java 1 31
Gpt3D_Clone854_2.java 32 51
----------------------------------------

public static void main (String [] args) {
    Address address = new Address ();
    address.setSomeCrap (null);
    Person person = new Person ();
    person.setAddress (address);
    long startTime = System.currentTimeMillis ();
    for (int i = 0;
    i < 1000000; i ++) {
        try {
            System.out.println (person.getAddress ().getSomeCrap ().getCrap ());
        } catch (NullPointerException npe) {
        }
    }
    long endTime = System.currentTimeMillis ();
    System.out.println ((endTime - startTime) / 1000F);
    long startTime1 = System.currentTimeMillis ();
    for (int i = 0;
    i < 1000000; i ++) {
        if (person != null) {
            Address address1 = person.getAddress ();
            if (address1 != null) {
                SomeCrap someCrap2 = address1.getSomeCrap ();
                if (someCrap2 != null) {
                    System.out.println (someCrap2.getCrap ());
                }
            }
        }
    }
    long endTime1 = System.currentTimeMillis ();
    System.out.println ((endTime1 - startTime1) / 1000F);
}
----------------------------------------

  public static void main(String[] args) {       
    Address address = new Address();
    person.setAddress(address);
    long startTime = System.currentTimeMillis();
    for (int i = 0; i < 1000000; i++) {
        try {
            if (address != null && address.getSomeCrap() != null && address.getSomeCrap().getCrap() != null){
                System.out.println(address.getSomeCrap().getCrap());
            }
            else{
                throw new NullPointerException();
            }
        } catch (NullPointerException npe) {
        }
    }
    long endTime = System.currentTimeMillis();
    System.out.println((endTime - startTime) / 1000F);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
854
3
Gpt3D_Clone854_3.java 1 31
Gpt3D_Clone854_3.java 32 48
----------------------------------------

public static void main (String [] args) {
    Address address = new Address ();
    address.setSomeCrap (null);
    Person person = new Person ();
    person.setAddress (address);
    long startTime = System.currentTimeMillis ();
    for (int i = 0;
    i < 1000000; i ++) {
        try {
            System.out.println (person.getAddress ().getSomeCrap ().getCrap ());
        } catch (NullPointerException npe) {
        }
    }
    long endTime = System.currentTimeMillis ();
    System.out.println ((endTime - startTime) / 1000F);
    long startTime1 = System.currentTimeMillis ();
    for (int i = 0;
    i < 1000000; i ++) {
        if (person != null) {
            Address address1 = person.getAddress ();
            if (address1 != null) {
                SomeCrap someCrap2 = address1.getSomeCrap ();
                if (someCrap2 != null) {
                    System.out.println (someCrap2.getCrap ());
                }
            }
        }
    }
    long endTime1 = System.currentTimeMillis ();
    System.out.println ((endTime1 - startTime1) / 1000F);
}
----------------------------------------

  public static void main(String[] args) {       
    Address address = new Address();
    person.setAddress(address);
    long startTime = System.currentTimeMillis();
    for (int i = 0; i < 1000000; i++) {
        if (address != null) {
            SomeCrap someCrap = address.getSomeCrap();
            if (someCrap != null && someCrap.getCrap() != null) {
                System.out.println(someCrap.getCrap());
            }
        }
    }
    long endTime = System.currentTimeMillis();
    System.out.println((endTime - startTime) / 1000F);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
854
4
Gpt3D_Clone854_4.java 1 31
Gpt3D_Clone854_4.java 32 49
----------------------------------------

public static void main (String [] args) {
    Address address = new Address ();
    address.setSomeCrap (null);
    Person person = new Person ();
    person.setAddress (address);
    long startTime = System.currentTimeMillis ();
    for (int i = 0;
    i < 1000000; i ++) {
        try {
            System.out.println (person.getAddress ().getSomeCrap ().getCrap ());
        } catch (NullPointerException npe) {
        }
    }
    long endTime = System.currentTimeMillis ();
    System.out.println ((endTime - startTime) / 1000F);
    long startTime1 = System.currentTimeMillis ();
    for (int i = 0;
    i < 1000000; i ++) {
        if (person != null) {
            Address address1 = person.getAddress ();
            if (address1 != null) {
                SomeCrap someCrap2 = address1.getSomeCrap ();
                if (someCrap2 != null) {
                    System.out.println (someCrap2.getCrap ());
                }
            }
        }
    }
    long endTime1 = System.currentTimeMillis ();
    System.out.println ((endTime1 - startTime1) / 1000F);
}
----------------------------------------

  public static void main(String[] args) {       
    Address address = new Address();
    person.setAddress(address);
    long startTime = System.currentTimeMillis();
    for (int i = 0; i < 1000000; i++) {
        if (person != null && address != null && address.getSomeCrap() != null) {
            try{
                System.out.println(address.getSomeCrap().getCrap());
            }
            catch(NullPointerException npe){
            }
        }
    }
    long endTime = System.currentTimeMillis();
    System.out.println((endTime - startTime) / 1000F);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
854
5
Gpt3D_Clone854_5.java 1 31
Gpt3D_Clone854_5.java 32 48
----------------------------------------

public static void main (String [] args) {
    Address address = new Address ();
    address.setSomeCrap (null);
    Person person = new Person ();
    person.setAddress (address);
    long startTime = System.currentTimeMillis ();
    for (int i = 0;
    i < 1000000; i ++) {
        try {
            System.out.println (person.getAddress ().getSomeCrap ().getCrap ());
        } catch (NullPointerException npe) {
        }
    }
    long endTime = System.currentTimeMillis ();
    System.out.println ((endTime - startTime) / 1000F);
    long startTime1 = System.currentTimeMillis ();
    for (int i = 0;
    i < 1000000; i ++) {
        if (person != null) {
            Address address1 = person.getAddress ();
            if (address1 != null) {
                SomeCrap someCrap2 = address1.getSomeCrap ();
                if (someCrap2 != null) {
                    System.out.println (someCrap2.getCrap ());
                }
            }
        }
    }
    long endTime1 = System.currentTimeMillis ();
    System.out.println ((endTime1 - startTime1) / 1000F);
}
----------------------------------------

  public static void main(String[] args) {       
    Address address = new Address();
    person.setAddress(address);
    long startTime = System.currentTimeMillis();
    for (int i = 0; i < 1000000; i++) {
        if (person != null && address != null) {
            SomeCrap someCrap = address.getSomeCrap();
            if (someCrap != null && someCrap.getCrap() != null) {
                System.out.println(someCrap.getCrap()); 
            } 
        }
    }
    long endTime = System.currentTimeMillis();
    System.out.println((endTime - startTime) / 1000F);    
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
854
6
Gpt3D_Clone854_6.java 1 31
Gpt3D_Clone854_6.java 32 47
----------------------------------------

public static void main (String [] args) {
    Address address = new Address ();
    address.setSomeCrap (null);
    Person person = new Person ();
    person.setAddress (address);
    long startTime = System.currentTimeMillis ();
    for (int i = 0;
    i < 1000000; i ++) {
        try {
            System.out.println (person.getAddress ().getSomeCrap ().getCrap ());
        } catch (NullPointerException npe) {
        }
    }
    long endTime = System.currentTimeMillis ();
    System.out.println ((endTime - startTime) / 1000F);
    long startTime1 = System.currentTimeMillis ();
    for (int i = 0;
    i < 1000000; i ++) {
        if (person != null) {
            Address address1 = person.getAddress ();
            if (address1 != null) {
                SomeCrap someCrap2 = address1.getSomeCrap ();
                if (someCrap2 != null) {
                    System.out.println (someCrap2.getCrap ());
                }
            }
        }
    }
    long endTime1 = System.currentTimeMillis ();
    System.out.println ((endTime1 - startTime1) / 1000F);
}
----------------------------------------

  public static void main(String[] args) {       
    Address address = new Address();
    person.setAddress(address);
    long startTime = System.currentTimeMillis();
    for (int i = 0; i < 1000000; i++) {
        if (address != null) {
            if (address.getSomeCrap() != null && address.getSomeCrap().getCrap() != null) {
                System.out.println(address.getSomeCrap().getCrap());
            }
        }
    }
    long endTime = System.currentTimeMillis();
    System.out.println((endTime - startTime) / 1000F);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
854
7
Gpt3D_Clone854_7.java 1 31
Gpt3D_Clone854_7.java 32 45
----------------------------------------

public static void main (String [] args) {
    Address address = new Address ();
    address.setSomeCrap (null);
    Person person = new Person ();
    person.setAddress (address);
    long startTime = System.currentTimeMillis ();
    for (int i = 0;
    i < 1000000; i ++) {
        try {
            System.out.println (person.getAddress ().getSomeCrap ().getCrap ());
        } catch (NullPointerException npe) {
        }
    }
    long endTime = System.currentTimeMillis ();
    System.out.println ((endTime - startTime) / 1000F);
    long startTime1 = System.currentTimeMillis ();
    for (int i = 0;
    i < 1000000; i ++) {
        if (person != null) {
            Address address1 = person.getAddress ();
            if (address1 != null) {
                SomeCrap someCrap2 = address1.getSomeCrap ();
                if (someCrap2 != null) {
                    System.out.println (someCrap2.getCrap ());
                }
            }
        }
    }
    long endTime1 = System.currentTimeMillis ();
    System.out.println ((endTime1 - startTime1) / 1000F);
}
----------------------------------------

  public static void main(String[] args) {       
    Address address = new Address();
    person.setAddress(address);
    long startTime = System.currentTimeMillis();
    for (int i = 0; i < 1000000; i++) {
        if (person != null && address != null && address.getSomeCrap() != null) {
            System.out.println(address.getSomeCrap().getCrap());
        }
    }
    long endTime = System.currentTimeMillis();
    System.out.println((endTime - startTime) / 1000F);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
854
8
Gpt3D_Clone854_8.java 1 31
Gpt3D_Clone854_8.java 32 45
----------------------------------------

public static void main (String [] args) {
    Address address = new Address ();
    address.setSomeCrap (null);
    Person person = new Person ();
    person.setAddress (address);
    long startTime = System.currentTimeMillis ();
    for (int i = 0;
    i < 1000000; i ++) {
        try {
            System.out.println (person.getAddress ().getSomeCrap ().getCrap ());
        } catch (NullPointerException npe) {
        }
    }
    long endTime = System.currentTimeMillis ();
    System.out.println ((endTime - startTime) / 1000F);
    long startTime1 = System.currentTimeMillis ();
    for (int i = 0;
    i < 1000000; i ++) {
        if (person != null) {
            Address address1 = person.getAddress ();
            if (address1 != null) {
                SomeCrap someCrap2 = address1.getSomeCrap ();
                if (someCrap2 != null) {
                    System.out.println (someCrap2.getCrap ());
                }
            }
        }
    }
    long endTime1 = System.currentTimeMillis ();
    System.out.println ((endTime1 - startTime1) / 1000F);
}
----------------------------------------

  public static void main(String[] args) {
    Address address = new Address();
    person.setAddress(address);
    long startTime = System.currentTimeMillis();
    for (int i = 0; i < 1000000; i++) {
        if (person.getAddress() != null && address.getSomeCrap() != null && address.getSomeCrap().getCrap() != null) {
            System.out.println(address.getSomeCrap().getCrap());
        }
    }
    long endTime = System.currentTimeMillis();
    System.out.println((endTime - startTime) / 1000F); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
854
9
Gpt3D_Clone854_9.java 1 31
Gpt3D_Clone854_9.java 32 46
----------------------------------------

public static void main (String [] args) {
    Address address = new Address ();
    address.setSomeCrap (null);
    Person person = new Person ();
    person.setAddress (address);
    long startTime = System.currentTimeMillis ();
    for (int i = 0;
    i < 1000000; i ++) {
        try {
            System.out.println (person.getAddress ().getSomeCrap ().getCrap ());
        } catch (NullPointerException npe) {
        }
    }
    long endTime = System.currentTimeMillis ();
    System.out.println ((endTime - startTime) / 1000F);
    long startTime1 = System.currentTimeMillis ();
    for (int i = 0;
    i < 1000000; i ++) {
        if (person != null) {
            Address address1 = person.getAddress ();
            if (address1 != null) {
                SomeCrap someCrap2 = address1.getSomeCrap ();
                if (someCrap2 != null) {
                    System.out.println (someCrap2.getCrap ());
                }
            }
        }
    }
    long endTime1 = System.currentTimeMillis ();
    System.out.println ((endTime1 - startTime1) / 1000F);
}
----------------------------------------

  public static void main(String[] args) {       
    Address address = new Address();
    person.setAddress(address);
    long startTime = System.currentTimeMillis();
    for (int i = 0; i < 1000000; i++) {
        if (address.getSomeCrap() != null) {
            System.out.println(address.getSomeCrap().getCrap());
        }
    }
    long endTime = System.currentTimeMillis();
    System.out.println((endTime - startTime) / 1000F);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
857
0
Gpt3D_Clone857_0.java 1 11
Gpt3D_Clone857_0.java 12 31
----------------------------------------

public static int binarySearch (int intToSearch, int [] sortedArray) {
    int lower = 0;
    int upper = sortedArray.length - 1;
    while (lower <= upper) {
        int mid = lower + (upper - lower) / 2;
        if (intToSearch < sortedArray [mid]) upper = mid - 1;
        else if (intToSearch > sortedArray [mid]) lower = mid + 1;
        else return mid;
    }
    return - 1;
}
----------------------------------------

 public static int binarySearch(int intToSearch, int[] sortedArray) {
    int start = 0;
  	int end = sortedArray.length - 1;
  	int mid = -1;
  	while (start <= end) {
  		mid = start + (end - start) / 2;
  		if (intToSearch == sortedArray[mid]) {
  			return mid;
  		} else if (intToSearch < sortedArray[mid]) {
  			end = mid - 1;
  		} else {
  			start = mid + 1;
  		}
  	}
  	return -1;
}
----------------------------------------

 public static int binarySearch(int intToSearch, int[] sortedArray) {
    int lower = 0;
  	int upper = sortedArray.length - 1;
  	int mid = -1;
  	while (lower <= upper) {
  		mid = lower + (upper - lower) / 2;
  		if (intToSearch == sortedArray[mid]) {
  			return mid;
  		} else if (intToSearch < sortedArray[mid]) {
  			upper = mid - 1;
  		} else {
  			lower = mid + 1;
  		}
  	}
  	return -1;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
857
1
Gpt3D_Clone857_1.java 1 11
Gpt3D_Clone857_1.java 12 33
----------------------------------------

public static int binarySearch (int intToSearch, int [] sortedArray) {
    int lower = 0;
    int upper = sortedArray.length - 1;
    while (lower <= upper) {
        int mid = lower + (upper - lower) / 2;
        if (intToSearch < sortedArray [mid]) upper = mid - 1;
        else if (intToSearch > sortedArray [mid]) lower = mid + 1;
        else return mid;
    }
    return - 1;
}
----------------------------------------

 public static int binarySearch(int intToSearch, int[] sortedArray) {
    int mid = -1;
    int lower = 0;
    int upper = sortedArray.length - 1;
    while (lower <= upper) {
        mid = lower + (upper - lower) / 2;
        if (intToSearch == sortedArray[mid]) {
            return mid;
        }
        if (intToSearch > sortedArray[mid]) {
            lower = mid + 1;
        } else {
            upper = mid - 1;
        }
    }
    return -1;
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
857
2
Gpt3D_Clone857_2.java 1 11
Gpt3D_Clone857_2.java 12 33
----------------------------------------

public static int binarySearch (int intToSearch, int [] sortedArray) {
    int lower = 0;
    int upper = sortedArray.length - 1;
    while (lower <= upper) {
        int mid = lower + (upper - lower) / 2;
        if (intToSearch < sortedArray [mid]) upper = mid - 1;
        else if (intToSearch > sortedArray [mid]) lower = mid + 1;
        else return mid;
    }
    return - 1;
}
----------------------------------------

 public static int binarySearch(int intToSearch, int[] sortedArray) {
    int lower = 0;
    int upper = sortedArray.length - 1;
    int mid = -1;
    while (lower <= upper) {
        mid = lower + (upper-lower) / 2;
        if (intToSearch == sortedArray[mid]) {
            return mid;
        }
        if (intToSearch < sortedArray[mid]) {
            upper = mid - 1;
        } else {
            lower = mid + 1;
        }
    }
    return -1;  
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
857
3
Gpt3D_Clone857_3.java 1 11
Gpt3D_Clone857_3.java 12 31
----------------------------------------

public static int binarySearch (int intToSearch, int [] sortedArray) {
    int lower = 0;
    int upper = sortedArray.length - 1;
    while (lower <= upper) {
        int mid = lower + (upper - lower) / 2;
        if (intToSearch < sortedArray [mid]) upper = mid - 1;
        else if (intToSearch > sortedArray [mid]) lower = mid + 1;
        else return mid;
    }
    return - 1;
}
----------------------------------------

 public static int binarySearch(int intToSearch, int[] sortedArray) {
    int lower = 0;
    int upper = sortedArray.length - 1;
    int mid = -1;
    while (lower <= upper) {
        mid = lower + (upper - lower) / 2;
        if (intToSearch > sortedArray[mid]) {
            upper = mid - 1;
        } else if (intToSearch < sortedArray[mid]) {
            lower = mid + 1;
        } else {
            return mid;
        }
    }
    return -1;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
857
4
Gpt3D_Clone857_4.java 1 11
Gpt3D_Clone857_4.java 12 31
----------------------------------------

public static int binarySearch (int intToSearch, int [] sortedArray) {
    int lower = 0;
    int upper = sortedArray.length - 1;
    while (lower <= upper) {
        int mid = lower + (upper - lower) / 2;
        if (intToSearch < sortedArray [mid]) upper = mid - 1;
        else if (intToSearch > sortedArray [mid]) lower = mid + 1;
        else return mid;
    }
    return - 1;
}
----------------------------------------

 public static int binarySearch(int intToSearch, int[] sortedArray) {
    int start = 0;
  	int end = sortedArray.length - 1;
  	int mid = -1;
  	while (start <= end) {
  		mid = start + (end - start) / 2;
  		if (intToSearch == sortedArray[mid]) {
  			return mid;
  		} else if (intToSearch < sortedArray[mid]) {
  			end = mid - 1;
  		} else {
  			start = mid + 1;
  		}
  	}
  	return -1;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
857
5
Gpt3D_Clone857_5.java 1 11
Gpt3D_Clone857_5.java 12 33
----------------------------------------

public static int binarySearch (int intToSearch, int [] sortedArray) {
    int lower = 0;
    int upper = sortedArray.length - 1;
    while (lower <= upper) {
        int mid = lower + (upper - lower) / 2;
        if (intToSearch < sortedArray [mid]) upper = mid - 1;
        else if (intToSearch > sortedArray [mid]) lower = mid + 1;
        else return mid;
    }
    return - 1;
}
----------------------------------------

 public static int binarySearch(int intToSearch, int[] sortedArray) {
    int min = 0;
    int max = sortedArray.length - 1;
    int mid = -1;
    while (min <= max) {
        mid = min + (max - min) / 2;
        if (intToSearch == sortedArray[mid]) {
            return mid;
        }
        if (intToSearch > sortedArray[mid]) {
            min = mid + 1;
        } else {
            max = mid -1;
        }
    }
    return -1;
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
857
6
Gpt3D_Clone857_6.java 1 11
Gpt3D_Clone857_6.java 12 32
----------------------------------------

public static int binarySearch (int intToSearch, int [] sortedArray) {
    int lower = 0;
    int upper = sortedArray.length - 1;
    while (lower <= upper) {
        int mid = lower + (upper - lower) / 2;
        if (intToSearch < sortedArray [mid]) upper = mid - 1;
        else if (intToSearch > sortedArray [mid]) lower = mid + 1;
        else return mid;
    }
    return - 1;
}
----------------------------------------

 public static  int binarySearch(int intToSearch, int[] sortedArray) {
    int start = 0;
    int end = sortedArray.length - 1;
    while (start <= end) {
        int midpoint = start + (end - start) / 2;
        if (sortedArray[midpoint] == intToSearch) {
            return midpoint;
        }
        if (sortedArray[midpoint] > intToSearch) {
            end = midpoint - 1;
        } else {
            start = midpoint + 1;
        }
    }
    return -1;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
857
7
Gpt3D_Clone857_7.java 1 11
Gpt3D_Clone857_7.java 12 30
----------------------------------------

public static int binarySearch (int intToSearch, int [] sortedArray) {
    int lower = 0;
    int upper = sortedArray.length - 1;
    while (lower <= upper) {
        int mid = lower + (upper - lower) / 2;
        if (intToSearch < sortedArray [mid]) upper = mid - 1;
        else if (intToSearch > sortedArray [mid]) lower = mid + 1;
        else return mid;
    }
    return - 1;
}
----------------------------------------

 public static int binarySearch(int intToSearch, int[] sortedArray) {
    int lower = 0;
    int upper = sortedArray.length-1;
    while (lower <= upper) {
        int midpoint = (lower + upper) / 2;
        if (intToSearch == sortedArray[midpoint]) {
            return midpoint;
        } else if (intToSearch > sortedArray[midpoint]) {
            lower = midpoint + 1;
        } else {
            upper = midpoint - 1;
        }
    }
    return -1;
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
857
8
Gpt3D_Clone857_8.java 1 11
Gpt3D_Clone857_8.java 12 32
----------------------------------------

public static int binarySearch (int intToSearch, int [] sortedArray) {
    int lower = 0;
    int upper = sortedArray.length - 1;
    while (lower <= upper) {
        int mid = lower + (upper - lower) / 2;
        if (intToSearch < sortedArray [mid]) upper = mid - 1;
        else if (intToSearch > sortedArray [mid]) lower = mid + 1;
        else return mid;
    }
    return - 1;
}
----------------------------------------

 public static int binarySearch(int intToSearch, int[] sortedArray) {  
    int start = 0;  
    int end = sortedArray.length - 1;  
  
    while (start <= end) {  
        int mid = start + (end - start) / 2;  
  
        if (sortedArray[mid] == intToSearch) {  
            return mid;  
        }  
        else if (sortedArray[mid] > intToSearch) {  
            end = mid - 1;  
        }  
        else {  
            start = mid + 1;  
        }  
    }  
    return -1;  
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
857
9
Gpt3D_Clone857_9.java 1 11
Gpt3D_Clone857_9.java 12 30
----------------------------------------

public static int binarySearch (int intToSearch, int [] sortedArray) {
    int lower = 0;
    int upper = sortedArray.length - 1;
    while (lower <= upper) {
        int mid = lower + (upper - lower) / 2;
        if (intToSearch < sortedArray [mid]) upper = mid - 1;
        else if (intToSearch > sortedArray [mid]) lower = mid + 1;
        else return mid;
    }
    return - 1;
}
----------------------------------------

 public static int binarySearch(int intToSearch, int[] sortedArray) {
    int lower = 0;
    int upper = sortedArray.length-1;
    while (lower <= upper) {
        int midPoint = lower + (upper - lower) / 2;
        if (intToSearch < sortedArray[midPoint]){
            upper = midPoint - 1;
        } else if (intToSearch > sortedArray[midPoint]){
            lower = midPoint + 1;
        } else {
            return midPoint;
        }
    }
    return -1;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
858
0
Gpt3D_Clone858_0.java 1 11
Gpt3D_Clone858_0.java 12 30
----------------------------------------

public static int binarySearch (int intToSearch, int [] sortedArray) {
    int lower = 0;
    int upper = sortedArray.length - 1;
    while (lower <= upper) {
        int mid = lower + (upper - lower) / 2;
        if (intToSearch < sortedArray [mid]) upper = mid - 1;
        else if (intToSearch > sortedArray [mid]) lower = mid + 1;
        else return mid;
    }
    return - 1;
}
----------------------------------------

 public static int binarySearch(int intToSearch, int [] sortedArray) {
	int low = 0;
	int high = sortedArray.length - 1;
	
	while(low <= high) {
		int middle = (low + high) / 2;
		
		if (intToSearch < sortedArray[middle]) {
			high = middle - 1;	
		} else if (intToSearch > sortedArray[middle]) { 
			low = middle + 1;
		} else {
			return middle;
		}
	}
	return -1;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
85
2
Gpt3D_Clone85_2.java 1 9
Gpt3D_Clone85_2.java 10 21
----------------------------------------

public void start (Stage primaryStage) {
    final HTMLEditor htmlEditor = new HTMLEditor ();
    primaryStage.setScene (new Scene (htmlEditor));
    primaryStage.show ();
    for (Node toolBar = htmlEditor.lookup (".tool-bar");
    toolBar != null; toolBar = htmlEditor.lookup (".tool-bar")) {
        ((Pane) toolBar.getParent ()).getChildren ().remove (toolBar);
    }
}
----------------------------------------

 public void start (Stage primaryStage) {
    final HTMLEditor htmlEditor = new HTMLEditor ();
    primaryStage.setScene (new Scene (htmlEditor));
    primaryStage.show ();
    Node toolBar = null;
    do {
      toolBar = htmlEditor.lookup (".tool-bar");
      if (toolBar != null) ((Pane) toolBar.getParent ()).getChildren ().remove (toolBar);
    } while (toolBar != null);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
860
0
Gpt3D_Clone860_0.java 1 15
Gpt3D_Clone860_0.java 16 48
----------------------------------------

private static int score (final char [] a, final char [] b, final int idxA, final int idxB) {
    final int value;
    if (idxA >= a.length || idxB >= b.length) {
        value = 0;
    } else if (a [idxA] == b [idxB]) {
        value = 1 + score (a, b, idxA + 1, idxB + 1);
    } else {
        final int x;
        final int y;
        x = score (a, b, idxA + 1, idxB);
        y = score (a, b, idxB, idxB + 1);
        value = max (x, y);
    }
    return (value);
}
----------------------------------------

 private static int score (final char [] a, final char [] b, final int idxA, final int idxB) { 
    final int value;
    if (idxA >= a.length || idxB >= b.length) {
        value = 0;
    } else {
        if (a [idxA] == b [idxB]) {
            value = 1 + score (a, b, idxA + 1, idxB + 1);
        } else {
            int x = 0;
            int y = 0;
            for (int i = idxA + 1; i < a.length; i++){
                for (int j = idxB; j < b.length; j++){
                    if (a[i] == b[j]){
                        x++;
                        break;
                    }
                }
            }
            for (int i = idxA; i < a.length; i++){
                for (int j = idxB + 1; j < b.length; j++){
                    if (a[i] == b[j]){
                        y++;
                        break;
                    }
                }
            }
            value = Math.max(x, y);
        }
    }
    return (value);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
860
4
Gpt3D_Clone860_4.java 1 15
Gpt3D_Clone860_4.java 16 38
----------------------------------------

private static int score (final char [] a, final char [] b, final int idxA, final int idxB) {
    final int value;
    if (idxA >= a.length || idxB >= b.length) {
        value = 0;
    } else if (a [idxA] == b [idxB]) {
        value = 1 + score (a, b, idxA + 1, idxB + 1);
    } else {
        final int x;
        final int y;
        x = score (a, b, idxA + 1, idxB);
        y = score (a, b, idxB, idxB + 1);
        value = max (x, y);
    }
    return (value);
}
----------------------------------------

 private static int score (final char [] a, final char [] b, final int idxA, final int idxB) { 
    final int value;
    int highestScore = 0;
    if (idxA >= a.length || idxB >= b.length) {
        value = 0;
    } else {
        if (a[idxA] == b[idxB]) {
            highestScore = 1 + score (a, b, idxA + 1, idxB + 1);
        } else {
            for(int i = idxA; i < a.length-1; i++){
                for(int j = idxB; j < b.length-1; j++){
                    if(a[i] == b[j]){
                        highestScore++;
                    }
                }
            }
        }
    }
    value = highestScore;
    return (value);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
860
9
Gpt3D_Clone860_9.java 1 15
Gpt3D_Clone860_9.java 16 34
----------------------------------------

private static int score (final char [] a, final char [] b, final int idxA, final int idxB) {
    final int value;
    if (idxA >= a.length || idxB >= b.length) {
        value = 0;
    } else if (a [idxA] == b [idxB]) {
        value = 1 + score (a, b, idxA + 1, idxB + 1);
    } else {
        final int x;
        final int y;
        x = score (a, b, idxA + 1, idxB);
        y = score (a, b, idxB, idxB + 1);
        value = max (x, y);
    }
    return (value);
}
----------------------------------------

 private static int score (final char [] a, final char [] b, final int idxA, final int idxB) { 
    final int value;
    int max = 0;
    for(int i = idxA; i < a.length; i++){
        for(int j = idxB; j < b.length; j++){
            if (a[i] == b[j]){
                if (i+1 < a.length && j + 1 < b.length){
                    max = max + 1 + score(a,b,i+1,j+1);
                }else{
                    max++;
                }
            } 
        }
    }
    value = max;
    return(value);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
865
0
Gpt3D_Clone865_0.java 1 14
Gpt3D_Clone865_0.java 15 40
----------------------------------------

public static int findArray (int [] array, int [] subArray) {
    int index = - 1;
    arrayLoop : for (int i = 0;
    i < array.length; i ++) {
        if (array [i] == subArray [0]) {
            for (int j = 1;
            j < subArray.length; j ++) {
                if (i + j > array.length - 1 || array [i + j] != subArray [j]) continue arrayLoop;
            }
            index = i;
        }
    }
    return index;
}
----------------------------------------

 public static int findArray(int[] array, int[] subArray) {
    boolean found = true;
    int index = -1;
    for (int i = 0; i < array.length; i++) {
        if (array[i] == subArray[0]) {
            for (int j = 0; j < subArray.length; j++) {
                if (i + j < array.length) {
                    if (array[i + j] != subArray[j]) {
                        found = false;
                        break;
                    }
                } else {
                    found = false;
                    break;
                }
            }
            if (found) {
                index = i;
                break;
            }
        }
    }
    return index;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
865
1
Gpt3D_Clone865_1.java 1 14
Gpt3D_Clone865_1.java 15 42
----------------------------------------

public static int findArray (int [] array, int [] subArray) {
    int index = - 1;
    arrayLoop : for (int i = 0;
    i < array.length; i ++) {
        if (array [i] == subArray [0]) {
            for (int j = 1;
            j < subArray.length; j ++) {
                if (i + j > array.length - 1 || array [i + j] != subArray [j]) continue arrayLoop;
            }
            index = i;
        }
    }
    return index;
}
----------------------------------------

 public static int findArray (int [] array, int [] subArray) {
    int arrayLength = array.length;
    int subArrayLength = subArray.length;
    int index = -1;
    for (int i = 0; i < arrayLength; i++) {
        int count = 0;
        //Check if first element of subArray matches with the array's current index, otherwise you can ignore this loop and move to second iteration.
        if (array[i] == subArray[0]) {
            for (int j = i + 1; j < arrayLength; j++) {
                //Check if all the element of subArray matches with the array.
                if (array[j] == subArray[count + 1]) {
                    count++;
                    //If all the elements are matched then break the loop and return the index value.
                    if (count == subArrayLength - 1) {
                        index = i;
                        break;
                    }
                } else {
                    //If the element of subArray didn't match with the array's current index, then restart the loop and move to second iteration.
                    break;
                }
            }
        }
    }
    return index;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
865
2
Gpt3D_Clone865_2.java 1 14
Gpt3D_Clone865_2.java 15 36
----------------------------------------

public static int findArray (int [] array, int [] subArray) {
    int index = - 1;
    arrayLoop : for (int i = 0;
    i < array.length; i ++) {
        if (array [i] == subArray [0]) {
            for (int j = 1;
            j < subArray.length; j ++) {
                if (i + j > array.length - 1 || array [i + j] != subArray [j]) continue arrayLoop;
            }
            index = i;
        }
    }
    return index;
}
----------------------------------------

 public static int findArray (int [] array, int [] subArray) {
    int index = -1;
    for (int i = 0; i < array.length; i++) {
        if (array[i] == subArray[0]) {
            int count = 1;
            for (int j = i + 1; j < array.length; j++) {
                if (array[j] == subArray[count]) {
                    count++;
                    if (count == subArray.length) {
                        index = i;
                        break;
                    }
                } else {
                    break;
                }
            }
        }
    }
    return index;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
865
3
Gpt3D_Clone865_3.java 1 14
Gpt3D_Clone865_3.java 15 36
----------------------------------------

public static int findArray (int [] array, int [] subArray) {
    int index = - 1;
    arrayLoop : for (int i = 0;
    i < array.length; i ++) {
        if (array [i] == subArray [0]) {
            for (int j = 1;
            j < subArray.length; j ++) {
                if (i + j > array.length - 1 || array [i + j] != subArray [j]) continue arrayLoop;
            }
            index = i;
        }
    }
    return index;
}
----------------------------------------

 public static int findArray (int [] array, int [] subArray) {
    int index = - 1;
    int arrayLen = array.length;
    int subArrayLen = subArray.length;
    for (int curr = 0; curr < arrayLen; curr++) {
        int count = 0;
        if (array[curr] == subArray[0]) {
            for (int i = 1, j = (curr + 1); i < subArrayLen && j < arrayLen; i++, j++) {
                if (array[j] == subArray[i]) {
                    count++;
                }
            }
            if (count == subArrayLen - 1) {
                index = curr;
                break;
            }
        }
    }
    return index;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
865
4
Gpt3D_Clone865_4.java 1 14
Gpt3D_Clone865_4.java 15 39
----------------------------------------

public static int findArray (int [] array, int [] subArray) {
    int index = - 1;
    arrayLoop : for (int i = 0;
    i < array.length; i ++) {
        if (array [i] == subArray [0]) {
            for (int j = 1;
            j < subArray.length; j ++) {
                if (i + j > array.length - 1 || array [i + j] != subArray [j]) continue arrayLoop;
            }
            index = i;
        }
    }
    return index;
}
----------------------------------------

 public static int findArray (int [] array, int [] subArray) {
    int index = -1;
    for (int i = 0; i < array.length; i++) {
        int count = 0;
        // check if current element of array matches with first element of subArray
        if (array[i] == subArray[0]) {
            for (int j = i; j < array.length; j++) {
                // check if elements of array match with elements of subArray
                if (array[j] == subArray[count]) {
                    count++;
                    // check if all the elements of subArray found in array
                    if (count == subArray.length) {
                        index = i;
                        break;
                    }
                }
                // if any element of subArray not found in array
                else break;
            }
        }
    }
    return index; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
868
0
Gpt3D_Clone868_0.java 1 10
Gpt3D_Clone868_0.java 11 28
----------------------------------------

public VV remove (String key) {
    synchronized (lock) {
        Item < VV > item = cache.remove (key);
        if (item != null) {
            return item.payload;
        } else {
            return null;
        }
    }
}
----------------------------------------

 public VV remove (String key) {
    ReentrantReadWriteLock lock = new ReentrantReadWriteLock();
    lock.readLock().lock();
    if (cache.containsKey(key)) {
        try {
            lock.writeLock().lock();
            Item < VV > item = cache.remove(key);
            return item.payload;
        } finally {
            lock.writeLock().unlock();
        }
    } else {
        lock.readLock().unlock();
        return null;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
868
1
Gpt3D_Clone868_1.java 1 10
Gpt3D_Clone868_1.java 11 28
----------------------------------------

public VV remove (String key) {
    synchronized (lock) {
        Item < VV > item = cache.remove (key);
        if (item != null) {
            return item.payload;
        } else {
            return null;
        }
    }
}
----------------------------------------

 public VV remove (String key) {
    ReentrantLock readLock = cache.readLock();
    readLock.lock();
    if (cache.containsKey(key)) {
        try {
            clonedCache.remove(key);
        } finally {
            readLock.unlock();
        }
        Item < VV > item = clonedCache.remove(key);
        return item.payload;
    } else {
        readLock.unlock();
        return null;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
868
2
Gpt3D_Clone868_2.java 1 10
Gpt3D_Clone868_2.java 11 27
----------------------------------------

public VV remove (String key) {
    synchronized (lock) {
        Item < VV > item = cache.remove (key);
        if (item != null) {
            return item.payload;
        } else {
            return null;
        }
    }
}
----------------------------------------

 public VV remove (String key) {
    ReentrantReadWriteLock lock = new ReentrantReadWriteLock();
    boolean successfulRemove;
    lock.readLock().lock();
    try {
        successfulRemove = cache.containsKey(key) && cache.remove(key) != null;
    } finally {
        lock.readLock().unlock();
    }
    if (successfulRemove) {
        Item < VV > item = cache.remove(key);
        return item.payload;
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
868
3
Gpt3D_Clone868_3.java 1 10
Gpt3D_Clone868_3.java 11 26
----------------------------------------

public VV remove (String key) {
    synchronized (lock) {
        Item < VV > item = cache.remove (key);
        if (item != null) {
            return item.payload;
        } else {
            return null;
        }
    }
}
----------------------------------------

 public VV remove (String key) {
    ReentrantLock lock = new ReentrantLock();
    lock.lock();
    try {
        if (cache.containsKey(key)) {
            Item < VV > item = cache.remove(key);
            return item.payload;
        } else {
            return null;
        }
    } finally {
        lock.unlock();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
868
4
Gpt3D_Clone868_4.java 1 10
Gpt3D_Clone868_4.java 11 27
----------------------------------------

public VV remove (String key) {
    synchronized (lock) {
        Item < VV > item = cache.remove (key);
        if (item != null) {
            return item.payload;
        } else {
            return null;
        }
    }
}
----------------------------------------

 public VV remove (String key) {
    synchronized (lock) {
        try {
            if (!cache.containsKey(key)) {
                return null;
            } else {
                Item < VV > item = cache.remove(key);
                return item.payload;
            }
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
868
5
Gpt3D_Clone868_5.java 1 10
Gpt3D_Clone868_5.java 11 22
----------------------------------------

public VV remove (String key) {
    synchronized (lock) {
        Item < VV > item = cache.remove (key);
        if (item != null) {
            return item.payload;
        } else {
            return null;
        }
    }
}
----------------------------------------

 public VV remove (String key) {
    ReentrantLock lock = new ReentrantLock();
    try {
        lock.lock();
        Item < VV > item = cache.remove(key);
        return item != null ? item.payload : null;
    } finally {
        lock.unlock();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
86
0
Gpt3D_Clone86_0.java 1 9
Gpt3D_Clone86_0.java 10 23
----------------------------------------

public void start (Stage primaryStage) {
    final HTMLEditor htmlEditor = new HTMLEditor ();
    primaryStage.setScene (new Scene (htmlEditor));
    primaryStage.show ();
    for (Node toolBar = htmlEditor.lookup (".tool-bar");
    toolBar != null; toolBar = htmlEditor.lookup (".tool-bar")) {
        ((Pane) toolBar.getParent ()).getChildren ().remove (toolBar);
    }
}
----------------------------------------

 public void start (Stage primaryStage) {final HTMLEditor htmlEditor = new HTMLEditor();
    Pane htmlEditorPane = new Pane();
    htmlEditorPane.getChildren().add(htmlEditor);
    primaryStage.setScene(new Scene(htmlEditorPane));
    primaryStage.show();
    List<Node> children = htmlEditorPane.getChildren();
    for (Node n : children) {
        if (".tool-bar".equals(n.getId())) {
            htmlEditorPane.getChildren().remove(n);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
86
3
Gpt3D_Clone86_3.java 1 9
Gpt3D_Clone86_3.java 10 20
----------------------------------------

public void start (Stage primaryStage) {
    final HTMLEditor htmlEditor = new HTMLEditor ();
    primaryStage.setScene (new Scene (htmlEditor));
    primaryStage.show ();
    for (Node toolBar = htmlEditor.lookup (".tool-bar");
    toolBar != null; toolBar = htmlEditor.lookup (".tool-bar")) {
        ((Pane) toolBar.getParent ()).getChildren ().remove (toolBar);
    }
}
----------------------------------------

 public void start (Stage primaryStage) {final HTMLEditor htmlEditor = new HTMLEditor();
    Scene scene = new Scene(htmlEditor);
    primaryStage.setScene(scene);
    primaryStage.show();
    List<Node> toolBars = htmlEditor.lookupAll(".tool-bar");
    for (Node toolBar : toolBars) {
        scene.getRoot().getChildren().remove(toolBar);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
86
5
Gpt3D_Clone86_5.java 1 9
Gpt3D_Clone86_5.java 10 18
----------------------------------------

public void start (Stage primaryStage) {
    final HTMLEditor htmlEditor = new HTMLEditor ();
    primaryStage.setScene (new Scene (htmlEditor));
    primaryStage.show ();
    for (Node toolBar = htmlEditor.lookup (".tool-bar");
    toolBar != null; toolBar = htmlEditor.lookup (".tool-bar")) {
        ((Pane) toolBar.getParent ()).getChildren ().remove (toolBar);
    }
}
----------------------------------------

 public void start (Stage primaryStage) {final HTMLEditor htmlEditor = new HTMLEditor();
    Scene scene = new Scene(htmlEditor);
    primaryStage.setScene(scene);
    primaryStage.show();
    List<Node> toolBars = htmlEditor.lookupAll(".tool-bar");
    scene.getRoot().getChildren().removeAll(toolBars);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
871
0
Gpt3D_Clone871_0.java 1 14
Gpt3D_Clone871_0.java 15 44
----------------------------------------

public void put (Key key, Value val) {
    if (map.containsKey (key)) {
        put (key, val);
        return;
    }
    while (currentSize >= maxSize) {
        freeSpace ();
    }
    synchronized (this) {
        queue.add (key);
        map.put (key, val);
        currentSize ++;
    }
}
----------------------------------------

 public void put (Key key, Value val) {
    if (map.containsKey(key)) {
        if (Objects.equals(val, map.get(key))) {
            return;
        }
        else {
            freeSpace();
        }
    }
    if (currentSize + val.getSize() > maxSize) {
        freeSpace();
        while (currentSize + val.getSize() > maxSize) {
            freeSpace();
        }
    }
    if (map.size() < maxSize) {
        synchronized (this) {
            queue.add (key);
            map.put (key, val);
            currentSize += val.getSize();
            return;
        }
    }
    else {
        freeSpace ();
        put (key, val);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
871
1
Gpt3D_Clone871_1.java 1 14
Gpt3D_Clone871_1.java 15 40
----------------------------------------

public void put (Key key, Value val) {
    if (map.containsKey (key)) {
        put (key, val);
        return;
    }
    while (currentSize >= maxSize) {
        freeSpace ();
    }
    synchronized (this) {
        queue.add (key);
        map.put (key, val);
        currentSize ++;
    }
}
----------------------------------------

 public void put (Key key, Value val) {
    if (map.containsKey(key)) {
        put (key, val);
        return;
    }
    if (currentSize + val.getSize() > maxSize) {
        freeSpace();
        while (currentSize + val.getSize() > maxSize) {
            freeSpace();
        }
    }
    if (map.size() < maxSize) {
        synchronized (this) {
            queue.add (key);
            map.put (key, val);
            currentSize += val.getSize();
            return;
        }
    }
    else {
        freeSpace ();
        put (key, val);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
871
7
Gpt3D_Clone871_7.java 1 14
Gpt3D_Clone871_7.java 15 26
----------------------------------------

public void put (Key key, Value val) {
    if (map.containsKey (key)) {
        put (key, val);
        return;
    }
    while (currentSize >= maxSize) {
        freeSpace ();
    }
    synchronized (this) {
        queue.add (key);
        map.put (key, val);
        currentSize ++;
    }
}
----------------------------------------

 public void put (Key key, Value val) {
    if (map.containsKey(key) || currentSize + val.getSize() >= maxSize) {
        return;
    }
    synchronized (this) {
        queue.add (key);
        map.put (key, val);
        currentSize += val.getSize();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
876
0
Gpt3D_Clone876_0.java 1 7
Gpt3D_Clone876_0.java 8 30
----------------------------------------

public void onRequestPermissionsResult (int requestCode, String permissions [], int [] grantResults) {
    super.onRequestPermissionsResult (requestCode, permissions, grantResults);
    if (grantResults.length == 0 || grantResults == null) {
    } else if (grantResults [0] == PackageManager.PERMISSION_GRANTED) {
    } else if (grantResults [0] == PackageManager.PERMISSION_DENIED) {
    }
}
----------------------------------------

 public void onRequestPermissionsResult(int requestCode, String permissions[], int[] grantResults) {
    super.onRequestPermissionsResult(requestCode, permissions, grantResults);
    if(grantResults.length == 0 || grantResults == null) {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
            builder.setMessage("Permission was not granted").setTitle("Error");
            AlertDialog dialog = builder.create();
            dialog.show();
    } 
    else if(grantResults[0] == PackageManager.PERMISSION_GRANTED) {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
            builder.setMessage("Permission granted successfully").setTitle("Success");
            AlertDialog dialog = builder.create();
            dialog.show();
    } 
    else if(grantResults[0] == PackageManager.PERMISSION_DENIED) {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
            builder.setMessage("Permission denied").setTitle("Error");
            AlertDialog dialog = builder.create();
            dialog.show();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
876
1
Gpt3D_Clone876_1.java 1 7
Gpt3D_Clone876_1.java 8 24
----------------------------------------

public void onRequestPermissionsResult (int requestCode, String permissions [], int [] grantResults) {
    super.onRequestPermissionsResult (requestCode, permissions, grantResults);
    if (grantResults.length == 0 || grantResults == null) {
    } else if (grantResults [0] == PackageManager.PERMISSION_GRANTED) {
    } else if (grantResults [0] == PackageManager.PERMISSION_DENIED) {
    }
}
----------------------------------------

 public void onRequestPermissionsResult(int requestCode, String permissions[], int[] grantResults) {
    super.onRequestPermissionsResult(requestCode, permissions, grantResults);
    if(grantResults.length == 0 || grantResults == null) {
        Intent intent = new Intent(this, NoPermissionActivity.class);
        startActivity(intent);
    } 
    else if(grantResults[0] == PackageManager.PERMISSION_GRANTED) {
        Intent intent = new Intent(this, PermissionGrantedActivity.class);
        startActivity(intent);
    } 
    else if(grantResults[0] == PackageManager.PERMISSION_DENIED) {
        Intent intent = new Intent(this, PermissionDeniedActivity.class);
        startActivity(intent);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
876
2
Gpt3D_Clone876_2.java 1 7
Gpt3D_Clone876_2.java 8 23
----------------------------------------

public void onRequestPermissionsResult (int requestCode, String permissions [], int [] grantResults) {
    super.onRequestPermissionsResult (requestCode, permissions, grantResults);
    if (grantResults.length == 0 || grantResults == null) {
    } else if (grantResults [0] == PackageManager.PERMISSION_GRANTED) {
    } else if (grantResults [0] == PackageManager.PERMISSION_DENIED) {
    }
}
----------------------------------------

 public void onRequestPermissionsResult(int requestCode, String permissions[], int[] grantResults) {
    super.onRequestPermissionsResult(requestCode, permissions, grantResults);
    if(grantResults.length == 0 || grantResults == null) {
        Toast.makeText(this, "Permission was not granted. We regret the inconvenience caused.", Toast.LENGTH_LONG).show();
    } 
    else if(grantResults[0] == PackageManager.PERMISSION_GRANTED) {
        Toast.makeText(this, "Permission granted successfully. Redirecting to next page...", Toast.LENGTH_SHORT).show();
        Intent intent = new Intent(this, NextPageActivity.class);
        startActivity(intent);
    } 
    else if(grantResults[0] == PackageManager.PERMISSION_DENIED) {
        Toast.makeText(this, "Your permission was not granted successfully. Let us know if you need any help.", Toast.LENGTH_LONG).show();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
880
2
Gpt3D_Clone880_2.java 1 17
Gpt3D_Clone880_2.java 18 34
----------------------------------------

public void onRequestPermissionsResult (int requestCode,@NonNull
String [] permissions,@NonNull
int [] grantResults) {
    if (requestCode == mRequestCode) {
        if (grantResults.length > 0) {
            for (int grantResult : grantResults) {
                if (grantResult != PackageManager.PERMISSION_GRANTED) {
                    mRequestPermissionListener.onFailed ();
                    return;
                }
            }
            mRequestPermissionListener.onSuccess ();
        } else {
            mRequestPermissionListener.onFailed ();
        }
    }
}
----------------------------------------

 public void onRequestPermissionsResult (int requestCode,@NonNull
String [] permissions,@NonNull
int [] grantResults) {
   boolean granted = false;
   for (int grantResult : grantResults) {
       if (grantResult == PackageManager.PERMISSION_GRANTED) {
           granted = true;
           break;
        }
   }
   if (granted && requestCode == mRequestCode)
       mRequestPermissionListener.onSuccess();
   else
       mRequestPermissionListener.onFailed();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
887
0
Gpt3D_Clone887_0.java 1 11
Gpt3D_Clone887_0.java 12 23
----------------------------------------

public static void main (String [] args) {
    String word = "a b c";
    int i = 0, spaceCount = 0;
    while (i < word.length ()) {
        if (word.charAt (i) == ' ') {
            spaceCount ++;
        }
        i ++;
    }
    System.out.println ("Spaces in string: " + spaceCount);
}
----------------------------------------

 public static void main (String [] args) {
    String word = args[0];
    int spaceCount = 0;
    for (int i = 0; i < word.length (); i++) {
        if (Character.isWhitespace(word.charAt (i))) {
           spaceCount++;
        }
    }
    System.out.println ("Spaces in string: " + spaceCount);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
887
1
Gpt3D_Clone887_1.java 1 11
Gpt3D_Clone887_1.java 12 23
----------------------------------------

public static void main (String [] args) {
    String word = "a b c";
    int i = 0, spaceCount = 0;
    while (i < word.length ()) {
        if (word.charAt (i) == ' ') {
            spaceCount ++;
        }
        i ++;
    }
    System.out.println ("Spaces in string: " + spaceCount);
}
----------------------------------------

 public static void main (String [] args) {
    int spaceCount = 0;
    for (int i = 0; i < args[0].length (); i++) {
        char c = args[0].charAt (i);
        if (Character.isWhitespace(c)) {
            spaceCount ++;
        }
    }
    System.out.println ("Spaces in string: " + spaceCount);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
887
2
Gpt3D_Clone887_2.java 1 11
Gpt3D_Clone887_2.java 12 25
----------------------------------------

public static void main (String [] args) {
    String word = "a b c";
    int i = 0, spaceCount = 0;
    while (i < word.length ()) {
        if (word.charAt (i) == ' ') {
            spaceCount ++;
        }
        i ++;
    }
    System.out.println ("Spaces in string: " + spaceCount);
}
----------------------------------------

 public static void main (String [] args) {
    int spaceCount = 0;
    char[] chars = args[0].toCharArray();
    for(int i=0;i<chars.length;i++)
    {
        if(Character.isWhitespace(chars[i]))
        {
            spaceCount++;
        }
    }
    System.out.println ("Spaces in string: " + spaceCount);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
887
4
Gpt3D_Clone887_4.java 1 11
Gpt3D_Clone887_4.java 12 23
----------------------------------------

public static void main (String [] args) {
    String word = "a b c";
    int i = 0, spaceCount = 0;
    while (i < word.length ()) {
        if (word.charAt (i) == ' ') {
            spaceCount ++;
        }
        i ++;
    }
    System.out.println ("Spaces in string: " + spaceCount);
}
----------------------------------------

 public static void main (String [] args) {
    String word = args[0];
    int spaceCount = 0;
    for (int i = 0; i < word.length (); i++) {
        if (word.substring(i, i+1).equals(" ")) {
           spaceCount++;
        }
    }
    System.out.println ("Spaces in string: " + spaceCount);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
887
5
Gpt3D_Clone887_5.java 1 11
Gpt3D_Clone887_5.java 12 21
----------------------------------------

public static void main (String [] args) {
    String word = "a b c";
    int i = 0, spaceCount = 0;
    while (i < word.length ()) {
        if (word.charAt (i) == ' ') {
            spaceCount ++;
        }
        i ++;
    }
    System.out.println ("Spaces in string: " + spaceCount);
}
----------------------------------------

 public static void main (String [] args) {
    String word = "a b c";
    int spaceCount = 0;
    for (String s : word.split("\\s+")) {
        spaceCount++;
    }
    System.out.println ("Spaces in string: " + spaceCount);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
887
6
Gpt3D_Clone887_6.java 1 11
Gpt3D_Clone887_6.java 12 22
----------------------------------------

public static void main (String [] args) {
    String word = "a b c";
    int i = 0, spaceCount = 0;
    while (i < word.length ()) {
        if (word.charAt (i) == ' ') {
            spaceCount ++;
        }
        i ++;
    }
    System.out.println ("Spaces in string: " + spaceCount);
}
----------------------------------------

 public static void main (String [] args) {
    int spaceCount = 0;
    for (int i = 0; i < args[0].length (); i++) {
        if (args[0].substring(i, i + 1).equals(" ")) {
            spaceCount ++;
        }
    }
    System.out.println ("Spaces in string: " + spaceCount);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
887
7
Gpt3D_Clone887_7.java 1 11
Gpt3D_Clone887_7.java 12 22
----------------------------------------

public static void main (String [] args) {
    String word = "a b c";
    int i = 0, spaceCount = 0;
    while (i < word.length ()) {
        if (word.charAt (i) == ' ') {
            spaceCount ++;
        }
        i ++;
    }
    System.out.println ("Spaces in string: " + spaceCount);
}
----------------------------------------

 public static void main (String [] args) {
    int spaceCount = 0;
    for (int i = 0; i < args[0].length (); i++) {
        if (args[0].charAt (i) == ' ') {
            spaceCount ++;
        }
    }
    System.out.println ("Spaces in string: " + spaceCount);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
887
8
Gpt3D_Clone887_8.java 1 11
Gpt3D_Clone887_8.java 12 21
----------------------------------------

public static void main (String [] args) {
    String word = "a b c";
    int i = 0, spaceCount = 0;
    while (i < word.length ()) {
        if (word.charAt (i) == ' ') {
            spaceCount ++;
        }
        i ++;
    }
    System.out.println ("Spaces in string: " + spaceCount);
}
----------------------------------------

 public static void main (String [] args) {
    int spaceCount = 0;
    for (char c : args[0].toCharArray()) {
        if (c == ' ')
            spaceCount++;
    }
    System.out.println ("Spaces in string: " + spaceCount);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
887
9
Gpt3D_Clone887_9.java 1 11
Gpt3D_Clone887_9.java 12 18
----------------------------------------

public static void main (String [] args) {
    String word = "a b c";
    int i = 0, spaceCount = 0;
    while (i < word.length ()) {
        if (word.charAt (i) == ' ') {
            spaceCount ++;
        }
        i ++;
    }
    System.out.println ("Spaces in string: " + spaceCount);
}
----------------------------------------

 public static void main (String [] args) {
    String word = "a b c";
    int spaceCount = word.length() - word.replace(" ", "").length();
    System.out.println ("Spaces in string: " + spaceCount);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
889
0
Gpt3D_Clone889_0.java 1 20
Gpt3D_Clone889_0.java 21 34
----------------------------------------

public static void main (String args []) {
    JSch jsch = new JSch ();
    Session session = null;
    try {
        session = jsch.getSession ("username", "127.0.0.1", 22);
        session.setConfig ("StrictHostKeyChecking", "no");
        session.setPassword ("password");
        session.connect ();
        Channel channel = session.openChannel ("sftp");
        channel.connect ();
        ChannelSftp sftpChannel = (ChannelSftp) channel;
        sftpChannel.get ("remotefile.txt", "localfile.txt");
        sftpChannel.exit ();
        session.disconnect ();
    } catch (JSchException e) {
        e.printStackTrace ();
    } catch (SftpException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

 public static void main (String args []) {JSch jsch = new JSch();
Session session = jsch.getSession("username", "127.0.0.1", 22);
session.setConfig("StrictHostKeyChecking", "no");
session.setPassword("password");
session.connect(30000);
Channel channel = session.openChannel("sftp");
channel.connect( 30000 );	
ChannelSftp sftpChannel = (ChannelSftp) channel;
sftpChannel.get("remotefile.txt", "localfile.txt");
sftpChannel.disconnect();
session.disconnect();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
889
1
Gpt3D_Clone889_1.java 1 20
Gpt3D_Clone889_1.java 21 34
----------------------------------------

public static void main (String args []) {
    JSch jsch = new JSch ();
    Session session = null;
    try {
        session = jsch.getSession ("username", "127.0.0.1", 22);
        session.setConfig ("StrictHostKeyChecking", "no");
        session.setPassword ("password");
        session.connect ();
        Channel channel = session.openChannel ("sftp");
        channel.connect ();
        ChannelSftp sftpChannel = (ChannelSftp) channel;
        sftpChannel.get ("remotefile.txt", "localfile.txt");
        sftpChannel.exit ();
        session.disconnect ();
    } catch (JSchException e) {
        e.printStackTrace ();
    } catch (SftpException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

 public static void main (String args []) {JSch jsch = new JSch();
Session session = jsch.getSession("username","127.0.0.1", 22);
session.setConfig("StrictHostKeyChecking", "no");
session.setPassword("password");
session.connect(25000);	
Channel channel =session.openChannel("sftp");
channel.connect(25000);
ChannelSftp sftpChannel = (ChannelSftp) channel;
sftpChannel.get("remotefile.txt", "localfile.txt");
sftpChannel.disconnect();
session.disconnect();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
889
2
Gpt3D_Clone889_2.java 1 20
Gpt3D_Clone889_2.java 21 34
----------------------------------------

public static void main (String args []) {
    JSch jsch = new JSch ();
    Session session = null;
    try {
        session = jsch.getSession ("username", "127.0.0.1", 22);
        session.setConfig ("StrictHostKeyChecking", "no");
        session.setPassword ("password");
        session.connect ();
        Channel channel = session.openChannel ("sftp");
        channel.connect ();
        ChannelSftp sftpChannel = (ChannelSftp) channel;
        sftpChannel.get ("remotefile.txt", "localfile.txt");
        sftpChannel.exit ();
        session.disconnect ();
    } catch (JSchException e) {
        e.printStackTrace ();
    } catch (SftpException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

 public static void main (String args []) {JSch jsch = new JSch();
Session session = jsch.getSession("username","127.0.0.1", 22);
session.setConfig("StrictHostKeyChecking", "no");
session.setPassword("password");
session.connect(20000);	
Channel channel =session.openChannel("sftp");
channel.connect(20000);
ChannelSftp sftpChannel = (ChannelSftp) channel;
sftpChannel.get("remotefile.txt", "localfile.txt");
sftpChannel.disconnect();
session.disconnect();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
889
3
Gpt3D_Clone889_3.java 1 20
Gpt3D_Clone889_3.java 21 34
----------------------------------------

public static void main (String args []) {
    JSch jsch = new JSch ();
    Session session = null;
    try {
        session = jsch.getSession ("username", "127.0.0.1", 22);
        session.setConfig ("StrictHostKeyChecking", "no");
        session.setPassword ("password");
        session.connect ();
        Channel channel = session.openChannel ("sftp");
        channel.connect ();
        ChannelSftp sftpChannel = (ChannelSftp) channel;
        sftpChannel.get ("remotefile.txt", "localfile.txt");
        sftpChannel.exit ();
        session.disconnect ();
    } catch (JSchException e) {
        e.printStackTrace ();
    } catch (SftpException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

 public static void main (String args []) {JSch jsch = new JSch();
Session session = jsch.getSession("username","127.0.0.1", 22);
session.setConfig("StrictHostKeyChecking", "no");
session.setPassword("password");
session.connect(45000);
Channel channel = session.openChannel("sftp");
channel.connect(45000);	
ChannelSftp sftpChannel = (ChannelSftp) channel;
sftpChannel.get("remotefile.txt", "localfile.txt");
sftpChannel.logout();
session.disconnect();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
889
8
Gpt3D_Clone889_8.java 1 20
Gpt3D_Clone889_8.java 21 34
----------------------------------------

public static void main (String args []) {
    JSch jsch = new JSch ();
    Session session = null;
    try {
        session = jsch.getSession ("username", "127.0.0.1", 22);
        session.setConfig ("StrictHostKeyChecking", "no");
        session.setPassword ("password");
        session.connect ();
        Channel channel = session.openChannel ("sftp");
        channel.connect ();
        ChannelSftp sftpChannel = (ChannelSftp) channel;
        sftpChannel.get ("remotefile.txt", "localfile.txt");
        sftpChannel.exit ();
        session.disconnect ();
    } catch (JSchException e) {
        e.printStackTrace ();
    } catch (SftpException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

 public static void main (String args []) {JSch jsch = new JSch();
Session session = jsch.getSession("username","127.0.0.1", 22);
session.setConfig("StrictHostKeyChecking", "no");
session.setPassword("password");
session.connect(30000);	
Channel channel =session.openChannel("sftp");
channel.connect(30000);
ChannelSftp sftpChannel = (ChannelSftp) channel;
sftpChannel.get("remotefile.txt", "localfile.txt");
sftpChannel.exit();
session.disconnect();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
889
9
Gpt3D_Clone889_9.java 1 20
Gpt3D_Clone889_9.java 21 34
----------------------------------------

public static void main (String args []) {
    JSch jsch = new JSch ();
    Session session = null;
    try {
        session = jsch.getSession ("username", "127.0.0.1", 22);
        session.setConfig ("StrictHostKeyChecking", "no");
        session.setPassword ("password");
        session.connect ();
        Channel channel = session.openChannel ("sftp");
        channel.connect ();
        ChannelSftp sftpChannel = (ChannelSftp) channel;
        sftpChannel.get ("remotefile.txt", "localfile.txt");
        sftpChannel.exit ();
        session.disconnect ();
    } catch (JSchException e) {
        e.printStackTrace ();
    } catch (SftpException e) {
        e.printStackTrace ();
    }
}
----------------------------------------

 public static void main (String args []) {JSch jsch = new JSch();
Session session = jsch.getSession("username","127.0.0.1", 22);
session.setConfig("StrictHostKeyChecking", "no");
session.setPassword("password");
session.connect(50000);	
Channel channel = session.openChannel("sftp");
channel.connect(50000);
ChannelSftp sftpChannel = (ChannelSftp) channel;
sftpChannel.get("remotefile.txt", "localfile.txt");
sftpChannel.exit();
session.disconnect();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
88
0
Gpt3D_Clone88_0.java 1 21
Gpt3D_Clone88_0.java 22 59
----------------------------------------

public void type (CharSequence chars, int ms) {
    ms = ms > 0 ? ms : 0;
    for (int i = 0, len = chars.length ();
    i < len; i ++) {
        char c = chars.charAt (i);
        AWTKeyStroke keyStroke = getKeyStroke (c);
        int keyCode = keyStroke.getKeyCode ();
        boolean shift = Character.isUpperCase (c) || keyStroke.getModifiers () == (SHIFT_DOWN_MASK + 1);
        if (shift) {
            robot.keyPress (KeyEvent.VK_SHIFT);
        }
        robot.keyPress (keyCode);
        robot.keyRelease (keyCode);
        if (shift) {
            robot.keyRelease (KeyEvent.VK_SHIFT);
        }
        if (ms > 0) {
            robot.delay (ms);
        }
    }
}
----------------------------------------

 public void type (CharSequence chars, int ms) {
    if (ms > 0) {
        for (int i = 0, len = chars.length ();
        i < len; i++) {
            char c = chars.charAt(i);
            AWTKeyStroke keyStroke = getKeyStroke (c);
            int keyCode = keyStroke.getKeyCode ();
            boolean shift = Character.isUpperCase (c) || keyStroke.getModifiers () == (SHIFT_DOWN_MASK + 1);
            robot.keyPress (keyCode);
            robot.delay (ms);
            robot.keyRelease (keyCode);
            if (shift) {
                robot.keyPress (KeyEvent.VK_SHIFT);
            }
            if (Character.isUpperCase (c) || keyStroke.getModifiers () == (SHIFT_DOWN_MASK + 1)) {
                robot.keyRelease(KeyEvent.VK_SHIFT);
            }
        }
    } else {
        for (int i = 0, len = chars.length ();
        i < len; i++) {
            char c = chars.charAt(i);
            AWTKeyStroke keyStroke = getKeyStroke (c);
            int keyCode = keyStroke.getKeyCode ();
            boolean shift = Character.isUpperCase (c) || keyStroke.getModifiers () == (SHIFT_DOWN_MASK + 1);
            robot.keyPress (keyCode);
            robot.keyRelease (keyCode);
            if (shift) {
                robot.keyPress (KeyEvent.VK_SHIFT);
            }
            if (Character.isUpperCase (c) || keyStroke.getModifiers () == (SHIFT_DOWN_MASK + 1)) {
                robot.keyRelease(KeyEvent.VK_SHIFT);
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
898
0
Gpt3D_Clone898_0.java 1 15
Gpt3D_Clone898_0.java 16 35
----------------------------------------

public static double sqrt (int n) {
    double low = 0;
    double high = n;
    double mid = (high - low) / 2;
    while (Math.abs ((mid * mid) - n) > 0.000000000001) {
        if ((mid * mid) > n) {
            high = mid;
            mid = (high - low) / 2;
        } else {
            low = mid;
            mid = mid + ((high - low) / 2);
        }
    }
    return mid;
}
----------------------------------------

 public static double sqrt(int n) {
    double lowerBound = 0;
    double upperBound = n;
    double midPoint = (lowerBound + upperBound) / 2;
    double absDiff;
    double epsilon = 0.000000000001;
    do {
        if (midPoint * midPoint > n) {
            upperBound = midPoint;
        } else {
            lowerBound = midPoint;
        }
        double newMidPoint = (lowerBound + upperBound) / 2;
        absDiff = Math.abs(midPoint - newMidPoint);
        midPoint = newMidPoint;
    } while (absDiff > epsilon);
    return midPoint;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
898
1
Gpt3D_Clone898_1.java 1 15
Gpt3D_Clone898_1.java 16 34
----------------------------------------

public static double sqrt (int n) {
    double low = 0;
    double high = n;
    double mid = (high - low) / 2;
    while (Math.abs ((mid * mid) - n) > 0.000000000001) {
        if ((mid * mid) > n) {
            high = mid;
            mid = (high - low) / 2;
        } else {
            low = mid;
            mid = mid + ((high - low) / 2);
        }
    }
    return mid;
}
----------------------------------------

 public static double sqrt(int n) { 
    double lowerBound = 0; 
    double upperBound = n; 
    double midPoint = (upperBound + lowerBound)/2; 
    double diff = Double.MAX_VALUE; 
    double epsilon = 0.000000000001; 
    while (diff > epsilon) { 
        if (midPoint * midPoint > n) 
            upperBound = midPoint; 
        else 
            lowerBound = midPoint; 
        double newMidPoint = (upperBound + lowerBound) / 2; 
        diff = Math.abs (midPoint - newMidPoint); 
        midPoint = newMidPoint; 
    } 
    return midPoint; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
898
4
Gpt3D_Clone898_4.java 1 15
Gpt3D_Clone898_4.java 16 33
----------------------------------------

public static double sqrt (int n) {
    double low = 0;
    double high = n;
    double mid = (high - low) / 2;
    while (Math.abs ((mid * mid) - n) > 0.000000000001) {
        if ((mid * mid) > n) {
            high = mid;
            mid = (high - low) / 2;
        } else {
            low = mid;
            mid = mid + ((high - low) / 2);
        }
    }
    return mid;
}
----------------------------------------

 public static double sqrt(int n) { 
    double start = 0.00; 
    double end = n; 
    double mid = (start + end) / 2; 
    double epsilon = 0.000000000001; 
  
    while (Math.abs(mid * mid - n) > epsilon) { 
        if (mid * mid > n) 
            end = mid; 
        else
            start = mid; 
  
        mid = (start + end) / 2; 
    } 
    return mid; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
898
5
Gpt3D_Clone898_5.java 1 15
Gpt3D_Clone898_5.java 16 30
----------------------------------------

public static double sqrt (int n) {
    double low = 0;
    double high = n;
    double mid = (high - low) / 2;
    while (Math.abs ((mid * mid) - n) > 0.000000000001) {
        if ((mid * mid) > n) {
            high = mid;
            mid = (high - low) / 2;
        } else {
            low = mid;
            mid = mid + ((high - low) / 2);
        }
    }
    return mid;
}
----------------------------------------

 public static double sqrt(int n) { 
    double x0 = 0; 
    double x1 = n/2; 
    double epsilon = 0.00000000001; 
  
    while (Math.abs(x0 - x1) > epsilon) 
    { 
        x1 = (x0 + x1) / 2; 
        x0 = n / x1; 
    } 
  
    return x1; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
898
6
Gpt3D_Clone898_6.java 1 15
Gpt3D_Clone898_6.java 16 29
----------------------------------------

public static double sqrt (int n) {
    double low = 0;
    double high = n;
    double mid = (high - low) / 2;
    while (Math.abs ((mid * mid) - n) > 0.000000000001) {
        if ((mid * mid) > n) {
            high = mid;
            mid = (high - low) / 2;
        } else {
            low = mid;
            mid = mid + ((high - low) / 2);
        }
    }
    return mid;
}
----------------------------------------

 public static double sqrt(int n) 
{ 
    double x = n; 
    double y = 1; 
    double epsilon = 0.000001;   
    while(Math.abs(x - y) > epsilon) 
    { 
        x = (x + y)/2; 
        y = n/x; 
    } 
    return x; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
898
7
Gpt3D_Clone898_7.java 1 15
Gpt3D_Clone898_7.java 16 28
----------------------------------------

public static double sqrt (int n) {
    double low = 0;
    double high = n;
    double mid = (high - low) / 2;
    while (Math.abs ((mid * mid) - n) > 0.000000000001) {
        if ((mid * mid) > n) {
            high = mid;
            mid = (high - low) / 2;
        } else {
            low = mid;
            mid = mid + ((high - low) / 2);
        }
    }
    return mid;
}
----------------------------------------

 public static double sqrt(int n) 
{ 
    double x0 = 1; 
    double x1 = (x0 + n/x0)/2; 
    while(Math.abs(x1-x0) > 0.000000000001) 
    { 
        x0 = x1; 
        x1 = (x0 + n/x0)/2; 
    } 
    return x1; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
898
8
Gpt3D_Clone898_8.java 1 15
Gpt3D_Clone898_8.java 16 29
----------------------------------------

public static double sqrt (int n) {
    double low = 0;
    double high = n;
    double mid = (high - low) / 2;
    while (Math.abs ((mid * mid) - n) > 0.000000000001) {
        if ((mid * mid) > n) {
            high = mid;
            mid = (high - low) / 2;
        } else {
            low = mid;
            mid = mid + ((high - low) / 2);
        }
    }
    return mid;
}
----------------------------------------

 public static double sqrt(int n) 
{ 
    double x0 = 1; 
  
    double epsilon = 0.00000000001; 
    while ((x0 * x0) - n > epsilon) 
    { 
        x0 = (x0 + n / x0) / 2; 
    } 
  
    return x0; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
898
9
Gpt3D_Clone898_9.java 1 15
Gpt3D_Clone898_9.java 16 24
----------------------------------------

public static double sqrt (int n) {
    double low = 0;
    double high = n;
    double mid = (high - low) / 2;
    while (Math.abs ((mid * mid) - n) > 0.000000000001) {
        if ((mid * mid) > n) {
            high = mid;
            mid = (high - low) / 2;
        } else {
            low = mid;
            mid = mid + ((high - low) / 2);
        }
    }
    return mid;
}
----------------------------------------

 public static double sqrt(int n) { 
    double result = n; 
    double x = n; 
    double epsilon = 0.000001; 
    while(Math.abs (x - result/x) > epsilon*result) result = (x + result/x)/2; 
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
902
0
Gpt3D_Clone902_0.java 1 11
Gpt3D_Clone902_0.java 12 32
----------------------------------------

        public void actionPerformed (ActionEvent ae) {
            if (count < charsTiming.size ()) {
                highlightNextWord ();
                ((Timer) ae.getSource ()).setInitialDelay (charsTiming.get (count));
                ((Timer) ae.getSource ()).restart ();
            } else {
                reset ();
                ((Timer) ae.getSource ()).stop ();
            }
            count ++;
}
----------------------------------------

 public void actionPerformed (ActionEvent ae) {
            if (count < charsTiming.size ()) {
                highlightNextWord ();
                Timer t = new Timer(charsTiming.get (count), new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        highlightNextWord();
                        t.stop();
                        t.restart();
                    }
                });
                t.start();
            } else {
                reset ();
                t.stop ();
            }
            count ++;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
902
1
Gpt3D_Clone902_1.java 1 11
Gpt3D_Clone902_1.java 12 32
----------------------------------------

        public void actionPerformed (ActionEvent ae) {
            if (count < charsTiming.size ()) {
                highlightNextWord ();
                ((Timer) ae.getSource ()).setInitialDelay (charsTiming.get (count));
                ((Timer) ae.getSource ()).restart ();
            } else {
                reset ();
                ((Timer) ae.getSource ()).stop ();
            }
            count ++;
}
----------------------------------------

 public void actionPerformed (ActionEvent ae) {
            if (count < charsTiming.size ()) {
                highlightNextWord ();
                TimerTask tt = new TimerTask(){
                    @Override
                    public void run(){
                        highlightNextWord();
                        tt.cancel();
                    }
                };
                Timer t = new Timer();
                t.schedule(tt, charsTiming);
            } else {
                reset ();
                t.cancel ();
            }
            count++;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
902
2
Gpt3D_Clone902_2.java 1 11
Gpt3D_Clone902_2.java 12 31
----------------------------------------

        public void actionPerformed (ActionEvent ae) {
            if (count < charsTiming.size ()) {
                highlightNextWord ();
                ((Timer) ae.getSource ()).setInitialDelay (charsTiming.get (count));
                ((Timer) ae.getSource ()).restart ();
            } else {
                reset ();
                ((Timer) ae.getSource ()).stop ();
            }
            count ++;
}
----------------------------------------

 public void actionPerformed (ActionEvent ae) {
            if (count < charsTiming.size ()) {
                highlightNextWord ();
                TimerTask tt = new TimerTask(){
                    @Override
                    public void run(){
                        highlightNextWord();
                    }
                };
                Timer t = new Timer();
                t.schedule(tt, charsTiming);
            } else {
                reset ();
                t.cancel ();
            }
            count++;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
902
3
Gpt3D_Clone902_3.java 1 11
Gpt3D_Clone902_3.java 12 31
----------------------------------------

        public void actionPerformed (ActionEvent ae) {
            if (count < charsTiming.size ()) {
                highlightNextWord ();
                ((Timer) ae.getSource ()).setInitialDelay (charsTiming.get (count));
                ((Timer) ae.getSource ()).restart ();
            } else {
                reset ();
                ((Timer) ae.getSource ()).stop ();
            }
            count ++;
}
----------------------------------------

 public void actionPerformed (ActionEvent ae) {
            if (count < charsTiming.size ()) {
                highlightNextWord ();
                Timer t = new Timer(charsTiming.get (count), new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        highlightNextWord();
                    }
                });
                t.start();
            } else {
                reset ();
                t.stop ();
            }
            count ++;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
902
4
Gpt3D_Clone902_4.java 1 11
Gpt3D_Clone902_4.java 12 29
----------------------------------------

        public void actionPerformed (ActionEvent ae) {
            if (count < charsTiming.size ()) {
                highlightNextWord ();
                ((Timer) ae.getSource ()).setInitialDelay (charsTiming.get (count));
                ((Timer) ae.getSource ()).restart ();
            } else {
                reset ();
                ((Timer) ae.getSource ()).stop ();
            }
            count ++;
}
----------------------------------------

 public void actionPerformed (ActionEvent ae) {
            if (count < charsTiming.size ()) {
                highlightNextWord ();
                ScheduledExecutorService ses = Executors.newScheduledThreadPool(1);
                ses.schedule(new Runnable(){
                    @Override
                    public void run(){
                        highlightNextWord();
                    }
                }, charsTiming);
            } else {
                reset ();
                ses.shutdown ();
            }
            count ++;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
902
5
Gpt3D_Clone902_5.java 1 11
Gpt3D_Clone902_5.java 12 29
----------------------------------------

        public void actionPerformed (ActionEvent ae) {
            if (count < charsTiming.size ()) {
                highlightNextWord ();
                ((Timer) ae.getSource ()).setInitialDelay (charsTiming.get (count));
                ((Timer) ae.getSource ()).restart ();
            } else {
                reset ();
                ((Timer) ae.getSource ()).stop ();
            }
            count ++;
}
----------------------------------------

 public void actionPerformed (ActionEvent ae) {
            if (count < charsTiming.size ()) {
                highlightNextWord ();
                ScheduledExecutorService ses = Executors.newScheduledThreadPool(1);
                ses.scheduleAtFixedRate(new Runnable(){
                    @Override
                    public void run(){
                        highlightNextWord();
                    }
                }, charsTiming);
            } else {
                reset ();
                ses.shutdown ();
            }
            count ++;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
905
3
Gpt3D_Clone905_3.java 1 14
Gpt3D_Clone905_3.java 15 29
----------------------------------------

public static void main (String [] args) {
    ArrayList < String > keys = new ArrayList < > (Arrays.asList ("1", "1", "1", "2", "2", "3"));
    ArrayList < String > values = new ArrayList < > (Arrays.asList ("2016-06-22 07:18:45", "2016-06-22 08:18:45", "2016-06-22 09:18:45", "2016-06-22 03:18:45", "2016-06-22 04:18:45", "2016-06-22 01:18:45"));
    HashMap < String, String > map = new HashMap < String, String > ();
    for (int i = 0;
    keys.size () == values.size () && i < keys.size (); i ++) {
        String key = keys.get (i);
        String value = values.get (i);
        if (! map.containsKey (key) || dateAsNo (value) > dateAsNo (map.get (key))) {
            map.put (key, value);
        }
    }
    System.out.println (map);
}
----------------------------------------

  public static void main (String [] args) {
        List < String > keys = Arrays.asList (args).subList (0, args.length / 2);
        List < String > values = Arrays.asList (args).subList (args.length / 2, args.length);
        Set < Entry < String, String >> entries = new HashSet <> ();
        for (int i = 0; i < keys.size () && i < values.size (); i ++) {
            String key = keys.get (i);
            String value = values.get (i);
            if (! entries.containsKey (key) || dateAsNo (value) > dateAsNo (entries.get (key))) {
                entries.add (new AbstractMap.SimpleEntry (key, value));
            }
        }
        System.out.println (entries);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
905
5
Gpt3D_Clone905_5.java 1 14
Gpt3D_Clone905_5.java 15 27
----------------------------------------

public static void main (String [] args) {
    ArrayList < String > keys = new ArrayList < > (Arrays.asList ("1", "1", "1", "2", "2", "3"));
    ArrayList < String > values = new ArrayList < > (Arrays.asList ("2016-06-22 07:18:45", "2016-06-22 08:18:45", "2016-06-22 09:18:45", "2016-06-22 03:18:45", "2016-06-22 04:18:45", "2016-06-22 01:18:45"));
    HashMap < String, String > map = new HashMap < String, String > ();
    for (int i = 0;
    keys.size () == values.size () && i < keys.size (); i ++) {
        String key = keys.get (i);
        String value = values.get (i);
        if (! map.containsKey (key) || dateAsNo (value) > dateAsNo (map.get (key))) {
            map.put (key, value);
        }
    }
    System.out.println (map);
}
----------------------------------------

 public static void main (String [] args) {
        Map < String, String > map = new ConcurrentHashMap <> ();
        for (int i = 0; i < args.length; i += 2) {
            String key = args [i];
            String value = args [i + 1];
            if (! map.containsKey (key) || dateAsNo (value) > dateAsNo (map.get (key))) {
                map.put (key, value);
            }
        }
        System.out.println (map);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
905
6
Gpt3D_Clone905_6.java 1 14
Gpt3D_Clone905_6.java 15 27
----------------------------------------

public static void main (String [] args) {
    ArrayList < String > keys = new ArrayList < > (Arrays.asList ("1", "1", "1", "2", "2", "3"));
    ArrayList < String > values = new ArrayList < > (Arrays.asList ("2016-06-22 07:18:45", "2016-06-22 08:18:45", "2016-06-22 09:18:45", "2016-06-22 03:18:45", "2016-06-22 04:18:45", "2016-06-22 01:18:45"));
    HashMap < String, String > map = new HashMap < String, String > ();
    for (int i = 0;
    keys.size () == values.size () && i < keys.size (); i ++) {
        String key = keys.get (i);
        String value = values.get (i);
        if (! map.containsKey (key) || dateAsNo (value) > dateAsNo (map.get (key))) {
            map.put (key, value);
        }
    }
    System.out.println (map);
}
----------------------------------------

  public static void main (String [] args) {
        Map < String, String > map = new Hashtable <> ();
        for (int i = 0; i < args.length; i += 2) {
            String key = args [i];
            String value = args [i + 1];
            if (! map.containsKey (key) || dateAsNo (value) > dateAsNo (map.get (key))) {
                map.put (key, value);
            }   
        }
        System.out.println (map);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
905
7
Gpt3D_Clone905_7.java 1 14
Gpt3D_Clone905_7.java 15 27
----------------------------------------

public static void main (String [] args) {
    ArrayList < String > keys = new ArrayList < > (Arrays.asList ("1", "1", "1", "2", "2", "3"));
    ArrayList < String > values = new ArrayList < > (Arrays.asList ("2016-06-22 07:18:45", "2016-06-22 08:18:45", "2016-06-22 09:18:45", "2016-06-22 03:18:45", "2016-06-22 04:18:45", "2016-06-22 01:18:45"));
    HashMap < String, String > map = new HashMap < String, String > ();
    for (int i = 0;
    keys.size () == values.size () && i < keys.size (); i ++) {
        String key = keys.get (i);
        String value = values.get (i);
        if (! map.containsKey (key) || dateAsNo (value) > dateAsNo (map.get (key))) {
            map.put (key, value);
        }
    }
    System.out.println (map);
}
----------------------------------------

  public static void main (String [] args) {
        Map < String, String > map = new TreeMap <> ();
        for (int i = 0; i < args.length; i += 2) {
            String key = args [i];
            String value = args [i + 1];
            if (! map.containsKey (key) || dateAsNo (value) > dateAsNo (map.get (key))) {
                map.put (key, value);
            }
        }
        System.out.println (map);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
905
8
Gpt3D_Clone905_8.java 1 14
Gpt3D_Clone905_8.java 15 27
----------------------------------------

public static void main (String [] args) {
    ArrayList < String > keys = new ArrayList < > (Arrays.asList ("1", "1", "1", "2", "2", "3"));
    ArrayList < String > values = new ArrayList < > (Arrays.asList ("2016-06-22 07:18:45", "2016-06-22 08:18:45", "2016-06-22 09:18:45", "2016-06-22 03:18:45", "2016-06-22 04:18:45", "2016-06-22 01:18:45"));
    HashMap < String, String > map = new HashMap < String, String > ();
    for (int i = 0;
    keys.size () == values.size () && i < keys.size (); i ++) {
        String key = keys.get (i);
        String value = values.get (i);
        if (! map.containsKey (key) || dateAsNo (value) > dateAsNo (map.get (key))) {
            map.put (key, value);
        }
    }
    System.out.println (map);
}
----------------------------------------

  public static void main (String [] args) {
        LinkedHashMap < String, String > map = new LinkedHashMap <> ();
        for (int i = 0; i < args.length; i += 2) {
            String key = args [i];
            String value = args [i + 1];
            if (! map.containsKey (key) || dateAsNo (value) > dateAsNo (map.get (key))) {
                map.put (key, value);
            }
        }
        System.out.println (map);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
905
9
Gpt3D_Clone905_9.java 1 14
Gpt3D_Clone905_9.java 15 28
----------------------------------------

public static void main (String [] args) {
    ArrayList < String > keys = new ArrayList < > (Arrays.asList ("1", "1", "1", "2", "2", "3"));
    ArrayList < String > values = new ArrayList < > (Arrays.asList ("2016-06-22 07:18:45", "2016-06-22 08:18:45", "2016-06-22 09:18:45", "2016-06-22 03:18:45", "2016-06-22 04:18:45", "2016-06-22 01:18:45"));
    HashMap < String, String > map = new HashMap < String, String > ();
    for (int i = 0;
    keys.size () == values.size () && i < keys.size (); i ++) {
        String key = keys.get (i);
        String value = values.get (i);
        if (! map.containsKey (key) || dateAsNo (value) > dateAsNo (map.get (key))) {
            map.put (key, value);
        }
    }
    System.out.println (map);
}
----------------------------------------

  public static void main (String [] args) {
        Map < String, String > map = new HashMap <> ();
        for (int i = 0; i < args.length; i += 2) {
            String key = args [i];
            String value = args [i + 1];
            if (! map.containsKey (key) || dateAsNo (value) > dateAsNo (map.get (key))) {
                map.put (key, value);
            }
        }
        System.out.println (map);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
906
0
Gpt3D_Clone906_0.java 1 8
Gpt3D_Clone906_0.java 9 20
----------------------------------------

public static void removeDuplicates (char [] str) {
    int map = 0;
    for (int i = 0;
    i < str.length; i ++) {
        if ((map & (1 << (str [i] - 'a'))) > 0) str [i] = 0;
        else map |= 1 << (str [i] - 'a');
    }
}
----------------------------------------

 public static void removeDuplicates(char[] str) { 
    int map = 0;
    for (int i = 0; i < str.length; i++) {
        int bit = (str[i] - 'a');
        if ((map & (1 << bit)) > 0) 
            str[i] = '\0';
        else 
            map |= 1 << bit;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
906
1
Gpt3D_Clone906_1.java 1 8
Gpt3D_Clone906_1.java 9 20
----------------------------------------

public static void removeDuplicates (char [] str) {
    int map = 0;
    for (int i = 0;
    i < str.length; i ++) {
        if ((map & (1 << (str [i] - 'a'))) > 0) str [i] = 0;
        else map |= 1 << (str [i] - 'a');
    }
}
----------------------------------------

 public static void removeDuplicates(char[] str) { 
    int map = 0;
    for (int i = 0; i < str.length; i++) {
        int bit = (str[i] - 'a');
        if ((map & (1 << bit)) > 0)
            str[i] = -1;
        else
            map |= (1 << bit);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
906
2
Gpt3D_Clone906_2.java 1 8
Gpt3D_Clone906_2.java 9 20
----------------------------------------

public static void removeDuplicates (char [] str) {
    int map = 0;
    for (int i = 0;
    i < str.length; i ++) {
        if ((map & (1 << (str [i] - 'a'))) > 0) str [i] = 0;
        else map |= 1 << (str [i] - 'a');
    }
}
----------------------------------------

 public static void removeDuplicates(char[] str) { 
    int map = 0;
    for (int i = 0; i < str.length; i++) {
        int bit = (str[i] - 'a');
        if ((map & (1 << bit)) > 0)
            str[i] = 0;
        else
            map = (map | (1 << bit));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
906
3
Gpt3D_Clone906_3.java 1 8
Gpt3D_Clone906_3.java 9 20
----------------------------------------

public static void removeDuplicates (char [] str) {
    int map = 0;
    for (int i = 0;
    i < str.length; i ++) {
        if ((map & (1 << (str [i] - 'a'))) > 0) str [i] = 0;
        else map |= 1 << (str [i] - 'a');
    }
}
----------------------------------------

 public static void removeDuplicates(char[] str) { 
    int map = 0;
    for (int i = 0; i < str.length; i++) {
        int bit = (str[i] - 'a');
        if ((map & (1 << bit)) > 0)
            str[i] = '\\0';
        else
            map |= (map | 1 << bit);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
906
4
Gpt3D_Clone906_4.java 1 8
Gpt3D_Clone906_4.java 9 20
----------------------------------------

public static void removeDuplicates (char [] str) {
    int map = 0;
    for (int i = 0;
    i < str.length; i ++) {
        if ((map & (1 << (str [i] - 'a'))) > 0) str [i] = 0;
        else map |= 1 << (str [i] - 'a');
    }
}
----------------------------------------

 public static void removeDuplicates(char[] str) { 
    int map = 0;
    for (int i = 0; i < str.length; i++) {
        int bit = (str[i] - 'a');
        if ((map & (1 << bit)) > 0)
            str[i] = '*';
        else
            map = (map | 1 << bit);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
906
5
Gpt3D_Clone906_5.java 1 8
Gpt3D_Clone906_5.java 9 20
----------------------------------------

public static void removeDuplicates (char [] str) {
    int map = 0;
    for (int i = 0;
    i < str.length; i ++) {
        if ((map & (1 << (str [i] - 'a'))) > 0) str [i] = 0;
        else map |= 1 << (str [i] - 'a');
    }
}
----------------------------------------

 public static void removeDuplicates(char[] str) { 
    int map = 0;
    for (int i = 0; i < str.length; i++) {
        int bit = (str[i] - 'a');
        if ((map & (1 << bit)) > 0)
            str[i] = 0;
        else
            map |= (1 << bit);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
906
6
Gpt3D_Clone906_6.java 1 8
Gpt3D_Clone906_6.java 9 20
----------------------------------------

public static void removeDuplicates (char [] str) {
    int map = 0;
    for (int i = 0;
    i < str.length; i ++) {
        if ((map & (1 << (str [i] - 'a'))) > 0) str [i] = 0;
        else map |= 1 << (str [i] - 'a');
    }
}
----------------------------------------

 public static void removeDuplicates(char[] str) { 
    int map = 0;
    for (int i = 0; i < str.length; i++) {
        int bit = (str[i] - 'a');
        if ((map & (1 << bit)) > 0)
            str[i] = '\0';
        else
            map = (map | (1 << bit));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
906
7
Gpt3D_Clone906_7.java 1 8
Gpt3D_Clone906_7.java 9 20
----------------------------------------

public static void removeDuplicates (char [] str) {
    int map = 0;
    for (int i = 0;
    i < str.length; i ++) {
        if ((map & (1 << (str [i] - 'a'))) > 0) str [i] = 0;
        else map |= 1 << (str [i] - 'a');
    }
}
----------------------------------------

 public static void removeDuplicates(char[] str) { 
    int map = 0;
    for (int i = 0; i < str.length; i++) {
        int bit = (str[i] - 'a');
        if ((map & (1 << bit)) > 0)
            str[i] = '\u0000';
        else
            map = (map | (1 << bit));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
906
8
Gpt3D_Clone906_8.java 1 8
Gpt3D_Clone906_8.java 9 20
----------------------------------------

public static void removeDuplicates (char [] str) {
    int map = 0;
    for (int i = 0;
    i < str.length; i ++) {
        if ((map & (1 << (str [i] - 'a'))) > 0) str [i] = 0;
        else map |= 1 << (str [i] - 'a');
    }
}
----------------------------------------

 public static void removeDuplicates(char[] str) { 
    int map = 0;
    for (int i = 0; i < str.length; i++) {
        int bit = (str[i] - 'a');
        if ((map & (1 << bit)) > 0)
            str[i] = ' ';
        else
            map |= (1 << bit);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
906
9
Gpt3D_Clone906_9.java 1 8
Gpt3D_Clone906_9.java 9 20
----------------------------------------

public static void removeDuplicates (char [] str) {
    int map = 0;
    for (int i = 0;
    i < str.length; i ++) {
        if ((map & (1 << (str [i] - 'a'))) > 0) str [i] = 0;
        else map |= 1 << (str [i] - 'a');
    }
}
----------------------------------------

 public static void removeDuplicates(char[] str) { 
    int map = 0;
    for (int i = 0; i < str.length; i++) {
        int bit = (str[i] - 'a');
        if ((map & (1 << bit)) > 0)
            str[i] = '.';
        else
            map |= (1 << bit);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
907
0
Gpt3D_Clone907_0.java 1 11
Gpt3D_Clone907_0.java 12 24
----------------------------------------

static String removeDuplicates (String s) {
    StringBuilder noDupes = new StringBuilder ();
    for (int i = 0;
    i < s.length (); i ++) {
        String si = s.substring (i, i + 1);
        if (noDupes.indexOf (si) == - 1) {
            noDupes.append (si);
        }
    }
    return noDupes.toString ();
}
----------------------------------------

 static String removeDuplicates (String s) {
    StringBuilder noDupes = new StringBuilder(s.length());
    boolean[] seen = new boolean[256];
    for (int i = 0; i < s.length(); i++) {
        char ch = s.charAt(i);
        if (seen[ch]) continue;
        noDupes.append(ch);
        seen[ch] = true;
    }
    return noDupes.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
907
2
Gpt3D_Clone907_2.java 1 11
Gpt3D_Clone907_2.java 12 24
----------------------------------------

static String removeDuplicates (String s) {
    StringBuilder noDupes = new StringBuilder ();
    for (int i = 0;
    i < s.length (); i ++) {
        String si = s.substring (i, i + 1);
        if (noDupes.indexOf (si) == - 1) {
            noDupes.append (si);
        }
    }
    return noDupes.toString ();
}
----------------------------------------

 static String removeDuplicates (String s) {
    Set<Character> noDupes = new HashSet<>();
    StringBuilder sb = new StringBuilder(s.length());
    for (int i = 0; i < s.length (); i ++) {
        char c = s.charAt(i);
        if (noDupes.add(c)) {
            sb.append(c);
        }
    }
    return sb.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
907
3
Gpt3D_Clone907_3.java 1 11
Gpt3D_Clone907_3.java 12 24
----------------------------------------

static String removeDuplicates (String s) {
    StringBuilder noDupes = new StringBuilder ();
    for (int i = 0;
    i < s.length (); i ++) {
        String si = s.substring (i, i + 1);
        if (noDupes.indexOf (si) == - 1) {
            noDupes.append (si);
        }
    }
    return noDupes.toString ();
}
----------------------------------------

 static String removeDuplicates (String s) {
    StringBuilder sb = new StringBuilder();
    Set<Character> noDupes = new HashSet<>();
    for(char c : s.toCharArray()) {
        if(!noDupes.contains(c)) {
            noDupes.add(c);
            sb.append(c);
        }
    }
    return sb.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
907
4
Gpt3D_Clone907_4.java 1 11
Gpt3D_Clone907_4.java 12 23
----------------------------------------

static String removeDuplicates (String s) {
    StringBuilder noDupes = new StringBuilder ();
    for (int i = 0;
    i < s.length (); i ++) {
        String si = s.substring (i, i + 1);
        if (noDupes.indexOf (si) == - 1) {
            noDupes.append (si);
        }
    }
    return noDupes.toString ();
}
----------------------------------------

 static String removeDuplicates (String s) {
    List<Character> noDupes = new ArrayList<>();
    for (int i = 0; i < s.length (); i ++) {
        char c = s.charAt(i);
        if (!noDupes.contains(c)) {
            noDupes.add(c);
        } 
    }
    return noDupes.stream().map(String::valueOf).collect(Collectors.joining());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
907
5
Gpt3D_Clone907_5.java 1 11
Gpt3D_Clone907_5.java 12 21
----------------------------------------

static String removeDuplicates (String s) {
    StringBuilder noDupes = new StringBuilder ();
    for (int i = 0;
    i < s.length (); i ++) {
        String si = s.substring (i, i + 1);
        if (noDupes.indexOf (si) == - 1) {
            noDupes.append (si);
        }
    }
    return noDupes.toString ();
}
----------------------------------------

 static String removeDuplicates (String s) {
    Set<Character> noDupes = new TreeSet<>();
    for (int i = 0; i < s.length (); i ++) {
        char c = s.charAt(i);
        noDupes.add(c);
    }
    return new String(noDupes.toString());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
907
6
Gpt3D_Clone907_6.java 1 11
Gpt3D_Clone907_6.java 12 21
----------------------------------------

static String removeDuplicates (String s) {
    StringBuilder noDupes = new StringBuilder ();
    for (int i = 0;
    i < s.length (); i ++) {
        String si = s.substring (i, i + 1);
        if (noDupes.indexOf (si) == - 1) {
            noDupes.append (si);
        }
    }
    return noDupes.toString ();
}
----------------------------------------

  static String removeDuplicates (String s) {
    Set<Character> noDupes = new LinkedHashSet<>();
    for (int i = 0; i < s.length (); i ++) {
        char c = s.charAt(i);
        noDupes.add(c);
    }
    return new String(noDupes.toString());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
907
7
Gpt3D_Clone907_7.java 1 11
Gpt3D_Clone907_7.java 12 20
----------------------------------------

static String removeDuplicates (String s) {
    StringBuilder noDupes = new StringBuilder ();
    for (int i = 0;
    i < s.length (); i ++) {
        String si = s.substring (i, i + 1);
        if (noDupes.indexOf (si) == - 1) {
            noDupes.append (si);
        }
    }
    return noDupes.toString ();
}
----------------------------------------

 static String removeDuplicates (String s) {
    Set<String> noDupes = new HashSet<>();
    for (int i = 0; i < s.length (); i ++) {
        noDupes.add(String.valueOf(s.charAt(i)));
    }
    return new String(noDupes.toString());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
907
8
Gpt3D_Clone907_8.java 1 11
Gpt3D_Clone907_8.java 12 22
----------------------------------------

static String removeDuplicates (String s) {
    StringBuilder noDupes = new StringBuilder ();
    for (int i = 0;
    i < s.length (); i ++) {
        String si = s.substring (i, i + 1);
        if (noDupes.indexOf (si) == - 1) {
            noDupes.append (si);
        }
    }
    return noDupes.toString ();
}
----------------------------------------

 static String removeDuplicates (String s) {
    Set<Character> noDupes = new LinkedHashSet<>();
    for (int i = 0; i < s.length (); i ++) {
        noDupes.add(s.charAt(i));
    }
    return noDupes.stream()
        .map(String::valueOf)
        .collect(Collectors.joining());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
908
0
Gpt3D_Clone908_0.java 1 8
Gpt3D_Clone908_0.java 9 22
----------------------------------------

public static void removeDuplicates (char [] str) {
    int map = 0;
    for (int i = 0;
    i < str.length; i ++) {
        if ((map & (1 << (str [i] - 'a'))) > 0) str [i] = 0;
        else map |= 1 << (str [i] - 'a');
    }
}
----------------------------------------

  public static void removeDuplicates (char [] str) {
    int[] checkedChars = new int[26];
    for (int i = 0;
    i < str.length; i ++) {
        int index = (int)(str[i] - 'a');
        if (checkedChars[index] == 0) { 
            checkedChars[index] = 1; 
        } else {
            str[i] = 0; 
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
908
1
Gpt3D_Clone908_1.java 1 8
Gpt3D_Clone908_1.java 9 21
----------------------------------------

public static void removeDuplicates (char [] str) {
    int map = 0;
    for (int i = 0;
    i < str.length; i ++) {
        if ((map & (1 << (str [i] - 'a'))) > 0) str [i] = 0;
        else map |= 1 << (str [i] - 'a');
    }
}
----------------------------------------

public static void removeDuplicates (char [] str) {
    java.util.List<Character> charactersList = new ArrayList<>();
    for (int i = 0;
    i < str.length; i++) {
        if (!charactersList.contains(str[i])) {
            charactersList.add(str[i]); 
        } else {
            str[i] = 0; 
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
908
2
Gpt3D_Clone908_2.java 1 8
Gpt3D_Clone908_2.java 9 19
----------------------------------------

public static void removeDuplicates (char [] str) {
    int map = 0;
    for (int i = 0;
    i < str.length; i ++) {
        if ((map & (1 << (str [i] - 'a'))) > 0) str [i] = 0;
        else map |= 1 << (str [i] - 'a');
    }
}
----------------------------------------

 public static void removeDuplicates (char [] str) {
    int map = 0;
    for (int i = 0;
    i < str.length; i++) {
        int index = (int)(str[i] - 'a');
        if ((map & (1<<index)) == 0) map |= 1 << index;
        else str[i] = '\u0000'; 
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
908
3
Gpt3D_Clone908_3.java 1 8
Gpt3D_Clone908_3.java 9 19
----------------------------------------

public static void removeDuplicates (char [] str) {
    int map = 0;
    for (int i = 0;
    i < str.length; i ++) {
        if ((map & (1 << (str [i] - 'a'))) > 0) str [i] = 0;
        else map |= 1 << (str [i] - 'a');
    }
}
----------------------------------------

 public static void removeDuplicates (char [] str) {
    int map = 0;
    for (int i = 0;
    i < str.length; i ++) {
        int index = (int)(str[i] - 'a');
        if ((map & (1 << index)) > 0) str[i] = '\u0000';
        else map |= (1 << index);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
908
4
Gpt3D_Clone908_4.java 1 8
Gpt3D_Clone908_4.java 9 19
----------------------------------------

public static void removeDuplicates (char [] str) {
    int map = 0;
    for (int i = 0;
    i < str.length; i ++) {
        if ((map & (1 << (str [i] - 'a'))) > 0) str [i] = 0;
        else map |= 1 << (str [i] - 'a');
    }
}
----------------------------------------

 public static void removeDuplicates (char [] str) {
    int map = 0;
    for (int i = 0;
    i < str.length; i++) {
        int index = (int)(str[i] - 'a');
        if((map & (1 << index)) == 0) map |= 1 << index;
        else str[i] = 0; 
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
908
5
Gpt3D_Clone908_5.java 1 8
Gpt3D_Clone908_5.java 9 19
----------------------------------------

public static void removeDuplicates (char [] str) {
    int map = 0;
    for (int i = 0;
    i < str.length; i ++) {
        if ((map & (1 << (str [i] - 'a'))) > 0) str [i] = 0;
        else map |= 1 << (str [i] - 'a');
    }
}
----------------------------------------

 public static void removeDuplicates (char [] str) {
    int map = 0;
    for (int i = 0;
    i < str.length; i ++) {
        int index = (int)(str[i]- 'a');
        if(map & (1 << index) > 0) str[i] = '\0';
        else map |= (1 << index);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
908
6
Gpt3D_Clone908_6.java 1 8
Gpt3D_Clone908_6.java 9 19
----------------------------------------

public static void removeDuplicates (char [] str) {
    int map = 0;
    for (int i = 0;
    i < str.length; i ++) {
        if ((map & (1 << (str [i] - 'a'))) > 0) str [i] = 0;
        else map |= 1 << (str [i] - 'a');
    }
}
----------------------------------------

 public static void removeDuplicates (char [] str) {
    int map = 0;
    for (int i = 0;
    i < str.length; i ++) {
        int index = (int)(str[i] - 'a');
        if((map & (1 << index)) > 0 ) str[i] = '\0';
        else map |= (1 << index );
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
908
7
Gpt3D_Clone908_7.java 1 8
Gpt3D_Clone908_7.java 9 19
----------------------------------------

public static void removeDuplicates (char [] str) {
    int map = 0;
    for (int i = 0;
    i < str.length; i ++) {
        if ((map & (1 << (str [i] - 'a'))) > 0) str [i] = 0;
        else map |= 1 << (str [i] - 'a');
    }
}
----------------------------------------

  public static void removeDuplicates (char [] str) {
    java.util.Set<Character> charactersSet = new HashSet<>();
    for (int i = 0;
    i < str.length; i++) {
        if (!charactersSet.add(str[i])) {
            str[i] = 0; 
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
908
8
Gpt3D_Clone908_8.java 1 8
Gpt3D_Clone908_8.java 9 19
----------------------------------------

public static void removeDuplicates (char [] str) {
    int map = 0;
    for (int i = 0;
    i < str.length; i ++) {
        if ((map & (1 << (str [i] - 'a'))) > 0) str [i] = 0;
        else map |= 1 << (str [i] - 'a');
    }
}
----------------------------------------

 public static void removeDuplicates (char [] str) {
    java.util.Set<Character> charactersSet = new TreeSet<>();
    for (int i = 0;
    i < str.length; i++) {
        if (!charactersSet.add(str[i])) {
            str[i] = 0; 
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
909
0
Gpt3D_Clone909_0.java 1 11
Gpt3D_Clone909_0.java 12 29
----------------------------------------

static String removeDuplicates (String s) {
    StringBuilder noDupes = new StringBuilder ();
    for (int i = 0;
    i < s.length (); i ++) {
        String si = s.substring (i, i + 1);
        if (noDupes.indexOf (si) == - 1) {
            noDupes.append (si);
        }
    }
    return noDupes.toString ();
}
----------------------------------------

 static String removeDuplicates(String s) {
    List<Character> noDupes = new ArrayList<>();
    for (int i = 0; i < s.length(); i++) {
        Character c = s.charAt(i);
        if (!noDupes.contains(c)) {
            noDupes.add(c);
        }
    }
    String result = "";
 
    for(Character c : noDupes) {
        result += c;
    }
 
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
909
1
Gpt3D_Clone909_1.java 1 11
Gpt3D_Clone909_1.java 12 31
----------------------------------------

static String removeDuplicates (String s) {
    StringBuilder noDupes = new StringBuilder ();
    for (int i = 0;
    i < s.length (); i ++) {
        String si = s.substring (i, i + 1);
        if (noDupes.indexOf (si) == - 1) {
            noDupes.append (si);
        }
    }
    return noDupes.toString ();
}
----------------------------------------

 static String removeDuplicates(String s) {
    char[] chars = s.toCharArray();
    List<Character> noDupes = new ArrayList<>();
 
    for(Character c : chars) {
        if(!noDupes.contains(c)) {
            noDupes.add(c);
        }
    }
 
    String result = "";
 
    for(Character c : noDupes) {
        result += c;
    }
 
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
909
3
Gpt3D_Clone909_3.java 1 11
Gpt3D_Clone909_3.java 12 26
----------------------------------------

static String removeDuplicates (String s) {
    StringBuilder noDupes = new StringBuilder ();
    for (int i = 0;
    i < s.length (); i ++) {
        String si = s.substring (i, i + 1);
        if (noDupes.indexOf (si) == - 1) {
            noDupes.append (si);
        }
    }
    return noDupes.toString ();
}
----------------------------------------

 static String removeDuplicates(String s) { 
    char[] chars = s.toCharArray(); 
    Set<Character> set = new LinkedHashSet<Character>(); 
    for (char c : chars) { 
        set.add(c); 
    } 
  
    StringBuilder sb = new StringBuilder(); 
    for (Character c : set) { 
        sb.append(c); 
    } 
    return sb.toString(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
90
0
Gpt3D_Clone90_0.java 1 12
Gpt3D_Clone90_0.java 13 32
----------------------------------------

private void type (char character) {
    handleSpecialCharacter (character);
    if (Character.isLowerCase (character)) {
        typeCharacter (Character.toUpperCase (character));
    }
    if (Character.isUpperCase (character)) {
        typeShiftCharacter (character);
    }
    if (Character.isDigit (character)) {
        typeCharacter (character);
    }
}
----------------------------------------

 private void type (char character) {
    switch (character) {
        case '#':
        case '@':
        case '!':
            specialCharacterHandler (character);
            break;
        case inRange ('a', 'z'):
            typeCharacter (Character.toUpperCase (character));
            break;
        case inRange ('A', 'Z'):
            typeShiftCharacter (character);
            break;
        case inRange ('0','9'):
            typeCharacter (character);;
            break;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
90
1
Gpt3D_Clone90_1.java 1 12
Gpt3D_Clone90_1.java 13 32
----------------------------------------

private void type (char character) {
    handleSpecialCharacter (character);
    if (Character.isLowerCase (character)) {
        typeCharacter (Character.toUpperCase (character));
    }
    if (Character.isUpperCase (character)) {
        typeShiftCharacter (character);
    }
    if (Character.isDigit (character)) {
        typeCharacter (character);
    }
}
----------------------------------------

 private void type (char character) {
    switch (character) {
        case '#':
        case '@':
        case '!':
            handleSpecialCharacter (character);;
            break;
        case inRange ('a', 'z'):
            typeUpperCaseCharacter (Character.toUpperCase (character));
            break;
        case inRange ('A', 'Z'):
            typeShiftCharacter (character);
            break;
        case inRange ('0','9'):
            typeCharacter (character);
            break;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
910
0
Gpt3D_Clone910_0.java 1 15
Gpt3D_Clone910_0.java 16 44
----------------------------------------

public static void main (String [] args) {
    String number1 = "108";
    String number2 = "84";
    char [] n1 = number1.toCharArray ();
    char [] n2 = number2.toCharArray ();
    int result = 0;
    for (int i = 0;
    i < n1.length; i ++) {
        for (int j = 0;
        j < n2.length; j ++) {
            result += (n1 [i] - '0') * (n2 [j] - '0') * (int) Math.pow (10, n1.length + n2.length - (i + j + 2));
        }
    }
    System.out.println (result);
}
----------------------------------------

public static void main(String[] args) { 
	  String number1 = "108";
	  String number2 = "84";
	  int result = 0; 
	  char[] arr1 = number1.toCharArray();
	  char[] arr2 = number2.toCharArray();
	  int[] arr1Int = new int[arr1.length];
	  int[] arr2Int = new int[arr2.length];
	  for(int i=arr1.length-1; i>=0;i--) {
	    arr1Int[i] = Character.getNumericValue(arr1[i]);
	  }
	  for(int j=arr2.length-1; j>=0; j--) {
	    arr2Int[j] = Character.getNumericValue(arr2[j]);
	  }
	  
	  for (int i=0; i< arr1Int.length; i++) {
	    for(int j=0; j< arr2Int.length; j++) {
	      result += (arr1Int[i]) * (arr2Int[j]) * (int)Math.pow(10, arr1Int.length + arr2Int.length - (i+j +2));
	    }
	  }
	  System.out.println(result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
910
1
Gpt3D_Clone910_1.java 1 15
Gpt3D_Clone910_1.java 16 52
----------------------------------------

public static void main (String [] args) {
    String number1 = "108";
    String number2 = "84";
    char [] n1 = number1.toCharArray ();
    char [] n2 = number2.toCharArray ();
    int result = 0;
    for (int i = 0;
    i < n1.length; i ++) {
        for (int j = 0;
        j < n2.length; j ++) {
            result += (n1 [i] - '0') * (n2 [j] - '0') * (int) Math.pow (10, n1.length + n2.length - (i + j + 2));
        }
    }
    System.out.println (result);
}
----------------------------------------

public static void main(String[] args) { 
	  String number1 = "108";
	  String number2 = "84";
	  int result = 0; 
	  char[] arr1 = new char[number1.length()];
	  char[] arr2 = new char[number2.length()];
	  int x = 0;
	 
	  //store reversed string in an array
	  for(int i = number1.length()-1; i >= 0; i--)
	  {
	    arr1[x++] = number1.charAt(i);
	    
	  }
	  x = 0;
	  for(int i = number2.length()-1; i >= 0; i--)
	  {
	    arr2[x++] = number2.charAt(i);
	    
	  }
	  
	  for (int i=0; i< arr1.length; i++) {
	    for(int j=0; j< arr2.length; j++) {
	      result += (arr1 [i] - '0') * (arr2 [j] - '0') * (int)Math.pow(10, arr1.length + arr2.length - (i+j +2));
	    }
	  }
	  System.out.println(result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
910
2
Gpt3D_Clone910_2.java 1 15
Gpt3D_Clone910_2.java 16 45
----------------------------------------

public static void main (String [] args) {
    String number1 = "108";
    String number2 = "84";
    char [] n1 = number1.toCharArray ();
    char [] n2 = number2.toCharArray ();
    int result = 0;
    for (int i = 0;
    i < n1.length; i ++) {
        for (int j = 0;
        j < n2.length; j ++) {
            result += (n1 [i] - '0') * (n2 [j] - '0') * (int) Math.pow (10, n1.length + n2.length - (i + j + 2));
        }
    }
    System.out.println (result);
}
----------------------------------------

public static void main(String[] args) { 
	  String number1 = "108";
	  String number2 = "84";
	  int result = 0; 
	  char[] arr1 = number1.toCharArray();
	  char[] arr2 = number2.toCharArray();
	  int[] arr1Int = new int[arr1.length];
	  int[] arr2Int = new int[arr2.length];
	  for(int i=0; i< arr1.length;i++) {
	    arr1Int[i] = Character.getNumericValue(arr1[i]);
	  }
	  for(int j=0; j< arr2.length; j++) {
	    arr2Int[j] = Character.getNumericValue(arr2[j]);
	  }
	  
	  for (int i=0; i< arr1Int.length; i++) {
	    for(int j=0; j< arr2Int.length; j++) {
	      result += (arr1Int[i]) * (arr2Int[j]) * (int)Math.pow(10, arr1Int.length + arr2Int.length - (i+j +2));
	    }
	  }
	  System.out.println(result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
910
3
Gpt3D_Clone910_3.java 1 15
Gpt3D_Clone910_3.java 16 52
----------------------------------------

public static void main (String [] args) {
    String number1 = "108";
    String number2 = "84";
    char [] n1 = number1.toCharArray ();
    char [] n2 = number2.toCharArray ();
    int result = 0;
    for (int i = 0;
    i < n1.length; i ++) {
        for (int j = 0;
        j < n2.length; j ++) {
            result += (n1 [i] - '0') * (n2 [j] - '0') * (int) Math.pow (10, n1.length + n2.length - (i + j + 2));
        }
    }
    System.out.println (result);
}
----------------------------------------

public static void main(String[] args) { 
	  String number1 = "108";
	  String number2 = "84";
	  int result = 0; 
	  char[] arr1 = new char[number1.length()];
	  char[] arr2 = new char[number2.length()];
	  int x = number1.length()-1;
	 
	  //store reversed string in an array
	  for(int i = 0; i < number1.length(); i++)
	  {
	    arr1[i] = number1.charAt(x--);
	    
	  }
	  x = number2.length()-1;
	  for(int i = 0; i < number2.length(); i++)
	  {
	    arr2[i] = number2.charAt(x--);
	    
	  }
	  
	  for (int i=0; i< arr1.length; i++) {
	    for(int j=0; j< arr2.length; j++) {
	      result += (arr1 [i] - '0') * (arr2 [j] - '0') * (int)Math.pow(10, arr1.length + arr2.length - (i+j +2));
	    }
	  }
	  System.out.println(result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
910
4
Gpt3D_Clone910_4.java 1 15
Gpt3D_Clone910_4.java 16 40
----------------------------------------

public static void main (String [] args) {
    String number1 = "108";
    String number2 = "84";
    char [] n1 = number1.toCharArray ();
    char [] n2 = number2.toCharArray ();
    int result = 0;
    for (int i = 0;
    i < n1.length; i ++) {
        for (int j = 0;
        j < n2.length; j ++) {
            result += (n1 [i] - '0') * (n2 [j] - '0') * (int) Math.pow (10, n1.length + n2.length - (i + j + 2));
        }
    }
    System.out.println (result);
}
----------------------------------------

public static void main(String[] args) {
	  String number1 = "108";
	  String number2 = "84";
	  int result = 0;
	  int n1Length = number1.length();
	  int n2Length = number2.length();
	  int sum = n1Length + n2Length;
	  
	  int iCounter  = 0, jCounter = 0;
	 
	  for (int i = 0; i < n1Length; i++) {
	    for (int j = 0; j < n2Length; j++) {
	      result += (number1.charAt(n1Length - 1 - i) - '0') * (number2.charAt(n2Length - 1 - j) - '0') 
		      * Math.pow(10, sum - (iCounter + jCounter + 2));
		      jCounter++;
	    }
	    iCounter++;
	  }
	  System.out.println(result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
910
6
Gpt3D_Clone910_6.java 1 15
Gpt3D_Clone910_6.java 16 39
----------------------------------------

public static void main (String [] args) {
    String number1 = "108";
    String number2 = "84";
    char [] n1 = number1.toCharArray ();
    char [] n2 = number2.toCharArray ();
    int result = 0;
    for (int i = 0;
    i < n1.length; i ++) {
        for (int j = 0;
        j < n2.length; j ++) {
            result += (n1 [i] - '0') * (n2 [j] - '0') * (int) Math.pow (10, n1.length + n2.length - (i + j + 2));
        }
    }
    System.out.println (result);
}
----------------------------------------

public static void main(String[] args) {
	  String number1 = "108";
	  String number2 = "84";
	  int result = 0;
	  int n1Length = number1.length();
	  int n2Length = number2.length();
	  int sum = n1Length + n2Length;
	  
	  int iCounter  = 0, jCounter = 0;
	  for (int i = (n1Length - 1); i >= 0; i--) {
	    for (int j = (n2Length - 1); j >= 0; j--) {
	      result += (number1.charAt(i) - '0') * (number2.charAt(j) - '0') 
		      * Math.pow(10, sum - (iCounter + jCounter + 2));
		      jCounter++;
	    }
	    iCounter++;
	  }
	  System.out.println(result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
910
7
Gpt3D_Clone910_7.java 1 15
Gpt3D_Clone910_7.java 16 35
----------------------------------------

public static void main (String [] args) {
    String number1 = "108";
    String number2 = "84";
    char [] n1 = number1.toCharArray ();
    char [] n2 = number2.toCharArray ();
    int result = 0;
    for (int i = 0;
    i < n1.length; i ++) {
        for (int j = 0;
        j < n2.length; j ++) {
            result += (n1 [i] - '0') * (n2 [j] - '0') * (int) Math.pow (10, n1.length + n2.length - (i + j + 2));
        }
    }
    System.out.println (result);
}
----------------------------------------

public static void main(String[] args) {
	  String number1 = "108";
	  String number2 = "84";
	  int result = 0;
	  int n1Length = number1.length();
	  int n2Length = number2.length();
	  int sum = n1Length + n2Length;
	  for(int i = 0; i < n1Length; i++) {
	    for(int j = 0; j < n2Length; j++) {
	      result += (number1.charAt(i) - '0') * (number2.charAt(j) - '0') 
		      * Math.pow(10, sum - (i + j + 2));
	    }
	  }
	  System.out.println(result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
910
8
Gpt3D_Clone910_8.java 1 15
Gpt3D_Clone910_8.java 16 36
----------------------------------------

public static void main (String [] args) {
    String number1 = "108";
    String number2 = "84";
    char [] n1 = number1.toCharArray ();
    char [] n2 = number2.toCharArray ();
    int result = 0;
    for (int i = 0;
    i < n1.length; i ++) {
        for (int j = 0;
        j < n2.length; j ++) {
            result += (n1 [i] - '0') * (n2 [j] - '0') * (int) Math.pow (10, n1.length + n2.length - (i + j + 2));
        }
    }
    System.out.println (result);
}
----------------------------------------

public static void main(String[] args) {
	  String number1 = "108";
	  String number2 = "84";
	  int result = 0;
	  int n1Length = number1.length();
	  int n2Length = number2.length();
	  int sum = n1Length + n2Length;
	  for(int i = n1Length - 1; i >= 0; i--) {
	    for(int j = n2Length - 1; j >= 0; j--) {
	      result += (number1.charAt(i) - '0') * (number2.charAt(j) - '0') 
		      * Math.pow(10, sum - (n1Length - i + n2Length - j - 2));
		      
	    }
	  }
	  System.out.println(result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
910
9
Gpt3D_Clone910_9.java 1 15
Gpt3D_Clone910_9.java 16 31
----------------------------------------

public static void main (String [] args) {
    String number1 = "108";
    String number2 = "84";
    char [] n1 = number1.toCharArray ();
    char [] n2 = number2.toCharArray ();
    int result = 0;
    for (int i = 0;
    i < n1.length; i ++) {
        for (int j = 0;
        j < n2.length; j ++) {
            result += (n1 [i] - '0') * (n2 [j] - '0') * (int) Math.pow (10, n1.length + n2.length - (i + j + 2));
        }
    }
    System.out.println (result);
}
----------------------------------------

 
public static void main(String[] args) { 
	  String number1 = "108";
	  String number2 = "84";
	  int result = 0; 
	  for (int i=0; i< number1.length(); i++) {
	    for(int j=0; j< number2.length(); j++) {
	      result += (number1.charAt(i) - '0') * (number2.charAt(j) - '0') * (int)Math.pow(10, number1.length() + number2.length() - (i+j +2));
	    }
	  }
	  System.out.println(result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
912
0
Gpt3D_Clone912_0.java 1 10
Gpt3D_Clone912_0.java 11 34
----------------------------------------

public static final String deriveCurveName (PrivateKey privateKey) throws GeneralSecurityException {
    if (privateKey instanceof java.security.interfaces.ECPrivateKey) {
        final java.security.interfaces.ECPrivateKey pk = (java.security.interfaces.ECPrivateKey) privateKey;
        final ECParameterSpec params = pk.getParams ();
        return deriveCurveName (EC5Util.convertSpec (params, false));
    } else if (privateKey instanceof org.bouncycastle.jce.interfaces.ECPrivateKey) {
        final org.bouncycastle.jce.interfaces.ECPrivateKey pk = (org.bouncycastle.jce.interfaces.ECPrivateKey) privateKey;
        return deriveCurveName (pk.getParameters ());
    } else throw new IllegalArgumentException ("Can only be used with instances of ECPrivateKey (either jce or bc implementation)");
}
----------------------------------------

 public static final String deriveCurveName (PrivateKey privateKey) throws GeneralSecurityException { try{
        if (privateKey instanceof java.security.interfaces.ECPrivateKey ||
            privateKey instanceof org.bouncycastle.jce.interfaces.ECPrivateKey){
            String result = null;
            if(privateKey instanceof java.security.interfaces.ECPrivateKey) {
                final java.security.interfaces.ECPrivateKey pk = (java.security.interfaces.ECPrivateKey) privateKey;
                final ECParameterSpec params = pk.getParams();
                result = deriveCurveName(EC5Util.convertSpec(params, false));
            }
            else {
                final org.bouncycastle.jce.interfaces.ECPrivateKey pk = (org.bouncycastle.jce.interfaces.ECPrivateKey) privateKey;
                result = deriveCurveName(pk.getParameters());
            }
            return result;
        }
        else
            throw new IllegalArgumentException("Can only be used with instances of ECPrivateKey (either jce or bc implementation)");
    }
    catch (GeneralSecurityException e) {
        //Handle exception
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
912
1
Gpt3D_Clone912_1.java 1 10
Gpt3D_Clone912_1.java 11 32
----------------------------------------

public static final String deriveCurveName (PrivateKey privateKey) throws GeneralSecurityException {
    if (privateKey instanceof java.security.interfaces.ECPrivateKey) {
        final java.security.interfaces.ECPrivateKey pk = (java.security.interfaces.ECPrivateKey) privateKey;
        final ECParameterSpec params = pk.getParams ();
        return deriveCurveName (EC5Util.convertSpec (params, false));
    } else if (privateKey instanceof org.bouncycastle.jce.interfaces.ECPrivateKey) {
        final org.bouncycastle.jce.interfaces.ECPrivateKey pk = (org.bouncycastle.jce.interfaces.ECPrivateKey) privateKey;
        return deriveCurveName (pk.getParameters ());
    } else throw new IllegalArgumentException ("Can only be used with instances of ECPrivateKey (either jce or bc implementation)");
}
----------------------------------------

 public static final String deriveCurveName (PrivateKey privateKey) throws GeneralSecurityException { if (privateKey instanceof java.security.interfaces.ECPrivateKey || 
      privateKey instanceof org.bouncycastle.jce.interfaces.ECPrivateKey) {
        String result = null;
        try {
            if (privateKey instanceof java.security.interfaces.ECPrivateKey) {
                final java.security.interfaces.ECPrivateKey pk = (java.security.interfaces.ECPrivateKey) privateKey;
                final ECParameterSpec params = pk.getParams ();
                result = deriveCurveName (EC5Util.convertSpec (params, false));
            } else {
                final org.bouncycastle.jce.interfaces.ECPrivateKey pk = (org.bouncycastle.jce.interfaces.ECPrivateKey) privateKey;
                result = deriveCurveName (pk.getParameters ());
            }
        } catch (GeneralSecurityException e) {
           //Handle exception
        }
        return result;
    }
    else
    	throw new IllegalArgumentException ("Can only be used with instances of ECPrivateKey (either jce or bc implementation)");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
912
2
Gpt3D_Clone912_2.java 1 10
Gpt3D_Clone912_2.java 11 31
----------------------------------------

public static final String deriveCurveName (PrivateKey privateKey) throws GeneralSecurityException {
    if (privateKey instanceof java.security.interfaces.ECPrivateKey) {
        final java.security.interfaces.ECPrivateKey pk = (java.security.interfaces.ECPrivateKey) privateKey;
        final ECParameterSpec params = pk.getParams ();
        return deriveCurveName (EC5Util.convertSpec (params, false));
    } else if (privateKey instanceof org.bouncycastle.jce.interfaces.ECPrivateKey) {
        final org.bouncycastle.jce.interfaces.ECPrivateKey pk = (org.bouncycastle.jce.interfaces.ECPrivateKey) privateKey;
        return deriveCurveName (pk.getParameters ());
    } else throw new IllegalArgumentException ("Can only be used with instances of ECPrivateKey (either jce or bc implementation)");
}
----------------------------------------

 public static final String deriveCurveName (PrivateKey privateKey) throws GeneralSecurityException { if (privateKey instanceof java.security.interfaces.ECPrivateKey || privateKey instanceof org.bouncycastle.jce.interfaces.ECPrivateKey) {
        try {
            String curveName = "";
            if (privateKey instanceof java.security.interfaces.ECPrivateKey) {
                final java.security.interfaces.ECPrivateKey pk = (java.security.interfaces.ECPrivateKey) privateKey;
                final ECParameterSpec params = pk.getParams ();
                curveName = deriveCurveName (EC5Util.convertSpec (params, false));
            } 
            else {
                final org.bouncycastle.jce.interfaces.ECPrivateKey pk = (org.bouncycastle.jce.interfaces.ECPrivateKey) privateKey;
                curveName = deriveCurveName (pk.getParameters ());
            }
            return curveName;
        } catch (GeneralSecurityException e) {
            //Handle exception
        }
    } else
        throw new IllegalArgumentException ("Can only be used with instances of ECPrivateKey (either jce or bc implementation)");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
912
3
Gpt3D_Clone912_3.java 1 10
Gpt3D_Clone912_3.java 11 31
----------------------------------------

public static final String deriveCurveName (PrivateKey privateKey) throws GeneralSecurityException {
    if (privateKey instanceof java.security.interfaces.ECPrivateKey) {
        final java.security.interfaces.ECPrivateKey pk = (java.security.interfaces.ECPrivateKey) privateKey;
        final ECParameterSpec params = pk.getParams ();
        return deriveCurveName (EC5Util.convertSpec (params, false));
    } else if (privateKey instanceof org.bouncycastle.jce.interfaces.ECPrivateKey) {
        final org.bouncycastle.jce.interfaces.ECPrivateKey pk = (org.bouncycastle.jce.interfaces.ECPrivateKey) privateKey;
        return deriveCurveName (pk.getParameters ());
    } else throw new IllegalArgumentException ("Can only be used with instances of ECPrivateKey (either jce or bc implementation)");
}
----------------------------------------

 public static final String deriveCurveName (PrivateKey privateKey) throws GeneralSecurityException {  if (privateKey instanceof java.security.interfaces.ECPrivateKey || 
	privateKey instanceof org.bouncycastle.jce.interfaces.ECPrivateKey) {
        try {
            String result = "";
            if (privateKey instanceof java.security.interfaces.ECPrivateKey) {
                final java.security.interfaces.ECPrivateKey pk = (java.security.interfaces.ECPrivateKey) privateKey;
                final ECParameterSpec params = pk.getParams ();
                result = deriveCurveName (EC5Util.convertSpec (params, false));
            } else {
                final org.bouncycastle.jce.interfaces.ECPrivateKey pk = (org.bouncycastle.jce.interfaces.ECPrivateKey) privateKey;
                result = deriveCurveName (pk.getParameters ());
            }
            return result;
        } catch (GeneralSecurityException e) {
            //Handle exception
        }
    } else
        throw new IllegalArgumentException("Can only be used with instances of ECPrivateKey (either jce or bc implementation)");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
912
4
Gpt3D_Clone912_4.java 1 10
Gpt3D_Clone912_4.java 11 31
----------------------------------------

public static final String deriveCurveName (PrivateKey privateKey) throws GeneralSecurityException {
    if (privateKey instanceof java.security.interfaces.ECPrivateKey) {
        final java.security.interfaces.ECPrivateKey pk = (java.security.interfaces.ECPrivateKey) privateKey;
        final ECParameterSpec params = pk.getParams ();
        return deriveCurveName (EC5Util.convertSpec (params, false));
    } else if (privateKey instanceof org.bouncycastle.jce.interfaces.ECPrivateKey) {
        final org.bouncycastle.jce.interfaces.ECPrivateKey pk = (org.bouncycastle.jce.interfaces.ECPrivateKey) privateKey;
        return deriveCurveName (pk.getParameters ());
    } else throw new IllegalArgumentException ("Can only be used with instances of ECPrivateKey (either jce or bc implementation)");
}
----------------------------------------

 public static final String deriveCurveName (PrivateKey privateKey) throws GeneralSecurityException { if(privateKey instanceof java.security.interfaces.ECPrivateKey || privateKey instanceof org.bouncycastle.jce.interfaces.ECPrivateKey){
        try{
           String curveName="";
            if(privateKey instanceof java.security.interfaces.ECPrivateKey){
                final java.security.interfaces.ECPrivateKey key = (java.security.interfaces.ECPrivateKey) privateKey;
                final ECParameterSpec spec = key.getParams ();
                curveName = deriveCurveName (EC5Util.convertSpec (spec, false));
            }
            else{
                 final org.bouncycastle.jce.interfaces.ECPrivateKey key = (org.bouncycastle.jce.interfaces.ECPrivateKey) privateKey;
                 curveName = deriveCurveName (key.getParameters ());
            }
            return curveName;
        } catch (GeneralSecurityException e) {
           //Handle exception
        }   
    } else 
        throw new IllegalArgumentException("Can only be used with instances of ECPrivateKey (either jce or bc implementation)");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
912
6
Gpt3D_Clone912_6.java 1 10
Gpt3D_Clone912_6.java 11 25
----------------------------------------

public static final String deriveCurveName (PrivateKey privateKey) throws GeneralSecurityException {
    if (privateKey instanceof java.security.interfaces.ECPrivateKey) {
        final java.security.interfaces.ECPrivateKey pk = (java.security.interfaces.ECPrivateKey) privateKey;
        final ECParameterSpec params = pk.getParams ();
        return deriveCurveName (EC5Util.convertSpec (params, false));
    } else if (privateKey instanceof org.bouncycastle.jce.interfaces.ECPrivateKey) {
        final org.bouncycastle.jce.interfaces.ECPrivateKey pk = (org.bouncycastle.jce.interfaces.ECPrivateKey) privateKey;
        return deriveCurveName (pk.getParameters ());
    } else throw new IllegalArgumentException ("Can only be used with instances of ECPrivateKey (either jce or bc implementation)");
}
----------------------------------------

 public static final String deriveCurveName (PrivateKey privateKey) throws GeneralSecurityException { if (privateKey instanceof java.security.interfaces.ECPrivateKey || privateKey instanceof org.bouncycastle.jce.interfaces.ECPrivateKey) {
        String result = null;
        if (privateKey instanceof java.security.interfaces.ECPrivateKey) {
            final java.security.interfaces.ECPrivateKey pk = (java.security.interfaces.ECPrivateKey) privateKey;
            final ECParameterSpec params = pk.getParams ();
            result = deriveCurveName (EC5Util.convertSpec (params, false));
        } else {
            final org.bouncycastle.jce.interfaces.ECPrivateKey pk = (org.bouncycastle.jce.interfaces.ECPrivateKey) privateKey;
            result = deriveCurveName (pk.getParameters ());
        }
        return result;
    } else throw new IllegalArgumentException ("Can only be used with instances of ECPrivateKey (either jce or bc implementation)");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
912
7
Gpt3D_Clone912_7.java 1 10
Gpt3D_Clone912_7.java 11 19
----------------------------------------

public static final String deriveCurveName (PrivateKey privateKey) throws GeneralSecurityException {
    if (privateKey instanceof java.security.interfaces.ECPrivateKey) {
        final java.security.interfaces.ECPrivateKey pk = (java.security.interfaces.ECPrivateKey) privateKey;
        final ECParameterSpec params = pk.getParams ();
        return deriveCurveName (EC5Util.convertSpec (params, false));
    } else if (privateKey instanceof org.bouncycastle.jce.interfaces.ECPrivateKey) {
        final org.bouncycastle.jce.interfaces.ECPrivateKey pk = (org.bouncycastle.jce.interfaces.ECPrivateKey) privateKey;
        return deriveCurveName (pk.getParameters ());
    } else throw new IllegalArgumentException ("Can only be used with instances of ECPrivateKey (either jce or bc implementation)");
}
----------------------------------------

 public static final String deriveCurveName (PrivateKey privateKey) throws GeneralSecurityException { if (privateKey instanceof java.security.interfaces.ECPrivateKey) {
        final java.security.interfaces.ECPrivateKey pk = (java.security.interfaces.ECPrivateKey) privateKey;
        final ECParameterSpec params = pk.getParams ();
        String result = deriveCurveName (EC5Util.convertSpec (params, false));
        return result;
     }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
912
8
Gpt3D_Clone912_8.java 1 10
Gpt3D_Clone912_8.java 11 18
----------------------------------------

public static final String deriveCurveName (PrivateKey privateKey) throws GeneralSecurityException {
    if (privateKey instanceof java.security.interfaces.ECPrivateKey) {
        final java.security.interfaces.ECPrivateKey pk = (java.security.interfaces.ECPrivateKey) privateKey;
        final ECParameterSpec params = pk.getParams ();
        return deriveCurveName (EC5Util.convertSpec (params, false));
    } else if (privateKey instanceof org.bouncycastle.jce.interfaces.ECPrivateKey) {
        final org.bouncycastle.jce.interfaces.ECPrivateKey pk = (org.bouncycastle.jce.interfaces.ECPrivateKey) privateKey;
        return deriveCurveName (pk.getParameters ());
    } else throw new IllegalArgumentException ("Can only be used with instances of ECPrivateKey (either jce or bc implementation)");
}
----------------------------------------

 public static final String deriveCurveName (PrivateKey privateKey) throws GeneralSecurityException {  if (privateKey instanceof org.bouncycastle.jce.interfaces.ECPrivateKey) {
        final org.bouncycastle.jce.interfaces.ECPrivateKey pk = (org.bouncycastle.jce.interfaces.ECPrivateKey) privateKey;
        String result = deriveCurveName (pk.getParameters ());
        return result;
     }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
913
6
Gpt3D_Clone913_6.java 1 14
Gpt3D_Clone913_6.java 15 30
----------------------------------------

public static String toHexString (byte bytes []) {
    if (bytes == null) {
        return null;
    }
    StringBuffer sb = new StringBuffer ();
    for (int iter = 0;
    iter < bytes.length; iter ++) {
        byte high = (byte) ((bytes [iter] & 0xf0)>> 4);
        byte low = (byte) (bytes [iter] & 0x0f);
        sb.append (nibble2char (high));
        sb.append (nibble2char (low));
    }
    return sb.toString ();
}
----------------------------------------

 public static String toHexString (byte [] bytes) {
        if (bytes == null) {
            return null;
        }
        StringBuilder sb = new StringBuilder ();
        for (int iter = 0; iter < bytes.length; iter ++) {
            int high = (byte) ((bytes [iter] & 0x78)>> 4);
            int low = (byte) (bytes [iter] & 0x0f);
           
            sb.append (Integer.toHexString (high).toUpperCase());
            sb.append (Integer.toHexString (low).toUpperCase());
        }
        return sb.toString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
913
8
Gpt3D_Clone913_8.java 1 14
Gpt3D_Clone913_8.java 15 30
----------------------------------------

public static String toHexString (byte bytes []) {
    if (bytes == null) {
        return null;
    }
    StringBuffer sb = new StringBuffer ();
    for (int iter = 0;
    iter < bytes.length; iter ++) {
        byte high = (byte) ((bytes [iter] & 0xf0)>> 4);
        byte low = (byte) (bytes [iter] & 0x0f);
        sb.append (nibble2char (high));
        sb.append (nibble2char (low));
    }
    return sb.toString ();
}
----------------------------------------

 public static String toHexString (byte [] bytes) {
        if (bytes == null) {
            return null;
        }
        StringBuilder sb = new StringBuilder ();
        for (int iter = 0; iter < bytes.length; iter ++) {
            int high = (byte) ((bytes [iter] & 0xf0)>> 4);
            int low = (byte) (bytes [iter] & 0x0f);
           
            sb.append (Integer.toHexString (high).toUpperCase());
            sb.append (Integer.toHexString (low).toLowerCase());
        }
        return sb.toString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
913
9
Gpt3D_Clone913_9.java 1 14
Gpt3D_Clone913_9.java 15 30
----------------------------------------

public static String toHexString (byte bytes []) {
    if (bytes == null) {
        return null;
    }
    StringBuffer sb = new StringBuffer ();
    for (int iter = 0;
    iter < bytes.length; iter ++) {
        byte high = (byte) ((bytes [iter] & 0xf0)>> 4);
        byte low = (byte) (bytes [iter] & 0x0f);
        sb.append (nibble2char (high));
        sb.append (nibble2char (low));
    }
    return sb.toString ();
}
----------------------------------------

 public static String toHexString (byte [] bytes) {
        if (bytes == null) {
            return null;
        }
        StringBuilder sb = new StringBuilder ();
        for (int iter = 0; iter < bytes.length; iter ++) {
            int high = (byte) ((bytes [iter] & 0xf0)>> 4);
            int low = (byte) (bytes [iter] & 0x0f);
           
            sb.append (String.valueOf(high));
            sb.append (String.valueOf(low));
        }
        return sb.toString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
914
0
Gpt3D_Clone914_0.java 1 12
Gpt3D_Clone914_0.java 13 24
----------------------------------------

public static String toHexString (byte [] bytes) {
    StringBuilder hexString = new StringBuilder ();
    for (int i = 0;
    i < bytes.length; i ++) {
        String hex = Integer.toHexString (0xFF & bytes [i]);
        if (hex.length () == 1) {
            hexString.append ('0');
        }
        hexString.append (hex);
    }
    return hexString.toString ();
}
----------------------------------------

 public static String toHexString(byte[] bytes) {
        StringBuilder hexString = new StringBuilder();
        for (byte b : bytes) {
            int val = 0xFF & b;
            String hex = Integer.toHexString(val);
            if (hex.length() == 1) hexString.append('0');
            hexString.append(hex);
        }
        return hexString.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
915
3
Gpt3D_Clone915_3.java 1 14
Gpt3D_Clone915_3.java 15 28
----------------------------------------

public static String toHexString (byte bytes []) {
    if (bytes == null) {
        return null;
    }
    StringBuffer sb = new StringBuffer ();
    for (int iter = 0;
    iter < bytes.length; iter ++) {
        byte high = (byte) ((bytes [iter] & 0xf0)>> 4);
        byte low = (byte) (bytes [iter] & 0x0f);
        sb.append (nibble2char (high));
        sb.append (nibble2char (low));
    }
    return sb.toString ();
}
----------------------------------------

 public static String toHexString(byte[] bytes) {
    if (bytes == null) {
        return null;
    }
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < bytes.length; i++) {
        int msb = (int) bytes[i] & 0xF0;
        int lsb = (int) bytes[i] & 0x0F;
        sb.append(String.format("%1x", msb) + String.format("%1x", lsb));
    }
    return sb.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
915
4
Gpt3D_Clone915_4.java 1 14
Gpt3D_Clone915_4.java 15 26
----------------------------------------

public static String toHexString (byte bytes []) {
    if (bytes == null) {
        return null;
    }
    StringBuffer sb = new StringBuffer ();
    for (int iter = 0;
    iter < bytes.length; iter ++) {
        byte high = (byte) ((bytes [iter] & 0xf0)>> 4);
        byte low = (byte) (bytes [iter] & 0x0f);
        sb.append (nibble2char (high));
        sb.append (nibble2char (low));
    }
    return sb.toString ();
}
----------------------------------------

 public static String toHexString(byte[] bytes) {
    if (bytes == null) {
        return null;
    }
    StringBuffer sb = new StringBuffer();
    for (int i = 0; i < bytes.length; i++) {
        sb.append(Integer.toHexString(((int) bytes[i] & 0xff) | 0x100).substring(1, 3));
    }
    return sb.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
915
5
Gpt3D_Clone915_5.java 1 14
Gpt3D_Clone915_5.java 15 26
----------------------------------------

public static String toHexString (byte bytes []) {
    if (bytes == null) {
        return null;
    }
    StringBuffer sb = new StringBuffer ();
    for (int iter = 0;
    iter < bytes.length; iter ++) {
        byte high = (byte) ((bytes [iter] & 0xf0)>> 4);
        byte low = (byte) (bytes [iter] & 0x0f);
        sb.append (nibble2char (high));
        sb.append (nibble2char (low));
    }
    return sb.toString ();
}
----------------------------------------

 public static String toHexString(byte[] bytes) {
    if (bytes == null) {
        return null;
    }
    StringBuilder sb = new StringBuilder();
    for (byte b : bytes) {
        sb.append(Integer.toHexString(b & 0xFF).toUpperCase());
    }
    return sb.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
915
6
Gpt3D_Clone915_6.java 1 14
Gpt3D_Clone915_6.java 15 26
----------------------------------------

public static String toHexString (byte bytes []) {
    if (bytes == null) {
        return null;
    }
    StringBuffer sb = new StringBuffer ();
    for (int iter = 0;
    iter < bytes.length; iter ++) {
        byte high = (byte) ((bytes [iter] & 0xf0)>> 4);
        byte low = (byte) (bytes [iter] & 0x0f);
        sb.append (nibble2char (high));
        sb.append (nibble2char (low));
    }
    return sb.toString ();
}
----------------------------------------

 public static String toHexString(byte[] bytes) {
    if (bytes == null) {
        return null;
    }
    StringBuilder sb = new StringBuilder();
    for (byte b : bytes) {
        sb.append(String.format("%02X", b));
    }
    return sb.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
915
7
Gpt3D_Clone915_7.java 1 14
Gpt3D_Clone915_7.java 15 26
----------------------------------------

public static String toHexString (byte bytes []) {
    if (bytes == null) {
        return null;
    }
    StringBuffer sb = new StringBuffer ();
    for (int iter = 0;
    iter < bytes.length; iter ++) {
        byte high = (byte) ((bytes [iter] & 0xf0)>> 4);
        byte low = (byte) (bytes [iter] & 0x0f);
        sb.append (nibble2char (high));
        sb.append (nibble2char (low));
    }
    return sb.toString ();
}
----------------------------------------

 public static String toHexString(byte[] bytes) {
    if (bytes == null) {
        return null;
    }
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < bytes.length; i++) {
        sb.append(String.format("%02X ", bytes[i] & 0xFF));
    }
    return sb.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
915
8
Gpt3D_Clone915_8.java 1 14
Gpt3D_Clone915_8.java 15 27
----------------------------------------

public static String toHexString (byte bytes []) {
    if (bytes == null) {
        return null;
    }
    StringBuffer sb = new StringBuffer ();
    for (int iter = 0;
    iter < bytes.length; iter ++) {
        byte high = (byte) ((bytes [iter] & 0xf0)>> 4);
        byte low = (byte) (bytes [iter] & 0x0f);
        sb.append (nibble2char (high));
        sb.append (nibble2char (low));
    }
    return sb.toString ();
}
----------------------------------------

 public static String toHexString(byte[] bytes) {
    if (bytes == null) {
        return null;
    }
    StringBuilder result = new StringBuilder();
    for (byte b : bytes)
    {
        result.append(String.format("%02X", b));
    }
    return result.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
919
1
Gpt3D_Clone919_1.java 1 14
Gpt3D_Clone919_1.java 15 43
----------------------------------------

public String getNextMonth (boolean maxDate) {
    Calendar calendar = Calendar.getInstance ();
    calendar.set (year, monthNo, 1);
    calendar.add (Calendar.MONTH, 1);
    if (maxDate) {
        int maxD = calendar.getActualMaximum (Calendar.DAY_OF_MONTH);
        calendar.set (Calendar.DAY_OF_MONTH, maxD);
    } else {
        calendar.set (Calendar.DAY_OF_MONTH, day);
    }
    String date = (calendar.get (Calendar.YEAR)) + "-" + (calendar.get (Calendar.MONTH) + 1) + "-" + calendar.get (Calendar.DAY_OF_MONTH);
    calendar.clear ();
    return date;
}
----------------------------------------

 public String getNextMonth (boolean maxDate) {
        String date = "";
        Calendar cal = Calendar.getInstance();
        cal.set(year, monthNo+1, 1);
        if (maxDate) {
            cal.set(Calendar.DAY_OF_MONTH, cal.getActualMaximum (Calendar.DAY_OF_MONTH));
            date = cal.get(Calendar.YEAR) + "-" + (cal.get(Calendar.MONTH) + 1) + "-" + cal.get(Calendar.DAY_OF_MONTH);
        } else {
            cal.set(Calendar.DAY_OF_MONTH, day);
            date = cal.get(Calendar.YEAR) + "-" + (cal.get(Calendar.MONTH) + 1) + "-" + cal.get(Calendar.DAY_OF_MONTH);
        }
        cal = null;
        return date;
    }
 public String getNextMonth (boolean maxDate) {
    Calendar cal = Calendar.getInstance();
    cal.set(year, monthNo + 1, 1);
    if (maxDate) {
        cal.set(Calendar.DAY_OF_MONTH, cal.getActualMaximum (Calendar.DAY_OF_MONTH));
    } else {
        cal.set(Calendar.DAY_OF_MONTH, day);
    }
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
    return sdf.format(cal.getTime());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
919
3
Gpt3D_Clone919_3.java 1 14
Gpt3D_Clone919_3.java 15 43
----------------------------------------

public String getNextMonth (boolean maxDate) {
    Calendar calendar = Calendar.getInstance ();
    calendar.set (year, monthNo, 1);
    calendar.add (Calendar.MONTH, 1);
    if (maxDate) {
        int maxD = calendar.getActualMaximum (Calendar.DAY_OF_MONTH);
        calendar.set (Calendar.DAY_OF_MONTH, maxD);
    } else {
        calendar.set (Calendar.DAY_OF_MONTH, day);
    }
    String date = (calendar.get (Calendar.YEAR)) + "-" + (calendar.get (Calendar.MONTH) + 1) + "-" + calendar.get (Calendar.DAY_OF_MONTH);
    calendar.clear ();
    return date;
}
----------------------------------------

 public String getNextMonth (boolean maxDate) {
        String date = "";
        Calendar cal = Calendar.getInstance();
        cal.set(year, monthNo+1, 1);
        if (maxDate) {
            cal.set(Calendar.DAY_OF_MONTH, cal.getActualMaximum (Calendar.DAY_OF_MONTH));
            date = cal.get(Calendar.YEAR) + "-" + (cal.get(Calendar.MONTH) + 1) + "-" + cal.get(Calendar.DAY_OF_MONTH);
        } else {
            cal.set(Calendar.DAY_OF_MONTH, day);
            date = cal.get(Calendar.YEAR) + "-" + (cal.get(Calendar.MONTH) + 1) + "-" + cal.get(Calendar.DAY_OF_MONTH);
        }
        cal = null;
        return date;
    }
 public String getNextMonth (boolean maxDate) {
    Calendar cal = Calendar.getInstance();
    cal.set(year, monthNo + 1, 1);
    if (maxDate) {
        cal.set(Calendar.DAY_OF_MONTH, cal.getActualMaximum (Calendar.DAY_OF_MONTH));
    } else {
        cal.set(Calendar.DAY_OF_MONTH, day);
    }
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
    return sdf.format(cal.getTime());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
919
4
Gpt3D_Clone919_4.java 1 14
Gpt3D_Clone919_4.java 15 28
----------------------------------------

public String getNextMonth (boolean maxDate) {
    Calendar calendar = Calendar.getInstance ();
    calendar.set (year, monthNo, 1);
    calendar.add (Calendar.MONTH, 1);
    if (maxDate) {
        int maxD = calendar.getActualMaximum (Calendar.DAY_OF_MONTH);
        calendar.set (Calendar.DAY_OF_MONTH, maxD);
    } else {
        calendar.set (Calendar.DAY_OF_MONTH, day);
    }
    String date = (calendar.get (Calendar.YEAR)) + "-" + (calendar.get (Calendar.MONTH) + 1) + "-" + calendar.get (Calendar.DAY_OF_MONTH);
    calendar.clear ();
    return date;
}
----------------------------------------

 public String getNextMonth (boolean maxDate) {
    DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
    Calendar calendar = Calendar.getInstance ();
    calendar.set (year, monthNo, day);
    calendar.add (Calendar.MONTH, 1);
    if (maxDate) 
        calendar.set(Calendar.DAY_OF_MONTH, calendar.getActualMaximum (Calendar.DAY_OF_MONTH));
    else 
        calendar.set(Calendar.DAY_OF_MONTH, day);
    Date date = calendar.getTime ();
    return df.format(date);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
919
5
Gpt3D_Clone919_5.java 1 14
Gpt3D_Clone919_5.java 15 26
----------------------------------------

public String getNextMonth (boolean maxDate) {
    Calendar calendar = Calendar.getInstance ();
    calendar.set (year, monthNo, 1);
    calendar.add (Calendar.MONTH, 1);
    if (maxDate) {
        int maxD = calendar.getActualMaximum (Calendar.DAY_OF_MONTH);
        calendar.set (Calendar.DAY_OF_MONTH, maxD);
    } else {
        calendar.set (Calendar.DAY_OF_MONTH, day);
    }
    String date = (calendar.get (Calendar.YEAR)) + "-" + (calendar.get (Calendar.MONTH) + 1) + "-" + calendar.get (Calendar.DAY_OF_MONTH);
    calendar.clear ();
    return date;
}
----------------------------------------

 public String getNextMonth (boolean maxDate) {
    LocalDateTime dt = LocalDateTime.of(year, monthNo + 1, 1, 0, 0);
    if(maxDate) {
        dt = dt.withDayOfMonth(dt.getMonth().length(Year.isLeap(dt.getYear())))
    }else {
        dt = dt.withDayOfMonth(day);
    }
    return dt.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
919
6
Gpt3D_Clone919_6.java 1 14
Gpt3D_Clone919_6.java 15 25
----------------------------------------

public String getNextMonth (boolean maxDate) {
    Calendar calendar = Calendar.getInstance ();
    calendar.set (year, monthNo, 1);
    calendar.add (Calendar.MONTH, 1);
    if (maxDate) {
        int maxD = calendar.getActualMaximum (Calendar.DAY_OF_MONTH);
        calendar.set (Calendar.DAY_OF_MONTH, maxD);
    } else {
        calendar.set (Calendar.DAY_OF_MONTH, day);
    }
    String date = (calendar.get (Calendar.YEAR)) + "-" + (calendar.get (Calendar.MONTH) + 1) + "-" + calendar.get (Calendar.DAY_OF_MONTH);
    calendar.clear ();
    return date;
}
----------------------------------------

 public String getNextMonth (boolean maxDate) {
    DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
    Calendar calendar = Calendar.getInstance ();
    calendar.set (year, monthNo, day);
    calendar.add (Calendar.MONTH, 1);
    if (maxDate) 
        calendar.set(Calendar.DAY_OF_MONTH, calendar.getActualMaximum (Calendar.DAY_OF_MONTH));
    return df.format(calendar.getTime());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
919
7
Gpt3D_Clone919_7.java 1 14
Gpt3D_Clone919_7.java 15 25
----------------------------------------

public String getNextMonth (boolean maxDate) {
    Calendar calendar = Calendar.getInstance ();
    calendar.set (year, monthNo, 1);
    calendar.add (Calendar.MONTH, 1);
    if (maxDate) {
        int maxD = calendar.getActualMaximum (Calendar.DAY_OF_MONTH);
        calendar.set (Calendar.DAY_OF_MONTH, maxD);
    } else {
        calendar.set (Calendar.DAY_OF_MONTH, day);
    }
    String date = (calendar.get (Calendar.YEAR)) + "-" + (calendar.get (Calendar.MONTH) + 1) + "-" + calendar.get (Calendar.DAY_OF_MONTH);
    calendar.clear ();
    return date;
}
----------------------------------------

 public String getNextMonth (boolean maxDate) {
    LocalDateTime dt = LocalDateTime.of(year, monthNo+1, 1, 0, 0);
    if(maxDate){
        dt = dt.withDayOfMonth(dt.getMonth().length(Year.isLeap(dt.getYear())));
    }else{
        dt = dt.withDayOfMonth(day);
    }
    return dt.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
919
8
Gpt3D_Clone919_8.java 1 14
Gpt3D_Clone919_8.java 15 25
----------------------------------------

public String getNextMonth (boolean maxDate) {
    Calendar calendar = Calendar.getInstance ();
    calendar.set (year, monthNo, 1);
    calendar.add (Calendar.MONTH, 1);
    if (maxDate) {
        int maxD = calendar.getActualMaximum (Calendar.DAY_OF_MONTH);
        calendar.set (Calendar.DAY_OF_MONTH, maxD);
    } else {
        calendar.set (Calendar.DAY_OF_MONTH, day);
    }
    String date = (calendar.get (Calendar.YEAR)) + "-" + (calendar.get (Calendar.MONTH) + 1) + "-" + calendar.get (Calendar.DAY_OF_MONTH);
    calendar.clear ();
    return date;
}
----------------------------------------

 public String getNextMonth (boolean maxDate) {
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
    Calendar calendar = Calendar.getInstance ();
    calendar.set (year, monthNo, day);
    calendar.add (Calendar.MONTH, 1);
    if (maxDate) 
        calendar.set(Calendar.DAY_OF_MONTH, calendar.getActualMaximum (Calendar.DAY_OF_MONTH));
    return sdf.format(calendar.getTime());
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
919
9
Gpt3D_Clone919_9.java 1 14
Gpt3D_Clone919_9.java 15 25
----------------------------------------

public String getNextMonth (boolean maxDate) {
    Calendar calendar = Calendar.getInstance ();
    calendar.set (year, monthNo, 1);
    calendar.add (Calendar.MONTH, 1);
    if (maxDate) {
        int maxD = calendar.getActualMaximum (Calendar.DAY_OF_MONTH);
        calendar.set (Calendar.DAY_OF_MONTH, maxD);
    } else {
        calendar.set (Calendar.DAY_OF_MONTH, day);
    }
    String date = (calendar.get (Calendar.YEAR)) + "-" + (calendar.get (Calendar.MONTH) + 1) + "-" + calendar.get (Calendar.DAY_OF_MONTH);
    calendar.clear ();
    return date;
}
----------------------------------------

 public String getNextMonth (boolean maxDate) {
    Calendar calendar = Calendar.getInstance ();
    calendar.set (year, monthNo + 1, 1);
    if (maxDate) 
        calendar.set(Calendar.DAY_OF_MONTH, calendar.getActualMaximum (Calendar.DAY_OF_MONTH));
    else 
        calendar.set(Calendar.DAY_OF_MONTH, day);
    return (String.format("%d-%d-%d", calendar.get (Calendar.YEAR), calendar.get (Calendar.MONTH) + 1, calendar.get(Calendar.DAY_OF_MONTH)));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
922
1
Gpt3D_Clone922_1.java 1 22
Gpt3D_Clone922_1.java 23 44
----------------------------------------

public int solution (int [] A) {
    if (A.length == 2) return Math.abs (A [0] - A [1]);
    int [] s1 = new int [A.length - 1];
    s1 [0] = A [0];
    for (int i = 1;
    i < A.length - 1; i ++) {
        s1 [i] = s1 [i - 1] + A [i];
    }
    int [] s2 = new int [A.length - 1];
    s2 [A.length - 2] = A [A.length - 1];
    for (int i = A.length - 3;
    i >= 0; i --) {
        s2 [i] = s2 [i + 1] + A [i + 1];
    }
    int finalSum = Integer.MAX_VALUE;
    for (int j = 0;
    j < s1.length; j ++) {
        int sum = Math.abs (s1 [j] - s2 [j]);
        if (sum < finalSum) finalSum = sum;
    }
    return finalSum;
}
----------------------------------------

 public int solution (int [] A) {
    if (A.length == 2) return Math.abs (A [0] - A [1]);
    int [] left = new int [A.length - 1];
    left [0] = A [0];
    int [] right = new int [A.length - 1];
    right [A.length - 2] = A [A.length - 1];
    int finalSum = Integer.MAX_VALUE;
    int leftSum = 0, rightSum = 0;
    for (int i = 1; i < A.length - 1 ; i++) {
        rightSum = rightSum + A[i+1];
        left[i] = leftSum + A[i];
        right[A.length-i-2] = rightSum;
        int sum = Math.abs(left[i] - right[A.length-i-2]);
        finalSum = Math.min(finalSum, sum);
        leftSum = leftSum + A[i];
    }
    
    return finalSum;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
922
2
Gpt3D_Clone922_2.java 1 22
Gpt3D_Clone922_2.java 23 47
----------------------------------------

public int solution (int [] A) {
    if (A.length == 2) return Math.abs (A [0] - A [1]);
    int [] s1 = new int [A.length - 1];
    s1 [0] = A [0];
    for (int i = 1;
    i < A.length - 1; i ++) {
        s1 [i] = s1 [i - 1] + A [i];
    }
    int [] s2 = new int [A.length - 1];
    s2 [A.length - 2] = A [A.length - 1];
    for (int i = A.length - 3;
    i >= 0; i --) {
        s2 [i] = s2 [i + 1] + A [i + 1];
    }
    int finalSum = Integer.MAX_VALUE;
    for (int j = 0;
    j < s1.length; j ++) {
        int sum = Math.abs (s1 [j] - s2 [j]);
        if (sum < finalSum) finalSum = sum;
    }
    return finalSum;
}
----------------------------------------

 public int solution (int [] A) {
    if (A.length == 2) return Math.abs (A [0] - A [1]);
    int [] left = new int [A.length - 1];
    left [0] = A [0];
    int [] right = new int [A.length-1];
    right [A.length-2] = A [A.length-1];
    int finalSum = Integer.MAX_VALUE;
    
    for (int i = 0; i < A.length-1; i++) { 
        int sum = 0;
        for (int j = 0; j <= i; j++) {
            left[j] = left[j] + A[j];
        }
        for (int k = A.length - 1; k > i; k--) {
            right[k-1] = right[k] + A[k];
        }
        sum = Math.abs(left[i] - right[i]);
        finalSum = Math.min(finalSum, sum);
    }
    
    return finalSum;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
922
5
Gpt3D_Clone922_5.java 1 22
Gpt3D_Clone922_5.java 23 40
----------------------------------------

public int solution (int [] A) {
    if (A.length == 2) return Math.abs (A [0] - A [1]);
    int [] s1 = new int [A.length - 1];
    s1 [0] = A [0];
    for (int i = 1;
    i < A.length - 1; i ++) {
        s1 [i] = s1 [i - 1] + A [i];
    }
    int [] s2 = new int [A.length - 1];
    s2 [A.length - 2] = A [A.length - 1];
    for (int i = A.length - 3;
    i >= 0; i --) {
        s2 [i] = s2 [i + 1] + A [i + 1];
    }
    int finalSum = Integer.MAX_VALUE;
    for (int j = 0;
    j < s1.length; j ++) {
        int sum = Math.abs (s1 [j] - s2 [j]);
        if (sum < finalSum) finalSum = sum;
    }
    return finalSum;
}
----------------------------------------

 public int solution (int [] A) {
    if (A.length == 2) return Math.abs (A [0] - A [1]);
    int [] S = new int [A.length - 1];
    S[0] = A[0];
    int LeftSum = A[0];
    int RightSum = 0;
    int finalSum = Integer.MAX_VALUE;
    
    for (int i = 1; i < A.length; i++) {
        RightSum += A[i];
        S[i] = LeftSum - RightSum; 
        finalSum = Math.min(finalSum, Math.abs(S[i]));
        LeftSum += A[i];
    }
    return finalSum;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
922
6
Gpt3D_Clone922_6.java 1 22
Gpt3D_Clone922_6.java 23 42
----------------------------------------

public int solution (int [] A) {
    if (A.length == 2) return Math.abs (A [0] - A [1]);
    int [] s1 = new int [A.length - 1];
    s1 [0] = A [0];
    for (int i = 1;
    i < A.length - 1; i ++) {
        s1 [i] = s1 [i - 1] + A [i];
    }
    int [] s2 = new int [A.length - 1];
    s2 [A.length - 2] = A [A.length - 1];
    for (int i = A.length - 3;
    i >= 0; i --) {
        s2 [i] = s2 [i + 1] + A [i + 1];
    }
    int finalSum = Integer.MAX_VALUE;
    for (int j = 0;
    j < s1.length; j ++) {
        int sum = Math.abs (s1 [j] - s2 [j]);
        if (sum < finalSum) finalSum = sum;
    }
    return finalSum;
}
----------------------------------------

 public int solution (int [] A) {
    if (A.length == 2) return Math.abs (A [0] - A [1]);
    int [] left = new int [A.length];
    left [0] = A [0];
    int [] right = new int [A.length];
    right [A.length - 1] = A [A.length - 1];
    int finalSum = Integer.MAX_VALUE;
    
    for (int i = 1; i < A.length; i++) {
        left[i] = left[i-1]+A[i];
        right[A.length-i-1] = right[A.length-i]+A[A.length-i];
        int sum = Math.abs(left[i]-right[A.length-i-1]);
        finalSum = Math.min(finalSum, sum);
    }
    
    return finalSum;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
922
7
Gpt3D_Clone922_7.java 1 22
Gpt3D_Clone922_7.java 23 42
----------------------------------------

public int solution (int [] A) {
    if (A.length == 2) return Math.abs (A [0] - A [1]);
    int [] s1 = new int [A.length - 1];
    s1 [0] = A [0];
    for (int i = 1;
    i < A.length - 1; i ++) {
        s1 [i] = s1 [i - 1] + A [i];
    }
    int [] s2 = new int [A.length - 1];
    s2 [A.length - 2] = A [A.length - 1];
    for (int i = A.length - 3;
    i >= 0; i --) {
        s2 [i] = s2 [i + 1] + A [i + 1];
    }
    int finalSum = Integer.MAX_VALUE;
    for (int j = 0;
    j < s1.length; j ++) {
        int sum = Math.abs (s1 [j] - s2 [j]);
        if (sum < finalSum) finalSum = sum;
    }
    return finalSum;
}
----------------------------------------

 public int solution (int [] A) {
    if (A.length == 2) return Math.abs (A [0] - A [1]);
    int [] left = new int [A.length];
    left [0] = A [0];
    int finalSum = Integer.MAX_VALUE;
    
    for (int i = 1; i < A.length; i++) {
        left[i] = left[i-1]+A[i];
        int right = 0;
        for (int j = A.length - 1; j > i; j--) {
            right += A[j];
        }
        int sum = Math.abs(left[i]-right);
        finalSum = Math.min(finalSum, sum);
    }
    
    return finalSum;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
922
8
Gpt3D_Clone922_8.java 1 22
Gpt3D_Clone922_8.java 23 40
----------------------------------------

public int solution (int [] A) {
    if (A.length == 2) return Math.abs (A [0] - A [1]);
    int [] s1 = new int [A.length - 1];
    s1 [0] = A [0];
    for (int i = 1;
    i < A.length - 1; i ++) {
        s1 [i] = s1 [i - 1] + A [i];
    }
    int [] s2 = new int [A.length - 1];
    s2 [A.length - 2] = A [A.length - 1];
    for (int i = A.length - 3;
    i >= 0; i --) {
        s2 [i] = s2 [i + 1] + A [i + 1];
    }
    int finalSum = Integer.MAX_VALUE;
    for (int j = 0;
    j < s1.length; j ++) {
        int sum = Math.abs (s1 [j] - s2 [j]);
        if (sum < finalSum) finalSum = sum;
    }
    return finalSum;
}
----------------------------------------

 public int solution (int [] A) {
    if (A.length == 2) return Math.abs (A [0] - A [1]);
    int finalSum = Integer.MAX_VALUE;
    int leftSum = 0, rightSum = 0;
    for (int i = 0; i < A.length - 1; i++) {
        leftSum = leftSum + A[i];
        rightSum = 0;
        for (int j = i + 1; j < A.length; j++) {
            rightSum = rightSum + A[j];
            int sum = Math.abs(leftSum - rightSum);
            finalSum = Math.min(finalSum, sum);
        }
    }
    
    return finalSum;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
922
9
Gpt3D_Clone922_9.java 1 22
Gpt3D_Clone922_9.java 23 40
----------------------------------------

public int solution (int [] A) {
    if (A.length == 2) return Math.abs (A [0] - A [1]);
    int [] s1 = new int [A.length - 1];
    s1 [0] = A [0];
    for (int i = 1;
    i < A.length - 1; i ++) {
        s1 [i] = s1 [i - 1] + A [i];
    }
    int [] s2 = new int [A.length - 1];
    s2 [A.length - 2] = A [A.length - 1];
    for (int i = A.length - 3;
    i >= 0; i --) {
        s2 [i] = s2 [i + 1] + A [i + 1];
    }
    int finalSum = Integer.MAX_VALUE;
    for (int j = 0;
    j < s1.length; j ++) {
        int sum = Math.abs (s1 [j] - s2 [j]);
        if (sum < finalSum) finalSum = sum;
    }
    return finalSum;
}
----------------------------------------

 public int solution (int [] A) {
    if (A.length == 2) return Math.abs (A [0] - A [1]);
    int finalSum = Integer.MAX_VALUE;
    int leftSum = 0, rightSum = 0;
    for (int i = 0; i < A.length - 1; i++) {
        leftSum = leftSum + A[i];
        rightSum = 0;
        for (int j = A.length - 1; j > i; j--) {
            rightSum = rightSum + A[j];
            int sum = Math.abs(leftSum - rightSum);
            finalSum = Math.min(finalSum, sum);
        }
    }
    
    return finalSum;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
923
0
Gpt3D_Clone923_0.java 1 22
Gpt3D_Clone923_0.java 23 63
----------------------------------------

private void initData () {
    testData = new ArrayList < EventStatus > ();
    testData.add (new EventStatus ("Mach-1", 1477468500000L, 1, 0));
    testData.add (new EventStatus ("Mach-1", 1477472100000L, 2, 0));
    testData.add (new EventStatus ("Mach-1", 1477474200000L, 5, 0));
    testData.add (new EventStatus ("Mach-1", 1477476000000L, 3, 0));
    testData.add (new EventStatus ("Mach-1", 1477479600000L, 4, 0));
    testData.add (new EventStatus ("Mach-1", 1477486800000L, 1, 0));
    testData.add (new EventStatus ("Mach-2", 1477465200000L, 3, 1));
    testData.add (new EventStatus ("Mach-2", 1477472400000L, 2, 1));
    testData.add (new EventStatus ("Mach-2", 1477474200000L, 5, 1));
    testData.add (new EventStatus ("Mach-2", 1477476000000L, 2, 1));
    testData.add (new EventStatus ("Mach-2", 1477479600000L, 3, 1));
    testData.add (new EventStatus ("Mach-2", 1477486800000L, 4, 1));
    ArrayList < String > list = new ArrayList < > ();
    for (EventStatus eventStatus : testData) {
        if (list.contains (eventStatus.getName ())) continue;
        else list.add (eventStatus.getName ());
    }
    catArray = new String [list.size ()];
    catArray = list.toArray (catArray);
}
----------------------------------------

 private void initData(){
     testData = new ArrayList<EventStatus>();
     List<EventStatus> esValues = new ArrayList<>();
     EventStatus es1 = new EventStatus("Mach-1", 1477468500000L, 1, 0);
     esValues.add(es1); 
     EventStatus es2 = new EventStatus("Mach-1", 1477472100000L, 2, 0);
     esValues.add(es2); 
     EventStatus es3 = new EventStatus("Mach-1", 1477474200000L, 5, 0);
     esValues.add(es3); 
     EventStatus es4 = new EventStatus("Mach-1", 1477476000000L, 3, 0); 
     esValues.add(es4); 
     EventStatus es5 = new EventStatus("Mach-1", 1477479600000L, 4, 0);
     esValues.add(es5); 
     EventStatus es6 = new EventStatus("Mach-1", 1477486800000L, 1, 0);
     esValues.add(es6); 
     EventStatus es7 = new EventStatus("Mach-2", 1477465200000L, 3, 1);
     esValues.add(es7); 
     EventStatus es8 = new EventStatus("Mach-2", 1477472400000L, 2, 1);
     esValues.add(es8); 
     EventStatus es9 = new EventStatus("Mach-2", 1477474200000L, 5, 1);
     esValues.add(es9); 
     EventStatus es10 = new EventStatus("Mach-2", 1477476000000L, 2, 1);
     esValues.add(es10); 
     EventStatus es11 = new EventStatus("Mach-2", 1477479600000L, 3, 1);
     esValues.add(es11);
     EventStatus es12 = new EventStatus("Mach-2", 1477486800000L, 4, 1);
     esValues.add(es12);
     
     ArrayList <String> list = new ArrayList <>(); 
     for (EventStatus es : esValues) {
        if (list.contains (es.getName ())) continue;
        else {
            list.add(es.getName()); 
            testData.add(es); 
        }
     } 
     catArray = new String [list.size ()]; 
     catArray = list.toArray (catArray);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
923
1
Gpt3D_Clone923_1.java 1 22
Gpt3D_Clone923_1.java 23 50
----------------------------------------

private void initData () {
    testData = new ArrayList < EventStatus > ();
    testData.add (new EventStatus ("Mach-1", 1477468500000L, 1, 0));
    testData.add (new EventStatus ("Mach-1", 1477472100000L, 2, 0));
    testData.add (new EventStatus ("Mach-1", 1477474200000L, 5, 0));
    testData.add (new EventStatus ("Mach-1", 1477476000000L, 3, 0));
    testData.add (new EventStatus ("Mach-1", 1477479600000L, 4, 0));
    testData.add (new EventStatus ("Mach-1", 1477486800000L, 1, 0));
    testData.add (new EventStatus ("Mach-2", 1477465200000L, 3, 1));
    testData.add (new EventStatus ("Mach-2", 1477472400000L, 2, 1));
    testData.add (new EventStatus ("Mach-2", 1477474200000L, 5, 1));
    testData.add (new EventStatus ("Mach-2", 1477476000000L, 2, 1));
    testData.add (new EventStatus ("Mach-2", 1477479600000L, 3, 1));
    testData.add (new EventStatus ("Mach-2", 1477486800000L, 4, 1));
    ArrayList < String > list = new ArrayList < > ();
    for (EventStatus eventStatus : testData) {
        if (list.contains (eventStatus.getName ())) continue;
        else list.add (eventStatus.getName ());
    }
    catArray = new String [list.size ()];
    catArray = list.toArray (catArray);
}
----------------------------------------

  private void initData(){ 
     testData = new ArrayList<EventStatus>(); 
     ArrayList <String> list = new ArrayList <>(); 
     EventStatus[] esValues = {new EventStatus("Mach-1", 1477468500000L, 1, 0), 
                              new EventStatus("Mach-1", 1477472100000L, 2, 0),
                              new EventStatus("Mach-1", 1477474200000L, 5, 0),
                              new EventStatus("Mach-1", 1477476000000L, 3, 0),
                              new EventStatus("Mach-1", 1477479600000L, 4, 0),
                              new EventStatus("Mach-1", 1477486800000L, 1, 0),
                              new EventStatus("Mach-2", 1477465200000L, 3, 1),
                              new EventStatus("Mach-2", 1477472400000L, 2, 1),
                              new EventStatus("Mach-2", 1477474200000L, 5, 1),
                              new EventStatus("Mach-2", 1477476000000L, 2, 1),
                              new EventStatus("Mach-2", 1477479600000L, 3, 1),
                              new EventStatus("Mach-2", 1477486800000L, 4, 1)};
   
     for (EventStatus es : esValues) {
        if (list.contains (es.getName ())) continue;
        else 
            list.add(es.getName()); 
            testData.add(es); 
       } 
       
     catArray = new String [list.size ()]; 
     catArray = list.toArray (catArray);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
923
2
Gpt3D_Clone923_2.java 1 22
Gpt3D_Clone923_2.java 23 46
----------------------------------------

private void initData () {
    testData = new ArrayList < EventStatus > ();
    testData.add (new EventStatus ("Mach-1", 1477468500000L, 1, 0));
    testData.add (new EventStatus ("Mach-1", 1477472100000L, 2, 0));
    testData.add (new EventStatus ("Mach-1", 1477474200000L, 5, 0));
    testData.add (new EventStatus ("Mach-1", 1477476000000L, 3, 0));
    testData.add (new EventStatus ("Mach-1", 1477479600000L, 4, 0));
    testData.add (new EventStatus ("Mach-1", 1477486800000L, 1, 0));
    testData.add (new EventStatus ("Mach-2", 1477465200000L, 3, 1));
    testData.add (new EventStatus ("Mach-2", 1477472400000L, 2, 1));
    testData.add (new EventStatus ("Mach-2", 1477474200000L, 5, 1));
    testData.add (new EventStatus ("Mach-2", 1477476000000L, 2, 1));
    testData.add (new EventStatus ("Mach-2", 1477479600000L, 3, 1));
    testData.add (new EventStatus ("Mach-2", 1477486800000L, 4, 1));
    ArrayList < String > list = new ArrayList < > ();
    for (EventStatus eventStatus : testData) {
        if (list.contains (eventStatus.getName ())) continue;
        else list.add (eventStatus.getName ());
    }
    catArray = new String [list.size ()];
    catArray = list.toArray (catArray);
}
----------------------------------------

 private void initData(){
    testData = new ArrayList<EventStatus>();
    EventStatus[] events = {new EventStatus("Mach-1", 1477468500000L, 1, 0), 
                            new EventStatus("Mach-1", 1477472100000L, 2, 0),
                            new EventStatus("Mach-1", 1477474200000L, 5, 0),
                            new EventStatus("Mach-1", 1477476000000L, 3, 0),
                            new EventStatus("Mach-1", 1477479600000L, 4, 0),
                            new EventStatus("Mach-1", 1477486800000L, 1, 0), 
                            new EventStatus("Mach-2", 1477465200000L, 3, 1), 
                            new EventStatus("Mach-2", 1477472400000L, 2, 1), 
                            new EventStatus("Mach-2", 1477474200000L, 5, 1), 
                            new EventStatus("Mach-2", 1477476000000L, 2, 1), 
                            new EventStatus("Mach-2", 1477479600000L, 3, 1), 
                            new EventStatus("Mach-2", 1477486800000L, 4, 1)};
    ArrayList <String> list = new ArrayList <>();
    for (EventStatus event : events) {
        if (list.contains (event.getName ())) continue;
        else list.add (event.getName ());
    }
    catArray = new String [list.size ()];
    catArray = list.toArray (catArray);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
925
0
Gpt3D_Clone925_0.java 1 9
Gpt3D_Clone925_0.java 10 21
----------------------------------------

public static boolean isPrime (int n) {
    if ((n & 1) == 0) {
        return n == 2;
    }
    if (n < 9) {
        return n > 1;
    }
    return isStrongProbablePrime (n, 2) && isStrongProbablePrime (n, 7) && isStrongProbablePrime (n, 61);
}
----------------------------------------

 public static boolean isPrime(int n) {
       boolean ok = (n & 1) != 0;
       if (n == 2) {
           return ok;
       }
       if (n < 9 && n > 1) {
           return ok;
       }
       return isStrongProbablePrime(n, 2) && isStrongProbablePrime(n, 7) && isStrongProbablePrime(n, 61);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
925
1
Gpt3D_Clone925_1.java 1 9
Gpt3D_Clone925_1.java 10 20
----------------------------------------

public static boolean isPrime (int n) {
    if ((n & 1) == 0) {
        return n == 2;
    }
    if (n < 9) {
        return n > 1;
    }
    return isStrongProbablePrime (n, 2) && isStrongProbablePrime (n, 7) && isStrongProbablePrime (n, 61);
}
----------------------------------------

 public static boolean isPrime(int n) {
       if (n == 2 && (n & 1) == 0) {
           return true;
       }
       if (n < 9 && n > 1 && (n & 1) != 0) {
           return true;
       }
       return isStrongProbablePrime(n, 2) && isStrongProbablePrime(n, 7) && isStrongProbablePrime(n, 61);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
925
2
Gpt3D_Clone925_2.java 1 9
Gpt3D_Clone925_2.java 10 20
----------------------------------------

public static boolean isPrime (int n) {
    if ((n & 1) == 0) {
        return n == 2;
    }
    if (n < 9) {
        return n > 1;
    }
    return isStrongProbablePrime (n, 2) && isStrongProbablePrime (n, 7) && isStrongProbablePrime (n, 61);
}
----------------------------------------

 public static boolean isPrime(int n) {
        if (n == 2) {
            return (n & 1) == 0;
        }
        if (1 < n && n < 9) {
            return (n & 1) != 0;
        }
        return isStrongProbablePrime(n, 2) && isStrongProbablePrime(n, 7) && isStrongProbablePrime(n, 61);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
925
3
Gpt3D_Clone925_3.java 1 9
Gpt3D_Clone925_3.java 10 20
----------------------------------------

public static boolean isPrime (int n) {
    if ((n & 1) == 0) {
        return n == 2;
    }
    if (n < 9) {
        return n > 1;
    }
    return isStrongProbablePrime (n, 2) && isStrongProbablePrime (n, 7) && isStrongProbablePrime (n, 61);
}
----------------------------------------

 public static boolean isPrime(int n) {
       if (n == 2) {
           return true;
       }
       if (n < 9) {
           return (n & 1) == 0 && n > 1;
       }
       return isStrongProbablePrime(n, 2) && isStrongProbablePrime(n, 7) && isStrongProbablePrime(n, 61);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
925
4
Gpt3D_Clone925_4.java 1 9
Gpt3D_Clone925_4.java 10 20
----------------------------------------

public static boolean isPrime (int n) {
    if ((n & 1) == 0) {
        return n == 2;
    }
    if (n < 9) {
        return n > 1;
    }
    return isStrongProbablePrime (n, 2) && isStrongProbablePrime (n, 7) && isStrongProbablePrime (n, 61);
}
----------------------------------------

 public static boolean isPrime(int n) {
       if (n == 2) {
           return true;
       }
       if (n < 9 && n > 1) {
           return (n & 1) != 0;
       }
       return isStrongProbablePrime(n, 2) && isStrongProbablePrime(n, 7) && isStrongProbablePrime(n, 61);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
925
5
Gpt3D_Clone925_5.java 1 9
Gpt3D_Clone925_5.java 10 20
----------------------------------------

public static boolean isPrime (int n) {
    if ((n & 1) == 0) {
        return n == 2;
    }
    if (n < 9) {
        return n > 1;
    }
    return isStrongProbablePrime (n, 2) && isStrongProbablePrime (n, 7) && isStrongProbablePrime (n, 61);
}
----------------------------------------

 public static boolean isPrime(int n) {
       if ((n & 1) == 0 && n == 2) {
           return true;
       }
       if (n < 9 && n > 1 && (n & 1) != 0) {
           return true;
       }
       return isStrongProbablePrime(n, 2) && isStrongProbablePrime(n, 7) && isStrongProbablePrime(n, 61);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
925
6
Gpt3D_Clone925_6.java 1 9
Gpt3D_Clone925_6.java 10 20
----------------------------------------

public static boolean isPrime (int n) {
    if ((n & 1) == 0) {
        return n == 2;
    }
    if (n < 9) {
        return n > 1;
    }
    return isStrongProbablePrime (n, 2) && isStrongProbablePrime (n, 7) && isStrongProbablePrime (n, 61);
}
----------------------------------------

 public static boolean isPrime(int n) {
       if (n == 2 && (n & 1) == 0) {
           return true;
       }
       if (1 < n && n < 9 && (n & 1) != 0) {
           return true;
       }
       return isStrongProbablePrime(n, 2) && isStrongProbablePrime(n, 7) && isStrongProbablePrime(n, 61);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
925
7
Gpt3D_Clone925_7.java 1 9
Gpt3D_Clone925_7.java 10 21
----------------------------------------

public static boolean isPrime (int n) {
    if ((n & 1) == 0) {
        return n == 2;
    }
    if (n < 9) {
        return n > 1;
    }
    return isStrongProbablePrime (n, 2) && isStrongProbablePrime (n, 7) && isStrongProbablePrime (n, 61);
}
----------------------------------------

 public static boolean isPrime(int n) {
       if (n == 2) {
           return true;
       }
       if (n < 9) {
           return (n & 1) != 0 && n > 1;
       }
       return isStrongProbablePrime(n, 2) && isStrongProbablePrime(n, 7) && isStrongProbablePrime(n, 61);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
925
8
Gpt3D_Clone925_8.java 1 9
Gpt3D_Clone925_8.java 10 20
----------------------------------------

public static boolean isPrime (int n) {
    if ((n & 1) == 0) {
        return n == 2;
    }
    if (n < 9) {
        return n > 1;
    }
    return isStrongProbablePrime (n, 2) && isStrongProbablePrime (n, 7) && isStrongProbablePrime (n, 61);
}
----------------------------------------

 public static boolean isPrime(int n) {
       if (2 == n) {
           return true;
       }
       if (n < 9 && n > 1) {
           return (n & 1) != 0;
       }
       return isStrongProbablePrime(n, 2) && isStrongProbablePrime(n, 7) && isStrongProbablePrime(n, 61);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
925
9
Gpt3D_Clone925_9.java 1 9
Gpt3D_Clone925_9.java 10 20
----------------------------------------

public static boolean isPrime (int n) {
    if ((n & 1) == 0) {
        return n == 2;
    }
    if (n < 9) {
        return n > 1;
    }
    return isStrongProbablePrime (n, 2) && isStrongProbablePrime (n, 7) && isStrongProbablePrime (n, 61);
}
----------------------------------------

 public static boolean isPrime(int n) {
       if (n == 2) {
           return (n & 1) == 0;
       }
       if (1 < n && n < 9) {
           return (n & 1) != 0 && n > 1;
       }
       return isStrongProbablePrime(n, 2) && isStrongProbablePrime(n, 7) && isStrongProbablePrime(n, 61);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
926
0
Gpt3D_Clone926_0.java 1 14
Gpt3D_Clone926_0.java 15 29
----------------------------------------

public static void main (String [] args) {
    Scanner scan = new Scanner (System.in);
    ArrayList < Integer > list = new ArrayList < Integer > ();
    System.out.print ("Enter integers please ");
    System.out.println ("(EOF or non-integer to terminate): ");
    while (scan.hasNextInt ()) {
        list.add (scan.nextInt ());
    }
    Integer [] nums = list.toArray (new Integer [0]);
    for (int i = 0;
    i < nums.length; i ++) {
        System.out.println (nums [i]);
    }
}
----------------------------------------

public static void main(String[] args) {
    List<Integer> list = new ArrayList<Integer>();
    System.out.println("Enter integers please: (EOF or non-integer to terminate):");
    Scanner read = new Scanner(System.in);
    while(read.hasNextInt()) {
        list.add(read.nextInt());
    }
    Integer[] a = new Integer[list.size()];
    list.toArray(a);
    for(Integer i: a) {
        System.out.println(i);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
926
4
Gpt3D_Clone926_4.java 1 14
Gpt3D_Clone926_4.java 15 30
----------------------------------------

public static void main (String [] args) {
    Scanner scan = new Scanner (System.in);
    ArrayList < Integer > list = new ArrayList < Integer > ();
    System.out.print ("Enter integers please ");
    System.out.println ("(EOF or non-integer to terminate): ");
    while (scan.hasNextInt ()) {
        list.add (scan.nextInt ());
    }
    Integer [] nums = list.toArray (new Integer [0]);
    for (int i = 0;
    i < nums.length; i ++) {
        System.out.println (nums [i]);
    }
}
----------------------------------------

public static void main(String[] args) {
    List<Integer> values = new ArrayList<>();
    System.out.println("Enter integers please: (EOF or non-integer to terminate):");
    
    Scanner sc = new Scanner(System.in);
    while(sc.hasNextInt()) {
        values.add(sc.nextInt());
    }
    
    Integer[] nums = values.toArray(new Integer[0]);
    for(Integer i: nums) {
        System.out.println(i);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
926
7
Gpt3D_Clone926_7.java 1 14
Gpt3D_Clone926_7.java 15 30
----------------------------------------

public static void main (String [] args) {
    Scanner scan = new Scanner (System.in);
    ArrayList < Integer > list = new ArrayList < Integer > ();
    System.out.print ("Enter integers please ");
    System.out.println ("(EOF or non-integer to terminate): ");
    while (scan.hasNextInt ()) {
        list.add (scan.nextInt ());
    }
    Integer [] nums = list.toArray (new Integer [0]);
    for (int i = 0;
    i < nums.length; i ++) {
        System.out.println (nums [i]);
    }
}
----------------------------------------

public static void main(String[] args) {
    ArrayList<Integer> list = new ArrayList<>();
    System.out.println("Enter integers please: (EOF or non-integer to terminate):");
    
    Scanner in = new Scanner(System.in);
    while(in.hasNextInt()) {
        list.add(in.nextInt());
    }
    
    Integer[] array = list.toArray(new Integer[list.size()]);
    for(Integer x : array) {
        System.out.println(x);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
92
3
Gpt3D_Clone92_3.java 1 12
Gpt3D_Clone92_3.java 13 25
----------------------------------------

public void type (String text) {
    char c;
    for (int ii = 0;
    ii < text.length (); ii ++) {
        c = text.charAt (ii);
        if (c <= 31 || c == 129) {
            pressControlKey (c);
        } else {
            typeAsciiCode (c);
        }
    }
}
----------------------------------------

 public void type(String text) {
   int i;
   for(i = 0; i < text.length();) {
       if(text.charAt(i) < 31 && text.charAt(i) != 129) {
           pressControlKey(text.charAt(i));
       } else {
           typeAsciiCode(text.charAt(i));
       }
       i++;
   }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
931
0
Gpt3D_Clone931_0.java 1 9
Gpt3D_Clone931_0.java 10 23
----------------------------------------

private void expandAllNodes (JTree tree) {
    int j = tree.getRowCount ();
    int i = 0;
    while (i < j) {
        tree.expandRow (i);
        i += 1;
        j = tree.getRowCount ();
    }
}
----------------------------------------

 private void expandAllNodes (JTree tree) {
    Stack<TreePath> stack = new Stack<>();
    stack.push(tree.getPathForRow(0));
 
    while (!stack.isEmpty()) {
        TreePath path = stack.pop();
        tree.expandPath(path);
        for (int row = 0; row < tree.getRowCount (path); row++) {
            stack.push(tree.getPathForRow(row));
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
931
1
Gpt3D_Clone931_1.java 1 9
Gpt3D_Clone931_1.java 10 20
----------------------------------------

private void expandAllNodes (JTree tree) {
    int j = tree.getRowCount ();
    int i = 0;
    while (i < j) {
        tree.expandRow (i);
        i += 1;
        j = tree.getRowCount ();
    }
}
----------------------------------------

 private void expandAllNodes (JTree tree) {
    TreeNode root = (TreeNode) tree.getModel().getRoot();
    Enumeration e = root.children();
    while (e.hasMoreElements()) {
        TreeNode node = (TreeNode) e.nextElement();
        TreePath tp = new TreePath(node.getPath());
        tree.expandRow (tree.getRowForPath(tp));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
931
2
Gpt3D_Clone931_2.java 1 9
Gpt3D_Clone931_2.java 10 20
----------------------------------------

private void expandAllNodes (JTree tree) {
    int j = tree.getRowCount ();
    int i = 0;
    while (i < j) {
        tree.expandRow (i);
        i += 1;
        j = tree.getRowCount ();
    }
}
----------------------------------------

 private void expandAllNodes (JTree tree) {
    int row = 0;
    while (row < tree.getRowCount()) {
        if (tree.isCollapsed(row)) { //checks if row is collapsed
            tree.expandRow (row);
        }
        row++;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
931
3
Gpt3D_Clone931_3.java 1 9
Gpt3D_Clone931_3.java 10 18
----------------------------------------

private void expandAllNodes (JTree tree) {
    int j = tree.getRowCount ();
    int i = 0;
    while (i < j) {
        tree.expandRow (i);
        i += 1;
        j = tree.getRowCount ();
    }
}
----------------------------------------

 private void expandAllNodes (JTree tree) {
    int row = 0;
    while (row < tree.getRowCount()) {
        tree.expandRow (row);
        row++;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
931
4
Gpt3D_Clone931_4.java 1 9
Gpt3D_Clone931_4.java 10 18
----------------------------------------

private void expandAllNodes (JTree tree) {
    int j = tree.getRowCount ();
    int i = 0;
    while (i < j) {
        tree.expandRow (i);
        i += 1;
        j = tree.getRowCount ();
    }
}
----------------------------------------

 private void expandAllNodes (JTree tree) {
    int row = 0;
    while (row < tree.getRowCount()) {
        tree.expandPath(tree.getPathForRow(row)); 
        row++;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
931
5
Gpt3D_Clone931_5.java 1 9
Gpt3D_Clone931_5.java 10 18
----------------------------------------

private void expandAllNodes (JTree tree) {
    int j = tree.getRowCount ();
    int i = 0;
    while (i < j) {
        tree.expandRow (i);
        i += 1;
        j = tree.getRowCount ();
    }
}
----------------------------------------

private void expandAllNodes(JTree tree) {
    Iterator<TreePath> iterator = tree.getBorderPathsIterator(null);
    while (iterator.hasNext()) {
        TreePath path = iterator.next();
        tree.expandPath(path);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
931
6
Gpt3D_Clone931_6.java 1 9
Gpt3D_Clone931_6.java 10 18
----------------------------------------

private void expandAllNodes (JTree tree) {
    int j = tree.getRowCount ();
    int i = 0;
    while (i < j) {
        tree.expandRow (i);
        i += 1;
        j = tree.getRowCount ();
    }
}
----------------------------------------

 private void expandAllNodes (JTree tree) {
    int row = 0;
    while (row < tree.getRowCount()) {
        tree.expandPath(tree.getPathForRow(row + 1)); 
        row++;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
931
7
Gpt3D_Clone931_7.java 1 9
Gpt3D_Clone931_7.java 10 18
----------------------------------------

private void expandAllNodes (JTree tree) {
    int j = tree.getRowCount ();
    int i = 0;
    while (i < j) {
        tree.expandRow (i);
        i += 1;
        j = tree.getRowCount ();
    }
}
----------------------------------------

 private void expandAllNodes(JTree tree) {
    int rows = 0;
    while (rows < tree.getRowCount()) {
        rows++;
        tree.expandRow(rows);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
931
8
Gpt3D_Clone931_8.java 1 9
Gpt3D_Clone931_8.java 10 16
----------------------------------------

private void expandAllNodes (JTree tree) {
    int j = tree.getRowCount ();
    int i = 0;
    while (i < j) {
        tree.expandRow (i);
        i += 1;
        j = tree.getRowCount ();
    }
}
----------------------------------------

 private void expandAllNodes (JTree tree) {
    for (int row = 0; row < tree.getRowCount (); row++) {
        tree.expandRow (row);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
932
0
Gpt3D_Clone932_0.java 1 16
Gpt3D_Clone932_0.java 17 35
----------------------------------------

public void addString (String myString) {
    String separator = " AND ";
    StringBuilder sb = new StringBuilder ();
    sb.append ('(');
    boolean needSeparator = false;
    for (String string : myString) {
        if (needSeparator) {
            sb.append (separator);
        } else {
            needSeparator = true;
        }
        sb.append (string);
    }
    sb.append (')');
    System.out.println (sb);
}
----------------------------------------

  public void addString (String myString) {
        int i=0;
        String sep = " AND ";
        String addin = "(";
        for (String str : myString)
        {
            if(i>0)
            {
                addin += sep;
            }
            addin+= str;
            i++;
        }
        addin += ")";
        System.out.println(addin);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
932
1
Gpt3D_Clone932_1.java 1 16
Gpt3D_Clone932_1.java 17 35
----------------------------------------

public void addString (String myString) {
    String separator = " AND ";
    StringBuilder sb = new StringBuilder ();
    sb.append ('(');
    boolean needSeparator = false;
    for (String string : myString) {
        if (needSeparator) {
            sb.append (separator);
        } else {
            needSeparator = true;
        }
        sb.append (string);
    }
    sb.append (')');
    System.out.println (sb);
}
----------------------------------------

   public void addString (String myString) {
        String separator = " AND ";
        StringBuilder sb = new StringBuilder("(");
        List<String> strings = Arrays.asList(myString);
        IntStream
                .range(0, strings.size())
                .forEach(i -> {
                    if (i > 0) {
                        sb.append(separator);
                    }
                    sb.append(myString[i]);
                });
        sb.append(")");
        System.out.println (sb);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
932
2
Gpt3D_Clone932_2.java 1 16
Gpt3D_Clone932_2.java 17 35
----------------------------------------

public void addString (String myString) {
    String separator = " AND ";
    StringBuilder sb = new StringBuilder ();
    sb.append ('(');
    boolean needSeparator = false;
    for (String string : myString) {
        if (needSeparator) {
            sb.append (separator);
        } else {
            needSeparator = true;
        }
        sb.append (string);
    }
    sb.append (')');
    System.out.println (sb);
}
----------------------------------------

   public void addString (String myString) {
        String sep = " AND ";
        StringBuilder sb = new StringBuilder("(");
        int n = myString.length;
        if (n > 0)
        {
            sb.append(myString[0]);
            for (int i = 1; i < n; i++)
            {
                sb.append(sep);
                sb.append(myString[i]);
            }
        }
        sb.append(")");
        System.out.println(sb);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
932
3
Gpt3D_Clone932_3.java 1 16
Gpt3D_Clone932_3.java 17 35
----------------------------------------

public void addString (String myString) {
    String separator = " AND ";
    StringBuilder sb = new StringBuilder ();
    sb.append ('(');
    boolean needSeparator = false;
    for (String string : myString) {
        if (needSeparator) {
            sb.append (separator);
        } else {
            needSeparator = true;
        }
        sb.append (string);
    }
    sb.append (')');
    System.out.println (sb);
}
----------------------------------------

     public void addString (String myString) {
        String delimiter = " AND ";
        StringBuilder sb  = new StringBuilder ();
        sb.append ("(");
        for (int i = 0; i < myString.length; i++)
        {
            if (i > 0) {
                sb.append (delimiter);
            }
            sb.append (myString[i]);
        }
        sb.append (")");
        System.out.println (sb);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
932
4
Gpt3D_Clone932_4.java 1 16
Gpt3D_Clone932_4.java 17 29
----------------------------------------

public void addString (String myString) {
    String separator = " AND ";
    StringBuilder sb = new StringBuilder ();
    sb.append ('(');
    boolean needSeparator = false;
    for (String string : myString) {
        if (needSeparator) {
            sb.append (separator);
        } else {
            needSeparator = true;
        }
        sb.append (string);
    }
    sb.append (')');
    System.out.println (sb);
}
----------------------------------------

  public void addString (String myString) {
        String delim = " AND ";
        StringBuilder sb = new StringBuilder();
        sb.append("(");
        Arrays.asList(myString).forEach(str -> sb.append(str + delim));
        sb.delete(sb.length()-delim.length(), sb.length());
        sb.append(")");
        System.out.println(sb);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
932
5
Gpt3D_Clone932_5.java 1 16
Gpt3D_Clone932_5.java 17 33
----------------------------------------

public void addString (String myString) {
    String separator = " AND ";
    StringBuilder sb = new StringBuilder ();
    sb.append ('(');
    boolean needSeparator = false;
    for (String string : myString) {
        if (needSeparator) {
            sb.append (separator);
        } else {
            needSeparator = true;
        }
        sb.append (string);
    }
    sb.append (')');
    System.out.println (sb);
}
----------------------------------------

   public void addString (String myString) {
        String join = " AND ";
        String result = "";
        for (String str : myString)
        {
            if (result == "")
                result += str;
            else
                result += join + str;
        }
        result = "(" + result + ")";
        System.out.println(result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
932
6
Gpt3D_Clone932_6.java 1 16
Gpt3D_Clone932_6.java 17 28
----------------------------------------

public void addString (String myString) {
    String separator = " AND ";
    StringBuilder sb = new StringBuilder ();
    sb.append ('(');
    boolean needSeparator = false;
    for (String string : myString) {
        if (needSeparator) {
            sb.append (separator);
        } else {
            needSeparator = true;
        }
        sb.append (string);
    }
    sb.append (')');
    System.out.println (sb);
}
----------------------------------------

  public void addString (String myString) {
        String sep = " AND ";
        String result = "( ";
        for (String str : myString)
            result+= str + sep;
        result = result.substring(0, result.length()-5);
        result += " )";
        System.out.println(result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
932
7
Gpt3D_Clone932_7.java 1 16
Gpt3D_Clone932_7.java 17 25
----------------------------------------

public void addString (String myString) {
    String separator = " AND ";
    StringBuilder sb = new StringBuilder ();
    sb.append ('(');
    boolean needSeparator = false;
    for (String string : myString) {
        if (needSeparator) {
            sb.append (separator);
        } else {
            needSeparator = true;
        }
        sb.append (string);
    }
    sb.append (')');
    System.out.println (sb);
}
----------------------------------------

  public void addString (String myString) {
        String delimiter = " AND ";
        String result = "(";
        result = Arrays.stream(myString).collect(Collectors.joining(delimiter));
        result += ")";
        System.out.println(result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
932
8
Gpt3D_Clone932_8.java 1 16
Gpt3D_Clone932_8.java 17 27
----------------------------------------

public void addString (String myString) {
    String separator = " AND ";
    StringBuilder sb = new StringBuilder ();
    sb.append ('(');
    boolean needSeparator = false;
    for (String string : myString) {
        if (needSeparator) {
            sb.append (separator);
        } else {
            needSeparator = true;
        }
        sb.append (string);
    }
    sb.append (')');
    System.out.println (sb);
}
----------------------------------------

   public void addString (String myString) {
        StringJoiner sj = new StringJoiner(" AND ", "(", ")");
        for (String str : myString)
        {
            sj.add(str);
        }
        String str = sj.toString();
        System.out.println(str);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
932
9
Gpt3D_Clone932_9.java 1 16
Gpt3D_Clone932_9.java 17 23
----------------------------------------

public void addString (String myString) {
    String separator = " AND ";
    StringBuilder sb = new StringBuilder ();
    sb.append ('(');
    boolean needSeparator = false;
    for (String string : myString) {
        if (needSeparator) {
            sb.append (separator);
        } else {
            needSeparator = true;
        }
        sb.append (string);
    }
    sb.append (')');
    System.out.println (sb);
}
----------------------------------------

  public void addString (String myString) {
        String join = " AND ";
        String result = Arrays.stream(myString).collect(Collectors.joining(join, "(", ")"));
        System.out.println(result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
936
3
Gpt3D_Clone936_3.java 1 19
Gpt3D_Clone936_3.java 20 69
----------------------------------------

public static void main (String [] args) throws Exception {
    int loops = 1000 * 1000;
    Object object = new Object ();
    long start = System.nanoTime ();
    Object s;
    testMethodCall (object, loops);
    long regularCalls = System.nanoTime () - start;
    java.lang.reflect.Method method = Object.class.getMethod ("getClass");
    method.setAccessible (true);
    start = System.nanoTime ();
    testInvoke (object, loops, method);
    long reflectiveCalls = System.nanoTime () - start;
    start = System.nanoTime ();
    testGetMethodInvoke (object, loops);
    long reflectiveLookup = System.nanoTime () - start;
    System.out.println ("Average regular method calls:" + regularCalls / loops + " ns.");
    System.out.println ("Average reflective method calls without lookup:" + reflectiveCalls / loops + " ns.");
    System.out.println ("Average reflective method calls with lookup:" + reflectiveLookup / loops + " ns.");
}
----------------------------------------

 public static void main(String[] args) throws Exception
    {   
    int loops = 1000 *1000;
    Object object = new Object ();
    long startPoint;
    long regularAverage;
    long reflectionAverage;
    long reflectiveLookup;
    
        startPoint = System.nanoTime();
        object = invokeRegularMethod(object,loops);
        regularAverage = System.nanoTime() - startPoint;
        java.lang.reflect.Method method = Object.class.getDeclaredMethod("getClass");
        method.setAccessible(true);
        startPoint = System.nanoTime();
        invokeReflectiveMethod(object,loops,method);
        reflectionAverage = System.nanoTime() - startPoint;
        startPoint = System.nanoTime();
        invokeReflectiveMethodWithLookUp(object, loops);
        reflectiveLookup = System.nanoTime() - startPoint;
        System.out.println("Average regular method calls :" + regularAverage/loops+ " ns.");
        System.out.println("Average reflective method calls without lookup:"+ reflectionAverage/loops+" ns.");
        System.out.println("Average reflective method calls with lookup :" + reflectiveLookup/loops+" ns.");
    }
 public static void main(String[] args) throws Exception {
    int loops = 1000000;
    AnObject object = new AnObject ();
    long startTime;
    long regularCallsTime;
    long reflectiveCallsTime;
    long reflectiveLookupTime;
    
    startTime = System.nanoTime();
    object = testInvokeRegularMethod(object, loops);
    regularCallsTime = System.nanoTime() - startTime;
    java.lang.reflect.Method method = AnObject.class.getDeclaredMethod("getState");
    method.setAccessible(true);
    startTime = System.nanoTime();
    object = testInvokeReflectiveMethod(object, loops, method);
    reflectiveCallsTime = System.nanoTime() - startTime;
    startTime = System.nanoTime();
    object = testInvokeReflectiveMethodWithLookup(object, loops);
    reflectiveLookupTime = System.nanoTime() - startTime;
    System.out.println("Average regular method calls: " + regularCallsTime/loops +" ns.");
    System.out.println("Average reflective method calls without lookup: "+ reflectiveCallsTime/loops +" ns.");
    System.out.println("Average reflective method calls with lookup: "+ reflectiveLookupTime/loops +" ns.");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
938
0
Gpt3D_Clone938_0.java 1 12
Gpt3D_Clone938_0.java 13 29
----------------------------------------

private static String join (String delimiter, String...parts) {
    StringBuilder builder = new StringBuilder ();
    for (String part : parts) {
        if (! isEmpty (part)) {
            if (builder.length () > 0) {
                builder.append (delimiter);
            }
            builder.append (part);
        }
    }
    return builder.toString ();
}
----------------------------------------

 private static String join (String delimiter, String...parts) {
    if (parts == null || parts.length == 0) {
        return '';
    }
    StringBuilder builder = new StringBuilder ();
    for (int i = 0; i < parts.length; i++) {
        if (! isEmpty (parts[i])) {
            if (i > 0) {
                builder.append (delimiter);
            }
            builder.append (parts[i]);
        }
    }
    return builder.toString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
938
1
Gpt3D_Clone938_1.java 1 12
Gpt3D_Clone938_1.java 13 29
----------------------------------------

private static String join (String delimiter, String...parts) {
    StringBuilder builder = new StringBuilder ();
    for (String part : parts) {
        if (! isEmpty (part)) {
            if (builder.length () > 0) {
                builder.append (delimiter);
            }
            builder.append (part);
        }
    }
    return builder.toString ();
}
----------------------------------------

  private static String join (String delimiter, String...parts) {
    if (parts == null || parts.length == 0) {
        return '';
    }
    String joinedString = '';
    for (int i = 0; i < parts.length; i++) {
        if (! isEmpty (parts[i])) {
            if (i > 0) {
                joinedString += delimiter;
            }
            joinedString += parts[i];
        }
    }
    return joinedString;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
938
2
Gpt3D_Clone938_2.java 1 12
Gpt3D_Clone938_2.java 13 34
----------------------------------------

private static String join (String delimiter, String...parts) {
    StringBuilder builder = new StringBuilder ();
    for (String part : parts) {
        if (! isEmpty (part)) {
            if (builder.length () > 0) {
                builder.append (delimiter);
            }
            builder.append (part);
        }
    }
    return builder.toString ();
}
----------------------------------------

  private static String join(String delimiter, String... parts) {
    if(parts == null || parts.length == 0) {
        return "";
    }
    String[] filteredParts = Arrays.stream(parts)
            .filter(s -> !isEmpty(s))
            .toArray(String[]::new);
    
    if (filteredParts.length == 0) {
        return "";
    }
    StringJoiner joiner = new StringJoiner(delimiter);
    Arrays.stream(filteredParts).forEach(joiner::add);
    return joiner.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
938
3
Gpt3D_Clone938_3.java 1 12
Gpt3D_Clone938_3.java 13 27
----------------------------------------

private static String join (String delimiter, String...parts) {
    StringBuilder builder = new StringBuilder ();
    for (String part : parts) {
        if (! isEmpty (part)) {
            if (builder.length () > 0) {
                builder.append (delimiter);
            }
            builder.append (part);
        }
    }
    return builder.toString ();
}
----------------------------------------

  private static String join (String delimiter, String...parts) {
    String joinedString = '';
    for (String part : parts) {
        if (! isEmpty (part)) {
            if (String.join ('', joinedString).length () > 0) {
                joinedString = String.join (delimiter, joinedString, part);
            } else {
                joinedString = part;
            }
        }
    }
    return joinedString;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
938
4
Gpt3D_Clone938_4.java 1 12
Gpt3D_Clone938_4.java 13 25
----------------------------------------

private static String join (String delimiter, String...parts) {
    StringBuilder builder = new StringBuilder ();
    for (String part : parts) {
        if (! isEmpty (part)) {
            if (builder.length () > 0) {
                builder.append (delimiter);
            }
            builder.append (part);
        }
    }
    return builder.toString ();
}
----------------------------------------

 private static String join (String delimiter, String...parts) {
    String result = "";
    for(String part : parts) {
        if (!isEmpty(part)){ 
            if (result.length() != 0) 
                result = result + delimiter; 
            result = result + part; 
        }
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
938
6
Gpt3D_Clone938_6.java 1 12
Gpt3D_Clone938_6.java 13 20
----------------------------------------

private static String join (String delimiter, String...parts) {
    StringBuilder builder = new StringBuilder ();
    for (String part : parts) {
        if (! isEmpty (part)) {
            if (builder.length () > 0) {
                builder.append (delimiter);
            }
            builder.append (part);
        }
    }
    return builder.toString ();
}
----------------------------------------

  private static String join (String delimiter, String...parts) {
    Optional<String> joinedString = Arrays.stream(parts)
        .filter(part -> ! isEmpty(part))
        .collect(Collectors.joining(delimiter));
    return joinedString.orElse('');
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
939
0
Gpt3D_Clone939_0.java 1 9
Gpt3D_Clone939_0.java 10 36
----------------------------------------

public static void main (String [] args) throws ParseException {
    String st1 = "2015-07-24T09:39:14.000Z";
    String st2 = "2015-07-24T09:45:44.000Z";
    String time1 = st1.substring (st1.indexOf ("T") + 1, st1.indexOf (".0"));
    String time2 = st2.substring (st2.indexOf ("T") + 1, st2.indexOf (".0"));
    Date dateTime1 = new java.text.SimpleDateFormat ("HH:mm").parse (time1);
    Date dateTime2 = new java.text.SimpleDateFormat ("HH:mm").parse (time2);
    System.out.println (dateTime1.after (dateTime2));
}
----------------------------------------

 public static void main (String [] args) throws ParseException {
    //Parse the String
	String st1 = "2015-07-24T09:39:14.000Z";
	String st2 = "2015-07-24T09:45:44.000Z";
    //Create substrings for each of the datetimes
	String time1_startIndex = st1.indexOf("T") + 1;
	int startIndex = Integer.parseInt(time1_startIndex);
	String time1_endIndex = st1.indexOf(".0");
	int endIndex = Integer.parseInt(time1_endIndex);
	String time1 = st1.substring(startIndex, endIndex);
	String time2_startIndex = st2.indexOf("T") + 1;
	int startIndex2 = Integer.parseInt(time2_startIndex);
	String time2_endIndex = st2.indexOf(".0");
	int endIndex2 = Integer.parseInt(time2_endIndex);
	String time2 = st2.substring(startIndex2, endIndex2);
    //Create Date objects for each of the datetimes
	Date dateTime1 = new java.text.SimpleDateFormat ("HH:mm").parse (time1);
	Date dateTime2 = new java.text.SimpleDateFormat ("HH:mm").parse (time2);
    //Compare two Date objects
	System.out.println (dateTime1.after (dateTime2));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
939
1
Gpt3D_Clone939_1.java 1 9
Gpt3D_Clone939_1.java 10 32
----------------------------------------

public static void main (String [] args) throws ParseException {
    String st1 = "2015-07-24T09:39:14.000Z";
    String st2 = "2015-07-24T09:45:44.000Z";
    String time1 = st1.substring (st1.indexOf ("T") + 1, st1.indexOf (".0"));
    String time2 = st2.substring (st2.indexOf ("T") + 1, st2.indexOf (".0"));
    Date dateTime1 = new java.text.SimpleDateFormat ("HH:mm").parse (time1);
    Date dateTime2 = new java.text.SimpleDateFormat ("HH:mm").parse (time2);
    System.out.println (dateTime1.after (dateTime2));
}
----------------------------------------

 public static void main (String [] args) throws ParseException {
    //Parse the String
	String st1 = "2015-07-24T09:39:14.000Z";
	String st2 = "2015-07-24T09:45:44.000Z";
    //Create substrings for each of the datetimes
	int startIndex = st1.indexOf("T") + 1;
	int endIndex = st1.indexOf(".0");
	String time1 = st1.substring(startIndex, endIndex);
	int startIndex2 = st2.indexOf("T") + 1;
	int endIndex2 = st2.indexOf(".0");
	String time2 = st2.substring(startIndex2, endIndex2);
    //Create DateTime objects for each of the datetimes
	DateTime dateTime1 = DateTime.parse(time1);
	DateTime dateTime2 = DateTime.parse(time2);
    //Compare two DateTime objects
	System.out.println (dateTime1.isAfter(dateTime2));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
939
2
Gpt3D_Clone939_2.java 1 9
Gpt3D_Clone939_2.java 10 35
----------------------------------------

public static void main (String [] args) throws ParseException {
    String st1 = "2015-07-24T09:39:14.000Z";
    String st2 = "2015-07-24T09:45:44.000Z";
    String time1 = st1.substring (st1.indexOf ("T") + 1, st1.indexOf (".0"));
    String time2 = st2.substring (st2.indexOf ("T") + 1, st2.indexOf (".0"));
    Date dateTime1 = new java.text.SimpleDateFormat ("HH:mm").parse (time1);
    Date dateTime2 = new java.text.SimpleDateFormat ("HH:mm").parse (time2);
    System.out.println (dateTime1.after (dateTime2));
}
----------------------------------------

 public static void main (String [] args) throws ParseException {
    //Parse the String
	String st1 = "2015-07-24T09:39:14.000Z";
	String st2 = "2015-07-24T09:45:44.000Z";
    //Parse the strings and split them into two parts, one for the date and one for the time
	String [] dateAndTime1 = st1.split("T");
	String [] dateAndTime2 = st2.split("T");
    //Create substrings for each of the datetimes
	String time1 = dateAndTime1[1].substring(0, dateAndTime1[1].indexOf(".0"));
	String time2 = dateAndTime2[1].substring(0, dateAndTime2[1].indexOf(".0"));
    //Create LocalDate objects for each of the datetimes
	LocalDate date1 = LocalDate.parse(dateAndTime1[0]);
	LocalDate date2 = LocalDate.parse(dateAndTime2[0]);
    //Create LocalTime objects for each of the datetimes
	LocalTime timeOfDate1 = LocalTime.parse(time1);
	LocalTime timeOfDate2 = LocalTime.parse(time2);
    //Compare two LocalTimes
	System.out.println (timeOfDate1.isAfter(timeOfDate2));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
939
3
Gpt3D_Clone939_3.java 1 9
Gpt3D_Clone939_3.java 10 31
----------------------------------------

public static void main (String [] args) throws ParseException {
    String st1 = "2015-07-24T09:39:14.000Z";
    String st2 = "2015-07-24T09:45:44.000Z";
    String time1 = st1.substring (st1.indexOf ("T") + 1, st1.indexOf (".0"));
    String time2 = st2.substring (st2.indexOf ("T") + 1, st2.indexOf (".0"));
    Date dateTime1 = new java.text.SimpleDateFormat ("HH:mm").parse (time1);
    Date dateTime2 = new java.text.SimpleDateFormat ("HH:mm").parse (time2);
    System.out.println (dateTime1.after (dateTime2));
}
----------------------------------------

 public static void main (String [] args) throws ParseException {
    //Parse the String
	String st1 = "2015-07-24T09:39:14.000Z";
	String st2 = "2015-07-24T09:45:44.000Z";
    //Parse the strings and split them into two parts, one for the date and one for the time
	String [] dateAndTime1 = st1.split("T");
	String [] dateAndTime2 = st2.split("T");
    //Create substrings for each of the datetimes
	String time1 = dateAndTime1[1].substring(0, dateAndTime1[1].indexOf(".0"));
	String time2 = dateAndTime2[1].substring(0, dateAndTime2[1].indexOf(".0"));
    //Create Instant objects for each of the datetimes
	Instant dateTime1 = Instant.parse(time1);
	Instant dateTime2 = Instant.parse(time2);
    //Compare two Instant objects
	System.out.println (dateTime1.isAfter(dateTime2));
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
939
4
Gpt3D_Clone939_4.java 1 9
Gpt3D_Clone939_4.java 10 31
----------------------------------------

public static void main (String [] args) throws ParseException {
    String st1 = "2015-07-24T09:39:14.000Z";
    String st2 = "2015-07-24T09:45:44.000Z";
    String time1 = st1.substring (st1.indexOf ("T") + 1, st1.indexOf (".0"));
    String time2 = st2.substring (st2.indexOf ("T") + 1, st2.indexOf (".0"));
    Date dateTime1 = new java.text.SimpleDateFormat ("HH:mm").parse (time1);
    Date dateTime2 = new java.text.SimpleDateFormat ("HH:mm").parse (time2);
    System.out.println (dateTime1.after (dateTime2));
}
----------------------------------------

 public static void main (String [] args) throws ParseException {
    //Parse the String
	String st1 = "2015-07-24T09:39:14.000Z";
	String st2 = "2015-07-24T09:45:44.000Z";
    //Parse the strings and split them into two parts, one for the date and one for the time
	String [] dateAndTime1 = st1.split("T");
	String [] dateAndTime2 = st2.split("T");
    //Create substrings for each of the datetimes
	String time1 = dateAndTime1[1].substring(0, dateAndTime1[1].indexOf(".0"));
	String time2 = dateAndTime2[1].substring(0, dateAndTime2[1].indexOf(".0"));
    //Create MonthDay objects for each of the datetimes
	MonthDay dateTime1 = MonthDay.parse(time1);
	MonthDay dateTime2 = MonthDay.parse(time2);
    //Compare two MonthDay objects
	System.out.println (dateTime1.isAfter(dateTime2));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
939
5
Gpt3D_Clone939_5.java 1 9
Gpt3D_Clone939_5.java 10 31
----------------------------------------

public static void main (String [] args) throws ParseException {
    String st1 = "2015-07-24T09:39:14.000Z";
    String st2 = "2015-07-24T09:45:44.000Z";
    String time1 = st1.substring (st1.indexOf ("T") + 1, st1.indexOf (".0"));
    String time2 = st2.substring (st2.indexOf ("T") + 1, st2.indexOf (".0"));
    Date dateTime1 = new java.text.SimpleDateFormat ("HH:mm").parse (time1);
    Date dateTime2 = new java.text.SimpleDateFormat ("HH:mm").parse (time2);
    System.out.println (dateTime1.after (dateTime2));
}
----------------------------------------

 public static void main (String [] args) throws ParseException {
    //Parse the String
	String st1 = "2015-07-24T09:39:14.000Z";
	String st2 = "2015-07-24T09:45:44.000Z";
    //Parse the strings and split them into two parts, one for the date and one for the time
	String [] dateAndTime1 = st1.split("T");
	String [] dateAndTime2 = st2.split("T");
    //Create substrings for each of the datetimes
	String time1 = dateAndTime1[1].substring(0, dateAndTime1[1].indexOf(".0"));
	String time2 = dateAndTime2[1].substring(0, dateAndTime2[1].indexOf(".0"));
    //Create YearMonth objects for each of the datetimes
	YearMonth dateTime1 = YearMonth.parse(time1);
	YearMonth dateTime2 = YearMonth.parse(time2);
    //Compare two YearMonth objects
	System.out.println (dateTime1.isAfter(dateTime2));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
939
6
Gpt3D_Clone939_6.java 1 9
Gpt3D_Clone939_6.java 10 31
----------------------------------------

public static void main (String [] args) throws ParseException {
    String st1 = "2015-07-24T09:39:14.000Z";
    String st2 = "2015-07-24T09:45:44.000Z";
    String time1 = st1.substring (st1.indexOf ("T") + 1, st1.indexOf (".0"));
    String time2 = st2.substring (st2.indexOf ("T") + 1, st2.indexOf (".0"));
    Date dateTime1 = new java.text.SimpleDateFormat ("HH:mm").parse (time1);
    Date dateTime2 = new java.text.SimpleDateFormat ("HH:mm").parse (time2);
    System.out.println (dateTime1.after (dateTime2));
}
----------------------------------------

 public static void main (String [] args) throws ParseException {
    //Parse the String
	String st1 = "2015-07-24T09:39:14.000Z";
	String st2 = "2015-07-24T09:45:44.000Z";
    //Parse the strings and split them into two parts, one for the date and one for the time
	String [] dateAndTime1 = st1.split("T");
	String [] dateAndTime2 = st2.split("T");
    //Create substrings for each of the datetimes
	String time1 = dateAndTime1[1].substring(0, dateAndTime1[1].indexOf(".0"));
	String time2 = dateAndTime2[1].substring(0, dateAndTime2[1].indexOf(".0"));
    //Create OffsetTime objects for each of the datetimes
	OffsetTime dateTime1 = OffsetTime.parse(time1);
	OffsetTime dateTime2 = OffsetTime.parse(time2);
    //Compare two OffsetTime objects
	System.out.println (dateTime1.isAfter(dateTime2));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
93
4
Gpt3D_Clone93_4.java 1 21
Gpt3D_Clone93_4.java 22 35
----------------------------------------

public void type (CharSequence chars, int ms) {
    ms = ms > 0 ? ms : 0;
    for (int i = 0, len = chars.length ();
    i < len; i ++) {
        char c = chars.charAt (i);
        AWTKeyStroke keyStroke = getKeyStroke (c);
        int keyCode = keyStroke.getKeyCode ();
        boolean shift = Character.isUpperCase (c) || keyStroke.getModifiers () == (SHIFT_DOWN_MASK + 1);
        if (shift) {
            robot.keyPress (KeyEvent.VK_SHIFT);
        }
        robot.keyPress (keyCode);
        robot.keyRelease (keyCode);
        if (shift) {
            robot.keyRelease (KeyEvent.VK_SHIFT);
        }
        if (ms > 0) {
            robot.delay (ms);
        }
    }
}
----------------------------------------

 public void type (CharSequence chars, int ms) {ms = (ms >= 0) ? ms : 0;
    for (int i = 0; i < chars.length(); i++) {
        char c = chars.charAt(i);
        int keyCode = getKeyCodeForChar(c);
        boolean shift = Character.isUpperCase(c);
        if (shift) robot.keyPress(KeyEvent.VK_SHIFT);
        robot.keyPress(keyCode);
        robot.keyRelease(keyCode);
        if (shift) robot.keyRelease(KeyEvent.VK_SHIFT);
        robot.delay(ms);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
940
0
Gpt3D_Clone940_0.java 1 9
Gpt3D_Clone940_0.java 10 22
----------------------------------------

public String getString () {
    StringBuilder msg = new StringBuilder ();
    String read;
    do {
        read = inputGenerator.getMessage ();
        msg.append (read);
    } while (read.toLowerCase ().startsWith ("hi"));
    return msg.toString ();
}
----------------------------------------

 public String getString() {
    String read = inputGenerator.getMessage();
    StringBuilder msg = new StringBuilder();
    boolean start = read.toLowerCase().startsWith("hi");
    while (start) {
        msg.append(read);
        read = inputGenerator.getMessage();
        start = read.toLowerCase().startsWith("hi");
    }
    return msg.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
940
1
Gpt3D_Clone940_1.java 1 9
Gpt3D_Clone940_1.java 10 20
----------------------------------------

public String getString () {
    StringBuilder msg = new StringBuilder ();
    String read;
    do {
        read = inputGenerator.getMessage ();
        msg.append (read);
    } while (read.toLowerCase ().startsWith ("hi"));
    return msg.toString ();
}
----------------------------------------

 public String getString() {
    StringBuilder msg = new StringBuilder();
    String read = inputGenerator.getMessage();
    while (read.toLowerCase().startsWith("hi")) {
        msg.append("\t" + read);
        read = inputGenerator.getMessage();
    }
    return msg.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
940
2
Gpt3D_Clone940_2.java 1 9
Gpt3D_Clone940_2.java 10 20
----------------------------------------

public String getString () {
    StringBuilder msg = new StringBuilder ();
    String read;
    do {
        read = inputGenerator.getMessage ();
        msg.append (read);
    } while (read.toLowerCase ().startsWith ("hi"));
    return msg.toString ();
}
----------------------------------------

 public String getString() {
    StringBuilder msg = new StringBuilder();
    String read = inputGenerator.getMessage();
    while (read.toLowerCase().startsWith("hi")) {
        msg.append(" - " + read);
        read = inputGenerator.getMessage();
    }
    return msg.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
940
3
Gpt3D_Clone940_3.java 1 9
Gpt3D_Clone940_3.java 10 20
----------------------------------------

public String getString () {
    StringBuilder msg = new StringBuilder ();
    String read;
    do {
        read = inputGenerator.getMessage ();
        msg.append (read);
    } while (read.toLowerCase ().startsWith ("hi"));
    return msg.toString ();
}
----------------------------------------

 public String getString() {
    StringBuilder msg = new StringBuilder();
    String read = inputGenerator.getMessage();
    while (read.toLowerCase().startsWith("hi")) {
        msg.append("\n" + read);
        read = inputGenerator.getMessage();
    }
    return msg.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
940
4
Gpt3D_Clone940_4.java 1 9
Gpt3D_Clone940_4.java 10 20
----------------------------------------

public String getString () {
    StringBuilder msg = new StringBuilder ();
    String read;
    do {
        read = inputGenerator.getMessage ();
        msg.append (read);
    } while (read.toLowerCase ().startsWith ("hi"));
    return msg.toString ();
}
----------------------------------------

 public String getString() {
    StringBuilder msg = new StringBuilder();
    String read = inputGenerator.getMessage();
    while (read.toLowerCase().startsWith("hi")) {
        msg.append(" || " + read);
        read = inputGenerator.getMessage();
    }
    return msg.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
941
0
Gpt3D_Clone941_0.java 1 12
Gpt3D_Clone941_0.java 13 26
----------------------------------------

public String makeStringsEqual (String str, String keyword) {
    if (str.length () > keyword.length ()) {
        string result = "";
        for (int i = 0;
        i < str.length (); i ++) {
            if (str.charAt (i) != ' ') {
                result += keyword.charAt (i % keyword.length ());
            } else result += " ";
        }
    }
    return result;
}
----------------------------------------

 public String makeStringsEqual (String str, String keyword) {
    if (str.length () > keyword.length ()) {
        StringBuilder sBuilder = new StringBuilder();
        for (int i = 0;
        i < str.length (); i ++) {
            if (str.charAt (i) != ' ') {
                sBuilder.append(keyword.charAt (i % keyword.length ()));
            } else sBuilder.append(" ");
        }
    }
    return sBuilder .toString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
941
1
Gpt3D_Clone941_1.java 1 12
Gpt3D_Clone941_1.java 13 26
----------------------------------------

public String makeStringsEqual (String str, String keyword) {
    if (str.length () > keyword.length ()) {
        string result = "";
        for (int i = 0;
        i < str.length (); i ++) {
            if (str.charAt (i) != ' ') {
                result += keyword.charAt (i % keyword.length ());
            } else result += " ";
        }
    }
    return result;
}
----------------------------------------

 public String makeStringsEqual (String str, String keyword) {
    if (str.length () > keyword.length ()) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        for (int i = 0;
        i < str.length (); i ++) {
            if (str.charAt (i) != ' ') {
                sb.append(keyword.charAt (i % keyword.length ()));
            } else sb.append(" ");
        }
    }
    return sb.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
941
2
Gpt3D_Clone941_2.java 1 12
Gpt3D_Clone941_2.java 13 26
----------------------------------------

public String makeStringsEqual (String str, String keyword) {
    if (str.length () > keyword.length ()) {
        string result = "";
        for (int i = 0;
        i < str.length (); i ++) {
            if (str.charAt (i) != ' ') {
                result += keyword.charAt (i % keyword.length ());
            } else result += " ";
        }
    }
    return result;
}
----------------------------------------

 public String makeStringsEqual (String str, String keyword) {
    if (str.length () > keyword.length ()) {
        stringBuilder sb = new StringBuilder();
        for (int i = 0;
        i < str.length (); i ++) {
            if (str.charAt (i) != ' ') {
                sb.append(keyword.charAt (i % keyword.length ()));
            } else sb.append(" ");
        }
    }
    return sb.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
941
3
Gpt3D_Clone941_3.java 1 12
Gpt3D_Clone941_3.java 13 26
----------------------------------------

public String makeStringsEqual (String str, String keyword) {
    if (str.length () > keyword.length ()) {
        string result = "";
        for (int i = 0;
        i < str.length (); i ++) {
            if (str.charAt (i) != ' ') {
                result += keyword.charAt (i % keyword.length ());
            } else result += " ";
        }
    }
    return result;
}
----------------------------------------

 public String makeStringsEqual (String str, String keyword) {
    if (str.length () > keyword.length ()) {
        StringJoiner sj = new StringJoiner();
        for (int i = 0;
        i < str.length (); i ++) {
            if (str.charAt (i) != ' ') {
                sj.append(keyword.charAt (i % keyword.length ()));
            } else sj.append(" ");
        }
    }
    return sj.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
941
4
Gpt3D_Clone941_4.java 1 12
Gpt3D_Clone941_4.java 13 26
----------------------------------------

public String makeStringsEqual (String str, String keyword) {
    if (str.length () > keyword.length ()) {
        string result = "";
        for (int i = 0;
        i < str.length (); i ++) {
            if (str.charAt (i) != ' ') {
                result += keyword.charAt (i % keyword.length ());
            } else result += " ";
        }
    }
    return result;
}
----------------------------------------

 public String makeStringsEqual (String str, String keyword) {
    if (str.length () > keyword.length ()) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder(str.length());
        for (int i = 0;
        i < str.length (); i ++) {
            if (str.charAt (i) != ' ') {
                sb.append(keyword.charAt (i % keyword.length ()));
            } else sb.append(" ");
        }
    }
    return sb.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
941
5
Gpt3D_Clone941_5.java 1 12
Gpt3D_Clone941_5.java 13 27
----------------------------------------

public String makeStringsEqual (String str, String keyword) {
    if (str.length () > keyword.length ()) {
        string result = "";
        for (int i = 0;
        i < str.length (); i ++) {
            if (str.charAt (i) != ' ') {
                result += keyword.charAt (i % keyword.length ());
            } else result += " ";
        }
    }
    return result;
}
----------------------------------------

 public String makeStringsEqual (String str, String keyword) {
    if (str.length () > keyword.length ()) {
        StringBuffer sb = new StringBuffer();
        for (int i = 0;
        i < str.length (); i ++) {
            if (str.charAt (i) != ' ') {
                sb.append(keyword.charAt (i % keyword.length ()));
            } else sb.append(" ");
        }
    }
    return sb.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
941
6
Gpt3D_Clone941_6.java 1 12
Gpt3D_Clone941_6.java 13 26
----------------------------------------

public String makeStringsEqual (String str, String keyword) {
    if (str.length () > keyword.length ()) {
        string result = "";
        for (int i = 0;
        i < str.length (); i ++) {
            if (str.charAt (i) != ' ') {
                result += keyword.charAt (i % keyword.length ());
            } else result += " ";
        }
    }
    return result;
}
----------------------------------------

  public String makeStringsEqual (String str, String keyword) {
    if (str.length () > keyword.length ()) {
        StringConcatenation result = new StringConcatenation();
        for (int i = 0;
        i < str.length (); i ++) {
            if (str.charAt (i) != ' ') {
                result.append(keyword.charAt (i % keyword.length ()));
            } else result.append(" ");
        }
    }
    return result.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
941
7
Gpt3D_Clone941_7.java 1 12
Gpt3D_Clone941_7.java 13 26
----------------------------------------

public String makeStringsEqual (String str, String keyword) {
    if (str.length () > keyword.length ()) {
        string result = "";
        for (int i = 0;
        i < str.length (); i ++) {
            if (str.charAt (i) != ' ') {
                result += keyword.charAt (i % keyword.length ());
            } else result += " ";
        }
    }
    return result;
}
----------------------------------------

 public String makeStringsEqual (String str, String keyword) {
    if (str.length () > keyword.length ()) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder(str.length());
        for (int i = 0;
        i < str.length (); i ++) {
            if (str.charAt (i) != ' ') {
                sb.appendCodePoint(keyword.codePointAt (i % keyword.length ()));
            } else sb.append(" ");
        }
    }
    return sb.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
950
0
Gpt3D_Clone950_0.java 1 10
Gpt3D_Clone950_0.java 11 25
----------------------------------------

protected Node getTrueParent () {
    if (getEdges () != null && ! getEdges ().isEmpty ()) {
        for (Edge e : getEdges ()) {
            if (e != null && e.getNode2 () == this && ! e.isPseudo ()) {
                return e.getNode1 ();
            }
        }
    }
    return null;
}
----------------------------------------

 protected Node getTrueParent() {
    if(getEdges() != null) {
        getEdges().stream().filter(e -> {
            if(e != null && e.getNode2() == this && !e.isPseudo()) {
                return true;
            }
            return false;
        }).forEach(e -> {
            return e.getNode1();
        });   
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
950
1
Gpt3D_Clone950_1.java 1 10
Gpt3D_Clone950_1.java 11 24
----------------------------------------

protected Node getTrueParent () {
    if (getEdges () != null && ! getEdges ().isEmpty ()) {
        for (Edge e : getEdges ()) {
            if (e != null && e.getNode2 () == this && ! e.isPseudo ()) {
                return e.getNode1 ();
            }
        }
    }
    return null;
}
----------------------------------------

 protected Node getTrueParent() {
   int edgesSize = getEdges().size();
   if (edgesSize > 0) {
     for (int i = 0; i < edgesSize; i++) {
       Edge edge = getEdges().get(i);
       if (edge != null && edge.getNode2() == this && !edge.isPseudo()) {
         return edge.getNode1();
       }
     }
   }
   return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
950
3
Gpt3D_Clone950_3.java 1 10
Gpt3D_Clone950_3.java 11 23
----------------------------------------

protected Node getTrueParent () {
    if (getEdges () != null && ! getEdges ().isEmpty ()) {
        for (Edge e : getEdges ()) {
            if (e != null && e.getNode2 () == this && ! e.isPseudo ()) {
                return e.getNode1 ();
            }
        }
    }
    return null;
}
----------------------------------------

 protected Node getTrueParent() {
    if (ListUtils.isNotEmpty(getEdges()))  {
        List<Edge> edges = getEdges();
        for (int i = 0; i < edges.size(); i++) {
            if (edges.get(i) != null && edges.get(i).getNode2() == this && !edges.get(i).isPseudo()) {
                return edges.get(i).getNode1();
            }
        }
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
950
5
Gpt3D_Clone950_5.java 1 10
Gpt3D_Clone950_5.java 11 23
----------------------------------------

protected Node getTrueParent () {
    if (getEdges () != null && ! getEdges ().isEmpty ()) {
        for (Edge e : getEdges ()) {
            if (e != null && e.getNode2 () == this && ! e.isPseudo ()) {
                return e.getNode1 ();
            }
        }
    }
    return null;
}
----------------------------------------

 protected Node getTrueParent() {
    if (!getEdges().isEmpty()) {
        Optional<Edge> edge = getEdges().stream()
            .filter(e -> e != null && e.getNode2() == this && !e.isPseudo())
            .findFirst();
        if (edge.isPresent()) {
            return edge.get().getNode1();
        }
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
950
7
Gpt3D_Clone950_7.java 1 10
Gpt3D_Clone950_7.java 11 19
----------------------------------------

protected Node getTrueParent () {
    if (getEdges () != null && ! getEdges ().isEmpty ()) {
        for (Edge e : getEdges ()) {
            if (e != null && e.getNode2 () == this && ! e.isPseudo ()) {
                return e.getNode1 ();
            }
        }
    }
    return null;
}
----------------------------------------

 protected Node getTrueParent() {
    if (getEdges() != null) { 
        getEdges().stream().filter(edge -> edge != null && edge.getNode2() == this && !edge.isPseudo())
            .findFirst().map(edge -> edge.getNode1());
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
953
0
Gpt3D_Clone953_0.java 1 10
Gpt3D_Clone953_0.java 11 27
----------------------------------------

public static void main (String [] args) {
    for (int i = 1;
    i < 16; ++ i) {
        if ((i & 1) > 0) System.out.print ("A");
        if ((i & 2) > 0) System.out.print ("B");
        if ((i & 4) > 0) System.out.print ("C");
        if ((i & 8) > 0) System.out.print ("D");
        System.out.println ("");
    }
}
----------------------------------------

 public static void main(String[] args) {
    for (int i = 1; i < 16; ++i) {
        int n = i;
        boolean[] odd = new boolean[4];
        odd[0] = (n%2 == 1);
        odd[1] = (n/2)%2 == 1;
        odd[2] = (n/4)%2 == 1;
        odd[3] = (n/8)%2 == 1;
        if (odd[0]) System.out.print("A");
        if (odd[1]) System.out.print("B");
        if (odd[2]) System.out.print("C");
        if (odd[3]) System.out.print("D");
        System.out.println("");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
953
1
Gpt3D_Clone953_1.java 1 10
Gpt3D_Clone953_1.java 11 27
----------------------------------------

public static void main (String [] args) {
    for (int i = 1;
    i < 16; ++ i) {
        if ((i & 1) > 0) System.out.print ("A");
        if ((i & 2) > 0) System.out.print ("B");
        if ((i & 4) > 0) System.out.print ("C");
        if ((i & 8) > 0) System.out.print ("D");
        System.out.println ("");
    }
}
----------------------------------------

 public static void main(String[] args) {
    int[] x = new int[]{1, 2, 4, 8};
    for (int i = 1; i < 16; i++){
        String output = "";
        for (int j = 0; j < x.length; j++){
            if ((i & x[j]) > 0){
                if (j == 0) output+="A";
                else if (j == 1) output+="B";
                else if (j == 2) output+="C";
                else output+="D";
            }
        }
        System.out.println(output);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
953
2
Gpt3D_Clone953_2.java 1 10
Gpt3D_Clone953_2.java 11 24
----------------------------------------

public static void main (String [] args) {
    for (int i = 1;
    i < 16; ++ i) {
        if ((i & 1) > 0) System.out.print ("A");
        if ((i & 2) > 0) System.out.print ("B");
        if ((i & 4) > 0) System.out.print ("C");
        if ((i & 8) > 0) System.out.print ("D");
        System.out.println ("");
    }
}
----------------------------------------

 public static void main(String[] args) {
    int pow = 0;
    int b_val = 0;
    for (int i = 1; i < 16; ++i) {
        pow = (int) Math.pow(2, b_val++);
        if ((i & pow) > 0) System.out.print("A");
        if ((i & pow * 2) > 0) System.out.print("B");
        if ((i & pow * 4) > 0) System.out.print("C");
        if ((i & pow * 8) > 0) System.out.print("D");
        System.out.println("");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
953
3
Gpt3D_Clone953_3.java 1 10
Gpt3D_Clone953_3.java 11 22
----------------------------------------

public static void main (String [] args) {
    for (int i = 1;
    i < 16; ++ i) {
        if ((i & 1) > 0) System.out.print ("A");
        if ((i & 2) > 0) System.out.print ("B");
        if ((i & 4) > 0) System.out.print ("C");
        if ((i & 8) > 0) System.out.print ("D");
        System.out.println ("");
    }
}
----------------------------------------

 public static void main(String[] args){
    for (int i = 1; i < 16; i++){
        String output = "";
        if (i % 2 == 1) output+="A";
        if (i % 4 == 2 || i % 4 == 3) output+="B";
        if (i % 8 == 4 || i % 8 == 5) output+="C";
        if (i % 16 == 8 || i % 16 == 9 || i % 16 == 12 || i % 16 == 13) output+="D";
        System.out.println(output);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
953
4
Gpt3D_Clone953_4.java 1 10
Gpt3D_Clone953_4.java 11 22
----------------------------------------

public static void main (String [] args) {
    for (int i = 1;
    i < 16; ++ i) {
        if ((i & 1) > 0) System.out.print ("A");
        if ((i & 2) > 0) System.out.print ("B");
        if ((i & 4) > 0) System.out.print ("C");
        if ((i & 8) > 0) System.out.print ("D");
        System.out.println ("");
    }
}
----------------------------------------

 public static void main(String[] args){
    for (int i = 1; i < 16; i++){
        String output = "";
        if ((i & 1) > 0) output+="A";
        if ((i & 2) > 0 || ((i+1) & 2) > 0) output+="B";
        if ((i & 4) > 0 || ((i+3) & 4) > 0) output+="C";
        if ((i & 8) > 0 || ((i-7) & 8) > 0) output+="D";
        System.out.println(output);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
953
5
Gpt3D_Clone953_5.java 1 10
Gpt3D_Clone953_5.java 11 21
----------------------------------------

public static void main (String [] args) {
    for (int i = 1;
    i < 16; ++ i) {
        if ((i & 1) > 0) System.out.print ("A");
        if ((i & 2) > 0) System.out.print ("B");
        if ((i & 4) > 0) System.out.print ("C");
        if ((i & 8) > 0) System.out.print ("D");
        System.out.println ("");
    }
}
----------------------------------------

 public static void main(String[] args) {
    for (int i = 0; i < 16; ++i) {
        if (((i >> 0) & 1) > 0) System.out.print("A");
        if (((i >> 1) & 1) > 0) System.out.print("B");
        if (((i >> 2) & 1) > 0) System.out.print("C");
        if (((i >> 3) & 1) > 0) System.out.print("D");
        System.out.println("");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
953
6
Gpt3D_Clone953_6.java 1 10
Gpt3D_Clone953_6.java 11 23
----------------------------------------

public static void main (String [] args) {
    for (int i = 1;
    i < 16; ++ i) {
        if ((i & 1) > 0) System.out.print ("A");
        if ((i & 2) > 0) System.out.print ("B");
        if ((i & 4) > 0) System.out.print ("C");
        if ((i & 8) > 0) System.out.print ("D");
        System.out.println ("");
    }
}
----------------------------------------

 public static void main(String[] args) {
    char[] letters = {'A', 'B', 'C', 'D'};
    for (int i = 1; i < 16; ++i) {
        for (int j = 0; j < 16; ++j) {
            if ((i & j) > 0) {
                System.out.print(letters[j % 4]);
            }
        }
        System.out.println("");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
953
7
Gpt3D_Clone953_7.java 1 10
Gpt3D_Clone953_7.java 11 21
----------------------------------------

public static void main (String [] args) {
    for (int i = 1;
    i < 16; ++ i) {
        if ((i & 1) > 0) System.out.print ("A");
        if ((i & 2) > 0) System.out.print ("B");
        if ((i & 4) > 0) System.out.print ("C");
        if ((i & 8) > 0) System.out.print ("D");
        System.out.println ("");
    }
}
----------------------------------------

 public static void main (String[ ] args) {
    for (int i = 1; i < 16; i++) {
        if ((i / 1) % 2 == 1) System.out.print ("A");
        if ((i / 2) % 2 == 1) System.out.print ("B");
        if ((i / 4) % 2 == 1) System.out.print ("C");
        if ((i / 8) % 2 == 1) System.out.print ("D");
        System.out.println ("");	
   }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
953
8
Gpt3D_Clone953_8.java 1 10
Gpt3D_Clone953_8.java 11 21
----------------------------------------

public static void main (String [] args) {
    for (int i = 1;
    i < 16; ++ i) {
        if ((i & 1) > 0) System.out.print ("A");
        if ((i & 2) > 0) System.out.print ("B");
        if ((i & 4) > 0) System.out.print ("C");
        if ((i & 8) > 0) System.out.print ("D");
        System.out.println ("");
    }
}
----------------------------------------

 public static void main(String[] args) {
    for (int i = 1; i < 16; ++i){
        if (i >= 1 && i <= 7) System.out.print("A");
        if ((i >= 2 && i <= 3) || (i >= 6 && i <= 7)) System.out.print("B");
        if ((i >= 4 && i <= 5) || (i == 8)) System.out.print("C");
        if (i == 9 || i == 10 || i == 12 || i == 13) System.out.print("D");
        System.out.println("");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
953
9
Gpt3D_Clone953_9.java 1 10
Gpt3D_Clone953_9.java 11 23
----------------------------------------

public static void main (String [] args) {
    for (int i = 1;
    i < 16; ++ i) {
        if ((i & 1) > 0) System.out.print ("A");
        if ((i & 2) > 0) System.out.print ("B");
        if ((i & 4) > 0) System.out.print ("C");
        if ((i & 8) > 0) System.out.print ("D");
        System.out.println ("");
    }
}
----------------------------------------

  public static void main(String[] args) {
    char[] letters = {'A', 'B', 'C', 'D'};
    for (int i = 0; i < 16; ++i) {
        for (int j = 0; j < 4; ++j) {
            if ((i & 1 << j) > 0) {
                System.out.print(letters[j]);
            }
        }
        System.out.println("");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
954
0
Gpt3D_Clone954_0.java 1 8
Gpt3D_Clone954_0.java 9 34
----------------------------------------

public boolean isPrime () {
    int sqrt = (int) Math.sqrt ((double) value);
    for (int i = 2;
    i <= sqrt; i ++) {
        if (value % i == 0) return false;
    }
    return true;
}
----------------------------------------

 public boolean isPrime() {
        int limit = (int) Math.sqrt(value);
        for (int i = 2; i < limit; i++) {
            if (value % i == 0) { 
                return false; 
            }
        }
        return true;
    }
 public boolean isPrime() {
        if (value <= 3) {
            return value > 1; 
        }
    
        double sqrt = Math.sqrt(value);
        for(int i = 2; i <= sqrt; i++) {
            if(value % i == 0) {
                return false;
            }
        }
        return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
954
1
Gpt3D_Clone954_1.java 1 8
Gpt3D_Clone954_1.java 9 21
----------------------------------------

public boolean isPrime () {
    int sqrt = (int) Math.sqrt ((double) value);
    for (int i = 2;
    i <= sqrt; i ++) {
        if (value % i == 0) return false;
    }
    return true;
}
----------------------------------------

 public boolean isPrime() {
    if(value <= 1) {
        return false;
    }
    for (int i = 2; i * i <= value; i++) {
        if (value % i == 0) { 
            return false; 
        } 
    }
    return true; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
954
2
Gpt3D_Clone954_2.java 1 8
Gpt3D_Clone954_2.java 9 19
----------------------------------------

public boolean isPrime () {
    int sqrt = (int) Math.sqrt ((double) value);
    for (int i = 2;
    i <= sqrt; i ++) {
        if (value % i == 0) return false;
    }
    return true;
}
----------------------------------------

 public boolean isPrime() {
        if(value < 2) return false; 
        if(value == 2) return true; 
        if(value % 2 == 0) return false; 
        for(int i = 3; i * i <= value; i += 2) {  
            if(value % i == 0) return false; 
        }
        return true; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
954
4
Gpt3D_Clone954_4.java 1 8
Gpt3D_Clone954_4.java 9 18
----------------------------------------

public boolean isPrime () {
    int sqrt = (int) Math.sqrt ((double) value);
    for (int i = 2;
    i <= sqrt; i ++) {
        if (value % i == 0) return false;
    }
    return true;
}
----------------------------------------

 public boolean isPrime() {
    if (value > 1) {
        for (int i = 2; i * i <= value; i++) {
            if (value % i == 0) return false;
        }
        return true;
    } else return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
954
5
Gpt3D_Clone954_5.java 1 8
Gpt3D_Clone954_5.java 9 24
----------------------------------------

public boolean isPrime () {
    int sqrt = (int) Math.sqrt ((double) value);
    for (int i = 2;
    i <= sqrt; i ++) {
        if (value % i == 0) return false;
    }
    return true;
}
----------------------------------------

 public boolean isPrime() { 
    double sqr = Math.sqrt(value); 
      
    // if even, then is not prime 
    if (value % 2 == 0) 
        return false; 
  
    // check odd numbers from 3 to the square root of n 
    for (int i = 3; i <= sqr; i += 2) { 
        if (value % i == 0) 
            return false; 
    } 
    return true; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
954
7
Gpt3D_Clone954_7.java 1 8
Gpt3D_Clone954_7.java 9 20
----------------------------------------

public boolean isPrime () {
    int sqrt = (int) Math.sqrt ((double) value);
    for (int i = 2;
    i <= sqrt; i ++) {
        if (value % i == 0) return false;
    }
    return true;
}
----------------------------------------

 public Boolean isPrime() {
    if (value == 2) return true;
    int max = (int) Math.sqrt(value);
    for (int counter = 2; counter <= max; counter++) {
        if (value % counter == 0) return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
954
8
Gpt3D_Clone954_8.java 1 8
Gpt3D_Clone954_8.java 9 34
----------------------------------------

public boolean isPrime () {
    int sqrt = (int) Math.sqrt ((double) value);
    for (int i = 2;
    i <= sqrt; i ++) {
        if (value % i == 0) return false;
    }
    return true;
}
----------------------------------------

 public boolean isPrime() {
        int limit = (int) Math.sqrt(value);
        for (int i = 2; i < limit; i++) {
            if (value % i == 0) { 
                return false; 
            }
        }
        return true;
    }
 public boolean isPrime() {
        if (value <= 3) {
            return value > 1; 
        }
    
        double sqrt = Math.sqrt(value);
        for(int i = 2; i <= sqrt; i++) {
            if(value % i == 0) {
                return false;
            }
        }
        return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
955
2
Gpt3D_Clone955_2.java 1 11
Gpt3D_Clone955_2.java 12 23
----------------------------------------

public TerminalGui [] getTerminalGuis () {
    Components comps [] = getComponents ();
    List < TerminalGui > list = new ArrayList < TerminalGui > ();
    if (comps == null) return null;
    for (Component c : comps) {
        if (c instanceof TerminalGui) {
            list.add (c);
        }
    }
    return list.toArray (new TerminalGui [list.size ()]);
}
----------------------------------------

 public TerminalGui[] getTerminalGuis() {
    List<TerminalGui> listTerminalGui = new ArrayList<>();
    if (getComponents() == null) return null;
    for (Component c : getComponents()) {
        if (c instanceof TerminalGui) {
            listTerminalGui.add((TerminalGui) c);
        }
    }
    return listTerminalGui.toArray(new TerminalGui[listTerminalGui.size()]);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
955
3
Gpt3D_Clone955_3.java 1 11
Gpt3D_Clone955_3.java 12 22
----------------------------------------

public TerminalGui [] getTerminalGuis () {
    Components comps [] = getComponents ();
    List < TerminalGui > list = new ArrayList < TerminalGui > ();
    if (comps == null) return null;
    for (Component c : comps) {
        if (c instanceof TerminalGui) {
            list.add (c);
        }
    }
    return list.toArray (new TerminalGui [list.size ()]);
}
----------------------------------------

 public TerminalGui[] getTerminalGuis() { 
    List<TerminalGui> terminals = new ArrayList<TerminalGui>(); 
    Component[] components = getComponents(); 
    if(components == null) return new TerminalGui[0]; 
    for(Component c : components) { 
        if(c instanceof TerminalGui) terminals.add((TerminalGui) c); 
    } 
    return terminals.toArray(new TerminalGui[terminals.size()]); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
955
5
Gpt3D_Clone955_5.java 1 11
Gpt3D_Clone955_5.java 12 22
----------------------------------------

public TerminalGui [] getTerminalGuis () {
    Components comps [] = getComponents ();
    List < TerminalGui > list = new ArrayList < TerminalGui > ();
    if (comps == null) return null;
    for (Component c : comps) {
        if (c instanceof TerminalGui) {
            list.add (c);
        }
    }
    return list.toArray (new TerminalGui [list.size ()]);
}
----------------------------------------

public TerminalGui[] getTerminalGuis() { 
     List<TerminalGui> terminalGuiList = new ArrayList<TerminalGui>(); 
     Component[] components = getComponents(); 
     if (components == null) return new TerminalGui[0]; 
     for (Component c : components) { 
         if (c instanceof TerminalGui) terminalGuiList.add((TerminalGui) c); 
     } 
     return terminalGuiList.toArray(new TerminalGui[terminalGuiList.size()]); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
955
6
Gpt3D_Clone955_6.java 1 11
Gpt3D_Clone955_6.java 12 22
----------------------------------------

public TerminalGui [] getTerminalGuis () {
    Components comps [] = getComponents ();
    List < TerminalGui > list = new ArrayList < TerminalGui > ();
    if (comps == null) return null;
    for (Component c : comps) {
        if (c instanceof TerminalGui) {
            list.add (c);
        }
    }
    return list.toArray (new TerminalGui [list.size ()]);
}
----------------------------------------

 public TerminalGui[] getTerminalGuis() {
    List<TerminalGui> terminalGuis = new ArrayList<TerminalGui>(); 
    for(Component comp : getComponents()) { 
        if(comp instanceof TerminalGui) { 
            terminalGuis.add((TerminalGui) comp); 
        } 
    } 
    return terminalGuis.toArray(new TerminalGui[terminalGuis.size()]); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
955
7
Gpt3D_Clone955_7.java 1 11
Gpt3D_Clone955_7.java 12 22
----------------------------------------

public TerminalGui [] getTerminalGuis () {
    Components comps [] = getComponents ();
    List < TerminalGui > list = new ArrayList < TerminalGui > ();
    if (comps == null) return null;
    for (Component c : comps) {
        if (c instanceof TerminalGui) {
            list.add (c);
        }
    }
    return list.toArray (new TerminalGui [list.size ()]);
}
----------------------------------------

 public TerminalGui[] getTerminalGuis() { 
    List<TerminalGui> terminalGuis = new ArrayList<TerminalGui>(); 
    for(Component comp : getComponents()) { 
        if(comp instanceof TerminalGui) { 
            terminalGuis.add((TerminalGui) comp); 
        } 
    } 
    return terminalGuis.toArray(new TerminalGui[terminalGuis.size()]); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
955
8
Gpt3D_Clone955_8.java 1 11
Gpt3D_Clone955_8.java 12 22
----------------------------------------

public TerminalGui [] getTerminalGuis () {
    Components comps [] = getComponents ();
    List < TerminalGui > list = new ArrayList < TerminalGui > ();
    if (comps == null) return null;
    for (Component c : comps) {
        if (c instanceof TerminalGui) {
            list.add (c);
        }
    }
    return list.toArray (new TerminalGui [list.size ()]);
}
----------------------------------------

public TerminalGui[] getTerminalGuis() { 
    List<TerminalGui> terminalGuis = new ArrayList<>(); 
    for(Component comp : getComponents()) { 
        if(comp instanceof TerminalGui) { 
            terminalGuis.add((TerminalGui) comp); 
        } 
    } 
    return terminalGuis.toArray(new TerminalGui[terminalGuis.size()]); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
956
1
Gpt3D_Clone956_1.java 1 25
Gpt3D_Clone956_1.java 26 54
----------------------------------------

public static String getDurationBreakdown (long millis) {
    String [] units = {" Days ", " Hours ", " Minutes ", " Seconds "};
    Long [] values = new Long [units.length];
    if (millis < 0) {
        throw new IllegalArgumentException ("Duration must be greater than zero!");
    }
    values [0] = TimeUnit.MILLISECONDS.toDays (millis);
    millis -= TimeUnit.DAYS.toMillis (values [0]);
    values [1] = TimeUnit.MILLISECONDS.toHours (millis);
    millis -= TimeUnit.HOURS.toMillis (values [1]);
    values [2] = TimeUnit.MILLISECONDS.toMinutes (millis);
    millis -= TimeUnit.MINUTES.toMillis (values [2]);
    values [3] = TimeUnit.MILLISECONDS.toSeconds (millis);
    StringBuilder sb = new StringBuilder (64);
    boolean startPrinting = false;
    for (int i = 0;
    i < units.length; i ++) {
        if (! startPrinting && values [i] != 0) startPrinting = true;
        if (startPrinting) {
            sb.append (values [i]);
            sb.append (units [i]);
        }
    }
    return (sb.toString ());
}
----------------------------------------

	public static String getDurationBreakdown(long millis) {
    if (millis <= 0) {
        throw new IllegalArgumentException ("Duration must be greater than zero!");
    } 
    long days = TimeUnit.MILLISECONDS.toDays(millis);
    millis -= TimeUnit.DAYS.toMillis(days);
    long hours = TimeUnit.MILLISECONDS.toHours(millis);
    millis -= TimeUnit.HOURS.toMillis(hours);
    long minutes = TimeUnit.MILLISECONDS.toMinutes(millis);
    millis -= TimeUnit.MINUTES.toMillis(minutes);
    long seconds = TimeUnit.MILLISECONDS.toSeconds(millis);
 
    StringBuilder sb = new StringBuilder(64);
    if (days > 0) {
        sb.append(days + " Days ");
    }
    if (hours > 0) {
        sb.append(hours + " Hours ");
    }
    if (minutes > 0) {
        sb.append(minutes + " Minutes ");
    }
    if (seconds > 0) {
        sb.append(seconds + " Seconds ");
    }
    return sb.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
956
3
Gpt3D_Clone956_3.java 1 25
Gpt3D_Clone956_3.java 26 52
----------------------------------------

public static String getDurationBreakdown (long millis) {
    String [] units = {" Days ", " Hours ", " Minutes ", " Seconds "};
    Long [] values = new Long [units.length];
    if (millis < 0) {
        throw new IllegalArgumentException ("Duration must be greater than zero!");
    }
    values [0] = TimeUnit.MILLISECONDS.toDays (millis);
    millis -= TimeUnit.DAYS.toMillis (values [0]);
    values [1] = TimeUnit.MILLISECONDS.toHours (millis);
    millis -= TimeUnit.HOURS.toMillis (values [1]);
    values [2] = TimeUnit.MILLISECONDS.toMinutes (millis);
    millis -= TimeUnit.MINUTES.toMillis (values [2]);
    values [3] = TimeUnit.MILLISECONDS.toSeconds (millis);
    StringBuilder sb = new StringBuilder (64);
    boolean startPrinting = false;
    for (int i = 0;
    i < units.length; i ++) {
        if (! startPrinting && values [i] != 0) startPrinting = true;
        if (startPrinting) {
            sb.append (values [i]);
            sb.append (units [i]);
        }
    }
    return (sb.toString ());
}
----------------------------------------

	public static final String getDurationBreakdown(long millis) {
    if (millis < 0) {
        throw new IllegalArgumentException("Duration must be greater than zero!");
    }
    long days = TimeUnit.MILLISECONDS.toDays(millis);
    millis -= TimeUnit.DAYS.toMillis(days);
    long hours = TimeUnit.MILLISECONDS.toHours(millis);
    millis -= TimeUnit.HOURS.toMillis(hours);
    long minutes = TimeUnit.MILLISECONDS.toMinutes(millis);
    millis -= TimeUnit.MINUTES.toMillis(minutes);
    long seconds = TimeUnit.MILLISECONDS.toSeconds(millis);
 
    StringBuilder sb = new StringBuilder(64);
    sb.append(seconds + " Seconds ");
    if (minutes > 0) {
        sb.insert(0, minutes + " Minutes and ");
    } 
    if (hours > 0) {
        sb.insert(0, hours + " Hours ");
    } 
    if (days > 0) {
        sb.insert(0, days + " Days ");
    } 
    return sb.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
956
4
Gpt3D_Clone956_4.java 1 25
Gpt3D_Clone956_4.java 26 46
----------------------------------------

public static String getDurationBreakdown (long millis) {
    String [] units = {" Days ", " Hours ", " Minutes ", " Seconds "};
    Long [] values = new Long [units.length];
    if (millis < 0) {
        throw new IllegalArgumentException ("Duration must be greater than zero!");
    }
    values [0] = TimeUnit.MILLISECONDS.toDays (millis);
    millis -= TimeUnit.DAYS.toMillis (values [0]);
    values [1] = TimeUnit.MILLISECONDS.toHours (millis);
    millis -= TimeUnit.HOURS.toMillis (values [1]);
    values [2] = TimeUnit.MILLISECONDS.toMinutes (millis);
    millis -= TimeUnit.MINUTES.toMillis (values [2]);
    values [3] = TimeUnit.MILLISECONDS.toSeconds (millis);
    StringBuilder sb = new StringBuilder (64);
    boolean startPrinting = false;
    for (int i = 0;
    i < units.length; i ++) {
        if (! startPrinting && values [i] != 0) startPrinting = true;
        if (startPrinting) {
            sb.append (values [i]);
            sb.append (units [i]);
        }
    }
    return (sb.toString ());
}
----------------------------------------

	public static String getDurationBreakdown(long millis) {
    if (millis < 0){
        throw new IllegalArgumentException("Duration must be greater than zero!");
    }
    long days = TimeUnit.MILLISECONDS.toDays(millis);
    millis -= TimeUnit.DAYS.toMillis(days);
    long hours = TimeUnit.MILLISECONDS.toHours(millis);
    millis -= TimeUnit.HOURS.toMillis(hours);
    long minutes = TimeUnit.MILLISECONDS.toMinutes(millis);
    millis -= TimeUnit.MINUTES.toMillis(minutes);
    long seconds = TimeUnit.MILLISECONDS.toSeconds(millis);
 
    StringBuilder sb = new StringBuilder(64);
    if (days == 0 && hours > 0) sb.append(hours + " Hours ");
    if (hours == 0 && minutes > 0) sb.append(minutes + " Minutes ");
    if (minutes == 0 && seconds > 0) sb.append(seconds + " Seconds ");
    if (seconds == 0 && days > 0) sb.append(days + " Days ");
    return sb.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
956
5
Gpt3D_Clone956_5.java 1 25
Gpt3D_Clone956_5.java 26 46
----------------------------------------

public static String getDurationBreakdown (long millis) {
    String [] units = {" Days ", " Hours ", " Minutes ", " Seconds "};
    Long [] values = new Long [units.length];
    if (millis < 0) {
        throw new IllegalArgumentException ("Duration must be greater than zero!");
    }
    values [0] = TimeUnit.MILLISECONDS.toDays (millis);
    millis -= TimeUnit.DAYS.toMillis (values [0]);
    values [1] = TimeUnit.MILLISECONDS.toHours (millis);
    millis -= TimeUnit.HOURS.toMillis (values [1]);
    values [2] = TimeUnit.MILLISECONDS.toMinutes (millis);
    millis -= TimeUnit.MINUTES.toMillis (values [2]);
    values [3] = TimeUnit.MILLISECONDS.toSeconds (millis);
    StringBuilder sb = new StringBuilder (64);
    boolean startPrinting = false;
    for (int i = 0;
    i < units.length; i ++) {
        if (! startPrinting && values [i] != 0) startPrinting = true;
        if (startPrinting) {
            sb.append (values [i]);
            sb.append (units [i]);
        }
    }
    return (sb.toString ());
}
----------------------------------------

	public static String getDurationBreakdown(long millis) {
    if (millis < 0){
        throw new IllegalArgumentException("Duration must be greater than zero!");
    }
    long days = TimeUnit.MILLISECONDS.toDays(millis);
    millis -= TimeUnit.DAYS.toMillis(days);
    long hours = TimeUnit.MILLISECONDS.toHours(millis);
    millis -= TimeUnit.HOURS.toMillis(hours);
    long minutes = TimeUnit.MILLISECONDS.toMinutes(millis);
    millis -= TimeUnit.MINUTES.toMillis(minutes);
    long seconds = TimeUnit.MILLISECONDS.toSeconds(millis);
 
    StringBuilder sb = new StringBuilder(64);
    if (days > 0) sb.append(days + " Days ");
    if (hours > 0) sb.append(hours + " Hours ");
    if (minutes > 0 && seconds > 0) sb.append(minutes + " Minutes and ");
    if (seconds >0 && minutes == 0) sb.append(seconds + " Seconds ");
    return sb.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
956
6
Gpt3D_Clone956_6.java 1 25
Gpt3D_Clone956_6.java 26 46
----------------------------------------

public static String getDurationBreakdown (long millis) {
    String [] units = {" Days ", " Hours ", " Minutes ", " Seconds "};
    Long [] values = new Long [units.length];
    if (millis < 0) {
        throw new IllegalArgumentException ("Duration must be greater than zero!");
    }
    values [0] = TimeUnit.MILLISECONDS.toDays (millis);
    millis -= TimeUnit.DAYS.toMillis (values [0]);
    values [1] = TimeUnit.MILLISECONDS.toHours (millis);
    millis -= TimeUnit.HOURS.toMillis (values [1]);
    values [2] = TimeUnit.MILLISECONDS.toMinutes (millis);
    millis -= TimeUnit.MINUTES.toMillis (values [2]);
    values [3] = TimeUnit.MILLISECONDS.toSeconds (millis);
    StringBuilder sb = new StringBuilder (64);
    boolean startPrinting = false;
    for (int i = 0;
    i < units.length; i ++) {
        if (! startPrinting && values [i] != 0) startPrinting = true;
        if (startPrinting) {
            sb.append (values [i]);
            sb.append (units [i]);
        }
    }
    return (sb.toString ());
}
----------------------------------------

	public static String getDurationBreakdown(long millis) {
    if (millis < 0){
        throw new IllegalArgumentException("Duration must be greater than zero!");
    }
    long days = TimeUnit.MILLISECONDS.toDays(millis);
    millis -= TimeUnit.DAYS.toMillis(days);
    long hours = TimeUnit.MILLISECONDS.toHours(millis);
    millis -= TimeUnit.HOURS.toMillis(hours);
    long minutes = TimeUnit.MILLISECONDS.toMinutes(millis);
    millis -= TimeUnit.MINUTES.toMillis(minutes);
    long seconds = TimeUnit.MILLISECONDS.toSeconds(millis);
 
    StringBuilder sb = new StringBuilder(64);
    if (days > 0) sb.append(days + " Days ");
    if (hours > 0) sb.append(hours + " Hours ");
    if (minutes > 0) sb.append(minutes + " Minutes ");
    if (seconds > 0) sb.append(seconds + " Seconds ");
    return sb.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
957
0
Gpt3D_Clone957_0.java 1 22
Gpt3D_Clone957_0.java 23 50
----------------------------------------

public static String getDurationBreakdown (long millis) {
    if (millis < 0) {
        throw new IllegalArgumentException ("Duration must be greater than zero!");
    }
    long days = TimeUnit.MILLISECONDS.toDays (millis);
    millis -= TimeUnit.DAYS.toMillis (days);
    long hours = TimeUnit.MILLISECONDS.toHours (millis);
    millis -= TimeUnit.HOURS.toMillis (hours);
    long minutes = TimeUnit.MILLISECONDS.toMinutes (millis);
    millis -= TimeUnit.MINUTES.toMillis (minutes);
    long seconds = TimeUnit.MILLISECONDS.toSeconds (millis);
    StringBuilder sb = new StringBuilder (64);
    sb.append (days);
    sb.append (" Days ");
    sb.append (hours);
    sb.append (" Hours ");
    sb.append (minutes);
    sb.append (" Minutes ");
    sb.append (seconds);
    sb.append (" Seconds");
    return (sb.toString ());
}
----------------------------------------

 public static String getDurationBreakdown(long millis) {
    if(millis < 0) {
        throw new IllegalArgumentException("Duration must be greater than zero!");
    }
    long days = TimeUnit.MILLISECONDS.toDays(millis);
    millis -= TimeUnit.DAYS.toMillis(days);
    long hours = TimeUnit.MILLISECONDS.toHours(millis);
    millis -= TimeUnit.HOURS.toMillis(hours);
    long minutes = TimeUnit.MILLISECONDS.toMinutes(millis);
    millis -= TimeUnit.MINUTES.toMillis(minutes);
    long seconds = TimeUnit.MILLISECONDS.toSeconds(millis);
    List<String> time = new ArrayList<>();
    if (days > 0) {
        time.add(days + " day(s)");
    }
    if (hours > 0) {
        time.add(hours + " hour(s)");
    }
    if (minutes > 0) {
        time.add(minutes + " minute(s)");
    }
    if (seconds > 0) {
        time.add(seconds + " second(s)");
    }
    return time.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
957
1
Gpt3D_Clone957_1.java 1 22
Gpt3D_Clone957_1.java 23 41
----------------------------------------

public static String getDurationBreakdown (long millis) {
    if (millis < 0) {
        throw new IllegalArgumentException ("Duration must be greater than zero!");
    }
    long days = TimeUnit.MILLISECONDS.toDays (millis);
    millis -= TimeUnit.DAYS.toMillis (days);
    long hours = TimeUnit.MILLISECONDS.toHours (millis);
    millis -= TimeUnit.HOURS.toMillis (hours);
    long minutes = TimeUnit.MILLISECONDS.toMinutes (millis);
    millis -= TimeUnit.MINUTES.toMillis (minutes);
    long seconds = TimeUnit.MILLISECONDS.toSeconds (millis);
    StringBuilder sb = new StringBuilder (64);
    sb.append (days);
    sb.append (" Days ");
    sb.append (hours);
    sb.append (" Hours ");
    sb.append (minutes);
    sb.append (" Minutes ");
    sb.append (seconds);
    sb.append (" Seconds");
    return (sb.toString ());
}
----------------------------------------

 public static String getDurationBreakdown(long millis) {
    if(millis < 0) {
        throw new IllegalArgumentException("Duration must be greater than zero!");
    }
    long days = TimeUnit.MILLISECONDS.toDays(millis);
    millis -= TimeUnit.DAYS.toMillis(days);
    long hours = TimeUnit.MILLISECONDS.toHours(millis);
    millis -= TimeUnit.HOURS.toMillis(hours);
    long minutes = TimeUnit.MILLISECONDS.toMinutes(millis);
    millis -= TimeUnit.MINUTES.toMillis(minutes);
    long seconds = TimeUnit.MILLISECONDS.toSeconds(millis);
    int day = (int) days;
    int hr = (int) hours;
    int min = (int) minutes;
    int sec = (int) seconds;
    return day + " days " + hr + " hours " + min + " minutes " + sec + " seconds.";
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
957
2
Gpt3D_Clone957_2.java 1 22
Gpt3D_Clone957_2.java 23 38
----------------------------------------

public static String getDurationBreakdown (long millis) {
    if (millis < 0) {
        throw new IllegalArgumentException ("Duration must be greater than zero!");
    }
    long days = TimeUnit.MILLISECONDS.toDays (millis);
    millis -= TimeUnit.DAYS.toMillis (days);
    long hours = TimeUnit.MILLISECONDS.toHours (millis);
    millis -= TimeUnit.HOURS.toMillis (hours);
    long minutes = TimeUnit.MILLISECONDS.toMinutes (millis);
    millis -= TimeUnit.MINUTES.toMillis (minutes);
    long seconds = TimeUnit.MILLISECONDS.toSeconds (millis);
    StringBuilder sb = new StringBuilder (64);
    sb.append (days);
    sb.append (" Days ");
    sb.append (hours);
    sb.append (" Hours ");
    sb.append (minutes);
    sb.append (" Minutes ");
    sb.append (seconds);
    sb.append (" Seconds");
    return (sb.toString ());
}
----------------------------------------

 public static String getDurationBreakdown(long millis) {
    if (millis < 0) {
        throw new IllegalArgumentException("Duration must be greater than zero!");
    }
    long days = TimeUnit.MILLISECONDS.toDays(millis);
    millis -= TimeUnit.DAYS.toMillis(days);
    long hours = TimeUnit.MILLISECONDS.toHours(millis);
    millis -= TimeUnit.HOURS.toMillis(hours);
    long minutes = TimeUnit.MILLISECONDS.toMinutes(millis);
    millis -= TimeUnit.MINUTES.toMillis(minutes);
    long seconds = TimeUnit.MILLISECONDS.toSeconds(millis);
    String description = String.format("%d Days %d Hours %d Minutes %d Seconds", days, hours, minutes, seconds);
    return description;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
957
3
Gpt3D_Clone957_3.java 1 22
Gpt3D_Clone957_3.java 23 38
----------------------------------------

public static String getDurationBreakdown (long millis) {
    if (millis < 0) {
        throw new IllegalArgumentException ("Duration must be greater than zero!");
    }
    long days = TimeUnit.MILLISECONDS.toDays (millis);
    millis -= TimeUnit.DAYS.toMillis (days);
    long hours = TimeUnit.MILLISECONDS.toHours (millis);
    millis -= TimeUnit.HOURS.toMillis (hours);
    long minutes = TimeUnit.MILLISECONDS.toMinutes (millis);
    millis -= TimeUnit.MINUTES.toMillis (minutes);
    long seconds = TimeUnit.MILLISECONDS.toSeconds (millis);
    StringBuilder sb = new StringBuilder (64);
    sb.append (days);
    sb.append (" Days ");
    sb.append (hours);
    sb.append (" Hours ");
    sb.append (minutes);
    sb.append (" Minutes ");
    sb.append (seconds);
    sb.append (" Seconds");
    return (sb.toString ());
}
----------------------------------------

 public static String getDurationBreakdown(long millis) {
    if(millis < 0) {
        throw new IllegalArgumentException("Duration must be greater than zero!");
    }
    long days = TimeUnit.MILLISECONDS.toDays(millis);
    millis -= TimeUnit.DAYS.toMillis(days);
    long hours = TimeUnit.MILLISECONDS.toHours(millis);
    millis -= TimeUnit.HOURS.toMillis(hours);
    long minutes = TimeUnit.MILLISECONDS.toMinutes(millis);
    millis -= TimeUnit.MINUTES.toMillis(minutes);
    long seconds = TimeUnit.MILLISECONDS.toSeconds(millis);
    String time = String.format("%d day(s), %d hour(s), %d minute(s) and %d second(s)", days, hours, minutes, seconds);
    return time;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
957
4
Gpt3D_Clone957_4.java 1 22
Gpt3D_Clone957_4.java 23 38
----------------------------------------

public static String getDurationBreakdown (long millis) {
    if (millis < 0) {
        throw new IllegalArgumentException ("Duration must be greater than zero!");
    }
    long days = TimeUnit.MILLISECONDS.toDays (millis);
    millis -= TimeUnit.DAYS.toMillis (days);
    long hours = TimeUnit.MILLISECONDS.toHours (millis);
    millis -= TimeUnit.HOURS.toMillis (hours);
    long minutes = TimeUnit.MILLISECONDS.toMinutes (millis);
    millis -= TimeUnit.MINUTES.toMillis (minutes);
    long seconds = TimeUnit.MILLISECONDS.toSeconds (millis);
    StringBuilder sb = new StringBuilder (64);
    sb.append (days);
    sb.append (" Days ");
    sb.append (hours);
    sb.append (" Hours ");
    sb.append (minutes);
    sb.append (" Minutes ");
    sb.append (seconds);
    sb.append (" Seconds");
    return (sb.toString ());
}
----------------------------------------

 public static String getDurationBreakdown(long millis) {
    if(millis < 0) {
        throw new IllegalArgumentException("Duration must be greater than zero!");
    }
    long days = TimeUnit.MILLISECONDS.toDays(millis);
    millis -= TimeUnit.DAYS.toMillis(days);
    long hours = TimeUnit.MILLISECONDS.toHours(millis);
    millis -= TimeUnit.HOURS.toMillis(hours);
    long minutes = TimeUnit.MILLISECONDS.toMinutes(millis);
    millis -= TimeUnit.MINUTES.toMillis(minutes);
    long seconds = TimeUnit.MILLISECONDS.toSeconds(millis);
    String str = days + " Days " + hours + " Hours " + minutes + " Min " + seconds + " Secs";
    return str;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
957
5
Gpt3D_Clone957_5.java 1 22
Gpt3D_Clone957_5.java 23 38
----------------------------------------

public static String getDurationBreakdown (long millis) {
    if (millis < 0) {
        throw new IllegalArgumentException ("Duration must be greater than zero!");
    }
    long days = TimeUnit.MILLISECONDS.toDays (millis);
    millis -= TimeUnit.DAYS.toMillis (days);
    long hours = TimeUnit.MILLISECONDS.toHours (millis);
    millis -= TimeUnit.HOURS.toMillis (hours);
    long minutes = TimeUnit.MILLISECONDS.toMinutes (millis);
    millis -= TimeUnit.MINUTES.toMillis (minutes);
    long seconds = TimeUnit.MILLISECONDS.toSeconds (millis);
    StringBuilder sb = new StringBuilder (64);
    sb.append (days);
    sb.append (" Days ");
    sb.append (hours);
    sb.append (" Hours ");
    sb.append (minutes);
    sb.append (" Minutes ");
    sb.append (seconds);
    sb.append (" Seconds");
    return (sb.toString ());
}
----------------------------------------

 public static String getDurationBreakdown(long millis) {
    if(millis < 0) {
        throw new IllegalArgumentException("Duration must be greater than zero!");
    }
    long days = TimeUnit.MILLISECONDS.toDays(millis);
    millis -= TimeUnit.DAYS.toMillis(days);
    long hours = TimeUnit.MILLISECONDS.toHours(millis);
    millis -= TimeUnit.HOURS.toMillis(hours);
    long minutes = TimeUnit.MILLISECONDS.toMinutes(millis);
    millis -= TimeUnit.MINUTES.toMillis(minutes);
    long seconds = TimeUnit.MILLISECONDS.toSeconds(millis);
    return String.valueOf(days) + " day(s) " + String.valueOf(hours) + " hr(s) " 
        + String.valueOf(minutes) + " min(s) " + String.valueOf(seconds) + " sec(s).";
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
960
0
Gpt3D_Clone960_0.java 1 10
Gpt3D_Clone960_0.java 11 25
----------------------------------------

public static String startOz (String str) {
    if (str.length () >= 2 && str.substring (0, 2).equals ("oz")) {
        return "oz";
    } else if (str.length () >= 2 && str.substring (1, 2).equals ("z")) {
        return "z";
    } else if (str.length () >= 2 && str.substring (0, 1).equals ("o")) {
        return "o";
    }
    return "";
}
----------------------------------------

 public static String startOz(String str) { 
     if (str.length() >= 2){
        int first = str.charAt(0); 
        int second = str.charAt(1); 
        if (first == 111 && second == 122) 
           return "oz"; 
        else if (second == 122) 
           return "z"; 
        else if (first == 111) 
           return "o"; 
     } 
     return ""; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
960
1
Gpt3D_Clone960_1.java 1 10
Gpt3D_Clone960_1.java 11 25
----------------------------------------

public static String startOz (String str) {
    if (str.length () >= 2 && str.substring (0, 2).equals ("oz")) {
        return "oz";
    } else if (str.length () >= 2 && str.substring (1, 2).equals ("z")) {
        return "z";
    } else if (str.length () >= 2 && str.substring (0, 1).equals ("o")) {
        return "o";
    }
    return "";
}
----------------------------------------

 public static String startOz(String str) { 
     if (str.length() >= 2){
        char first = str.charAt(0); 
        char second = str.charAt(1); 
        if (first == 'o' && second == 'z') 
           return "oz"; 
        else if (second == 'z') 
           return "z"; 
        else if (first=='o') 
           return "o"; 
     } 
     return ""; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
960
2
Gpt3D_Clone960_2.java 1 10
Gpt3D_Clone960_2.java 11 22
----------------------------------------

public static String startOz (String str) {
    if (str.length () >= 2 && str.substring (0, 2).equals ("oz")) {
        return "oz";
    } else if (str.length () >= 2 && str.substring (1, 2).equals ("z")) {
        return "z";
    } else if (str.length () >= 2 && str.substring (0, 1).equals ("o")) {
        return "o";
    }
    return "";
}
----------------------------------------

 public static String startOz(String str) { 
     String result = ""; 
     if (str.length() >= 1){ 
        if (str.charAt(0)=='o') 
           result = result + str.charAt(0); 
        if (str.length()>=2 && str.charAt(1)=='z') 
           result = result + str.charAt(1); 
     } 
     return result; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
960
3
Gpt3D_Clone960_3.java 1 10
Gpt3D_Clone960_3.java 11 23
----------------------------------------

public static String startOz (String str) {
    if (str.length () >= 2 && str.substring (0, 2).equals ("oz")) {
        return "oz";
    } else if (str.length () >= 2 && str.substring (1, 2).equals ("z")) {
        return "z";
    } else if (str.length () >= 2 && str.substring (0, 1).equals ("o")) {
        return "o";
    }
    return "";
}
----------------------------------------

 public static String startOz(String str) { 
     if (str.length() >= 1 && str.charAt(0)=='o') { 
        if (str.length() >= 2 && str.charAt(1)=='z')
           return "oz";
        else
           return "o"; 
        }
     else if (str.length()>=2 && str.charAt(1)=='z') 
        return "z";
     return ""; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
960
4
Gpt3D_Clone960_4.java 1 10
Gpt3D_Clone960_4.java 11 24
----------------------------------------

public static String startOz (String str) {
    if (str.length () >= 2 && str.substring (0, 2).equals ("oz")) {
        return "oz";
    } else if (str.length () >= 2 && str.substring (1, 2).equals ("z")) {
        return "z";
    } else if (str.length () >= 2 && str.substring (0, 1).equals ("o")) {
        return "o";
    }
    return "";
}
----------------------------------------

  public static String startOz(String str) { 
     if (str.length() >= 2){ 
        if (str.substring(0,2).equals("oz")) 
           return "oz"; 
        if (str.charAt(1) == 'z') 
           return "z"; 
        if (str.charAt(0) == 'o') 
           return "o"; 
     } 
     return ""; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
960
5
Gpt3D_Clone960_5.java 1 10
Gpt3D_Clone960_5.java 11 21
----------------------------------------

public static String startOz (String str) {
    if (str.length () >= 2 && str.substring (0, 2).equals ("oz")) {
        return "oz";
    } else if (str.length () >= 2 && str.substring (1, 2).equals ("z")) {
        return "z";
    } else if (str.length () >= 2 && str.substring (0, 1).equals ("o")) {
        return "o";
    }
    return "";
}
----------------------------------------

  public static String startOz(String str) { 
      if (str.length() >= 1 && str.charAt(0) == 'o') { 
          if (str.length() >= 2 && str.charAt(1) == 'z') 
             return "oz"; 
          return "o"; 
      }else if (str.length() >= 2 && str.charAt(1) == 'z') 
          return "z"; 
      return ""; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
960
6
Gpt3D_Clone960_6.java 1 10
Gpt3D_Clone960_6.java 11 23
----------------------------------------

public static String startOz (String str) {
    if (str.length () >= 2 && str.substring (0, 2).equals ("oz")) {
        return "oz";
    } else if (str.length () >= 2 && str.substring (1, 2).equals ("z")) {
        return "z";
    } else if (str.length () >= 2 && str.substring (0, 1).equals ("o")) {
        return "o";
    }
    return "";
}
----------------------------------------

 public static String startOz(String str) { 
     if (str.length() >= 2){ 
        if (str.substring(0,2).equalsIgnoreCase("oz")) 
           return "oz"; 
        if (str.charAt(1) == 'Z') 
           return "z"; 
        if (str.charAt(0) == 'O') 
           return "o"; 
     } 
     return ""; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
960
7
Gpt3D_Clone960_7.java 1 10
Gpt3D_Clone960_7.java 11 20
----------------------------------------

public static String startOz (String str) {
    if (str.length () >= 2 && str.substring (0, 2).equals ("oz")) {
        return "oz";
    } else if (str.length () >= 2 && str.substring (1, 2).equals ("z")) {
        return "z";
    } else if (str.length () >= 2 && str.substring (0, 1).equals ("o")) {
        return "o";
    }
    return "";
}
----------------------------------------

 public static String startOz(String str) { 
     String result = ""; 
     if (str.length() >= 1 && str.charAt(0)=='o') 
       result = result + str.charAt(0);
     if (str.length()>=2 && str.charAt(1)=='z') 
       result = result + str.charAt(1);
     return result; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
960
8
Gpt3D_Clone960_8.java 1 10
Gpt3D_Clone960_8.java 11 21
----------------------------------------

public static String startOz (String str) {
    if (str.length () >= 2 && str.substring (0, 2).equals ("oz")) {
        return "oz";
    } else if (str.length () >= 2 && str.substring (1, 2).equals ("z")) {
        return "z";
    } else if (str.length () >= 2 && str.substring (0, 1).equals ("o")) {
        return "o";
    }
    return "";
}
----------------------------------------

 public static String startOz(String str) { 
     if (str.startsWith("oz")) 
       return "oz"; 
     else if (str.length() >= 2 && str.charAt(1) == 'z') 
       return "z"; 
     else if (str.length() >= 1 && str.charAt(0) == 'o') 
       return "o"; 
     return "";
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
960
9
Gpt3D_Clone960_9.java 1 10
Gpt3D_Clone960_9.java 11 20
----------------------------------------

public static String startOz (String str) {
    if (str.length () >= 2 && str.substring (0, 2).equals ("oz")) {
        return "oz";
    } else if (str.length () >= 2 && str.substring (1, 2).equals ("z")) {
        return "z";
    } else if (str.length () >= 2 && str.substring (0, 1).equals ("o")) {
        return "o";
    }
    return "";
}
----------------------------------------

 public static String startOz(String str) { 
     String result = ""; 
     if (str.length() >= 1 && str.charAt(0)=='o') 
       result = result + str.charAt(0);
     if (str.length()>=2 && str.substring(1,2).equals("z")) 
       result = result + str.charAt(1);
     return result; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
961
0
Gpt3D_Clone961_0.java 1 8
Gpt3D_Clone961_0.java 9 26
----------------------------------------

public String startOz (String str) {
    int len = str.length ();
    if (len < 1) return new String ("");
    if (len > 1 && str.charAt (0) == 'o' && str.charAt (1) == 'z') return new String ("oz");
    if (str.charAt (0) == 'o') return new String ("o");
    if (str.charAt (1) == 'z') return new String ("z");
    return new String ("");
}
----------------------------------------

 public String startOz(String str) {
    if (str == null) {
        return "";
    }
    if (str.length() < 1) {
        return "";
    }
    String output = "";
    if (str.charAt(0) == 'o') {
        output += 'o';
    }
    if (str.length() > 1 && str.charAt(1) == 'z') {
        output += 'z';
    }
    return output;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
961
1
Gpt3D_Clone961_1.java 1 8
Gpt3D_Clone961_1.java 9 23
----------------------------------------

public String startOz (String str) {
    int len = str.length ();
    if (len < 1) return new String ("");
    if (len > 1 && str.charAt (0) == 'o' && str.charAt (1) == 'z') return new String ("oz");
    if (str.charAt (0) == 'o') return new String ("o");
    if (str.charAt (1) == 'z') return new String ("z");
    return new String ("");
}
----------------------------------------

 public String startOz (String str) {
    if(str == null || str.length() == 0) {
        return "";
    }
    StringBuilder sb = new StringBuilder();
    if(str.charAt(0) == 'o') {
        sb.append('o');
    }
    if(str.length() > 1 && str.charAt(1) == 'z') {
        sb.append('z');
    }
    return sb.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
961
2
Gpt3D_Clone961_2.java 1 8
Gpt3D_Clone961_2.java 9 25
----------------------------------------

public String startOz (String str) {
    int len = str.length ();
    if (len < 1) return new String ("");
    if (len > 1 && str.charAt (0) == 'o' && str.charAt (1) == 'z') return new String ("oz");
    if (str.charAt (0) == 'o') return new String ("o");
    if (str.charAt (1) == 'z') return new String ("z");
    return new String ("");
}
----------------------------------------

 public String startOz(String str) {
    if (str == null || str.isEmpty()) {
        return "";
    }
    StringBuilder sb = new StringBuilder();
    if (str.charAt(0) == 'o') {
        sb.append("o");
    }
    if (str.length() > 1 && str.charAt(1) == 'z') {
        sb.append("z");
    }
    return sb.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
961
3
Gpt3D_Clone961_3.java 1 8
Gpt3D_Clone961_3.java 9 22
----------------------------------------

public String startOz (String str) {
    int len = str.length ();
    if (len < 1) return new String ("");
    if (len > 1 && str.charAt (0) == 'o' && str.charAt (1) == 'z') return new String ("oz");
    if (str.charAt (0) == 'o') return new String ("o");
    if (str.charAt (1) == 'z') return new String ("z");
    return new String ("");
}
----------------------------------------

 public String startOz(String str) {
    if (str == null || str.length() < 1)
        return "";
    else if (str.length() > 1 && str.charAt(0) == 'o' && str.charAt(1) == 'z')
        return "oz";
    else if (str.length() > 0 && str.charAt(0) == 'o')
        return "o";
    else if (str.length() > 1 && str.charAt(1) == 'z')
        return "z";
    else
        return "";
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
961
4
Gpt3D_Clone961_4.java 1 8
Gpt3D_Clone961_4.java 9 26
----------------------------------------

public String startOz (String str) {
    int len = str.length ();
    if (len < 1) return new String ("");
    if (len > 1 && str.charAt (0) == 'o' && str.charAt (1) == 'z') return new String ("oz");
    if (str.charAt (0) == 'o') return new String ("o");
    if (str.charAt (1) == 'z') return new String ("z");
    return new String ("");
}
----------------------------------------

 public String startOz (String str) {
    if (str == null || str.length() < 1) 
        return ""; 
    String result = ""; 
      
    if (str.charAt(0) == 'o')  
        result = "o"; 
      
    // Check for z 
    if (str.length() > 1 &&  
        str.charAt(1) == 'z')  
        result += "z"; 
      
    return result; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
961
5
Gpt3D_Clone961_5.java 1 8
Gpt3D_Clone961_5.java 9 17
----------------------------------------

public String startOz (String str) {
    int len = str.length ();
    if (len < 1) return new String ("");
    if (len > 1 && str.charAt (0) == 'o' && str.charAt (1) == 'z') return new String ("oz");
    if (str.charAt (0) == 'o') return new String ("o");
    if (str.charAt (1) == 'z') return new String ("z");
    return new String ("");
}
----------------------------------------

 public String startOz (String str) {
    if (str == null || str.length() < 1) return "";
    String result = new String ();
    if (str.charAt (0) == 'o') result += "o";
    if (str.length () > 1 && str.charAt (1) == 'z') result += "z";
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
961
6
Gpt3D_Clone961_6.java 1 8
Gpt3D_Clone961_6.java 9 24
----------------------------------------

public String startOz (String str) {
    int len = str.length ();
    if (len < 1) return new String ("");
    if (len > 1 && str.charAt (0) == 'o' && str.charAt (1) == 'z') return new String ("oz");
    if (str.charAt (0) == 'o') return new String ("o");
    if (str.charAt (1) == 'z') return new String ("z");
    return new String ("");
}
----------------------------------------

 public String startOz (String str) {
    if (str == null || str.length() == 0)
        return "";
    String output = "";
    if (str.charAt(0) == 'o')
        output += "o";
    if (str.length() > 1 && str.charAt(1) == 'z')
        output += "z";
    return output;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
961
7
Gpt3D_Clone961_7.java 1 8
Gpt3D_Clone961_7.java 9 25
----------------------------------------

public String startOz (String str) {
    int len = str.length ();
    if (len < 1) return new String ("");
    if (len > 1 && str.charAt (0) == 'o' && str.charAt (1) == 'z') return new String ("oz");
    if (str.charAt (0) == 'o') return new String ("o");
    if (str.charAt (1) == 'z') return new String ("z");
    return new String ("");
}
----------------------------------------

 public String startOz(String str) {
    /* Check if the string is null or empty before proceeding */
    if(str == null || str.equals("")) 
        return "";
    String temp = "";
    if(str.charAt(0) == 'o')
        temp += 'o';
    if(str.length() > 1 && str.charAt(1) == 'z')
        temp += 'z';
    return temp;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
961
8
Gpt3D_Clone961_8.java 1 8
Gpt3D_Clone961_8.java 9 17
----------------------------------------

public String startOz (String str) {
    int len = str.length ();
    if (len < 1) return new String ("");
    if (len > 1 && str.charAt (0) == 'o' && str.charAt (1) == 'z') return new String ("oz");
    if (str.charAt (0) == 'o') return new String ("o");
    if (str.charAt (1) == 'z') return new String ("z");
    return new String ("");
}
----------------------------------------

 public String startOz (String str) {
    if (str == null || str.length() == 0) return "";
    String result = "";
    if (str.charAt(0) == 'o') result += "o";
    if (str.length() > 1 && str.charAt(1) == 'z') result += "z";
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
961
9
Gpt3D_Clone961_9.java 1 8
Gpt3D_Clone961_9.java 9 16
----------------------------------------

public String startOz (String str) {
    int len = str.length ();
    if (len < 1) return new String ("");
    if (len > 1 && str.charAt (0) == 'o' && str.charAt (1) == 'z') return new String ("oz");
    if (str.charAt (0) == 'o') return new String ("o");
    if (str.charAt (1) == 'z') return new String ("z");
    return new String ("");
}
----------------------------------------

 public String startOz(String str) {
    String result = "";
    if(str.length() >= 1 && str.substring(0,1).equals("o")) result+="o";
    if(str.length() >= 2 && str.substring(1,2).equals("z")) result+="z";
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
962
0
Gpt3D_Clone962_0.java 1 8
Gpt3D_Clone962_0.java 9 25
----------------------------------------

public String startOz (String str) {
    int len = str.length ();
    if (len < 1) return new String ("");
    if (len > 1 && str.charAt (0) == 'o' && str.charAt (1) == 'z') return new String ("oz");
    if (str.charAt (0) == 'o') return new String ("o");
    if (str.charAt (1) == 'z') return new String ("z");
    return new String ("");
}
----------------------------------------

 public String startOz (String str) {
    if (str == null || str.length() == 0) {
        return "";
    }
    if (str.charAt(0) == 'o' && str.length() == 1){
        return "o";
    }
    if (str.length() >1 && str.charAt(0) == 'o' && str.charAt(1) == 'z') {
        return "oz";
    }
    if (str.charAt(1) == 'z') {
        return "z";
    }
    return "";
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
962
1
Gpt3D_Clone962_1.java 1 8
Gpt3D_Clone962_1.java 9 25
----------------------------------------

public String startOz (String str) {
    int len = str.length ();
    if (len < 1) return new String ("");
    if (len > 1 && str.charAt (0) == 'o' && str.charAt (1) == 'z') return new String ("oz");
    if (str.charAt (0) == 'o') return new String ("o");
    if (str.charAt (1) == 'z') return new String ("z");
    return new String ("");
}
----------------------------------------

 public String startOz(String str) {
    if (str == null || str.length() == 0) {
        return "";
    }
    if (str.length() == 1 && str.charAt(0) == 'o') {
        return "o";
    }
    if (str.length() > 1 && str.charAt(0) == 'o' && str.charAt(1) == 'z') {
        return "oz";
    }
    if (str.charAt(1) == 'z') {
        return "z";
    }
    return "";
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
962
2
Gpt3D_Clone962_2.java 1 8
Gpt3D_Clone962_2.java 9 27
----------------------------------------

public String startOz (String str) {
    int len = str.length ();
    if (len < 1) return new String ("");
    if (len > 1 && str.charAt (0) == 'o' && str.charAt (1) == 'z') return new String ("oz");
    if (str.charAt (0) == 'o') return new String ("o");
    if (str.charAt (1) == 'z') return new String ("z");
    return new String ("");
}
----------------------------------------

 public String startOz (String str) { 
  
    if (str.length() == 0) { 
        return ""; 
    } 
  
    String result = ""; 
    if (str.charAt(0) == 'o') { 
        result = "o"; 
    } 
  
    if (str.length() >= 2 && str.charAt(1) == 'z') { 
        result += "z"; 
    } 
  
    return result; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
962
3
Gpt3D_Clone962_3.java 1 8
Gpt3D_Clone962_3.java 9 26
----------------------------------------

public String startOz (String str) {
    int len = str.length ();
    if (len < 1) return new String ("");
    if (len > 1 && str.charAt (0) == 'o' && str.charAt (1) == 'z') return new String ("oz");
    if (str.charAt (0) == 'o') return new String ("o");
    if (str.charAt (1) == 'z') return new String ("z");
    return new String ("");
}
----------------------------------------

 public String startOz (String str) {
    if (str.length() == 0) 
        return "";
    else if (str.length() == 1) {
        if (str.charAt(0) == 'o') 
            return "o"; 
        else
            return "";
    }
    else if (str.charAt(0) == 'o' && str.charAt(1) == 'z') 
        return "oz";
    else if (str.charAt(1) == 'z') 
        return "z";
    else
        return "";
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
962
4
Gpt3D_Clone962_4.java 1 8
Gpt3D_Clone962_4.java 9 24
----------------------------------------

public String startOz (String str) {
    int len = str.length ();
    if (len < 1) return new String ("");
    if (len > 1 && str.charAt (0) == 'o' && str.charAt (1) == 'z') return new String ("oz");
    if (str.charAt (0) == 'o') return new String ("o");
    if (str.charAt (1) == 'z') return new String ("z");
    return new String ("");
}
----------------------------------------

 public String startOz (String str) {
    if(str.length()<2) {
        if(str.length() == 0)
            return "";
        else if(str.charAt(0) == 'o')
            return "o";
    }
    else if(str.charAt(0) == 'o'&& str.charAt(1) == 'z')
        return "oz";
    else if (str.charAt(1) == 'z')
        return "z";
    else
        return "";
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
962
5
Gpt3D_Clone962_5.java 1 8
Gpt3D_Clone962_5.java 9 22
----------------------------------------

public String startOz (String str) {
    int len = str.length ();
    if (len < 1) return new String ("");
    if (len > 1 && str.charAt (0) == 'o' && str.charAt (1) == 'z') return new String ("oz");
    if (str.charAt (0) == 'o') return new String ("o");
    if (str.charAt (1) == 'z') return new String ("z");
    return new String ("");
}
----------------------------------------

 public String startOz (String str) { 
    String result = ""; 
  
    if (str.length() >= 1 && str.charAt(0) == 'o') { 
        result = "O"; 
    } 
    if (str.length() >= 2 && str.charAt(1) == 'z') { 
        result += "Z"; 
    } 
  
    return result; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
962
6
Gpt3D_Clone962_6.java 1 8
Gpt3D_Clone962_6.java 9 20
----------------------------------------

public String startOz (String str) {
    int len = str.length ();
    if (len < 1) return new String ("");
    if (len > 1 && str.charAt (0) == 'o' && str.charAt (1) == 'z') return new String ("oz");
    if (str.charAt (0) == 'o') return new String ("o");
    if (str.charAt (1) == 'z') return new String ("z");
    return new String ("");
}
----------------------------------------

 public String startOz (String str) {
    String result = "";
    if (str.length() >= 1 && str.charAt(0) == 'o') {
        result += "o"; 
    }
    if (str.length() >= 2 && str.charAt(1) == 'z') {
        result += "z";
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
962
7
Gpt3D_Clone962_7.java 1 8
Gpt3D_Clone962_7.java 9 20
----------------------------------------

public String startOz (String str) {
    int len = str.length ();
    if (len < 1) return new String ("");
    if (len > 1 && str.charAt (0) == 'o' && str.charAt (1) == 'z') return new String ("oz");
    if (str.charAt (0) == 'o') return new String ("o");
    if (str.charAt (1) == 'z') return new String ("z");
    return new String ("");
}
----------------------------------------

 public String startOz (String str) {
    String result = "";
    if (str != null && str.length() >= 1) {
        if (str.charAt(0) == 'o')
            result = "o";
        if (str.length() >=2 && str.charAt(1) == 'z') 
            result += "z";
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
962
8
Gpt3D_Clone962_8.java 1 8
Gpt3D_Clone962_8.java 9 22
----------------------------------------

public String startOz (String str) {
    int len = str.length ();
    if (len < 1) return new String ("");
    if (len > 1 && str.charAt (0) == 'o' && str.charAt (1) == 'z') return new String ("oz");
    if (str.charAt (0) == 'o') return new String ("o");
    if (str.charAt (1) == 'z') return new String ("z");
    return new String ("");
}
----------------------------------------

 public String startOz (String str) {
    if (str == null || str.length() == 0) 
        return "";
    else if (str.length() == 1 && str.charAt(0) == 'o') 
        return "o"; 
    else if (str.length() == 2 && str.charAt(0) == 'o' && str.charAt(1) == 'z') 
        return "oz"; 
    else if (str.charAt(1) == 'z') 
        return "z"; 
    else 
        return "";
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
963
0
Gpt3D_Clone963_0.java 1 14
Gpt3D_Clone963_0.java 15 37
----------------------------------------

public static void main (String h []) {
    Scanner sc = new Scanner (System.in);
    int decimal = sc.nextInt ();
    String binary = "";
    if (decimal <= 0) {
        System.out.println ("Please Enter more than 0");
    } else {
        while (decimal > 0) {
            binary = (decimal % 2) + binary;
            decimal = decimal / 2;
        }
        System.out.println ("binary is:" + binary);
    }
}
----------------------------------------

 public static void main (String h []) {
    Scanner sc = new Scanner (System.in);
    int decimal = sc.nextInt ();
    char[] binaryArr = new char[100];
    int j = 0;
    if (decimal <= 0) {
        System.out.println ("Please Enter more than 0");
    } else {
        while (decimal > 0) {
            binaryArr[j] =  (char) ((decimal % 2) + '0');
            decimal = decimal / 2;
            j++;
        }
        int i = 0;
        while(i <= (j - 1)) {
            System.out.print(binaryArr[i]);
            i++;
        }
        System.out.println();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
965
1
Gpt3D_Clone965_1.java 1 9
Gpt3D_Clone965_1.java 10 22
----------------------------------------

private void transform (XSSFWorkbook workbookOld, HSSFWorkbook workbookNew, XSSFRow rowOld, HSSFRow rowNew) {
    HSSFCell cellNew;
    rowNew.setHeight (rowOld.getHeight ());
    for (Cell cell : rowOld) {
        cellNew = rowNew.createCell (cell.getColumnIndex (), cell.getCellType ());
        if (cellNew != null) this.transform (workbookOld, workbookNew, (XSSFCell) cell, cellNew);
    }
    this.lastColumn = Math.max (this.lastColumn, rowOld.getLastCellNum ());
}
----------------------------------------

 private void transform (XSSFWorkbook workbookOld, HSSFWorkbook workbookNew, XSSFRow rowOld, HSSFRow rowNew) {HSSFCell cellNew = null; 
    rowNew.setHeight (rowOld.getHeight ()); 
    int lastCol = 0; 
    for (Cell cell : rowOld) {
        lastCol = cell.getColumnIndex (); 
        cellNew = rowNew.createCell (lastCol, cell.getCellType ());
        if (cellNew != null)
            this.transform (workbookOld, workbookNew, (XSSFCell) cell, cellNew);
    }
    this.lastColumn = Math.max (this.lastColumn, lastCol);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
965
2
Gpt3D_Clone965_2.java 1 9
Gpt3D_Clone965_2.java 10 21
----------------------------------------

private void transform (XSSFWorkbook workbookOld, HSSFWorkbook workbookNew, XSSFRow rowOld, HSSFRow rowNew) {
    HSSFCell cellNew;
    rowNew.setHeight (rowOld.getHeight ());
    for (Cell cell : rowOld) {
        cellNew = rowNew.createCell (cell.getColumnIndex (), cell.getCellType ());
        if (cellNew != null) this.transform (workbookOld, workbookNew, (XSSFCell) cell, cellNew);
    }
    this.lastColumn = Math.max (this.lastColumn, rowOld.getLastCellNum ());
}
----------------------------------------

 private void transform (XSSFWorkbook workbookOld, HSSFWorkbook workbookNew, XSSFRow rowOld, HSSFRow rowNew) {int maxCol = 0; 
    rowNew.setHeight (rowOld.getHeight ()); 
    for (Cell cell : rowOld) {
        HSSFCell cellNew = rowNew.createCell (cell.getColumnIndex (), cell.getCellType ());
        if (cellNew != null)
            this.transform (workbookOld, workbookNew, (XSSFCell) cell, cellNew);        
        maxCol = Math.max (maxCol, cell.getColumnIndex ());
    }
    this.lastColumn = Math.max (this.lastColumn, maxCol);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
965
3
Gpt3D_Clone965_3.java 1 9
Gpt3D_Clone965_3.java 10 21
----------------------------------------

private void transform (XSSFWorkbook workbookOld, HSSFWorkbook workbookNew, XSSFRow rowOld, HSSFRow rowNew) {
    HSSFCell cellNew;
    rowNew.setHeight (rowOld.getHeight ());
    for (Cell cell : rowOld) {
        cellNew = rowNew.createCell (cell.getColumnIndex (), cell.getCellType ());
        if (cellNew != null) this.transform (workbookOld, workbookNew, (XSSFCell) cell, cellNew);
    }
    this.lastColumn = Math.max (this.lastColumn, rowOld.getLastCellNum ());
}
----------------------------------------

 private void transform (XSSFWorkbook workbookOld, HSSFWorkbook workbookNew, XSSFRow rowOld, HSSFRow rowNew) {int lastCol = 0; 
    rowNew.setHeight (rowOld.getHeight ()); 
    for (Cell cell : rowOld) {
        HSSFCell cellNew = rowNew.createCell (cell.getColumnIndex (), cell.getCellType ());
        if (cellNew != null)
            this.transform (workbookOld, workbookNew, (XSSFCell) cell, cellNew); 
        lastCol = Math.max (lastCol, cell.getColumnIndex ());
    }
    this.lastColumn = Math.max (this.lastColumn, lastCol);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
965
4
Gpt3D_Clone965_4.java 1 9
Gpt3D_Clone965_4.java 10 22
----------------------------------------

private void transform (XSSFWorkbook workbookOld, HSSFWorkbook workbookNew, XSSFRow rowOld, HSSFRow rowNew) {
    HSSFCell cellNew;
    rowNew.setHeight (rowOld.getHeight ());
    for (Cell cell : rowOld) {
        cellNew = rowNew.createCell (cell.getColumnIndex (), cell.getCellType ());
        if (cellNew != null) this.transform (workbookOld, workbookNew, (XSSFCell) cell, cellNew);
    }
    this.lastColumn = Math.max (this.lastColumn, rowOld.getLastCellNum ());
}
----------------------------------------

 private void transform (XSSFWorkbook workbookOld, HSSFWorkbook workbookNew, XSSFRow rowOld, HSSFRow rowNew) {int lastCol = 0; 
    rowNew.setHeight (rowOld.getHeight ()); 
    for (Cell cell : rowOld) {
        HSSFCell cellNew = rowNew.createCell (cell.getColumnIndex (), cell.getCellType ());
        if (cellNew != null)
            this.transform (workbookOld, workbookNew, (XSSFCell) cell, cellNew); 
        if (lastCol < cell.getColumnIndex ()) 
            lastCol = cell.getColumnIndex (); 
    }
    this.lastColumn = Math.max (this.lastColumn, lastCol);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
965
5
Gpt3D_Clone965_5.java 1 9
Gpt3D_Clone965_5.java 10 21
----------------------------------------

private void transform (XSSFWorkbook workbookOld, HSSFWorkbook workbookNew, XSSFRow rowOld, HSSFRow rowNew) {
    HSSFCell cellNew;
    rowNew.setHeight (rowOld.getHeight ());
    for (Cell cell : rowOld) {
        cellNew = rowNew.createCell (cell.getColumnIndex (), cell.getCellType ());
        if (cellNew != null) this.transform (workbookOld, workbookNew, (XSSFCell) cell, cellNew);
    }
    this.lastColumn = Math.max (this.lastColumn, rowOld.getLastCellNum ());
}
----------------------------------------

 private void transform (XSSFWorkbook workbookOld, HSSFWorkbook workbookNew, XSSFRow rowOld, HSSFRow rowNew) {int currentCol = 0; 
    rowNew.setHeight (rowOld.getHeight ()); 
    for (Cell cell : rowOld) {
        currentCol = cell.getColumnIndex (); 
        HSSFCell cellNew = rowNew.createCell (currentCol, cell.getCellType ());
        if (cellNew != null) 
            this.transform (workbookOld, workbookNew, (XSSFCell) cell, cellNew); 
    }
    this.lastColumn = Math.max (this.lastColumn, currentCol);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
965
7
Gpt3D_Clone965_7.java 1 9
Gpt3D_Clone965_7.java 10 19
----------------------------------------

private void transform (XSSFWorkbook workbookOld, HSSFWorkbook workbookNew, XSSFRow rowOld, HSSFRow rowNew) {
    HSSFCell cellNew;
    rowNew.setHeight (rowOld.getHeight ());
    for (Cell cell : rowOld) {
        cellNew = rowNew.createCell (cell.getColumnIndex (), cell.getCellType ());
        if (cellNew != null) this.transform (workbookOld, workbookNew, (XSSFCell) cell, cellNew);
    }
    this.lastColumn = Math.max (this.lastColumn, rowOld.getLastCellNum ());
}
----------------------------------------

 private void transform (XSSFWorkbook workbookOld, HSSFWorkbook workbookNew, XSSFRow rowOld, HSSFRow rowNew) {HSSFCell cellNew = rowNew.createCell (cell.getColumnIndex (), cell.getCellType ()); 
    if (cellNew == null)
        return; 
    rowNew.setHeight (rowOld.getHeight ()); 
    this.transform (workbookOld, workbookNew, (XSSFCell) cell, cellNew);
    this.lastColumn = Math.max (this.lastColumn, rowOld.getLastCellNum ());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
970
0
Gpt3D_Clone970_0.java 1 14
Gpt3D_Clone970_0.java 15 39
----------------------------------------

private void transform (HSSFRow rowOld, XSSFRow rowNew) {
    XSSFCell cellNew;
    rowNew.setHeight (rowOld.getHeight ());
    if (rowOld.getRowStyle () != null) {
        Integer hash = rowOld.getRowStyle ().hashCode ();
        if (! this.styleMap.containsKey (hash)) this.transform (hash, rowOld.getRowStyle (), this.workbookNew.createCellStyle ());
        rowNew.setRowStyle (this.styleMap.get (hash));
    }
    for (Cell cell : rowOld) {
        cellNew = rowNew.createCell (cell.getColumnIndex (), cell.getCellType ());
        if (cellNew != null) this.transform ((HSSFCell) cell, cellNew);
    }
    this.lastColumn = Math.max (this.lastColumn, rowOld.getLastCellNum ());
}
----------------------------------------

    private void transform (HSSFRow rowOld, XSSFRow rowNew) {
        XSSFCell cellNew;
        int hash = 0;
        rowNew.setHeight (rowOld.getHeight ());
        switch (rowOld.getRowStyle()) {
            case 0:
                hash = rowOld.getRowStyle ().hashCode ();
                if (! this.styleMap.containsKey (hash)) this.transform (hash, rowOld.getRowStyle (), this.workbookNew.createCellStyle ());
                rowNew.setRowStyle (this.styleMap.get (hash));
            case 1:
                hash = rowOld.getRowStyle ().hashCode () + 8;
                if (! this.styleMap.containsKey (hash)) this.transform (hash, rowOld.getRowStyle (), this.workbookNew.createCellStyle ());
                rowNew.setRowStyle (this.styleMap.get (hash));
            default:
                break;
        }
        for (Cell cell : rowOld) {
            cellNew = rowNew.createCell (cell.getColumnIndex (), cell.getCellType ());
            if (cellNew != null) this.transform ((HSSFCell) cell, cellNew);
        }
        this.lastColumn = Math.max (this.lastColumn, rowOld.getLastCellNum ());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
973
0
Gpt3D_Clone973_0.java 1 13
Gpt3D_Clone973_0.java 14 37
----------------------------------------

private XSSFFont transform (HSSFFont fontOld) {
    XSSFFont fontNew = this.workbookNew.createFont ();
    fontNew.setBoldweight (fontOld.getBoldweight ());
    fontNew.setCharSet (fontOld.getCharSet ());
    fontNew.setColor (fontOld.getColor ());
    fontNew.setFontName (fontOld.getFontName ());
    fontNew.setFontHeight (fontOld.getFontHeight ());
    fontNew.setItalic (fontOld.getItalic ());
    fontNew.setStrikeout (fontOld.getStrikeout ());
    fontNew.setTypeOffset (fontOld.getTypeOffset ());
    fontNew.setUnderline (fontOld.getUnderline ());
    return fontNew;
}
----------------------------------------

 private XSSFFont transform (HSSFFont fontOld) {XSSFFont fontNew = transformFont(fontOld);
XSSFFont fontNew = this.workbookNew.createFont ();
int boldWeight = fontOld.getBoldWeight ();
FontCharSet charSet = fontOld.getCharSet ();
int color = fontOld.getColor ();
String fontName = fontOld.getFontName ();
short fontHeight = fontOld.getFontHeight ();
boolean italic = fontOld.getItalic ();
boolean strikeout = fontOld.getStrikeout ();
short typeOffset = fontOld.getTypeOffset ();
byte underline = fontOld.getUnderline ();
fontNew.setBoldweight (boldWeight);
fontNew.setCharSet (charSet);
fontNew.setColor (color);
fontNew.setFontName (fontName);
fontNew.setFontHeight (fontHeight);
fontNew.setItalic (italic);
fontNew.setStrikeout (strikeout);
fontNew.setTypeOffset (typeOffset);
fontNew.setUnderline (underline);
return fontNew;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
973
1
Gpt3D_Clone973_1.java 1 13
Gpt3D_Clone973_1.java 14 36
----------------------------------------

private XSSFFont transform (HSSFFont fontOld) {
    XSSFFont fontNew = this.workbookNew.createFont ();
    fontNew.setBoldweight (fontOld.getBoldweight ());
    fontNew.setCharSet (fontOld.getCharSet ());
    fontNew.setColor (fontOld.getColor ());
    fontNew.setFontName (fontOld.getFontName ());
    fontNew.setFontHeight (fontOld.getFontHeight ());
    fontNew.setItalic (fontOld.getItalic ());
    fontNew.setStrikeout (fontOld.getStrikeout ());
    fontNew.setTypeOffset (fontOld.getTypeOffset ());
    fontNew.setUnderline (fontOld.getUnderline ());
    return fontNew;
}
----------------------------------------

 private XSSFFont transform (HSSFFont fontOld) {XSSFFont fontNew = this.workbookNew.createFont ();
int boldWeight = fontOld.getBoldWeight ();
FontCharSet charSet = fontOld.getCharSet ();
int color = fontOld.getColor ();
String fontName = fontOld.getFontName ();
short fontHeight = fontOld.getFontHeight ();
boolean italic = fontOld.getItalic ();
boolean strikeout = fontOld.getStrikeout ();
short typeOffset = fontOld.getTypeOffset ();
byte underline = fontOld.getUnderline ();
fontNew.setBoldweight (boldWeight);
fontNew.setCharSet (charSet);
fontNew.setColor (color);
fontNew.setFontName (fontName);
fontNew.setFontHeight (fontHeight);
fontNew.setItalic (italic);
fontNew.setStrikeout (strikeout);
fontNew.setTypeOffset (typeOffset);
fontNew.setUnderline (underline);
return fontNew;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
974
0
Gpt3D_Clone974_0.java 1 9
Gpt3D_Clone974_0.java 10 28
----------------------------------------

private void transform (HSSFWorkbook workbookOld, XSSFWorkbook workbookNew, HSSFRow rowOld, XSSFRow rowNew) {
    XSSFCell cellNew;
    rowNew.setHeight (rowOld.getHeight ());
    for (Cell cell : rowOld) {
        cellNew = rowNew.createCell (cell.getColumnIndex (), cell.getCellType ());
        if (cellNew != null) this.transform (workbookOld, workbookNew, (HSSFCell) cell, cellNew);
    }
    this.lastColumn = Math.max (this.lastColumn, rowOld.getLastCellNum ());
}
----------------------------------------

  private void transform (HSSFWorkbook workbookOld, XSSFWorkbook workbookNew, HSSFRow rowOld, XSSFRow rowNew) {XSSFCell cellNew;
    rowNew.setHeight(rowOld.getHeight());
    for (Cell cell : rowOld) {
        cellNew = rowNew.createCell(cell.getColumnIndex(), cell.getCellType());
        if (cellNew != null) {
            this.transform(workbookOld, workbookNew, (HSSFCell) cell, cellNew);
        }
    } 
    int lastColumnNo = 0; 
    for (Cell cell : rowOld) { 
        int currentCellNo = cell.getColumnIndex(); 
        if (currentCellNo > lastColumnNo) { 
            lastColumnNo = currentCellNo; 
        } 
    }
    this.lastColumn = Math.max(this.lastColumn, lastColumnNo);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
974
1
Gpt3D_Clone974_1.java 1 9
Gpt3D_Clone974_1.java 10 23
----------------------------------------

private void transform (HSSFWorkbook workbookOld, XSSFWorkbook workbookNew, HSSFRow rowOld, XSSFRow rowNew) {
    XSSFCell cellNew;
    rowNew.setHeight (rowOld.getHeight ());
    for (Cell cell : rowOld) {
        cellNew = rowNew.createCell (cell.getColumnIndex (), cell.getCellType ());
        if (cellNew != null) this.transform (workbookOld, workbookNew, (HSSFCell) cell, cellNew);
    }
    this.lastColumn = Math.max (this.lastColumn, rowOld.getLastCellNum ());
}
----------------------------------------

 private void transform (HSSFWorkbook workbookOld, XSSFWorkbook workbookNew, HSSFRow rowOld, XSSFRow rowNew) {XSSFCell cellNew;
    rowNew.setHeight(rowOld.getHeight());
    int cellCount = rowOld.getPhysicalNumberOfCells(); 
    for (int cellIndex = 0; cellIndex < cellCount; cellIndex ++){
        HSSFCell cell = rowOld.getCell(cellIndex);
        cellNew = rowNew.createCell(cell.getColumnIndex(), cell.getCellType());
        if (cellNew != null) {
            this.transform(workbookOld, workbookNew, (HSSFCell) cell, cellNew);
        }
    } 
    this.lastColumn = Math.max(this.lastColumn, rowOld.getLastCellNum());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
974
2
Gpt3D_Clone974_2.java 1 9
Gpt3D_Clone974_2.java 10 23
----------------------------------------

private void transform (HSSFWorkbook workbookOld, XSSFWorkbook workbookNew, HSSFRow rowOld, XSSFRow rowNew) {
    XSSFCell cellNew;
    rowNew.setHeight (rowOld.getHeight ());
    for (Cell cell : rowOld) {
        cellNew = rowNew.createCell (cell.getColumnIndex (), cell.getCellType ());
        if (cellNew != null) this.transform (workbookOld, workbookNew, (HSSFCell) cell, cellNew);
    }
    this.lastColumn = Math.max (this.lastColumn, rowOld.getLastCellNum ());
}
----------------------------------------

 private void transform (HSSFWorkbook workbookOld, XSSFWorkbook workbookNew, HSSFRow rowOld, XSSFRow rowNew) {XSSFCell cellNew;
    rowNew.setHeight(rowOld.getHeight());
    int maxColumn = rowOld.getLastCellNum(); 
    for (int col = 0; col < maxColumn; col++) {
        HSSFCell cell = rowOld.getCell(col);
        cellNew = rowNew.createCell(cell.getColumnIndex(), cell.getCellType());
        if(cellNew != null){
            this.transform(workbookOld, workbookNew, (HSSFCell) cell, cellNew);
        }
    }
    this.lastColumn = Math.max(this.lastColumn, maxColumn);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
974
3
Gpt3D_Clone974_3.java 1 9
Gpt3D_Clone974_3.java 10 23
----------------------------------------

private void transform (HSSFWorkbook workbookOld, XSSFWorkbook workbookNew, HSSFRow rowOld, XSSFRow rowNew) {
    XSSFCell cellNew;
    rowNew.setHeight (rowOld.getHeight ());
    for (Cell cell : rowOld) {
        cellNew = rowNew.createCell (cell.getColumnIndex (), cell.getCellType ());
        if (cellNew != null) this.transform (workbookOld, workbookNew, (HSSFCell) cell, cellNew);
    }
    this.lastColumn = Math.max (this.lastColumn, rowOld.getLastCellNum ());
}
----------------------------------------

 private void transform (HSSFWorkbook workbookOld, XSSFWorkbook workbookNew, HSSFRow rowOld, XSSFRow rowNew) {XSSFCell cellNew;
    rowNew.setHeight(rowOld.getHeight());
    Iterator cells = rowOld.cellIterator();
    while (cells.hasNext()) {
        HSSFCell cell = (HSSFCell) cells.next();    
        cellNew = rowNew.createCell(cell.getColumnIndex(), cell.getCellType());
        if (cellNew != null) {
            this.transform(workbookOld, workbookNew, (HSSFCell) cell, cellNew);
        }
    }
    this.lastColumn = Math.max(this.lastColumn, rowOld.getLastCellNum());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
974
4
Gpt3D_Clone974_4.java 1 9
Gpt3D_Clone974_4.java 10 21
----------------------------------------

private void transform (HSSFWorkbook workbookOld, XSSFWorkbook workbookNew, HSSFRow rowOld, XSSFRow rowNew) {
    XSSFCell cellNew;
    rowNew.setHeight (rowOld.getHeight ());
    for (Cell cell : rowOld) {
        cellNew = rowNew.createCell (cell.getColumnIndex (), cell.getCellType ());
        if (cellNew != null) this.transform (workbookOld, workbookNew, (HSSFCell) cell, cellNew);
    }
    this.lastColumn = Math.max (this.lastColumn, rowOld.getLastCellNum ());
}
----------------------------------------

 private void transform (HSSFWorkbook workbookOld, XSSFWorkbook workbookNew, HSSFRow rowOld, XSSFRow rowNew) {XSSFCell cellNew;
    rowNew.setHeight(rowOld.getHeight());
    int rowLastCellNum = rowOld.getLastCellNum();
    for (int index = 0; index < rowLastCellNum; index++) {
        HSSFCell oldCell = rowOld.getCell(index);
        cellNew = rowNew.createCell(oldCell.getColumnIndex(), oldCell.getCellType());
        this.transform(workbookOld, workbookNew, oldCell, cellNew);
    }
    this.lastColumn = Math.max(this.lastColumn, rowLastCellNum);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
974
6
Gpt3D_Clone974_6.java 1 9
Gpt3D_Clone974_6.java 10 22
----------------------------------------

private void transform (HSSFWorkbook workbookOld, XSSFWorkbook workbookNew, HSSFRow rowOld, XSSFRow rowNew) {
    XSSFCell cellNew;
    rowNew.setHeight (rowOld.getHeight ());
    for (Cell cell : rowOld) {
        cellNew = rowNew.createCell (cell.getColumnIndex (), cell.getCellType ());
        if (cellNew != null) this.transform (workbookOld, workbookNew, (HSSFCell) cell, cellNew);
    }
    this.lastColumn = Math.max (this.lastColumn, rowOld.getLastCellNum ());
}
----------------------------------------

 private void transform (HSSFWorkbook workbookOld, XSSFWorkbook workbookNew, HSSFRow rowOld, XSSFRow rowNew) {XSSFCell cellNew;
    lastColumn = Math.max(this.lastColumn, rowOld.getLastCellNum());
    rowNew.setHeight(rowOld.getHeight());
    for (int colIndex = 0; colIndex < rowOld.getLastCellNum(); colIndex++) {
        HSSFCell cell = rowOld.getCell(colIndex);
        cellNew = rowNew.createCell(cell.getColumnIndex(), cell.getCellType()); 
        if (cellNew != null) {
            transform(workbookOld, workbookNew, (HSSFCell) cell, cellNew);
        }
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
984
0
Gpt3D_Clone984_0.java 1 29
Gpt3D_Clone984_0.java 30 54
----------------------------------------

private void transform (HSSFCell cellOld, XSSFCell cellNew) {
    cellNew.setCellComment (cellOld.getCellComment ());
    Integer hash = cellOld.getCellStyle ().hashCode ();
    if (! this.styleMap.containsKey (hash)) {
        this.transform (hash, cellOld.getCellStyle (), this.workbookNew.createCellStyle ());
    }
    cellNew.setCellStyle (this.styleMap.get (hash));
    switch (cellOld.getCellType ()) {
        case Cell.CELL_TYPE_BLANK :
            break;
        case Cell.CELL_TYPE_BOOLEAN :
            cellNew.setCellValue (cellOld.getBooleanCellValue ());
            break;
        case Cell.CELL_TYPE_ERROR :
            cellNew.setCellValue (cellOld.getErrorCellValue ());
            break;
        case Cell.CELL_TYPE_FORMULA :
            cellNew.setCellValue (cellOld.getCellFormula ());
            break;
        case Cell.CELL_TYPE_NUMERIC :
            cellNew.setCellValue (cellOld.getNumericCellValue ());
            break;
        case Cell.CELL_TYPE_STRING :
            cellNew.setCellValue (cellOld.getStringCellValue ());
            break;
        default :
            System.out.println ("transform: Unbekannter Zellentyp " + cellOld.getCellType ());
    }
}
----------------------------------------

 private void transfer(HSSFCell cellOld, XSSFCell cellNew) { 
	   Integer hash = cellOld.getCellStyle().hashCode(); 
	   if (!this.styleMap.containsKey(hash)){
		this.transform(hash, cellOld.getCellStyle(), this.workbookNew.createCellStyle()); 
	    }
	    cellNew.setCellStyle(this.styleMap.get(hash));
	    if (cellOld.getCellType() == Cell.CELL_TYPE_BLANK ){
		//do nothing
	    } else if (cellOld.getCellType() == Cell.CELL_TYPE_BOOLEAN ){
		cellNew.setCellValue(cellOld.getBooleanCellValue());
	    } else if (cellOld.getCellType() == Cell.CELL_TYPE_ERROR){
		cellNew.setCellValue(cellOld.getErrorCellValue());
	    } else if (cellOld.getCellType() == Cell.CELL_TYPE_FORMULA){
		cellNew.setCellValue(cellOld.getCellFormula());
	    } else if (cellOld.getCellType() == Cell.CELL_TYPE_NUMERIC){
		cellNew.setCellValue(cellOld.getNumericCellValue());
	    } else if (cellOld.getCellType() == Cell.CELL_TYPE_STRING){
		cellNew.setCellValue(cellOld.getStringCellValue());
	   } else {
		System.out.println("transform: Unknown cell type " + cellOld.getCellType());
	   }
	   cellNew.setCellComment(cellOld.getCellComment()); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
984
1
Gpt3D_Clone984_1.java 1 29
Gpt3D_Clone984_1.java 30 54
----------------------------------------

private void transform (HSSFCell cellOld, XSSFCell cellNew) {
    cellNew.setCellComment (cellOld.getCellComment ());
    Integer hash = cellOld.getCellStyle ().hashCode ();
    if (! this.styleMap.containsKey (hash)) {
        this.transform (hash, cellOld.getCellStyle (), this.workbookNew.createCellStyle ());
    }
    cellNew.setCellStyle (this.styleMap.get (hash));
    switch (cellOld.getCellType ()) {
        case Cell.CELL_TYPE_BLANK :
            break;
        case Cell.CELL_TYPE_BOOLEAN :
            cellNew.setCellValue (cellOld.getBooleanCellValue ());
            break;
        case Cell.CELL_TYPE_ERROR :
            cellNew.setCellValue (cellOld.getErrorCellValue ());
            break;
        case Cell.CELL_TYPE_FORMULA :
            cellNew.setCellValue (cellOld.getCellFormula ());
            break;
        case Cell.CELL_TYPE_NUMERIC :
            cellNew.setCellValue (cellOld.getNumericCellValue ());
            break;
        case Cell.CELL_TYPE_STRING :
            cellNew.setCellValue (cellOld.getStringCellValue ());
            break;
        default :
            System.out.println ("transform: Unbekannter Zellentyp " + cellOld.getCellType ());
    }
}
----------------------------------------

 private void convert(HSSFCell cellOld, XSSFCell cellNew) { 
	   Integer hash = cellOld.getCellStyle().hashCode(); 
	   if (!this.styleMap.containsKey(hash)){
		this.transform(hash, cellOld.getCellStyle(), this.workbookNew.createCellStyle()); 
	    }
	    cellNew.setCellStyle(this.styleMap.get(hash));
	    if (cellOld.getCellType() == Cell.CELL_TYPE_BLANK ){
		//do nothing
	    } else if (cellOld.getCellType() == Cell.CELL_TYPE_BOOLEAN ){
		cellNew.setCellValue(cellOld.getBooleanCellValue());
	    } else if (cellOld.getCellType() == Cell.CELL_TYPE_ERROR){
		cellNew.setCellValue(cellOld.getErrorCellValue());
	    } else if (cellOld.getCellType() == Cell.CELL_TYPE_FORMULA){
		cellNew.setCellValue(cellOld.getCellFormula());
	    } else if (cellOld.getCellType() == Cell.CELL_TYPE_NUMERIC){
		cellNew.setCellValue(cellOld.getNumericCellValue());
	    } else if (cellOld.getCellType() == Cell.CELL_TYPE_STRING){
		cellNew.setCellValue(cellOld.getStringCellValue());
	    } else {
		System.out.println("transform: Unknown cell type " + cellOld.getCellType());
	    }
	    cellNew.setCellComment(cellOld.getCellComment()); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
984
2
Gpt3D_Clone984_2.java 1 29
Gpt3D_Clone984_2.java 30 54
----------------------------------------

private void transform (HSSFCell cellOld, XSSFCell cellNew) {
    cellNew.setCellComment (cellOld.getCellComment ());
    Integer hash = cellOld.getCellStyle ().hashCode ();
    if (! this.styleMap.containsKey (hash)) {
        this.transform (hash, cellOld.getCellStyle (), this.workbookNew.createCellStyle ());
    }
    cellNew.setCellStyle (this.styleMap.get (hash));
    switch (cellOld.getCellType ()) {
        case Cell.CELL_TYPE_BLANK :
            break;
        case Cell.CELL_TYPE_BOOLEAN :
            cellNew.setCellValue (cellOld.getBooleanCellValue ());
            break;
        case Cell.CELL_TYPE_ERROR :
            cellNew.setCellValue (cellOld.getErrorCellValue ());
            break;
        case Cell.CELL_TYPE_FORMULA :
            cellNew.setCellValue (cellOld.getCellFormula ());
            break;
        case Cell.CELL_TYPE_NUMERIC :
            cellNew.setCellValue (cellOld.getNumericCellValue ());
            break;
        case Cell.CELL_TYPE_STRING :
            cellNew.setCellValue (cellOld.getStringCellValue ());
            break;
        default :
            System.out.println ("transform: Unbekannter Zellentyp " + cellOld.getCellType ());
    }
}
----------------------------------------

 private void mutate(HSSFCell cellOld, XSSFCell cellNew) { 
	    Integer hash = cellOld.getCellStyle().hashCode(); 
	    if (!this.styleMap.containsKey(hash)){
		this.transform(hash, cellOld.getCellStyle(), this.workbookNew.createCellStyle()); 
	    }
	    cellNew.setCellStyle(this.styleMap.get(hash));
	    if (cellOld.getCellType() == Cell.CELL_TYPE_BLANK ){
		//do nothing
	    } else if (cellOld.getCellType() == Cell.CELL_TYPE_BOOLEAN ){
		cellNew.setCellValue(cellOld.getBooleanCellValue());
	    } else if (cellOld.getCellType() == Cell.CELL_TYPE_ERROR){
		cellNew.setCellValue(cellOld.getErrorCellValue());
	    } else if (cellOld.getCellType() == Cell.CELL_TYPE_FORMULA){
		cellNew.setCellValue(cellOld.getCellFormula());
	    } else if (cellOld.getCellType() == Cell.CELL_TYPE_NUMERIC){
		cellNew.setCellValue(cellOld.getNumericCellValue());
	    } else if (cellOld.getCellType() == Cell.CELL_TYPE_STRING){
		cellNew.setCellValue(cellOld.getStringCellValue());
	   } else {
		System.out.println("transform: Unknown cell type " + cellOld.getCellType());
	   }
	   cellNew.setCellComment(cellOld.getCellComment());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
984
3
Gpt3D_Clone984_3.java 1 29
Gpt3D_Clone984_3.java 30 54
----------------------------------------

private void transform (HSSFCell cellOld, XSSFCell cellNew) {
    cellNew.setCellComment (cellOld.getCellComment ());
    Integer hash = cellOld.getCellStyle ().hashCode ();
    if (! this.styleMap.containsKey (hash)) {
        this.transform (hash, cellOld.getCellStyle (), this.workbookNew.createCellStyle ());
    }
    cellNew.setCellStyle (this.styleMap.get (hash));
    switch (cellOld.getCellType ()) {
        case Cell.CELL_TYPE_BLANK :
            break;
        case Cell.CELL_TYPE_BOOLEAN :
            cellNew.setCellValue (cellOld.getBooleanCellValue ());
            break;
        case Cell.CELL_TYPE_ERROR :
            cellNew.setCellValue (cellOld.getErrorCellValue ());
            break;
        case Cell.CELL_TYPE_FORMULA :
            cellNew.setCellValue (cellOld.getCellFormula ());
            break;
        case Cell.CELL_TYPE_NUMERIC :
            cellNew.setCellValue (cellOld.getNumericCellValue ());
            break;
        case Cell.CELL_TYPE_STRING :
            cellNew.setCellValue (cellOld.getStringCellValue ());
            break;
        default :
            System.out.println ("transform: Unbekannter Zellentyp " + cellOld.getCellType ());
    }
}
----------------------------------------

 private void replace(HSSFCell cellOld, XSSFCell cellNew) { 
	    Integer hash = cellOld.getCellStyle().hashCode(); 
	   if (!this.styleMap.containsKey(hash)){
		this.transform(hash, cellOld.getCellStyle(), this.workbookNew.createCellStyle());
	   }
	    cellNew.setCellStyle(this.styleMap.get(hash));
	   if (cellOld.getCellType() == Cell.CELL_TYPE_BLANK ){
		//do nothing
	   } else if (cellOld.getCellType() == Cell.CELL_TYPE_BOOLEAN ){
		cellNew.setCellValue(cellOld.getBooleanCellValue());
	    } else if (cellOld.getCellType() == Cell.CELL_TYPE_ERROR){
		cellNew.setCellValue(cellOld.getErrorCellValue());
	   } else if (cellOld.getCellType() == Cell.CELL_TYPE_FORMULA){
		cellNew.setCellValue(cellOld.getCellFormula());
	    } else if (cellOld.getCellType() == Cell.CELL_TYPE_NUMERIC){
		cellNew.setCellValue(cellOld.getNumericCellValue());
	   } else if (cellOld.getCellType() == Cell.CELL_TYPE_STRING){
		cellNew.setCellValue(cellOld.getStringCellValue());
	    } else {
		System.out.println("transform: Unknown cell type " + cellOld.getCellType());
	   }
	   cellNew.setCellComment(cellOld.getCellComment());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
984
4
Gpt3D_Clone984_4.java 1 29
Gpt3D_Clone984_4.java 30 54
----------------------------------------

private void transform (HSSFCell cellOld, XSSFCell cellNew) {
    cellNew.setCellComment (cellOld.getCellComment ());
    Integer hash = cellOld.getCellStyle ().hashCode ();
    if (! this.styleMap.containsKey (hash)) {
        this.transform (hash, cellOld.getCellStyle (), this.workbookNew.createCellStyle ());
    }
    cellNew.setCellStyle (this.styleMap.get (hash));
    switch (cellOld.getCellType ()) {
        case Cell.CELL_TYPE_BLANK :
            break;
        case Cell.CELL_TYPE_BOOLEAN :
            cellNew.setCellValue (cellOld.getBooleanCellValue ());
            break;
        case Cell.CELL_TYPE_ERROR :
            cellNew.setCellValue (cellOld.getErrorCellValue ());
            break;
        case Cell.CELL_TYPE_FORMULA :
            cellNew.setCellValue (cellOld.getCellFormula ());
            break;
        case Cell.CELL_TYPE_NUMERIC :
            cellNew.setCellValue (cellOld.getNumericCellValue ());
            break;
        case Cell.CELL_TYPE_STRING :
            cellNew.setCellValue (cellOld.getStringCellValue ());
            break;
        default :
            System.out.println ("transform: Unbekannter Zellentyp " + cellOld.getCellType ());
    }
}
----------------------------------------

private void shift(HSSFCell cellOld, XSSFCell cellNew) { 
	   Integer hash = cellOld.getCellStyle().hashCode(); 
	    if (!this.styleMap.containsKey(hash)){
		this.transform(hash, cellOld.getCellStyle(), this.workbookNew.createCellStyle());
	    }
	    cellNew.setCellStyle(this.styleMap.get(hash));
	   if (cellOld.getCellType() == Cell.CELL_TYPE_BLANK ){
		//do nothing
	   } else if (cellOld.getCellType() == Cell.CELL_TYPE_BOOLEAN ){
		cellNew.setCellValue(cellOld.getBooleanCellValue());
	    } else if (cellOld.getCellType() == Cell.CELL_TYPE_ERROR){
		cellNew.setCellValue(cellOld.getErrorCellValue());
	    } else if (cellOld.getCellType() == Cell.CELL_TYPE_FORMULA){
		cellNew.setCellValue(cellOld.getCellFormula());
	   } else if (cellOld.getCellType() == Cell.CELL_TYPE_NUMERIC){
		cellNew.setCellValue(cellOld.getNumericCellValue());
	    } else if (cellOld.getCellType() == Cell.CELL_TYPE_STRING){
		cellNew.setCellValue(cellOld.getStringCellValue());
	    } else {
		System.out.println("transform: Unknown cell type " + cellOld.getCellType());
	    }
	   cellNew.setCellComment(cellOld.getCellComment()); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
984
5
Gpt3D_Clone984_5.java 1 29
Gpt3D_Clone984_5.java 30 54
----------------------------------------

private void transform (HSSFCell cellOld, XSSFCell cellNew) {
    cellNew.setCellComment (cellOld.getCellComment ());
    Integer hash = cellOld.getCellStyle ().hashCode ();
    if (! this.styleMap.containsKey (hash)) {
        this.transform (hash, cellOld.getCellStyle (), this.workbookNew.createCellStyle ());
    }
    cellNew.setCellStyle (this.styleMap.get (hash));
    switch (cellOld.getCellType ()) {
        case Cell.CELL_TYPE_BLANK :
            break;
        case Cell.CELL_TYPE_BOOLEAN :
            cellNew.setCellValue (cellOld.getBooleanCellValue ());
            break;
        case Cell.CELL_TYPE_ERROR :
            cellNew.setCellValue (cellOld.getErrorCellValue ());
            break;
        case Cell.CELL_TYPE_FORMULA :
            cellNew.setCellValue (cellOld.getCellFormula ());
            break;
        case Cell.CELL_TYPE_NUMERIC :
            cellNew.setCellValue (cellOld.getNumericCellValue ());
            break;
        case Cell.CELL_TYPE_STRING :
            cellNew.setCellValue (cellOld.getStringCellValue ());
            break;
        default :
            System.out.println ("transform: Unbekannter Zellentyp " + cellOld.getCellType ());
    }
}
----------------------------------------

 private void exchange(HSSFCell cellOld, XSSFCell cellNew) { 
	   Integer hash = cellOld.getCellStyle().hashCode(); 
	   if (!this.styleMap.containsKey(hash)){
		this.transform(hash, cellOld.getCellStyle(), this.workbookNew.createCellStyle()); 
	    }
	    cellNew.setCellStyle(this.styleMap.get(hash));
	    if (cellOld.getCellType() == Cell.CELL_TYPE_BLANK ){
		//do nothing
	    } else if (cellOld.getCellType() == Cell.CELL_TYPE_BOOLEAN ){
		cellNew.setCellValue(cellOld.getBooleanCellValue());
	    } else if (cellOld.getCellType() == Cell.CELL_TYPE_ERROR){
		cellNew.setCellValue(cellOld.getErrorCellValue());
	    } else if (cellOld.getCellType() == Cell.CELL_TYPE_FORMULA){
		cellNew.setCellValue(cellOld.getCellFormula());
	    } else if (cellOld.getCellType() == Cell.CELL_TYPE_NUMERIC){
		cellNew.setCellValue(cellOld.getNumericCellValue());
	   } else if (cellOld.getCellType() == Cell.CELL_TYPE_STRING){
		cellNew.setCellValue(cellOld.getStringCellValue());
	    } else {
		System.out.println("transform: Unknown cell type " + cellOld.getCellType());
	    }
	    cellNew.setCellComment(cellOld.getCellComment()); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
984
6
Gpt3D_Clone984_6.java 1 29
Gpt3D_Clone984_6.java 30 54
----------------------------------------

private void transform (HSSFCell cellOld, XSSFCell cellNew) {
    cellNew.setCellComment (cellOld.getCellComment ());
    Integer hash = cellOld.getCellStyle ().hashCode ();
    if (! this.styleMap.containsKey (hash)) {
        this.transform (hash, cellOld.getCellStyle (), this.workbookNew.createCellStyle ());
    }
    cellNew.setCellStyle (this.styleMap.get (hash));
    switch (cellOld.getCellType ()) {
        case Cell.CELL_TYPE_BLANK :
            break;
        case Cell.CELL_TYPE_BOOLEAN :
            cellNew.setCellValue (cellOld.getBooleanCellValue ());
            break;
        case Cell.CELL_TYPE_ERROR :
            cellNew.setCellValue (cellOld.getErrorCellValue ());
            break;
        case Cell.CELL_TYPE_FORMULA :
            cellNew.setCellValue (cellOld.getCellFormula ());
            break;
        case Cell.CELL_TYPE_NUMERIC :
            cellNew.setCellValue (cellOld.getNumericCellValue ());
            break;
        case Cell.CELL_TYPE_STRING :
            cellNew.setCellValue (cellOld.getStringCellValue ());
            break;
        default :
            System.out.println ("transform: Unbekannter Zellentyp " + cellOld.getCellType ());
    }
}
----------------------------------------

 private void alter(HSSFCell cellOld, XSSFCell cellNew) { 
	    Integer hash = cellOld.getCellStyle().hashCode(); 
	   if (!this.styleMap.containsKey(hash)){
		this.transform(hash, cellOld.getCellStyle(), this.workbookNew.createCellStyle()); 
	   }
	   cellNew.setCellStyle(this.styleMap.get(hash));
	   if (cellOld.getCellType() == Cell.CELL_TYPE_BLANK ){
		//do nothing
	   } else if (cellOld.getCellType() == Cell.CELL_TYPE_BOOLEAN ){
		cellNew.setCellValue(cellOld.getBooleanCellValue());
	    } else if (cellOld.getCellType() == Cell.CELL_TYPE_ERROR){
		cellNew.setCellValue(cellOld.getErrorCellValue());
	   } else if (cellOld.getCellType() == Cell.CELL_TYPE_FORMULA){
		cellNew.setCellValue(cellOld.getCellFormula());
	    } else if (cellOld.getCellType() == Cell.CELL_TYPE_NUMERIC){
		cellNew.setCellValue(cellOld.getNumericCellValue());
	    } else if (cellOld.getCellType() == Cell.CELL_TYPE_STRING){
		cellNew.setCellValue(cellOld.getStringCellValue());
	   } else {
		System.out.println("transform: Unknown cell type " + cellOld.getCellType());
	   }
	   cellNew.setCellComment(cellOld.getCellComment()); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
984
7
Gpt3D_Clone984_7.java 1 29
Gpt3D_Clone984_7.java 30 54
----------------------------------------

private void transform (HSSFCell cellOld, XSSFCell cellNew) {
    cellNew.setCellComment (cellOld.getCellComment ());
    Integer hash = cellOld.getCellStyle ().hashCode ();
    if (! this.styleMap.containsKey (hash)) {
        this.transform (hash, cellOld.getCellStyle (), this.workbookNew.createCellStyle ());
    }
    cellNew.setCellStyle (this.styleMap.get (hash));
    switch (cellOld.getCellType ()) {
        case Cell.CELL_TYPE_BLANK :
            break;
        case Cell.CELL_TYPE_BOOLEAN :
            cellNew.setCellValue (cellOld.getBooleanCellValue ());
            break;
        case Cell.CELL_TYPE_ERROR :
            cellNew.setCellValue (cellOld.getErrorCellValue ());
            break;
        case Cell.CELL_TYPE_FORMULA :
            cellNew.setCellValue (cellOld.getCellFormula ());
            break;
        case Cell.CELL_TYPE_NUMERIC :
            cellNew.setCellValue (cellOld.getNumericCellValue ());
            break;
        case Cell.CELL_TYPE_STRING :
            cellNew.setCellValue (cellOld.getStringCellValue ());
            break;
        default :
            System.out.println ("transform: Unbekannter Zellentyp " + cellOld.getCellType ());
    }
}
----------------------------------------

 private void modify(HSSFCell cellOld, XSSFCell cellNew) { 
	    Integer hash = cellOld.getCellStyle().hashCode(); 
	   if (!this.styleMap.containsKey(hash)){
		this.transform(hash, cellOld.getCellStyle(), this.workbookNew.createCellStyle()); 
	   }
	   cellNew.setCellStyle(this.styleMap.get(hash));
	   if (cellOld.getCellType() == Cell.CELL_TYPE_BLANK ){
		//do nothing
	    } else if (cellOld.getCellType() == Cell.CELL_TYPE_BOOLEAN ){
		cellNew.setCellValue(cellOld.getBooleanCellValue());
	   } else if (cellOld.getCellType() == Cell.CELL_TYPE_ERROR){
		cellNew.setCellValue(cellOld.getErrorCellValue());
	    } else if (cellOld.getCellType() == Cell.CELL_TYPE_FORMULA){
		cellNew.setCellValue(cellOld.getCellFormula());
	    } else if (cellOld.getCellType() == Cell.CELL_TYPE_NUMERIC){
		cellNew.setCellValue(cellOld.getNumericCellValue());
	   } else if (cellOld.getCellType() == Cell.CELL_TYPE_STRING){
		cellNew.setCellValue(cellOld.getStringCellValue());
	    } else {
		System.out.println("transform: Unknown cell type " + cellOld.getCellType());
	   }
	   cellNew.setCellComment(cellOld.getCellComment()); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
0
Gpt3D_Clone99_0.java 1 12
Gpt3D_Clone99_0.java 13 27
----------------------------------------

private void type (char character) {
    handleSpecialCharacter (character);
    if (Character.isLowerCase (character)) {
        typeCharacter (Character.toUpperCase (character));
    }
    if (Character.isUpperCase (character)) {
        typeShiftCharacter (character);
    }
    if (Character.isDigit (character)) {
        typeCharacter (character);
    }
}
----------------------------------------

  private void type (char character) {
   		handleSpecialCharacter(character);
    	boolean isLowerCase = Character.isLowerCase (character);
    	boolean isUpperCase = Character.isUpperCase (character);
    	boolean isDigit = Character.isDigit (character);
    	if (isLowerCase) {
       		typeCharacter (Character.toUpperCase (character));
    	} else if (isUpperCase) {
       		typeShiftCharacter (character);
    	} else if (isDigit) {
       		typeCharacter (character);
   		}
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
1
Gpt3D_Clone99_1.java 1 12
Gpt3D_Clone99_1.java 13 30
----------------------------------------

private void type (char character) {
    handleSpecialCharacter (character);
    if (Character.isLowerCase (character)) {
        typeCharacter (Character.toUpperCase (character));
    }
    if (Character.isUpperCase (character)) {
        typeShiftCharacter (character);
    }
    if (Character.isDigit (character)) {
        typeCharacter (character);
    }
}
----------------------------------------

  private void type (char character) {
    	boolean isLowerCase = Character.isLowerCase (character);
    	boolean isUpperCase = Character.isUpperCase (character);
    	boolean isDigit = Character.isDigit (character);
    	handleSpecialCharacter (character);
   		
    	if (isLowerCase) {
        	typeCharacter (Character.toUpperCase (character));
    	}
    	if (isUpperCase) {
        	typeShiftCharacter (character);
    	}
    	if (isDigit) {
        	typeCharacter (character);
    	} 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
2
Gpt3D_Clone99_2.java 1 12
Gpt3D_Clone99_2.java 13 26
----------------------------------------

private void type (char character) {
    handleSpecialCharacter (character);
    if (Character.isLowerCase (character)) {
        typeCharacter (Character.toUpperCase (character));
    }
    if (Character.isUpperCase (character)) {
        typeShiftCharacter (character);
    }
    if (Character.isDigit (character)) {
        typeCharacter (character);
    }
}
----------------------------------------

 private void type (char character) {
    	if (Character.isLowerCase (character)) {
        	handleSpecialCharacter (character);
        	typeCharacter (Character.toUpperCase (character));
   		} else if (Character.isUpperCase (character)) {
        	handleSpecialCharacter (character);
        	typeShiftCharacter (character);
    	} else if (Character.isDigit (character)) {
        	handleSpecialCharacter (character);
        	typeCharacter (character);
   		}	
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
9
3
Gpt3D_Clone9_3.java 1 13
Gpt3D_Clone9_3.java 14 29
----------------------------------------

public static boolean longerTF (boolean [] guess) {
    int variableTrue = 0;
    int variableFalse = 0;
    for (int x = 0;
    x < guess.length; x ++) {
        if (guess [x]) {
            variableTrue ++;
        } else {
            variableFalse ++;
        }
    }
    return variableTrue >= variableFalse;
}
----------------------------------------

 public static boolean longerTF (boolean [] guess) {
    boolean longerTF = false; 
    int tfCount[] = new int[2]; 
    for (int i=0;i<guess.length;i++) { 
        if(guess[i]) 
            tfCount[0]++; 
        else
            tfCount[1]++; 
if(tfCount[0]>=tfCount[1]) 
            longerTF = true; 
    } 
return longerTF;
}
----------------------------------------

