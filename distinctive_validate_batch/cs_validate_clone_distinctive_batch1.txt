$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
102
0
Gpt3D_Clone102_0.cs 1 14
Gpt3D_Clone102_0.cs 15 43
----------------------------------------

public static bool SiteExists (string path) {
    SPSite site;
    try {
        site = new SPSite (path);
    }
    catch (FileNotFoundException e) {
        return false;
    }
    finally {
        if (site != null)
            site.Dispose ();
    }
    return true;
}
----------------------------------------

 public static bool SiteExists (string path) {
    SPSite currentSite = null;
    bool exists = false;
    if(Uri.IsWellFormedUriString(path, UriKind.Absolute)){
        try {
            currentSite = new SPSite(path);
            exists = true;
        }
        catch (FileNotFoundException e) {
            exists = false;
        }
        finally 
        {
            if (currentSite != null) 
            {
                currentSite.Dispose();
            }
        }
    } 
    else
    {
        exists = false;
    }
    return exists;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
102
1
Gpt3D_Clone102_1.cs 1 14
Gpt3D_Clone102_1.cs 15 39
----------------------------------------

public static bool SiteExists (string path) {
    SPSite site;
    try {
        site = new SPSite (path);
    }
    catch (FileNotFoundException e) {
        return false;
    }
    finally {
        if (site != null)
            site.Dispose ();
    }
    return true;
}
----------------------------------------

 public static bool SiteExists (string path) {
    bool isExists = false;
    SPSite site;
    if (Uri.IsWellFormedUriString (path, UriKind.Absolute)) {
        try {
            site = new SPSite(path);
            isExists = true;
        }
        catch (FileNotFoundException e) {
            isExists = false;
        }
        finally {
            if (site != null) {
                site.Dispose();
            }
        }
    }
    else {
        isExists = false;
    }
    return isExists;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
102
2
Gpt3D_Clone102_2.cs 1 14
Gpt3D_Clone102_2.cs 15 44
----------------------------------------

public static bool SiteExists (string path) {
    SPSite site;
    try {
        site = new SPSite (path);
    }
    catch (FileNotFoundException e) {
        return false;
    }
    finally {
        if (site != null)
            site.Dispose ();
    }
    return true;
}
----------------------------------------

 public static bool SiteExists (string path) {
    SPSite objSite = null;
    bool blnStatus = false;
    try
    {
        using (objSite = new SPSite(path))
        {
            if (objSite != null)
            {
                blnStatus = true;
            }
        }
    }
    catch (FileNotFoundException e)
    {
        blnStatus = false;
    }
    finally 
    {
        if (objSite != null)
        {
            objSite.Dispose();
        }
    }
    return blnStatus;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
102
3
Gpt3D_Clone102_3.cs 1 14
Gpt3D_Clone102_3.cs 15 40
----------------------------------------

public static bool SiteExists (string path) {
    SPSite site;
    try {
        site = new SPSite (path);
    }
    catch (FileNotFoundException e) {
        return false;
    }
    finally {
        if (site != null)
            site.Dispose ();
    }
    return true;
}
----------------------------------------

 public static bool SiteExists (string path) {
   if (!Uri.IsWellFormedUriString (path))
      return false;
   bool isExist = false;
   SPSite site = null;
   try
   {
      site = new SPSite (path);
      isExist = true;
   }
   catch (FileNotFoundException e)
   {
      isExist = false;
   }
   finally
   {
      if (site != null)
         site.Dispose ();
   }
   return isExist;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
102
4
Gpt3D_Clone102_4.cs 1 14
Gpt3D_Clone102_4.cs 15 42
----------------------------------------

public static bool SiteExists (string path) {
    SPSite site;
    try {
        site = new SPSite (path);
    }
    catch (FileNotFoundException e) {
        return false;
    }
    finally {
        if (site != null)
            site.Dispose ();
    }
    return true;
}
----------------------------------------

 public static bool SiteExists (string path) {
    bool found = false;
    SPSite site = null;
    
    if (Uri.IsWellFormedUriString(path, UriKind.Absolute))
    {
        try
        {
            site = new SPSite(path);
            found = true;
        }
        catch (FileNotFoundException e)
        {
            found = false;
        }
        finally 
        {
            if (site != null)
            {
                site.Dispose();
            }
        }
    }   
    return found;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
102
5
Gpt3D_Clone102_5.cs 1 14
Gpt3D_Clone102_5.cs 15 41
----------------------------------------

public static bool SiteExists (string path) {
    SPSite site;
    try {
        site = new SPSite (path);
    }
    catch (FileNotFoundException e) {
        return false;
    }
    finally {
        if (site != null)
            site.Dispose ();
    }
    return true;
}
----------------------------------------

 public static bool SiteExists (string path) {
    SPSite site = null;
    bool exist = false;
    try
    {
        using (site = new SPSite(path))
        {
            exist = true;
        }
    }
    catch (FileNotFoundException e) 
    { 
        exist = false; 
    }
    finally 
    {
        if (site != null) 
        {
            site.Dispose();
        }
    }
    return exist;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
102
6
Gpt3D_Clone102_6.cs 1 14
Gpt3D_Clone102_6.cs 15 42
----------------------------------------

public static bool SiteExists (string path) {
    SPSite site;
    try {
        site = new SPSite (path);
    }
    catch (FileNotFoundException e) {
        return false;
    }
    finally {
        if (site != null)
            site.Dispose ();
    }
    return true;
}
----------------------------------------

 public static bool SiteExists (string path) {
    bool isExist = false;
    SPSite site = null;
    try 
    {
        site = new SPSite(path);
        if (site != null)
        {
            isExist = true;
        }
    }
    catch (FileNotFoundException e) 
    {
        isExist = false;
    }
    finally 
    {
        if (site != null)
        {
            site.Dispose();
        }
    }
    return isExist;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
102
8
Gpt3D_Clone102_8.cs 1 14
Gpt3D_Clone102_8.cs 15 34
----------------------------------------

public static bool SiteExists (string path) {
    SPSite site;
    try {
        site = new SPSite (path);
    }
    catch (FileNotFoundException e) {
        return false;
    }
    finally {
        if (site != null)
            site.Dispose ();
    }
    return true;
}
----------------------------------------

 public static bool SiteExists (string path) {
    if (!Uri.IsWellFormedUriString(path))
    {
        return false;
    }
    try 
    {
        using (SPSite site = new SPSite (path))
        {
            return true;
        }
    }
    catch (FileNotFoundException e)
    {
        return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
102
9
Gpt3D_Clone102_9.cs 1 14
Gpt3D_Clone102_9.cs 15 32
----------------------------------------

public static bool SiteExists (string path) {
    SPSite site;
    try {
        site = new SPSite (path);
    }
    catch (FileNotFoundException e) {
        return false;
    }
    finally {
        if (site != null)
            site.Dispose ();
    }
    return true;
}
----------------------------------------

 public static bool SiteExists (string path) {
    bool exists = false;
    try
    {
        using (SPSite site = new SPSite(path)) {
            exists = true;
        }
    }
    catch (FileNotFoundException e)
    {
        exists = false;
    }
    return exists;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
106
0
Gpt3D_Clone106_0.cs 1 13
Gpt3D_Clone106_0.cs 14 38
----------------------------------------

static int GetPlayers () {
    int ? players;
    Console.Write ("How many people are playing?");
    while (players == null) {
        try {
            players = Convert.ToInt16 (Console.ReadLine ());
        }
        catch (Exception e) {
            Console.Write (e.Message + "\n" + "----------");
        }
    }
    return players.Value;
}
----------------------------------------

 static int GetPlayers() 
{ 
    int players = 0; 
    Console.Write("How many people are playing?"); 
    do 
    { 
        try 
        { 
            string input = Console.ReadLine(); 
            players = int.TryParse(input, out players) ? players : 0; 
            if (players == 0) 
            { 
                Console.Write("Invalid input. Please enter a valid number.\n----------"); 
            } 
        } 
        catch (Exception e) 
        { 
            Console.Write("An unexpected error occured.\n----------"); 
        } 
    } while (players == 0); 
    return players; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
106
1
Gpt3D_Clone106_1.cs 1 13
Gpt3D_Clone106_1.cs 14 63
----------------------------------------

static int GetPlayers () {
    int ? players;
    Console.Write ("How many people are playing?");
    while (players == null) {
        try {
            players = Convert.ToInt16 (Console.ReadLine ());
        }
        catch (Exception e) {
            Console.Write (e.Message + "\n" + "----------");
        }
    }
    return players.Value;
}
----------------------------------------

 static int GetPlayers() 
{ 
    int players = 0; 
    asInt = false; 
    while (!asInt)
    { 
        Console.Write ("How many people are playing?");
        string line = Console.ReadLine(); 
        try
        { 
            players = Int32.Parse(line); 
            asInt = true; 
        } 
        catch 
        {
            Console.WriteLine ("Please re-enter your value in numbers.\n---------"); 
        } 
    } 
    return players;
}  
 static int GetPlayers()
{
    int players;
    Console.Write("How many players?: ");
    while (true)
    {
        string input = Console.ReadLine();
        if (Int32.TryParse(input, out int result))
        {
            if(result >= 1)
            {
                players = result;
                break;
            }
            else
            {
                Console.WriteLine("The input is invalid. Please enter a valid number greater than 0.\n--------");
            }
        }
        else
        {
            Console.WriteLine("The input is invalid. Please enter a valid number.\n--------");
        }
    }
    return players;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
106
2
Gpt3D_Clone106_2.cs 1 13
Gpt3D_Clone106_2.cs 14 40
----------------------------------------

static int GetPlayers () {
    int ? players;
    Console.Write ("How many people are playing?");
    while (players == null) {
        try {
            players = Convert.ToInt16 (Console.ReadLine ());
        }
        catch (Exception e) {
            Console.Write (e.Message + "\n" + "----------");
        }
    }
    return players.Value;
}
----------------------------------------

 static int GetPlayers() 
{ 
    int players = -1; 
   
    do 
    { 
        Console.Write("How many people are playing?"); 
        string input = Console.ReadLine(); 
        if (Int32.TryParse(input, out players)) 
        { 
            if (players < 0) 
            { 
                Console.WriteLine("The input is invalid. Please enter a valid number greater than 0.\n----------"); 
            } 
        } 
        else 
        { 
            Console.WriteLine("The input is invalid. Please enter a valid number.\n----------");
            players = -1;
        }
    } 
    while (players < 0); 
   
    return players; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
106
3
Gpt3D_Clone106_3.cs 1 13
Gpt3D_Clone106_3.cs 14 41
----------------------------------------

static int GetPlayers () {
    int ? players;
    Console.Write ("How many people are playing?");
    while (players == null) {
        try {
            players = Convert.ToInt16 (Console.ReadLine ());
        }
        catch (Exception e) {
            Console.Write (e.Message + "\n" + "----------");
        }
    }
    return players.Value;
}
----------------------------------------

 static int GetPlayers()
{
    int players;
    while (true)
    {
        Console.Write("How many players?: ");
        string input = Console.ReadLine();
        if(Int32.TryParse(input, out players))
        {
            if(players >= 1)
            {
                break;
            }
            else
            {
                Console.WriteLine("The input is invalid. Please enter a valid number greater than 0.\n--------");
            }
        }
        else
        {
            Console.WriteLine("The input is invalid. Please enter a valid number.\n--------");
        }
    }
    return players;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
106
4
Gpt3D_Clone106_4.cs 1 13
Gpt3D_Clone106_4.cs 14 63
----------------------------------------

static int GetPlayers () {
    int ? players;
    Console.Write ("How many people are playing?");
    while (players == null) {
        try {
            players = Convert.ToInt16 (Console.ReadLine ());
        }
        catch (Exception e) {
            Console.Write (e.Message + "\n" + "----------");
        }
    }
    return players.Value;
}
----------------------------------------

 static int GetPlayers() 
{ 
    int players = 0; 
    asInt = false; 
    while (!asInt)
    { 
        Console.Write ("How many people are playing?");
        string line = Console.ReadLine(); 
        try
        { 
            players = Int32.Parse(line); 
            asInt = true; 
        } 
        catch 
        {
            Console.WriteLine ("Please re-enter your value in numbers.\n---------"); 
        } 
    } 
    return players;
}  
 static int GetPlayers()
{
    int players;
    Console.Write("How many players?: ");
    while (true)
    {
        string input = Console.ReadLine();
        if (Int32.TryParse(input, out int result))
        {
            if(result >= 1)
            {
                players = result;
                break;
            }
            else
            {
                Console.WriteLine("The input is invalid. Please enter a valid number greater than 0.\n--------");
            }
        }
        else
        {
            Console.WriteLine("The input is invalid. Please enter a valid number.\n--------");
        }
    }
    return players;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
106
5
Gpt3D_Clone106_5.cs 1 13
Gpt3D_Clone106_5.cs 14 35
----------------------------------------

static int GetPlayers () {
    int ? players;
    Console.Write ("How many people are playing?");
    while (players == null) {
        try {
            players = Convert.ToInt16 (Console.ReadLine ());
        }
        catch (Exception e) {
            Console.Write (e.Message + "\n" + "----------");
        }
    }
    return players.Value;
}
----------------------------------------

 static int GetPlayers()
{
    int players;
    Console.Write("How many players?: ");
    while (true)
    {
        string input = Console.ReadLine();
        if (Int32.TryParse(input, out int result))
        {
            players = result;
            break;
        }
        else
        {
            Console.WriteLine("The input is invalid. Please enter a valid number greater than 0.\n--------");
        }
    }
    return players;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
106
6
Gpt3D_Clone106_6.cs 1 13
Gpt3D_Clone106_6.cs 14 30
----------------------------------------

static int GetPlayers () {
    int ? players;
    Console.Write ("How many people are playing?");
    while (players == null) {
        try {
            players = Convert.ToInt16 (Console.ReadLine ());
        }
        catch (Exception e) {
            Console.Write (e.Message + "\n" + "----------");
        }
    }
    return players.Value;
}
----------------------------------------

 static int GetPlayers()
{
	int players;
	Console.Write("How many players?: ");
	do
	{
		if(!Int32.TryParse(Console.ReadLine(), out players) || players < 0)
		{
			Console.WriteLine("The input is invalid. Please enter a valid number greater than 0.\n--------");
		}
	}
	while(!Int32.TryParse(Console.ReadLine(), out players) || players < 0);
	return players;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
106
7
Gpt3D_Clone106_7.cs 1 13
Gpt3D_Clone106_7.cs 14 27
----------------------------------------

static int GetPlayers () {
    int ? players;
    Console.Write ("How many people are playing?");
    while (players == null) {
        try {
            players = Convert.ToInt16 (Console.ReadLine ());
        }
        catch (Exception e) {
            Console.Write (e.Message + "\n" + "----------");
        }
    }
    return players.Value;
}
----------------------------------------

 static int GetPlayers() 
{ 
    int players = 0;
    Console.Write("How many people are playing? ");
    string input = Console.ReadLine();
    while (!Int32.TryParse(input, out players) || players < 0) 
    { 
        Console.WriteLine("The input is invalid. Please enter a valid number greater than 0.\n----------"); 
        input = Console.ReadLine(); 
    }
    return players; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
106
8
Gpt3D_Clone106_8.cs 1 13
Gpt3D_Clone106_8.cs 14 27
----------------------------------------

static int GetPlayers () {
    int ? players;
    Console.Write ("How many people are playing?");
    while (players == null) {
        try {
            players = Convert.ToInt16 (Console.ReadLine ());
        }
        catch (Exception e) {
            Console.Write (e.Message + "\n" + "----------");
        }
    }
    return players.Value;
}
----------------------------------------

 static int GetPlayers() 
{ 
    int players; 
    Console.Write("How many people are playing?"); 
    string input = Console.ReadLine(); 
    while (!Int32.TryParse(input, out players)) 
    { 
        Console.WriteLine("Invalid input. Please enter a valid number."); 
        input = Console.ReadLine(); 
    } 
    return players; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
106
9
Gpt3D_Clone106_9.cs 1 13
Gpt3D_Clone106_9.cs 14 26
----------------------------------------

static int GetPlayers () {
    int ? players;
    Console.Write ("How many people are playing?");
    while (players == null) {
        try {
            players = Convert.ToInt16 (Console.ReadLine ());
        }
        catch (Exception e) {
            Console.Write (e.Message + "\n" + "----------");
        }
    }
    return players.Value;
}
----------------------------------------

 static int GetPlayers()
{
    int players;
    Console.Write("How many players?: ");
    while (!Int32.TryParse(Console.ReadLine(), out players) || players < 1)
    {
        Console.WriteLine("The input is invalid. Please enter a valid number greater than 0.\n----------");
    }
    return players;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
119
4
Gpt3D_Clone119_4.cs 1 12
Gpt3D_Clone119_4.cs 13 27
----------------------------------------

public void ProcessRequest (HttpContext context) {
    context.Response.ContentType = "application/x-javascript";
    HttpWebRequest request = (HttpWebRequest) WebRequest.Create ("http://widgets.twimg.com/j/2/widget.js");
    request.Accept = "application/javascript";
    request.KeepAlive = false;
    request.Method = "GET";
    HttpWebResponse webresponse = (HttpWebResponse) request.GetResponse ();
    Encoding enc = System.Text.Encoding.GetEncoding (1252);
    StreamReader loResponseStream = new StreamReader (webresponse.GetResponseStream (), enc);
    string Response = loResponseStream.ReadToEnd ();
    context.Response.Write (Response);
}
----------------------------------------

 public void ProcessRequest (HttpContext context) {
    context.Response.ContentType = "application/javascript";
    HttpWebRequest request = (HttpWebRequest) WebRequest.Create ("http://widgets.twimg.com/j/2/widget.js");
    request.Accept = "application/javascript";
    request.Method = "GET";
    request.KeepAlive = false;
    using (HttpWebResponse response = (HttpWebResponse) request.GetResponse ())
    using (StreamReader input = new StreamReader (response.GetResponseStream ()))
    {
        context.Response.Write (input.ReadToEnd ());
        input.Close ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
119
8
Gpt3D_Clone119_8.cs 1 12
Gpt3D_Clone119_8.cs 13 22
----------------------------------------

public void ProcessRequest (HttpContext context) {
    context.Response.ContentType = "application/x-javascript";
    HttpWebRequest request = (HttpWebRequest) WebRequest.Create ("http://widgets.twimg.com/j/2/widget.js");
    request.Accept = "application/javascript";
    request.KeepAlive = false;
    request.Method = "GET";
    HttpWebResponse webresponse = (HttpWebResponse) request.GetResponse ();
    Encoding enc = System.Text.Encoding.GetEncoding (1252);
    StreamReader loResponseStream = new StreamReader (webresponse.GetResponseStream (), enc);
    string Response = loResponseStream.ReadToEnd ();
    context.Response.Write (Response);
}
----------------------------------------

 public void ProcessRequest (HttpContext context) {
    context.Response.ContentType = "application/javascript";
    using (WebClient wc = new WebClient())
    {
        string html = wc.DownloadString("http://widgets.twimg.com/j/2/widget.js");
        context.Response.Write(html);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
121
2
Gpt3D_Clone121_2.cs 1 25
Gpt3D_Clone121_2.cs 26 60
----------------------------------------

private static bool GetFileNameFromHandle (IntPtr handle, int processId, out string fileName) {
    IntPtr currentProcess = NativeMethods.GetCurrentProcess ();
    bool remote = (processId != NativeMethods.GetProcessId (currentProcess));
    SafeProcessHandle processHandle = null;
    SafeObjectHandle objectHandle = null;
    try {
        if (remote) {
            processHandle = NativeMethods.OpenProcess (ProcessAccessRights.PROCESS_DUP_HANDLE, true, processId);
            if (NativeMethods.DuplicateHandle (processHandle.DangerousGetHandle (), handle, currentProcess, out objectHandle, 0, false, DuplicateHandleOptions.DUPLICATE_SAME_ACCESS)) {
                handle = objectHandle.DangerousGetHandle ();
            }
        }
        return GetFileNameFromHandle (handle, out fileName, 200);
    }
    finally {
        if (remote) {
            if (processHandle != null) {
                processHandle.Close ();
            }
            if (objectHandle != null) {
                objectHandle.Close ();
            }
        }
    }
}
----------------------------------------

 private static bool GetFileNameFromHandle(IntPtr handle, int processId, out string fileName)
{
    bool remote = (processId != NativeMethods.GetProcessId(NativeMethods.GetCurrentProcess()));
    SafeProcessHandle processHandle = null;
    SafeObjectHandle objectHandle = null;
    try
    {
        if (remote)
        {
            processHandle = NativeMethods.OpenProcess(ProcessAccessRights.PROCESS_DUP_HANDLE, true, processId);
            NativeMethods.DuplicateHandle(processHandle.DangerousGetHandle(), handle, NativeMethods.GetCurrentProcess(), out objectHandle, 0, false, DuplicateHandleOptions.DUPLICATE_SAME_ACCESS);
            handle = objectHandle.DangerousGetHandle();
        }
        if (GetFileNameFromHandle(handle, out fileName, 200))
        {
            return true;
        }
        else
        {
            fileName = "";
            return false;
        }
    }
    finally
    {
        if (remote)
        { 
             processHandle?.Close();
             objectHandle?.Close();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
124
1
Gpt3D_Clone124_1.cs 1 25
Gpt3D_Clone124_1.cs 26 50
----------------------------------------

private static string GetHandleTypeToken (IntPtr handle, int processId) {
    IntPtr currentProcess = NativeMethods.GetCurrentProcess ();
    bool remote = (processId != NativeMethods.GetProcessId (currentProcess));
    SafeProcessHandle processHandle = null;
    SafeObjectHandle objectHandle = null;
    try {
        if (remote) {
            processHandle = NativeMethods.OpenProcess (ProcessAccessRights.PROCESS_DUP_HANDLE, true, processId);
            if (NativeMethods.DuplicateHandle (processHandle.DangerousGetHandle (), handle, currentProcess, out objectHandle, 0, false, DuplicateHandleOptions.DUPLICATE_SAME_ACCESS)) {
                handle = objectHandle.DangerousGetHandle ();
            }
        }
        return GetHandleTypeToken (handle);
    }
    finally {
        if (remote) {
            if (processHandle != null) {
                processHandle.Close ();
            }
            if (objectHandle != null) {
                objectHandle.Close ();
            }
        }
    }
}
----------------------------------------

 private static string GetHandleTypeToken (IntPtr handle, int processId) {
    IntPtr currentProcess = NativeMethods.GetCurrentProcess ();
    bool remote = (processId != NativeMethods.GetProcessId (currentProcess));
    if (remote)
    {
        SafeProcessHandle processHandle;
        try
        {
            processHandle = NativeMethods.OpenProcess (ProcessAccessRights.PROCESS_DUP_HANDLE, true, processId);
        }
        catch (Exception)
        {
            return GetHandleTypeToken (handle);
        }
        SafeObjectHandle objectHandle = null;
        if (NativeMethods.DuplicateHandle (processHandle.DangerousGetHandle (), handle, currentProcess, out objectHandle, 0, false, DuplicateHandleOptions.DUPLICATE_SAME_ACCESS))
        {
            handle = objectHandle.DangerousGetHandle ();
        }
        processHandle.Close ();
    }
    return GetHandleTypeToken (handle);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
124
2
Gpt3D_Clone124_2.cs 1 25
Gpt3D_Clone124_2.cs 26 44
----------------------------------------

private static string GetHandleTypeToken (IntPtr handle, int processId) {
    IntPtr currentProcess = NativeMethods.GetCurrentProcess ();
    bool remote = (processId != NativeMethods.GetProcessId (currentProcess));
    SafeProcessHandle processHandle = null;
    SafeObjectHandle objectHandle = null;
    try {
        if (remote) {
            processHandle = NativeMethods.OpenProcess (ProcessAccessRights.PROCESS_DUP_HANDLE, true, processId);
            if (NativeMethods.DuplicateHandle (processHandle.DangerousGetHandle (), handle, currentProcess, out objectHandle, 0, false, DuplicateHandleOptions.DUPLICATE_SAME_ACCESS)) {
                handle = objectHandle.DangerousGetHandle ();
            }
        }
        return GetHandleTypeToken (handle);
    }
    finally {
        if (remote) {
            if (processHandle != null) {
                processHandle.Close ();
            }
            if (objectHandle != null) {
                objectHandle.Close ();
            }
        }
    }
}
----------------------------------------

 private static string GetHandleTypeToken(IntPtr handle, int processId) 
{ 
    IntPtr currentProcess = NativeMethods.GetCurrentProcess(); 
    bool remote = processId != NativeMethods.GetProcessId(currentProcess); 
    if (remote) 
    { 
        using (SafeHandle processHandle = NativeMethods.OpenProcess(ProcessAccessRights.PROCESS_DUP_HANDLE, true, processId)) 
        { 
            using (SafeHandle objectHandle = new SafeHandle()) 
            { 
                NativeMethods.DuplicateHandle(processHandle.DangerousGetHandle(), handle, currentProcess, out objectHandle, 0, false, DuplicateHandleOptions.DUPLICATE_SAME_ACCESS); 
                handle = objectHandle.DangerousGetHandle(); 
            } 
        } 
    } 
    return GetHandleTypeToken(handle); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
124
3
Gpt3D_Clone124_3.cs 1 25
Gpt3D_Clone124_3.cs 26 44
----------------------------------------

private static string GetHandleTypeToken (IntPtr handle, int processId) {
    IntPtr currentProcess = NativeMethods.GetCurrentProcess ();
    bool remote = (processId != NativeMethods.GetProcessId (currentProcess));
    SafeProcessHandle processHandle = null;
    SafeObjectHandle objectHandle = null;
    try {
        if (remote) {
            processHandle = NativeMethods.OpenProcess (ProcessAccessRights.PROCESS_DUP_HANDLE, true, processId);
            if (NativeMethods.DuplicateHandle (processHandle.DangerousGetHandle (), handle, currentProcess, out objectHandle, 0, false, DuplicateHandleOptions.DUPLICATE_SAME_ACCESS)) {
                handle = objectHandle.DangerousGetHandle ();
            }
        }
        return GetHandleTypeToken (handle);
    }
    finally {
        if (remote) {
            if (processHandle != null) {
                processHandle.Close ();
            }
            if (objectHandle != null) {
                objectHandle.Close ();
            }
        }
    }
}
----------------------------------------

 private static string GetHandleTypeToken(IntPtr handle, int processId) 
{ 
   IntPtr currentProcess = NativeMethods.GetCurrentProcess(); 
   bool remote = processId != NativeMethods.GetProcessId(currentProcess); 
   if (remote) 
   { 
      using (SafeProcessHandle processHandle = NativeMethods.OpenProcess(ProcessAccessRights.PROCESS_DUP_HANDLE, true, processId)) 
      { 
         using (SafeObjectHandle objectHandle = new SafeObjectHandle()) 
         { 
            NativeMethods.DuplicateHandle(processHandle.DangerousGetHandle(), handle, currentProcess, out objectHandle, 0, false, DuplicateHandleOptions.DUPLICATE_SAME_ACCESS); 
            handle = objectHandle.DangerousGetHandle(); 
         } 
      } 
   } 
   return GetHandleTypeToken(handle); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
124
4
Gpt3D_Clone124_4.cs 1 25
Gpt3D_Clone124_4.cs 26 41
----------------------------------------

private static string GetHandleTypeToken (IntPtr handle, int processId) {
    IntPtr currentProcess = NativeMethods.GetCurrentProcess ();
    bool remote = (processId != NativeMethods.GetProcessId (currentProcess));
    SafeProcessHandle processHandle = null;
    SafeObjectHandle objectHandle = null;
    try {
        if (remote) {
            processHandle = NativeMethods.OpenProcess (ProcessAccessRights.PROCESS_DUP_HANDLE, true, processId);
            if (NativeMethods.DuplicateHandle (processHandle.DangerousGetHandle (), handle, currentProcess, out objectHandle, 0, false, DuplicateHandleOptions.DUPLICATE_SAME_ACCESS)) {
                handle = objectHandle.DangerousGetHandle ();
            }
        }
        return GetHandleTypeToken (handle);
    }
    finally {
        if (remote) {
            if (processHandle != null) {
                processHandle.Close ();
            }
            if (objectHandle != null) {
                objectHandle.Close ();
            }
        }
    }
}
----------------------------------------

 private static string GetHandleTypeToken(IntPtr handle, int processId) { 
    IntPtr currentProcess = NativeMethods.GetCurrentProcess(); 
    bool remote = (processId != NativeMethods.GetProcessId(currentProcess)); 
    if (remote) 
    { 
        using (SafeProcessHandle processHandle = NativeMethods.OpenProcess(ProcessAccessRights.PROCESS_DUP_HANDLE, true, processId))  
        { 
            SafeObjectHandle objectHandle; 
            NativeMethods.DuplicateHandle(processHandle.DangerousGetHandle(), handle, currentProcess, out objectHandle, 0, false, DuplicateHandleOptions.DUPLICATE_SAME_ACCESS); 
            handle = objectHandle.DangerousGetHandle(); 
        } 
    } 
    return GetHandleTypeToken(handle); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
124
5
Gpt3D_Clone124_5.cs 1 25
Gpt3D_Clone124_5.cs 26 42
----------------------------------------

private static string GetHandleTypeToken (IntPtr handle, int processId) {
    IntPtr currentProcess = NativeMethods.GetCurrentProcess ();
    bool remote = (processId != NativeMethods.GetProcessId (currentProcess));
    SafeProcessHandle processHandle = null;
    SafeObjectHandle objectHandle = null;
    try {
        if (remote) {
            processHandle = NativeMethods.OpenProcess (ProcessAccessRights.PROCESS_DUP_HANDLE, true, processId);
            if (NativeMethods.DuplicateHandle (processHandle.DangerousGetHandle (), handle, currentProcess, out objectHandle, 0, false, DuplicateHandleOptions.DUPLICATE_SAME_ACCESS)) {
                handle = objectHandle.DangerousGetHandle ();
            }
        }
        return GetHandleTypeToken (handle);
    }
    finally {
        if (remote) {
            if (processHandle != null) {
                processHandle.Close ();
            }
            if (objectHandle != null) {
                objectHandle.Close ();
            }
        }
    }
}
----------------------------------------

 private static string GetHandleTypeToken (IntPtr handle, int processId) { 
    IntPtr currentProcess = NativeMethods.GetCurrentProcess (); 
    bool remote = (processId != NativeMethods.GetProcessId (currentProcess)); 
    if (remote) 
    { 
        SafeProcessHandle processHandle = NativeMethods.OpenProcess (ProcessAccessRights.PROCESS_DUP_HANDLE, true, processId); 
        SafeObjectHandle objectHandle = null; 
        if (NativeMethods.DuplicateHandle (processHandle.DangerousGetHandle (), handle, currentProcess, out objectHandle, 0, false, DuplicateHandleOptions.DUPLICATE_SAME_ACCESS))  
        { 
            handle = objectHandle.DangerousGetHandle (); 
        } 
    } 
    return GetHandleTypeToken (handle); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
125
7
Gpt3D_Clone125_7.cs 1 27
Gpt3D_Clone125_7.cs 28 45
----------------------------------------

static void Main () {
    int i, n;
    Console.WriteLine ("Enter the number of highest elements you want to extract from the array:");
    while (! int.TryParse (Console.ReadLine (), out n)) {
        Console.WriteLine ("Enter the number of highest elements you want to extract from the array:");
    }
    double [] arr = {12.1, 5.9, 2.9, 6.8, 20.5};
    if (n > arr.Length)
        n = arr.Length;
    double [] result = new double [n];
    double max = 0;
    int k;
    for (int j = 0; j < n; j ++) {
        max = arr [0];
        k = 0;
        for (i = 1; i < arr.Length; i ++) {
            if (max < arr [i]) {
                max = arr [i];
                k = i;
            }
        }
        result [j] = max;
        arr [k] = Double.MinValue;
        Console.WriteLine ("Highest numbers: {0}", result [j]);
    }
    Console.ReadKey ();
}
----------------------------------------

  static void Main () {
    int i, n;
    Console.WriteLine ("Enter the number of highest elements you want to extract from the array:");
    while (! int.TryParse (Console.ReadLine (), out n)) {
        Console.WriteLine ("Enter the number of highest elements you want to extract from the array:");
    }
    double [] arr = {12.1, 5.9, 2.9, 6.8, 20.5};
    if (n > arr.Length)
        n = arr.Length;
    for (int j = 0; j < n; j ++) {
        double max = arr.Max();
        Console.WriteLine("Highest numbers: {0}", max); 
        arr[Array.IndexOf(arr, max)] = Double.MinValue; 
    }
    Console.ReadKey ();
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
129
0
Gpt3D_Clone129_0.cs 1 31
Gpt3D_Clone129_0.cs 32 78
----------------------------------------

public static Image RotateImage (Image img, float rotationAngle) {
    int minx = int.MaxValue, maxx = int.MinValue, miny = int.MaxValue, maxy = int.MinValue;
    using (Bitmap bmp = new Bitmap (1, 1))
    {
        using (Graphics g = Graphics.FromImage (bmp))
        {
            g.TranslateTransform ((float) img.Width / 2, (float) img.Height / 2);
            g.RotateTransform (rotationAngle);
            g.TranslateTransform (- (float) img.Width / 2, - (float) img.Height / 2);
            Point [] pts = new Point [4];
            pts [0] = new Point (0, 0);
            pts [1] = new Point (img.Width, 0);
            pts [2] = new Point (img.Width, img.Height);
            pts [3] = new Point (0, img.Height);
            g.TransformPoints (CoordinateSpace.Device, CoordinateSpace.World, pts);
            foreach (Point pt in pts) {
                minx = Math.Min (minx, pt.X);
                maxx = Math.Max (maxx, pt.X);
                miny = Math.Min (miny, pt.Y);
                maxy = Math.Max (maxy, pt.Y);
            }
        }} Bitmap bmp2 = new Bitmap (maxx - minx, maxy - miny);
    using (Graphics g = Graphics.FromImage (bmp2))
    {
        g.TranslateTransform ((float) bmp2.Width / 2, (float) bmp2.Height / 2);
        g.RotateTransform (rotationAngle);
        g.TranslateTransform (- (float) bmp2.Width / 2, - (float) bmp2.Height / 2);
        g.InterpolationMode = InterpolationMode.HighQualityBicubic;
        g.DrawImage (img, bmp2.Width / 2 - img.Width / 2, bmp2.Height / 2 - img.Height / 2);
    } return bmp2;
}
----------------------------------------

public static Image RotateImage(Image img, float rotationAngle) 
{  
    int minx = Int32.MaxValue;
    int miny = Int32.MaxValue;
    int maxx = Int32.MinValue;
    int maxy = Int32.MinValue;
    Point[] pts = new Point[4];
    pts[0] = new Point(0,0);
    pts[1] = new Point(img.Width,0);
    pts[2] = new Point(img.Width,img.Height);
    pts[3] = new Point(0,img.Height);
    float angleRad = rotationAngle * (float)Math.PI / 180f;
    float centerX = img.Width / 2f; 
    float centerY = img.Height / 2f;
    for (int i = 0; i < 4; i++)
    {
        float x = pts[i].X - centerX; 
        float y = pts[i].Y - centerY;
        float newX = (x * (float)Math.Cos(angleRad)) - (y * (float)Math.Sin(angleRad)) + centerX; 
        float newY = (x * (float)Math.Sin(angleRad)) + (y * (float)Math.Cos(angleRad)) + centerY; 
        pts[i].X = (int)Math.Round(newX);
        pts[i].Y = (int)Math.Round(newY);
        minx = Math.Min(minx, pts[i].X);
        miny = Math.Min(miny, pts[i].Y);
        maxx = Math.Max(maxx, pts[i].X); 
        maxy = Math.Max(maxy, pts[i].Y);
    }
    Bitmap bmp2 = new Bitmap(maxx - minx, maxy - miny); 
    using (Graphics g = Graphics.FromImage(bmp2))
    {
        g.InterpolationMode = InterpolationMode.HighQualityBicubic;
        g.TranslateTransform(-minx, -miny); 
        g.RotateTransform(rotationAngle); 
        g.TranslateTransform(centerX, centerY); 
        g.DrawImage(img, 0, 0); 
    }
    return bmp2; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
129
1
Gpt3D_Clone129_1.cs 1 31
Gpt3D_Clone129_1.cs 32 72
----------------------------------------

public static Image RotateImage (Image img, float rotationAngle) {
    int minx = int.MaxValue, maxx = int.MinValue, miny = int.MaxValue, maxy = int.MinValue;
    using (Bitmap bmp = new Bitmap (1, 1))
    {
        using (Graphics g = Graphics.FromImage (bmp))
        {
            g.TranslateTransform ((float) img.Width / 2, (float) img.Height / 2);
            g.RotateTransform (rotationAngle);
            g.TranslateTransform (- (float) img.Width / 2, - (float) img.Height / 2);
            Point [] pts = new Point [4];
            pts [0] = new Point (0, 0);
            pts [1] = new Point (img.Width, 0);
            pts [2] = new Point (img.Width, img.Height);
            pts [3] = new Point (0, img.Height);
            g.TransformPoints (CoordinateSpace.Device, CoordinateSpace.World, pts);
            foreach (Point pt in pts) {
                minx = Math.Min (minx, pt.X);
                maxx = Math.Max (maxx, pt.X);
                miny = Math.Min (miny, pt.Y);
                maxy = Math.Max (maxy, pt.Y);
            }
        }} Bitmap bmp2 = new Bitmap (maxx - minx, maxy - miny);
    using (Graphics g = Graphics.FromImage (bmp2))
    {
        g.TranslateTransform ((float) bmp2.Width / 2, (float) bmp2.Height / 2);
        g.RotateTransform (rotationAngle);
        g.TranslateTransform (- (float) bmp2.Width / 2, - (float) bmp2.Height / 2);
        g.InterpolationMode = InterpolationMode.HighQualityBicubic;
        g.DrawImage (img, bmp2.Width / 2 - img.Width / 2, bmp2.Height / 2 - img.Height / 2);
    } return bmp2;
}
----------------------------------------

 public static Image RotateImage(Image img, float rotationAngle) 
{ 
    PointF center = new PointF(img.Width/2f, img.Height/2f);
    int minX = int.MaxValue; 
    int minY = int.MaxValue; 
    int maxX = int.MinValue; 
    int maxY = int.MinValue; 
  
    Point[] points = new Point[4]; 
    points[0] = new Point(0, 0); 
    points[1] = new Point(img.Width, 0); 
    points[2] = new Point(img.Width, img.Height); 
    points[3] = new Point(0, img.Height); 
  
    Matrix m = new Matrix(center.X, center.Y, rotationAngle); 
    
    for (int i = 0; i < points.Length; i++) 
    { 
        m.TransformPoints(points); 
        minX = Math.Min(minX, points[i].X); 
        minY = Math.Min(minY, points[i].Y); 
        maxX = Math.Max(maxX, points[i].X); 
        maxY = Math.Max(maxY, points[i].Y); 
    } 
  
    int width = maxX - minX; 
    int height = maxY - minY; 
  
    Bitmap bmp = new Bitmap(width, height); 
    using (Graphics g = Graphics.FromImage(bmp)) 
    {
        g.InterpolationMode = InterpolationMode.HighQualityBicubic;
        g.TranslateTransform(width/2f, height/2f);
        g.RotateTransform(rotationAngle); 
        g.TranslateTransform(-center.X, -center.Y); 
        g.DrawImage(img, -minX, -minY); 
    } 
    return bmp; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
129
3
Gpt3D_Clone129_3.cs 1 31
Gpt3D_Clone129_3.cs 32 67
----------------------------------------

public static Image RotateImage (Image img, float rotationAngle) {
    int minx = int.MaxValue, maxx = int.MinValue, miny = int.MaxValue, maxy = int.MinValue;
    using (Bitmap bmp = new Bitmap (1, 1))
    {
        using (Graphics g = Graphics.FromImage (bmp))
        {
            g.TranslateTransform ((float) img.Width / 2, (float) img.Height / 2);
            g.RotateTransform (rotationAngle);
            g.TranslateTransform (- (float) img.Width / 2, - (float) img.Height / 2);
            Point [] pts = new Point [4];
            pts [0] = new Point (0, 0);
            pts [1] = new Point (img.Width, 0);
            pts [2] = new Point (img.Width, img.Height);
            pts [3] = new Point (0, img.Height);
            g.TransformPoints (CoordinateSpace.Device, CoordinateSpace.World, pts);
            foreach (Point pt in pts) {
                minx = Math.Min (minx, pt.X);
                maxx = Math.Max (maxx, pt.X);
                miny = Math.Min (miny, pt.Y);
                maxy = Math.Max (maxy, pt.Y);
            }
        }} Bitmap bmp2 = new Bitmap (maxx - minx, maxy - miny);
    using (Graphics g = Graphics.FromImage (bmp2))
    {
        g.TranslateTransform ((float) bmp2.Width / 2, (float) bmp2.Height / 2);
        g.RotateTransform (rotationAngle);
        g.TranslateTransform (- (float) bmp2.Width / 2, - (float) bmp2.Height / 2);
        g.InterpolationMode = InterpolationMode.HighQualityBicubic;
        g.DrawImage (img, bmp2.Width / 2 - img.Width / 2, bmp2.Height / 2 - img.Height / 2);
    } return bmp2;
}
----------------------------------------

 public static Image RotateImage (Image img, float rotationAngle) 
{ 
    int minX = Int32.MaxValue, maxX = Int32.MinValue;
    int minY = Int32.MaxValue, maxY = Int32.MinValue;
    
    Point[] pts = new Point[4]; 
    pts[0] = new Point(0, 0); 
    pts[1] = new Point(img.Width, 0); 
    pts[2] = new Point(img.Width, img.Height); 
    pts[3] = new Point(0, img.Height); 
    Matrix m = new Matrix(); 
    m.RotateAt(rotationAngle, new PointF(img.Width / 2f, img.Height / 2f)); 
    m.TransformPoints(pts);
    
    for (int i = 0; i < 4; i ++) 
    {
        minX = Math.Min(minX, pts[i].X); 
        maxX = Math.Max(maxX, pts[i].X); 
        minY = Math.Min(minY, pts[i].Y); 
        maxY = Math.Max(maxY, pts[i].Y);
    } 
  
    Bitmap bmp2 = new Bitmap(maxX - minX, maxY - minY); 
    using (Graphics g = Graphics.FromImage(bmp2)) 
    {
        g.InterpolationMode = InterpolationMode.HighQualityBicubic;
        g.TranslateTransform(-minX, -minY);
        g.RotateTransform(rotationAngle); 
        g.TranslateTransform(img.Width / 2 - minX, img.Height / 2 - minY);
        g.DrawImage(img, 0, 0); 
    }
    return bmp2; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
129
4
Gpt3D_Clone129_4.cs 1 31
Gpt3D_Clone129_4.cs 32 75
----------------------------------------

public static Image RotateImage (Image img, float rotationAngle) {
    int minx = int.MaxValue, maxx = int.MinValue, miny = int.MaxValue, maxy = int.MinValue;
    using (Bitmap bmp = new Bitmap (1, 1))
    {
        using (Graphics g = Graphics.FromImage (bmp))
        {
            g.TranslateTransform ((float) img.Width / 2, (float) img.Height / 2);
            g.RotateTransform (rotationAngle);
            g.TranslateTransform (- (float) img.Width / 2, - (float) img.Height / 2);
            Point [] pts = new Point [4];
            pts [0] = new Point (0, 0);
            pts [1] = new Point (img.Width, 0);
            pts [2] = new Point (img.Width, img.Height);
            pts [3] = new Point (0, img.Height);
            g.TransformPoints (CoordinateSpace.Device, CoordinateSpace.World, pts);
            foreach (Point pt in pts) {
                minx = Math.Min (minx, pt.X);
                maxx = Math.Max (maxx, pt.X);
                miny = Math.Min (miny, pt.Y);
                maxy = Math.Max (maxy, pt.Y);
            }
        }} Bitmap bmp2 = new Bitmap (maxx - minx, maxy - miny);
    using (Graphics g = Graphics.FromImage (bmp2))
    {
        g.TranslateTransform ((float) bmp2.Width / 2, (float) bmp2.Height / 2);
        g.RotateTransform (rotationAngle);
        g.TranslateTransform (- (float) bmp2.Width / 2, - (float) bmp2.Height / 2);
        g.InterpolationMode = InterpolationMode.HighQualityBicubic;
        g.DrawImage (img, bmp2.Width / 2 - img.Width / 2, bmp2.Height / 2 - img.Height / 2);
    } return bmp2;
}
----------------------------------------

 public static Image RotateImage (Image img, float rotationAngle) 
{ 
    int minx = Int32.MaxValue;
    int miny = Int32.MaxValue;
    int maxx = Int32.MinValue;
    int maxy = Int32.MinValue;
    Point[] pts = new Point[4]
    {
        new Point(0, 0),
        new Point(img.Width, 0),
        new Point(img.Width, img.Height),
        new Point(0, img.Height)
    };
    //Rotate Points
    double angleTheta = rotationAngle * Math.PI / 180;
    for (int i = 0; i < 4; i++)
    {
        float x = pts[i].X - img.Width / 2;
        float y = pts[i].Y - img.Height / 2;
        pts[i] = new Point(
            (int)((x * Math.Cos(angleTheta)) - (y * Math.Sin(angleTheta)) + img.Width / 2),
            (int)((x * Math.Sin(angleTheta)) + (y * Math.Cos(angleTheta)) + img.Height / 2));
        minx = Math.Min(minx, pts[i].X);
        miny = Math.Min(miny, pts[i].Y);
        maxx = Math.Max(maxx, pts[i].X);
        maxy = Math.Max(maxy, pts[i].Y);
    }
    // Create new Image
    Bitmap bmp2 = new Bitmap(maxx - minx, maxy - miny);
    using (Graphics g = Graphics.FromImage(bmp2))
    {
        g.InterpolationMode = InterpolationMode.HighQualityBicubic;
        g.TranslateTransform(-minx, -miny);
        g.RotateTransform(rotationAngle);
        g.TranslateTransform(img.Width/2 - minx, img.Height/2 - miny);
        g.DrawImage(img, 0, 0);
    }
    return bmp2;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
131
0
Gpt3D_Clone131_0.cs 1 13
Gpt3D_Clone131_0.cs 14 34
----------------------------------------

public static object GetPropertyValue (object src, string propName) {
    if (src == null)
        throw new ArgumentException ("Value cannot be null.", "src");
    if (propName == null)
        throw new ArgumentException ("Value cannot be null.", "propName");
    if (propName.Contains (".")) {
        var temp = propName.Split (new char [] {'.'}, 2);
        return GetPropertyValue (GetPropertyValue (src, temp [0]), temp [1]);
    } else {
        var prop = src.GetType ().GetProperty (propName);
        return prop != null ? prop.GetValue (src, null) : null;
    }
}
----------------------------------------

public static object GetPropertyValue (object src, string propName) {
    if (src == null || propName == null)
        throw new ArgumentException ("Value cannot be null.", "src or propName");
    if (propName.Contains (".")) {
        string [] parts = propName.Split ('.');
        object value = src;
        foreach (string part in parts) {
            PropertyInfo objPropInfo = value.GetType ().GetProperty (part);
            if (objPropInfo == null)
                return null;
            value = objPropInfo.GetValue (value, null);
        }
        return value;
    } else {
        PropertyInfo objPropInfo = src.GetType ().GetProperty (propName);
        return objPropInfo != null ? objPropInfo.GetValue (src, null) : null;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
131
1
Gpt3D_Clone131_1.cs 1 13
Gpt3D_Clone131_1.cs 14 34
----------------------------------------

public static object GetPropertyValue (object src, string propName) {
    if (src == null)
        throw new ArgumentException ("Value cannot be null.", "src");
    if (propName == null)
        throw new ArgumentException ("Value cannot be null.", "propName");
    if (propName.Contains (".")) {
        var temp = propName.Split (new char [] {'.'}, 2);
        return GetPropertyValue (GetPropertyValue (src, temp [0]), temp [1]);
    } else {
        var prop = src.GetType ().GetProperty (propName);
        return prop != null ? prop.GetValue (src, null) : null;
    }
}
----------------------------------------

 public static object GetPropertyValue (object src, string propName) {
    if (src == null || propName == null)
        throw new ArgumentException ("Value cannot be null.", "src or propName");
    if (propName.Contains (".")) {
        string [] components = propName.Split ('.');
        object value = src;
        foreach (var c in components) {
            var objPropInfo = value.GetType ().GetProperty (c);
            if (objPropInfo == null)
                return null;
            value = objPropInfo.GetValue (value, null);
        }
        return value;
    } else {
        var objPropInfo = src.GetType ().GetProperty (propName);
        return objPropInfo != null ? objPropInfo.GetValue (src, null) : null;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
131
10
Gpt3D_Clone131_10.cs 1 13
Gpt3D_Clone131_10.cs 14 21
----------------------------------------

public static object GetPropertyValue (object src, string propName) {
    if (src == null)
        throw new ArgumentException ("Value cannot be null.", "src");
    if (propName == null)
        throw new ArgumentException ("Value cannot be null.", "propName");
    if (propName.Contains (".")) {
        var temp = propName.Split (new char [] {'.'}, 2);
        return GetPropertyValue (GetPropertyValue (src, temp [0]), temp [1]);
    } else {
        var prop = src.GetType ().GetProperty (propName);
        return prop != null ? prop.GetValue (src, null) : null;
    }
}
----------------------------------------

private static object GetProperty (object src, string propName) {
    PropertyInfo objPropInfo = src.GetType ().GetProperty (propName);
    if (objPropInfo == null)
        return null;
    return objPropInfo.GetValue (src, null);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
131
2
Gpt3D_Clone131_2.cs 1 13
Gpt3D_Clone131_2.cs 14 32
----------------------------------------

public static object GetPropertyValue (object src, string propName) {
    if (src == null)
        throw new ArgumentException ("Value cannot be null.", "src");
    if (propName == null)
        throw new ArgumentException ("Value cannot be null.", "propName");
    if (propName.Contains (".")) {
        var temp = propName.Split (new char [] {'.'}, 2);
        return GetPropertyValue (GetPropertyValue (src, temp [0]), temp [1]);
    } else {
        var prop = src.GetType ().GetProperty (propName);
        return prop != null ? prop.GetValue (src, null) : null;
    }
}
----------------------------------------

 public static object GetPropertyValue (object src, string propName) {
    if (src == null || propName == null)
        throw new ArgumentException ("Value cannot be null.", "src or propName");
    if (propName.Contains (".")) {
        int index = propName.IndexOf (".");
        string leftToken = propName.Substring (0, index);
        string rightToken = propName.Substring (index + 1);
        return GetPropertyValue (GetPropertyValue (src, leftToken), rightToken);
    } else {
        Type type = src.GetType ();
        PropertyInfo prop = type.GetProperty (propName);
        if (prop != null)
            return prop.GetValue (src, null);
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
131
3
Gpt3D_Clone131_3.cs 1 13
Gpt3D_Clone131_3.cs 14 32
----------------------------------------

public static object GetPropertyValue (object src, string propName) {
    if (src == null)
        throw new ArgumentException ("Value cannot be null.", "src");
    if (propName == null)
        throw new ArgumentException ("Value cannot be null.", "propName");
    if (propName.Contains (".")) {
        var temp = propName.Split (new char [] {'.'}, 2);
        return GetPropertyValue (GetPropertyValue (src, temp [0]), temp [1]);
    } else {
        var prop = src.GetType ().GetProperty (propName);
        return prop != null ? prop.GetValue (src, null) : null;
    }
}
----------------------------------------

 public static object GetPropertyValue (object src, string propName) {
    if (src == null || propName == null)
        throw new ArgumentException ("Value cannot be null.", "src or propName");
    if (propName.IndexOf (".") > 0) {
        string [] subProps = propName.Split ('.');
        object currentObj = GetPropertyValue (src, subProps [0]);
        if (subProps.Length > 1)
            return GetPropertyValue (currentObj, string.Join (".", subProps, 1, subProps.Length - 1));
    } else {
        PropertyInfo objPropInfo = src.GetType ().GetProperty (propName);
        if (objPropInfo != null)
            return objPropInfo.GetValue (src, null);
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
131
4
Gpt3D_Clone131_4.cs 1 13
Gpt3D_Clone131_4.cs 14 30
----------------------------------------

public static object GetPropertyValue (object src, string propName) {
    if (src == null)
        throw new ArgumentException ("Value cannot be null.", "src");
    if (propName == null)
        throw new ArgumentException ("Value cannot be null.", "propName");
    if (propName.Contains (".")) {
        var temp = propName.Split (new char [] {'.'}, 2);
        return GetPropertyValue (GetPropertyValue (src, temp [0]), temp [1]);
    } else {
        var prop = src.GetType ().GetProperty (propName);
        return prop != null ? prop.GetValue (src, null) : null;
    }
}
----------------------------------------

 public static object GetPropertyValue (object src, string propName) {
    if (src == null || propName == null)
        throw new ArgumentException ("Value cannot be null.", "src or propName");
    string [] tokens = propName.Split ('.');
    PropertyInfo currentProperty = null;
    object currentObject = src;
    foreach (string token in tokens) {
        currentProperty = currentObject.GetType ().GetProperty (token);
        if (currentProperty == null)
            return null;
        currentObject = currentProperty.GetValue (currentObject, null);
    }
    return currentObject;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
131
5
Gpt3D_Clone131_5.cs 1 13
Gpt3D_Clone131_5.cs 14 31
----------------------------------------

public static object GetPropertyValue (object src, string propName) {
    if (src == null)
        throw new ArgumentException ("Value cannot be null.", "src");
    if (propName == null)
        throw new ArgumentException ("Value cannot be null.", "propName");
    if (propName.Contains (".")) {
        var temp = propName.Split (new char [] {'.'}, 2);
        return GetPropertyValue (GetPropertyValue (src, temp [0]), temp [1]);
    } else {
        var prop = src.GetType ().GetProperty (propName);
        return prop != null ? prop.GetValue (src, null) : null;
    }
}
----------------------------------------

 public static object GetPropertyValue (object src, string propName) {
    if (src == null || propName == null)
        throw new ArgumentException ("Value cannot be null.", "src or propName");
    PropertyInfo propertyInfo;
    object value = src;
    string [] components = propName.Split('.');
    foreach (string c in components) {
        propertyInfo = value.GetType().GetProperty(c);
        if (propertyInfo == null)
            return null;
        value = propertyInfo.GetValue(value, null);
    }
    return value;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
131
6
Gpt3D_Clone131_6.cs 1 13
Gpt3D_Clone131_6.cs 14 30
----------------------------------------

public static object GetPropertyValue (object src, string propName) {
    if (src == null)
        throw new ArgumentException ("Value cannot be null.", "src");
    if (propName == null)
        throw new ArgumentException ("Value cannot be null.", "propName");
    if (propName.Contains (".")) {
        var temp = propName.Split (new char [] {'.'}, 2);
        return GetPropertyValue (GetPropertyValue (src, temp [0]), temp [1]);
    } else {
        var prop = src.GetType ().GetProperty (propName);
        return prop != null ? prop.GetValue (src, null) : null;
    }
}
----------------------------------------

 public static object GetPropertyValue (object src, string propName) {
    if (src == null || propName == null)
        throw new ArgumentException ("Value cannot be null.", "src or propName");
    if (propName.Contains (".")) {
        string [] temp = propName.Split (new char [] {'.'}, 2);
        return GetPropertyValue (GetPropertyValue (src, temp [0]), temp [1]);
    } else {
        Type typeObj = src.GetType ();
        PropertyInfo prope = typeObj.GetProperty (propName);
        if (prope != null) {
            return prope.GetValue (src, null);
        }
        return null;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
131
7
Gpt3D_Clone131_7.cs 1 13
Gpt3D_Clone131_7.cs 14 33
----------------------------------------

public static object GetPropertyValue (object src, string propName) {
    if (src == null)
        throw new ArgumentException ("Value cannot be null.", "src");
    if (propName == null)
        throw new ArgumentException ("Value cannot be null.", "propName");
    if (propName.Contains (".")) {
        var temp = propName.Split (new char [] {'.'}, 2);
        return GetPropertyValue (GetPropertyValue (src, temp [0]), temp [1]);
    } else {
        var prop = src.GetType ().GetProperty (propName);
        return prop != null ? prop.GetValue (src, null) : null;
    }
}
----------------------------------------

 public static object GetPropertyValue (object src, string propName) {
    if (src == null || propName == null)
        throw new ArgumentException ("Value cannot be null.", "src or propName");
    string [] sections = propName.Split('.');
    if (sections.Length > 1)
    {
        PropertyInfo property = src.GetType().GetProperty(sections[0]);
        string remainingPath = String.Join(".", sections, 1, sections.Length - 1);
        return GetPropertyValue(property.GetValue(src, null), remainingPath);
    } 
    else 
    {
        PropertyInfo objPropInfo = src.GetType().GetProperty(propName);
        return objPropInfo != null ? objPropInfo.GetValue(src, null) : null;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
131
8
Gpt3D_Clone131_8.cs 1 13
Gpt3D_Clone131_8.cs 14 28
----------------------------------------

public static object GetPropertyValue (object src, string propName) {
    if (src == null)
        throw new ArgumentException ("Value cannot be null.", "src");
    if (propName == null)
        throw new ArgumentException ("Value cannot be null.", "propName");
    if (propName.Contains (".")) {
        var temp = propName.Split (new char [] {'.'}, 2);
        return GetPropertyValue (GetPropertyValue (src, temp [0]), temp [1]);
    } else {
        var prop = src.GetType ().GetProperty (propName);
        return prop != null ? prop.GetValue (src, null) : null;
    }
}
----------------------------------------

 public static object GetPropertyValue (object src, string propName) {
    if (src == null || propName == null)
        throw new ArgumentException ("Value cannot be null.", "src or propName");
    object value = src;
    foreach (var part in propName.Split('.')) {
        PropertyInfo prop = value.GetType().GetProperty(part);
        if (prop == null)
            return null;
        value = prop.GetValue (value, null);
    }
    return value;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
131
9
Gpt3D_Clone131_9.cs 1 13
Gpt3D_Clone131_9.cs 14 30
----------------------------------------

public static object GetPropertyValue (object src, string propName) {
    if (src == null)
        throw new ArgumentException ("Value cannot be null.", "src");
    if (propName == null)
        throw new ArgumentException ("Value cannot be null.", "propName");
    if (propName.Contains (".")) {
        var temp = propName.Split (new char [] {'.'}, 2);
        return GetPropertyValue (GetPropertyValue (src, temp [0]), temp [1]);
    } else {
        var prop = src.GetType ().GetProperty (propName);
        return prop != null ? prop.GetValue (src, null) : null;
    }
}
----------------------------------------

 public static object GetPropertyValue (object src, string propName) {
    if (src == null || propName == null)
        throw new ArgumentException ("Value cannot be null.", "src or propName");
    if (propName.Contains (".")) {
        string [] path = propName.Split ('.');
        object result = src;
        foreach (var part in path) {
            result = GetProperty (result, part);
        }
        return result;
    }
    return GetProperty (src, propName);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
138
0
Gpt3D_Clone138_0.cs 1 16
Gpt3D_Clone138_0.cs 17 50
----------------------------------------

public static void FlushLogs () {
    int queueCount;
    bool isProcessingLogs;
    while (true) {
        m_waitingThreadEvent.WaitOne ();
        lock (m_isProcessingLogsSync)
        {
            isProcessingLogs = m_isProcessingLogs;
        } lock (m_loggerQueueSync)
        {
            queueCount = m_loggerQueue.Count;
        } if (queueCount == 0 && ! isProcessingLogs)
            break;
        Thread.Sleep (400);
    }
}
----------------------------------------

 public static void FlushLogs () {
    int queueCount;
    bool isProcessingLogs;
    while (true) {
        // Wait on to the event 
        m_waitingThreadEvent.WaitOne ();
        // declare some variables 
        var e1Entered = false;
        var e2Entered = false;
        try 
        {
            // try to acquire locks 
            e1Entered = Monitor.TryEnter(m_isProcessingLogsSync);
            // assign the status of isProcessingLogs
            isProcessingLogs = m_isProcessingLogs;
            e2Entered = Monitor.TryEnter(m_loggerQueueSync);
            // assign the amount of items in the queue
            queueCount = m_loggerQueue.Count;
            // if both checks are completed and valid, exit the loop
            if (queueCount == 0 && ! isProcessingLogs)
                break;
            // Sleep for 400 ms 
            Thread.Sleep (400);
        } 
        finally 
        {
            // release locks
            if (e1Entered)  Monitor.Exit(m_isProcessingLogsSync);
            if (e2Entered)  Monitor.Exit(m_loggerQueueSync);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
138
4
Gpt3D_Clone138_4.cs 1 16
Gpt3D_Clone138_4.cs 17 40
----------------------------------------

public static void FlushLogs () {
    int queueCount;
    bool isProcessingLogs;
    while (true) {
        m_waitingThreadEvent.WaitOne ();
        lock (m_isProcessingLogsSync)
        {
            isProcessingLogs = m_isProcessingLogs;
        } lock (m_loggerQueueSync)
        {
            queueCount = m_loggerQueue.Count;
        } if (queueCount == 0 && ! isProcessingLogs)
            break;
        Thread.Sleep (400);
    }
}
----------------------------------------

  public static void FlushLogs () {
    
    while(true) {
        m_waitingThreadEvent.WaitOne ();
        // check if Logs in the Queue
        if (m_loggerQueue.Count == 0) {
            // if the Queue is Empty check to see if it is Processing
            lock (m_isProcessingLogsSync){
                // if it is processing we will wait
                if (m_isProcessingLogs) {
                    Thread.Sleep(400);
                    // if it's not processing and Queue is empty -- break
                } else { break;
                }
            }
        // if there is something in the queue -- keep in loop 
        } else {
            // wait 400ms 
            Thread.Sleep(400);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
138
6
Gpt3D_Clone138_6.cs 1 16
Gpt3D_Clone138_6.cs 17 40
----------------------------------------

public static void FlushLogs () {
    int queueCount;
    bool isProcessingLogs;
    while (true) {
        m_waitingThreadEvent.WaitOne ();
        lock (m_isProcessingLogsSync)
        {
            isProcessingLogs = m_isProcessingLogs;
        } lock (m_loggerQueueSync)
        {
            queueCount = m_loggerQueue.Count;
        } if (queueCount == 0 && ! isProcessingLogs)
            break;
        Thread.Sleep (400);
    }
}
----------------------------------------

  public static void FlushLogs () {
    
    bool isProcessingLogs;
    // check for Queue 
    if (!m_loggerQueue.Any()) {
        // If it's empty check processing status
        lock (m_isProcessingLogsSync){
            isProcessingLogs = m_isProcessingLogs;
            // wait until process is done
            while(isProcessingLogs){
                m_waitingThreadEvent.WaitOne ();
            }
        // break
        break;
        }
    }
    else{
        // wait 400ms and loop
        Thread.Sleep(400);
    }
    
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
138
7
Gpt3D_Clone138_7.cs 1 16
Gpt3D_Clone138_7.cs 17 28
----------------------------------------

public static void FlushLogs () {
    int queueCount;
    bool isProcessingLogs;
    while (true) {
        m_waitingThreadEvent.WaitOne ();
        lock (m_isProcessingLogsSync)
        {
            isProcessingLogs = m_isProcessingLogs;
        } lock (m_loggerQueueSync)
        {
            queueCount = m_loggerQueue.Count;
        } if (queueCount == 0 && ! isProcessingLogs)
            break;
        Thread.Sleep (400);
    }
}
----------------------------------------

  public static void FlushLogs () {
    int queueCount;
    bool isProcessingLogs;
    while (true) {
        m_waitingThreadEvent.WaitOne ();
        if (m_loggerQueue.Count == 0 && ! m_isProcessingLogs)
            break;
        Thread.Sleep (400);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
141
0
Gpt3D_Clone141_0.cs 1 12
Gpt3D_Clone141_0.cs 13 25
----------------------------------------

public string GetResultsWithHyphen (string inText) {
    var counter = 0;
    var outString = string.Empty;
    while (counter < inText.Length) {
        if (counter % 4 == 0)
            outString = string.Format ("{0}-{1}", outString, inText.Substring (counter, 1));
        else
            outString += inText.Substring (counter, 1);
        counter ++;
    }
    return outString;
}
----------------------------------------

 public string GetResultsWithHyphen (string inText) {
    var outString = string.Empty;
    for (int counter = 0; counter < inText.Length; counter++)
    {
        if (counter % 4 == 0 && counter > 0)
            outString = string.Format ("{0}-{1}", outString.Substring (0, outString.Length - 1), inText.Substring (counter, 1));
        else
            outString += inText.Substring (counter, 1);
    }
    return outString;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
141
2
Gpt3D_Clone141_2.cs 1 12
Gpt3D_Clone141_2.cs 13 25
----------------------------------------

public string GetResultsWithHyphen (string inText) {
    var counter = 0;
    var outString = string.Empty;
    while (counter < inText.Length) {
        if (counter % 4 == 0)
            outString = string.Format ("{0}-{1}", outString, inText.Substring (counter, 1));
        else
            outString += inText.Substring (counter, 1);
        counter ++;
    }
    return outString;
}
----------------------------------------

 public string GetResultsWithHyphen (string inText) {
    var outString = string.Empty;
    for (int i = 0; i < inText.Length; i++)
    {
        if (i % 4 == 0 && i > 0)
            outString = string.Format ("{0}-{1}{2}", outString.Substring (0, outString.Length - 1), inText.Substring (i, 1), outString.Substring (outString.Length - 1));
        else
            outString += inText.Substring (i, 1);
    }
    return outString;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
141
4
Gpt3D_Clone141_4.cs 1 12
Gpt3D_Clone141_4.cs 13 25
----------------------------------------

public string GetResultsWithHyphen (string inText) {
    var counter = 0;
    var outString = string.Empty;
    while (counter < inText.Length) {
        if (counter % 4 == 0)
            outString = string.Format ("{0}-{1}", outString, inText.Substring (counter, 1));
        else
            outString += inText.Substring (counter, 1);
        counter ++;
    }
    return outString;
}
----------------------------------------

 public string GetResultsWithHyphen (string inText) {
    var outString = string.Empty;
    for(int counter = 0; counter < inText.Length; counter++)
    {
        if (counter % 4 == 0 && counter > 0)
            outString = string.Format("{1}-{0}{2}", inText.Substring (counter, 1), outString.Substring(0, outString.Length-1), outString.Substring(outString.Length-1));
        else
            outString += inText.Substring (counter, 1);
    }
    return outString;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
141
6
Gpt3D_Clone141_6.cs 1 12
Gpt3D_Clone141_6.cs 13 24
----------------------------------------

public string GetResultsWithHyphen (string inText) {
    var counter = 0;
    var outString = string.Empty;
    while (counter < inText.Length) {
        if (counter % 4 == 0)
            outString = string.Format ("{0}-{1}", outString, inText.Substring (counter, 1));
        else
            outString += inText.Substring (counter, 1);
        counter ++;
    }
    return outString;
}
----------------------------------------

 public string GetResultsWithHyphen (string inText) {
    var outString = string.Empty;
    for(int i = 0; i < inText.Length; i++)
    {
        outString += (i % 4 == 0) 
            ? string.Format("-{0}{1}",inText.Substring (i, 1), outString): 
            inText.Substring (i, 1);
    }
    return outString;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
141
7
Gpt3D_Clone141_7.cs 1 12
Gpt3D_Clone141_7.cs 13 24
----------------------------------------

public string GetResultsWithHyphen (string inText) {
    var counter = 0;
    var outString = string.Empty;
    while (counter < inText.Length) {
        if (counter % 4 == 0)
            outString = string.Format ("{0}-{1}", outString, inText.Substring (counter, 1));
        else
            outString += inText.Substring (counter, 1);
        counter ++;
    }
    return outString;
}
----------------------------------------

 public string GetResultsWithHyphen (string inText) {
    var outString = string.Empty;
    for(int i = 0; i < inText.Length; i++)
    {
        outString += ((i % 4 == 0) && (i > 0)) 
            ? string.Format("-{0}{1}",inText.Substring (i, 1), outString): 
            inText.Substring (i, 1);
    }
    return outString;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
141
8
Gpt3D_Clone141_8.cs 1 12
Gpt3D_Clone141_8.cs 13 22
----------------------------------------

public string GetResultsWithHyphen (string inText) {
    var counter = 0;
    var outString = string.Empty;
    while (counter < inText.Length) {
        if (counter % 4 == 0)
            outString = string.Format ("{0}-{1}", outString, inText.Substring (counter, 1));
        else
            outString += inText.Substring (counter, 1);
        counter ++;
    }
    return outString;
}
----------------------------------------

 public string GetResultsWithHyphen (string inText) {
    var outString = string.Empty;
    for(int i = 0; i < inText.Length; i++)
    {
        outString += (i % 4 == 0) ?  string.Format("-{0}",inText.Substring (i, 1)) : inText.Substring (i, 1);
    }
    return outString;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
143
0
Gpt3D_Clone143_0.cs 1 18
Gpt3D_Clone143_0.cs 19 53
----------------------------------------

public int Compare (string x, string y) {
    string [] xs = x.Split ('.');
    string [] ys = y.Split ('.');
    int maxLoop = Math.Min (xs.Length, ys.Length);
    for (int i = 0; i < maxLoop; i ++) {
        if (int.Parse (xs [i]) > int.Parse (ys [i])) {
            return 1;
        } else if (int.Parse (xs [i]) < int.Parse (ys [i])) {
            return - 1;
        }
    }
    if (xs.Length > ys.Length) {
        return 1;
    } else if (xs.Length < ys.Length) {
        return - 1;
    }
    return 0;
}
----------------------------------------

 public int Compare(string x, string y)
{
    string[] xSplit = x.Split('.');
    string[] ySplit = y.Split('.');
    int xLen = xSplit.Length;
    int yLen = ySplit.Length;
    int result = 0;
    int minLen = Math.Min(xLen, yLen);
    for (int i = 0; i < minLen; i++)
    {
        int xVal = int.Parse(xSplit[i]);
        int yVal = int.Parse(ySplit[i]);
        if (xVal != yVal)
        {
            result = (xVal > yVal) ? 1 : -1;
            break;
        }
    }
    if (result == 0)
    {
        if (xLen > yLen)
        {
            result = 1;
        }
        else if (xLen < yLen)
        {
            result = -1;
        }
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
143
1
Gpt3D_Clone143_1.cs 1 18
Gpt3D_Clone143_1.cs 19 51
----------------------------------------

public int Compare (string x, string y) {
    string [] xs = x.Split ('.');
    string [] ys = y.Split ('.');
    int maxLoop = Math.Min (xs.Length, ys.Length);
    for (int i = 0; i < maxLoop; i ++) {
        if (int.Parse (xs [i]) > int.Parse (ys [i])) {
            return 1;
        } else if (int.Parse (xs [i]) < int.Parse (ys [i])) {
            return - 1;
        }
    }
    if (xs.Length > ys.Length) {
        return 1;
    } else if (xs.Length < ys.Length) {
        return - 1;
    }
    return 0;
}
----------------------------------------

 public int Compare(string x, string y)
{
    string[] xSplit = x.Split('.');
    string[] ySplit = y.Split('.');
    int result = 0;
    int minLen = Math.Min(xSplit.Length, ySplit.Length);
    int i = 0;
    while (i < minLen && result == 0)
    {
        int xVal = int.Parse(xSplit[i]);
        int yVal = int.Parse(ySplit[i]);
        if (xVal != yVal)
        {
            result = (xVal > yVal) ? 1 : -1;
        }
        i++;
    }
    if (result == 0)
    {
        if (xSplit.Length > ySplit.Length)
        {
            result = 1;
        }
        else if (xSplit.Length < ySplit.Length)
        {
            result = -1;
        }
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
143
2
Gpt3D_Clone143_2.cs 1 18
Gpt3D_Clone143_2.cs 19 51
----------------------------------------

public int Compare (string x, string y) {
    string [] xs = x.Split ('.');
    string [] ys = y.Split ('.');
    int maxLoop = Math.Min (xs.Length, ys.Length);
    for (int i = 0; i < maxLoop; i ++) {
        if (int.Parse (xs [i]) > int.Parse (ys [i])) {
            return 1;
        } else if (int.Parse (xs [i]) < int.Parse (ys [i])) {
            return - 1;
        }
    }
    if (xs.Length > ys.Length) {
        return 1;
    } else if (xs.Length < ys.Length) {
        return - 1;
    }
    return 0;
}
----------------------------------------

 public int Compare(string x, string y)
{
    string[] xSplit = x.Split('.');
    string[] ySplit = y.Split('.');
    int minLen = Math.Min(xSplit.Length, ySplit.Length);
    int result = 0;
    for (int i = 0; i < minLen; i++)
    {
        int xVal = int.Parse(xSplit[i]);
        int yVal = int.Parse(ySplit[i]);
        if (xVal != yVal)
        {
            result = (xVal > yVal) ? 1 : -1;
            break;
        }
    }
    if (result == 0)
    {
        if (xSplit.Length > ySplit.Length)
        {
            result = 1;
        }
        else if (xSplit.Length < ySplit.Length)
        {
            result = -1;
        }
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
143
3
Gpt3D_Clone143_3.cs 1 18
Gpt3D_Clone143_3.cs 19 50
----------------------------------------

public int Compare (string x, string y) {
    string [] xs = x.Split ('.');
    string [] ys = y.Split ('.');
    int maxLoop = Math.Min (xs.Length, ys.Length);
    for (int i = 0; i < maxLoop; i ++) {
        if (int.Parse (xs [i]) > int.Parse (ys [i])) {
            return 1;
        } else if (int.Parse (xs [i]) < int.Parse (ys [i])) {
            return - 1;
        }
    }
    if (xs.Length > ys.Length) {
        return 1;
    } else if (xs.Length < ys.Length) {
        return - 1;
    }
    return 0;
}
----------------------------------------

 public int Compare(string x, string y)
{
    string[] xSplit = x.Split('.');
    string[] ySplit = y.Split('.');
    int result = 0;
    int minLen = Math.Min(xSplit.Length, ySplit.Length);
    for (int i = 0; i < minLen; i++)
    {
        int xVal = int.Parse(xSplit[i]);
        int yVal = int.Parse(ySplit[i]);
        if (xVal != yVal)
        {
            result = (xVal > yVal) ? 1 : -1;
            break;
        }
    }
    if (result == 0)
    {
        if (xSplit.Length > ySplit.Length)
        {
            result = 1;
        }
        else if (xSplit.Length < ySplit.Length)
        {
            result = -1;
        }
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
143
5
Gpt3D_Clone143_5.cs 1 18
Gpt3D_Clone143_5.cs 19 49
----------------------------------------

public int Compare (string x, string y) {
    string [] xs = x.Split ('.');
    string [] ys = y.Split ('.');
    int maxLoop = Math.Min (xs.Length, ys.Length);
    for (int i = 0; i < maxLoop; i ++) {
        if (int.Parse (xs [i]) > int.Parse (ys [i])) {
            return 1;
        } else if (int.Parse (xs [i]) < int.Parse (ys [i])) {
            return - 1;
        }
    }
    if (xs.Length > ys.Length) {
        return 1;
    } else if (xs.Length < ys.Length) {
        return - 1;
    }
    return 0;
}
----------------------------------------

 public int Compare(string x, string y)
{
    string[] xSplit = x.Split('.');
    string[] ySplit = y.Split('.');
    int xLen = xSplit.Length;
    int yLen = ySplit.Length;
    int minLen = Math.Min(xLen, yLen);
    for (int i = 0; i < minLen; i++)
    {
        int xVal = int.Parse(xSplit[i]);
        int yVal = int.Parse(ySplit[i]);
        if (xVal != yVal)
        {
            return (xVal > yVal) ? 1 : -1;
        }
    }
    if (xLen > yLen)
    {
        return 1;
    }
    else if (xLen < yLen)
    {
        return -1;
    }
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
144
0
Gpt3D_Clone144_0.cs 1 10
Gpt3D_Clone144_0.cs 11 28
----------------------------------------

private int Compare (string [] x, string [] y) {
    if (x.Length > y.Length)
        return - Compare (y, x);
    for (int i = 0; i != x.Length; ++ i) {
        int cmp = int.Parse (x [i]).CompareTo (int.Parse (y [i]));
        if (cmp != 0)
            return cmp;
    }
    return x.Length == y.Length ? 0 : - 1;
}
----------------------------------------

  private int Compare(string[] x, string[] y)
    {
        if (x.Length > y.Length)
            return - Compare(y, x);
        for (int i = 0; i < x.Length; i++)
        {
            int xNumber = int.Parse(x[i]);
            int yNumber = int.Parse(y[i]);
            if (xNumber != yNumber)
                return xNumber.CompareTo(yNumber);
        }
        if (x.Length == y.Length)
            return 0;
        else
            return -1;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
144
1
Gpt3D_Clone144_1.cs 1 10
Gpt3D_Clone144_1.cs 11 28
----------------------------------------

private int Compare (string [] x, string [] y) {
    if (x.Length > y.Length)
        return - Compare (y, x);
    for (int i = 0; i != x.Length; ++ i) {
        int cmp = int.Parse (x [i]).CompareTo (int.Parse (y [i]));
        if (cmp != 0)
            return cmp;
    }
    return x.Length == y.Length ? 0 : - 1;
}
----------------------------------------

  private int Compare(string[] x, string[] y)
    {
        if (x.Length > y.Length)
            return -Compare(y, x);
        int result = 0;
        for (int i = 0; i != x.Length; ++i)
        {
            result = int.Parse(x[i]) - int.Parse(y[i]);
            if (result != 0)
                return result;
        }
        if (x.Length == y.Length)
            return 0;
        else
            return -1;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
144
2
Gpt3D_Clone144_2.cs 1 10
Gpt3D_Clone144_2.cs 11 27
----------------------------------------

private int Compare (string [] x, string [] y) {
    if (x.Length > y.Length)
        return - Compare (y, x);
    for (int i = 0; i != x.Length; ++ i) {
        int cmp = int.Parse (x [i]).CompareTo (int.Parse (y [i]));
        if (cmp != 0)
            return cmp;
    }
    return x.Length == y.Length ? 0 : - 1;
}
----------------------------------------

  private int Compare(string[] x, string[] y)
    {
        if (x.Length > y.Length)
            return - Compare(y, x);
        for (int i = 0; i != x.Length; i++)
        {
            int difference = int.Parse(x[i]) - int.Parse(y[i]);
            if (difference != 0)
                return difference;
        }
        if (x.Length == y.Length)
            return 0;
        else
            return -1;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
147
0
Gpt3D_Clone147_0.cs 1 15
Gpt3D_Clone147_0.cs 16 37
----------------------------------------

static int IndexOfLongestRun (string input) {
    int longestRunStart = - 1, longestRunLength = 0;
    for (int i = 0; i < input.Length;) {
        var runValue = input [i];
        int runStart = i;
        while (++ i < input.Length && input [i] == runValue) {
        }
        int runLength = i - runStart;
        if (longestRunLength < runLength) {
            longestRunStart = runStart;
            longestRunLength = runLength;
        }
    }
    return longestRunStart;
}
----------------------------------------

 static int IndexOfLongestRun (string input) {
    int longestRunStart = -1;
    int longestRunLength = 0;
    int currentRunStart = -1;
    int currentRunLength = 0;
    for (int i = 0; i < input.Length; i++) {
        char currentRunSymbol = input[i];
        if (currentRunStart == -1 || currentRunSymbol != input[currentRunStart]) {
            currentRunStart = i;
            currentRunLength = 0;
        } else {
            ++currentRunLength;
        }
        if (currentRunLength > longestRunLength) {
            longestRunStart = currentRunStart;
            longestRunLength = currentRunLength;
        }
    }
    return longestRunStart;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
147
1
Gpt3D_Clone147_1.cs 1 15
Gpt3D_Clone147_1.cs 16 57
----------------------------------------

static int IndexOfLongestRun (string input) {
    int longestRunStart = - 1, longestRunLength = 0;
    for (int i = 0; i < input.Length;) {
        var runValue = input [i];
        int runStart = i;
        while (++ i < input.Length && input [i] == runValue) {
        }
        int runLength = i - runStart;
        if (longestRunLength < runLength) {
            longestRunStart = runStart;
            longestRunLength = runLength;
        }
    }
    return longestRunStart;
}
----------------------------------------

 static int IndexOfLongestRun(string s)
    {
        int currentRunStart = -1, longestRunStart = -1, longestRunLength = 0;
        for (int i = 0; i < s.Length;)
        {
            char currentRunSymbol = s[i];
            currentRunStart = i;
            for (int j = i + 1; j < s.Length && s[j] == currentRunSymbol; j++)
                i++;
            int currentRunLength = i - currentRunStart;
            if (longestRunLength < currentRunLength)
            {
                longestRunStart = currentRunStart;
                longestRunLength = currentRunLength;
            }
            i++;
        }
        return longestRunStart;
    }
 static int IndexOfLongestRun(string s)
{
    int longestRunStart = -1, longestRunEnd = -1;
    int longestRunLength = 0;
    for (int i = 0; i < s.Length; i++)
    {
        int runStart = i;
        char c = s[runStart];
        while (i + 1 < s.Length && s[i + 1] == c)
            i++;
        int runLength = i - runStart + 1;
        if (runLength > longestRunLength)
        {
            longestRunStart = runStart;
            longestRunEnd = i;
            longestRunLength = runLength;
        }
    }
    return longestRunStart;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
147
2
Gpt3D_Clone147_2.cs 1 15
Gpt3D_Clone147_2.cs 16 51
----------------------------------------

static int IndexOfLongestRun (string input) {
    int longestRunStart = - 1, longestRunLength = 0;
    for (int i = 0; i < input.Length;) {
        var runValue = input [i];
        int runStart = i;
        while (++ i < input.Length && input [i] == runValue) {
        }
        int runLength = i - runStart;
        if (longestRunLength < runLength) {
            longestRunStart = runStart;
            longestRunLength = runLength;
        }
    }
    return longestRunStart;
}
----------------------------------------

 static int IndexOfLongestRun(string s)  
    {             
        int longestRunStart = -1;  
        int longestRunLength = 0;
        for (int i = 0; i < s.Length; i++) {  
            int currRunStart = i;  
            char currRunSymbol = s[currRunStart];  
            while (i + 1 < s.Length && s[i + 1] == currRunSymbol)  
                i++;  
            int currRunLength = i - currRunStart + 1;  
            if (currRunLength > longestRunLength) {  
                longestRunStart = currRunStart;  
                longestRunLength = currRunLength;  
            }  
        }  
        return longestRunStart;  
    }  
 static int IndexOfLongestRun (string input) {
    int longestRunStart = -1, longestRunLength = 0;
    int i = 0;
    while (i < input.Length) {
        int runStart = i;
        char runValue = input[i];
        while (++i < input.Length && runValue == input[i]) {
        }
        int runLength = i - runStart;
        if (longestRunLength < runLength) {
            longestRunStart = runStart;
            longestRunLength = runLength;
        }
    }
    return longestRunStart;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
155
0
Gpt3D_Clone155_0.cs 1 10
Gpt3D_Clone155_0.cs 11 39
----------------------------------------

public override int Read (byte [] buffer, int offset, int count) {
    if (streams.Count == 0)
        return 0;
    int bytesRead = streams.Peek ().Read (buffer, offset, count);
    if (bytesRead == 0) {
        streams.Dequeue ().Dispose ();
        bytesRead += Read (buffer, offset + bytesRead, count - bytesRead);
    }
    return bytesRead;
}
----------------------------------------

 public override int Read (byte [] buffer, int offset, int count) {
    if (streams.Count == 0)
        return 0;
    int bytesRead = 0;
    long remainingBytes = 0;
    Queue<Stream> tempStreams = new Queue<Stream>(streams);
    while (tempStreams.Count > 0) {
        remainingBytes = tempStreams.Peek().Length - tempStreams.Peek().Position;
        if (remainingBytes > 0) {
            if (remainingBytes >= count) {
                bytesRead = tempStreams.Peek().Read(buffer, offset, count);
            } else {
                bytesRead = tempStreams.Peek().Read(buffer, offset, (int)remainingBytes);
            }
            if (bytesRead == 0) {
                streams.Dequeue().Dispose();
                tempStreams.Dequeue();
            } else {
                break;
            }
        } else {
            streams.Dequeue().Dispose();
            tempStreams.Dequeue();
        }
    }
    return bytesRead;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
155
1
Gpt3D_Clone155_1.cs 1 10
Gpt3D_Clone155_1.cs 11 35
----------------------------------------

public override int Read (byte [] buffer, int offset, int count) {
    if (streams.Count == 0)
        return 0;
    int bytesRead = streams.Peek ().Read (buffer, offset, count);
    if (bytesRead == 0) {
        streams.Dequeue ().Dispose ();
        bytesRead += Read (buffer, offset + bytesRead, count - bytesRead);
    }
    return bytesRead;
}
----------------------------------------

 public override int Read (byte [] buffer, int offset, int count) {
    if (streams.Count == 0)
        return 0;
    int bytesRead = 0;
    int _offset = offset;
    while (bytesRead < count) {
        if(streams.Count > 0){
            try{
                bytesRead += streams.Peek ().Read (buffer, _offset, count-bytesRead);
                _offset += bytesRead;
            }
            catch (IOException e){
                streams.Dequeue().Dispose();
            }
        }
        if (bytesRead == 0) {
            streams.Dequeue ().Dispose ();
        } else {
            break;
        }
    }
    return bytesRead;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
155
2
Gpt3D_Clone155_2.cs 1 10
Gpt3D_Clone155_2.cs 11 30
----------------------------------------

public override int Read (byte [] buffer, int offset, int count) {
    if (streams.Count == 0)
        return 0;
    int bytesRead = streams.Peek ().Read (buffer, offset, count);
    if (bytesRead == 0) {
        streams.Dequeue ().Dispose ();
        bytesRead += Read (buffer, offset + bytesRead, count - bytesRead);
    }
    return bytesRead;
}
----------------------------------------

 public override int Read (byte [] buffer, int offset, int count) {
    if (streams.Count == 0)
        return 0;
    int _offset = offset, maxBytes = 0;
    while (streams.Count > 0) {
        int bytesRead = streams.Peek().Read( buffer, _offset, count-maxBytes );
        maxBytes += bytesRead;
        if ( bytesRead == 0 )
            streams.Dequeue().Dispose();
        else
            _offset += bytesRead;
        if ( maxBytes == count )
            break;
    }
    return maxBytes;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
155
3
Gpt3D_Clone155_3.cs 1 10
Gpt3D_Clone155_3.cs 11 29
----------------------------------------

public override int Read (byte [] buffer, int offset, int count) {
    if (streams.Count == 0)
        return 0;
    int bytesRead = streams.Peek ().Read (buffer, offset, count);
    if (bytesRead == 0) {
        streams.Dequeue ().Dispose ();
        bytesRead += Read (buffer, offset + bytesRead, count - bytesRead);
    }
    return bytesRead;
}
----------------------------------------

 public override int Read (byte [] buffer, int offset, int count) {
    if (streams.Count == 0)
        return 0;
    int bytesRead = 0;
    int _offset = offset;
    while (bytesRead < count) {
        bytesRead += streams.Peek ().Read (buffer, _offset, count-bytesRead);
        _offset += bytesRead;
        if (bytesRead == 0) {
            streams.Dequeue ().Dispose ();
        } else {
            break;
        }
    }
    return bytesRead;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
155
4
Gpt3D_Clone155_4.cs 1 10
Gpt3D_Clone155_4.cs 11 27
----------------------------------------

public override int Read (byte [] buffer, int offset, int count) {
    if (streams.Count == 0)
        return 0;
    int bytesRead = streams.Peek ().Read (buffer, offset, count);
    if (bytesRead == 0) {
        streams.Dequeue ().Dispose ();
        bytesRead += Read (buffer, offset + bytesRead, count - bytesRead);
    }
    return bytesRead;
}
----------------------------------------

 public override int Read (byte [] buffer, int offset, int count) {
    if (streams.Count == 0)
        return 0;
    int bytesRead = 0;
    while (bytesRead < count) {
        if(streams.Peek ().CanRead)
            bytesRead += streams.Peek ().Read (buffer, offset+bytesRead, count-bytesRead);
        if (bytesRead == 0) {
            streams.Dequeue ().Dispose ();
        } else {
            break;
        }
    }
    return bytesRead;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
155
6
Gpt3D_Clone155_6.cs 1 10
Gpt3D_Clone155_6.cs 11 30
----------------------------------------

public override int Read (byte [] buffer, int offset, int count) {
    if (streams.Count == 0)
        return 0;
    int bytesRead = streams.Peek ().Read (buffer, offset, count);
    if (bytesRead == 0) {
        streams.Dequeue ().Dispose ();
        bytesRead += Read (buffer, offset + bytesRead, count - bytesRead);
    }
    return bytesRead;
}
----------------------------------------

 public override int Read (byte [] buffer, int offset, int count) {
    if (streams.Count == 0)
        return 0;
    int bytesRead = 0;
    while (bytesRead < count && streams.Count > 0)
    {
        //read in the data, hopefully some
        bytesRead = streams.Peek ().Read (buffer, offset + bytesRead, count - bytesRead);
        //dispose the top stream if it has no more data
        if (bytesRead == 0)
            streams.Dequeue ().Dispose ();
        else
            break; //if it is still having data, we'll break the loop
    }
    return bytesRead;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
157
0
Gpt3D_Clone157_0.cs 1 16
Gpt3D_Clone157_0.cs 17 59
----------------------------------------

private bool Matches (object expectedValue, object actualValue) {
    bool matches = true;
    if (! MatchesNull (expectedValue, actualValue, ref matches)) {
        return matches;
    }
    Constraint eq = new DatesEqualConstraint (expectedValue).Within (tolerance ?? _regionalTolerance);
    if (eq.Matches (actualValue)) {
        return true;
    }
    if (MatchesVisited (expectedValue, actualValue, ref matches)) {
        if (MatchesDictionary (expectedValue, actualValue, ref matches) && MatchesList (expectedValue, actualValue, ref matches) && MatchesType (expectedValue, actualValue, ref matches) && MatchesPredicate (expectedValue, actualValue, ref matches)) {
            MatchesFields (expectedValue, actualValue, eq, ref matches);
        }
    }
    return matches;
}
----------------------------------------

 private bool Matches( object expectedValue, object actualValue )
{
    bool equal = true;
    if (expectedValue is null || actualValue is null)
    {
        return false;
    }
    DateEqualConstraint constraint = new DateEqualConstraint(expectedValue).Within(tolerance ?? _regionalTolerance);
    if (constraint.Matches(actualValue))
    {
        return true;
    }
    if (!MatchesVisited(expectedValue, actualValue, ref equal))
    {
        return equal;
    }
    if (!MatchesDictionary(expectedValue, actualValue, ref equal))
    {
        return equal;
    }
    if (!MatchesList(expectedValue, actualValue, ref equal))
    {
        return equal;
    }
    if (!MatchesType(expectedValue, actualValue, ref equal))
    {
        return equal;
    }
    if (!MatchesPredicate(expectedValue, actualValue, ref equal))
    {
        return equal;
    }
    return MatchesFields(expectedValue, actualValue, constraint, ref equal);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
157
1
Gpt3D_Clone157_1.cs 1 16
Gpt3D_Clone157_1.cs 17 46
----------------------------------------

private bool Matches (object expectedValue, object actualValue) {
    bool matches = true;
    if (! MatchesNull (expectedValue, actualValue, ref matches)) {
        return matches;
    }
    Constraint eq = new DatesEqualConstraint (expectedValue).Within (tolerance ?? _regionalTolerance);
    if (eq.Matches (actualValue)) {
        return true;
    }
    if (MatchesVisited (expectedValue, actualValue, ref matches)) {
        if (MatchesDictionary (expectedValue, actualValue, ref matches) && MatchesList (expectedValue, actualValue, ref matches) && MatchesType (expectedValue, actualValue, ref matches) && MatchesPredicate (expectedValue, actualValue, ref matches)) {
            MatchesFields (expectedValue, actualValue, eq, ref matches);
        }
    }
    return matches;
}
----------------------------------------

 private bool Matches(object expected, object actual)
{
    bool equal = true;
    if(!MatchesNull(expected, actual, ref equal))
        return equal;
    Constraint dateEqualConstraint = new DatesEqualConstraint(expected).Within(tolerance ?? _regionalTolerance);
    if (dateEqualConstraint.Matches(actual)) 
        return true;
    if(!MatchesVisited(expected, actual, ref equal))
        return equal;
    if(!MatchesDictionary(expected, actual, ref equal))
        return equal;
if(!MatchesList(expected, actual, ref equal)) 
        return equal;
    if(!MatchesType(expected, actual, ref equal)) 
        return equal;
    if(!MatchesPredicate(expected, actual, ref equal)) 
        return equal;
 
    return MatchesFields(expected, actual, dateEqualConstraint, ref equal);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
157
2
Gpt3D_Clone157_2.cs 1 16
Gpt3D_Clone157_2.cs 17 59
----------------------------------------

private bool Matches (object expectedValue, object actualValue) {
    bool matches = true;
    if (! MatchesNull (expectedValue, actualValue, ref matches)) {
        return matches;
    }
    Constraint eq = new DatesEqualConstraint (expectedValue).Within (tolerance ?? _regionalTolerance);
    if (eq.Matches (actualValue)) {
        return true;
    }
    if (MatchesVisited (expectedValue, actualValue, ref matches)) {
        if (MatchesDictionary (expectedValue, actualValue, ref matches) && MatchesList (expectedValue, actualValue, ref matches) && MatchesType (expectedValue, actualValue, ref matches) && MatchesPredicate (expectedValue, actualValue, ref matches)) {
            MatchesFields (expectedValue, actualValue, eq, ref matches);
        }
    }
    return matches;
}
----------------------------------------

 private bool Matches(object expectedValue, object actualValue) {
    bool matches = true;
    if (!MatchesNull(expectedValue, actualValue, ref matches))
    {
        return matches;
    }
    Constraint equalTo = new DatesEqualConstraint(expectedValue).Within(tolerance ?? _regionalTolerance);
    
    if(equalTo.Matches(actualValue))
    {
        return true;
    }
    if (!MatchesVisited(expectedValue, actualValue, ref matches))
    { 
        return matches; 
    }
    if (!MatchesDictionary(expectedValue, actualValue, ref matches))
    { 
        return matches; 
    }
    if (!MatchesList(expectedValue, actualValue, ref matches))
    { 
        return matches; 
    }
    if (!MatchesType(expectedValue, actualValue, ref matches)) 
    { 
        return matches; 
    }
    if (!MatchesPredicate(expectedValue, actualValue, ref matches))
    { 
        return matches; 
    }
    return MatchesFields(expectedValue, actualValue, equalTo, ref matches);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
157
3
Gpt3D_Clone157_3.cs 1 16
Gpt3D_Clone157_3.cs 17 46
----------------------------------------

private bool Matches (object expectedValue, object actualValue) {
    bool matches = true;
    if (! MatchesNull (expectedValue, actualValue, ref matches)) {
        return matches;
    }
    Constraint eq = new DatesEqualConstraint (expectedValue).Within (tolerance ?? _regionalTolerance);
    if (eq.Matches (actualValue)) {
        return true;
    }
    if (MatchesVisited (expectedValue, actualValue, ref matches)) {
        if (MatchesDictionary (expectedValue, actualValue, ref matches) && MatchesList (expectedValue, actualValue, ref matches) && MatchesType (expectedValue, actualValue, ref matches) && MatchesPredicate (expectedValue, actualValue, ref matches)) {
            MatchesFields (expectedValue, actualValue, eq, ref matches);
        }
    }
    return matches;
}
----------------------------------------

 private bool Matches(object expectedVal, object actualVal)
{
    bool matches = true;
    if(!MatchesNull(expectedVal,actualVal,ref matches))
        return matches;
    Constraint datesEqualConstraint = new DatesEqualConstraint(expectedVal).Within(tolerance ?? _regionalTolerance);
    if(datesEqualConstraint.Matches(actualVal))
        return true;
    if(!MatchesVisited(expectedVal,actualVal,ref matches))
        return matches;
    if(!MatchesDictionary(expectedVal,actualVal,ref matches))
        return matches;
    if(!MatchesList(expectedVal,actualVal,ref matches))
        return matches;
    if(!MatchesType(expectedVal,actualVal,ref matches))
        return matches;
    if(!MatchesPredicate(expectedVal,actualVal,ref matches))
        return matches;
    return MatchesFields(expectedVal,actualVal,datesEqualConstraint,ref matches);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
157
4
Gpt3D_Clone157_4.cs 1 16
Gpt3D_Clone157_4.cs 17 47
----------------------------------------

private bool Matches (object expectedValue, object actualValue) {
    bool matches = true;
    if (! MatchesNull (expectedValue, actualValue, ref matches)) {
        return matches;
    }
    Constraint eq = new DatesEqualConstraint (expectedValue).Within (tolerance ?? _regionalTolerance);
    if (eq.Matches (actualValue)) {
        return true;
    }
    if (MatchesVisited (expectedValue, actualValue, ref matches)) {
        if (MatchesDictionary (expectedValue, actualValue, ref matches) && MatchesList (expectedValue, actualValue, ref matches) && MatchesType (expectedValue, actualValue, ref matches) && MatchesPredicate (expectedValue, actualValue, ref matches)) {
            MatchesFields (expectedValue, actualValue, eq, ref matches);
        }
    }
    return matches;
}
----------------------------------------

 private bool Matches(object expected, object actual) 
{
    bool result = true;
    
    if (!MatchesNull(expected, actual, ref result)) 
        return result;
    Constraint dateEqualConstraint = new DatesEqualConstraint(expected).Within(tolerance ?? _regionalTolerance);
    if (dateEqualConstraint.Matches(actual)) 
        return true;
    if (!MatchesVisited(expected, actual, ref result)) 
        return result;
    
    if (!MatchesDictionary(expected, actual, ref result)) 
        return result;       
       
    if (!MatchesList(expected, actual, ref result)) 
        return result;
    if (!MatchesType(expected, actual, ref result)) 
        return result;
    if (!MatchesPredicate(expected, actual, ref result))
        return result;
    return MatchesFields(expected, actual, dateEqualConstraint, ref result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
157
5
Gpt3D_Clone157_5.cs 1 16
Gpt3D_Clone157_5.cs 17 61
----------------------------------------

private bool Matches (object expectedValue, object actualValue) {
    bool matches = true;
    if (! MatchesNull (expectedValue, actualValue, ref matches)) {
        return matches;
    }
    Constraint eq = new DatesEqualConstraint (expectedValue).Within (tolerance ?? _regionalTolerance);
    if (eq.Matches (actualValue)) {
        return true;
    }
    if (MatchesVisited (expectedValue, actualValue, ref matches)) {
        if (MatchesDictionary (expectedValue, actualValue, ref matches) && MatchesList (expectedValue, actualValue, ref matches) && MatchesType (expectedValue, actualValue, ref matches) && MatchesPredicate (expectedValue, actualValue, ref matches)) {
            MatchesFields (expectedValue, actualValue, eq, ref matches);
        }
    }
    return matches;
}
----------------------------------------

 private bool Matches( object expectedValue, object actualValue )
{
    bool equals = true;
    if( !MatchesNull( expectedValue, actualValue, ref equals ) ) 
    { 
        return equals; 
    }
    Constraint comparison = new DatesEqualConstraint( expectedValue ).Within( tolerance ?? _regionalTolerance );
    if( comparison.Matches( actualValue ) )
    {
        return true;
    }
    if( !MatchesVisited( expectedValue, actualValue, ref equals ) )
    { 
        return equals; 
    }
    if( !MatchesDictionary( expectedValue, actualValue, ref equals ) )
    { 
        return equals; 
    }
    if( !MatchesList( expectedValue, actualValue, ref equals ) ) 
    { 
        return equals; 
    }
    if( !MatchesType( expectedValue, actualValue, ref equals ) ) 
    { 
        return equals; 
    }
    if( !MatchesPredicate( expectedValue, actualValue, ref equals ) ) 
    { 
        return equals; 
    }
    return MatchesFields( expectedValue, actualValue, comparison, ref equals );
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
157
6
Gpt3D_Clone157_6.cs 1 16
Gpt3D_Clone157_6.cs 17 43
----------------------------------------

private bool Matches (object expectedValue, object actualValue) {
    bool matches = true;
    if (! MatchesNull (expectedValue, actualValue, ref matches)) {
        return matches;
    }
    Constraint eq = new DatesEqualConstraint (expectedValue).Within (tolerance ?? _regionalTolerance);
    if (eq.Matches (actualValue)) {
        return true;
    }
    if (MatchesVisited (expectedValue, actualValue, ref matches)) {
        if (MatchesDictionary (expectedValue, actualValue, ref matches) && MatchesList (expectedValue, actualValue, ref matches) && MatchesType (expectedValue, actualValue, ref matches) && MatchesPredicate (expectedValue, actualValue, ref matches)) {
            MatchesFields (expectedValue, actualValue, eq, ref matches);
        }
    }
    return matches;
}
----------------------------------------

 private bool Matches(object expected, object actual) 
{
    if (expected == actual) 
        return true;
    if (expected == null || actual == null) 
        return false;
    if (expected is DateTime && actual is DateTime)
        return Math.Abs(((DateTime)expected - (DateTime)actual).TotalSeconds) <= _regionalTolerance.TotalSeconds;
    if (expected is IDictionary && actual is IDictionary)
        return DictionariesMatch((IDictionary)expected, (IDictionary)actual);
    if (expected is IList && actual is IList)
        return ListsMatch((IList)expected, (IList)actual);
    if (expected.GetType() != actual.GetType())
        return false;
    if (expected is IPredicate && actual is IPredicate)
        return ((IPredicate)expected).Invoke(actual);
    return FieldsMatch(expected, actual);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
159
0
Gpt3D_Clone159_0.cs 1 10
Gpt3D_Clone159_0.cs 11 31
----------------------------------------

public void Serialize (object i_objectToSerialize, Stream i_streamToSerializeTo) {
    StringWriter sw = new StringWriter ();
    this.m_regularXmlSerializer.Serialize (sw, i_objectToSerialize);
    XDocument objectXml = XDocument.Parse (sw.ToString ());
    sw.Dispose ();
    SerializeExtra (i_objectToSerialize, objectXml);
    string res = objectXml.ToString ();
    byte [] bytesToWrite = Encoding.UTF8.GetBytes (res);
    i_streamToSerializeTo.Write (bytesToWrite, 0, bytesToWrite.Length);
}
----------------------------------------

 public void Serialize (object i_objectToSerialize, Stream i_streamToSerializeTo)
{
    MemoryStream streamToSerializeTo = new MemoryStream();
    XmlWriterSettings settings = new XmlWriterSettings();
    settings.OmitXmlDeclaration = true;
    settings.ConformanceLevel = ConformanceLevel.Fragment;
    XDocument objectXml = new XDocument();
    using (var xmlWriter = XmlWriter.Create(streamToSerializeTo, settings))
    {
        this.m_regularXmlSerializer.Serialize(xmlWriter, i_objectToSerialize);
    }
    objectXml = XDocument.Load(streamToSerializeTo);
    SerializeExtra (i_objectToSerialize, objectXml);
    byte[] bytesToWrite = Encoding.UTF8.GetBytes(objectXml.ToString());
    i_streamToSerializeTo.Write (bytesToWrite, 0, bytesToWrite.Length);
    streamToSerializeTo.Close();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
159
1
Gpt3D_Clone159_1.cs 1 10
Gpt3D_Clone159_1.cs 11 30
----------------------------------------

public void Serialize (object i_objectToSerialize, Stream i_streamToSerializeTo) {
    StringWriter sw = new StringWriter ();
    this.m_regularXmlSerializer.Serialize (sw, i_objectToSerialize);
    XDocument objectXml = XDocument.Parse (sw.ToString ());
    sw.Dispose ();
    SerializeExtra (i_objectToSerialize, objectXml);
    string res = objectXml.ToString ();
    byte [] bytesToWrite = Encoding.UTF8.GetBytes (res);
    i_streamToSerializeTo.Write (bytesToWrite, 0, bytesToWrite.Length);
}
----------------------------------------

 public void Serialize (object i_objectToSerialize, Stream i_streamToSerializeTo)
{
    var xmlSerializerNamespace = new XmlSerializerNamespaces();
    xmlSerializerNamespace.Add(string.Empty, string.Empty);
    MemoryStream streamToSerializeTo = new MemoryStream();
    DataContractSerializer dataContractSerializer = new DataContractSerializer(i_objectToSerialize.GetType());
    XDocument objectXml = new XDocument();
    dataContractSerializer.WriteObject(streamToSerializeTo, i_objectToSerialize);
    objectXml = XDocument.Load(streamToSerializeTo);
    this.m_regularXmlSerializer.Serialize(objectXml.CreateWriter(),i_objectToSerialize);
    SerializeExtra (i_objectToSerialize, objectXml);
    byte[] bytesToWrite = Encoding.UTF8.GetBytes(objectXml.ToString());
    i_streamToSerializeTo.Write (bytesToWrite, 0, bytesToWrite.Length);
    streamToSerializeTo.Close();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
159
2
Gpt3D_Clone159_2.cs 1 10
Gpt3D_Clone159_2.cs 11 25
----------------------------------------

public void Serialize (object i_objectToSerialize, Stream i_streamToSerializeTo) {
    StringWriter sw = new StringWriter ();
    this.m_regularXmlSerializer.Serialize (sw, i_objectToSerialize);
    XDocument objectXml = XDocument.Parse (sw.ToString ());
    sw.Dispose ();
    SerializeExtra (i_objectToSerialize, objectXml);
    string res = objectXml.ToString ();
    byte [] bytesToWrite = Encoding.UTF8.GetBytes (res);
    i_streamToSerializeTo.Write (bytesToWrite, 0, bytesToWrite.Length);
}
----------------------------------------

 public void Serialize (object i_objectToSerialize, Stream i_streamToSerializeTo)
{
    XmlSerializerNamespaces xmlSerializerNamespaces = new XmlSerializerNamespaces();
    XmlSerializer serializer = new XmlSerializer(i_objectToSerialize.GetType());
    StreamWriter sw = new StreamWriter(i_streamToSerializeTo);
    serializer.Serialize(sw, i_objectToSerialize, xmlSerializerNamespaces);
    sw.Flush();
    XDocument objectXml = XDocument.Load(i_streamToSerializeTo);
    SerializeExtra (i_objectToSerialize, objectXml);
    byte[] bytesToWrite = Encoding.UTF8.GetBytes(objectXml.ToString());
    i_streamToSerializeTo.Write (bytesToWrite, 0, bytesToWrite.Length);
    sw.Close();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
159
3
Gpt3D_Clone159_3.cs 1 10
Gpt3D_Clone159_3.cs 11 27
----------------------------------------

public void Serialize (object i_objectToSerialize, Stream i_streamToSerializeTo) {
    StringWriter sw = new StringWriter ();
    this.m_regularXmlSerializer.Serialize (sw, i_objectToSerialize);
    XDocument objectXml = XDocument.Parse (sw.ToString ());
    sw.Dispose ();
    SerializeExtra (i_objectToSerialize, objectXml);
    string res = objectXml.ToString ();
    byte [] bytesToWrite = Encoding.UTF8.GetBytes (res);
    i_streamToSerializeTo.Write (bytesToWrite, 0, bytesToWrite.Length);
}
----------------------------------------

 public void Serialize (object i_objectToSerialize, Stream i_streamToSerializeTo)
{
    MemoryStream streamToSerializeTo = new MemoryStream();
    BinaryFormatter binarySerializer = new BinaryFormatter();
    XDocument objectXml = new XDocument();
    binarySerializer.Serialize(streamToSerializeTo, i_objectToSerialize);
    objectXml = XDocument.Load(streamToSerializeTo);
    this.m_regularXmlSerializer.Serialize(objectXml.CreateWriter(), i_objectToSerialize);
    SerializeExtra (i_objectToSerialize, objectXml);
    byte[] bytesToWrite = Encoding.UTF8.GetBytes(objectXml.ToString());
    i_streamToSerializeTo.Write (bytesToWrite, 0, bytesToWrite.Length);
    streamToSerializeTo.Close();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
159
4
Gpt3D_Clone159_4.cs 1 10
Gpt3D_Clone159_4.cs 11 27
----------------------------------------

public void Serialize (object i_objectToSerialize, Stream i_streamToSerializeTo) {
    StringWriter sw = new StringWriter ();
    this.m_regularXmlSerializer.Serialize (sw, i_objectToSerialize);
    XDocument objectXml = XDocument.Parse (sw.ToString ());
    sw.Dispose ();
    SerializeExtra (i_objectToSerialize, objectXml);
    string res = objectXml.ToString ();
    byte [] bytesToWrite = Encoding.UTF8.GetBytes (res);
    i_streamToSerializeTo.Write (bytesToWrite, 0, bytesToWrite.Length);
}
----------------------------------------

 public void Serialize (object i_objectToSerialize, Stream i_streamToSerializeTo)
{
    MemoryStream streamToSerializeTo = new MemoryStream();
    XmlDataContractSerializer xmlDataContractSerializer = new XmlDataContractSerializer(i_objectToSerialize.GetType());
    XDocument objectXml = new XDocument();
    xmlDataContractSerializer.WriteObject(streamToSerializeTo, i_objectToSerialize);
    objectXml = XDocument.Load(streamToSerializeTo);
    this.m_regularXmlSerializer.Serialize(objectXml.CreateWriter(), i_objectToSerialize);
    SerializeExtra (i_objectToSerialize, objectXml);
    byte[] bytesToWrite = Encoding.UTF8.GetBytes(objectXml.ToString());
    i_streamToSerializeTo.Write (bytesToWrite, 0, bytesToWrite.Length);
    streamToSerializeTo.Close();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
159
6
Gpt3D_Clone159_6.cs 1 10
Gpt3D_Clone159_6.cs 11 24
----------------------------------------

public void Serialize (object i_objectToSerialize, Stream i_streamToSerializeTo) {
    StringWriter sw = new StringWriter ();
    this.m_regularXmlSerializer.Serialize (sw, i_objectToSerialize);
    XDocument objectXml = XDocument.Parse (sw.ToString ());
    sw.Dispose ();
    SerializeExtra (i_objectToSerialize, objectXml);
    string res = objectXml.ToString ();
    byte [] bytesToWrite = Encoding.UTF8.GetBytes (res);
    i_streamToSerializeTo.Write (bytesToWrite, 0, bytesToWrite.Length);
}
----------------------------------------

 public void Serialize (object i_objectToSerialize, Stream i_streamToSerializeTo)
{
    XmlSerializer serializer = new XmlSerializer(i_objectToSerialize.GetType());
    StreamWriter sw = new StreamWriter(i_streamToSerializeTo);
    serializer.Serialize(sw, i_objectToSerialize);
    sw.Flush();
    XDocument objectXml = XDocument.Load(i_streamToSerializeTo);
    SerializeExtra (i_objectToSerialize, objectXml);
    byte[] bytesToWrite = Encoding.UTF8.GetBytes(objectXml.ToString());
    i_streamToSerializeTo.Write (bytesToWrite, 0, bytesToWrite.Length);
    sw.Close();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
159
7
Gpt3D_Clone159_7.cs 1 10
Gpt3D_Clone159_7.cs 11 24
----------------------------------------

public void Serialize (object i_objectToSerialize, Stream i_streamToSerializeTo) {
    StringWriter sw = new StringWriter ();
    this.m_regularXmlSerializer.Serialize (sw, i_objectToSerialize);
    XDocument objectXml = XDocument.Parse (sw.ToString ());
    sw.Dispose ();
    SerializeExtra (i_objectToSerialize, objectXml);
    string res = objectXml.ToString ();
    byte [] bytesToWrite = Encoding.UTF8.GetBytes (res);
    i_streamToSerializeTo.Write (bytesToWrite, 0, bytesToWrite.Length);
}
----------------------------------------

 public void Serialize (object i_objectToSerialize, Stream i_streamToSerializeTo)
{
    JsonSerializer serializer = new JsonSerializer();
    StreamWriter sw = new StreamWriter(i_streamToSerializeTo);
    serializer.Serialize(sw, i_objectToSerialize);
    sw.Flush();
    XDocument objectXml = XDocument.Load(i_streamToSerializeTo);
    SerializeExtra (i_objectToSerialize, objectXml);
    byte[] bytesToWrite = Encoding.UTF8.GetBytes(objectXml.ToString());
    i_streamToSerializeTo.Write (bytesToWrite, 0, bytesToWrite.Length);
    sw.Close();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
159
8
Gpt3D_Clone159_8.cs 1 10
Gpt3D_Clone159_8.cs 11 23
----------------------------------------

public void Serialize (object i_objectToSerialize, Stream i_streamToSerializeTo) {
    StringWriter sw = new StringWriter ();
    this.m_regularXmlSerializer.Serialize (sw, i_objectToSerialize);
    XDocument objectXml = XDocument.Parse (sw.ToString ());
    sw.Dispose ();
    SerializeExtra (i_objectToSerialize, objectXml);
    string res = objectXml.ToString ();
    byte [] bytesToWrite = Encoding.UTF8.GetBytes (res);
    i_streamToSerializeTo.Write (bytesToWrite, 0, bytesToWrite.Length);
}
----------------------------------------

 public void Serialize (object i_objectToSerialize, Stream i_streamToSerializeTo)
{
    XmlSerializer serializer = new XmlSerializer(i_objectToSerialize.GetType());
    MemoryStream memoryStreamToSerializeTo = new MemoryStream();
    serializer.Serialize(memoryStreamToSerializeTo, i_objectToSerialize);
    XDocument objectXml = XDocument.Load(memoryStreamToSerializeTo);
    SerializeExtra (i_objectToSerialize, objectXml);
    byte[] bytesToWrite = Encoding.UTF8.GetBytes(objectXml.ToString());
    i_streamToSerializeTo.Write (bytesToWrite, 0, bytesToWrite.Length);
    memoryStreamToSerializeTo.Close();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
159
9
Gpt3D_Clone159_9.cs 1 10
Gpt3D_Clone159_9.cs 11 21
----------------------------------------

public void Serialize (object i_objectToSerialize, Stream i_streamToSerializeTo) {
    StringWriter sw = new StringWriter ();
    this.m_regularXmlSerializer.Serialize (sw, i_objectToSerialize);
    XDocument objectXml = XDocument.Parse (sw.ToString ());
    sw.Dispose ();
    SerializeExtra (i_objectToSerialize, objectXml);
    string res = objectXml.ToString ();
    byte [] bytesToWrite = Encoding.UTF8.GetBytes (res);
    i_streamToSerializeTo.Write (bytesToWrite, 0, bytesToWrite.Length);
}
----------------------------------------

 public void Serialize (object i_objectToSerialize, Stream i_streamToSerializeTo)
{
    JavaScriptSerializer serializer = new JavaScriptSerializer();
    string jsonString = serializer.Serialize(i_objectToSerialize);
    XDocument objectXml = XDocument.Parse(jsonString);
    SerializeExtra (i_objectToSerialize, objectXml);
    byte[] bytesToWrite = Encoding.UTF8.GetBytes(objectXml.ToString());
    i_streamToSerializeTo.Write (bytesToWrite, 0, bytesToWrite.Length);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
15
4
Gpt3D_Clone15_4.cs 1 13
Gpt3D_Clone15_4.cs 14 26
----------------------------------------

protected void EndReceive (IAsyncResult async) {
    string msg = "";
    int bytesRead = SimNetSocket.EndReceive (async);
    try {
        msg = ByteArrayToString (ReadBuffer, bytesRead);
    }
    catch (Exception e) {
        Debug.LogError (e);
    }
    Debug.Log ("RAW RECEIVE: " + msg);
    MessageBuffer += msg;
    BeginReceive ();
}
----------------------------------------

 protected void EndReceive (IAsyncResult async) {
    string messageString = String.Empty;
    int dataLength = SimNetSocket.EndReceive (async);
    if(dataLength > 0)
    { 
        messageString = UTF8Encoding.UTF8.GetString(ReadBuffer, 0, dataLength);
    }
    Debug.Log ("RAW RECEIVE: " + messageString);
    MessageBuffer += messageString;
    BeginReceive ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
162
2
Gpt3D_Clone162_2.cs 1 15
Gpt3D_Clone162_2.cs 16 30
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    var token = JToken.Load (reader);
    var typeToken = token ["Type"];
    if (typeToken == null)
        throw new InvalidOperationException ("invalid object");
    var actualType = SubTypeClassBase.GetType (typeToken.ToObject < SubType > (serializer));
    if (existingValue == null || existingValue.GetType () != actualType) {
        var contract = serializer.ContractResolver.ResolveContract (actualType);
        existingValue = contract.DefaultCreator ();
    }
    using (var subReader = token.CreateReader ())
    {
        serializer.Populate (subReader, existingValue);
    } return existingValue;
}
----------------------------------------

 public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) 
{
    JToken token = JToken.Load (reader);
    JObject json = (JObject) token;
    SubType typeToken = json ["Type"].ToObject<SubType> (serializer);
    Type actualType = SubTypeClassBase.GetType (typeToken);
    object value = (existingValue == null) ? Activator.CreateInstance (actualType) : existingValue;
    using (var subReader = json.CreateReader ())
    {
        serializer.Populate (subReader, value);
    }
    return value;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
162
3
Gpt3D_Clone162_3.cs 1 15
Gpt3D_Clone162_3.cs 16 30
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    var token = JToken.Load (reader);
    var typeToken = token ["Type"];
    if (typeToken == null)
        throw new InvalidOperationException ("invalid object");
    var actualType = SubTypeClassBase.GetType (typeToken.ToObject < SubType > (serializer));
    if (existingValue == null || existingValue.GetType () != actualType) {
        var contract = serializer.ContractResolver.ResolveContract (actualType);
        existingValue = contract.DefaultCreator ();
    }
    using (var subReader = token.CreateReader ())
    {
        serializer.Populate (subReader, existingValue);
    } return existingValue;
}
----------------------------------------

 public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) 
{
    JToken token = JToken.Load (reader);
    JObject json = (JObject) token;
    SubType type = json ["Type"].ToObject<SubType> ();
    Type actualType = SubTypeClassBase.GetType (type);
    object value = (existingValue == null) ? Activator.CreateInstance (actualType) : existingValue;
    using (var subReader = json.CreateReader ())
    {
        serializer.Populate (subReader, value);
    }
    return value;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
162
4
Gpt3D_Clone162_4.cs 1 15
Gpt3D_Clone162_4.cs 16 30
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    var token = JToken.Load (reader);
    var typeToken = token ["Type"];
    if (typeToken == null)
        throw new InvalidOperationException ("invalid object");
    var actualType = SubTypeClassBase.GetType (typeToken.ToObject < SubType > (serializer));
    if (existingValue == null || existingValue.GetType () != actualType) {
        var contract = serializer.ContractResolver.ResolveContract (actualType);
        existingValue = contract.DefaultCreator ();
    }
    using (var subReader = token.CreateReader ())
    {
        serializer.Populate (subReader, existingValue);
    } return existingValue;
}
----------------------------------------

 public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
 {
    JObject json = JObject.Load (reader);
    SubType typeToken = json ["Type"].ToObject<SubType> ();
    Type actualType = SubTypeClassBase.GetType (typeToken);
    if (existingValue == null || existingValue.GetType () != actualType) 
        existingValue = Activator.CreateInstance (actualType);
    using (var subReader = json.CreateReader ())
    {
        serializer.Populate (subReader, existingValue);
    }
    return existingValue;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
162
5
Gpt3D_Clone162_5.cs 1 15
Gpt3D_Clone162_5.cs 16 30
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    var token = JToken.Load (reader);
    var typeToken = token ["Type"];
    if (typeToken == null)
        throw new InvalidOperationException ("invalid object");
    var actualType = SubTypeClassBase.GetType (typeToken.ToObject < SubType > (serializer));
    if (existingValue == null || existingValue.GetType () != actualType) {
        var contract = serializer.ContractResolver.ResolveContract (actualType);
        existingValue = contract.DefaultCreator ();
    }
    using (var subReader = token.CreateReader ())
    {
        serializer.Populate (subReader, existingValue);
    } return existingValue;
}
----------------------------------------

 public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) 
{
    JObject json = JObject.Load (reader);
    SubType type = json ["Type"].ToObject<SubType> (serializer);
    Type actualType = SubTypeClassBase.GetType (type);
    if (existingValue == null || existingValue.GetType () != actualType) 
        existingValue = Activator.CreateInstance (actualType);
    using (var subReader = json.CreateReader ())
    {
        serializer.Populate (subReader, existingValue);
    }
    return existingValue;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
162
6
Gpt3D_Clone162_6.cs 1 15
Gpt3D_Clone162_6.cs 16 28
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    var token = JToken.Load (reader);
    var typeToken = token ["Type"];
    if (typeToken == null)
        throw new InvalidOperationException ("invalid object");
    var actualType = SubTypeClassBase.GetType (typeToken.ToObject < SubType > (serializer));
    if (existingValue == null || existingValue.GetType () != actualType) {
        var contract = serializer.ContractResolver.ResolveContract (actualType);
        existingValue = contract.DefaultCreator ();
    }
    using (var subReader = token.CreateReader ())
    {
        serializer.Populate (subReader, existingValue);
    } return existingValue;
}
----------------------------------------

 public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) 
{
    JToken token = JToken.Load (reader);
    JObject json = (JObject) token;
    SubType type = json ["Type"].ToObject<SubType> (serializer);
    object obj = SubTypeClassBase.GetType (type);
    Type actualType = (Type) obj;
    object value = (existingValue == null) ? Activator.CreateInstance (actualType) : existingValue;
    serializer.Populate (json.CreateReader (), value);
    return value;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
162
7
Gpt3D_Clone162_7.cs 1 15
Gpt3D_Clone162_7.cs 16 29
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    var token = JToken.Load (reader);
    var typeToken = token ["Type"];
    if (typeToken == null)
        throw new InvalidOperationException ("invalid object");
    var actualType = SubTypeClassBase.GetType (typeToken.ToObject < SubType > (serializer));
    if (existingValue == null || existingValue.GetType () != actualType) {
        var contract = serializer.ContractResolver.ResolveContract (actualType);
        existingValue = contract.DefaultCreator ();
    }
    using (var subReader = token.CreateReader ())
    {
        serializer.Populate (subReader, existingValue);
    } return existingValue;
}
----------------------------------------

 public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) 
{
    JObject json = JObject.Load (reader);
    SubType subtype = json ["Type"].ToObject<SubType> ();
    Type actualType = SubTypeClassBase.GetType (subtype);
    object value = (existingValue == null) ? Activator.CreateInstance (actualType) : existingValue;
    using (var subReader = json.CreateReader ())
    {
        serializer.Populate (subReader, value);
    }
    return value;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
162
8
Gpt3D_Clone162_8.cs 1 15
Gpt3D_Clone162_8.cs 16 26
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    var token = JToken.Load (reader);
    var typeToken = token ["Type"];
    if (typeToken == null)
        throw new InvalidOperationException ("invalid object");
    var actualType = SubTypeClassBase.GetType (typeToken.ToObject < SubType > (serializer));
    if (existingValue == null || existingValue.GetType () != actualType) {
        var contract = serializer.ContractResolver.ResolveContract (actualType);
        existingValue = contract.DefaultCreator ();
    }
    using (var subReader = token.CreateReader ())
    {
        serializer.Populate (subReader, existingValue);
    } return existingValue;
}
----------------------------------------

 public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) 
{
    JObject json = JObject.Load (reader);
    SubType subType = json ["Type"].ToObject<SubType> ();
    Type actualType = SubTypeClassBase.GetType (subType);
    object value = (existingValue == null) ? Activator.CreateInstance (actualType) : existingValue;
    serializer.Populate (json.CreateReader (), value);
    return value;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
164
0
Gpt3D_Clone164_0.cs 1 38
Gpt3D_Clone164_0.cs 39 117
----------------------------------------

public static bool IsManagedAssembly (string fileName) {
    uint peHeader;
    uint peHeaderSignature;
    ushort machine;
    ushort sections;
    uint timestamp;
    uint pSymbolTable;
    uint noOfSymbol;
    ushort optionalHeaderSize;
    ushort characteristics;
    ushort dataDictionaryStart;
    uint [] dataDictionaryRVA = new uint [16];
    uint [] dataDictionarySize = new uint [16];
    Stream fs = new FileStream (fileName, FileMode.Open, FileAccess.Read);
    BinaryReader reader = new BinaryReader (fs);
    fs.Position = 0x3C;
    peHeader = reader.ReadUInt32 ();
    fs.Position = peHeader;
    peHeaderSignature = reader.ReadUInt32 ();
    machine = reader.ReadUInt16 ();
    sections = reader.ReadUInt16 ();
    timestamp = reader.ReadUInt32 ();
    pSymbolTable = reader.ReadUInt32 ();
    noOfSymbol = reader.ReadUInt32 ();
    optionalHeaderSize = reader.ReadUInt16 ();
    characteristics = reader.ReadUInt16 ();
    dataDictionaryStart = Convert.ToUInt16 (Convert.ToUInt16 (fs.Position) + 0x60);
    fs.Position = dataDictionaryStart;
    for (int i = 0; i < 15; i ++) {
        dataDictionaryRVA [i] = reader.ReadUInt32 ();
        dataDictionarySize [i] = reader.ReadUInt32 ();
    }
    fs.Close ();
    if (dataDictionaryRVA [14] == 0)
        return false;
    else
        return true;
}
----------------------------------------

  public static bool IsManagedAssembly (string fileName){ 
       uint peHeader; 
       uint peHeaderSignature; 
       ushort machine; 
       ushort sections; 
       uint timestamp; 
       uint pSymbolTable; 
       uint noOfSymbol; 
       ushort optionalHeaderSize; 
       ushort characteristics; 
       ushort dataDictionaryStart; 
       uint [] dataDictionaryRVA = new uint [16]; 
       uint [] dataDictionarySize = new uint [16];
 
       //Directly read data 
       byte [] data = File.ReadAllBytes(fileName); 
       peHeader = BitConverter.ToUInt32(data, 0x3C); 
       peHeaderSignature = BitConverter.ToUInt32(data, (int)peHeader); 
       machine = BitConverter.ToUInt16(data, (int)(peHeader + 4)); 
       sections = BitConverter.ToUInt16(data, (int)(peHeader + 6)); 
       timestamp = BitConverter.ToUInt32(data, (int)(peHeader + 8)); 
       pSymbolTable = BitConverter.ToUInt32(data, (int)(peHeader + 12)); 
       noOfSymbol = BitConverter.ToUInt32(data, (int)(peHeader + 16)); 
       optionalHeaderSize = BitConverter.ToUInt16(data, (int)(peHeader + 20)); 
       characteristics = BitConverter.ToUInt16(data, (int)(peHeader + 22)); 
       dataDictionaryStart = Convert.ToUInt16(Convert.ToUInt16((int)(peHeader + 24)) + 0x60); 
       //Read RVA of each data dictionary 
       for (int i = 0; i < 15; i ++) { 
           dataDictionaryRVA[i] = BitConverter.ToUInt32(data, dataDictionaryStart + (i * 8)); 
           dataDictionarySize[i] = BitConverter.ToUInt32(data, dataDictionaryStart + (i * 8) + 4); 
       } 
       if (dataDictionaryRVA[14] == 0) 
           return false; 
       else 
           return true; 
   }
 public static bool IsManagedAssembly (string filename)
{
    using (var fs = File.Open(filename, FileMode.Open, FileAccess.Read))
    using (var reader = new BinaryReader(fs))
    {
        fs.Seek(0x3C, SeekOrigin.Begin);
        var peHeaderOffset = reader.ReadUInt32();
        fs.Seek(peHeaderOffset, SeekOrigin.Begin);
        var peHeaderSignature = reader.ReadUInt32();
        var machine = reader.ReadUInt16();
        var sections = reader.ReadUInt16();
        var timestamp = reader.ReadUInt32();
        var pSymbolTable = reader.ReadUInt32();
        var noOfSymbol = reader.ReadUInt32();
        var optionalHeaderSize = reader.ReadUInt16();
        var characteristics = reader.ReadUInt16();
        var dataDictionaryStart = Convert.ToUInt16(peHeaderOffset + 0x60);
        var dataDictionaryRVA = new uint[16];
        var dataDictionarySize = new uint[16];
        fs.Seek(dataDictionaryStart, SeekOrigin.Begin);
        for (int i = 0; i < 15; i++)
        {
            dataDictionaryRVA[i] = reader.ReadUInt32();
            dataDictionarySize[i] = reader.ReadUInt32();
        }
        fs.Close();
        if (dataDictionaryRVA[14] == 0)
            return false;
        else
            return true;
    }
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
164
1
Gpt3D_Clone164_1.cs 1 38
Gpt3D_Clone164_1.cs 39 117
----------------------------------------

public static bool IsManagedAssembly (string fileName) {
    uint peHeader;
    uint peHeaderSignature;
    ushort machine;
    ushort sections;
    uint timestamp;
    uint pSymbolTable;
    uint noOfSymbol;
    ushort optionalHeaderSize;
    ushort characteristics;
    ushort dataDictionaryStart;
    uint [] dataDictionaryRVA = new uint [16];
    uint [] dataDictionarySize = new uint [16];
    Stream fs = new FileStream (fileName, FileMode.Open, FileAccess.Read);
    BinaryReader reader = new BinaryReader (fs);
    fs.Position = 0x3C;
    peHeader = reader.ReadUInt32 ();
    fs.Position = peHeader;
    peHeaderSignature = reader.ReadUInt32 ();
    machine = reader.ReadUInt16 ();
    sections = reader.ReadUInt16 ();
    timestamp = reader.ReadUInt32 ();
    pSymbolTable = reader.ReadUInt32 ();
    noOfSymbol = reader.ReadUInt32 ();
    optionalHeaderSize = reader.ReadUInt16 ();
    characteristics = reader.ReadUInt16 ();
    dataDictionaryStart = Convert.ToUInt16 (Convert.ToUInt16 (fs.Position) + 0x60);
    fs.Position = dataDictionaryStart;
    for (int i = 0; i < 15; i ++) {
        dataDictionaryRVA [i] = reader.ReadUInt32 ();
        dataDictionarySize [i] = reader.ReadUInt32 ();
    }
    fs.Close ();
    if (dataDictionaryRVA [14] == 0)
        return false;
    else
        return true;
}
----------------------------------------

  public static bool IsManagedAssembly (string fileName){ 
       uint peHeader; 
       uint peHeaderSignature; 
       ushort machine; 
       ushort sections; 
       uint timestamp; 
       uint pSymbolTable; 
       uint noOfSymbol; 
       ushort optionalHeaderSize; 
       ushort characteristics; 
       ushort dataDictionaryStart; 
       uint [] dataDictionaryRVA = new uint [16]; 
       uint [] dataDictionarySize = new uint [16];
 
       //Directly read data 
       byte [] data = File.ReadAllBytes(fileName); 
       peHeader = BitConverter.ToUInt32(data, 0x3C); 
       peHeaderSignature = BitConverter.ToUInt32(data, (int)peHeader); 
       machine = BitConverter.ToUInt16(data, (int)(peHeader + 4)); 
       sections = BitConverter.ToUInt16(data, (int)(peHeader + 6)); 
       timestamp = BitConverter.ToUInt32(data, (int)(peHeader + 8)); 
       pSymbolTable = BitConverter.ToUInt32(data, (int)(peHeader + 12)); 
       noOfSymbol = BitConverter.ToUInt32(data, (int)(peHeader + 16)); 
       optionalHeaderSize = BitConverter.ToUInt16(data, (int)(peHeader + 20)); 
       characteristics = BitConverter.ToUInt16(data, (int)(peHeader + 22)); 
       dataDictionaryStart = Convert.ToUInt16(Convert.ToUInt16((int)(peHeader + 24)) + 0x60); 
       //Read RVA of each data dictionary 
       for (int i = 0; i < 15; i ++) { 
           dataDictionaryRVA[i] = BitConverter.ToUInt32(data, dataDictionaryStart + (i * 8)); 
           dataDictionarySize[i] = BitConverter.ToUInt32(data, dataDictionaryStart + (i * 8) + 4); 
       } 
       if (dataDictionaryRVA[14] == 0) 
           return false; 
       else 
           return true; 
   }
 public static bool IsManagedAssembly (string filename)
{
    using (var fs = File.Open(filename, FileMode.Open, FileAccess.Read))
    using (var reader = new BinaryReader(fs))
    {
        fs.Seek(0x3C, SeekOrigin.Begin);
        var peHeaderOffset = reader.ReadUInt32();
        fs.Seek(peHeaderOffset, SeekOrigin.Begin);
        var peHeaderSignature = reader.ReadUInt32();
        var machine = reader.ReadUInt16();
        var sections = reader.ReadUInt16();
        var timestamp = reader.ReadUInt32();
        var pSymbolTable = reader.ReadUInt32();
        var noOfSymbol = reader.ReadUInt32();
        var optionalHeaderSize = reader.ReadUInt16();
        var characteristics = reader.ReadUInt16();
        var dataDictionaryStart = Convert.ToUInt16(peHeaderOffset + 0x60);
        var dataDictionaryRVA = new uint[16];
        var dataDictionarySize = new uint[16];
        fs.Seek(dataDictionaryStart, SeekOrigin.Begin);
        for (int i = 0; i < 15; i++)
        {
            dataDictionaryRVA[i] = reader.ReadUInt32();
            dataDictionarySize[i] = reader.ReadUInt32();
        }
        fs.Close();
        if (dataDictionaryRVA[14] == 0)
            return false;
        else
            return true;
    }
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
165
1
Gpt3D_Clone165_1.cs 1 11
Gpt3D_Clone165_1.cs 12 25
----------------------------------------

static void Main (string [] args) {
    try {
        using (TestClass t = new TestClass ())
        {
            Thread ts = new Thread (new ThreadStart (t.GetTest));
            ts.Start ();
        }}
    catch (Exception ex) {
        Console.WriteLine ("Error: " + ex.Message);
    }
}
----------------------------------------

	static void Main (string [] args)
{
    TestClass t = null; 
    try{
        t = new TestClass ();
        t.GetTest.InvokeInThread ();
    }
    catch (Exception ex) {
        try {t.Dispose();} catch {}
        Console.WriteLine ("Error: " + ex.Message);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
166
0
Gpt3D_Clone166_0.cs 1 11
Gpt3D_Clone166_0.cs 12 43
----------------------------------------

static void Main (string [] args) {
    HttpWebResponse response = new HttpWebResponse ();
    try {
        response.GetResponse ();
    }
    catch (Exception ex) {
    }
    finally {
        response.Dispose ();
    }
}
----------------------------------------

 static void Main(string[] args) 
{ 
                    var canAccessResource = TryAccessResource(() => new HttpWebResponse ()); 
                    if (canAccessResource)
                    { 
                        DisposeResponse(); 
                    } 
                }
                private static bool TryAccessResource(Func<HttpWebResponse> func) 
                { 
                    HttpWebResponse response = null; 
                    try 
                    { 
                        response = func(); 
                        response.GetResponse(); 
                        return true; 
                    } 
                    catch (Exception ex)
                    {
                        return false; 
                    }
                    finally
                    { 
                        if (response !=null)
                        { 
                            response.Dispose ();
                        } 
                    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
166
10
Gpt3D_Clone166_10.cs 1 11
Gpt3D_Clone166_10.cs 12 35
----------------------------------------

static void Main (string [] args) {
    HttpWebResponse response = new HttpWebResponse ();
    try {
        response.GetResponse ();
    }
    catch (Exception ex) {
    }
    finally {
        response.Dispose ();
    }
}
----------------------------------------

 static void Main(string[] args) 
{ 
                    using (var response = TryGetResource ())
                    {
                        if (response != null)
                        { 
                            response.GetResponse (); 
                        }  
                    } 
                }
                private static HttpWebResponse TryGetResource()
                {
                    try
                    { 
                        return new HttpWebResponse (); 
                    }
                    catch (Exception ex)
                    { 
                        return null;
                    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
166
11
Gpt3D_Clone166_11.cs 1 11
Gpt3D_Clone166_11.cs 12 35
----------------------------------------

static void Main (string [] args) {
    HttpWebResponse response = new HttpWebResponse ();
    try {
        response.GetResponse ();
    }
    catch (Exception ex) {
    }
    finally {
        response.Dispose ();
    }
}
----------------------------------------

 static void Main(string[] args) 
{ 
                    using (var response = TryGetResource ())
                    {
                        if (response != null)
                        { 
                            response.GetResponse (); 
                        }  
                    } 
                }
                private static HttpWebResponse TryGetResource()
                {
                    try
                    { 
                        return new HttpWebResponse (); 
                    }
                    catch (Exception ex)
                    { 
                        return null;
                    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
166
13
Gpt3D_Clone166_13.cs 1 11
Gpt3D_Clone166_13.cs 12 43
----------------------------------------

static void Main (string [] args) {
    HttpWebResponse response = new HttpWebResponse ();
    try {
        response.GetResponse ();
    }
    catch (Exception ex) {
    }
    finally {
        response.Dispose ();
    }
}
----------------------------------------

 static void Main(string[] args) 
{ 
                    var canAccessResource = TryAccessResource(() => new HttpWebResponse ()); 
                    if (canAccessResource)
                    { 
                        DisposeResponse(); 
                    } 
                }
                private static bool TryAccessResource(Func<HttpWebResponse> func) 
                { 
                    HttpWebResponse response = null; 
                    try 
                    { 
                        response = func(); 
                        response.GetResponse(); 
                        return true; 
                    } 
                    catch (Exception ex)
                    {
                        return false; 
                    }
                    finally
                    { 
                        if (response !=null)
                        { 
                            response.Dispose ();
                        } 
                    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
166
14
Gpt3D_Clone166_14.cs 1 11
Gpt3D_Clone166_14.cs 12 32
----------------------------------------

static void Main (string [] args) {
    HttpWebResponse response = new HttpWebResponse ();
    try {
        response.GetResponse ();
    }
    catch (Exception ex) {
    }
    finally {
        response.Dispose ();
    }
}
----------------------------------------

 static void Main(string[] args) 
{ 
                        using (var response = HandleException(() => new HttpWebResponse()))
                        { 
                            response.GetResponse ();  
                        } 
                    }
                    private static T HandleException<T>(Func<T> func)
                    { 
                        try 
                        { 
                            return func();
                        } 
                        catch (Exception ex) 
                        { 
                            return default(T);
                        } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
166
15
Gpt3D_Clone166_15.cs 1 11
Gpt3D_Clone166_15.cs 12 29
----------------------------------------

static void Main (string [] args) {
    HttpWebResponse response = new HttpWebResponse ();
    try {
        response.GetResponse ();
    }
    catch (Exception ex) {
    }
    finally {
        response.Dispose ();
    }
}
----------------------------------------

 static void Main(string[] args)
{ 
                AttemptToReadResource(new HttpWebResponse()); 
            }
            private static void AttemptToReadResource(HttpWebResponse response)
            {
                try
                { 
                    response.GetResponse (); 
                }
                finally
                {
                    response.Dispose ();
                }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
166
3
Gpt3D_Clone166_3.cs 1 11
Gpt3D_Clone166_3.cs 12 43
----------------------------------------

static void Main (string [] args) {
    HttpWebResponse response = new HttpWebResponse ();
    try {
        response.GetResponse ();
    }
    catch (Exception ex) {
    }
    finally {
        response.Dispose ();
    }
}
----------------------------------------

 static void Main(string[] args)
{ 
                    HttpWebResponse response = null; 
                    try 
                    { 
                        response = GetResource(); 
                    }
                    finally
                    { 
                        if (response != null)
                        {
                            response.Dispose ();
                        } 
                    }
                }
                private static HttpWebResponse GetResource() 
                {
                    try
                    { 
                        HttpWebResponse response = new HttpWebResponse();
                        response.GetResponse (); 
                        return response;
                    }
                    catch (Exception ex)
                    {
                        return null;
                    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
166
7
Gpt3D_Clone166_7.cs 1 11
Gpt3D_Clone166_7.cs 12 35
----------------------------------------

static void Main (string [] args) {
    HttpWebResponse response = new HttpWebResponse ();
    try {
        response.GetResponse ();
    }
    catch (Exception ex) {
    }
    finally {
        response.Dispose ();
    }
}
----------------------------------------

 static void Main(string[] args) 
{ 
                    HttpWebResponse response = CreateResponseIfPossible(() => new HttpWebResponse ()); 
                    if (response != null) 
                    { 
                        response.GetResponse (); 
                        response.Dispose(); 
                    } 
                }
                private static HttpWebResponse CreateResponseIfPossible(Func<HttpWebResponse> func)
                { 
                    try
                    { 
                        return func();
                    }
                    catch (Exception ex)
                    {
                        return null;
                    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
166
8
Gpt3D_Clone166_8.cs 1 11
Gpt3D_Clone166_8.cs 12 35
----------------------------------------

static void Main (string [] args) {
    HttpWebResponse response = new HttpWebResponse ();
    try {
        response.GetResponse ();
    }
    catch (Exception ex) {
    }
    finally {
        response.Dispose ();
    }
}
----------------------------------------

 static void Main(string[] args) 
{ 
                    HttpWebResponse response = CreateResponseIfPossible(() => new HttpWebResponse ()); 
                    if (response != null) 
                    { 
                        response.GetResponse (); 
                        response.Dispose(); 
                    } 
                }
                private static HttpWebResponse CreateResponseIfPossible(Func<HttpWebResponse> func)
                { 
                    try
                    { 
                        return func();
                    }
                    catch (Exception ex)
                    {
                        return null;
                    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
166
9
Gpt3D_Clone166_9.cs 1 11
Gpt3D_Clone166_9.cs 12 32
----------------------------------------

static void Main (string [] args) {
    HttpWebResponse response = new HttpWebResponse ();
    try {
        response.GetResponse ();
    }
    catch (Exception ex) {
    }
    finally {
        response.Dispose ();
    }
}
----------------------------------------

 static void Main(string[] args) 
{ 
                        using (var response = HandleException(() => new HttpWebResponse()))
                        { 
                            response.GetResponse ();  
                        } 
                    }
                    private static T HandleException<T>(Func<T> func)
                    { 
                        try 
                        { 
                            return func();
                        } 
                        catch (Exception ex) 
                        { 
                            return default(T);
                        } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
167
0
Gpt3D_Clone167_0.cs 1 8
Gpt3D_Clone167_0.cs 9 21
----------------------------------------

public bool btnRemoveCategory_IsVisible (Office.IRibbonControl ctl) {
    var item = ctl.Context as Inspector;
    var mailItem = item.CurrentItem as MailItem;
    if (item != null)
        return (item != null && HasMyCategory (item));
    else
        return false;
}
----------------------------------------

 public bool btnRemoveCategory_IsVisible (Office.IRibbonControl ctl) {
   var item = ctl.Context as Inspector;
   var mailItem = item.CurrentItem as MailItem;
   if (mailItem != null) {
       if (HasMyCategory(mailItem) == true)
           return true;
       else
           return false;
   } else
       return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
167
1
Gpt3D_Clone167_1.cs 1 8
Gpt3D_Clone167_1.cs 9 24
----------------------------------------

public bool btnRemoveCategory_IsVisible (Office.IRibbonControl ctl) {
    var item = ctl.Context as Inspector;
    var mailItem = item.CurrentItem as MailItem;
    if (item != null)
        return (item != null && HasMyCategory (item));
    else
        return false;
}
----------------------------------------

 public bool btnRemoveCategory_IsVisible (Office.IRibbonControl ctl) {
	var item = ctl.Context as Inspector;
	var mailItem = item.CurrentItem as MailItem;
	bool isVisible = false;
    
	if (item != null) {
		if (HasMyCategory(mailItem)) 
			isVisible = true;
		else
			 isVisible = false;
	}
    
	return isVisible;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
167
2
Gpt3D_Clone167_2.cs 1 8
Gpt3D_Clone167_2.cs 9 22
----------------------------------------

public bool btnRemoveCategory_IsVisible (Office.IRibbonControl ctl) {
    var item = ctl.Context as Inspector;
    var mailItem = item.CurrentItem as MailItem;
    if (item != null)
        return (item != null && HasMyCategory (item));
    else
        return false;
}
----------------------------------------

 public bool btnRemoveCategory_IsVisible (Office.IRibbonControl ctl) {
    var item = ctl.Context as Inspector;
    var mailItem = item.CurrentItem as MailItem;
    bool isVisible = false;
    if (mailItem != null) {
        if (HasMyCategory(mailItem))
            isVisible = true;
    }
    
    return isVisible;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
167
3
Gpt3D_Clone167_3.cs 1 8
Gpt3D_Clone167_3.cs 9 22
----------------------------------------

public bool btnRemoveCategory_IsVisible (Office.IRibbonControl ctl) {
    var item = ctl.Context as Inspector;
    var mailItem = item.CurrentItem as MailItem;
    if (item != null)
        return (item != null && HasMyCategory (item));
    else
        return false;
}
----------------------------------------

 public bool btnRemoveCategory_IsVisible (Office.IRibbonControl ctl) {
    var item = ctl.Context as Inspector;
    var mailItem = item.CurrentItem as MailItem;
    bool isVisible = false;
    if (item != null && mailItem != null) {
        if(HasMyCategory(mailItem))
            isVisible = true;
    }
    
    return isVisible;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
167
8
Gpt3D_Clone167_8.cs 1 8
Gpt3D_Clone167_8.cs 9 20
----------------------------------------

public bool btnRemoveCategory_IsVisible (Office.IRibbonControl ctl) {
    var item = ctl.Context as Inspector;
    var mailItem = item.CurrentItem as MailItem;
    if (item != null)
        return (item != null && HasMyCategory (item));
    else
        return false;
}
----------------------------------------

 public bool btnRemoveCategory_IsVisible (Office.IRibbonControl ctl) {
    var item = ctl.Context as Inspector;
    var mailItem = item.CurrentItem as MailItem;
    bool isVisible = false;
    if (item != null && mailItem != null)
        isVisible = HasMyCategory(item);
    
    return isVisible;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
168
0
Gpt3D_Clone168_0.cs 1 16
Gpt3D_Clone168_0.cs 17 48
----------------------------------------

public static void ReplaceTextInWordDoc (Object findMe, Object replaceMe, ApplicationClass app) {
    object replaceAll = Word.WdReplace.wdReplaceAll;
    object missing = System.Reflection.Missing.Value;
    app.Application.Selection.Find.ClearFormatting ();
    app.Application.Selection.Find.Text = (string) findMe;
    app.Application.Selection.Find.Replacement.ClearFormatting ();
    if (replaceMe.ToString ().Length < 256) {
        app.Application.Selection.Find.Replacement.Text = (string) replaceMe;
        app.Application.Selection.Find.Execute (ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref replaceAll, ref missing, ref missing, ref missing, ref missing);
    } else {
        while (app.Application.Selection.Find.Execute (ref findMe, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing)) {
            app.Application.Selection.Text = (string) replaceMe;
            app.Application.Selection.Collapse ();
        }
    }
}
----------------------------------------

 public static void ReplaceTextInWordDoc (Object findMe, Object replaceMe, ApplicationClass app) 
{
    object missing = System.Reflection.Missing.Value;
    object replaceAll = Word.WdReplace.wdReplaceAll;
    app.Selection.Find.ClearFormatting();
    app.Selection.Find.Text = (string)findMe;
    int len = replaceMe.ToString().Length;
    // If the length of the replacement is less than 256 characters
    // execute with wdReplaceAll.
    if (len < 256)
    {
        app.Selection.Find.Replacement.Text = (string)replaceMe;
        app.Selection.Find.Execute(ref missing, ref missing, ref missing, ref missing,
            ref missing, ref missing, ref missing, ref missing, ref missing, ref missing,
            ref replaceAll, ref missing, ref missing, ref missing, ref missing);
        app.Selection.Font.ColorIndex = '1';
    }
    else // Otherwise, execute and loop while the search string is found.
    {
        while (app.Selection.Find.Execute(ref findMe, ref missing, ref missing, ref missing,
            ref missing, ref missing, ref missing, ref missing, ref missing, ref missing,
            ref missing, ref missing, ref missing, ref missing, ref missing))
        {
            app.Selection.Font.ColorIndex = '1';
            app.Selection.Text = (string)replaceMe;
            app.Selection.Collapse();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
168
1
Gpt3D_Clone168_1.cs 1 16
Gpt3D_Clone168_1.cs 17 48
----------------------------------------

public static void ReplaceTextInWordDoc (Object findMe, Object replaceMe, ApplicationClass app) {
    object replaceAll = Word.WdReplace.wdReplaceAll;
    object missing = System.Reflection.Missing.Value;
    app.Application.Selection.Find.ClearFormatting ();
    app.Application.Selection.Find.Text = (string) findMe;
    app.Application.Selection.Find.Replacement.ClearFormatting ();
    if (replaceMe.ToString ().Length < 256) {
        app.Application.Selection.Find.Replacement.Text = (string) replaceMe;
        app.Application.Selection.Find.Execute (ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref replaceAll, ref missing, ref missing, ref missing, ref missing);
    } else {
        while (app.Application.Selection.Find.Execute (ref findMe, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing)) {
            app.Application.Selection.Text = (string) replaceMe;
            app.Application.Selection.Collapse ();
        }
    }
}
----------------------------------------

 public static void ReplaceTextInWordDoc (Object findMe, Object replaceMe, ApplicationClass app) 
{
    object replaceAll = Word.WdReplace.wdReplaceAll;
    object missing = System.Reflection.Missing.Value;
    int len = replaceMe.ToString().Length;
    // If the length of the replacement is less than 256 characters
    // execute with wdReplaceAll.
    if (len < 256)
    {
        app.Selection.Find.ClearFormatting();
        app.Selection.Find.Text = (string)findMe;
        app.Selection.Find.Replacement.Text = (string)replaceMe;
        app.Selection.Find.Execute(ref missing, ref missing, ref missing, ref missing, ref missing,
            ref missing, ref missing, ref missing, ref missing, ref missing, ref replaceAll,
            ref missing, ref missing, ref missing, ref missing);
        app.Selection.Font.ColorIndex = '1';
    }
    else
    {
        while (app.Selection.Find.Execute(ref findMe, ref missing, ref missing, ref missing, ref missing,
            ref missing, ref missing, ref missing, ref missing, ref missing, ref replaceAll,
            ref missing, ref missing, ref missing, ref missing))
        {
            app.Selection.Font.ColorIndex = '1';
            app.Selection.Text = (string)replaceMe;
            app.Selection.Collapse();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
168
2
Gpt3D_Clone168_2.cs 1 16
Gpt3D_Clone168_2.cs 17 44
----------------------------------------

public static void ReplaceTextInWordDoc (Object findMe, Object replaceMe, ApplicationClass app) {
    object replaceAll = Word.WdReplace.wdReplaceAll;
    object missing = System.Reflection.Missing.Value;
    app.Application.Selection.Find.ClearFormatting ();
    app.Application.Selection.Find.Text = (string) findMe;
    app.Application.Selection.Find.Replacement.ClearFormatting ();
    if (replaceMe.ToString ().Length < 256) {
        app.Application.Selection.Find.Replacement.Text = (string) replaceMe;
        app.Application.Selection.Find.Execute (ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref replaceAll, ref missing, ref missing, ref missing, ref missing);
    } else {
        while (app.Application.Selection.Find.Execute (ref findMe, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing)) {
            app.Application.Selection.Text = (string) replaceMe;
            app.Application.Selection.Collapse ();
        }
    }
}
----------------------------------------

 public static void ReplaceTextInWordDoc (Object findMe, Object replaceMe, ApplicationClass app) 
{
    object missing = System.Reflection.Missing.Value;
    int len = replaceMe.ToString().Length;
    if (len < 256)
    {
        app.Selection.Find.ClearFormatting();
        app.Selection.Find.Text = (string)findMe;
        app.Selection.Find.Replacement.Text = (string)replaceMe;
        app.Selection.Find.Execute(ref missing, ref missing, ref missing, ref missing,
            ref missing, ref missing, ref missing, ref missing, ref missing, ref missing,
            ref missing, ref missing, ref missing, ref missing, ref missing);
        app.Selection.Font.ColorIndex = '1';
    }
    else
    {
        while (app.Selection.Find.Execute(ref findMe, ref missing, ref missing, ref missing,
            ref missing, ref missing, ref missing, ref missing, ref missing,
            ref missing, ref missing, ref missing, ref missing, ref missing, ref missing))
        {
            app.Selection.Font.ColorIndex = '1';
            app.Selection.Text = (string)replaceMe;
            app.Selection.Collapse();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
168
3
Gpt3D_Clone168_3.cs 1 16
Gpt3D_Clone168_3.cs 17 47
----------------------------------------

public static void ReplaceTextInWordDoc (Object findMe, Object replaceMe, ApplicationClass app) {
    object replaceAll = Word.WdReplace.wdReplaceAll;
    object missing = System.Reflection.Missing.Value;
    app.Application.Selection.Find.ClearFormatting ();
    app.Application.Selection.Find.Text = (string) findMe;
    app.Application.Selection.Find.Replacement.ClearFormatting ();
    if (replaceMe.ToString ().Length < 256) {
        app.Application.Selection.Find.Replacement.Text = (string) replaceMe;
        app.Application.Selection.Find.Execute (ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref replaceAll, ref missing, ref missing, ref missing, ref missing);
    } else {
        while (app.Application.Selection.Find.Execute (ref findMe, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing)) {
            app.Application.Selection.Text = (string) replaceMe;
            app.Application.Selection.Collapse ();
        }
    }
}
----------------------------------------

 public static void ReplaceTextInWordDoc (Object findMe, Object replaceMe, ApplicationClass app) 
{
     object missing = System.Reflection.Missing.Value;
     app.Selection.Find.ClearFormatting();
     app.Selection.Find.Text = (string)findMe;
     int len = replaceMe.ToString().Length;
     // If the length of the replacement is less than 256 characters
     // execute with wdReplaceAll.
     if (len < 256)
     {
         app.Selection.Find.Replacement.Text = (string)replaceMe;
         app.Selection.Find.Execute(ref findMe, ref missing, ref missing, ref missing, ref missing,
             ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing,
             ref missing, ref missing, ref missing);
         app.Selection.Font.ColorIndex = '1';
     }
     else // Otherwise, execute and loop while the search string is found.
     {
         while (app.Selection.Find.Execute(ref findMe, ref missing, ref missing, ref missing,
             ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing,
             ref missing, ref missing, ref missing, ref missing))
         {
             app.Selection.Font.ColorIndex = '1';
             app.Selection.Text = (string)replaceMe;
             app.Selection.Collapse();
         }
     }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
168
4
Gpt3D_Clone168_4.cs 1 16
Gpt3D_Clone168_4.cs 17 47
----------------------------------------

public static void ReplaceTextInWordDoc (Object findMe, Object replaceMe, ApplicationClass app) {
    object replaceAll = Word.WdReplace.wdReplaceAll;
    object missing = System.Reflection.Missing.Value;
    app.Application.Selection.Find.ClearFormatting ();
    app.Application.Selection.Find.Text = (string) findMe;
    app.Application.Selection.Find.Replacement.ClearFormatting ();
    if (replaceMe.ToString ().Length < 256) {
        app.Application.Selection.Find.Replacement.Text = (string) replaceMe;
        app.Application.Selection.Find.Execute (ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref replaceAll, ref missing, ref missing, ref missing, ref missing);
    } else {
        while (app.Application.Selection.Find.Execute (ref findMe, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing)) {
            app.Application.Selection.Text = (string) replaceMe;
            app.Application.Selection.Collapse ();
        }
    }
}
----------------------------------------

 public static void ReplaceTextInWordDoc (Object findMe, Object replaceMe, ApplicationClass app) 
{
    object missing = System.Reflection.Missing.Value;
    app.Selection.Find.ClearFormatting();
    app.Selection.Find.Text = (string)findMe;
    int len = replaceMe.ToString().Length;
    // If the length of the replacement is less than 256 characters
    // execute with wdReplaceAll.
    if (len < 256)
    {
        app.Selection.Find.Replacement.Text = (string)replaceMe;
        app.Selection.Find.Execute(ref missing, ref missing, ref missing, ref missing,
            ref missing, ref missing, ref missing, ref missing, ref missing, ref missing,
            ref missing, ref missing, ref missing, ref missing, ref missing);
        app.Selection.Font.ColorIndex = '1';
    }
    else // Otherwise, execute and loop while the search string is found.
    {
        while (app.Selection.Find.Execute(ref findMe, ref missing, ref missing, ref missing,
            ref missing, ref missing, ref missing, ref missing, ref missing, ref missing,
            ref missing, ref missing, ref missing, ref missing, ref missing))
        {
            app.Selection.Font.ColorIndex = '1';
            app.Selection.Text = (string)replaceMe;
            app.Selection.Collapse();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
168
5
Gpt3D_Clone168_5.cs 1 16
Gpt3D_Clone168_5.cs 17 46
----------------------------------------

public static void ReplaceTextInWordDoc (Object findMe, Object replaceMe, ApplicationClass app) {
    object replaceAll = Word.WdReplace.wdReplaceAll;
    object missing = System.Reflection.Missing.Value;
    app.Application.Selection.Find.ClearFormatting ();
    app.Application.Selection.Find.Text = (string) findMe;
    app.Application.Selection.Find.Replacement.ClearFormatting ();
    if (replaceMe.ToString ().Length < 256) {
        app.Application.Selection.Find.Replacement.Text = (string) replaceMe;
        app.Application.Selection.Find.Execute (ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref replaceAll, ref missing, ref missing, ref missing, ref missing);
    } else {
        while (app.Application.Selection.Find.Execute (ref findMe, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing)) {
            app.Application.Selection.Text = (string) replaceMe;
            app.Application.Selection.Collapse ();
        }
    }
}
----------------------------------------

 public static void ReplaceTextInWordDoc (Object findMe, Object replaceMe, ApplicationClass app) 
{
     object missing = System.Reflection.Missing.Value;
     int len = replaceMe.ToString().Length;
     if (len < 256)
     {
         app.Selection.Find.ClearFormatting();
         app.Selection.Find.Text = (string)findMe;
         app.Selection.Find.Replacement.Text = (string)replaceMe;
         app.Selection.Find.Execute(ref findMe, ref missing, ref missing, ref missing, ref missing, ref missing,
             ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing,
             ref missing, ref missing);
         app.Selection.Font.ColorIndex = '1';
     }
     else
     {
         while (app.Selection.Find.Execute(ref findMe, ref missing, ref missing, ref missing, ref missing,
             ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing,
             ref missing, ref missing, ref missing))
         {
             app.Selection.Font.ColorIndex = '1';
             app.Selection.Text = (string)replaceMe;
             app.Selection.Collapse();
         }
     }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
168
6
Gpt3D_Clone168_6.cs 1 16
Gpt3D_Clone168_6.cs 17 47
----------------------------------------

public static void ReplaceTextInWordDoc (Object findMe, Object replaceMe, ApplicationClass app) {
    object replaceAll = Word.WdReplace.wdReplaceAll;
    object missing = System.Reflection.Missing.Value;
    app.Application.Selection.Find.ClearFormatting ();
    app.Application.Selection.Find.Text = (string) findMe;
    app.Application.Selection.Find.Replacement.ClearFormatting ();
    if (replaceMe.ToString ().Length < 256) {
        app.Application.Selection.Find.Replacement.Text = (string) replaceMe;
        app.Application.Selection.Find.Execute (ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref replaceAll, ref missing, ref missing, ref missing, ref missing);
    } else {
        while (app.Application.Selection.Find.Execute (ref findMe, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing)) {
            app.Application.Selection.Text = (string) replaceMe;
            app.Application.Selection.Collapse ();
        }
    }
}
----------------------------------------

 public static void ReplaceTextInWordDoc (Object findMe, Object replaceMe, ApplicationClass app) 
{
    object missing = System.Reflection.Missing.Value;
    app.Selection.Find.ClearFormatting();
    app.Selection.Find.Text = (string)findMe;
    int len = replaceMe.ToString().Length;
    // If the length of the replacement is less than 256 characters
    // execute with wdReplaceAll.
    if (len < 256)
    {
        app.Selection.Find.Replacement.Text = (string)replaceMe;
        app.Selection.Find.Execute(ref missing, ref missing, ref missing, ref missing,
        ref missing, ref missing, ref missing, ref missing, ref missing, ref missing,
        ref missing, ref missing, ref missing, ref missing, ref missing);
        app.Selection.Font.ColorIndex = '1';
    }
    else // Otherwise, execute and loop while the search string is found.
    {
        while (app.Selection.Find.Execute(ref findMe, ref missing, ref missing, ref missing, ref missing,ref missing,
            ref missing, ref missing, ref missing, ref missing, ref missing, ref missing,
            ref missing, ref missing, ref missing))
        {
            app.Selection.Font.ColorIndex = '1';
            app.Selection.Text = (string)replaceMe;
            app.Selection.Collapse();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
168
7
Gpt3D_Clone168_7.cs 1 16
Gpt3D_Clone168_7.cs 17 43
----------------------------------------

public static void ReplaceTextInWordDoc (Object findMe, Object replaceMe, ApplicationClass app) {
    object replaceAll = Word.WdReplace.wdReplaceAll;
    object missing = System.Reflection.Missing.Value;
    app.Application.Selection.Find.ClearFormatting ();
    app.Application.Selection.Find.Text = (string) findMe;
    app.Application.Selection.Find.Replacement.ClearFormatting ();
    if (replaceMe.ToString ().Length < 256) {
        app.Application.Selection.Find.Replacement.Text = (string) replaceMe;
        app.Application.Selection.Find.Execute (ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref replaceAll, ref missing, ref missing, ref missing, ref missing);
    } else {
        while (app.Application.Selection.Find.Execute (ref findMe, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing)) {
            app.Application.Selection.Text = (string) replaceMe;
            app.Application.Selection.Collapse ();
        }
    }
}
----------------------------------------

 public static void ReplaceTextInWordDoc (Object findMe, Object replaceMe, ApplicationClass app) 
{
    object replaceAll = Word.WdReplace.wdReplaceAll;
    object missing = System.Reflection.Missing.Value;
    app.Selection.Find.ClearFormatting();
    app.Selection.Find.Text = (string)findMe;
    if (replaceMe.ToString().Length < 256)
    {
        app.Selection.Find.Replacement.Text = (string)replaceMe;
        app.Selection.Find.Execute(ref missing, ref missing, ref missing, ref missing,
            ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref replaceAll,
            ref missing, ref missing, ref missing, ref missing);
    }
    else
    {
        while (app.Selection.Find.Execute(ref findMe, ref missing, ref missing, ref missing, ref missing,
            ref missing, ref missing, ref missing, ref missing, ref missing, ref missing,
            ref missing, ref missing, ref missing, ref missing))
        {
            app.Selection.Font.ColorIndex = '1';
            app.Selection.Text = replaceMe.ToString();
            app.Selection.Collapse();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
168
8
Gpt3D_Clone168_8.cs 1 16
Gpt3D_Clone168_8.cs 17 41
----------------------------------------

public static void ReplaceTextInWordDoc (Object findMe, Object replaceMe, ApplicationClass app) {
    object replaceAll = Word.WdReplace.wdReplaceAll;
    object missing = System.Reflection.Missing.Value;
    app.Application.Selection.Find.ClearFormatting ();
    app.Application.Selection.Find.Text = (string) findMe;
    app.Application.Selection.Find.Replacement.ClearFormatting ();
    if (replaceMe.ToString ().Length < 256) {
        app.Application.Selection.Find.Replacement.Text = (string) replaceMe;
        app.Application.Selection.Find.Execute (ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref replaceAll, ref missing, ref missing, ref missing, ref missing);
    } else {
        while (app.Application.Selection.Find.Execute (ref findMe, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing)) {
            app.Application.Selection.Text = (string) replaceMe;
            app.Application.Selection.Collapse ();
        }
    }
}
----------------------------------------

 public static void ReplaceTextInWordDoc (Object findMe, Object replaceMe, ApplicationClass app) 
{
     object missing = System.Reflection.Missing.Value;
     app.Selection.Find.ClearFormatting();
     app.Selection.Find.Text = (string)findMe;
     if (replaceMe.ToString().Length < 256)
     {
         app.Selection.Find.Execute(ref findMe, ref missing, ref missing, ref missing, ref missing, ref missing,
             ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing);
         app.Selection.Font.ColorIndex = '1';
         app.Selection.Text = (string)replaceMe;
     }
     else
     {
         while (app.Selection.Find.Execute(ref findMe, ref missing, ref missing, ref missing, ref missing, ref missing,
             ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing, ref missing))
         {
             app.Selection.Font.ColorIndex = '1';
             app.Selection.Text = (string)replaceMe;
             app.Selection.Collapse();
         }
     }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
169
1
Gpt3D_Clone169_1.cs 1 11
Gpt3D_Clone169_1.cs 12 23
----------------------------------------

static void Main () {
    using (MemoryStream ms = new MemoryStream ())
    {
        WriteNext (ms, 123);
        WriteNext (ms, new Person {Name = "Fred"});
        WriteNext (ms, "abc");
        ms.Position = 0;
        while (ReadNext (ms)) {
        }
    }
}
----------------------------------------

 static void Main() {
    using (MemoryStream ms = new MemoryStream())
    {
        ms.WriteInt32(123);
        WritePerson(ms, new Person {Name = "Fred"});
        ms.WriteString("abc");
        ms.Position = 0;
        ReadAll(ms);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
169
2
Gpt3D_Clone169_2.cs 1 11
Gpt3D_Clone169_2.cs 12 23
----------------------------------------

static void Main () {
    using (MemoryStream ms = new MemoryStream ())
    {
        WriteNext (ms, 123);
        WriteNext (ms, new Person {Name = "Fred"});
        WriteNext (ms, "abc");
        ms.Position = 0;
        while (ReadNext (ms)) {
        }
    }
}
----------------------------------------

 static void Main() {
    using (MemoryStream ms = new MemoryStream())
    {
        ms.WriteInt32(123);
        WritePerson(ms, new Person {Name = "Fred"});
        ms.WriteString("abc");
        ms.Position = 0;
        ReadAll(ms);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
171
0
Gpt3D_Clone171_0.cs 1 11
Gpt3D_Clone171_0.cs 12 31
----------------------------------------

private void btnAdd_Click (object sender, RoutedEventArgs e) {
    string customer = btnEditCustomer1.Text;
    string piece = btnPiece.Text;
    string material = txtMaterial.Text;
    int quantity = Convert.ToInt32 (txtQuantity.Text);
    float weight = float.Parse (txtWeight.Text);
    if (customer != null && piece != null && material != null) {
        var item = new Liste {Customer = customer, Piece = piece, Material = material, Quantity = quantity, Weight = weight};
        AllItems.Add (item);
    }
}
----------------------------------------

 private void btnAdd_Click (object sender, RoutedEventArgs e) {
      string customer = btnEditCustomer1.Text?.Trim();
      string piece = btnPiece.Text?.Trim();
      string material = txtMaterial.Text?.Trim();
      if (string.IsNullOrWhiteSpace(customer) || string.IsNullOrWhiteSpace(piece) || string.IsNullOrWhiteSpace(material))
          return;
 
      int quantity;
      if (!int.TryParse(txtQuantity.Text, out quantity))
          return;
 
      float weight;
      if (!float.TryParse(txtWeight.Text, out weight))
          return;
 
      var item = new Liste {Customer = customer, Piece = piece, Material = material, Quantity = quantity, Weight = weight};
      AllItems.Add(item);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
171
1
Gpt3D_Clone171_1.cs 1 11
Gpt3D_Clone171_1.cs 12 26
----------------------------------------

private void btnAdd_Click (object sender, RoutedEventArgs e) {
    string customer = btnEditCustomer1.Text;
    string piece = btnPiece.Text;
    string material = txtMaterial.Text;
    int quantity = Convert.ToInt32 (txtQuantity.Text);
    float weight = float.Parse (txtWeight.Text);
    if (customer != null && piece != null && material != null) {
        var item = new Liste {Customer = customer, Piece = piece, Material = material, Quantity = quantity, Weight = weight};
        AllItems.Add (item);
    }
}
----------------------------------------

 private void btnAdd_Click (object sender, RoutedEventArgs e) {
      string customer = btnEditCustomer1.Text;
      string piece = btnPiece.Text;
      string material = txtMaterial.Text;
      int quantity = 0;
      bool parseSuccess = Int32.TryParse(txtQuantity.Text, out quantity);
      float weight = 0;
      parseSuccess = float.TryParse(txtWeight.Text, out weight);
      if (!String.IsNullOrEmpty(customer) && !String.IsNullOrEmpty(piece) && !String.IsNullOrEmpty(material)) {
          var item = new Liste {Customer = customer, Piece = piece, Material = material, Quantity = quantity, Weight = weight};
          AllItems.Add (item);
      }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
171
3
Gpt3D_Clone171_3.cs 1 11
Gpt3D_Clone171_3.cs 12 29
----------------------------------------

private void btnAdd_Click (object sender, RoutedEventArgs e) {
    string customer = btnEditCustomer1.Text;
    string piece = btnPiece.Text;
    string material = txtMaterial.Text;
    int quantity = Convert.ToInt32 (txtQuantity.Text);
    float weight = float.Parse (txtWeight.Text);
    if (customer != null && piece != null && material != null) {
        var item = new Liste {Customer = customer, Piece = piece, Material = material, Quantity = quantity, Weight = weight};
        AllItems.Add (item);
    }
}
----------------------------------------

 private void btnAdd_Click (object sender, RoutedEventArgs e) {
    string customer = btnEditCustomer1.Text;
    string piece = btnPiece.Text;
    string material = txtMaterial.Text;
    if (String.IsNullOrEmpty(customer) || String.IsNullOrEmpty(piece) || String.IsNullOrEmpty(material)) {
        return;
    }
     
    int quantity;
    int.TryParse(txtQuantity.Text, out quantity);
    float weight;
    float.TryParse(txtWeight.Text, out weight);
     
    var item = new Liste {Customer = customer, Piece = piece, Material = material, Quantity = quantity, Weight = weight};
    AllItems.Add (item);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
171
8
Gpt3D_Clone171_8.cs 1 11
Gpt3D_Clone171_8.cs 12 30
----------------------------------------

private void btnAdd_Click (object sender, RoutedEventArgs e) {
    string customer = btnEditCustomer1.Text;
    string piece = btnPiece.Text;
    string material = txtMaterial.Text;
    int quantity = Convert.ToInt32 (txtQuantity.Text);
    float weight = float.Parse (txtWeight.Text);
    if (customer != null && piece != null && material != null) {
        var item = new Liste {Customer = customer, Piece = piece, Material = material, Quantity = quantity, Weight = weight};
        AllItems.Add (item);
    }
}
----------------------------------------

 private void btnAdd_Click (object sender, RoutedEventArgs e) {
    var customer = btnEditCustomer1.Text?.Trim();
    var piece = btnPiece.Text?.Trim();
    var material = txtMaterial.Text?.Trim();
    var quantity = int.TryParse(txtQuantity.Text, out var qty) 
                    ? qty 
                    : (int?)null;
    if (!string.IsNullOrEmpty(customer) 
        && !string.IsNullOrEmpty(piece) 
        && !string.IsNullOrEmpty(material) 
        && weight.HasValue 
        && quantity.HasValue
    ) {
        var item = new Liste {Customer = customer, Piece = piece, Material = material, Quantity = quantity, Weight = weight};
        AllItems.Add (item);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
173
0
Gpt3D_Clone173_0.cs 1 25
Gpt3D_Clone173_0.cs 26 70
----------------------------------------

internal static string GetIPAddress (HttpRequestBase request) {
    string forwarded = request.Headers ["Forwarded"];
    if (! String.IsNullOrEmpty (forwarded)) {
        foreach (string segment in forwarded.Split (',') [0].Split (';')) {
            string [] pair = segment.Trim ().Split ('=');
            if (pair.Length == 2 && pair [0].Equals ("for", StringComparison.OrdinalIgnoreCase)) {
                string ip = pair [1].Trim ('"');
                int left = ip.IndexOf ('['), right = ip.IndexOf (']');
                if (left == 0 && right > 0) {
                    return ip.Substring (1, right - 1);
                }
                int colon = ip.IndexOf (':');
                if (colon != - 1) {
                    return ip.Substring (0, colon);
                }
                return ip;
            }
        }
    }
    string xForwardedFor = request.Headers ["X-Forwarded-For"];
    if (! String.IsNullOrEmpty (xForwardedFor)) {
        return xForwardedFor.Split (',') [0];
    }
    return request.UserHostAddress;
}
----------------------------------------

	internal static string GetIPAddress (HttpRequestBase request) {
    string ip = request.Headers["Forwarded"];
    if (! String.IsNullOrEmpty(ip))
    {
        string[] tokens = ip.Split(',');
        string[] parts = tokens[0].Split(';');
        foreach (string part in parts)
        {
            string[] pair = part.Split('=');
            if (pair.Length == 2)
            {
                if (pair[0].Equals("for", StringComparison.OrdinalIgnoreCase))
                {
                    ip = pair[1];
                    ip = ip.Trim('"');
                    int left = ip.IndexOf('[');
                    int right = ip.IndexOf(']');
                    if (left == 0 && right > 0)
                    {
                        ip = ip.Substring(1, right-1);
                        return ip;
                    }
                    int colonIndex = ip.IndexOf(':');
                    if (colonIndex > 0)
                    {
                        ip = ip.Substring(0, colonIndex);
                        return ip;
                    }
                    return ip;
                }
            }
        }
    }
    ip = request.Headers["X-Forwarded-For"];
    if (! String.IsNullOrEmpty(ip))
    {
        string[] parts = ip.Split(',');
        ip = parts[0];
        return ip;
    }
    ip = request.UserHostAddress;
    return ip;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
174
0
Gpt3D_Clone174_0.cs 1 7
Gpt3D_Clone174_0.cs 8 21
----------------------------------------

public static string GetIPAddress (this HttpRequest Request) {
    if (Request.Headers ["CF-CONNECTING-IP"] != null)
        return Request.Headers ["CF-CONNECTING-IP"].ToString ();
    if (Request.ServerVariables ["HTTP_X_FORWARDED_FOR"] != null)
        return Request.ServerVariables ["HTTP_X_FORWARDED_FOR"].ToString ();
    return Request.UserHostAddress;
}
----------------------------------------

 public static string GetIPAddress (this HttpRequest Request) {
    string CF_CONNECTING_IP = Request.Headers["CF-CONNECTING-IP"];
    string HTTP_X_FORWARDED_FOR = Request.ServerVariables["HTTP_X_FORWARDED_FOR"];
    string ip = string.Empty;
    if (!string.IsNullOrWhiteSpace(CF_CONNECTING_IP))
        ip = CF_CONNECTING_IP;
    else if (!string.IsNullOrWhiteSpace(HTTP_X_FORWARDED_FOR))
        ip = HTTP_X_FORWARDED_FOR;
    else
        ip = Request.UserHostAddress;
    return ip;
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
174
1
Gpt3D_Clone174_1.cs 1 7
Gpt3D_Clone174_1.cs 8 22
----------------------------------------

public static string GetIPAddress (this HttpRequest Request) {
    if (Request.Headers ["CF-CONNECTING-IP"] != null)
        return Request.Headers ["CF-CONNECTING-IP"].ToString ();
    if (Request.ServerVariables ["HTTP_X_FORWARDED_FOR"] != null)
        return Request.ServerVariables ["HTTP_X_FORWARDED_FOR"].ToString ();
    return Request.UserHostAddress;
}
----------------------------------------

 public static string GetIPAddress (this HttpRequest Request) {
	string ipAddress = string.Empty;
	if (Request.Headers.TryGetValue("CF-CONNECTING-IP", out string cfConnectionIP)) {
		ipAddress = cfConnectionIP;
	}
	else if (Request.ServerVariables.TryGetValue("HTTP_X_FORWARDED_FOR", out string httpXForwardedFor)) {
		ipAddress = httpXForwardedFor;
	} else {
		ipAddress = Request.UserHostAddress;
	}
	return ipAddress;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
174
2
Gpt3D_Clone174_2.cs 1 7
Gpt3D_Clone174_2.cs 8 22
----------------------------------------

public static string GetIPAddress (this HttpRequest Request) {
    if (Request.Headers ["CF-CONNECTING-IP"] != null)
        return Request.Headers ["CF-CONNECTING-IP"].ToString ();
    if (Request.ServerVariables ["HTTP_X_FORWARDED_FOR"] != null)
        return Request.ServerVariables ["HTTP_X_FORWARDED_FOR"].ToString ();
    return Request.UserHostAddress;
}
----------------------------------------

 public static string GetIPAddress (this HttpRequest Request) {
    string ipAddress = "";
    if (Request.Headers.Any(h => h.Key == "CF-CONNECTING-IP")){
        ipAddress = Request.Headers.SingleOrDefault(h => h.Key == "CF-CONNECTING-IP").Value.FirstOrDefault();
    }
    if (ipAddress == "" && Request.ServerVariables.Any(s => s.Key == "HTTP_X_FORWARDED_FOR")){
        ipAddress = Request.ServerVariables.SingleOrDefault(s => s.Key == "HTTP_X_FORWARDED_FOR").Value.FirstOrDefault();
    }
    if (ipAddress == ""){
        ipAddress = Request.UserHostAddress;
    }
    return ipAddress;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
174
3
Gpt3D_Clone174_3.cs 1 7
Gpt3D_Clone174_3.cs 8 19
----------------------------------------

public static string GetIPAddress (this HttpRequest Request) {
    if (Request.Headers ["CF-CONNECTING-IP"] != null)
        return Request.Headers ["CF-CONNECTING-IP"].ToString ();
    if (Request.ServerVariables ["HTTP_X_FORWARDED_FOR"] != null)
        return Request.ServerVariables ["HTTP_X_FORWARDED_FOR"].ToString ();
    return Request.UserHostAddress;
}
----------------------------------------

 public static string GetIPAddress (this HttpRequest Request) {
    string ip = string.Empty; 
    if (Request.Headers ["CF-CONNECTING-IP"] != null)
        ip = Request.Headers ["CF-CONNECTING-IP"].ToString ();
    if (string.IsNullOrWhiteSpace(ip) && Request.ServerVariables ["HTTP_X_FORWARDED_FOR"] != null)
        ip = Request.ServerVariables ["HTTP_X_FORWARDED_FOR"].ToString ();
    if (string.IsNullOrWhiteSpace(ip))
        ip = Request.UserHostAddress;
    return ip;
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
174
4
Gpt3D_Clone174_4.cs 1 7
Gpt3D_Clone174_4.cs 8 20
----------------------------------------

public static string GetIPAddress (this HttpRequest Request) {
    if (Request.Headers ["CF-CONNECTING-IP"] != null)
        return Request.Headers ["CF-CONNECTING-IP"].ToString ();
    if (Request.ServerVariables ["HTTP_X_FORWARDED_FOR"] != null)
        return Request.ServerVariables ["HTTP_X_FORWARDED_FOR"].ToString ();
    return Request.UserHostAddress;
}
----------------------------------------

 public static string GetIPAddress (this HttpRequest Request) {
    if (Request.Headers.Any(h => h.Key.Equals("CF-CONNECTING-IP"))) {
        var header = Request.Headers.FirstOrDefault(h => h.Key.Equals("CF-CONNECTING-IP"));
        return header.Value;
    }
    if (Request.ServerVariables.Any(s => s.Key.Equals("HTTP_X_FORWARDED_FOR"))) {
        var serverVariable = Request.ServerVariables.FirstOrDefault(s => s.Key.Equals("HTTP_X_FORWARDED_FOR"));
        return serverVariable.Value;
    }
    return Request.UserHostAddress;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
174
5
Gpt3D_Clone174_5.cs 1 7
Gpt3D_Clone174_5.cs 8 16
----------------------------------------

public static string GetIPAddress (this HttpRequest Request) {
    if (Request.Headers ["CF-CONNECTING-IP"] != null)
        return Request.Headers ["CF-CONNECTING-IP"].ToString ();
    if (Request.ServerVariables ["HTTP_X_FORWARDED_FOR"] != null)
        return Request.ServerVariables ["HTTP_X_FORWARDED_FOR"].ToString ();
    return Request.UserHostAddress;
}
----------------------------------------

 public static string GetIPAddress (this HttpRequest Request) {
    if (Request.Headers.ContainsKey("CF-CONNECTING-IP"))
        return Request.Headers ["CF-CONNECTING-IP"];
    if (Request.ServerVariables.ContainsKey("HTTP_X_FORWARDED_FOR"))
        return Request.ServerVariables ["HTTP_X_FORWARDED_FOR"];
    return Request.UserHostAddress;
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
174
6
Gpt3D_Clone174_6.cs 1 7
Gpt3D_Clone174_6.cs 8 16
----------------------------------------

public static string GetIPAddress (this HttpRequest Request) {
    if (Request.Headers ["CF-CONNECTING-IP"] != null)
        return Request.Headers ["CF-CONNECTING-IP"].ToString ();
    if (Request.ServerVariables ["HTTP_X_FORWARDED_FOR"] != null)
        return Request.ServerVariables ["HTTP_X_FORWARDED_FOR"].ToString ();
    return Request.UserHostAddress;
}
----------------------------------------

 public static string GetIPAddress (this HttpRequest Request) {
    if (Request.Headers.TryGetValue("CF-CONNECTING-IP", out string CF_CONNECTING_IP) && !String.IsNullOrWhiteSpace(CF_CONNECTING_IP))
        return CF_CONNECTING_IP;
    if (Request.ServerVariables.TryGetValue("HTTP_X_FORWARDED_FOR", out string HTTP_X_FORWARDED_FOR) && !String.IsNullOrWhiteSpace(HTTP_X_FORWARDED_FOR))
        return HTTP_X_FORWARDED_FOR;
    return Request.UserHostAddress;
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
174
7
Gpt3D_Clone174_7.cs 1 7
Gpt3D_Clone174_7.cs 8 16
----------------------------------------

public static string GetIPAddress (this HttpRequest Request) {
    if (Request.Headers ["CF-CONNECTING-IP"] != null)
        return Request.Headers ["CF-CONNECTING-IP"].ToString ();
    if (Request.ServerVariables ["HTTP_X_FORWARDED_FOR"] != null)
        return Request.ServerVariables ["HTTP_X_FORWARDED_FOR"].ToString ();
    return Request.UserHostAddress;
}
----------------------------------------

 public static string GetIPAddress (this HttpRequest Request) {
    if (Request.Headers.TryGetValue("CF-CONNECTING-IP", out string CF_CONNECTING_IP))
        return CF_CONNECTING_IP;
    if (Request.ServerVariables.TryGetValue("HTTP_X_FORWARDED_FOR", out string HTTP_X_FORWARDED_FOR))
        return HTTP_X_FORWARDED_FOR;
    return Request.UserHostAddress;
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
176
0
Gpt3D_Clone176_0.cs 1 12
Gpt3D_Clone176_0.cs 13 59
----------------------------------------

static void Main () {
    var moCollection = new ManagementClass ("Win32_LogicalDisk").GetInstances ();
    foreach (var mo in moCollection) {
        if (mo ["DeviceID"] != null && mo ["DriveType"] != null && mo ["Size"] != null && mo ["FreeSpace"] != null) {
            if (Convert.ToInt32 (mo ["DriveType"]) == 3) {
                Console.WriteLine ("Drive {0}", mo ["DeviceID"]);
                Console.WriteLine ("Size {0} bytes", mo ["Size"]);
                Console.WriteLine ("Free {0} bytes", mo ["FreeSpace"]);
            }
        }
    }
}
----------------------------------------

 using System;
    using System.Management;
    using System.Collections;
    using System.Xml;
    using Microsoft.Win32;
    class ManagementClassExample
    {
        public static void main()
        {
            XmlDocument moCollection = new XmlDocument();
            using (ManagementClass winLogicalDisk = 
                new ManagementClass("Win32_LogicalDisk"))
            {
                moCollection.LoadXml(winLogicalDisk.GetText(
                    System.Management.TextFormat.Mof));
            }
            foreach (XmlNode node in moCollection.SelectNodes(
                "/Mapping/Class/Instance"))
            {
                var data = new Hashtable();
                foreach (XmlNode propertyNode in node.SelectNodes("Property"))
                {
                    data.Add(propertyNode.Attributes["Name"].Value, 
                        propertyNode.InnerText);
                }
                if (data["DeviceID"] != null && data["DriveType"] != null && 
                    data["Size"] != null && data["FreeSpace"] != null)
                {
                    if (Convert.ToInt32(data["DriveType"]) == 3)
                    {
                        Console.WriteLine("Drive {0}",
                            data["DeviceID"]);
                        Console.WriteLine("Size {0} bytes",
                            data["Size"]);
                        Console.WriteLine("Free {0} bytes",
                            data["FreeSpace"]);
                    }
                }
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
176
1
Gpt3D_Clone176_1.cs 1 12
Gpt3D_Clone176_1.cs 13 55
----------------------------------------

static void Main () {
    var moCollection = new ManagementClass ("Win32_LogicalDisk").GetInstances ();
    foreach (var mo in moCollection) {
        if (mo ["DeviceID"] != null && mo ["DriveType"] != null && mo ["Size"] != null && mo ["FreeSpace"] != null) {
            if (Convert.ToInt32 (mo ["DriveType"]) == 3) {
                Console.WriteLine ("Drive {0}", mo ["DeviceID"]);
                Console.WriteLine ("Size {0} bytes", mo ["Size"]);
                Console.WriteLine ("Free {0} bytes", mo ["FreeSpace"]);
            }
        }
    }
}
----------------------------------------

 using System;
    using System.Management;
    using System.Collections.Generic;
    using System.Data.SqlClient;
    using Microsoft.Win32;
    class ManagementClassExample
    {
        public static void main()
        {
            List<ManagementObject> moCollection = new List<ManagementObject>();
            using (ManagementClass winLogicalDisk = 
                new ManagementClass("Win32_LogicalDisk"))
            {
                SqlDataReader reader = winLogicalDisk.ExecuteReader();
                while (reader.Read())
                {
                    ManagementObject mo = 
                        new ManagementObject(reader);
                    moCollection.Add(mo);
                }
            }
            foreach (ManagementObject mo in moCollection)
            {
                if (mo["DeviceID"] != null && mo["DriveType"] != null && 
                    mo["Size"] != null && mo["FreeSpace"] != null)
                {
                    if (Convert.ToInt32(mo["DriveType"]) == 3)
                    {
                        Console.WriteLine("Drive {0}",
                            mo["DeviceID"]);
                        Console.WriteLine("Size {0} bytes",
                            mo["Size"]);
                        Console.WriteLine("Free {0} bytes",
                            mo["FreeSpace"]);
                    }
                }
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
176
2
Gpt3D_Clone176_2.cs 1 12
Gpt3D_Clone176_2.cs 13 197
----------------------------------------

static void Main () {
    var moCollection = new ManagementClass ("Win32_LogicalDisk").GetInstances ();
    foreach (var mo in moCollection) {
        if (mo ["DeviceID"] != null && mo ["DriveType"] != null && mo ["Size"] != null && mo ["FreeSpace"] != null) {
            if (Convert.ToInt32 (mo ["DriveType"]) == 3) {
                Console.WriteLine ("Drive {0}", mo ["DeviceID"]);
                Console.WriteLine ("Size {0} bytes", mo ["Size"]);
                Console.WriteLine ("Free {0} bytes", mo ["FreeSpace"]);
            }
        }
    }
}
----------------------------------------

  using System;
    using System.Management;
    using System.Collections;
    using Microsoft.Win32;
    class ManagementClassExample
    {
        public static void main()
        {
            ManagementClass winLogicalDisk = new ManagementClass("Win32_LogicalDisk");
            ObjectQuery oq = new ObjectQuery(
                "SELECT * FROM Win32_LogicalDisk");
            ManagementObjectSearcher query = 
                new ManagementObjectSearcher(winLogicalDisk, oq);
            foreach (ManagementObject mo in query.Get())
            {
                if (mo["DeviceID"] != null && mo["DriveType"] != null && 
                    mo["Size"] != null && mo["FreeSpace"] != null)
                {
                    if (Convert.ToInt32(mo["DriveType"]) == 3)
                    {
                        Console.WriteLine("Drive {0}",
                            mo["DeviceID"]);
                        Console.WriteLine("Size {0} bytes",
                            mo["Size"]);
                        Console.WriteLine("Free {0} bytes",
                            mo["FreeSpace"]);
                    }
                }
            }
        }
    }
  using System;
    using System.Management;
    using System.Collections.Generic;
    using Microsoft.Win32;
    class ManagementClassExample
    {
        public static void main()
        {
            List<ManagementObject> moCollection = new List<ManagementObject>();
            using (ManagementClass winLogicalDisk = 
                new ManagementClass("Win32_LogicalDisk"))
            {
                foreach (ManagementObject mo in 
                    winLogicalDisk.GetInstances())
                {
                    moCollection.Add(mo);
                }
            }
            foreach (ManagementObject mo in moCollection)
            {
                if (mo["DeviceID"] != null && mo["DriveType"] != null && 
                    mo["Size"] != null && mo["FreeSpace"] != null)
                {
                    if (Convert.ToInt32(mo["DriveType"]) == 3)
                    {
                        Console.WriteLine("Drive {0}",
                            mo["DeviceID"]);
                        Console.WriteLine("Size {0} bytes",
                            mo["Size"]);
                        Console.WriteLine("Free {0} bytes",
                            mo["FreeSpace"]);
                    }
                }
            }
        }
    }
 using System;
    using System.Management;
    using System.Linq;
    class ManagementClassExample
    {
        public static void main()
        {
            var winLogicalDisk = new ManagementClass("Win32_LogicalDisk");
            var moCollection = winLogicalDisk.GetInstances();
            foreach (var mo in moCollection.OfType<ManagementObject>())
            {
                if (mo["DeviceID"] != null && mo["DriveType"] != null && 
                    mo["Size"] != null && mo["FreeSpace"] != null)
                {
                    if (Convert.ToInt32(mo["DriveType"]) == 3)
                    {
                        Console.WriteLine("Drive {0}",
                            mo["DeviceID"]);
                        Console.WriteLine("Size {0} bytes",
                            mo["Size"]);
                        Console.WriteLine("Free {0} bytes",
                            mo["FreeSpace"]);
                    }
                }
            }
        }
    }
  using System;
    using System.Management;
    using System.Collections.Generic;
    using System.Diagnostics;
    using Microsoft.Win32;
    class ManagementClassExample
    {
        public static void main()
        {
            List<ManagementObject> moCollection = new List<ManagementObject>();
            using (ManagementClass winLogicalDisk = 
                new ManagementClass("Win32_LogicalDisk"))
            {
                moCollection = 
                    winLogicalDisk.GetInstances().Cast<ManagementObject>
                        ().ToList();
            }
            foreach (ManagementObject mo in moCollection)
            {
                if (mo["DeviceID"] != null && mo["DriveType"] != null && 
                    mo["Size"] != null && mo["FreeSpace"] != null)
                {
                    if (Convert.ToInt32(mo["DriveType"]) == 3)
                    {
                        Console.WriteLine("Drive {0}",
                            mo["DeviceID"]);
                        Console.WriteLine("Size {0} bytes",
                            mo["Size"]);
                        Console.WriteLine("Free {0} bytes",
                            mo["FreeSpace"]);
                    }
                }
            }
        }
    }
  using System;
    using System.Management;
    using System.Collections.Generic;
    using System.Data;
    using Microsoft.Win32;
    class ManagementClassExample
    {
        public static void main()
        {
            DataTable moCollection = 
                new DataTable("Win32_LogicalDisk");
            ManagementObjectSearcher query = 
                new ManagementObjectSearcher("SELECT * FROM Win32_LogicalDisk");
            foreach (ManagementObject mo in query.Get())
            {
                moCollection.Rows.Add(mo["DeviceID"], mo["DriveType"], 
                    mo["Size"], mo["FreeSpace"]);
            }
            foreach (DataRow row in moCollection.Rows)
            {
                if (row["DeviceID"] != null && row["DriveType"] != null && 
                    row["Size"] != null && row["FreeSpace"] != null)
                {
                    if (Convert.ToInt32(row["DriveType"]) == 3)
                    {
                        Console.WriteLine("Drive {0}",
                            row["DeviceID"]);
                        Console.WriteLine("Size {0} bytes",
                            row["Size"]);
                        Console.WriteLine("Free {0} bytes",
                            row["FreeSpace"]);
                    }
                }
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
176
3
Gpt3D_Clone176_3.cs 1 12
Gpt3D_Clone176_3.cs 13 197
----------------------------------------

static void Main () {
    var moCollection = new ManagementClass ("Win32_LogicalDisk").GetInstances ();
    foreach (var mo in moCollection) {
        if (mo ["DeviceID"] != null && mo ["DriveType"] != null && mo ["Size"] != null && mo ["FreeSpace"] != null) {
            if (Convert.ToInt32 (mo ["DriveType"]) == 3) {
                Console.WriteLine ("Drive {0}", mo ["DeviceID"]);
                Console.WriteLine ("Size {0} bytes", mo ["Size"]);
                Console.WriteLine ("Free {0} bytes", mo ["FreeSpace"]);
            }
        }
    }
}
----------------------------------------

  using System;
    using System.Management;
    using System.Collections;
    using Microsoft.Win32;
    class ManagementClassExample
    {
        public static void main()
        {
            ManagementClass winLogicalDisk = new ManagementClass("Win32_LogicalDisk");
            ObjectQuery oq = new ObjectQuery(
                "SELECT * FROM Win32_LogicalDisk");
            ManagementObjectSearcher query = 
                new ManagementObjectSearcher(winLogicalDisk, oq);
            foreach (ManagementObject mo in query.Get())
            {
                if (mo["DeviceID"] != null && mo["DriveType"] != null && 
                    mo["Size"] != null && mo["FreeSpace"] != null)
                {
                    if (Convert.ToInt32(mo["DriveType"]) == 3)
                    {
                        Console.WriteLine("Drive {0}",
                            mo["DeviceID"]);
                        Console.WriteLine("Size {0} bytes",
                            mo["Size"]);
                        Console.WriteLine("Free {0} bytes",
                            mo["FreeSpace"]);
                    }
                }
            }
        }
    }
  using System;
    using System.Management;
    using System.Collections.Generic;
    using Microsoft.Win32;
    class ManagementClassExample
    {
        public static void main()
        {
            List<ManagementObject> moCollection = new List<ManagementObject>();
            using (ManagementClass winLogicalDisk = 
                new ManagementClass("Win32_LogicalDisk"))
            {
                foreach (ManagementObject mo in 
                    winLogicalDisk.GetInstances())
                {
                    moCollection.Add(mo);
                }
            }
            foreach (ManagementObject mo in moCollection)
            {
                if (mo["DeviceID"] != null && mo["DriveType"] != null && 
                    mo["Size"] != null && mo["FreeSpace"] != null)
                {
                    if (Convert.ToInt32(mo["DriveType"]) == 3)
                    {
                        Console.WriteLine("Drive {0}",
                            mo["DeviceID"]);
                        Console.WriteLine("Size {0} bytes",
                            mo["Size"]);
                        Console.WriteLine("Free {0} bytes",
                            mo["FreeSpace"]);
                    }
                }
            }
        }
    }
 using System;
    using System.Management;
    using System.Linq;
    class ManagementClassExample
    {
        public static void main()
        {
            var winLogicalDisk = new ManagementClass("Win32_LogicalDisk");
            var moCollection = winLogicalDisk.GetInstances();
            foreach (var mo in moCollection.OfType<ManagementObject>())
            {
                if (mo["DeviceID"] != null && mo["DriveType"] != null && 
                    mo["Size"] != null && mo["FreeSpace"] != null)
                {
                    if (Convert.ToInt32(mo["DriveType"]) == 3)
                    {
                        Console.WriteLine("Drive {0}",
                            mo["DeviceID"]);
                        Console.WriteLine("Size {0} bytes",
                            mo["Size"]);
                        Console.WriteLine("Free {0} bytes",
                            mo["FreeSpace"]);
                    }
                }
            }
        }
    }
  using System;
    using System.Management;
    using System.Collections.Generic;
    using System.Diagnostics;
    using Microsoft.Win32;
    class ManagementClassExample
    {
        public static void main()
        {
            List<ManagementObject> moCollection = new List<ManagementObject>();
            using (ManagementClass winLogicalDisk = 
                new ManagementClass("Win32_LogicalDisk"))
            {
                moCollection = 
                    winLogicalDisk.GetInstances().Cast<ManagementObject>
                        ().ToList();
            }
            foreach (ManagementObject mo in moCollection)
            {
                if (mo["DeviceID"] != null && mo["DriveType"] != null && 
                    mo["Size"] != null && mo["FreeSpace"] != null)
                {
                    if (Convert.ToInt32(mo["DriveType"]) == 3)
                    {
                        Console.WriteLine("Drive {0}",
                            mo["DeviceID"]);
                        Console.WriteLine("Size {0} bytes",
                            mo["Size"]);
                        Console.WriteLine("Free {0} bytes",
                            mo["FreeSpace"]);
                    }
                }
            }
        }
    }
  using System;
    using System.Management;
    using System.Collections.Generic;
    using System.Data;
    using Microsoft.Win32;
    class ManagementClassExample
    {
        public static void main()
        {
            DataTable moCollection = 
                new DataTable("Win32_LogicalDisk");
            ManagementObjectSearcher query = 
                new ManagementObjectSearcher("SELECT * FROM Win32_LogicalDisk");
            foreach (ManagementObject mo in query.Get())
            {
                moCollection.Rows.Add(mo["DeviceID"], mo["DriveType"], 
                    mo["Size"], mo["FreeSpace"]);
            }
            foreach (DataRow row in moCollection.Rows)
            {
                if (row["DeviceID"] != null && row["DriveType"] != null && 
                    row["Size"] != null && row["FreeSpace"] != null)
                {
                    if (Convert.ToInt32(row["DriveType"]) == 3)
                    {
                        Console.WriteLine("Drive {0}",
                            row["DeviceID"]);
                        Console.WriteLine("Size {0} bytes",
                            row["Size"]);
                        Console.WriteLine("Free {0} bytes",
                            row["FreeSpace"]);
                    }
                }
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
176
5
Gpt3D_Clone176_5.cs 1 12
Gpt3D_Clone176_5.cs 13 49
----------------------------------------

static void Main () {
    var moCollection = new ManagementClass ("Win32_LogicalDisk").GetInstances ();
    foreach (var mo in moCollection) {
        if (mo ["DeviceID"] != null && mo ["DriveType"] != null && mo ["Size"] != null && mo ["FreeSpace"] != null) {
            if (Convert.ToInt32 (mo ["DriveType"]) == 3) {
                Console.WriteLine ("Drive {0}", mo ["DeviceID"]);
                Console.WriteLine ("Size {0} bytes", mo ["Size"]);
                Console.WriteLine ("Free {0} bytes", mo ["FreeSpace"]);
            }
        }
    }
}
----------------------------------------

  using System;
    using System.Management;
    using System.IO;
    using Microsoft.Win32;
    class ManagementClassExample
    {
        public static void main()
        {
            using (ManagementClass winLogicalDisk = 
                new ManagementClass("Win32_LogicalDisk"))
            {
                using (var moCollection =
                    winLogicalDisk.GetInstances())
                {
                    foreach (var mo in moCollection.OfType<ManagementObject>())
                    {
                        if (mo["DeviceID"] != null && mo["DriveType"] != null && 
                            mo["Size"] != null && mo["FreeSpace"] != null)
                        {
                            if (Convert.ToInt32(mo["DriveType"]) == 3)
                            {
                                Console.WriteLine("Drive {0}",
                                    mo["DeviceID"]);
                                Console.WriteLine("Size {0} bytes",
                                    mo["Size"]);
                                Console.WriteLine("Free {0} bytes",
                                    mo["FreeSpace"]);
                            }
                        }
                    }
                }
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
176
7
Gpt3D_Clone176_7.cs 1 12
Gpt3D_Clone176_7.cs 13 197
----------------------------------------

static void Main () {
    var moCollection = new ManagementClass ("Win32_LogicalDisk").GetInstances ();
    foreach (var mo in moCollection) {
        if (mo ["DeviceID"] != null && mo ["DriveType"] != null && mo ["Size"] != null && mo ["FreeSpace"] != null) {
            if (Convert.ToInt32 (mo ["DriveType"]) == 3) {
                Console.WriteLine ("Drive {0}", mo ["DeviceID"]);
                Console.WriteLine ("Size {0} bytes", mo ["Size"]);
                Console.WriteLine ("Free {0} bytes", mo ["FreeSpace"]);
            }
        }
    }
}
----------------------------------------

  using System;
    using System.Management;
    using System.Collections;
    using Microsoft.Win32;
    class ManagementClassExample
    {
        public static void main()
        {
            ManagementClass winLogicalDisk = new ManagementClass("Win32_LogicalDisk");
            ObjectQuery oq = new ObjectQuery(
                "SELECT * FROM Win32_LogicalDisk");
            ManagementObjectSearcher query = 
                new ManagementObjectSearcher(winLogicalDisk, oq);
            foreach (ManagementObject mo in query.Get())
            {
                if (mo["DeviceID"] != null && mo["DriveType"] != null && 
                    mo["Size"] != null && mo["FreeSpace"] != null)
                {
                    if (Convert.ToInt32(mo["DriveType"]) == 3)
                    {
                        Console.WriteLine("Drive {0}",
                            mo["DeviceID"]);
                        Console.WriteLine("Size {0} bytes",
                            mo["Size"]);
                        Console.WriteLine("Free {0} bytes",
                            mo["FreeSpace"]);
                    }
                }
            }
        }
    }
  using System;
    using System.Management;
    using System.Collections.Generic;
    using Microsoft.Win32;
    class ManagementClassExample
    {
        public static void main()
        {
            List<ManagementObject> moCollection = new List<ManagementObject>();
            using (ManagementClass winLogicalDisk = 
                new ManagementClass("Win32_LogicalDisk"))
            {
                foreach (ManagementObject mo in 
                    winLogicalDisk.GetInstances())
                {
                    moCollection.Add(mo);
                }
            }
            foreach (ManagementObject mo in moCollection)
            {
                if (mo["DeviceID"] != null && mo["DriveType"] != null && 
                    mo["Size"] != null && mo["FreeSpace"] != null)
                {
                    if (Convert.ToInt32(mo["DriveType"]) == 3)
                    {
                        Console.WriteLine("Drive {0}",
                            mo["DeviceID"]);
                        Console.WriteLine("Size {0} bytes",
                            mo["Size"]);
                        Console.WriteLine("Free {0} bytes",
                            mo["FreeSpace"]);
                    }
                }
            }
        }
    }
 using System;
    using System.Management;
    using System.Linq;
    class ManagementClassExample
    {
        public static void main()
        {
            var winLogicalDisk = new ManagementClass("Win32_LogicalDisk");
            var moCollection = winLogicalDisk.GetInstances();
            foreach (var mo in moCollection.OfType<ManagementObject>())
            {
                if (mo["DeviceID"] != null && mo["DriveType"] != null && 
                    mo["Size"] != null && mo["FreeSpace"] != null)
                {
                    if (Convert.ToInt32(mo["DriveType"]) == 3)
                    {
                        Console.WriteLine("Drive {0}",
                            mo["DeviceID"]);
                        Console.WriteLine("Size {0} bytes",
                            mo["Size"]);
                        Console.WriteLine("Free {0} bytes",
                            mo["FreeSpace"]);
                    }
                }
            }
        }
    }
  using System;
    using System.Management;
    using System.Collections.Generic;
    using System.Diagnostics;
    using Microsoft.Win32;
    class ManagementClassExample
    {
        public static void main()
        {
            List<ManagementObject> moCollection = new List<ManagementObject>();
            using (ManagementClass winLogicalDisk = 
                new ManagementClass("Win32_LogicalDisk"))
            {
                moCollection = 
                    winLogicalDisk.GetInstances().Cast<ManagementObject>
                        ().ToList();
            }
            foreach (ManagementObject mo in moCollection)
            {
                if (mo["DeviceID"] != null && mo["DriveType"] != null && 
                    mo["Size"] != null && mo["FreeSpace"] != null)
                {
                    if (Convert.ToInt32(mo["DriveType"]) == 3)
                    {
                        Console.WriteLine("Drive {0}",
                            mo["DeviceID"]);
                        Console.WriteLine("Size {0} bytes",
                            mo["Size"]);
                        Console.WriteLine("Free {0} bytes",
                            mo["FreeSpace"]);
                    }
                }
            }
        }
    }
  using System;
    using System.Management;
    using System.Collections.Generic;
    using System.Data;
    using Microsoft.Win32;
    class ManagementClassExample
    {
        public static void main()
        {
            DataTable moCollection = 
                new DataTable("Win32_LogicalDisk");
            ManagementObjectSearcher query = 
                new ManagementObjectSearcher("SELECT * FROM Win32_LogicalDisk");
            foreach (ManagementObject mo in query.Get())
            {
                moCollection.Rows.Add(mo["DeviceID"], mo["DriveType"], 
                    mo["Size"], mo["FreeSpace"]);
            }
            foreach (DataRow row in moCollection.Rows)
            {
                if (row["DeviceID"] != null && row["DriveType"] != null && 
                    row["Size"] != null && row["FreeSpace"] != null)
                {
                    if (Convert.ToInt32(row["DriveType"]) == 3)
                    {
                        Console.WriteLine("Drive {0}",
                            row["DeviceID"]);
                        Console.WriteLine("Size {0} bytes",
                            row["Size"]);
                        Console.WriteLine("Free {0} bytes",
                            row["FreeSpace"]);
                    }
                }
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
17
4
Gpt3D_Clone17_4.cs 1 13
Gpt3D_Clone17_4.cs 14 31
----------------------------------------

void comboboxrefresh () {
    cnn.Open ();
    SqlCommand cmd = new SqlCommand ("SELECT EmployeeID,EmployeeFirstName,EmployeeLastName FROM Employees", cnn);
    SqlDataReader dr = cmd.ExecuteReader ();
    if (dr.HasRows) {
        combobox1.ValueMember = "Id";
        combobox1.DisplayMember = "FullName";
        while (dr.Read ()) {
            comboBox1.Items.Add (new {FullName = dr.GetString (1) + " " + dr.GetString (2), Id = dr.GetInt32 (0)});
        }
    }
    cnn.Close ();
}
----------------------------------------

 void comboboxrefresh()
{
    cnn.Open();
    SqlCommand cmd = new SqlCommand("SELECT EmployeeID,EmployeeFirstName,EmployeeLastName FROM Employees", cnn);
    SqlDataReader dr = cmd.ExecuteReader();
    if (dr.HasRows)
    {
        DataTable dtEmployees = new DataTable();
        dtEmployees.Load(dr);
        DataView dvEmployees = dtEmployees.DefaultView;
        combobox1.DataSource = dvEmployees;
        combobox1.ValueMember = dtEmployees.Columns[0].ColumnName;
        combobox1.DisplayMember = dtEmployees.Columns[1].ColumnName + " " + dtEmployees.Columns[2].ColumnName;
    }
    cnn.Close();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
17
6
Gpt3D_Clone17_6.cs 1 13
Gpt3D_Clone17_6.cs 14 28
----------------------------------------

void comboboxrefresh () {
    cnn.Open ();
    SqlCommand cmd = new SqlCommand ("SELECT EmployeeID,EmployeeFirstName,EmployeeLastName FROM Employees", cnn);
    SqlDataReader dr = cmd.ExecuteReader ();
    if (dr.HasRows) {
        combobox1.ValueMember = "Id";
        combobox1.DisplayMember = "FullName";
        while (dr.Read ()) {
            comboBox1.Items.Add (new {FullName = dr.GetString (1) + " " + dr.GetString (2), Id = dr.GetInt32 (0)});
        }
    }
    cnn.Close ();
}
----------------------------------------

 void comboboxrefresh()
{
    cnn.Open(); 
    SqlCommand cmd = new SqlCommand("SELECT EmployeeID,EmployeeFirstName,EmployeeLastName FROM Employees", cnn);
    SqlDataAdapter sda = new SqlDataAdapter(); 
    sda.SelectCommand = cmd;    
    DataTable dt = new DataTable();
    sda.Fill(dt);
    combobox1.DataSource = dt;
    combobox1.ValueMember = "EmployeeID";
    combobox1.DisplayMember = "EmployeeFirstName" + " " + "EmployeeLastName"; 
    cnn.Close();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
180
0
Gpt3D_Clone180_0.cs 1 21
Gpt3D_Clone180_0.cs 22 54
----------------------------------------

protected void Button1_Click (object sender, EventArgs e) {
    try {
        using (var conn = new SqlConnection (ConfigurationManager.ConnectionStrings ["RegistrationConnectionString"].ConnectionString))
        {
            using (var cmd = new SqlCommand ("spCheckUsernameForAnswer", conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add (new SqlParameter ("@username", TextBoxUN.Text));
                conn.Open ();
                var returnCode = Convert.ToInt32 (cmd.ExecuteScalar ());
                if (returnCode == 1) {
                    Label1.Text = "Username found";
                } else {
                    Label1.Text = "not found";
                    Register ();
                }
            }}}
    catch (Exception ex) {
        Response.Write ("Error:" + ex.ToString ());
    }
}
----------------------------------------

#3 
protected void Button1_Click (object sender, EventArgs e) {
    int code = -1;
    try {
        using (var conn = new SqlConnection (ConfigurationManager.ConnectionStrings ["RegistrationConnectionString"].ConnectionString))
        {
            using (var cmd = new SqlCommand ("spCheckUsernameForAnswer", conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add (new SqlParameter ("@username", TextBoxUN.Text));
                conn.Open ();
                code = cmd.ExecuteNonQuery ();
            }}
    }
    catch (Exception ex) {
        Response.Write ("Error:" + ex.ToString ());
    }
    
    switch (code) {
        case -1:
            Response.Write ("No username found");
            break;
        case 0:
            Response.Write ("Not Found");
            Register ();
            break;
        default:
            Label1.Text = "Username found";
            break;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
186
2
Gpt3D_Clone186_2.cs 1 20
Gpt3D_Clone186_2.cs 21 37
----------------------------------------

static void Main (string [] args) {
    int integerSum = 0;
    int count = 0;
    while (true) {
        Console.WriteLine ("Please enter Integer {0} now.", (count + 1));
        string rawInput = Console.ReadLine ();
        int integerInput;
        bool isInteger = int.TryParse (rawInput, out integerInput);
        if (isInteger == false) {
            Console.WriteLine ("This is not a valid integer. Please enter a valid integer now:");
        } else {
            integerSum += integerInput;
            count ++;
        }
        if (count >= 5) {
            break;
        }
    }
    Console.WriteLine ("sum = " + integerSum);
}
----------------------------------------

  static void Main (string [] args) {
    int integerSum = 0;
    for (int i = 1; i <= 5; i++) {
        Console.WriteLine ("Please enter Integer {0} now.", i);
        string rawInput = Console.ReadLine ();
        int integerInput;
        if (int.TryParse (rawInput, out integerInput) == false) {
            Console.WriteLine ("This is not a valid integer. Please enter a valid integer now:");
            i--;
        } else {
            integerSum += integerInput;
        }
    }
    Console.WriteLine ("sum = " + integerSum);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
186
3
Gpt3D_Clone186_3.cs 1 20
Gpt3D_Clone186_3.cs 21 36
----------------------------------------

static void Main (string [] args) {
    int integerSum = 0;
    int count = 0;
    while (true) {
        Console.WriteLine ("Please enter Integer {0} now.", (count + 1));
        string rawInput = Console.ReadLine ();
        int integerInput;
        bool isInteger = int.TryParse (rawInput, out integerInput);
        if (isInteger == false) {
            Console.WriteLine ("This is not a valid integer. Please enter a valid integer now:");
        } else {
            integerSum += integerInput;
            count ++;
        }
        if (count >= 5) {
            break;
        }
    }
    Console.WriteLine ("sum = " + integerSum);
}
----------------------------------------

  static void Main (string [] args) {
    int integerSum = 0;
    while (integerSum != 5) {
        Console.WriteLine ("Please enter Integer now.");
        string rawInput = Console.ReadLine ();
        int integerInput;
        if (int.TryParse (rawInput, out integerInput) == false) {
            Console.WriteLine ("This is not a valid integer. Please enter a valid integer now:");
        } else {
            integerSum += integerInput;
        }
    }
    Console.WriteLine ("sum = " + integerSum);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
186
4
Gpt3D_Clone186_4.cs 1 20
Gpt3D_Clone186_4.cs 21 36
----------------------------------------

static void Main (string [] args) {
    int integerSum = 0;
    int count = 0;
    while (true) {
        Console.WriteLine ("Please enter Integer {0} now.", (count + 1));
        string rawInput = Console.ReadLine ();
        int integerInput;
        bool isInteger = int.TryParse (rawInput, out integerInput);
        if (isInteger == false) {
            Console.WriteLine ("This is not a valid integer. Please enter a valid integer now:");
        } else {
            integerSum += integerInput;
            count ++;
        }
        if (count >= 5) {
            break;
        }
    }
    Console.WriteLine ("sum = " + integerSum);
}
----------------------------------------

  static void Main (string [] args) {
    int integerSum = 0;
    for (int i = 0; i < 5; i++) {
        Console.WriteLine ("Please enter Integer {0} now.", (i + 1));
        string rawInput = Console.ReadLine ();
        int integerInput;
        while (int.TryParse (rawInput, out integerInput) == false) {
            Console.WriteLine ("This is not a valid integer. Please enter a valid integer now:");
            rawInput = Console.ReadLine ();
        }
        integerSum += integerInput;
    }
    Console.WriteLine ("sum = " + integerSum);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
188
1
Gpt3D_Clone188_1.cs 1 10
Gpt3D_Clone188_1.cs 11 26
----------------------------------------

public static void CopyTo (this Stream src, Stream dest) {
    int size = (src.CanSeek) ? Math.Min ((int) (src.Length - src.Position), 0x2000) : 0x2000;
    byte [] buffer = new byte [size];
    int n;
    do
        {
            n = src.Read (buffer, 0, buffer.Length);
            dest.Write (buffer, 0, n);
        } while (n != 0);
}
----------------------------------------

 public static void CopyTo (this Stream src, Stream dest) {
    int size;
    if (src.CanSeek) 
        size = Math.Min((int) (src.Length - src.Position), 0x2000);
    else
        size = 0x2000;
    byte [] buffer = new byte [size];
    for(;;)
    {
        int n = src.Read(buffer, 0, buffer.Length);
        if(n == 0) break;
        dest.Write (buffer, 0, n);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
188
2
Gpt3D_Clone188_2.cs 1 10
Gpt3D_Clone188_2.cs 11 24
----------------------------------------

public static void CopyTo (this Stream src, Stream dest) {
    int size = (src.CanSeek) ? Math.Min ((int) (src.Length - src.Position), 0x2000) : 0x2000;
    byte [] buffer = new byte [size];
    int n;
    do
        {
            n = src.Read (buffer, 0, buffer.Length);
            dest.Write (buffer, 0, n);
        } while (n != 0);
}
----------------------------------------

 public static void CopyTo (this Stream src, Stream dest) {
    int size = 0x2000;
    if (src.CanSeek) 
        size = Math.Max((int) (src.Length - src.Position), 0x2000);
    byte [] buffer = new byte [size];
    while (true) 
    {
        int n = src.Read (buffer, 0, buffer.Length);
        if(n <= 0) break;
        dest.Write (buffer, 0, n);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
188
3
Gpt3D_Clone188_3.cs 1 10
Gpt3D_Clone188_3.cs 11 22
----------------------------------------

public static void CopyTo (this Stream src, Stream dest) {
    int size = (src.CanSeek) ? Math.Min ((int) (src.Length - src.Position), 0x2000) : 0x2000;
    byte [] buffer = new byte [size];
    int n;
    do
        {
            n = src.Read (buffer, 0, buffer.Length);
            dest.Write (buffer, 0, n);
        } while (n != 0);
}
----------------------------------------

 public static void CopyTo (this Stream src, Stream dest) {
    int size = (src.CanSeek) ? Math.Max ((int) (src.Length - src.Position), 0x1000) : 0x1000;
    byte [] buffer = new byte [size];
    while (true) 
    {
        int n = src.Read (buffer, 0, buffer.Length);
        if(n == 0) break;
        dest.Write (buffer, 0, buffer.Length);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
188
4
Gpt3D_Clone188_4.cs 1 10
Gpt3D_Clone188_4.cs 11 20
----------------------------------------

public static void CopyTo (this Stream src, Stream dest) {
    int size = (src.CanSeek) ? Math.Min ((int) (src.Length - src.Position), 0x2000) : 0x2000;
    byte [] buffer = new byte [size];
    int n;
    do
        {
            n = src.Read (buffer, 0, buffer.Length);
            dest.Write (buffer, 0, n);
        } while (n != 0);
}
----------------------------------------

 public static void CopyTo (this Stream src, Stream dest) {
    int size = (src.CanSeek) ? Math.Min ((int) (src.Length - src.Position), 0x1000) : 0x1000;
    byte [] buffer = new byte [size];
    while (src.Read (buffer, 0, buffer.Length) > 0) 
    {
        dest.Write (buffer, 0, buffer.Length);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
188
5
Gpt3D_Clone188_5.cs 1 10
Gpt3D_Clone188_5.cs 11 18
----------------------------------------

public static void CopyTo (this Stream src, Stream dest) {
    int size = (src.CanSeek) ? Math.Min ((int) (src.Length - src.Position), 0x2000) : 0x2000;
    byte [] buffer = new byte [size];
    int n;
    do
        {
            n = src.Read (buffer, 0, buffer.Length);
            dest.Write (buffer, 0, n);
        } while (n != 0);
}
----------------------------------------

 public static void CopyTo (this Stream src, Stream dest) {
    int size = (src.CanSeek) ? Math.Min ((int) (src.Length - src.Position), 0x8000) : 0x8000;
    byte [] buffer = new byte [size];
    int n = src.Read(buffer, 0, buffer.Length);
    dest.Write (buffer, 0, n);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
190
0
Gpt3D_Clone190_0.cs 1 10
Gpt3D_Clone190_0.cs 11 22
----------------------------------------

protected virtual void Dispose (bool disposing) {
    if (! _disposed) {
        if (disposing) {
            id = 0;
            name = String.Empty;
            pass = String.Empty;
        }
        _disposed = true;
    }
}
----------------------------------------

 protected virtual void Dispose (bool disposing) {
    if ( _disposed == false) {
        if (disposing == true) {
            id = 0;
            name = "";
            pass = "";
        }
        _disposed = true;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
190
3
Gpt3D_Clone190_3.cs 1 10
Gpt3D_Clone190_3.cs 11 20
----------------------------------------

protected virtual void Dispose (bool disposing) {
    if (! _disposed) {
        if (disposing) {
            id = 0;
            name = String.Empty;
            pass = String.Empty;
        }
        _disposed = true;
    }
}
----------------------------------------

 protected virtual void Dispose (bool shouldDispose) {
    if (shouldDispose == true && _disposed == false) {
        id = 0;
        name = "";
        pass = "";
        _disposed = true;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
190
4
Gpt3D_Clone190_4.cs 1 10
Gpt3D_Clone190_4.cs 11 20
----------------------------------------

protected virtual void Dispose (bool disposing) {
    if (! _disposed) {
        if (disposing) {
            id = 0;
            name = String.Empty;
            pass = String.Empty;
        }
        _disposed = true;
    }
}
----------------------------------------

 protected virtual void Dispose (bool shallWeDispose) {
    if (shallWeDispose && ! _disposed) {
        id = 0;
        name = "";
        pass = "";
        _disposed = true;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
190
6
Gpt3D_Clone190_6.cs 1 10
Gpt3D_Clone190_6.cs 11 20
----------------------------------------

protected virtual void Dispose (bool disposing) {
    if (! _disposed) {
        if (disposing) {
            id = 0;
            name = String.Empty;
            pass = String.Empty;
        }
        _disposed = true;
    }
}
----------------------------------------

 protected virtual void Dispose (bool doDispose) {
    if (doDispose == true && _disposed == false) {
        id = 0;
        name = "";
        pass = "";
        _disposed = true;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
190
7
Gpt3D_Clone190_7.cs 1 10
Gpt3D_Clone190_7.cs 11 20
----------------------------------------

protected virtual void Dispose (bool disposing) {
    if (! _disposed) {
        if (disposing) {
            id = 0;
            name = String.Empty;
            pass = String.Empty;
        }
        _disposed = true;
    }
}
----------------------------------------

 protected virtual void Dispose (bool areWeDisposing) {
    if (areWeDisposing == true && _disposed == false) {
        id = 0;
        name = "";
        pass = "";
        _disposed = true;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
190
8
Gpt3D_Clone190_8.cs 1 10
Gpt3D_Clone190_8.cs 11 20
----------------------------------------

protected virtual void Dispose (bool disposing) {
    if (! _disposed) {
        if (disposing) {
            id = 0;
            name = String.Empty;
            pass = String.Empty;
        }
        _disposed = true;
    }
}
----------------------------------------

 protected virtual void Dispose (bool disposing) {
    if (_disposed == false && disposing == true) {
        id = 0;
        name = "";
        pass = "";
        _disposed = true;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
190
9
Gpt3D_Clone190_9.cs 1 10
Gpt3D_Clone190_9.cs 11 20
----------------------------------------

protected virtual void Dispose (bool disposing) {
    if (! _disposed) {
        if (disposing) {
            id = 0;
            name = String.Empty;
            pass = String.Empty;
        }
        _disposed = true;
    }
}
----------------------------------------

 protected virtual void Dispose (bool disposing) {
    if (disposing == true && ! _disposed) {
        id = 0;
        name = "";
        pass = "";
        _disposed = true;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
193
3
Gpt3D_Clone193_3.cs 1 12
Gpt3D_Clone193_3.cs 13 30
----------------------------------------

private Update BuildMetaData (MetaData [] nvPairs) {
    Update update = new Update ();
    var ip = new List < InputProperty > ();
    foreach (var nvPair in nvPairs) {
        if (nvPair == null)
            break;
        var inputProp = new InputProperty {Name = "udf:" + nvPair.Name, Val = nvPair.Value};
        ip.Add (inputProp);
    }
    update.Items = ip.ToArray ();
    return update;
}
----------------------------------------

 private Update BuildMetaData(MetaData[] nvPairs) 
{
    Update update = new Update();
    List<InputProperty> ipList = new List<InputProperty>();
    for(int i = 0; i < nvPairs.Length; i++) 
    {
        if(nvPairs[i] == null)
        break;
        var pair = nvPairs[i];
        ipList.Add(new InputProperty {Name = "udf:" + pair.Name, Val = pair.Value});
    }
    update.Items = ipList.ToArray();
    return update;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
193
4
Gpt3D_Clone193_4.cs 1 12
Gpt3D_Clone193_4.cs 13 30
----------------------------------------

private Update BuildMetaData (MetaData [] nvPairs) {
    Update update = new Update ();
    var ip = new List < InputProperty > ();
    foreach (var nvPair in nvPairs) {
        if (nvPair == null)
            break;
        var inputProp = new InputProperty {Name = "udf:" + nvPair.Name, Val = nvPair.Value};
        ip.Add (inputProp);
    }
    update.Items = ip.ToArray ();
    return update;
}
----------------------------------------

 private Update BuildMetaData(MetaData[] nvPairs) 
{
    Update update = new Update();
    InputProperty[] ipArray = new InputProperty[nvPairs.Length];
    for(int i = 0; i < nvPairs.Length; i++) 
    {
        if(nvPairs[i] == null)
            break;
        var nvPairObj = nvPairs[i];
        ipArray[i] = new InputProperty {Name = "udf:" + nvPairObj.Name, Val = nvPairObj.Value};
    }
    update.Items = ipArray;
    return update;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
193
6
Gpt3D_Clone193_6.cs 1 12
Gpt3D_Clone193_6.cs 13 30
----------------------------------------

private Update BuildMetaData (MetaData [] nvPairs) {
    Update update = new Update ();
    var ip = new List < InputProperty > ();
    foreach (var nvPair in nvPairs) {
        if (nvPair == null)
            break;
        var inputProp = new InputProperty {Name = "udf:" + nvPair.Name, Val = nvPair.Value};
        ip.Add (inputProp);
    }
    update.Items = ip.ToArray ();
    return update;
}
----------------------------------------

 private Update BuildMetaData(MetaData[] nvPairs) 
{
    Update update = new Update();
    List<InputProperty> ipList = new List<InputProperty>();
    nvPairs.ToList().ForEach(nvPair => {
        if(nvPair == null)
            return;
        ipList.Add(new InputProperty {Name = "udf:" + nvPair.Name, Val = nvPair.Value});
    });
    
    update.Items = ipList.ToArray();
    return update;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
193
7
Gpt3D_Clone193_7.cs 1 12
Gpt3D_Clone193_7.cs 13 30
----------------------------------------

private Update BuildMetaData (MetaData [] nvPairs) {
    Update update = new Update ();
    var ip = new List < InputProperty > ();
    foreach (var nvPair in nvPairs) {
        if (nvPair == null)
            break;
        var inputProp = new InputProperty {Name = "udf:" + nvPair.Name, Val = nvPair.Value};
        ip.Add (inputProp);
    }
    update.Items = ip.ToArray ();
    return update;
}
----------------------------------------

 private Update BuildMetaData(MetaData[] nvPairs) 
{
    Update update = new Update();
    InputProperty[] ipArray = new InputProperty[nvPairs.Length];
    for(int i = 0; i < nvPairs.Length; i++) 
    {
        if(nvPairs[i] == null)
            break;
        var nvPairObj = nvPairs[i];
        ipArray[i] = new InputProperty {Name = "udf:" + nvPairObj.Name, Val = nvPairObj.Value};
    }
    update.Items = ipArray;
    return update;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
193
8
Gpt3D_Clone193_8.cs 1 12
Gpt3D_Clone193_8.cs 13 28
----------------------------------------

private Update BuildMetaData (MetaData [] nvPairs) {
    Update update = new Update ();
    var ip = new List < InputProperty > ();
    foreach (var nvPair in nvPairs) {
        if (nvPair == null)
            break;
        var inputProp = new InputProperty {Name = "udf:" + nvPair.Name, Val = nvPair.Value};
        ip.Add (inputProp);
    }
    update.Items = ip.ToArray ();
    return update;
}
----------------------------------------

 private Update BuildMetaData(MetaData[] nvPairs) {
    Update update = new Update();
    InputProperty[] ip = new InputProperty[nvPairs.Length];
    int i = 0;
    while (i < nvPairs.Length && nvPairs[i] != null) 
    {
        ip[i] = new InputProperty {Name = "udf:" + nvPairs[i].Name, Val = nvPairs[i].Value};
        i++;
    }
    update.Items = ip;
    return update;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
196
0
Gpt3D_Clone196_0.cs 1 11
Gpt3D_Clone196_0.cs 12 36
----------------------------------------

protected override void WndProc (ref Message m) {
    base.WndProc (ref m);
    if (m.Msg == WM_CLIPBOARDUPDATE) {
        IDataObject iData = Clipboard.GetDataObject ();
        if (iData.GetDataPresent (DataFormats.Text)) {
            string text = (string) iData.GetData (DataFormats.Text);
        } else if (iData.GetDataPresent (DataFormats.Bitmap)) {
            Bitmap image = (Bitmap) iData.GetData (DataFormats.Bitmap);
        }
    }
}
----------------------------------------

 protected override void WndProc (ref Message m) 
{
    base.WndProc(ref m);
    if (m.Msg != WM_CLIPBOARDUPDATE) {
        return;
    }
    IDataObject dataObject = Clipboard.GetDataObject();
    ClipboardContentType type = GetClipboardContentType(dataObject);
    switch (type) 
    {
        case ClipboardContentType.Text:
            string clipboardText = dataObject.GetData(DataFormats.Text) as string;
            ProcessClipboardText(clipboardText);
            break;
        case ClipboardContentType.Image:
            Bitmap clipboardImage = dataObject.GetData(DataFormats.Bitmap) as Bitmap;
            ProcessClipboardImage(clipboardImage);
            break;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
196
1
Gpt3D_Clone196_1.cs 1 11
Gpt3D_Clone196_1.cs 12 34
----------------------------------------

protected override void WndProc (ref Message m) {
    base.WndProc (ref m);
    if (m.Msg == WM_CLIPBOARDUPDATE) {
        IDataObject iData = Clipboard.GetDataObject ();
        if (iData.GetDataPresent (DataFormats.Text)) {
            string text = (string) iData.GetData (DataFormats.Text);
        } else if (iData.GetDataPresent (DataFormats.Bitmap)) {
            Bitmap image = (Bitmap) iData.GetData (DataFormats.Bitmap);
        }
    }
}
----------------------------------------

protected override void WndProc (ref Message m) 
{
    base.WndProc (ref m);
    if (m.Msg == WM_CLIPBOARDUPDATE) {
        IDataObject iData = Clipboard.GetDataObject ();
        ClipboardContentType clipboardContentType = GetClipboardContentType(iData);
        switch (clipboardContentType)
        {
            case ClipboardContentType.Text:
                string text = (string) iData.GetData (DataFormats.Text);
                ProcessClipboardText(text);
                break;
            case ClipboardContentType.Image:
                Bitmap image = (Bitmap) iData.GetData (DataFormats.Bitmap);
                ProcessClipboardImage(image);
                break;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
196
4
Gpt3D_Clone196_4.cs 1 11
Gpt3D_Clone196_4.cs 12 28
----------------------------------------

protected override void WndProc (ref Message m) {
    base.WndProc (ref m);
    if (m.Msg == WM_CLIPBOARDUPDATE) {
        IDataObject iData = Clipboard.GetDataObject ();
        if (iData.GetDataPresent (DataFormats.Text)) {
            string text = (string) iData.GetData (DataFormats.Text);
        } else if (iData.GetDataPresent (DataFormats.Bitmap)) {
            Bitmap image = (Bitmap) iData.GetData (DataFormats.Bitmap);
        }
    }
}
----------------------------------------

 protected override void WndProc (ref Message m) 
{
    if (m.Msg == WM_CLIPBOARDUPDATE) {
        IDataObject dataObject = Clipboard.GetDataObject();
        if (dataObject.GetDataPresent(DataFormats.Text)) {
            var text = dataObject.GetData(DataFormats.Text) as string;
            ProcessClipboardText(text);
        } else if (dataObject.GetDataPresent(DataFormats.Bitmap)) {
            Bitmap image = dataObject.GetData(DataFormats.Bitmap) as Bitmap;
            ProcessClipboardImage(image);
        }
    }
    base.WndProc(ref m);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
196
7
Gpt3D_Clone196_7.cs 1 11
Gpt3D_Clone196_7.cs 12 26
----------------------------------------

protected override void WndProc (ref Message m) {
    base.WndProc (ref m);
    if (m.Msg == WM_CLIPBOARDUPDATE) {
        IDataObject iData = Clipboard.GetDataObject ();
        if (iData.GetDataPresent (DataFormats.Text)) {
            string text = (string) iData.GetData (DataFormats.Text);
        } else if (iData.GetDataPresent (DataFormats.Bitmap)) {
            Bitmap image = (Bitmap) iData.GetData (DataFormats.Bitmap);
        }
    }
}
----------------------------------------

private void UpdateClipboardData(IDataObject dataObject)
{
    if (dataObject.GetDataPresent(DataFormats.Text))
    {
        string text = dataObject.GetData(DataFormats.Text) as string;
        ProcessClipboardText(text);
    } 
    else if (dataObject.GetDataPresent(DataFormats.Bitmap))
    {
        Bitmap image = dataObject.GetData(DataFormats.Bitmap) as Bitmap;
        ProcessClipboardImage(image);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
196
8
Gpt3D_Clone196_8.cs 1 11
Gpt3D_Clone196_8.cs 12 24
----------------------------------------

protected override void WndProc (ref Message m) {
    base.WndProc (ref m);
    if (m.Msg == WM_CLIPBOARDUPDATE) {
        IDataObject iData = Clipboard.GetDataObject ();
        if (iData.GetDataPresent (DataFormats.Text)) {
            string text = (string) iData.GetData (DataFormats.Text);
        } else if (iData.GetDataPresent (DataFormats.Bitmap)) {
            Bitmap image = (Bitmap) iData.GetData (DataFormats.Bitmap);
        }
    }
}
----------------------------------------

 protected override void WndProc (ref Message m)
{
    if (m.Msg != WM_CLIPBOARDUPDATE) 
    {
        base.WndProc (ref m);
        return;
    }
    IDataObject dataObject = Clipboard.GetDataObject();
    UpdateClipboardData(dataObject);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
196
9
Gpt3D_Clone196_9.cs 1 11
Gpt3D_Clone196_9.cs 12 21
----------------------------------------

protected override void WndProc (ref Message m) {
    base.WndProc (ref m);
    if (m.Msg == WM_CLIPBOARDUPDATE) {
        IDataObject iData = Clipboard.GetDataObject ();
        if (iData.GetDataPresent (DataFormats.Text)) {
            string text = (string) iData.GetData (DataFormats.Text);
        } else if (iData.GetDataPresent (DataFormats.Bitmap)) {
            Bitmap image = (Bitmap) iData.GetData (DataFormats.Bitmap);
        }
    }
}
----------------------------------------

 protected override void WndProc (ref Message m)
{
    if (m.Msg == WM_CLIPBOARDUPDATE) {
        IDataObject dataObject = Clipboard.GetDataObject();
        UpdateClipboardData(dataObject);
    }
    base.WndProc(ref m);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
199
0
Gpt3D_Clone199_0.cs 1 9
Gpt3D_Clone199_0.cs 10 37
----------------------------------------

public void Enqueue (T item) {
    if (queue.Contains (item)) {
        queue.Remove (item);
    }
    queue.Add (item);
    while (queue.Count > maximumSize) {
        Dequeue ();
    }
}
----------------------------------------

 public void Enqueue (T item) {
            if(queue.Contains(item)){
            queue.Remove(item);
            List<T> newQueue = new List<T>();
            for (int i = 0; i < maximumSize; i++){
                if(i == 0){
                    newQueue.Add(item);
                } else {
                    if(i-1 < queue.Count){
                        newQueue.Add(queue[i-1]);
                    }
                }
            }
            queue = newQueue;
        }
        else {
            if (queue.Count<maximumSize){
                queue.Insert(0, item);
            }
            else {
                queue.RemoveAt(queue.Count-1);
                queue.Insert(0, item);
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
199
1
Gpt3D_Clone199_1.cs 1 9
Gpt3D_Clone199_1.cs 10 34
----------------------------------------

public void Enqueue (T item) {
    if (queue.Contains (item)) {
        queue.Remove (item);
    }
    queue.Add (item);
    while (queue.Count > maximumSize) {
        Dequeue ();
    }
}
----------------------------------------

 public void Enqueue (T item) {
            if (queue.Contains(item)){
            queue.Remove(item);
            List<T> newQueue = new List<T>();
            newQueue.Add(item);
            if (queue.Count <= maximumSize){
                newQueue.AddRange(queue);
            } else {
                newQueue.AddRange(queue.Take(maximumSize-1));
            }
            queue = newQueue;
        }
        else{
            if (queue.Count<maximumSize){
                queue.Insert(0, item);
            }
            else {
                queue.RemoveAt(queue.Count-1);
                queue.Insert(0, item);
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
199
2
Gpt3D_Clone199_2.cs 1 9
Gpt3D_Clone199_2.cs 10 33
----------------------------------------

public void Enqueue (T item) {
    if (queue.Contains (item)) {
        queue.Remove (item);
    }
    queue.Add (item);
    while (queue.Count > maximumSize) {
        Dequeue ();
    }
}
----------------------------------------

 public void Enqueue (T item) {
            if (queue.Contains(item)){
            queue.Remove(item);
            List<T> smallerQueue = new List<T>(queue);
            if (smallerQueue.Count<maximumSize){
                smallerQueue.Add(item);
            } else if (smallerQueue.Count==maximumSize){
                smallerQueue.RemoveAt(maximumSize-1);
                smallerQueue.Insert(0, item);
            }
            queue = smallerQueue;
        }
        else{
            if (queue.Count<maximumSize){
                queue.Insert(0, item);
            }
            else {
                queue.RemoveAt(queue.Count-1);
                queue.Insert(0, item);
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
199
3
Gpt3D_Clone199_3.cs 1 9
Gpt3D_Clone199_3.cs 10 35
----------------------------------------

public void Enqueue (T item) {
    if (queue.Contains (item)) {
        queue.Remove (item);
    }
    queue.Add (item);
    while (queue.Count > maximumSize) {
        Dequeue ();
    }
}
----------------------------------------

 public void Enqueue (T item) {
            if(queue.Contains(item)){
            queue.Remove(item);
            List<T> newQueue = new List<T>();
            newQueue.Add(item);
            if (queue.Count >0 && queue.Count<maximumSize){
                newQueue.AddRange(queue);
            }
            else if (queue.Count>maximumSize) {
                newQueue.AddRange(queue.Take(maximumSize-1));
            }
            queue = newQueue;
        }
        else {
            if (queue.Count<maximumSize){
                queue.Insert(0, item);
            }
            else {
                queue.RemoveAt(queue.Count-1);
                queue.Insert(0, item);
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
199
4
Gpt3D_Clone199_4.cs 1 9
Gpt3D_Clone199_4.cs 10 34
----------------------------------------

public void Enqueue (T item) {
    if (queue.Contains (item)) {
        queue.Remove (item);
    }
    queue.Add (item);
    while (queue.Count > maximumSize) {
        Dequeue ();
    }
}
----------------------------------------

 public void Enqueue (T item) {
                if (queue.Contains(item)){
                queue.Remove(item);
                List<T> modified = new List<T>();
                modified.Add(item);
                foreach (T queueItem in queue){
                    modified.Add(queueItem);
                    if (modified.Count >= maximumSize){
                        break;
                    }
                }
                queue = modified;
            }
            else {
                if (queue.Count<maximumSize){
                    queue.Insert(0, item);
                }
                else {
                    queue.RemoveAt(queue.Count-1);
                    queue.Insert(0, item);
                }
            }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
199
5
Gpt3D_Clone199_5.cs 1 9
Gpt3D_Clone199_5.cs 10 37
----------------------------------------

public void Enqueue (T item) {
    if (queue.Contains (item)) {
        queue.Remove (item);
    }
    queue.Add (item);
    while (queue.Count > maximumSize) {
        Dequeue ();
    }
}
----------------------------------------

 public void Enqueue (T item) {
            if (queue.Contains(item))
        {
            queue.Remove(item);
            List<T> smallQueue = new List<T>(queue);
            smallQueue.Insert(0, item);
            while ( smallQueue.Count > maximumSize)
            {
                queue.Remove(smallQueue.Last());
                smallQueue.RemoveAt(smallQueue.Count-1);
            }
            queue = smallQueue;
        }
        else
        {
            if (queue.Count < maximumSize)
            {
                queue.Insert(0, item);
            }
            else
            {
                queue.RemoveAt(queue.Count-1);
                queue.Insert(0, item);
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
199
6
Gpt3D_Clone199_6.cs 1 9
Gpt3D_Clone199_6.cs 10 35
----------------------------------------

public void Enqueue (T item) {
    if (queue.Contains (item)) {
        queue.Remove (item);
    }
    queue.Add (item);
    while (queue.Count > maximumSize) {
        Dequeue ();
    }
}
----------------------------------------

 public void Enqueue (T item) {
            if (queue.Contains(item)){
            queue.Remove(item);    
            int i = 0; 
            while (i < queue.Count && i < maximumSize-1){
                i++;
            }
            if (i == maximumSize){
                queue.RemoveAt(queue.Count-1);
            }
            queue.Insert(i, item);
        }
        else{
            if (queue.Count<maximumSize){
                queue.Insert(0, item);
            }
            else{
                queue.RemoveAt(queue.Count-1);
                queue.Insert(0, item);
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
199
7
Gpt3D_Clone199_7.cs 1 9
Gpt3D_Clone199_7.cs 10 35
----------------------------------------

public void Enqueue (T item) {
    if (queue.Contains (item)) {
        queue.Remove (item);
    }
    queue.Add (item);
    while (queue.Count > maximumSize) {
        Dequeue ();
    }
}
----------------------------------------

 public void Enqueue (T item) {
                if (queue.Contains(item)){
                queue.Remove(item);
                int i = 0;
                while (i < queue.Count && i < maximumSize){
                    i++;
                }
                if (i == maximumSize){
                    queue.RemoveAt(maximumSize-1);
                }
                queue.Insert(i, item);
            }
            else{
                if (queue.Count<maximumSize){
                    queue.Insert(0, item);
                }
                else{
                    queue.RemoveAt(queue.Count-1);
                    queue.Insert(0, item);
                }
            }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
199
8
Gpt3D_Clone199_8.cs 1 9
Gpt3D_Clone199_8.cs 10 31
----------------------------------------

public void Enqueue (T item) {
    if (queue.Contains (item)) {
        queue.Remove (item);
    }
    queue.Add (item);
    while (queue.Count > maximumSize) {
        Dequeue ();
    }
}
----------------------------------------

 public void Enqueue (T item) { if (queue.Contains(item)){
                queue.Remove(item);
                List<T> newQueue = new List<T>();
                newQueue.Add(item);
                int maxSize = Math.Min(maximumSize, queue.Count);
                for (int i = 0; i<maxSize; i++){
                    newQueue.Add(queue[i]);
                }
                queue = newQueue;
            }
            else{
                if (queue.Count<maximumSize){
                    queue.Insert(0, item);
                }
                else {
                    queue.RemoveAt(queue.Count-1);
                    queue.Insert(0, item);
                }
            }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
199
9
Gpt3D_Clone199_9.cs 1 9
Gpt3D_Clone199_9.cs 10 26
----------------------------------------

public void Enqueue (T item) {
    if (queue.Contains (item)) {
        queue.Remove (item);
    }
    queue.Add (item);
    while (queue.Count > maximumSize) {
        Dequeue ();
    }
}
----------------------------------------

 public void Enqueue (T item) {
            if(queue.Contains(item)) { 
        queue.Remove(item); 
        queue.Insert(0, item); 
        } 
        else { 
        if (queue.Count < maximumSize) { 
            queue.Insert(0, item); 
        } 
        else { 
            queue.Remove(queue.Count-1); 
            queue.Insert(0, item); 
        } 
        } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
19
0
Gpt3D_Clone19_0.cs 1 8
Gpt3D_Clone19_0.cs 9 25
----------------------------------------

public static bool IsPowerOfTwo (ulong n) {
    if (n % 2 != 0)
        return false;
    double exp = Math.Log (n, 2);
    if (exp != Math.Floor (exp))
        return false;
    return Math.Pow (2, exp) == n;
}
----------------------------------------

 public static bool IsPowerOfTwo (ulong n) {
    if (n == 0 || n % 2 != 0)
        return false;
    int count = 0;
    for (int i=63; i>=0; i--) {
        if (((n >> i) & 1) == 1) {
            count++;
            if(count>1)
                return false;
        }
    }
    if (count == 1)
        return true;
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
19
1
Gpt3D_Clone19_1.cs 1 8
Gpt3D_Clone19_1.cs 9 24
----------------------------------------

public static bool IsPowerOfTwo (ulong n) {
    if (n % 2 != 0)
        return false;
    double exp = Math.Log (n, 2);
    if (exp != Math.Floor (exp))
        return false;
    return Math.Pow (2, exp) == n;
}
----------------------------------------

 public static bool IsPowerOfTwo (ulong n) {
    if (n == 0)
        return false;
    if (n == 1 || n % 2 != 0)
        return true;
    int count = 0;
    for (ulong i = n; i > 0; i /= 2) {
        if (i % 2 == 0)
            count++;
    }
    if (Math.Pow (2,count) == n)
          return true;
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
19
2
Gpt3D_Clone19_2.cs 1 8
Gpt3D_Clone19_2.cs 9 22
----------------------------------------

public static bool IsPowerOfTwo (ulong n) {
    if (n % 2 != 0)
        return false;
    double exp = Math.Log (n, 2);
    if (exp != Math.Floor (exp))
        return false;
    return Math.Pow (2, exp) == n;
}
----------------------------------------

 public static bool IsPowerOfTwo (ulong n) {
    if (n == 0)
        return false;
    if (n == 1 || n % 2 != 0)
        return true;
    while (n > 1) {
        n /= 2;
        if (n % 2 != 0)
            return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
19
3
Gpt3D_Clone19_3.cs 1 8
Gpt3D_Clone19_3.cs 9 24
----------------------------------------

public static bool IsPowerOfTwo (ulong n) {
    if (n % 2 != 0)
        return false;
    double exp = Math.Log (n, 2);
    if (exp != Math.Floor (exp))
        return false;
    return Math.Pow (2, exp) == n;
}
----------------------------------------

 public static bool IsPowerOfTwo (ulong n) {
    /* Algorithm:
       iterate through bits, if the number of '1' bits more than
       one then return false else return ture. */
    if (n == 0)
        return false;
    int count = 0; 
    for (ulong i = n; i > 0; i >>= 1) 
        if ((i & 1) == 1)
            count++; 
    if (count > 1)
       return false;
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
19
4
Gpt3D_Clone19_4.cs 1 8
Gpt3D_Clone19_4.cs 9 22
----------------------------------------

public static bool IsPowerOfTwo (ulong n) {
    if (n % 2 != 0)
        return false;
    double exp = Math.Log (n, 2);
    if (exp != Math.Floor (exp))
        return false;
    return Math.Pow (2, exp) == n;
}
----------------------------------------

 public static bool IsPowerOfTwo (ulong n) {
    if (n == 0) 
        return false;
    if(n == 1) 
        return true;
    while (n % 2 == 0) {
        n /= 2;
        if (n == 1)
            return true;
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
19
5
Gpt3D_Clone19_5.cs 1 8
Gpt3D_Clone19_5.cs 9 20
----------------------------------------

public static bool IsPowerOfTwo (ulong n) {
    if (n % 2 != 0)
        return false;
    double exp = Math.Log (n, 2);
    if (exp != Math.Floor (exp))
        return false;
    return Math.Pow (2, exp) == n;
}
----------------------------------------

 public static bool IsPowerOfTwo (ulong n) {
    if (n == 0 || n % 2 != 0)
        return false;
    while (n > 0) {
        if ((n & 1) == 1)
            return true;
        n >>= 1;   
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
19
6
Gpt3D_Clone19_6.cs 1 8
Gpt3D_Clone19_6.cs 9 19
----------------------------------------

public static bool IsPowerOfTwo (ulong n) {
    if (n % 2 != 0)
        return false;
    double exp = Math.Log (n, 2);
    if (exp != Math.Floor (exp))
        return false;
    return Math.Pow (2, exp) == n;
}
----------------------------------------

 public static bool IsPowerOfTwo (ulong n) {
    if (n == 0 || n % 2 != 0)
        return false;
    ulong i = 1;
    for ( ; i < n; i *= 2 )	
        if ( i == n )
            return true;
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
19
7
Gpt3D_Clone19_7.cs 1 8
Gpt3D_Clone19_7.cs 9 21
----------------------------------------

public static bool IsPowerOfTwo (ulong n) {
    if (n % 2 != 0)
        return false;
    double exp = Math.Log (n, 2);
    if (exp != Math.Floor (exp))
        return false;
    return Math.Pow (2, exp) == n;
}
----------------------------------------

 public static bool IsPowerOfTwo (ulong n) {
    /* Algorithm:
       check whether the number is even, if true check the number 
       of ones in binary representation of the number and 
       return false if more than one */
    if (n == 0 || n % 2 != 0)
        return false;
    if (BitCount(n) > 1)
        return false;
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
19
8
Gpt3D_Clone19_8.cs 1 8
Gpt3D_Clone19_8.cs 9 17
----------------------------------------

public static bool IsPowerOfTwo (ulong n) {
    if (n % 2 != 0)
        return false;
    double exp = Math.Log (n, 2);
    if (exp != Math.Floor (exp))
        return false;
    return Math.Pow (2, exp) == n;
}
----------------------------------------

 public static bool IsPowerOfTwo (ulong n) {
    if (n == 0)
        return false;
    if (Math.Log(n, 2) % 1 == 0)
        return true;
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
19
9
Gpt3D_Clone19_9.cs 1 8
Gpt3D_Clone19_9.cs 9 15
----------------------------------------

public static bool IsPowerOfTwo (ulong n) {
    if (n % 2 != 0)
        return false;
    double exp = Math.Log (n, 2);
    if (exp != Math.Floor (exp))
        return false;
    return Math.Pow (2, exp) == n;
}
----------------------------------------

 public static bool IsPowerOfTwo (ulong n) {
    if (n==0 || n==1 || n%2 != 0) 
        return false; 
    return (n & (n-1)) == 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1
0
Gpt3D_Clone1_0.cs 1 9
Gpt3D_Clone1_0.cs 10 30
----------------------------------------

static void Main (string [] args) {
    cron_daemon.add_job (new CronJob ("* * * * *", Sendmail));
    cron_daemon.add_job (new CronJob ("* * * * *", Downloadfile));
    cron_daemon.add_job (new CronJob ("* * * * *", ProcessFile));
    cron_daemon.add_job (new CronJob ("* * * * *", ExportFIle));
    cron_daemon.start ();
    while (true)
        Thread.Sleep (6000);
}
----------------------------------------

 static void Main(string[] args)
{
      CronDaemon cron_daemon = CreateObject();
      cron_daemon.DoSendMailAt("* * * * *");
      cron_daemon.DoDownloadFileAt("* * * * *");
      cron_daemon.DoProcessFileAt("* * * * *");
      cron_daemon.DoExportFIleAt("* * * * *");
      cron_daemon.RunSchedules();
      while (true)
      {
        Thread.Sleep(6000);
      }
    }
    public static CronDaemon CreateObject()
    {
      return new CronDaemon();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1
1
Gpt3D_Clone1_1.cs 1 9
Gpt3D_Clone1_1.cs 10 30
----------------------------------------

static void Main (string [] args) {
    cron_daemon.add_job (new CronJob ("* * * * *", Sendmail));
    cron_daemon.add_job (new CronJob ("* * * * *", Downloadfile));
    cron_daemon.add_job (new CronJob ("* * * * *", ProcessFile));
    cron_daemon.add_job (new CronJob ("* * * * *", ExportFIle));
    cron_daemon.start ();
    while (true)
        Thread.Sleep (6000);
}
----------------------------------------

 static void Main(string[] args)
  {
            CronDaemon cron_daemon = GetCronDaemonObject();
            cron_daemon.AddCronJob("* * * * *", Sendmail);
            cron_daemon.AddCronJob("* * * * *", DownloadFile);
            cron_daemon.AddCronJob("* * * * *", ProcessFile);
            cron_daemon.AddCronJob("* * * * *", ExportFile);
            cron_daemon.StartDaemon();
            while (true)
            {
              Thread.Sleep(6000);
            }
          }
          public static CronDaemon GetCronDaemonObject()
          {
            return new CronDaemon();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1
2
Gpt3D_Clone1_2.cs 1 9
Gpt3D_Clone1_2.cs 10 30
----------------------------------------

static void Main (string [] args) {
    cron_daemon.add_job (new CronJob ("* * * * *", Sendmail));
    cron_daemon.add_job (new CronJob ("* * * * *", Downloadfile));
    cron_daemon.add_job (new CronJob ("* * * * *", ProcessFile));
    cron_daemon.add_job (new CronJob ("* * * * *", ExportFIle));
    cron_daemon.start ();
    while (true)
        Thread.Sleep (6000);
}
----------------------------------------

 static void Main(string[] args)
{
      CronDaemon cron_daemon = GetDaemonObject();
      cron_daemon.SetSendMailJobAt("* * * * *");
      cron_daemon.SetDownloadFileJobAt("* * * * *");
      cron_daemon.SetProcessFileJobAt("* * * * *");
      cron_daemon.SetExportFIleJobAt("* * * * *");
      cron_daemon.StartTimedJobs();
      while (true)
      {
        Thread.Sleep(6000);
      }
    }
    public static CronDaemon GetDaemonObject()
    {
      return new CronDaemon();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1
3
Gpt3D_Clone1_3.cs 1 9
Gpt3D_Clone1_3.cs 10 30
----------------------------------------

static void Main (string [] args) {
    cron_daemon.add_job (new CronJob ("* * * * *", Sendmail));
    cron_daemon.add_job (new CronJob ("* * * * *", Downloadfile));
    cron_daemon.add_job (new CronJob ("* * * * *", ProcessFile));
    cron_daemon.add_job (new CronJob ("* * * * *", ExportFIle));
    cron_daemon.start ();
    while (true)
        Thread.Sleep (6000);
}
----------------------------------------

 static void Main(string[] args)
              {
                CronDaemon cron_daemon = CreateCronDaemonObject();
                cron_daemon.AddJobForSendMail();
                cron_daemon.AddJobForDownloadFile();
                cron_daemon.AddJobForProcessFile();
                cron_daemon.AddJobForExportFIle();
                cron_daemon.StartCronDaemon();
                while (true)
                {
                  Thread.Sleep(6000);
                }
              }
              public static CronDaemon CreateCronDaemonObject()
              {
                return new CronDaemon();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1
4
Gpt3D_Clone1_4.cs 1 9
Gpt3D_Clone1_4.cs 10 30
----------------------------------------

static void Main (string [] args) {
    cron_daemon.add_job (new CronJob ("* * * * *", Sendmail));
    cron_daemon.add_job (new CronJob ("* * * * *", Downloadfile));
    cron_daemon.add_job (new CronJob ("* * * * *", ProcessFile));
    cron_daemon.add_job (new CronJob ("* * * * *", ExportFIle));
    cron_daemon.start ();
    while (true)
        Thread.Sleep (6000);
}
----------------------------------------

 static void Main(string[] args)
{
                              CronDaemon cron_daemon = CreateDaemonObject();
                              cron_daemon.ScheduleSendMail("* * * * *");
                              cron_daemon.ScheduleDownloadFile("* * * * *");
                              cron_daemon.ScheduleProcessFile("* * * * *");
                              cron_daemon.ScheduleExportFIle("* * * * *");
                              cron_daemon.RunDaemon();
                              while (true)
                              {
                                Thread.Sleep(6000);
                              }
                            }
                            public static CronDaemon CreateDaemonObject()
                            {
                              return new CronDaemon();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1
5
Gpt3D_Clone1_5.cs 1 9
Gpt3D_Clone1_5.cs 10 30
----------------------------------------

static void Main (string [] args) {
    cron_daemon.add_job (new CronJob ("* * * * *", Sendmail));
    cron_daemon.add_job (new CronJob ("* * * * *", Downloadfile));
    cron_daemon.add_job (new CronJob ("* * * * *", ProcessFile));
    cron_daemon.add_job (new CronJob ("* * * * *", ExportFIle));
    cron_daemon.start ();
    while (true)
        Thread.Sleep (6000);
}
----------------------------------------

 static void Main(string[] args)
{
              CronDaemon cron_daemon = ConstructCronDaemonObject();
              cron_daemon.AddScheduleForSendMail("* * * * *");
              cron_daemon.AddScheduleForDownloadFile("* * * * *");
              cron_daemon.AddScheduleForProcessFile("* * * * *");
              cron_daemon.AddScheduleForExportFIle("* * * * *");
              cron_daemon.ActivateCronDaemon();
              while (true)
              {
                Thread.Sleep(6000);
              }
            }
            public static CronDaemon ConstructCronDaemonObject()
            {
              return new CronDaemon();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1
6
Gpt3D_Clone1_6.cs 1 9
Gpt3D_Clone1_6.cs 10 31
----------------------------------------

static void Main (string [] args) {
    cron_daemon.add_job (new CronJob ("* * * * *", Sendmail));
    cron_daemon.add_job (new CronJob ("* * * * *", Downloadfile));
    cron_daemon.add_job (new CronJob ("* * * * *", ProcessFile));
    cron_daemon.add_job (new CronJob ("* * * * *", ExportFIle));
    cron_daemon.start ();
    while (true)
        Thread.Sleep (6000);
}
----------------------------------------

 
static void Main(string[] args)
{
      CronDaemon cron_daemon = CreateObjectInstance();
      cron_daemon.RegisterSendMailTask("* * * * *");
      cron_daemon.RegisterDownloadFileTask("* * * * *");
      cron_daemon.RegisterProcessFileTask("* * * * *");
      cron_daemon.RegisterExportFIleTask("* * * * *");
      cron_daemon.ExecuteRegisteredTasks();
      while (true)
      {
        Thread.Sleep(6000);
      }
    }
    public static CronDaemon CreateObjectInstance()
    {
      return new CronDaemon();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1
7
Gpt3D_Clone1_7.cs 1 9
Gpt3D_Clone1_7.cs 10 30
----------------------------------------

static void Main (string [] args) {
    cron_daemon.add_job (new CronJob ("* * * * *", Sendmail));
    cron_daemon.add_job (new CronJob ("* * * * *", Downloadfile));
    cron_daemon.add_job (new CronJob ("* * * * *", ProcessFile));
    cron_daemon.add_job (new CronJob ("* * * * *", ExportFIle));
    cron_daemon.start ();
    while (true)
        Thread.Sleep (6000);
}
----------------------------------------

 static void Main(string[] args)
{
      CronDaemon cron_daemon = MakeDaemonObject();
      cron_daemon.SendMailAtInterval("* * * * *");
      cron_daemon.DownloadFileAtInterval("* * * * *");
      cron_daemon.ProcessFileAtIinterval("* * * * *");
      cron_daemon.ExportFIleAtInterval("* * * * *");
      cron_daemon.StartDaemonTasks();
      while (true)
      {
        Thread.Sleep(6000);
      }
    }
    public static CronDaemon MakeDaemonObject()
    {
      return new CronDaemon();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1
8
Gpt3D_Clone1_8.cs 1 9
Gpt3D_Clone1_8.cs 10 38
----------------------------------------

static void Main (string [] args) {
    cron_daemon.add_job (new CronJob ("* * * * *", Sendmail));
    cron_daemon.add_job (new CronJob ("* * * * *", Downloadfile));
    cron_daemon.add_job (new CronJob ("* * * * *", ProcessFile));
    cron_daemon.add_job (new CronJob ("* * * * *", ExportFIle));
    cron_daemon.start ();
    while (true)
        Thread.Sleep (6000);
}
----------------------------------------

 static void Main(string[] args)
{
          CronDaemon cron_daemon = CreateCronDaemon();
          cron_daemon.AddJobs(BuildCronJobList());
          cron_daemon.Start();
            while (true)
            {
              Thread.Sleep(6000);
            }
        }
        public static CronDaemon CreateCronDaemon()
        {
          return new CronDaemon();
        }
        public static List<CronJob> BuildCronJobList()
        {
          return new List<CronJob>
          {
            new CronJob("* * * * *", Sendmail),
            new CronJob("* * * * *", Downloadfile),
            new CronJob("* * * * *", ProcessFile),
            new CronJob("* * * * *", ExportFIle)
          };
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
205
1
Gpt3D_Clone205_1.cs 1 9
Gpt3D_Clone205_1.cs 10 22
----------------------------------------

public string GetResultPIN () {
    StringBuilder sb = new StringBuilder ();
    sb.Append (mIPAD.pin.KSN);
    sb.Append ("," + mIPAD.pin.EPB);
    sb.Append ("," + mIPAD.getStatusCode ());
    sb.Append ("\r\n");
    Thread.Sleep (20 * 1000);
    return sb.ToString ();
}
----------------------------------------

 public string GetResultPIN() {
    StringBuilder sb = new StringBuilder();
    sb.Append(mIPAD.pin.KSN);
    sb.Append(",");
    sb.Append(mIPAD.pin.EPB);
    sb.Append(",");
    sb.Append(mIPAD.getStatusCode());
    sb.Append("\r\n");
    Task.Delay(TimeSpan.FromSeconds(20)).Wait();
    return sb.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
205
2
Gpt3D_Clone205_2.cs 1 9
Gpt3D_Clone205_2.cs 10 23
----------------------------------------

public string GetResultPIN () {
    StringBuilder sb = new StringBuilder ();
    sb.Append (mIPAD.pin.KSN);
    sb.Append ("," + mIPAD.pin.EPB);
    sb.Append ("," + mIPAD.getStatusCode ());
    sb.Append ("\r\n");
    Thread.Sleep (20 * 1000);
    return sb.ToString ();
}
----------------------------------------

 public string GetResultPIN()
{
    StringBuilder sb = new StringBuilder();
    sb.Append(mIPAD.pin.KSN);
    sb.Append(",");
    sb.Append(mIPAD.pin.EPB);
    sb.Append(",");
    sb.Append(mIPAD.getStatusCode());
    sb.Append("\r\n");
    Thread.Sleep(20000);
    return sb.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
205
3
Gpt3D_Clone205_3.cs 1 9
Gpt3D_Clone205_3.cs 10 25
----------------------------------------

public string GetResultPIN () {
    StringBuilder sb = new StringBuilder ();
    sb.Append (mIPAD.pin.KSN);
    sb.Append ("," + mIPAD.pin.EPB);
    sb.Append ("," + mIPAD.getStatusCode ());
    sb.Append ("\r\n");
    Thread.Sleep (20 * 1000);
    return sb.ToString ();
}
----------------------------------------

 public string GetResultPIN() {
    StringBuilder sb = new StringBuilder();
    sb.Append(mIPAD.pin.KSN);
    sb.Append(",");
    sb.Append(mIPAD.pin.EPB);
    sb.Append(",");
    sb.Append(mIPAD.getStatusCode());
    sb.Append("\r\n");
    System.Threading.Thread.Sleep(TimeSpan.FromSeconds(20));
    return sb.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
205
4
Gpt3D_Clone205_4.cs 1 9
Gpt3D_Clone205_4.cs 10 23
----------------------------------------

public string GetResultPIN () {
    StringBuilder sb = new StringBuilder ();
    sb.Append (mIPAD.pin.KSN);
    sb.Append ("," + mIPAD.pin.EPB);
    sb.Append ("," + mIPAD.getStatusCode ());
    sb.Append ("\r\n");
    Thread.Sleep (20 * 1000);
    return sb.ToString ();
}
----------------------------------------

 public string GetResultPIN()
{
    StringBuilder sb = new StringBuilder();
    sb.Append(mIPAD.pin.KSN);
    sb.Append(",");
    sb.Append(mIPAD.pin.EPB);
    sb.Append(",");
    sb.Append(mIPAD.getStatusCode());
    sb.Append("\r\n");
    System.Threading.Timer.Delay(20000);
    return sb.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
205
5
Gpt3D_Clone205_5.cs 1 9
Gpt3D_Clone205_5.cs 10 28
----------------------------------------

public string GetResultPIN () {
    StringBuilder sb = new StringBuilder ();
    sb.Append (mIPAD.pin.KSN);
    sb.Append ("," + mIPAD.pin.EPB);
    sb.Append ("," + mIPAD.getStatusCode ());
    sb.Append ("\r\n");
    Thread.Sleep (20 * 1000);
    return sb.ToString ();
}
----------------------------------------

 public string GetResultPIN()
{
    StringBuilder sb = new StringBuilder();
    try
    {
        sb.Append($"{ mIPAD.pin.KSN }, { mIPAD.pin.EPB }, { mIPAD.getStatusCode() }\r\n");
        Thread.Sleep(TimeSpan.FromSeconds(20));
    }
    catch (Exception ex)
    {
        Messagebox.Show(ex.Message);
    }
    return sb.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
205
6
Gpt3D_Clone205_6.cs 1 9
Gpt3D_Clone205_6.cs 10 19
----------------------------------------

public string GetResultPIN () {
    StringBuilder sb = new StringBuilder ();
    sb.Append (mIPAD.pin.KSN);
    sb.Append ("," + mIPAD.pin.EPB);
    sb.Append ("," + mIPAD.getStatusCode ());
    sb.Append ("\r\n");
    Thread.Sleep (20 * 1000);
    return sb.ToString ();
}
----------------------------------------

 public string GetResultPIN() {
    String pinKSN = mIPAD.pin.KSN;
    String pinEPB = mIPAD.pin.EPB;
    String statusCode = mIPAD.getStatusCode();
    StringBuilder sb = new StringBuilder().AppendFormat("{0},{1},{2}\r\n", pinKSN, pinEPB, statusCode);
    System.Threading.Thread.Sleep(20000);
    return sb.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
205
7
Gpt3D_Clone205_7.cs 1 9
Gpt3D_Clone205_7.cs 10 19
----------------------------------------

public string GetResultPIN () {
    StringBuilder sb = new StringBuilder ();
    sb.Append (mIPAD.pin.KSN);
    sb.Append ("," + mIPAD.pin.EPB);
    sb.Append ("," + mIPAD.getStatusCode ());
    sb.Append ("\r\n");
    Thread.Sleep (20 * 1000);
    return sb.ToString ();
}
----------------------------------------

 public string GetResultPIN() {
    String pinKSN = mIPAD.pin.KSN;
    String pinEPB = mIPAD.pin.EPB;
    String statusCode = mIPAD.getStatusCode();
    String resultPIN = pinKSN + "," + pinEPB + "," + statusCode + "\r\n";
    System.Threading.Thread.Sleep(20000);
    return resultPIN;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
205
8
Gpt3D_Clone205_8.cs 1 9
Gpt3D_Clone205_8.cs 10 18
----------------------------------------

public string GetResultPIN () {
    StringBuilder sb = new StringBuilder ();
    sb.Append (mIPAD.pin.KSN);
    sb.Append ("," + mIPAD.pin.EPB);
    sb.Append ("," + mIPAD.getStatusCode ());
    sb.Append ("\r\n");
    Thread.Sleep (20 * 1000);
    return sb.ToString ();
}
----------------------------------------

 public string GetResultPIN()
{
    StringBuilder sb = new StringBuilder();
    sb.AppendFormat("{0},{1},{2}\n", mIPAD.pin.KSN, mIPAD.pin.EPB, mIPAD.getStatusCode());
    Thread.Sleep(TimeSpan.FromSeconds(20));
    return sb.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
205
9
Gpt3D_Clone205_9.cs 1 9
Gpt3D_Clone205_9.cs 10 17
----------------------------------------

public string GetResultPIN () {
    StringBuilder sb = new StringBuilder ();
    sb.Append (mIPAD.pin.KSN);
    sb.Append ("," + mIPAD.pin.EPB);
    sb.Append ("," + mIPAD.getStatusCode ());
    sb.Append ("\r\n");
    Thread.Sleep (20 * 1000);
    return sb.ToString ();
}
----------------------------------------

	public string GetResultPIN() {
    StringBuilder sb = new StringBuilder();
    sb.AppendFormat("{0},{1},{2}\r\n", mIPAD.pin.KSN, mIPAD.pin.EPB, mIPAD.getStatusCode());
    System.Threading.Thread.Sleep(20*1000);
    return sb.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
206
0
Gpt3D_Clone206_0.cs 1 17
Gpt3D_Clone206_0.cs 18 30
----------------------------------------

private void button2_Click (object sender, RoutedEventArgs e) {
    var firstVisibleItem = GetFirstVisibleItem (listBox1);
    listBox1.Items.Insert (0, "item7");
    listBox1.Items.Insert (0, "item8");
    listBox1.Items.Insert (0, "item9");
    listBox1.Items.Insert (0, "item10");
    listBox1.Items.Insert (0, "item11");
    listBox1.Items.Insert (0, "item12");
    listBox1.Items.Insert (0, "item13");
    listBox1.Items.Insert (0, "item14");
    listBox1.Items.Insert (0, "item15");
    if (firstVisibleItem != null) {
        Application.Current.Dispatcher.BeginInvoke (DispatcherPriority.Loaded, new Action (delegate () {
            listBox1.ScrollIntoViewTop (firstVisibleItem);
        }));
    }
}
----------------------------------------

 private void button2_Click (object sender, RoutedEventArgs e) {
    var firstVisibleItem = GetFirstVisibleItem (listBox1);
    for (int i = 7; i <= 15; i++) {
        listBox1.Items.Insert(0, "item" + i);
    }
    if (firstVisibleItem != null) {
        Application.Current.Dispatcher.BeginInvoke (DispatcherPriority.Loaded, new Action (delegate () {
            listBox1.ScrollIntoViewTop (firstVisibleItem);
        }));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
206
1
Gpt3D_Clone206_1.cs 1 17
Gpt3D_Clone206_1.cs 18 31
----------------------------------------

private void button2_Click (object sender, RoutedEventArgs e) {
    var firstVisibleItem = GetFirstVisibleItem (listBox1);
    listBox1.Items.Insert (0, "item7");
    listBox1.Items.Insert (0, "item8");
    listBox1.Items.Insert (0, "item9");
    listBox1.Items.Insert (0, "item10");
    listBox1.Items.Insert (0, "item11");
    listBox1.Items.Insert (0, "item12");
    listBox1.Items.Insert (0, "item13");
    listBox1.Items.Insert (0, "item14");
    listBox1.Items.Insert (0, "item15");
    if (firstVisibleItem != null) {
        Application.Current.Dispatcher.BeginInvoke (DispatcherPriority.Loaded, new Action (delegate () {
            listBox1.ScrollIntoViewTop (firstVisibleItem);
        }));
    }
}
----------------------------------------

 private void button2_Click (object sender, RoutedEventArgs e) {
    var firstVisibleItem = GetFirstVisibleItem (listBox1);
    for (int i = 7; i <= 15; i++)
    {
        listBox1.Items.Insert(0, "item" + i);
    }
    if (firstVisibleItem != null) {
        Application.Current.Dispatcher.BeginInvoke (DispatcherPriority.Loaded, new Action (delegate () {
            listBox1.ScrollIntoViewTop (firstVisibleItem);
        }));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
206
2
Gpt3D_Clone206_2.cs 1 17
Gpt3D_Clone206_2.cs 18 30
----------------------------------------

private void button2_Click (object sender, RoutedEventArgs e) {
    var firstVisibleItem = GetFirstVisibleItem (listBox1);
    listBox1.Items.Insert (0, "item7");
    listBox1.Items.Insert (0, "item8");
    listBox1.Items.Insert (0, "item9");
    listBox1.Items.Insert (0, "item10");
    listBox1.Items.Insert (0, "item11");
    listBox1.Items.Insert (0, "item12");
    listBox1.Items.Insert (0, "item13");
    listBox1.Items.Insert (0, "item14");
    listBox1.Items.Insert (0, "item15");
    if (firstVisibleItem != null) {
        Application.Current.Dispatcher.BeginInvoke (DispatcherPriority.Loaded, new Action (delegate () {
            listBox1.ScrollIntoViewTop (firstVisibleItem);
        }));
    }
}
----------------------------------------

 private void button2_Click (object sender, RoutedEventArgs e) {
    var firstVisibleItem = GetFirstVisibleItem (listBox1);
    for (int i = 15; i >= 7; i--) {
        listBox1.Items.Insert(0, "item" + i);
    }
    if (firstVisibleItem != null) {
        Application.Current.Dispatcher.BeginInvoke (DispatcherPriority.Loaded, new Action (delegate () {
            listBox1.ScrollIntoViewTop (firstVisibleItem);
        }));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
206
3
Gpt3D_Clone206_3.cs 1 17
Gpt3D_Clone206_3.cs 18 29
----------------------------------------

private void button2_Click (object sender, RoutedEventArgs e) {
    var firstVisibleItem = GetFirstVisibleItem (listBox1);
    listBox1.Items.Insert (0, "item7");
    listBox1.Items.Insert (0, "item8");
    listBox1.Items.Insert (0, "item9");
    listBox1.Items.Insert (0, "item10");
    listBox1.Items.Insert (0, "item11");
    listBox1.Items.Insert (0, "item12");
    listBox1.Items.Insert (0, "item13");
    listBox1.Items.Insert (0, "item14");
    listBox1.Items.Insert (0, "item15");
    if (firstVisibleItem != null) {
        Application.Current.Dispatcher.BeginInvoke (DispatcherPriority.Loaded, new Action (delegate () {
            listBox1.ScrollIntoViewTop (firstVisibleItem);
        }));
    }
}
----------------------------------------

 private void button2_Click (object sender, RoutedEventArgs e) {
    var firstVisibleItem = GetFirstVisibleItem (listBox1);
    Array.Reverse(new string[] { "item7", "item8", "item9", "item10", "item11", "item12", "item13","item14", "item15" }); 
    listBox1.Items.InsertRange (0, new string[] { "item7", "item8", "item9", "item10", "item11", "item12", "item13","item14", "item15"} );
    if (firstVisibleItem != null) {
        Application.Current.Dispatcher.BeginInvoke (DispatcherPriority.Loaded, new Action (delegate () {
            listBox1.ScrollIntoViewTop (firstVisibleItem);
        }));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
206
4
Gpt3D_Clone206_4.cs 1 17
Gpt3D_Clone206_4.cs 18 30
----------------------------------------

private void button2_Click (object sender, RoutedEventArgs e) {
    var firstVisibleItem = GetFirstVisibleItem (listBox1);
    listBox1.Items.Insert (0, "item7");
    listBox1.Items.Insert (0, "item8");
    listBox1.Items.Insert (0, "item9");
    listBox1.Items.Insert (0, "item10");
    listBox1.Items.Insert (0, "item11");
    listBox1.Items.Insert (0, "item12");
    listBox1.Items.Insert (0, "item13");
    listBox1.Items.Insert (0, "item14");
    listBox1.Items.Insert (0, "item15");
    if (firstVisibleItem != null) {
        Application.Current.Dispatcher.BeginInvoke (DispatcherPriority.Loaded, new Action (delegate () {
            listBox1.ScrollIntoViewTop (firstVisibleItem);
        }));
    }
}
----------------------------------------

 private void button2_Click (object sender, RoutedEventArgs e) {
    var firstVisibleItem = GetFirstVisibleItem (listBox1);
    for (int i = 14; i >= 5; i--) {
        listBox1.Items.Insert(0, "item" + i);
    }
    if (firstVisibleItem != null) {
        Application.Current.Dispatcher.BeginInvoke (DispatcherPriority.Loaded, new Action (delegate () {
            listBox1.ScrollIntoViewTop (firstVisibleItem);
        }));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
206
5
Gpt3D_Clone206_5.cs 1 17
Gpt3D_Clone206_5.cs 18 30
----------------------------------------

private void button2_Click (object sender, RoutedEventArgs e) {
    var firstVisibleItem = GetFirstVisibleItem (listBox1);
    listBox1.Items.Insert (0, "item7");
    listBox1.Items.Insert (0, "item8");
    listBox1.Items.Insert (0, "item9");
    listBox1.Items.Insert (0, "item10");
    listBox1.Items.Insert (0, "item11");
    listBox1.Items.Insert (0, "item12");
    listBox1.Items.Insert (0, "item13");
    listBox1.Items.Insert (0, "item14");
    listBox1.Items.Insert (0, "item15");
    if (firstVisibleItem != null) {
        Application.Current.Dispatcher.BeginInvoke (DispatcherPriority.Loaded, new Action (delegate () {
            listBox1.ScrollIntoViewTop (firstVisibleItem);
        }));
    }
}
----------------------------------------

 private void button2_Click (object sender, RoutedEventArgs e) {
    var firstVisibleItem = GetFirstVisibleItem (listBox1);
    for (int i = 14; i >= 5; --i) {
        listBox1.Items.Insert(0, "item" + i);
    }
    if (firstVisibleItem != null) {
        Application.Current.Dispatcher.BeginInvoke (DispatcherPriority.Loaded, new Action (delegate () {
            listBox1.ScrollIntoViewTop (firstVisibleItem);
        }));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
206
6
Gpt3D_Clone206_6.cs 1 17
Gpt3D_Clone206_6.cs 18 29
----------------------------------------

private void button2_Click (object sender, RoutedEventArgs e) {
    var firstVisibleItem = GetFirstVisibleItem (listBox1);
    listBox1.Items.Insert (0, "item7");
    listBox1.Items.Insert (0, "item8");
    listBox1.Items.Insert (0, "item9");
    listBox1.Items.Insert (0, "item10");
    listBox1.Items.Insert (0, "item11");
    listBox1.Items.Insert (0, "item12");
    listBox1.Items.Insert (0, "item13");
    listBox1.Items.Insert (0, "item14");
    listBox1.Items.Insert (0, "item15");
    if (firstVisibleItem != null) {
        Application.Current.Dispatcher.BeginInvoke (DispatcherPriority.Loaded, new Action (delegate () {
            listBox1.ScrollIntoViewTop (firstVisibleItem);
        }));
    }
}
----------------------------------------

 private void button2_Click (object sender, RoutedEventArgs e) {
    var firstVisibleItem = GetFirstVisibleItem (listBox1);
    var items = new string[] { "item7", "item8", "item9", "item10", "item11", "item12", "item13","item14", "item15" };
    listBox1.Items.InsertRange (0, items);
    if (firstVisibleItem != null) {
        Application.Current.Dispatcher.BeginInvoke (DispatcherPriority.Loaded, new Action (delegate () {
            listBox1.ScrollIntoViewTop (firstVisibleItem);
        }));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
206
7
Gpt3D_Clone206_7.cs 1 17
Gpt3D_Clone206_7.cs 18 28
----------------------------------------

private void button2_Click (object sender, RoutedEventArgs e) {
    var firstVisibleItem = GetFirstVisibleItem (listBox1);
    listBox1.Items.Insert (0, "item7");
    listBox1.Items.Insert (0, "item8");
    listBox1.Items.Insert (0, "item9");
    listBox1.Items.Insert (0, "item10");
    listBox1.Items.Insert (0, "item11");
    listBox1.Items.Insert (0, "item12");
    listBox1.Items.Insert (0, "item13");
    listBox1.Items.Insert (0, "item14");
    listBox1.Items.Insert (0, "item15");
    if (firstVisibleItem != null) {
        Application.Current.Dispatcher.BeginInvoke (DispatcherPriority.Loaded, new Action (delegate () {
            listBox1.ScrollIntoViewTop (firstVisibleItem);
        }));
    }
}
----------------------------------------

 private void button2_Click (object sender, RoutedEventArgs e) {
    var firstVisibleItem = GetFirstVisibleItem (listBox1);
    listBox1.Items.InsertRange (0, new object[] {"item7", "item8", "item9", "item10", "item11", "item12", "item13","item14", "item15"} );
    if (firstVisibleItem != null) {
        Application.Current.Dispatcher.BeginInvoke (DispatcherPriority.Loaded, new Action (delegate () {
            listBox1.ScrollIntoViewTop (firstVisibleItem);
        }));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
206
8
Gpt3D_Clone206_8.cs 1 17
Gpt3D_Clone206_8.cs 18 28
----------------------------------------

private void button2_Click (object sender, RoutedEventArgs e) {
    var firstVisibleItem = GetFirstVisibleItem (listBox1);
    listBox1.Items.Insert (0, "item7");
    listBox1.Items.Insert (0, "item8");
    listBox1.Items.Insert (0, "item9");
    listBox1.Items.Insert (0, "item10");
    listBox1.Items.Insert (0, "item11");
    listBox1.Items.Insert (0, "item12");
    listBox1.Items.Insert (0, "item13");
    listBox1.Items.Insert (0, "item14");
    listBox1.Items.Insert (0, "item15");
    if (firstVisibleItem != null) {
        Application.Current.Dispatcher.BeginInvoke (DispatcherPriority.Loaded, new Action (delegate () {
            listBox1.ScrollIntoViewTop (firstVisibleItem);
        }));
    }
}
----------------------------------------

 private void button2_Click (object sender, RoutedEventArgs e) {
    var firstVisibleItem = GetFirstVisibleItem (listBox1);
    listBox1.Items.InsertRange (0, new List<object> {"item7", "item8", "item9", "item10", "item11", "item12", "item13","item14", "item15"} );
    if (firstVisibleItem != null) {
        Application.Current.Dispatcher.BeginInvoke (DispatcherPriority.Loaded, new Action (delegate () {
            listBox1.ScrollIntoViewTop (firstVisibleItem);
        }));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
206
9
Gpt3D_Clone206_9.cs 1 17
Gpt3D_Clone206_9.cs 18 28
----------------------------------------

private void button2_Click (object sender, RoutedEventArgs e) {
    var firstVisibleItem = GetFirstVisibleItem (listBox1);
    listBox1.Items.Insert (0, "item7");
    listBox1.Items.Insert (0, "item8");
    listBox1.Items.Insert (0, "item9");
    listBox1.Items.Insert (0, "item10");
    listBox1.Items.Insert (0, "item11");
    listBox1.Items.Insert (0, "item12");
    listBox1.Items.Insert (0, "item13");
    listBox1.Items.Insert (0, "item14");
    listBox1.Items.Insert (0, "item15");
    if (firstVisibleItem != null) {
        Application.Current.Dispatcher.BeginInvoke (DispatcherPriority.Loaded, new Action (delegate () {
            listBox1.ScrollIntoViewTop (firstVisibleItem);
        }));
    }
}
----------------------------------------

 private void button2_Click (object sender, RoutedEventArgs e) {
    var firstVisibleItem = GetFirstVisibleItem (listBox1);
    listBox1.Items.InsertRange (0, new string[] {"item7", "item8", "item9", "item10", "item11", "item12", "item13","item14", "item15"} );
    if (firstVisibleItem != null) {
        Application.Current.Dispatcher.BeginInvoke (DispatcherPriority.Loaded, new Action (delegate () {
            listBox1.ScrollIntoViewTop (firstVisibleItem);
        }));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
209
0
Gpt3D_Clone209_0.cs 1 9
Gpt3D_Clone209_0.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = k * k * norm;
    A1 = 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

  protected override void CalculateBiQuadCoefficients () {
    double angle = Math.PI * Frequency / SampleRate;
    double k = Math.Tan (angle);
    double scale = 1 / (1 + k / Q + k * k);
    A0 = scale * k * k;
    A1 = 2 * A0;
    A2 = A0;
    B1 = 2 * scale * (k * k - 1);
    B2 = scale * (1 - k / Q + k * k);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
209
2
Gpt3D_Clone209_2.cs 1 9
Gpt3D_Clone209_2.cs 10 20
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = k * k * norm;
    A1 = 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients () {
    double TanAngle = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + TanAngle / Q + TanAngle * TanAngle);
    A0 = TanAngle * TanAngle * norm;
    A1 = A0 * 2;
    A2 = A1 / 2;
    B1 = norm * 2 * (TanAngle * TanAngle - 1);
    B2 = norm * (1 - TanAngle / Q + TanAngle * TanAngle);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
20
0
Gpt3D_Clone20_0.cs 1 9
Gpt3D_Clone20_0.cs 10 21
----------------------------------------

static void Main (string [] args) {
    Console.WriteLine ("Enter number(s): ");
    double [] values = new double [3];
    for (int i = 0; i < values.Length; i ++) {
        values [i] = Convert.ToDouble (Console.ReadLine ());
    }
    average (values);
    Console.ReadKey ();
}
----------------------------------------

 static void Main (string [] args) {
    Console.WriteLine ("Enter number(s): ");
    List <double> values = new List <double> ();
    for (int i = 0; i < 3; i ++) {
        Console.Write ($"Enter double {i + 1}: ");
        values.Add (double.Parse (Console.ReadLine ()));
    }
    average (values.ToArray ());
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
20
1
Gpt3D_Clone20_1.cs 1 9
Gpt3D_Clone20_1.cs 10 20
----------------------------------------

static void Main (string [] args) {
    Console.WriteLine ("Enter number(s): ");
    double [] values = new double [3];
    for (int i = 0; i < values.Length; i ++) {
        values [i] = Convert.ToDouble (Console.ReadLine ());
    }
    average (values);
    Console.ReadKey ();
}
----------------------------------------

 static void Main (string [] args) {
    Console.WriteLine ("Enter number(s): ");
    List <double> values = new List <double> ();
    while (values.Count < 3) {
       values.Add (double.Parse (Console.ReadLine ()));
    }
    average (values.ToArray ());
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
20
2
Gpt3D_Clone20_2.cs 1 9
Gpt3D_Clone20_2.cs 10 20
----------------------------------------

static void Main (string [] args) {
    Console.WriteLine ("Enter number(s): ");
    double [] values = new double [3];
    for (int i = 0; i < values.Length; i ++) {
        values [i] = Convert.ToDouble (Console.ReadLine ());
    }
    average (values);
    Console.ReadKey ();
}
----------------------------------------

 static void Main (string [] args) {
    Console.WriteLine ("Enter number(s): ");
    List <double> values = new List <double> ();
    while (values.Count < 3) {
        values.Add (Convert.ToDouble (Console.ReadLine ()));
    }
    average (values.ToArray ());
    Console.ReadKey ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
210
0
Gpt3D_Clone210_0.cs 1 9
Gpt3D_Clone210_0.cs 10 20
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = k * k * norm;
    A1 = 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

  protected override void CalculateBiQuadCoefficients() {
        double k = Math.Tan(Math.PI * Frequency / SampleRate);
        double normalizeValue = 1 / (1 + k / Q + k * k);
        A0 = k * k * normalizeValue;
        A1 = A0 * 2;
        A2 = A0;
        B1 = (2 * (k * k - 1)) * normalizeValue;
        B2 = (1 - (k / Q) + (k * k)) * normalizeValue;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
210
1
Gpt3D_Clone210_1.cs 1 9
Gpt3D_Clone210_1.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = k * k * norm;
    A1 = 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients() 
    {
        double k = Math.Tan(Math.PI * Frequency / SampleRate);
        double normalizeVal = 1 / (1 + (k/Q) + (k*k));
        A0 = (k*k)*normalizeVal;
        A1 = 2 * A0;
        A2 = A0;
        B1 = (2 * (k*k - 1)) * normalizeVal;
        B2 = (1 - (k/Q) + (k*k)) * normalizeVal;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
210
2
Gpt3D_Clone210_2.cs 1 9
Gpt3D_Clone210_2.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = k * k * norm;
    A1 = 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients() 
    {
        double k = Math.Tan(Math.PI * Frequency / SampleRate);
        double normVal = 1 / (1 + (k/Q) + (k*k));
        A0 = k*k * normVal;
        A1 = A0*2;
        A2 = A0;
        B1 = (2 * (k*k - 1)) * normVal;
        B2 = (1 - (k/Q) + (k*k)) * normVal;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
210
4
Gpt3D_Clone210_4.cs 1 9
Gpt3D_Clone210_4.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = k * k * norm;
    A1 = 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients() 
    {
        double k = Math.Tan(Math.PI * Frequency / SampleRate);
        double normalize = 1/ (1 + (k/Q) + (k*k));
        A0 = k*k*normalize;
        A1 = A0 * 2;
        A2 = A0;
        B1 = (2 * (k*k - 1)) * normalize;
        B2 = (1 - (k/Q) + (k*k)) * normalize;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
210
5
Gpt3D_Clone210_5.cs 1 9
Gpt3D_Clone210_5.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = k * k * norm;
    A1 = 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients() 
   { 
        double k = Math.Tan(Math.PI * Frequency / SampleRate);
        double normalizeValue = 1/ (1 + (k/Q) + (k*k));
        A0 = (k*k)*normalizeValue;
        A1 = (A0*2);
        A2 = A0;
        B1 = (2 * (k*k - 1)) * normalizeValue;
        B2 = ((1 - (k/Q)) + (k*k)) * normalizeValue;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
210
6
Gpt3D_Clone210_6.cs 1 9
Gpt3D_Clone210_6.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = k * k * norm;
    A1 = 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients() 
    {
        double k = Math.Tan(Math.PI * Frequency / SampleRate);
        double normalizer = 1 / (1 + (k/Q) + (k*k));
        A0 = (k*k)*normalizer;
        A1 = 2 * A0;
        A2 = A0;
        B1 = (2 * (k*k - 1)) * normalizer;
        B2 = (1 - (k/Q) + (k*k)) * normalizer;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
210
7
Gpt3D_Clone210_7.cs 1 9
Gpt3D_Clone210_7.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = k * k * norm;
    A1 = 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients() 
    {
        double k = Math.Tan(Math.PI * Frequency / SampleRate);
        double normalizingValue = 1 / (1 + (k/Q) + (k*k));
        A0 = k*k * normalizingValue;
        A1 = (A0 * 2);
        A2 = A0;
        B1 = (2*(k*k - 1)) * normalizingValue;
        B2 = ((1 - (k/Q)) + (k*k)) * normalizingValue;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
210
8
Gpt3D_Clone210_8.cs 1 9
Gpt3D_Clone210_8.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = k * k * norm;
    A1 = 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients() 
    {
        double k = Math.Tan(Math.PI * Frequency / SampleRate);
        double norm = 1 / (1 + (k/Q) + (k*k));
        A0 = k*k * norm;
        A1 = A0*2;
        A2 = A0;
        B1 = (2*(k*k - 1)) * norm;
        B2 = (1 - (k/Q) + (k*k)) * norm;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
210
9
Gpt3D_Clone210_9.cs 1 9
Gpt3D_Clone210_9.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = k * k * norm;
    A1 = 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients() 
    {
        double k = Math.Tan(Math.PI * Frequency / SampleRate);
        double norm = 1/ (1 + k/Q + k*k);
        A0 = (k*k) * norm;
        A1 = A0 * 2;
        A2 = A0;
        B1 = (2*(k*k-1)) * norm;
        B2 = (1 - (k/Q) + (k*k)) * norm;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
211
0
Gpt3D_Clone211_0.cs 1 9
Gpt3D_Clone211_0.cs 10 20
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = k * k * norm;
    A1 = 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

  protected override void CalculateBiQuadCoefficients() {
        double k = Math.Tan(Math.PI * Frequency / SampleRate);
        var norm = (1 + k / Q + k * k);
        A0 = k * k / norm;
        A1 = 2 * A0;
        A2 = A0;
        B1 = 2 * (k * k - 1) / norm;
        B2 = (1 - k / Q + k * k) / norm;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
211
1
Gpt3D_Clone211_1.cs 1 9
Gpt3D_Clone211_1.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = k * k * norm;
    A1 = 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

   protected override void CalculateBiQuadCoefficients() 
    { 
        double k = Math.Tan(Math.PI * Frequency / SampleRate); 
        double norm = 1.0 / (1.0 + (k / Q) + Math.Pow(k, 2)); 
        A0 = (Math.Pow(k, 2) * norm); 
        A1 = (2 * A0); 
        A2 = (A0); 
        B1 = (2 * (Math.Pow(k, 2) - 1.0) * norm); 
        B2 = (1 - (k / Q) + Math.Pow(k, 2)) * norm; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
211
2
Gpt3D_Clone211_2.cs 1 9
Gpt3D_Clone211_2.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = k * k * norm;
    A1 = 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

  protected override void CalculateBiQuadCoefficients() 
    { 
        double k = Math.Tan(Math.PI * Frequency / SampleRate); 
        double norm = 1.0 / (1.0 + (k / Q) + Math.Pow(k, 2)); 
        A0 = (k * k * norm); 
        A1 = (2.0 * A0); 
        A2 = (A0); 
        B1 = (2.0 * (k * k - 1.0) * norm); 
        B2 = ((1.0 - k / Q + k * k) * norm); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
211
3
Gpt3D_Clone211_3.cs 1 9
Gpt3D_Clone211_3.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = k * k * norm;
    A1 = 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

   protected override void CalculateBiQuadCoefficients() 
    { 
        double k = Math.Tan (Math.PI * Frequency / SampleRate); 
        var norm = 1.0 / (1.0 + (k / Q) + k*k); 
        A0 = (k * k * norm); 
        A1 = 2 * A0; 
        A2 = A0; 
        B1 = 2 * (k * k - 1.0) * norm; 
        B2 = (1.0 - (k / Q) + k*k) * norm; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
211
4
Gpt3D_Clone211_4.cs 1 9
Gpt3D_Clone211_4.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = k * k * norm;
    A1 = 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients() 
    { 
        double k = Math.Tan(Math.PI * Frequency / SampleRate); 
        double norm = 1.0 / (1.0 + (k / Q) + Math.Pow(k, 2)); 
        A0 = (Math.Pow(k, 2) * norm); 
        A1 = (2 * A0); 
        A2 = (A0); 
        B1 = (-2 * (Math.Pow(k, 2) - 1.0) * norm); 
        B2 = (1.0 - (k / Q) + Math.Pow(k, 2)) * norm; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
211
5
Gpt3D_Clone211_5.cs 1 9
Gpt3D_Clone211_5.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = k * k * norm;
    A1 = 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

   protected override void CalculateBiQuadCoefficients() 
    { 
       double k = Math.Tan (Math.PI * Frequency / SampleRate); 
       var norm = 1.0 / (1 + k / Q + k * k); 
       A0 = (k * k * norm); 
       A1 = (2.0 * A0); 
       A2 = (A0); 
       B1 = (-2.0 * (k * k - 1.0) * norm); 
       B2 = ((-1.0 - k / Q + k * k) * norm); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
211
6
Gpt3D_Clone211_6.cs 1 9
Gpt3D_Clone211_6.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = k * k * norm;
    A1 = 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

  protected override void CalculateBiQuadCoefficients () 
    { 
        double k = Math.Tan (Math.PI * Frequency / SampleRate); 
        double norm = 1.0 / (1.0 + (k / Q) + Math.Pow(k, 2)); 
        A0 = (Math.Pow(k, 2) * norm); 
        A1 = (2.0 * A0); 
        A2 = (A0); 
        B1 = (-2.0 * (Math.Pow(k, 2) - 1.0) * norm); 
        B2 = ((-1.0 - k / Q + k * k) * norm); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
211
7
Gpt3D_Clone211_7.cs 1 9
Gpt3D_Clone211_7.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = k * k * norm;
    A1 = 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

   protected override void CalculateBiQuadCoefficients () 
    { 
        double k = Math.Tan(Math.PI * Frequency / SampleRate); 
        var norm = 1.0 / (1 + k / Q + k*k); 
        A0 = (k * k * norm); 
        A1 = (2.0 * A0); 
        A2 = (A0); 
        B1 = (2.0 * (k * k - 1.0) * norm); 
        B2 = (1.0 - k / Q + k*k) * norm; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
211
8
Gpt3D_Clone211_8.cs 1 9
Gpt3D_Clone211_8.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = k * k * norm;
    A1 = 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

   protected override void CalculateBiQuadCoefficients () 
    { 
        double k = Math.Tan (Math.PI * Frequency / SampleRate); 
        var norm = 1 / (1 + k / Q + Math.Pow(k, 2)); 
        A0 = Math.Pow(k, 2) * norm; 
        A1 = 2 * A0; 
        A2 = A0; 
        B1 = 2 * (Math.Pow(k, 2) - 1) * norm; 
        B2 = (1 - k / Q + Math.Pow(k, 2)) * norm; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
211
9
Gpt3D_Clone211_9.cs 1 9
Gpt3D_Clone211_9.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = k * k * norm;
    A1 = 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

  protected override void CalculateBiQuadCoefficients() 
    { 
        double k = Math.Tan (Math.PI * Frequency / SampleRate); 
        var norm = 1 / (1 + (k / Q) + Math.Pow(k, 2)); 
        A0 = norm * Math.Pow(k, 2); 
        A1 = 2 * A0; 
        A2 = A0; 
        B1 = 2 * (Math.Pow(k, 2) - 1) * norm; 
        B2 = (1 - (k / Q) + Math.Pow(k, 2)) * norm;     
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
214
0
Gpt3D_Clone214_0.cs 1 9
Gpt3D_Clone214_0.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = 1 * norm;
    A1 = - 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

  protected override void CalculateBiQuadCoefficients () {
    double factor = Math.PI * Frequency / SampleRate;
    double k = Math.Tan ( factor );
    double normDivisor = 1.0 / (1.0 + k / Q + k * k);
    A0 = normDivisor;
    A1 = -2.0 * A0;
    A2 = A0;
    B1 = 2.0 * (k * k - 1.0) * normDivisor;
    B2 = (1.0 - k / Q + k * k) * normDivisor;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
214
1
Gpt3D_Clone214_1.cs 1 9
Gpt3D_Clone214_1.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = 1 * norm;
    A1 = - 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

  protected override void CalculateBiQuadCoefficients () {
    double thetaFrequency = Math.PI * Frequency / SampleRate;
    double k = Math.Tan ( thetaFrequency );
    double denom = 1 + k / Q + k * k;
    A0 = 1 / denom;
    A1 = -2 * A0;
    A2 = A0;
    B1 = 2 * (Math.Pow(k,2) - 1) * (1/denom);
    B2 = (1 - k / Q + Math.Pow(k,2)) * (1/denom);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
214
2
Gpt3D_Clone214_2.cs 1 9
Gpt3D_Clone214_2.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = 1 * norm;
    A1 = - 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

  protected override void CalculateBiQuadCoefficients () {
    double angleFrequency = Math.PI * Frequency / SampleRate;
    double k = Math.Tan ( angleFrequency );
    double weights = 1 / (1 + k / Q + k * k);
    A0 = weights;
    A1 = -2 * A0;
    A2 = A0;
    B1 = 2 * (Math.Pow(k,2) - 1) * weights;
    B2 = (1 - k / Q + Math.Pow(k,2)) * weights;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
214
3
Gpt3D_Clone214_3.cs 1 9
Gpt3D_Clone214_3.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = 1 * norm;
    A1 = - 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

  protected override void CalculateBiQuadCoefficients () {
    double normalizedTheta = Math.PI * Frequency / SampleRate;
    double k = Math.Tan ( normalizedTheta );
    double norm = 1 / (1 + k / Q + k * k);
    A0 = norm * 1;
    A1 = -2 * A0;
    A2 = A0;
    B1 = 2 * (Math.Pow(k,2) - 1) * norm;
    B2 = (1 - k / Q + Math.Pow(k,2)) * norm;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
214
4
Gpt3D_Clone214_4.cs 1 9
Gpt3D_Clone214_4.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = 1 * norm;
    A1 = - 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

  protected override void CalculateBiQuadCoefficients () {
    double factorFrequency = Math.PI * Frequency / SampleRate;
    double k = Math.Tan ( factorFrequency );
    double normDivider = 1.0 / (1.0 + k / Q + k * k);
    A0 = normDivider;
    A1 = -2.0 * A0;
    A2 = A0;
    B1 = 2.0 * (Math.Pow(k,2) - 1.0) * normDivider;
    B2 = (1.0 - k / Q + Math.Pow(k,2)) * normDivider;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
214
5
Gpt3D_Clone214_5.cs 1 9
Gpt3D_Clone214_5.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = 1 * norm;
    A1 = - 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

  protected override void CalculateBiQuadCoefficients () {
    double convertedFreq = Math.PI * Frequency / SampleRate;
    double k = Math.Tan ( convertedFreq );
    double multiplier = 1 / (1 + k / Q + k * k);
    A0 = multiplier;
    A1 = -2 * A0;
    A2 = A0;
    B1 = 2 * (Math.Pow((k*k),2) - 1) * multiplier;
    B2 = (1 - k / Q + Math.Pow((k*k),2)) * multiplier;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
214
6
Gpt3D_Clone214_6.cs 1 9
Gpt3D_Clone214_6.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = 1 * norm;
    A1 = - 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

  protected override void CalculateBiQuadCoefficients () {
    double tanValue = Math.PI * Frequency / SampleRate;
    double k = Math.Tan ( tanValue );
    double dividend = 1 + k / Q + k * k;
    A0 = 1 / dividend;
    A1 = -2 * A0;
    A2 = A0;
    B1 = 2 * (Math.Pow(k,2)-1) * (1/dividend);
    B2 = (1 - k / Q + Math.Pow(k,2)) * (1/dividend);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
214
7
Gpt3D_Clone214_7.cs 1 9
Gpt3D_Clone214_7.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = 1 * norm;
    A1 = - 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

  protected override void CalculateBiQuadCoefficients () {
    double thetaFrequency = Math.PI * Frequency / SampleRate;
    double k = Math.Tan ( thetaFrequency );
    double factor = 1 / (1 + k / Q + k * k);
    A0 = factor * 1;
    A1 = -2 * A0;
    A2 = A0;
    B1 = 2 * (Math.Pow(k,2) - 1) * factor;
    B2 = (1 - k / Q + Math.Pow(k,2)) * factor;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
214
8
Gpt3D_Clone214_8.cs 1 9
Gpt3D_Clone214_8.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = 1 * norm;
    A1 = - 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

  protected override void CalculateBiQuadCoefficients () {
    double thetaFrequency = Math.PI * Frequency / SampleRate;
    double k = Math.Tan ( thetaFrequency );
    double normalize = 1 / (1 + k / Q + k * k);
    A0 = normalize;
    A1 = -2 * A0;
    A2 = A0;
    B1 = 2 * (Math.Pow(k,2) - 1) * normalize;
    B2 = (1 - k / Q + Math.Pow(k,2)) * normalize;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
214
9
Gpt3D_Clone214_9.cs 1 9
Gpt3D_Clone214_9.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    var norm = 1 / (1 + k / Q + k * k);
    A0 = 1 * norm;
    A1 = - 2 * A0;
    A2 = A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

  protected override void CalculateBiQuadCoefficients () {
    double thetaF = Math.PI * Frequency / SampleRate;
    double k = Math.Tan ( thetaF );
    double normFactor = 1 / (1 + k / Q + k * k);
    A0 = 1 * normFactor;
    A1 = -2 * A0;
    A2 = A0;
    B1 = 2 * (Math.Pow(k,2) - 1) * normFactor;
    B2 = (1 - k / Q + Math.Pow(k,2)) * normFactor;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
215
0
Gpt3D_Clone215_0.cs 1 9
Gpt3D_Clone215_0.cs 10 22
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = k / Q * norm;
    A1 = 0;
    A2 = - A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients () {
    double tanParam = Math.PI * Frequency / SampleRate;
    double k = Math.Tan (tanParam);
    double denorm = 1 + k / Q + k * k;
    double norm = 1 / denorm;
    A0 = (k / Q) * norm;
    A1 = 0;
    A2 = - A0;
    B1 = (2 * (k * k - 1)) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
215
2
Gpt3D_Clone215_2.cs 1 9
Gpt3D_Clone215_2.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = k / Q * norm;
    A1 = 0;
    A2 = - A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double denominator = 1 + (k / Q) + (k * k);
    double normalization = 1 / denominator;
    A0 = (k / Q) * normalization;
    A1 = 0;
    A2 = -A0;
    B1 = (2 * (k * k - 1)) * normalization;
    B2 = ((1 - (k / Q)) + (k * k)) * normalization;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
215
5
Gpt3D_Clone215_5.cs 1 9
Gpt3D_Clone215_5.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = k / Q * norm;
    A1 = 0;
    A2 = - A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double qNorm = 1 + (k / Q) + (k * k);
    double norm = 1 / qNorm;
    A0 = (k / Q) * norm;
    A1 = 0;
    A2 = -A0;
    B1 = (2 * (k * k - 1)) * norm;
    B2 = ((1 - (k / Q)) + (k * k)) * norm;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
215
6
Gpt3D_Clone215_6.cs 1 9
Gpt3D_Clone215_6.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = k / Q * norm;
    A1 = 0;
    A2 = - A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients () {
    double tParam = Math.Tan (Math.PI * Frequency / SampleRate);
    double denormVal = 1 + tParam / Q + (tParam*tParam);
    double normFactor = 1 / denormVal;
    A0 = (tParam/Q) * normFactor;
    A1 = 0;
    A2 = -A0;
    B1 = (2 * (tParam*tParam - 1)) * normFactor;
    B2 = ((1 - tParam/Q) + tParam*tParam) * normFactor;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
215
7
Gpt3D_Clone215_7.cs 1 9
Gpt3D_Clone215_7.cs 10 20
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = k / Q * norm;
    A1 = 0;
    A2 = - A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients () {
    double tanFq = Math.Tan (Math.PI * Frequency / SampleRate);
    double inverse = 1 / (1 + (tanFq/Q) + Math.Pow(tanFq, 2));
    A0 = (tanFq/Q) * inverse;
    A1 = 0;
    A2 = -A0;
    B1 = (2 * (Math.Pow(tanFq, 2) - 1)) * inverse;
    B2 = (1 - (tanFq/Q) + Math.Pow(tanFq, 2)) * inverse;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
215
8
Gpt3D_Clone215_8.cs 1 9
Gpt3D_Clone215_8.cs 10 20
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = k / Q * norm;
    A1 = 0;
    A2 = - A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients () {
    double tanX = Math.Tan (Math.PI * Frequency / SampleRate);
    double inv = 1 / (1 + tanX / Q + Math.Pow(tanX, 2));
    A0 = (tanX / Q) * inv;
    A1 = 0;
    A2 = -A0;
    B1 = (2 * (Math.Pow(tanX, 2) - 1)) * inv;
    B2 = (1 - tanX / Q + Math.Pow(tanX, 2)) * inv;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
215
9
Gpt3D_Clone215_9.cs 1 9
Gpt3D_Clone215_9.cs 10 20
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = k / Q * norm;
    A1 = 0;
    A2 = - A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients () {
    double fqVal = Math.Tan (Math.PI * Frequency / SampleRate);
    double inverseVal = 1 / (1 + (fqVal/Q) + Math.Pow(fqVal, 2));
    A0 = (fqVal/Q) * inverseVal;
    A1 = 0;
    A2 = -A0;
    B1 = (2 * (Math.Pow(fqVal, 2) - 1)) * inverseVal;
    B2 = (1 - (fqVal/Q) + Math.Pow(fqVal, 2)) * inverseVal;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
216
0
Gpt3D_Clone216_0.cs 1 9
Gpt3D_Clone216_0.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = k / Q * norm;
    A1 = 0;
    A2 = - A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients () {
    double sine = Math.Sin (Math.PI * Frequency / SampleRate);
    double cosine = Math.Cos (Math.PI * Frequency / SampleRate);
    double denominator = 1 + sine/(Q*cosine) + sine*sine;
    A0 = sine/(Q*cosine)/denominator;
    A1 = 0;
    A2 = -A0;
    B1 = 2*(sine*sine - cosine*cosine) / denominator;
    B2 = (1 - sine/(Q*cosine) + sine*sine) / denominator;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
216
1
Gpt3D_Clone216_1.cs 1 9
Gpt3D_Clone216_1.cs 10 20
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = k / Q * norm;
    A1 = 0;
    A2 = - A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients () {
    double theta = Math.Tan (Math.PI * Frequency / SampleRate);
    double coeff = 1 + theta/Q + Math.Pow(theta, 2);
    A0 = theta/Q / coeff;
    A1 = 0;
    A2 = -A0;
    B1 = (2*(Math.Pow(theta, 2) - 1)) / coeff;
    B2 = (1 - theta/Q + Math.Pow(theta, 2)) / coeff;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
216
2
Gpt3D_Clone216_2.cs 1 9
Gpt3D_Clone216_2.cs 10 20
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = k / Q * norm;
    A1 = 0;
    A2 = - A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients () {
    double t = Math.Tan (Math.PI * Frequency / SampleRate);
    double factor = 1 + t/Q + (t*t);
    A0 = (t/Q) / factor;
    A1 = 0;
    A2 = -A0;
    B1 = (2*((t*t) - 1)) / factor;
    B2 = (1 - (t/Q) + (t*t)) / factor;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
216
3
Gpt3D_Clone216_3.cs 1 9
Gpt3D_Clone216_3.cs 10 20
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = k / Q * norm;
    A1 = 0;
    A2 = - A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients () {
    double ratio = Math.Tan (Math.PI * Frequency / SampleRate);
    double constant = 1 + ratio/Q + Math.Pow(ratio, 2);
    A0 = ratio/Q / constant;
    A1 = 0;
    A2 = -A0;
    B1 = 2*(Math.Pow(ratio, 2) - 1) / constant;
    B2 = (1 - ratio/Q + Math.Pow(ratio, 2)) / constant;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
216
4
Gpt3D_Clone216_4.cs 1 9
Gpt3D_Clone216_4.cs 10 20
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = k / Q * norm;
    A1 = 0;
    A2 = - A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients () {
    double kata = Math.Tan (Math.PI * Frequency / SampleRate);
    double factorized = 1 + (kata/Q) + Math.Pow(kata, 2);
    A0 = (kata/Q) / factorized;
    A1 = 0;
    A2 = -A0;
    B1 = (2*(Math.Pow(kata, 2) - 1)) / factorized;
    B2 = (1 - (kata/Q) + Math.Pow(kata, 2)) / factorized;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
216
5
Gpt3D_Clone216_5.cs 1 9
Gpt3D_Clone216_5.cs 10 20
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = k / Q * norm;
    A1 = 0;
    A2 = - A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients () {
    double cotangent = 1 / Math.Tan (Math.PI * Frequency / SampleRate);
    double divisor = 1 + cotangent/Q + cotangent*cotangent;
    A0 = cotangent / Q / divisor;
    A1 = 0;
    A2 = -A0;
    B1 = 2*(cotangent*cotangent - 1) / divisor;
    B2 = (1 - cotangent/Q + cotangent*cotangent) / divisor;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
216
6
Gpt3D_Clone216_6.cs 1 9
Gpt3D_Clone216_6.cs 10 20
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = k / Q * norm;
    A1 = 0;
    A2 = - A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients () {
    double taxent = Math.Tan (Math.PI * Frequency / SampleRate);
    double div = 1 + (taxent/Q) + Math.Pow(taxent, 2);
    A0 = (taxent/Q) / div;
    A1 = 0;
    A2 = -A0;
    B1 = (2*(Math.Pow(taxent, 2) - 1)) / div;
    B2 = (1 - (taxent/Q) + Math.Pow(taxent, 2)) / div;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
216
7
Gpt3D_Clone216_7.cs 1 9
Gpt3D_Clone216_7.cs 10 20
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = k / Q * norm;
    A1 = 0;
    A2 = - A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients () {
    double tan = Math.Tan (Math.PI * Frequency / SampleRate);
    double denom = 1 + tan/Q + Math.Pow(tan, 2);
    A0 = (tan/Q) / denom;
    A1 = 0;
    A2 = -A0;
    B1 = (2 * (Math.Pow(tan, 2) - 1)) / denom;
    B2 = (1 - (tan/Q) + Math.Pow(tan, 2)) / denom;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
216
8
Gpt3D_Clone216_8.cs 1 9
Gpt3D_Clone216_8.cs 10 20
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = k / Q * norm;
    A1 = 0;
    A2 = - A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double divisor = 1 + (k/Q) + Math.Pow(k, 2);
    A0 = (k/Q) / divisor;
    A1 = 0;
    A2 = -A0;
    B1 = (2 * (Math.Pow(k, 2) - 1)) / divisor;
    B2 = (1 - (k/Q) + Math.Pow(k, 2)) / divisor;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
216
9
Gpt3D_Clone216_9.cs 1 9
Gpt3D_Clone216_9.cs 10 20
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = k / Q * norm;
    A1 = 0;
    A2 = - A0;
    B1 = 2 * (k * k - 1) * norm;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients () {
    double k = 1 / Math.Tan (Math.PI * Frequency / SampleRate);
    double d = 1 + k/Q + Math.Pow(k, 2);
    A0 = (k/Q) / d;
    A1 = 0;
    A2 = -A0;
    B1 = (2*(Math.Pow(k, 2) - 1)) / d;
    B2 = (1 - (k/Q) + Math.Pow(k, 2)) / d;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
219
0
Gpt3D_Clone219_0.cs 1 9
Gpt3D_Clone219_0.cs 10 20
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = (1 + k * k) * norm;
    A1 = 2 * (k * k - 1) * norm;
    A2 = A0;
    B1 = A1;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients() {
    double k = Math.Pow(Math.PI * Frequency / SampleRate, 2);
    double norm = 1 / (1 + k/Q + k);
    A0 = (1 + k) * norm;
    A1 = 2 * (k - 1) * norm;
    A2 = A0;
    B1 = A1;
    B2 = (1 - k/Q + k) * norm;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
220
0
Gpt3D_Clone220_0.cs 1 9
Gpt3D_Clone220_0.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = (1 + k * k) * norm;
    A1 = 2 * (k * k - 1) * norm;
    A2 = A0;
    B1 = A1;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients()
{
   double k = Math.Tan(Math.PI * Frequency / SampleRate);
   double norm = 1 / (1 + k/Q + (k * k));
   A0 = norm * (1 + (k * k));
   A1 = norm * (2 * (k * k - 1));
   A2 = A0;
   B1 = A1;
   B2 = norm * (1 - k/Q + k*k);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
220
1
Gpt3D_Clone220_1.cs 1 9
Gpt3D_Clone220_1.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = (1 + k * k) * norm;
    A1 = 2 * (k * k - 1) * norm;
    A2 = A0;
    B1 = A1;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients() 
{ 
	double k = Math.Tan(Math.PI * Frequency / SampleRate); 
	double denom = (1 + k/Q + (k * k)); 
	A0 = (1 + (k * k)) / denom; 
	A1 = (2 * (k * k - 1)) / denom; 
	A2 = A0; 
	B1 = A1; 
	B2 = (1 - k/Q + (k * k)) / denom; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
220
2
Gpt3D_Clone220_2.cs 1 9
Gpt3D_Clone220_2.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = (1 + k * k) * norm;
    A1 = 2 * (k * k - 1) * norm;
    A2 = A0;
    B1 = A1;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients() 
{
	double k = Math.Tan(Math.PI * Frequency / SampleRate); 
	double div = 1 / (1 + k/Q + (k * k)); 
	A0 = div * (1 + (k * k)); 
	A1 = div * (2 * (k * k - 1)); 
	A2 = A0; 
	B1 = A1; 
	B2 = div * (1 - k/Q + (k * k)); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
220
3
Gpt3D_Clone220_3.cs 1 9
Gpt3D_Clone220_3.cs 10 20
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = (1 + k * k) * norm;
    A1 = 2 * (k * k - 1) * norm;
    A2 = A0;
    B1 = A1;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients() { 
	double k = Math.Tan(Math.PI * Frequency / SampleRate); 
	double norm = 1 / (1 + k/Q + (k * k)); 
	A0 = (1 + (k * k)) / norm; 
	A1 = (2 * (k * k - 1)) / norm; 
	A2 = A0; 
	B1 = A1; 
	B2 = (1 - k/Q + (k * k)) / norm;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
220
4
Gpt3D_Clone220_4.cs 1 9
Gpt3D_Clone220_4.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = (1 + k * k) * norm;
    A1 = 2 * (k * k - 1) * norm;
    A2 = A0;
    B1 = A1;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

  protected override void CalculateBiQuadCoefficients() 
{ 
	double k = Math.Tan(Math.PI * Frequency / SampleRate); 
	double inv = 1 / (1 + k/Q + (k * k)); 
	A0 = (1 + (k * k)) * inv; 
	A1 = (2 * (k * k - 1)) * inv; 
	A2 = A0; 
	B1 = A1; 
	B2 = (1 - k/Q + (k * k)) * inv; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
220
5
Gpt3D_Clone220_5.cs 1 9
Gpt3D_Clone220_5.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = (1 + k * k) * norm;
    A1 = 2 * (k * k - 1) * norm;
    A2 = A0;
    B1 = A1;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients() 
{ 
	double k = Math.Tan(Math.PI * Frequency / SampleRate); 
 	double norm = 1 / (1 + k/Q + (k * k)); 
	A0 = norm * (1 + (k * k)); 
	A1 = norm * (2 * (k * k - 1)); 
	A2 = A0; 
	B1 = A1; 
	B2 = norm * (1 - (k/Q) + (k * k)); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
220
6
Gpt3D_Clone220_6.cs 1 9
Gpt3D_Clone220_6.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = (1 + k * k) * norm;
    A1 = 2 * (k * k - 1) * norm;
    A2 = A0;
    B1 = A1;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients() 
{ 
	double k = Math.Tan(Math.PI * Frequency / SampleRate); 
	double multiplier = 1 / (1 + k/Q + (k * k)); 
	A0 = (1 + (k * k)) * multiplier; 
	A1 = (2 * (k * k - 1)) * multiplier; 
	A2 = A0; 
	B1 = A1; 
	B2 = (1 - k/Q + (k * k)) * multiplier; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
220
7
Gpt3D_Clone220_7.cs 1 9
Gpt3D_Clone220_7.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = (1 + k * k) * norm;
    A1 = 2 * (k * k - 1) * norm;
    A2 = A0;
    B1 = A1;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients() 
{ 
	double k = Math.Tan(Math.PI * Frequency / SampleRate); 
	double denominator = (1 + k/Q + (k * k)); 
	A0 = (1 + k * k) / denominator; 
	A1 = 2 * (k * k - 1) / denominator; 
	A2 = A0; 
	B1 = A1; 
	B2 = (1 - k / Q + k * k) / denominator; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
220
8
Gpt3D_Clone220_8.cs 1 9
Gpt3D_Clone220_8.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = (1 + k * k) * norm;
    A1 = 2 * (k * k - 1) * norm;
    A2 = A0;
    B1 = A1;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients() 
{ 
	double k = Math.Tan(Math.PI * Frequency / SampleRate); 
	double normalizer = 1 / (1 + k/Q + (k * k)); 
	A0 = normalizer * (1 + (k * k)); 
	A1 = normalizer * (2 * (k * k - 1)); 
	A2 = A0; 
	B1 = A1; 
	B2 = normalizer * (1 - k/Q + (k * k)); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
220
9
Gpt3D_Clone220_9.cs 1 9
Gpt3D_Clone220_9.cs 10 21
----------------------------------------

protected override void CalculateBiQuadCoefficients () {
    double k = Math.Tan (Math.PI * Frequency / SampleRate);
    double norm = 1 / (1 + k / Q + k * k);
    A0 = (1 + k * k) * norm;
    A1 = 2 * (k * k - 1) * norm;
    A2 = A0;
    B1 = A1;
    B2 = (1 - k / Q + k * k) * norm;
}
----------------------------------------

 protected override void CalculateBiQuadCoefficients() 
{ 
	double k = Math.Tan(Math.PI * Frequency / SampleRate); 
	double norm = 1 / (1 + k/Q + (k * k)); 
	A0 = (1 + k * k) / norm; 
	A1 = 2 * (k * k - 1) / norm; 
	A2 = A0; 
	B1 = A1; 
	B2 = (1 - k / Q + k * k) / norm; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
221
0
Gpt3D_Clone221_0.cs 1 13
Gpt3D_Clone221_0.cs 14 27
----------------------------------------

private static double GetHeadingError (double initial, double final) {
    if (initial > 360 || initial < 0 || final > 360 || final < 0) {
    }
    var diff = final - initial;
    var absDiff = Math.Abs (diff);
    if (absDiff <= 180) {
        return absDiff == 180 ? absDiff : diff;
    } else if (final > initial) {
        return absDiff - 360;
    } else {
        return 360 - absDiff;
    }
}
----------------------------------------

 private static double GetHeadingError (double initial, double final) {
    if (initial > 360 || initial < 0 || final > 360 || final < 0) {
    }
    var diff = final - initial;
    var absDiff = Math.Abs (diff);
    if (absDiff <= 180)
        return diff;
    else if (final > initial)
        return Subtract(absDiff, 360);
    else 
        return Subtract(360, absDiff);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
221
1
Gpt3D_Clone221_1.cs 1 13
Gpt3D_Clone221_1.cs 14 27
----------------------------------------

private static double GetHeadingError (double initial, double final) {
    if (initial > 360 || initial < 0 || final > 360 || final < 0) {
    }
    var diff = final - initial;
    var absDiff = Math.Abs (diff);
    if (absDiff <= 180) {
        return absDiff == 180 ? absDiff : diff;
    } else if (final > initial) {
        return absDiff - 360;
    } else {
        return 360 - absDiff;
    }
}
----------------------------------------

 private static double GetHeadingError (double initial, double final) {
    if (initial > 360 || initial < 0 || final > 360 || final < 0) {
    }
    var diff = final - initial;
    var absDiff = Math.Abs (diff);
    if (absDiff > 0  && absDiff <= 180)
        return diff;
    else if (final > initial)
        return Subtract(absDiff, 360);
    else 
        return Subtract(360, absDiff);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
221
2
Gpt3D_Clone221_2.cs 1 13
Gpt3D_Clone221_2.cs 14 25
----------------------------------------

private static double GetHeadingError (double initial, double final) {
    if (initial > 360 || initial < 0 || final > 360 || final < 0) {
    }
    var diff = final - initial;
    var absDiff = Math.Abs (diff);
    if (absDiff <= 180) {
        return absDiff == 180 ? absDiff : diff;
    } else if (final > initial) {
        return absDiff - 360;
    } else {
        return 360 - absDiff;
    }
}
----------------------------------------

 private static double GetHeadingError (double initial, double final) {
    if (initial > 360 || initial < 0 || final > 360 || final < 0) {
    }
    var diff = final - initial;
    var absDiff = Math.Abs (diff);
    if (absDiff <= 180)
        return diff;
    else
        return ComputeAbsoluteDifference(absDiff, final, initial);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
221
3
Gpt3D_Clone221_3.cs 1 13
Gpt3D_Clone221_3.cs 14 25
----------------------------------------

private static double GetHeadingError (double initial, double final) {
    if (initial > 360 || initial < 0 || final > 360 || final < 0) {
    }
    var diff = final - initial;
    var absDiff = Math.Abs (diff);
    if (absDiff <= 180) {
        return absDiff == 180 ? absDiff : diff;
    } else if (final > initial) {
        return absDiff - 360;
    } else {
        return 360 - absDiff;
    }
}
----------------------------------------

 private static double GetHeadingError (double initial, double final) {
    if (initial > 360 || initial < 0 || final > 360 || final < 0) {
    }
    var diff = final - initial;
    var absDiff = Math.Abs (diff);
    if (final > initial) 
        return (absDiff <= 180) ? diff : diff - 360;
    else 
        return (absDiff > 180) ? 360 - absDiff : absDiff;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
221
4
Gpt3D_Clone221_4.cs 1 13
Gpt3D_Clone221_4.cs 14 25
----------------------------------------

private static double GetHeadingError (double initial, double final) {
    if (initial > 360 || initial < 0 || final > 360 || final < 0) {
    }
    var diff = final - initial;
    var absDiff = Math.Abs (diff);
    if (absDiff <= 180) {
        return absDiff == 180 ? absDiff : diff;
    } else if (final > initial) {
        return absDiff - 360;
    } else {
        return 360 - absDiff;
    }
}
----------------------------------------

 private static double GetHeadingError (double initial, double final) {
    if (initial > 360 || initial < 0 || final > 360 || final < 0) {
    }
    var diff = final - initial;
    var absDiff = Math.Abs (diff);
    if (absDiff > 180)
        return absDiff == 360 ? 0 : ( 360 - absDiff ) * Math.Sign (final - initial);
    else
        return diff;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
221
5
Gpt3D_Clone221_5.cs 1 13
Gpt3D_Clone221_5.cs 14 25
----------------------------------------

private static double GetHeadingError (double initial, double final) {
    if (initial > 360 || initial < 0 || final > 360 || final < 0) {
    }
    var diff = final - initial;
    var absDiff = Math.Abs (diff);
    if (absDiff <= 180) {
        return absDiff == 180 ? absDiff : diff;
    } else if (final > initial) {
        return absDiff - 360;
    } else {
        return 360 - absDiff;
    }
}
----------------------------------------

 private static double GetHeadingError (double initial, double final) {
    if (initial > 360 || initial < 0 || final > 360 || final < 0) {
    }
    var diff = final - initial;
    var absDiff = Math.Abs (diff);
    if (final > initial) 
        return (absDiff <= 180) ? diff : avg(diff - 360, absDiff - 180, diff + 180);
    else 
        return (absDiff > 180) ? avg(absDiff - 180, diff + 360, -absDiff) : diff;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
221
6
Gpt3D_Clone221_6.cs 1 13
Gpt3D_Clone221_6.cs 14 25
----------------------------------------

private static double GetHeadingError (double initial, double final) {
    if (initial > 360 || initial < 0 || final > 360 || final < 0) {
    }
    var diff = final - initial;
    var absDiff = Math.Abs (diff);
    if (absDiff <= 180) {
        return absDiff == 180 ? absDiff : diff;
    } else if (final > initial) {
        return absDiff - 360;
    } else {
        return 360 - absDiff;
    }
}
----------------------------------------

 private static double GetHeadingError (double initial, double final) {
    if (initial > 360 || initial < 0 || final > 360 || final < 0) {
    }
    var diff = final - initial;
    var absDiff = Math.Abs (diff);
    if (absDiff <= 180)
        return diff;
    else 
        return CalculateError(absDiff, final, initial);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
221
7
Gpt3D_Clone221_7.cs 1 13
Gpt3D_Clone221_7.cs 14 24
----------------------------------------

private static double GetHeadingError (double initial, double final) {
    if (initial > 360 || initial < 0 || final > 360 || final < 0) {
    }
    var diff = final - initial;
    var absDiff = Math.Abs (diff);
    if (absDiff <= 180) {
        return absDiff == 180 ? absDiff : diff;
    } else if (final > initial) {
        return absDiff - 360;
    } else {
        return 360 - absDiff;
    }
}
----------------------------------------

 private static double GetHeadingError (double initial, double final) {
    if (initial > 360 || initial < 0 || final > 360 || final < 0) {
    }
    var diff = final - initial;
    var absDiff = Math.Abs (diff);
    return (final > initial) 
        ? (absDiff <= 180) ? diff : ConditionalSubtract(diff, 360) 
        : (absDiff > 180) ? AddConditional(360, Subtract(absDiff, 180)) : absDiff;  
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
221
8
Gpt3D_Clone221_8.cs 1 13
Gpt3D_Clone221_8.cs 14 24
----------------------------------------

private static double GetHeadingError (double initial, double final) {
    if (initial > 360 || initial < 0 || final > 360 || final < 0) {
    }
    var diff = final - initial;
    var absDiff = Math.Abs (diff);
    if (absDiff <= 180) {
        return absDiff == 180 ? absDiff : diff;
    } else if (final > initial) {
        return absDiff - 360;
    } else {
        return 360 - absDiff;
    }
}
----------------------------------------

 private static double GetHeadingError (double initial, double final) {
    if (initial > 360 || initial < 0 || final > 360 || final < 0) {
    }
    var diff = final - initial;
    var absDiff = Math.Abs (diff);
    return (final > initial) 
        ? (absDiff <= 180) ? diff : Subtract(diff, 360) 
        : (absDiff > 180) ? Add(360, Subtract(absDiff, 180)) : absDiff;  
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
221
9
Gpt3D_Clone221_9.cs 1 13
Gpt3D_Clone221_9.cs 14 22
----------------------------------------

private static double GetHeadingError (double initial, double final) {
    if (initial > 360 || initial < 0 || final > 360 || final < 0) {
    }
    var diff = final - initial;
    var absDiff = Math.Abs (diff);
    if (absDiff <= 180) {
        return absDiff == 180 ? absDiff : diff;
    } else if (final > initial) {
        return absDiff - 360;
    } else {
        return 360 - absDiff;
    }
}
----------------------------------------

 private static double GetHeadingError (double initial, double final) {
    if (initial > 360 || initial < 0 || final > 360 || final < 0) {
    }
    var diff = final - initial;
    var absDiff = Math.Abs (diff);
    return (absDiff <= 180) ? diff: EvaluateDifference(absDiff, final, initial);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
223
0
Gpt3D_Clone223_0.cs 1 20
Gpt3D_Clone223_0.cs 21 42
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                } else {
                    return 0;
                }
            }
        }
    }
    return 0;
}
----------------------------------------

private long GetStakeholderId()
{
    string currentUserId = _userManager.GetUserId(User);
    long stakeholderId;
    var users = _userManager.Users.Where(u => u.Email == currentUserId);
    if(users.Any())
    {
        var user = users.Single();
        var stakeholders = _context.Stakeholders.Where(s => s.IdentityId == user.Id);
        if(stakeholders.Any())
        {
            stakeholderId = stakeholders.First().StakeholderId;
            return stakeholderId;
        }
    }
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
223
1
Gpt3D_Clone223_1.cs 1 20
Gpt3D_Clone223_1.cs 21 42
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                } else {
                    return 0;
                }
            }
        }
    }
    return 0;
}
----------------------------------------

private long GetStakeholderId()
{
    string currentUserId = _userManager.GetUserId(User);
    long stakeholderId;
    var users = _userManager.Users.Where(u => u.Email == currentUserId);
    if(users.Any())
    {
        var user = users.First();
        var stakeholders = _context.Stakeholders.Where(s => s.IdentityId == user.Id);
        if(stakeholders.Any())
        {
            stakeholderId = stakeholders.First().StakeholderId;
            return stakeholderId;
        }
    }
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
223
2
Gpt3D_Clone223_2.cs 1 20
Gpt3D_Clone223_2.cs 21 42
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                } else {
                    return 0;
                }
            }
        }
    }
    return 0;
}
----------------------------------------

private long GetStakeholderId()
{
    string currentUserId = _userManager.GetUserId(User);
    long stakeholderId;
    var users = _userManager.Users.Where(u => u.Email == currentUserId);
    if(users.Any())
    {
        var user = users.First();
        var stakeholders = _context.Stakeholders.FirstOrDefault(s => s.IdentityId == user.Id);
        if(stakeholders != null)
        {
            stakeholderId = stakeholders.StakeholderId;
            return stakeholderId;
        }
    }
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
223
3
Gpt3D_Clone223_3.cs 1 20
Gpt3D_Clone223_3.cs 21 42
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                } else {
                    return 0;
                }
            }
        }
    }
    return 0;
}
----------------------------------------

 
private long GetStakeholderId()
{
    string currentUserId = _userManager.GetUserId(User);
    long stakeholderId;
    var users = _userManager.Users.Where(u => u.Email == currentUserId);
    if(users.Any())
    {
        var user = users.Single();
        var stakeholders = _context.Stakeholders.FirstOrDefault(s => s.IdentityId == user.Id);
        if(stakeholders != null)
        {
            stakeholderId = stakeholders.StakeholderId;
            return stakeholderId;
        }
    }
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
223
4
Gpt3D_Clone223_4.cs 1 20
Gpt3D_Clone223_4.cs 21 42
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                } else {
                    return 0;
                }
            }
        }
    }
    return 0;
}
----------------------------------------

private long GetStakeholderId()
{
    string currentUserId = _userManager.GetUserId(User);
    long stakeholderId;
    var user = _userManager.Users.SingleOrDefault(u => u.Email == currentUserId);
    if(user != null)
    {
        var stakeholders = _context.Stakeholders.Where(s => s.IdentityId == user.Id);
        if(stakeholders.Any())
        {
            stakeholderId = stakeholders.First().StakeholderId;
            return stakeholderId;
        }
    }
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
223
5
Gpt3D_Clone223_5.cs 1 20
Gpt3D_Clone223_5.cs 21 41
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                } else {
                    return 0;
                }
            }
        }
    }
    return 0;
}
----------------------------------------

private long GetStakeholderId()
{
    string currentUserId = _userManager.GetUserId(User);
    long stakeholderId;
    var user = _userManager.Users.SingleOrDefault(u => u.Email == currentUserId);
    if(user != null)
    {
        var stakeholders = _context.Stakeholders.FirstOrDefault(s => s.IdentityId == user.Id);
        if(stakeholders != null)
        {
            stakeholderId = stakeholders.StakeholderId;
            return stakeholderId;
        }
    }
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
223
6
Gpt3D_Clone223_6.cs 1 20
Gpt3D_Clone223_6.cs 21 41
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                } else {
                    return 0;
                }
            }
        }
    }
    return 0;
}
----------------------------------------

private long GetStakeholderId()
{
    string currentUserId = _userManager.GetUserId(User);
    long stakeholderId;
    var user = _userManager.Users.Single(u => u.Email == currentUserId);
    if(user != null)
    {
        var stakeholders = _context.Stakeholders.Where(s => s.IdentityId == user.Id);
        if(stakeholders.Any())
        {
            stakeholderId = stakeholders.First().StakeholderId;
            return stakeholderId;
        }
    }
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
223
7
Gpt3D_Clone223_7.cs 1 20
Gpt3D_Clone223_7.cs 21 41
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                } else {
                    return 0;
                }
            }
        }
    }
    return 0;
}
----------------------------------------

 
private long GetStakeholderId() 
{
    string currentUserId = _userManager.GetUserId(User);
    long stakeholderId;
    var user = _userManager.Users.FirstOrDefault(u => u.Email == currentUserId);
    if(user != null)
    {
        var stakeholders = _context.Stakeholders.Where(s => s.IdentityId == user.Id);
        if(stakeholders.Any())
        {
            stakeholderId = stakeholders.First().StakeholderId;
            return stakeholderId;
        }
    }
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
223
8
Gpt3D_Clone223_8.cs 1 20
Gpt3D_Clone223_8.cs 21 41
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                } else {
                    return 0;
                }
            }
        }
    }
    return 0;
}
----------------------------------------

private long GetStakeholderId()
{
    string currentUserId = _userManager.GetUserId(User);
    long stakeholderId;
    var user = _userManager.Users.Select(u => u).First(u => u.Email == currentUserId);
    if(user != null)
    {
        var stakeholders = _context.Stakeholders.Where(s => s.IdentityId == user.Id);
        if(stakeholders.Any())
        {
            stakeholderId = stakeholders.First().StakeholderId;
            return stakeholderId;
        }
    }
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
223
9
Gpt3D_Clone223_9.cs 1 20
Gpt3D_Clone223_9.cs 21 41
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                } else {
                    return 0;
                }
            }
        }
    }
    return 0;
}
----------------------------------------

 
private long GetStakeholderId()
{
    string currentUserId = _userManager.GetUserId(User);
    long stakeholderId;
    var user = _userManager.Users.First(u => u.Email == currentUserId);
    if(user != null)
    {
        var stakeholders = _context.Stakeholders.Where(s => s.IdentityId == user.Id);
        if(stakeholders.Any())
        {
            stakeholderId = stakeholders.First().StakeholderId;
            return stakeholderId;
        }
    }
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
224
0
Gpt3D_Clone224_0.cs 1 20
Gpt3D_Clone224_0.cs 21 35
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                } else {
                    return 0;
                }
            }
        }
    }
    return 0;
}
----------------------------------------

  private long GetStakeholderId() {
    long stakeholderId = 0;
    string currentUserId = _userManager.GetUserId(User);
    var users = _userManager.Users.Where(u => u.Email == currentUserId).ToList();
    if (users.Count > 0) {
        var idForStakeholder = users[0].Id;
        var stakeholder = _context.Stakeholders.FirstOrDefault(s => s.IdentityId == idForStakeholder);
        if (stakeholder != null) {
            stakeholderId = stakeholder.StakeholderId;
        }
    }
    return stakeholderId;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
224
1
Gpt3D_Clone224_1.cs 1 20
Gpt3D_Clone224_1.cs 21 35
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                } else {
                    return 0;
                }
            }
        }
    }
    return 0;
}
----------------------------------------

  private long GetStakeholderId() {
    long stakeholderId = 0;
    string currentUserId = _userManager.GetUserId(User);
    var userId = _userManager.Users.FirstOrDefault(u => u.Email == currentUserId)?.Id;
    if (userId != null) {
        var stakeholderId1 = _context.Stakeholders.Where(s => s.IdentityId == userId)
            .Select(s => s.StakeholderId);
        if (stakeholderId1.Any()) {
            stakeholderId = stakeholderId1.First();
        }
    }
    return stakeholderId;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
224
2
Gpt3D_Clone224_2.cs 1 20
Gpt3D_Clone224_2.cs 21 34
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                } else {
                    return 0;
                }
            }
        }
    }
    return 0;
}
----------------------------------------

  private long GetStakeholderId() {
    long stakeholderId = 0;
    string currentUserId = _userManager.GetUserId(User);
    var user = _userManager.Users.SingleOrDefault(u => u.Email == currentUserId);
    if (user != null) {
        var stakeholder = _context.Stakeholders.SingleOrDefault(s => s.IdentityId == user.Id);
        if (stakeholder != null) {
            stakeholderId = stakeholder.StakeholderId;
        }
    }
    return stakeholderId;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
224
3
Gpt3D_Clone224_3.cs 1 20
Gpt3D_Clone224_3.cs 21 38
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                } else {
                    return 0;
                }
            }
        }
    }
    return 0;
}
----------------------------------------

  private long GetStakeholderId() {
    long stakeholderId = 0;
    string currentUserId = _userManager.GetUserId(User);
    var user = _userManager.Users
            .Where(u => u.Email == currentUserId)
            .Select(s => new {s.Id, s.Email})
            .FirstOrDefault();
    if (user != null) {
        var stakeholder = _context.Stakeholders
                        .Where(stk => stk.IdentityId == user.Id)
                        .Select(s => s.StakeholderId)
                        .FirstOrDefault();
        stakeholderId = stakeholder;
    }
    return stakeholderId;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
224
4
Gpt3D_Clone224_4.cs 1 20
Gpt3D_Clone224_4.cs 21 35
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                } else {
                    return 0;
                }
            }
        }
    }
    return 0;
}
----------------------------------------

  private long GetStakeholderId() {
    string currentUserId = _userManager.GetUserId(User);
    long stakeholderId = 0;
    var user = _userManager.Users.Where(u => u.Email == currentUserId).SingleOrDefault();
    if (user != null) {
        stakeholderId = _context
            .Stakeholders
            .Where(s => s.IdentityId == user.Id)
            .Select(s => s.StakeholderId)
            .SingleOrDefault();
    }
    return stakeholderId;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
224
5
Gpt3D_Clone224_5.cs 1 20
Gpt3D_Clone224_5.cs 21 31
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                } else {
                    return 0;
                }
            }
        }
    }
    return 0;
}
----------------------------------------

  private long GetStakeholderId() {
    long stakeholderId = 0;
    string currentUserId = _userManager.GetUserId(User);
    var user = _userManager.Users.Where(u => u.Email == currentUserId).SingleOrDefault();
    if (user != null) {
        stakeholderId = _context.Stakeholders.Where(s => s.IdentityId == user.Id).Select(s => s.StakeholderId).SingleOrDefault();
    }
    return stakeholderId;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
224
6
Gpt3D_Clone224_6.cs 1 20
Gpt3D_Clone224_6.cs 21 33
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                } else {
                    return 0;
                }
            }
        }
    }
    return 0;
}
----------------------------------------

  private long GetStakeholderId() {
    string currentUserId = _userManager.GetUserId(User);
    long stakeholderId = 0;
    var stakeholder = _context.Stakeholders
        .Where(stk => stk.IdentityId == _userManager.Users.FirstOrDefault(u => u.Email == currentUserId)?.Id)
        .FirstOrDefault();
    if (stakeholder != null) {
        stakeholderId = stakeholder.StakeholderId;
    }
    return stakeholderId;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
224
7
Gpt3D_Clone224_7.cs 1 20
Gpt3D_Clone224_7.cs 21 34
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                } else {
                    return 0;
                }
            }
        }
    }
    return 0;
}
----------------------------------------

  private long GetStakeholderId() {
    long stakeholderId = 0;
    string currentUserId = _userManager.GetUserId(User);
    var user = _userManager.Users.Where(u => u.Email.Equals(currentUserId)).FirstOrDefault();
    if (user != null) {
        stakeholderId = _context.Stakeholders
                        .Where(s => s.IdentityId.Equals(user.Id))
                        .Select(s => s.StakeholderId)
                        .FirstOrDefault();
    }
    return stakeholderId;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
225
0
Gpt3D_Clone225_0.cs 1 18
Gpt3D_Clone225_0.cs 19 39
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId = 0;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                }
            }
        }
    }
    return stakeholderId;
}
----------------------------------------

 private long GetStakeholderId()
{
    string currentUserId = _userManager.GetUserId(User);
    var stakeholderId = 0L;
    try 
    {
        stakeholderId = (from user in _userManager.Users
        join stakeholder in _context.Stakeholders
        on user.Id equals stakeholder.IdentityId
        where user.Email == currentUserId
        select stakeholder.StakeholderId).FirstOrDefault();
    }
    catch (Exception) 
    {
        return 0;   
    } 
    return stakeholderId;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
225
2
Gpt3D_Clone225_2.cs 1 18
Gpt3D_Clone225_2.cs 19 33
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId = 0;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                }
            }
        }
    }
    return stakeholderId;
}
----------------------------------------

 private long GetStakeholderId()
{
    string currentUserId = _userManager.GetUserId(User);
    var stakeholderId = 0L;
    var stakeholderQuery = from u in _userManager.Users
    join stakeholder in _context.Stakeholders
    on u.Id equals stakeholder.IdentityId
    where u.Email == currentUserId
    select stakeholder.StakeholderId ;
    stakeholderId = stakeholderQuery.FirstOrDefault();
    return stakeholderId;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
225
3
Gpt3D_Clone225_3.cs 1 18
Gpt3D_Clone225_3.cs 19 31
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId = 0;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                }
            }
        }
    }
    return stakeholderId;
}
----------------------------------------

 private long GetStakeholderId() 
{
    string currentUserId = _userManager.GetUserId(User);
    var user = _userManager.Users.Where(w => w.Email == currentUserId).FirstOrDefault();
    if (user != null)
    {
        var stakeholderId = _context.Stakeholders.Where(w => w.IdentityId == user.Id).Select(s => s.StakeholderId).FirstOrDefault();
        return stakeholderId;
    }
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
225
4
Gpt3D_Clone225_4.cs 1 18
Gpt3D_Clone225_4.cs 19 32
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId = 0;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                }
            }
        }
    }
    return stakeholderId;
}
----------------------------------------

 private long GetStakeholderId()
{
    string currentUserId = _userManager.GetUserId(User);
    var query = _context.Stakeholders.Join(_userManager.Users,
        s => s.IdentityId,
        u => u.Id,
        (s, u) => new { StakeholderId = s.StakeholderId, UserEmail = u.Email})
        .Where(w => w.UserEmail ==  currentUserId);
    if(query.Any())
        return query.FirstOrDefault().StakeholderId;
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
225
5
Gpt3D_Clone225_5.cs 1 18
Gpt3D_Clone225_5.cs 19 31
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId = 0;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                }
            }
        }
    }
    return stakeholderId;
}
----------------------------------------

 private long GetStakeholderId()
{
    string currentUserId = _userManager.GetUserId(User);
    var stakeholderId = _userManager.Users
                        .Join(_context.Stakeholders,
                             u => u.Id, 
                             s => s.IdentityId,
                             (u, s) => s.StakeholderId)
                        .FirstOrDefault(f => f.Email == currentUserId);                        
    return stakeholderId;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
225
6
Gpt3D_Clone225_6.cs 1 18
Gpt3D_Clone225_6.cs 19 33
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId = 0;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                }
            }
        }
    }
    return stakeholderId;
}
----------------------------------------

 private long GetStakeholderId()
{
    string userId = _userManager.GetUserId(User);
    long stakeholderId = _userManager.Users
                        .Where(w => w.Email == userId)
                        .Select(s => s.Id)
                        .Join(_context.Stakeholders, 
                             u => u, 
                             s => s.IdentityId,
                             (u, s) => s.StakeholderId)
                        .FirstOrDefault();
    return stakeholderId;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
225
7
Gpt3D_Clone225_7.cs 1 18
Gpt3D_Clone225_7.cs 19 32
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId = 0;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                }
            }
        }
    }
    return stakeholderId;
}
----------------------------------------

 private long GetStakeholderId()
{
    string currentUserId = _userManager.GetUserId(User);
    return _userManager.Users
                    .FirstOrDefault(f => f.Email == currentUserId)
                    .Id
                    .Join(_context.Stakeholders, 
                    u => u, 
                    s => s.IdentityId,
                    (u, s) => s.StakeholderId)
                    .FirstOrDefault();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
225
8
Gpt3D_Clone225_8.cs 1 18
Gpt3D_Clone225_8.cs 19 33
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId = 0;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                }
            }
        }
    }
    return stakeholderId;
}
----------------------------------------

 private long GetStakeholderId()
{
    string currentUserId = _userManager.GetUserId(User);
    return _userManager
            .Users
            .Where(w => w.Email == currentUserId)
            .Join(_context.Stakeholders, 
                  u => u.Id, 
                  s => s.IdentityId,
                  (u, s) => new { StakeholderId = s.StakeholderId })
            .Select(s => s.StakeholderId)
            .FirstOrDefault();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
225
9
Gpt3D_Clone225_9.cs 1 18
Gpt3D_Clone225_9.cs 19 30
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId = 0;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                }
            }
        }
    }
    return stakeholderId;
}
----------------------------------------

 private long GetStakeholderId()
 {
     string currentUserId = _userManager.GetUserId(User);
     return _context.Stakeholders
                    .Where(w => w.IdentityId == _userManager.Users
                                                        .FirstOrDefault(f => f.Email == currentUserId)
                                                        .Id)
                    .Select(s => s.StakeholderId)
                    .FirstOrDefault();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
226
1
Gpt3D_Clone226_1.cs 1 21
Gpt3D_Clone226_1.cs 22 56
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                } else {
                    return 0;
                }
            }
        }
        return 0;
    }
    return 0;
}
----------------------------------------

 private long GetStakeholderId()
{
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    
    // For each user in the list of users managed by the user manager
    for (int index = 0; index < users.Count; index++)
    {
        // If the user's email matches the current user's
        if (users[index].Email == currentUserId)
        {
            // Set the identity ID for the current user 
            var idForStakeholder = users[index].Id;
            var stakeholders = _context.Stakeholders;
            // For each stakeholder in the list of stakeholders managed by the context
            for (int i = 0; i < stakeholders.Count; i++)
            {
                // If the stakeholder's identity ID matches the current user's identity ID
                if (stakeholders[i].IdentityId == idForStakeholder)
                {
                    // Set the stakeholder ID for the current stakeholder
                    stakeholderId = stakeholders[i].StakeholderId;
                    return stakeholderId;
                }
            }
            break;
        }
    }
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
226
4
Gpt3D_Clone226_4.cs 1 21
Gpt3D_Clone226_4.cs 22 39
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                } else {
                    return 0;
                }
            }
        }
        return 0;
    }
    return 0;
}
----------------------------------------

 private long GetStakeholderId() {
    string currentUserId = _userManager.GetUserId(User);
    long stakeholderId;
    var users = _context.Users.Where(u => u.Email == currentUserId);
    if (users.Any() && users.Count() > 0) {
        var idForStakeholder = users.FirstOrDefault().Id;
        var stakeholders = _context.Stakeholders.Where(s => s.IdentityId == idForStakeholder);
        if (stakeholders.Any() && stakeholders.Count() > 0) {
            stakeholderId = stakeholders.FirstOrDefault().StakeholderId;
            return stakeholderId;
        } else {
            return 0;
        }
    } 
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
226
5
Gpt3D_Clone226_5.cs 1 21
Gpt3D_Clone226_5.cs 22 41
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                } else {
                    return 0;
                }
            }
        }
        return 0;
    }
    return 0;
}
----------------------------------------

 private long GetStakeholderId()
{
    string currentUserId = _userManager.GetUserId(User);
    long stakeholderId;
    var user = _userManager.Users.FirstOrDefault(u => u.Email == currentUserId);
    if (user != null)
    {
        var idForStakeholder = user.Id;
        var stakeholder = _context.Stakeholders.FirstOrDefault(s => s.IdentityId == idForStakeholder);
        if (stakeholder != null)
        {
            stakeholderId = stakeholder.StakeholderId;
            return stakeholderId;
        }
    }
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
226
6
Gpt3D_Clone226_6.cs 1 21
Gpt3D_Clone226_6.cs 22 45
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                } else {
                    return 0;
                }
            }
        }
        return 0;
    }
    return 0;
}
----------------------------------------

 private long GetStakeholderId()
{
    string currentUserId = _userManager.GetUserId(User);
    long stakeholderId = 0;
    
    foreach(var user in _context.Users)
    {
        if (user.Email == currentUserId)
        {
            foreach(var stakeholder in _context.Stakeholders)
            {
                if (stakeholder.IdentityId == user.Id)
                {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                }
            }
            break;
        }
    }
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
226
7
Gpt3D_Clone226_7.cs 1 21
Gpt3D_Clone226_7.cs 22 50
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                } else {
                    return 0;
                }
            }
        }
        return 0;
    }
    return 0;
}
----------------------------------------

 private long GetStakeholderId() {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var user = _context.Users.FirstOrDefault(u => u.Email == currentUserId);
    var stakeholders = _context.Stakeholders;
    if (user != null) {
        var idForStakeholder = user.Id;
        var tmpStakeholder = stakeholders.FirstOrDefault(s => s.IdentityId == idForStakeholder);
        if (tmpStakeholder != null){
            stakeholderId = tmpStakeholder.StakeholderId;
            return stakeholderId;
        } else {
            return 0;
        }
    }
    return 0; 
}    
 private long GetStakeholderId() {
    string currentUserId = _userManager.GetUserId(User);
    long stakeholderId = 0;
    var user = _context.Users.FirstOrDefault(u => u.Email == currentUserId);
    if (user != null) {
        stakeholderId = _context.Stakeholders.FirstOrDefault(s => s.IdentityId == user.Id)?.StakeholderId ?? 0;
    }
    return stakeholderId;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
226
8
Gpt3D_Clone226_8.cs 1 21
Gpt3D_Clone226_8.cs 22 34
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                } else {
                    return 0;
                }
            }
        }
        return 0;
    }
    return 0;
}
----------------------------------------

 private long GetStakeholderId()
{
    string currentUserId = _userManager.GetUserId(User);
    long stakeholderId = 0;
    var user = _context.Users.FirstOrDefault(u => u.Email == currentUserId);
    if (user != null)
    {
        stakeholderId = _context.Stakeholders.Where(s => s.IdentityId == user.Id).Select(s => s.StakeholderId).FirstOrDefault();
    }
    return stakeholderId;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
227
1
Gpt3D_Clone227_1.cs 1 19
Gpt3D_Clone227_1.cs 20 34
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                }
            }
            return 0;
        }
    }
    return 0;
}
----------------------------------------

 private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var user = _userManager.Users.Where(u => u.Email == currentUserId).FirstOrDefault();
    if (user != null) {
        var stakeholder = _context.Stakeholders.Where(s => s.IdentityId == user.Id).FirstOrDefault();
        if (stakeholder != null) {
            stakeholderId = stakeholder.StakeholderId;
            return stakeholderId;
        }
    }
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
227
3
Gpt3D_Clone227_3.cs 1 19
Gpt3D_Clone227_3.cs 20 37
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                }
            }
            return 0;
        }
    }
    return 0;
}
----------------------------------------

  private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId = 0;
    var emailStakeholder = from user in _userManager.Users
                                join stakeholder in _context.Stakeholders
                                on user.Id equals stakeholder.IdentityId
                                where user.Email == currentUserId
                                select new { stakeholder.StakeholderId };
    if (emailStakeholder.Any()) {
        stakeholderId = emailStakeholder.FirstOrDefault().StakeholderId;
    }
    return stakeholderId;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
227
4
Gpt3D_Clone227_4.cs 1 19
Gpt3D_Clone227_4.cs 20 56
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                }
            }
            return 0;
        }
    }
    return 0;
}
----------------------------------------

 private long GetStakeholderId()
    {
        string currentUserId = _userManager.GetUserId(User);
        long stakeholderId;
        var userId = _userManager.Users.Where(x => x.Email == currentUserId).Select(x => x.Id).FirstOrDefault();
        if (userId != 0)
        {
            stakeholderId = _context.Stakeholders.Where(x => x.IdentityId == userId).Select(x => x.StakeholderId).FirstOrDefault();
        }
        return stakeholderId;
    }
 private long GetStakeholderId()
    {
        string currentUserId = _userManager.GetUserId(User);
        long stakeholderId;
        var userId = _userManager.Users.Where(x => x.Email == currentUserId).Select(x => x.Id).ToList();
        if (userId.Any())
        {
            stakeholderId = _context.Stakeholders.Where(x => userId.Contains(x.IdentityId)).Select(x => x.StakeholderId).FirstOrDefault();
            return stakeholderId;
        }
        return 0;
    }
 private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId(User);
    var userId = _context.Users.FirstOrDefault(u => u.Email == currentUserId)?.Id;
    if (userId != null) 
    {
        return _context.Stakeholders.FirstOrDefault(s => s.IdentityId == userId)?.StakeholderId ?? 0;
    }
    
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
227
5
Gpt3D_Clone227_5.cs 1 19
Gpt3D_Clone227_5.cs 20 49
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                }
            }
            return 0;
        }
    }
    return 0;
}
----------------------------------------

 private long GetStakeholderId()
    {
        string currentUserId = _userManager.GetUserId(User);
        long stakeholderId;
        var user = _userManager.Users.FirstOrDefault(x => x.Email == currentUserId);
        if (user != null)
        {
            stakeholderId = _context.Stakeholders.FirstOrDefault(x => x.IdentityId == user.Id).StakeholderId;
            return stakeholderId;
        }
        return 0;
    }
 private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    var stakeholders = _context.Stakeholders;
    foreach (var user in users.Where(u => u.Email == currentUserId))
    {
        foreach(var stakeholder in stakeholders.Where(s => s.IdentityId == user.Id))
        {
                stakeholderId = stakeholder.StakeholderId;
                return stakeholderId;
        }
    }
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
227
6
Gpt3D_Clone227_6.cs 1 19
Gpt3D_Clone227_6.cs 20 56
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                }
            }
            return 0;
        }
    }
    return 0;
}
----------------------------------------

 private long GetStakeholderId()
    {
        string currentUserId = _userManager.GetUserId(User);
        long stakeholderId;
        var userId = _userManager.Users.Where(x => x.Email == currentUserId).Select(x => x.Id).FirstOrDefault();
        if (userId != 0)
        {
            stakeholderId = _context.Stakeholders.Where(x => x.IdentityId == userId).Select(x => x.StakeholderId).FirstOrDefault();
        }
        return stakeholderId;
    }
 private long GetStakeholderId()
    {
        string currentUserId = _userManager.GetUserId(User);
        long stakeholderId;
        var userId = _userManager.Users.Where(x => x.Email == currentUserId).Select(x => x.Id).ToList();
        if (userId.Any())
        {
            stakeholderId = _context.Stakeholders.Where(x => userId.Contains(x.IdentityId)).Select(x => x.StakeholderId).FirstOrDefault();
            return stakeholderId;
        }
        return 0;
    }
 private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId(User);
    var userId = _context.Users.FirstOrDefault(u => u.Email == currentUserId)?.Id;
    if (userId != null) 
    {
        return _context.Stakeholders.FirstOrDefault(s => s.IdentityId == userId)?.StakeholderId ?? 0;
    }
    
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
227
7
Gpt3D_Clone227_7.cs 1 19
Gpt3D_Clone227_7.cs 20 31
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                }
            }
            return 0;
        }
    }
    return 0;
}
----------------------------------------

 private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    var user = _userManager.Users.Where(u => u.Email == currentUserId).FirstOrDefault();
    if (user != null) 
    {
        return _context.Stakeholders.Where(s => s.IdentityId == user.Id).Select(s => s.StakeholderId).FirstOrDefault;
    }
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
227
8
Gpt3D_Clone227_8.cs 1 19
Gpt3D_Clone227_8.cs 20 56
----------------------------------------

private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId (User);
    long stakeholderId;
    var users = _userManager.Users;
    foreach (var user in users) {
        if (user.Email == currentUserId) {
            var idForStakeholder = user.Id;
            var stakeholders = _context.Stakeholders;
            foreach (var stakeholder in stakeholders) {
                if (stakeholder.IdentityId == idForStakeholder) {
                    stakeholderId = stakeholder.StakeholderId;
                    return stakeholderId;
                }
            }
            return 0;
        }
    }
    return 0;
}
----------------------------------------

 private long GetStakeholderId()
    {
        string currentUserId = _userManager.GetUserId(User);
        long stakeholderId;
        var userId = _userManager.Users.Where(x => x.Email == currentUserId).Select(x => x.Id).FirstOrDefault();
        if (userId != 0)
        {
            stakeholderId = _context.Stakeholders.Where(x => x.IdentityId == userId).Select(x => x.StakeholderId).FirstOrDefault();
        }
        return stakeholderId;
    }
 private long GetStakeholderId()
    {
        string currentUserId = _userManager.GetUserId(User);
        long stakeholderId;
        var userId = _userManager.Users.Where(x => x.Email == currentUserId).Select(x => x.Id).ToList();
        if (userId.Any())
        {
            stakeholderId = _context.Stakeholders.Where(x => userId.Contains(x.IdentityId)).Select(x => x.StakeholderId).FirstOrDefault();
            return stakeholderId;
        }
        return 0;
    }
 private long GetStakeholderId () {
    string currentUserId = _userManager.GetUserId(User);
    var userId = _context.Users.FirstOrDefault(u => u.Email == currentUserId)?.Id;
    if (userId != null) 
    {
        return _context.Stakeholders.FirstOrDefault(s => s.IdentityId == userId)?.StakeholderId ?? 0;
    }
    
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
22
1
Gpt3D_Clone22_1.cs 1 16
Gpt3D_Clone22_1.cs 17 50
----------------------------------------

static void Main (string [] args) {
    List < double > enteredNubers = new List < double > ();
    Console.WriteLine ("Enter number(s) or 0 to end: ");
    while (true) {
        string userinput = Console.ReadLine ().Trim ();
        if (userinput == "0")
            break;
        double num;
        if (double.TryParse (userinput, out num)) {
            enteredNubers.Add (num);
        } else
            Console.WriteLine ("Wrong input. Please enter number or 0 to end");
    }
    Average (enteredNubers);
    Console.ReadKey ();
}
----------------------------------------

 static void Main(string[] args)
    {
        double[] numbers = new double[100];
        int count = 0;
        bool finishedInput = false;
        
        Console.WriteLine("Enter numbers(s) or 0 to end: ");
        while (!finishedInput)
        {
            string userInput = Console.ReadLine().Trim();
            if (userInput == "0") 
            {
                finishedInput = true;
            }
            else
            {
                double number;
                if (double.TryParse(userInput, out number))
                {
                    numbers[count++] = number;
                }
                else
                {
                    Console.WriteLine("Wrong input. Please enter numbers or 0 to end");
                }
            }
        }
        Average(numbers, count);
        Console.ReadKey();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
230
0
Gpt3D_Clone230_0.cs 1 8
Gpt3D_Clone230_0.cs 9 24
----------------------------------------

void ICollection.CopyTo (Array array, int index) {
    if (array == null)
        throw new ArgumentNullException ("array");
    PlcParameter [] ppArray = array as PlcParameter [];
    if (ppArray == null)
        throw new ArgumentException ();
    ((ICollection < PlcParameter >) this).CopyTo (ppArray, index);
}
----------------------------------------

 void ICollection.CopyTo (Array array, int index) {
    if (array == null)
        throw new ArgumentNullException ("array");
    PlcParameter [] ppArray = array as PlcParameter [];
    if (ppArray == null)
        throw new ArgumentException ("Array should be of PlcParameter type");
    int itemIndex = 0;
    int arrayIndex = index;
    while (itemIndex < this.Count)
    {
        ppArray[arrayIndex] = this.ElementAt(itemIndex++) as PlcParameter;
        arrayIndex++;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
230
1
Gpt3D_Clone230_1.cs 1 8
Gpt3D_Clone230_1.cs 9 23
----------------------------------------

void ICollection.CopyTo (Array array, int index) {
    if (array == null)
        throw new ArgumentNullException ("array");
    PlcParameter [] ppArray = array as PlcParameter [];
    if (ppArray == null)
        throw new ArgumentException ();
    ((ICollection < PlcParameter >) this).CopyTo (ppArray, index);
}
----------------------------------------

 void ICollection.CopyTo (Array array, int index) {
    if (array == null)
        throw new ArgumentNullException ("array");
    PlcParameter [] ppArray = array as PlcParameter [];
    if (ppArray == null)
        throw new ArgumentException ("Array should be of PlcParameter type");
    int i = index;
    foreach (PlcParameter item in this)
    {
        ppArray[i] = item;
        i++; 
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
230
2
Gpt3D_Clone230_2.cs 1 8
Gpt3D_Clone230_2.cs 9 23
----------------------------------------

void ICollection.CopyTo (Array array, int index) {
    if (array == null)
        throw new ArgumentNullException ("array");
    PlcParameter [] ppArray = array as PlcParameter [];
    if (ppArray == null)
        throw new ArgumentException ();
    ((ICollection < PlcParameter >) this).CopyTo (ppArray, index);
}
----------------------------------------

 void ICollection.CopyTo (Array array, int index) {
    if (array == null)
        throw new ArgumentNullException ("array");
    PlcParameter [] ppArray = array as PlcParameter [];
    if (ppArray == null)
        throw new ArgumentException ("Array should be of PlcParameter type");
    int currentIndex = index;
    foreach (var item in this)
    {
        ppArray[currentIndex] = item;
        currentIndex++;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
230
3
Gpt3D_Clone230_3.cs 1 8
Gpt3D_Clone230_3.cs 9 23
----------------------------------------

void ICollection.CopyTo (Array array, int index) {
    if (array == null)
        throw new ArgumentNullException ("array");
    PlcParameter [] ppArray = array as PlcParameter [];
    if (ppArray == null)
        throw new ArgumentException ();
    ((ICollection < PlcParameter >) this).CopyTo (ppArray, index);
}
----------------------------------------

 void ICollection.CopyTo (Array array, int index) {
    if (array == null)
        throw new ArgumentNullException ("array");
    PlcParameter [] ppArray = array as PlcParameter [];
    if (ppArray == null)
        throw new ArgumentException ("Array should be of PlcParameter type");
    int pos = index;
    for(int i = 0; i < this.Count; i++)
    {
        ppArray[pos] = this[i] as PlcParameter;
        pos++; 
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
236
0
Gpt3D_Clone236_0.cs 1 11
Gpt3D_Clone236_0.cs 12 42
----------------------------------------

private bool CheckConnection () {
    WebClient client = new WebClient ();
    try {
        using (client.OpenRead ("http://www.google.com"))
        {
        } return true;
    }
    catch (WebException) {
        return false;
    }
}
----------------------------------------

  private bool CheckConnection() {
        HttpWebRequest req = (HttpWebRequest)WebRequest.Create("http://www.google.com");
        try 
        {
            HttpWebResponse resp = (HttpWebResponse)req.GetResponse();
            if (resp.StatusCode == HttpStatusCode.OK) 
            {
                resp.Close();
                return true;
            }
        }
        catch (WebException) 
        {
            return false;
        }
        return false;
    }
 private bool CheckConnection() { 
	try { 
        using (WebClient client = new WebClient()) 
		{ 
			client.DownloadString("http://www.google.com"); 
			return true; 
		} 
	} catch (WebException) { 
		return false; 
	} 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
237
0
Gpt3D_Clone237_0.cs 1 18
Gpt3D_Clone237_0.cs 19 44
----------------------------------------

public RegionContext GetContext (string regionCode) {
    RegionContext temp = null;
    RegionContext rc = null;
    try {
        if (! this.contextCache.TryGetValue (regionCode.ToUpper (), out rc)) {
            temp = new RegionContext (regionCode);
            this.contextCache.Add (regionCode.ToUpper (), temp);
            rc = temp;
            temp = null;
        }
        return rc;
    }
    finally {
        if (temp != null) {
            temp.Dispose ();
        }
    }
}
----------------------------------------

 public RegionContext GetContext (string regionCode) {
    RegionContext temp = null;
    RegionContext rc = null;
    string upperCode = regionCode.ToUpper();
    bool newContext = false;
    
    lock (this.contextCache) {
        if (!this.contextCache.TryGetValue (upperCode, out rc)) {
            newContext = true;
        }
    }
    if (newContext) {
        temp = new RegionContext (regionCode);
        lock (this.contextCache) {
            if (!this.contextCache.ContainsKey (upperCode)) {
                this.contextCache.Add (upperCode, temp);
            }
        }
        rc = temp;
        temp = null;
    }
    return rc;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
237
1
Gpt3D_Clone237_1.cs 1 18
Gpt3D_Clone237_1.cs 19 43
----------------------------------------

public RegionContext GetContext (string regionCode) {
    RegionContext temp = null;
    RegionContext rc = null;
    try {
        if (! this.contextCache.TryGetValue (regionCode.ToUpper (), out rc)) {
            temp = new RegionContext (regionCode);
            this.contextCache.Add (regionCode.ToUpper (), temp);
            rc = temp;
            temp = null;
        }
        return rc;
    }
    finally {
        if (temp != null) {
            temp.Dispose ();
        }
    }
}
----------------------------------------

 public RegionContext GetContext (string regionCode) {
    RegionContext temp = null;
    RegionContext rc = null;
    bool containskey = false;
    lock (this.contextCache) {
        containskey = this.contextCache.ContainsKey (regionCode.ToUpper ());
    }
    if (!containskey) {
        temp = new RegionContext (regionCode);
        lock (this.contextCache) {
            if (!this.contextCache.ContainsKey (regionCode.ToUpper ())) {
                this.contextCache.Add (regionCode.ToUpper (), temp);
                rc = temp;
                temp = null;
            }
        }
    }
    else {
        rc = this.contextCache[regionCode.ToUpper ()]; 
    } 
    return rc;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
237
2
Gpt3D_Clone237_2.cs 1 18
Gpt3D_Clone237_2.cs 19 38
----------------------------------------

public RegionContext GetContext (string regionCode) {
    RegionContext temp = null;
    RegionContext rc = null;
    try {
        if (! this.contextCache.TryGetValue (regionCode.ToUpper (), out rc)) {
            temp = new RegionContext (regionCode);
            this.contextCache.Add (regionCode.ToUpper (), temp);
            rc = temp;
            temp = null;
        }
        return rc;
    }
    finally {
        if (temp != null) {
            temp.Dispose ();
        }
    }
}
----------------------------------------

 public RegionContext GetContext (string regionCode) {
    RegionContext temp = null;
    RegionContext rc = null;
    string upperCode = regionCode.ToUpper();
    
    lock (this.contextCache) {
        if (this.contextCache.ContainsKey (upperCode)) {
            rc = this.contextCache[upperCode];
        }
        else {
            temp = new RegionContext (regionCode);
            this.contextCache.Add (upperCode, temp);
            rc = temp;
            temp = null;
        }
    }
    return rc;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
237
3
Gpt3D_Clone237_3.cs 1 18
Gpt3D_Clone237_3.cs 19 34
----------------------------------------

public RegionContext GetContext (string regionCode) {
    RegionContext temp = null;
    RegionContext rc = null;
    try {
        if (! this.contextCache.TryGetValue (regionCode.ToUpper (), out rc)) {
            temp = new RegionContext (regionCode);
            this.contextCache.Add (regionCode.ToUpper (), temp);
            rc = temp;
            temp = null;
        }
        return rc;
    }
    finally {
        if (temp != null) {
            temp.Dispose ();
        }
    }
}
----------------------------------------

 public RegionContext GetContext (string regionCode) {
    RegionContext rc = null;        
    lock (this.contextCache) {
        if (this.contextCache.ContainsKey (regionCode.ToUpper())) {
            rc = this.contextCache[regionCode.ToUpper ()];
        } else {
            RegionContext temp = new RegionContext (regionCode);
            this.contextCache.Add (regionCode.ToUpper (), temp);
            rc = temp;
            temp = null;
        }
        return rc;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
237
5
Gpt3D_Clone237_5.cs 1 18
Gpt3D_Clone237_5.cs 19 36
----------------------------------------

public RegionContext GetContext (string regionCode) {
    RegionContext temp = null;
    RegionContext rc = null;
    try {
        if (! this.contextCache.TryGetValue (regionCode.ToUpper (), out rc)) {
            temp = new RegionContext (regionCode);
            this.contextCache.Add (regionCode.ToUpper (), temp);
            rc = temp;
            temp = null;
        }
        return rc;
    }
    finally {
        if (temp != null) {
            temp.Dispose ();
        }
    }
}
----------------------------------------

 public RegionContext GetContext (string regionCode) {
    RegionContext rc = null;
    if (this.contextCache.ContainsKey (regionCode.ToUpper()))
        rc = this.contextCache[regionCode.ToUpper ()];
    else {
        RegionContext temp = new RegionContext (regionCode);
        lock (this.contextCache) {
            if (!this.contextCache.ContainsKey (regionCode.ToUpper ())) {
                this.contextCache.Add (regionCode.ToUpper (), temp);
            }
        }
        rc = temp;
        temp = null;
    }
    return rc;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
237
6
Gpt3D_Clone237_6.cs 1 18
Gpt3D_Clone237_6.cs 19 34
----------------------------------------

public RegionContext GetContext (string regionCode) {
    RegionContext temp = null;
    RegionContext rc = null;
    try {
        if (! this.contextCache.TryGetValue (regionCode.ToUpper (), out rc)) {
            temp = new RegionContext (regionCode);
            this.contextCache.Add (regionCode.ToUpper (), temp);
            rc = temp;
            temp = null;
        }
        return rc;
    }
    finally {
        if (temp != null) {
            temp.Dispose ();
        }
    }
}
----------------------------------------

 public RegionContext GetContext (string regionCode) {
    RegionContext rc = null;
    lock (this.contextCache) {
        if (this.contextCache.ContainsKey (regionCode.ToUpper()))
            rc = this.contextCache[regionCode.ToUpper ()];
        else {
            RegionContext temp = new RegionContext (regionCode);
            this.contextCache.Add (regionCode.ToUpper (), temp);
            rc = temp;
            temp = null;
        }
    }
    return rc;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
237
8
Gpt3D_Clone237_8.cs 1 18
Gpt3D_Clone237_8.cs 19 32
----------------------------------------

public RegionContext GetContext (string regionCode) {
    RegionContext temp = null;
    RegionContext rc = null;
    try {
        if (! this.contextCache.TryGetValue (regionCode.ToUpper (), out rc)) {
            temp = new RegionContext (regionCode);
            this.contextCache.Add (regionCode.ToUpper (), temp);
            rc = temp;
            temp = null;
        }
        return rc;
    }
    finally {
        if (temp != null) {
            temp.Dispose ();
        }
    }
}
----------------------------------------

 public RegionContext GetContext (string regionCode) {
    RegionContext rc = null;
    lock(this.contextCache) {
        if (! this.contextCache.TryGetValue (regionCode.ToUpper (), out rc)) {
            RegionContext temp = new RegionContext (regionCode);
            this.contextCache.Add (regionCode.ToUpper (), temp);
            rc = temp;
            temp = null;
        }
    }
    return rc;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
243
0
Gpt3D_Clone243_0.cs 1 9
Gpt3D_Clone243_0.cs 10 26
----------------------------------------

public void ShotHit (Point shot, bool sunk) {
    HitShots.AddLast (shot);
    MissCount = 0;
    EndPoints [1] = shot;
    if (EndPoints [0] == null)
        EndPoints [0] = shot;
    if (sunk)
        NullOutTarget ();
}
----------------------------------------

 public void ShotHit (Point shot, bool sunk) {
      HitShots.InsertLast(shot);
      MissCount = 0;
      EndPoints[1] = shot;
      if (EndPoints[0] == null) {
        EndPoints[0] = shot;
      }
      if (sunk) {
        EndPoints = new Point[2];
        EndPoints[0].X = 0;
        EndPoints[0].Y = 0;
        EndPoints[1].X = 0;
        EndPoints[1].Y = 0;
      }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
243
1
Gpt3D_Clone243_1.cs 1 9
Gpt3D_Clone243_1.cs 10 25
----------------------------------------

public void ShotHit (Point shot, bool sunk) {
    HitShots.AddLast (shot);
    MissCount = 0;
    EndPoints [1] = shot;
    if (EndPoints [0] == null)
        EndPoints [0] = shot;
    if (sunk)
        NullOutTarget ();
}
----------------------------------------

 public void ShotHit (Point shot, bool sunk) {
        HitShots.Add(shot);
        MissCount = 0;
        EndPoints[1] = shot;
        if (EndPoints[0] == null) {
          EndPoints[0] = shot;
        }
        if (sunk) {
          EndPoints = new Point[2]; 
          EndPoints[0] = new Point(); 
          EndPoints[1] = new Point();
          HitShots.Remove(shot);
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
243
2
Gpt3D_Clone243_2.cs 1 9
Gpt3D_Clone243_2.cs 10 24
----------------------------------------

public void ShotHit (Point shot, bool sunk) {
    HitShots.AddLast (shot);
    MissCount = 0;
    EndPoints [1] = shot;
    if (EndPoints [0] == null)
        EndPoints [0] = shot;
    if (sunk)
        NullOutTarget ();
}
----------------------------------------

 public void ShotHit (Point shot, bool sunk) {
      HitShots.AddFirst(shot);
      MissCount = 0;
      EndPoints[1] = shot;
      if (EndPoints[0] == null) {
        EndPoints[0] = shot;
      }
      if (sunk) {
        EndPoints[0] = Point.Zero;
        EndPoints[1] = Point.Zero;
        HitShots.Remove(shot);
      }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
243
3
Gpt3D_Clone243_3.cs 1 9
Gpt3D_Clone243_3.cs 10 25
----------------------------------------

public void ShotHit (Point shot, bool sunk) {
    HitShots.AddLast (shot);
    MissCount = 0;
    EndPoints [1] = shot;
    if (EndPoints [0] == null)
        EndPoints [0] = shot;
    if (sunk)
        NullOutTarget ();
}
----------------------------------------

 public void ShotHit (Point shot, bool sunk) {
      HitShots.Insert(shot);
      MissCount = 0;
      EndPoints[1] = shot;
      if (EndPoints[0] == null) {
        EndPoints[0] = shot;
      }
      if (sunk) {
        for (int i=0; i<EndPoints.length; i++) {
          EndPoints[i].X = 0;
          EndPoints[i].Y = 0;
        }
      }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
243
4
Gpt3D_Clone243_4.cs 1 9
Gpt3D_Clone243_4.cs 10 24
----------------------------------------

public void ShotHit (Point shot, bool sunk) {
    HitShots.AddLast (shot);
    MissCount = 0;
    EndPoints [1] = shot;
    if (EndPoints [0] == null)
        EndPoints [0] = shot;
    if (sunk)
        NullOutTarget ();
}
----------------------------------------

 public void ShotHit (Point shot, bool sunk) {
      HitShots.Enqueue(shot);
      MissCount = 0;
      EndPoints[1] = shot;
      if (EndPoints[0] == null) {
        EndPoints[0] = shot;
      }
      if (sunk) {
        EndPoints = new Point[2];
        EndPoints[0] = null;
        EndPoints[1] = null;
      }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
245
9
Gpt3D_Clone245_9.cs 1 23
Gpt3D_Clone245_9.cs 24 39
----------------------------------------

public Point GetShot () {
    Point p = new Point ();
    if (attackVector.Count () > 0) {
        p = ExtendShot ();
        return p;
    }
    Board potential = new Board (size);
    for (p.Y = 0; p.Y < size.Height; ++ p.Y) {
        for (p.X = 0; p.X < size.Width; ++ p.X) {
            if (shotBoard.ShotAt (p)) {
                potential [p] = 0;
                continue;
            }
            foreach (HunterBoard b in targetBoards) {
                potential [p] += b.GetWeightAt (p);
            }
        }
    }
    Point shot;
    shot = potential.GetWeightedRandom (rand.NextDouble ());
    shotBoard [shot] = Shot.Unresolved;
    return shot;
}
----------------------------------------

  public Point GetShot()
{
    if (attackVector.Count() > 0)
    {
        return ExtendShot();
    }
    else
    {
        Point shot;
        shot = GetRandomPoint();
        shotBoard[shot] = Shot.Unresolved;
        return shot;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
24
0
Gpt3D_Clone24_0.cs 1 15
Gpt3D_Clone24_0.cs 16 46
----------------------------------------

static void Main (string [] args) {
    var assemblyFilename = args.FirstOrDefault ();
    if (assemblyFilename != null && File.Exists (assemblyFilename)) {
        try {
            var assembly = Assembly.ReflectionOnlyLoadFrom (assemblyFilename);
            var name = assembly.GetName ();
            using (var file = File.AppendText ("C:\\AssemblyInfo.txt"))
            {
                file.WriteLine ("{0} - {1}", name.FullName, name.Version);
            }}
        catch (Exception ex) {
            throw;
        }
    }
}
----------------------------------------

 static void Main (string[] args)
{
    if (args != null && args.Length > 0 && File.Exists(args[0]))
    {
        try
        {
            Assembly assembly = Assembly.ReflectionOnlyLoadFrom(args[0]);
            AssemblyName name = assembly.GetName();
            StreamWriter writer = null;
            try
            {
                writer = new StreamWriter("C:\\AssemblyInfo.txt", append: true);
                writer.WriteLine("{0} - {1}", name.FullName, name.Version);
            }
            catch (Exception ex)
            {
                throw;
            }
            finally
            {
                if (writer != null) writer.Dispose();
            }
        }
        catch (Exception ex)
        {
            throw;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
24
1
Gpt3D_Clone24_1.cs 1 15
Gpt3D_Clone24_1.cs 16 45
----------------------------------------

static void Main (string [] args) {
    var assemblyFilename = args.FirstOrDefault ();
    if (assemblyFilename != null && File.Exists (assemblyFilename)) {
        try {
            var assembly = Assembly.ReflectionOnlyLoadFrom (assemblyFilename);
            var name = assembly.GetName ();
            using (var file = File.AppendText ("C:\\AssemblyInfo.txt"))
            {
                file.WriteLine ("{0} - {1}", name.FullName, name.Version);
            }}
        catch (Exception ex) {
            throw;
        }
    }
}
----------------------------------------

 static void Main (string[] args) 
{
    if (args != null && args.Any() && File.Exists(args[0])) 
    {
        try 
        {
            Assembly assembly = Assembly.ReflectionOnlyLoadFrom(args[0]);
            AssemblyName name = assembly.GetName();
            StreamWriter writer = File.AppendText("C:\\AssemblyInfo.txt");
            try
            {
                writer.WriteLine("{0} - {1}", name.FullName, name.Version);
            }
            catch (Exception ex)
            {
                throw;
            }
            finally
            {
                writer.Dispose();
            }
        }
        catch (Exception ex)
        {
            throw;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
24
2
Gpt3D_Clone24_2.cs 1 15
Gpt3D_Clone24_2.cs 16 42
----------------------------------------

static void Main (string [] args) {
    var assemblyFilename = args.FirstOrDefault ();
    if (assemblyFilename != null && File.Exists (assemblyFilename)) {
        try {
            var assembly = Assembly.ReflectionOnlyLoadFrom (assemblyFilename);
            var name = assembly.GetName ();
            using (var file = File.AppendText ("C:\\AssemblyInfo.txt"))
            {
                file.WriteLine ("{0} - {1}", name.FullName, name.Version);
            }}
        catch (Exception ex) {
            throw;
        }
    }
}
----------------------------------------

 static void Main(string[] args) 
{
    if (args != null && args.Length > 0 && File.Exists(args[0])) 
    {
        try
        {
            Assembly assembly = Assembly.ReflectionOnlyLoadFrom(args[0]);
            AssemblyName name = assembly.GetName();
            StreamWriter writer = null;
            try
            {
                writer = new StreamWriter("C:\\AssemblyInfo.txt", append: true);
                writer.WriteLine("{0} - {1}", name.FullName, name.Version);
            }
            finally
            {
                writer?.Dispose();
            }
        }
        catch (Exception ex)
        {
            throw;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
24
3
Gpt3D_Clone24_3.cs 1 15
Gpt3D_Clone24_3.cs 16 42
----------------------------------------

static void Main (string [] args) {
    var assemblyFilename = args.FirstOrDefault ();
    if (assemblyFilename != null && File.Exists (assemblyFilename)) {
        try {
            var assembly = Assembly.ReflectionOnlyLoadFrom (assemblyFilename);
            var name = assembly.GetName ();
            using (var file = File.AppendText ("C:\\AssemblyInfo.txt"))
            {
                file.WriteLine ("{0} - {1}", name.FullName, name.Version);
            }}
        catch (Exception ex) {
            throw;
        }
    }
}
----------------------------------------

 static void Main(string[] args) 
{
    if (args?.Any() == true && File.Exists(args[0])) 
    {
        try
        {
            Assembly assembly = Assembly.ReflectionOnlyLoadFrom(args[0]);
            AssemblyName name = assembly.GetName();
            StreamWriter writer = null;
            try
            {
                writer = new StreamWriter("C:\\AssemblyInfo.txt", append: true);
                writer.WriteLine("{0} - {1}", name.FullName, name.Version);
            }
            finally
            {
                writer?.Dispose();
            }
        }
        catch (Exception ex)
        {
            throw;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
254
0
Gpt3D_Clone254_0.cs 1 12
Gpt3D_Clone254_0.cs 13 36
----------------------------------------

static void Main (string [] args) {
    Test1 ("just a little test string.");
    GC.Collect ();
    GC.WaitForPendingFinalizers ();
    Stopwatch timer = new Stopwatch ();
    timer.Start ();
    for (int i = 0; i < 10000; i ++) {
        Test1 ("just a little test string.");
    }
    timer.Stop ();
    Console.WriteLine (timer.Elapsed);
}
----------------------------------------

 static void Main (string[] args) {
            Test1 ("just a little test string.");
            GC.Collect ();
            GC.WaitForPendingFinalizers ();
            
            System.Threading.Thread.BeginThreadAffinity();
            System.Diagnostics.Stopwatch timer = new System.Diagnostics.Stopwatch();
            System.TimeSpan time1;
            System.TimeSpan time2;
            timer.Start();
            for (int i = 0; i < 10000; i++) {
                Test1 ("just a little test string.");
            }
            time1 = timer.Elapsed;
            System.Threading.Thread.EndThreadAffinity();
            timer.Restart();
            for (int i = 0; i < 10000; i++) {
                Test1 ("just a little test string.");
            }
            time2 = timer.Elapsed;
            Console.WriteLine (time1 + " - "+time2);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
254
1
Gpt3D_Clone254_1.cs 1 12
Gpt3D_Clone254_1.cs 13 35
----------------------------------------

static void Main (string [] args) {
    Test1 ("just a little test string.");
    GC.Collect ();
    GC.WaitForPendingFinalizers ();
    Stopwatch timer = new Stopwatch ();
    timer.Start ();
    for (int i = 0; i < 10000; i ++) {
        Test1 ("just a little test string.");
    }
    timer.Stop ();
    Console.WriteLine (timer.Elapsed);
}
----------------------------------------

 static void Main (string[] args) {
            Test1 ("just a little test string.");
            GC.Collect ();
            GC.WaitForPendingFinalizers ();
            System.Diagnostics.Process.GetCurrentProcess().ProcessorAffinity = (System.IntPtr)1;
            System.Diagnostics.Stopwatch timer = new System.Diagnostics.Stopwatch();
            System.TimeSpan time1;
            System.TimeSpan time2;
            timer.Start();
            for (int i = 0; i < 10000; i++) {
                Test1 ("just a little test string.");
            }
            time1 = timer.Elapsed;
            System.Diagnostics.Process.GetCurrentProcess().ProcessorAffinity = (System.IntPtr)2;
            timer.Restart();
            for (int i = 0; i < 10000; i++) {
                Test1 ("just a little test string.");
            }
            time2 = timer.Elapsed;
            Console.WriteLine (time1 + " - "+time2);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
258
0
Gpt3D_Clone258_0.cs 1 8
Gpt3D_Clone258_0.cs 9 21
----------------------------------------

internal static MyEnum [] GetFlags (this MyEnum modKey) {
    List < MyEnum > flags = new List < MyEnum > ();
    foreach (var flag in Enum.GetValues (typeof (MyEnum))) {
        if (modKey & flag == flag)
            flags.Add ((MyEnum) flag);
    }
    return flags.ToArray ();
}
----------------------------------------

  internal static MyEnum[] GetFlags (this MyEnum modKey) 
{
    List<MyEnum> flags = new List<MyEnum>();
    MyEnum[] enumValues = (MyEnum[])Enum.GetValues(typeof(MyEnum));
    for (int i = 0; i < enumValues.Length; i++)
    {
        if (modKey & enumValues[i] == enumValues[i])
            flags.Add(enumValues[i]);
    }
    return flags.ToArray();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
258
6
Gpt3D_Clone258_6.cs 1 8
Gpt3D_Clone258_6.cs 9 21
----------------------------------------

internal static MyEnum [] GetFlags (this MyEnum modKey) {
    List < MyEnum > flags = new List < MyEnum > ();
    foreach (var flag in Enum.GetValues (typeof (MyEnum))) {
        if (modKey & flag == flag)
            flags.Add ((MyEnum) flag);
    }
    return flags.ToArray ();
}
----------------------------------------

 internal static MyEnum[] GetFlags(this MyEnum modKey)
{
    List<MyEnum> flags = new List<MyEnum>();
    
    for (int i = 0; i < Enum.GetValues(typeof(MyEnum)).Length; i++)
    {
        if (modKey & (MyEnum)Enum.GetValues(typeof(MyEnum)).GetValue(i) == (MyEnum)Enum.GetValues(typeof(MyEnum)).GetValue(i))
            flags.Add((MyEnum)Enum.GetValues(typeof(MyEnum)).GetValue(i));
    }
    return flags.ToArray(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
258
7
Gpt3D_Clone258_7.cs 1 8
Gpt3D_Clone258_7.cs 9 14
----------------------------------------

internal static MyEnum [] GetFlags (this MyEnum modKey) {
    List < MyEnum > flags = new List < MyEnum > ();
    foreach (var flag in Enum.GetValues (typeof (MyEnum))) {
        if (modKey & flag == flag)
            flags.Add ((MyEnum) flag);
    }
    return flags.ToArray ();
}
----------------------------------------

 internal static MyEnum[] GetFlags(this MyEnum modKey)
{
    return Enum.GetValues(typeof(MyEnum)).Cast<MyEnum>().Where(x => modKey.HasFlag(x)).ToArray();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
258
8
Gpt3D_Clone258_8.cs 1 8
Gpt3D_Clone258_8.cs 9 17
----------------------------------------

internal static MyEnum [] GetFlags (this MyEnum modKey) {
    List < MyEnum > flags = new List < MyEnum > ();
    foreach (var flag in Enum.GetValues (typeof (MyEnum))) {
        if (modKey & flag == flag)
            flags.Add ((MyEnum) flag);
    }
    return flags.ToArray ();
}
----------------------------------------

 internal static MyEnum[] GetFlags(this MyEnum modKey) 
{
    return Enum.GetValues(typeof(MyEnum))
        .Cast<MyEnum>()
        .Where(x => modKey & x == x)
        .ToArray();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
259
0
Gpt3D_Clone259_0.cs 1 20
Gpt3D_Clone259_0.cs 21 49
----------------------------------------

public string IntToString (int a) {
    if (a == 0)
        return "0";
    if (a == int.MinValue)
        return "-2147483648";
    var isNegative = false;
    if (a < 0) {
        a = - a;
        isNegative = true;
    }
    var stack = new Stack < char > ();
    while (a != 0) {
        var c = a % 10 + '0';
        stack.Push ((char) c);
        a /= 10;
    }
    if (isNegative)
        stack.Push ('-');
    return new string (stack.ToArray ());
}
----------------------------------------

 public string IntToString (int a) {
            if (a == 0)
                return "0";
            if (a == int.MinValue)
                return "-2147483648";
            string result = "";
            bool isNegative = a < 0 ? true : false;
            if (isNegative)
                a *= -1;
            
            while (a > 0) {
                int digit = a % 10;
                result += (char)(digit + '0');
                a /= 10;
            }
            if (isNegative)
                result += '-';
            char[] characters = result.ToCharArray();
            Array.Reverse(characters);
            return new string (characters);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
259
1
Gpt3D_Clone259_1.cs 1 20
Gpt3D_Clone259_1.cs 21 41
----------------------------------------

public string IntToString (int a) {
    if (a == 0)
        return "0";
    if (a == int.MinValue)
        return "-2147483648";
    var isNegative = false;
    if (a < 0) {
        a = - a;
        isNegative = true;
    }
    var stack = new Stack < char > ();
    while (a != 0) {
        var c = a % 10 + '0';
        stack.Push ((char) c);
        a /= 10;
    }
    if (isNegative)
        stack.Push ('-');
    return new string (stack.ToArray ());
}
----------------------------------------

 public string IntToString (int a) {
            if (a == 0)
                return "0";
            if (a == int.MinValue)
                return "-2147483648";
            bool isNegative = (a < 0);
            a = Math.Abs(a);
            string result = "";
            while (a > 0) {
                int digit = a % 10;
                result = (char)(digit + '0') + result;
                a /= 10;
            }
            if (isNegative)
                result = "-" + result;
            char [] characters = result.ToCharArray();
            Array.Reverse(characters); 
            return new string (characters);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
259
3
Gpt3D_Clone259_3.cs 1 20
Gpt3D_Clone259_3.cs 21 39
----------------------------------------

public string IntToString (int a) {
    if (a == 0)
        return "0";
    if (a == int.MinValue)
        return "-2147483648";
    var isNegative = false;
    if (a < 0) {
        a = - a;
        isNegative = true;
    }
    var stack = new Stack < char > ();
    while (a != 0) {
        var c = a % 10 + '0';
        stack.Push ((char) c);
        a /= 10;
    }
    if (isNegative)
        stack.Push ('-');
    return new string (stack.ToArray ());
}
----------------------------------------

 public string IntToString (int a) {
            if (a == 0)
                return "0";
            if (a == int.MinValue)
                return "-2147483648";
            bool isNegative = (a < 0);
            StringBuilder sb = new StringBuilder();
            a = Math.Abs(a);
            while (a > 0) {
                int rem = a % 10;
                sb.Insert(0, (char)(rem + '0'));
                a /= 10;
            }
            if (isNegative) 
                sb.Insert(0, '-');
            return sb.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
259
4
Gpt3D_Clone259_4.cs 1 20
Gpt3D_Clone259_4.cs 21 39
----------------------------------------

public string IntToString (int a) {
    if (a == 0)
        return "0";
    if (a == int.MinValue)
        return "-2147483648";
    var isNegative = false;
    if (a < 0) {
        a = - a;
        isNegative = true;
    }
    var stack = new Stack < char > ();
    while (a != 0) {
        var c = a % 10 + '0';
        stack.Push ((char) c);
        a /= 10;
    }
    if (isNegative)
        stack.Push ('-');
    return new string (stack.ToArray ());
}
----------------------------------------

 public string IntToString (int a) {
            if (a == 0)
                return "0";
            if (a == int.MinValue)
                return "-2147483648";
            bool isNegative = (a < 0);
            string result = "";
            a = Math.Abs (a);
            while (a > 0) {
                int digit = a % 10;
                result = (char)(digit + '0') + result;
                a /= 10;
            }
            if (isNegative)
                result = "-" + result;
            return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
259
5
Gpt3D_Clone259_5.cs 1 20
Gpt3D_Clone259_5.cs 21 39
----------------------------------------

public string IntToString (int a) {
    if (a == 0)
        return "0";
    if (a == int.MinValue)
        return "-2147483648";
    var isNegative = false;
    if (a < 0) {
        a = - a;
        isNegative = true;
    }
    var stack = new Stack < char > ();
    while (a != 0) {
        var c = a % 10 + '0';
        stack.Push ((char) c);
        a /= 10;
    }
    if (isNegative)
        stack.Push ('-');
    return new string (stack.ToArray ());
}
----------------------------------------

 public string IntToString (int a) {
            if (a == 0)
                return "0";
            if (a == int.MinValue)
                return "-2147483648";
            bool isNegative = (a < 0);
            a = Math.Abs(a);
            string result = "";
            while (a > 0) {
            int digit = a % 10;
            result = (char)(digit + '0') + result;
            a /= 10;
            }
            if (isNegative) 
            result = '-' + result;
            return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
259
6
Gpt3D_Clone259_6.cs 1 20
Gpt3D_Clone259_6.cs 21 38
----------------------------------------

public string IntToString (int a) {
    if (a == 0)
        return "0";
    if (a == int.MinValue)
        return "-2147483648";
    var isNegative = false;
    if (a < 0) {
        a = - a;
        isNegative = true;
    }
    var stack = new Stack < char > ();
    while (a != 0) {
        var c = a % 10 + '0';
        stack.Push ((char) c);
        a /= 10;
    }
    if (isNegative)
        stack.Push ('-');
    return new string (stack.ToArray ());
}
----------------------------------------

 public string IntToString (int a) {
            if (a == 0)
                return "0";
            if (a == int.MinValue)
                return "-2147483648";
            bool isNegative = (a < 0);
            a = Math.Abs(a);
            string result = "";
            while (a > 0) {
                result = (char)(a % 10 + '0') + result;
                a/= 10;
            }
            if (isNegative)
                result = "-" + result;
            return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
259
7
Gpt3D_Clone259_7.cs 1 20
Gpt3D_Clone259_7.cs 21 38
----------------------------------------

public string IntToString (int a) {
    if (a == 0)
        return "0";
    if (a == int.MinValue)
        return "-2147483648";
    var isNegative = false;
    if (a < 0) {
        a = - a;
        isNegative = true;
    }
    var stack = new Stack < char > ();
    while (a != 0) {
        var c = a % 10 + '0';
        stack.Push ((char) c);
        a /= 10;
    }
    if (isNegative)
        stack.Push ('-');
    return new string (stack.ToArray ());
}
----------------------------------------

 public string IntToString (int a) {
            if (a == 0)
                return "0";
            if (a == int.MinValue)
                return "-2147483648";
            bool isNegative = (a < 0);
            a = Math.Abs(a);
            StringBuilder sb = new StringBuilder();
            while (a > 0) {
                sb.Insert(0, (char)((a % 10) + '0'));
                a /= 10;
            }
            if (isNegative)
                sb.Insert(0, '-');
            return sb.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
259
8
Gpt3D_Clone259_8.cs 1 20
Gpt3D_Clone259_8.cs 21 39
----------------------------------------

public string IntToString (int a) {
    if (a == 0)
        return "0";
    if (a == int.MinValue)
        return "-2147483648";
    var isNegative = false;
    if (a < 0) {
        a = - a;
        isNegative = true;
    }
    var stack = new Stack < char > ();
    while (a != 0) {
        var c = a % 10 + '0';
        stack.Push ((char) c);
        a /= 10;
    }
    if (isNegative)
        stack.Push ('-');
    return new string (stack.ToArray ());
}
----------------------------------------

 public string IntToString (int a) {
            if (a == 0)
                return "0";
            if (a == int.MinValue)
                return "-2147483648";
            bool isNegative = (a < 0);
            string result = "";
            while (a != 0) {
                int digit = a % 10;
                result += (char)(digit + '0');
                a /= 10;
            }
            if (isNegative) {
                result += "-";
            }
            return string.Concat(result.Reverse());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
259
9
Gpt3D_Clone259_9.cs 1 20
Gpt3D_Clone259_9.cs 21 38
----------------------------------------

public string IntToString (int a) {
    if (a == 0)
        return "0";
    if (a == int.MinValue)
        return "-2147483648";
    var isNegative = false;
    if (a < 0) {
        a = - a;
        isNegative = true;
    }
    var stack = new Stack < char > ();
    while (a != 0) {
        var c = a % 10 + '0';
        stack.Push ((char) c);
        a /= 10;
    }
    if (isNegative)
        stack.Push ('-');
    return new string (stack.ToArray ());
}
----------------------------------------

 public string IntToString (int a) {
            if (a == 0)
                return "0";
            if (a == int.MinValue)
                return "-2147483648";
            bool isNegative = (a < 0);
            string result = "";
            while (a != 0) {
                int digit = a % 10;
                result = (char)(digit + '0') + result;
                a /= 10;
            }
            if (isNegative)
                result = "-" + result;
            return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
263
4
Gpt3D_Clone263_4.cs 1 9
Gpt3D_Clone263_4.cs 10 20
----------------------------------------

public PointF ? Intersect (LineSegment other) {
    var p = line.Intersect (other.line);
    if (p == null)
        return null;
    if (bindingRectangle.Contains (p.Value) && other.bindingRectangle.Contains (p.Value)) {
        return p;
    }
    return null;
}
----------------------------------------

  public PointF? Intersect (LineSegment other)
{
    PointF? intPoint =  line.Intersect (other.line);
    if (intPoint.HasValue &&
        bindingRectangle.Contains(intPoint.Value) && other.bindingRectangle.Contains(intPoint.Value))
        if (bindingRectangle.IntersectsWith(other.bindingRectangle))
            return intPoint;
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
263
5
Gpt3D_Clone263_5.cs 1 9
Gpt3D_Clone263_5.cs 10 20
----------------------------------------

public PointF ? Intersect (LineSegment other) {
    var p = line.Intersect (other.line);
    if (p == null)
        return null;
    if (bindingRectangle.Contains (p.Value) && other.bindingRectangle.Contains (p.Value)) {
        return p;
    }
    return null;
}
----------------------------------------

  public PointF? Intersect (LineSegment other)
{
    var p = line.Intersect(other.line);
    if (p == null ||
        !bindingRectangle.Contains(p.Value) ||
        !other.bindingRectangle.Contains(p.Value))
        return null;
    return bindingRectangle.IntersectsWith(other.bindingRectangle) ? p : (PointF?)null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
265
0
Gpt3D_Clone265_0.cs 1 12
Gpt3D_Clone265_0.cs 13 32
----------------------------------------

public PointF ? Intersect (LineEquation other) {
    if (isVertical && other.isVertical)
        return null;
    if (a == other.a)
        return null;
    if (isVertical)
        return other.Intersect (xConstForVertical);
    if (other.isVertical)
        return Intersect (other.xConstForVertical);
    var x = (b - other.b) / (other.a - a);
    return Intersect (x);
}
----------------------------------------

   public PointF? Intersect (LineEquation other) {
    if (isVertical && other.isVertical)
        return null;
    else if (a == other.a)
        return null;
    else if (isVertical || other.isVertical) {
        double x;
        if (isVertical)
            x = xConstForVertical;
        else 
            x = other.xConstForVertical;
        return Intersect(x);
    } 
    else {
        double x = (b - other.b) / (other.a - a);
        return Intersect(x);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
265
1
Gpt3D_Clone265_1.cs 1 12
Gpt3D_Clone265_1.cs 13 35
----------------------------------------

public PointF ? Intersect (LineEquation other) {
    if (isVertical && other.isVertical)
        return null;
    if (a == other.a)
        return null;
    if (isVertical)
        return other.Intersect (xConstForVertical);
    if (other.isVertical)
        return Intersect (other.xConstForVertical);
    var x = (b - other.b) / (other.a - a);
    return Intersect (x);
}
----------------------------------------

 public PointF? Intersect (LineEquation other) {
    if (isVertical && other.isVertical) {
        return null;
    }
    else if (a == other.a) {
        return null;
    }
    else {
        double x;
        if (isVertical) {
            x = xConstForVertical;
        }
        else if (other.isVertical) {
            x = other.xConstForVertical;
        }
        else {
            x = (b - other.b) / (other.a - a);
        }
        return Intersect(x);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
265
2
Gpt3D_Clone265_2.cs 1 12
Gpt3D_Clone265_2.cs 13 50
----------------------------------------

public PointF ? Intersect (LineEquation other) {
    if (isVertical && other.isVertical)
        return null;
    if (a == other.a)
        return null;
    if (isVertical)
        return other.Intersect (xConstForVertical);
    if (other.isVertical)
        return Intersect (other.xConstForVertical);
    var x = (b - other.b) / (other.a - a);
    return Intersect (x);
}
----------------------------------------

 public PointF? Intersect (LineEquation other)
    {
        if (isVertical && other.isVertical)
            return null;
        else if (a == other.a)
            return null;
        else
        {
            double x;
            if (isVertical)
                x = xConstForVertical;
            else if (other.isVertical)
                x = other.xConstForVertical;
            else
                x = (b - other.b) / (other.a - a);
            return Intersect(x);
        }
    }
 public PointF? Intersect (LineEquation other) {
    if (isVertical && other.isVertical) 
        return null;
    else if (a == other.a)
        return null;
    else {
        double x;
        if (isVertical)
            x = xConstForVertical;
        else if (other.isVertical)
            x = other.xConstForVertical;
        else {
            x = (b - other.b) / (other.a - a);
        }
        return Intersect(x);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
265
3
Gpt3D_Clone265_3.cs 1 12
Gpt3D_Clone265_3.cs 13 31
----------------------------------------

public PointF ? Intersect (LineEquation other) {
    if (isVertical && other.isVertical)
        return null;
    if (a == other.a)
        return null;
    if (isVertical)
        return other.Intersect (xConstForVertical);
    if (other.isVertical)
        return Intersect (other.xConstForVertical);
    var x = (b - other.b) / (other.a - a);
    return Intersect (x);
}
----------------------------------------

  public PointF? Intersect (LineEquation other) {
    if (isVertical && other.isVertical) {
        return null;
    } else if (a == other.a) {
        return null;
    } else {
        double x;
        if (isVertical) {
            x = xConstForVertical;
        } else if (other.isVertical) {
            x = other.xConstForVertical;
        } else {
            x = (b - other.b) / (other.a - a);
        }
        return Intersect(x);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
265
4
Gpt3D_Clone265_4.cs 1 12
Gpt3D_Clone265_4.cs 13 50
----------------------------------------

public PointF ? Intersect (LineEquation other) {
    if (isVertical && other.isVertical)
        return null;
    if (a == other.a)
        return null;
    if (isVertical)
        return other.Intersect (xConstForVertical);
    if (other.isVertical)
        return Intersect (other.xConstForVertical);
    var x = (b - other.b) / (other.a - a);
    return Intersect (x);
}
----------------------------------------

 public PointF? Intersect (LineEquation other)
    {
        if (isVertical && other.isVertical)
            return null;
        else if (a == other.a)
            return null;
        else
        {
            double x;
            if (isVertical)
                x = xConstForVertical;
            else if (other.isVertical)
                x = other.xConstForVertical;
            else
                x = (b - other.b) / (other.a - a);
            return Intersect(x);
        }
    }
 public PointF? Intersect (LineEquation other) {
    if (isVertical && other.isVertical) 
        return null;
    else if (a == other.a)
        return null;
    else {
        double x;
        if (isVertical)
            x = xConstForVertical;
        else if (other.isVertical)
            x = other.xConstForVertical;
        else {
            x = (b - other.b) / (other.a - a);
        }
        return Intersect(x);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
265
7
Gpt3D_Clone265_7.cs 1 12
Gpt3D_Clone265_7.cs 13 28
----------------------------------------

public PointF ? Intersect (LineEquation other) {
    if (isVertical && other.isVertical)
        return null;
    if (a == other.a)
        return null;
    if (isVertical)
        return other.Intersect (xConstForVertical);
    if (other.isVertical)
        return Intersect (other.xConstForVertical);
    var x = (b - other.b) / (other.a - a);
    return Intersect (x);
}
----------------------------------------

  public PointF? Intersect (LineEquation other) {
    if (isVertical && other.isVertical || a == other.a) 
        return null;
    double x;
    if (isVertical)
        x = xConstForVertical;
    else if (other.isVertical)
        x = other.xConstForVertical;
    else 
        x = (b - other.b) / (other.a - a);
    return Intersect(x);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
265
8
Gpt3D_Clone265_8.cs 1 12
Gpt3D_Clone265_8.cs 13 30
----------------------------------------

public PointF ? Intersect (LineEquation other) {
    if (isVertical && other.isVertical)
        return null;
    if (a == other.a)
        return null;
    if (isVertical)
        return other.Intersect (xConstForVertical);
    if (other.isVertical)
        return Intersect (other.xConstForVertical);
    var x = (b - other.b) / (other.a - a);
    return Intersect (x);
}
----------------------------------------

 public PointF? Intersect (LineEquation other) {
    if (isVertical && other.isVertical || a == other.a) {
        return null;
    }
                        
    double x;
    if (isVertical) {
        x = xConstForVertical;
    } else if (other.isVertical) {
        x = other.xConstForVertical;
    } else {
        x = (b - other.b) / (other.a - a);
    }
  
    return Intersect(x);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
266
0
Gpt3D_Clone266_0.cs 1 15
Gpt3D_Clone266_0.cs 16 42
----------------------------------------

public static string GetUa (HttpRequest hr) {
    try {
        string originalBrowser = hr.ServerVariables ["X-OperaMini-Phone-UA"];
        string anotherOriginalBrowser = hr.ServerVariables ["X-Device-User-Agent"];
        if (! String.IsNullOrEmpty (originalBrowser))
            return "OPERAMINI " + originalBrowser;
        else if (! String.IsNullOrEmpty (anotherOriginalBrowser))
            return "NOVARRA " + anotherOriginalBrowser;
        else
            return hr.UserAgent.ToString ();
    }
    catch {
        return "No UA Found";
    }
}
----------------------------------------

 public static string GetUa (HttpRequest hr) {
    string originalBrowser;
    if (hr.ServerVariables["X-OperaMini-Phone-UA"] != null)
        originalBrowser = hr.ServerVariables["X-OperaMini-Phone-UA"];
    else
        originalBrowser = "";
    string anotherOriginalBrowser;
    if (hr.ServerVariables["X-Device-User-Agent"] != null)
        anotherOriginalBrowser = hr.ServerVariables["X-Device-User-Agent"];
    else
        anotherOriginalBrowser = "";
    if (originalBrowser != "" && !String.IsNullOrEmpty(originalBrowser))
        return "OPERAMINI " + originalBrowser;
    else if (anotherOriginalBrowser != "" && !String.IsNullOrEmpty(anotherOriginalBrowser))
        return "NOVARRA " + anotherOriginalBrowser;
    else
        try {
            return hr.UserAgent.ToString() ?? "No UA Found";
        }
        catch {
            return "No UA Found";
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
266
2
Gpt3D_Clone266_2.cs 1 15
Gpt3D_Clone266_2.cs 16 31
----------------------------------------

public static string GetUa (HttpRequest hr) {
    try {
        string originalBrowser = hr.ServerVariables ["X-OperaMini-Phone-UA"];
        string anotherOriginalBrowser = hr.ServerVariables ["X-Device-User-Agent"];
        if (! String.IsNullOrEmpty (originalBrowser))
            return "OPERAMINI " + originalBrowser;
        else if (! String.IsNullOrEmpty (anotherOriginalBrowser))
            return "NOVARRA " + anotherOriginalBrowser;
        else
            return hr.UserAgent.ToString ();
    }
    catch {
        return "No UA Found";
    }
}
----------------------------------------

 public static string GetUa (HttpRequest hr) {
    string originalBrowser = hr.ServerVariables["X-OperaMini-Phone-UA"] ?? "";
    string anotherOriginalBrowser = hr.ServerVariables["X-Device-User-Agent"] ?? "";
    string currentBrowser = hr.UserAgent.ToString() ?? "";
    if (originalBrowser != "")
        return "OPERAMINI " + originalBrowser;
    else if (anotherOriginalBrowser != "")
        return "NOVARRA " + anotherOriginalBrowser;
    else if (currentBrowser != "")
        return currentBrowser;
    else
        return "No UA Found";
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
266
3
Gpt3D_Clone266_3.cs 1 15
Gpt3D_Clone266_3.cs 16 34
----------------------------------------

public static string GetUa (HttpRequest hr) {
    try {
        string originalBrowser = hr.ServerVariables ["X-OperaMini-Phone-UA"];
        string anotherOriginalBrowser = hr.ServerVariables ["X-Device-User-Agent"];
        if (! String.IsNullOrEmpty (originalBrowser))
            return "OPERAMINI " + originalBrowser;
        else if (! String.IsNullOrEmpty (anotherOriginalBrowser))
            return "NOVARRA " + anotherOriginalBrowser;
        else
            return hr.UserAgent.ToString ();
    }
    catch {
        return "No UA Found";
    }
}
----------------------------------------

 public static string GetUa (HttpRequest hr) {
    string originalBrowser = FindOriginalBrowser(hr, "X-OperaMini-Phone-UA");
    string anotherOriginalBrowser = FindOriginalBrowser(hr, "X-Device-User-Agent");
    if (originalBrowser != "" && !String.IsNullOrEmpty(originalBrowser))
        return "OPERAMINI " + originalBrowser;
    else if (anotherOriginalBrowser != "" && !String.IsNullOrEmpty(anotherOriginalBrowser))
        return "NOVARRA " + anotherOriginalBrowser;
    else
        try {
            return hr.UserAgent.ToString() ?? "No UA Found";
        }
        catch {
            return "No UA Found";
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
266
4
Gpt3D_Clone266_4.cs 1 15
Gpt3D_Clone266_4.cs 16 31
----------------------------------------

public static string GetUa (HttpRequest hr) {
    try {
        string originalBrowser = hr.ServerVariables ["X-OperaMini-Phone-UA"];
        string anotherOriginalBrowser = hr.ServerVariables ["X-Device-User-Agent"];
        if (! String.IsNullOrEmpty (originalBrowser))
            return "OPERAMINI " + originalBrowser;
        else if (! String.IsNullOrEmpty (anotherOriginalBrowser))
            return "NOVARRA " + anotherOriginalBrowser;
        else
            return hr.UserAgent.ToString ();
    }
    catch {
        return "No UA Found";
    }
}
----------------------------------------

 public static string GetUa (HttpRequest hr) {
    string originalBrowser = hr.ServerVariables["X-OperaMini-Phone-UA"] ?? "";
    string anotherOriginalBrowser = hr.ServerVariables["X-Device-User-Agent"] ?? "";
    string currentBrowser = hr.UserAgent.ToString() ?? "";
    if (originalBrowser != "")
        return "OPERAMINI " + originalBrowser;
    else if (anotherOriginalBrowser != "")
        return "NOVARRA " + anotherOriginalBrowser;
    else if (String.IsNullOrEmpty(currentBrowser))
        return currentBrowser;
    else
        return "No UA Found";
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
266
6
Gpt3D_Clone266_6.cs 1 15
Gpt3D_Clone266_6.cs 16 33
----------------------------------------

public static string GetUa (HttpRequest hr) {
    try {
        string originalBrowser = hr.ServerVariables ["X-OperaMini-Phone-UA"];
        string anotherOriginalBrowser = hr.ServerVariables ["X-Device-User-Agent"];
        if (! String.IsNullOrEmpty (originalBrowser))
            return "OPERAMINI " + originalBrowser;
        else if (! String.IsNullOrEmpty (anotherOriginalBrowser))
            return "NOVARRA " + anotherOriginalBrowser;
        else
            return hr.UserAgent.ToString ();
    }
    catch {
        return "No UA Found";
    }
}
----------------------------------------

 public static string GetUa (HttpRequest hr) {
    string originalBrowser = (hr.ServerVariables["X-OperaMini-Phone-UA"] != null) ? hr.ServerVariables["X-OperaMini-Phone-UA"] : "";
    string anotherOriginalBrowser = (hr.ServerVariables["X-Device-User-Agent"] != null) ? hr.ServerVariables["X-Device-User-Agent"] : "";
    
    if (originalBrowser != "")
        return "OPERAMINI " + originalBrowser;
    else if (anotherOriginalBrowser != "")
        return "NOVARRA " + anotherOriginalBrowser;
    else
        try {
            return hr.UserAgent.ToString() ?? "No UA Found";
        }
        catch {
            return "No UA Found";
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
266
8
Gpt3D_Clone266_8.cs 1 15
Gpt3D_Clone266_8.cs 16 36
----------------------------------------

public static string GetUa (HttpRequest hr) {
    try {
        string originalBrowser = hr.ServerVariables ["X-OperaMini-Phone-UA"];
        string anotherOriginalBrowser = hr.ServerVariables ["X-Device-User-Agent"];
        if (! String.IsNullOrEmpty (originalBrowser))
            return "OPERAMINI " + originalBrowser;
        else if (! String.IsNullOrEmpty (anotherOriginalBrowser))
            return "NOVARRA " + anotherOriginalBrowser;
        else
            return hr.UserAgent.ToString ();
    }
    catch {
        return "No UA Found";
    }
}
----------------------------------------

private static string FindOriginalBrowser (HttpRequest hr, string key) {
        if (hr.ServerVariables[key] != null)
            return hr.ServerVariables[key];
        else
            return "";
    }
 public static string GetUa (HttpRequest hr) {
    string operatorMiniPhoneUa = hr.ServerVariables["X-OperaMini-Phone-UA"] ?? "";
    string deviceUserAgent = hr.ServerVariables["X-Device-User-Agent"] ?? "";
    string userAgent = hr.UserAgent.ToString() ?? "No UA Found";
    if (operatorMiniPhoneUa != "")
        return "OPERAMINI " + operatorMiniPhoneUa;
    else if (deviceUserAgent != "")
        return "NOVARRA " + deviceUserAgent;
    else
        return userAgent;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
266
9
Gpt3D_Clone266_9.cs 1 15
Gpt3D_Clone266_9.cs 16 36
----------------------------------------

public static string GetUa (HttpRequest hr) {
    try {
        string originalBrowser = hr.ServerVariables ["X-OperaMini-Phone-UA"];
        string anotherOriginalBrowser = hr.ServerVariables ["X-Device-User-Agent"];
        if (! String.IsNullOrEmpty (originalBrowser))
            return "OPERAMINI " + originalBrowser;
        else if (! String.IsNullOrEmpty (anotherOriginalBrowser))
            return "NOVARRA " + anotherOriginalBrowser;
        else
            return hr.UserAgent.ToString ();
    }
    catch {
        return "No UA Found";
    }
}
----------------------------------------

private static string FindOriginalBrowser (HttpRequest hr, string key) {
        if (hr.ServerVariables[key] != null)
            return hr.ServerVariables[key];
        else
            return "";
    }
 public static string GetUa (HttpRequest hr) {
    string operatorMiniPhoneUa = hr.ServerVariables["X-OperaMini-Phone-UA"] ?? "";
    string deviceUserAgent = hr.ServerVariables["X-Device-User-Agent"] ?? "";
    string userAgent = hr.UserAgent.ToString() ?? "No UA Found";
    if (operatorMiniPhoneUa != "")
        return "OPERAMINI " + operatorMiniPhoneUa;
    else if (deviceUserAgent != "")
        return "NOVARRA " + deviceUserAgent;
    else
        return userAgent;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
267
0
Gpt3D_Clone267_0.cs 1 13
Gpt3D_Clone267_0.cs 14 31
----------------------------------------

public static string GetServByPort (short port, ProtocolType proto) {
    StringBuilder ans = new StringBuilder ();
    switch (proto) {
        case ProtocolType.Tcp :
            ans.Append ((TcpServices) port);
            break;
        case ProtocolType.Udp :
            ans.Append ((UdpServices) port);
            break;
    }
    ans.Append ("(").Append (port).Append (")");
    return ans.ToString ();
}
----------------------------------------

 public static string GetServByPort (short port, ProtocolType proto) {
    string result = "";
  
    switch (proto)
    {
        case ProtocolType.Tcp:
            result = Enum.GetName(typeof(TcpServices), port) + "(" + port.ToString() + ")";
            break;
        case ProtocolType.Udp:
            result = Enum.GetName(typeof(UdpServices), port) + "(" + port.ToString() + ")";
            break;
        default:
            break;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
267
8
Gpt3D_Clone267_8.cs 1 13
Gpt3D_Clone267_8.cs 14 27
----------------------------------------

public static string GetServByPort (short port, ProtocolType proto) {
    StringBuilder ans = new StringBuilder ();
    switch (proto) {
        case ProtocolType.Tcp :
            ans.Append ((TcpServices) port);
            break;
        case ProtocolType.Udp :
            ans.Append ((UdpServices) port);
            break;
    }
    ans.Append ("(").Append (port).Append (")");
    return ans.ToString ();
}
----------------------------------------

	public static string GetServByPort(short port, ProtocolType proto)
{
    string result = "";
    if(proto == ProtocolType.Tcp){
        result = Converting.GetString(port) + "(" + port + ")";
    }
    else if(proto == ProtocolType.Udp){
        result = Enum.GetName(typeof(UdpServices), port) + "(" + port + ")";
    }
 
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
275
0
Gpt3D_Clone275_0.cs 1 10
Gpt3D_Clone275_0.cs 11 25
----------------------------------------

static void Main (string [] args) {
    Process process = new Process ();
    process.StartInfo.FileName = @"C:\my test folder\my test.bat";
    StringBuilder cmdLine = new StringBuilder ();
    cmdLine.Append (process.StartInfo.FileName);
    STARTUPINFO lpStartupInfo = new STARTUPINFO ();
    PROCESS_INFORMATION lpProcessInformation = new PROCESS_INFORMATION ();
    string workingDirectory = @"C:\my test folder\";
    CreateProcess (null, cmdLine, null, null, true, 0, IntPtr.Zero, workingDirectory, lpStartupInfo, lpProcessInformation);
}
----------------------------------------

 static void Main (string [] args) {
    Process process = new Process { StartInfo = { FileName = @"C:\my test folder\my test.bat"} };
    STARTUPINFO lpStartupInfo = new STARTUPINFO ();
    PROCESS_INFORMATION lpProcessInformation = new PROCESS_INFORMATION ();
    string workingDirectory = @"C:\my test folder\";
    int result = CreateProcess(null, process.StartInfo.FileName, null, null, true, 0, IntPtr.Zero, workingDirectory, lpStartupInfo, lpProcessInformation);
    if(result == 0) {
        process.Start();
    }
    string arguments = "";
    process.StartInfo.Arguments = arguments;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
275
1
Gpt3D_Clone275_1.cs 1 10
Gpt3D_Clone275_1.cs 11 23
----------------------------------------

static void Main (string [] args) {
    Process process = new Process ();
    process.StartInfo.FileName = @"C:\my test folder\my test.bat";
    StringBuilder cmdLine = new StringBuilder ();
    cmdLine.Append (process.StartInfo.FileName);
    STARTUPINFO lpStartupInfo = new STARTUPINFO ();
    PROCESS_INFORMATION lpProcessInformation = new PROCESS_INFORMATION ();
    string workingDirectory = @"C:\my test folder\";
    CreateProcess (null, cmdLine, null, null, true, 0, IntPtr.Zero, workingDirectory, lpStartupInfo, lpProcessInformation);
}
----------------------------------------

 static void Main (string [] args) {
    Process process = new Process { StartInfo = { FileName = @"C:\my test folder\my test.bat"} };
    STARTUPINFO lpStartupInfo = new STARTUPINFO ();
    PROCESS_INFORMATION lpProcessInformation = new PROCESS_INFORMATION ();
    string workingDirectory = @"C:\my test folder\";
    string arguments = "";
    process.StartInfo.Arguments = arguments;
    IntPtr hProcess = CreateProcess (null, process.StartInfo.FileName, null, null, true, 0, IntPtr.Zero, workingDirectory, lpStartupInfo, lpProcessInformation);
    process.SetProcessHandle(hProcess);
    process.Start();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
275
3
Gpt3D_Clone275_3.cs 1 10
Gpt3D_Clone275_3.cs 11 22
----------------------------------------

static void Main (string [] args) {
    Process process = new Process ();
    process.StartInfo.FileName = @"C:\my test folder\my test.bat";
    StringBuilder cmdLine = new StringBuilder ();
    cmdLine.Append (process.StartInfo.FileName);
    STARTUPINFO lpStartupInfo = new STARTUPINFO ();
    PROCESS_INFORMATION lpProcessInformation = new PROCESS_INFORMATION ();
    string workingDirectory = @"C:\my test folder\";
    CreateProcess (null, cmdLine, null, null, true, 0, IntPtr.Zero, workingDirectory, lpStartupInfo, lpProcessInformation);
}
----------------------------------------

 static void Main (string [] args) {
    Process process = new Process { FileName = @"C:\my test folder\my test.bat" };
    STARTUPINFO lpStartupInfo = new STARTUPINFO ();
    PROCESS_INFORMATION lpProcessInformation = new PROCESS_INFORMATION ();
    string workingDirectory = @"C:\my test folder\";
    string arguments = "";
    process.StartInfo.Arguments = arguments;
    process.Start();
    CreateProcess (null, process.StartInfo.FileName, null, null, true, 0, IntPtr.Zero, workingDirectory, lpStartupInfo, lpProcessInformation);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
275
4
Gpt3D_Clone275_4.cs 1 10
Gpt3D_Clone275_4.cs 11 21
----------------------------------------

static void Main (string [] args) {
    Process process = new Process ();
    process.StartInfo.FileName = @"C:\my test folder\my test.bat";
    StringBuilder cmdLine = new StringBuilder ();
    cmdLine.Append (process.StartInfo.FileName);
    STARTUPINFO lpStartupInfo = new STARTUPINFO ();
    PROCESS_INFORMATION lpProcessInformation = new PROCESS_INFORMATION ();
    string workingDirectory = @"C:\my test folder\";
    CreateProcess (null, cmdLine, null, null, true, 0, IntPtr.Zero, workingDirectory, lpStartupInfo, lpProcessInformation);
}
----------------------------------------

static void Main (string [] args) {
    Process process = new Process { StartInfo = { FileName = @"C:\my test folder\my test.bat"} };
    STARTUPINFO lpStartupInfo = new STARTUPINFO ();
    PROCESS_INFORMATION lpProcessInformation = new PROCESS_INFORMATION ();
    string workingDirectory = @"C:\my test folder\";
    string arguments = "";
    CreateProcess (arguments , process.StartInfo.FileName, null, null, true, 0, IntPtr.Zero, workingDirectory, lpStartupInfo, lpProcessInformation);
    process.Start();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
275
6
Gpt3D_Clone275_6.cs 1 10
Gpt3D_Clone275_6.cs 11 22
----------------------------------------

static void Main (string [] args) {
    Process process = new Process ();
    process.StartInfo.FileName = @"C:\my test folder\my test.bat";
    StringBuilder cmdLine = new StringBuilder ();
    cmdLine.Append (process.StartInfo.FileName);
    STARTUPINFO lpStartupInfo = new STARTUPINFO ();
    PROCESS_INFORMATION lpProcessInformation = new PROCESS_INFORMATION ();
    string workingDirectory = @"C:\my test folder\";
    CreateProcess (null, cmdLine, null, null, true, 0, IntPtr.Zero, workingDirectory, lpStartupInfo, lpProcessInformation);
}
----------------------------------------

 static void Main (string [] args) {
    Process process = new Process { FileName = @"C:\my test folder\my test.bat" };
    STARTUPINFO lpStartupInfo = new STARTUPINFO ();
    PROCESS_INFORMATION lpProcessInformation = new PROCESS_INFORMATION ();
    string workingDirectory = @"C:\my test folder\";
    int result = CreateProcess (null, process.StartInfo.FileName, null, null, true, 0, IntPtr.Zero, workingDirectory, lpStartupInfo, lpProcessInformation);
    if (result == 0) {
        process.Start();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
276
0
Gpt3D_Clone276_0.cs 1 13
Gpt3D_Clone276_0.cs 14 40
----------------------------------------

public static void ExitWindows (RestartOptions how, bool force) {
    switch (how) {
        case RestartOptions.Suspend :
            SuspendSystem (false, force);
            break;
        case RestartOptions.Hibernate :
            SuspendSystem (true, force);
            break;
        default :
            ExitWindows ((int) how, force);
            break;
    }
}
----------------------------------------

 public static void ExitWindows(RestartOptions how, bool force)
{
                do
                {
                    switch (how)
                    {
                        case RestartOptions.Suspend :
                        {
                            SuspendSystem(false, force);
                            break;
                        }
                        case RestartOptions.Hibernate :
                        {
                            SuspendSystem(true, force);
                            break;
                        }
                        default :
                        {
                            ExitWindows((int) how, force);
                            break;
                        }
                    }
                }
                while(false);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
276
2
Gpt3D_Clone276_2.cs 1 13
Gpt3D_Clone276_2.cs 14 31
----------------------------------------

public static void ExitWindows (RestartOptions how, bool force) {
    switch (how) {
        case RestartOptions.Suspend :
            SuspendSystem (false, force);
            break;
        case RestartOptions.Hibernate :
            SuspendSystem (true, force);
            break;
        default :
            ExitWindows ((int) how, force);
            break;
    }
}
----------------------------------------

 public static void ExitWindows(RestartOptions how, bool force)
{
                if (how == RestartOptions.Suspend)
                {
                    SuspendSystem(false, force);
                }
                else if (how == RestartOptions.Hibernate)
                {
                    SuspendSystem(true, force);
                }
                else
                {
                    ExitWindows((int)how, force);
                    return;
                } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
276
3
Gpt3D_Clone276_3.cs 1 13
Gpt3D_Clone276_3.cs 14 30
----------------------------------------

public static void ExitWindows (RestartOptions how, bool force) {
    switch (how) {
        case RestartOptions.Suspend :
            SuspendSystem (false, force);
            break;
        case RestartOptions.Hibernate :
            SuspendSystem (true, force);
            break;
        default :
            ExitWindows ((int) how, force);
            break;
    }
}
----------------------------------------

 public static void ExitWindows(RestartOptions how, bool force) 
{ 
        if (how == RestartOptions.Suspend) 
        { 
            SuspendSystem(false, force); 
        } 
        else if (how == RestartOptions.Hibernate) 
        { 
            SuspendSystem(true, force); 
        } 
        else 
        { 
            ExitWindows((int) how, force); 
        } 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
276
4
Gpt3D_Clone276_4.cs 1 13
Gpt3D_Clone276_4.cs 14 30
----------------------------------------

public static void ExitWindows (RestartOptions how, bool force) {
    switch (how) {
        case RestartOptions.Suspend :
            SuspendSystem (false, force);
            break;
        case RestartOptions.Hibernate :
            SuspendSystem (true, force);
            break;
        default :
            ExitWindows ((int) how, force);
            break;
    }
}
----------------------------------------

 public static void ExitWindows(RestartOptions how, bool force) 
{
            if(how == RestartOptions.Suspend) 
            {
                SuspendSystem(false, force);
            }
            else if(how == RestartOptions.Hibernate) 
            {
                SuspendSystem(true, force);
            }
            else 
            {
                ExitWindows((int) how, force);
            }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
279
7
Gpt3D_Clone279_7.cs 1 23
Gpt3D_Clone279_7.cs 24 48
----------------------------------------

public static string Verify (string valueToBind, object dataSource) {
    Type type = dataSource.GetType ();
    MethodInfo select = type.GetMethod ("Select");
    PropertyInfo parameters = type.GetProperty ("Parameters");
    PropertyInfo parameterGetter = null;
    object parametersInstance = null;
    if (parameters != null) {
        parametersInstance = parameters.GetValue (dataSource, null);
        type = parametersInstance.GetType ();
        parameterGetter = type.GetProperty ("Item");
    }
    if (select != null && parameters != null && parameterGetter != null) {
        if (ListContainsValue (baseInstance.GetEntityList (), valueToBind))
            return valueToBind;
        CustomParameter p = parameterGetter.GetValue (parametersInstance, new object [] {"WhereClause"}) as CustomParameter;
        if (p != null) {
            p.Value = "IsActive=true OR Id=" + valueToBind;
            select.Invoke (dataSource, null);
            return valueToBind;
        }
    }
    return string.Empty;
}
----------------------------------------

 
public static string Verify(string valueToBind, object dataSource) {
            Type type = dataSource.GetType();
            MethodInfo select = type?.GetMethod("Select");
            PropertyInfo parameters = type?.GetProperty("Parameters");
            object parameterInstance = parameters?.GetValue(dataSource, null);
            Type typeParams = parametersInstance?.GetType();
            PropertyInfo parameterGetter = typeParams?.GetProperty("Item");
            if (ListContainsValue(baseInstance.GetEntityList(), valueToBind)) {
                return valueToBind;
            }
            if (select != null && parameterGetter != null) {    
                CustomParameter p = parameterGetter.GetValue(parametersInstance, new object[]{"WhereClause"}) as CustomParameter;
                if (p != null) {
                    p.Value = "IsActive=true OR Id=" + valueToBind;
                    select.Invoke(dataSource, null);
                    return valueToBind;
                }
            }
            return string.Empty;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
279
9
Gpt3D_Clone279_9.cs 1 23
Gpt3D_Clone279_9.cs 24 42
----------------------------------------

public static string Verify (string valueToBind, object dataSource) {
    Type type = dataSource.GetType ();
    MethodInfo select = type.GetMethod ("Select");
    PropertyInfo parameters = type.GetProperty ("Parameters");
    PropertyInfo parameterGetter = null;
    object parametersInstance = null;
    if (parameters != null) {
        parametersInstance = parameters.GetValue (dataSource, null);
        type = parametersInstance.GetType ();
        parameterGetter = type.GetProperty ("Item");
    }
    if (select != null && parameters != null && parameterGetter != null) {
        if (ListContainsValue (baseInstance.GetEntityList (), valueToBind))
            return valueToBind;
        CustomParameter p = parameterGetter.GetValue (parametersInstance, new object [] {"WhereClause"}) as CustomParameter;
        if (p != null) {
            p.Value = "IsActive=true OR Id=" + valueToBind;
            select.Invoke (dataSource, null);
            return valueToBind;
        }
    }
    return string.Empty;
}
----------------------------------------

 public static string Verify (string valueToBind, object dataSource) {
      Type type = dataSource.GetType();
      if (type.GetMethod("Select") != null && type.GetProperty("Parameters") != null) {
         if (ListContainsValue(baseInstance.GetEntityList(), valueToBind)) {
            return valueToBind;
         }
         object paramObject = type.GetProperty("Parameters").GetValue(dataSource, null);
         ParameterInfo pInfo = paramObject.GetType().GetProperty("Item").GetValue(paramObject, new object[] {"WhereClause"}) as ParameterInfo;
         if (pInfo != null) {
            pInfo.Value = "IsActive=true OR Id=" + valueToBind;
            type.GetMethod("Select").Invoke(dataSource, null);
            return valueToBind;
         }
      }
      return string.Empty;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
281
0
Gpt3D_Clone281_0.cs 1 9
Gpt3D_Clone281_0.cs 10 23
----------------------------------------

public override int Read (byte [] buffer, int offset, int count) {
    if (m_buffer == null) {
        m_dataReady.Reset ();
        m_dataReady.WaitOne ();
    }
    Buffer.BlockCopy (m_buffer, m_offset, buffer, offset, (count < m_count) ? count : m_count);
    m_buffer = null;
    return (count < m_count) ? count : m_count;
}
----------------------------------------

  public override int Read (byte [] buffer, int offset, int count) {
        while (m_buffer == null)
        {
            if (!m_dataReady.WaitOne (0))
            m_dataReady.WaitOne ();
        }
        ResetDataReadyEvent();
        CopyBytes(m_buffer, m_offset, buffer, offset, min(count, m_count));
        m_buffer = null;
        return min(count, m_count);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
281
4
Gpt3D_Clone281_4.cs 1 9
Gpt3D_Clone281_4.cs 10 19
----------------------------------------

public override int Read (byte [] buffer, int offset, int count) {
    if (m_buffer == null) {
        m_dataReady.Reset ();
        m_dataReady.WaitOne ();
    }
    Buffer.BlockCopy (m_buffer, m_offset, buffer, offset, (count < m_count) ? count : m_count);
    m_buffer = null;
    return (count < m_count) ? count : m_count;
}
----------------------------------------

 public override int Read (byte [] buffer, int offset, int count) {
        m_dataReady.WaitOne(); 
        ReleaseDataReadyEvent();
        int length = (count < m_count) ? count : m_count;
        CopyBytes(m_buffer, m_offset, buffer, offset, length);
        m_buffer = null;
        return length;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
281
7
Gpt3D_Clone281_7.cs 1 9
Gpt3D_Clone281_7.cs 10 18
----------------------------------------

public override int Read (byte [] buffer, int offset, int count) {
    if (m_buffer == null) {
        m_dataReady.Reset ();
        m_dataReady.WaitOne ();
    }
    Buffer.BlockCopy (m_buffer, m_offset, buffer, offset, (count < m_count) ? count : m_count);
    m_buffer = null;
    return (count < m_count) ? count : m_count;
}
----------------------------------------

 public override int Read (byte [] buffer, int offset, int count) {
        while (m_buffer == null) 
            AwaitDataReadyEvent();                                
        CopyBytes(m_buffer, m_offset, buffer, offset, count);
        m_buffer = null;
        return (count < m_count) ? count : m_count;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
281
8
Gpt3D_Clone281_8.cs 1 9
Gpt3D_Clone281_8.cs 10 18
----------------------------------------

public override int Read (byte [] buffer, int offset, int count) {
    if (m_buffer == null) {
        m_dataReady.Reset ();
        m_dataReady.WaitOne ();
    }
    Buffer.BlockCopy (m_buffer, m_offset, buffer, offset, (count < m_count) ? count : m_count);
    m_buffer = null;
    return (count < m_count) ? count : m_count;
}
----------------------------------------

  public override int Read (byte [] buffer, int offset, int count) {
        m_dataReady.WaitOne ();
        ResetDataReadyEvent();
        CopyBytes(m_buffer, m_offset, buffer, offset, min(count, m_count));
        m_buffer = null;
        return min(count, m_count);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
282
0
Gpt3D_Clone282_0.cs 1 22
Gpt3D_Clone282_0.cs 23 47
----------------------------------------

public static string GetAbsoluteUrl (string relativeUrl) {
    if (String.IsNullOrEmpty (relativeUrl))
        return String.Empty;
    if (relativeUrl.StartsWith ("http://", StringComparison.OrdinalIgnoreCase) || relativeUrl.StartsWith ("https://", StringComparison.OrdinalIgnoreCase))
        return relativeUrl;
    if (HttpContext.Current == null)
        return relativeUrl;
    HttpContext context = HttpContext.Current;
    if (relativeUrl.StartsWith ("/"))
        relativeUrl = relativeUrl.Insert (0, "~");
    Page page = context.Handler as Page;
    if (page != null) {
        relativeUrl = page.ResolveUrl (relativeUrl);
    } else {
        if (! relativeUrl.StartsWith ("~/"))
            relativeUrl = relativeUrl.Insert (0, "~/");
        relativeUrl = VirtualPathUtility.ToAbsolute (relativeUrl);
    }
    var url = context.Request.Url;
    var port = url.Port != 80 ? (":" + url.Port) : String.Empty;
    return String.Format ("{0}://{1}{2}{3}", url.Scheme, url.Host, port, relativeUrl);
}
----------------------------------------

 public static string GetAbsoluteUrl (string relativeUrl)
{
    if (String.IsNullOrEmpty (relativeUrl))
        return String.Empty;
    if (relativeUrl.StartsWith ("http://", StringComparison.OrdinalIgnoreCase) || relativeUrl.StartsWith ("https://", StringComparison.OrdinalIgnoreCase))
        return relativeUrl;
    if (HttpContext.Current == null)
        return relativeUrl;
 
    string absoluteUrl;
    try
    {
        absoluteUrl = GetAbsoluteUrlFromVirtualPath(relativeUrl);
    }
    catch
    {
        Uri baseUri = HttpContext.Current.Request.Url;
        Uri resolvedUri = new Uri(baseUri, relativeUrl);
        absoluteUrl = resolvedUri.AbsoluteUri;
    }
 
    return absoluteUrl;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
282
1
Gpt3D_Clone282_1.cs 1 22
Gpt3D_Clone282_1.cs 23 42
----------------------------------------

public static string GetAbsoluteUrl (string relativeUrl) {
    if (String.IsNullOrEmpty (relativeUrl))
        return String.Empty;
    if (relativeUrl.StartsWith ("http://", StringComparison.OrdinalIgnoreCase) || relativeUrl.StartsWith ("https://", StringComparison.OrdinalIgnoreCase))
        return relativeUrl;
    if (HttpContext.Current == null)
        return relativeUrl;
    HttpContext context = HttpContext.Current;
    if (relativeUrl.StartsWith ("/"))
        relativeUrl = relativeUrl.Insert (0, "~");
    Page page = context.Handler as Page;
    if (page != null) {
        relativeUrl = page.ResolveUrl (relativeUrl);
    } else {
        if (! relativeUrl.StartsWith ("~/"))
            relativeUrl = relativeUrl.Insert (0, "~/");
        relativeUrl = VirtualPathUtility.ToAbsolute (relativeUrl);
    }
    var url = context.Request.Url;
    var port = url.Port != 80 ? (":" + url.Port) : String.Empty;
    return String.Format ("{0}://{1}{2}{3}", url.Scheme, url.Host, port, relativeUrl);
}
----------------------------------------

 public static string GetAbsoluteUrl (string relativeUrl) 
{
    if (String.IsNullOrEmpty (relativeUrl))
        return String.Empty;
    if (relativeUrl.StartsWith ("http://", StringComparison.OrdinalIgnoreCase) || relativeUrl.StartsWith ("https://", StringComparison.OrdinalIgnoreCase))
        return relativeUrl;
    if (HttpContext.Current == null)
        return relativeUrl;
 
    Uri baseUri = HttpContext.Current.Request.Url;
    string absoluteUri;
    if (relativeUrl.StartsWith ("~"))
        absoluteUri = VirtualPathUtility.ToAbsolute(relativeUrl);
    else
        absoluteUri = new Uri(baseUri, relativeUrl).AbsoluteUri;
 
    return absoluteUri; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
282
2
Gpt3D_Clone282_2.cs 1 22
Gpt3D_Clone282_2.cs 23 38
----------------------------------------

public static string GetAbsoluteUrl (string relativeUrl) {
    if (String.IsNullOrEmpty (relativeUrl))
        return String.Empty;
    if (relativeUrl.StartsWith ("http://", StringComparison.OrdinalIgnoreCase) || relativeUrl.StartsWith ("https://", StringComparison.OrdinalIgnoreCase))
        return relativeUrl;
    if (HttpContext.Current == null)
        return relativeUrl;
    HttpContext context = HttpContext.Current;
    if (relativeUrl.StartsWith ("/"))
        relativeUrl = relativeUrl.Insert (0, "~");
    Page page = context.Handler as Page;
    if (page != null) {
        relativeUrl = page.ResolveUrl (relativeUrl);
    } else {
        if (! relativeUrl.StartsWith ("~/"))
            relativeUrl = relativeUrl.Insert (0, "~/");
        relativeUrl = VirtualPathUtility.ToAbsolute (relativeUrl);
    }
    var url = context.Request.Url;
    var port = url.Port != 80 ? (":" + url.Port) : String.Empty;
    return String.Format ("{0}://{1}{2}{3}", url.Scheme, url.Host, port, relativeUrl);
}
----------------------------------------

 public static string GetAbsoluteUrl (string relativeUrl) 
{
    if (String.IsNullOrEmpty (relativeUrl))
        return String.Empty;
    if (relativeUrl.StartsWith ("http://", StringComparison.OrdinalIgnoreCase) || relativeUrl.StartsWith ("https://", StringComparison.OrdinalIgnoreCase))
        return relativeUrl;
    var url = HttpContext.Current.Request.Url;
    var port = url.Port != 80 ? (":" + url.Port) : String.Empty;
    if (relativeUrl.StartsWith ("/"))
        relativeUrl = relativeUrl.Insert (0, url.Scheme + "://" + url.Host + port);
    if (relativeUrl.StartsWith ("~"))
        relativeUrl = relativeUrl.Remove (0, 1);
    return VirtualPathUtility.ToAbsolute (relativeUrl);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
282
3
Gpt3D_Clone282_3.cs 1 22
Gpt3D_Clone282_3.cs 23 38
----------------------------------------

public static string GetAbsoluteUrl (string relativeUrl) {
    if (String.IsNullOrEmpty (relativeUrl))
        return String.Empty;
    if (relativeUrl.StartsWith ("http://", StringComparison.OrdinalIgnoreCase) || relativeUrl.StartsWith ("https://", StringComparison.OrdinalIgnoreCase))
        return relativeUrl;
    if (HttpContext.Current == null)
        return relativeUrl;
    HttpContext context = HttpContext.Current;
    if (relativeUrl.StartsWith ("/"))
        relativeUrl = relativeUrl.Insert (0, "~");
    Page page = context.Handler as Page;
    if (page != null) {
        relativeUrl = page.ResolveUrl (relativeUrl);
    } else {
        if (! relativeUrl.StartsWith ("~/"))
            relativeUrl = relativeUrl.Insert (0, "~/");
        relativeUrl = VirtualPathUtility.ToAbsolute (relativeUrl);
    }
    var url = context.Request.Url;
    var port = url.Port != 80 ? (":" + url.Port) : String.Empty;
    return String.Format ("{0}://{1}{2}{3}", url.Scheme, url.Host, port, relativeUrl);
}
----------------------------------------

  public static string GetAbsoluteUrl (string relativeUrl){
    if (String.IsNullOrEmpty (relativeUrl))
        return String.Empty;
    if (relativeUrl.StartsWith ("http://", StringComparison.OrdinalIgnoreCase) || relativeUrl.StartsWith ("https://", StringComparison.OrdinalIgnoreCase))
        return relativeUrl;
    var url = HttpContext.Current.Request.Url;
    if (url.IsAbsoluteUri)
      return relativeUrl;
    string port = url.Port != 80 ? (":" + url.Port) : String.Empty;
    var path = VirtualPathUtility.ToAbsolute (relativeUrl);
    return String.Format ("{0}://{1}{2}{3}", url.Scheme, url.Host, port, path);
  
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
282
4
Gpt3D_Clone282_4.cs 1 22
Gpt3D_Clone282_4.cs 23 36
----------------------------------------

public static string GetAbsoluteUrl (string relativeUrl) {
    if (String.IsNullOrEmpty (relativeUrl))
        return String.Empty;
    if (relativeUrl.StartsWith ("http://", StringComparison.OrdinalIgnoreCase) || relativeUrl.StartsWith ("https://", StringComparison.OrdinalIgnoreCase))
        return relativeUrl;
    if (HttpContext.Current == null)
        return relativeUrl;
    HttpContext context = HttpContext.Current;
    if (relativeUrl.StartsWith ("/"))
        relativeUrl = relativeUrl.Insert (0, "~");
    Page page = context.Handler as Page;
    if (page != null) {
        relativeUrl = page.ResolveUrl (relativeUrl);
    } else {
        if (! relativeUrl.StartsWith ("~/"))
            relativeUrl = relativeUrl.Insert (0, "~/");
        relativeUrl = VirtualPathUtility.ToAbsolute (relativeUrl);
    }
    var url = context.Request.Url;
    var port = url.Port != 80 ? (":" + url.Port) : String.Empty;
    return String.Format ("{0}://{1}{2}{3}", url.Scheme, url.Host, port, relativeUrl);
}
----------------------------------------

 public static string GetAbsoluteUrl (string relativeUrl)
{
    if (String.IsNullOrEmpty (relativeUrl))
        return String.Empty;
    if (relativeUrl.StartsWith ("http://", StringComparison.OrdinalIgnoreCase)|| relativeUrl.StartsWith ("https://", StringComparison.OrdinalIgnoreCase))
        return relativeUrl;
    relativeUrl = VirtualPathUtility.ToAbsolute(relativeUrl);
    var context = HttpContext.Current;
    Uri resolverUri = new Uri(context.Request.Url, relativeUrl);
    string url = resolverUri.AbsoluteUri;
    return url;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
282
5
Gpt3D_Clone282_5.cs 1 22
Gpt3D_Clone282_5.cs 23 36
----------------------------------------

public static string GetAbsoluteUrl (string relativeUrl) {
    if (String.IsNullOrEmpty (relativeUrl))
        return String.Empty;
    if (relativeUrl.StartsWith ("http://", StringComparison.OrdinalIgnoreCase) || relativeUrl.StartsWith ("https://", StringComparison.OrdinalIgnoreCase))
        return relativeUrl;
    if (HttpContext.Current == null)
        return relativeUrl;
    HttpContext context = HttpContext.Current;
    if (relativeUrl.StartsWith ("/"))
        relativeUrl = relativeUrl.Insert (0, "~");
    Page page = context.Handler as Page;
    if (page != null) {
        relativeUrl = page.ResolveUrl (relativeUrl);
    } else {
        if (! relativeUrl.StartsWith ("~/"))
            relativeUrl = relativeUrl.Insert (0, "~/");
        relativeUrl = VirtualPathUtility.ToAbsolute (relativeUrl);
    }
    var url = context.Request.Url;
    var port = url.Port != 80 ? (":" + url.Port) : String.Empty;
    return String.Format ("{0}://{1}{2}{3}", url.Scheme, url.Host, port, relativeUrl);
}
----------------------------------------

public static string GetAbsoluteUrl (string relativeUrl)
{
    if (String.IsNullOrEmpty (relativeUrl))
        return String.Empty;
    if (relativeUrl.StartsWith ("http://", StringComparison.OrdinalIgnoreCase) || relativeUrl.StartsWith ("https://", StringComparison.OrdinalIgnoreCase))
        return relativeUrl;
    if (HttpContext.Current == null)
        return relativeUrl;
    string baseUri = HttpContext.Current.Request.Url.GetLeftPart(UriPartial.Authority);
    string absoluteUri = new Uri(new Uri(baseUri), relativeUrl).AbsoluteUri;
    return absoluteUri;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
282
6
Gpt3D_Clone282_6.cs 1 22
Gpt3D_Clone282_6.cs 23 35
----------------------------------------

public static string GetAbsoluteUrl (string relativeUrl) {
    if (String.IsNullOrEmpty (relativeUrl))
        return String.Empty;
    if (relativeUrl.StartsWith ("http://", StringComparison.OrdinalIgnoreCase) || relativeUrl.StartsWith ("https://", StringComparison.OrdinalIgnoreCase))
        return relativeUrl;
    if (HttpContext.Current == null)
        return relativeUrl;
    HttpContext context = HttpContext.Current;
    if (relativeUrl.StartsWith ("/"))
        relativeUrl = relativeUrl.Insert (0, "~");
    Page page = context.Handler as Page;
    if (page != null) {
        relativeUrl = page.ResolveUrl (relativeUrl);
    } else {
        if (! relativeUrl.StartsWith ("~/"))
            relativeUrl = relativeUrl.Insert (0, "~/");
        relativeUrl = VirtualPathUtility.ToAbsolute (relativeUrl);
    }
    var url = context.Request.Url;
    var port = url.Port != 80 ? (":" + url.Port) : String.Empty;
    return String.Format ("{0}://{1}{2}{3}", url.Scheme, url.Host, port, relativeUrl);
}
----------------------------------------

public static string GetAbsoluteUrl (string relativeUrl){
    if (String.IsNullOrEmpty (relativeUrl))
        return String.Empty;
    if (relativeUrl.StartsWith ("http://", StringComparison.OrdinalIgnoreCase) || relativeUrl.StartsWith ("https://", StringComparison.OrdinalIgnoreCase))
        return relativeUrl;
    Uri baseUri = HttpContext.Current.Request.Url;
    Uri resolvedUri = new Uri(baseUri, relativeUrl);
    string url = resolvedUri.AbsoluteUri;
    return url;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
282
7
Gpt3D_Clone282_7.cs 1 22
Gpt3D_Clone282_7.cs 23 35
----------------------------------------

public static string GetAbsoluteUrl (string relativeUrl) {
    if (String.IsNullOrEmpty (relativeUrl))
        return String.Empty;
    if (relativeUrl.StartsWith ("http://", StringComparison.OrdinalIgnoreCase) || relativeUrl.StartsWith ("https://", StringComparison.OrdinalIgnoreCase))
        return relativeUrl;
    if (HttpContext.Current == null)
        return relativeUrl;
    HttpContext context = HttpContext.Current;
    if (relativeUrl.StartsWith ("/"))
        relativeUrl = relativeUrl.Insert (0, "~");
    Page page = context.Handler as Page;
    if (page != null) {
        relativeUrl = page.ResolveUrl (relativeUrl);
    } else {
        if (! relativeUrl.StartsWith ("~/"))
            relativeUrl = relativeUrl.Insert (0, "~/");
        relativeUrl = VirtualPathUtility.ToAbsolute (relativeUrl);
    }
    var url = context.Request.Url;
    var port = url.Port != 80 ? (":" + url.Port) : String.Empty;
    return String.Format ("{0}://{1}{2}{3}", url.Scheme, url.Host, port, relativeUrl);
}
----------------------------------------

public static string GetAbsoluteUrl (string relativeUrl)
{
    if (String.IsNullOrEmpty (relativeUrl))
        return String.Empty;
    if (relativeUrl.StartsWith ("http://", StringComparison.OrdinalIgnoreCase) || relativeUrl.StartsWith ("https://", StringComparison.OrdinalIgnoreCase))
        return relativeUrl;
    var context = HttpContext.Current;
    Uri resolverUri = new Uri(context.Request.Url, relativeUrl);
    string url = resolverUri.AbsoluteUri;
    return url;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
282
8
Gpt3D_Clone282_8.cs 1 22
Gpt3D_Clone282_8.cs 23 36
----------------------------------------

public static string GetAbsoluteUrl (string relativeUrl) {
    if (String.IsNullOrEmpty (relativeUrl))
        return String.Empty;
    if (relativeUrl.StartsWith ("http://", StringComparison.OrdinalIgnoreCase) || relativeUrl.StartsWith ("https://", StringComparison.OrdinalIgnoreCase))
        return relativeUrl;
    if (HttpContext.Current == null)
        return relativeUrl;
    HttpContext context = HttpContext.Current;
    if (relativeUrl.StartsWith ("/"))
        relativeUrl = relativeUrl.Insert (0, "~");
    Page page = context.Handler as Page;
    if (page != null) {
        relativeUrl = page.ResolveUrl (relativeUrl);
    } else {
        if (! relativeUrl.StartsWith ("~/"))
            relativeUrl = relativeUrl.Insert (0, "~/");
        relativeUrl = VirtualPathUtility.ToAbsolute (relativeUrl);
    }
    var url = context.Request.Url;
    var port = url.Port != 80 ? (":" + url.Port) : String.Empty;
    return String.Format ("{0}://{1}{2}{3}", url.Scheme, url.Host, port, relativeUrl);
}
----------------------------------------

 public static string GetAbsoluteUrl (string relativeUrl)
{
    if (String.IsNullOrEmpty (relativeUrl))
        return String.Empty;
    if (relativeUrl.StartsWith ("http://", StringComparison.OrdinalIgnoreCase) || relativeUrl.StartsWith ("https://", StringComparison.OrdinalIgnoreCase))
        return relativeUrl;
    Uri baseUri = HttpContext.Current.Request.Url;
    relativeUrl = relativeUrl.Replace("~", "");
    string url = baseUri.Scheme + "://" + baseUri.Authority + relativeUrl;
    return url;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
285
0
Gpt3D_Clone285_0.cs 1 11
Gpt3D_Clone285_0.cs 12 39
----------------------------------------

public VideoFile GetVideoInfo (string inputPath) {
    VideoFile vf = null;
    try {
        vf = new VideoFile (inputPath);
    }
    catch (Exception ex) {
        throw ex;
    }
    GetVideoInfo (vf);
    return vf;
}
----------------------------------------

  public VideoFile GetVideoInfo (string inputPath) 
{
    VideoFile vf = null;
    bool isValidInputPath = true;
    try 
    {
        if (!string.IsNullOrWhiteSpace(inputPath))
        {
            vf = new VideoFile(inputPath);
            GetVideoInfo (vf);
        }
        else
        {
            isValidInputPath = false;
        }
    }
    catch (Exception ex) 
    {
        throw new Exception("Error getting video info.", ex);
    }
    if (isValidInputPath)
    {
        return vf;
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
285
1
Gpt3D_Clone285_1.cs 1 11
Gpt3D_Clone285_1.cs 12 39
----------------------------------------

public VideoFile GetVideoInfo (string inputPath) {
    VideoFile vf = null;
    try {
        vf = new VideoFile (inputPath);
    }
    catch (Exception ex) {
        throw ex;
    }
    GetVideoInfo (vf);
    return vf;
}
----------------------------------------

  public VideoFile GetVideoInfo (string inputPath) 
{
    VideoFile vf = null;
    bool isValidInputPath = false;
    try
    {
        if (!string.IsNullOrWhiteSpace(inputPath))
        {
            isValidInputPath = true;
            vf = new VideoFile (inputPath);
            GetVideoInfo (vf);
        }
    }
    catch (Exception ex)
    {
        throw ex;
    }
    if (isValidInputPath)
    {
        return vf;
    }
    else
    {
        return null;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
285
4
Gpt3D_Clone285_4.cs 1 11
Gpt3D_Clone285_4.cs 12 29
----------------------------------------

public VideoFile GetVideoInfo (string inputPath) {
    VideoFile vf = null;
    try {
        vf = new VideoFile (inputPath);
    }
    catch (Exception ex) {
        throw ex;
    }
    GetVideoInfo (vf);
    return vf;
}
----------------------------------------

  public VideoFile GetVideoInfo (string inputPath) 
{
    try
    {
        VideoFile vf = new VideoFile (inputPath);
        GetVideoInfo (vf);
        if (vf != null)
        {
            return vf;
        }
    }
    catch (Exception ex)
    {
        throw ex;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
285
6
Gpt3D_Clone285_6.cs 1 11
Gpt3D_Clone285_6.cs 12 26
----------------------------------------

public VideoFile GetVideoInfo (string inputPath) {
    VideoFile vf = null;
    try {
        vf = new VideoFile (inputPath);
    }
    catch (Exception ex) {
        throw ex;
    }
    GetVideoInfo (vf);
    return vf;
}
----------------------------------------

  public VideoFile GetVideoInfo (string inputPath)
{
    try
    {
        VideoFile vf = new VideoFile (inputPath);
        GetVideoInfo (vf);
        return vf;
    }
    catch (Exception ex)
    {
        throw new Exception("Error Could not create file object", ex);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
285
8
Gpt3D_Clone285_8.cs 1 11
Gpt3D_Clone285_8.cs 12 19
----------------------------------------

public VideoFile GetVideoInfo (string inputPath) {
    VideoFile vf = null;
    try {
        vf = new VideoFile (inputPath);
    }
    catch (Exception ex) {
        throw ex;
    }
    GetVideoInfo (vf);
    return vf;
}
----------------------------------------

  public VideoFile GetVideoInfo (string inputPath) 
{
    VideoFile vf = new VideoFile (inputPath);
    GetVideoInfo (vf);
    return vf;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
287
0
Gpt3D_Clone287_0.cs 1 17
Gpt3D_Clone287_0.cs 18 49
----------------------------------------

public static string GetFriendlyName (this Type type) {
    string friendlyName = type.Name;
    if (type.IsGenericType) {
        int iBacktick = friendlyName.IndexOf ('`');
        if (iBacktick > 0) {
            friendlyName = friendlyName.Remove (iBacktick);
        }
        friendlyName += "<";
        Type [] typeParameters = type.GetGenericArguments ();
        for (int i = 0; i < typeParameters.Length; ++ i) {
            string typeParamName = GetFriendlyName (typeParameters [i]);
            friendlyName += (i == 0 ? typeParamName : "," + typeParamName);
        }
        friendlyName += "><![CDATA[";
    }
    return friendlyName;
}
----------------------------------------

 public static string GetFriendlyName(this Type type) 
{ 
    string friendlyName = type.Name; 
    if (type.IsGenericType) 
    { 
        int iBacktick = friendlyName.IndexOf('`'); 
        if (iBacktick > 0) 
        { 
            friendlyName = friendlyName.Remove(iBacktick); 
        } 
        friendlyName += "<"; 
        IEnumerable<Type> typeParameters = type.GetGenericArguments(); 
        bool isFirstParameter = true; 
        foreach(var paramType in typeParameters) 
        { 
            if (!isFirstParameter) 
            { 
                friendlyName += ", "; 
            } 
            else 
            { 
                isFirstParameter = false; 
            } 
            string typeParamName = GetFriendlyName(paramType); 
            friendlyName += typeParamName; 
        } 
        friendlyName += "><![CDATA["; 
    } 
    return friendlyName; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
292
0
Gpt3D_Clone292_0.cs 1 11
Gpt3D_Clone292_0.cs 12 41
----------------------------------------

public override void WriteJson (JsonWriter writer, object value, JsonSerializer serializer) {
    JToken t = JToken.FromObject (value);
    if (t.Type != JTokenType.Object) {
        t.WriteTo (writer);
        return;
    }
    JObject o = (JObject) t;
    writer.WriteStartObject ();
    WriteJson (writer, o);
    writer.WriteEndObject ();
}
----------------------------------------

 public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
{
    JToken t = JToken.FromObject(value);
    if (t.Type != JTokenType.Object)
    {
        t.WriteTo(writer);
        return;
    }
    JObject o = (JObject)t;
    writer.WriteStartObject();
    foreach (var prop in o.Properties())
    {
        writer.WritePropertyName(prop.Name);
        switch (prop.Value.Type)
        {
            case JTokenType.Object:
                WriteJson(writer, (JObject)prop.Value, serializer);
                break;
            case JTokenType.Array:
                WriteJson(writer, (JArray)prop.Value, serializer);
                break;
            default:
                prop.Value.WriteTo(writer);
                break;
        }
    }
    writer.WriteEndObject();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
293
2
Gpt3D_Clone293_2.cs 1 17
Gpt3D_Clone293_2.cs 18 37
----------------------------------------

public static void MoveUp (this TreeNode node) {
    TreeNode parent = node.Parent;
    TreeView view = node.TreeView;
    if (parent != null) {
        int index = parent.Nodes.IndexOf (node);
        if (index > 0) {
            parent.Nodes.RemoveAt (index);
            parent.Nodes.Insert (index - 1, node);
        }
    } else if (node.TreeView.Nodes.Contains (node)) {
        int index = view.Nodes.IndexOf (node);
        if (index > 0) {
            view.Nodes.RemoveAt (index);
            view.Nodes.Insert (index - 1, node);
        }
    }
}
----------------------------------------

public static void MoveUp (this TreeNode node) {
    TreeNode parent = node.Parent;
    TreeView view = node.TreeView;
    List<TreeNode> col = parent != null ? parent.Nodes.ToList() : view.Nodes.ToList();
    int index = col.IndexOf (node);
    if (index > 0) {
        col.Remove (node);
        col.Insert (index - 1, node);
        if (parent != null) {
            parent.Nodes.Clear();
            parent.Nodes.AddRange (col.ToArray());
        } else {
            view.Nodes.Clear();
            view.Nodes.AddRange (col.ToArray());
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
293
3
Gpt3D_Clone293_3.cs 1 17
Gpt3D_Clone293_3.cs 18 37
----------------------------------------

public static void MoveUp (this TreeNode node) {
    TreeNode parent = node.Parent;
    TreeView view = node.TreeView;
    if (parent != null) {
        int index = parent.Nodes.IndexOf (node);
        if (index > 0) {
            parent.Nodes.RemoveAt (index);
            parent.Nodes.Insert (index - 1, node);
        }
    } else if (node.TreeView.Nodes.Contains (node)) {
        int index = view.Nodes.IndexOf (node);
        if (index > 0) {
            view.Nodes.RemoveAt (index);
            view.Nodes.Insert (index - 1, node);
        }
    }
}
----------------------------------------

 
public static void MoveUp (this TreeNode node) {
    TreeNode parent = node.Parent;
    TreeView view = node.TreeView;
    List<TreeNode> col = parent != null ? parent.Nodes.ToList() : view.Nodes.ToList();
    int index = col.IndexOf (node);
    if (index > 0) {
        col.RemoveAt(index);
        col.Insert (index - 1, node);
        if (parent != null) {
            parent.Nodes.Clear();
            parent.Nodes.AddRange (col.ToArray());
        } else {
            view.Nodes.Clear();
            view.Nodes.AddRange (col.ToArray());
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
294
1
Gpt3D_Clone294_1.cs 1 17
Gpt3D_Clone294_1.cs 18 50
----------------------------------------

public static void MoveDown (this TreeNode node) {
    TreeNode parent = node.Parent;
    TreeView view = node.TreeView;
    if (parent != null) {
        int index = parent.Nodes.IndexOf (node);
        if (index < parent.Nodes.Count - 1) {
            parent.Nodes.RemoveAt (index);
            parent.Nodes.Insert (index + 1, node);
        }
    } else if (view != null && view.Nodes.Contains (node)) {
        int index = view.Nodes.IndexOf (node);
        if (index < view.Nodes.Count - 1) {
            view.Nodes.RemoveAt (index);
            view.Nodes.Insert (index + 1, node);
        }
    }
}
----------------------------------------

 	public static void MoveDown (this TreeNode node) {
 	   TreeNode next = node.NextNode;
    	if (next != null) {
   	    node.Parent.Nodes.RemoveAt (node.Index);
  	   node.Parent.Nodes.Insert (next.Index, node);
    	}
	}
 public static void MoveDown (this TreeNode node) {
    TreeNode parent = node.Parent;
    TreeView view = node.TreeView;
    if (parent != null)
    {
        int index = parent.Nodes.IndexOf (node);
        if (index < parent.Nodes.Count - 1)
        {
            parent.Nodes.RemoveAt(index);
            parent.Nodes.Insert(index + 2, node);
        }
    }
    else if (view != null && view.Nodes.Contains(node))
    {
        int index = view.Nodes.IndexOf(node);
        if (index < view.Nodes.Count - 1)
        {
            view.Nodes.RemoveAt(index);
            view.Nodes.Insert(index + 2, node);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
295
5
Gpt3D_Clone295_5.cs 1 11
Gpt3D_Clone295_5.cs 12 31
----------------------------------------

static void xn () {
    double r = 3.9;
    double [] xr_arr = new double [100];
    for (double x = 0; x <= 1; x += 0.01) {
        double xr = r * x * (1 - x);
        xr_arr [x] = xr;
        for (int y = 0; y < 23; y ++) {
            Console.WriteLine (xr_arr [y]);
        }
    }
}
----------------------------------------

 static void xn()
{
    double r = 3.9;
    List<double> xr_arr = new List<double>();
    double x = 0;
    while (x <= 1)
    {
        double xr = r * x * (1 - x);
        xr_arr.Add(xr);
        x += 0.01;
    }
    for (int y = 0; y < 23; y++)
    {
        Console.WriteLine(xr_arr[y]);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
295
6
Gpt3D_Clone295_6.cs 1 11
Gpt3D_Clone295_6.cs 12 29
----------------------------------------

static void xn () {
    double r = 3.9;
    double [] xr_arr = new double [100];
    for (double x = 0; x <= 1; x += 0.01) {
        double xr = r * x * (1 - x);
        xr_arr [x] = xr;
        for (int y = 0; y < 23; y ++) {
            Console.WriteLine (xr_arr [y]);
        }
    }
}
----------------------------------------

 static void xn()
{
    double r = 3.9;
    double x = 0;
    int xr_arr_length = 101;
    double[] xr_arr = new double[xr_arr_length];
    for (int i = 0; i < xr_arr_length; i++)
    {
        xr_arr[i] = r * x * (1 - x);
        x += 0.01;
    }
    for (int y = 0; y < 23; y++)
    {
        Console.WriteLine(xr_arr[y]);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
295
7
Gpt3D_Clone295_7.cs 1 11
Gpt3D_Clone295_7.cs 12 29
----------------------------------------

static void xn () {
    double r = 3.9;
    double [] xr_arr = new double [100];
    for (double x = 0; x <= 1; x += 0.01) {
        double xr = r * x * (1 - x);
        xr_arr [x] = xr;
        for (int y = 0; y < 23; y ++) {
            Console.WriteLine (xr_arr [y]);
        }
    }
}
----------------------------------------

 static void xn()
{
    double r = 3.9;
    double x = 0.0d;
    int xr_arr_length = 101;
    double[] xr_arr = new double[xr_arr_length];
    for (int i = 0; i < xr_arr_length; i++)
    {
        xr_arr[i] = r * x * (1 - x);
        x = x + 0.01;
    }
    for (int y = 0; y < 23; y++)
    {
        Console.WriteLine(xr_arr[y]);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
299
0
Gpt3D_Clone299_0.cs 1 10
Gpt3D_Clone299_0.cs 11 35
----------------------------------------

public static string CombinePaths (params string [] paths) {
    if (paths == null) {
        return null;
    }
    string currentPath = paths [0];
    for (int i = 1; i < paths.Length; i ++) {
        currentPath = Path.Combine (currentPath, paths [i]);
    }
    return currentPath;
}
----------------------------------------

 public static Dictionary<string, string> CombinePaths (params string [] paths) {
    if (paths == null) {
        return null;
    }
    string currentPath = string.Empty;
    int index = 0;
    Dictionary<string, string> pathData = new Dictionary<string, string>();
    foreach(string item in paths) {
        string itemPath = string.Empty;
        if (index == 0) {
            itemPath = item;
        }
        else {
            itemPath = Path.Combine(currentPath, item);
        }
        currentPath = itemPath;
      
        pathData.Add($"{index}", itemPath);
        index++;
    }
     
    return pathData;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
299
1
Gpt3D_Clone299_1.cs 1 10
Gpt3D_Clone299_1.cs 11 31
----------------------------------------

public static string CombinePaths (params string [] paths) {
    if (paths == null) {
        return null;
    }
    string currentPath = paths [0];
    for (int i = 1; i < paths.Length; i ++) {
        currentPath = Path.Combine (currentPath, paths [i]);
    }
    return currentPath;
}
----------------------------------------

 public static string CombinePaths (string delimiter, params string [] paths) {
    if (paths == null) {
        return null;
    }
    StringBuilder builder = new StringBuilder();
    foreach (string path in paths)
    {
        builder.Append(path);
        builder.Append(delimiter);
    }
    string combinedPath = builder.ToString();
    if(combinedPath.Length != 0 && delimiter.Length != 0)
    {
        combinedPath = combinedPath.Remove(combinedPath.Length - delimiter.Length);
    }
    return combinedPath;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
299
2
Gpt3D_Clone299_2.cs 1 10
Gpt3D_Clone299_2.cs 11 24
----------------------------------------

public static string CombinePaths (params string [] paths) {
    if (paths == null) {
        return null;
    }
    string currentPath = paths [0];
    for (int i = 1; i < paths.Length; i ++) {
        currentPath = Path.Combine (currentPath, paths [i]);
    }
    return currentPath;
}
----------------------------------------

 public static string CombinePaths (char[] delimiters, params string [] paths) {
    if (paths == null) {
        return null;
    }
    StringBuilder sb = new StringBuilder(paths[0]);
    for (int i = 1; i < paths.Length; i++) {
        sb.Append(delimiters[0]);
        sb.Append(paths[i]);
    }
    return sb.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
299
4
Gpt3D_Clone299_4.cs 1 10
Gpt3D_Clone299_4.cs 11 24
----------------------------------------

public static string CombinePaths (params string [] paths) {
    if (paths == null) {
        return null;
    }
    string currentPath = paths [0];
    for (int i = 1; i < paths.Length; i ++) {
        currentPath = Path.Combine (currentPath, paths [i]);
    }
    return currentPath;
}
----------------------------------------

 public static string CombinePaths (string firstPath, params string [] paths) {
    if (paths == null) {
        return null;
    }
    StringBuilder sb = new StringBuilder(firstPath);
    foreach(string path in paths)
    {
    sb.Append(path);
    sb.Append("\\");
    }
    return sb.ToString().Replace("\\\\", "\\");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
299
5
Gpt3D_Clone299_5.cs 1 10
Gpt3D_Clone299_5.cs 11 23
----------------------------------------

public static string CombinePaths (params string [] paths) {
    if (paths == null) {
        return null;
    }
    string currentPath = paths [0];
    for (int i = 1; i < paths.Length; i ++) {
        currentPath = Path.Combine (currentPath, paths [i]);
    }
    return currentPath;
}
----------------------------------------

 public static string CombinePaths (string delimiter, params string [] paths) {
    if (paths == null) {
        return null;
    }
    string comboPath = "";
    comboPath += paths [0];
    for (int i = 1; i < paths.Length; i ++) {
        comboPath += delimiter + paths [i];
    }
    return comboPath;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
299
6
Gpt3D_Clone299_6.cs 1 10
Gpt3D_Clone299_6.cs 11 23
----------------------------------------

public static string CombinePaths (params string [] paths) {
    if (paths == null) {
        return null;
    }
    string currentPath = paths [0];
    for (int i = 1; i < paths.Length; i ++) {
        currentPath = Path.Combine (currentPath, paths [i]);
    }
    return currentPath;
}
----------------------------------------

 public static string CombinePaths ( string initialPath, params string [] paths) {
    if (paths == null) {
        return null;
    }
    string currentPath = initialPath;
    int numPaths = paths.Length;
    for (int i = 0; i < numPaths; i++) {
        currentPath += '/' + paths [i];
    }
    return currentPath;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
299
7
Gpt3D_Clone299_7.cs 1 10
Gpt3D_Clone299_7.cs 11 23
----------------------------------------

public static string CombinePaths (params string [] paths) {
    if (paths == null) {
        return null;
    }
    string currentPath = paths [0];
    for (int i = 1; i < paths.Length; i ++) {
        currentPath = Path.Combine (currentPath, paths [i]);
    }
    return currentPath;
}
----------------------------------------

 public static string CombinePaths (string combinedPaths, params string [] paths) {
    if (paths == null) {
        return null;
    }
    string newPath = combinedPaths;
    foreach (string path in paths) {
        combinedPaths += "\\" + path;
    }
    combinedPaths = combinedPaths.Replace("\\\\", "\\");
    return combinedPaths;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
299
8
Gpt3D_Clone299_8.cs 1 10
Gpt3D_Clone299_8.cs 11 23
----------------------------------------

public static string CombinePaths (params string [] paths) {
    if (paths == null) {
        return null;
    }
    string currentPath = paths [0];
    for (int i = 1; i < paths.Length; i ++) {
        currentPath = Path.Combine (currentPath, paths [i]);
    }
    return currentPath;
}
----------------------------------------

 public static string CombinePaths (string initialPath, params string [] paths) {
    if (paths == null) {
        return null;
    }
    string currentPath = initialPath;
    foreach(string path in paths)
    {
        currentPath = Path.Combine(currentPath, path);
    }
    return currentPath;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
299
9
Gpt3D_Clone299_9.cs 1 10
Gpt3D_Clone299_9.cs 11 21
----------------------------------------

public static string CombinePaths (params string [] paths) {
    if (paths == null) {
        return null;
    }
    string currentPath = paths [0];
    for (int i = 1; i < paths.Length; i ++) {
        currentPath = Path.Combine (currentPath, paths [i]);
    }
    return currentPath;
}
----------------------------------------

 public static string CombinePaths (string separator, params string [] paths) {
    if (paths == null) {
        return null;
    }
    string currentPath = string.Join(separator, paths);           
    return currentPath;
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
300
0
Gpt3D_Clone300_0.cs 1 16
Gpt3D_Clone300_0.cs 17 72
----------------------------------------

public static bool HasFlag (this Enum e, Enum flag) {
    if (flag == null) {
        throw new ArgumentNullException ("flag");
    }
    if (e.GetType () != (flag.GetType ())) {
        throw new ArgumentException (string.Format ("The type of the given flag is not of type {0}", e.GetType ()), "flag");
    }
    var typeCode = e.GetTypeCode ();
    if (typeCode == TypeCode.SByte || typeCode == TypeCode.Int16 || typeCode == TypeCode.Int32 || typeCode == TypeCode.Int64) {
        return (Convert.ToInt64 (e) & Convert.ToInt64 (flag)) != 0;
    }
    if (typeCode == TypeCode.Byte || typeCode == TypeCode.UInt16 || typeCode == TypeCode.UInt32 || typeCode == TypeCode.UInt64) {
        return (Convert.ToUInt64 (e) & Convert.ToUInt64 (flag)) != 0;
    }
    throw new Exception (string.Format ("The comparison of the type {0} is not implemented.", e.GetType ().Name));
}
----------------------------------------

 public static bool HasFlag(this Enum e, Enum flag) {
    if (e == null || flag == null) {
        throw new ArgumentNullException();
    }
    if (e.GetType() != flag.GetType()) {
        throw new ArgumentException(string.Format("The type of the given flag is not of type {0}", e.GetType()), "flag");
    }
    switch (e.GetTypeCode()) {
        case TypeCode.SByte: {
            sbyte eValue = Convert.ToSByte(e);
            sbyte flagValue = Convert.ToSByte(flag);
            return (eValue & flagValue) != 0;
        }
        case TypeCode.Int16: {
            short eValue = Convert.ToInt16(e);
            short flagValue = Convert.ToInt16(flag);
            return (eValue & flagValue) != 0;
        }
        case TypeCode.Int32: {
            int eValue = Convert.ToInt32(e);
            int flagValue = Convert.ToInt32(flag);
            return (eValue & flagValue) != 0;
        }
        case TypeCode.Int64: {
            long eValue = Convert.ToInt64(e);
            long flagValue = Convert.ToInt64(flag);
            return (eValue & flagValue) != 0;
        }
        case TypeCode.Byte: {
            byte eValue = Convert.ToByte(e);
            byte flagValue = Convert.ToByte(flag);
            return (eValue & flagValue) != 0;
        }
        case TypeCode.UInt16: {
            ushort eValue = Convert.ToUInt16(e);
            ushort flagValue = Convert.ToUInt16(flag);
            return (eValue & flagValue) != 0;
        }
        case TypeCode.UInt32: {
            uint eValue = Convert.ToUInt32(e);
            uint flagValue = Convert.ToUInt32(flag);
            return (eValue & flagValue) != 0;
        }
        case TypeCode.UInt64: {
            ulong eValue = Convert.ToUInt64(e);
            ulong flagValue = Convert.ToUInt64(flag);
            return (eValue & flagValue) != 0;
        }
    }
    throw new Exception(string.Format("The comparison of the type {0} is not implemented.", e.GetType().Name));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
300
1
Gpt3D_Clone300_1.cs 1 16
Gpt3D_Clone300_1.cs 17 46
----------------------------------------

public static bool HasFlag (this Enum e, Enum flag) {
    if (flag == null) {
        throw new ArgumentNullException ("flag");
    }
    if (e.GetType () != (flag.GetType ())) {
        throw new ArgumentException (string.Format ("The type of the given flag is not of type {0}", e.GetType ()), "flag");
    }
    var typeCode = e.GetTypeCode ();
    if (typeCode == TypeCode.SByte || typeCode == TypeCode.Int16 || typeCode == TypeCode.Int32 || typeCode == TypeCode.Int64) {
        return (Convert.ToInt64 (e) & Convert.ToInt64 (flag)) != 0;
    }
    if (typeCode == TypeCode.Byte || typeCode == TypeCode.UInt16 || typeCode == TypeCode.UInt32 || typeCode == TypeCode.UInt64) {
        return (Convert.ToUInt64 (e) & Convert.ToUInt64 (flag)) != 0;
    }
    throw new Exception (string.Format ("The comparison of the type {0} is not implemented.", e.GetType ().Name));
}
----------------------------------------

 public static bool HasFlag (this Enum e, Enum flag){
    if (e == null || flag == null)
        throw new ArgumentNullException();
    Type eType = e.GetType();
    Type flagType = flag.GetType();
    if (eType != flagType)
        throw new ArgumentException(string.Format("The flag does not match Enum type {0}", eType), "flag");
    switch (eType.GetTypeCode()) {
        case TypeCode.SByte:
            return (Convert.ToSByte(e) & Convert.ToSByte(flag)).Equals(1);
        case TypeCode.Int16:
            return (Convert.ToInt16(e) & Convert.ToInt16(flag)).Equals(1);
        case TypeCode.Int32:
            return (Convert.ToInt32(e) & Convert.ToInt32(flag)).Equals(1);
        case TypeCode.Int64:
            return (Convert.ToInt64(e) & Convert.ToInt64(flag)).Equals(1);
        case TypeCode.Byte:
            return (Convert.ToByte(e) & Convert.ToByte(flag)).Equals(1);
        case TypeCode.UInt16:
            return (Convert.ToUInt16(e) & Convert.ToUInt16(flag)).Equals(1);
        case TypeCode.UInt32:
            return (Convert.ToUInt32(e) & Convert.ToUInt32(flag)).Equals(1);
        case TypeCode.UInt64:
            return (Convert.ToUInt64(e) & Convert.ToUInt64(flag)).Equals(1); 
    }
    throw new Exception(string.Format("The comparison of the type {0} is not implemented.", eType.Name));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
300
2
Gpt3D_Clone300_2.cs 1 16
Gpt3D_Clone300_2.cs 17 47
----------------------------------------

public static bool HasFlag (this Enum e, Enum flag) {
    if (flag == null) {
        throw new ArgumentNullException ("flag");
    }
    if (e.GetType () != (flag.GetType ())) {
        throw new ArgumentException (string.Format ("The type of the given flag is not of type {0}", e.GetType ()), "flag");
    }
    var typeCode = e.GetTypeCode ();
    if (typeCode == TypeCode.SByte || typeCode == TypeCode.Int16 || typeCode == TypeCode.Int32 || typeCode == TypeCode.Int64) {
        return (Convert.ToInt64 (e) & Convert.ToInt64 (flag)) != 0;
    }
    if (typeCode == TypeCode.Byte || typeCode == TypeCode.UInt16 || typeCode == TypeCode.UInt32 || typeCode == TypeCode.UInt64) {
        return (Convert.ToUInt64 (e) & Convert.ToUInt64 (flag)) != 0;
    }
    throw new Exception (string.Format ("The comparison of the type {0} is not implemented.", e.GetType ().Name));
}
----------------------------------------

 public static bool HasFlag (this Enum e, Enum flag) {
    if (e == null || flag == null) {
        throw new ArgumentNullException();
    }
    if (e.GetType() != flag.GetType()) {
        throw new ArgumentException (string.Format ("The type of the given flag is not of type {0}", e.GetType ()), "flag");
    }
    TypeCode typeCode = e.GetTypeCode();
    switch (typeCode) 
    {
        case TypeCode.SByte:
            return (Convert.ToSByte(e) & Convert.ToSByte(flag)) != 0;
        case TypeCode.Int16:
            return (Convert.ToInt16(e) & Convert.ToInt16(flag)) != 0;
        case TypeCode.Int32:
            return (Convert.ToInt32(e) & Convert.ToInt32(flag)) != 0;
        case TypeCode.Int64:
            return (Convert.ToInt64(e) & Convert.ToInt64(flag)) != 0;
        case TypeCode.Byte:
            return (Convert.ToByte(e) & Convert.ToByte(flag)) != 0;
        case TypeCode.UInt16:
            return (Convert.ToUInt16(e) & Convert.ToUInt16(flag)) != 0;
        case TypeCode.UInt32:
            return (Convert.ToUInt32(e) & Convert.ToUInt32(flag)) != 0;
        case TypeCode.UInt64:
            return (Convert.ToUInt64(e) & Convert.ToUInt64(flag)) != 0;
    }
    throw new Exception(string.Format("The comparison of the type {0} is not implemented.", typeCode.ToString()));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
300
3
Gpt3D_Clone300_3.cs 1 16
Gpt3D_Clone300_3.cs 17 53
----------------------------------------

public static bool HasFlag (this Enum e, Enum flag) {
    if (flag == null) {
        throw new ArgumentNullException ("flag");
    }
    if (e.GetType () != (flag.GetType ())) {
        throw new ArgumentException (string.Format ("The type of the given flag is not of type {0}", e.GetType ()), "flag");
    }
    var typeCode = e.GetTypeCode ();
    if (typeCode == TypeCode.SByte || typeCode == TypeCode.Int16 || typeCode == TypeCode.Int32 || typeCode == TypeCode.Int64) {
        return (Convert.ToInt64 (e) & Convert.ToInt64 (flag)) != 0;
    }
    if (typeCode == TypeCode.Byte || typeCode == TypeCode.UInt16 || typeCode == TypeCode.UInt32 || typeCode == TypeCode.UInt64) {
        return (Convert.ToUInt64 (e) & Convert.ToUInt64 (flag)) != 0;
    }
    throw new Exception (string.Format ("The comparison of the type {0} is not implemented.", e.GetType ().Name));
}
----------------------------------------

 public static bool HasFlag (this Enum e, Enum flag) {
    if (flag == null) {
        throw new ArgumentNullException ("flag");
    }
    if (e.GetType () != flag.GetType ()) {
        throw new ArgumentException (string.Format ("The type of the given flag is not of type {0}", e.GetType ()), "flag");
    }
    switch (e.GetTypeCode ()) {
        case TypeCode.SByte:
            return (Convert.ToSByte (e) & Convert.ToSByte (flag)) != 0;
        case TypeCode.Int16:
            return (Convert.ToInt16 (e) & Convert.ToInt16 (flag)) != 0;
        case TypeCode.Int32:
            return (Convert.ToInt32 (e) & Convert.ToInt32 (flag)) != 0;
        case TypeCode.Int64:
            return (Convert.ToInt64 (e) & Convert.ToInt64 (flag)) != 0;
        case TypeCode.Byte:
            return (Convert.ToByte (e) & Convert.ToByte (flag)) != 0;
        case TypeCode.UInt16:
            return (Convert.ToUInt16 (e) & Convert.ToUInt16 (flag)) != 0;
        case TypeCode.UInt32:
            return (Convert.ToUInt32 (e) & Convert.ToUInt32 (flag)) != 0;
        case TypeCode.UInt64:
            return (Convert.ToUInt64 (e) & Convert.ToUInt64 (flag)) != 0;
    }
    throw new Exception (string.Format ("The comparison of the type {0} is not implemented.", e.GetType ().Name));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
300
4
Gpt3D_Clone300_4.cs 1 16
Gpt3D_Clone300_4.cs 17 37
----------------------------------------

public static bool HasFlag (this Enum e, Enum flag) {
    if (flag == null) {
        throw new ArgumentNullException ("flag");
    }
    if (e.GetType () != (flag.GetType ())) {
        throw new ArgumentException (string.Format ("The type of the given flag is not of type {0}", e.GetType ()), "flag");
    }
    var typeCode = e.GetTypeCode ();
    if (typeCode == TypeCode.SByte || typeCode == TypeCode.Int16 || typeCode == TypeCode.Int32 || typeCode == TypeCode.Int64) {
        return (Convert.ToInt64 (e) & Convert.ToInt64 (flag)) != 0;
    }
    if (typeCode == TypeCode.Byte || typeCode == TypeCode.UInt16 || typeCode == TypeCode.UInt32 || typeCode == TypeCode.UInt64) {
        return (Convert.ToUInt64 (e) & Convert.ToUInt64 (flag)) != 0;
    }
    throw new Exception (string.Format ("The comparison of the type {0} is not implemented.", e.GetType ().Name));
}
----------------------------------------

 public static bool HasFlag (this Enum e, Enum flag) {
    if (flag == null) {
        throw new ArgumentNullException ("flag");
    }
    if (e.GetType () != flag.GetType ()) {
        throw new ArgumentException (string.Format ("The type of the given flag is not of type {0}", e.GetType ()), "flag");
    }
    long eValue = Convert.ToInt64 (e);
    long flagValue = Convert.ToInt64 (flag);
    if (e.GetTypeCode () == TypeCode.SByte || e.GetTypeCode () == TypeCode.Int16 || 
         e.GetTypeCode () == TypeCode.Int32 || e.GetTypeCode () == TypeCode.Int64){
        return (eValue & flagValue) != 0;
     } else if (e.GetTypeCode () == TypeCode.Byte || e.GetTypeCode () == TypeCode.UInt16 || 
                e.GetTypeCode () == TypeCode.UInt32 || e.GetTypeCode () == TypeCode.UInt64){
        return (Convert.ToUInt64 (e) & Convert.ToUInt64 (flag)) != 0;
     }
     throw new Exception (string.Format ("The comparison of the type {0} is not implemented.", e.GetType ().Name));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
303
0
Gpt3D_Clone303_0.cs 1 22
Gpt3D_Clone303_0.cs 23 60
----------------------------------------

public static bool AreSame (Type sourceType, Type destinationType) {
    if (sourceType == null || destinationType == null) {
        return false;
    }
    if (sourceType == destinationType) {
        return true;
    }
    Type tempDestinationType = destinationType;
    while (tempDestinationType.BaseType != typeof (object)) {
        tempDestinationType = tempDestinationType.BaseType;
    }
    if (tempDestinationType.IsAssignableFrom (sourceType)) {
        return true;
    }
    var query = from d in destinationType.GetInterfaces ()
        join s in sourceType.GetInterfaces () on d.Name equals s.Name
        select s;
    if (query != Enumerable.Empty < Type > ()) {
        return true;
    }
    return false;
}
----------------------------------------

 public static bool AreSame(Type sourceType, Type destinationType)
{
    if(sourceType == null || destinationType == null)
    {
        return false;
    }
    else if(sourceType == destinationType)
    {
        return true;
    }
    else
    {
        Type tempDestinationType = destinationType;
        while(tempDestinationType.BaseType != typeof(Object))
        {
            if(sourceType.IsAssignableFrom(tempDestinationType.BaseType))
            {
                return true;
            }
            tempDestinationType = tempDestinationType.BaseType;
        }
        Type[] sourceInterfaces = sourceType.GetInterfaces();
        Type[] destinationInterface = destinationType.GetInterfaces();
        foreach(Type s in sourceInterfaces)
        {
            foreach(Type d in destinationInterface)
            {
                if(s.Name == d.Name)
                {
                    return true;
                }
            }
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
303
3
Gpt3D_Clone303_3.cs 1 22
Gpt3D_Clone303_3.cs 23 53
----------------------------------------

public static bool AreSame (Type sourceType, Type destinationType) {
    if (sourceType == null || destinationType == null) {
        return false;
    }
    if (sourceType == destinationType) {
        return true;
    }
    Type tempDestinationType = destinationType;
    while (tempDestinationType.BaseType != typeof (object)) {
        tempDestinationType = tempDestinationType.BaseType;
    }
    if (tempDestinationType.IsAssignableFrom (sourceType)) {
        return true;
    }
    var query = from d in destinationType.GetInterfaces ()
        join s in sourceType.GetInterfaces () on d.Name equals s.Name
        select s;
    if (query != Enumerable.Empty < Type > ()) {
        return true;
    }
    return false;
}
----------------------------------------

 public static bool AreSame(Type sourceType, Type destinationType)
{
    if (sourceType == null || destinationType == null)
    {
        return false;
    }
    else if (sourceType == destinationType)
    {
        return true;
    }
    else if (destinationType.IsSubclassOf(sourceType))
    {
        return true;
    }
    else
    {
        var sourceInterfaces = sourceType.GetInterfaces();
        var destinationInterfaces = destinationType.GetInterfaces();
 
        var compare = from s in sourceInterfaces
                      join d in destinationInterfaces
                      on s.Name equals d.Name
                      select s;
 
        if (compare.Any())
            return true;
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
303
5
Gpt3D_Clone303_5.cs 1 22
Gpt3D_Clone303_5.cs 23 44
----------------------------------------

public static bool AreSame (Type sourceType, Type destinationType) {
    if (sourceType == null || destinationType == null) {
        return false;
    }
    if (sourceType == destinationType) {
        return true;
    }
    Type tempDestinationType = destinationType;
    while (tempDestinationType.BaseType != typeof (object)) {
        tempDestinationType = tempDestinationType.BaseType;
    }
    if (tempDestinationType.IsAssignableFrom (sourceType)) {
        return true;
    }
    var query = from d in destinationType.GetInterfaces ()
        join s in sourceType.GetInterfaces () on d.Name equals s.Name
        select s;
    if (query != Enumerable.Empty < Type > ()) {
        return true;
    }
    return false;
}
----------------------------------------

 public static bool AreSame(Type sourceType, Type destinationType)
{
    if(sourceType == null || destinationType == null)
        return false;
    if (sourceType == destinationType)
        return true;
    if(destinationType.BaseType != typeof(object))
    {
        if(sourceType.IsAssignableFrom(destinationType.BaseType))
            return true;
        else
            destinationType = destinationType.BaseType;
    }
    foreach (Type interfce in destinationType.GetInterfaces())
    {
        if(sourceType.GetInterfaces().Contains(interfce))
            return true;
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
303
6
Gpt3D_Clone303_6.cs 1 22
Gpt3D_Clone303_6.cs 23 51
----------------------------------------

public static bool AreSame (Type sourceType, Type destinationType) {
    if (sourceType == null || destinationType == null) {
        return false;
    }
    if (sourceType == destinationType) {
        return true;
    }
    Type tempDestinationType = destinationType;
    while (tempDestinationType.BaseType != typeof (object)) {
        tempDestinationType = tempDestinationType.BaseType;
    }
    if (tempDestinationType.IsAssignableFrom (sourceType)) {
        return true;
    }
    var query = from d in destinationType.GetInterfaces ()
        join s in sourceType.GetInterfaces () on d.Name equals s.Name
        select s;
    if (query != Enumerable.Empty < Type > ()) {
        return true;
    }
    return false;
}
----------------------------------------

 public static bool AreSame(Type sourceType, Type destinationType)
{
    if (sourceType == null || destinationType == null)
    {
        return false;
    }
    else if (sourceType == destinationType)
    {
        return true;
    }
    else if (sourceType.IsSubclassOf(destinationType) || sourceType.IsAssignableFrom(destinationType))
    {
        return true;
    }
    else
    {
        var sourceInterfaces = sourceType.GetInterfaces();
        foreach (Type intf in sourceInterfaces)
        {
            if (destinationType.GetInterfaces().Contains(intf))
            {
                return true;
            }
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
303
7
Gpt3D_Clone303_7.cs 1 22
Gpt3D_Clone303_7.cs 23 42
----------------------------------------

public static bool AreSame (Type sourceType, Type destinationType) {
    if (sourceType == null || destinationType == null) {
        return false;
    }
    if (sourceType == destinationType) {
        return true;
    }
    Type tempDestinationType = destinationType;
    while (tempDestinationType.BaseType != typeof (object)) {
        tempDestinationType = tempDestinationType.BaseType;
    }
    if (tempDestinationType.IsAssignableFrom (sourceType)) {
        return true;
    }
    var query = from d in destinationType.GetInterfaces ()
        join s in sourceType.GetInterfaces () on d.Name equals s.Name
        select s;
    if (query != Enumerable.Empty < Type > ()) {
        return true;
    }
    return false;
}
----------------------------------------

 public static bool AreSame(Type sourceType, Type destinationType) 
{
    if (sourceType == null || destinationType == null)
        return false;
    if (sourceType == destinationType)
        return true;
    Type type = destinationType;
    while (type.BaseType != typeof(object))
    {
        if (sourceType == type.BaseType)
            return true;
        type = type.BaseType;
    }
    return destinationType.GetInterface(sourceType.Name) != null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
303
8
Gpt3D_Clone303_8.cs 1 22
Gpt3D_Clone303_8.cs 23 45
----------------------------------------

public static bool AreSame (Type sourceType, Type destinationType) {
    if (sourceType == null || destinationType == null) {
        return false;
    }
    if (sourceType == destinationType) {
        return true;
    }
    Type tempDestinationType = destinationType;
    while (tempDestinationType.BaseType != typeof (object)) {
        tempDestinationType = tempDestinationType.BaseType;
    }
    if (tempDestinationType.IsAssignableFrom (sourceType)) {
        return true;
    }
    var query = from d in destinationType.GetInterfaces ()
        join s in sourceType.GetInterfaces () on d.Name equals s.Name
        select s;
    if (query != Enumerable.Empty < Type > ()) {
        return true;
    }
    return false;
}
----------------------------------------

 public static bool AreSame(Type sourceType, Type destinationType)
{
    if (sourceType == null || destinationType == null)
    {
        return false;
    }
    if (sourceType == destinationType || sourceType.IsSubclassOf(destinationType))
    {
        return true;
    }
    Type[] sourceInterfaces = sourceType.GetInterfaces();
    Type[] destinationInterfaces = destinationType.GetInterfaces();
    for(int i = 0; i < sourceInterfaces.Length; i++)
    {
        if (destinationInterfaces.Contains(sourceInterfaces[i]))
            return true;
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
303
9
Gpt3D_Clone303_9.cs 1 22
Gpt3D_Clone303_9.cs 23 48
----------------------------------------

public static bool AreSame (Type sourceType, Type destinationType) {
    if (sourceType == null || destinationType == null) {
        return false;
    }
    if (sourceType == destinationType) {
        return true;
    }
    Type tempDestinationType = destinationType;
    while (tempDestinationType.BaseType != typeof (object)) {
        tempDestinationType = tempDestinationType.BaseType;
    }
    if (tempDestinationType.IsAssignableFrom (sourceType)) {
        return true;
    }
    var query = from d in destinationType.GetInterfaces ()
        join s in sourceType.GetInterfaces () on d.Name equals s.Name
        select s;
    if (query != Enumerable.Empty < Type > ()) {
        return true;
    }
    return false;
}
----------------------------------------

 public static bool AreSame(Type sourceType, Type destinationType)
{
    if (sourceType == null || destinationType == null)
    {
        return false;
    }
    else if (sourceType == destinationType || destinationType.IsSubclassOf(sourceType))
    {
        return true;
    }
    else
    {
        foreach (Type intf in sourceType.GetInterfaces())
        {
            if (intf == destinationType ||
                destinationType.GetInterfaces().Contains( intf ) )
            {
                return true;
            }
        }
    }
    
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
306
0
Gpt3D_Clone306_0.cs 1 9
Gpt3D_Clone306_0.cs 10 30
----------------------------------------

protected void IndexChanged (object sender, EventArgs e) {
    ilist1 = (DropDownList) sender;
    if (ilist1.SelectedIndex == 0) {
    } else if (ilist1.SelectedIndex == 1 && ilist2.SelectedIndex != 2) {
        ilist2.SelectedIndex = 2;
    } else if (ilist1.SelectedIndex == 2 && ilist2.SelectedIndex != 1) {
        ilist2.SelectedIndex = 1;
    }
}
----------------------------------------

 protected void IndexChanged (object sender, EventArgs e) {
         int index = ilist1.SelectedIndex;
         if (index == 0){
         }
         else {
            if (index == 1)
            {
                     if (ilist2.SelectedIndex != 2){
                        ilist2.SelectedIndex = 2;
                     }
            }
            else 
            {
                  if (index == 2 && ilist2.SelectedIndex != 1){
                     ilist2.SelectedIndex = 1;
                  }
            }
         }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
306
1
Gpt3D_Clone306_1.cs 1 9
Gpt3D_Clone306_1.cs 10 24
----------------------------------------

protected void IndexChanged (object sender, EventArgs e) {
    ilist1 = (DropDownList) sender;
    if (ilist1.SelectedIndex == 0) {
    } else if (ilist1.SelectedIndex == 1 && ilist2.SelectedIndex != 2) {
        ilist2.SelectedIndex = 2;
    } else if (ilist1.SelectedIndex == 2 && ilist2.SelectedIndex != 1) {
        ilist2.SelectedIndex = 1;
    }
}
----------------------------------------

 protected void IndexChanged (object sender, EventArgs e) {
         switch (ilist1.SelectedIndex) 
         { 
            case 0: 
               break; 
            case 1: 
               ilist2.SelectedIndex = 2;
               break; 
            case 2: 
               ilist2.SelectedIndex = 1;
               break; 
         }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
306
2
Gpt3D_Clone306_2.cs 1 9
Gpt3D_Clone306_2.cs 10 29
----------------------------------------

protected void IndexChanged (object sender, EventArgs e) {
    ilist1 = (DropDownList) sender;
    if (ilist1.SelectedIndex == 0) {
    } else if (ilist1.SelectedIndex == 1 && ilist2.SelectedIndex != 2) {
        ilist2.SelectedIndex = 2;
    } else if (ilist1.SelectedIndex == 2 && ilist2.SelectedIndex != 1) {
        ilist2.SelectedIndex = 1;
    }
}
----------------------------------------

 protected void IndexChanged (object sender, EventArgs e) {
         int index = ilist1.SelectedIndex;
         if (index == 0)
         {
         } 
         else
         {
            int ilist2Index = 2;
            if (index == 2)
            {
               ilist2Index = 1;
            } 
            if  (ilist2.SelectedIndex != ilist2Index) 
            {
               ilist2.SelectedIndex = ilist2Index;
            }
         }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
306
3
Gpt3D_Clone306_3.cs 1 9
Gpt3D_Clone306_3.cs 10 28
----------------------------------------

protected void IndexChanged (object sender, EventArgs e) {
    ilist1 = (DropDownList) sender;
    if (ilist1.SelectedIndex == 0) {
    } else if (ilist1.SelectedIndex == 1 && ilist2.SelectedIndex != 2) {
        ilist2.SelectedIndex = 2;
    } else if (ilist1.SelectedIndex == 2 && ilist2.SelectedIndex != 1) {
        ilist2.SelectedIndex = 1;
    }
}
----------------------------------------

 protected void IndexChanged (object sender, EventArgs e) {
         if (ilist1.SelectedIndex == 0) 
         {
         }
         else if (ilist1.SelectedIndex == 1) 
         {
         if (ilist2.SelectedIndex != 2) {
            ilist2.SelectedIndex = 2;
            }
         }
         else if (ilist1.SelectedIndex == 2) 
         {
         if (ilist2.SelectedIndex != 1) {
            ilist2.SelectedIndex = 1;   
            }
         }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
306
4
Gpt3D_Clone306_4.cs 1 9
Gpt3D_Clone306_4.cs 10 24
----------------------------------------

protected void IndexChanged (object sender, EventArgs e) {
    ilist1 = (DropDownList) sender;
    if (ilist1.SelectedIndex == 0) {
    } else if (ilist1.SelectedIndex == 1 && ilist2.SelectedIndex != 2) {
        ilist2.SelectedIndex = 2;
    } else if (ilist1.SelectedIndex == 2 && ilist2.SelectedIndex != 1) {
        ilist2.SelectedIndex = 1;
    }
}
----------------------------------------

 protected void IndexChanged (object sender, EventArgs e) {
         int index = ilist1.SelectedIndex;
         if (index == 0) 
         { 
         }
         else 
         {
            int ilist2Index = (index == 1) ? 2 : 1;
            if (ilist2.SelectedIndex != ilist2Index) {
               ilist2.SelectedIndex = ilist2Index;
            }
         }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
306
5
Gpt3D_Clone306_5.cs 1 9
Gpt3D_Clone306_5.cs 10 22
----------------------------------------

protected void IndexChanged (object sender, EventArgs e) {
    ilist1 = (DropDownList) sender;
    if (ilist1.SelectedIndex == 0) {
    } else if (ilist1.SelectedIndex == 1 && ilist2.SelectedIndex != 2) {
        ilist2.SelectedIndex = 2;
    } else if (ilist1.SelectedIndex == 2 && ilist2.SelectedIndex != 1) {
        ilist2.SelectedIndex = 1;
    }
}
----------------------------------------

 protected void IndexChanged (object sender, EventArgs e) {
         int index1 = ilist1.SelectedIndex;
         if (index1 > 0)
         {
            int index2 = (index1 == 1) ? 2 : 1;
            if (ilist2.SelectedIndex != index2)
            {
               ilist2.SelectedIndex = index2;
            }
         }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
306
6
Gpt3D_Clone306_6.cs 1 9
Gpt3D_Clone306_6.cs 10 18
----------------------------------------

protected void IndexChanged (object sender, EventArgs e) {
    ilist1 = (DropDownList) sender;
    if (ilist1.SelectedIndex == 0) {
    } else if (ilist1.SelectedIndex == 1 && ilist2.SelectedIndex != 2) {
        ilist2.SelectedIndex = 2;
    } else if (ilist1.SelectedIndex == 2 && ilist2.SelectedIndex != 1) {
        ilist2.SelectedIndex = 1;
    }
}
----------------------------------------

 protected void IndexChanged (object sender, EventArgs e) {
         if (ilist1.SelectedIndex == 0) {
         }
         else {
            ilist2.SelectedIndex = (ilist1.SelectedIndex == 1) ? 2 : 1;
         }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
307
0
Gpt3D_Clone307_0.cs 1 9
Gpt3D_Clone307_0.cs 10 22
----------------------------------------

public static void Main () {
    int a = 1234;
    int b = 4321;
    Console.WriteLine ("Before: a {0} and b {1}", a, b);
    b = b - a;
    a = a + b;
    b = a - b;
    Console.WriteLine ("After: a {0} and b {1}", a, b);
}
----------------------------------------

 public static void Main () {
         int a = 1234;
         int b = 4321;
         Console.WriteLine ("Before: a {0} and b {1}", a, b);
         a = a << 2; 
         b = b >> 2;
         a = a | b;
         b = a & b;
         a = a ^ b;
         Console.WriteLine ("After: a {0} and b {1}", a, b);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
309
0
Gpt3D_Clone309_0.cs 1 11
Gpt3D_Clone309_0.cs 12 27
----------------------------------------

public override void WriteJson (JsonWriter writer, object value, JsonSerializer serializer) {
    var contextBase = value as ContextBase;
    var valueToken = JToken.FromObject (value, new ForcedObjectSerializer ());
    if (contextBase.Properties != null) {
        var propertiesToken = JToken.FromObject (contextBase.Properties);
        foreach (var property in propertiesToken.Children < JProperty > ()) {
            valueToken [property.Name] = property.Value;
        }
    }
    valueToken.WriteTo (writer);
}
----------------------------------------

 public override void WriteJson (JsonWriter writer, object value, JsonSerializer serializer) {
        var contextBase = value as ContextBase;
        if (contextBase.Properties != null) 
        {
            var serializer = JsonSerializer.CreateDefault(); //Create Json Serializer
            var writerSetting = new JsonWriterSettings(); // Create a writer settings for jsonwriter
            var jsonWriter = new Utf8JsonWriter(writer, writerSetting);
                foreach(var property in contextBase.Properties)
                {
                    jsonWriter[property.Name] = property.Value; // add each property name and value
                }
                jsonWriter.Flush(); 
        }  
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
309
1
Gpt3D_Clone309_1.cs 1 11
Gpt3D_Clone309_1.cs 12 27
----------------------------------------

public override void WriteJson (JsonWriter writer, object value, JsonSerializer serializer) {
    var contextBase = value as ContextBase;
    var valueToken = JToken.FromObject (value, new ForcedObjectSerializer ());
    if (contextBase.Properties != null) {
        var propertiesToken = JToken.FromObject (contextBase.Properties);
        foreach (var property in propertiesToken.Children < JProperty > ()) {
            valueToken [property.Name] = property.Value;
        }
    }
    valueToken.WriteTo (writer);
}
----------------------------------------

 public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
{
            var contextBase = value as ContextBase;
            var valueToken = JToken.FromObject(value);
            if (contextBase.Properties != null) 
            {
                foreach (var property in contextBase.Properties)
                {
                    var propertyObject = JObject.FromObject(property);
                    valueToken[property.Name] = propertyObject.PropertyValues();
                }
                serializer.Serialize(writer, valueToken);
            }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
309
2
Gpt3D_Clone309_2.cs 1 11
Gpt3D_Clone309_2.cs 12 27
----------------------------------------

public override void WriteJson (JsonWriter writer, object value, JsonSerializer serializer) {
    var contextBase = value as ContextBase;
    var valueToken = JToken.FromObject (value, new ForcedObjectSerializer ());
    if (contextBase.Properties != null) {
        var propertiesToken = JToken.FromObject (contextBase.Properties);
        foreach (var property in propertiesToken.Children < JProperty > ()) {
            valueToken [property.Name] = property.Value;
        }
    }
    valueToken.WriteTo (writer);
}
----------------------------------------

 public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) 
{
            var contextBase = value as ContextBase;
            if (contextBase.Properties != null) 
            {
                this.serializer.Serialize(writer, contextBase.Properties);
            }
            foreach (var property in contextBase.Properties)
            {
                var obj = JObject.FromObject(value);
                obj.Add(property.Name, property.Value); 
            }
            obj.WriteTo(writer);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
309
3
Gpt3D_Clone309_3.cs 1 11
Gpt3D_Clone309_3.cs 12 26
----------------------------------------

public override void WriteJson (JsonWriter writer, object value, JsonSerializer serializer) {
    var contextBase = value as ContextBase;
    var valueToken = JToken.FromObject (value, new ForcedObjectSerializer ());
    if (contextBase.Properties != null) {
        var propertiesToken = JToken.FromObject (contextBase.Properties);
        foreach (var property in propertiesToken.Children < JProperty > ()) {
            valueToken [property.Name] = property.Value;
        }
    }
    valueToken.WriteTo (writer);
}
----------------------------------------

 public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
{
            var contextBase = value as ContextBase;
            var valueToken = JObject.FromObject(value);
            if (contextBase.Properties != null) 
            {
                foreach (var property in contextBase.Properties)
                {
                    valueToken[property.Name] = JToken.FromObject(property.Value, serializer);
                }
                serializer.Serialize(writer, valueToken);
            }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
309
6
Gpt3D_Clone309_6.cs 1 11
Gpt3D_Clone309_6.cs 12 26
----------------------------------------

public override void WriteJson (JsonWriter writer, object value, JsonSerializer serializer) {
    var contextBase = value as ContextBase;
    var valueToken = JToken.FromObject (value, new ForcedObjectSerializer ());
    if (contextBase.Properties != null) {
        var propertiesToken = JToken.FromObject (contextBase.Properties);
        foreach (var property in propertiesToken.Children < JProperty > ()) {
            valueToken [property.Name] = property.Value;
        }
    }
    valueToken.WriteTo (writer);
}
----------------------------------------

 public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
{
            var contextBase = value as ContextBase;
            if (contextBase.Properties != null) 
            {
                var jsonObject = new JObject();
                foreach (var property in contextBase.Properties)
                {
                    jsonObject[property.Name] = JToken.FromObject(property.Value, serializer);
                }
                jsonObject.WriteTo(writer);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
309
7
Gpt3D_Clone309_7.cs 1 11
Gpt3D_Clone309_7.cs 12 26
----------------------------------------

public override void WriteJson (JsonWriter writer, object value, JsonSerializer serializer) {
    var contextBase = value as ContextBase;
    var valueToken = JToken.FromObject (value, new ForcedObjectSerializer ());
    if (contextBase.Properties != null) {
        var propertiesToken = JToken.FromObject (contextBase.Properties);
        foreach (var property in propertiesToken.Children < JProperty > ()) {
            valueToken [property.Name] = property.Value;
        }
    }
    valueToken.WriteTo (writer);
}
----------------------------------------

 public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
{
            var contextBase = value as ContextBase;
            if (contextBase.Properties != null) 
            {
                var jsonObject = JObject.FromObject(value);
                foreach (var property in contextBase.Properties)
                {
                    jsonObject.Add(property.Name, property.Value.ToString());
                }
                serializer.Serialize(writer, jsonObject); 
            }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
309
8
Gpt3D_Clone309_8.cs 1 11
Gpt3D_Clone309_8.cs 12 26
----------------------------------------

public override void WriteJson (JsonWriter writer, object value, JsonSerializer serializer) {
    var contextBase = value as ContextBase;
    var valueToken = JToken.FromObject (value, new ForcedObjectSerializer ());
    if (contextBase.Properties != null) {
        var propertiesToken = JToken.FromObject (contextBase.Properties);
        foreach (var property in propertiesToken.Children < JProperty > ()) {
            valueToken [property.Name] = property.Value;
        }
    }
    valueToken.WriteTo (writer);
}
----------------------------------------

 public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
{
            var contextBase = value as ContextBase;
            if (contextBase.Properties != null) 
            {
                var jsonObject = new JObject();
                foreach (var property in contextBase.Properties)
                {
                    jsonObject.Add(property.Name, property.Value); 
                }
                jsonObject.WriteTo(writer);
            }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
311
0
Gpt3D_Clone311_0.cs 1 20
Gpt3D_Clone311_0.cs 21 51
----------------------------------------

public static string Encrypt (string strPlainText) {
    System.Text.Encoding enc = System.Text.Encoding.UTF8;
    System.Security.Cryptography.RijndaelManaged objRijndael = new System.Security.Cryptography.RijndaelManaged ();
    byte [] baCipherTextBuffer = null;
    byte [] baPlainTextBuffer = null;
    byte [] baEncryptionKey = null;
    byte [] baInitializationVector = null;
    objRijndael.Key = HexStringToByteArray (strKey);
    objRijndael.IV = HexStringToByteArray (strIV);
    baEncryptionKey = objRijndael.Key;
    baInitializationVector = objRijndael.IV;
    System.Security.Cryptography.ICryptoTransform ifaceAESencryptor = objRijndael.CreateEncryptor (baEncryptionKey, baInitializationVector);
    System.IO.MemoryStream msEncrypt = new System.IO.MemoryStream ();
    System.Security.Cryptography.CryptoStream csEncrypt = new System.Security.Cryptography.CryptoStream (msEncrypt, ifaceAESencryptor, System.Security.Cryptography.CryptoStreamMode.Write);
    baPlainTextBuffer = enc.GetBytes (strPlainText);
    csEncrypt.Write (baPlainTextBuffer, 0, baPlainTextBuffer.Length);
    csEncrypt.FlushFinalBlock ();
    baCipherTextBuffer = msEncrypt.ToArray ();
    return ByteArrayToHexString (baCipherTextBuffer);
}
----------------------------------------

 public static string Encrypt (string strPlainText) {
     byte[] encrypted;
     byte[] IVBytes = System.Text.Encoding.UTF8.GetBytes(strIV);
     byte[] keyBytes = System.Text.Encoding.UTF8.GetBytes(strKey);
     byte[] plainBytes = System.Text.Encoding.UTF8.GetBytes(strPlainText);
     // Hash the password with SHA256
     keyBytes = SHA256.Create().ComputeHash(keyBytes);
     IVBytes = SHA256.Create().ComputeHash(IVBytes);
     using (Aes aes = Aes.Create())
     {
         aes.Key = keyBytes;
         aes.IV = IVBytes;
 
         ICryptoTransform encryptor = aes.CreateEncryptor(aes.Key, aes.IV);
 
         using (MemoryStream msEncrypt = new MemoryStream())
         {
             using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
             {
                 csEncrypt.Write(plainBytes, 0, plainBytes.Length);
                 csEncrypt.FlushFinalBlock();
                 encrypted = msEncrypt.ToArray();
             }
         }
     }
     return ByteArrayToHexString(encrypted);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
311
1
Gpt3D_Clone311_1.cs 1 20
Gpt3D_Clone311_1.cs 21 44
----------------------------------------

public static string Encrypt (string strPlainText) {
    System.Text.Encoding enc = System.Text.Encoding.UTF8;
    System.Security.Cryptography.RijndaelManaged objRijndael = new System.Security.Cryptography.RijndaelManaged ();
    byte [] baCipherTextBuffer = null;
    byte [] baPlainTextBuffer = null;
    byte [] baEncryptionKey = null;
    byte [] baInitializationVector = null;
    objRijndael.Key = HexStringToByteArray (strKey);
    objRijndael.IV = HexStringToByteArray (strIV);
    baEncryptionKey = objRijndael.Key;
    baInitializationVector = objRijndael.IV;
    System.Security.Cryptography.ICryptoTransform ifaceAESencryptor = objRijndael.CreateEncryptor (baEncryptionKey, baInitializationVector);
    System.IO.MemoryStream msEncrypt = new System.IO.MemoryStream ();
    System.Security.Cryptography.CryptoStream csEncrypt = new System.Security.Cryptography.CryptoStream (msEncrypt, ifaceAESencryptor, System.Security.Cryptography.CryptoStreamMode.Write);
    baPlainTextBuffer = enc.GetBytes (strPlainText);
    csEncrypt.Write (baPlainTextBuffer, 0, baPlainTextBuffer.Length);
    csEncrypt.FlushFinalBlock ();
    baCipherTextBuffer = msEncrypt.ToArray ();
    return ByteArrayToHexString (baCipherTextBuffer);
}
----------------------------------------

 public static string Encrypt (string strPlainText) {
     var encoder = System.Text.Encoding.UTF8.GetEncoder();
     int keySize = 256; 
     using (AesCryptoServiceProvider aesAlg = new AesCryptoServiceProvider()) 
     {
         aesAlg.KeySize = keySize;
         aesAlg.Key = HexStringToByteArray(strKey);
         aesAlg.IV = HexStringToByteArray(strIV);
 
         ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);
         using (MemoryStream msEncrypt = new MemoryStream())
         {
             using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
             {
                 byte[] byteData = encoder.GetBytes(strPlainText);
                 csEncrypt.Write(byteData, 0, byteData.Length);
             }
             byte[] encrypted = msEncrypt.ToArray();
             return ByteArrayToHexString(encrypted);
         }
     }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
311
2
Gpt3D_Clone311_2.cs 1 20
Gpt3D_Clone311_2.cs 21 42
----------------------------------------

public static string Encrypt (string strPlainText) {
    System.Text.Encoding enc = System.Text.Encoding.UTF8;
    System.Security.Cryptography.RijndaelManaged objRijndael = new System.Security.Cryptography.RijndaelManaged ();
    byte [] baCipherTextBuffer = null;
    byte [] baPlainTextBuffer = null;
    byte [] baEncryptionKey = null;
    byte [] baInitializationVector = null;
    objRijndael.Key = HexStringToByteArray (strKey);
    objRijndael.IV = HexStringToByteArray (strIV);
    baEncryptionKey = objRijndael.Key;
    baInitializationVector = objRijndael.IV;
    System.Security.Cryptography.ICryptoTransform ifaceAESencryptor = objRijndael.CreateEncryptor (baEncryptionKey, baInitializationVector);
    System.IO.MemoryStream msEncrypt = new System.IO.MemoryStream ();
    System.Security.Cryptography.CryptoStream csEncrypt = new System.Security.Cryptography.CryptoStream (msEncrypt, ifaceAESencryptor, System.Security.Cryptography.CryptoStreamMode.Write);
    baPlainTextBuffer = enc.GetBytes (strPlainText);
    csEncrypt.Write (baPlainTextBuffer, 0, baPlainTextBuffer.Length);
    csEncrypt.FlushFinalBlock ();
    baCipherTextBuffer = msEncrypt.ToArray ();
    return ByteArrayToHexString (baCipherTextBuffer);
}
----------------------------------------

 public static string Encrypt (string strPlainText) {
     byte[] encrypted;
     byte[] passwordBytes = strKey.GetBytes();
     using (Aes aes = Aes.Create())
     {
         ICryptoTransform encryptor = aes.CreateEncryptor(passwordBytes, aes.IV);
         using (MemoryStream msEncrypt = new MemoryStream())
         {
             using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
             {
                 using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))
                 {
                     swEncrypt.Write(strPlainText);
                 }
                 encrypted = msEncrypt.ToString().GetBytes();
             }
         }
     }
     return ByteArrayToHexString(encrypted);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
311
3
Gpt3D_Clone311_3.cs 1 20
Gpt3D_Clone311_3.cs 21 40
----------------------------------------

public static string Encrypt (string strPlainText) {
    System.Text.Encoding enc = System.Text.Encoding.UTF8;
    System.Security.Cryptography.RijndaelManaged objRijndael = new System.Security.Cryptography.RijndaelManaged ();
    byte [] baCipherTextBuffer = null;
    byte [] baPlainTextBuffer = null;
    byte [] baEncryptionKey = null;
    byte [] baInitializationVector = null;
    objRijndael.Key = HexStringToByteArray (strKey);
    objRijndael.IV = HexStringToByteArray (strIV);
    baEncryptionKey = objRijndael.Key;
    baInitializationVector = objRijndael.IV;
    System.Security.Cryptography.ICryptoTransform ifaceAESencryptor = objRijndael.CreateEncryptor (baEncryptionKey, baInitializationVector);
    System.IO.MemoryStream msEncrypt = new System.IO.MemoryStream ();
    System.Security.Cryptography.CryptoStream csEncrypt = new System.Security.Cryptography.CryptoStream (msEncrypt, ifaceAESencryptor, System.Security.Cryptography.CryptoStreamMode.Write);
    baPlainTextBuffer = enc.GetBytes (strPlainText);
    csEncrypt.Write (baPlainTextBuffer, 0, baPlainTextBuffer.Length);
    csEncrypt.FlushFinalBlock ();
    baCipherTextBuffer = msEncrypt.ToArray ();
    return ByteArrayToHexString (baCipherTextBuffer);
}
----------------------------------------

 public static string Encrypt (string strPlainText) {
     // Create a new instance of the RijndaelManaged class.
     System.Security.Cryptography.RijndaelManaged aesAlg = new System.Security.Cryptography.RijndaelManaged();
     byte[] plainTextBuffer = System.Text.Encoding.UTF8.GetBytes(strPlainText);
     aesAlg.Key = HexStringToByteArray(strKey);
     aesAlg.IV = HexStringToByteArray(strIV);
     System.Security.Cryptography.ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);
     using (MemoryStream msEncrypt = new MemoryStream())
     {
         using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
         {
             csEncrypt.Write(plainTextBuffer, 0, plainTextBuffer.Length);
             csEncrypt.Flush();
             byte[] cipherTextBytes = msEncrypt.ToArray();
             return ByteArrayToHexString(cipherTextBytes);
         }
     }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
311
5
Gpt3D_Clone311_5.cs 1 20
Gpt3D_Clone311_5.cs 21 32
----------------------------------------

public static string Encrypt (string strPlainText) {
    System.Text.Encoding enc = System.Text.Encoding.UTF8;
    System.Security.Cryptography.RijndaelManaged objRijndael = new System.Security.Cryptography.RijndaelManaged ();
    byte [] baCipherTextBuffer = null;
    byte [] baPlainTextBuffer = null;
    byte [] baEncryptionKey = null;
    byte [] baInitializationVector = null;
    objRijndael.Key = HexStringToByteArray (strKey);
    objRijndael.IV = HexStringToByteArray (strIV);
    baEncryptionKey = objRijndael.Key;
    baInitializationVector = objRijndael.IV;
    System.Security.Cryptography.ICryptoTransform ifaceAESencryptor = objRijndael.CreateEncryptor (baEncryptionKey, baInitializationVector);
    System.IO.MemoryStream msEncrypt = new System.IO.MemoryStream ();
    System.Security.Cryptography.CryptoStream csEncrypt = new System.Security.Cryptography.CryptoStream (msEncrypt, ifaceAESencryptor, System.Security.Cryptography.CryptoStreamMode.Write);
    baPlainTextBuffer = enc.GetBytes (strPlainText);
    csEncrypt.Write (baPlainTextBuffer, 0, baPlainTextBuffer.Length);
    csEncrypt.FlushFinalBlock ();
    baCipherTextBuffer = msEncrypt.ToArray ();
    return ByteArrayToHexString (baCipherTextBuffer);
}
----------------------------------------

public static string Encrypt (string strPlainText) { 
    System.Security.Cryptography.RijndaelManaged objRijndael = new System.Security.Cryptography.RijndaelManaged(); 
    System.Text.Encoding enc = System.Text.Encoding.UTF8; 
    byte[] baPlainTextBuffer = enc.GetBytes(strPlainText); 
    objRijndael.Key = HexStringToByteArray(strKey); 
    objRijndael.IV = HexStringToByteArray(strIV); 
    System.Security.Cryptography.ICryptoTransform icTransformer = objRijndael.CreateEncryptor(objRijndael.Key, objRijndael.IV); 
    byte[] baCipherTextBuffer = icTransformer.TransformFinalBlock(baPlainTextBuffer, 0, baPlainTextBuffer.Length); 
    return ByteArrayToHexString(baCipherTextBuffer); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
311
6
Gpt3D_Clone311_6.cs 1 20
Gpt3D_Clone311_6.cs 21 32
----------------------------------------

public static string Encrypt (string strPlainText) {
    System.Text.Encoding enc = System.Text.Encoding.UTF8;
    System.Security.Cryptography.RijndaelManaged objRijndael = new System.Security.Cryptography.RijndaelManaged ();
    byte [] baCipherTextBuffer = null;
    byte [] baPlainTextBuffer = null;
    byte [] baEncryptionKey = null;
    byte [] baInitializationVector = null;
    objRijndael.Key = HexStringToByteArray (strKey);
    objRijndael.IV = HexStringToByteArray (strIV);
    baEncryptionKey = objRijndael.Key;
    baInitializationVector = objRijndael.IV;
    System.Security.Cryptography.ICryptoTransform ifaceAESencryptor = objRijndael.CreateEncryptor (baEncryptionKey, baInitializationVector);
    System.IO.MemoryStream msEncrypt = new System.IO.MemoryStream ();
    System.Security.Cryptography.CryptoStream csEncrypt = new System.Security.Cryptography.CryptoStream (msEncrypt, ifaceAESencryptor, System.Security.Cryptography.CryptoStreamMode.Write);
    baPlainTextBuffer = enc.GetBytes (strPlainText);
    csEncrypt.Write (baPlainTextBuffer, 0, baPlainTextBuffer.Length);
    csEncrypt.FlushFinalBlock ();
    baCipherTextBuffer = msEncrypt.ToArray ();
    return ByteArrayToHexString (baCipherTextBuffer);
}
----------------------------------------

 public static string Encrypt (string strPlainText) {
     System.Text.Encoding enc = System.Text.Encoding.UTF8;
     System.Security.Cryptography.RijndaelManaged objRijndael = new System.Security.Cryptography.RijndaelManaged();
     byte[] baPlainTextBuffer = enc.GetBytes(strPlainText);
     objRijndael.Key = HexStringToByteArray(strKey);
     objRijndael.IV = HexStringToByteArray(strIV);
     System.Security.Cryptography.ICryptoTransform icTransformer = objRijndael.CreateEncryptor(objRijndael.Key, objRijndael.IV);
     byte[] baCipherTextBuffer = icTransformer.TransformFinalBlock(baPlainTextBuffer, 0, baPlainTextBuffer.Length);
     return ByteArrayToHexString(baCipherTextBuffer);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
311
7
Gpt3D_Clone311_7.cs 1 20
Gpt3D_Clone311_7.cs 21 34
----------------------------------------

public static string Encrypt (string strPlainText) {
    System.Text.Encoding enc = System.Text.Encoding.UTF8;
    System.Security.Cryptography.RijndaelManaged objRijndael = new System.Security.Cryptography.RijndaelManaged ();
    byte [] baCipherTextBuffer = null;
    byte [] baPlainTextBuffer = null;
    byte [] baEncryptionKey = null;
    byte [] baInitializationVector = null;
    objRijndael.Key = HexStringToByteArray (strKey);
    objRijndael.IV = HexStringToByteArray (strIV);
    baEncryptionKey = objRijndael.Key;
    baInitializationVector = objRijndael.IV;
    System.Security.Cryptography.ICryptoTransform ifaceAESencryptor = objRijndael.CreateEncryptor (baEncryptionKey, baInitializationVector);
    System.IO.MemoryStream msEncrypt = new System.IO.MemoryStream ();
    System.Security.Cryptography.CryptoStream csEncrypt = new System.Security.Cryptography.CryptoStream (msEncrypt, ifaceAESencryptor, System.Security.Cryptography.CryptoStreamMode.Write);
    baPlainTextBuffer = enc.GetBytes (strPlainText);
    csEncrypt.Write (baPlainTextBuffer, 0, baPlainTextBuffer.Length);
    csEncrypt.FlushFinalBlock ();
    baCipherTextBuffer = msEncrypt.ToArray ();
    return ByteArrayToHexString (baCipherTextBuffer);
}
----------------------------------------

 public static string Encrypt (string strPlainText) {
     byte[] bytesToBeEncrypted = System.Text.Encoding.UTF8.GetBytes(strPlainText);
     byte[] keyBytes = System.Text.Encoding.UTF8.GetBytes(strKey);
     byte[] IVBytes = System.Text.Encoding.UTF8.GetBytes(strIV);
     // Hash the password with SHA256
     keyBytes = SHA256.Create().ComputeHash(keyBytes);
     IVBytes = SHA256.Create().ComputeHash(IVBytes);
     byte[] encryptedBytes = AES_Encrypt(bytesToBeEncrypted, keyBytes, IVBytes);                                                                                                                   
     return ByteArrayToHexString(encryptedBytes);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
311
8
Gpt3D_Clone311_8.cs 1 20
Gpt3D_Clone311_8.cs 21 33
----------------------------------------

public static string Encrypt (string strPlainText) {
    System.Text.Encoding enc = System.Text.Encoding.UTF8;
    System.Security.Cryptography.RijndaelManaged objRijndael = new System.Security.Cryptography.RijndaelManaged ();
    byte [] baCipherTextBuffer = null;
    byte [] baPlainTextBuffer = null;
    byte [] baEncryptionKey = null;
    byte [] baInitializationVector = null;
    objRijndael.Key = HexStringToByteArray (strKey);
    objRijndael.IV = HexStringToByteArray (strIV);
    baEncryptionKey = objRijndael.Key;
    baInitializationVector = objRijndael.IV;
    System.Security.Cryptography.ICryptoTransform ifaceAESencryptor = objRijndael.CreateEncryptor (baEncryptionKey, baInitializationVector);
    System.IO.MemoryStream msEncrypt = new System.IO.MemoryStream ();
    System.Security.Cryptography.CryptoStream csEncrypt = new System.Security.Cryptography.CryptoStream (msEncrypt, ifaceAESencryptor, System.Security.Cryptography.CryptoStreamMode.Write);
    baPlainTextBuffer = enc.GetBytes (strPlainText);
    csEncrypt.Write (baPlainTextBuffer, 0, baPlainTextBuffer.Length);
    csEncrypt.FlushFinalBlock ();
    baCipherTextBuffer = msEncrypt.ToArray ();
    return ByteArrayToHexString (baCipherTextBuffer);
}
----------------------------------------

 public static string Encrypt (string strPlainText) {
     byte[] bytesToBeEncrypted = System.Text.Encoding.UTF8.GetBytes(strPlainText);
     byte[] passwordBytes = System.Text.Encoding.UTF8.GetBytes(strKey);
     // Hash the password with SHA256
     passwordBytes = SHA256.Create().ComputeHash(passwordBytes);
     byte[] encryptedBytes = AES_Encrypt(bytesToBeEncrypted, passwordBytes);
     string encryptedString = ByteArrayToHexString(encryptedBytes);
     return encryptedString;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
311
9
Gpt3D_Clone311_9.cs 1 20
Gpt3D_Clone311_9.cs 21 32
----------------------------------------

public static string Encrypt (string strPlainText) {
    System.Text.Encoding enc = System.Text.Encoding.UTF8;
    System.Security.Cryptography.RijndaelManaged objRijndael = new System.Security.Cryptography.RijndaelManaged ();
    byte [] baCipherTextBuffer = null;
    byte [] baPlainTextBuffer = null;
    byte [] baEncryptionKey = null;
    byte [] baInitializationVector = null;
    objRijndael.Key = HexStringToByteArray (strKey);
    objRijndael.IV = HexStringToByteArray (strIV);
    baEncryptionKey = objRijndael.Key;
    baInitializationVector = objRijndael.IV;
    System.Security.Cryptography.ICryptoTransform ifaceAESencryptor = objRijndael.CreateEncryptor (baEncryptionKey, baInitializationVector);
    System.IO.MemoryStream msEncrypt = new System.IO.MemoryStream ();
    System.Security.Cryptography.CryptoStream csEncrypt = new System.Security.Cryptography.CryptoStream (msEncrypt, ifaceAESencryptor, System.Security.Cryptography.CryptoStreamMode.Write);
    baPlainTextBuffer = enc.GetBytes (strPlainText);
    csEncrypt.Write (baPlainTextBuffer, 0, baPlainTextBuffer.Length);
    csEncrypt.FlushFinalBlock ();
    baCipherTextBuffer = msEncrypt.ToArray ();
    return ByteArrayToHexString (baCipherTextBuffer);
}
----------------------------------------

  public static string Encrypt (string strPlainText) {
      byte[] bytesToBeEncrypted = System.Text.Encoding.UTF8.GetBytes(strPlainText);
      byte[] passwordBytes = System.Text.Encoding.UTF8.GetBytes(strKey);
 
      // Hash the password with SHA256
      passwordBytes = SHA256.Create().ComputeHash(passwordBytes);
 
      byte[] bytesEncrypted = AES_Encrypt(bytesToBeEncrypted, passwordBytes);
      return ByteArrayTohexString(bytesEncrypted);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
312
0
Gpt3D_Clone312_0.cs 1 20
Gpt3D_Clone312_0.cs 21 79
----------------------------------------

public static string DeCrypt (string strEncryptedInput) {
    string strReturnValue = null;
    if (string.IsNullOrEmpty (strEncryptedInput)) {
        throw new ArgumentNullException ("strEncryptedInput", "strEncryptedInput may not be string.Empty or NULL, because these are invid values.");
    }
    System.Text.Encoding enc = System.Text.Encoding.UTF8;
    System.Security.Cryptography.RijndaelManaged objRijndael = new System.Security.Cryptography.RijndaelManaged ();
    byte [] baCipherTextBuffer = HexStringToByteArray (strEncryptedInput);
    byte [] baDecryptionKey = HexStringToByteArray (strKey);
    byte [] baInitializationVector = HexStringToByteArray (strIV);
    System.Security.Cryptography.ICryptoTransform ifaceAESdecryptor = objRijndael.CreateDecryptor (baDecryptionKey, baInitializationVector);
    System.IO.MemoryStream msDecrypt = new System.IO.MemoryStream (baCipherTextBuffer);
    System.Security.Cryptography.CryptoStream csDecrypt = new System.Security.Cryptography.CryptoStream (msDecrypt, ifaceAESdecryptor, System.Security.Cryptography.CryptoStreamMode.Read);
    byte [] baPlainTextBuffer = new byte [baCipherTextBuffer.Length + 1];
    csDecrypt.Read (baPlainTextBuffer, 0, baPlainTextBuffer.Length);
    strReturnValue = enc.GetString (baPlainTextBuffer);
    if (! string.IsNullOrEmpty (strReturnValue))
        strReturnValue = strReturnValue.Trim ('\0');
    return strReturnValue;
}
----------------------------------------

 public static string DeCrypt (string strEncryptedInput) {
     if (string.IsNullOrEmpty(strEncryptedInput))
        throw new ArgumentNullException("strEncryptedInput", "strEncryptedInput may not be string.Empty or NULL, because these are invid values.");
     
     System.Security.Cryptography.AesCryptoServiceProvider aesAlg = new System.Security.Cryptography.AesCryptoServiceProvider();
     aesAlg.Mode = System.Security.Cryptography.CipherMode.CBC;
     aesAlg.Padding = System.Security.Cryptography.PaddingMode.PKCS7;
     byte[] strKey = HexStringToByteArray(strKey);
     byte[] strIV = HexStringToByteArray(strIV);
     aesAlg.Key = strKey;
     aesAlg.IV = strIV;
     byte[] encryptedBytes = HexStringToByteArray(strEncryptedInput);
     byte[] btsDecrypted = new byte[encryptedBytes.Length];
     using (System.IO.MemoryStream mStrmDecrypt = new System.IO.MemoryStream(encryptedBytes))
     {
        using (System.Security.Cryptography.CryptoStream csDecrypt = new System.Security.Cryptography.CryptoStream(mStrmDecrypt, aesAlg.CreateDecryptor(), System.Security.Cryptography.CryptoStreamMode.Read))
        {
           csDecrypt.Read(btsDecrypted, 0, btsDecrypted.Length);
        }
     }
     System.Text.Encoding enc = System.Text.Encoding.UTF8;
     return enc.GetString(btsDecrypted);
   }
  
 public static string DeCrypt (string strEncryptedInput) {
   if (string.IsNullOrEmpty(strEncryptedInput))
        throw new ArgumentNullException("strEncryptedInput", "strEncryptedInput may not be string.Empty or NULL, because these are invid values.");
    System.Security.Cryptography.AESCryptoServiceProvider aes = new System.Security.Cryptography.AESCryptoServiceProvider();
    System.Text.Encoding enc = System.Text.Encoding.UTF8;
    byte [] baDecryptionKey = HexStringToByteArray (strKey);
    byte [] baInitializationVector = HexStringToByteArray (strIV);
    aes.Key = baDecryptionKey;
    aes.IV = baInitializationVector;
    aes.Mode = System.Security.Cryptography.CipherMode.CBC;
    aes.Padding = System.Security.Cryptography.PaddingMode.PKCS7;
    byte[] encryptedMessage = HexStringToByteArray(strEncryptedInput);
    byte[] decryptedByte = new byte[encryptedMessage.Length];
    System.Security.Cryptography.ICryptoTransform icrypt = aes.CreateDecryptor(aes.Key, aes.IV);
    System.IO.MemoryStream mstream = new System.IO.MemoryStream(encryptedMessage);
    using(System.Security.Cryptography.CryptoStream csDecrypt = new System.Security.Cryptography.CryptoStream(mstream, icrypt, System.Security.Cryptography.CryptoStreamMode.Read))
    {
        csDecrypt.Read(decryptedByte, 0, decryptedByte.Length);
    }
    return enc.GetString(decryptedByte);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
312
1
Gpt3D_Clone312_1.cs 1 20
Gpt3D_Clone312_1.cs 21 79
----------------------------------------

public static string DeCrypt (string strEncryptedInput) {
    string strReturnValue = null;
    if (string.IsNullOrEmpty (strEncryptedInput)) {
        throw new ArgumentNullException ("strEncryptedInput", "strEncryptedInput may not be string.Empty or NULL, because these are invid values.");
    }
    System.Text.Encoding enc = System.Text.Encoding.UTF8;
    System.Security.Cryptography.RijndaelManaged objRijndael = new System.Security.Cryptography.RijndaelManaged ();
    byte [] baCipherTextBuffer = HexStringToByteArray (strEncryptedInput);
    byte [] baDecryptionKey = HexStringToByteArray (strKey);
    byte [] baInitializationVector = HexStringToByteArray (strIV);
    System.Security.Cryptography.ICryptoTransform ifaceAESdecryptor = objRijndael.CreateDecryptor (baDecryptionKey, baInitializationVector);
    System.IO.MemoryStream msDecrypt = new System.IO.MemoryStream (baCipherTextBuffer);
    System.Security.Cryptography.CryptoStream csDecrypt = new System.Security.Cryptography.CryptoStream (msDecrypt, ifaceAESdecryptor, System.Security.Cryptography.CryptoStreamMode.Read);
    byte [] baPlainTextBuffer = new byte [baCipherTextBuffer.Length + 1];
    csDecrypt.Read (baPlainTextBuffer, 0, baPlainTextBuffer.Length);
    strReturnValue = enc.GetString (baPlainTextBuffer);
    if (! string.IsNullOrEmpty (strReturnValue))
        strReturnValue = strReturnValue.Trim ('\0');
    return strReturnValue;
}
----------------------------------------

 public static string DeCrypt (string strEncryptedInput) {
     if (string.IsNullOrEmpty(strEncryptedInput))
        throw new ArgumentNullException("strEncryptedInput", "strEncryptedInput may not be string.Empty or NULL, because these are invid values.");
     
     System.Security.Cryptography.AesCryptoServiceProvider aesAlg = new System.Security.Cryptography.AesCryptoServiceProvider();
     aesAlg.Mode = System.Security.Cryptography.CipherMode.CBC;
     aesAlg.Padding = System.Security.Cryptography.PaddingMode.PKCS7;
     byte[] strKey = HexStringToByteArray(strKey);
     byte[] strIV = HexStringToByteArray(strIV);
     aesAlg.Key = strKey;
     aesAlg.IV = strIV;
     byte[] encryptedBytes = HexStringToByteArray(strEncryptedInput);
     byte[] btsDecrypted = new byte[encryptedBytes.Length];
     using (System.IO.MemoryStream mStrmDecrypt = new System.IO.MemoryStream(encryptedBytes))
     {
        using (System.Security.Cryptography.CryptoStream csDecrypt = new System.Security.Cryptography.CryptoStream(mStrmDecrypt, aesAlg.CreateDecryptor(), System.Security.Cryptography.CryptoStreamMode.Read))
        {
           csDecrypt.Read(btsDecrypted, 0, btsDecrypted.Length);
        }
     }
     System.Text.Encoding enc = System.Text.Encoding.UTF8;
     return enc.GetString(btsDecrypted);
   }
  
 public static string DeCrypt (string strEncryptedInput) {
   if (string.IsNullOrEmpty(strEncryptedInput))
        throw new ArgumentNullException("strEncryptedInput", "strEncryptedInput may not be string.Empty or NULL, because these are invid values.");
    System.Security.Cryptography.AESCryptoServiceProvider aes = new System.Security.Cryptography.AESCryptoServiceProvider();
    System.Text.Encoding enc = System.Text.Encoding.UTF8;
    byte [] baDecryptionKey = HexStringToByteArray (strKey);
    byte [] baInitializationVector = HexStringToByteArray (strIV);
    aes.Key = baDecryptionKey;
    aes.IV = baInitializationVector;
    aes.Mode = System.Security.Cryptography.CipherMode.CBC;
    aes.Padding = System.Security.Cryptography.PaddingMode.PKCS7;
    byte[] encryptedMessage = HexStringToByteArray(strEncryptedInput);
    byte[] decryptedByte = new byte[encryptedMessage.Length];
    System.Security.Cryptography.ICryptoTransform icrypt = aes.CreateDecryptor(aes.Key, aes.IV);
    System.IO.MemoryStream mstream = new System.IO.MemoryStream(encryptedMessage);
    using(System.Security.Cryptography.CryptoStream csDecrypt = new System.Security.Cryptography.CryptoStream(mstream, icrypt, System.Security.Cryptography.CryptoStreamMode.Read))
    {
        csDecrypt.Read(decryptedByte, 0, decryptedByte.Length);
    }
    return enc.GetString(decryptedByte);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
312
2
Gpt3D_Clone312_2.cs 1 20
Gpt3D_Clone312_2.cs 21 47
----------------------------------------

public static string DeCrypt (string strEncryptedInput) {
    string strReturnValue = null;
    if (string.IsNullOrEmpty (strEncryptedInput)) {
        throw new ArgumentNullException ("strEncryptedInput", "strEncryptedInput may not be string.Empty or NULL, because these are invid values.");
    }
    System.Text.Encoding enc = System.Text.Encoding.UTF8;
    System.Security.Cryptography.RijndaelManaged objRijndael = new System.Security.Cryptography.RijndaelManaged ();
    byte [] baCipherTextBuffer = HexStringToByteArray (strEncryptedInput);
    byte [] baDecryptionKey = HexStringToByteArray (strKey);
    byte [] baInitializationVector = HexStringToByteArray (strIV);
    System.Security.Cryptography.ICryptoTransform ifaceAESdecryptor = objRijndael.CreateDecryptor (baDecryptionKey, baInitializationVector);
    System.IO.MemoryStream msDecrypt = new System.IO.MemoryStream (baCipherTextBuffer);
    System.Security.Cryptography.CryptoStream csDecrypt = new System.Security.Cryptography.CryptoStream (msDecrypt, ifaceAESdecryptor, System.Security.Cryptography.CryptoStreamMode.Read);
    byte [] baPlainTextBuffer = new byte [baCipherTextBuffer.Length + 1];
    csDecrypt.Read (baPlainTextBuffer, 0, baPlainTextBuffer.Length);
    strReturnValue = enc.GetString (baPlainTextBuffer);
    if (! string.IsNullOrEmpty (strReturnValue))
        strReturnValue = strReturnValue.Trim ('\0');
    return strReturnValue;
}
----------------------------------------

 public static string DeCrypt(string strEncryptedInput) {
    if (string.IsNullOrEmpty(strEncryptedInput))
        throw new ArgumentNullException("strEncryptedInput", "strEncryptedInput may not be string.Empty or NULL, because these are invid values.");
    System.Item.Cryptography.AesManaged aesAlg = new System.Item.Cryptography.AesManaged();
    aesAlg.Mode = System.Security.Cryptography.CipherMode.CBC;
    aesAlg.Padding = System.Security.Cryptography.PaddingMode.PKCS7;
    byte[] strKey = HexStringToByteArray(strKey);
    byte[] strIV = HexStringToByteArray(strIV);
    aesAlg.Key = strKey;
    aesAlg.IV = strIV;
    byte[] encryptedBytes = HexStringToByteArray(strEncryptedInput);
    byte[] btsDecrypted = new byte[encryptedBytes.Length];
    using (System.IO.MemoryStream mStrmDecrypt = new System.IO.MemoryStream(encryptedBytes)) {
        using (System.Security.Cryptography.CryptoStream csDecrypt = new System.Security.Cryptography.CryptoStream(mStrmDecrypt, aesAlg.CreateDecryptor(), System.Security.Cryptography.CryptoStreamMode.Read)) {
            csDecrypt.Read(btsDecrypted, 0, btsDecrypted.Length);
        }
    }
    System.Text.Encoding enc = System.Text.Encoding.UTF8;
    return enc.GetString(btsDecrypted);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
312
3
Gpt3D_Clone312_3.cs 1 20
Gpt3D_Clone312_3.cs 21 50
----------------------------------------

public static string DeCrypt (string strEncryptedInput) {
    string strReturnValue = null;
    if (string.IsNullOrEmpty (strEncryptedInput)) {
        throw new ArgumentNullException ("strEncryptedInput", "strEncryptedInput may not be string.Empty or NULL, because these are invid values.");
    }
    System.Text.Encoding enc = System.Text.Encoding.UTF8;
    System.Security.Cryptography.RijndaelManaged objRijndael = new System.Security.Cryptography.RijndaelManaged ();
    byte [] baCipherTextBuffer = HexStringToByteArray (strEncryptedInput);
    byte [] baDecryptionKey = HexStringToByteArray (strKey);
    byte [] baInitializationVector = HexStringToByteArray (strIV);
    System.Security.Cryptography.ICryptoTransform ifaceAESdecryptor = objRijndael.CreateDecryptor (baDecryptionKey, baInitializationVector);
    System.IO.MemoryStream msDecrypt = new System.IO.MemoryStream (baCipherTextBuffer);
    System.Security.Cryptography.CryptoStream csDecrypt = new System.Security.Cryptography.CryptoStream (msDecrypt, ifaceAESdecryptor, System.Security.Cryptography.CryptoStreamMode.Read);
    byte [] baPlainTextBuffer = new byte [baCipherTextBuffer.Length + 1];
    csDecrypt.Read (baPlainTextBuffer, 0, baPlainTextBuffer.Length);
    strReturnValue = enc.GetString (baPlainTextBuffer);
    if (! string.IsNullOrEmpty (strReturnValue))
        strReturnValue = strReturnValue.Trim ('\0');
    return strReturnValue;
}
----------------------------------------

 public static string DeCrypt(string strEncryptedInput) {
    if (string.IsNullOrEmpty(strEncryptedInput))
        throw new ArgumentNullException("strEncryptedInput", "strEncryptedInput may not be string.Empty or NULL, because these are invid values.");
    System.Security.Cryptography.AesCryptoServiceProvider aes = new System.Security.Cryptography.AesCryptoServiceProvider();
    System.Text.Encoding enc = System.Text.Encoding.UTF8;
    byte [] baDecryptionKey = HexStringToByteArray (strKey);
    byte [] baInitializationVector = HexStringToByteArray (strIV);
    aes.Key = baDecryptionKey;
    aes.IV = baInitializationVector;
    aes.Mode = System.Security.Cryptography.CipherMode.CBC;
    byte[] encryptedMessage = HexStringToByteArray(strEncryptedInput);
    byte[] decryptedByte = new byte[encryptedMessage.Length];
    System.Security.Cryptography.ICryptoTransform icrypt = aes.CreateDecryptor(aes.Key, aes.IV);
    System.IO.MemoryStream mstream = new System.IO.MemoryStream(encryptedMessage);
    using(System.Security.Cryptography.CryptoStream csDecrypt = new System.Security.Cryptography.CryptoStream(mstream, icrypt, System.Security.Cryptography.CryptoStreamMode.Read)) {
        csDecrypt.Read(decryptedByte, 0, decryptedByte.Length);
     }
 
    return enc.GetString(decryptedByte);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
313
0
Gpt3D_Clone313_0.cs 1 9
Gpt3D_Clone313_0.cs 10 33
----------------------------------------

public static double Pow (double basevalue, int exponentvalue) {
    if (exponentvalue == 0) {
        return 1;
    }
    if (exponentvalue == 1) {
        return baseValue;
    }
    return baseValue * Pow (basevalue, exponentvalue - 1);
}
----------------------------------------

 public static double Pow (double basevalue, int exponentvalue) {
    if (exponentvalue == 0) {
        return 1;
    }
    if (exponentvalue == 1) {
        return baseValue;
    }
    int n = exponentvalue;
    double y = basevalue;
    double x = 1.0;
    while (n > 0) {
        if (n % 2 == 0) {
            y *= y;
            n /= 2;
        } else {
            x *= y;
            n--;
        }
    }
    return x;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
313
1
Gpt3D_Clone313_1.cs 1 9
Gpt3D_Clone313_1.cs 10 29
----------------------------------------

public static double Pow (double basevalue, int exponentvalue) {
    if (exponentvalue == 0) {
        return 1;
    }
    if (exponentvalue == 1) {
        return baseValue;
    }
    return baseValue * Pow (basevalue, exponentvalue - 1);
}
----------------------------------------

 public static double Pow (double basevalue, int exponentvalue) {
    if (exponentvalue == 0){
        return 1;
    } 
    if (exponentvalue == 1) {
        return baseValue;
    } 
    int n = exponentvalue;
    double result = 1.0;
    while (n != 0) {
        if (n % 2 == 1){
            result *= basevalue;
        }
        basevalue *= basevalue;
        n/=2;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
313
2
Gpt3D_Clone313_2.cs 1 9
Gpt3D_Clone313_2.cs 10 26
----------------------------------------

public static double Pow (double basevalue, int exponentvalue) {
    if (exponentvalue == 0) {
        return 1;
    }
    if (exponentvalue == 1) {
        return baseValue;
    }
    return baseValue * Pow (basevalue, exponentvalue - 1);
}
----------------------------------------

 public static double Pow(double baseValue, int exponentValue) {
    if (exponentValue == 0) {
        return 1;
    }
    if (exponentValue == 1) {
        return baseValue;
    }
    double result = 1;
    if (exponentValue % 2 == 0) {
        result = Pow(baseValue * baseValue, exponentValue / 2);
    } else {
       result = Pow(baseValue * baseValue, exponentValue / 2) * baseValue;; 
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
313
3
Gpt3D_Clone313_3.cs 1 9
Gpt3D_Clone313_3.cs 10 28
----------------------------------------

public static double Pow (double basevalue, int exponentvalue) {
    if (exponentvalue == 0) {
        return 1;
    }
    if (exponentvalue == 1) {
        return baseValue;
    }
    return baseValue * Pow (basevalue, exponentvalue - 1);
}
----------------------------------------

 public static double Pow (double basevalue, int exponentvalue) {
    if (exponentvalue == 0) {
        return 1;
    }
    if (exponentvalue == 1) {
        return baseValue;
    }
    double result = basevalue;
    while (exponentvalue > 1){
        result *= result;
        exponentvalue /= 2;
    }
    if (exponentvalue % 2 == 1) { //exponentvalue is odd
        result *= result * baseValue;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
313
4
Gpt3D_Clone313_4.cs 1 9
Gpt3D_Clone313_4.cs 10 27
----------------------------------------

public static double Pow (double basevalue, int exponentvalue) {
    if (exponentvalue == 0) {
        return 1;
    }
    if (exponentvalue == 1) {
        return baseValue;
    }
    return baseValue * Pow (basevalue, exponentvalue - 1);
}
----------------------------------------

 public static double Pow (double basevalue, int exponentvalue) {
    if (exponentvalue == 0) {
        return 1;
    }
    else if (exponentvalue == 1) {
        return baseValue;
    }
    else {
        double result = 1;
        while (exponentvalue > 0){
            result *= basevalue;
            exponentvalue--;
        }
        return result;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
313
5
Gpt3D_Clone313_5.cs 1 9
Gpt3D_Clone313_5.cs 10 27
----------------------------------------

public static double Pow (double basevalue, int exponentvalue) {
    if (exponentvalue == 0) {
        return 1;
    }
    if (exponentvalue == 1) {
        return baseValue;
    }
    return baseValue * Pow (basevalue, exponentvalue - 1);
}
----------------------------------------

 public static double Pow (double basevalue, int exponentvalue) {
    if (exponentvalue == 0) {
        return 1;
    }
    if (exponentvalue == 1) {
        return baseValue;
    }
    if (exponentvalue % 2 == 0) { //exponentvalue is even
        double result = Pow(basevalue, exponentvalue / 2);
        return result * result;
    }
    else { //exponentvalue is odd
        double result = Pow(basevalue, (exponentvalue - 1) / 2);
        return result * result * baseValue;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
313
6
Gpt3D_Clone313_6.cs 1 9
Gpt3D_Clone313_6.cs 10 25
----------------------------------------

public static double Pow (double basevalue, int exponentvalue) {
    if (exponentvalue == 0) {
        return 1;
    }
    if (exponentvalue == 1) {
        return baseValue;
    }
    return baseValue * Pow (basevalue, exponentvalue - 1);
}
----------------------------------------

 public static double Pow (double basevalue, int exponentvalue) {
    double result = 1;
    while (exponentvalue > 0) {
        if (exponentvalue % 2 == 0) { //exponentvalue is even
            baseValue *= baseValue;
            exponentvalue /= 2;
        }
        else { //exponentvalue is odd
            result *= baseValue;
            exponentvalue--;
        }
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
313
8
Gpt3D_Clone313_8.cs 1 9
Gpt3D_Clone313_8.cs 10 21
----------------------------------------

public static double Pow (double basevalue, int exponentvalue) {
    if (exponentvalue == 0) {
        return 1;
    }
    if (exponentvalue == 1) {
        return baseValue;
    }
    return baseValue * Pow (basevalue, exponentvalue - 1);
}
----------------------------------------

 public static double Pow(double baseValue, int exponentValue) {
    double result = 1.0;
    for (int i = exponentValue; i > 0; i /= 2) {
        if (i % 2 != 0) {
            result *= baseValue;
        }
        baseValue *= baseValue;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
314
0
Gpt3D_Clone314_0.cs 1 15
Gpt3D_Clone314_0.cs 16 46
----------------------------------------

private string GetJavaInstallationPath () {
    string environmentPath = Environment.GetEnvironmentVariable ("JAVA_HOME");
    if (! string.IsNullOrEmpty (environmentPath)) {
        return environmentPath;
    }
    string javaKey = "SOFTWARE\\JavaSoft\\Java Runtime Environment\\";
    using (Microsoft.Win32.RegistryKey rk = Microsoft.Win32.Registry.LocalMachine.OpenSubKey (javaKey))
    {
        string currentVersion = rk.GetValue ("CurrentVersion").ToString ();
        using (Microsoft.Win32.RegistryKey key = rk.OpenSubKey (currentVersion))
        {
            return key.GetValue ("JavaHome").ToString ();
        }}
        
}
----------------------------------------

 private string GetJavaInstalltionPath()
{
                string environmentPath = string.Empty;
                string javaKey = "SOFTWARE\\JavaSoft\\Java Runtime Environment\\";
                try
                {
                environmentPath = Environment.GetEnvironmentVariable ("JAVA_HOME");
                if (string.IsNullOrEmpty (environmentPath)) 
                {
                    using(Microsoft.Win32.RegistryKey rk = Microsoft.Win32.Registry.LocalMachine.OpenSubKey(javaKey))
                    {
                        string currentVersion = rk.GetValue ("CurrentVersion")?.ToString ();
                        if(!string.IsNullOrEmpty(currentVersion))
                        {
                            using (Microsoft.Win32.RegistryKey key = rk.OpenSubKey (currentVersion))
                            {
                                environmentPath = key.GetValue ("JavaHome")?.ToString ();
                            }
                        }
                    }
                }
                }
                catch (Exception)
                {
                // log the exception
                }
                return environmentPath;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
314
1
Gpt3D_Clone314_1.cs 1 14
Gpt3D_Clone314_1.cs 15 35
----------------------------------------

private string GetJavaInstallationPath () {
    string environmentPath = Environment.GetEnvironmentVariable ("JAVA_HOME");
    if (! string.IsNullOrEmpty (environmentPath)) {
        return environmentPath;
    }
    string javaKey = "SOFTWARE\\JavaSoft\\Java Runtime Environment\\";
    using (Microsoft.Win32.RegistryKey rk = Microsoft.Win32.Registry.LocalMachine.OpenSubKey (javaKey))
    {
        string currentVersion = rk.GetValue ("CurrentVersion").ToString ();
        using (Microsoft.Win32.RegistryKey key = rk.OpenSubKey (currentVersion))
        {
            return key.GetValue ("JavaHome").ToString ();
        }}
}
----------------------------------------

 private string GetJavaInstallationPath()
{
   string javaHomePath = System.Environment.GetEnvironmentVariable("JAVA_HOME");
   if (javaHomePath == null || javaHomePath== "")
   {
      using (Microsoft.win32.RegistryKey RootKey = Microsoft.Win32.Registry.LocalMachine .OpenSubKey("SOFTWARE\\JavaSoft"))
      {
         using(Microsoft.win32.RegistryKey Key = RootKey.OpenSubKey("Java Runtime Environment"))
         {
            string CurrentVersion = (String)Key.GetValue("CurrentVersion");
            using (Microsoft.win32.RegistryKey Key1 = RootKey.OpenSubKey(CurrentVersion))
            {
               javaHomePath = (String)Key1.GetValue("JavaHome");
            }
         }
      }
   }
   return javaHomePath;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
314
2
Gpt3D_Clone314_2.cs 1 14
Gpt3D_Clone314_2.cs 15 35
----------------------------------------

private string GetJavaInstallationPath () {
    string environmentPath = Environment.GetEnvironmentVariable ("JAVA_HOME");
    if (! string.IsNullOrEmpty (environmentPath)) {
        return environmentPath;
    }
    string javaKey = "SOFTWARE\\JavaSoft\\Java Runtime Environment\\";
    using (Microsoft.Win32.RegistryKey rk = Microsoft.Win32.Registry.LocalMachine.OpenSubKey (javaKey))
    {
        string currentVersion = rk.GetValue ("CurrentVersion").ToString ();
        using (Microsoft.Win32.RegistryKey key = rk.OpenSubKey (currentVersion))
        {
            return key.GetValue ("JavaHome").ToString ();
        }}
}
----------------------------------------

 private string GetJavaInstallationPath () {
                string environmentPath = "";
                string javaKey = "SOFTWARE\\JavaSoft\\Java Runtime Environment\\";
                if (string.IsNullOrEmpty(environmentPath))
                {
                    using (Microsoft.Win32.RegistryKey registryKey = Microsoft.Win32.Registry.LocalMachine.OpenSubKey(javaKey))
                    {
                        string currentVersion = (string)registryKey.GetValue("CurrentVersion");
                        if (!string.IsNullOrEmpty(currentVersion))
                        {
                            using (Microsoft.Win32.RegistryKey key = registryKey.OpenSubKey(currentVersion))
                            {
                                environmentPath = key.GetValue("JavaHome").ToString();
                            }
                        }
                    }
                }
                return environmentPath;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
314
3
Gpt3D_Clone314_3.cs 1 14
Gpt3D_Clone314_3.cs 15 35
----------------------------------------

private string GetJavaInstallationPath () {
    string environmentPath = Environment.GetEnvironmentVariable ("JAVA_HOME");
    if (! string.IsNullOrEmpty (environmentPath)) {
        return environmentPath;
    }
    string javaKey = "SOFTWARE\\JavaSoft\\Java Runtime Environment\\";
    using (Microsoft.Win32.RegistryKey rk = Microsoft.Win32.Registry.LocalMachine.OpenSubKey (javaKey))
    {
        string currentVersion = rk.GetValue ("CurrentVersion").ToString ();
        using (Microsoft.Win32.RegistryKey key = rk.OpenSubKey (currentVersion))
        {
            return key.GetValue ("JavaHome").ToString ();
        }}
}
----------------------------------------

 private string GetJavaInstallationPath()
{
            string environmentPath = Environment.GetEnvironmentVariable("JAVA_HOME");
            if (string.IsNullOrEmpty(environmentPath))
            {
                using (Microsoft.Win32.RegistryKey registryKey = Microsoft.Win32.Registry.LocalMachine.OpenSubKey("SOFTWARE\\JavaSoft\\Java Runtime Environment"))
                {
                    string currentVersion = (string)registryKey.GetValue("CurrentVersion");
                    if (!string.IsNullOrEmpty(currentVersion))
                    {
                        using (Microsoft.Win32.RegistryKey key = registryKey.OpenSubKey(currentVersion))
                        {
                        environmentPath = (string)key.GetValue("JavaHome");
                        }
                    }
                }
            }
            return environmentPath;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
314
4
Gpt3D_Clone314_4.cs 1 14
Gpt3D_Clone314_4.cs 15 34
----------------------------------------

private string GetJavaInstallationPath () {
    string environmentPath = Environment.GetEnvironmentVariable ("JAVA_HOME");
    if (! string.IsNullOrEmpty (environmentPath)) {
        return environmentPath;
    }
    string javaKey = "SOFTWARE\\JavaSoft\\Java Runtime Environment\\";
    using (Microsoft.Win32.RegistryKey rk = Microsoft.Win32.Registry.LocalMachine.OpenSubKey (javaKey))
    {
        string currentVersion = rk.GetValue ("CurrentVersion").ToString ();
        using (Microsoft.Win32.RegistryKey key = rk.OpenSubKey (currentVersion))
        {
            return key.GetValue ("JavaHome").ToString ();
        }}
}
----------------------------------------

 private string GetJavaInstallationPath () 
{ 
    string environmentPath = string.Empty;
    string javaKey = "SOFTWARE\\JavaSoft\\Java Runtime Environment\\";
    RegistryKey regKey = Registry.LocalMachine.OpenSubKey (javaKey);
    environmentPath = Convert.ToString ( Environment.GetEnvironmentVariable ("JAVA_HOME"));
    if (string.IsNullOrEmpty (environmentPath) && regKey != null)
    { 
        string currentVersion = (string) regKey.GetValue ("CurrentVersion");
        using (RegistryKey key = regKey.OpenSubKey (currentVersion))    
        {     
            environmentPath = (string) key.GetValue ("JavaHome");
        }
    }
    return environmentPath;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
314
5
Gpt3D_Clone314_5.cs 1 14
Gpt3D_Clone314_5.cs 15 35
----------------------------------------

private string GetJavaInstallationPath () {
    string environmentPath = Environment.GetEnvironmentVariable ("JAVA_HOME");
    if (! string.IsNullOrEmpty (environmentPath)) {
        return environmentPath;
    }
    string javaKey = "SOFTWARE\\JavaSoft\\Java Runtime Environment\\";
    using (Microsoft.Win32.RegistryKey rk = Microsoft.Win32.Registry.LocalMachine.OpenSubKey (javaKey))
    {
        string currentVersion = rk.GetValue ("CurrentVersion").ToString ();
        using (Microsoft.Win32.RegistryKey key = rk.OpenSubKey (currentVersion))
        {
            return key.GetValue ("JavaHome").ToString ();
        }}
}
----------------------------------------

 private string GetJavaInstallationPath() 
{ 
    string path = System.Environment.GetEnvironmentVariable("JAVA_HOME"); 
    if (string.IsNullOrEmpty(path)) 
    { 
        using (Microsoft.Win32.RegistryKey key = Microsoft.Win32.Registry.LocalMachine.OpenSubKey("SOFTWARE\\JavaSoft\\Java Runtime Environment")) 
        { 
            string currentVersion = (string)key.GetValue("CurrentVersion"); 
            if (!string.IsNullOrEmpty(currentVersion)) 
            { 
                using (Microsoft.Win32.RegistryKey keyCurrentVersion = key.OpenSubKey(currentVersion)) 
                { 
                    path = (string)keyCurrentVersion.GetValue("JavaHome"); 
                } 
            } 
        } 
    } 
    return path; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
314
6
Gpt3D_Clone314_6.cs 1 14
Gpt3D_Clone314_6.cs 15 27
----------------------------------------

private string GetJavaInstallationPath () {
    string environmentPath = Environment.GetEnvironmentVariable ("JAVA_HOME");
    if (! string.IsNullOrEmpty (environmentPath)) {
        return environmentPath;
    }
    string javaKey = "SOFTWARE\\JavaSoft\\Java Runtime Environment\\";
    using (Microsoft.Win32.RegistryKey rk = Microsoft.Win32.Registry.LocalMachine.OpenSubKey (javaKey))
    {
        string currentVersion = rk.GetValue ("CurrentVersion").ToString ();
        using (Microsoft.Win32.RegistryKey key = rk.OpenSubKey (currentVersion))
        {
            return key.GetValue ("JavaHome").ToString ();
        }}
}
----------------------------------------

 private string GetJavaInstallationPath()
{
   string javaHomePath = System.Environment.GetEnvironmentVariable("JAVA_HOME");
   if (javaHomePath == null || javaHomePath== "")
   {
      string currJavaVersion = (String)Microsoft.win32.registry.localMachine.openSubKey("SOFTWARE\\JavaSoft\\Java Runtime Environment\\CurrentVersion").getValue("CurrentVersion");
      string javaHomeKey = "SOFTWARE\\JavaSoft\\Java Runtime Environment\\" + currJavaVersion;
      javaHomePath = (String)Microsoft.win32.registry.localMachine.openSubKey(javaHomeKey).getValue("JavaHome");
   }
   return javaHomePath;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
317
0
Gpt3D_Clone317_0.cs 1 12
Gpt3D_Clone317_0.cs 13 30
----------------------------------------

public bool IsCompletedBy (Keys key) {
    if (key == _code [_index]) {
        if (_index == _code.Length - 1) {
            _index = 0;
            return true;
        }
        ++ _index;
    } else {
        _index = 0;
    }
    return false;
}
----------------------------------------

 public bool IsCompletedBy (Keys key)
 {
        if (key != _code[_index])
        {
            _index = 0;
            return false;
        }
        else
        {
            if(_index == _code.Length - 1)
                _index = 0;
            else
                _index++;
            return true; 
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
317
1
Gpt3D_Clone317_1.cs 1 12
Gpt3D_Clone317_1.cs 13 28
----------------------------------------

public bool IsCompletedBy (Keys key) {
    if (key == _code [_index]) {
        if (_index == _code.Length - 1) {
            _index = 0;
            return true;
        }
        ++ _index;
    } else {
        _index = 0;
    }
    return false;
}
----------------------------------------

 public bool IsCompletedBy (Keys key)
 {
        if (key == _code[_index])
        {
            if(_index == _code.Length - 1)
                _index = 0;
            else 
                _index++;
            return (_index == 0);
        }
        else
            _index = 0;
        return false;	
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
317
3
Gpt3D_Clone317_3.cs 1 12
Gpt3D_Clone317_3.cs 13 55
----------------------------------------

public bool IsCompletedBy (Keys key) {
    if (key == _code [_index]) {
        if (_index == _code.Length - 1) {
            _index = 0;
            return true;
        }
        ++ _index;
    } else {
        _index = 0;
    }
    return false;
}
----------------------------------------

 public bool IsCompletedBy (Keys key)
 {
        if (key != _code[_index])
        {
            _index = 0;
            return false;
        }
        else
        {
            _index = _index == _code.Length - 1 ? 0 : _index + 1;
            return (_index == 0); 
        }
    }
 public bool IsCompletedBy (Keys key)
 {
        if (key == _code[_index])
        {
            if(_index == _code.Length - 1)
            return (_index = 0) == 0 ? true : false;
            else 
            _index++;
        }
        else
            _index = 0;
        return false;
    }
 public bool IsCompletedBy (Keys key)
 {
        if (key == _code[_index])
        {
            if(_index == _code.Length - 1)
                _index = 0;
            else
                _index++;  
        }
        else
            _index = 0;
        return _index == 0 ? false : true; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
317
4
Gpt3D_Clone317_4.cs 1 12
Gpt3D_Clone317_4.cs 13 55
----------------------------------------

public bool IsCompletedBy (Keys key) {
    if (key == _code [_index]) {
        if (_index == _code.Length - 1) {
            _index = 0;
            return true;
        }
        ++ _index;
    } else {
        _index = 0;
    }
    return false;
}
----------------------------------------

 public bool IsCompletedBy (Keys key)
 {
        if (key != _code[_index])
        {
            _index = 0;
            return false;
        }
        else
        {
            _index = _index == _code.Length - 1 ? 0 : _index + 1;
            return (_index == 0); 
        }
    }
 public bool IsCompletedBy (Keys key)
 {
        if (key == _code[_index])
        {
            if(_index == _code.Length - 1)
            return (_index = 0) == 0 ? true : false;
            else 
            _index++;
        }
        else
            _index = 0;
        return false;
    }
 public bool IsCompletedBy (Keys key)
 {
        if (key == _code[_index])
        {
            if(_index == _code.Length - 1)
                _index = 0;
            else
                _index++;  
        }
        else
            _index = 0;
        return _index == 0 ? false : true; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
317
5
Gpt3D_Clone317_5.cs 1 12
Gpt3D_Clone317_5.cs 13 25
----------------------------------------

public bool IsCompletedBy (Keys key) {
    if (key == _code [_index]) {
        if (_index == _code.Length - 1) {
            _index = 0;
            return true;
        }
        ++ _index;
    } else {
        _index = 0;
    }
    return false;
}
----------------------------------------

 public bool IsCompletedBy (Keys key)
 {
        if (key == _code[_index])
        {
            _index =  (_index == _code.Length - 1) ?  0 : _index + 1;
            return (_index == 0);
        }
        else
        _index = 0;
        return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
317
6
Gpt3D_Clone317_6.cs 1 12
Gpt3D_Clone317_6.cs 13 55
----------------------------------------

public bool IsCompletedBy (Keys key) {
    if (key == _code [_index]) {
        if (_index == _code.Length - 1) {
            _index = 0;
            return true;
        }
        ++ _index;
    } else {
        _index = 0;
    }
    return false;
}
----------------------------------------

 public bool IsCompletedBy (Keys key)
 {
        if (key != _code[_index])
        {
            _index = 0;
            return false;
        }
        else
        {
            _index = _index == _code.Length - 1 ? 0 : _index + 1;
            return (_index == 0); 
        }
    }
 public bool IsCompletedBy (Keys key)
 {
        if (key == _code[_index])
        {
            if(_index == _code.Length - 1)
            return (_index = 0) == 0 ? true : false;
            else 
            _index++;
        }
        else
            _index = 0;
        return false;
    }
 public bool IsCompletedBy (Keys key)
 {
        if (key == _code[_index])
        {
            if(_index == _code.Length - 1)
                _index = 0;
            else
                _index++;  
        }
        else
            _index = 0;
        return _index == 0 ? false : true; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
319
3
Gpt3D_Clone319_3.cs 1 15
Gpt3D_Clone319_3.cs 16 35
----------------------------------------

public bool IsCompletedBy (Keys key) {
    if (Keys [Position + 1] == key) {
        Position ++;
    } else if (Position == 1 && key == System.Windows.Forms.Keys.Up) {
    } else if (Keys [0] == key) {
        Position = 0;
    } else {
        Position = - 1;
    }
    if (Position == Keys.Count - 1) {
        Position = - 1;
        return true;
    }
    return false;
}
----------------------------------------

 public bool IsCompletedBy(Keys key) {
    bool success = false;
    if (key == Keys[Position + 1])
        Position++;
    else if(Position == 1 && key == System.Windows.Forms.Keys.Up)
        Position = 0;
    else if(key == Keys[0])
        Position = 0;
    else
        Position = -1;
    
    if (Position == Keys.Count - 1){
        Position = -1;
        success = true;
    }
    return success;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
319
5
Gpt3D_Clone319_5.cs 1 15
Gpt3D_Clone319_5.cs 16 36
----------------------------------------

public bool IsCompletedBy (Keys key) {
    if (Keys [Position + 1] == key) {
        Position ++;
    } else if (Position == 1 && key == System.Windows.Forms.Keys.Up) {
    } else if (Keys [0] == key) {
        Position = 0;
    } else {
        Position = - 1;
    }
    if (Position == Keys.Count - 1) {
        Position = - 1;
        return true;
    }
    return false;
}
----------------------------------------

 public bool IsCompletedBy(Keys key) {
    bool completed = false;
    if(key == Keys[Position + 1])
        Position++;
    else if(Position == 1 && key == System.Windows.Forms.Keys.Up)
        Position = 0;
    else if(key == Keys[0])
        Position = 0;
    else
        Position = -1;
    
    if(Position == Keys.Count - 1){
        Position = -1;
        completed = true;
    }
    return completed;
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
319
7
Gpt3D_Clone319_7.cs 1 15
Gpt3D_Clone319_7.cs 16 33
----------------------------------------

public bool IsCompletedBy (Keys key) {
    if (Keys [Position + 1] == key) {
        Position ++;
    } else if (Position == 1 && key == System.Windows.Forms.Keys.Up) {
    } else if (Keys [0] == key) {
        Position = 0;
    } else {
        Position = - 1;
    }
    if (Position == Keys.Count - 1) {
        Position = - 1;
        return true;
    }
    return false;
}
----------------------------------------

 public bool IsCompletedBy(Keys key) { 
    bool result = false;
    
    if ( Keys[Position + 1] == key || Position == 1 && key == System.Windows.Forms.Keys.Up || key == Keys[0] ) {
        Position++;
        if ( Position == Keys.Count - 1 ) {
            result = true;
            Position = -1;
        }
    } 
    else {
        Position = -1;
    }
    
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
319
8
Gpt3D_Clone319_8.cs 1 15
Gpt3D_Clone319_8.cs 16 31
----------------------------------------

public bool IsCompletedBy (Keys key) {
    if (Keys [Position + 1] == key) {
        Position ++;
    } else if (Position == 1 && key == System.Windows.Forms.Keys.Up) {
    } else if (Keys [0] == key) {
        Position = 0;
    } else {
        Position = - 1;
    }
    if (Position == Keys.Count - 1) {
        Position = - 1;
        return true;
    }
    return false;
}
----------------------------------------

 public bool IsCompletedBy(Keys key) {
    bool result = false;
    if (key == Keys[Position + 1] || (Position == 1 && key == System.Windows.Forms.Keys.Up) || (key == Keys[0])) {
        Position++;
        if (Position == Keys.Count - 1) {
            Position = -1;
            result = true;
        }
    } 
    else {
        Position = -1;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
320
0
Gpt3D_Clone320_0.cs 1 26
Gpt3D_Clone320_0.cs 27 52
----------------------------------------

private static void AppendToDocument (string sourcePdfPath1, string sourcePdfPath2, string outputPdfPath) {
    using (var sourceDocumentStream1 = new FileStream (sourcePdfPath1, FileMode.Open))
    {
        using (var sourceDocumentStream2 = new FileStream (sourcePdfPath2, FileMode.Open))
        {
            using (var destinationDocumentStream = new FileStream (outputPdfPath, FileMode.Create))
            {
                var pdfConcat = new PdfConcatenate (destinationDocumentStream);
                var pdfReader = new PdfReader (sourceDocumentStream1);
                var pages = new List < int > ();
                for (int i = 0; i < pdfReader.NumberOfPages; i ++) {
                    pages.Add (i);
                }
                pdfReader.SelectPages (pages);
                pdfConcat.AddPages (pdfReader);
                pdfReader = new PdfReader (sourceDocumentStream2);
                pages = new List < int > ();
                for (int i = 0; i < pdfReader.NumberOfPages; i ++) {
                    pages.Add (i);
                }
                pdfReader.SelectPages (pages);
                pdfConcat.AddPages (pdfReader);
                pdfReader.Close ();
                pdfConcat.Close ();
            }}}
}
----------------------------------------

 private static void AppendToDocument(string sourcePdfPath1, string sourcePdfPath2, string outputPdfPath)
{
    var sourceDocumentStream1 = File.Open(sourcePdfPath1, FileMode.Open);
    var sourceDocumentStream2 = File.Open(sourcePdfPath2, FileMode.Open);
    var destinationDocumentStream = File.Open(outputPdfPath, FileMode.Create);
    var pdfConcat = new PdfConcatenate(destinationDocumentStream);
    var pdfReader1 = new PdfReader(sourceDocumentStream1);
    var allPageList1 = Enumerable.Range(0, pdfReader1.NumberOfPages).ToList();
    pdfReader1.SelectPages(allPageList1);
    pdfConcat.AddPages(pdfReader1);
    var pdfReader2 = new PdfReader(sourceDocumentStream2);
    var allPageList2 = Enumerable.Range(0, pdfReader2.NumberOfPages).ToList();
    pdfReader2.SelectPages(allPageList2);
    pdfConcat.AddPages(pdfReader2);
    pdfReader1.Close();
    pdfReader2.Close();
    pdfConcat.Close();
    sourceDocumentStream1.Close();
    sourceDocumentStream2.Close();
    destinationDocumentStream.Close();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
320
6
Gpt3D_Clone320_6.cs 1 26
Gpt3D_Clone320_6.cs 27 50
----------------------------------------

private static void AppendToDocument (string sourcePdfPath1, string sourcePdfPath2, string outputPdfPath) {
    using (var sourceDocumentStream1 = new FileStream (sourcePdfPath1, FileMode.Open))
    {
        using (var sourceDocumentStream2 = new FileStream (sourcePdfPath2, FileMode.Open))
        {
            using (var destinationDocumentStream = new FileStream (outputPdfPath, FileMode.Create))
            {
                var pdfConcat = new PdfConcatenate (destinationDocumentStream);
                var pdfReader = new PdfReader (sourceDocumentStream1);
                var pages = new List < int > ();
                for (int i = 0; i < pdfReader.NumberOfPages; i ++) {
                    pages.Add (i);
                }
                pdfReader.SelectPages (pages);
                pdfConcat.AddPages (pdfReader);
                pdfReader = new PdfReader (sourceDocumentStream2);
                pages = new List < int > ();
                for (int i = 0; i < pdfReader.NumberOfPages; i ++) {
                    pages.Add (i);
                }
                pdfReader.SelectPages (pages);
                pdfConcat.AddPages (pdfReader);
                pdfReader.Close ();
                pdfConcat.Close ();
            }}}
}
----------------------------------------

 private static void AppendToDocument(string sourcePdfPath1, string sourcePdfPath2, string outputPdfPath){
 
            var  sourceDocumentStream1 = new FileStream(sourcePdfPath1, FileMode.Open);
            var  sourceDocumentStream2 = new FileStream(sourcePdfPath2, FileMode.Open);
            var  destinationDocumentStream = new FileStream(outputPdfPath, FileMode.Create);
            var pdfConcatenate = new PdfConcatenate(destinationDocumentStream);
            var  pdfReader1 = new PdfReader(sourceDocumentStream1);
            for (int i = 0 ; i < pdfReader1.NumberOfPages; i++){
                pdfReader1.SelectPages(i);  
                pdfConcatenate.AddPages(pdfReader1);
            }
            pdfReader1.Close();
            var  pdfReader2 = new PdfReader(sourceDocumentStream2);
            for (int i = 0 ; i < pdfReader2.NumberOfPages; i++){
                pdfReader2.SelectPages(i);  
                pdfConcatenate.AddPages(pdfReader2);
            }
            pdfReader2.Close();
            pdfConcatenate.Close();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
320
7
Gpt3D_Clone320_7.cs 1 26
Gpt3D_Clone320_7.cs 27 47
----------------------------------------

private static void AppendToDocument (string sourcePdfPath1, string sourcePdfPath2, string outputPdfPath) {
    using (var sourceDocumentStream1 = new FileStream (sourcePdfPath1, FileMode.Open))
    {
        using (var sourceDocumentStream2 = new FileStream (sourcePdfPath2, FileMode.Open))
        {
            using (var destinationDocumentStream = new FileStream (outputPdfPath, FileMode.Create))
            {
                var pdfConcat = new PdfConcatenate (destinationDocumentStream);
                var pdfReader = new PdfReader (sourceDocumentStream1);
                var pages = new List < int > ();
                for (int i = 0; i < pdfReader.NumberOfPages; i ++) {
                    pages.Add (i);
                }
                pdfReader.SelectPages (pages);
                pdfConcat.AddPages (pdfReader);
                pdfReader = new PdfReader (sourceDocumentStream2);
                pages = new List < int > ();
                for (int i = 0; i < pdfReader.NumberOfPages; i ++) {
                    pages.Add (i);
                }
                pdfReader.SelectPages (pages);
                pdfConcat.AddPages (pdfReader);
                pdfReader.Close ();
                pdfConcat.Close ();
            }}}
}
----------------------------------------

private static void AppendToDocument(string sourcePdfPath1, string sourcePdfPath2, string outputPdfPath){
        var sourceDocumentStream1 = new FileStream(sourcePdfPath1,FileMode.Open);
        var sourceDocumentStream2 = new FileStream(sourcePdfPath2,FileMode.Open);
        var destinationDocumentStream = new FileStream(outputPdfPath,FileMode.Create);
        var pdfConcat = new PdfConcatenate(destinationDocumentStream);
        var pdfReader1 = new PdfReader(sourceDocumentStream1);
        for(int i=0;i<pdfReader1.NumberOfPages;i++){
            pdfReader1.SelectPages(i);
            pdfConcat.AddPages(pdfReader1);
        }
        pdfReader1.Close();
        var pdfReader2 = new PdfReader(sourceDocumentStream2);
        for(int i=0;i<pdfReader2.NumberOfPages;i++){
            pdfReader2.SelectPages(i);
            pdfConcat.AddPages(pdfReader2);
        }
        pdfReader2.Close();
        pdfConcat.Close();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
320
8
Gpt3D_Clone320_8.cs 1 26
Gpt3D_Clone320_8.cs 27 60
----------------------------------------

private static void AppendToDocument (string sourcePdfPath1, string sourcePdfPath2, string outputPdfPath) {
    using (var sourceDocumentStream1 = new FileStream (sourcePdfPath1, FileMode.Open))
    {
        using (var sourceDocumentStream2 = new FileStream (sourcePdfPath2, FileMode.Open))
        {
            using (var destinationDocumentStream = new FileStream (outputPdfPath, FileMode.Create))
            {
                var pdfConcat = new PdfConcatenate (destinationDocumentStream);
                var pdfReader = new PdfReader (sourceDocumentStream1);
                var pages = new List < int > ();
                for (int i = 0; i < pdfReader.NumberOfPages; i ++) {
                    pages.Add (i);
                }
                pdfReader.SelectPages (pages);
                pdfConcat.AddPages (pdfReader);
                pdfReader = new PdfReader (sourceDocumentStream2);
                pages = new List < int > ();
                for (int i = 0; i < pdfReader.NumberOfPages; i ++) {
                    pages.Add (i);
                }
                pdfReader.SelectPages (pages);
                pdfConcat.AddPages (pdfReader);
                pdfReader.Close ();
                pdfConcat.Close ();
            }}}
}
----------------------------------------

private static void AppendToDocument(string sourcePdfPath1, string sourcePdfPath2, string outputPdfPath) 
{
    using (var sourceDocumentStream1 = new FileStream(sourcePdfPath1, FileMode.Open))
    using (var sourceDocumentStream2 = new FileStream(sourcePdfPath2, FileMode.Open))
    using (var destinationDocumentStream = new FileStream(outputPdfPath, FileMode.Create))
    { 
        var pdfConcatenate = new PdfConcatenate(destinationDocumentStream);
        var pdfReader1 = new PdfReader(sourceDocumentStream1);
        var pageList1 = ReadPages(pdfReader1);
        pdfReader1.SelectPages(pageList1);
        pdfConcatenate.AddPages(pdfReader1);
        var pdfReader2 = new PdfReader(sourceDocumentStream2);
        var pageList2 = ReadPages(pdfReader2);
        pdfReader2.SelectPages(pageList2);
        pdfConcatenate.AddPages(pdfReader2);
        pdfReader1.Close();
        pdfReader2.Close();
        pdfConcatenate.Close();
    }}
        private static List<int> ReadPages(PdfReader reader)
        {
            var pageList = new List<int>();
            for (int i = 0; i < reader.NumberOfPages; i++)
            {
                pageList.Add(i);
            }
            return pageList;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
320
9
Gpt3D_Clone320_9.cs 1 26
Gpt3D_Clone320_9.cs 27 55
----------------------------------------

private static void AppendToDocument (string sourcePdfPath1, string sourcePdfPath2, string outputPdfPath) {
    using (var sourceDocumentStream1 = new FileStream (sourcePdfPath1, FileMode.Open))
    {
        using (var sourceDocumentStream2 = new FileStream (sourcePdfPath2, FileMode.Open))
        {
            using (var destinationDocumentStream = new FileStream (outputPdfPath, FileMode.Create))
            {
                var pdfConcat = new PdfConcatenate (destinationDocumentStream);
                var pdfReader = new PdfReader (sourceDocumentStream1);
                var pages = new List < int > ();
                for (int i = 0; i < pdfReader.NumberOfPages; i ++) {
                    pages.Add (i);
                }
                pdfReader.SelectPages (pages);
                pdfConcat.AddPages (pdfReader);
                pdfReader = new PdfReader (sourceDocumentStream2);
                pages = new List < int > ();
                for (int i = 0; i < pdfReader.NumberOfPages; i ++) {
                    pages.Add (i);
                }
                pdfReader.SelectPages (pages);
                pdfConcat.AddPages (pdfReader);
                pdfReader.Close ();
                pdfConcat.Close ();
            }}}
}
----------------------------------------

 private static void AppendToDocument(string sourcePdfPath1, string sourcePdfPath2, string outputPdfPath)
{
            using (var sourceDocumentStream1 = new FileStream(sourcePdfPath1, FileMode.Open))
            using (var sourceDocumentStream2 = new FileStream(sourcePdfPath2, FileMode.Open))
            using (var destinationDocumentStream = new FileStream(outputPdfPath, FileMode.Create))
            {
                var pdfConcat = new PdfConcatenate(destinationDocumentStream);
                var allPageList1 = ReadAllPages(sourceDocumentStream1);
                var pdfReader1 = new PdfReader(sourceDocumentStream1);
                pdfReader1.SelectPages(allPageList1);
                pdfConcat.AddPages(pdfReader1);
                var allPageList2 = ReadAllPages(sourceDocumentStream2);
                var pdfReader2 = new PdfReader(sourceDocumentStream2);
                pdfReader2.SelectPages(allPageList2);
                pdfConcat.AddPages(pdfReader2);
                pdfReader1.Close();
                pdfReader2.Close();
                pdfConcat.Close();
            }}
    private static List<int> ReadAllPages(FileStream fs)
    {
        var pdfReader = new PdfReader(fs);
        return Enumerable.Range(0, pdfReader.NumberOfPages).ToList();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
322
0
Gpt3D_Clone322_0.cs 1 15
Gpt3D_Clone322_0.cs 16 34
----------------------------------------

public object Convert (object value, Type targetType, object parameter, string language) {
    if (value != null) {
        string source = value.ToString ();
        var ims = new InMemoryRandomAccessStream ();
        var bytes = Convert.FromBase64String (source);
        var dataWriter = new DataWriter (ims);
        dataWriter.WriteBytes (bytes);
        dataWriter.StoreAsync ();
        ims.Seek (0);
        var img = new BitmapImage ();
        img.SetSource (ims);
        return img;
    }
    return null;
}
----------------------------------------

 public object Convert (object value, Type targetType, object parameter, string language) { 
    if (value != null) { 
        ImageSource imgSource; 
        byte[] imageData = System.Convert.FromBase64String(value.ToString()); 
        using (MemoryStream ms = new MemoryStream(imageData, 0, imageData.Length)) { 
            ms.Write(imageData, 0, imageData.Length); 
            BitmapImage bitmapImage = new BitmapImage(); 
            bitmapImage.BeginInit(); 
            bitmapImage.StreamSource = ms; 
            bitmapImage.CacheOption = BitmapCacheOption.OnLoad; 
            bitmapImage.EndInit(); 
            imgSource = bitmapImage; 
        } 
        return (ImageSource) imageSource; 
    } 
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
322
1
Gpt3D_Clone322_1.cs 1 15
Gpt3D_Clone322_1.cs 16 32
----------------------------------------

public object Convert (object value, Type targetType, object parameter, string language) {
    if (value != null) {
        string source = value.ToString ();
        var ims = new InMemoryRandomAccessStream ();
        var bytes = Convert.FromBase64String (source);
        var dataWriter = new DataWriter (ims);
        dataWriter.WriteBytes (bytes);
        dataWriter.StoreAsync ();
        ims.Seek (0);
        var img = new BitmapImage ();
        img.SetSource (ims);
        return img;
    }
    return null;
}
----------------------------------------

  public object Convert (object value, Type targetType, object parameter, string language) {
    if (value != null) {
        byte[] bytes = System.Convert.FromBase64String(value.ToString());
        using(MemoryStream ms = new MemoryStream(bytes)) {
            BitmapImage bitmapImage = new BitmapImage();
            bitmapImage.BeginInit();
            bitmapImage.StreamSource = ms;
            bitmapImage.CacheOption = BitmapCacheOption.OnLoad;
            bitmapImage.EndInit();
            bitmapImage.Freeze();
            return bitmapImage;
        }
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
322
4
Gpt3D_Clone322_4.cs 1 15
Gpt3D_Clone322_4.cs 16 29
----------------------------------------

public object Convert (object value, Type targetType, object parameter, string language) {
    if (value != null) {
        string source = value.ToString ();
        var ims = new InMemoryRandomAccessStream ();
        var bytes = Convert.FromBase64String (source);
        var dataWriter = new DataWriter (ims);
        dataWriter.WriteBytes (bytes);
        dataWriter.StoreAsync ();
        ims.Seek (0);
        var img = new BitmapImage ();
        img.SetSource (ims);
        return img;
    }
    return null;
}
----------------------------------------

public object Convert (object value, Type targetType, object parameter, string language) {
    if (value != null) {
        byte[] decodedImageInBytes = System.Convert.FromBase64String(value.ToString());
        MemoryStream imageInMemory = new MemoryStream(decodedImageInBytes);
        var bitmapImage = new BitmapImage();
        bitmapImage.BeginInit();
        bitmapImage.StreamSource = imageInMemory;
        bitmapImage.EndInit();
        return bitmapImage;
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
322
5
Gpt3D_Clone322_5.cs 1 15
Gpt3D_Clone322_5.cs 16 29
----------------------------------------

public object Convert (object value, Type targetType, object parameter, string language) {
    if (value != null) {
        string source = value.ToString ();
        var ims = new InMemoryRandomAccessStream ();
        var bytes = Convert.FromBase64String (source);
        var dataWriter = new DataWriter (ims);
        dataWriter.WriteBytes (bytes);
        dataWriter.StoreAsync ();
        ims.Seek (0);
        var img = new BitmapImage ();
        img.SetSource (ims);
        return img;
    }
    return null;
}
----------------------------------------

 public object Convert (object value, Type targetType, object parameter, string language) {
    if (value != null) {
        byte[] bytes = System.Convert.FromBase64String(value.ToString());
        MemoryStream stream = new MemoryStream(bytes);
        BitmapImage img = new BitmapImage();
        img.BeginInit();
        img.StreamSource = stream;
        img.EndInit();
        return img;
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
322
6
Gpt3D_Clone322_6.cs 1 15
Gpt3D_Clone322_6.cs 16 29
----------------------------------------

public object Convert (object value, Type targetType, object parameter, string language) {
    if (value != null) {
        string source = value.ToString ();
        var ims = new InMemoryRandomAccessStream ();
        var bytes = Convert.FromBase64String (source);
        var dataWriter = new DataWriter (ims);
        dataWriter.WriteBytes (bytes);
        dataWriter.StoreAsync ();
        ims.Seek (0);
        var img = new BitmapImage ();
        img.SetSource (ims);
        return img;
    }
    return null;
}
----------------------------------------

  public object Convert (object value, Type targetType, object parameter, string language) {
    if (value != null) {
        byte[] bytes = Convert.FromBase64String(value.ToString());
        var ms = new MemoryStream(bytes);
        var img = new BitmapImage();
        img.BeginInit();
        img.StreamSource = ms;
        img.EndInit();
        return img;
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
322
8
Gpt3D_Clone322_8.cs 1 15
Gpt3D_Clone322_8.cs 16 28
----------------------------------------

public object Convert (object value, Type targetType, object parameter, string language) {
    if (value != null) {
        string source = value.ToString ();
        var ims = new InMemoryRandomAccessStream ();
        var bytes = Convert.FromBase64String (source);
        var dataWriter = new DataWriter (ims);
        dataWriter.WriteBytes (bytes);
        dataWriter.StoreAsync ();
        ims.Seek (0);
        var img = new BitmapImage ();
        img.SetSource (ims);
        return img;
    }
    return null;
}
----------------------------------------

 public object Convert (object value, Type targetType, object parameter, string language) { 
    if (value != null) { 
        byte[] bytes = System.Convert.FromBase64String(value.ToString()); 
        BitmapImage bmpImage = new BitmapImage(); 
        bmpImage.BeginInit(); 
        bmpImage.StreamSource = new MemoryStream(bytes); 
        bmpImage.EndInit(); 
        return bmpImage; 
    } 
    return null; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
324
0
Gpt3D_Clone324_0.cs 1 10
Gpt3D_Clone324_0.cs 11 27
----------------------------------------

public static bool InheritsFrom (this Type t, Type baseType) {
    Type cur = t.BaseType;
    while (cur != null) {
        if (cur.Equals (baseType)) {
            return true;
        }
        cur = cur.BaseType;
    }
    return false;
}
----------------------------------------

 public static bool InheritsFrom(this Type t, Type baseType) 
{ 
    Type cur = t;
    if (cur == baseType) 
    { 
        return true; 
    } 
    while (cur != null) 
    { 
        cur = cur.BaseType; 
        if (cur.Equals(baseType)) 
            return true; 
    } 
    return false; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
324
6
Gpt3D_Clone324_6.cs 1 10
Gpt3D_Clone324_6.cs 11 25
----------------------------------------

public static bool InheritsFrom (this Type t, Type baseType) {
    Type cur = t.BaseType;
    while (cur != null) {
        if (cur.Equals (baseType)) {
            return true;
        }
        cur = cur.BaseType;
    }
    return false;
}
----------------------------------------

 public static bool InheritsFrom(this Type t, Type baseType) 
{ 
    if (t == baseType) 
    { 
        return true; 
    } 
    Type cur = t.BaseType; 
    while (cur !=null && !cur.Equals(baseType)) 
    { 
        cur = cur.BaseType; 
    } 
    return cur != null; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
324
9
Gpt3D_Clone324_9.cs 1 10
Gpt3D_Clone324_9.cs 11 21
----------------------------------------

public static bool InheritsFrom (this Type t, Type baseType) {
    Type cur = t.BaseType;
    while (cur != null) {
        if (cur.Equals (baseType)) {
            return true;
        }
        cur = cur.BaseType;
    }
    return false;
}
----------------------------------------

 public static bool InheritsFrom(this Type t, Type baseType) 
{ 
    Type cur = t;
    while (cur != baseType && cur != null) 
    { 
        cur = cur.BaseType; 
    } 
    return cur == baseType; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
325
0
Gpt3D_Clone325_0.cs 1 15
Gpt3D_Clone325_0.cs 16 50
----------------------------------------

[RequireHttps] [HttpPost] public ActionResult LogOn (LogOnModel model, string returnUrl) {
    if (ModelState.IsValid) {
        UserProfile profile = UserProfile.GetUserProfile (model.UserName);
        if (profile != null && ! profile.IsLockedOut) {
            if (MembershipService.ValidateUser (model.UserName, model.Password)) {
                FormsService.SignIn (model.UserName, model.RememberMe);
            } else {
                ModelState.AddModelError ("", "The user name or password provided is incorrect.");
            }
        } else {
            ModelState.AddModelError ("", "The user account does not exist or has been locked out.");
        }
    }
    return View (model);
}
----------------------------------------

 [RequireHttps] [HttpPost] public ActionResult LogOn (LogOnModel model, string returnUrl) 
{
    if (ModelState.IsValid)
    {
        if (String.IsNullOrEmpty(model.UserName))
        {
            ModelState.AddModelError("", "The user name cannot be empty.");
            return View(model);
        }
        UserProfile profile = UserProfile.GetUserProfile(model.UserName);
        if (profile is null)
        {
            ModelState.AddModelError("", "The user account does not exist.");
            return View(model);
        }
        if (profile.IsLockedOut)
        {
            ModelState.AddModelError("", "The user account has been locked out.");
            return View(model);
        }
        if (!MembershipService.ValidateUser(model.UserName, model.Password))
        {
            ModelState.AddModelError("", "The user name or password provided is incorrect.");
            return View(model);
        }
        FormsService.SignIn(model.UserName, model.RememberMe);
    }
    return View(model);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
325
1
Gpt3D_Clone325_1.cs 1 15
Gpt3D_Clone325_1.cs 16 42
----------------------------------------

[RequireHttps] [HttpPost] public ActionResult LogOn (LogOnModel model, string returnUrl) {
    if (ModelState.IsValid) {
        UserProfile profile = UserProfile.GetUserProfile (model.UserName);
        if (profile != null && ! profile.IsLockedOut) {
            if (MembershipService.ValidateUser (model.UserName, model.Password)) {
                FormsService.SignIn (model.UserName, model.RememberMe);
            } else {
                ModelState.AddModelError ("", "The user name or password provided is incorrect.");
            }
        } else {
            ModelState.AddModelError ("", "The user account does not exist or has been locked out.");
        }
    }
    return View (model);
}
----------------------------------------

 [RequireHttps] [HttpPost] public ActionResult LogOn (LogOnModel model, string returnUrl) 
{
    if (!ModelState.IsValid)
        return View(model);
    
    var profile = UserProfile.GetUserProfile(model.UserName);
    if (profile == null || profile.IsLockedOut)
    {
        if (profile == null)
            ModelState.AddModelError("", "The user account does not exist.");
        else
            ModelState.AddModelError("", "The user account has been locked out.");
        
        return View(model);
    }
    if (!MembershipService.ValidateUser(model.UserName, model.Password))
    {
        ModelState.AddModelError("", "The user name or password provided is incorrect.");
        return View(model);
    }
    FormsService.SignIn(model.UserName, model.RememberMe);
    return View(model);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
325
2
Gpt3D_Clone325_2.cs 1 15
Gpt3D_Clone325_2.cs 16 42
----------------------------------------

[RequireHttps] [HttpPost] public ActionResult LogOn (LogOnModel model, string returnUrl) {
    if (ModelState.IsValid) {
        UserProfile profile = UserProfile.GetUserProfile (model.UserName);
        if (profile != null && ! profile.IsLockedOut) {
            if (MembershipService.ValidateUser (model.UserName, model.Password)) {
                FormsService.SignIn (model.UserName, model.RememberMe);
            } else {
                ModelState.AddModelError ("", "The user name or password provided is incorrect.");
            }
        } else {
            ModelState.AddModelError ("", "The user account does not exist or has been locked out.");
        }
    }
    return View (model);
}
----------------------------------------

 [RequireHttps] [HttpPost] public ActionResult LogOn (LogOnModel model, string returnUrl) 
{
    if (!ModelState.IsValid)
        return View(model);
    UserProfile profile = UserProfile.GetUserProfile(model.UserName);
    if (profile == null || profile.IsLockedOut)
    {
        if (profile == null)
            ModelState.AddModelError("", "The user account does not exist or has been locked out.");
        else
            ModelState.AddModelError("", "The user account has been locked out.");
        return View(model);
    }
    if (!MembershipService.ValidateUser(model.UserName, model.Password))
    {
        ModelState.AddModelError("", "The user name or password provided is incorrect.");
        return View(model);
    }
    FormsService.SignIn(model.UserName, model.RememberMe);
    return View(model);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
325
3
Gpt3D_Clone325_3.cs 1 15
Gpt3D_Clone325_3.cs 16 72
----------------------------------------

[RequireHttps] [HttpPost] public ActionResult LogOn (LogOnModel model, string returnUrl) {
    if (ModelState.IsValid) {
        UserProfile profile = UserProfile.GetUserProfile (model.UserName);
        if (profile != null && ! profile.IsLockedOut) {
            if (MembershipService.ValidateUser (model.UserName, model.Password)) {
                FormsService.SignIn (model.UserName, model.RememberMe);
            } else {
                ModelState.AddModelError ("", "The user name or password provided is incorrect.");
            }
        } else {
            ModelState.AddModelError ("", "The user account does not exist or has been locked out.");
        }
    }
    return View (model);
}
----------------------------------------

 [RequireHttps] [HttpPost] public ActionResult LogOn (LogOnModel model, string returnUrl) 
{
    if (ModelState.IsValid)
    {
        UserProfile profile = UserProfile.GetUserProfile(model.UserName);
        if (profile != null) 
        {
            if (profile.IsLockedOut)
            {
                ModelState.AddModelError("", "The user account has been locked out.");
                return View(model);
            }
            if (MembershipService.ValidateUser(model.UserName, model.Password))
            {
                FormsService.SignIn(model.UserName, model.RememberMe);
            }
            else
            {
                ModelState.AddModelError("", "The user name or password provided is incorrect.");
            }
        }
        else
        {
            ModelState.AddModelError("", "The user account does not exist.");
        }
    }
    
    return View(model);
    }
 [RequireHttps] [HttpPost] public ActionResult LogOn (LogOnModel model, string returnUrl) 
{
    if (!ModelState.IsValid)
        return View(model);
    var profile = UserProfile.GetUserProfile(model.UserName);
    if (profile is null || profile.IsLockedOut)
    {
        if (profile is null)
            ModelState.AddModelError("", "The user account does not exist.");
        else
            ModelState.AddModelError("", "The user account has been locked out.");
        return View(model);
    }
    if (!MembershipService.ValidateUser(model.UserName, model.Password))
    {
        ModelState.AddModelError("", "The user name or password provided is incorrect.");
        return View(model);
    }
    FormsService.SignIn(model.UserName, model.RememberMe);
    return View(model);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
325
4
Gpt3D_Clone325_4.cs 1 15
Gpt3D_Clone325_4.cs 16 47
----------------------------------------

[RequireHttps] [HttpPost] public ActionResult LogOn (LogOnModel model, string returnUrl) {
    if (ModelState.IsValid) {
        UserProfile profile = UserProfile.GetUserProfile (model.UserName);
        if (profile != null && ! profile.IsLockedOut) {
            if (MembershipService.ValidateUser (model.UserName, model.Password)) {
                FormsService.SignIn (model.UserName, model.RememberMe);
            } else {
                ModelState.AddModelError ("", "The user name or password provided is incorrect.");
            }
        } else {
            ModelState.AddModelError ("", "The user account does not exist or has been locked out.");
        }
    }
    return View (model);
}
----------------------------------------

 [RequireHttps] [HttpPost] public ActionResult LogOn (LogOnModel model, string returnUrl) 
{
    if (ModelState.IsValid) 
    {
        var profile = UserProfile.GetUserProfile(model.UserName);
        if (profile == null)
        {
            ModelState.AddModelError("", "The user account does not exist.");
            return View(model);
        }
        if (profile.IsLockedOut)
        {
            ModelState.AddModelError("", "The user account has been locked out.");
            return View(model);
        }
        if (!MembershipService.ValidateUser(model.UserName, model.Password))
        {
            ModelState.AddModelError("", "The user name or password provided is incorrect.");
            return View(model);
        } 
        else 
        {
            FormsService.SignIn(model.UserName, model.RememberMe);
        }
    }
    return View(model);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
325
5
Gpt3D_Clone325_5.cs 1 15
Gpt3D_Clone325_5.cs 16 41
----------------------------------------

[RequireHttps] [HttpPost] public ActionResult LogOn (LogOnModel model, string returnUrl) {
    if (ModelState.IsValid) {
        UserProfile profile = UserProfile.GetUserProfile (model.UserName);
        if (profile != null && ! profile.IsLockedOut) {
            if (MembershipService.ValidateUser (model.UserName, model.Password)) {
                FormsService.SignIn (model.UserName, model.RememberMe);
            } else {
                ModelState.AddModelError ("", "The user name or password provided is incorrect.");
            }
        } else {
            ModelState.AddModelError ("", "The user account does not exist or has been locked out.");
        }
    }
    return View (model);
}
----------------------------------------

 [RequireHttps] [HttpPost] public ActionResult LogOn (LogOnModel model, string returnUrl) 
{
    if (!ModelState.IsValid)
        return View(model);
    UserProfile profile = UserProfile.GetUserProfile(model.UserName);
    if (profile == null || profile.IsLockedOut)
    {
        if(profile == null)
            ModelState.AddModelError("", "The user account does not exist.");
        else
            ModelState.AddModelError("", "User account has been locked out.");
        return View(model);
    }
    if (MembershipService.ValidateUser(model.UserName, model.Password))
        FormsService.SignIn(model.UserName, model.RememberMe);
    else
        ModelState.AddModelError("", "The username or password provided is incorrect.");
    return View(model);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
325
8
Gpt3D_Clone325_8.cs 1 15
Gpt3D_Clone325_8.cs 16 44
----------------------------------------

[RequireHttps] [HttpPost] public ActionResult LogOn (LogOnModel model, string returnUrl) {
    if (ModelState.IsValid) {
        UserProfile profile = UserProfile.GetUserProfile (model.UserName);
        if (profile != null && ! profile.IsLockedOut) {
            if (MembershipService.ValidateUser (model.UserName, model.Password)) {
                FormsService.SignIn (model.UserName, model.RememberMe);
            } else {
                ModelState.AddModelError ("", "The user name or password provided is incorrect.");
            }
        } else {
            ModelState.AddModelError ("", "The user account does not exist or has been locked out.");
        }
    }
    return View (model);
}
----------------------------------------

[RequireHttps] [HttpPost] public ActionResult LogOn (LogOnModel model, string returnUrl) 
{
    if (ModelState.IsValid)
    {
        UserProfile profile = UserProfile.GetUserProfile(model.UserName);
        if (profile == null)
        {
            ModelState.AddModelError("", "The user account does not exist.");
            return View(model);
        }
        if (profile.IsLockedOut)
        {
            ModelState.AddModelError("", "The user account has been locked out.");
            return View(model);
        }
        if (!MembershipService.ValidateUser(model.UserName, model.Password))
        {
            ModelState.AddModelError("", "The user name or password provided is incorrect.");
            return View(model);
        }
        FormsService.SignIn(model.UserName, model.RememberMe);
    }
    return View(model);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
325
9
Gpt3D_Clone325_9.cs 1 15
Gpt3D_Clone325_9.cs 16 38
----------------------------------------

[RequireHttps] [HttpPost] public ActionResult LogOn (LogOnModel model, string returnUrl) {
    if (ModelState.IsValid) {
        UserProfile profile = UserProfile.GetUserProfile (model.UserName);
        if (profile != null && ! profile.IsLockedOut) {
            if (MembershipService.ValidateUser (model.UserName, model.Password)) {
                FormsService.SignIn (model.UserName, model.RememberMe);
            } else {
                ModelState.AddModelError ("", "The user name or password provided is incorrect.");
            }
        } else {
            ModelState.AddModelError ("", "The user account does not exist or has been locked out.");
        }
    }
    return View (model);
}
----------------------------------------

 [RequireHttps] [HttpPost] public ActionResult LogOn (LogOnModel model, string returnUrl) 
{
     if (!ModelState.IsValid)
    {
        ModelState.AddModelError("", "The user name or password provided is incorrect.");
        return View(model);
    }
    UserProfile profile = UserProfile.GetUserProfile(model.UserName);
    if (profile is null || profile.IsLockedOut)
    {
        ModelState.AddModelError("", "The user account does not exist or has been locked out");
        return View(model);
    }
    if (!MembershipService.ValidateUser(model.UserName, model.Password))
    {
        ModelState.AddModelError("", "The user name or password provided is incorrect.");
        return View(model);
    }
    FormsService.SignIn(model.UserName, model.RememberMe);
    return View(model);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
326
0
Gpt3D_Clone326_0.cs 1 10
Gpt3D_Clone326_0.cs 11 34
----------------------------------------

public static void MultiplyDigitArrays (int [] lhs, int [] rhs, int [] result) {
    var n1 = BigInteger.Parse (string.Join ("", lhs));
    var n2 = BigInteger.Parse (string.Join ("", rhs));
    var resultBi = BigInteger.Multiply (n1, n2);
    Array.Clear (result, 0, result.Length);
    var stResult = resultBi.ToString ().PadLeft (result.Length, '0');
    for (int i = 0; i < stResult.Length; i ++) {
        result [(stResult.Length - 1) - i] = int.Parse (stResult [i].ToString ());
    }
}
----------------------------------------

 public static void MultiplyDigitArrays (int [] lhs, int [] rhs, int [] result) 
{
    BigInteger n1 = 0; 
    BigInteger n2 = 0; 
    for (int i = 0; i < lhs.Length; i++) 
    {
        n1 *= 10;
        n1 += lhs[i];
    } 
    for (int i = 0; i < rhs.Length; i++) 
    {
        n2 *= 10;
        n2 += rhs[i];
    } 
    BigInteger resultBi = BigInteger.Multiply(n1, n2);
    Array.Clear(result, 0, result.Length);
    string stResult = resultBi.ToString().PadLeft(result.Length, '0');
    for (int i = 0; i < stResult.Length; i++) 
    {
        result[(stResult.Length - 1) - i] = int.Parse(stResult[i].ToString());
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
326
1
Gpt3D_Clone326_1.cs 1 10
Gpt3D_Clone326_1.cs 11 34
----------------------------------------

public static void MultiplyDigitArrays (int [] lhs, int [] rhs, int [] result) {
    var n1 = BigInteger.Parse (string.Join ("", lhs));
    var n2 = BigInteger.Parse (string.Join ("", rhs));
    var resultBi = BigInteger.Multiply (n1, n2);
    Array.Clear (result, 0, result.Length);
    var stResult = resultBi.ToString ().PadLeft (result.Length, '0');
    for (int i = 0; i < stResult.Length; i ++) {
        result [(stResult.Length - 1) - i] = int.Parse (stResult [i].ToString ());
    }
}
----------------------------------------

 public static void MultiplyDigitArrays (int [] lhs, int [] rhs, int [] result) 
{
    BigInteger n1 = 0;
    foreach (vardigit in lhs) 
    {
        n1 *= 10;
        n1 += digit;
    }
    BigInteger n2 = 0;
    foreach (var digit in rhs) 
    {
        n2 *= 10;
        n2 += digit;
    }
    BigInteger resultBi = BigInteger.Multiply(n1, n2);
    Array.Clear(result, 0, result.Length);
    string stResult = resultBi.ToString().PadLeft(result.Length, '0');
    for (int i = 0; i < stResult.Length; i++) 
    {
        result[(stResult.Length - 1) - i] = Int32.Parse(stResult[i].ToString());
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
326
2
Gpt3D_Clone326_2.cs 1 10
Gpt3D_Clone326_2.cs 11 32
----------------------------------------

public static void MultiplyDigitArrays (int [] lhs, int [] rhs, int [] result) {
    var n1 = BigInteger.Parse (string.Join ("", lhs));
    var n2 = BigInteger.Parse (string.Join ("", rhs));
    var resultBi = BigInteger.Multiply (n1, n2);
    Array.Clear (result, 0, result.Length);
    var stResult = resultBi.ToString ().PadLeft (result.Length, '0');
    for (int i = 0; i < stResult.Length; i ++) {
        result [(stResult.Length - 1) - i] = int.Parse (stResult [i].ToString ());
    }
}
----------------------------------------

 public static void MultiplyDigitArrays (int [] lhs, int [] rhs, int [] result) 
{
    BigInteger n1 = 0; 
    foreach (int digit in lhs) 
    {
        n1 = n1 * 10 + digit;
    }
    BigInteger n2 = 0;
    foreach (int digit in rhs) 
    {
        n2 = n2 * 10 + digit;
    } 
    BigInteger resultBi = BigInteger.Multiply(n1, n2);
    Array.Clear(result, 0, result.Length);
    string stResult = resultBi.ToString().PadLeft(result.Length, '0');
    for (int i = 0; i < stResult.Length; i++) 
    {
        result[(stResult.Length - 1) - i] = int.Parse(stResult[i].ToString());
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
326
3
Gpt3D_Clone326_3.cs 1 10
Gpt3D_Clone326_3.cs 11 29
----------------------------------------

public static void MultiplyDigitArrays (int [] lhs, int [] rhs, int [] result) {
    var n1 = BigInteger.Parse (string.Join ("", lhs));
    var n2 = BigInteger.Parse (string.Join ("", rhs));
    var resultBi = BigInteger.Multiply (n1, n2);
    Array.Clear (result, 0, result.Length);
    var stResult = resultBi.ToString ().PadLeft (result.Length, '0');
    for (int i = 0; i < stResult.Length; i ++) {
        result [(stResult.Length - 1) - i] = int.Parse (stResult [i].ToString ());
    }
}
----------------------------------------

 public static void MultiplyDigitArrays (int [] lhs, int [] rhs, int [] result) 
{
    BigInteger n1 = new BigInteger(lhs);
    BigInteger n2 = new BigInteger(rhs);
    BigInteger resultBi = BigInteger.Multiply(n1, n2);
    Array.Clear(result, 0, result.Length);
    string stResult = resultBi.ToString();
    if (stResult.Length < result.Length)
    {
        stResult = stResult.PadLeft(result.Length, '0');
    }
    for (int i = 0; i < stResult.Length; i++) 
    {
        result[(stResult.Length - 1) - i] = Int.Parse(stResult[i].ToString());
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
326
4
Gpt3D_Clone326_4.cs 1 10
Gpt3D_Clone326_4.cs 11 26
----------------------------------------

public static void MultiplyDigitArrays (int [] lhs, int [] rhs, int [] result) {
    var n1 = BigInteger.Parse (string.Join ("", lhs));
    var n2 = BigInteger.Parse (string.Join ("", rhs));
    var resultBi = BigInteger.Multiply (n1, n2);
    Array.Clear (result, 0, result.Length);
    var stResult = resultBi.ToString ().PadLeft (result.Length, '0');
    for (int i = 0; i < stResult.Length; i ++) {
        result [(stResult.Length - 1) - i] = int.Parse (stResult [i].ToString ());
    }
}
----------------------------------------

 public static void MultiplyDigitArrays (int [] lhs, int [] rhs, int [] result) 
{
    BigInteger n1 = BigInteger.Parse(string.Join("", lhs.Select(x => x.ToString())));
    BigInteger n2 = BigInteger.Parse(string.Join("", rhs.Select(x => x.ToString())));
    BigInteger resultBi = BigInteger.Multiply(n1, n2);
    Array.Clear(result, 0, result.Length);
    string stResult = resultBi.ToString();
    stResult = stResult.PadLeft(result.Length, '0');
    for (int i = 0; i < stResult.Length; i++) 
    {
        result[(stResult.Length - 1) - i] = Int.Parse(stResult[i].ToString());
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
326
8
Gpt3D_Clone326_8.cs 1 10
Gpt3D_Clone326_8.cs 11 24
----------------------------------------

public static void MultiplyDigitArrays (int [] lhs, int [] rhs, int [] result) {
    var n1 = BigInteger.Parse (string.Join ("", lhs));
    var n2 = BigInteger.Parse (string.Join ("", rhs));
    var resultBi = BigInteger.Multiply (n1, n2);
    Array.Clear (result, 0, result.Length);
    var stResult = resultBi.ToString ().PadLeft (result.Length, '0');
    for (int i = 0; i < stResult.Length; i ++) {
        result [(stResult.Length - 1) - i] = int.Parse (stResult [i].ToString ());
    }
}
----------------------------------------

 public static void MultiplyDigitArrays (int [] lhs, int [] rhs, int [] result) 
{
    int n1 = IntParse(lhs);
    int n2 = IntParse(rhs);
    int resultBi = n1 * n2;
    Array.Clear(result, 0, result.Length);
    string stResult = resultBi.ToString().PadLeft(result.Length, '0');
    for (int i = 0; i < stResult.Length; i++) 
    {
        result[(stResult.Length - 1) - i] = Int.Parse(stResult[i].ToString());
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
326
9
Gpt3D_Clone326_9.cs 1 10
Gpt3D_Clone326_9.cs 11 24
----------------------------------------

public static void MultiplyDigitArrays (int [] lhs, int [] rhs, int [] result) {
    var n1 = BigInteger.Parse (string.Join ("", lhs));
    var n2 = BigInteger.Parse (string.Join ("", rhs));
    var resultBi = BigInteger.Multiply (n1, n2);
    Array.Clear (result, 0, result.Length);
    var stResult = resultBi.ToString ().PadLeft (result.Length, '0');
    for (int i = 0; i < stResult.Length; i ++) {
        result [(stResult.Length - 1) - i] = int.Parse (stResult [i].ToString ());
    }
}
----------------------------------------

public static void MultiplyDigitArrays (int [] lhs, int [] rhs, int [] result) 
{
    BigInteger n1 = BigInteger.Parse(lhs.ToString());
    BigInteger n2 = BigInteger.Parse(rhs.ToString());
    BigInteger resultBi = BigInteger.Multiply(n1, n2);
    Array.Clear(result, 0, result.Length);
    string stResult = resultBi.ToString().PadLeft(result.Length, '0');
    for (int i = 0; i < stResult.Length; i++) 
    {
        result[stResult.Length - i - 1] = Int32.Parse(stResult[i].ToString());
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
328
0
Gpt3D_Clone328_0.cs 1 8
Gpt3D_Clone328_0.cs 9 26
----------------------------------------

private static void getDiscount (int [] items, int [] discount, ref int itemsbought, ref int discountItem) {
    for (int i = 0; itemsbought > items [i];) {
        discountItem = discount [i];
        i ++;
        if (i >= items.Length)
            break;
    }
}
----------------------------------------

  private static void getDiscount(int[] items, int[] discount, ref int itemsBought, ref int discountItem)
{
	int itemsIndex = 0;
	while (itemsIndex < items.Length)
	{
		if (itemsBought > items[itemsIndex])
		{
			discountItem = discount[itemsIndex];
			itemsIndex++;
		}
		else
		{
			break;
		}
	}
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
328
1
Gpt3D_Clone328_1.cs 1 8
Gpt3D_Clone328_1.cs 9 26
----------------------------------------

private static void getDiscount (int [] items, int [] discount, ref int itemsbought, ref int discountItem) {
    for (int i = 0; itemsbought > items [i];) {
        discountItem = discount [i];
        i ++;
        if (i >= items.Length)
            break;
    }
}
----------------------------------------

 private static void getDiscount(int[] items, int[] discount, ref int itemsBought, ref int discountItem)
{
    int i = 0;
	while(i < items.Length)
	{
		if(itemsBought > items[i])
		{
			discountItem = discount[i];
			i++;
		}
		else
		{
			break;
		}
	}
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
328
4
Gpt3D_Clone328_4.cs 1 8
Gpt3D_Clone328_4.cs 9 26
----------------------------------------

private static void getDiscount (int [] items, int [] discount, ref int itemsbought, ref int discountItem) {
    for (int i = 0; itemsbought > items [i];) {
        discountItem = discount [i];
        i ++;
        if (i >= items.Length)
            break;
    }
}
----------------------------------------

 private static void getDiscount(int[] items, int[] discount, ref int itemsBought, ref int discountItem)
{
	int index = 0;
	while(true)
	{
		if (itemsBought > items[index] && index < items.Length - 1)
		{
			discountItem = discount[index++];
		}
		else
		{
			break;
		}
	}
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
328
5
Gpt3D_Clone328_5.cs 1 8
Gpt3D_Clone328_5.cs 9 21
----------------------------------------

private static void getDiscount (int [] items, int [] discount, ref int itemsbought, ref int discountItem) {
    for (int i = 0; itemsbought > items [i];) {
        discountItem = discount [i];
        i ++;
        if (i >= items.Length)
            break;
    }
}
----------------------------------------

 private static void getDiscount(int[] items, int[] discount, ref int itemsBought, ref int discountItem)
{
	for(int i = 0; i < items.Length; i++)
	{
		if(itemsBought > items[i])
		{
			discountItem = discount[i];
			break;
		}
	}
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
328
6
Gpt3D_Clone328_6.cs 1 8
Gpt3D_Clone328_6.cs 9 19
----------------------------------------

private static void getDiscount (int [] items, int [] discount, ref int itemsbought, ref int discountItem) {
    for (int i = 0; itemsbought > items [i];) {
        discountItem = discount [i];
        i ++;
        if (i >= items.Length)
            break;
    }
}
----------------------------------------

  private static void getDiscount(int[] items, int[] discount, ref int itemsBought, ref int discountItem)
{
	int itemsIndex = 0;
	while (itemsIndex < items.Length && itemsBought > items[itemsIndex])
	{
		discountItem = discount[itemsIndex];
		itemsIndex++;
	}
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
328
7
Gpt3D_Clone328_7.cs 1 8
Gpt3D_Clone328_7.cs 9 21
----------------------------------------

private static void getDiscount (int [] items, int [] discount, ref int itemsbought, ref int discountItem) {
    for (int i = 0; itemsbought > items [i];) {
        discountItem = discount [i];
        i ++;
        if (i >= items.Length)
            break;
    }
}
----------------------------------------

 private static void getDiscount(int[] items, int[] discount, ref int itemsBought, ref int discountItem)
{
    int itemsIndex = 0;
    while (itemsBought > items[itemsIndex] && itemsIndex < items.Length)
    {
        discountItem = discount[itemsIndex];
        itemsIndex++;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
328
8
Gpt3D_Clone328_8.cs 1 8
Gpt3D_Clone328_8.cs 9 20
----------------------------------------

private static void getDiscount (int [] items, int [] discount, ref int itemsbought, ref int discountItem) {
    for (int i = 0; itemsbought > items [i];) {
        discountItem = discount [i];
        i ++;
        if (i >= items.Length)
            break;
    }
}
----------------------------------------

 private static void getDiscount(int[] items, int[] discount, ref int itemsBought, ref int discountItem) 
{ 
    for (int i = 0; i < items.Length; i++) 
    { 
        if (itemsBought > items[i]) 
        { 
            discountItem = discount[i]; 
        } 
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
328
9
Gpt3D_Clone328_9.cs 1 8
Gpt3D_Clone328_9.cs 9 17
----------------------------------------

private static void getDiscount (int [] items, int [] discount, ref int itemsbought, ref int discountItem) {
    for (int i = 0; itemsbought > items [i];) {
        discountItem = discount [i];
        i ++;
        if (i >= items.Length)
            break;
    }
}
----------------------------------------

  private static void getDiscount(int[] items, int[] discount, ref int itemsBought, ref int discountItem)
{
    for (int i = 0; itemsBought > items [i] && (i < items.Length); i++)
    {
        discountItem = discount[i];
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
333
0
Gpt3D_Clone333_0.cs 1 9
Gpt3D_Clone333_0.cs 10 33
----------------------------------------

protected void btnAdd_Click (object sender, EventArgs e) {
    for (Int32 i = lstAvailableColors.Items.Count; i >= 0; i --) {
        ListItem item = lstAvailableColors.Items [i];
        if (item.Selected) {
            lstSelectedColors.Items.Add (item);
            lstAvailableColors.Items.Remove (item);
        }
    }
}
----------------------------------------

  protected void btnAdd_Click (object sender, EventArgs e) 
{
    List<ListItem> MoveList = new List<ListItem>();
    for (Int32 i = 0; i < lstAvailableColors.Items.Count; i++)
    {
        ListItem item = lstAvailableColors.Items[i];
        if (item.Selected)
        {
            MoveList.Add(item);
        }
    }
    if (MoveList.Count > 0)
    {
        ListItem[] MoveListItems = MoveList.ToArray();
        foreach (ListItem moveItem in MoveListItems)
        {
            lstSelectedColors.Items.Add(moveItem);
            lstAvailableColors.Items.Remove(moveItem);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
333
1
Gpt3D_Clone333_1.cs 1 9
Gpt3D_Clone333_1.cs 10 25
----------------------------------------

protected void btnAdd_Click (object sender, EventArgs e) {
    for (Int32 i = lstAvailableColors.Items.Count; i >= 0; i --) {
        ListItem item = lstAvailableColors.Items [i];
        if (item.Selected) {
            lstSelectedColors.Items.Add (item);
            lstAvailableColors.Items.Remove (item);
        }
    }
}
----------------------------------------

 protected void btnAdd_Click (object sender, EventArgs e) {  
    List<int> lstSelectedItemsIndex = new List<int>();
    for (Int32 i = 0; i < lstAvailableColors.Items.Count; i++) {  
        ListItem item = lstAvailableColors.Items [i];
        if (item.Selected){
            lstSelectedItemsIndex.Add(i);
        }
    }
    lstSelectedItemsIndex.OrderByDescending(x => x).ToList().ForEach(index => {
        lstSelectedColors.Items.Add(lstAvailableColors.Items[index]);
        lstAvailableColors.Items.RemoveAt(index);    
    });
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
333
2
Gpt3D_Clone333_2.cs 1 9
Gpt3D_Clone333_2.cs 10 24
----------------------------------------

protected void btnAdd_Click (object sender, EventArgs e) {
    for (Int32 i = lstAvailableColors.Items.Count; i >= 0; i --) {
        ListItem item = lstAvailableColors.Items [i];
        if (item.Selected) {
            lstSelectedColors.Items.Add (item);
            lstAvailableColors.Items.Remove (item);
        }
    }
}
----------------------------------------

 protected void btnAdd_Click (object sender, EventArgs e) {  
        int listCount = lstAvailableColors.Items.Count; 
        ListItem item = null;
  
        while (listCount > 0) {
            listCount--;
            item = lstAvailableColors.Items[listCount];
            if (item.Selected) {
                lstSelectedColors.Items.Add(item);
                lstAvailableColors.Items.RemoveAt(listCount);
            }
        }  
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
333
3
Gpt3D_Clone333_3.cs 1 9
Gpt3D_Clone333_3.cs 10 25
----------------------------------------

protected void btnAdd_Click (object sender, EventArgs e) {
    for (Int32 i = lstAvailableColors.Items.Count; i >= 0; i --) {
        ListItem item = lstAvailableColors.Items [i];
        if (item.Selected) {
            lstSelectedColors.Items.Add (item);
            lstAvailableColors.Items.Remove (item);
        }
    }
}
----------------------------------------

  protected void btnAdd_Click (object sender, EventArgs e) {
    while (lstAvailableColors.Items.Count > 0) 
    {
        ListItem item = lstAvailableColors.Items[0];
        if (item.Selected) 
        {
            lstSelectedColors.Items.Add(item);
            lstAvailableColors.Items.RemoveAt(0);
        }
        else {
            lstAvailableColors.Items.RemoveAt(0);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
333
4
Gpt3D_Clone333_4.cs 1 9
Gpt3D_Clone333_4.cs 10 26
----------------------------------------

protected void btnAdd_Click (object sender, EventArgs e) {
    for (Int32 i = lstAvailableColors.Items.Count; i >= 0; i --) {
        ListItem item = lstAvailableColors.Items [i];
        if (item.Selected) {
            lstSelectedColors.Items.Add (item);
            lstAvailableColors.Items.Remove (item);
        }
    }
}
----------------------------------------

protected void btnAdd_Click (object sender, EventArgs e) {
    while (lstAvailableColors.Items.Count > 0)
    {
        ListItem item = lstAvailableColors.Items[lstAvailableColors.Items.Count - 1];
        if (item.Selected)
        {
            lstSelectedColors.Items.Add(item);
            lstAvailableColors.Items.RemoveAt(lstAvailableColors.Items.Count - 1);
        }
        else
        {
            lstAvailableColors.Items.RemoveAt(lstAvailableColors.Items.Count - 1);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
333
8
Gpt3D_Clone333_8.cs 1 9
Gpt3D_Clone333_8.cs 10 23
----------------------------------------

protected void btnAdd_Click (object sender, EventArgs e) {
    for (Int32 i = lstAvailableColors.Items.Count; i >= 0; i --) {
        ListItem item = lstAvailableColors.Items [i];
        if (item.Selected) {
            lstSelectedColors.Items.Add (item);
            lstAvailableColors.Items.Remove (item);
        }
    }
}
----------------------------------------

protected void btnAdd_Click (object sender, EventArgs e) {  
    var listItems = lstAvailableColors.Items.Cast<ListItem>()
        .Where(item => item.Selected)
        .Reverse()
        .ToList();
        
    foreach (var listItem in listItems)
    {
        lstSelectedColors.Items.Add(listItem);
        lstAvailableColors.Items.Remove(listItem);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
334
0
Gpt3D_Clone334_0.cs 1 11
Gpt3D_Clone334_0.cs 12 36
----------------------------------------

public static bool init_access (string file_path) {
    if (File.Exists (file_path)) {
        int counter = 0;
        foreach (string line in File.ReadAllLines (file_path)) {
            counter ++;
            Console.WriteLine (counter + " " + line);
        }
        return true;
    }
    return false;
}
----------------------------------------

 public static bool init_access (string file_path) 
{
    if(!File.Exists(file_path))
        return false;
    try
    {
        using(StreamReader sr = File.OpenText(file_path))
        {
            string currentLine;
            int lineCount = 0;
            while((currentLine = sr.ReadLine()) != null)
            { 
                Console.WriteLine(string.Format("{0} {1}", ++lineCount, currentLine));
            }
        }
    }
    catch
    {
        return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
334
2
Gpt3D_Clone334_2.cs 1 11
Gpt3D_Clone334_2.cs 12 30
----------------------------------------

public static bool init_access (string file_path) {
    if (File.Exists (file_path)) {
        int counter = 0;
        foreach (string line in File.ReadAllLines (file_path)) {
            counter ++;
            Console.WriteLine (counter + " " + line);
        }
        return true;
    }
    return false;
}
----------------------------------------

 public static bool init_access (string file_path) 
{
    if (File.Exists (file_path)) {
        int counter = 0;
        using (StreamReader sr = new StreamReader(file_path)) 
        {
            int lineNumber = 0;
            string line;
            while ((line = sr.ReadLine()) != null) 
            {
                Console.WriteLine (++counter + " " + line);
            }
        }
        return true;
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
334
3
Gpt3D_Clone334_3.cs 1 11
Gpt3D_Clone334_3.cs 12 30
----------------------------------------

public static bool init_access (string file_path) {
    if (File.Exists (file_path)) {
        int counter = 0;
        foreach (string line in File.ReadAllLines (file_path)) {
            counter ++;
            Console.WriteLine (counter + " " + line);
        }
        return true;
    }
    return false;
}
----------------------------------------

 public static bool init_access (string file_path) 
{
    if(!File.Exists(file_path))
    {
        return false;
    }
    var lineCount = 0;
    var xDoc = XDocument.Load(file_path);
    var lines = xDoc.Descendants("line");
    foreach (var line in lines)
    { 
        var lineText = line.Value;
        Console.WriteLine(lineCount + " " + lineText);
        lineCount++;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
334
5
Gpt3D_Clone334_5.cs 1 11
Gpt3D_Clone334_5.cs 12 30
----------------------------------------

public static bool init_access (string file_path) {
    if (File.Exists (file_path)) {
        int counter = 0;
        foreach (string line in File.ReadAllLines (file_path)) {
            counter ++;
            Console.WriteLine (counter + " " + line);
        }
        return true;
    }
    return false;
}
----------------------------------------

 public static bool init_access (string file_path) 
{
    if (!File.Exists(file_path))
    {
        return false;
    }        
    int lineCounter = 0;
    using (StreamReader sr = File.OpenText(file_path)) 
    {
        string s = "";
        while ((s = sr.ReadLine()) != null) 
        {
            Console.WriteLine((++lineCounter).ToString() + " " + s);
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
334
6
Gpt3D_Clone334_6.cs 1 11
Gpt3D_Clone334_6.cs 12 30
----------------------------------------

public static bool init_access (string file_path) {
    if (File.Exists (file_path)) {
        int counter = 0;
        foreach (string line in File.ReadAllLines (file_path)) {
            counter ++;
            Console.WriteLine (counter + " " + line);
        }
        return true;
    }
    return false;
}
----------------------------------------

 public static bool init_access (string file_path) 
{
    if (!File.Exists(file_path))
    {
        return false;
    }        
    int lineCounter = 1;
    StreamReader sr = new StreamReader(file_path);
    while (sr.EndOfStream == false)
    {
        Console.WriteLine(lineCounter++ + " " + sr.ReadLine());
    }
    sr.Close();
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
334
7
Gpt3D_Clone334_7.cs 1 11
Gpt3D_Clone334_7.cs 12 27
----------------------------------------

public static bool init_access (string file_path) {
    if (File.Exists (file_path)) {
        int counter = 0;
        foreach (string line in File.ReadAllLines (file_path)) {
            counter ++;
            Console.WriteLine (counter + " " + line);
        }
        return true;
    }
    return false;
}
----------------------------------------

 public static bool init_access (string file_path) 
{
    if (!File.Exists(file_path)) {
        return false;
    }
    int lineNum = 1;
    string[] lines = File.ReadAllLines(file_path);
    foreach (string line in lines) 
    {
        Console.WriteLine($"{lineNum}: {line}");
        lineNum++;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
336
13
Gpt3D_Clone336_13.cs 1 13
Gpt3D_Clone336_13.cs 14 28
----------------------------------------

protected void DiasShow () {
    var getFiles = Directory.GetFiles (HttpContext.Current.Server.MapPath ("/CSS/Design/Page_Design/Dias/1920x1080/"));
    var random = RandomiseList (getFiles);
    var txt = new StringBuilder ();
    foreach (var randomFileName in random) {
        var fileType = System.IO.Path.GetExtension (randomFileName).ToUpper ();
        if ((fileType == ".JPG") || (fileType == ".JPEG")) {
            var imageName = System.IO.Path.GetFileName (randomFileName);
            txt.Append ("<img src=\"CSS/Design/Page_Design/Dias/1920x1080/" + imageName + "\" />");
        }
    }
    lbl_Dias.Text += txt.ToString ();
}
----------------------------------------

  protected void DiasShow() { 
                var getFiles =  Directory.GetFiles(HttpContext.Current.Server.MapPath("/CSS/Design/Page_Design/Dias/1920x1080/")); 
                var randomFileNames = GetRandomFiles(getFiles); 
                string outputString = ""; 
                foreach (var randomFileName in randomFileNames) { 
                    if (randomFileName.EndsWith("jpg") || randomFileName.EndsWith("jpeg")) { 
                        string imageName = System.IO.Path.GetFileName(randomFileName); 
                        outputString += "<img src=\"CSS/Design/Page_Design/Dias/1920x1080/" + imageName + "\" />"; 
                    } 
                } 
                lbl_Dias.Text += outputString; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
336
14
Gpt3D_Clone336_14.cs 1 13
Gpt3D_Clone336_14.cs 14 48
----------------------------------------

protected void DiasShow () {
    var getFiles = Directory.GetFiles (HttpContext.Current.Server.MapPath ("/CSS/Design/Page_Design/Dias/1920x1080/"));
    var random = RandomiseList (getFiles);
    var txt = new StringBuilder ();
    foreach (var randomFileName in random) {
        var fileType = System.IO.Path.GetExtension (randomFileName).ToUpper ();
        if ((fileType == ".JPG") || (fileType == ".JPEG")) {
            var imageName = System.IO.Path.GetFileName (randomFileName);
            txt.Append ("<img src=\"CSS/Design/Page_Design/Dias/1920x1080/" + imageName + "\" />");
        }
    }
    lbl_Dias.Text += txt.ToString ();
}
----------------------------------------

  protected void DiasShow()
    {
                    string folderPath = HttpContext.Current.Server.MapPath("/CSS/Design/Page_Design/Dias/1920x1080/");
                    string[] filesInFolder = Directory.GetFiles(folderPath);
                    List<string> randomizedFileList = GenerateRandomizedList(filesInFolder);
                    StringBuilder outputText = new StringBuilder();
                    foreach (string fileName in randomizedFileList)
                    {
                        if (fileName.EndsWith(".jpg") || fileName.EndsWith(".jpeg"))
                        {
                            outputText.Append("<img src=\"CSS/Design/Page_Design/Dias/1920x1080/" + System.IO.Path.GetFileName(fileName) + "\" />");
                        }
                    }
                    lbl_Dias.Text += outputText.ToString();
                }
                List<string> GenerateRandomizedList(string[] source)
                {
                    List<string> randomizedList = new List<string>(source);
                    Random random = new Random();
                    int index = randomizedList.Count;
                    while (index > 1)
                    {
                        index--;
                        int index2 = random.Next(index + 1);
                        string value = randomizedList[index];
                        randomizedList[index] = randomizedList[index2];
                        randomizedList[index2] = value;
                    }
                    return randomizedList;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
336
15
Gpt3D_Clone336_15.cs 1 13
Gpt3D_Clone336_15.cs 14 52
----------------------------------------

protected void DiasShow () {
    var getFiles = Directory.GetFiles (HttpContext.Current.Server.MapPath ("/CSS/Design/Page_Design/Dias/1920x1080/"));
    var random = RandomiseList (getFiles);
    var txt = new StringBuilder ();
    foreach (var randomFileName in random) {
        var fileType = System.IO.Path.GetExtension (randomFileName).ToUpper ();
        if ((fileType == ".JPG") || (fileType == ".JPEG")) {
            var imageName = System.IO.Path.GetFileName (randomFileName);
            txt.Append ("<img src=\"CSS/Design/Page_Design/Dias/1920x1080/" + imageName + "\" />");
        }
    }
    lbl_Dias.Text += txt.ToString ();
}
----------------------------------------

    
  protected void DiasShow()
    {
                    string folderPath = HttpContext.Current.Server.MapPath("/CSS/Design/Page_Design/Dias/1920x1080/");
                    string[] filesInFolder = Directory.GetFiles(folderPath);
                    List<string> randomizedFileList = RandomizeList(filesInFolder);
                    string outputHTML = GenerateHTML(randomizedFileList);
                    lbl_Dias.Text += outputHTML;
                }
                List<string> RandomizeList(string[] source)
                {
                    List<string> randomizedList = new List<string>(source);
                    Random random = new Random();
                    int index = randomizedList.Count;
                    while (index > 1)
                    {
                        index--;
                        int index2 = random.Next(index + 1);
                        string value = randomizedList[index];
                        randomizedList[index] = randomizedList[index2];
                        randomizedList[index2] = value;
                    }
                    return randomizedList;
                }
                string GenerateHTML(List<string> fileNames)
                {
                    StringBuilder outputHTML = new StringBuilder();
                    foreach (string fileName in fileNames)
                    {
                        if (fileName.EndsWith(".jpg") || fileName.EndsWith(".jpeg"))
                        {
                            outputHTML.Append("<img src=\"CSS/Design/Page_Design/Dias/1920x1080/" + System.IO.Path.GetFileName(fileName) + "\" />");
                        }
                    }
                    return outputHTML.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
336
16
Gpt3D_Clone336_16.cs 1 13
Gpt3D_Clone336_16.cs 14 52
----------------------------------------

protected void DiasShow () {
    var getFiles = Directory.GetFiles (HttpContext.Current.Server.MapPath ("/CSS/Design/Page_Design/Dias/1920x1080/"));
    var random = RandomiseList (getFiles);
    var txt = new StringBuilder ();
    foreach (var randomFileName in random) {
        var fileType = System.IO.Path.GetExtension (randomFileName).ToUpper ();
        if ((fileType == ".JPG") || (fileType == ".JPEG")) {
            var imageName = System.IO.Path.GetFileName (randomFileName);
            txt.Append ("<img src=\"CSS/Design/Page_Design/Dias/1920x1080/" + imageName + "\" />");
        }
    }
    lbl_Dias.Text += txt.ToString ();
}
----------------------------------------

    
  protected void DiasShow()
    {
                    string folderPath = HttpContext.Current.Server.MapPath("/CSS/Design/Page_Design/Dias/1920x1080/");
                    string[] filesInFolder = Directory.GetFiles(folderPath);
                    List<string> randomizedFileList = RandomizeList(filesInFolder);
                    string outputHTML = GenerateHTML(randomizedFileList);
                    lbl_Dias.Text += outputHTML;
                }
                List<string> RandomizeList(string[] source)
                {
                    List<string> randomizedList = new List<string>(source);
                    Random random = new Random();
                    int index = randomizedList.Count;
                    while (index > 1)
                    {
                        index--;
                        int index2 = random.Next(index + 1);
                        string value = randomizedList[index];
                        randomizedList[index] = randomizedList[index2];
                        randomizedList[index2] = value;
                    }
                    return randomizedList;
                }
                string GenerateHTML(List<string> fileNames)
                {
                    StringBuilder outputHTML = new StringBuilder();
                    foreach (string fileName in fileNames)
                    {
                        if (fileName.EndsWith(".jpg") || fileName.EndsWith(".jpeg"))
                        {
                            outputHTML.Append("<img src=\"CSS/Design/Page_Design/Dias/1920x1080/" + System.IO.Path.GetFileName(fileName) + "\" />");
                        }
                    }
                    return outputHTML.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
336
17
Gpt3D_Clone336_17.cs 1 13
Gpt3D_Clone336_17.cs 14 35
----------------------------------------

protected void DiasShow () {
    var getFiles = Directory.GetFiles (HttpContext.Current.Server.MapPath ("/CSS/Design/Page_Design/Dias/1920x1080/"));
    var random = RandomiseList (getFiles);
    var txt = new StringBuilder ();
    foreach (var randomFileName in random) {
        var fileType = System.IO.Path.GetExtension (randomFileName).ToUpper ();
        if ((fileType == ".JPG") || (fileType == ".JPEG")) {
            var imageName = System.IO.Path.GetFileName (randomFileName);
            txt.Append ("<img src=\"CSS/Design/Page_Design/Dias/1920x1080/" + imageName + "\" />");
        }
    }
    lbl_Dias.Text += txt.ToString ();
}
----------------------------------------

 protected void DiasShow() {
                    var getFiles = Directory.GetFiles(HttpContext.Current.Server.MapPath("/CSS/Design/Page_Design/Dias/1920x1080/"));
                    var randomisedFiles = ShuffleSeededRandom(getFiles);
                    StringBuilder text = new StringBuilder();
                    foreach (string randomFile in randomisedFiles) {
                        string fileExtension = System.IO.Path.GetExtension(randomFile).ToUpper();
                        if (fileExtension == ".JPG" || fileExtension == ".JPEG") {
                            string fileName = System.IO.Path.GetFileName(randomFile);
                            text.Append("<img src=\"CSS/Design/Page_Design/Dias/1920x1080/" + fileName + "\" />");
                        }
                    }
                    lbl_Dias.Text += text.ToString();
                }
                public string[] ShuffleSeededRandom(string[] arrayToShuffle) {
                    Random random = new Random();
                    string[] shuffledArray = arrayToShuffle.OrderBy(x => random.Next()).ToArray();
                    return shuffledArray;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
336
2
Gpt3D_Clone336_2.cs 1 13
Gpt3D_Clone336_2.cs 14 45
----------------------------------------

protected void DiasShow () {
    var getFiles = Directory.GetFiles (HttpContext.Current.Server.MapPath ("/CSS/Design/Page_Design/Dias/1920x1080/"));
    var random = RandomiseList (getFiles);
    var txt = new StringBuilder ();
    foreach (var randomFileName in random) {
        var fileType = System.IO.Path.GetExtension (randomFileName).ToUpper ();
        if ((fileType == ".JPG") || (fileType == ".JPEG")) {
            var imageName = System.IO.Path.GetFileName (randomFileName);
            txt.Append ("<img src=\"CSS/Design/Page_Design/Dias/1920x1080/" + imageName + "\" />");
        }
    }
    lbl_Dias.Text += txt.ToString ();
}
----------------------------------------

  protected void DiasShow () { 
                    var getFiles = Directory.GetFiles (HttpContext.Current.Server.MapPath ("/CSS/Design/Page_Design/Dias/1920x1080/")); 
                    var randomFileNameList = GetRandomFileNames(getFiles); 
                    StringBuilder outputText = new StringBuilder();
                    foreach (var randomFileName in randomFileNameList) { 
                        string fileType = System.IO.Path.GetExtension(randomFileName).ToUpper(); 
                        if ((fileType.Equals(".JPG") || fileType.Equals(".JPEG")) && !string.IsNullOrEmpty (fileType)) { 
                            string imageName = System.IO.Path.GetFileName(randomFileName); 
                            outputText.Append($"<img src=\"CSS/Design/Page_Design/Dias/1920x1080/{imageName}\" />"); 
                        } 
                    } 
                    lbl_Dias.Text += outputText.ToString(); 
                } 
                
                IEnumerable<T> GetRandomFileNames<T>(IEnumerable<T> source)
                {
                    Random random = new Random();
                    List<T> randomFileNames = source.ToList();
                    int index = randomFileNames.Count;
                    while (index > 1)
                    {
                        index--;
                        int index2 = random.Next(index + 1);
                        T tmpValue = randomFileNames[index];
                        randomFileNames[index] = randomFileNames[index2];
                        randomFileNames[index2] = tmpValue;
                    }
                    return randomFileNames;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
336
3
Gpt3D_Clone336_3.cs 1 13
Gpt3D_Clone336_3.cs 14 52
----------------------------------------

protected void DiasShow () {
    var getFiles = Directory.GetFiles (HttpContext.Current.Server.MapPath ("/CSS/Design/Page_Design/Dias/1920x1080/"));
    var random = RandomiseList (getFiles);
    var txt = new StringBuilder ();
    foreach (var randomFileName in random) {
        var fileType = System.IO.Path.GetExtension (randomFileName).ToUpper ();
        if ((fileType == ".JPG") || (fileType == ".JPEG")) {
            var imageName = System.IO.Path.GetFileName (randomFileName);
            txt.Append ("<img src=\"CSS/Design/Page_Design/Dias/1920x1080/" + imageName + "\" />");
        }
    }
    lbl_Dias.Text += txt.ToString ();
}
----------------------------------------

    
  protected void DiasShow()
    {
                    string folderPath = HttpContext.Current.Server.MapPath("/CSS/Design/Page_Design/Dias/1920x1080/");
                    string[] filesInFolder = Directory.GetFiles(folderPath);
                    List<string> randomizedFileList = RandomizeList(filesInFolder);
                    string outputHTML = GenerateHTML(randomizedFileList);
                    lbl_Dias.Text += outputHTML;
                }
                List<string> RandomizeList(string[] source)
                {
                    List<string> randomizedList = new List<string>(source);
                    Random random = new Random();
                    int index = randomizedList.Count;
                    while (index > 1)
                    {
                        index--;
                        int index2 = random.Next(index + 1);
                        string value = randomizedList[index];
                        randomizedList[index] = randomizedList[index2];
                        randomizedList[index2] = value;
                    }
                    return randomizedList;
                }
                string GenerateHTML(List<string> fileNames)
                {
                    StringBuilder outputHTML = new StringBuilder();
                    foreach (string fileName in fileNames)
                    {
                        if (fileName.EndsWith(".jpg") || fileName.EndsWith(".jpeg"))
                        {
                            outputHTML.Append("<img src=\"CSS/Design/Page_Design/Dias/1920x1080/" + System.IO.Path.GetFileName(fileName) + "\" />");
                        }
                    }
                    return outputHTML.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
336
4
Gpt3D_Clone336_4.cs 1 13
Gpt3D_Clone336_4.cs 14 48
----------------------------------------

protected void DiasShow () {
    var getFiles = Directory.GetFiles (HttpContext.Current.Server.MapPath ("/CSS/Design/Page_Design/Dias/1920x1080/"));
    var random = RandomiseList (getFiles);
    var txt = new StringBuilder ();
    foreach (var randomFileName in random) {
        var fileType = System.IO.Path.GetExtension (randomFileName).ToUpper ();
        if ((fileType == ".JPG") || (fileType == ".JPEG")) {
            var imageName = System.IO.Path.GetFileName (randomFileName);
            txt.Append ("<img src=\"CSS/Design/Page_Design/Dias/1920x1080/" + imageName + "\" />");
        }
    }
    lbl_Dias.Text += txt.ToString ();
}
----------------------------------------

  protected void DiasShow()
    {
                    string folderPath = HttpContext.Current.Server.MapPath("/CSS/Design/Page_Design/Dias/1920x1080/");
                    string[] filesInFolder = Directory.GetFiles(folderPath);
                    List<string> randomizedFileList = GenerateRandomizedList(filesInFolder);
                    StringBuilder outputText = new StringBuilder();
                    foreach (string fileName in randomizedFileList)
                    {
                        if (fileName.EndsWith(".jpg") || fileName.EndsWith(".jpeg"))
                        {
                            outputText.Append("<img src=\"CSS/Design/Page_Design/Dias/1920x1080/" + System.IO.Path.GetFileName(fileName) + "\" />");
                        }
                    }
                    lbl_Dias.Text += outputText.ToString();
                }
                List<string> GenerateRandomizedList(string[] source)
                {
                    List<string> randomizedList = new List<string>(source);
                    Random random = new Random();
                    int index = randomizedList.Count;
                    while (index > 1)
                    {
                        index--;
                        int index2 = random.Next(index + 1);
                        string value = randomizedList[index];
                        randomizedList[index] = randomizedList[index2];
                        randomizedList[index2] = value;
                    }
                    return randomizedList;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
336
6
Gpt3D_Clone336_6.cs 1 13
Gpt3D_Clone336_6.cs 14 48
----------------------------------------

protected void DiasShow () {
    var getFiles = Directory.GetFiles (HttpContext.Current.Server.MapPath ("/CSS/Design/Page_Design/Dias/1920x1080/"));
    var random = RandomiseList (getFiles);
    var txt = new StringBuilder ();
    foreach (var randomFileName in random) {
        var fileType = System.IO.Path.GetExtension (randomFileName).ToUpper ();
        if ((fileType == ".JPG") || (fileType == ".JPEG")) {
            var imageName = System.IO.Path.GetFileName (randomFileName);
            txt.Append ("<img src=\"CSS/Design/Page_Design/Dias/1920x1080/" + imageName + "\" />");
        }
    }
    lbl_Dias.Text += txt.ToString ();
}
----------------------------------------

    
  protected void DiasShow () {
                    var getFiles = Directory.GetFiles (HttpContext.Current.Server.MapPath ("/CSS/Design/Page_Design/Dias/1920x1080/"));
                    var randomFiles = GetRandomizedFiles (getFiles);
                    var htmlContent = new StringBuilder ();
                    string[] acceptedFileTypes = { ".jpg", ".jpeg" };
                    foreach (var randomFileName in randomFiles) {
                        string fileType = System.IO.Path.GetExtension(randomFileName).ToUpper();
                        if (acceptedFileTypes.Contains(fileType)) {
                            string imageName = System.IO.Path.GetFileName(randomFileName);
                            htmlContent.Append($"<img src=\"CSS/Design/Page_Design/Dias/1920x1080/{imageName}\" />");
                        }
                    }
                    lbl_Dias.Text += htmlContent.ToString();
                }
                IEnumerable<T> GetRandomizedFiles<T>(IEnumerable<T> source)
                {
                    Random random = new Random();
                    List<T> randomizedList = source.ToList();
                    int index = randomizedList.Count;
                    while (index > 1)
                    {
                        index--;
                        int index2 = random.Next(index + 1);
                        T tempValue = randomizedList[index];
                        randomizedList[index] = randomizedList[index2];
                        randomizedList[index2] = tempValue;
                    }
                    return randomizedList;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
336
7
Gpt3D_Clone336_7.cs 1 13
Gpt3D_Clone336_7.cs 14 45
----------------------------------------

protected void DiasShow () {
    var getFiles = Directory.GetFiles (HttpContext.Current.Server.MapPath ("/CSS/Design/Page_Design/Dias/1920x1080/"));
    var random = RandomiseList (getFiles);
    var txt = new StringBuilder ();
    foreach (var randomFileName in random) {
        var fileType = System.IO.Path.GetExtension (randomFileName).ToUpper ();
        if ((fileType == ".JPG") || (fileType == ".JPEG")) {
            var imageName = System.IO.Path.GetFileName (randomFileName);
            txt.Append ("<img src=\"CSS/Design/Page_Design/Dias/1920x1080/" + imageName + "\" />");
        }
    }
    lbl_Dias.Text += txt.ToString ();
}
----------------------------------------

  protected void DiasShow() { 
                    var getFiles =  Directory.GetFiles(HttpContext.Current.Server.MapPath("/CSS/Design/Page_Design/Dias/1920x1080/")); 
                    var randomFileNames = RandomizeFileNames(getFiles); 
                    StringBuilder html = new StringBuilder(); 
                    string[] acceptedFormats = {".jpg", ".jpeg"}; 
                    foreach (var randomFileName in randomFileNames) { 
                        string fileType = System.IO.Path.GetExtension(randomFileName).ToUpper(); 
                        if (acceptedFormats.Contains(fileType)) { 
                            string imageName = System.IO.Path.GetFileName(randomFileName); 
                            html.Append($"<img src=\"CSS/Design/Page_Design/Dias/1920x1080/{imageName}\" />"); 
                        } 
                    } 
                    lbl_Dias.Text += html.ToString(); 
                } 
                IEnumerable<T> RandomizeFileNames<T>(IEnumerable<T> source)
                {
                    Random random = new Random();
                    List<T> randomizedList = source.ToList();
                    int index = randomizedList.Count;
                    while (index > 1)
                    {
                        index--;
                        int index2 = random.Next(index + 1);
                        T tempValue = randomizedList[index];
                        randomizedList[index] = randomizedList[index2];
                        randomizedList[index2] = tempValue;
                    }
                    return randomizedList;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
336
8
Gpt3D_Clone336_8.cs 1 13
Gpt3D_Clone336_8.cs 14 46
----------------------------------------

protected void DiasShow () {
    var getFiles = Directory.GetFiles (HttpContext.Current.Server.MapPath ("/CSS/Design/Page_Design/Dias/1920x1080/"));
    var random = RandomiseList (getFiles);
    var txt = new StringBuilder ();
    foreach (var randomFileName in random) {
        var fileType = System.IO.Path.GetExtension (randomFileName).ToUpper ();
        if ((fileType == ".JPG") || (fileType == ".JPEG")) {
            var imageName = System.IO.Path.GetFileName (randomFileName);
            txt.Append ("<img src=\"CSS/Design/Page_Design/Dias/1920x1080/" + imageName + "\" />");
        }
    }
    lbl_Dias.Text += txt.ToString ();
}
----------------------------------------

 protected void DiasShow() { 
                    var getFiles =  Directory.GetFiles(HttpContext.Current.Server.MapPath("/CSS/Design/Page_Design/Dias/1920x1080/")); 
                    var randomisedFileNames = RandomisedFiles(getFiles); 
                    StringBuilder outputHTML = new StringBuilder(); 
                    foreach (var randomFileName in randomisedFileNames) { 
                        string fileType = System.IO.Path.GetExtension(randomFileName).ToUpper(); 
                        if (fileType == ".JPG" || fileType == ".JPEG") { 
                            string imageName = System.IO.Path.GetFileName(randomFileName); 
                            outputHTML.Append($"<img src=\"CSS/Design/Page_Design/Dias/1920x1080/{imageName}\" />"); 
                        } 
                    } 
                    lbl_Dias.Text += outputHTML.ToString(); 
                }
                IEnumerable<T> RandomisedFiles<T>(IEnumerable<T> source)
                {
                    Random random = new Random();
                    List<T> randomisedFiles = source.ToList();
                    int index = randomisedFiles.Count;
                    while (index > 1)
                    {
                        index--;
                        int index2 = random.Next(index + 1);
                        T tmpValue = randomisedFiles[index];
                        randomisedFiles[index] = randomisedFiles[index2];
                        randomisedFiles[index2] = tmpValue;
                    }
                    return randomisedFiles;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
339
0
Gpt3D_Clone339_0.cs 1 22
Gpt3D_Clone339_0.cs 23 231
----------------------------------------

public static unsafe Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) {
    var result = new Bitmap (srcBitmap.Width, srcBitmap.Height, targetPixelFormat);
    var bmpBounds = new Rectangle (0, 0, srcBitmap.Width, srcBitmap.Height);
    var srcData = srcBitmap.LockBits (bmpBounds, ImageLockMode.ReadOnly, srcBitmap.PixelFormat);
    var destData = result.LockBits (bmpBounds, ImageLockMode.ReadOnly, targetPixelFormat);
    var srcDataPtr = (byte *) srcData.Scan0;
    var destDataPtr = (byte *) destData.Scan0;
    try {
        for (int y = 0; y <= srcData.Height - 1; y ++) {
            for (int x = 0; x <= srcData.Width - 1; x ++) {
                var position = srcData.Stride * y + 4 * x;
                var position2 = destData.Stride * y + 4 * x;
                memcpy (destDataPtr + position2, srcDataPtr + position, (UIntPtr) 4);
            }
        }
    }
    finally {
        srcBitmap.UnlockBits (srcData);
        result.UnlockBits (destData);
    }
    return result;
}
----------------------------------------

  public static Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) 
    { 
        var width = srcBitmap.Width; 
        var height = srcBitmap.Height; 
        
        var result = new Bitmap(width, height, targetPixelFormat); 
        var bmpBounds = new Rectangle(0, 0, width, height); 
       
        for (int y = 0; y < height; y++) 
        { 
            for (int x = 0; x < width; x++) 
            { 
                Color srcPixel = srcBitmap.GetPixel(x, y); 
                result.SetPixel(x, y, Color.FromArgb(srcPixel.A, srcPixel.R, srcPixel.G, srcPixel.B)); 
            } 
        } 
        
        return result; 
    }
    
  public static Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) 
    { 
        var width = srcBitmap.Width; 
        var height = srcBitmap.Height; 
        
        var result = new Bitmap(width, height, targetPixelFormat); 
        var bmpBounds = new Rectangle(0, 0, width, height); 
       
        var srcData = srcBitmap.LockBits(bmpBounds, ImageLockMode.ReadOnly, srcBitmap.PixelFormat); 
        var destData = result.LockBits(bmpBounds, ImageLockMode.ReadWrite, targetPixelFormat); 
        int bytesPerPixel = Bitmap.GetPixelFormatSize(srcBitmap.PixelFormat) / 8; 
        int size = srcData.Stride * srcData.Height; 
        byte[] data = new byte[size]; 
        
        Marshal.Copy(srcData.Scan0,data,0,size); 
  
        for (int y = 0; y < height; y++) 
        { 
            for (int x = 0; x < width; x++) 
            { 
                int index = y * srcData.Stride + x * bytesPerPixel; 
                int index2 = y * destData.Stride + x * bytesPerPixel; 
                    
                destData.Scan0[index2] = data[index]; 
            } 
        } 
        
        srcBitmap.UnlockBits(srcData); 
        result.UnlockBits(destData); 
        
        return result; 
    }
    
 public static Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) 
    { 
        var width = srcBitmap.Width; 
        var height = srcBitmap.Height; 
        
        var result = new Bitmap(width, height, targetPixelFormat); 
        var bmpBounds = new Rectangle(0, 0, width, height); 
       
        LockBitmap srcLockBitmap = new LockBitmap(srcBitmap); 
        LockBitmap destLockBitmap = new LockBitmap(result); 
       
        srcLockBitmap.LockBits(); 
        destLockBitmap.LockBits(); 
       
        for (int y = 0; y < height; y++) 
        { 
            for (int x = 0; x < width; x++) 
            { 
                destLockBitmap.SetPixel(x, y, srcLockBitmap.GetPixel(x, y)); 
            } 
        } 
       
        srcLockBitmap.UnlockBits(); 
        destLockBitmap.UnlockBits(); 
       
        return result; 
    }
    
 public static Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) 
    { 
        var width = srcBitmap.Width; 
        var height = srcBitmap.Height; 
        
        var result = new Bitmap(width, height, targetPixelFormat); 
        var bmpBounds = new Rectangle(0, 0, width, height); 
       
        BitmapData srcData = srcBitmap.LockBits(bmpBounds, ImageLockMode.ReadOnly, srcBitmap.PixelFormat); 
        BitmapData destData = result.LockBits(bmpBounds, ImageLockMode.WriteOnly, targetPixelFormat);
        
        unsafe
        { 
            var srcBitsPtr = (byte *)srcData.Scan0.ToPointer(); 
            var destBitsPtr = (byte *)destData.Scan0.ToPointer();
            int srcStride = srcData.Stride; 
            int destStride = destData.Stride; 
           
            for (int y = 0; y < height; y++) 
            { 
                for (int x = 0; x < width; x++) 
                { 
                    int srcPosition = y * srcStride + x * 4; 
                    int destPosition = y * destStride + x * 4; 
                   
                    destBitsPtr[destPosition] = srcBitsPtr[srcPosition]; 
                } 
            } 
        } 
       
        srcBitmap.UnlockBits(srcData); 
        result.UnlockBits(destData); 
        
        return result; 
    }
    
 public static Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) { 
        var width = srcBitmap.Width; 
        var height = srcBitmap.Height; 
         
        var result = new Bitmap(width, height, targetPixelFormat); 
        var bmpBounds = new Rectangle(0, 0, width, height); 
         
        BitmapData srcData = srcBitmap.LockBits(bmpBounds, ImageLockMode.ReadOnly, srcBitmap.PixelFormat); 
        BitmapData destData = result.LockBits(bmpBounds, ImageLockMode.WriteOnly, targetPixelFormat); 
         
        byte[] srcBuffer = new byte[srcData.Stride * srcData.Height]; 
        byte[] destBuffer = new byte[destData.Stride * destData.Height]; 
         
        Marshal.Copy(srcData.Scan0, srcBuffer, 0, srcData.Stride * srcData.Height); 
         
        for (int y = 0; y < height; y++) 
        { 
            for (int x = 0; x < width; x++) 
            { 
                int srcPosition = y * srcData.Stride + x * 4; 
                int destPosition = y * destData.Stride + x * 4; 
             
                destBuffer[destPosition] = srcBuffer[srcPosition]; 
            } 
        } 
         
        Marshal.Copy(destBuffer, 0, destData.Scan0, destData.Stride * destData.Height); 
         
        srcBitmap.UnlockBits(srcData); 
        result.UnlockBits(destData); 
         
        return result; 
    } 
    
 public static Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) { 
        var width = srcBitmap.Width; 
        var height = srcBitmap.Height; 
         
        var result = new Bitmap(width, height, targetPixelFormat); 
        var bmpBounds = new Rectangle(0, 0, width, height); 
         
        BitmapData srcData = srcBitmap.LockBits(bmpBounds, ImageLockMode.ReadOnly, srcBitmap.PixelFormat); 
        BitmapData destData = result.LockBits(bmpBounds, ImageLockMode.WriteOnly, targetPixelFormat); 
         
        byte[] srcBuffer = new byte[srcData.Stride * srcData.Height]; 
        byte[] destBuffer = new byte[destData.Stride * destData.Height]; 
         
        for (int y = 0; y < height; y++) 
        { 
            var srcRowPtr = (int*)(srcData.Scan0 + (y * srcData.Stride)); 
            var destRowPtr = (int *)(destData.Scan0 + (y * destData.Stride)); 
           
            for (int x = 0; x < width; x++) 
            { 
                destRowPtr[x] = srcRowPtr[x]; 
            } 
        } 
       
        srcBitmap.UnlockBits(srcData); 
        result.UnlockBits(destData); 
         
        return result; 
    }
    
 public static unsafe Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) {
    var width = srcBitmap.Width;
    var height = srcBitmap.Height;
    var result = new Bitmap (width, height, targetPixelFormat);
    var bmpBounds = new Rectangle (0, 0, srcBitmap.Width, srcBitmap.Height);
    var srcData = srcBitmap.LockBits (bmpBounds, ImageLockMode.ReadOnly, srcBitmap.PixelFormat);
    var destData = result.LockBits (bmpBounds, ImageLockMode.WriteOnly, targetPixelFormat);
    var srcDataPtr = (int *) srcData.Scan0;
    var destDataPtr = (int *) destData.Scan0;
    for (int y = 0; y <= srcData.Height - 1; y ++) {
        for (int x = 0; x <= srcData.Width - 1; x ++) {
            var position = srcData.Stride * y + 4 * x;
            var position2 = destData.Stride * y + 4 * x;
            memcpy (destDataPtr + position2, srcDataPtr + position, (UIntPtr) 4);
        }
    }
    srcBitmap.UnlockBits (srcData);
    result.UnlockBits (destData);
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
339
1
Gpt3D_Clone339_1.cs 1 22
Gpt3D_Clone339_1.cs 23 231
----------------------------------------

public static unsafe Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) {
    var result = new Bitmap (srcBitmap.Width, srcBitmap.Height, targetPixelFormat);
    var bmpBounds = new Rectangle (0, 0, srcBitmap.Width, srcBitmap.Height);
    var srcData = srcBitmap.LockBits (bmpBounds, ImageLockMode.ReadOnly, srcBitmap.PixelFormat);
    var destData = result.LockBits (bmpBounds, ImageLockMode.ReadOnly, targetPixelFormat);
    var srcDataPtr = (byte *) srcData.Scan0;
    var destDataPtr = (byte *) destData.Scan0;
    try {
        for (int y = 0; y <= srcData.Height - 1; y ++) {
            for (int x = 0; x <= srcData.Width - 1; x ++) {
                var position = srcData.Stride * y + 4 * x;
                var position2 = destData.Stride * y + 4 * x;
                memcpy (destDataPtr + position2, srcDataPtr + position, (UIntPtr) 4);
            }
        }
    }
    finally {
        srcBitmap.UnlockBits (srcData);
        result.UnlockBits (destData);
    }
    return result;
}
----------------------------------------

  public static Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) 
    { 
        var width = srcBitmap.Width; 
        var height = srcBitmap.Height; 
        
        var result = new Bitmap(width, height, targetPixelFormat); 
        var bmpBounds = new Rectangle(0, 0, width, height); 
       
        for (int y = 0; y < height; y++) 
        { 
            for (int x = 0; x < width; x++) 
            { 
                Color srcPixel = srcBitmap.GetPixel(x, y); 
                result.SetPixel(x, y, Color.FromArgb(srcPixel.A, srcPixel.R, srcPixel.G, srcPixel.B)); 
            } 
        } 
        
        return result; 
    }
    
  public static Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) 
    { 
        var width = srcBitmap.Width; 
        var height = srcBitmap.Height; 
        
        var result = new Bitmap(width, height, targetPixelFormat); 
        var bmpBounds = new Rectangle(0, 0, width, height); 
       
        var srcData = srcBitmap.LockBits(bmpBounds, ImageLockMode.ReadOnly, srcBitmap.PixelFormat); 
        var destData = result.LockBits(bmpBounds, ImageLockMode.ReadWrite, targetPixelFormat); 
        int bytesPerPixel = Bitmap.GetPixelFormatSize(srcBitmap.PixelFormat) / 8; 
        int size = srcData.Stride * srcData.Height; 
        byte[] data = new byte[size]; 
        
        Marshal.Copy(srcData.Scan0,data,0,size); 
  
        for (int y = 0; y < height; y++) 
        { 
            for (int x = 0; x < width; x++) 
            { 
                int index = y * srcData.Stride + x * bytesPerPixel; 
                int index2 = y * destData.Stride + x * bytesPerPixel; 
                    
                destData.Scan0[index2] = data[index]; 
            } 
        } 
        
        srcBitmap.UnlockBits(srcData); 
        result.UnlockBits(destData); 
        
        return result; 
    }
    
 public static Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) 
    { 
        var width = srcBitmap.Width; 
        var height = srcBitmap.Height; 
        
        var result = new Bitmap(width, height, targetPixelFormat); 
        var bmpBounds = new Rectangle(0, 0, width, height); 
       
        LockBitmap srcLockBitmap = new LockBitmap(srcBitmap); 
        LockBitmap destLockBitmap = new LockBitmap(result); 
       
        srcLockBitmap.LockBits(); 
        destLockBitmap.LockBits(); 
       
        for (int y = 0; y < height; y++) 
        { 
            for (int x = 0; x < width; x++) 
            { 
                destLockBitmap.SetPixel(x, y, srcLockBitmap.GetPixel(x, y)); 
            } 
        } 
       
        srcLockBitmap.UnlockBits(); 
        destLockBitmap.UnlockBits(); 
       
        return result; 
    }
    
 public static Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) 
    { 
        var width = srcBitmap.Width; 
        var height = srcBitmap.Height; 
        
        var result = new Bitmap(width, height, targetPixelFormat); 
        var bmpBounds = new Rectangle(0, 0, width, height); 
       
        BitmapData srcData = srcBitmap.LockBits(bmpBounds, ImageLockMode.ReadOnly, srcBitmap.PixelFormat); 
        BitmapData destData = result.LockBits(bmpBounds, ImageLockMode.WriteOnly, targetPixelFormat);
        
        unsafe
        { 
            var srcBitsPtr = (byte *)srcData.Scan0.ToPointer(); 
            var destBitsPtr = (byte *)destData.Scan0.ToPointer();
            int srcStride = srcData.Stride; 
            int destStride = destData.Stride; 
           
            for (int y = 0; y < height; y++) 
            { 
                for (int x = 0; x < width; x++) 
                { 
                    int srcPosition = y * srcStride + x * 4; 
                    int destPosition = y * destStride + x * 4; 
                   
                    destBitsPtr[destPosition] = srcBitsPtr[srcPosition]; 
                } 
            } 
        } 
       
        srcBitmap.UnlockBits(srcData); 
        result.UnlockBits(destData); 
        
        return result; 
    }
    
 public static Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) { 
        var width = srcBitmap.Width; 
        var height = srcBitmap.Height; 
         
        var result = new Bitmap(width, height, targetPixelFormat); 
        var bmpBounds = new Rectangle(0, 0, width, height); 
         
        BitmapData srcData = srcBitmap.LockBits(bmpBounds, ImageLockMode.ReadOnly, srcBitmap.PixelFormat); 
        BitmapData destData = result.LockBits(bmpBounds, ImageLockMode.WriteOnly, targetPixelFormat); 
         
        byte[] srcBuffer = new byte[srcData.Stride * srcData.Height]; 
        byte[] destBuffer = new byte[destData.Stride * destData.Height]; 
         
        Marshal.Copy(srcData.Scan0, srcBuffer, 0, srcData.Stride * srcData.Height); 
         
        for (int y = 0; y < height; y++) 
        { 
            for (int x = 0; x < width; x++) 
            { 
                int srcPosition = y * srcData.Stride + x * 4; 
                int destPosition = y * destData.Stride + x * 4; 
             
                destBuffer[destPosition] = srcBuffer[srcPosition]; 
            } 
        } 
         
        Marshal.Copy(destBuffer, 0, destData.Scan0, destData.Stride * destData.Height); 
         
        srcBitmap.UnlockBits(srcData); 
        result.UnlockBits(destData); 
         
        return result; 
    } 
    
 public static Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) { 
        var width = srcBitmap.Width; 
        var height = srcBitmap.Height; 
         
        var result = new Bitmap(width, height, targetPixelFormat); 
        var bmpBounds = new Rectangle(0, 0, width, height); 
         
        BitmapData srcData = srcBitmap.LockBits(bmpBounds, ImageLockMode.ReadOnly, srcBitmap.PixelFormat); 
        BitmapData destData = result.LockBits(bmpBounds, ImageLockMode.WriteOnly, targetPixelFormat); 
         
        byte[] srcBuffer = new byte[srcData.Stride * srcData.Height]; 
        byte[] destBuffer = new byte[destData.Stride * destData.Height]; 
         
        for (int y = 0; y < height; y++) 
        { 
            var srcRowPtr = (int*)(srcData.Scan0 + (y * srcData.Stride)); 
            var destRowPtr = (int *)(destData.Scan0 + (y * destData.Stride)); 
           
            for (int x = 0; x < width; x++) 
            { 
                destRowPtr[x] = srcRowPtr[x]; 
            } 
        } 
       
        srcBitmap.UnlockBits(srcData); 
        result.UnlockBits(destData); 
         
        return result; 
    }
    
 public static unsafe Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) {
    var width = srcBitmap.Width;
    var height = srcBitmap.Height;
    var result = new Bitmap (width, height, targetPixelFormat);
    var bmpBounds = new Rectangle (0, 0, srcBitmap.Width, srcBitmap.Height);
    var srcData = srcBitmap.LockBits (bmpBounds, ImageLockMode.ReadOnly, srcBitmap.PixelFormat);
    var destData = result.LockBits (bmpBounds, ImageLockMode.WriteOnly, targetPixelFormat);
    var srcDataPtr = (int *) srcData.Scan0;
    var destDataPtr = (int *) destData.Scan0;
    for (int y = 0; y <= srcData.Height - 1; y ++) {
        for (int x = 0; x <= srcData.Width - 1; x ++) {
            var position = srcData.Stride * y + 4 * x;
            var position2 = destData.Stride * y + 4 * x;
            memcpy (destDataPtr + position2, srcDataPtr + position, (UIntPtr) 4);
        }
    }
    srcBitmap.UnlockBits (srcData);
    result.UnlockBits (destData);
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
339
2
Gpt3D_Clone339_2.cs 1 22
Gpt3D_Clone339_2.cs 23 231
----------------------------------------

public static unsafe Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) {
    var result = new Bitmap (srcBitmap.Width, srcBitmap.Height, targetPixelFormat);
    var bmpBounds = new Rectangle (0, 0, srcBitmap.Width, srcBitmap.Height);
    var srcData = srcBitmap.LockBits (bmpBounds, ImageLockMode.ReadOnly, srcBitmap.PixelFormat);
    var destData = result.LockBits (bmpBounds, ImageLockMode.ReadOnly, targetPixelFormat);
    var srcDataPtr = (byte *) srcData.Scan0;
    var destDataPtr = (byte *) destData.Scan0;
    try {
        for (int y = 0; y <= srcData.Height - 1; y ++) {
            for (int x = 0; x <= srcData.Width - 1; x ++) {
                var position = srcData.Stride * y + 4 * x;
                var position2 = destData.Stride * y + 4 * x;
                memcpy (destDataPtr + position2, srcDataPtr + position, (UIntPtr) 4);
            }
        }
    }
    finally {
        srcBitmap.UnlockBits (srcData);
        result.UnlockBits (destData);
    }
    return result;
}
----------------------------------------

  public static Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) 
    { 
        var width = srcBitmap.Width; 
        var height = srcBitmap.Height; 
        
        var result = new Bitmap(width, height, targetPixelFormat); 
        var bmpBounds = new Rectangle(0, 0, width, height); 
       
        for (int y = 0; y < height; y++) 
        { 
            for (int x = 0; x < width; x++) 
            { 
                Color srcPixel = srcBitmap.GetPixel(x, y); 
                result.SetPixel(x, y, Color.FromArgb(srcPixel.A, srcPixel.R, srcPixel.G, srcPixel.B)); 
            } 
        } 
        
        return result; 
    }
    
  public static Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) 
    { 
        var width = srcBitmap.Width; 
        var height = srcBitmap.Height; 
        
        var result = new Bitmap(width, height, targetPixelFormat); 
        var bmpBounds = new Rectangle(0, 0, width, height); 
       
        var srcData = srcBitmap.LockBits(bmpBounds, ImageLockMode.ReadOnly, srcBitmap.PixelFormat); 
        var destData = result.LockBits(bmpBounds, ImageLockMode.ReadWrite, targetPixelFormat); 
        int bytesPerPixel = Bitmap.GetPixelFormatSize(srcBitmap.PixelFormat) / 8; 
        int size = srcData.Stride * srcData.Height; 
        byte[] data = new byte[size]; 
        
        Marshal.Copy(srcData.Scan0,data,0,size); 
  
        for (int y = 0; y < height; y++) 
        { 
            for (int x = 0; x < width; x++) 
            { 
                int index = y * srcData.Stride + x * bytesPerPixel; 
                int index2 = y * destData.Stride + x * bytesPerPixel; 
                    
                destData.Scan0[index2] = data[index]; 
            } 
        } 
        
        srcBitmap.UnlockBits(srcData); 
        result.UnlockBits(destData); 
        
        return result; 
    }
    
 public static Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) 
    { 
        var width = srcBitmap.Width; 
        var height = srcBitmap.Height; 
        
        var result = new Bitmap(width, height, targetPixelFormat); 
        var bmpBounds = new Rectangle(0, 0, width, height); 
       
        LockBitmap srcLockBitmap = new LockBitmap(srcBitmap); 
        LockBitmap destLockBitmap = new LockBitmap(result); 
       
        srcLockBitmap.LockBits(); 
        destLockBitmap.LockBits(); 
       
        for (int y = 0; y < height; y++) 
        { 
            for (int x = 0; x < width; x++) 
            { 
                destLockBitmap.SetPixel(x, y, srcLockBitmap.GetPixel(x, y)); 
            } 
        } 
       
        srcLockBitmap.UnlockBits(); 
        destLockBitmap.UnlockBits(); 
       
        return result; 
    }
    
 public static Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) 
    { 
        var width = srcBitmap.Width; 
        var height = srcBitmap.Height; 
        
        var result = new Bitmap(width, height, targetPixelFormat); 
        var bmpBounds = new Rectangle(0, 0, width, height); 
       
        BitmapData srcData = srcBitmap.LockBits(bmpBounds, ImageLockMode.ReadOnly, srcBitmap.PixelFormat); 
        BitmapData destData = result.LockBits(bmpBounds, ImageLockMode.WriteOnly, targetPixelFormat);
        
        unsafe
        { 
            var srcBitsPtr = (byte *)srcData.Scan0.ToPointer(); 
            var destBitsPtr = (byte *)destData.Scan0.ToPointer();
            int srcStride = srcData.Stride; 
            int destStride = destData.Stride; 
           
            for (int y = 0; y < height; y++) 
            { 
                for (int x = 0; x < width; x++) 
                { 
                    int srcPosition = y * srcStride + x * 4; 
                    int destPosition = y * destStride + x * 4; 
                   
                    destBitsPtr[destPosition] = srcBitsPtr[srcPosition]; 
                } 
            } 
        } 
       
        srcBitmap.UnlockBits(srcData); 
        result.UnlockBits(destData); 
        
        return result; 
    }
    
 public static Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) { 
        var width = srcBitmap.Width; 
        var height = srcBitmap.Height; 
         
        var result = new Bitmap(width, height, targetPixelFormat); 
        var bmpBounds = new Rectangle(0, 0, width, height); 
         
        BitmapData srcData = srcBitmap.LockBits(bmpBounds, ImageLockMode.ReadOnly, srcBitmap.PixelFormat); 
        BitmapData destData = result.LockBits(bmpBounds, ImageLockMode.WriteOnly, targetPixelFormat); 
         
        byte[] srcBuffer = new byte[srcData.Stride * srcData.Height]; 
        byte[] destBuffer = new byte[destData.Stride * destData.Height]; 
         
        Marshal.Copy(srcData.Scan0, srcBuffer, 0, srcData.Stride * srcData.Height); 
         
        for (int y = 0; y < height; y++) 
        { 
            for (int x = 0; x < width; x++) 
            { 
                int srcPosition = y * srcData.Stride + x * 4; 
                int destPosition = y * destData.Stride + x * 4; 
             
                destBuffer[destPosition] = srcBuffer[srcPosition]; 
            } 
        } 
         
        Marshal.Copy(destBuffer, 0, destData.Scan0, destData.Stride * destData.Height); 
         
        srcBitmap.UnlockBits(srcData); 
        result.UnlockBits(destData); 
         
        return result; 
    } 
    
 public static Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) { 
        var width = srcBitmap.Width; 
        var height = srcBitmap.Height; 
         
        var result = new Bitmap(width, height, targetPixelFormat); 
        var bmpBounds = new Rectangle(0, 0, width, height); 
         
        BitmapData srcData = srcBitmap.LockBits(bmpBounds, ImageLockMode.ReadOnly, srcBitmap.PixelFormat); 
        BitmapData destData = result.LockBits(bmpBounds, ImageLockMode.WriteOnly, targetPixelFormat); 
         
        byte[] srcBuffer = new byte[srcData.Stride * srcData.Height]; 
        byte[] destBuffer = new byte[destData.Stride * destData.Height]; 
         
        for (int y = 0; y < height; y++) 
        { 
            var srcRowPtr = (int*)(srcData.Scan0 + (y * srcData.Stride)); 
            var destRowPtr = (int *)(destData.Scan0 + (y * destData.Stride)); 
           
            for (int x = 0; x < width; x++) 
            { 
                destRowPtr[x] = srcRowPtr[x]; 
            } 
        } 
       
        srcBitmap.UnlockBits(srcData); 
        result.UnlockBits(destData); 
         
        return result; 
    }
    
 public static unsafe Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) {
    var width = srcBitmap.Width;
    var height = srcBitmap.Height;
    var result = new Bitmap (width, height, targetPixelFormat);
    var bmpBounds = new Rectangle (0, 0, srcBitmap.Width, srcBitmap.Height);
    var srcData = srcBitmap.LockBits (bmpBounds, ImageLockMode.ReadOnly, srcBitmap.PixelFormat);
    var destData = result.LockBits (bmpBounds, ImageLockMode.WriteOnly, targetPixelFormat);
    var srcDataPtr = (int *) srcData.Scan0;
    var destDataPtr = (int *) destData.Scan0;
    for (int y = 0; y <= srcData.Height - 1; y ++) {
        for (int x = 0; x <= srcData.Width - 1; x ++) {
            var position = srcData.Stride * y + 4 * x;
            var position2 = destData.Stride * y + 4 * x;
            memcpy (destDataPtr + position2, srcDataPtr + position, (UIntPtr) 4);
        }
    }
    srcBitmap.UnlockBits (srcData);
    result.UnlockBits (destData);
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
339
4
Gpt3D_Clone339_4.cs 1 22
Gpt3D_Clone339_4.cs 23 231
----------------------------------------

public static unsafe Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) {
    var result = new Bitmap (srcBitmap.Width, srcBitmap.Height, targetPixelFormat);
    var bmpBounds = new Rectangle (0, 0, srcBitmap.Width, srcBitmap.Height);
    var srcData = srcBitmap.LockBits (bmpBounds, ImageLockMode.ReadOnly, srcBitmap.PixelFormat);
    var destData = result.LockBits (bmpBounds, ImageLockMode.ReadOnly, targetPixelFormat);
    var srcDataPtr = (byte *) srcData.Scan0;
    var destDataPtr = (byte *) destData.Scan0;
    try {
        for (int y = 0; y <= srcData.Height - 1; y ++) {
            for (int x = 0; x <= srcData.Width - 1; x ++) {
                var position = srcData.Stride * y + 4 * x;
                var position2 = destData.Stride * y + 4 * x;
                memcpy (destDataPtr + position2, srcDataPtr + position, (UIntPtr) 4);
            }
        }
    }
    finally {
        srcBitmap.UnlockBits (srcData);
        result.UnlockBits (destData);
    }
    return result;
}
----------------------------------------

  public static Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) 
    { 
        var width = srcBitmap.Width; 
        var height = srcBitmap.Height; 
        
        var result = new Bitmap(width, height, targetPixelFormat); 
        var bmpBounds = new Rectangle(0, 0, width, height); 
       
        for (int y = 0; y < height; y++) 
        { 
            for (int x = 0; x < width; x++) 
            { 
                Color srcPixel = srcBitmap.GetPixel(x, y); 
                result.SetPixel(x, y, Color.FromArgb(srcPixel.A, srcPixel.R, srcPixel.G, srcPixel.B)); 
            } 
        } 
        
        return result; 
    }
    
  public static Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) 
    { 
        var width = srcBitmap.Width; 
        var height = srcBitmap.Height; 
        
        var result = new Bitmap(width, height, targetPixelFormat); 
        var bmpBounds = new Rectangle(0, 0, width, height); 
       
        var srcData = srcBitmap.LockBits(bmpBounds, ImageLockMode.ReadOnly, srcBitmap.PixelFormat); 
        var destData = result.LockBits(bmpBounds, ImageLockMode.ReadWrite, targetPixelFormat); 
        int bytesPerPixel = Bitmap.GetPixelFormatSize(srcBitmap.PixelFormat) / 8; 
        int size = srcData.Stride * srcData.Height; 
        byte[] data = new byte[size]; 
        
        Marshal.Copy(srcData.Scan0,data,0,size); 
  
        for (int y = 0; y < height; y++) 
        { 
            for (int x = 0; x < width; x++) 
            { 
                int index = y * srcData.Stride + x * bytesPerPixel; 
                int index2 = y * destData.Stride + x * bytesPerPixel; 
                    
                destData.Scan0[index2] = data[index]; 
            } 
        } 
        
        srcBitmap.UnlockBits(srcData); 
        result.UnlockBits(destData); 
        
        return result; 
    }
    
 public static Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) 
    { 
        var width = srcBitmap.Width; 
        var height = srcBitmap.Height; 
        
        var result = new Bitmap(width, height, targetPixelFormat); 
        var bmpBounds = new Rectangle(0, 0, width, height); 
       
        LockBitmap srcLockBitmap = new LockBitmap(srcBitmap); 
        LockBitmap destLockBitmap = new LockBitmap(result); 
       
        srcLockBitmap.LockBits(); 
        destLockBitmap.LockBits(); 
       
        for (int y = 0; y < height; y++) 
        { 
            for (int x = 0; x < width; x++) 
            { 
                destLockBitmap.SetPixel(x, y, srcLockBitmap.GetPixel(x, y)); 
            } 
        } 
       
        srcLockBitmap.UnlockBits(); 
        destLockBitmap.UnlockBits(); 
       
        return result; 
    }
    
 public static Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) 
    { 
        var width = srcBitmap.Width; 
        var height = srcBitmap.Height; 
        
        var result = new Bitmap(width, height, targetPixelFormat); 
        var bmpBounds = new Rectangle(0, 0, width, height); 
       
        BitmapData srcData = srcBitmap.LockBits(bmpBounds, ImageLockMode.ReadOnly, srcBitmap.PixelFormat); 
        BitmapData destData = result.LockBits(bmpBounds, ImageLockMode.WriteOnly, targetPixelFormat);
        
        unsafe
        { 
            var srcBitsPtr = (byte *)srcData.Scan0.ToPointer(); 
            var destBitsPtr = (byte *)destData.Scan0.ToPointer();
            int srcStride = srcData.Stride; 
            int destStride = destData.Stride; 
           
            for (int y = 0; y < height; y++) 
            { 
                for (int x = 0; x < width; x++) 
                { 
                    int srcPosition = y * srcStride + x * 4; 
                    int destPosition = y * destStride + x * 4; 
                   
                    destBitsPtr[destPosition] = srcBitsPtr[srcPosition]; 
                } 
            } 
        } 
       
        srcBitmap.UnlockBits(srcData); 
        result.UnlockBits(destData); 
        
        return result; 
    }
    
 public static Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) { 
        var width = srcBitmap.Width; 
        var height = srcBitmap.Height; 
         
        var result = new Bitmap(width, height, targetPixelFormat); 
        var bmpBounds = new Rectangle(0, 0, width, height); 
         
        BitmapData srcData = srcBitmap.LockBits(bmpBounds, ImageLockMode.ReadOnly, srcBitmap.PixelFormat); 
        BitmapData destData = result.LockBits(bmpBounds, ImageLockMode.WriteOnly, targetPixelFormat); 
         
        byte[] srcBuffer = new byte[srcData.Stride * srcData.Height]; 
        byte[] destBuffer = new byte[destData.Stride * destData.Height]; 
         
        Marshal.Copy(srcData.Scan0, srcBuffer, 0, srcData.Stride * srcData.Height); 
         
        for (int y = 0; y < height; y++) 
        { 
            for (int x = 0; x < width; x++) 
            { 
                int srcPosition = y * srcData.Stride + x * 4; 
                int destPosition = y * destData.Stride + x * 4; 
             
                destBuffer[destPosition] = srcBuffer[srcPosition]; 
            } 
        } 
         
        Marshal.Copy(destBuffer, 0, destData.Scan0, destData.Stride * destData.Height); 
         
        srcBitmap.UnlockBits(srcData); 
        result.UnlockBits(destData); 
         
        return result; 
    } 
    
 public static Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) { 
        var width = srcBitmap.Width; 
        var height = srcBitmap.Height; 
         
        var result = new Bitmap(width, height, targetPixelFormat); 
        var bmpBounds = new Rectangle(0, 0, width, height); 
         
        BitmapData srcData = srcBitmap.LockBits(bmpBounds, ImageLockMode.ReadOnly, srcBitmap.PixelFormat); 
        BitmapData destData = result.LockBits(bmpBounds, ImageLockMode.WriteOnly, targetPixelFormat); 
         
        byte[] srcBuffer = new byte[srcData.Stride * srcData.Height]; 
        byte[] destBuffer = new byte[destData.Stride * destData.Height]; 
         
        for (int y = 0; y < height; y++) 
        { 
            var srcRowPtr = (int*)(srcData.Scan0 + (y * srcData.Stride)); 
            var destRowPtr = (int *)(destData.Scan0 + (y * destData.Stride)); 
           
            for (int x = 0; x < width; x++) 
            { 
                destRowPtr[x] = srcRowPtr[x]; 
            } 
        } 
       
        srcBitmap.UnlockBits(srcData); 
        result.UnlockBits(destData); 
         
        return result; 
    }
    
 public static unsafe Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) {
    var width = srcBitmap.Width;
    var height = srcBitmap.Height;
    var result = new Bitmap (width, height, targetPixelFormat);
    var bmpBounds = new Rectangle (0, 0, srcBitmap.Width, srcBitmap.Height);
    var srcData = srcBitmap.LockBits (bmpBounds, ImageLockMode.ReadOnly, srcBitmap.PixelFormat);
    var destData = result.LockBits (bmpBounds, ImageLockMode.WriteOnly, targetPixelFormat);
    var srcDataPtr = (int *) srcData.Scan0;
    var destDataPtr = (int *) destData.Scan0;
    for (int y = 0; y <= srcData.Height - 1; y ++) {
        for (int x = 0; x <= srcData.Width - 1; x ++) {
            var position = srcData.Stride * y + 4 * x;
            var position2 = destData.Stride * y + 4 * x;
            memcpy (destDataPtr + position2, srcDataPtr + position, (UIntPtr) 4);
        }
    }
    srcBitmap.UnlockBits (srcData);
    result.UnlockBits (destData);
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
339
6
Gpt3D_Clone339_6.cs 1 22
Gpt3D_Clone339_6.cs 23 231
----------------------------------------

public static unsafe Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) {
    var result = new Bitmap (srcBitmap.Width, srcBitmap.Height, targetPixelFormat);
    var bmpBounds = new Rectangle (0, 0, srcBitmap.Width, srcBitmap.Height);
    var srcData = srcBitmap.LockBits (bmpBounds, ImageLockMode.ReadOnly, srcBitmap.PixelFormat);
    var destData = result.LockBits (bmpBounds, ImageLockMode.ReadOnly, targetPixelFormat);
    var srcDataPtr = (byte *) srcData.Scan0;
    var destDataPtr = (byte *) destData.Scan0;
    try {
        for (int y = 0; y <= srcData.Height - 1; y ++) {
            for (int x = 0; x <= srcData.Width - 1; x ++) {
                var position = srcData.Stride * y + 4 * x;
                var position2 = destData.Stride * y + 4 * x;
                memcpy (destDataPtr + position2, srcDataPtr + position, (UIntPtr) 4);
            }
        }
    }
    finally {
        srcBitmap.UnlockBits (srcData);
        result.UnlockBits (destData);
    }
    return result;
}
----------------------------------------

  public static Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) 
    { 
        var width = srcBitmap.Width; 
        var height = srcBitmap.Height; 
        
        var result = new Bitmap(width, height, targetPixelFormat); 
        var bmpBounds = new Rectangle(0, 0, width, height); 
       
        for (int y = 0; y < height; y++) 
        { 
            for (int x = 0; x < width; x++) 
            { 
                Color srcPixel = srcBitmap.GetPixel(x, y); 
                result.SetPixel(x, y, Color.FromArgb(srcPixel.A, srcPixel.R, srcPixel.G, srcPixel.B)); 
            } 
        } 
        
        return result; 
    }
    
  public static Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) 
    { 
        var width = srcBitmap.Width; 
        var height = srcBitmap.Height; 
        
        var result = new Bitmap(width, height, targetPixelFormat); 
        var bmpBounds = new Rectangle(0, 0, width, height); 
       
        var srcData = srcBitmap.LockBits(bmpBounds, ImageLockMode.ReadOnly, srcBitmap.PixelFormat); 
        var destData = result.LockBits(bmpBounds, ImageLockMode.ReadWrite, targetPixelFormat); 
        int bytesPerPixel = Bitmap.GetPixelFormatSize(srcBitmap.PixelFormat) / 8; 
        int size = srcData.Stride * srcData.Height; 
        byte[] data = new byte[size]; 
        
        Marshal.Copy(srcData.Scan0,data,0,size); 
  
        for (int y = 0; y < height; y++) 
        { 
            for (int x = 0; x < width; x++) 
            { 
                int index = y * srcData.Stride + x * bytesPerPixel; 
                int index2 = y * destData.Stride + x * bytesPerPixel; 
                    
                destData.Scan0[index2] = data[index]; 
            } 
        } 
        
        srcBitmap.UnlockBits(srcData); 
        result.UnlockBits(destData); 
        
        return result; 
    }
    
 public static Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) 
    { 
        var width = srcBitmap.Width; 
        var height = srcBitmap.Height; 
        
        var result = new Bitmap(width, height, targetPixelFormat); 
        var bmpBounds = new Rectangle(0, 0, width, height); 
       
        LockBitmap srcLockBitmap = new LockBitmap(srcBitmap); 
        LockBitmap destLockBitmap = new LockBitmap(result); 
       
        srcLockBitmap.LockBits(); 
        destLockBitmap.LockBits(); 
       
        for (int y = 0; y < height; y++) 
        { 
            for (int x = 0; x < width; x++) 
            { 
                destLockBitmap.SetPixel(x, y, srcLockBitmap.GetPixel(x, y)); 
            } 
        } 
       
        srcLockBitmap.UnlockBits(); 
        destLockBitmap.UnlockBits(); 
       
        return result; 
    }
    
 public static Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) 
    { 
        var width = srcBitmap.Width; 
        var height = srcBitmap.Height; 
        
        var result = new Bitmap(width, height, targetPixelFormat); 
        var bmpBounds = new Rectangle(0, 0, width, height); 
       
        BitmapData srcData = srcBitmap.LockBits(bmpBounds, ImageLockMode.ReadOnly, srcBitmap.PixelFormat); 
        BitmapData destData = result.LockBits(bmpBounds, ImageLockMode.WriteOnly, targetPixelFormat);
        
        unsafe
        { 
            var srcBitsPtr = (byte *)srcData.Scan0.ToPointer(); 
            var destBitsPtr = (byte *)destData.Scan0.ToPointer();
            int srcStride = srcData.Stride; 
            int destStride = destData.Stride; 
           
            for (int y = 0; y < height; y++) 
            { 
                for (int x = 0; x < width; x++) 
                { 
                    int srcPosition = y * srcStride + x * 4; 
                    int destPosition = y * destStride + x * 4; 
                   
                    destBitsPtr[destPosition] = srcBitsPtr[srcPosition]; 
                } 
            } 
        } 
       
        srcBitmap.UnlockBits(srcData); 
        result.UnlockBits(destData); 
        
        return result; 
    }
    
 public static Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) { 
        var width = srcBitmap.Width; 
        var height = srcBitmap.Height; 
         
        var result = new Bitmap(width, height, targetPixelFormat); 
        var bmpBounds = new Rectangle(0, 0, width, height); 
         
        BitmapData srcData = srcBitmap.LockBits(bmpBounds, ImageLockMode.ReadOnly, srcBitmap.PixelFormat); 
        BitmapData destData = result.LockBits(bmpBounds, ImageLockMode.WriteOnly, targetPixelFormat); 
         
        byte[] srcBuffer = new byte[srcData.Stride * srcData.Height]; 
        byte[] destBuffer = new byte[destData.Stride * destData.Height]; 
         
        Marshal.Copy(srcData.Scan0, srcBuffer, 0, srcData.Stride * srcData.Height); 
         
        for (int y = 0; y < height; y++) 
        { 
            for (int x = 0; x < width; x++) 
            { 
                int srcPosition = y * srcData.Stride + x * 4; 
                int destPosition = y * destData.Stride + x * 4; 
             
                destBuffer[destPosition] = srcBuffer[srcPosition]; 
            } 
        } 
         
        Marshal.Copy(destBuffer, 0, destData.Scan0, destData.Stride * destData.Height); 
         
        srcBitmap.UnlockBits(srcData); 
        result.UnlockBits(destData); 
         
        return result; 
    } 
    
 public static Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) { 
        var width = srcBitmap.Width; 
        var height = srcBitmap.Height; 
         
        var result = new Bitmap(width, height, targetPixelFormat); 
        var bmpBounds = new Rectangle(0, 0, width, height); 
         
        BitmapData srcData = srcBitmap.LockBits(bmpBounds, ImageLockMode.ReadOnly, srcBitmap.PixelFormat); 
        BitmapData destData = result.LockBits(bmpBounds, ImageLockMode.WriteOnly, targetPixelFormat); 
         
        byte[] srcBuffer = new byte[srcData.Stride * srcData.Height]; 
        byte[] destBuffer = new byte[destData.Stride * destData.Height]; 
         
        for (int y = 0; y < height; y++) 
        { 
            var srcRowPtr = (int*)(srcData.Scan0 + (y * srcData.Stride)); 
            var destRowPtr = (int *)(destData.Scan0 + (y * destData.Stride)); 
           
            for (int x = 0; x < width; x++) 
            { 
                destRowPtr[x] = srcRowPtr[x]; 
            } 
        } 
       
        srcBitmap.UnlockBits(srcData); 
        result.UnlockBits(destData); 
         
        return result; 
    }
    
 public static unsafe Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) {
    var width = srcBitmap.Width;
    var height = srcBitmap.Height;
    var result = new Bitmap (width, height, targetPixelFormat);
    var bmpBounds = new Rectangle (0, 0, srcBitmap.Width, srcBitmap.Height);
    var srcData = srcBitmap.LockBits (bmpBounds, ImageLockMode.ReadOnly, srcBitmap.PixelFormat);
    var destData = result.LockBits (bmpBounds, ImageLockMode.WriteOnly, targetPixelFormat);
    var srcDataPtr = (int *) srcData.Scan0;
    var destDataPtr = (int *) destData.Scan0;
    for (int y = 0; y <= srcData.Height - 1; y ++) {
        for (int x = 0; x <= srcData.Width - 1; x ++) {
            var position = srcData.Stride * y + 4 * x;
            var position2 = destData.Stride * y + 4 * x;
            memcpy (destDataPtr + position2, srcDataPtr + position, (UIntPtr) 4);
        }
    }
    srcBitmap.UnlockBits (srcData);
    result.UnlockBits (destData);
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
339
7
Gpt3D_Clone339_7.cs 1 22
Gpt3D_Clone339_7.cs 23 231
----------------------------------------

public static unsafe Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) {
    var result = new Bitmap (srcBitmap.Width, srcBitmap.Height, targetPixelFormat);
    var bmpBounds = new Rectangle (0, 0, srcBitmap.Width, srcBitmap.Height);
    var srcData = srcBitmap.LockBits (bmpBounds, ImageLockMode.ReadOnly, srcBitmap.PixelFormat);
    var destData = result.LockBits (bmpBounds, ImageLockMode.ReadOnly, targetPixelFormat);
    var srcDataPtr = (byte *) srcData.Scan0;
    var destDataPtr = (byte *) destData.Scan0;
    try {
        for (int y = 0; y <= srcData.Height - 1; y ++) {
            for (int x = 0; x <= srcData.Width - 1; x ++) {
                var position = srcData.Stride * y + 4 * x;
                var position2 = destData.Stride * y + 4 * x;
                memcpy (destDataPtr + position2, srcDataPtr + position, (UIntPtr) 4);
            }
        }
    }
    finally {
        srcBitmap.UnlockBits (srcData);
        result.UnlockBits (destData);
    }
    return result;
}
----------------------------------------

  public static Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) 
    { 
        var width = srcBitmap.Width; 
        var height = srcBitmap.Height; 
        
        var result = new Bitmap(width, height, targetPixelFormat); 
        var bmpBounds = new Rectangle(0, 0, width, height); 
       
        for (int y = 0; y < height; y++) 
        { 
            for (int x = 0; x < width; x++) 
            { 
                Color srcPixel = srcBitmap.GetPixel(x, y); 
                result.SetPixel(x, y, Color.FromArgb(srcPixel.A, srcPixel.R, srcPixel.G, srcPixel.B)); 
            } 
        } 
        
        return result; 
    }
    
  public static Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) 
    { 
        var width = srcBitmap.Width; 
        var height = srcBitmap.Height; 
        
        var result = new Bitmap(width, height, targetPixelFormat); 
        var bmpBounds = new Rectangle(0, 0, width, height); 
       
        var srcData = srcBitmap.LockBits(bmpBounds, ImageLockMode.ReadOnly, srcBitmap.PixelFormat); 
        var destData = result.LockBits(bmpBounds, ImageLockMode.ReadWrite, targetPixelFormat); 
        int bytesPerPixel = Bitmap.GetPixelFormatSize(srcBitmap.PixelFormat) / 8; 
        int size = srcData.Stride * srcData.Height; 
        byte[] data = new byte[size]; 
        
        Marshal.Copy(srcData.Scan0,data,0,size); 
  
        for (int y = 0; y < height; y++) 
        { 
            for (int x = 0; x < width; x++) 
            { 
                int index = y * srcData.Stride + x * bytesPerPixel; 
                int index2 = y * destData.Stride + x * bytesPerPixel; 
                    
                destData.Scan0[index2] = data[index]; 
            } 
        } 
        
        srcBitmap.UnlockBits(srcData); 
        result.UnlockBits(destData); 
        
        return result; 
    }
    
 public static Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) 
    { 
        var width = srcBitmap.Width; 
        var height = srcBitmap.Height; 
        
        var result = new Bitmap(width, height, targetPixelFormat); 
        var bmpBounds = new Rectangle(0, 0, width, height); 
       
        LockBitmap srcLockBitmap = new LockBitmap(srcBitmap); 
        LockBitmap destLockBitmap = new LockBitmap(result); 
       
        srcLockBitmap.LockBits(); 
        destLockBitmap.LockBits(); 
       
        for (int y = 0; y < height; y++) 
        { 
            for (int x = 0; x < width; x++) 
            { 
                destLockBitmap.SetPixel(x, y, srcLockBitmap.GetPixel(x, y)); 
            } 
        } 
       
        srcLockBitmap.UnlockBits(); 
        destLockBitmap.UnlockBits(); 
       
        return result; 
    }
    
 public static Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) 
    { 
        var width = srcBitmap.Width; 
        var height = srcBitmap.Height; 
        
        var result = new Bitmap(width, height, targetPixelFormat); 
        var bmpBounds = new Rectangle(0, 0, width, height); 
       
        BitmapData srcData = srcBitmap.LockBits(bmpBounds, ImageLockMode.ReadOnly, srcBitmap.PixelFormat); 
        BitmapData destData = result.LockBits(bmpBounds, ImageLockMode.WriteOnly, targetPixelFormat);
        
        unsafe
        { 
            var srcBitsPtr = (byte *)srcData.Scan0.ToPointer(); 
            var destBitsPtr = (byte *)destData.Scan0.ToPointer();
            int srcStride = srcData.Stride; 
            int destStride = destData.Stride; 
           
            for (int y = 0; y < height; y++) 
            { 
                for (int x = 0; x < width; x++) 
                { 
                    int srcPosition = y * srcStride + x * 4; 
                    int destPosition = y * destStride + x * 4; 
                   
                    destBitsPtr[destPosition] = srcBitsPtr[srcPosition]; 
                } 
            } 
        } 
       
        srcBitmap.UnlockBits(srcData); 
        result.UnlockBits(destData); 
        
        return result; 
    }
    
 public static Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) { 
        var width = srcBitmap.Width; 
        var height = srcBitmap.Height; 
         
        var result = new Bitmap(width, height, targetPixelFormat); 
        var bmpBounds = new Rectangle(0, 0, width, height); 
         
        BitmapData srcData = srcBitmap.LockBits(bmpBounds, ImageLockMode.ReadOnly, srcBitmap.PixelFormat); 
        BitmapData destData = result.LockBits(bmpBounds, ImageLockMode.WriteOnly, targetPixelFormat); 
         
        byte[] srcBuffer = new byte[srcData.Stride * srcData.Height]; 
        byte[] destBuffer = new byte[destData.Stride * destData.Height]; 
         
        Marshal.Copy(srcData.Scan0, srcBuffer, 0, srcData.Stride * srcData.Height); 
         
        for (int y = 0; y < height; y++) 
        { 
            for (int x = 0; x < width; x++) 
            { 
                int srcPosition = y * srcData.Stride + x * 4; 
                int destPosition = y * destData.Stride + x * 4; 
             
                destBuffer[destPosition] = srcBuffer[srcPosition]; 
            } 
        } 
         
        Marshal.Copy(destBuffer, 0, destData.Scan0, destData.Stride * destData.Height); 
         
        srcBitmap.UnlockBits(srcData); 
        result.UnlockBits(destData); 
         
        return result; 
    } 
    
 public static Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) { 
        var width = srcBitmap.Width; 
        var height = srcBitmap.Height; 
         
        var result = new Bitmap(width, height, targetPixelFormat); 
        var bmpBounds = new Rectangle(0, 0, width, height); 
         
        BitmapData srcData = srcBitmap.LockBits(bmpBounds, ImageLockMode.ReadOnly, srcBitmap.PixelFormat); 
        BitmapData destData = result.LockBits(bmpBounds, ImageLockMode.WriteOnly, targetPixelFormat); 
         
        byte[] srcBuffer = new byte[srcData.Stride * srcData.Height]; 
        byte[] destBuffer = new byte[destData.Stride * destData.Height]; 
         
        for (int y = 0; y < height; y++) 
        { 
            var srcRowPtr = (int*)(srcData.Scan0 + (y * srcData.Stride)); 
            var destRowPtr = (int *)(destData.Scan0 + (y * destData.Stride)); 
           
            for (int x = 0; x < width; x++) 
            { 
                destRowPtr[x] = srcRowPtr[x]; 
            } 
        } 
       
        srcBitmap.UnlockBits(srcData); 
        result.UnlockBits(destData); 
         
        return result; 
    }
    
 public static unsafe Bitmap CreateAlphaBitmap (Bitmap srcBitmap, PixelFormat targetPixelFormat) {
    var width = srcBitmap.Width;
    var height = srcBitmap.Height;
    var result = new Bitmap (width, height, targetPixelFormat);
    var bmpBounds = new Rectangle (0, 0, srcBitmap.Width, srcBitmap.Height);
    var srcData = srcBitmap.LockBits (bmpBounds, ImageLockMode.ReadOnly, srcBitmap.PixelFormat);
    var destData = result.LockBits (bmpBounds, ImageLockMode.WriteOnly, targetPixelFormat);
    var srcDataPtr = (int *) srcData.Scan0;
    var destDataPtr = (int *) destData.Scan0;
    for (int y = 0; y <= srcData.Height - 1; y ++) {
        for (int x = 0; x <= srcData.Width - 1; x ++) {
            var position = srcData.Stride * y + 4 * x;
            var position2 = destData.Stride * y + 4 * x;
            memcpy (destDataPtr + position2, srcDataPtr + position, (UIntPtr) 4);
        }
    }
    srcBitmap.UnlockBits (srcData);
    result.UnlockBits (destData);
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
340
1
Gpt3D_Clone340_1.cs 1 18
Gpt3D_Clone340_1.cs 19 35
----------------------------------------

public static Control GetAnyControlAt (TableLayoutPanel pp, int col, int row) {
    bool fnd = false;
    Control sendCC = null;
    foreach (Control cc in pp.Controls) {
        if (pp.GetCellPosition (cc).Column == col) {
            if (pp.GetCellPosition (cc).Row == row) {
                sendCC = cc;
                fnd = true;
                break;
            }
        }
    }
    if (fnd == true) {
        return sendCC;
    } else {
        return null;
    }
}
----------------------------------------

 public static Control GetAnyControlAt(TableLayoutPanel pp, int col, int row) 
{
    Control sendCC = null;
    var query = from cc in pp.Controls
                where (pp.GetCellPosition(cc).Column == col && pp.GetCellPosition(cc).Row == row)
                select cc;
    if (query.Any())
    {
        sendCC = query.First();
    } 
    return sendCC;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
340
2
Gpt3D_Clone340_2.cs 1 18
Gpt3D_Clone340_2.cs 19 35
----------------------------------------

public static Control GetAnyControlAt (TableLayoutPanel pp, int col, int row) {
    bool fnd = false;
    Control sendCC = null;
    foreach (Control cc in pp.Controls) {
        if (pp.GetCellPosition (cc).Column == col) {
            if (pp.GetCellPosition (cc).Row == row) {
                sendCC = cc;
                fnd = true;
                break;
            }
        }
    }
    if (fnd == true) {
        return sendCC;
    } else {
        return null;
    }
}
----------------------------------------

 public static Control GetAnyControlAt(TableLayoutPanel pp, int col, int row)
{
    Control sendCC = null;
    for (int i = 0; i < pp.Controls.Count; ++i)
    {
        CellPosition cellPos = pp.GetCellPosition(pp.Controls[i]);
        if (cellPos.Column == col && cellPos.Row == row)
        {
            sendCC = pp.Controls[i];
            break;
        }
    }
    return sendCC;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
340
3
Gpt3D_Clone340_3.cs 1 18
Gpt3D_Clone340_3.cs 19 35
----------------------------------------

public static Control GetAnyControlAt (TableLayoutPanel pp, int col, int row) {
    bool fnd = false;
    Control sendCC = null;
    foreach (Control cc in pp.Controls) {
        if (pp.GetCellPosition (cc).Column == col) {
            if (pp.GetCellPosition (cc).Row == row) {
                sendCC = cc;
                fnd = true;
                break;
            }
        }
    }
    if (fnd == true) {
        return sendCC;
    } else {
        return null;
    }
}
----------------------------------------

 public static Control GetAnyControlAt(TableLayoutPanel pp, int col, int row)
{
    Control sendCC = null;
    for (int i = 0; i < pp.Controls.Count; i++)
    {
        if (pp.GetCellPosition(pp.Controls[i]).Column == col
            && pp.GetCellPosition(pp.Controls[i]).Row == row)
        {
            sendCC = pp.Controls[i];
            break;
        }
    }
    return sendCC;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
340
4
Gpt3D_Clone340_4.cs 1 18
Gpt3D_Clone340_4.cs 19 37
----------------------------------------

public static Control GetAnyControlAt (TableLayoutPanel pp, int col, int row) {
    bool fnd = false;
    Control sendCC = null;
    foreach (Control cc in pp.Controls) {
        if (pp.GetCellPosition (cc).Column == col) {
            if (pp.GetCellPosition (cc).Row == row) {
                sendCC = cc;
                fnd = true;
                break;
            }
        }
    }
    if (fnd == true) {
        return sendCC;
    } else {
        return null;
    }
}
----------------------------------------

 public static Control GetAnyControlAt(TableLayoutPanel pp, int col, int row)
{
    Control sendCC = null;
    foreach (Control cc in pp.Controls) 
    {
        if (pp.GetCellPosition(cc).Column == col)
        {
            if (pp.GetCellPosition(cc).Row == row)
            {
                return cc;
            }
        }
    }
    return sendCC;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
340
5
Gpt3D_Clone340_5.cs 1 18
Gpt3D_Clone340_5.cs 19 34
----------------------------------------

public static Control GetAnyControlAt (TableLayoutPanel pp, int col, int row) {
    bool fnd = false;
    Control sendCC = null;
    foreach (Control cc in pp.Controls) {
        if (pp.GetCellPosition (cc).Column == col) {
            if (pp.GetCellPosition (cc).Row == row) {
                sendCC = cc;
                fnd = true;
                break;
            }
        }
    }
    if (fnd == true) {
        return sendCC;
    } else {
        return null;
    }
}
----------------------------------------

 public static Control GetAnyControlAt(TableLayoutPanel pp, int col, int row)
{
    Control sendCC = null;
    foreach (Control cc in pp.Controls)
    {
        if (pp.GetColumn(cc) == col && pp.GetRow(cc) == row)
        {
            sendCC = cc;
            break;
        }
    } 
    return sendCC;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
340
6
Gpt3D_Clone340_6.cs 1 18
Gpt3D_Clone340_6.cs 19 31
----------------------------------------

public static Control GetAnyControlAt (TableLayoutPanel pp, int col, int row) {
    bool fnd = false;
    Control sendCC = null;
    foreach (Control cc in pp.Controls) {
        if (pp.GetCellPosition (cc).Column == col) {
            if (pp.GetCellPosition (cc).Row == row) {
                sendCC = cc;
                fnd = true;
                break;
            }
        }
    }
    if (fnd == true) {
        return sendCC;
    } else {
        return null;
    }
}
----------------------------------------

 public static Control GetAnyControlAt(TableLayoutPanel pp, int col, int row)
{
    Control sendCC = null;
    var res = pp.Controls.Where(x => pp.GetCellPosition(x).Column == col && pp.GetCellPosition(x).Row == row).FirstOrDefault();
    if (res != null)
    {
        sendCC = res;
    }
    return sendCC;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
340
7
Gpt3D_Clone340_7.cs 1 18
Gpt3D_Clone340_7.cs 19 33
----------------------------------------

public static Control GetAnyControlAt (TableLayoutPanel pp, int col, int row) {
    bool fnd = false;
    Control sendCC = null;
    foreach (Control cc in pp.Controls) {
        if (pp.GetCellPosition (cc).Column == col) {
            if (pp.GetCellPosition (cc).Row == row) {
                sendCC = cc;
                fnd = true;
                break;
            }
        }
    }
    if (fnd == true) {
        return sendCC;
    } else {
        return null;
    }
}
----------------------------------------

 public static Control GetAnyControlAt(TableLayoutPanel pp, int col, int row)
{
    foreach (Control cc in pp.Controls)
    {
        CellPosition cellPos = pp.GetCellPosition(cc);
        if (cellPos.Column == col &&  cellPos.Row == row)
        {
            return cc;
        }
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
340
8
Gpt3D_Clone340_8.cs 1 18
Gpt3D_Clone340_8.cs 19 33
----------------------------------------

public static Control GetAnyControlAt (TableLayoutPanel pp, int col, int row) {
    bool fnd = false;
    Control sendCC = null;
    foreach (Control cc in pp.Controls) {
        if (pp.GetCellPosition (cc).Column == col) {
            if (pp.GetCellPosition (cc).Row == row) {
                sendCC = cc;
                fnd = true;
                break;
            }
        }
    }
    if (fnd == true) {
        return sendCC;
    } else {
        return null;
    }
}
----------------------------------------

 public static Control GetAnyControlAt(TableLayoutPanel pp, int col, int row)
{
    foreach (Control cc in pp.Controls)
    {
        Point cellPos = pp.GetCellPosition(cc);
        if (cellPos.X == col &&  cellPos.Y == row)
        {
            return cc;
        }
    }   
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
340
9
Gpt3D_Clone340_9.cs 1 18
Gpt3D_Clone340_9.cs 19 32
----------------------------------------

public static Control GetAnyControlAt (TableLayoutPanel pp, int col, int row) {
    bool fnd = false;
    Control sendCC = null;
    foreach (Control cc in pp.Controls) {
        if (pp.GetCellPosition (cc).Column == col) {
            if (pp.GetCellPosition (cc).Row == row) {
                sendCC = cc;
                fnd = true;
                break;
            }
        }
    }
    if (fnd == true) {
        return sendCC;
    } else {
        return null;
    }
}
----------------------------------------

 public static Control GetAnyControlAt(TableLayoutPanel pp, int col, int row)
{
    foreach (Control cc in pp.Controls) 
    {
        if (pp.GetCellPosition(cc).Column == col && pp.GetCellPosition(cc).Row == row)
        {
            return cc;
        }
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
341
0
Gpt3D_Clone341_0.cs 1 8
Gpt3D_Clone341_0.cs 9 38
----------------------------------------

public static Image Resize (this Image image, Single scale) {
    if (image == null)
        return null;
    scale = Math.Max (0.0F, scale);
    Int32 scaledWidth = Convert.ToInt32 (image.Width * scale);
    Int32 scaledHeight = Convert.ToInt32 (image.Height * scale);
    return image.Resize (new Size (scaledWidth, scaledHeight));
}
----------------------------------------

 public static Image Resize(this Image image, float scale)
{
    if (image == null)
        return null;
    scale = Math.Max(0.0F, scale);
    int scaledWidth = (int)(image.Width * scale);
    int scaledHeight = (int)(image.Height * scale);
    Rectangle destRect = new Rectangle(0, 0, scaledWidth, scaledHeight);
    Bitmap resizedImage = new Bitmap(scaledWidth, scaledHeight);
    resizedImage.SetResolution(image.HorizontalResolution, image.VerticalResolution);
    
    using (Graphics graphics = Graphics.FromImage(resizedImage))
    {
        graphics.CompositingMode = CompositingMode.SourceCopy;
        graphics.CompositingQuality = CompositingQuality.HighQuality;
        graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
        graphics.SmoothingMode = SmoothingMode.HighQuality;
        graphics.PixelOffsetMode = PixelOffsetMode.HighQuality;
        using (var wrapMode = new ImageAttributes())
        {
            wrapMode.SetWrapMode(WrapMode.TileFlipXY);
            graphics.DrawImage(image, destRect, 0, 0, image.Width, image.Height, GraphicsUnit.Pixel, wrapMode);
        }
    }
    return (Image)resizedImage;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
341
1
Gpt3D_Clone341_1.cs 1 8
Gpt3D_Clone341_1.cs 9 29
----------------------------------------

public static Image Resize (this Image image, Single scale) {
    if (image == null)
        return null;
    scale = Math.Max (0.0F, scale);
    Int32 scaledWidth = Convert.ToInt32 (image.Width * scale);
    Int32 scaledHeight = Convert.ToInt32 (image.Height * scale);
    return image.Resize (new Size (scaledWidth, scaledHeight));
}
----------------------------------------

 public static Image Resize(this Image image, float factor) 
{  
    if (image == null) return null; 
    float centscale = Math.Max(0.0F,factor); 
    int newWidth = (int)(image.Width * centscale); 
    int newHeight = (int)(image.Height * centscale); 
    Size sizeMode = new Size(newWidth, newHeight); 
    Rectangle rec = new Rectangle(0,0,newWidth, newHeight); 
    Bitmap bmp = new Bitmap(newWidth, newHeight); 
    bmp.SetResolution(image.HorizontalResolution, image.VerticalResolution); 
    using (Graphics G = Graphics.FromImage(bmp)) 
    { 
        G.CompositingQuality = System.Drawing.Drawing2D.CompositingQuality.HighQuality; 
        G.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic; 
        G.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality; 
        G.DrawImage(image, rec); 
    } 
    return bmp; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
341
2
Gpt3D_Clone341_2.cs 1 8
Gpt3D_Clone341_2.cs 9 58
----------------------------------------

public static Image Resize (this Image image, Single scale) {
    if (image == null)
        return null;
    scale = Math.Max (0.0F, scale);
    Int32 scaledWidth = Convert.ToInt32 (image.Width * scale);
    Int32 scaledHeight = Convert.ToInt32 (image.Height * scale);
    return image.Resize (new Size (scaledWidth, scaledHeight));
}
----------------------------------------

  public static Image Resize(this Image image, float factor)
    {
        if (image == null)
            return null;
          
        factor = Math.Max(0.0F, factor);
        int scaledWidth = (int)(image.Width * factor);
        int scaledHeight = (int)(image.Height * factor);
        System.Drawing.Bitmap bmp = new System.Drawing.Bitmap(scaledWidth, scaledHeight);
        System.Drawing.Rectangle rect = new System.Drawing.Rectangle(0, 0, scaledWidth, scaledHeight); 
          
        using (System.Drawing.Graphics gr = System.Drawing.Graphics.FromImage(bmp))
        {
            gr.CompositingMode = System.Drawing.Drawing2D.CompositingMode.SourceCopy;  
            gr.CompositingQuality = System.Drawing.Drawing2D.CompositingQuality.HighQuality;
            gr.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;
            gr.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;
            gr.PixelOffsetMode = System.Drawing.Drawing2D.PixelOffsetMode.HighQuality;
            gr.DrawImage(image, rect);
        }
        return bmp;
    }
 public static Image Resize(this Image image, float scale)
{
    if (image == null)
        return null;
    scale = Math.Max(0.0F, scale); 
    int scaledWidth = (int)(image.Width * scale);
    int scaledHeight = (int)(image.Height * scale);
    Size sizeMode = new Size(scaledWidth, scaledHeight); 
    Rectangle rec = new Rectangle(0, 0, scaledWidth, scaledHeight); 
    using (System.Drawing.Bitmap bmp = new System.Drawing.Bitmap(scaledWidth, scaledHeight))
    using (Graphics graphics = Graphics.FromImage(bmp))
    {
        graphics.SmoothingMode = SmoothingMode.HighQuality;
        graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
        graphics.PixelOffsetMode = PixelOffsetMode.HighQuality;
        graphics.DrawImage(image, rec);
        return (Image)bmp.Clone();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
341
3
Gpt3D_Clone341_3.cs 1 8
Gpt3D_Clone341_3.cs 9 33
----------------------------------------

public static Image Resize (this Image image, Single scale) {
    if (image == null)
        return null;
    scale = Math.Max (0.0F, scale);
    Int32 scaledWidth = Convert.ToInt32 (image.Width * scale);
    Int32 scaledHeight = Convert.ToInt32 (image.Height * scale);
    return image.Resize (new Size (scaledWidth, scaledHeight));
}
----------------------------------------

 public static Image Resize(this Image image, float factor)
{
    if (image == null)
    {
        return null;
    }
    factor = Math.Max(0.0F, factor);
    int scaledWidth = (int)(image.Width * factor);
    int scaledHeight = (int)(image.Height * factor);
    using (System.Drawing.Bitmap bmp = new System.Drawing.Bitmap(scaledWidth, scaledHeight))
    using (Graphics graphics = Graphics.FromImage(bmp))
    {
        graphics.CompositingMode = System.Drawing.Drawing2D.CompositingMode.SourceCopy;
        graphics.CompositingQuality = System.Drawing.Drawing2D.CompositingQuality.HighQuality;
        graphics.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;
        graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;
        graphics.PixelOffsetMode = System.Drawing.Drawing2D.PixelOffsetMode.HighQuality;
        graphics.DrawImage(image, 0, 0, scaledWidth, scaledHeight);
    }
    return (Image)bmp;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
341
4
Gpt3D_Clone341_4.cs 1 8
Gpt3D_Clone341_4.cs 9 31
----------------------------------------

public static Image Resize (this Image image, Single scale) {
    if (image == null)
        return null;
    scale = Math.Max (0.0F, scale);
    Int32 scaledWidth = Convert.ToInt32 (image.Width * scale);
    Int32 scaledHeight = Convert.ToInt32 (image.Height * scale);
    return image.Resize (new Size (scaledWidth, scaledHeight));
}
----------------------------------------

 public static Image Resize(this Image image, float factor)
{
    if (image == null)
        return null;
    
    factor = Math.Max(0.0F, factor);
    int scaledWidth = (int)(image.Width * factor);
    int scaledHeight = (int)(image.Height * factor);
    
    using (Bitmap bitmap = new Bitmap(scaledWidth, scaledHeight))
    using (Graphics g = Graphics.FromImage(bitmap))
    {
        g.CompositingMode = CompositingMode.SourceCopy;
        g.CompositingQuality = CompositingQuality.HighQuality;
        g.InterpolationMode = InterpolationMode.HighQualityBicubic; 
        g.SmoothingMode = SmoothingMode.HighQuality;
        g.PixelOffsetMode = PixelOffsetMode.HighQuality; 
        g.DrawImage(image, 0, 0, scaledWidth, scaledHeight);
    }
    return (Image)bitmap;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
341
5
Gpt3D_Clone341_5.cs 1 8
Gpt3D_Clone341_5.cs 9 58
----------------------------------------

public static Image Resize (this Image image, Single scale) {
    if (image == null)
        return null;
    scale = Math.Max (0.0F, scale);
    Int32 scaledWidth = Convert.ToInt32 (image.Width * scale);
    Int32 scaledHeight = Convert.ToInt32 (image.Height * scale);
    return image.Resize (new Size (scaledWidth, scaledHeight));
}
----------------------------------------

  public static Image Resize(this Image image, float factor)
    {
        if (image == null)
            return null;
          
        factor = Math.Max(0.0F, factor);
        int scaledWidth = (int)(image.Width * factor);
        int scaledHeight = (int)(image.Height * factor);
        System.Drawing.Bitmap bmp = new System.Drawing.Bitmap(scaledWidth, scaledHeight);
        System.Drawing.Rectangle rect = new System.Drawing.Rectangle(0, 0, scaledWidth, scaledHeight); 
          
        using (System.Drawing.Graphics gr = System.Drawing.Graphics.FromImage(bmp))
        {
            gr.CompositingMode = System.Drawing.Drawing2D.CompositingMode.SourceCopy;  
            gr.CompositingQuality = System.Drawing.Drawing2D.CompositingQuality.HighQuality;
            gr.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;
            gr.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighQuality;
            gr.PixelOffsetMode = System.Drawing.Drawing2D.PixelOffsetMode.HighQuality;
            gr.DrawImage(image, rect);
        }
        return bmp;
    }
 public static Image Resize(this Image image, float scale)
{
    if (image == null)
        return null;
    scale = Math.Max(0.0F, scale); 
    int scaledWidth = (int)(image.Width * scale);
    int scaledHeight = (int)(image.Height * scale);
    Size sizeMode = new Size(scaledWidth, scaledHeight); 
    Rectangle rec = new Rectangle(0, 0, scaledWidth, scaledHeight); 
    using (System.Drawing.Bitmap bmp = new System.Drawing.Bitmap(scaledWidth, scaledHeight))
    using (Graphics graphics = Graphics.FromImage(bmp))
    {
        graphics.SmoothingMode = SmoothingMode.HighQuality;
        graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
        graphics.PixelOffsetMode = PixelOffsetMode.HighQuality;
        graphics.DrawImage(image, rec);
        return (Image)bmp.Clone();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
341
6
Gpt3D_Clone341_6.cs 1 8
Gpt3D_Clone341_6.cs 9 29
----------------------------------------

public static Image Resize (this Image image, Single scale) {
    if (image == null)
        return null;
    scale = Math.Max (0.0F, scale);
    Int32 scaledWidth = Convert.ToInt32 (image.Width * scale);
    Int32 scaledHeight = Convert.ToInt32 (image.Height * scale);
    return image.Resize (new Size (scaledWidth, scaledHeight));
}
----------------------------------------

 public static Image Resize (this Image image, Single scale)
{
    if (image == null)
        return null;
    scale = Math.Max (0f, scale); 
    int scaledWidth = Convert.ToInt32 (image.Width * scale);
    int scaledHeight = Convert.ToInt32 (image.Height * scale);
    Bitmap bmpBytes = new Bitmap (scaledWidth, scaledHeight); 
    using (Graphics gr = Graphics.FromImage (bmpBytes)) 
    { 
        gr.SmoothingMode = SmoothingMode.HighSpeed; 
        gr.InterpolationMode = InterpolationMode.HighQualityBicubic; 
        gr.PixelOffsetMode = PixelOffsetMode.HighQuality; 
        gr.DrawImage (image, 0, 0, scaledWidth, scaledHeight); 
    } 
    return bmpBytes; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
341
7
Gpt3D_Clone341_7.cs 1 8
Gpt3D_Clone341_7.cs 9 25
----------------------------------------

public static Image Resize (this Image image, Single scale) {
    if (image == null)
        return null;
    scale = Math.Max (0.0F, scale);
    Int32 scaledWidth = Convert.ToInt32 (image.Width * scale);
    Int32 scaledHeight = Convert.ToInt32 (image.Height * scale);
    return image.Resize (new Size (scaledWidth, scaledHeight));
}
----------------------------------------

 public static Image Resize(this Image image, Single scale)
{
    if (image == null)
        return null;
    scale = Math.Max (0.0F, scale);
    Int32 scaledWidth = Convert.ToInt32 (image.Width * scale);
    Int32 scaledHeight = Convert.ToInt32 (image.Height * scale);
    Bitmap bitmap = new Bitmap(scaledWidth, scaledHeight); 
    using (Graphics G = Graphics.FromImage(bitmap))
    {
        G.InterpolationMode =interpolationMode;
        G.DrawImage(Image, 0, 0, scaledWidth, scaledHeight); 
    }
    return bitmap;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
341
8
Gpt3D_Clone341_8.cs 1 8
Gpt3D_Clone341_8.cs 9 26
----------------------------------------

public static Image Resize (this Image image, Single scale) {
    if (image == null)
        return null;
    scale = Math.Max (0.0F, scale);
    Int32 scaledWidth = Convert.ToInt32 (image.Width * scale);
    Int32 scaledHeight = Convert.ToInt32 (image.Height * scale);
    return image.Resize (new Size (scaledWidth, scaledHeight));
}
----------------------------------------

 public static Image Resize(this Image image, float factor)
{
    if (image == null)
        return null;
          
    factor = Math.Max(0.0F, factor);
    int scaledWidth = (int)(image.Width * factor);
    int scaledHeight = (int)(image.Height * factor);
    Bitmap canvas = new Bitmap(scaledWidth, scaledHeight);
    Graphics graphic = Graphics.FromImage(canvas);
    graphic.InterpolationMode = InterpolationMode.HighQualityBicubic;
    graphic.DrawImage(image, 0, 0, scaledWidth, scaledHeight);
    return canvas;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
341
9
Gpt3D_Clone341_9.cs 1 8
Gpt3D_Clone341_9.cs 9 22
----------------------------------------

public static Image Resize (this Image image, Single scale) {
    if (image == null)
        return null;
    scale = Math.Max (0.0F, scale);
    Int32 scaledWidth = Convert.ToInt32 (image.Width * scale);
    Int32 scaledHeight = Convert.ToInt32 (image.Height * scale);
    return image.Resize (new Size (scaledWidth, scaledHeight));
}
----------------------------------------

  public static Image Resize(this Image image, float scale)
{
    if(image == null) 
        return image;
    scale = Math.Max(0f, scale);
    Int32 newWidth = Convert.ToInt32(image.Width * scale);
    Int32 newHeight = Convert.ToInt32(image.Height * scale);
    Image.GetThumbnailImageAbort callback = new Image.GetThumbnailImageAbort(ThumbnailCallback);
    Image thumbNail = image.GetThumbnailImage(newWidth, newHeight, callback, IntPtr.Zero);
    return thumbNail;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
343
0
Gpt3D_Clone343_0.cs 1 11
Gpt3D_Clone343_0.cs 12 44
----------------------------------------

private static string FormatNumber (long num) {
    long i = (long) Math.Pow (10, (int) Math.Max (0, Math.Log10 (num) - 2));
    num = num / i * i;
    if (num >= 1000000000)
        return (num / 1000000000D).ToString ("0.##") + "B";
    if (num >= 1000000)
        return (num / 1000000D).ToString ("0.##") + "M";
    if (num >= 1000)
        return (num / 1000D).ToString ("0.##") + "K";
    return num.ToString ("#,0");
}
----------------------------------------

 private static string FormatNumber(long num)
{
    int power; 
    string suffix = "";
    if (num >= 1000000000)
    {
        power = 9;
        suffix = "B";
    } 
    else if (num >= 1000000)
    {
        power = 6;
        suffix = "M";
    }
    else if (num >= 1000)
    {
        power = 3;
        suffix = "K";
    }
    else
    {
        power = 0;
    }
    long i = (long) Math.Pow (10, (int) Math.Max (0, Math.Log10 (num) - power));
    num = num / i * i;
    double result = num / Math.Pow(10,power);
    return (result).ToString("0.##") + suffix;  
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
343
1
Gpt3D_Clone343_1.cs 1 11
Gpt3D_Clone343_1.cs 12 41
----------------------------------------

private static string FormatNumber (long num) {
    long i = (long) Math.Pow (10, (int) Math.Max (0, Math.Log10 (num) - 2));
    num = num / i * i;
    if (num >= 1000000000)
        return (num / 1000000000D).ToString ("0.##") + "B";
    if (num >= 1000000)
        return (num / 1000000D).ToString ("0.##") + "M";
    if (num >= 1000)
        return (num / 1000D).ToString ("0.##") + "K";
    return num.ToString ("#,0");
}
----------------------------------------

 private static string FormatNumber(long num)
{
    long i;
    string suffix = "", result = "";
    if (num >= 1000000000)
    {
        i = (long) Math.Pow (10, (int) Math.Max (0, Math.Log10 (num) - 2));
        num = num / i * i;
        result = (num / 1000000000D).ToString ("0.##") + "B";
    } 
    else if (num >= 1000000)
    {
        i = (long) Math.Pow (10, (int) Math.Max (0, Math.Log10 (num) - 2));
        num = num / i * i;
        result = (num / 1000000D).ToString ("0.##") + "M";
    }
    else if (num >= 1000)
    {
        i = (long) Math.Pow (10, (int) Math.Max (0, Math.Log10 (num) - 2));
        num = num / i * i;
        result = (num / 1000D).ToString ("0.##") + "K";
    }
    else
        result = num.ToString ("#,0");
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
343
2
Gpt3D_Clone343_2.cs 1 11
Gpt3D_Clone343_2.cs 12 42
----------------------------------------

private static string FormatNumber (long num) {
    long i = (long) Math.Pow (10, (int) Math.Max (0, Math.Log10 (num) - 2));
    num = num / i * i;
    if (num >= 1000000000)
        return (num / 1000000000D).ToString ("0.##") + "B";
    if (num >= 1000000)
        return (num / 1000000D).ToString ("0.##") + "M";
    if (num >= 1000)
        return (num / 1000D).ToString ("0.##") + "K";
    return num.ToString ("#,0");
}
----------------------------------------

 private static string FormatNumber(long num)
{
    string suffix = "";
    int power; 
    if (num >= 1000000000)
    {
        power = 9;
        suffix = "B";
    } 
    else if (num >= 1000000)
    {
        power = 6;
        suffix = "M";
    }
    else if (num >= 1000)
    {
        power = 3;
        suffix = "K";
    }
    else
    {
        power = 0;
    }
    long i = (long) Math.Pow (10, (int) Math.Max (0, Math.Log10 (num) - power));
    num = num / i * i;
    return (num / Math.Pow(1000,power)).ToString("0.##") + suffix;    
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
343
3
Gpt3D_Clone343_3.cs 1 11
Gpt3D_Clone343_3.cs 12 41
----------------------------------------

private static string FormatNumber (long num) {
    long i = (long) Math.Pow (10, (int) Math.Max (0, Math.Log10 (num) - 2));
    num = num / i * i;
    if (num >= 1000000000)
        return (num / 1000000000D).ToString ("0.##") + "B";
    if (num >= 1000000)
        return (num / 1000000D).ToString ("0.##") + "M";
    if (num >= 1000)
        return (num / 1000D).ToString ("0.##") + "K";
    return num.ToString ("#,0");
}
----------------------------------------

 private static string FormatNumber(long num) 
{
    char suffix = ' ';
    double divisor;
    if (num >= 1000000000)
    {
        divisor = 1000000000D;
        suffix = 'B';
    } 
    else if (num >= 1000000)
    {
        divisor = 1000000D;
        suffix = 'M';
    }
    else if (num >= 1000)
    {
        divisor = 1000D;
        suffix = 'K';
    }
    else
    {
        divisor = 1D;
    }
    long i = (long) Math.Pow (10, (int) Math.Max (0, Math.Log10 (num) - (int) Math.Log10(divisor)));
    num = num / i * i;
    return (num / divisor).ToString("0.##") + suffix;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
343
4
Gpt3D_Clone343_4.cs 1 11
Gpt3D_Clone343_4.cs 12 41
----------------------------------------

private static string FormatNumber (long num) {
    long i = (long) Math.Pow (10, (int) Math.Max (0, Math.Log10 (num) - 2));
    num = num / i * i;
    if (num >= 1000000000)
        return (num / 1000000000D).ToString ("0.##") + "B";
    if (num >= 1000000)
        return (num / 1000000D).ToString ("0.##") + "M";
    if (num >= 1000)
        return (num / 1000D).ToString ("0.##") + "K";
    return num.ToString ("#,0");
}
----------------------------------------

 private static string FormatNumber(long num) 
{
    double divisor;
    string suffix = "";
    if (num >= 1000000000)
    {
        divisor = 1000000000D;
        suffix = "B";
    } 
    else if (num >= 1000000)
    {
        divisor = 1000000D;
        suffix = "M";
    }
    else if (num >= 1000)
    {
        divisor = 1000D;
        suffix = "K";
    }
    else
    {
        divisor = 1D;
    }
 
    long i = (long) Math.Pow (10, (int) Math.Max (0, Math.Log10 (num) - (int) Math.Log10(divisor)));
    num = num / i * i;
    return (num / divisor).ToString("0.##") + suffix;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
343
5
Gpt3D_Clone343_5.cs 1 11
Gpt3D_Clone343_5.cs 12 42
----------------------------------------

private static string FormatNumber (long num) {
    long i = (long) Math.Pow (10, (int) Math.Max (0, Math.Log10 (num) - 2));
    num = num / i * i;
    if (num >= 1000000000)
        return (num / 1000000000D).ToString ("0.##") + "B";
    if (num >= 1000000)
        return (num / 1000000D).ToString ("0.##") + "M";
    if (num >= 1000)
        return (num / 1000D).ToString ("0.##") + "K";
    return num.ToString ("#,0");
}
----------------------------------------

 private static string FormatNumber(long num)
{
    int power; 
    string suffix = "";
    if (num >= 1000000000)
    {
        power = 9;
        suffix = "B";
    } 
    else if (num >= 1000000)
    {
        power = 6;
        suffix = "M";
    }
    else if (num >= 1000)
    {
        power = 3;
        suffix = "K";
    }
    else
    {
        power = 0;
    }
    long i = (long) Math.Pow (10, (int) Math.Max (0, Math.Log10 (num) - power));
    num = num / i * i;
    return (num / Math.Pow(10,power)).ToString("0.##") + suffix; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
343
6
Gpt3D_Clone343_6.cs 1 11
Gpt3D_Clone343_6.cs 12 40
----------------------------------------

private static string FormatNumber (long num) {
    long i = (long) Math.Pow (10, (int) Math.Max (0, Math.Log10 (num) - 2));
    num = num / i * i;
    if (num >= 1000000000)
        return (num / 1000000000D).ToString ("0.##") + "B";
    if (num >= 1000000)
        return (num / 1000000D).ToString ("0.##") + "M";
    if (num >= 1000)
        return (num / 1000D).ToString ("0.##") + "K";
    return num.ToString ("#,0");
}
----------------------------------------

 private static string FormatNumber(long num) {
    long divisor;
    string suffix = "";
    if (num >= 1000000000)
    {
        divisor = 1000000000;
        suffix = "B";
    } 
    else if (num >= 1000000)
    {
        divisor = 1000000;
        suffix = "M";
    }
    else if (num >= 1000)
    {
        divisor = 1000;
        suffix = "K";
    }
    else
    {
        divisor = 1;
    }
    long i = (long) Math.Pow (10, (int) Math.Max (0, Math.Log10 (num) - (int) Math.Log10(divisor)));
    num = num / i * i;
    return (num / divisor).ToString("0.##") + suffix;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
343
7
Gpt3D_Clone343_7.cs 1 11
Gpt3D_Clone343_7.cs 12 32
----------------------------------------

private static string FormatNumber (long num) {
    long i = (long) Math.Pow (10, (int) Math.Max (0, Math.Log10 (num) - 2));
    num = num / i * i;
    if (num >= 1000000000)
        return (num / 1000000000D).ToString ("0.##") + "B";
    if (num >= 1000000)
        return (num / 1000000D).ToString ("0.##") + "M";
    if (num >= 1000)
        return (num / 1000D).ToString ("0.##") + "K";
    return num.ToString ("#,0");
}
----------------------------------------

 private static string FormatNumber(long num) {
    int suffixLength = 0; 
    string suffix = "";
    if (num >= 1000000000) {
        suffixLength = 9;
        suffix = "B";
    } 
    else if (num >= 1000000) {
        suffixLength = 6;
        suffix = "M";
    }
    else if (num >= 1000) {
        suffixLength = 3;
        suffix = "K";
    }
    long i = (long) Math.Pow (10, (int) Math.Max (0, Math.Log10 (num) - suffixLength));
    num = num / i * i;
    return (num / Math.Pow(1000,suffixLength)).ToString("0.##") + suffix;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
343
8
Gpt3D_Clone343_8.cs 1 11
Gpt3D_Clone343_8.cs 12 28
----------------------------------------

private static string FormatNumber (long num) {
    long i = (long) Math.Pow (10, (int) Math.Max (0, Math.Log10 (num) - 2));
    num = num / i * i;
    if (num >= 1000000000)
        return (num / 1000000000D).ToString ("0.##") + "B";
    if (num >= 1000000)
        return (num / 1000000D).ToString ("0.##") + "M";
    if (num >= 1000)
        return (num / 1000D).ToString ("0.##") + "K";
    return num.ToString ("#,0");
}
----------------------------------------

 private static string FormatNumber(long num)
{
    string suffix = "";
    if (num < 1000)
       suffix = "";
    else if (num < 1000000)
       suffix = "K";
    else if (num < 1000000000)
       suffix = "M";
    else suffix = "B";
    long i = (long) Math.Pow (10, (int) Math.Max (0, Math.Log10 (num) - 2));
    num = num / i * i;
    return (num / Math.Pow(1000,suffix.Length > 0 ? suffix.Length : 0)).ToString("0.##") + suffix;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
343
9
Gpt3D_Clone343_9.cs 1 11
Gpt3D_Clone343_9.cs 12 36
----------------------------------------

private static string FormatNumber (long num) {
    long i = (long) Math.Pow (10, (int) Math.Max (0, Math.Log10 (num) - 2));
    num = num / i * i;
    if (num >= 1000000000)
        return (num / 1000000000D).ToString ("0.##") + "B";
    if (num >= 1000000)
        return (num / 1000000D).ToString ("0.##") + "M";
    if (num >= 1000)
        return (num / 1000D).ToString ("0.##") + "K";
    return num.ToString ("#,0");
}
----------------------------------------

 private static string FormatNumber(long num)
{
    string suffix = "";
    double divisor = Math.Pow(10,Math.Floor(Math.Log10(num)) - 1); 
    if (divisor > 1000)
    {
        suffix = "B";
    } 
    else if (divisor > 1)
    {
        suffix = "K";
    }
    else
    {
        suffix = "";
    }
    long i = (long) Math.Pow (10, (int) Math.Max (0, Math.Log10 (num) - (int) Math.Log10(divisor)));
    num = num / i * i;
    return (num / divisor).ToString("0.##") + suffix;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
346
0
Gpt3D_Clone346_0.cs 1 24
Gpt3D_Clone346_0.cs 25 150
----------------------------------------

static void Main (string [] args) {
    Console.Clear ();
    Console.ForegroundColor = ConsoleColor.Gray;
    Dictionary < string, string [] > skins = new Dictionary < string, string [] > ();
    skins.Add ("ahri", new string [] {"Academy", "Challenger", "Dynasty", "Foxfire", "Midnight", "Popstar"});
    skins.Add ("leesin", new string [] {"Traditional", "Acolyte", "Dragon Fist", "Musy Thai", "Pool Party", "SKT T1", "Knockout"});
    Console.WriteLine ("Conor's Random League of Legends Skin Selector v0.1\r\n\r\n");
    Console.WriteLine ("What champion would you like to select a skin for? \r\nPress enter for a random champion...    ");
    var champion = Console.ReadLine ();
    var rnd = new Random ();
    if (champion.Equals (string.Empty)) {
        var tmpList = Enumerable.ToList (skins.Keys);
        champion = tmpList [rnd.Next (tmpList.Count)];
    } else {
        champion = champion.Trim ().ToLower ();
    }
    Console.Write (string.Format ("Champion {0} Selected \r\n", champion));
    if (skins.ContainsKey (champion)) {
        Console.WriteLine (string.Format ("Your random skin for {0} is: {1}\r\n", champion, skins [champion] [rnd.Next (skins [champion].Length)]));
    } else {
        Console.Clear ();
        Main (args);
    }
}
----------------------------------------

 static void Main(string[] args) 
         { 
            Console.Clear(); 
            Console.ForegroundColor = ConsoleColor.Gray; 
            List<string> skins = new List<string>(); 
            skins.Add("Academy"); 
            skins.Add("Challenger"); 
            skins.Add("Dynasty"); 
            skins.Add("Foxfire"); 
            skins.Add("Midnight"); 
            skins.Add("Popstar"); 
            skins.Add("Traditional"); 
            skins.Add("Acolyte"); 
            skins.Add("Dragon Fist"); 
            skins.Add("Musy Thai"); 
            skins.Add("Pool Party"); 
            skins.Add("SKT T1"); 
            skins.Add("Knockout"); 
            Console.WriteLine("Conor's Random League of Legends Skin Selector v0.1\r\n\r\n"); 
            Console.WriteLine("What champion would you like to select a skin for? \r\nPress enter for a random champion...    "); 
            var champion = Console.ReadLine(); 
            var rnd = new Random();  
            if (champion.Equals(string.Empty)) 
            { 
            string random = skins[rnd.Next(skins.Count)]; 
            Console.Write(string.Format("Champion {0} Selected \r\n", random)); 
            Console.WriteLine(string.Format("Your random skin for {0} is: {1}\r\n", random,skins[rnd.Next(skins.Count)])); 
             } 
            else 
            { 
            champion = champion.Trim().ToLower(); 
            string random = skins[rnd.Next(skins.Count)];  
            Console.Write(string.Format("Champion {0} Selected \r\n", random)); 
            Console.WriteLine(string.Format("Your random skin for {0} is: {1}\r\n", random,skins[rnd.Next(skins.Count)])); 
             } 
         } 
                                                                                             
  static void Main(string[] args) 
        { 
            Console.Clear(); 
            Console.ForegroundColor = ConsoleColor.Gray;
            Dictionary<string, List<string>> skins = new Dictionary<string, List<string>>();
            List<string> ahri = new List<string>();
            ahri.Add("Academy");
            ahri.Add("Challenger");
            ahri.Add("Dynasty");
            ahri.Add("Foxfire");
            ahri.Add("Midnight");
            ahri.Add("Popstar");
            skins.Add("ahri", ahri);
            List<string> leesin = new List<string>();
            leesin.Add("Traditional");
            leesin.Add("Acolyte");
            leesin.Add("Dragon Fist");
            leesin.Add("Musy Thai");
            leesin.Add("Pool Party");
            leesin.Add("SKT T1");
            leesin.Add("Knockout");
            skins.Add("leesin", leesin);
            Console.WriteLine("Conor's Random League of Legends Skin Selector v0.1\r\n\r\n");
            Console.WriteLine("What champion would you like to select a skin for? \r\nPress enter for a random champion...    ");
            var champion = Console.ReadLine();
            var rnd = new Random();
            if (champion.Equals(string.Empty))
            {
                var tmpList = Enumerable.ToList(skins.Keys);
                champion = tmpList[rnd.Next(tmpList.Count)];
            }
            else
            {
                champion = champion.Trim().ToLower();
            }
            Console.Write(string.Format("Champion {0} Selected \r\n", champion));
            if (skins.ContainsKey(champion))
            {
                Console.WriteLine(string.Format("Your random skin for {0} is: {1}\r\n", champion, skins[champion][rnd.Next(skins[champion].Count)]));
            }
            else
            {
                Console.Clear();
                Main(args);
            }
        } 
 static void Main (string [] args) {
    Console.Clear ();
    Console.ForegroundColor = ConsoleColor.Gray;
    Dictionary < string, List < string >> skins = new Dictionary < string, List < string >> ();
    List < string > ahri = new List < string > ();
    ahri.Add ("Academy");
    ahri.Add ("Challenger");
    ahri.Add ("Dynasty");
    ahri.Add ("Foxfire");
    ahri.Add ("Midnight");
    ahri.Add ("Popstar");
    skins.Add ("ahri", ahri);
    List < string > leesin = new List < string > ();
    leesin.Add ("Traditional");
    leesin.Add ("Acolyte");
    leesin.Add ("Dragon Fist");
    leesin.Add ("Musy Thai");
    leesin.Add ("Pool Party");
    leesin.Add ("SKT T1");
    leesin.Add ("Knockout");
    skins.Add ("leesin", leesin);
    Console.WriteLine ("Conor's Random League of Legends Skin Selector v0.1\r\n\r\n");
    Console.WriteLine ("What champion would you like to select a skin for? \r\nPress enter for a random champion...    ");
    var champion = Console.ReadLine ();
    var rnd = new Random ();
    if (champion.Equals (string.Empty)) {
        string [] tmpList = Enumerable.ToArray (skins.Keys);
        champion = tmpList [rnd.Next (tmpList.Length)];
    } else {
        champion = champion.Trim ().ToLower ();
    }
    Console.Write (string.Format ("Champion {0} Selected \r\n", champion));
    if (skins.ContainsKey (champion)) {
        Console.WriteLine (string.Format ("Your random skin for {0} is: {1}\r\n", champion, skins [champion] [rnd.Next (skins [champion].Count)]));
    } else {
        Console.Clear ();
        Main (args);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
346
1
Gpt3D_Clone346_1.cs 1 24
Gpt3D_Clone346_1.cs 25 150
----------------------------------------

static void Main (string [] args) {
    Console.Clear ();
    Console.ForegroundColor = ConsoleColor.Gray;
    Dictionary < string, string [] > skins = new Dictionary < string, string [] > ();
    skins.Add ("ahri", new string [] {"Academy", "Challenger", "Dynasty", "Foxfire", "Midnight", "Popstar"});
    skins.Add ("leesin", new string [] {"Traditional", "Acolyte", "Dragon Fist", "Musy Thai", "Pool Party", "SKT T1", "Knockout"});
    Console.WriteLine ("Conor's Random League of Legends Skin Selector v0.1\r\n\r\n");
    Console.WriteLine ("What champion would you like to select a skin for? \r\nPress enter for a random champion...    ");
    var champion = Console.ReadLine ();
    var rnd = new Random ();
    if (champion.Equals (string.Empty)) {
        var tmpList = Enumerable.ToList (skins.Keys);
        champion = tmpList [rnd.Next (tmpList.Count)];
    } else {
        champion = champion.Trim ().ToLower ();
    }
    Console.Write (string.Format ("Champion {0} Selected \r\n", champion));
    if (skins.ContainsKey (champion)) {
        Console.WriteLine (string.Format ("Your random skin for {0} is: {1}\r\n", champion, skins [champion] [rnd.Next (skins [champion].Length)]));
    } else {
        Console.Clear ();
        Main (args);
    }
}
----------------------------------------

 static void Main(string[] args) 
         { 
            Console.Clear(); 
            Console.ForegroundColor = ConsoleColor.Gray; 
            List<string> skins = new List<string>(); 
            skins.Add("Academy"); 
            skins.Add("Challenger"); 
            skins.Add("Dynasty"); 
            skins.Add("Foxfire"); 
            skins.Add("Midnight"); 
            skins.Add("Popstar"); 
            skins.Add("Traditional"); 
            skins.Add("Acolyte"); 
            skins.Add("Dragon Fist"); 
            skins.Add("Musy Thai"); 
            skins.Add("Pool Party"); 
            skins.Add("SKT T1"); 
            skins.Add("Knockout"); 
            Console.WriteLine("Conor's Random League of Legends Skin Selector v0.1\r\n\r\n"); 
            Console.WriteLine("What champion would you like to select a skin for? \r\nPress enter for a random champion...    "); 
            var champion = Console.ReadLine(); 
            var rnd = new Random();  
            if (champion.Equals(string.Empty)) 
            { 
            string random = skins[rnd.Next(skins.Count)]; 
            Console.Write(string.Format("Champion {0} Selected \r\n", random)); 
            Console.WriteLine(string.Format("Your random skin for {0} is: {1}\r\n", random,skins[rnd.Next(skins.Count)])); 
             } 
            else 
            { 
            champion = champion.Trim().ToLower(); 
            string random = skins[rnd.Next(skins.Count)];  
            Console.Write(string.Format("Champion {0} Selected \r\n", random)); 
            Console.WriteLine(string.Format("Your random skin for {0} is: {1}\r\n", random,skins[rnd.Next(skins.Count)])); 
             } 
         } 
                                                                                             
  static void Main(string[] args) 
        { 
            Console.Clear(); 
            Console.ForegroundColor = ConsoleColor.Gray;
            Dictionary<string, List<string>> skins = new Dictionary<string, List<string>>();
            List<string> ahri = new List<string>();
            ahri.Add("Academy");
            ahri.Add("Challenger");
            ahri.Add("Dynasty");
            ahri.Add("Foxfire");
            ahri.Add("Midnight");
            ahri.Add("Popstar");
            skins.Add("ahri", ahri);
            List<string> leesin = new List<string>();
            leesin.Add("Traditional");
            leesin.Add("Acolyte");
            leesin.Add("Dragon Fist");
            leesin.Add("Musy Thai");
            leesin.Add("Pool Party");
            leesin.Add("SKT T1");
            leesin.Add("Knockout");
            skins.Add("leesin", leesin);
            Console.WriteLine("Conor's Random League of Legends Skin Selector v0.1\r\n\r\n");
            Console.WriteLine("What champion would you like to select a skin for? \r\nPress enter for a random champion...    ");
            var champion = Console.ReadLine();
            var rnd = new Random();
            if (champion.Equals(string.Empty))
            {
                var tmpList = Enumerable.ToList(skins.Keys);
                champion = tmpList[rnd.Next(tmpList.Count)];
            }
            else
            {
                champion = champion.Trim().ToLower();
            }
            Console.Write(string.Format("Champion {0} Selected \r\n", champion));
            if (skins.ContainsKey(champion))
            {
                Console.WriteLine(string.Format("Your random skin for {0} is: {1}\r\n", champion, skins[champion][rnd.Next(skins[champion].Count)]));
            }
            else
            {
                Console.Clear();
                Main(args);
            }
        } 
 static void Main (string [] args) {
    Console.Clear ();
    Console.ForegroundColor = ConsoleColor.Gray;
    Dictionary < string, List < string >> skins = new Dictionary < string, List < string >> ();
    List < string > ahri = new List < string > ();
    ahri.Add ("Academy");
    ahri.Add ("Challenger");
    ahri.Add ("Dynasty");
    ahri.Add ("Foxfire");
    ahri.Add ("Midnight");
    ahri.Add ("Popstar");
    skins.Add ("ahri", ahri);
    List < string > leesin = new List < string > ();
    leesin.Add ("Traditional");
    leesin.Add ("Acolyte");
    leesin.Add ("Dragon Fist");
    leesin.Add ("Musy Thai");
    leesin.Add ("Pool Party");
    leesin.Add ("SKT T1");
    leesin.Add ("Knockout");
    skins.Add ("leesin", leesin);
    Console.WriteLine ("Conor's Random League of Legends Skin Selector v0.1\r\n\r\n");
    Console.WriteLine ("What champion would you like to select a skin for? \r\nPress enter for a random champion...    ");
    var champion = Console.ReadLine ();
    var rnd = new Random ();
    if (champion.Equals (string.Empty)) {
        string [] tmpList = Enumerable.ToArray (skins.Keys);
        champion = tmpList [rnd.Next (tmpList.Length)];
    } else {
        champion = champion.Trim ().ToLower ();
    }
    Console.Write (string.Format ("Champion {0} Selected \r\n", champion));
    if (skins.ContainsKey (champion)) {
        Console.WriteLine (string.Format ("Your random skin for {0} is: {1}\r\n", champion, skins [champion] [rnd.Next (skins [champion].Count)]));
    } else {
        Console.Clear ();
        Main (args);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
346
2
Gpt3D_Clone346_2.cs 1 24
Gpt3D_Clone346_2.cs 25 150
----------------------------------------

static void Main (string [] args) {
    Console.Clear ();
    Console.ForegroundColor = ConsoleColor.Gray;
    Dictionary < string, string [] > skins = new Dictionary < string, string [] > ();
    skins.Add ("ahri", new string [] {"Academy", "Challenger", "Dynasty", "Foxfire", "Midnight", "Popstar"});
    skins.Add ("leesin", new string [] {"Traditional", "Acolyte", "Dragon Fist", "Musy Thai", "Pool Party", "SKT T1", "Knockout"});
    Console.WriteLine ("Conor's Random League of Legends Skin Selector v0.1\r\n\r\n");
    Console.WriteLine ("What champion would you like to select a skin for? \r\nPress enter for a random champion...    ");
    var champion = Console.ReadLine ();
    var rnd = new Random ();
    if (champion.Equals (string.Empty)) {
        var tmpList = Enumerable.ToList (skins.Keys);
        champion = tmpList [rnd.Next (tmpList.Count)];
    } else {
        champion = champion.Trim ().ToLower ();
    }
    Console.Write (string.Format ("Champion {0} Selected \r\n", champion));
    if (skins.ContainsKey (champion)) {
        Console.WriteLine (string.Format ("Your random skin for {0} is: {1}\r\n", champion, skins [champion] [rnd.Next (skins [champion].Length)]));
    } else {
        Console.Clear ();
        Main (args);
    }
}
----------------------------------------

 static void Main(string[] args) 
         { 
            Console.Clear(); 
            Console.ForegroundColor = ConsoleColor.Gray; 
            List<string> skins = new List<string>(); 
            skins.Add("Academy"); 
            skins.Add("Challenger"); 
            skins.Add("Dynasty"); 
            skins.Add("Foxfire"); 
            skins.Add("Midnight"); 
            skins.Add("Popstar"); 
            skins.Add("Traditional"); 
            skins.Add("Acolyte"); 
            skins.Add("Dragon Fist"); 
            skins.Add("Musy Thai"); 
            skins.Add("Pool Party"); 
            skins.Add("SKT T1"); 
            skins.Add("Knockout"); 
            Console.WriteLine("Conor's Random League of Legends Skin Selector v0.1\r\n\r\n"); 
            Console.WriteLine("What champion would you like to select a skin for? \r\nPress enter for a random champion...    "); 
            var champion = Console.ReadLine(); 
            var rnd = new Random();  
            if (champion.Equals(string.Empty)) 
            { 
            string random = skins[rnd.Next(skins.Count)]; 
            Console.Write(string.Format("Champion {0} Selected \r\n", random)); 
            Console.WriteLine(string.Format("Your random skin for {0} is: {1}\r\n", random,skins[rnd.Next(skins.Count)])); 
             } 
            else 
            { 
            champion = champion.Trim().ToLower(); 
            string random = skins[rnd.Next(skins.Count)];  
            Console.Write(string.Format("Champion {0} Selected \r\n", random)); 
            Console.WriteLine(string.Format("Your random skin for {0} is: {1}\r\n", random,skins[rnd.Next(skins.Count)])); 
             } 
         } 
                                                                                             
  static void Main(string[] args) 
        { 
            Console.Clear(); 
            Console.ForegroundColor = ConsoleColor.Gray;
            Dictionary<string, List<string>> skins = new Dictionary<string, List<string>>();
            List<string> ahri = new List<string>();
            ahri.Add("Academy");
            ahri.Add("Challenger");
            ahri.Add("Dynasty");
            ahri.Add("Foxfire");
            ahri.Add("Midnight");
            ahri.Add("Popstar");
            skins.Add("ahri", ahri);
            List<string> leesin = new List<string>();
            leesin.Add("Traditional");
            leesin.Add("Acolyte");
            leesin.Add("Dragon Fist");
            leesin.Add("Musy Thai");
            leesin.Add("Pool Party");
            leesin.Add("SKT T1");
            leesin.Add("Knockout");
            skins.Add("leesin", leesin);
            Console.WriteLine("Conor's Random League of Legends Skin Selector v0.1\r\n\r\n");
            Console.WriteLine("What champion would you like to select a skin for? \r\nPress enter for a random champion...    ");
            var champion = Console.ReadLine();
            var rnd = new Random();
            if (champion.Equals(string.Empty))
            {
                var tmpList = Enumerable.ToList(skins.Keys);
                champion = tmpList[rnd.Next(tmpList.Count)];
            }
            else
            {
                champion = champion.Trim().ToLower();
            }
            Console.Write(string.Format("Champion {0} Selected \r\n", champion));
            if (skins.ContainsKey(champion))
            {
                Console.WriteLine(string.Format("Your random skin for {0} is: {1}\r\n", champion, skins[champion][rnd.Next(skins[champion].Count)]));
            }
            else
            {
                Console.Clear();
                Main(args);
            }
        } 
 static void Main (string [] args) {
    Console.Clear ();
    Console.ForegroundColor = ConsoleColor.Gray;
    Dictionary < string, List < string >> skins = new Dictionary < string, List < string >> ();
    List < string > ahri = new List < string > ();
    ahri.Add ("Academy");
    ahri.Add ("Challenger");
    ahri.Add ("Dynasty");
    ahri.Add ("Foxfire");
    ahri.Add ("Midnight");
    ahri.Add ("Popstar");
    skins.Add ("ahri", ahri);
    List < string > leesin = new List < string > ();
    leesin.Add ("Traditional");
    leesin.Add ("Acolyte");
    leesin.Add ("Dragon Fist");
    leesin.Add ("Musy Thai");
    leesin.Add ("Pool Party");
    leesin.Add ("SKT T1");
    leesin.Add ("Knockout");
    skins.Add ("leesin", leesin);
    Console.WriteLine ("Conor's Random League of Legends Skin Selector v0.1\r\n\r\n");
    Console.WriteLine ("What champion would you like to select a skin for? \r\nPress enter for a random champion...    ");
    var champion = Console.ReadLine ();
    var rnd = new Random ();
    if (champion.Equals (string.Empty)) {
        string [] tmpList = Enumerable.ToArray (skins.Keys);
        champion = tmpList [rnd.Next (tmpList.Length)];
    } else {
        champion = champion.Trim ().ToLower ();
    }
    Console.Write (string.Format ("Champion {0} Selected \r\n", champion));
    if (skins.ContainsKey (champion)) {
        Console.WriteLine (string.Format ("Your random skin for {0} is: {1}\r\n", champion, skins [champion] [rnd.Next (skins [champion].Count)]));
    } else {
        Console.Clear ();
        Main (args);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
350
0
Gpt3D_Clone350_0.cs 1 11
Gpt3D_Clone350_0.cs 12 39
----------------------------------------

public override void WellKnownBinary (Stream sout) {
    sout.WriteByte (BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0);
    sout.Write (GeoBase.PolygonWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.Rings.Count), 0, 4);
    foreach (var ring in this.Rings) {
        sout.Write (BitConverter.GetBytes (ring.Count), 0, 4);
        foreach (var position in ring) {
            position.WellKnownBinary (sout);
        }
    }
}
----------------------------------------

 public override void WellKnownBinary (Stream sout) {
    byte byteVal = BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0;
    sout.WriteByte(byteVal);
    sout.Write (GeoBase.PolygonWkbs, 0, 4);
  
    //Write the Length
    sout.Write (BitConverter.GetBytes (this.Rings.Count), 0, 4);
    
    //Write position values
    foreach (var ring in this.Rings){
        var ringWriter = new BinaryWriter(sout);
        ringWriter.Write(ring.Count);
        foreach(var position in ring){
            var posBuffer = new MemoryStream();
            var bufferWriter  = new BinaryWriter(posBuffer);
            bufferWriter.Write(position.X);
            bufferWriter.Write(position.Y);
            bufferWriter.Write(position.Z); 
            // Write only required bytes
            sout.Write(posBuffer.GetBuffer(), 0, 8);
            posBuffer.Close();
            bufferWriter.Close();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
350
1
Gpt3D_Clone350_1.cs 1 11
Gpt3D_Clone350_1.cs 12 35
----------------------------------------

public override void WellKnownBinary (Stream sout) {
    sout.WriteByte (BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0);
    sout.Write (GeoBase.PolygonWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.Rings.Count), 0, 4);
    foreach (var ring in this.Rings) {
        sout.Write (BitConverter.GetBytes (ring.Count), 0, 4);
        foreach (var position in ring) {
            position.WellKnownBinary (sout);
        }
    }
}
----------------------------------------

 public override void WellKnownBinary (Stream sout) {
    sout.WriteByte (BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0);
    sout.Write (GeoBase.PolygonWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.Rings.Count), 0, 4);
    // Writing individual bytes
    foreach (var ring in this.Rings) {
        byte[] byteArrayIn = BitConverter.GetBytes (ring.Count);
        byte byteZeroIn = byteArrayIn[0];
        byte byteOneIn = byteArrayIn[1];
        byte byteTwoIn = byteArrayIn[2];
        byte byteThreeIn = byteArrayIn[3];
        sout.WriteByte(byteZeroIn);
        sout.WriteByte(byteOneIn);
        sout.WriteByte(byteTwoIn);
        sout.WriteByte(byteThreeIn);
        foreach (var position in ring) {
            position.WellKnownBinary (sout);
        }  
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
350
2
Gpt3D_Clone350_2.cs 1 11
Gpt3D_Clone350_2.cs 12 33
----------------------------------------

public override void WellKnownBinary (Stream sout) {
    sout.WriteByte (BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0);
    sout.Write (GeoBase.PolygonWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.Rings.Count), 0, 4);
    foreach (var ring in this.Rings) {
        sout.Write (BitConverter.GetBytes (ring.Count), 0, 4);
        foreach (var position in ring) {
            position.WellKnownBinary (sout);
        }
    }
}
----------------------------------------

 public override void WellKnownBinary (Stream sout) {
    byte byteVal = BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0;
    sout.WriteByte(byteVal);
    sout.Write (GeoBase.PolygonWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.Rings.Count), 0, 4);
    foreach (var ring in this.Rings) {
        sout.Write (BitConverter.GetBytes (ring.Count), 0, 4);
        foreach (var position in ring) {
            var bytes = BitConverter.GetBytes(position.X);
            bytes[0] &= 252;
            sout.Write(bytes,0,8);
            bytes = BitConverter.GetBytes(position.Y);
            bytes[0] &= 252;
            sout.Write(bytes,0,8);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
350
3
Gpt3D_Clone350_3.cs 1 11
Gpt3D_Clone350_3.cs 12 37
----------------------------------------

public override void WellKnownBinary (Stream sout) {
    sout.WriteByte (BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0);
    sout.Write (GeoBase.PolygonWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.Rings.Count), 0, 4);
    foreach (var ring in this.Rings) {
        sout.Write (BitConverter.GetBytes (ring.Count), 0, 4);
        foreach (var position in ring) {
            position.WellKnownBinary (sout);
        }
    }
}
----------------------------------------

 public override void WellKnownBinary (Stream sout) {
    sout.WriteByte (BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0);
    sout.Write (GeoBase.PolygonWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.Rings.Count), 0, 4);
    // Writing bytes using BitArray
    foreach (var ring in this.Rings) {
        byte[] byteArrayIn = BitConverter.GetBytes (ring.Count);
        byte[] res = new byte[4];
        for (int i = 0; i < byteArrayIn.Length; i++)
        {
            BitArray ba = new BitArray(new byte[] { byteArrayIn[i] });
            for (int j = 0; j < 8; j++)
            {
                res[i * 8 + j] = ba[j] ? (byte)1 : (byte)0;
            }
        }
        sout.Write (res, 0, 4);
        foreach (var position in ring) {
            position.WellKnownBinary (sout);
        }  
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
351
0
Gpt3D_Clone351_0.cs 1 11
Gpt3D_Clone351_0.cs 12 59
----------------------------------------

public override void WellKnownBinary (Stream sout) {
    sout.WriteByte (BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0);
    sout.Write (GeoBase.PolygonWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.Rings.Count), 0, 4);
    foreach (var ring in this.Rings) {
        sout.Write (BitConverter.GetBytes (ring.Count), 0, 4);
        foreach (var position in ring) {
            position.WellKnownBinary (sout);
        }
    }
}
----------------------------------------

 public override void WellKnownBinary (Stream sout){ 
            if (BitConverter.IsLittleEndian)
            {
                sout.WriteByte(1);
            }
            else
            {
                sout.WriteByte(0);
            }
            sout.Write(GeoBase.PolygonWkbs, 0, 4);
            int ringCount = this.Rings.Count;
            // Split the integer into 4 bytes
            int byte1 = ringCount & 0x000000FF;
            int byte2 = (ringCount >> 8) & 0x000000FF;
            int byte3 = (ringCount >> 16) & 0x000000FF;
            int byte4 = (ringCount >> 24) & 0x000000FF;
            sout.WriteByte((byte) byte1);
            sout.WriteByte((byte) byte2);
            sout.WriteByte((byte) byte3);
            sout.WriteByte((byte) byte4);
            foreach (var ring in this.Rings)
            {
                int ringLength = ring.Count;
                // Split the integer into 4 bytes
                byte1 = ringLength & 0x000000FF;
                byte2 = (ringLength >> 8) & 0x000000FF;
                byte3 = (ringLength >> 16) & 0x000000FF;
                byte4 = (ringLength >> 24) & 0x000000FF;
                sout.WriteByte((byte) byte1);
                sout.WriteByte((byte) byte2);
                sout.WriteByte((byte) byte3);
                sout.WriteByte((byte) byte4);
                foreach (var position in ring)
                {
                    position.WellKnownBinary(sout);
                }
            }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
351
1
Gpt3D_Clone351_1.cs 1 11
Gpt3D_Clone351_1.cs 12 40
----------------------------------------

public override void WellKnownBinary (Stream sout) {
    sout.WriteByte (BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0);
    sout.Write (GeoBase.PolygonWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.Rings.Count), 0, 4);
    foreach (var ring in this.Rings) {
        sout.Write (BitConverter.GetBytes (ring.Count), 0, 4);
        foreach (var position in ring) {
            position.WellKnownBinary (sout);
        }
    }
}
----------------------------------------

 public override void WellKnownBinary (Stream sout){ 
                int value;
                if (BitConverter.IsLittleEndian == true) {
                    value = 0x01;
                } else {
                    value = 0x00;
                }
                byte[] byteValue = BitConverter.GetBytes(value);
                sout.Write(byteValue, 0, 1);
                byte[] polygonWkbs = GeoBase.PolygonWkbs;
                sout.Write(polygonWkbs, 0, 4);
                int ringCount = this.Rings.Count;
                byte[] ringCountInBytes = BitConverter.GetBytes(ringCount);
                sout.Write(ringCountInBytes, 0, 4);
                int ringLength;
                foreach (var ring in this.Rings) {
                    ringLength = ring.Count;
                    byte[] ringLengthInBytes = BitConverter.GetBytes(ringLength);
                    sout.Write(ringLengthInBytes, 0, 4);
                    foreach (var position in ring) {
                        position.WellKnownBinary(sout);
                    }  
                }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
351
2
Gpt3D_Clone351_2.cs 1 11
Gpt3D_Clone351_2.cs 12 36
----------------------------------------

public override void WellKnownBinary (Stream sout) {
    sout.WriteByte (BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0);
    sout.Write (GeoBase.PolygonWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.Rings.Count), 0, 4);
    foreach (var ring in this.Rings) {
        sout.Write (BitConverter.GetBytes (ring.Count), 0, 4);
        foreach (var position in ring) {
            position.WellKnownBinary (sout);
        }
    }
}
----------------------------------------

 public override void WellKnownBinary(Stream sout) {
                sout.WriteByte(BitConverter.IsLittleEndian ? 0 : 1);
                sout.WriteByte(GeoBase.PolygonWkbs[0]);
                sout.WriteByte(GeoBase.PolygonWkbs[1]);
                sout.WriteByte(GeoBase.PolygonWkbs[2]);
                sout.WriteByte(GeoBase.PolygonWkbs[3]);
                sout.WriteByte(BitConverter.GetBytes(this.Rings.Count)[0]);
                sout.WriteByte(BitConverter.GetBytes(this.Rings.Count)[1]);
                sout.WriteByte(BitConverter.GetBytes(this.Rings.Count)[2]);
                sout.WriteByte(BitConverter.GetBytes(this.Rings.Count)[3]);
                
                foreach (var ring in this.Rings)
                {
                    sout.WriteByte(BitConverter.GetBytes(ring.Count)[0]);
                    sout.WriteByte(BitConverter.GetBytes(ring.Count)[1]);
                    sout.WriteByte(BitConverter.GetBytes(ring.Count)[2]);
                    sout.WriteByte(BitConverter.GetBytes(ring.Count)[3]);
                    foreach (var position in ring)
                    {
                        position.WellKnownBinary(sout);
                    }
                }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
351
3
Gpt3D_Clone351_3.cs 1 11
Gpt3D_Clone351_3.cs 12 39
----------------------------------------

public override void WellKnownBinary (Stream sout) {
    sout.WriteByte (BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0);
    sout.Write (GeoBase.PolygonWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.Rings.Count), 0, 4);
    foreach (var ring in this.Rings) {
        sout.Write (BitConverter.GetBytes (ring.Count), 0, 4);
        foreach (var position in ring) {
            position.WellKnownBinary (sout);
        }
    }
}
----------------------------------------

 public override void WellKnownBinary (Stream sout){
                if (BitConverter.IsLittleEndian == true) { 
                    sout.WriteByte(0x00000001);
                } else {
                    sout.WriteByte(0x00);
                }
                sout.Write (GeoBase.PolygonWkbs, 0, 4);
                int ringCount = this.Rings.Count;
                int ringLength = 0;
                foreach (var ring in this.Rings) {
                    ringLength = ring.Count;
                }
                int[] binaryStyleRingCount = new int[4] { ringCount >> 24, (ringCount & 0x00FF0000) >> 16, (ringCount & 0x0000FF00) >> 8, ringCount & 0x000000FF };
                int[] binaryStyleRingLength = new int[4] { ringLength >> 24, (ringLength & 0x00FF0000) >> 16, (ringLength & 0x0000FF00) >> 8, ringLength & 0x000000FF };
                sout.Write (BitConverter.GetBytes (binaryStyleRingCount), 0, 4);
                foreach (var ring in this.Rings) {
                    sout.Write (BitConverter.GetBytes (binaryStyleRingLength), 0, 4);
                    foreach (var position in ring) {
                        position.WellKnownBinary (sout);
                    }
                } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
351
4
Gpt3D_Clone351_4.cs 1 11
Gpt3D_Clone351_4.cs 12 32
----------------------------------------

public override void WellKnownBinary (Stream sout) {
    sout.WriteByte (BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0);
    sout.Write (GeoBase.PolygonWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.Rings.Count), 0, 4);
    foreach (var ring in this.Rings) {
        sout.Write (BitConverter.GetBytes (ring.Count), 0, 4);
        foreach (var position in ring) {
            position.WellKnownBinary (sout);
        }
    }
}
----------------------------------------

 public override void WellKnownBinary (Stream sout){
            if (BitConverter.IsLittleEndian) {
                sout.WriteByte(0x01);
            } else {
                sout.WriteByte(0x00);
            }
            sout.Write(GeoBase.PolygonWkbs, 0, 4);
            byte[] ringCountInBytes = BitConverter.GetBytes(this.Rings.Count);
            sout.Write(ringCountInBytes, 0, 4);
            int ringLength;
            foreach(var ring in this.Rings) {
                ringLength = ring.Count;
                byte[] ringLengthInBytes = BitConverter.GetBytes(ringLength);
                sout.Write(ringLengthInBytes, 0, 4);
                foreach (var position in ring) {
                    position.WellKnownBinary(sout);
                }
            }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
351
5
Gpt3D_Clone351_5.cs 1 11
Gpt3D_Clone351_5.cs 12 33
----------------------------------------

public override void WellKnownBinary (Stream sout) {
    sout.WriteByte (BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0);
    sout.Write (GeoBase.PolygonWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.Rings.Count), 0, 4);
    foreach (var ring in this.Rings) {
        sout.Write (BitConverter.GetBytes (ring.Count), 0, 4);
        foreach (var position in ring) {
            position.WellKnownBinary (sout);
        }
    }
}
----------------------------------------

 public override void WellKnownBinary(Stream sout)  
{  
            bool littleEndian= BitConverter.IsLittleEndian;
            sout.Write(BitConverter.GetBytes (littleEndian ? (byte) 1 : (byte) 0), 0 , 1);
            sout.Write (GeoBase.PolygonWkbs, 0, 4);
            int ringsCount = this.Rings.Count;
            int[]ringsCountValues = new int[] { ringsCount & 0xFF, (ringsCount >> 8) & 0xFF, (ringsCount >> 16 & 0xFF), (ringsCount >> 24 & 0xFF) };
            sout.Write(BitConverter.GetBytes(ringsCountValues), 0, 4);
            foreach(var ring in this.Rings) 
            {
                int ringCount = ring.Count;
                int[]ringCountValues = new int[] { ringCount & 0xFF, (ringCount >> 8) & 0xFF, (ringCount >> 16 & 0xFF), (ringCount >> 24 & 0xFF) };
                sout.Write(BitConverter.GetBytes(ringCountValues), 0, 4);
                foreach (var position in ring)
                {
                    position.WellKnownBinary(sout);
                }
            }
   
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
351
6
Gpt3D_Clone351_6.cs 1 11
Gpt3D_Clone351_6.cs 12 28
----------------------------------------

public override void WellKnownBinary (Stream sout) {
    sout.WriteByte (BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0);
    sout.Write (GeoBase.PolygonWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.Rings.Count), 0, 4);
    foreach (var ring in this.Rings) {
        sout.Write (BitConverter.GetBytes (ring.Count), 0, 4);
        foreach (var position in ring) {
            position.WellKnownBinary (sout);
        }
    }
}
----------------------------------------

 public override void WellKnownBinary (Stream sout){
            sout.WriteByte((BitConverter.IsLittleEndian) ? (byte)1 : (byte)0);
            sout.Write(GeoBase.PolygonWkbs, 0, 4);
            int ringCount = this.Rings.Count;
            int[] ringCountValues = new int[4] { ringCount >> 24, (ringCount & 0x00FF0000) >> 16, (ringCount & 0x0000FF00) >> 8, ringCount & 0x000000FF };
            sout.Write(BitConverter.GetBytes(ringCountValues), 0, 4);
            foreach (var ring in this.Rings) {
                    int ringCountInternal = ring.Count;
                    int[] ringCountInternalValues = new int[4] { ringCountInternal >> 24, (ringCountInternal & 0x00FF0000) >> 16, (ringCountInternal & 0x0000FF00) >> 8, ringCountInternal & 0x000000FF };
                    sout.Write (BitConverter.GetBytes (ringCountInternalValues), 0, 4);
                    foreach (var position in ring) {
                    position.WellKnownBinary (sout);
                    }
                }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
351
7
Gpt3D_Clone351_7.cs 1 11
Gpt3D_Clone351_7.cs 12 40
----------------------------------------

public override void WellKnownBinary (Stream sout) {
    sout.WriteByte (BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0);
    sout.Write (GeoBase.PolygonWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.Rings.Count), 0, 4);
    foreach (var ring in this.Rings) {
        sout.Write (BitConverter.GetBytes (ring.Count), 0, 4);
        foreach (var position in ring) {
            position.WellKnownBinary (sout);
        }
    }
}
----------------------------------------

 public override void WellKnownBinary(Stream sout){
            sout.Write(BitConverter.GetBytes(BitConverter.IsLittleEndian ? 1 : 0), 0, 1);
            sout.Write(GeoBase.PolygonWkbs, 0, 4);
            int ringCount = this.Rings.Count;
            byte[] ringCountBytes = {
                (byte) (ringCount & 0xff),
                (byte) (ringCount >> 8 & 0xFF),
                (byte) (ringCount >> 16 & 0xFF),
                (byte) (ringCount >> 24 & 0xFF)
            };
            sout.Write(ringCountBytes, 0, 4);
            foreach (var ring in this.Rings) {
                int ringLength = ring.Count;
                byte[] ringLengthBytes = {
                    (byte) (ringLength & 0xff),
                    (byte) (ringLength >> 8 & 0xFF),
                    (byte) (ringLength >> 16 & 0xFF),
                    (byte) (ringLength >> 24 & 0xFF)
                };
                sout.Write(ringLengthBytes, 0, 4);
                foreach (var position in ring) {
                    position.WellKnownBinary(sout);
                }
            }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
352
0
Gpt3D_Clone352_0.cs 1 11
Gpt3D_Clone352_0.cs 12 39
----------------------------------------

public override void WellKnownBinary (Stream sout) {
    byte order = BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0;
    sout.WriteByte (order);
    sout.Write (GeoBase.MultiPointWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.Points.Count), 0, 4);
    foreach (var point in this.Points) {
        sout.WriteByte (order);
        sout.Write (GeoBase.PointWkbs, 0, 4);
        point.WellKnownBinary (sout);
    }
}
----------------------------------------

	public override void WellKnownBinary (Stream sout) {
        // Determine ordering for bytes
    if (BitConverter.IsLittleEndian) {
        sout.WriteByte((byte)1);
    } else {
        sout.WriteByte((byte)0);
    }
    // Write MultiPoint WKB
    sout.Write (GeoBase.MultiPointWkbs, 0, 4);
    // Write point count as array of bytes
    sout.Write (BitConverter.GetBytes (this.Points.Count), 0, 4); 
    // Iterate through points and write Point WKBs
    foreach (var point in this.Points) {
        if (BitConverter.IsLittleEndian) {
            sout.WriteByte((byte)1);
        } else {
            sout.WriteByte((byte)0);
        }
        sout.Write (GeoBase.PointWkbs, 0, 4); 
        point.WellKnownBinary (sout);
    }   
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
352
1
Gpt3D_Clone352_1.cs 1 11
Gpt3D_Clone352_1.cs 12 32
----------------------------------------

public override void WellKnownBinary (Stream sout) {
    byte order = BitConverter.IsLittleEndian ? (byte) 1 : (byte) 0;
    sout.WriteByte (order);
    sout.Write (GeoBase.MultiPointWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.Points.Count), 0, 4);
    foreach (var point in this.Points) {
        sout.WriteByte (order);
        sout.Write (GeoBase.PointWkbs, 0, 4);
        point.WellKnownBinary (sout);
    }
}
----------------------------------------

	public override void WellKnownBinary (Stream sout) {
    byte order;
    // Determine ordering for bytes
    if (BitConverter.IsLittleEndian){
        order = (byte) 1;
    }
    else {
        order = (byte) 0;
    }
    sout.WriteByte (order);
    sout.Write (GeoBase.MultiPointWkbs, 0, 4);
    sout.Write (BitConverter.GetBytes (this.Points.Count), 0, 4);
    for (int i=0;i<this.Points.Count;i++)
    {
        sout.WriteByte (order);
        sout.Write (GeoBase.PointWkbs, 0, 4);
        this.Points[i].WellKnownBinary(sout);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
362
4
Gpt3D_Clone362_4.cs 1 15
Gpt3D_Clone362_4.cs 16 23
----------------------------------------

public void WriteXml (System.Xml.XmlWriter writer) {
    XmlSerializer keySerializer = new XmlSerializer (typeof (TKey));
    XmlSerializer valueSerializer = new XmlSerializer (typeof (TValue));
    foreach (TKey key in this.Keys) {
        writer.WriteStartElement ("item");
        writer.WriteStartElement ("key");
        keySerializer.Serialize (writer, key);
        writer.WriteEndElement ();
        writer.WriteStartElement ("value");
        TValue value = this [key];
        valueSerializer.Serialize (writer, value);
        writer.WriteEndElement ();
        writer.WriteEndElement ();
    }
}
----------------------------------------

	public void SaveXMLtoFile (System.Xml.XmlWriter writer) {
    XmlSerializer serializer = new XmlSerializer (typeof (System.Collections.Generic.Dictionary<TKey, TValue>));
    TextWriter tw = new StreamWriter (Path.GetFullPath (path), true);
    serializer.Serialize (tw, this);
    tw.Close ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
362
5
Gpt3D_Clone362_5.cs 1 15
Gpt3D_Clone362_5.cs 16 23
----------------------------------------

public void WriteXml (System.Xml.XmlWriter writer) {
    XmlSerializer keySerializer = new XmlSerializer (typeof (TKey));
    XmlSerializer valueSerializer = new XmlSerializer (typeof (TValue));
    foreach (TKey key in this.Keys) {
        writer.WriteStartElement ("item");
        writer.WriteStartElement ("key");
        keySerializer.Serialize (writer, key);
        writer.WriteEndElement ();
        writer.WriteStartElement ("value");
        TValue value = this [key];
        valueSerializer.Serialize (writer, value);
        writer.WriteEndElement ();
        writer.WriteEndElement ();
    }
}
----------------------------------------

	public void GenerateXmlFileToStream(System.Xml.XmlWriter writer) {
    XmlSerializer serializer = new XmlSerializer(typeof(System.Collections.Generic.Dictionary<TKey, TValue>));
    StreamReader sr = new StreamReader(Path.GetFullPath(path));
    serializer.Serialize(sr, this);
    sr.Close();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
362
6
Gpt3D_Clone362_6.cs 1 15
Gpt3D_Clone362_6.cs 16 23
----------------------------------------

public void WriteXml (System.Xml.XmlWriter writer) {
    XmlSerializer keySerializer = new XmlSerializer (typeof (TKey));
    XmlSerializer valueSerializer = new XmlSerializer (typeof (TValue));
    foreach (TKey key in this.Keys) {
        writer.WriteStartElement ("item");
        writer.WriteStartElement ("key");
        keySerializer.Serialize (writer, key);
        writer.WriteEndElement ();
        writer.WriteStartElement ("value");
        TValue value = this [key];
        valueSerializer.Serialize (writer, value);
        writer.WriteEndElement ();
        writer.WriteEndElement ();
    }
}
----------------------------------------

	public void WriteXmlToStream (System.Xml.XmlWriter writer) {
    XmlSerializer serializer = new XmlSerializer (typeof (System.Collections.Generic.Dictionary<TKey, TValue>));
    StreamWriter sw = new StreamWriter (Path.GetFullPath (path));
    serializer.Serialize (sw, this);
    sw.Close ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
362
7
Gpt3D_Clone362_7.cs 1 15
Gpt3D_Clone362_7.cs 16 24
----------------------------------------

public void WriteXml (System.Xml.XmlWriter writer) {
    XmlSerializer keySerializer = new XmlSerializer (typeof (TKey));
    XmlSerializer valueSerializer = new XmlSerializer (typeof (TValue));
    foreach (TKey key in this.Keys) {
        writer.WriteStartElement ("item");
        writer.WriteStartElement ("key");
        keySerializer.Serialize (writer, key);
        writer.WriteEndElement ();
        writer.WriteStartElement ("value");
        TValue value = this [key];
        valueSerializer.Serialize (writer, value);
        writer.WriteEndElement ();
        writer.WriteEndElement ();
    }
}
----------------------------------------

	public void WriteXmlToTextWriter (System.Xml.XmlWriter writer) {
    XmlSerializer serializer = new XmlSerializer (typeof (System.Collections.Generic.Dictionary<TKey, TValue>));
    StringWriter sw = new StringWriter ();
    serializer.Serialize (sw, this);
    sw.Close ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
362
8
Gpt3D_Clone362_8.cs 1 15
Gpt3D_Clone362_8.cs 16 23
----------------------------------------

public void WriteXml (System.Xml.XmlWriter writer) {
    XmlSerializer keySerializer = new XmlSerializer (typeof (TKey));
    XmlSerializer valueSerializer = new XmlSerializer (typeof (TValue));
    foreach (TKey key in this.Keys) {
        writer.WriteStartElement ("item");
        writer.WriteStartElement ("key");
        keySerializer.Serialize (writer, key);
        writer.WriteEndElement ();
        writer.WriteStartElement ("value");
        TValue value = this [key];
        valueSerializer.Serialize (writer, value);
        writer.WriteEndElement ();
        writer.WriteEndElement ();
    }
}
----------------------------------------

	public void WriteXmlToFile (System.Xml.XmlWriter writer) {
    XmlSerializer serializer = new XmlSerializer (typeof (System.Collections.Generic.Dictionary<TKey, TValue>));
    FileStream fs = new FileStream (Path.GetFullPath (path), FileMode.Create);
    serializer.Serialize (fs, this);
    fs.Close ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
365
2
Gpt3D_Clone365_2.cs 1 24
Gpt3D_Clone365_2.cs 25 43
----------------------------------------

protected override void WndProc (ref Message m) {
    const int WM_NCLBUTTONDOWN = 0x00A1;
    const int WM_NCLBUTTONUP = 0x00A2;
    const int HTCLOSE = 20;
    if (m.Msg == WM_NCLBUTTONDOWN) {
        switch ((int) m.WParam) {
            case HTCLOSE :
                break;
            default :
                base.WndProc (ref m);
                break;
        }
    } else {
        if (m.Msg == WM_NCLBUTTONUP) {
            switch ((int) m.WParam) {
                case HTCLOSE :
                    Trace.WriteLine ("Close Button clicked");
                    Close ();
                    break;
            }
        }
        base.WndProc (ref m);
    }
}
----------------------------------------

 protected override void WndProc (ref Message m) {
    const int WM_NCLBUTTONDOWN = 0x00A1;
    const int WM_NCLBUTTONUP = 0x00A2;
    const int HTCLOSE = 20;
    if (m.Msg == WM_NCLBUTTONDOWN) {
        if ((int) m.WParam == HTCLOSE) {
            Trace.WriteLine ("Close Button clicked");
            Close ();
        }
    }
    else if (m.Msg == WM_NCLBUTTONUP) {
        if ((int) m.WParam == HTCLOSE)
            Trace.WriteLine ("Close Button clicked");
            Close ();
    }
    base.WndProc (ref m);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
365
3
Gpt3D_Clone365_3.cs 1 24
Gpt3D_Clone365_3.cs 25 41
----------------------------------------

protected override void WndProc (ref Message m) {
    const int WM_NCLBUTTONDOWN = 0x00A1;
    const int WM_NCLBUTTONUP = 0x00A2;
    const int HTCLOSE = 20;
    if (m.Msg == WM_NCLBUTTONDOWN) {
        switch ((int) m.WParam) {
            case HTCLOSE :
                break;
            default :
                base.WndProc (ref m);
                break;
        }
    } else {
        if (m.Msg == WM_NCLBUTTONUP) {
            switch ((int) m.WParam) {
                case HTCLOSE :
                    Trace.WriteLine ("Close Button clicked");
                    Close ();
                    break;
            }
        }
        base.WndProc (ref m);
    }
}
----------------------------------------

 protected override void WndProc (ref Message m) {
    const int WM_NCLBUTTONDOWN = 0x00A1;
    const int WM_NCLBUTTONUP = 0x00A2;
    const int HTCLOSE = 20;
    if (m.Msg == WM_NCLBUTTONDOWN || m.Msg == WM_NCLBUTTONUP) {
        switch (m.WParam.ToInt32()) {
            case HTCLOSE:
                Trace.WriteLine("Close Button clicked");
                Close();
                break;
        }
    }
    else
        base.WndProc (ref m);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
365
4
Gpt3D_Clone365_4.cs 1 24
Gpt3D_Clone365_4.cs 25 41
----------------------------------------

protected override void WndProc (ref Message m) {
    const int WM_NCLBUTTONDOWN = 0x00A1;
    const int WM_NCLBUTTONUP = 0x00A2;
    const int HTCLOSE = 20;
    if (m.Msg == WM_NCLBUTTONDOWN) {
        switch ((int) m.WParam) {
            case HTCLOSE :
                break;
            default :
                base.WndProc (ref m);
                break;
        }
    } else {
        if (m.Msg == WM_NCLBUTTONUP) {
            switch ((int) m.WParam) {
                case HTCLOSE :
                    Trace.WriteLine ("Close Button clicked");
                    Close ();
                    break;
            }
        }
        base.WndProc (ref m);
    }
}
----------------------------------------

 protected override void WndProc (ref Message m) {
    const int WM_NCLBUTTONDOWN = 0x00A1;
    const int WM_NCLBUTTONUP = 0x00A2;
    const int HTCLOSE = 20;
    if (m.Msg == WM_NCLBUTTONDOWN || m.Msg == WM_NCLBUTTONUP) {
        switch (m.WParam) {
            case (IntPtr)HTCLOSE:
                Trace.WriteLine("Close Button clicked");
                Close();
                break;
        }
    } else {
        base.WndProc (ref m);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
365
5
Gpt3D_Clone365_5.cs 1 24
Gpt3D_Clone365_5.cs 25 41
----------------------------------------

protected override void WndProc (ref Message m) {
    const int WM_NCLBUTTONDOWN = 0x00A1;
    const int WM_NCLBUTTONUP = 0x00A2;
    const int HTCLOSE = 20;
    if (m.Msg == WM_NCLBUTTONDOWN) {
        switch ((int) m.WParam) {
            case HTCLOSE :
                break;
            default :
                base.WndProc (ref m);
                break;
        }
    } else {
        if (m.Msg == WM_NCLBUTTONUP) {
            switch ((int) m.WParam) {
                case HTCLOSE :
                    Trace.WriteLine ("Close Button clicked");
                    Close ();
                    break;
            }
        }
        base.WndProc (ref m);
    }
}
----------------------------------------

 protected override void WndProc (ref Message m) {
    const int WM_NCLBUTTONDOWN = 0x00A1;
    const int WM_NCLBUTTONUP = 0x00A2;
    const int HTCLOSE = 20;
    if (m.Msg == WM_NCLBUTTONDOWN || m.Msg == WM_NCLBUTTONUP) {
        if ((int)m.WParam == HTCLOSE) { 
            Trace.WriteLine("Close Button clicked");
            Close();
        } else {
            base.WndProc (ref m);
        }
    } else {
        base.WndProc (ref m);
    }
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
365
6
Gpt3D_Clone365_6.cs 1 24
Gpt3D_Clone365_6.cs 25 39
----------------------------------------

protected override void WndProc (ref Message m) {
    const int WM_NCLBUTTONDOWN = 0x00A1;
    const int WM_NCLBUTTONUP = 0x00A2;
    const int HTCLOSE = 20;
    if (m.Msg == WM_NCLBUTTONDOWN) {
        switch ((int) m.WParam) {
            case HTCLOSE :
                break;
            default :
                base.WndProc (ref m);
                break;
        }
    } else {
        if (m.Msg == WM_NCLBUTTONUP) {
            switch ((int) m.WParam) {
                case HTCLOSE :
                    Trace.WriteLine ("Close Button clicked");
                    Close ();
                    break;
            }
        }
        base.WndProc (ref m);
    }
}
----------------------------------------

 protected override void WndProc (ref Message m) {
    const int WM_NCLBUTTONDOWN = 0x00A1;
    const int WM_NCLBUTTONUP = 0x00A2;
    const int HTCLOSE = 20;
    if (m.Msg == WM_NCLBUTTONDOWN || m.Msg == WM_NCLBUTTONUP) {
        if ((int)m.WParam == HTCLOSE)  {
            Trace.WriteLine("Close Button clicked");
            Close();
        }
    } else {
        base.WndProc (ref m);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
365
7
Gpt3D_Clone365_7.cs 1 24
Gpt3D_Clone365_7.cs 25 38
----------------------------------------

protected override void WndProc (ref Message m) {
    const int WM_NCLBUTTONDOWN = 0x00A1;
    const int WM_NCLBUTTONUP = 0x00A2;
    const int HTCLOSE = 20;
    if (m.Msg == WM_NCLBUTTONDOWN) {
        switch ((int) m.WParam) {
            case HTCLOSE :
                break;
            default :
                base.WndProc (ref m);
                break;
        }
    } else {
        if (m.Msg == WM_NCLBUTTONUP) {
            switch ((int) m.WParam) {
                case HTCLOSE :
                    Trace.WriteLine ("Close Button clicked");
                    Close ();
                    break;
            }
        }
        base.WndProc (ref m);
    }
}
----------------------------------------

 protected override void WndProc (ref Message m) {
    const int WM_NCLBUTTONDOWN = 0x00A1;
    const int WM_NCLBUTTONUP = 0x00A2;
    const int HTCLOSE = 20;
    if (m.Msg == WM_NCLBUTTONDOWN || m.Msg == WM_NCLBUTTONUP) {
        if ((int)m.WParam == HTCLOSE) 
            Trace.WriteLine("Close Button clicked");
            Close();
    } else {
        base.WndProc (ref m);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
365
8
Gpt3D_Clone365_8.cs 1 24
Gpt3D_Clone365_8.cs 25 38
----------------------------------------

protected override void WndProc (ref Message m) {
    const int WM_NCLBUTTONDOWN = 0x00A1;
    const int WM_NCLBUTTONUP = 0x00A2;
    const int HTCLOSE = 20;
    if (m.Msg == WM_NCLBUTTONDOWN) {
        switch ((int) m.WParam) {
            case HTCLOSE :
                break;
            default :
                base.WndProc (ref m);
                break;
        }
    } else {
        if (m.Msg == WM_NCLBUTTONUP) {
            switch ((int) m.WParam) {
                case HTCLOSE :
                    Trace.WriteLine ("Close Button clicked");
                    Close ();
                    break;
            }
        }
        base.WndProc (ref m);
    }
}
----------------------------------------

 protected override void WndProc (ref Message m) {
    const int WM_NCLBUTTONDOWN = 0x00A1;
    const int WM_NCLBUTTONUP = 0x00A2;
    const int HTCLOSE = 20;
    if (m.Msg == WM_NCLBUTTONDOWN || m.Msg == WM_NCLBUTTONUP) {
        if (m.WParam == HTCLOSE) 
            Trace.WriteLine("Close Button clicked");
            Close();
    } else {
        base.WndProc (ref m);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
368
0
Gpt3D_Clone368_0.cs 1 22
Gpt3D_Clone368_0.cs 23 60
----------------------------------------

private static int Encode (int value, byte [] buffer, int index) {
    byte temp;
    bool leading = true;
    temp = (value > > 24) & 0xFF;
    if (temp > 0) {
        buffer [index ++] = temp;
        leading = false;
    }
    temp = (value > > 16) & 0xFF;
    if (temp > 0 || leading == false) {
        buffer [index ++] = temp;
        leading = false;
    }
    temp = (value > > 8) & 0xFF;
    if (temp > 0 || leading == false) {
        buffer [index ++] = temp;
        leading = false;
    }
    temp = value & 0xFF;
    buffer [index ++] = temp;
    return index;
}
----------------------------------------

  private static int Encode (int value, byte [] buffer, int index)
    {
        byte temp;
        bool leading = true;
        temp = (byte)(value & 0xFF);
        buffer[index++] = temp;
        value = value >> 8;
        temp = (byte)(value & 0xFF);
        if (leading && temp == 0)
        {
            return index;
        }
        leading = false;
        buffer[index++] = temp;
        value = value >> 8;
        temp = (byte)(value & 0xFF);
        if (leading && temp == 0)
        {
            return index;
        }
        leading = false;
        buffer[index++] = temp;
        value = value >> 8;
        temp = (byte)(value & 0xFF);
        if (leading && temp == 0)
        {
            return index;
        }
        buffer[index++] = temp;
        return index;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
368
2
Gpt3D_Clone368_2.cs 1 22
Gpt3D_Clone368_2.cs 23 42
----------------------------------------

private static int Encode (int value, byte [] buffer, int index) {
    byte temp;
    bool leading = true;
    temp = (value > > 24) & 0xFF;
    if (temp > 0) {
        buffer [index ++] = temp;
        leading = false;
    }
    temp = (value > > 16) & 0xFF;
    if (temp > 0 || leading == false) {
        buffer [index ++] = temp;
        leading = false;
    }
    temp = (value > > 8) & 0xFF;
    if (temp > 0 || leading == false) {
        buffer [index ++] = temp;
        leading = false;
    }
    temp = value & 0xFF;
    buffer [index ++] = temp;
    return index;
}
----------------------------------------

  private static int Encode (int value, byte [] buffer, int index) {
        byte temp;
        byte[] results = new byte[4];
        bool leading = true;
        results[0] = (byte)((value >> 24) & 0xFF);
        results[1] = (byte)((value >> 16) & 0xFF);
        results[2] = (byte)((value >> 8) & 0xFF);
        results[3] = (byte)(value & 0xFF);
        for(int i = 0; i < 4; i++)
        {
           temp = results[i];
           if (temp > 0 || leading == false) {
               buffer [index ++] = temp;
               leading = false;
           } 
        } 
        return index;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
368
3
Gpt3D_Clone368_3.cs 1 22
Gpt3D_Clone368_3.cs 23 37
----------------------------------------

private static int Encode (int value, byte [] buffer, int index) {
    byte temp;
    bool leading = true;
    temp = (value > > 24) & 0xFF;
    if (temp > 0) {
        buffer [index ++] = temp;
        leading = false;
    }
    temp = (value > > 16) & 0xFF;
    if (temp > 0 || leading == false) {
        buffer [index ++] = temp;
        leading = false;
    }
    temp = (value > > 8) & 0xFF;
    if (temp > 0 || leading == false) {
        buffer [index ++] = temp;
        leading = false;
    }
    temp = value & 0xFF;
    buffer [index ++] = temp;
    return index;
}
----------------------------------------

  private static int Encode (int value, byte [] buffer, int index) {
        byte temp;
        bool leading = true;
        temp = (byte)((value >> 24) & 0xFF);
        if (temp > 0) {
            buffer [index ++] = temp;
            leading = false;
        }
        buffer[index++] = (byte)((value & 0xFF0000) >> 16);
        buffer[index++] = (byte)((value & 0xFF00) >> 8);
        buffer[index++] = (byte)(value & 0xFF);
        return index;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
368
4
Gpt3D_Clone368_4.cs 1 22
Gpt3D_Clone368_4.cs 23 38
----------------------------------------

private static int Encode (int value, byte [] buffer, int index) {
    byte temp;
    bool leading = true;
    temp = (value > > 24) & 0xFF;
    if (temp > 0) {
        buffer [index ++] = temp;
        leading = false;
    }
    temp = (value > > 16) & 0xFF;
    if (temp > 0 || leading == false) {
        buffer [index ++] = temp;
        leading = false;
    }
    temp = (value > > 8) & 0xFF;
    if (temp > 0 || leading == false) {
        buffer [index ++] = temp;
        leading = false;
    }
    temp = value & 0xFF;
    buffer [index ++] = temp;
    return index;
}
----------------------------------------

 private static int Encode (int value, byte [] buffer, int index) {
        byte temp;
        bool leading = true;
        for (int i = 0; i < 4; i++)
        {
            int shiftAmount = (3 - i) * 8;
            temp = (byte)((value >> shiftAmount) & 0xFF);
            if (temp > 0 || leading == false) {
                buffer [index ++] = temp;
                leading = false;
            } 
        } 
        return index;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
368
5
Gpt3D_Clone368_5.cs 1 22
Gpt3D_Clone368_5.cs 23 38
----------------------------------------

private static int Encode (int value, byte [] buffer, int index) {
    byte temp;
    bool leading = true;
    temp = (value > > 24) & 0xFF;
    if (temp > 0) {
        buffer [index ++] = temp;
        leading = false;
    }
    temp = (value > > 16) & 0xFF;
    if (temp > 0 || leading == false) {
        buffer [index ++] = temp;
        leading = false;
    }
    temp = (value > > 8) & 0xFF;
    if (temp > 0 || leading == false) {
        buffer [index ++] = temp;
        leading = false;
    }
    temp = value & 0xFF;
    buffer [index ++] = temp;
    return index;
}
----------------------------------------

  private static int Encode (int value, byte [] buffer, int index) {
        byte temp;
        bool leading = true;
        BitArray bits = new BitArray(new int[1] { value });
        for (int i = 24; i >= 0; i -= 8)
        {
            temp = (byte)bits.Get(i);
            if (temp > 0 || leading == false) {
                buffer [index ++] = temp;
                leading = false;
            } 
        } 
        return index;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
368
6
Gpt3D_Clone368_6.cs 1 22
Gpt3D_Clone368_6.cs 23 38
----------------------------------------

private static int Encode (int value, byte [] buffer, int index) {
    byte temp;
    bool leading = true;
    temp = (value > > 24) & 0xFF;
    if (temp > 0) {
        buffer [index ++] = temp;
        leading = false;
    }
    temp = (value > > 16) & 0xFF;
    if (temp > 0 || leading == false) {
        buffer [index ++] = temp;
        leading = false;
    }
    temp = (value > > 8) & 0xFF;
    if (temp > 0 || leading == false) {
        buffer [index ++] = temp;
        leading = false;
    }
    temp = value & 0xFF;
    buffer [index ++] = temp;
    return index;
}
----------------------------------------

 private static int Encode (int value, byte [] buffer, int index)
    {
        byte temp;
        bool leading = true;
        for (int shiftAmount = 24; shiftAmount >= 0; shiftAmount-=8)
        {
            temp = (byte)((value >> shiftAmount) & 0xFF);
            if (temp > 0 || leading == false) {
                buffer [index ++] = temp;
                leading = false;
            } 
        } 
        return index;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
368
7
Gpt3D_Clone368_7.cs 1 22
Gpt3D_Clone368_7.cs 23 37
----------------------------------------

private static int Encode (int value, byte [] buffer, int index) {
    byte temp;
    bool leading = true;
    temp = (value > > 24) & 0xFF;
    if (temp > 0) {
        buffer [index ++] = temp;
        leading = false;
    }
    temp = (value > > 16) & 0xFF;
    if (temp > 0 || leading == false) {
        buffer [index ++] = temp;
        leading = false;
    }
    temp = (value > > 8) & 0xFF;
    if (temp > 0 || leading == false) {
        buffer [index ++] = temp;
        leading = false;
    }
    temp = value & 0xFF;
    buffer [index ++] = temp;
    return index;
}
----------------------------------------

 private static int Encode (int value, byte [] buffer, int index) {
        byte temp;
        bool leading = true;
        for (int i = 3; i >= 0; i--)
        {
            temp = (byte)((value >> (i * 8)) & 0xFF);
            if (temp > 0 || leading == false) {
                buffer [index ++] = temp;
                leading = false;
            } 
        } 
        return index;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
368
8
Gpt3D_Clone368_8.cs 1 22
Gpt3D_Clone368_8.cs 23 37
----------------------------------------

private static int Encode (int value, byte [] buffer, int index) {
    byte temp;
    bool leading = true;
    temp = (value > > 24) & 0xFF;
    if (temp > 0) {
        buffer [index ++] = temp;
        leading = false;
    }
    temp = (value > > 16) & 0xFF;
    if (temp > 0 || leading == false) {
        buffer [index ++] = temp;
        leading = false;
    }
    temp = (value > > 8) & 0xFF;
    if (temp > 0 || leading == false) {
        buffer [index ++] = temp;
        leading = false;
    }
    temp = value & 0xFF;
    buffer [index ++] = temp;
    return index;
}
----------------------------------------

  private static int Encode (int value, byte [] buffer, int index) {
        byte temp;
        bool leading = true;
        for (int i = 0; i < 32; i += 8)
        {
            temp = (byte)((value >> i) & 0xFF);
            if (temp > 0 || leading == false) {
                buffer [index ++] = temp;
                leading = false;
            } 
        } 
        return index;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
36
0
Gpt3D_Clone36_0.cs 1 33
Gpt3D_Clone36_0.cs 34 64
----------------------------------------

public static DateTime AddBusinessDays (this DateTime date, int days) {
    date = date.AddDays ((days / 5) * 7);
    int remainder = days % 5;
    switch (date.DayOfWeek) {
        case DayOfWeek.Tuesday :
            if (remainder > 3)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Wednesday :
            if (remainder > 2)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Thursday :
            if (remainder > 1)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Friday :
            if (remainder > 0)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Saturday :
            if (days > 0)
                date = date.AddDays ((remainder == 0) ? 2 : 1);
            break;
        case DayOfWeek.Sunday :
            if (days > 0)
                date = date.AddDays ((remainder == 0) ? 1 : 0);
            break;
        default :
            break;
    }
    return date.AddDays (remainder);
}
----------------------------------------

 public static DateTime AddBusinessDays (this DateTime date, int days) {
    int numWeeks = days / 5;
    int numWeekdays = 5 * numWeeks;
    int remainder = days % 5;
    DateTime tempDate = date.AddDays(numWeekdays);
    while (remainder > 0){
        switch (tempDate.DayOfWeek){
            case DayOfWeek.Friday:
                if (remainder > 0) {
                    remainder--;
                    tempDate = tempDate.AddDays(2);
                }
                break;
            case DayOfWeek.Saturday:
                if (remainder > 0) {
                    remainder--;
                    tempDate = tempDate.AddDays(1);
                }
                break;
            default:
                if (remainder > 0) {
                    remainder--;
                    tempDate = tempDate.AddDays(1);
                }
                break;
        }
    }
    return tempDate;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
36
1
Gpt3D_Clone36_1.cs 1 33
Gpt3D_Clone36_1.cs 34 63
----------------------------------------

public static DateTime AddBusinessDays (this DateTime date, int days) {
    date = date.AddDays ((days / 5) * 7);
    int remainder = days % 5;
    switch (date.DayOfWeek) {
        case DayOfWeek.Tuesday :
            if (remainder > 3)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Wednesday :
            if (remainder > 2)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Thursday :
            if (remainder > 1)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Friday :
            if (remainder > 0)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Saturday :
            if (days > 0)
                date = date.AddDays ((remainder == 0) ? 2 : 1);
            break;
        case DayOfWeek.Sunday :
            if (days > 0)
                date = date.AddDays ((remainder == 0) ? 1 : 0);
            break;
        default :
            break;
    }
    return date.AddDays (remainder);
}
----------------------------------------

 public static DateTime AddBusinessDays (this DateTime date, int days) {
	int tempDays = days % 5;
    int numWeeks = days/5;
    int numWeekdays = 5 * numWeeks;
    int totalNumDays = numWeekdays + tempDays;
    date = date.AddDays (totalNumDays);
    switch (date.DayOfWeek) {
        case DayOfWeek.Saturday :
            if (days > 0)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Sunday :
            if (days > 0)
                date = date.AddDays (1);
            break;
        default:
            break;
    }
	while (tempDays > 0)
	{
        date = date.AddDays(1);
		if(date.DayOfWeek != DayOfWeek.Saturday && date.DayOfWeek != DayOfWeek.Sunday)
		{
            tempDays--;
        }
	}
    return date;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
36
2
Gpt3D_Clone36_2.cs 1 33
Gpt3D_Clone36_2.cs 34 62
----------------------------------------

public static DateTime AddBusinessDays (this DateTime date, int days) {
    date = date.AddDays ((days / 5) * 7);
    int remainder = days % 5;
    switch (date.DayOfWeek) {
        case DayOfWeek.Tuesday :
            if (remainder > 3)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Wednesday :
            if (remainder > 2)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Thursday :
            if (remainder > 1)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Friday :
            if (remainder > 0)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Saturday :
            if (days > 0)
                date = date.AddDays ((remainder == 0) ? 2 : 1);
            break;
        case DayOfWeek.Sunday :
            if (days > 0)
                date = date.AddDays ((remainder == 0) ? 1 : 0);
            break;
        default :
            break;
    }
    return date.AddDays (remainder);
}
----------------------------------------

 public static DateTime AddBusinessDays (this DateTime date, int days) {
    int remainder = days % 5;
    date = date.AddDays(7 * (days / 5));
    DayOfWeek currentDay = date.DayOfWeek;
    switch (currentDay) {
        case DayOfWeek.Saturday:
            if (days > 0)
                date = date.AddDays(2);
            break;
        case DayOfWeek.Sunday:
            if (days > 0)
                date = date.AddDays(1);
            break;
        default:
            break;
    }
    while (remainder > 0)
    {
        currentDay = date.DayOfWeek;
        if(currentDay != DayOfWeek.Saturday && currentDay != DayOfWeek.Sunday)
        {
            remainder--;
        }
        date = date.AddDays(1);
    }
    return date;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
36
3
Gpt3D_Clone36_3.cs 1 33
Gpt3D_Clone36_3.cs 34 55
----------------------------------------

public static DateTime AddBusinessDays (this DateTime date, int days) {
    date = date.AddDays ((days / 5) * 7);
    int remainder = days % 5;
    switch (date.DayOfWeek) {
        case DayOfWeek.Tuesday :
            if (remainder > 3)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Wednesday :
            if (remainder > 2)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Thursday :
            if (remainder > 1)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Friday :
            if (remainder > 0)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Saturday :
            if (days > 0)
                date = date.AddDays ((remainder == 0) ? 2 : 1);
            break;
        case DayOfWeek.Sunday :
            if (days > 0)
                date = date.AddDays ((remainder == 0) ? 1 : 0);
            break;
        default :
            break;
    }
    return date.AddDays (remainder);
}
----------------------------------------

  public static DateTime AddBusinessDays (this DateTime date, int days) {
    int tempDays = days % 5;
    int numWeeks = days/5;
    int numWeekdays = 5 * numWeeks;
    int totalNumDays = numWeekdays + tempDays;
    date = date.AddDays (totalNumDays);
    switch (date.DayOfWeek) {
        case DayOfWeek.Saturday :
            if (days > 0)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Sunday :
            if (days > 0)
                date = date.AddDays (1);
            break;
        default:
            break;
    }
    return date;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
36
4
Gpt3D_Clone36_4.cs 1 33
Gpt3D_Clone36_4.cs 34 56
----------------------------------------

public static DateTime AddBusinessDays (this DateTime date, int days) {
    date = date.AddDays ((days / 5) * 7);
    int remainder = days % 5;
    switch (date.DayOfWeek) {
        case DayOfWeek.Tuesday :
            if (remainder > 3)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Wednesday :
            if (remainder > 2)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Thursday :
            if (remainder > 1)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Friday :
            if (remainder > 0)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Saturday :
            if (days > 0)
                date = date.AddDays ((remainder == 0) ? 2 : 1);
            break;
        case DayOfWeek.Sunday :
            if (days > 0)
                date = date.AddDays ((remainder == 0) ? 1 : 0);
            break;
        default :
            break;
    }
    return date.AddDays (remainder);
}
----------------------------------------

 public static DateTime AddBusinessDays (this DateTime date, int days) {
    DateTime tempDate = date;
    int numWeeks = days/5;
    tempDate = tempDate.AddDays(numWeeks * 7);
    int remainder = days % 5;
    // Calculate number of weekdays to be added
    // Note: Weekdays count start from Monday
    int nextWeekdayCnt = 5 - (int) tempDate.DayOfWeek;
    tempDate = tempDate.AddDays(nextWeekdayCnt);
    while (remainder > 0)
    {
        if(tempDate.DayOfWeek != DayOfWeek.Saturday && tempDate.DayOfWeek != DayOfWeek.Sunday)
        {
            remainder--;
        }
        tempDate = tempDate.AddDays(1);
    }
    return tempDate;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
36
5
Gpt3D_Clone36_5.cs 1 33
Gpt3D_Clone36_5.cs 34 50
----------------------------------------

public static DateTime AddBusinessDays (this DateTime date, int days) {
    date = date.AddDays ((days / 5) * 7);
    int remainder = days % 5;
    switch (date.DayOfWeek) {
        case DayOfWeek.Tuesday :
            if (remainder > 3)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Wednesday :
            if (remainder > 2)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Thursday :
            if (remainder > 1)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Friday :
            if (remainder > 0)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Saturday :
            if (days > 0)
                date = date.AddDays ((remainder == 0) ? 2 : 1);
            break;
        case DayOfWeek.Sunday :
            if (days > 0)
                date = date.AddDays ((remainder == 0) ? 1 : 0);
            break;
        default :
            break;
    }
    return date.AddDays (remainder);
}
----------------------------------------

 public static DateTime AddBusinessDays (this DateTime date, int days) {
    int remainder = days % 5;
    int numWeeks = days/5;
    date = date.AddDays ((7 * numWeeks) + remainder);
    switch (date.DayOfWeek) {
        case DayOfWeek.Saturday :
        case DayOfWeek.Sunday :
            date = date.AddDays (2);
            break;
        default :
            break;
    }
    return date;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
36
6
Gpt3D_Clone36_6.cs 1 33
Gpt3D_Clone36_6.cs 34 49
----------------------------------------

public static DateTime AddBusinessDays (this DateTime date, int days) {
    date = date.AddDays ((days / 5) * 7);
    int remainder = days % 5;
    switch (date.DayOfWeek) {
        case DayOfWeek.Tuesday :
            if (remainder > 3)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Wednesday :
            if (remainder > 2)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Thursday :
            if (remainder > 1)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Friday :
            if (remainder > 0)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Saturday :
            if (days > 0)
                date = date.AddDays ((remainder == 0) ? 2 : 1);
            break;
        case DayOfWeek.Sunday :
            if (days > 0)
                date = date.AddDays ((remainder == 0) ? 1 : 0);
            break;
        default :
            break;
    }
    return date.AddDays (remainder);
}
----------------------------------------

 public static DateTime AddBusinessDays (this DateTime date, int days) {
    DateTime tempDate = date;
    int numWeeks = days/5;
    tempDate = tempDate.AddDays (numWeeks * 7);
    int remainder = days % 5;
    while (remainder > 0){
        tempDate = tempDate.AddDays(1);
        if (tempDate.DayOfWeek != DayOfWeek.Saturday && tempDate.DayOfWeek != DayOfWeek.Sunday){
            remainder--;
        }
    }
    return tempDate;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
36
7
Gpt3D_Clone36_7.cs 1 33
Gpt3D_Clone36_7.cs 34 48
----------------------------------------

public static DateTime AddBusinessDays (this DateTime date, int days) {
    date = date.AddDays ((days / 5) * 7);
    int remainder = days % 5;
    switch (date.DayOfWeek) {
        case DayOfWeek.Tuesday :
            if (remainder > 3)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Wednesday :
            if (remainder > 2)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Thursday :
            if (remainder > 1)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Friday :
            if (remainder > 0)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Saturday :
            if (days > 0)
                date = date.AddDays ((remainder == 0) ? 2 : 1);
            break;
        case DayOfWeek.Sunday :
            if (days > 0)
                date = date.AddDays ((remainder == 0) ? 1 : 0);
            break;
        default :
            break;
    }
    return date.AddDays (remainder);
}
----------------------------------------

 public static DateTime AddBusinessDays (this DateTime date, int days) {
    DateTime tempDate = date;
    int numWeeks = days/5;
    tempDate = tempDate.AddDays (numWeeks * 7);
    int remainder = days % 5;
    for (int i = 0; i < remainder; i++){
        tempDate = tempDate.AddDays(1);
        if (tempDate.DayOfWeek == DayOfWeek.Saturday || tempDate.DayOfWeek == DayOfWeek.Sunday)
            tempDate = tempDate.AddDays(1);
    }
    return tempDate;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
36
8
Gpt3D_Clone36_8.cs 1 33
Gpt3D_Clone36_8.cs 34 50
----------------------------------------

public static DateTime AddBusinessDays (this DateTime date, int days) {
    date = date.AddDays ((days / 5) * 7);
    int remainder = days % 5;
    switch (date.DayOfWeek) {
        case DayOfWeek.Tuesday :
            if (remainder > 3)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Wednesday :
            if (remainder > 2)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Thursday :
            if (remainder > 1)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Friday :
            if (remainder > 0)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Saturday :
            if (days > 0)
                date = date.AddDays ((remainder == 0) ? 2 : 1);
            break;
        case DayOfWeek.Sunday :
            if (days > 0)
                date = date.AddDays ((remainder == 0) ? 1 : 0);
            break;
        default :
            break;
    }
    return date.AddDays (remainder);
}
----------------------------------------

 public static DateTime AddBusinessDays (this DateTime date, int days) {
    int numWeeks = days/5;
    date = date.AddDays ((7 * numWeeks) + days);
    int remainder = days % 5;
    // Add additional days if necessary
    while (remainder > 0 && date.DayOfWeek >= DayOfWeek.Saturday)
    {
        date = date.AddDays(1);
        remainder--;
    }
    return date;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
36
9
Gpt3D_Clone36_9.cs 1 33
Gpt3D_Clone36_9.cs 34 45
----------------------------------------

public static DateTime AddBusinessDays (this DateTime date, int days) {
    date = date.AddDays ((days / 5) * 7);
    int remainder = days % 5;
    switch (date.DayOfWeek) {
        case DayOfWeek.Tuesday :
            if (remainder > 3)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Wednesday :
            if (remainder > 2)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Thursday :
            if (remainder > 1)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Friday :
            if (remainder > 0)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Saturday :
            if (days > 0)
                date = date.AddDays ((remainder == 0) ? 2 : 1);
            break;
        case DayOfWeek.Sunday :
            if (days > 0)
                date = date.AddDays ((remainder == 0) ? 1 : 0);
            break;
        default :
            break;
    }
    return date.AddDays (remainder);
}
----------------------------------------

 public static DateTime AddBusinessDays (this DateTime date, int days) {
    DateTime tempDate = date;
    while (days > 0){
        tempDate = tempDate.AddDays(1);
        if (tempDate.DayOfWeek != DayOfWeek.Saturday && tempDate.DayOfWeek != DayOfWeek.Sunday){
            days--;
        }
    }
    return tempDate;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
371
0
Gpt3D_Clone371_0.cs 1 11
Gpt3D_Clone371_0.cs 12 24
----------------------------------------

static void Main (string [] args) {
    var x = new Example ();
    x.DoStuff = MethodForDelecate;
    x.DoStuffWithParameter = MethodForDelecate;
    x.DoStuffWithReturnValue = MethodWithReturnValue;
    x.DoStuff ();
    x.DoStuffWithParameter (10);
    int value = x.DoStuffWithReturnValue ();
    Console.WriteLine ("Return value " + value);
    Console.ReadLine ();
}
----------------------------------------

 static void Main (string [] args) {
    var x = new Example ();
    x.DoStuff = delegate(){ MethodForDelegeate(); };
    x.DoStuffWithParameter = delegate(int i){ MethodForDelegeate(i); };
    x.DoStuffWithReturnValue = delegate(){ return MethodWithReturnValue(); };
    x.DoStuff ();
    x.DoStuffWithParameter (10);
    int value = x.DoStuffWithReturnValue ();
    Console.WriteLine ("Return value " + value);
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
371
1
Gpt3D_Clone371_1.cs 1 11
Gpt3D_Clone371_1.cs 12 24
----------------------------------------

static void Main (string [] args) {
    var x = new Example ();
    x.DoStuff = MethodForDelecate;
    x.DoStuffWithParameter = MethodForDelecate;
    x.DoStuffWithReturnValue = MethodWithReturnValue;
    x.DoStuff ();
    x.DoStuffWithParameter (10);
    int value = x.DoStuffWithReturnValue ();
    Console.WriteLine ("Return value " + value);
    Console.ReadLine ();
}
----------------------------------------

 static void Main (string [] args) {
    var x = new Example ();
    x.DoStuff = () => { MethodForDelegeate(); };
    x.DoStuffWithParameter = (i) => { MethodForDelegeate(i); };
    x.DoStuffWithReturnValue = () => { return MethodWithReturnValue(); };
    x.DoStuff ();
    x.DoStuffWithParameter (10);
    int value = x.DoStuffWithReturnValue ();
    Console.WriteLine ("Return value " + value);
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
371
5
Gpt3D_Clone371_5.cs 1 11
Gpt3D_Clone371_5.cs 12 29
----------------------------------------

static void Main (string [] args) {
    var x = new Example ();
    x.DoStuff = MethodForDelecate;
    x.DoStuffWithParameter = MethodForDelecate;
    x.DoStuffWithReturnValue = MethodWithReturnValue;
    x.DoStuff ();
    x.DoStuffWithParameter (10);
    int value = x.DoStuffWithReturnValue ();
    Console.WriteLine ("Return value " + value);
    Console.ReadLine ();
}
----------------------------------------

 static void Main (string [] args) {
                        var x = new Example ();
                        SetDoStuff(x, MethodForDelegate, MethodWithReturnValue);
                        x.DoStuff ();
                        x.DoStuffWithParameter (10);
                        int value = x.DoStuffWithReturnValue ();
                        Console.WriteLine ("Return value " + value);
                        Console.ReadLine ();
                    }
                        private void SetDoStuff(Example x, Action delegateMethod, Func<int> funcReturnMethod)
                        {
                            x.DoStuff = delegateMethod;
                            x.DoStuffWithParameter = delegateMethod;
                            x.DoStuffWithReturnValue = funcReturnMethod;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
371
6
Gpt3D_Clone371_6.cs 1 11
Gpt3D_Clone371_6.cs 12 39
----------------------------------------

static void Main (string [] args) {
    var x = new Example ();
    x.DoStuff = MethodForDelecate;
    x.DoStuffWithParameter = MethodForDelecate;
    x.DoStuffWithReturnValue = MethodWithReturnValue;
    x.DoStuff ();
    x.DoStuffWithParameter (10);
    int value = x.DoStuffWithReturnValue ();
    Console.WriteLine ("Return value " + value);
    Console.ReadLine ();
}
----------------------------------------

 static void Main (string [] args) {
                var x = new Example ();
                SetDoStuff(x);
                SetDoStuffWithParameter(x);
                SetDoStuffWithReturnValue(x);
                x.DoStuff ();
                x.DoStuffWithParameter (10);
                int value = x.DoStuffWithReturnValue ();
                Console.WriteLine ("Return value " + value);
                Console.ReadLine ();
            }
            private void SetDoStuff(Example x)
            {
                x.DoStuff = MethodForDelegate;
                }
                private void SetDoStuffWithParameter(Example x)
                {
                    x.DoStuffWithParameter = MethodForDelegate;
                }
                private void SetDoStuffWithReturnValue(Example x)
                {
                    x.DoStuffWithReturnValue = MethodWithReturnValue;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
371
7
Gpt3D_Clone371_7.cs 1 11
Gpt3D_Clone371_7.cs 12 39
----------------------------------------

static void Main (string [] args) {
    var x = new Example ();
    x.DoStuff = MethodForDelecate;
    x.DoStuffWithParameter = MethodForDelecate;
    x.DoStuffWithReturnValue = MethodWithReturnValue;
    x.DoStuff ();
    x.DoStuffWithParameter (10);
    int value = x.DoStuffWithReturnValue ();
    Console.WriteLine ("Return value " + value);
    Console.ReadLine ();
}
----------------------------------------

 static void Main (string [] args) {
                var x = new Example ();
                SetDoStuff(x);
                SetDoStuffWithParameter(x);
                SetDoStuffWithReturnValue(x);
                x.DoStuff ();
                x.DoStuffWithParameter (10);
                int value = x.DoStuffWithReturnValue ();
                Console.WriteLine ("Return value " + value);
                Console.ReadLine ();
            }
            private void SetDoStuff(Example x)
            {
                x.DoStuff = MethodForDelegate;
                }
                private void SetDoStuffWithParameter(Example x)
                {
                    x.DoStuffWithParameter = MethodForDelegate;
                }
                private void SetDoStuffWithReturnValue(Example x)
                {
                    x.DoStuffWithReturnValue = MethodWithReturnValue;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
371
8
Gpt3D_Clone371_8.cs 1 11
Gpt3D_Clone371_8.cs 12 39
----------------------------------------

static void Main (string [] args) {
    var x = new Example ();
    x.DoStuff = MethodForDelecate;
    x.DoStuffWithParameter = MethodForDelecate;
    x.DoStuffWithReturnValue = MethodWithReturnValue;
    x.DoStuff ();
    x.DoStuffWithParameter (10);
    int value = x.DoStuffWithReturnValue ();
    Console.WriteLine ("Return value " + value);
    Console.ReadLine ();
}
----------------------------------------

 static void Main (string [] args) {
                var x = new Example ();
                SetDoStuff(x);
                SetDoStuffWithParameter(x);
                SetDoStuffWithReturnValue(x);
                x.DoStuff ();
                x.DoStuffWithParameter (10);
                int value = x.DoStuffWithReturnValue ();
                Console.WriteLine ("Return value " + value);
                Console.ReadLine ();
            }
            private void SetDoStuff(Example x)
            {
                x.DoStuff = MethodForDelegate;
                }
                private void SetDoStuffWithParameter(Example x)
                {
                    x.DoStuffWithParameter = MethodForDelegate;
                }
                private void SetDoStuffWithReturnValue(Example x)
                {
                    x.DoStuffWithReturnValue = MethodWithReturnValue;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
372
2
Gpt3D_Clone372_2.cs 1 9
Gpt3D_Clone372_2.cs 10 19
----------------------------------------

public void doWork () {
    int h = 0;
    do
        {
            Thread.Sleep (3000);
            h.Dump ();
            h ++;
        } while (true);
}
----------------------------------------

public void doWork() {
    int h = 0;
    while(true) {
        Thread.Sleep(3000);
        h.Dump();
        h = h + 1;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
372
3
Gpt3D_Clone372_3.cs 1 9
Gpt3D_Clone372_3.cs 10 19
----------------------------------------

public void doWork () {
    int h = 0;
    do
        {
            Thread.Sleep (3000);
            h.Dump ();
            h ++;
        } while (true);
}
----------------------------------------

public void  doWork() {
    int h = 0;
    while (true) {
        Thread.Sleep(3000);
        Console.WriteLine("Value of h: {0}", h);
        h++;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
372
7
Gpt3D_Clone372_7.cs 1 9
Gpt3D_Clone372_7.cs 10 18
----------------------------------------

public void doWork () {
    int h = 0;
    do
        {
            Thread.Sleep (3000);
            h.Dump ();
            h ++;
        } while (true);
}
----------------------------------------

public void doWork() {
    for (int h = 0; true;) {
        Thread.Sleep(3000);
        h.Dump();
        h++;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
372
8
Gpt3D_Clone372_8.cs 1 9
Gpt3D_Clone372_8.cs 10 17
----------------------------------------

public void doWork () {
    int h = 0;
    do
        {
            Thread.Sleep (3000);
            h.Dump ();
            h ++;
        } while (true);
}
----------------------------------------

 public void doWork() {
    for(int h = 0; true; h++) {
        Thread.Sleep(3000);
        h.Dump();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
377
0
Gpt3D_Clone377_0.cs 1 8
Gpt3D_Clone377_0.cs 9 31
----------------------------------------

protected override void OnCollectionChanged (NotifyCollectionChangedEventArgs e) {
    if (suppressNotification)
        return;
    base.OnCollectionChanged (e);
    if (CollectionChanged != null) {
        CollectionChanged.Invoke (this, e);
    }
}
----------------------------------------

 protected override void OnCollectionChanged(NotifyCollectionChangedEventArgs e) {
    if (!suppressNotification)
    {
        base.OnCollectionChanged(e);
        var handler = CollectionChanged;
        if (handler != null)
        {
            var invocations = handler.GetInvocationList();
            foreach (var invocation in invocations)
            {
                var asyncCallback = new AsyncCallback((callbackResult) =>
                {
                    var asyncState = (Tuple<NotifyCollectionChangedEventHandler, NotifyCollectionChangedEventArgs>)callbackResult.AsyncState;
                    asyncState.Item1.EndInvoke(callbackResult); ;
                });
                var asyncClosureState = new Tuple<NotifyCollectionChangedEventHandler, NotifyCollectionChangedEventArgs>(invocation as NotifyCollectionChangedEventHandler, e);
                invocation.BeginInvoke(this, e, asyncCallback, asyncClosureState);
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
377
10
Gpt3D_Clone377_10.cs 1 8
Gpt3D_Clone377_10.cs 9 16
----------------------------------------

protected override void OnCollectionChanged (NotifyCollectionChangedEventArgs e) {
    if (suppressNotification)
        return;
    base.OnCollectionChanged (e);
    if (CollectionChanged != null) {
        CollectionChanged.Invoke (this, e);
    }
}
----------------------------------------

 protected override void OnCollectionChanged(NotifyCollectionChangedEventArgs e) {
    if(!suppressNotification) {
        base.OnCollectionChanged(e);
        CollectionChanged?.DynamicInvoke(this, e);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
377
2
Gpt3D_Clone377_2.cs 1 8
Gpt3D_Clone377_2.cs 9 20
----------------------------------------

protected override void OnCollectionChanged (NotifyCollectionChangedEventArgs e) {
    if (suppressNotification)
        return;
    base.OnCollectionChanged (e);
    if (CollectionChanged != null) {
        CollectionChanged.Invoke (this, e);
    }
}
----------------------------------------

private void InvokeCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
{
    if (CollectionChanged == null) return;
    var delegates = CollectionChanged.GetInvocationList();
    foreach (var del in delegates)
    {
        del.DynamicInvoke(sender, e);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
377
4
Gpt3D_Clone377_4.cs 1 8
Gpt3D_Clone377_4.cs 9 19
----------------------------------------

protected override void OnCollectionChanged (NotifyCollectionChangedEventArgs e) {
    if (suppressNotification)
        return;
    base.OnCollectionChanged (e);
    if (CollectionChanged != null) {
        CollectionChanged.Invoke (this, e);
    }
}
----------------------------------------

 protected override void OnCollectionChanged (NotifyCollectionChangedEventArgs e) {
    if (!suppressNotification)
    {
        base.OnCollectionChanged (e);
        if (CollectionChanged != null)
            foreach (NotifyCollectionChangedEventHandler handler in CollectionChanged.GetInvocationList())
                handler.BeginInvoke(this, e, null, null);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
377
8
Gpt3D_Clone377_8.cs 1 8
Gpt3D_Clone377_8.cs 9 16
----------------------------------------

protected override void OnCollectionChanged (NotifyCollectionChangedEventArgs e) {
    if (suppressNotification)
        return;
    base.OnCollectionChanged (e);
    if (CollectionChanged != null) {
        CollectionChanged.Invoke (this, e);
    }
}
----------------------------------------

 protected override void OnCollectionChanged (NotifyCollectionChangedEventArgs e) {
   if (!suppressNotification) {
       base.OnCollectionChanged (e);
       CollectionChanged?.Invoke (this, e);
   }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
377
9
Gpt3D_Clone377_9.cs 1 8
Gpt3D_Clone377_9.cs 9 16
----------------------------------------

protected override void OnCollectionChanged (NotifyCollectionChangedEventArgs e) {
    if (suppressNotification)
        return;
    base.OnCollectionChanged (e);
    if (CollectionChanged != null) {
        CollectionChanged.Invoke (this, e);
    }
}
----------------------------------------

 protected override void OnCollectionChanged(NotifyCollectionChangedEventArgs e) {
    if(!suppressNotification) {
        base.OnCollectionChanged(e);
        InvokeCollectionChanged(this, e);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
378
1
Gpt3D_Clone378_1.cs 1 7
Gpt3D_Clone378_1.cs 8 27
----------------------------------------

private void Dispose (bool disposing) {
    if (this.disposed)
        return;
    if (disposing && this.stream != null)
        this.stream.Dispose ();
    this.disposed = true;
}
----------------------------------------

 private void Dispose(bool disposing) {
	// Synchronize access to the disposed field
	lock (this.disposedLock) {
		// Check if the object has already been disposed
		if (this.disposed) {
			return;
		}
		// Perform disposing logic if necessary
		if (disposing && this.stream != null) {
			try {
				this.stream.Dispose();
			} finally {
				this.disposed = true;
				// No need to dispose of other elements because there are none
			}
		}
	}
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
378
2
Gpt3D_Clone378_2.cs 1 7
Gpt3D_Clone378_2.cs 8 26
----------------------------------------

private void Dispose (bool disposing) {
    if (this.disposed)
        return;
    if (disposing && this.stream != null)
        this.stream.Dispose ();
    this.disposed = true;
}
----------------------------------------

 private void Dispose(bool disposing) {
	// Check if the object has already been disposed of
	if (this.disposed) {
		return;
	}
	// Perform disposing logic, if necessary
	if (disposing && this.stream != null) {
		try {
			this.stream.Dispose();
		} catch {
			// Throw any exceptions, but dispose of the object no matter what
			this.disposed = true;
		}
	}
	// Set the object to a disposed state
	this.disposed = true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
378
6
Gpt3D_Clone378_6.cs 1 7
Gpt3D_Clone378_6.cs 8 22
----------------------------------------

private void Dispose (bool disposing) {
    if (this.disposed)
        return;
    if (disposing && this.stream != null)
        this.stream.Dispose ();
    this.disposed = true;
}
----------------------------------------

 private void Dispose(bool disposing) {
	// Only perform disposing logic if we haven't already
	if (!disposed) {
		if (disposing && this.stream != null) {
			try {
				this.stream.Dispose();
			} finally {
				this.disposed = true;
				// No need to dispose of other elements because there are none
			}
		}
	}
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
378
9
Gpt3D_Clone378_9.cs 1 7
Gpt3D_Clone378_9.cs 8 19
----------------------------------------

private void Dispose (bool disposing) {
    if (this.disposed)
        return;
    if (disposing && this.stream != null)
        this.stream.Dispose ();
    this.disposed = true;
}
----------------------------------------

 private void Dispose (bool disposing) {
    // If the object has not yet been disposed, then run the disposing logic
    if (!this.disposed) {
        if (disposing && this.stream != null) {
            this.stream.Dispose ();   
        }
    }
    // Set the object to a disposed state
    this.disposed = true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
37
0
Gpt3D_Clone37_0.cs 1 11
Gpt3D_Clone37_0.cs 12 34
----------------------------------------

public static DateTime AddBusinessDays (this DateTime current, int days) {
    var sign = Math.Sign (days);
    var unsignedDays = Math.Abs (days);
    for (var i = 0; i < unsignedDays; i ++) {
        do
            {
                current = current.AddDays (sign);
            } while (current.DayOfWeek == DayOfWeek.Saturday || current.DayOfWeek == DayOfWeek.Sunday);
    }
    return current;
}
----------------------------------------

 public static DateTime AddBusinessDays (this DateTime current, int days) {
    if (days < 0) {
        for (int i = days; i < 0; i++) 
        {
            do 
            { 
                current = current.AddDays(-1);
            } while (current.DayOfWeek == DayOfWeek.Saturday || current.DayOfWeek ==DayOfWeek.Sunday);
        }
    }
    else {
        for (int i = days; i > 0; i--) 
        {
            do 
            { 
                current = current.AddDays(1);
            } while (current.DayOfWeek ==DayOfWeek.Saturday || current.DayOfWeek == DayOfWeek.Sunday);
        }
    }
    return current;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
37
1
Gpt3D_Clone37_1.cs 1 11
Gpt3D_Clone37_1.cs 12 109
----------------------------------------

public static DateTime AddBusinessDays (this DateTime current, int days) {
    var sign = Math.Sign (days);
    var unsignedDays = Math.Abs (days);
    for (var i = 0; i < unsignedDays; i ++) {
        do
            {
                current = current.AddDays (sign);
            } while (current.DayOfWeek == DayOfWeek.Saturday || current.DayOfWeek == DayOfWeek.Sunday);
    }
    return current;
}
----------------------------------------

 public static DateTime AddBusinessDays(this DateTime current, int days)
    {
        while (days > 0)
        {
            current = current.AddDays(1);
            if (current.DayOfWeek != DayOfWeek.Saturday && current.DayOfWeek != DayOfWeek.Sunday)
            {
                days--;
            }
        }
        while (days < 0)
        {
            current = current.AddDays(-1);
            if (current.DayOfWeek != DayOfWeek.Saturday && current.DayOfWeek != DayOfWeek.Sunday)
            {
                days++;
            }
        }
        return current;
    }
 public static DateTime AddBusinessDays(this DateTime current, int days)
    {
            if(days > 0)
            {
                for (; days > 0; days--)
                {
                    do
                    {
                        current = current.AddDays(1);
                    }
                    while (current.DayOfWeek == DayOfWeek.Saturday || current.DayOfWeek == DayOfWeek.Sunday);
                }
            }
            else if(days < 0)
            {
                for (; days < 0; days++)
                {
                    do
                    {
                        current = current.AddDays(-1);
                    }
                    while (current.DayOfWeek == DayOfWeek.Saturday || current.DayOfWeek == DayOfWeek.Sunday);
                }
            }
            return current;
    }
 public static DateTime AddBusinessDays (this DateTime current, int days) {
        int sign = Math.Sign(days);
        int unsignedDays = Math.Abs(days);
        for (int i = 1; i <= unsignedDays;) 
        {
            DateTime modifiedDate = current.AddDays(sign);
            if(modifiedDate.DayOfWeek == DayOfWeek.Saturday || modifiedDate.DayOfWeek== DayOfWeek.Sunday)
            {
            }
            else
            {
            current=modifiedDate;
            i++;
            }
        }
        return current;
    }
 public static DateTime AddBusinessDays (this DateTime current, int days) {
        int sign = Math.Sign(days);
        int unsignedDays = Math.Abs(days);
        while(unsignedDays > 0)
        {
            current = current.AddDays(sign);
            if(current.DayOfWeek != DayOfWeek.Saturday && current.DayOfWeek != DayOfWeek.Sunday)
            {
                unsignedDays--;
            }
        }
        return current;
    } 
 public static DateTime AddBusinessDays (this DateTime current, int days) {
    while (days != 0) 
    {
        current = current.AddDays(Math.Sign(days));
        if (current.DayOfWeek != DayOfWeek.Saturday && current.DayOfWeek != DayOfWeek.Sunday)
        {
            days -= Math.Sign(days);
        }
    }
    return current;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
37
2
Gpt3D_Clone37_2.cs 1 11
Gpt3D_Clone37_2.cs 12 109
----------------------------------------

public static DateTime AddBusinessDays (this DateTime current, int days) {
    var sign = Math.Sign (days);
    var unsignedDays = Math.Abs (days);
    for (var i = 0; i < unsignedDays; i ++) {
        do
            {
                current = current.AddDays (sign);
            } while (current.DayOfWeek == DayOfWeek.Saturday || current.DayOfWeek == DayOfWeek.Sunday);
    }
    return current;
}
----------------------------------------

 public static DateTime AddBusinessDays(this DateTime current, int days)
    {
        while (days > 0)
        {
            current = current.AddDays(1);
            if (current.DayOfWeek != DayOfWeek.Saturday && current.DayOfWeek != DayOfWeek.Sunday)
            {
                days--;
            }
        }
        while (days < 0)
        {
            current = current.AddDays(-1);
            if (current.DayOfWeek != DayOfWeek.Saturday && current.DayOfWeek != DayOfWeek.Sunday)
            {
                days++;
            }
        }
        return current;
    }
 public static DateTime AddBusinessDays(this DateTime current, int days)
    {
            if(days > 0)
            {
                for (; days > 0; days--)
                {
                    do
                    {
                        current = current.AddDays(1);
                    }
                    while (current.DayOfWeek == DayOfWeek.Saturday || current.DayOfWeek == DayOfWeek.Sunday);
                }
            }
            else if(days < 0)
            {
                for (; days < 0; days++)
                {
                    do
                    {
                        current = current.AddDays(-1);
                    }
                    while (current.DayOfWeek == DayOfWeek.Saturday || current.DayOfWeek == DayOfWeek.Sunday);
                }
            }
            return current;
    }
 public static DateTime AddBusinessDays (this DateTime current, int days) {
        int sign = Math.Sign(days);
        int unsignedDays = Math.Abs(days);
        for (int i = 1; i <= unsignedDays;) 
        {
            DateTime modifiedDate = current.AddDays(sign);
            if(modifiedDate.DayOfWeek == DayOfWeek.Saturday || modifiedDate.DayOfWeek== DayOfWeek.Sunday)
            {
            }
            else
            {
            current=modifiedDate;
            i++;
            }
        }
        return current;
    }
 public static DateTime AddBusinessDays (this DateTime current, int days) {
        int sign = Math.Sign(days);
        int unsignedDays = Math.Abs(days);
        while(unsignedDays > 0)
        {
            current = current.AddDays(sign);
            if(current.DayOfWeek != DayOfWeek.Saturday && current.DayOfWeek != DayOfWeek.Sunday)
            {
                unsignedDays--;
            }
        }
        return current;
    } 
 public static DateTime AddBusinessDays (this DateTime current, int days) {
    while (days != 0) 
    {
        current = current.AddDays(Math.Sign(days));
        if (current.DayOfWeek != DayOfWeek.Saturday && current.DayOfWeek != DayOfWeek.Sunday)
        {
            days -= Math.Sign(days);
        }
    }
    return current;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
37
3
Gpt3D_Clone37_3.cs 1 11
Gpt3D_Clone37_3.cs 12 109
----------------------------------------

public static DateTime AddBusinessDays (this DateTime current, int days) {
    var sign = Math.Sign (days);
    var unsignedDays = Math.Abs (days);
    for (var i = 0; i < unsignedDays; i ++) {
        do
            {
                current = current.AddDays (sign);
            } while (current.DayOfWeek == DayOfWeek.Saturday || current.DayOfWeek == DayOfWeek.Sunday);
    }
    return current;
}
----------------------------------------

 public static DateTime AddBusinessDays(this DateTime current, int days)
    {
        while (days > 0)
        {
            current = current.AddDays(1);
            if (current.DayOfWeek != DayOfWeek.Saturday && current.DayOfWeek != DayOfWeek.Sunday)
            {
                days--;
            }
        }
        while (days < 0)
        {
            current = current.AddDays(-1);
            if (current.DayOfWeek != DayOfWeek.Saturday && current.DayOfWeek != DayOfWeek.Sunday)
            {
                days++;
            }
        }
        return current;
    }
 public static DateTime AddBusinessDays(this DateTime current, int days)
    {
            if(days > 0)
            {
                for (; days > 0; days--)
                {
                    do
                    {
                        current = current.AddDays(1);
                    }
                    while (current.DayOfWeek == DayOfWeek.Saturday || current.DayOfWeek == DayOfWeek.Sunday);
                }
            }
            else if(days < 0)
            {
                for (; days < 0; days++)
                {
                    do
                    {
                        current = current.AddDays(-1);
                    }
                    while (current.DayOfWeek == DayOfWeek.Saturday || current.DayOfWeek == DayOfWeek.Sunday);
                }
            }
            return current;
    }
 public static DateTime AddBusinessDays (this DateTime current, int days) {
        int sign = Math.Sign(days);
        int unsignedDays = Math.Abs(days);
        for (int i = 1; i <= unsignedDays;) 
        {
            DateTime modifiedDate = current.AddDays(sign);
            if(modifiedDate.DayOfWeek == DayOfWeek.Saturday || modifiedDate.DayOfWeek== DayOfWeek.Sunday)
            {
            }
            else
            {
            current=modifiedDate;
            i++;
            }
        }
        return current;
    }
 public static DateTime AddBusinessDays (this DateTime current, int days) {
        int sign = Math.Sign(days);
        int unsignedDays = Math.Abs(days);
        while(unsignedDays > 0)
        {
            current = current.AddDays(sign);
            if(current.DayOfWeek != DayOfWeek.Saturday && current.DayOfWeek != DayOfWeek.Sunday)
            {
                unsignedDays--;
            }
        }
        return current;
    } 
 public static DateTime AddBusinessDays (this DateTime current, int days) {
    while (days != 0) 
    {
        current = current.AddDays(Math.Sign(days));
        if (current.DayOfWeek != DayOfWeek.Saturday && current.DayOfWeek != DayOfWeek.Sunday)
        {
            days -= Math.Sign(days);
        }
    }
    return current;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
37
5
Gpt3D_Clone37_5.cs 1 11
Gpt3D_Clone37_5.cs 12 109
----------------------------------------

public static DateTime AddBusinessDays (this DateTime current, int days) {
    var sign = Math.Sign (days);
    var unsignedDays = Math.Abs (days);
    for (var i = 0; i < unsignedDays; i ++) {
        do
            {
                current = current.AddDays (sign);
            } while (current.DayOfWeek == DayOfWeek.Saturday || current.DayOfWeek == DayOfWeek.Sunday);
    }
    return current;
}
----------------------------------------

 public static DateTime AddBusinessDays(this DateTime current, int days)
    {
        while (days > 0)
        {
            current = current.AddDays(1);
            if (current.DayOfWeek != DayOfWeek.Saturday && current.DayOfWeek != DayOfWeek.Sunday)
            {
                days--;
            }
        }
        while (days < 0)
        {
            current = current.AddDays(-1);
            if (current.DayOfWeek != DayOfWeek.Saturday && current.DayOfWeek != DayOfWeek.Sunday)
            {
                days++;
            }
        }
        return current;
    }
 public static DateTime AddBusinessDays(this DateTime current, int days)
    {
            if(days > 0)
            {
                for (; days > 0; days--)
                {
                    do
                    {
                        current = current.AddDays(1);
                    }
                    while (current.DayOfWeek == DayOfWeek.Saturday || current.DayOfWeek == DayOfWeek.Sunday);
                }
            }
            else if(days < 0)
            {
                for (; days < 0; days++)
                {
                    do
                    {
                        current = current.AddDays(-1);
                    }
                    while (current.DayOfWeek == DayOfWeek.Saturday || current.DayOfWeek == DayOfWeek.Sunday);
                }
            }
            return current;
    }
 public static DateTime AddBusinessDays (this DateTime current, int days) {
        int sign = Math.Sign(days);
        int unsignedDays = Math.Abs(days);
        for (int i = 1; i <= unsignedDays;) 
        {
            DateTime modifiedDate = current.AddDays(sign);
            if(modifiedDate.DayOfWeek == DayOfWeek.Saturday || modifiedDate.DayOfWeek== DayOfWeek.Sunday)
            {
            }
            else
            {
            current=modifiedDate;
            i++;
            }
        }
        return current;
    }
 public static DateTime AddBusinessDays (this DateTime current, int days) {
        int sign = Math.Sign(days);
        int unsignedDays = Math.Abs(days);
        while(unsignedDays > 0)
        {
            current = current.AddDays(sign);
            if(current.DayOfWeek != DayOfWeek.Saturday && current.DayOfWeek != DayOfWeek.Sunday)
            {
                unsignedDays--;
            }
        }
        return current;
    } 
 public static DateTime AddBusinessDays (this DateTime current, int days) {
    while (days != 0) 
    {
        current = current.AddDays(Math.Sign(days));
        if (current.DayOfWeek != DayOfWeek.Saturday && current.DayOfWeek != DayOfWeek.Sunday)
        {
            days -= Math.Sign(days);
        }
    }
    return current;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
37
6
Gpt3D_Clone37_6.cs 1 11
Gpt3D_Clone37_6.cs 12 25
----------------------------------------

public static DateTime AddBusinessDays (this DateTime current, int days) {
    var sign = Math.Sign (days);
    var unsignedDays = Math.Abs (days);
    for (var i = 0; i < unsignedDays; i ++) {
        do
            {
                current = current.AddDays (sign);
            } while (current.DayOfWeek == DayOfWeek.Saturday || current.DayOfWeek == DayOfWeek.Sunday);
    }
    return current;
}
----------------------------------------

 public static DateTime AddBusinessDays (this DateTime current, int days) {
    for (int i = 0; i < Math.Abs(days); i++)
    {
        DateTime modifiedDate = current.AddDays(Math.Sign(days));
        while (modifiedDate.DayOfWeek == DayOfWeek.Saturday || modifiedDate.DayOfWeek == DayOfWeek.Sunday)
        {
            modifiedDate = modifiedDate.AddDays(Math.Sign(days));
        }
        current = modifiedDate;
    }
    return current;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
37
7
Gpt3D_Clone37_7.cs 1 11
Gpt3D_Clone37_7.cs 12 24
----------------------------------------

public static DateTime AddBusinessDays (this DateTime current, int days) {
    var sign = Math.Sign (days);
    var unsignedDays = Math.Abs (days);
    for (var i = 0; i < unsignedDays; i ++) {
        do
            {
                current = current.AddDays (sign);
            } while (current.DayOfWeek == DayOfWeek.Saturday || current.DayOfWeek == DayOfWeek.Sunday);
    }
    return current;
}
----------------------------------------

 public static DateTime AddBusinessDays (this DateTime current, int days) {
    for (int i = 1; i <= Math.Abs(days);)
    {
        current = current.AddDays(Math.Sign(days));
        if (current.DayOfWeek != DayOfWeek.Saturday && current.DayOfWeek != DayOfWeek.Sunday)
        {
            i++;
        }
    }
    return current;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
37
8
Gpt3D_Clone37_8.cs 1 11
Gpt3D_Clone37_8.cs 12 109
----------------------------------------

public static DateTime AddBusinessDays (this DateTime current, int days) {
    var sign = Math.Sign (days);
    var unsignedDays = Math.Abs (days);
    for (var i = 0; i < unsignedDays; i ++) {
        do
            {
                current = current.AddDays (sign);
            } while (current.DayOfWeek == DayOfWeek.Saturday || current.DayOfWeek == DayOfWeek.Sunday);
    }
    return current;
}
----------------------------------------

 public static DateTime AddBusinessDays(this DateTime current, int days)
    {
        while (days > 0)
        {
            current = current.AddDays(1);
            if (current.DayOfWeek != DayOfWeek.Saturday && current.DayOfWeek != DayOfWeek.Sunday)
            {
                days--;
            }
        }
        while (days < 0)
        {
            current = current.AddDays(-1);
            if (current.DayOfWeek != DayOfWeek.Saturday && current.DayOfWeek != DayOfWeek.Sunday)
            {
                days++;
            }
        }
        return current;
    }
 public static DateTime AddBusinessDays(this DateTime current, int days)
    {
            if(days > 0)
            {
                for (; days > 0; days--)
                {
                    do
                    {
                        current = current.AddDays(1);
                    }
                    while (current.DayOfWeek == DayOfWeek.Saturday || current.DayOfWeek == DayOfWeek.Sunday);
                }
            }
            else if(days < 0)
            {
                for (; days < 0; days++)
                {
                    do
                    {
                        current = current.AddDays(-1);
                    }
                    while (current.DayOfWeek == DayOfWeek.Saturday || current.DayOfWeek == DayOfWeek.Sunday);
                }
            }
            return current;
    }
 public static DateTime AddBusinessDays (this DateTime current, int days) {
        int sign = Math.Sign(days);
        int unsignedDays = Math.Abs(days);
        for (int i = 1; i <= unsignedDays;) 
        {
            DateTime modifiedDate = current.AddDays(sign);
            if(modifiedDate.DayOfWeek == DayOfWeek.Saturday || modifiedDate.DayOfWeek== DayOfWeek.Sunday)
            {
            }
            else
            {
            current=modifiedDate;
            i++;
            }
        }
        return current;
    }
 public static DateTime AddBusinessDays (this DateTime current, int days) {
        int sign = Math.Sign(days);
        int unsignedDays = Math.Abs(days);
        while(unsignedDays > 0)
        {
            current = current.AddDays(sign);
            if(current.DayOfWeek != DayOfWeek.Saturday && current.DayOfWeek != DayOfWeek.Sunday)
            {
                unsignedDays--;
            }
        }
        return current;
    } 
 public static DateTime AddBusinessDays (this DateTime current, int days) {
    while (days != 0) 
    {
        current = current.AddDays(Math.Sign(days));
        if (current.DayOfWeek != DayOfWeek.Saturday && current.DayOfWeek != DayOfWeek.Sunday)
        {
            days -= Math.Sign(days);
        }
    }
    return current;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
381
0
Gpt3D_Clone381_0.cs 1 13
Gpt3D_Clone381_0.cs 14 40
----------------------------------------

protected void ddlcountry_SelectedIndexChanged (object sender, EventArgs e) {
    if (ddlcountry.Text != string.Empty) {
        MySqlCommand cd = new MySqlCommand (string.Format ("SELECT * FROM {0}_Animals", ddlcountry.Text), cs);
        cs.Open ();
        MySqlDataReader ddlSpecie = cd.ExecuteReader ();
        DdPetPist.DataSource = ddlSpecie;
        DdPetPist.DataValueField = "Specie";
        DdPetPist.DataTextField = "Specie";
        DdPetPist.DataBind ();
        cs.Close ();
        cs.Dispose ();
    }
}
----------------------------------------

 protected void ddlcountry_SelectedIndexChanged (object sender, EventArgs e)
{
    if (ddlcountry.Text != string.Empty)
    {
        string query=string.Format ("SELECT * FROM {0}_Animals", ddlcountry.Text);
        using (MySqlConnection conn = new MySqlConnection(cs))
        {
            using (MySqlCommand cmd = new MySqlCommand(query, conn))
            {
                conn.Open();
                DataTable dt = new DataTable();
                MySqlDataAdapter adapt = new MySqlDataAdapter
                {
                    SelectCommand = cmd
                };
                adapt.Fill(dt);
                DdPetPist.DataSource = dt;
                DdPetPist.DataValueField = "Specie";
                DdPetPist.DataTextField = "Specie";
                DdPetPist.DataBind();
                conn.Close();
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
381
3
Gpt3D_Clone381_3.cs 1 13
Gpt3D_Clone381_3.cs 14 32
----------------------------------------

protected void ddlcountry_SelectedIndexChanged (object sender, EventArgs e) {
    if (ddlcountry.Text != string.Empty) {
        MySqlCommand cd = new MySqlCommand (string.Format ("SELECT * FROM {0}_Animals", ddlcountry.Text), cs);
        cs.Open ();
        MySqlDataReader ddlSpecie = cd.ExecuteReader ();
        DdPetPist.DataSource = ddlSpecie;
        DdPetPist.DataValueField = "Specie";
        DdPetPist.DataTextField = "Specie";
        DdPetPist.DataBind ();
        cs.Close ();
        cs.Dispose ();
    }
}
----------------------------------------

 protected void ddlcountry_SelectedIndexChanged (object sender, EventArgs e)
{
    if (ddlcountry.Text != string.Empty)
    {
        using(MySqlConnection con = new MySqlConnection(cs))
        {
            string query =   string.Format("SELECT * FROM {0}_Animals", ddlcountry.Text);
            MySqlDataAdapter da = new MySqlDataAdapter(query , con);
            DataTable dt = new DataTable();
            da.Fill(dt);
            DdPetPist.DataSource = dt;
            DdPetPist.DataValueField = "Specie";
            DdPetPist.DataTextField = "Specie";
            DdPetPist.DataBind();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
381
4
Gpt3D_Clone381_4.cs 1 13
Gpt3D_Clone381_4.cs 14 33
----------------------------------------

protected void ddlcountry_SelectedIndexChanged (object sender, EventArgs e) {
    if (ddlcountry.Text != string.Empty) {
        MySqlCommand cd = new MySqlCommand (string.Format ("SELECT * FROM {0}_Animals", ddlcountry.Text), cs);
        cs.Open ();
        MySqlDataReader ddlSpecie = cd.ExecuteReader ();
        DdPetPist.DataSource = ddlSpecie;
        DdPetPist.DataValueField = "Specie";
        DdPetPist.DataTextField = "Specie";
        DdPetPist.DataBind ();
        cs.Close ();
        cs.Dispose ();
    }
}
----------------------------------------

 protected void ddlcountry_SelectedIndexChanged (object sender, EventArgs e)
{
    if (ddlcountry.Text != string.Empty)
    {
        MySqlDataReader dr;
        MySqlCommand cmd = new MySqlCommand(string.Format("SELECT * FROM {0}_Animals", ddlcountry.Text), cs);
        cs.Open();
        dr = cmd.ExecuteReader();
        DdPetPist.Items.Clear();
        while (dr.Read())
        {
            string species = dr["Specie"].ToString();
            DdPetPist.Items.Add(new ListItem(species, species));
        }
        dr.Close();
        cs.Close();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
385
0
Gpt3D_Clone385_0.cs 1 9
Gpt3D_Clone385_0.cs 10 27
----------------------------------------

public static int [] RowSums (int [] [] arr2D) {
    int [] sums = new int [arr2D.GetLength (0)];
    int rowSums = 0;
    foreach (int [] arr in arr2D) {
        sums [rowSums] = ArraySum (arr);
        rowSums ++;
    }
    return sums;
}
----------------------------------------

 
public static int [] RowSums (int [] [] arr2D) {
    int [] sums = new int [arr2D.Length];
    int rowSums = 0;
    for (int i = 0; i < arr2D.Length; i++) {
        int sum = 0;
        for (int j = 0; j < arr2D[i].Length; j++) {
            int value = arr2D[i][j];
            sum += value;
        }
        int totalsum = sum;
        sums[rowSums] = totalsum;
        rowSums ++;
    }
    return sums;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
385
1
Gpt3D_Clone385_1.cs 1 9
Gpt3D_Clone385_1.cs 10 26
----------------------------------------

public static int [] RowSums (int [] [] arr2D) {
    int [] sums = new int [arr2D.GetLength (0)];
    int rowSums = 0;
    foreach (int [] arr in arr2D) {
        sums [rowSums] = ArraySum (arr);
        rowSums ++;
    }
    return sums;
}
----------------------------------------

 
public static int [] RowSums (int [] [] arr2D) {
    int [] sums = new int [arr2D.Length];
    int rowSums = 0;
    for (int i = 0; i < arr2D.Length; i++) {
        int sum = 0;
        for (int j = 0; j < arr2D[i].Length; j++) {
            sum += arr2D[i][j];
        }
        int total = sum;
        sums [rowSums] = total;
        rowSums ++;
    }
    return sums;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
385
2
Gpt3D_Clone385_2.cs 1 9
Gpt3D_Clone385_2.cs 10 26
----------------------------------------

public static int [] RowSums (int [] [] arr2D) {
    int [] sums = new int [arr2D.GetLength (0)];
    int rowSums = 0;
    foreach (int [] arr in arr2D) {
        sums [rowSums] = ArraySum (arr);
        rowSums ++;
    }
    return sums;
}
----------------------------------------

 
public static int [] RowSums (int [] [] arr2D) {
    int [] sums = new int [arr2D.Length];
    int rowSums = 0;
    for (int i = 0; i < arr2D.Length; i++) {
        int sum = 0;
        for (int j = 0; j < arr2D[i].Length; j++) {
            int value = arr2D[i][j];
            sum = sum + value;
        }
        sums[rowSums] = sum;
        rowSums ++;
    }
    return sums;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
385
3
Gpt3D_Clone385_3.cs 1 9
Gpt3D_Clone385_3.cs 10 25
----------------------------------------

public static int [] RowSums (int [] [] arr2D) {
    int [] sums = new int [arr2D.GetLength (0)];
    int rowSums = 0;
    foreach (int [] arr in arr2D) {
        sums [rowSums] = ArraySum (arr);
        rowSums ++;
    }
    return sums;
}
----------------------------------------

 
public static int [] RowSums (int [] [] arr2D) {
    int [] sums = new int [arr2D.Length];
    int rowSums = 0;
    for (int i = 0; i < arr2D.Length; i++) {
        int count = 0;
        foreach (int num in arr2D[i]) {
            count += num;
        }
        sums[rowSums] = count;
        rowSums ++;
    }
    return sums;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
385
4
Gpt3D_Clone385_4.cs 1 9
Gpt3D_Clone385_4.cs 10 25
----------------------------------------

public static int [] RowSums (int [] [] arr2D) {
    int [] sums = new int [arr2D.GetLength (0)];
    int rowSums = 0;
    foreach (int [] arr in arr2D) {
        sums [rowSums] = ArraySum (arr);
        rowSums ++;
    }
    return sums;
}
----------------------------------------

 
public static int [] RowSums (int [] [] arr2D) {
    int [] sums = new int [arr2D.Length];
    int rowSums = 0;
    foreach (int [] arr in arr2D) {
        int rowSum = 0;
        foreach (int item in arr) {
            rowSum += item;
        }
        sums[rowSums] = rowSum;
        rowSums ++;
    }
    return sums;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
385
5
Gpt3D_Clone385_5.cs 1 9
Gpt3D_Clone385_5.cs 10 25
----------------------------------------

public static int [] RowSums (int [] [] arr2D) {
    int [] sums = new int [arr2D.GetLength (0)];
    int rowSums = 0;
    foreach (int [] arr in arr2D) {
        sums [rowSums] = ArraySum (arr);
        rowSums ++;
    }
    return sums;
}
----------------------------------------

 
public static int [] RowSums (int [] [] arr2D) {
    int [] sums = new int [arr2D.Length];
    int rowSums = 0;
    for (int i = 0; i < arr2D.Length; i++) {
        int sum = 0;
        for (int j = 0; j < arr2D[i].Length; j++) {
            sum += arr2D[i][j];
        }
        sums[rowSums] = sum;
        rowSums ++;
    }
    return sums;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
385
6
Gpt3D_Clone385_6.cs 1 9
Gpt3D_Clone385_6.cs 10 25
----------------------------------------

public static int [] RowSums (int [] [] arr2D) {
    int [] sums = new int [arr2D.GetLength (0)];
    int rowSums = 0;
    foreach (int [] arr in arr2D) {
        sums [rowSums] = ArraySum (arr);
        rowSums ++;
    }
    return sums;
}
----------------------------------------

 
public static int [] RowSums (int [] [] arr2D) {
    int [] sums = new int [arr2D.Length];
    int rowSums = 0;
    foreach (int [] arr in arr2D) {
        int rowTotal = 0;
        foreach (int item in arr) {
            rowTotal = rowTotal + item;
        }
        sums[rowSums] = rowTotal;
        rowSums ++;
    }
    return sums;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
385
7
Gpt3D_Clone385_7.cs 1 9
Gpt3D_Clone385_7.cs 10 25
----------------------------------------

public static int [] RowSums (int [] [] arr2D) {
    int [] sums = new int [arr2D.GetLength (0)];
    int rowSums = 0;
    foreach (int [] arr in arr2D) {
        sums [rowSums] = ArraySum (arr);
        rowSums ++;
    }
    return sums;
}
----------------------------------------

 
public static int [] RowSums (int [] [] arr2D) {
    int [] sums = new int [arr2D.GetLength (0)];
    int rowSums = 0;
    for (int i = 0; i < arr2D.Length; i++) {
        int total = 0;
        for (int j = 0; j < arr2D[i].Length; j++) {
            total += arr2D[i][j];
        }
        sums[rowSums] = total;
        rowSums ++;
    }
    return sums;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
385
8
Gpt3D_Clone385_8.cs 1 9
Gpt3D_Clone385_8.cs 10 25
----------------------------------------

public static int [] RowSums (int [] [] arr2D) {
    int [] sums = new int [arr2D.GetLength (0)];
    int rowSums = 0;
    foreach (int [] arr in arr2D) {
        sums [rowSums] = ArraySum (arr);
        rowSums ++;
    }
    return sums;
}
----------------------------------------

 
public static int [] RowSums (int [] [] arr2D) {
    int [] sums = new int [arr2D.Length];
    int rowSums = 0;
    foreach (int [] arr in arr2D) {
        int total = 0;
        foreach (int num in arr) {
            total += num;
        }
        sums[rowSums] = total;
        rowSums ++;
    }
    return sums;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
385
9
Gpt3D_Clone385_9.cs 1 9
Gpt3D_Clone385_9.cs 10 25
----------------------------------------

public static int [] RowSums (int [] [] arr2D) {
    int [] sums = new int [arr2D.GetLength (0)];
    int rowSums = 0;
    foreach (int [] arr in arr2D) {
        sums [rowSums] = ArraySum (arr);
        rowSums ++;
    }
    return sums;
}
----------------------------------------

 
public static int [] RowSums (int [] [] arr2D) {
    int [] sums = new int [arr2D.Length];
    int rowSums = 0;
    for (int i = 0; i < arr2D.Length; i++) {
        int sum = 0;
        foreach (int item in arr2D[i]) {
            sum += item;
        }
        sums [rowSums] = sum;
        rowSums ++;
    }
    return sums;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
388
3
Gpt3D_Clone388_3.cs 1 19
Gpt3D_Clone388_3.cs 20 36
----------------------------------------

public void UpdateDescription (DataTable dataTable) {
    if (dataTable != null && dataTable.Rows.Count > 0) {
        foreach (DataRow dr in dataTable.Rows) {
            String dataDesc = dr ["DataDesc"].ToString ();
            if (! dr.IsNull ("DataDesc")) {
                if (dataDesc.Contains ("STATE")) {
                    dataDesc = dataDesc.Replace ("STATE", "").Trim ();
                }
                if (dataDesc.Contains ("HELLO ALL")) {
                    dataDesc = dataDesc.Replace ("HELLO ALL", "").Trim ();
                }
                if (dataDesc.Contains ("(")) {
                    dataDesc = dataDesc.Remove (dataDesc.IndexOf ("(")).Trim ();
                }
            }
            dr ["DataDesc"] = dataDesc;
        }
    }
}
----------------------------------------

 public void UpdateDescription (DataTable dataTable) {
    if (dataTable != null && dataTable.Rows.Count > 0) {
        foreach (DataRow dr in dataTable.Rows) {
            String dataDesc = dr ["DataDesc"].ToString ();
            if (! dr.IsNull ("DataDesc")) {
                dataDesc = dataDesc.Replace("STATE","");
                dataDesc = dataDesc.Replace("HELLO ALL", "");
                if (dataDesc.IndexOf ('(') > 0) {
                    dataDesc = dataDesc.Substring(0, dataDesc.IndexOf('(')).Trim();
                }
            }
            dr ["DataDesc"] = dataDesc;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
388
4
Gpt3D_Clone388_4.cs 1 19
Gpt3D_Clone388_4.cs 20 35
----------------------------------------

public void UpdateDescription (DataTable dataTable) {
    if (dataTable != null && dataTable.Rows.Count > 0) {
        foreach (DataRow dr in dataTable.Rows) {
            String dataDesc = dr ["DataDesc"].ToString ();
            if (! dr.IsNull ("DataDesc")) {
                if (dataDesc.Contains ("STATE")) {
                    dataDesc = dataDesc.Replace ("STATE", "").Trim ();
                }
                if (dataDesc.Contains ("HELLO ALL")) {
                    dataDesc = dataDesc.Replace ("HELLO ALL", "").Trim ();
                }
                if (dataDesc.Contains ("(")) {
                    dataDesc = dataDesc.Remove (dataDesc.IndexOf ("(")).Trim ();
                }
            }
            dr ["DataDesc"] = dataDesc;
        }
    }
}
----------------------------------------

 public void UpdateDescription (DataTable dataTable) {
    if (dataTable != null && dataTable.Rows.Count > 0) {
        foreach (DataRow dr in dataTable.Rows) {
            String dataDesc = dr ["DataDesc"].ToString ();
            if (! dr.IsNull ("DataDesc")) {
                dataDesc = dataDesc.Replace(" STATE", "")
                                  .Replace(" HELLO ALL", "");
                if (dataDesc.IndexOf('(') > -1)
                    dataDesc = dataDesc.Substring(0, dataDesc.IndexOf('(')).Trim();
            }
            dr ["DataDesc"] = dataDesc;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
388
5
Gpt3D_Clone388_5.cs 1 19
Gpt3D_Clone388_5.cs 20 34
----------------------------------------

public void UpdateDescription (DataTable dataTable) {
    if (dataTable != null && dataTable.Rows.Count > 0) {
        foreach (DataRow dr in dataTable.Rows) {
            String dataDesc = dr ["DataDesc"].ToString ();
            if (! dr.IsNull ("DataDesc")) {
                if (dataDesc.Contains ("STATE")) {
                    dataDesc = dataDesc.Replace ("STATE", "").Trim ();
                }
                if (dataDesc.Contains ("HELLO ALL")) {
                    dataDesc = dataDesc.Replace ("HELLO ALL", "").Trim ();
                }
                if (dataDesc.Contains ("(")) {
                    dataDesc = dataDesc.Remove (dataDesc.IndexOf ("(")).Trim ();
                }
            }
            dr ["DataDesc"] = dataDesc;
        }
    }
}
----------------------------------------

 public void UpdateDescription (DataTable dataTable) {
    if (dataTable != null && dataTable.Rows.Count > 0) {
        foreach (DataRow dr in dataTable.Rows) {
            String dataDesc = dr ["DataDesc"].ToString ();
            if (! dr.IsNull ("DataDesc")) {
                dataDesc = dataDesc.Replace("STATE ", "");
                dataDesc = dataDesc.Replace("HELLO ALL ", "");
                dataDesc = dataDesc.Split(new Char[] {'('})[0].Trim();
            }
            dr ["DataDesc"] = dataDesc;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
388
6
Gpt3D_Clone388_6.cs 1 19
Gpt3D_Clone388_6.cs 20 35
----------------------------------------

public void UpdateDescription (DataTable dataTable) {
    if (dataTable != null && dataTable.Rows.Count > 0) {
        foreach (DataRow dr in dataTable.Rows) {
            String dataDesc = dr ["DataDesc"].ToString ();
            if (! dr.IsNull ("DataDesc")) {
                if (dataDesc.Contains ("STATE")) {
                    dataDesc = dataDesc.Replace ("STATE", "").Trim ();
                }
                if (dataDesc.Contains ("HELLO ALL")) {
                    dataDesc = dataDesc.Replace ("HELLO ALL", "").Trim ();
                }
                if (dataDesc.Contains ("(")) {
                    dataDesc = dataDesc.Remove (dataDesc.IndexOf ("(")).Trim ();
                }
            }
            dr ["DataDesc"] = dataDesc;
        }
    }
}
----------------------------------------

 public void UpdateDescription (DataTable dataTable) {
    if (dataTable != null && dataTable.Rows.Count > 0) {
        foreach (DataRow dr in dataTable.Rows) {
            String dataDesc = dr ["DataDesc"].ToString ();
            if (! dr.IsNull ("DataDesc")) {
                dataDesc = dataDesc.Replace("STATE", "")
                                  .Replace("HELLO ALL", "");
                if (dataDesc.Contains ("("))
                    dataDesc = dataDesc.Substring(0, dataDesc.IndexOf('('));
            }
            dr ["DataDesc"] = dataDesc.Trim();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
388
7
Gpt3D_Clone388_7.cs 1 19
Gpt3D_Clone388_7.cs 20 35
----------------------------------------

public void UpdateDescription (DataTable dataTable) {
    if (dataTable != null && dataTable.Rows.Count > 0) {
        foreach (DataRow dr in dataTable.Rows) {
            String dataDesc = dr ["DataDesc"].ToString ();
            if (! dr.IsNull ("DataDesc")) {
                if (dataDesc.Contains ("STATE")) {
                    dataDesc = dataDesc.Replace ("STATE", "").Trim ();
                }
                if (dataDesc.Contains ("HELLO ALL")) {
                    dataDesc = dataDesc.Replace ("HELLO ALL", "").Trim ();
                }
                if (dataDesc.Contains ("(")) {
                    dataDesc = dataDesc.Remove (dataDesc.IndexOf ("(")).Trim ();
                }
            }
            dr ["DataDesc"] = dataDesc;
        }
    }
}
----------------------------------------

 public void UpdateDescription (DataTable dataTable) {
    if (dataTable != null && dataTable.Rows.Count > 0) {
        foreach (DataRow dr in dataTable.Rows) {
            String dataDesc = dr ["DataDesc"].ToString ();
            if (! dr.IsNull ("DataDesc")) {
                var dataDescArray = dataDesc.Split(new Char[] {'('}).ToArray();
                dataDesc = dataDescArray[0].Replace("STATE", "")
                                          .Replace("HELLO ALL", "")
                                          .Trim();
            }
            dr ["DataDesc"] = dataDesc;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
388
8
Gpt3D_Clone388_8.cs 1 19
Gpt3D_Clone388_8.cs 20 35
----------------------------------------

public void UpdateDescription (DataTable dataTable) {
    if (dataTable != null && dataTable.Rows.Count > 0) {
        foreach (DataRow dr in dataTable.Rows) {
            String dataDesc = dr ["DataDesc"].ToString ();
            if (! dr.IsNull ("DataDesc")) {
                if (dataDesc.Contains ("STATE")) {
                    dataDesc = dataDesc.Replace ("STATE", "").Trim ();
                }
                if (dataDesc.Contains ("HELLO ALL")) {
                    dataDesc = dataDesc.Replace ("HELLO ALL", "").Trim ();
                }
                if (dataDesc.Contains ("(")) {
                    dataDesc = dataDesc.Remove (dataDesc.IndexOf ("(")).Trim ();
                }
            }
            dr ["DataDesc"] = dataDesc;
        }
    }
}
----------------------------------------

 public void UpdateDescription (DataTable dataTable) {
    if (dataTable != null && dataTable.Rows.Count > 0) {
        foreach (DataRow dr in dataTable.Rows) {
            String dataDesc = dr ["DataDesc"].ToString ();
            if (! dr.IsNull ("DataDesc")) {
                dataDesc = dataDesc.Replace(" STATE", "")
                                  .Replace(" HELLO ALL", "")
                                  .Split(new Char[] {'('})[0]
                                  .Trim();
            }
            dr ["DataDesc"] = dataDesc;
        }
    }
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
388
9
Gpt3D_Clone388_9.cs 1 19
Gpt3D_Clone388_9.cs 20 34
----------------------------------------

public void UpdateDescription (DataTable dataTable) {
    if (dataTable != null && dataTable.Rows.Count > 0) {
        foreach (DataRow dr in dataTable.Rows) {
            String dataDesc = dr ["DataDesc"].ToString ();
            if (! dr.IsNull ("DataDesc")) {
                if (dataDesc.Contains ("STATE")) {
                    dataDesc = dataDesc.Replace ("STATE", "").Trim ();
                }
                if (dataDesc.Contains ("HELLO ALL")) {
                    dataDesc = dataDesc.Replace ("HELLO ALL", "").Trim ();
                }
                if (dataDesc.Contains ("(")) {
                    dataDesc = dataDesc.Remove (dataDesc.IndexOf ("(")).Trim ();
                }
            }
            dr ["DataDesc"] = dataDesc;
        }
    }
}
----------------------------------------

 public void UpdateDescription (DataTable dataTable) {
    if (dataTable != null && dataTable.Rows.Count > 0) {
        foreach (DataRow dr in dataTable.Rows) {
            String dataDesc = dr ["DataDesc"].ToString ();
            if (! dr.IsNull ("DataDesc")) {
                dataDesc = dataDesc.Replace("STATE", "")
                                  .Replace("HELLO ALL", "")
                                  .Split(new Char[] {'('})[0].Trim();
            }
            dr ["DataDesc"] = dataDesc;
        }
    }
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
393
0
Gpt3D_Clone393_0.cs 1 27
Gpt3D_Clone393_0.cs 28 76
----------------------------------------

public override bool Equals (object obj) {
    if (obj == null) {
        return false;
    }
    RuntimeType type = (RuntimeType) base.GetType ();
    RuntimeType type2 = (RuntimeType) obj.GetType ();
    if (type2 != type) {
        return false;
    }
    object a = this;
    if (CanCompareBits (this)) {
        return FastEqualsCheck (a, obj);
    }
    FieldInfo [] fields = type.GetFields (BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);
    for (int i = 0; i < fields.Length; i ++) {
        object obj3 = ((RtFieldInfo) fields [i]).UnsafeGetValue (a);
        object obj4 = ((RtFieldInfo) fields [i]).UnsafeGetValue (obj);
        if (obj3 == null) {
            if (obj4 != null) {
                return false;
            }
        } else if (! obj3.Equals (obj4)) {
            return false;
        }
    }
    return true;
}
----------------------------------------

 public override bool Equals (object obj) 
{
	if (obj == null || !(obj is RuntimeType))
        return false;
	
	RuntimeType type1 = (RuntimeType) base.GetType();
    RuntimeType type2 = (RuntimeType) obj.GetType();
    if (!type1.Equals(type2)) 
		return false;
	
	object a = this;    
    if (CanCompareBits(this)) 
		return FastEqualsCheck(a, obj);
	
	// get fields of this and obj
	FieldInfo[] fields1 = type1.GetFields(BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);
	FieldInfo[] fields2 = type2.GetFields(BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);
	
	// size check
	if (fields1.Length != fields2.Length)
		return false;
	
	// compare all fields
	for  (int i = 0; i < fields1.Length; i++)
	{
		RtFieldInfo rtf1 = (RtFieldInfo)fields1[i];
		RtFieldInfo rtf2 = (RtFieldInfo)fields2[i];	
		object obj1 = rtf1.UnsafeGetValue(a);
		object obj2 = rtf2.UnsafeGetValue(obj);
		
		if (obj1 == null)
		{
			if (obj2 != null)
				return false;
			else 
				continue;
		}
		else
		{
			if (!obj1.Equals(obj2))
				return false;
			else 
				continue;
		}
	}
	return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
393
1
Gpt3D_Clone393_1.cs 1 27
Gpt3D_Clone393_1.cs 28 74
----------------------------------------

public override bool Equals (object obj) {
    if (obj == null) {
        return false;
    }
    RuntimeType type = (RuntimeType) base.GetType ();
    RuntimeType type2 = (RuntimeType) obj.GetType ();
    if (type2 != type) {
        return false;
    }
    object a = this;
    if (CanCompareBits (this)) {
        return FastEqualsCheck (a, obj);
    }
    FieldInfo [] fields = type.GetFields (BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);
    for (int i = 0; i < fields.Length; i ++) {
        object obj3 = ((RtFieldInfo) fields [i]).UnsafeGetValue (a);
        object obj4 = ((RtFieldInfo) fields [i]).UnsafeGetValue (obj);
        if (obj3 == null) {
            if (obj4 != null) {
                return false;
            }
        } else if (! obj3.Equals (obj4)) {
            return false;
        }
    }
    return true;
}
----------------------------------------

 public override bool Equals(object obj)
{
    //If the two objects are not of the same type, they cannot be equal
    if (obj == null || !(obj is RuntimeType))
        return false;
    //If they are the same type
    else 
    {
        RuntimeType type1 = (RuntimeType)base.GetType();
        RuntimeType type2 = (RuntimeType)obj.GetType();
        if (!type1.Equals(type2))
            return false;
        else
        {
            object a = this;
            //If the two objects have the same bits, use the fastequalscheck method
            if (CanCompareBits(this))
                return FastEqualsCheck(a, obj);
            else
            {
                FieldInfo[] fields1 = type1.GetFields(BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);
                FieldInfo[] fields2 = type2.GetFields(BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);
                if (fields1.Length != fields2.Length) //Length of the two FieldInfo must be the same
                    return false;
                else
                {
                    for (int i = 0; i < fields1.Length; i++) //Size check
                    {
                        RtFieldInfo rtf1 = (RtFieldInfo)fields1[i];
                        RtFieldInfo rtf2 = (RtFieldInfo)fields2[i];
                        object obj1 = rtf1.UnsafeGetValue(a);
                        object obj2 = rtf2.UnsafeGetValue(obj);
                        if (obj1 == null && obj2 == null) //"null" objects check
                            continue;
                        else if (obj1 == null || obj2 == null)
                            return false;
                        else if(!obj1.Equals(obj2)) //Test for equality
                            return false;
                    }
                    return true;
                }
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
393
3
Gpt3D_Clone393_3.cs 1 27
Gpt3D_Clone393_3.cs 28 80
----------------------------------------

public override bool Equals (object obj) {
    if (obj == null) {
        return false;
    }
    RuntimeType type = (RuntimeType) base.GetType ();
    RuntimeType type2 = (RuntimeType) obj.GetType ();
    if (type2 != type) {
        return false;
    }
    object a = this;
    if (CanCompareBits (this)) {
        return FastEqualsCheck (a, obj);
    }
    FieldInfo [] fields = type.GetFields (BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);
    for (int i = 0; i < fields.Length; i ++) {
        object obj3 = ((RtFieldInfo) fields [i]).UnsafeGetValue (a);
        object obj4 = ((RtFieldInfo) fields [i]).UnsafeGetValue (obj);
        if (obj3 == null) {
            if (obj4 != null) {
                return false;
            }
        } else if (! obj3.Equals (obj4)) {
            return false;
        }
    }
    return true;
}
----------------------------------------

 public override bool Equals(object obj)
{
    //Checks if object is null
    if (obj == null || !(obj is RuntimeType))
        return false;
    
    //Initializing objects
    RuntimeType type1 = (RuntimeType)base.GetType();
    RuntimeType type2 = (RuntimeType)obj.GetType();
    FieldInfo[] fields1, fields2;
    object a = this;
    //Return false if two objects are not the same type
    if (!type1.Equals(type2))
        return false;
    //Compare bits if objects are the same
    else if (CanCompareBits(this))
        return FastEqualsCheck(a, obj);
    
    //Get fields
    else
    {
        fields1 = type1.GetFields(BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);
        fields2 = type2.GetFields(BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);
        //Length of fields check
        if(fields1.Length != fields2.Length)
            return false;
        //Compare fields
        for  (int i = 0; i < fields1.Length; i++)
        {
            RtFieldInfo rtf1 = (RtFieldInfo)fields1[i];
            RtFieldInfo rtf2 = (RtFieldInfo)fields2[i];	
            object obj1 = rtf1.UnsafeGetValue(a);
            object obj2 = rtf2.UnsafeGetValue(obj);
            
            //Null check
            if (obj1 == null)
            {
                if (obj2 != null)
                    return false;
            }
            //Test for equality
            else if (!obj1.Equals(obj2))
                return false;
        }
        return true;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
393
4
Gpt3D_Clone393_4.cs 1 27
Gpt3D_Clone393_4.cs 28 65
----------------------------------------

public override bool Equals (object obj) {
    if (obj == null) {
        return false;
    }
    RuntimeType type = (RuntimeType) base.GetType ();
    RuntimeType type2 = (RuntimeType) obj.GetType ();
    if (type2 != type) {
        return false;
    }
    object a = this;
    if (CanCompareBits (this)) {
        return FastEqualsCheck (a, obj);
    }
    FieldInfo [] fields = type.GetFields (BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);
    for (int i = 0; i < fields.Length; i ++) {
        object obj3 = ((RtFieldInfo) fields [i]).UnsafeGetValue (a);
        object obj4 = ((RtFieldInfo) fields [i]).UnsafeGetValue (obj);
        if (obj3 == null) {
            if (obj4 != null) {
                return false;
            }
        } else if (! obj3.Equals (obj4)) {
            return false;
        }
    }
    return true;
}
----------------------------------------

 public override bool Equals(object obj)
{
    if (obj == null || !(obj is RuntimeType))
        return false;
    RuntimeType type1 = (RuntimeType)base.GetType();
    RuntimeType type2 = (RuntimeType)obj.GetType();
    if (!type1.Equals(type2))
        return false;
    object a = this;
    if (CanCompareBits(this))
        return FastEqualsCheck(a, obj);
    FieldInfo[] fields1 = type1.GetFields(BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);
    FieldInfo[] fields2 = type2.GetFields(BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);
    if (fields1.Length != fields2.Length)
        return false;
    for (int i = 0; i < fields1.Length; i++)
    {
        RtFieldInfo rtf1 = (RtFieldInfo)fields1[i];
        RtFieldInfo rtf2 = (RtFieldInfo)fields2[i];
        object obj1 = rtf1.UnsafeGetValue(a);
        object obj2 = rtf2.UnsafeGetValue(obj);
        if (obj1 == null && obj2 == null)
            continue;
        else if (obj1 == null || obj2 == null)
            return false;
        else if (!obj1.Equals(obj2))
            return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
393
5
Gpt3D_Clone393_5.cs 1 27
Gpt3D_Clone393_5.cs 28 77
----------------------------------------

public override bool Equals (object obj) {
    if (obj == null) {
        return false;
    }
    RuntimeType type = (RuntimeType) base.GetType ();
    RuntimeType type2 = (RuntimeType) obj.GetType ();
    if (type2 != type) {
        return false;
    }
    object a = this;
    if (CanCompareBits (this)) {
        return FastEqualsCheck (a, obj);
    }
    FieldInfo [] fields = type.GetFields (BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);
    for (int i = 0; i < fields.Length; i ++) {
        object obj3 = ((RtFieldInfo) fields [i]).UnsafeGetValue (a);
        object obj4 = ((RtFieldInfo) fields [i]).UnsafeGetValue (obj);
        if (obj3 == null) {
            if (obj4 != null) {
                return false;
            }
        } else if (! obj3.Equals (obj4)) {
            return false;
        }
    }
    return true;
}
----------------------------------------

 public override bool Equals(object obj)
{
    //Check if object is null
    if (obj == null || !(obj is RuntimeType))
        return false;
    RuntimeType type1 = (RuntimeType)base.GetType();
    RuntimeType type2 = (RuntimeType)obj.GetType();
    FieldInfo[] fields1, fields2;
    object a = this;
    //If objects are not the same type, return false
    if (!type1.Equals(type2))
        return false;
    //Compare bits if objects are the same
    else if (CanCompareBits(this))
        return FastEqualsCheck(a, obj);
    
    //Get fields
    else
    {
        fields1 = type1.GetFields(BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);
        fields2 = type2.GetFields(BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);
        //Length of fields check
        if(fields1.Length != fields2.Length)
            return false;
        //Compare fields
        for  (int i = 0; i < fields1.Length; i++)
        {
            RtFieldInfo rtf1 = (RtFieldInfo)fields1[i];
            RtFieldInfo rtf2 = (RtFieldInfo)fields2[i];	
            object obj1 = rtf1.UnsafeGetValue(a);
            object obj2 = rtf2.UnsafeGetValue(obj);
            //Null check
            if (obj1 == null && obj2 != null)
                return false;
                
            //Equality check
            else if (obj1 != null && !obj1.Equals(obj2))
                return false;
        }
        return true;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
395
1
Gpt3D_Clone395_1.cs 1 14
Gpt3D_Clone395_1.cs 15 40
----------------------------------------

public bool DoThisJob (string job, int numberOfShifts) {
    if (! String.IsNullOrEmpty (currentJob)) {
        return false;
    }
    for (int i = 0; i < jobsICanDo.Length; i ++) {
        if (jobsICanDo [i] == job) {
            currentJob = job;
            this.shiftsToWork = numberOfShifts;
            shiftsWorked = 0;
            return true;
        }
    }
    return false;
}
----------------------------------------

 public bool DoThisJob (string job, int numberOfShifts) 
{
                if (String.IsNullOrEmpty(currentJob)) 
                {
                    int i;
                    for (i=0; i< jobsICanDo.Length; i++)
                    {
                        if (jobsICanDo[i] == job)
                        {
                            currentJob = job;
                            this.shiftsToWork = numberOfShifts;
                            shiftsWorked = 0;
                            break;
                        }
                    }
                    if(i == jobsICanDo.Length){
                        return false;
                    }
                    else{
                        return true;
                    }
                }
                return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
395
2
Gpt3D_Clone395_2.cs 1 14
Gpt3D_Clone395_2.cs 15 37
----------------------------------------

public bool DoThisJob (string job, int numberOfShifts) {
    if (! String.IsNullOrEmpty (currentJob)) {
        return false;
    }
    for (int i = 0; i < jobsICanDo.Length; i ++) {
        if (jobsICanDo [i] == job) {
            currentJob = job;
            this.shiftsToWork = numberOfShifts;
            shiftsWorked = 0;
            return true;
        }
    }
    return false;
}
----------------------------------------

 public bool DoThisJob (string job, int numberOfShifts) 
{   
                if (String.IsNullOrEmpty(currentJob))
                {
                    int i;
                    bool returnType = false;
                    for (i = 0; i< jobsICanDo.Length; i++)
                    {
                        if (jobsICanDo[i] == job)
                        {
                            currentJob = job;
                            this.shiftsToWork = numberOfShifts;
                            shiftsWorked = 0;
                            returnType = true;
                        }
                    }
                    return returnType;
                }
                return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
395
7
Gpt3D_Clone395_7.cs 1 14
Gpt3D_Clone395_7.cs 15 33
----------------------------------------

public bool DoThisJob (string job, int numberOfShifts) {
    if (! String.IsNullOrEmpty (currentJob)) {
        return false;
    }
    for (int i = 0; i < jobsICanDo.Length; i ++) {
        if (jobsICanDo [i] == job) {
            currentJob = job;
            this.shiftsToWork = numberOfShifts;
            shiftsWorked = 0;
            return true;
        }
    }
    return false;
}
----------------------------------------

 public bool DoThisJob (string job, int numberOfShifts)
{
                if (String.IsNullOrEmpty(this.currentJob)) 
            {
                for (int i = 0; i < jobsICanDo.Length; i++)
                {
                    if (this.jobsICanDo[i].Equals(job))
                    {
                        this.currentJob = job;
                        this.shiftsToWork = numberOfShifts;
                        this.shiftsWorked = 0;
                        return true;
                    }
                }
            }
            return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
397
0
Gpt3D_Clone397_0.cs 1 26
Gpt3D_Clone397_0.cs 27 58
----------------------------------------

public static int Asc (char String) {
    int num1 = Convert.ToInt32 (String);
    if (num1 < 128)
        return num1;
    try {
        Encoding fileIoEncoding = Utils.GetFileIOEncoding ();
        char [] chars = new char [1] {String};
        if (fileIoEncoding.IsSingleByte) {
            byte [] bytes = new byte [1];
            fileIoEncoding.GetBytes (chars, 0, 1, bytes, 0);
            return (int) bytes [0];
        }
        byte [] bytes1 = new byte [2];
        if (fileIoEncoding.GetBytes (chars, 0, 1, bytes1, 0) == 1)
            return (int) bytes1 [0];
        if (BitConverter.IsLittleEndian) {
            byte num2 = bytes1 [0];
            bytes1 [0] = bytes1 [1];
            bytes1 [1] = num2;
        }
        return (int) BitConverter.ToInt16 (bytes1, 0);
    }
    catch (Exception ex) {
        throw ex;
    }
}
----------------------------------------

  public static int Asc (char keyChar) 
{ 
	int value = (int)keyChar; 
	if (value < 128) 
		return value; 
	Encoding ioEncoding = Utils.GetFileIOEncoding(); 
	if (ioEncoding.IsSingleByte) 
	{ 
		byte[] bytes = new byte[1]; 
		ioEncoding.GetBytes(new char[] {keyChar}, 0, 1, bytes, 0); 
		value = (int)bytes[0]; 
	} 
	else 
	{ 
		byte[] bytes = new byte[2]; 
		ioEncoding.GetBytes(new char[] {keyChar}, 0, 1, bytes, 0); 
		if (BitConverter.IsLittleEndian) 
		{ 
			value = (int)bytes[1]; 
			value <<= 8; 
			value += (int)bytes[0]; 
		} 
		else 
		{ 
			value = (int)bytes[1]; 
			value += (int)bytes[0] << 8; 
		} 
	} 
	return value; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
397
1
Gpt3D_Clone397_1.cs 1 26
Gpt3D_Clone397_1.cs 27 60
----------------------------------------

public static int Asc (char String) {
    int num1 = Convert.ToInt32 (String);
    if (num1 < 128)
        return num1;
    try {
        Encoding fileIoEncoding = Utils.GetFileIOEncoding ();
        char [] chars = new char [1] {String};
        if (fileIoEncoding.IsSingleByte) {
            byte [] bytes = new byte [1];
            fileIoEncoding.GetBytes (chars, 0, 1, bytes, 0);
            return (int) bytes [0];
        }
        byte [] bytes1 = new byte [2];
        if (fileIoEncoding.GetBytes (chars, 0, 1, bytes1, 0) == 1)
            return (int) bytes1 [0];
        if (BitConverter.IsLittleEndian) {
            byte num2 = bytes1 [0];
            bytes1 [0] = bytes1 [1];
            bytes1 [1] = num2;
        }
        return (int) BitConverter.ToInt16 (bytes1, 0);
    }
    catch (Exception ex) {
        throw ex;
    }
}
----------------------------------------

  public static int Asc (char Str) {
    int num1 = Convert.ToInt32(Str);
    if (num1 < 128)
    {
        return num1;
    }
    try
    {
        Encoding fileIoEncoding = Utils.GetFileIOEncoding();
        byte[] numArray = new byte[2];
        char[] chars = new char[1] { Str };
        int num2 = fileIoEncoding.GetBytes(chars, 0, 1, numArray, 0);
        int num3 = 0;
        if (num2 == 1)
        {
            num3 = (int)numArray[0];
        }
        else if (BitConverter.IsLittleEndian)
        {
            num3 = (int)((numArray[0] * 0x100) + numArray[1]);
        }
        else
        {
            num3 = (int)((numArray[1] * 0x100) + numArray[0]);
        }
        return num3;
    }
    catch (Exception exception)
    {
        throw exception;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
397
3
Gpt3D_Clone397_3.cs 1 26
Gpt3D_Clone397_3.cs 27 36
----------------------------------------

public static int Asc (char String) {
    int num1 = Convert.ToInt32 (String);
    if (num1 < 128)
        return num1;
    try {
        Encoding fileIoEncoding = Utils.GetFileIOEncoding ();
        char [] chars = new char [1] {String};
        if (fileIoEncoding.IsSingleByte) {
            byte [] bytes = new byte [1];
            fileIoEncoding.GetBytes (chars, 0, 1, bytes, 0);
            return (int) bytes [0];
        }
        byte [] bytes1 = new byte [2];
        if (fileIoEncoding.GetBytes (chars, 0, 1, bytes1, 0) == 1)
            return (int) bytes1 [0];
        if (BitConverter.IsLittleEndian) {
            byte num2 = bytes1 [0];
            bytes1 [0] = bytes1 [1];
            bytes1 [1] = num2;
        }
        return (int) BitConverter.ToInt16 (bytes1, 0);
    }
    catch (Exception ex) {
        throw ex;
    }
}
----------------------------------------

  public static int Asc (char input) 
{ 
	int val = (int)input;
	if (val < 128) 
		return val; 
	 UnicodeEncoding unicode = new UnicodeEncoding(); 
	 return unicode.GetBytes(new char[] {input})[0]; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
397
4
Gpt3D_Clone397_4.cs 1 26
Gpt3D_Clone397_4.cs 27 34
----------------------------------------

public static int Asc (char String) {
    int num1 = Convert.ToInt32 (String);
    if (num1 < 128)
        return num1;
    try {
        Encoding fileIoEncoding = Utils.GetFileIOEncoding ();
        char [] chars = new char [1] {String};
        if (fileIoEncoding.IsSingleByte) {
            byte [] bytes = new byte [1];
            fileIoEncoding.GetBytes (chars, 0, 1, bytes, 0);
            return (int) bytes [0];
        }
        byte [] bytes1 = new byte [2];
        if (fileIoEncoding.GetBytes (chars, 0, 1, bytes1, 0) == 1)
            return (int) bytes1 [0];
        if (BitConverter.IsLittleEndian) {
            byte num2 = bytes1 [0];
            bytes1 [0] = bytes1 [1];
            bytes1 [1] = num2;
        }
        return (int) BitConverter.ToInt16 (bytes1, 0);
    }
    catch (Exception ex) {
        throw ex;
    }
}
----------------------------------------

  public static int Asc (char str) 
{ 
    int num; 
    byte[] bytes = Encoding.Unicode.GetBytes(str+" "); 
    return BitConverter.ToInt16(bytes, 0); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
397
5
Gpt3D_Clone397_5.cs 1 26
Gpt3D_Clone397_5.cs 27 33
----------------------------------------

public static int Asc (char String) {
    int num1 = Convert.ToInt32 (String);
    if (num1 < 128)
        return num1;
    try {
        Encoding fileIoEncoding = Utils.GetFileIOEncoding ();
        char [] chars = new char [1] {String};
        if (fileIoEncoding.IsSingleByte) {
            byte [] bytes = new byte [1];
            fileIoEncoding.GetBytes (chars, 0, 1, bytes, 0);
            return (int) bytes [0];
        }
        byte [] bytes1 = new byte [2];
        if (fileIoEncoding.GetBytes (chars, 0, 1, bytes1, 0) == 1)
            return (int) bytes1 [0];
        if (BitConverter.IsLittleEndian) {
            byte num2 = bytes1 [0];
            bytes1 [0] = bytes1 [1];
            bytes1 [1] = num2;
        }
        return (int) BitConverter.ToInt16 (bytes1, 0);
    }
    catch (Exception ex) {
        throw ex;
    }
}
----------------------------------------

  public static int Asc (char ch) 
{ 
	Encoding enc = Utils.GetFileIOEncoding(); 
	return enc.GetBytes(new char[] {ch})[0]; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
400
0
Gpt3D_Clone400_0.cs 1 12
Gpt3D_Clone400_0.cs 13 71
----------------------------------------

public Bitmap BitmapFromSource (System.Windows.Media.Imaging.BitmapSource bitmapsource) {
    var src = new System.Windows.Media.Imaging.FormatConvertedBitmap ();
    src.BeginInit ();
    src.Source = bitmapsource;
    src.DestinationFormat = System.Windows.Media.PixelFormats.Bgra32;
    src.EndInit ();
    Bitmap bitmap = new Bitmap (src.PixelWidth, src.PixelHeight, System.Drawing.Imaging.PixelFormat.Format32bppArgb);
    var data = bitmap.LockBits (new Rectangle (Point.Empty, bitmap.Size), System.Drawing.Imaging.ImageLockMode.WriteOnly, System.Drawing.Imaging.PixelFormat.Format32bppArgb);
    src.CopyPixels (System.Windows.Int32Rect.Empty, data.Scan0, data.Height * data.Stride, data.Stride);
    bitmap.UnlockBits (data);
    return bitmap;
}
----------------------------------------

 public Bitmap BitmapFromSource (System.Windows.Media.Imaging.BitmapSource bitmapsource) {
            var src = new System.Windows.Media.Imaging.FormatConvertedBitmap ();
            src.BeginInit ();
            src.Source = bitmapsource;
            src.DestinationFormat = System.Windows.Media.PixelFormats.Bgra32;
            src.EndInit ();
            Bitmap bitmap = null;
            System.IO.MemoryStream ms = null;
            try{
                var width = src.PixelWidth;
                var height = src.PixelHeight;
                var stride = src.GetPixelBytesPerRow();
                byte[] pixels = new byte[height * stride];
                src.CopyPixels(pixels, stride, 0);
                int bytesPerPixel = (bitmap.PixelFormat == System.Drawing.Imaging.PixelFormat.Format32bppArgb ? 4 : 3);
                int newHeight = src.PixelHeight;
                int newWidth = src.PixelWidth;
                int size = src.GetPixelBytesPerRow();
                int newSize = newWidth * bytesPerPixel;
                byte[] bgraPixels = new byte[newHeight * newSize];
                for (int y = 0; y < newHeight; ++y)
                {
                    int locationY = size * y;
                    int bmpLocationY = newWidth * y * bytesPerPixel;
                    for (int x = 0; x < newWidth; ++x)
                    {
                        int locationX = locationY + (x * bytesPerPixel);
                        int bmpLocationX = bmpLocationY + (x * bytesPerPixel);
                        bgraPixels[bmpLocationX] = src.PixelBuffer[locationX + 2];
                        bgraPixels[bmpLocationX + 1] = src.PixelBuffer[locationX + 1];
                        bgraPixels[bmpLocationX + 2] = src.PixelBuffer[locationX];
                        bgraPixels[bmpLocationX + 3] = src.PixelBuffer[locationX + 3];
                    }
                }
                ms = new System.IO.MemoryStream();
                bitmap = new Bitmap(width, height, stride, System.Drawing.Imaging.PixelFormat.Format32bppArgb, Marshal.UnsafeAddrOfPinnedArrayElement(bgraPixels, 0));
                bitmap.Save(ms, System.Drawing.Imaging.ImageFormat.Png);
            }
            finally  
            {
                if (ms != null)
                    ms.Dispose();
            }
            return bitmap;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
400
1
Gpt3D_Clone400_1.cs 1 12
Gpt3D_Clone400_1.cs 13 59
----------------------------------------

public Bitmap BitmapFromSource (System.Windows.Media.Imaging.BitmapSource bitmapsource) {
    var src = new System.Windows.Media.Imaging.FormatConvertedBitmap ();
    src.BeginInit ();
    src.Source = bitmapsource;
    src.DestinationFormat = System.Windows.Media.PixelFormats.Bgra32;
    src.EndInit ();
    Bitmap bitmap = new Bitmap (src.PixelWidth, src.PixelHeight, System.Drawing.Imaging.PixelFormat.Format32bppArgb);
    var data = bitmap.LockBits (new Rectangle (Point.Empty, bitmap.Size), System.Drawing.Imaging.ImageLockMode.WriteOnly, System.Drawing.Imaging.PixelFormat.Format32bppArgb);
    src.CopyPixels (System.Windows.Int32Rect.Empty, data.Scan0, data.Height * data.Stride, data.Stride);
    bitmap.UnlockBits (data);
    return bitmap;
}
----------------------------------------

 public Bitmap BitmapFromSource (System.Windows.Media.Imaging.BitmapSource bitmapsource) {
            var src = new System.Windows.Media.Imaging.FormatConvertedBitmap ();
            src.BeginInit ();
            src.Source = bitmapsource;
            src.DestinationFormat = System.Windows.Media.PixelFormats.Bgra32;
            src.EndInit ();
            Bitmap bitmap = null;
            System.IO.MemoryStream ms = null;
            var stride = src.GetPixelBytesPerRow();
            int newHeight = src.PixelHeight;
            int newWidth = src.PixelWidth;
            int bmpwidth = src.PixelWidth;
            int bmpheight = src.PixelHeight;
            byte[] bgraPixels = new byte[newHeight * newWidth * 4];
            for (int y = 0; y < newHeight; y++)
            {
                for (int x = 0; x < newWidth; x++)
                {
                    int index = (y * bmpwidth + x) * 4;
                    bgraPixels[index] = src.PixelBuffer[index + 3];
                    bgraPixels[index + 1] = src.PixelBuffer[index + 2];
                    bgraPixels[index + 2] = src.PixelBuffer[index + 1];
                    bgraPixels[index + 3] = src.PixelBuffer[index];
                }
            }
            try{
                ms = new System.IO.MemoryStream();
                bitmap = new Bitmap(bmpwidth, bmpheight, stride, System.Drawing.Imaging.PixelFormat.Format32bppArgb, Marshal.UnsafeAddrOfPinnedArrayElement(bgraPixels, 0));
                bitmap.Save(ms, System.Drawing.Imaging.ImageFormat.Png);
            }
            finally  
            {
                if (ms != null)
                    ms.Dispose();
            }
            return bitmap;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
400
2
Gpt3D_Clone400_2.cs 1 12
Gpt3D_Clone400_2.cs 13 53
----------------------------------------

public Bitmap BitmapFromSource (System.Windows.Media.Imaging.BitmapSource bitmapsource) {
    var src = new System.Windows.Media.Imaging.FormatConvertedBitmap ();
    src.BeginInit ();
    src.Source = bitmapsource;
    src.DestinationFormat = System.Windows.Media.PixelFormats.Bgra32;
    src.EndInit ();
    Bitmap bitmap = new Bitmap (src.PixelWidth, src.PixelHeight, System.Drawing.Imaging.PixelFormat.Format32bppArgb);
    var data = bitmap.LockBits (new Rectangle (Point.Empty, bitmap.Size), System.Drawing.Imaging.ImageLockMode.WriteOnly, System.Drawing.Imaging.PixelFormat.Format32bppArgb);
    src.CopyPixels (System.Windows.Int32Rect.Empty, data.Scan0, data.Height * data.Stride, data.Stride);
    bitmap.UnlockBits (data);
    return bitmap;
}
----------------------------------------

  public Bitmap BitmapFromSource (System.Windows.Media.Imaging.BitmapSource bitmapsource) {
        Bitmap bitmap = Converter.ConvertToBitmap(bitmapsource);
        var data = bitmap.LockBits (new Rectangle (Point.Empty, bitmap.Size), System.Drawing.Imaging.ImageLockMode.WriteOnly, System.Drawing.Imaging.PixelFormat.Format32bppArgb);
        int stride = data.Stride;
        IntPtr scan0 = data.Scan0;
        int width = src.PixelWidth;
        int height = src.PixelHeight;
        int dataSize = width * height * 4;
        byte[] pixels = new byte[dataSize];
        int bytesPerPixel = (bitmap.PixelFormat == System.Drawing.Imaging.PixelFormat.Format32bppArgb ? 4 : 3);
        int newHeight = src.PixelHeight;
        int newWidth = src.PixelWidth;
        int size = src.GetPixelBytesPerRow();
        int newSize = newWidth * bytesPerPixel;
        for (int y = 0; y < newHeight; ++y)
        {
            int locationY = size * y;
            int bmpLocationY = newWidth * y * bytesPerPixel;
            for (int x = 0; x < newWidth; ++x)
            {
                int locationX = locationY + (x * bytesPerPixel);
                int bmpLocationX = bmpLocationY + (x * bytesPerPixel);
                pixels[bmpLocationX] = src.PixelBuffer[locationX + 2];
                pixels[bmpLocationX + 1] = src.PixelBuffer[locationX + 1];
                pixels[bmpLocationX + 2] = src.PixelBuffer[locationX];
                pixels[bmpLocationX + 3] = src.PixelBuffer[locationX + 3];
            }
        }
        Marshal.Copy(src.PixelBuffer, 0, scan0, dataSize);
        bitmap.UnlockBits (data);
        return bitmap;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
400
3
Gpt3D_Clone400_3.cs 1 12
Gpt3D_Clone400_3.cs 13 60
----------------------------------------

public Bitmap BitmapFromSource (System.Windows.Media.Imaging.BitmapSource bitmapsource) {
    var src = new System.Windows.Media.Imaging.FormatConvertedBitmap ();
    src.BeginInit ();
    src.Source = bitmapsource;
    src.DestinationFormat = System.Windows.Media.PixelFormats.Bgra32;
    src.EndInit ();
    Bitmap bitmap = new Bitmap (src.PixelWidth, src.PixelHeight, System.Drawing.Imaging.PixelFormat.Format32bppArgb);
    var data = bitmap.LockBits (new Rectangle (Point.Empty, bitmap.Size), System.Drawing.Imaging.ImageLockMode.WriteOnly, System.Drawing.Imaging.PixelFormat.Format32bppArgb);
    src.CopyPixels (System.Windows.Int32Rect.Empty, data.Scan0, data.Height * data.Stride, data.Stride);
    bitmap.UnlockBits (data);
    return bitmap;
}
----------------------------------------

 public Bitmap BitmapFromSource (System.Windows.Media.Imaging.BitmapSource bitmapsource) 
    {
        var src = new System.Windows.Media.Imaging.FormatConvertedBitmap ();
        src.BeginInit ();
        src.Source = bitmapsource;
        src.DestinationFormat = System.Windows.Media.PixelFormats.Bgra32;
        src.EndInit ();
        Bitmap bitmap = null;
        var width = src.PixelWidth;
        var height = src.PixelHeight;
        int size = src.GetPixelBytesPerRow();
        int newWidth = src.PixelWidth;
        int newHeight = src.PixelHeight;
        int dataSize = width * height * 4;
        byte[] pixels = new byte[dataSize];
        int stride = dataSize / height;
        try 
        {
            for (int y = 0; y < newHeight; y++) 
            {
                int index = stride * y;
                for (int x = 0; x < newWidth; x+=4) 
                {
                    pixels[index + x]     = src.PixelBuffer[index + x + 2];
                    pixels[index + x + 1] = src.PixelBuffer[index + x + 1];
                    pixels[index + x + 2] = src.PixelBuffer[index + x];
                    pixels[index + x + 3] = src.PixelBuffer[index + x + 3];
                }
            }
            bitmap = new Bitmap(width, height, stride, System.Drawing.Imaging.PixelFormat.Format32bppArgb, Marshal.UnsafeAddrOfPinnedArrayElement(pixels, 0));
        } 
        catch 
        {
            bitmap = null;
        }
        return bitmap;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
400
4
Gpt3D_Clone400_4.cs 1 12
Gpt3D_Clone400_4.cs 13 55
----------------------------------------

public Bitmap BitmapFromSource (System.Windows.Media.Imaging.BitmapSource bitmapsource) {
    var src = new System.Windows.Media.Imaging.FormatConvertedBitmap ();
    src.BeginInit ();
    src.Source = bitmapsource;
    src.DestinationFormat = System.Windows.Media.PixelFormats.Bgra32;
    src.EndInit ();
    Bitmap bitmap = new Bitmap (src.PixelWidth, src.PixelHeight, System.Drawing.Imaging.PixelFormat.Format32bppArgb);
    var data = bitmap.LockBits (new Rectangle (Point.Empty, bitmap.Size), System.Drawing.Imaging.ImageLockMode.WriteOnly, System.Drawing.Imaging.PixelFormat.Format32bppArgb);
    src.CopyPixels (System.Windows.Int32Rect.Empty, data.Scan0, data.Height * data.Stride, data.Stride);
    bitmap.UnlockBits (data);
    return bitmap;
}
----------------------------------------

 public Bitmap BitmapFromSource (System.Windows.Media.Imaging.BitmapSource bitmapsource)
    {
        var src = new System.Windows.Media.Imaging.FormatConvertedBitmap ();
        src.BeginInit ();
        src.Source = bitmapsource;
        src.DestinationFormat = System.Windows.Media.PixelFormats.Bgra32;
        src.EndInit ();
        Bitmap bitmap = new Bitmap (src.PixelWidth, src.PixelHeight, System.Drawing.Imaging.PixelFormat.Format32bppArgb);
        IntPtr destinationStride = bitmap.Scan0;
        int stride = src.GetPixelBytesPerRow();
        bitmap.LockBits();
        unsafe 
        {
            byte* sourceData = (byte*)src.PixelBuffer;
            byte* destinationData = (byte*)bitmap.Scan0;
            int height = src.PixelHeight;
            int width = src.PixelWidth;
            for (int y = 0; y < height; ++y)
            {
                for (int x = 0; x < width; ++x, sourceData+=4, destinationData+=4)
                {
                    // copy b,g,r,a
                    // windows returns b,g,r,a while most libraries return a,b,g,r
                    destinationData[0] = sourceData[3];
                    destinationData[1] = sourceData[2];
                    destinationData[2] = sourceData[1];
                    destinationData[3] = sourceData[0];
                }
            }
        }
        bitmap.UnlockBits();
        return bitmap;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
400
5
Gpt3D_Clone400_5.cs 1 12
Gpt3D_Clone400_5.cs 13 43
----------------------------------------

public Bitmap BitmapFromSource (System.Windows.Media.Imaging.BitmapSource bitmapsource) {
    var src = new System.Windows.Media.Imaging.FormatConvertedBitmap ();
    src.BeginInit ();
    src.Source = bitmapsource;
    src.DestinationFormat = System.Windows.Media.PixelFormats.Bgra32;
    src.EndInit ();
    Bitmap bitmap = new Bitmap (src.PixelWidth, src.PixelHeight, System.Drawing.Imaging.PixelFormat.Format32bppArgb);
    var data = bitmap.LockBits (new Rectangle (Point.Empty, bitmap.Size), System.Drawing.Imaging.ImageLockMode.WriteOnly, System.Drawing.Imaging.PixelFormat.Format32bppArgb);
    src.CopyPixels (System.Windows.Int32Rect.Empty, data.Scan0, data.Height * data.Stride, data.Stride);
    bitmap.UnlockBits (data);
    return bitmap;
}
----------------------------------------

 public Bitmap BitmapFromSource (System.Windows.Media.Imaging.BitmapSource bitmapsource) {
            var src = new System.Windows.Media.Imaging.FormatConvertedBitmap ();
            src.BeginInit ();
            src.Source = bitmapsource;
            src.DestinationFormat = System.Windows.Media.PixelFormats.Bgra32;
            src.EndInit ();
            Bitmap bitmap = null;
            System.IO.MemoryStream ms = null;
            try{
                var width = src.PixelWidth;
                var height = src.PixelHeight;
                var stride = src.GetPixelBytesPerRow();
                byte[] pixels = new byte[height * stride];
                src.CopyPixels(pixels, stride, 0);
                ms = new System.IO.MemoryStream();
                bitmap = new Bitmap(width, height, stride, System.Drawing.Imaging.PixelFormat.Format32bppArgb, Marshal.UnsafeAddrOfPinnedArrayElement(pixels, 0));
                bitmap.Save(ms, System.Drawing.Imaging.ImageFormat.Png);
            }
            finally  
            {
                if (ms != null)
                    ms.Dispose();
            }
            return bitmap;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
400
6
Gpt3D_Clone400_6.cs 1 12
Gpt3D_Clone400_6.cs 13 38
----------------------------------------

public Bitmap BitmapFromSource (System.Windows.Media.Imaging.BitmapSource bitmapsource) {
    var src = new System.Windows.Media.Imaging.FormatConvertedBitmap ();
    src.BeginInit ();
    src.Source = bitmapsource;
    src.DestinationFormat = System.Windows.Media.PixelFormats.Bgra32;
    src.EndInit ();
    Bitmap bitmap = new Bitmap (src.PixelWidth, src.PixelHeight, System.Drawing.Imaging.PixelFormat.Format32bppArgb);
    var data = bitmap.LockBits (new Rectangle (Point.Empty, bitmap.Size), System.Drawing.Imaging.ImageLockMode.WriteOnly, System.Drawing.Imaging.PixelFormat.Format32bppArgb);
    src.CopyPixels (System.Windows.Int32Rect.Empty, data.Scan0, data.Height * data.Stride, data.Stride);
    bitmap.UnlockBits (data);
    return bitmap;
}
----------------------------------------

  public Bitmap BitmapFromSource (System.Windows.Media.Imaging.BitmapSource bitmapsource) {
            var src = new System.Windows.Media.Imaging.FormatConvertedBitmap ();
            src.BeginInit ();
            src.Source = bitmapsource;
            src.DestinationFormat = System.Windows.Media.PixelFormats.Bgra32;
            src.EndInit ();
            var width = src.PixelWidth;
            var height = src.PixelHeight;
            var stride = src.GetPixelBytesPerRow();
            byte[] pixels = new byte[height * stride];
            src.CopyPixels(pixels, stride, 0);
            Bitmap bitmap;
            using (var ms = new System.IO.MemoryStream())
            {
                bitmap = new Bitmap(width, height, stride, System.Drawing.Imaging.PixelFormat.Format32bppArgb, Marshal.UnsafeAddrOfPinnedArrayElement(pixels, 0));
                bitmap.Save(ms, System.Drawing.Imaging.ImageFormat.Png);
            }
            return bitmap;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
403
0
Gpt3D_Clone403_0.cs 1 9
Gpt3D_Clone403_0.cs 10 23
----------------------------------------

public static long addLong (decimal value, decimal adder) {
    try {
        return value + adder;
    }
    catch (OverflowException e) {
        Debug.Log ("greater then max value");
        return decimal.MaxValue;
    }
}
----------------------------------------

 public static long addLong (decimal value, decimal adder) {
    long lValue = (long)value;
    long lAdder = (long)adder;
    long result = lValue + lAdder;
    if(result < Math.Max(lValue, lAdder)) {
        Debug.Log ("greater then max value");
        return decimal.MaxValue;
    }
    else {
        return result;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
403
1
Gpt3D_Clone403_1.cs 1 9
Gpt3D_Clone403_1.cs 10 25
----------------------------------------

public static long addLong (decimal value, decimal adder) {
    try {
        return value + adder;
    }
    catch (OverflowException e) {
        Debug.Log ("greater then max value");
        return decimal.MaxValue;
    }
}
----------------------------------------

 public static long addLong (decimal value, decimal adder) {
    long lValue = BitConverter.ToInt64(BitConverter.GetBytes(value), 0);
    long lAdder = BitConverter.ToInt64(BitConverter.GetBytes(adder), 0);
    long result = lValue + lAdder;
    if (result < Math.Max(lValue, lAdder)) {
        Debug.Log("greater then max value");
        return decimal.MaxValue;
    }
    else {
        return result;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
403
2
Gpt3D_Clone403_2.cs 1 9
Gpt3D_Clone403_2.cs 10 24
----------------------------------------

public static long addLong (decimal value, decimal adder) {
    try {
        return value + adder;
    }
    catch (OverflowException e) {
        Debug.Log ("greater then max value");
        return decimal.MaxValue;
    }
}
----------------------------------------

 public static long addLong (decimal value, decimal adder) {
    Int64 a = (Int64)value;
    Int64 b = (Int64)adder;
    Int64 result = a + b;
    if (result  < Math.Max(a, b))
    {
        Debug.Log ("greater then max value");
        return decimal.MaxValue;
    }
    else {
        return result;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
403
3
Gpt3D_Clone403_3.cs 1 9
Gpt3D_Clone403_3.cs 10 24
----------------------------------------

public static long addLong (decimal value, decimal adder) {
    try {
        return value + adder;
    }
    catch (OverflowException e) {
        Debug.Log ("greater then max value");
        return decimal.MaxValue;
    }
}
----------------------------------------

 public static long addLong (decimal value, decimal adder) {
    ulong uValue = BitConverter.ToUInt64(BitConverter.GetBytes(value), 0);
    ulong uAdder = BitConverter.ToUInt64(BitConverter.GetBytes(adder), 0);
    ulong result = uValue + uAdder;
    if (result < Math.Max(uValue, uAdder)) {
        Debug.Log("greater then max value");
        return decimal.MaxValue;
    }
    else {
        return (long)result;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
403
4
Gpt3D_Clone403_4.cs 1 9
Gpt3D_Clone403_4.cs 10 23
----------------------------------------

public static long addLong (decimal value, decimal adder) {
    try {
        return value + adder;
    }
    catch (OverflowException e) {
        Debug.Log ("greater then max value");
        return decimal.MaxValue;
    }
}
----------------------------------------

 public static long addLong (decimal value, decimal adder) {
    float a = (float)value;
    float b = (float)adder;
    float result = a + b;
    if(result > float.MaxValue) {
        Debug.Log ("greater then max value");
        return decimal.MaxValue;
    }
    else {
        return (long)result;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
403
5
Gpt3D_Clone403_5.cs 1 9
Gpt3D_Clone403_5.cs 10 23
----------------------------------------

public static long addLong (decimal value, decimal adder) {
    try {
        return value + adder;
    }
    catch (OverflowException e) {
        Debug.Log ("greater then max value");
        return decimal.MaxValue;
    }
}
----------------------------------------

 public static long addLong (decimal value, decimal adder) {
    double a = (double)value;
    double b = (double)adder;
    double result = a + b;
    if(result > double.MaxValue) {
        Debug.Log ("greater then max value");
        return decimal.MaxValue;
    }
    else {
        return (long)result;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
403
6
Gpt3D_Clone403_6.cs 1 9
Gpt3D_Clone403_6.cs 10 23
----------------------------------------

public static long addLong (decimal value, decimal adder) {
    try {
        return value + adder;
    }
    catch (OverflowException e) {
        Debug.Log ("greater then max value");
        return decimal.MaxValue;
    }
}
----------------------------------------

 public static long addLong (decimal value, decimal adder) {
    BigInteger bValue = new BigInteger(value);
    BigInteger bAdder = new BigInteger(adder);
    BigInteger result = bValue + bAdder;
    if(BigInteger.Compare(result, decimal.MaxValue)>0) {
        Debug.Log ("greater then max value");
        return decimal.MaxValue;
    }
    else {
        return (long)result;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
403
7
Gpt3D_Clone403_7.cs 1 9
Gpt3D_Clone403_7.cs 10 21
----------------------------------------

public static long addLong (decimal value, decimal adder) {
    try {
        return value + adder;
    }
    catch (OverflowException e) {
        Debug.Log ("greater then max value");
        return decimal.MaxValue;
    }
}
----------------------------------------

 public static long addLong (decimal value, decimal adder) {
    int result = (int)(value + adder);
    if(value + adder > result) {
        Debug.Log ("greater then max value");
        return decimal.MaxValue;
    }
    else {
        return result;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
403
8
Gpt3D_Clone403_8.cs 1 9
Gpt3D_Clone403_8.cs 10 20
----------------------------------------

public static long addLong (decimal value, decimal adder) {
    try {
        return value + adder;
    }
    catch (OverflowException e) {
        Debug.Log ("greater then max value");
        return decimal.MaxValue;
    }
}
----------------------------------------

 public static long addLong (decimal value, decimal adder) {
    if(CheckOverflow(value, adder)) {
        Debug.Log("greater then max value");
        return decimal.MaxValue;
    }
    else {
        return (long)value + (long)adder;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
403
9
Gpt3D_Clone403_9.cs 1 9
Gpt3D_Clone403_9.cs 10 21
----------------------------------------

public static long addLong (decimal value, decimal adder) {
    try {
        return value + adder;
    }
    catch (OverflowException e) {
        Debug.Log ("greater then max value");
        return decimal.MaxValue;
    }
}
----------------------------------------

 public static long addLong (decimal value, decimal adder) {
    if(value + adder > decimal.MaxValue) {
        Debug.Log ("greater then max value");
        return decimal.MaxValue;
    }
    else {
        return value + adder;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
40
10
Gpt3D_Clone40_10.cs 1 11
Gpt3D_Clone40_10.cs 12 27
----------------------------------------

[TestMethod] public void Test_ThatMyEventIsRaised () {
    List < string > receivedEvents = new List < string > ();
    MyClass myClass = new MyClass ();
    myClass.PropertyChanged += delegate (object sender, PropertyChangedEventArgs e) {
        receivedEvents.Add (e.PropertyName);
    };
    myClass.MyProperty = "testing";
    Assert.AreEqual (2, receivedEvents.Count);
    Assert.AreEqual ("MyProperty", receivedEvents [0]);
    Assert.AreEqual ("MyOtherProperty", receivedEvents [1]);
}
----------------------------------------

 [TestMethod] public void Test_ThatMyEventIsRaised() 
{
    List<string> receivedEvents = new List<string>();
    MyClass myClass = new MyClass();
    myClass.PropertyChanged += MyClass_PropertyChanged;
    myClass.MyProperty = "testing";
    Assert.AreEqual(2, receivedEvents.Count);
    Assert.AreEqual("MyProperty", receivedEvents[0]);
    Assert.AreEqual("MyOtherProperty", receivedEvents[1]);
            }
                private void MyClass_PropertyChanged(object sender, PropertyChangedEventArgs e)
                {
                    receivedEvents.Add(e.PropertyName);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
40
11
Gpt3D_Clone40_11.cs 1 11
Gpt3D_Clone40_11.cs 12 27
----------------------------------------

[TestMethod] public void Test_ThatMyEventIsRaised () {
    List < string > receivedEvents = new List < string > ();
    MyClass myClass = new MyClass ();
    myClass.PropertyChanged += delegate (object sender, PropertyChangedEventArgs e) {
        receivedEvents.Add (e.PropertyName);
    };
    myClass.MyProperty = "testing";
    Assert.AreEqual (2, receivedEvents.Count);
    Assert.AreEqual ("MyProperty", receivedEvents [0]);
    Assert.AreEqual ("MyOtherProperty", receivedEvents [1]);
}
----------------------------------------

 [TestMethod] public void Test_ThatMyEventIsRaised() 
{
    List<string> receivedEvents = new List<string>();
    MyClass myClass = new MyClass();
                myClass.OnPropertyChanged += MyClass_OnPropertyChanged;
                myClass.MyProperty = "testing";
                Assert.AreEqual(2, receivedEvents.Count);
                Assert.AreEqual("MyProperty", receivedEvents[0]);
                Assert.AreEqual("MyOtherProperty", receivedEvents[1]);
            }
            private void MyClass_OnPropertyChanged(object sender, PropertyChangedEventArgs e)
            {
                receivedEvents.Add(e.PropertyName);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
40
7
Gpt3D_Clone40_7.cs 1 11
Gpt3D_Clone40_7.cs 12 29
----------------------------------------

[TestMethod] public void Test_ThatMyEventIsRaised () {
    List < string > receivedEvents = new List < string > ();
    MyClass myClass = new MyClass ();
    myClass.PropertyChanged += delegate (object sender, PropertyChangedEventArgs e) {
        receivedEvents.Add (e.PropertyName);
    };
    myClass.MyProperty = "testing";
    Assert.AreEqual (2, receivedEvents.Count);
    Assert.AreEqual ("MyProperty", receivedEvents [0]);
    Assert.AreEqual ("MyOtherProperty", receivedEvents [1]);
}
----------------------------------------

 [TestMethod] public void Test_ThatMyEventIsRaised() 
{
                    List<string> receivedEvents = new List<string> ();
                    MyClass myClass = new MyClass ();
                    myClass.PropertyChanged += EventHandler;
                    myClass.MyProperty = "testing";
                    Assert.AreEqual(2, receivedEvents.Count);
                    Assert.AreEqual("MyProperty", receivedEvents[0]);
                    Assert.AreEqual("MyOtherProperty", receivedEvents[1]);
                }
                private void EventHandler(object sender, PropertyChangedEventArgs e)
                {
                    if (e.PropertyName == "MyProperty" || e.PropertyName == "MyOtherProperty")
                        receivedEvents.Add(e.PropertyName);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
40
8
Gpt3D_Clone40_8.cs 1 11
Gpt3D_Clone40_8.cs 12 30
----------------------------------------

[TestMethod] public void Test_ThatMyEventIsRaised () {
    List < string > receivedEvents = new List < string > ();
    MyClass myClass = new MyClass ();
    myClass.PropertyChanged += delegate (object sender, PropertyChangedEventArgs e) {
        receivedEvents.Add (e.PropertyName);
    };
    myClass.MyProperty = "testing";
    Assert.AreEqual (2, receivedEvents.Count);
    Assert.AreEqual ("MyProperty", receivedEvents [0]);
    Assert.AreEqual ("MyOtherProperty", receivedEvents [1]);
}
----------------------------------------

 [TestMethod] public void Test_ThatMyEventIsRaised() 
{
                    List<string> receivedEvents = new List<string> ();
                    MyClass myClass = new MyClass ();
                    myClass.PropertyChanged += OnPropertyChanged;
                    myClass.MyProperty = "testing";
                    Assert.AreEqual(2, receivedEvents.Count);
                    Assert.AreEqual("MyProperty", receivedEvents[0]);
                    Assert.AreEqual("MyOtherProperty", receivedEvents[1]);
                }
                private void OnPropertyChanged(object sender, PropertyChangedEventArgs e)
                {
                if (e.PropertyName == "MyProperty" || e.PropertyName == "MyOtherProperty")   
                    receivedEvents.Add(e.PropertyName);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
40
9
Gpt3D_Clone40_9.cs 1 11
Gpt3D_Clone40_9.cs 12 28
----------------------------------------

[TestMethod] public void Test_ThatMyEventIsRaised () {
    List < string > receivedEvents = new List < string > ();
    MyClass myClass = new MyClass ();
    myClass.PropertyChanged += delegate (object sender, PropertyChangedEventArgs e) {
        receivedEvents.Add (e.PropertyName);
    };
    myClass.MyProperty = "testing";
    Assert.AreEqual (2, receivedEvents.Count);
    Assert.AreEqual ("MyProperty", receivedEvents [0]);
    Assert.AreEqual ("MyOtherProperty", receivedEvents [1]);
}
----------------------------------------

 [TestMethod] public void Test_ThatMyEventIsRaised() 
{
    List<string> receivedEvents = new List<string> ();
    MyClass myClass = new MyClass ();
    myClass.PropertyChanged += new PropertyChangedEventHandler(MyPropertyChangedHandler);
    myClass.MyProperty = "testing";
    Assert.AreEqual(2, receivedEvents.Count);
    Assert.AreEqual("MyProperty", receivedEvents[0]);
    Assert.AreEqual("MyOtherProperty", receivedEvents[1]);
            }
            private void MyPropertyChangedHandler(object sender, PropertyChangedEventArgs e)
            {
                receivedEvents.Add(e.PropertyName);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
415
0
Gpt3D_Clone415_0.cs 1 9
Gpt3D_Clone415_0.cs 10 26
----------------------------------------

public Boolean TryGetValue (TKey key, out TValue value) {
    internalLock.AcquireReaderLock (Timeout.Infine);
    try {
        return dictionary.TryGetValue (key, out value);
    }
    finally {
        internalLock.ReleaseReaderLock ();
    }
}
----------------------------------------

 public Boolean TryGetValue (TKey key, out TValue value) {
    bool lockTaken = false;
    try
    {
        Monitor.TryEnter(internalLock, ref lockTaken);
        if (lockTaken)
            return dictionary.TryGetValue (key, out value);
        else 
            return false;
    }
    finally
    {
        if (lockTaken) Monitor.Exit(internalLock);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
415
1
Gpt3D_Clone415_1.cs 1 9
Gpt3D_Clone415_1.cs 10 26
----------------------------------------

public Boolean TryGetValue (TKey key, out TValue value) {
    internalLock.AcquireReaderLock (Timeout.Infine);
    try {
        return dictionary.TryGetValue (key, out value);
    }
    finally {
        internalLock.ReleaseReaderLock ();
    }
}
----------------------------------------

 public Boolean TryGetValue (TKey key, out TValue value) {
    bool isLocked = false;
    try
    {
        isLocked = Semaphore.WaitOne();
        if (isLocked)
            return dictionary.TryGetValue (key, out value);
        else 
            return false;
    }
    finally
    {
        if (isLocked) Semaphore.Release();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
415
2
Gpt3D_Clone415_2.cs 1 9
Gpt3D_Clone415_2.cs 10 26
----------------------------------------

public Boolean TryGetValue (TKey key, out TValue value) {
    internalLock.AcquireReaderLock (Timeout.Infine);
    try {
        return dictionary.TryGetValue (key, out value);
    }
    finally {
        internalLock.ReleaseReaderLock ();
    }
}
----------------------------------------

 public Boolean TryGetValue (TKey key, out TValue value) {
    if(Mutex.WaitOne(internalLock))
    {
        try {
            return dictionary.TryGetValue (key, out value);
        }
        finally {
            Mutex.ReleaseMutex(internalLock);
        }
    }
    else
    {
        return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
415
3
Gpt3D_Clone415_3.cs 1 9
Gpt3D_Clone415_3.cs 10 26
----------------------------------------

public Boolean TryGetValue (TKey key, out TValue value) {
    internalLock.AcquireReaderLock (Timeout.Infine);
    try {
        return dictionary.TryGetValue (key, out value);
    }
    finally {
        internalLock.ReleaseReaderLock ();
    }
}
----------------------------------------

 public Boolean TryGetValue (TKey key, out TValue value) {
    if(SpinLock.TryEnter(internalLock))
    {
        try {
            return dictionary.TryGetValue (key, out value);
        }
        finally {
            SpinLock.Exit(internalLock);
        }
    }
    else
    {
        return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
415
6
Gpt3D_Clone415_6.cs 1 9
Gpt3D_Clone415_6.cs 10 17
----------------------------------------

public Boolean TryGetValue (TKey key, out TValue value) {
    internalLock.AcquireReaderLock (Timeout.Infine);
    try {
        return dictionary.TryGetValue (key, out value);
    }
    finally {
        internalLock.ReleaseReaderLock ();
    }
}
----------------------------------------

 public Boolean TryGetValue (TKey key, out TValue value) {
    using(internalLock.Lock())
    {
        return dictionary.TryGetValue(key, out value);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
417
0
Gpt3D_Clone417_0.cs 1 15
Gpt3D_Clone417_0.cs 16 40
----------------------------------------

private bool checkTextWillFit (string enteredText) {
    StringFormat format1 = new StringFormat ();
    format1.Trimming = StringTrimming.Word;
    RectangleF rectfText;
    int iCharactersFitted, iLinesFitted;
    rectfText = new RectangleF (60.0F, 200.0F, 560.0F, 200.0F);
    Graphics g = printDocument1.PrinterSettings.CreateMeasurementGraphics ();
    Font myFont = new Font ("Times New Roman", 10, FontStyle.Regular);
    g.MeasureString (enteredText, myFont, rectfText.Size, format1, out iCharactersFitted, out iLinesFitted);
    if (iLinesFitted > 12) {
        return true;
    } else {
        return false;
    }
}
----------------------------------------

private bool checkTextWillFit(string enteredText){ 
    Rectangle rect = new Rectangle(60, 200, 560, 200); 
    Font myFont = new Font("Times New Roman", 10, FontStyle.Regular); 
    using (Graphics g = Graphics.FromHwnd(this.Handle)) 
    { 
        int lineCount = 0; 
        using (StringFormat format = new StringFormat()) 
        { 
            format.Trimming = StringTrimming.Word; 
            using (StringReader reader = new StringReader(enteredText)) 
            { 
                string line; 
                float height = 0; 
                while ((line = reader.ReadLine()) != null) 
                { 
                    height += g.MeasureString(line, myFont, rect.Width, format).Height;
                    lineCount++; 
                } 
            } 
        } 
        return lineCount > 12 || height > rect.Height; 
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
417
1
Gpt3D_Clone417_1.cs 1 15
Gpt3D_Clone417_1.cs 16 30
----------------------------------------

private bool checkTextWillFit (string enteredText) {
    StringFormat format1 = new StringFormat ();
    format1.Trimming = StringTrimming.Word;
    RectangleF rectfText;
    int iCharactersFitted, iLinesFitted;
    rectfText = new RectangleF (60.0F, 200.0F, 560.0F, 200.0F);
    Graphics g = printDocument1.PrinterSettings.CreateMeasurementGraphics ();
    Font myFont = new Font ("Times New Roman", 10, FontStyle.Regular);
    g.MeasureString (enteredText, myFont, rectfText.Size, format1, out iCharactersFitted, out iLinesFitted);
    if (iLinesFitted > 12) {
        return true;
    } else {
        return false;
    }
}
----------------------------------------

  private bool checkTextWillFit(string enteredText) { 
    int iCharactersFitted, iLinesFitted; 
    RectangleF rectfText; 
    rectfText = new RectangleF (60.0F, 200.0F, 560.0F, 200.0F); 
  
    Font myFont = new Font ("Times New Roman", 10, FontStyle.Regular); 
    MeasureString(enteredText, myFont, rectfText, out iCharactersFitted, out iLinesFitted); 
    if (iLinesFitted > 12) 
        return true; 
    else 
        return false; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
417
2
Gpt3D_Clone417_2.cs 1 15
Gpt3D_Clone417_2.cs 16 29
----------------------------------------

private bool checkTextWillFit (string enteredText) {
    StringFormat format1 = new StringFormat ();
    format1.Trimming = StringTrimming.Word;
    RectangleF rectfText;
    int iCharactersFitted, iLinesFitted;
    rectfText = new RectangleF (60.0F, 200.0F, 560.0F, 200.0F);
    Graphics g = printDocument1.PrinterSettings.CreateMeasurementGraphics ();
    Font myFont = new Font ("Times New Roman", 10, FontStyle.Regular);
    g.MeasureString (enteredText, myFont, rectfText.Size, format1, out iCharactersFitted, out iLinesFitted);
    if (iLinesFitted > 12) {
        return true;
    } else {
        return false;
    }
}
----------------------------------------

 private bool checkTextWillFit(string enteredText) { 
    int lineCount = 0; 
    int limit = 560;
    StringReader reader = new StringReader(enteredText);
    while (reader.ReadLine() != null)
    {
        lineCount++;
        if (reader.Peek() > limit)
            return true;
    }
    return lineCount > 12;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
417
3
Gpt3D_Clone417_3.cs 1 15
Gpt3D_Clone417_3.cs 16 30
----------------------------------------

private bool checkTextWillFit (string enteredText) {
    StringFormat format1 = new StringFormat ();
    format1.Trimming = StringTrimming.Word;
    RectangleF rectfText;
    int iCharactersFitted, iLinesFitted;
    rectfText = new RectangleF (60.0F, 200.0F, 560.0F, 200.0F);
    Graphics g = printDocument1.PrinterSettings.CreateMeasurementGraphics ();
    Font myFont = new Font ("Times New Roman", 10, FontStyle.Regular);
    g.MeasureString (enteredText, myFont, rectfText.Size, format1, out iCharactersFitted, out iLinesFitted);
    if (iLinesFitted > 12) {
        return true;
    } else {
        return false;
    }
}
----------------------------------------

 private bool checkTextWillFit(string enteredText) 
{ 
    int maxlines = 12; 
    int allowedCharacters = 12 *70; 
    string[] lines = enteredText.Split('\n'); 
    int totalchars = 0; 
    foreach (string l in lines) 
    { 
        totalchars += l.Length; 
        maxlines--; 
    } 
    return (maxlines < 0 || totalchars > allowedCharacters); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
417
4
Gpt3D_Clone417_4.cs 1 15
Gpt3D_Clone417_4.cs 16 29
----------------------------------------

private bool checkTextWillFit (string enteredText) {
    StringFormat format1 = new StringFormat ();
    format1.Trimming = StringTrimming.Word;
    RectangleF rectfText;
    int iCharactersFitted, iLinesFitted;
    rectfText = new RectangleF (60.0F, 200.0F, 560.0F, 200.0F);
    Graphics g = printDocument1.PrinterSettings.CreateMeasurementGraphics ();
    Font myFont = new Font ("Times New Roman", 10, FontStyle.Regular);
    g.MeasureString (enteredText, myFont, rectfText.Size, format1, out iCharactersFitted, out iLinesFitted);
    if (iLinesFitted > 12) {
        return true;
    } else {
        return false;
    }
}
----------------------------------------

 private bool checkTextWillFit(string enteredText) 
{ 
    StringFormat format1 = new StringFormat (); 
    format1.Trimming = StringTrimming.Word; 
    RectangleF rectfText = new RectangleF (60.0F, 200.0F, 560.0F, 200.0F); 
    Graphics g = printDocument1.PrinterSettings.CreateMeasurementGraphics(); 
    Font myFont = new Font("Times New Roman", 10, FontStyle.Regular); 
    SizeF size = g.MeasureString(enteredText, myFont,rectfText.Size, format1); 
    int lines = (int)Math.Ceiling(size.Height/myFont.Height); 
    return (lines > 12); 
  
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
417
5
Gpt3D_Clone417_5.cs 1 15
Gpt3D_Clone417_5.cs 16 27
----------------------------------------

private bool checkTextWillFit (string enteredText) {
    StringFormat format1 = new StringFormat ();
    format1.Trimming = StringTrimming.Word;
    RectangleF rectfText;
    int iCharactersFitted, iLinesFitted;
    rectfText = new RectangleF (60.0F, 200.0F, 560.0F, 200.0F);
    Graphics g = printDocument1.PrinterSettings.CreateMeasurementGraphics ();
    Font myFont = new Font ("Times New Roman", 10, FontStyle.Regular);
    g.MeasureString (enteredText, myFont, rectfText.Size, format1, out iCharactersFitted, out iLinesFitted);
    if (iLinesFitted > 12) {
        return true;
    } else {
        return false;
    }
}
----------------------------------------

 private bool checkTextWillFit(string enteredText) 
{ 
    StringFormat format1 = new StringFormat(); 
    format1.Trimming = StringTrimming.Word; 
    RectangleF rectfText = new RectangleF(60.0F, 200.0F, 560.0F, 200.0F); 
    Graphics g = printDocument1.PrinterSettings.CreateMeasurementGraphics(); 
    Font myFont = new Font("Times New Roman", 10, FontStyle.Regular); 
    SizeF size = g.MeasureString(enteredText, myFont, rectfText.Size, format1); 
    return size.Height > 200.0F;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
417
6
Gpt3D_Clone417_6.cs 1 15
Gpt3D_Clone417_6.cs 16 26
----------------------------------------

private bool checkTextWillFit (string enteredText) {
    StringFormat format1 = new StringFormat ();
    format1.Trimming = StringTrimming.Word;
    RectangleF rectfText;
    int iCharactersFitted, iLinesFitted;
    rectfText = new RectangleF (60.0F, 200.0F, 560.0F, 200.0F);
    Graphics g = printDocument1.PrinterSettings.CreateMeasurementGraphics ();
    Font myFont = new Font ("Times New Roman", 10, FontStyle.Regular);
    g.MeasureString (enteredText, myFont, rectfText.Size, format1, out iCharactersFitted, out iLinesFitted);
    if (iLinesFitted > 12) {
        return true;
    } else {
        return false;
    }
}
----------------------------------------

 private bool checkTextWillFit(string enteredText) { 
    Font myFont = new Font ("Times New Roman", 10, FontStyle.Regular); 
    int lines = enteredText.Split('\n').Length; 
    SizeF size = TextRenderer.MeasureText(enteredText, myFont); 
    if (lines > 12 || size.Width > 560.0F || size.Height > 200.0F) 
        return true; 
    else 
        return false; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
417
7
Gpt3D_Clone417_7.cs 1 15
Gpt3D_Clone417_7.cs 16 26
----------------------------------------

private bool checkTextWillFit (string enteredText) {
    StringFormat format1 = new StringFormat ();
    format1.Trimming = StringTrimming.Word;
    RectangleF rectfText;
    int iCharactersFitted, iLinesFitted;
    rectfText = new RectangleF (60.0F, 200.0F, 560.0F, 200.0F);
    Graphics g = printDocument1.PrinterSettings.CreateMeasurementGraphics ();
    Font myFont = new Font ("Times New Roman", 10, FontStyle.Regular);
    g.MeasureString (enteredText, myFont, rectfText.Size, format1, out iCharactersFitted, out iLinesFitted);
    if (iLinesFitted > 12) {
        return true;
    } else {
        return false;
    }
}
----------------------------------------

 private bool checkTextWillFit(string enteredText) { 
    Font myFont = new Font ("Times New Roman", 10, FontStyle.Regular); 
    int lines = enteredText.Split('\n').Length; 
    SizeF size = MeasureString(enteredText, myFont); 
    if (lines > 12 || size.Width > 560.0F || size.Height > 200.0F) 
        return true; 
    else 
        return false; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
417
8
Gpt3D_Clone417_8.cs 1 15
Gpt3D_Clone417_8.cs 16 26
----------------------------------------

private bool checkTextWillFit (string enteredText) {
    StringFormat format1 = new StringFormat ();
    format1.Trimming = StringTrimming.Word;
    RectangleF rectfText;
    int iCharactersFitted, iLinesFitted;
    rectfText = new RectangleF (60.0F, 200.0F, 560.0F, 200.0F);
    Graphics g = printDocument1.PrinterSettings.CreateMeasurementGraphics ();
    Font myFont = new Font ("Times New Roman", 10, FontStyle.Regular);
    g.MeasureString (enteredText, myFont, rectfText.Size, format1, out iCharactersFitted, out iLinesFitted);
    if (iLinesFitted > 12) {
        return true;
    } else {
        return false;
    }
}
----------------------------------------

 private bool checkTextWillFit(string enteredText) 
{ 
    int totalCharacters = enteredText.Length; 
    int allowedCharacters = 12 * 70; 
    if (totalCharacters > allowedCharacters) 
        return true; 
    else 
        return false; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
417
9
Gpt3D_Clone417_9.cs 1 15
Gpt3D_Clone417_9.cs 16 23
----------------------------------------

private bool checkTextWillFit (string enteredText) {
    StringFormat format1 = new StringFormat ();
    format1.Trimming = StringTrimming.Word;
    RectangleF rectfText;
    int iCharactersFitted, iLinesFitted;
    rectfText = new RectangleF (60.0F, 200.0F, 560.0F, 200.0F);
    Graphics g = printDocument1.PrinterSettings.CreateMeasurementGraphics ();
    Font myFont = new Font ("Times New Roman", 10, FontStyle.Regular);
    g.MeasureString (enteredText, myFont, rectfText.Size, format1, out iCharactersFitted, out iLinesFitted);
    if (iLinesFitted > 12) {
        return true;
    } else {
        return false;
    }
}
----------------------------------------

 private bool checkTextWillFit(string enteredText) 
{ 
    int chars = enteredText.Length; 
    int maxChar = 12 * 70; 
    return chars > maxChar;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
418
0
Gpt3D_Clone418_0.cs 1 17
Gpt3D_Clone418_0.cs 18 31
----------------------------------------

private static void CenterWindow (IntPtr hChildWnd) {
    Rectangle recChild = new Rectangle (0, 0, 0, 0);
    bool success = GetWindowRect (hChildWnd, ref recChild);
    int width = recChild.Width - recChild.X;
    int height = recChild.Height - recChild.Y;
    Rectangle recParent = new Rectangle (0, 0, 0, 0);
    success = GetWindowRect (_owner.Handle, ref recParent);
    Point ptCenter = new Point (0, 0);
    ptCenter.X = recParent.X + ((recParent.Width - recParent.X) / 2);
    ptCenter.Y = recParent.Y + ((recParent.Height - recParent.Y) / 2);
    Point ptStart = new Point (0, 0);
    ptStart.X = (ptCenter.X - (width / 2));
    ptStart.Y = (ptCenter.Y - (height / 2));
    ptStart.X = (ptStart.X < 0) ? 0 : ptStart.X;
    ptStart.Y = (ptStart.Y < 0) ? 0 : ptStart.Y;
    int result = MoveWindow (hChildWnd, ptStart.X, ptStart.Y, width, height, false);
}
----------------------------------------

 private static void CentreWinow(IntPtr hChildWnd) 
{ 
	Rectangle recChild = new Rectangle(0, 0, 0, 0); 
	bool success = GetWindowRect(hChildWnd, ref recChild); 
	int width = recChild.Width - recChild.X; 
	int height = recChild.Height - recChild.Y; 
	Size sizeChild = new Size(width, height); 
	Rectangle recParent = new Rectangle(0, 0, 0, 0); 
	success = GetWindowRect(_owner.Handle, ref recParent); 
	Point ptCenter = new Point(recParent.Left + (recParent.Width - width) / 2, recParent.Top + (recParent.Height - height) / 2); 
	int result = MoveWindow(hChildWnd, ptCenter.X, ptCenter.Y, width, height, false); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
418
1
Gpt3D_Clone418_1.cs 1 17
Gpt3D_Clone418_1.cs 18 30
----------------------------------------

private static void CenterWindow (IntPtr hChildWnd) {
    Rectangle recChild = new Rectangle (0, 0, 0, 0);
    bool success = GetWindowRect (hChildWnd, ref recChild);
    int width = recChild.Width - recChild.X;
    int height = recChild.Height - recChild.Y;
    Rectangle recParent = new Rectangle (0, 0, 0, 0);
    success = GetWindowRect (_owner.Handle, ref recParent);
    Point ptCenter = new Point (0, 0);
    ptCenter.X = recParent.X + ((recParent.Width - recParent.X) / 2);
    ptCenter.Y = recParent.Y + ((recParent.Height - recParent.Y) / 2);
    Point ptStart = new Point (0, 0);
    ptStart.X = (ptCenter.X - (width / 2));
    ptStart.Y = (ptCenter.Y - (height / 2));
    ptStart.X = (ptStart.X < 0) ? 0 : ptStart.X;
    ptStart.Y = (ptStart.Y < 0) ? 0 : ptStart.Y;
    int result = MoveWindow (hChildWnd, ptStart.X, ptStart.Y, width, height, false);
}
----------------------------------------

 private static void PositionMidWindow(IntPtr hChildWnd) 
{ 
	Rectangle recChild = new Rectangle(0, 0, 0, 0); 
	bool success = GetWindowRect(hChildWnd, ref recChild); 
	int width = recChild.Width- recChild.X; 
	int height = recChild.Height - recChild.Y; 
	Rectangle recParent = new Rectangle(0, 0, 0, 0); 
	success = GetWindowRect(_owner.Handle, ref recParent); 
	Point ptCenter = new Point(recParent.Left + (recParent.Width - width) / 2, recParent.Top + (recParent.Height - height) / 2); 
	int result = MoveResizeWindow(hChildWnd, ptCenter.X, ptCenter.Y, width, height, false); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
418
2
Gpt3D_Clone418_2.cs 1 17
Gpt3D_Clone418_2.cs 18 30
----------------------------------------

private static void CenterWindow (IntPtr hChildWnd) {
    Rectangle recChild = new Rectangle (0, 0, 0, 0);
    bool success = GetWindowRect (hChildWnd, ref recChild);
    int width = recChild.Width - recChild.X;
    int height = recChild.Height - recChild.Y;
    Rectangle recParent = new Rectangle (0, 0, 0, 0);
    success = GetWindowRect (_owner.Handle, ref recParent);
    Point ptCenter = new Point (0, 0);
    ptCenter.X = recParent.X + ((recParent.Width - recParent.X) / 2);
    ptCenter.Y = recParent.Y + ((recParent.Height - recParent.Y) / 2);
    Point ptStart = new Point (0, 0);
    ptStart.X = (ptCenter.X - (width / 2));
    ptStart.Y = (ptCenter.Y - (height / 2));
    ptStart.X = (ptStart.X < 0) ? 0 : ptStart.X;
    ptStart.Y = (ptStart.Y < 0) ? 0 : ptStart.Y;
    int result = MoveWindow (hChildWnd, ptStart.X, ptStart.Y, width, height, false);
}
----------------------------------------

  private static void PutInCenter(IntPtr hChildWnd) 
{ 
	Rectangle recChild = new Rectangle(0, 0, 0, 0); 
	bool success = GetWindowRect(hChildWnd, ref recChild); 
	int width = recChild.Width- recChild.X; 
	int height = recChild.Height - recChild.Y; 
	Rectangle recParent = new Rectangle(0, 0, 0, 0); 
	success = GetWindowRect(_owner.Handle, ref recParent); 
	Point ptCenter = new Point(recParent.Left + (recParent.Width - width) / 2, recParent.Top + (recParent.Height - height) / 2); 
	int result = ResizeWindow(hChildWnd, ptCenter.X, ptCenter.Y, width, height, false); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
418
3
Gpt3D_Clone418_3.cs 1 17
Gpt3D_Clone418_3.cs 18 30
----------------------------------------

private static void CenterWindow (IntPtr hChildWnd) {
    Rectangle recChild = new Rectangle (0, 0, 0, 0);
    bool success = GetWindowRect (hChildWnd, ref recChild);
    int width = recChild.Width - recChild.X;
    int height = recChild.Height - recChild.Y;
    Rectangle recParent = new Rectangle (0, 0, 0, 0);
    success = GetWindowRect (_owner.Handle, ref recParent);
    Point ptCenter = new Point (0, 0);
    ptCenter.X = recParent.X + ((recParent.Width - recParent.X) / 2);
    ptCenter.Y = recParent.Y + ((recParent.Height - recParent.Y) / 2);
    Point ptStart = new Point (0, 0);
    ptStart.X = (ptCenter.X - (width / 2));
    ptStart.Y = (ptCenter.Y - (height / 2));
    ptStart.X = (ptStart.X < 0) ? 0 : ptStart.X;
    ptStart.Y = (ptStart.Y < 0) ? 0 : ptStart.Y;
    int result = MoveWindow (hChildWnd, ptStart.X, ptStart.Y, width, height, false);
}
----------------------------------------

  private static void Centred(IntPtr hChildWnd) 
{ 
	Rectangle recChild = new Rectangle(0, 0, 0, 0); 
	bool success = GetWindowRect(hChildWnd, ref recChild); 
	int width = recChild.Width- recChild.X; 
	int height = recChild.Height - recChild.Y; 
	Rectangle recParent = new Rectangle(0, 0, 0, 0); 
	success = GetWindowRect(_owner.Handle, ref recParent); 
	Point ptCenter = new Point(recParent.Left + (recParent.Width - width) / 2, recParent.Top + (recParent.Height - height) / 2); 
	int result = PositionWindow(hChildWnd, ptCenter.X, ptCenter.Y, width, height, false); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
418
4
Gpt3D_Clone418_4.cs 1 17
Gpt3D_Clone418_4.cs 18 30
----------------------------------------

private static void CenterWindow (IntPtr hChildWnd) {
    Rectangle recChild = new Rectangle (0, 0, 0, 0);
    bool success = GetWindowRect (hChildWnd, ref recChild);
    int width = recChild.Width - recChild.X;
    int height = recChild.Height - recChild.Y;
    Rectangle recParent = new Rectangle (0, 0, 0, 0);
    success = GetWindowRect (_owner.Handle, ref recParent);
    Point ptCenter = new Point (0, 0);
    ptCenter.X = recParent.X + ((recParent.Width - recParent.X) / 2);
    ptCenter.Y = recParent.Y + ((recParent.Height - recParent.Y) / 2);
    Point ptStart = new Point (0, 0);
    ptStart.X = (ptCenter.X - (width / 2));
    ptStart.Y = (ptCenter.Y - (height / 2));
    ptStart.X = (ptStart.X < 0) ? 0 : ptStart.X;
    ptStart.Y = (ptStart.Y < 0) ? 0 : ptStart.Y;
    int result = MoveWindow (hChildWnd, ptStart.X, ptStart.Y, width, height, false);
}
----------------------------------------

  private static void PlaceInCenter(IntPtr hChildWnd) 
{ 
	Rectangle recChild = new Rectangle(0, 0, 0, 0); 
	bool success = GetWindowRect(hChildWnd, ref recChild); 
	int width = recChild.Width- recChild.X; 
	int height = recChild.Height - recChild.Y; 
	Rectangle recParent = new Rectangle(0, 0, 0, 0); 
	success = GetWindowRect(_owner.Handle, ref recParent); 
	Point ptCenter = new Point(recParent.Left + (recParent.Width - width) / 2, recParent.Top + (recParent.Height - height) / 2); 
	int result = ShiftWindow(hChildWnd, ptCenter.X, ptCenter.Y, width, height, false); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
418
5
Gpt3D_Clone418_5.cs 1 17
Gpt3D_Clone418_5.cs 18 30
----------------------------------------

private static void CenterWindow (IntPtr hChildWnd) {
    Rectangle recChild = new Rectangle (0, 0, 0, 0);
    bool success = GetWindowRect (hChildWnd, ref recChild);
    int width = recChild.Width - recChild.X;
    int height = recChild.Height - recChild.Y;
    Rectangle recParent = new Rectangle (0, 0, 0, 0);
    success = GetWindowRect (_owner.Handle, ref recParent);
    Point ptCenter = new Point (0, 0);
    ptCenter.X = recParent.X + ((recParent.Width - recParent.X) / 2);
    ptCenter.Y = recParent.Y + ((recParent.Height - recParent.Y) / 2);
    Point ptStart = new Point (0, 0);
    ptStart.X = (ptCenter.X - (width / 2));
    ptStart.Y = (ptCenter.Y - (height / 2));
    ptStart.X = (ptStart.X < 0) ? 0 : ptStart.X;
    ptStart.Y = (ptStart.Y < 0) ? 0 : ptStart.Y;
    int result = MoveWindow (hChildWnd, ptStart.X, ptStart.Y, width, height, false);
}
----------------------------------------

 private static void PositionWindowMid(IntPtr hChildWnd) 
{ 
	Rectangle recChild = new Rectangle(0, 0, 0, 0); 
	bool success = GetWindowRect(hChildWnd, ref recChild); 
	int width = recChild.Width - recChild.X; 
	int height = recChild.Height - recChild.Y; 
	Rectangle recParent = new Rectangle(0, 0, 0, 0); 
	success = GetWindowRect(_owner.Handle, ref recParent); 
	Point ptCenter = new Point(recParent.Left + (recParent.Width - width) / 2, recParent.Top + (recParent.Height - height) / 2); 
	int result = DragWindow(hChildWnd, ptCenter.X, ptCenter.Y, width, height, false); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
418
6
Gpt3D_Clone418_6.cs 1 17
Gpt3D_Clone418_6.cs 18 30
----------------------------------------

private static void CenterWindow (IntPtr hChildWnd) {
    Rectangle recChild = new Rectangle (0, 0, 0, 0);
    bool success = GetWindowRect (hChildWnd, ref recChild);
    int width = recChild.Width - recChild.X;
    int height = recChild.Height - recChild.Y;
    Rectangle recParent = new Rectangle (0, 0, 0, 0);
    success = GetWindowRect (_owner.Handle, ref recParent);
    Point ptCenter = new Point (0, 0);
    ptCenter.X = recParent.X + ((recParent.Width - recParent.X) / 2);
    ptCenter.Y = recParent.Y + ((recParent.Height - recParent.Y) / 2);
    Point ptStart = new Point (0, 0);
    ptStart.X = (ptCenter.X - (width / 2));
    ptStart.Y = (ptCenter.Y - (height / 2));
    ptStart.X = (ptStart.X < 0) ? 0 : ptStart.X;
    ptStart.Y = (ptStart.Y < 0) ? 0 : ptStart.Y;
    int result = MoveWindow (hChildWnd, ptStart.X, ptStart.Y, width, height, false);
}
----------------------------------------

 private static void PlaceWindowCenter(IntPtr hChildWnd) 
{ 
	Rectangle recChild = new Rectangle(0, 0, 0, 0); 
	bool success = GetWindowRect(hChildWnd, ref recChild); 
	int width = recChild.Width - recChild.X; 
	int height = recChild.Height - recChild.Y; 
	Rectangle recParent = new Rectangle(0, 0, 0, 0); 
	success = GetWindowRect(_owner.Handle, ref recParent); 
	Point ptCenter = new Point(recParent.Left + (recParent.Width - width) / 2, recParent.Top + (recParent.Height - height) / 2); 
	int result = DirectionWindow(hChildWnd, ptCenter.X, ptCenter.Y, width, height, false); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
418
7
Gpt3D_Clone418_7.cs 1 17
Gpt3D_Clone418_7.cs 18 30
----------------------------------------

private static void CenterWindow (IntPtr hChildWnd) {
    Rectangle recChild = new Rectangle (0, 0, 0, 0);
    bool success = GetWindowRect (hChildWnd, ref recChild);
    int width = recChild.Width - recChild.X;
    int height = recChild.Height - recChild.Y;
    Rectangle recParent = new Rectangle (0, 0, 0, 0);
    success = GetWindowRect (_owner.Handle, ref recParent);
    Point ptCenter = new Point (0, 0);
    ptCenter.X = recParent.X + ((recParent.Width - recParent.X) / 2);
    ptCenter.Y = recParent.Y + ((recParent.Height - recParent.Y) / 2);
    Point ptStart = new Point (0, 0);
    ptStart.X = (ptCenter.X - (width / 2));
    ptStart.Y = (ptCenter.Y - (height / 2));
    ptStart.X = (ptStart.X < 0) ? 0 : ptStart.X;
    ptStart.Y = (ptStart.Y < 0) ? 0 : ptStart.Y;
    int result = MoveWindow (hChildWnd, ptStart.X, ptStart.Y, width, height, false);
}
----------------------------------------

  private static void CenterTheWindow(IntPtr hChildWnd) 
{ 
	Rectangle recChild = new Rectangle(0, 0, 0, 0); 
	bool success = GetWindowRect(hChildWnd, ref recChild); 
	int width = recChild.Width- recChild.X; 
	int height = recChild.Height - recChild.Y; 
	Rectangle recParent = new Rectangle(0, 0, 0, 0); 
	success = GetWindowRect(_owner.Handle, ref recParent); 
	Point ptCenter = new Point(recParent.Left + (recParent.Width - width) / 2, recParent.Top + (recParent.Height - height) / 2); 
	int result = RelocateWindow(hChildWnd, ptCenter.X, ptCenter.Y, width, height, false); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
420
0
Gpt3D_Clone420_0.cs 1 12
Gpt3D_Clone420_0.cs 13 32
----------------------------------------

public double convertToDouble (string number) {
    if (string.IsNullOrWhiteSpace (number)) {
        throw new ArgumentException ("The input cannot be null, empty string or consisted only of of white space characters", "number");
    }
    string temp = number;
    if (number.Contains ("x")) {
        int locationE = number.IndexOf ("x");
        string exponent = number.Substring (locationE + 5, number.Length - (locationE + 5));
        temp = number.Substring (0, locationE - 1) + "E" + exponent;
    }
    return Convert.ToDouble (temp);
}
----------------------------------------

  public double convertToDouble (string number) {
    if (string.IsNullOrWhiteSpace (number)) {
        throw new ArgumentException ("The input cannot be null, empty string or consisted only of of white space characters", "number");
    }
    doubleTemp = 0;
    string[] numberArray = number.Split("x");
    if(numberArray.Length == 1)
    {
        doubleTemp = double.Parse(number);
    } 
    else {
        double coefficient = double.Parse(numberArray[0]);
        string exponentString = numberArray[1].Substring(4, numberArray[1].Length-4);
        double exponent = double.Parse(exponentString);
        doubleTemp = coefficient * Math.Pow(10, exponent);
    }
    return doubleTemp;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
420
1
Gpt3D_Clone420_1.cs 1 12
Gpt3D_Clone420_1.cs 13 32
----------------------------------------

public double convertToDouble (string number) {
    if (string.IsNullOrWhiteSpace (number)) {
        throw new ArgumentException ("The input cannot be null, empty string or consisted only of of white space characters", "number");
    }
    string temp = number;
    if (number.Contains ("x")) {
        int locationE = number.IndexOf ("x");
        string exponent = number.Substring (locationE + 5, number.Length - (locationE + 5));
        temp = number.Substring (0, locationE - 1) + "E" + exponent;
    }
    return Convert.ToDouble (temp);
}
----------------------------------------

  public double convertToDouble (string number) {
    if (string.IsNullOrWhiteSpace (number)) {
        throw new ArgumentException ("The input cannot be null, empty string or consisted only of of white space characters", "number");
    }
    doubleTemp = 0;
    int locationE = number.IndexOf ("x");
    if (locationE > -1) {
        string exponent = number.Substring (locationE + 5, number.Length - (locationE + 5));
        number = number.Substring (0, locationE - 1) + "E" + exponent;
    }
    try {
        doubleTemp = double.Parse(number);
        return doubleTemp;
    }
    catch (FormatException) {    
        return 0;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
420
2
Gpt3D_Clone420_2.cs 1 12
Gpt3D_Clone420_2.cs 13 32
----------------------------------------

public double convertToDouble (string number) {
    if (string.IsNullOrWhiteSpace (number)) {
        throw new ArgumentException ("The input cannot be null, empty string or consisted only of of white space characters", "number");
    }
    string temp = number;
    if (number.Contains ("x")) {
        int locationE = number.IndexOf ("x");
        string exponent = number.Substring (locationE + 5, number.Length - (locationE + 5));
        temp = number.Substring (0, locationE - 1) + "E" + exponent;
    }
    return Convert.ToDouble (temp);
}
----------------------------------------

 public double convertToDouble (string number) {
    if (string.IsNullOrWhiteSpace (number)) {
        throw new ArgumentException ("The input cannot be null, empty string or consisted only of of white space characters", "number");
    }   
    doubleTemp = 0;
    if(double.TryParse(number, out doubleTemp))  
    {  
        return doubleTemp; 
    } 
    else {
        int locationE = number.IndexOf ("x");
        bool isNegative = number.Contains("-");
        string exponent = number.Substring (locationE + 5, number.Length - (locationE + 5));
        double coefficient = double.Parse(number.Substring (0, locationE - 1));
        doubleTemp = Math.Pow(coefficient, double.Parse(exponent)) * ( isNegative ? -1 : 1 );
        return doubleTemp; 
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
420
3
Gpt3D_Clone420_3.cs 1 12
Gpt3D_Clone420_3.cs 13 31
----------------------------------------

public double convertToDouble (string number) {
    if (string.IsNullOrWhiteSpace (number)) {
        throw new ArgumentException ("The input cannot be null, empty string or consisted only of of white space characters", "number");
    }
    string temp = number;
    if (number.Contains ("x")) {
        int locationE = number.IndexOf ("x");
        string exponent = number.Substring (locationE + 5, number.Length - (locationE + 5));
        temp = number.Substring (0, locationE - 1) + "E" + exponent;
    }
    return Convert.ToDouble (temp);
}
----------------------------------------

 public double convertToDouble (string number) {
    if (string.IsNullOrWhiteSpace (number)) {
        throw new ArgumentException ("The input cannot be null, empty string or consisted only of of white space characters", "number");
    }
    doubleTemp = 0;
    try {
        doubleTemp = double.Parse(number);
    }
    catch (FormatException) {
        StringBuilder exponentialForm = new StringBuilder();
        int locationE = number.IndexOf ("x");
        string exponent = number.Substring (locationE + 5, number.Length - (locationE + 5));
        exponentialForm.Append(number.Substring (0, locationE - 1)).Append("E").Append(exponent);
        doubleTemp = double.Parse(exponentialForm.ToString());
    }
    return doubleTemp;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
420
4
Gpt3D_Clone420_4.cs 1 12
Gpt3D_Clone420_4.cs 13 30
----------------------------------------

public double convertToDouble (string number) {
    if (string.IsNullOrWhiteSpace (number)) {
        throw new ArgumentException ("The input cannot be null, empty string or consisted only of of white space characters", "number");
    }
    string temp = number;
    if (number.Contains ("x")) {
        int locationE = number.IndexOf ("x");
        string exponent = number.Substring (locationE + 5, number.Length - (locationE + 5));
        temp = number.Substring (0, locationE - 1) + "E" + exponent;
    }
    return Convert.ToDouble (temp);
}
----------------------------------------

  public double convertToDouble (string number) {
    if (string.IsNullOrWhiteSpace (number)) {
        throw new ArgumentException ("The input cannot be null, empty string or consisted only of of white space characters", "number");
    }
    doubleTemp = 0;
    try {
        doubleTemp = double.Parse(number);
        return doubleTemp;
    }
    catch (FormatException) {
        double numberBase = double.TryParse(number.Substring(0, number.IndexOf('x') -1), out doubleTemp);
        double power = double.TryParse(number.Substring(number.IndexOf('exp')+3, number.Length - (number.IndexOf('exp') + 3)), out double expValue);
        doubleTemp = Math.Pow(numberBase, expValue);
        return doubleTemp;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
420
5
Gpt3D_Clone420_5.cs 1 12
Gpt3D_Clone420_5.cs 13 32
----------------------------------------

public double convertToDouble (string number) {
    if (string.IsNullOrWhiteSpace (number)) {
        throw new ArgumentException ("The input cannot be null, empty string or consisted only of of white space characters", "number");
    }
    string temp = number;
    if (number.Contains ("x")) {
        int locationE = number.IndexOf ("x");
        string exponent = number.Substring (locationE + 5, number.Length - (locationE + 5));
        temp = number.Substring (0, locationE - 1) + "E" + exponent;
    }
    return Convert.ToDouble (temp);
}
----------------------------------------

 public double convertToDouble (string number) {
    if (string.IsNullOrWhiteSpace (number)) {
        throw new ArgumentException ("The input cannot be null, empty string or consisted only of of white space characters", "number");
    }
    doubleTemp;
    try
    {
        doubleTemp = double.Parse(number);
    }
    catch (FormatException)  
    {  
        int locationE = number.IndexOf ("x");
        int exponent = int.Parse(number.Substring (locationE + 5, number.Length - (locationE + 5)));
        double coefficient = double.Parse(number.Substring (0, locationE - 1));
        doubleTemp = coefficient * Math.Pow(10, exponent);
    }  
    return doubleTemp;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
420
6
Gpt3D_Clone420_6.cs 1 12
Gpt3D_Clone420_6.cs 13 30
----------------------------------------

public double convertToDouble (string number) {
    if (string.IsNullOrWhiteSpace (number)) {
        throw new ArgumentException ("The input cannot be null, empty string or consisted only of of white space characters", "number");
    }
    string temp = number;
    if (number.Contains ("x")) {
        int locationE = number.IndexOf ("x");
        string exponent = number.Substring (locationE + 5, number.Length - (locationE + 5));
        temp = number.Substring (0, locationE - 1) + "E" + exponent;
    }
    return Convert.ToDouble (temp);
}
----------------------------------------

  public double convertToDouble (string number) {
    if (string.IsNullOrWhiteSpace (number)) {
        throw new ArgumentException ("The input cannot be null, empty string or consisted only of of white space characters", "number");
    }
    doubleTemp = 0;
    if(double.TryParse(number, out doubleTemp))  
    {  
        return doubleTemp; 
    } 
    else {
        int locationE = number.IndexOf ("x");
        string exponent = number.Substring (locationE + 5, number.Length - (locationE + 5));
        doubleTemp = double.Parse(number.Substring (0, locationE - 1) + "E" + exponent);
        return doubleTemp; 
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
420
7
Gpt3D_Clone420_7.cs 1 12
Gpt3D_Clone420_7.cs 13 30
----------------------------------------

public double convertToDouble (string number) {
    if (string.IsNullOrWhiteSpace (number)) {
        throw new ArgumentException ("The input cannot be null, empty string or consisted only of of white space characters", "number");
    }
    string temp = number;
    if (number.Contains ("x")) {
        int locationE = number.IndexOf ("x");
        string exponent = number.Substring (locationE + 5, number.Length - (locationE + 5));
        temp = number.Substring (0, locationE - 1) + "E" + exponent;
    }
    return Convert.ToDouble (temp);
}
----------------------------------------

  public double convertToDouble (string number) {
    if (string.IsNullOrWhiteSpace (number)) {
        throw new ArgumentException ("The input cannot be null, empty string or consisted only of of white space characters", "number");
    }
    doubleTemp = 0;
    try{
        doubleTemp = double.Parse(number);
    }
    catch (FormatException)  
    {  
        int locationE = number.IndexOf ("x");
        string exponent = number.Substring (locationE + 5, number.Length - (locationE + 5));
        doubleTemp = double.Parse(number.Substring (0, locationE - 1) + "E" + exponent);
    }  
    return doubleTemp;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
420
8
Gpt3D_Clone420_8.cs 1 12
Gpt3D_Clone420_8.cs 13 30
----------------------------------------

public double convertToDouble (string number) {
    if (string.IsNullOrWhiteSpace (number)) {
        throw new ArgumentException ("The input cannot be null, empty string or consisted only of of white space characters", "number");
    }
    string temp = number;
    if (number.Contains ("x")) {
        int locationE = number.IndexOf ("x");
        string exponent = number.Substring (locationE + 5, number.Length - (locationE + 5));
        temp = number.Substring (0, locationE - 1) + "E" + exponent;
    }
    return Convert.ToDouble (temp);
}
----------------------------------------

  public double convertToDouble (string number) {
    if (string.IsNullOrWhiteSpace (number)) {
        throw new ArgumentException ("The input cannot be null, empty string or consisted only of of white space characters", "number");
    }
    doubleTemp = 0;
    if(double.TryParse(number, out doubleTemp))  
    {  
        return doubleTemp; 
    } 
    else {
        NumberStyles style = NumberStyles.Number | NumberStyles.AllowExponent;
        IFormatProvider provider = NumberFormatInfo.invariantInfo;
        doubleTemp = double.Parse(number, style, provider);
        return doubleTemp; 
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
420
9
Gpt3D_Clone420_9.cs 1 12
Gpt3D_Clone420_9.cs 13 28
----------------------------------------

public double convertToDouble (string number) {
    if (string.IsNullOrWhiteSpace (number)) {
        throw new ArgumentException ("The input cannot be null, empty string or consisted only of of white space characters", "number");
    }
    string temp = number;
    if (number.Contains ("x")) {
        int locationE = number.IndexOf ("x");
        string exponent = number.Substring (locationE + 5, number.Length - (locationE + 5));
        temp = number.Substring (0, locationE - 1) + "E" + exponent;
    }
    return Convert.ToDouble (temp);
}
----------------------------------------

 public double convertToDouble (string number) {
    if (string.IsNullOrWhiteSpace (number)) {
        throw new ArgumentException ("The input cannot be null, empty string or consisted only of of white space characters", "number");
    }
    doubleTemp = 0;
    try {
        doubleTemp = double.Parse(number);
    }
    catch (FormatException) {
        number = number.Replace('x', 'E').Replace("exp", "");
        doubleTemp = double.Parse(number);
    }
    return doubleTemp;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
422
0
Gpt3D_Clone422_0.cs 1 13
Gpt3D_Clone422_0.cs 14 33
----------------------------------------

static void Main (string [] args) {
    var ListOfFoo = new List < Foo > ();
    ListOfFoo.Add (new Foo (1));
    ListOfFoo.Add (new Foo (2));
    ListOfFoo.Add (new Foo (3));
    ListOfFoo.Add (new Foo (4));
    var threads = new List < Thread > ();
    foreach (Foo f in ListOfFoo) {
        Thread thread = new Thread(()=>f.DoSomething());
        threads.Add (thread);
        thread.Start ();
    }
}
----------------------------------------

 static void Main (string [] args) {
    var ListOfFoo = new List < Foo > ();
     Stack<int> numStack = new Stack<int>();
    numStack.Push(1);
    numStack.Push(2);
    numStack.Push(3);
    numStack.Push(4);
    
    foreach (int n in numStack){
        ListOfFoo.Add (new Foo (n));
    }
    var threads = new List < Thread > ();
    foreach (Foo f in ListOfFoo) {
        Thread thread = new Thread(()=>f.DoSomething());
        threads.Add (thread);
        thread.Start ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
422
1
Gpt3D_Clone422_1.cs 1 13
Gpt3D_Clone422_1.cs 14 33
----------------------------------------

static void Main (string [] args) {
    var ListOfFoo = new List < Foo > ();
    ListOfFoo.Add (new Foo (1));
    ListOfFoo.Add (new Foo (2));
    ListOfFoo.Add (new Foo (3));
    ListOfFoo.Add (new Foo (4));
    var threads = new List < Thread > ();
    foreach (Foo f in ListOfFoo) {
        Thread thread = new Thread(()=>f.DoSomething());
        threads.Add (thread);
        thread.Start ();
    }
}
----------------------------------------

 static void Main (string [] args) {
    var ListOfFoo = new List < Foo > ();
    Queue<int> numQueue = new Queue<int>();
    numQueue.Enqueue(1);
    numQueue.Enqueue(2);
    numQueue.Enqueue(3);
    numQueue.Enqueue(4);
    
    foreach (int n in numQueue){
        ListOfFoo.Add (new Foo (n));
    }
    var threads = new List < Thread > ();
    foreach (Foo f in ListOfFoo) {
        Thread thread = new Thread(()=>f.DoSomething());
        threads.Add (thread);
        thread.Start ();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
422
2
Gpt3D_Clone422_2.cs 1 13
Gpt3D_Clone422_2.cs 14 31
----------------------------------------

static void Main (string [] args) {
    var ListOfFoo = new List < Foo > ();
    ListOfFoo.Add (new Foo (1));
    ListOfFoo.Add (new Foo (2));
    ListOfFoo.Add (new Foo (3));
    ListOfFoo.Add (new Foo (4));
    var threads = new List < Thread > ();
    foreach (Foo f in ListOfFoo) {
        Thread thread = new Thread(()=>f.DoSomething());
        threads.Add (thread);
        thread.Start ();
    }
}
----------------------------------------

 static void Main (string [] args) {
    List<Foo> ListOfFoo = new List<Foo>();
    int i = 1; 
    while (i <= 4)
    {
        ListOfFoo.Add(new Foo(i));
        i++;
    }
    List<Thread> threads = new List<Thread>();
    ListOfFoo.ForEach (f =>
    {
        Thread thread = new Thread(()=>f.DoSomething());
        threads.Add (thread);
        thread.Start ();
    });
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
422
5
Gpt3D_Clone422_5.cs 1 13
Gpt3D_Clone422_5.cs 14 28
----------------------------------------

static void Main (string [] args) {
    var ListOfFoo = new List < Foo > ();
    ListOfFoo.Add (new Foo (1));
    ListOfFoo.Add (new Foo (2));
    ListOfFoo.Add (new Foo (3));
    ListOfFoo.Add (new Foo (4));
    var threads = new List < Thread > ();
    foreach (Foo f in ListOfFoo) {
        Thread thread = new Thread(()=>f.DoSomething());
        threads.Add (thread);
        thread.Start ();
    }
}
----------------------------------------

 static void Main (string [] args) {
    List<Foo> ListOfFoo = new List<Foo>();
    for (int i = 0; i < 4; i++){
        ListOfFoo.Add (new Foo (i + 1));
    }
    List<Thread> threads = new List<Thread>();
    ListOfFoo.ForEach (f =>
    {
        Thread thread = new Thread(()=>f.DoSomething());
        threads.Add (thread);
        thread.Start ();
    });
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
422
8
Gpt3D_Clone422_8.cs 1 13
Gpt3D_Clone422_8.cs 14 27
----------------------------------------

static void Main (string [] args) {
    var ListOfFoo = new List < Foo > ();
    ListOfFoo.Add (new Foo (1));
    ListOfFoo.Add (new Foo (2));
    ListOfFoo.Add (new Foo (3));
    ListOfFoo.Add (new Foo (4));
    var threads = new List < Thread > ();
    foreach (Foo f in ListOfFoo) {
        Thread thread = new Thread(()=>f.DoSomething());
        threads.Add (thread);
        thread.Start ();
    }
}
----------------------------------------

 static void Main (string [] args) {
    List<Foo> ListOfFoo = new List<Foo>();
    int[] numList = new int[]{1,2,3,4};
    numList.ToList().ForEach(num => ListOfFoo.Add(new Foo(num)));
    List<Thread> threads = new List<Thread>();
    ListOfFoo.ForEach (f =>
    {
        Thread thread = new Thread(()=>f.DoSomething());
        threads.Add (thread);
        thread.Start ();
    });
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
422
9
Gpt3D_Clone422_9.cs 1 13
Gpt3D_Clone422_9.cs 14 25
----------------------------------------

static void Main (string [] args) {
    var ListOfFoo = new List < Foo > ();
    ListOfFoo.Add (new Foo (1));
    ListOfFoo.Add (new Foo (2));
    ListOfFoo.Add (new Foo (3));
    ListOfFoo.Add (new Foo (4));
    var threads = new List < Thread > ();
    foreach (Foo f in ListOfFoo) {
        Thread thread = new Thread(()=>f.DoSomething());
        threads.Add (thread);
        thread.Start ();
    }
}
----------------------------------------

 static void Main (string [] args) {
    List<Foo> ListOfFoo = new List<Foo>(){new Foo(1),new Foo(2),new Foo(3),new Foo(4)};
    List<Thread> threads = new List<Thread>();
    ListOfFoo.ForEach (f =>
    {
        Thread thread = new Thread(()=>f.DoSomething());
        threads.Add (thread);
        thread.Start ();
    });
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
423
0
Gpt3D_Clone423_0.cs 1 14
Gpt3D_Clone423_0.cs 15 44
----------------------------------------

public static IntPtr EnsureHandle (this WindowInteropHelper helper) {
    if (helper == null)
        throw new ArgumentNullException ("helper");
    if (helper.Handle == IntPtr.Zero) {
        var window = (Window) typeof (WindowInteropHelper).InvokeMember ("_window", BindingFlags.GetField | BindingFlags.Instance | BindingFlags.NonPublic, null, helper, null);
        try {
            typeof (Window).InvokeMember ("SafeCreateWindow", BindingFlags.InvokeMethod | BindingFlags.Instance | BindingFlags.NonPublic, null, window, null);
        }
        catch (MissingMethodException) {
            typeof (Window).InvokeMember ("CreateSourceWindow", BindingFlags.InvokeMethod | BindingFlags.Instance | BindingFlags.NonPublic, null, window, new object [] {false});
        }
    }
    return helper.Handle;
}
----------------------------------------

 public static IntPtr EnsureHandle(this WindowInteropHelper helper)
{
    if (helper == null)
    {
        throw new ArgumentNullException(nameof(helper));
    }
    
    if (helper.Handle == IntPtr.Zero)
    {
        var windowField = typeof(WindowInteropHelper).GetField("_window", BindingFlags.Instance | BindingFlags.NonPublic);
        var window = (Window)windowField.GetValue(helper);
        Type typeOfWindow = typeof(Window);
        MethodInfo safeCreateWindow = typeOfWindow.GetMethod("SafeCreateWindow", BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);
        MethodInfo createSourceWindow = typeOfWindow.GetMethod("CreateSourceWindow", BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);
        try
        {
            safeCreateWindow.Invoke(window, null);
        }
        catch (MissingMethodException)
        {
            createSourceWindow.Invoke(window, new object[] { false });
        }
    }
    return helper.Handle;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
423
1
Gpt3D_Clone423_1.cs 1 14
Gpt3D_Clone423_1.cs 15 42
----------------------------------------

public static IntPtr EnsureHandle (this WindowInteropHelper helper) {
    if (helper == null)
        throw new ArgumentNullException ("helper");
    if (helper.Handle == IntPtr.Zero) {
        var window = (Window) typeof (WindowInteropHelper).InvokeMember ("_window", BindingFlags.GetField | BindingFlags.Instance | BindingFlags.NonPublic, null, helper, null);
        try {
            typeof (Window).InvokeMember ("SafeCreateWindow", BindingFlags.InvokeMethod | BindingFlags.Instance | BindingFlags.NonPublic, null, window, null);
        }
        catch (MissingMethodException) {
            typeof (Window).InvokeMember ("CreateSourceWindow", BindingFlags.InvokeMethod | BindingFlags.Instance | BindingFlags.NonPublic, null, window, new object [] {false});
        }
    }
    return helper.Handle;
}
----------------------------------------

 public static IntPtr EnsureHandle (this WindowInteropHelper helper)
{
    if (helper == null)
    {
        throw new ArgumentNullException("helper");
    }
    if (helper.Handle == IntPtr.Zero)
    {
        var windowField = typeof(WindowInteropHelper).GetField("_window", BindingFlags.Instance | BindingFlags.NonPublic);
        var window = (Window)windowField.GetValue(helper);
        var safeCreateWindowMethod = typeof(Window).GetMethod("SafeCreateWindow", BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);
        var createSourceWindowMethod = typeof(Window).GetMethod("CreateSourceWindow", BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);
        try
        {
            safeCreateWindowMethod.Invoke(window, null);
        }
        catch (MissingMethodException)
        {
            createSourceWindowMethod.Invoke(window, new object[] { false });
        }
    }
    return helper.Handle;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
423
2
Gpt3D_Clone423_2.cs 1 14
Gpt3D_Clone423_2.cs 15 90
----------------------------------------

public static IntPtr EnsureHandle (this WindowInteropHelper helper) {
    if (helper == null)
        throw new ArgumentNullException ("helper");
    if (helper.Handle == IntPtr.Zero) {
        var window = (Window) typeof (WindowInteropHelper).InvokeMember ("_window", BindingFlags.GetField | BindingFlags.Instance | BindingFlags.NonPublic, null, helper, null);
        try {
            typeof (Window).InvokeMember ("SafeCreateWindow", BindingFlags.InvokeMethod | BindingFlags.Instance | BindingFlags.NonPublic, null, window, null);
        }
        catch (MissingMethodException) {
            typeof (Window).InvokeMember ("CreateSourceWindow", BindingFlags.InvokeMethod | BindingFlags.Instance | BindingFlags.NonPublic, null, window, new object [] {false});
        }
    }
    return helper.Handle;
}
----------------------------------------

  public static IntPtr EnsureHandle (this WindowInteropHelper helper) 
    {
        if (helper == null)
        {
            throw new ArgumentNullException("helper");
        }
        if (helper.Handle == IntPtr.Zero) 
        {
            var window = (Window)typeof(WindowInteropHelper).InvokeMember("_window",
                                            BindingFlags.GetField | BindingFlags.Instance | BindingFlags.NonPublic,
                                            null, helper, null);
            try
            {
                typeof(Window).InvokeMember("SafeCreateWindow", 
                                            BindingFlags.InvokeMethod | BindingFlags.Instance | BindingFlags.NonPublic,
                                            null, window, null);
            }
            catch (MissingMethodException) 
            {
                typeof(Window).InvokeMember("CreateSourceWindow", 
                                            BindingFlags.InvokeMethod | BindingFlags.Instance | BindingFlags.NonPublic,
                                            null, window, new object[] { false });
            }
        }
        return helper.Handle;
    }
 public static IntPtr EnsureHandle (this WindowInteropHelper helper)
    {
        if (helper == null)
        {
            throw new ArgumentNullException("helper");
        }
        if (helper.Handle == IntPtr.Zero)
        {
            FieldInfo windowField = typeof(WindowInteropHelper).GetField("_window", BindingFlags.Instance | BindingFlags.NonPublic);
            var window = (Window) windowField.GetValue(helper);
            try {
                typeof(Window).InvokeMember("SafeCreateWindow", 
                                    BindingFlags.InvokeMethod | BindingFlags.Instance | BindingFlags.NonPublic, 
                                    null, window, null);
            }
            catch(MissingMethodException e)
            {
                typeof(Window).InvokeMember("CreateSourceWindow", 
                                    BindingFlags.InvokeMethod | BindingFlags.Instance | BindingFlags.NonPublic, 
                                    null, window, new object[] {false});
            }
        }
        return helper.Handle;
    }
 public static IntPtr EnsureHandle(this WindowInteropHelper helper)
{
    if(helper == null)
        throw new ArgumentNullException("helper");
    if(helper.Handle == IntPtr.Zero)
    {
        var window = (Window) typeof(WindowInteropHelper).GetField("_window", BindingFlags.Instance | BindingFlags.NonPublic).GetValue(helper);
        try
        {
            MethodInfo safeCreateWindow = typeof(Window).GetMethod("SafeCreateWindow", BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);
            safeCreateWindow.Invoke(window, null);
        }
        catch(MissingMethodException ex)
        {
            MethodInfo createSourceWindow = typeof(Window).GetMethod("CreateSourceWindow", BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);
            createSourceWindow.Invoke(window, new object[]{false});
        }
    }
    return helper.Handle;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
430
0
Gpt3D_Clone430_0.cs 1 27
Gpt3D_Clone430_0.cs 28 59
----------------------------------------

public static string Generate () {
    var pwdLength = GetCryptographicRandomNumber (Minimum, Maximum);
    var pwdBuffer = new StringBuilder {Capacity = Maximum};
    char lastCharacter = '\n';
    for (var i = 0; i < pwdLength; i ++) {
        var nextCharacter = GetRandomCharacter ();
        while (nextCharacter == lastCharacter) {
            nextCharacter = GetRandomCharacter ();
        }
        if (false == RepeatCharacters) {
            var temp = pwdBuffer.ToString ();
            var duplicateIndex = temp.IndexOf (nextCharacter);
            while (- 1 != duplicateIndex) {
                nextCharacter = GetRandomCharacter ();
                duplicateIndex = temp.IndexOf (nextCharacter);
            }
        }
        if ((null != Exclusions)) {
            while (- 1 != Exclusions.IndexOf (nextCharacter)) {
                nextCharacter = GetRandomCharacter ();
            }
        }
        pwdBuffer.Append (nextCharacter);
        lastCharacter = nextCharacter;
    }
    return pwdBuffer.ToString ();
}
----------------------------------------

 public static String Generate() {
    int pwdLength = GetCryptographicRandomNumber(Minimum, Maximum);
    StringBuilder pwdBuffer = new StringBuilder();
    pwdBuffer.ensureCapacity(Maximum);
    char lastCharacter = '\n';
    for (int i = 0; i < pwdLength; i++) {
        boolean ok = false;
        char nextCharacter = '\n';
        while (!ok) {
            nextCharacter = GetRandomCharacter();
            ok = true;
            if (!RepeatCharacters && lastCharacter == nextCharacter) {
                ok = false;
            }
            if (ok && Exclusions != null && Exclusions.indexOf(nextCharacter) != -1) {
                ok = false;
            }
            if (ok && !RepeatCharacters) {
                String temp = pwdBuffer.toString();
                int duplicateIndex = temp.indexOf(nextCharacter);
                if (duplicateIndex != -1) {
                    ok = false;
                }
            }
        }
        pwdBuffer.append(nextCharacter);
        lastCharacter = nextCharacter;
    }
    return pwdBuffer.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
430
1
Gpt3D_Clone430_1.cs 1 27
Gpt3D_Clone430_1.cs 28 58
----------------------------------------

public static string Generate () {
    var pwdLength = GetCryptographicRandomNumber (Minimum, Maximum);
    var pwdBuffer = new StringBuilder {Capacity = Maximum};
    char lastCharacter = '\n';
    for (var i = 0; i < pwdLength; i ++) {
        var nextCharacter = GetRandomCharacter ();
        while (nextCharacter == lastCharacter) {
            nextCharacter = GetRandomCharacter ();
        }
        if (false == RepeatCharacters) {
            var temp = pwdBuffer.ToString ();
            var duplicateIndex = temp.IndexOf (nextCharacter);
            while (- 1 != duplicateIndex) {
                nextCharacter = GetRandomCharacter ();
                duplicateIndex = temp.IndexOf (nextCharacter);
            }
        }
        if ((null != Exclusions)) {
            while (- 1 != Exclusions.IndexOf (nextCharacter)) {
                nextCharacter = GetRandomCharacter ();
            }
        }
        pwdBuffer.Append (nextCharacter);
        lastCharacter = nextCharacter;
    }
    return pwdBuffer.ToString ();
}
----------------------------------------

 public static String Generate() {
    int pwdLength = GetCryptographicRandomNumber(Minimum, Maximum);
    StringBuilder pwdBuffer = new StringBuilder(Maximum);
    char lastCharacter = '\n';
    for (int i = 0; i < pwdLength; i++) {
        char nextCharacter;
        boolean ok = false;
        while (!ok) {
            nextCharacter = GetRandomCharacter();
            ok = true;
            if (!RepeatCharacters && lastCharacter == nextCharacter) {
                ok = false;
            }
            if (ok && Exclusions != null && Exclusions.indexOf(nextCharacter) != -1) {
                ok = false;
            }
            if (ok && !RepeatCharacters) {
                for (int j = 0; j < pwdBuffer.length(); j++) {
                    if (nextCharacter == pwdBuffer.charAt(j))
                        ok = false;
                }
            }
        }
        pwdBuffer.append(nextCharacter);
        lastCharacter = nextCharacter;
    }
    return pwdBuffer.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
430
2
Gpt3D_Clone430_2.cs 1 27
Gpt3D_Clone430_2.cs 28 53
----------------------------------------

public static string Generate () {
    var pwdLength = GetCryptographicRandomNumber (Minimum, Maximum);
    var pwdBuffer = new StringBuilder {Capacity = Maximum};
    char lastCharacter = '\n';
    for (var i = 0; i < pwdLength; i ++) {
        var nextCharacter = GetRandomCharacter ();
        while (nextCharacter == lastCharacter) {
            nextCharacter = GetRandomCharacter ();
        }
        if (false == RepeatCharacters) {
            var temp = pwdBuffer.ToString ();
            var duplicateIndex = temp.IndexOf (nextCharacter);
            while (- 1 != duplicateIndex) {
                nextCharacter = GetRandomCharacter ();
                duplicateIndex = temp.IndexOf (nextCharacter);
            }
        }
        if ((null != Exclusions)) {
            while (- 1 != Exclusions.IndexOf (nextCharacter)) {
                nextCharacter = GetRandomCharacter ();
            }
        }
        pwdBuffer.Append (nextCharacter);
        lastCharacter = nextCharacter;
    }
    return pwdBuffer.ToString ();
}
----------------------------------------

 public static string Generate () {
    int pwdLength = RANDOM.nextInt (Minimum, Maximum);
    StringBuilder pwdBuffer = new StringBuilder (Maximum);
    char lastCharacter = '\n';
    for (int i = 0; i < pwdLength; i++) {
        char nextCharacter;
        if (RepeatCharacters) {
            nextCharacter = GetRandomCharacter();
        }
        else {
            do {
                nextCharacter = GetRandomCharacter();
            } while (nextCharacter == lastCharacter || pwdBuffer.indexOf(nextCharacter) != -1);
        }
        if (Exclusions != null) {
            while (Exclusions.indexOf(nextCharacter) != -1) {
                nextCharacter = GetRandomCharacter();
            }
        }
        pwdBuffer.append(nextCharacter);
        lastCharacter = nextCharacter;
    }
    return pwdBuffer.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
430
3
Gpt3D_Clone430_3.cs 1 27
Gpt3D_Clone430_3.cs 28 49
----------------------------------------

public static string Generate () {
    var pwdLength = GetCryptographicRandomNumber (Minimum, Maximum);
    var pwdBuffer = new StringBuilder {Capacity = Maximum};
    char lastCharacter = '\n';
    for (var i = 0; i < pwdLength; i ++) {
        var nextCharacter = GetRandomCharacter ();
        while (nextCharacter == lastCharacter) {
            nextCharacter = GetRandomCharacter ();
        }
        if (false == RepeatCharacters) {
            var temp = pwdBuffer.ToString ();
            var duplicateIndex = temp.IndexOf (nextCharacter);
            while (- 1 != duplicateIndex) {
                nextCharacter = GetRandomCharacter ();
                duplicateIndex = temp.IndexOf (nextCharacter);
            }
        }
        if ((null != Exclusions)) {
            while (- 1 != Exclusions.IndexOf (nextCharacter)) {
                nextCharacter = GetRandomCharacter ();
            }
        }
        pwdBuffer.Append (nextCharacter);
        lastCharacter = nextCharacter;
    }
    return pwdBuffer.ToString ();
}
----------------------------------------

 public static String Generate() {
    int pwdLength = GetCryptographicRandomNumber(Minimum, Maximum);
    StringBuilder pwdBuffer = new StringBuilder(Maximum);
    Set<Character> usedCharacters = new HashSet<Character>();
    for (int i = 0; i < pwdLength; i++) {
        char nextCharacter;
        if (RepeatCharacters) {
            nextCharacter = GetRandomCharacter();
        }
        else {
            do {
                nextCharacter = GetRandomCharacter();
            } while (usedCharacters.contains(nextCharacter) ||
                     (Exclusions != null && Exclusions.indexOf(nextCharacter) != -1));
            usedCharacters.add(nextCharacter);
        }
        pwdBuffer.append(nextCharacter);
    }
    return pwdBuffer.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
430
4
Gpt3D_Clone430_4.cs 1 27
Gpt3D_Clone430_4.cs 28 50
----------------------------------------

public static string Generate () {
    var pwdLength = GetCryptographicRandomNumber (Minimum, Maximum);
    var pwdBuffer = new StringBuilder {Capacity = Maximum};
    char lastCharacter = '\n';
    for (var i = 0; i < pwdLength; i ++) {
        var nextCharacter = GetRandomCharacter ();
        while (nextCharacter == lastCharacter) {
            nextCharacter = GetRandomCharacter ();
        }
        if (false == RepeatCharacters) {
            var temp = pwdBuffer.ToString ();
            var duplicateIndex = temp.IndexOf (nextCharacter);
            while (- 1 != duplicateIndex) {
                nextCharacter = GetRandomCharacter ();
                duplicateIndex = temp.IndexOf (nextCharacter);
            }
        }
        if ((null != Exclusions)) {
            while (- 1 != Exclusions.IndexOf (nextCharacter)) {
                nextCharacter = GetRandomCharacter ();
            }
        }
        pwdBuffer.Append (nextCharacter);
        lastCharacter = nextCharacter;
    }
    return pwdBuffer.ToString ();
}
----------------------------------------

 public static String Generate() {
    int pwdLength = GetCryptographicRandomNumber(Minimum, Maximum);
    StringBuilder pwdBuffer = new StringBuilder(Maximum);
    char lastCharacter = '\n';
    for (int i = 0; i < pwdLength; i++) {
        char nextCharacter = GetRandomCharacter();
        if (!RepeatCharacters) {
            while (pwdBuffer.indexOf(String.valueOf(nextCharacter)) != -1 || nextCharacter == lastCharacter) {
                nextCharacter = GetRandomCharacter();
            }
        }
        if (Exclusions != null) {
            while(Exclusions.indexOf(nextCharacter) != -1) {
                nextCharacter = GetRandomCharacter();
            }
        }
        pwdBuffer.append(nextCharacter);
        lastCharacter = nextCharacter;
    }
    return pwdBuffer.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
430
5
Gpt3D_Clone430_5.cs 1 27
Gpt3D_Clone430_5.cs 28 46
----------------------------------------

public static string Generate () {
    var pwdLength = GetCryptographicRandomNumber (Minimum, Maximum);
    var pwdBuffer = new StringBuilder {Capacity = Maximum};
    char lastCharacter = '\n';
    for (var i = 0; i < pwdLength; i ++) {
        var nextCharacter = GetRandomCharacter ();
        while (nextCharacter == lastCharacter) {
            nextCharacter = GetRandomCharacter ();
        }
        if (false == RepeatCharacters) {
            var temp = pwdBuffer.ToString ();
            var duplicateIndex = temp.IndexOf (nextCharacter);
            while (- 1 != duplicateIndex) {
                nextCharacter = GetRandomCharacter ();
                duplicateIndex = temp.IndexOf (nextCharacter);
            }
        }
        if ((null != Exclusions)) {
            while (- 1 != Exclusions.IndexOf (nextCharacter)) {
                nextCharacter = GetRandomCharacter ();
            }
        }
        pwdBuffer.Append (nextCharacter);
        lastCharacter = nextCharacter;
    }
    return pwdBuffer.ToString ();
}
----------------------------------------

 public static String Generate() {
    int pwdLength = GetCryptographicRandomNumber(Minimum, Maximum);
    StringBuilder pwdBuffer = new StringBuilder(Maximum);
    boolean[] usedChars = new boolean[256];
    List<Character> usedCharacters = new ArrayList<Character>();
    for (int i = 0; i < pwdLength; i++) {
        char nextCharacter;
        do {
            nextCharacter = GetRandomCharacter();
        } while (usedChars[nextCharacter] || (!RepeatCharacters && usedCharacters.contains(nextCharacter)) || (Exclusions != null && Exclusions.indexOf(nextCharacter) != -1));
        usedChars[nextCharacter] = true;
        usedCharacters.add(nextCharacter);
        pwdBuffer.append(nextCharacter);
    }
    return pwdBuffer.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
430
6
Gpt3D_Clone430_6.cs 1 27
Gpt3D_Clone430_6.cs 28 47
----------------------------------------

public static string Generate () {
    var pwdLength = GetCryptographicRandomNumber (Minimum, Maximum);
    var pwdBuffer = new StringBuilder {Capacity = Maximum};
    char lastCharacter = '\n';
    for (var i = 0; i < pwdLength; i ++) {
        var nextCharacter = GetRandomCharacter ();
        while (nextCharacter == lastCharacter) {
            nextCharacter = GetRandomCharacter ();
        }
        if (false == RepeatCharacters) {
            var temp = pwdBuffer.ToString ();
            var duplicateIndex = temp.IndexOf (nextCharacter);
            while (- 1 != duplicateIndex) {
                nextCharacter = GetRandomCharacter ();
                duplicateIndex = temp.IndexOf (nextCharacter);
            }
        }
        if ((null != Exclusions)) {
            while (- 1 != Exclusions.IndexOf (nextCharacter)) {
                nextCharacter = GetRandomCharacter ();
            }
        }
        pwdBuffer.Append (nextCharacter);
        lastCharacter = nextCharacter;
    }
    return pwdBuffer.ToString ();
}
----------------------------------------

 public static String Generate() {
    int pwdLength = GetCryptographicRandomNumber(Minimum, Maximum);
    StringBuilder pwdBuffer = new StringBuilder(Maximum);
    boolean[] usedChars = new boolean[256];
    char lastChar = '\n';
    for (int i = 0; i < pwdLength; i++) {
        char nextCharacter;
        do {
            nextCharacter = GetRandomCharacter();
        } while (usedChars[nextCharacter] || (!RepeatCharacters && lastChar == nextCharacter) || (Exclusions != null && Exclusions.indexOf(nextCharacter) != -1));
        usedChars[nextCharacter] = true;
        pwdBuffer.append(nextCharacter);
        lastChar = nextCharacter;
    }
    return pwdBuffer.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
430
7
Gpt3D_Clone430_7.cs 1 27
Gpt3D_Clone430_7.cs 28 50
----------------------------------------

public static string Generate () {
    var pwdLength = GetCryptographicRandomNumber (Minimum, Maximum);
    var pwdBuffer = new StringBuilder {Capacity = Maximum};
    char lastCharacter = '\n';
    for (var i = 0; i < pwdLength; i ++) {
        var nextCharacter = GetRandomCharacter ();
        while (nextCharacter == lastCharacter) {
            nextCharacter = GetRandomCharacter ();
        }
        if (false == RepeatCharacters) {
            var temp = pwdBuffer.ToString ();
            var duplicateIndex = temp.IndexOf (nextCharacter);
            while (- 1 != duplicateIndex) {
                nextCharacter = GetRandomCharacter ();
                duplicateIndex = temp.IndexOf (nextCharacter);
            }
        }
        if ((null != Exclusions)) {
            while (- 1 != Exclusions.IndexOf (nextCharacter)) {
                nextCharacter = GetRandomCharacter ();
            }
        }
        pwdBuffer.Append (nextCharacter);
        lastCharacter = nextCharacter;
    }
    return pwdBuffer.ToString ();
}
----------------------------------------

 public static String Generate() {
    int pwdLength = GetCryptographicRandomNumber(Minimum, Maximum);
    StringBuilder pwdBuffer = new StringBuilder(Maximum);
    char c = '\n';
    for (int i = 0; i < pwdLength; i++) {
        char nextCharacter = GetRandomCharacter();
        if (!RepeatCharacters) {
            while (nextCharacter == c || pwdBuffer.indexOf(String.valueOf(nextCharacter)) != -1) {
                nextCharacter = GetRandomCharacter();
            }
        }
        if (Exclusions != null) {
            while(Exclusions.indexOf(nextCharacter) != -1) {
                nextCharacter = GetRandomCharacter();
            }
        }
        pwdBuffer.append(nextCharacter);
        c = nextCharacter;
    }
    return pwdBuffer.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
430
8
Gpt3D_Clone430_8.cs 1 27
Gpt3D_Clone430_8.cs 28 45
----------------------------------------

public static string Generate () {
    var pwdLength = GetCryptographicRandomNumber (Minimum, Maximum);
    var pwdBuffer = new StringBuilder {Capacity = Maximum};
    char lastCharacter = '\n';
    for (var i = 0; i < pwdLength; i ++) {
        var nextCharacter = GetRandomCharacter ();
        while (nextCharacter == lastCharacter) {
            nextCharacter = GetRandomCharacter ();
        }
        if (false == RepeatCharacters) {
            var temp = pwdBuffer.ToString ();
            var duplicateIndex = temp.IndexOf (nextCharacter);
            while (- 1 != duplicateIndex) {
                nextCharacter = GetRandomCharacter ();
                duplicateIndex = temp.IndexOf (nextCharacter);
            }
        }
        if ((null != Exclusions)) {
            while (- 1 != Exclusions.IndexOf (nextCharacter)) {
                nextCharacter = GetRandomCharacter ();
            }
        }
        pwdBuffer.Append (nextCharacter);
        lastCharacter = nextCharacter;
    }
    return pwdBuffer.ToString ();
}
----------------------------------------

 public static String Generate() {
    int pwdLength = GetCryptographicRandomNumber(Minimum, Maximum);
    StringBuilder pwdBuffer = new StringBuilder(Maximum);
    Set<Character> usedChars = new HashSet<Character>();
    char lastChar = '\n';
    for (int i = 0; i < pwdLength; i++) {
        char nextCharacter = GetRandomCharacter();
        while (nextCharacter == lastChar || usedChars.contains(nextCharacter) || (Exclusions != null && Exclusions.indexOf(nextCharacter) != -1)) {
            nextCharacter = GetRandomCharacter();
        }
        usedChars.add(nextCharacter);
        pwdBuffer.append(nextCharacter);
        lastChar = nextCharacter;
    }
    return pwdBuffer.toString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
433
0
Gpt3D_Clone433_0.cs 1 19
Gpt3D_Clone433_0.cs 20 44
----------------------------------------

public static int IndexPosition (this XElement element) {
    if (element == null) {
        throw new ArgumentNullException ("element");
    }
    if (element.Parent == null) {
        return - 1;
    }
    if (element.Parent.Elements (element.Name).Count () == 1) {
        return - 2;
    }
    int i = 1;
    foreach (var sibling in element.Parent.Elements (element.Name)) {
        if (sibling == element) {
            return i;
        }
        i ++;
    }
    throw new InvalidOperationException ("element has been removed from its parent.");
}
----------------------------------------

 public static int IndexPosition (this XElement element) {
    if (element == null) {
        throw new ArgumentNullException ("element");
    }
    if (element.Parent == null) {
        return -1;
    }
     
    int desiredIndex = -1;
    XElement[] elements = element.Parent.Elements(element.Name).ToArray();
    int i = 0;
    while (i < elements.Length) {
        if (elements[i] == element) {
           desiredIndex = i;
           break; 
        }
        i++;
    }
    if (desiredIndex == -1) {
        throw new InvalidOperationException ("element has been removed from its parent.");
    }
    return desiredIndex;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
433
1
Gpt3D_Clone433_1.cs 1 19
Gpt3D_Clone433_1.cs 20 44
----------------------------------------

public static int IndexPosition (this XElement element) {
    if (element == null) {
        throw new ArgumentNullException ("element");
    }
    if (element.Parent == null) {
        return - 1;
    }
    if (element.Parent.Elements (element.Name).Count () == 1) {
        return - 2;
    }
    int i = 1;
    foreach (var sibling in element.Parent.Elements (element.Name)) {
        if (sibling == element) {
            return i;
        }
        i ++;
    }
    throw new InvalidOperationException ("element has been removed from its parent.");
}
----------------------------------------

  public static int IndexPosition (this XElement element) {
    if (element == null) {
        throw new ArgumentNullException ("element");
    }
    if (element.Parent == null) {
        return -1;
    }
     
    int index = -1;
    int i = 0;
    XElement[] elements = element.Parent.Elements(element.Name).ToArray();
    while (i < elements.Length) {
        if (elements[i] == element) {
           index = i; 
           break;
        }
        i++;
    }
    if (index == -1) {
       throw new InvalidOperationException ("element has been removed from its parent."); 
    }
    return index;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
433
2
Gpt3D_Clone433_2.cs 1 19
Gpt3D_Clone433_2.cs 20 45
----------------------------------------

public static int IndexPosition (this XElement element) {
    if (element == null) {
        throw new ArgumentNullException ("element");
    }
    if (element.Parent == null) {
        return - 1;
    }
    if (element.Parent.Elements (element.Name).Count () == 1) {
        return - 2;
    }
    int i = 1;
    foreach (var sibling in element.Parent.Elements (element.Name)) {
        if (sibling == element) {
            return i;
        }
        i ++;
    }
    throw new InvalidOperationException ("element has been removed from its parent.");
}
----------------------------------------

 public static int IndexPosition (this XElement element) {
    if (element == null) {
        throw new ArgumentNullException ("element");
    }
    if (element.Parent == null) {
        return -1;
    }
     
    XElement[] allElements = element.Parent.Elements(element.Name).ToArray();
    int desiredIndex = -1;
    for (int i = 0; i < allElements.Length; i++)
    {
        if (allElements[i] == element) //Use "Equals" in case of custom object
        {
            desiredIndex = i;
            break; 
        }
    }
    if (desiredIndex == -1)
    {
        throw new InvalidOperationException("element has been removed from its parent.");
    }
    return desiredIndex;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
433
4
Gpt3D_Clone433_4.cs 1 19
Gpt3D_Clone433_4.cs 20 36
----------------------------------------

public static int IndexPosition (this XElement element) {
    if (element == null) {
        throw new ArgumentNullException ("element");
    }
    if (element.Parent == null) {
        return - 1;
    }
    if (element.Parent.Elements (element.Name).Count () == 1) {
        return - 2;
    }
    int i = 1;
    foreach (var sibling in element.Parent.Elements (element.Name)) {
        if (sibling == element) {
            return i;
        }
        i ++;
    }
    throw new InvalidOperationException ("element has been removed from its parent.");
}
----------------------------------------

  public static int IndexPosition (this XElement element) {
    if (element == null) {
        throw new ArgumentNullException ("element");
    }
    if (element.Parent == null) {
        return -1;
    }
     
    List<XElement> list = element.Parent.Elements(element.Name).ToList(); 
    int index = list.IndexOf(element);
    if (index == -1) {
       throw new InvalidOperationException ("element has been removed from its parent."); 
    }
    return index;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
433
8
Gpt3D_Clone433_8.cs 1 19
Gpt3D_Clone433_8.cs 20 35
----------------------------------------

public static int IndexPosition (this XElement element) {
    if (element == null) {
        throw new ArgumentNullException ("element");
    }
    if (element.Parent == null) {
        return - 1;
    }
    if (element.Parent.Elements (element.Name).Count () == 1) {
        return - 2;
    }
    int i = 1;
    foreach (var sibling in element.Parent.Elements (element.Name)) {
        if (sibling == element) {
            return i;
        }
        i ++;
    }
    throw new InvalidOperationException ("element has been removed from its parent.");
}
----------------------------------------

 public static int IndexPosition (this XElement element) {
    if (element == null) {
        throw new ArgumentNullException ("element");
    }
    if (element.Parent == null) {
        return -1;
    }
     
    int index = Array.IndexOf(element.Parent.Elements(element.Name).ToArray(), element); 
    if (index == -1) {
       throw new InvalidOperationException ("element has been removed from its parent."); 
    }
    return index;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
434
0
Gpt3D_Clone434_0.cs 1 9
Gpt3D_Clone434_0.cs 10 24
----------------------------------------

protected override void OnMouseMove (MouseEventArgs e) {
    if (e.Button == MouseButtons.Left) {
        rec.Width = e.X - rec.X;
        rec.Height = e.Y - rec.Y;
    } else if (e.Button == MouseButtons.Right) {
        rec.X = e.X - MouseDownLocation.X;
        rec.Y = e.Y - MouseDownLocation.Y;
    }
}
----------------------------------------

 protected override void OnMouseMove (MouseEventArgs e) {
    if (e.Button == MouseButtons.Left) {
        int width = e.X - MouseDownLocation.X;
        int height = e.Y - MouseDownLocation.Y;
        rec.X = MouseDownLocation.X;
        rec.Y = MouseDownLocation.Y;
        rec.Width = Math.Max(0, width);
        rec.Height = Math.Max(0, height);
    } else if (e.Button == MouseButtons.Right) {
        rec.X = e.X - MouseDownLocation.X;
        rec.Y = e.Y - MouseDownLocation.Y;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
434
4
Gpt3D_Clone434_4.cs 1 9
Gpt3D_Clone434_4.cs 10 22
----------------------------------------

protected override void OnMouseMove (MouseEventArgs e) {
    if (e.Button == MouseButtons.Left) {
        rec.Width = e.X - rec.X;
        rec.Height = e.Y - rec.Y;
    } else if (e.Button == MouseButtons.Right) {
        rec.X = e.X - MouseDownLocation.X;
        rec.Y = e.Y - MouseDownLocation.Y;
    }
}
----------------------------------------

  protected override void OnMouseMove (MouseEventArgs e) {
    if (e.Button == MouseButtons.Left) {
        rec.X += e.X - MouseDownLocation.X;
        rec.Y += e.Y - MouseDownLocation.Y;
    } else if (e.Button == MouseButtons.Right) {
        rec.Size = new Size(
            e.X - rec.X, 
            e.Y - rec.Y
        );
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
434
5
Gpt3D_Clone434_5.cs 1 9
Gpt3D_Clone434_5.cs 10 21
----------------------------------------

protected override void OnMouseMove (MouseEventArgs e) {
    if (e.Button == MouseButtons.Left) {
        rec.Width = e.X - rec.X;
        rec.Height = e.Y - rec.Y;
    } else if (e.Button == MouseButtons.Right) {
        rec.X = e.X - MouseDownLocation.X;
        rec.Y = e.Y - MouseDownLocation.Y;
    }
}
----------------------------------------

 protected override void OnMouseMove (MouseEventArgs e) {
    if (e.Button == MouseButtons.Left) {
        rec.SetBounds (MouseDownLocation.X, MouseDownLocation.Y, e.X, e.Y);
    } else if (e.Button == MouseButtons.Right) {
        rec.Location = new Point (
            e.X - MouseDownLocation.X, 
            e.Y - MouseDownLocation.Y
        );
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
436
1
Gpt3D_Clone436_1.cs 1 9
Gpt3D_Clone436_1.cs 10 23
----------------------------------------

private static void Test (Action toTest) {
    for (int i = 0; i < 100; i ++) {
        var sw = Stopwatch.StartNew ();
        toTest ();
        sw.Stop ();
        Console.WriteLine ("costs {0}", sw.ElapsedMilliseconds);
        sw.Reset ();
    }
}
----------------------------------------

 private static void Test (Action toTest) {
    var minTime = long.MaxValue;
    var maxTime = long.MinValue;
    for (int i = 0; i < 100; i ++) {
        long start = System.DateTime.Now.Ticks;
        toTest ();
        long end = System.DateTime.Now.Ticks;
        minTime = Math.Min (minTime, end - start);
        maxTime = Math.Max (maxTime, end - start);
    }
    Console.WriteLine ("min costs {0}, max costs {1}", minTime, maxTime);  
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
436
2
Gpt3D_Clone436_2.cs 1 9
Gpt3D_Clone436_2.cs 10 23
----------------------------------------

private static void Test (Action toTest) {
    for (int i = 0; i < 100; i ++) {
        var sw = Stopwatch.StartNew ();
        toTest ();
        sw.Stop ();
        Console.WriteLine ("costs {0}", sw.ElapsedMilliseconds);
        sw.Reset ();
    }
}
----------------------------------------

 private static void Test (Action toTest) {
    var totalTime = 0L;
    for (int i = 0; i < 100; i ++) {
        var sw = new Stopwatch ();
        sw.Start ();
        toTest ();
        sw.Stop ();
        totalTime += sw.ElapsedMilliseconds;
        sw.Reset ();
    }
    Console.WriteLine ("costs {0}", totalTime / 100);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
436
7
Gpt3D_Clone436_7.cs 1 9
Gpt3D_Clone436_7.cs 10 21
----------------------------------------

private static void Test (Action toTest) {
    for (int i = 0; i < 100; i ++) {
        var sw = Stopwatch.StartNew ();
        toTest ();
        sw.Stop ();
        Console.WriteLine ("costs {0}", sw.ElapsedMilliseconds);
        sw.Reset ();
    }
}
----------------------------------------

 private static void Test (Action toTest) {
    var totalTime = 0L;
    for (int i = 0; i < 100; i ++) {
        long start = System.DateTime.Now.Ticks;
        toTest ();
        long end = System.DateTime.Now.Ticks;
        totalTime += (end - start);
    }
    Console.WriteLine ("costs {0}", totalTime / 100);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
436
8
Gpt3D_Clone436_8.cs 1 9
Gpt3D_Clone436_8.cs 10 21
----------------------------------------

private static void Test (Action toTest) {
    for (int i = 0; i < 100; i ++) {
        var sw = Stopwatch.StartNew ();
        toTest ();
        sw.Stop ();
        Console.WriteLine ("costs {0}", sw.ElapsedMilliseconds);
        sw.Reset ();
    }
}
----------------------------------------

 private static void Test (Action toTest) {
    var totalTime = 0L;
    for (int i = 0; i < 100; i ++) {
        using (var sw = Stopwatch.StartNew ()) {
            toTest ();
            totalTime += sw.ElapsedMilliseconds;
        }
    }
    Console.WriteLine ("costs {0}", totalTime / 100);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
438
0
Gpt3D_Clone438_0.cs 1 16
Gpt3D_Clone438_0.cs 17 33
----------------------------------------

public static void Rename (this FileSystemInfo item, string newName) {
    if (item == null) {
        throw new ArgumentNullException ("item");
    }
    FileInfo fileInfo = item as FileInfo;
    if (fileInfo != null) {
        fileInfo.Rename (newName);
        return;
    }
    DirectoryInfo directoryInfo = item as DirectoryInfo;
    if (directoryInfo != null) {
        directoryInfo.Rename (newName);
        return;
    }
    throw new ArgumentException ("Item", "Unexpected subclass of FileSystemInfo " + item.GetType ());
}
----------------------------------------

 public static void Rename (this FileSystemInfo item, string newName) {
    if (item == null) {
        throw new ArgumentNullException ("item");
    }
    switch (item) {
        case FileInfo fileInfo:
            fileInfo.Rename (newName);
            break;
        case DirectoryInfo directoryInfo:
            directoryInfo.Rename (newName);
            break;
        default:
            throw new ArgumentException ("Unexpected subclass of FileSystemInfo " + item.GetType ());
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
438
2
Gpt3D_Clone438_2.cs 1 16
Gpt3D_Clone438_2.cs 17 33
----------------------------------------

public static void Rename (this FileSystemInfo item, string newName) {
    if (item == null) {
        throw new ArgumentNullException ("item");
    }
    FileInfo fileInfo = item as FileInfo;
    if (fileInfo != null) {
        fileInfo.Rename (newName);
        return;
    }
    DirectoryInfo directoryInfo = item as DirectoryInfo;
    if (directoryInfo != null) {
        directoryInfo.Rename (newName);
        return;
    }
    throw new ArgumentException ("Item", "Unexpected subclass of FileSystemInfo " + item.GetType ());
}
----------------------------------------

 public static void Rename (this FileSystemInfo item, string newName) {
    if (item == null) 
        throw new ArgumentNullException ("item");
    
    FileInfo fileInfo = item as FileInfo;
    if (fileInfo != null) 
        fileInfo.Rename (newName);
    else {
        DirectoryInfo directoryInfo = item as DirectoryInfo;
        if (directoryInfo != null) 
            directoryInfo.Rename (newName);
        else 
            throw new ArgumentException ("Unexpected subclass of FileSystemInfo " + item.GetType ()); 
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
438
3
Gpt3D_Clone438_3.cs 1 16
Gpt3D_Clone438_3.cs 17 32
----------------------------------------

public static void Rename (this FileSystemInfo item, string newName) {
    if (item == null) {
        throw new ArgumentNullException ("item");
    }
    FileInfo fileInfo = item as FileInfo;
    if (fileInfo != null) {
        fileInfo.Rename (newName);
        return;
    }
    DirectoryInfo directoryInfo = item as DirectoryInfo;
    if (directoryInfo != null) {
        directoryInfo.Rename (newName);
        return;
    }
    throw new ArgumentException ("Item", "Unexpected subclass of FileSystemInfo " + item.GetType ());
}
----------------------------------------

 public static void Rename (this FileSystemInfo item, string newName) {
    if (item == null) {
        throw new ArgumentNullException ("item");
    }
    try {
        if (item is FileInfo fileInfo) {
            fileInfo.Rename (newName);
        } else if (item is DirectoryInfo directoryInfo) {
            directoryInfo.Rename (newName);
        }
    } catch (ArgumentException ex) {
        throw new ArgumentException ("Unexpected subclass of FileSystemInfo " + item.GetType (), ex);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
438
4
Gpt3D_Clone438_4.cs 1 16
Gpt3D_Clone438_4.cs 17 32
----------------------------------------

public static void Rename (this FileSystemInfo item, string newName) {
    if (item == null) {
        throw new ArgumentNullException ("item");
    }
    FileInfo fileInfo = item as FileInfo;
    if (fileInfo != null) {
        fileInfo.Rename (newName);
        return;
    }
    DirectoryInfo directoryInfo = item as DirectoryInfo;
    if (directoryInfo != null) {
        directoryInfo.Rename (newName);
        return;
    }
    throw new ArgumentException ("Item", "Unexpected subclass of FileSystemInfo " + item.GetType ());
}
----------------------------------------

 public static void Rename (this FileSystemInfo item, string newName) {
    try {
        if (item == null)
            throw new ArgumentNullException ("item");
    
        if (item is FileInfo)
            ((FileInfo)item).Rename (newName);
        else if (item is DirectoryInfo)
            ((DirectoryInfo)item).Rename (newName);
    }
    catch (ArgumentException ex) {
        throw new ArgumentException ($"Unexpected subclass of FileSystemInfo {item?.GetType()}", ex);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
438
5
Gpt3D_Clone438_5.cs 1 16
Gpt3D_Clone438_5.cs 17 29
----------------------------------------

public static void Rename (this FileSystemInfo item, string newName) {
    if (item == null) {
        throw new ArgumentNullException ("item");
    }
    FileInfo fileInfo = item as FileInfo;
    if (fileInfo != null) {
        fileInfo.Rename (newName);
        return;
    }
    DirectoryInfo directoryInfo = item as DirectoryInfo;
    if (directoryInfo != null) {
        directoryInfo.Rename (newName);
        return;
    }
    throw new ArgumentException ("Item", "Unexpected subclass of FileSystemInfo " + item.GetType ());
}
----------------------------------------

 public static void Rename (this FileSystemInfo item, string newName) {
    if (item == null)
        throw new ArgumentNullException("item");
    if (item is FileInfo fi)
        fi.Rename(newName);
    else if (item is DirectoryInfo di)
        di.Rename(newName);
    else
        throw new ArgumentException("Unexpected subclass of FileSystemInfo " + item.GetType());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
438
6
Gpt3D_Clone438_6.cs 1 16
Gpt3D_Clone438_6.cs 17 28
----------------------------------------

public static void Rename (this FileSystemInfo item, string newName) {
    if (item == null) {
        throw new ArgumentNullException ("item");
    }
    FileInfo fileInfo = item as FileInfo;
    if (fileInfo != null) {
        fileInfo.Rename (newName);
        return;
    }
    DirectoryInfo directoryInfo = item as DirectoryInfo;
    if (directoryInfo != null) {
        directoryInfo.Rename (newName);
        return;
    }
    throw new ArgumentException ("Item", "Unexpected subclass of FileSystemInfo " + item.GetType ());
}
----------------------------------------

 public static void Rename (this FileSystemInfo item, string newName) {
    if (item == null)
        throw new ArgumentNullException ("item");
    if (item.GetType() is FileInfo)
        ((FileInfo)item).Rename(newName);
    else if (item.GetType() is DirectoryInfo) 
        ((DirectoryInfo)item).Rename (newName);
    else
        throw new ArgumentException ("Unexpected subclass of FileSystemInfo " + item.GetType ());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
438
7
Gpt3D_Clone438_7.cs 1 16
Gpt3D_Clone438_7.cs 17 30
----------------------------------------

public static void Rename (this FileSystemInfo item, string newName) {
    if (item == null) {
        throw new ArgumentNullException ("item");
    }
    FileInfo fileInfo = item as FileInfo;
    if (fileInfo != null) {
        fileInfo.Rename (newName);
        return;
    }
    DirectoryInfo directoryInfo = item as DirectoryInfo;
    if (directoryInfo != null) {
        directoryInfo.Rename (newName);
        return;
    }
    throw new ArgumentException ("Item", "Unexpected subclass of FileSystemInfo " + item.GetType ());
}
----------------------------------------

 public static void Rename (this FileSystemInfo item, string newName) {
    if (item == null) {
        throw new ArgumentNullException ("item");
    }
    if (item is FileInfo) {
        ((FileInfo)item).Rename (newName);
    } else if (item is DirectoryInfo) {
        ((DirectoryInfo)item).Rename (newName);
    } else {
        throw new ArgumentException ("Unexpected subclass of FileSystemInfo " + item.GetType ());
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
438
8
Gpt3D_Clone438_8.cs 1 16
Gpt3D_Clone438_8.cs 17 29
----------------------------------------

public static void Rename (this FileSystemInfo item, string newName) {
    if (item == null) {
        throw new ArgumentNullException ("item");
    }
    FileInfo fileInfo = item as FileInfo;
    if (fileInfo != null) {
        fileInfo.Rename (newName);
        return;
    }
    DirectoryInfo directoryInfo = item as DirectoryInfo;
    if (directoryInfo != null) {
        directoryInfo.Rename (newName);
        return;
    }
    throw new ArgumentException ("Item", "Unexpected subclass of FileSystemInfo " + item.GetType ());
}
----------------------------------------

 public static void Rename (this FileSystemInfo item, string newName) {
    if (item == null) {
        throw new ArgumentNullException ("item");
    } else if (item is FileInfo fileInfo) {
        fileInfo.Rename (newName);
    } else if (item is DirectoryInfo directoryInfo) {
        directoryInfo.Rename (newName);
    } else {
        throw new ArgumentException ("Unexpected subclass of FileSystemInfo " + item.GetType ());
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
439
1
Gpt3D_Clone439_1.cs 1 16
Gpt3D_Clone439_1.cs 17 36
----------------------------------------

public static void Rename (this FileSystemInfo item, string newName) {
    if (item == null) {
        throw new ArgumentNullException ("item");
    }
    FileInfo fileInfo = item as FileInfo;
    if (fileInfo != null) {
        fileInfo.Rename (newName);
        return;
    }
    DirectoryInfo directoryInfo = item as DirectoryInfo;
    if (directoryInfo != null) {
        directoryInfo.Rename (newName);
        return;
    }
    throw new ArgumentException ("Item", "Unexpected subclass of FileSystemInfo " + item.GetType ());
}
----------------------------------------

	public static void Rename (this FileSystemInfo item, string newName) {
    if (item == null) {
        throw new ArgumentNullException ("item");
    }
    switch (item.GetType().Name)
    {
        case "FileInfo":
            FileInfo fileInfo = (FileInfo)item;
            fileInfo.Rename(newName);
            break;
        case "DirectoryInfo":
            DirectoryInfo directoryInfo = (DirectoryInfo)item;
            directoryInfo.Rename(newName);
            break;
        default:
            throw new ArgumentException ("Item", "Unexpected subclass of FileSystemInfo " + item.GetType ());
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
439
2
Gpt3D_Clone439_2.cs 1 16
Gpt3D_Clone439_2.cs 17 34
----------------------------------------

public static void Rename (this FileSystemInfo item, string newName) {
    if (item == null) {
        throw new ArgumentNullException ("item");
    }
    FileInfo fileInfo = item as FileInfo;
    if (fileInfo != null) {
        fileInfo.Rename (newName);
        return;
    }
    DirectoryInfo directoryInfo = item as DirectoryInfo;
    if (directoryInfo != null) {
        directoryInfo.Rename (newName);
        return;
    }
    throw new ArgumentException ("Item", "Unexpected subclass of FileSystemInfo " + item.GetType ());
}
----------------------------------------

	public static void Rename (this FileSystemInfo item, string newName) {
    if (item == null) {
        throw new ArgumentNullException ("item");
    }
    bool isFileInfo = item is FileInfo;
    bool isDirectoryInfo = item is DirectoryInfo;
    if (isFileInfo) {
        FileInfo fileInfo = (FileInfo) item;
        fileInfo.Rename (newName);        
    } else if (isDirectoryInfo) {
        DirectoryInfo directoryInfo = (DirectoryInfo)item;
        directoryInfo.Rename(newName);
    } else {
        throw new ArgumentException ("Item", "Unexpected subclass of FileSystemInfo " + item.GetType ());
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
439
3
Gpt3D_Clone439_3.cs 1 16
Gpt3D_Clone439_3.cs 17 37
----------------------------------------

public static void Rename (this FileSystemInfo item, string newName) {
    if (item == null) {
        throw new ArgumentNullException ("item");
    }
    FileInfo fileInfo = item as FileInfo;
    if (fileInfo != null) {
        fileInfo.Rename (newName);
        return;
    }
    DirectoryInfo directoryInfo = item as DirectoryInfo;
    if (directoryInfo != null) {
        directoryInfo.Rename (newName);
        return;
    }
    throw new ArgumentException ("Item", "Unexpected subclass of FileSystemInfo " + item.GetType ());
}
----------------------------------------

	public static void Rename (this FileSystemInfo item, string newName) {
    if (item == null) {
        throw new ArgumentNullException ("item");
    }
    if (item is FileInfo) 
    {
        FileInfo fileInfo = (FileInfo) item;
        fileInfo.Rename (newName);        
    }
    else if (item is DirectoryInfo)
    {
        DirectoryInfo directoryInfo = (DirectoryInfo)item;
        directoryInfo.Rename(newName);
    }
    else
    {
        throw new ArgumentException ("Item", "Unexpected subclass of FileSystemInfo " + item.GetType ());
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
439
4
Gpt3D_Clone439_4.cs 1 16
Gpt3D_Clone439_4.cs 17 37
----------------------------------------

public static void Rename (this FileSystemInfo item, string newName) {
    if (item == null) {
        throw new ArgumentNullException ("item");
    }
    FileInfo fileInfo = item as FileInfo;
    if (fileInfo != null) {
        fileInfo.Rename (newName);
        return;
    }
    DirectoryInfo directoryInfo = item as DirectoryInfo;
    if (directoryInfo != null) {
        directoryInfo.Rename (newName);
        return;
    }
    throw new ArgumentException ("Item", "Unexpected subclass of FileSystemInfo " + item.GetType ());
}
----------------------------------------

	public static void Rename(this FileSystemInfo item, string newName)
{
	if (item == null)
	{
		throw new ArgumentNullException("item");
	}
	if (item is FileInfo)
	{
		((FileInfo)item).Rename(newName);
		return;
	}
	if (item is DirectoryInfo)
	{
		((DirectoryInfo)item).Rename(newName);
		return;
	}
	throw new ArgumentException("Item", "Unexpected subclass of FileSystemInfo " + item.GetType());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
439
5
Gpt3D_Clone439_5.cs 1 16
Gpt3D_Clone439_5.cs 17 39
----------------------------------------

public static void Rename (this FileSystemInfo item, string newName) {
    if (item == null) {
        throw new ArgumentNullException ("item");
    }
    FileInfo fileInfo = item as FileInfo;
    if (fileInfo != null) {
        fileInfo.Rename (newName);
        return;
    }
    DirectoryInfo directoryInfo = item as DirectoryInfo;
    if (directoryInfo != null) {
        directoryInfo.Rename (newName);
        return;
    }
    throw new ArgumentException ("Item", "Unexpected subclass of FileSystemInfo " + item.GetType ());
}
----------------------------------------

	public static void Rename(this FileSystemInfo item, string newName)
{
	if (item == null)
	{
		throw new ArgumentNullException("item");
	}
	if (item.GetType() == typeof(FileInfo))
	{
		File.Move(item.FullName, Path.Combine(Path.GetDirectoryName(item.FullName), newName));
		return;
	}
	if (item.GetType() == typeof(DirectoryInfo))
	{
		Directory.Move(item.FullName, Path.Combine(Path.GetDirectoryName(item.FullName), newName));
		return;
	}
	throw new ArgumentException("Item", "Unexpected subclass of FileSystemInfo " + item.GetType());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
439
6
Gpt3D_Clone439_6.cs 1 16
Gpt3D_Clone439_6.cs 17 40
----------------------------------------

public static void Rename (this FileSystemInfo item, string newName) {
    if (item == null) {
        throw new ArgumentNullException ("item");
    }
    FileInfo fileInfo = item as FileInfo;
    if (fileInfo != null) {
        fileInfo.Rename (newName);
        return;
    }
    DirectoryInfo directoryInfo = item as DirectoryInfo;
    if (directoryInfo != null) {
        directoryInfo.Rename (newName);
        return;
    }
    throw new ArgumentException ("Item", "Unexpected subclass of FileSystemInfo " + item.GetType ());
}
----------------------------------------

	public static void Rename(this FileSystemInfo item, string newName)
{
	if (item == null)
	{
		throw new ArgumentNullException("item");
	}
	try
	{
		if (item is FileInfo) 
		{
			((FileInfo)item).Rename(newName);			
		}
		else
		{
			((DirectoryInfo)item).Rename(newName);
		}
	}
	catch (InvalidCastException)
	{
		throw new ArgumentException("Item", "Unexpected subclass of FileSystemInfo " + item.GetType());
	}
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
439
7
Gpt3D_Clone439_7.cs 1 16
Gpt3D_Clone439_7.cs 17 29
----------------------------------------

public static void Rename (this FileSystemInfo item, string newName) {
    if (item == null) {
        throw new ArgumentNullException ("item");
    }
    FileInfo fileInfo = item as FileInfo;
    if (fileInfo != null) {
        fileInfo.Rename (newName);
        return;
    }
    DirectoryInfo directoryInfo = item as DirectoryInfo;
    if (directoryInfo != null) {
        directoryInfo.Rename (newName);
        return;
    }
    throw new ArgumentException ("Item", "Unexpected subclass of FileSystemInfo " + item.GetType ());
}
----------------------------------------

	public static void Rename(this DirectoryInfo directoryInfo, string newName)
{
	if (directoryInfo == null)
	{
		throw new ArgumentNullException("directoryInfo");
	}
	string fullPath = directoryInfo.FullName;
	string directory = Path.GetDirectoryName(fullPath);
	string newFullPath = Path.Combine(directory, newName);
	Directory.Move(fullPath, newFullPath);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
439
8
Gpt3D_Clone439_8.cs 1 16
Gpt3D_Clone439_8.cs 17 26
----------------------------------------

public static void Rename (this FileSystemInfo item, string newName) {
    if (item == null) {
        throw new ArgumentNullException ("item");
    }
    FileInfo fileInfo = item as FileInfo;
    if (fileInfo != null) {
        fileInfo.Rename (newName);
        return;
    }
    DirectoryInfo directoryInfo = item as DirectoryInfo;
    if (directoryInfo != null) {
        directoryInfo.Rename (newName);
        return;
    }
    throw new ArgumentException ("Item", "Unexpected subclass of FileSystemInfo " + item.GetType ());
}
----------------------------------------

	public static void Rename(this FileInfo fileInfo, string newName)
{
	if (fileInfo == null)
	{
		throw new ArgumentNullException("fileInfo");
	}
	File.Move(fileInfo.FullName, Path.Combine(fileInfo.DirectoryName, newName));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
43
0
Gpt3D_Clone43_0.cs 1 11
Gpt3D_Clone43_0.cs 12 26
----------------------------------------

public T Dequeue () {
    lock (q)
    {
        for (;;) {
            if (q.Count > 0) {
                return q.Dequeue ();
            }
            System.Threading.Monitor.Wait (q);
        }
    }
}
----------------------------------------

 public T Dequeue() 
{
   lock (q)
   {
       while (q.Count == 0)
       {
          Monitor.Wait(q);
       }
       var retVal = q.Dequeue();
       Monitor.PulseAll(q);
       return retVal;
   }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
43
2
Gpt3D_Clone43_2.cs 1 11
Gpt3D_Clone43_2.cs 12 26
----------------------------------------

public T Dequeue () {
    lock (q)
    {
        for (;;) {
            if (q.Count > 0) {
                return q.Dequeue ();
            }
            System.Threading.Monitor.Wait (q);
        }
    }
}
----------------------------------------

 public T Dequeue() 
{
   lock (q)
   {
       while (!q.Any())
       {
           Monitor.Wait(q);
       }
       var result = q.Dequeue();
       return result;
   }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
440
2
Gpt3D_Clone440_2.cs 1 26
Gpt3D_Clone440_2.cs 27 54
----------------------------------------

private void DefineGeometry () {
    var points = PointCollection;
    _figure.Segments.Clear ();
    if (points.Any ()) {
        _figure.StartPoint = points [0];
        if (points.Count > 1) {
            for (int i = 1; i < (points.Count - 1); i ++) {
                var v1 = (Point) points [i] - points [i - 1];
                var v2 = (Point) points [i + 1] - points [i];
                var radius = (points [i].Radius ?? Radius) ?? 0;
                radius = Math.Min (Math.Min (v1.Length, v2.Length) / 2, radius);
                double len = v1.Length;
                v1.Normalize ();
                v1 *= (len - radius);
                var line = new LineSegment ((Point) points [i - 1] + v1, true);
                _figure.Segments.Add (line);
                v2.Normalize ();
                v2 *= radius;
                var direction = (Vector.AngleBetween (v1, v2) > 0) ? SweepDirection.Clockwise : SweepDirection.Counterclockwise;
                var arc = new ArcSegment ((Point) points [i] + v2, new Size (radius, radius), 0, false, direction, true);
                _figure.Segments.Add (arc);
            }
            _figure.Segments.Add (new LineSegment (points [points.Count - 1], true));
        }
    }
}
----------------------------------------

  private void DefineGeometry() {
    var points = PointCollection;
    _figure.Segments.Clear();
    if (points.Any()) {
        _figure.StartPoint = points[0];
        if (points.Count > 1) {
            for (int i = 1; i < (points.Count - 1); i++) {
                var prevPoint = (Point)points[i - 1];
                var v1 = (Point)points[i] - prevPoint;
                var nextPoint = (Point)points[i + 1];
                var v2 = nextPoint - points[i];
                var radius = (points[i].Radius ?? Radius) ?? 0;
                radius = Math.Min(Math.Min(v1.Length, v2.Length) / 2, radius);
                double len = v1.Length;
                v1 = v1.Normalize() * (len - radius);
                var lineSegmentStart = prevPoint + v1;
                AddLineSegment(lineSegmentStart, prevPoint);
                v2 = v2.Normalize() * radius;
                lineSegmentStart = points[i] + v2;
                var direction = (Vector.AngleBetween(v1, v2) > 0) ? SweepDirection.Clockwise : SweepDirection.Counterclockwise;
                AddCircularSegment(lineSegmentStart, radius, direction);
            }
            AddLineSegment(points[points.Count - 1], points[points.Count - 1]);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
440
3
Gpt3D_Clone440_3.cs 1 26
Gpt3D_Clone440_3.cs 27 58
----------------------------------------

private void DefineGeometry () {
    var points = PointCollection;
    _figure.Segments.Clear ();
    if (points.Any ()) {
        _figure.StartPoint = points [0];
        if (points.Count > 1) {
            for (int i = 1; i < (points.Count - 1); i ++) {
                var v1 = (Point) points [i] - points [i - 1];
                var v2 = (Point) points [i + 1] - points [i];
                var radius = (points [i].Radius ?? Radius) ?? 0;
                radius = Math.Min (Math.Min (v1.Length, v2.Length) / 2, radius);
                double len = v1.Length;
                v1.Normalize ();
                v1 *= (len - radius);
                var line = new LineSegment ((Point) points [i - 1] + v1, true);
                _figure.Segments.Add (line);
                v2.Normalize ();
                v2 *= radius;
                var direction = (Vector.AngleBetween (v1, v2) > 0) ? SweepDirection.Clockwise : SweepDirection.Counterclockwise;
                var arc = new ArcSegment ((Point) points [i] + v2, new Size (radius, radius), 0, false, direction, true);
                _figure.Segments.Add (arc);
            }
            _figure.Segments.Add (new LineSegment (points [points.Count - 1], true));
        }
    }
}
----------------------------------------

  private void DefineGeometry() {
    var points = PointCollection;
    _figure.Segments.Clear();
    if (points.Any()) {
        _figure.StartPoint = points[0];
        if (points.Count > 1) {
            for (int i = 1; i < (points.Count - 1); i++) {
                var prevPoint = (Point)points[i - 1];
                var currentPoint = (Point)points[i];
                var nextPoint = (Point)points[i + 1];
                var v1 = currentPoint - prevPoint;
                var v2 = nextPoint - currentPoint;
                // Calculate the radius based on the minimum distance between neighbouring points.
                var radius = (points[i].Radius ?? Radius) ?? 0;
                radius = Math.Min(Math.Min(v1.Length, v2.Length) / 2, radius);
                // Create a vector with the correct length.
                var v1Normalized = v1.Normalize() * (v1.Length - radius);
                // Create line segment from previous point to current point.
                AddLineSegment(prevPoint + v1Normalized, prevPoint);
                // Create a vector with the correct length.
                var v2Normalized = v2.Normalize() * radius;
                // Set sweep direction.
                var direction = (Vector.AngleBetween(v1, v2) > 0) ? SweepDirection.Clockwise : SweepDirection.Counterclockwise;
                // Create arc segment from current point to next point.
                AddCircularSegment(currentPoint + v2Normalized, radius, direction);
            }
            AddLineSegment(points[points.Count - 1], points[points.Count - 1]);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
441
0
Gpt3D_Clone441_0.cs 1 11
Gpt3D_Clone441_0.cs 12 30
----------------------------------------

public static String dt2JSON (DataTable dt) {
    var rows = new List < Object > ();
    foreach (DataRow row in dt.Rows) {
        var rowData = new Dictionary < string, object > ();
        foreach (DataColumn col in dt.Columns)
            rowData [col.ColumnName] = row [col];
        rows.Add (rowData);
    }
    var js = new JavaScriptSerializer ();
    return js.Serialize (new {rows = rows});
}
----------------------------------------

  public static string dt2JSON(DataTable dt){
        Dictionary<string, Object> result = new Dictionary<string, Object>();
        List<Dictionary<string, object>> rows = new List<Dictionary<string, object>>();
        result.Add("rows", rows);
        Dictionary<string, object> row;
 
        foreach (DataRow dr in dt.Rows)
        {
            row = new Dictionary<string, object>();
            foreach (DataColumn col in dt.Columns)
            {
                row.Add(col.ColumnName, dr[col]);
            }
            rows.Add(row);
        }
        return JsonConvert.SerializeObject(result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
441
1
Gpt3D_Clone441_1.cs 1 11
Gpt3D_Clone441_1.cs 12 29
----------------------------------------

public static String dt2JSON (DataTable dt) {
    var rows = new List < Object > ();
    foreach (DataRow row in dt.Rows) {
        var rowData = new Dictionary < string, object > ();
        foreach (DataColumn col in dt.Columns)
            rowData [col.ColumnName] = row [col];
        rows.Add (rowData);
    }
    var js = new JavaScriptSerializer ();
    return js.Serialize (new {rows = rows});
}
----------------------------------------

  public static String dt2JSON (DataTable dt){
        JavaScriptSerializer serializer = new JavaScriptSerializer();
        List<Dictionary<string, object>> rows = new List<Dictionary<string, object>>();
        Dictionary<string, object> row;
        foreach (DataRow dr in dt.Rows)
        {
            row = new Dictionary<string, object>();
            foreach (DataColumn col in dt.Columns)
            {
                row.Add(col.ColumnName, dr[col]);
            }
            rows.Add(row);
        }
        return serializer.Serialize(rows);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
441
2
Gpt3D_Clone441_2.cs 1 11
Gpt3D_Clone441_2.cs 12 25
----------------------------------------

public static String dt2JSON (DataTable dt) {
    var rows = new List < Object > ();
    foreach (DataRow row in dt.Rows) {
        var rowData = new Dictionary < string, object > ();
        foreach (DataColumn col in dt.Columns)
            rowData [col.ColumnName] = row [col];
        rows.Add (rowData);
    }
    var js = new JavaScriptSerializer ();
    return js.Serialize (new {rows = rows});
}
----------------------------------------

  public static String dt2JSON (DataTable dt) {
        var rowData = new Object[dt.Rows.Count];
        int i = 0;
        foreach (DataRow row in dt.Rows)  {
            var rowValues = new Dictionary<string, object>();
            foreach (DataColumn col in dt.Columns)
                rowValues.Add(col.ColumnName, row[col]);
            rowData[i] = rowValues;
            i++;
        }
        return JsonConvert.SerializeObject(rowData);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
441
4
Gpt3D_Clone441_4.cs 1 11
Gpt3D_Clone441_4.cs 12 28
----------------------------------------

public static String dt2JSON (DataTable dt) {
    var rows = new List < Object > ();
    foreach (DataRow row in dt.Rows) {
        var rowData = new Dictionary < string, object > ();
        foreach (DataColumn col in dt.Columns)
            rowData [col.ColumnName] = row [col];
        rows.Add (rowData);
    }
    var js = new JavaScriptSerializer ();
    return js.Serialize (new {rows = rows});
}
----------------------------------------

  public static string dt2JSON(DataTable dt) {
        List<Dictionary<String,Object>> tableRows = new List<Dictionary<String,Object>>();
        Dictionary<String,Object> row;
 
        foreach(DataRow dr in dt.Rows)
        {
            row = new Dictionary<String,Object>();
            foreach(DataColumn col in dt.Columns)
            {
                row.Add(col.ColumnName, dr[col]);
            }
            tableRows.Add(row);
        }
        return JsonConvert.SerializeObject(tableRows);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
441
8
Gpt3D_Clone441_8.cs 1 11
Gpt3D_Clone441_8.cs 12 18
----------------------------------------

public static String dt2JSON (DataTable dt) {
    var rows = new List < Object > ();
    foreach (DataRow row in dt.Rows) {
        var rowData = new Dictionary < string, object > ();
        foreach (DataColumn col in dt.Columns)
            rowData [col.ColumnName] = row [col];
        rows.Add (rowData);
    }
    var js = new JavaScriptSerializer ();
    return js.Serialize (new {rows = rows});
}
----------------------------------------

  public static String dt2JSON (DataTable dt) {
        var jsonList = JArray.FromObject(dt.Rows.Select(x => x).ToList());
        var jsonString = jsonList.ToString();
        return jsonString;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
443
0
Gpt3D_Clone443_0.cs 1 10
Gpt3D_Clone443_0.cs 11 26
----------------------------------------

private static void Main (string [] args) {
    Thread t = new Thread (ReaderFunc);
    t.Start ();
    int index = 0;
    while (! StopWriting.WaitOne (Timeout.Infinite)) {
        ++ index;
        Console.WriteLine (index.ToString ());
    }
    t.Join ();
}
----------------------------------------

 private static void Main (string [] args) {
    // Using Monitor.Lock
    object o = new object ();
    Thread t = new Thread (ReaderFunc);
    t.Start (o);
    int index = 0;
    lock (o) {
        while (! Monitor.Wait (o, Timeout.Infinite)) {
            ++ index;
            Console.WriteLine (index.ToString ());
        }
    }
    t.Join ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
444
0
Gpt3D_Clone444_0.cs 1 11
Gpt3D_Clone444_0.cs 12 30
----------------------------------------

static void Main () {
    Bitmap mask = new Bitmap (@"mask.bmp");
    Bitmap bmp = new Bitmap (@"test.jpg");
    int width = bmp.Width;
    int height = bmp.Height;
    for (int x = 0; x < width; x ++)
        for (int y = 0; y < height; y ++)
            if (mask.GetPixel (x, y).R < 250)
                bmp.SetPixel (x, y, mask.GetPixel (x, y));
    bmp.Save (@"test3.jpg");
}
----------------------------------------

 static void Main(){
    Bitmap mask = new Bitmap(@"mask.bmp");
    Bitmap bmp = new Bitmap(@"test.jpg");
    int width = bmp.Width;
    int height = bmp.Height;
    for (int x = 0; x < width; x++){
        for (int y = 0; y < height; y++){
            Color currentPixel = mask.GetPixel(x,y);
            if (currentPixel.R < 250){
                Color newColor = Color.FromArgb(currentPixel.A,currentPixel.R, currentPixel.G, currentPixel.B);
                bmp.SetPixel(x,y,newColor);
            }
        }
    }
    bmp.Save(@"test3.jpg");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
444
1
Gpt3D_Clone444_1.cs 1 11
Gpt3D_Clone444_1.cs 12 30
----------------------------------------

static void Main () {
    Bitmap mask = new Bitmap (@"mask.bmp");
    Bitmap bmp = new Bitmap (@"test.jpg");
    int width = bmp.Width;
    int height = bmp.Height;
    for (int x = 0; x < width; x ++)
        for (int y = 0; y < height; y ++)
            if (mask.GetPixel (x, y).R < 250)
                bmp.SetPixel (x, y, mask.GetPixel (x, y));
    bmp.Save (@"test3.jpg");
}
----------------------------------------

 static void Main(){
    Bitmap mask = new Bitmap(@"mask.bmp");
    Bitmap bmp = new Bitmap(@"test.jpg");
    int width = bmp.Width;
    int height = bmp.Height;
    for (int x = 0; x < width; x++){
        for (int y = 0; y < height; y++){
            Color currentPixel = mask.GetPixel(x, y);
            if (currentPixel.R < 250){
                Color newPixel = Color.FromArgb(currentPixel.A, currentPixel.R, currentPixel.G, currentPixel.B);
                bmp.SetPixel(x, y, newPixel);
            }
        }
    }
    bmp.Save(@"test3.jpg");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
444
3
Gpt3D_Clone444_3.cs 1 11
Gpt3D_Clone444_3.cs 12 31
----------------------------------------

static void Main () {
    Bitmap mask = new Bitmap (@"mask.bmp");
    Bitmap bmp = new Bitmap (@"test.jpg");
    int width = bmp.Width;
    int height = bmp.Height;
    for (int x = 0; x < width; x ++)
        for (int y = 0; y < height; y ++)
            if (mask.GetPixel (x, y).R < 250)
                bmp.SetPixel (x, y, mask.GetPixel (x, y));
    bmp.Save (@"test3.jpg");
}
----------------------------------------

 static void Main(){
    Bitmap mask = new Bitmap(@"mask.bmp");
    Bitmap bmp = new Bitmap(@"test.jpg");
    int width = bmp.Width;
    int height = bmp.Height;
    for (int x = 0; x < width; x++){
        for (int y = 0; y < height; y++){
            Color currentPixel = mask.GetPixel(x,y);
            if (currentPixel.R < 250)
            {
                Color updatedPixel = mask.GetPixel(x,y);
                bmp.SetPixel(x,y,updatedPixel);
            }
        }
    }
    bmp.Save(@"test3.jpg");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
444
4
Gpt3D_Clone444_4.cs 1 11
Gpt3D_Clone444_4.cs 12 32
----------------------------------------

static void Main () {
    Bitmap mask = new Bitmap (@"mask.bmp");
    Bitmap bmp = new Bitmap (@"test.jpg");
    int width = bmp.Width;
    int height = bmp.Height;
    for (int x = 0; x < width; x ++)
        for (int y = 0; y < height; y ++)
            if (mask.GetPixel (x, y).R < 250)
                bmp.SetPixel (x, y, mask.GetPixel (x, y));
    bmp.Save (@"test3.jpg");
}
----------------------------------------

 static void Main(){
    Bitmap mask = new Bitmap(@"mask.bmp");
    Bitmap bmp = new Bitmap(@"test.jpg");
    int width = bmp.Width;
    int height = bmp.Height;
    for (int x = 0; x < width; x++){
        for (int y = 0; y < height; y++){
            Color currentPixel = mask.GetPixel(x,y);
            if (currentPixel.R < 250)
            {
                Color newPixel = mask.GetPixel(x,y);
                bmp.SetPixel(x,y,newPixel);
            }
        }
    }
    bmp.Save(@"test3.jpg");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
446
0
Gpt3D_Clone446_0.cs 1 12
Gpt3D_Clone446_0.cs 13 22
----------------------------------------

public static bool IsSchoolYearFormat (string format, int minYear, int maxYear) {
    string [] parts = format.Trim ().Split (new [] {'-'}, StringSplitOptions.RemoveEmptyEntries);
    if (parts.Length == 2) {
        int fromYear;
        int toYear;
        if (int.TryParse (parts [0], out fromYear) && int.TryParse (parts [1], out toYear)) {
            if (fromYear >= minYear && toYear <= maxYear && fromYear + 1 == toYear)
                return true;
        }
    }
    return false;
}
----------------------------------------

 public static bool IsSchoolYearFormat (string format, int minYear, int maxYear) {
    if (string.IsNullOrWhiteSpace (format)) return false;
    string[] parts = format.Split ('-', StringSplitOptions.RemoveEmptyEntries);
    if (parts.Length != 2) return false;
    int startYear, endYear;
    if (!int.TryParse (parts[0], out startYear) || !int.TryParse (parts[1], out endYear)) return false;
    return startYear >= minYear && endYear <= maxYear && (endYear - startYear) == 1;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
446
1
Gpt3D_Clone446_1.cs 1 12
Gpt3D_Clone446_1.cs 13 22
----------------------------------------

public static bool IsSchoolYearFormat (string format, int minYear, int maxYear) {
    string [] parts = format.Trim ().Split (new [] {'-'}, StringSplitOptions.RemoveEmptyEntries);
    if (parts.Length == 2) {
        int fromYear;
        int toYear;
        if (int.TryParse (parts [0], out fromYear) && int.TryParse (parts [1], out toYear)) {
            if (fromYear >= minYear && toYear <= maxYear && fromYear + 1 == toYear)
                return true;
        }
    }
    return false;
}
----------------------------------------

 public static bool IsSchoolYearFormat (string format, int minYear, int maxYear) {
    if (string.IsNullOrWhiteSpace (format)) return false;
    string[] parts = format.Split(new [] {'-','_','.'}, 2, StringSplitOptions.RemoveEmptyEntries);
    if (parts.Length != 2) return false;
    int startYear, endYear;
    if (!int.TryParse (parts[0], out startYear) || !int.TryParse (parts[1], out endYear)) return false;
    return startYear >= minYear && endYear <= maxYear && (endYear - startYear) == 1;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
446
2
Gpt3D_Clone446_2.cs 1 12
Gpt3D_Clone446_2.cs 13 22
----------------------------------------

public static bool IsSchoolYearFormat (string format, int minYear, int maxYear) {
    string [] parts = format.Trim ().Split (new [] {'-'}, StringSplitOptions.RemoveEmptyEntries);
    if (parts.Length == 2) {
        int fromYear;
        int toYear;
        if (int.TryParse (parts [0], out fromYear) && int.TryParse (parts [1], out toYear)) {
            if (fromYear >= minYear && toYear <= maxYear && fromYear + 1 == toYear)
                return true;
        }
    }
    return false;
}
----------------------------------------

 public static bool IsSchoolYearFormat (string format, int minYear, int maxYear) {
    if (string.IsNullOrWhiteSpace (format)) return false;
    string[] parts = format.Split("- ");
    if (parts.Length != 2) return false;
    int startYear, endYear;
    if (!int.TryParse (parts[0], out startYear) || !int.TryParse (parts[1], out endYear)) return false;
    return startYear >= minYear && endYear <= maxYear && (endYear - startYear) == 1;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
446
3
Gpt3D_Clone446_3.cs 1 12
Gpt3D_Clone446_3.cs 13 22
----------------------------------------

public static bool IsSchoolYearFormat (string format, int minYear, int maxYear) {
    string [] parts = format.Trim ().Split (new [] {'-'}, StringSplitOptions.RemoveEmptyEntries);
    if (parts.Length == 2) {
        int fromYear;
        int toYear;
        if (int.TryParse (parts [0], out fromYear) && int.TryParse (parts [1], out toYear)) {
            if (fromYear >= minYear && toYear <= maxYear && fromYear + 1 == toYear)
                return true;
        }
    }
    return false;
}
----------------------------------------

 public static bool IsSchoolYearFormat (string format, int minYear, int maxYear) {
    if (string.IsNullOrWhiteSpace (format)) return false;
    string[] parts = format.Split('-');
    if (parts.Length != 2) return false;
    int startYear, endYear;
    if (!int.TryParse (parts[0], out startYear) || !int.TryParse (parts[1], out endYear)) return false;
    return startYear >= minYear && endYear <= maxYear && (endYear - startYear) == 1;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
446
4
Gpt3D_Clone446_4.cs 1 12
Gpt3D_Clone446_4.cs 13 22
----------------------------------------

public static bool IsSchoolYearFormat (string format, int minYear, int maxYear) {
    string [] parts = format.Trim ().Split (new [] {'-'}, StringSplitOptions.RemoveEmptyEntries);
    if (parts.Length == 2) {
        int fromYear;
        int toYear;
        if (int.TryParse (parts [0], out fromYear) && int.TryParse (parts [1], out toYear)) {
            if (fromYear >= minYear && toYear <= maxYear && fromYear + 1 == toYear)
                return true;
        }
    }
    return false;
}
----------------------------------------

 public static bool IsSchoolYearFormat (string format, int minYear, int maxYear) {
    if (string.IsNullOrWhiteSpace (format)) return false;
    string[] parts = format.Split('&');
    if (parts.Length != 2) return false;
    int startYear, endYear;
    if (!int.TryParse (parts[0], out startYear) || !int.TryParse (parts[1], out endYear)) return false;
    return startYear >= minYear && endYear <= maxYear && (endYear - startYear) == 1;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
446
5
Gpt3D_Clone446_5.cs 1 12
Gpt3D_Clone446_5.cs 13 22
----------------------------------------

public static bool IsSchoolYearFormat (string format, int minYear, int maxYear) {
    string [] parts = format.Trim ().Split (new [] {'-'}, StringSplitOptions.RemoveEmptyEntries);
    if (parts.Length == 2) {
        int fromYear;
        int toYear;
        if (int.TryParse (parts [0], out fromYear) && int.TryParse (parts [1], out toYear)) {
            if (fromYear >= minYear && toYear <= maxYear && fromYear + 1 == toYear)
                return true;
        }
    }
    return false;
}
----------------------------------------

 public static bool IsSchoolYearFormat (string format, int minYear, int maxYear) {
    if (string.IsNullOrWhiteSpace (format) || !format.Contains("-")) return false;
    string[] parts = format.Split('-');
    if (parts.Length != 2) return false;
    int startYear, endYear;
    if (!int.TryParse (parts[0], out startYear) || !int.TryParse (parts[1], out endYear)) return false;
    return startYear >= minYear && endYear <= maxYear && (endYear - startYear) == 1;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
446
6
Gpt3D_Clone446_6.cs 1 12
Gpt3D_Clone446_6.cs 13 22
----------------------------------------

public static bool IsSchoolYearFormat (string format, int minYear, int maxYear) {
    string [] parts = format.Trim ().Split (new [] {'-'}, StringSplitOptions.RemoveEmptyEntries);
    if (parts.Length == 2) {
        int fromYear;
        int toYear;
        if (int.TryParse (parts [0], out fromYear) && int.TryParse (parts [1], out toYear)) {
            if (fromYear >= minYear && toYear <= maxYear && fromYear + 1 == toYear)
                return true;
        }
    }
    return false;
}
----------------------------------------

 public static bool IsSchoolYearFormat (string format, int minYear, int maxYear) {
    if (string.IsNullOrWhiteSpace (format)) return false;
    string[] parts = format.Split (new char[] {'-'}, StringSplitOptions.None);
    if (parts.Length != 2) return false;
    int startYear, endYear;
    if (!int.TryParse (parts[0], out startYear) || !int.TryParse (parts[1], out endYear)) return false;
    return startYear >= minYear && endYear <= maxYear && (endYear - startYear) == 1;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
446
7
Gpt3D_Clone446_7.cs 1 12
Gpt3D_Clone446_7.cs 13 22
----------------------------------------

public static bool IsSchoolYearFormat (string format, int minYear, int maxYear) {
    string [] parts = format.Trim ().Split (new [] {'-'}, StringSplitOptions.RemoveEmptyEntries);
    if (parts.Length == 2) {
        int fromYear;
        int toYear;
        if (int.TryParse (parts [0], out fromYear) && int.TryParse (parts [1], out toYear)) {
            if (fromYear >= minYear && toYear <= maxYear && fromYear + 1 == toYear)
                return true;
        }
    }
    return false;
}
----------------------------------------

 public static bool IsSchoolYearFormat (string format, int minYear, int maxYear) {
    if (string.IsNullOrWhiteSpace (format)) return false;
    string[] parts = format.Split(new [] {'-','\t','\n'},StringSplitOptions.RemoveEmptyEntries);
    if (parts.Length != 2) return false;
    int startYear, endYear;
    if (!int.TryParse (parts[0], out startYear) || !int.TryParse (parts[1], out endYear)) return false;
    return startYear >= minYear && endYear <= maxYear && (endYear - startYear) == 1;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
446
8
Gpt3D_Clone446_8.cs 1 12
Gpt3D_Clone446_8.cs 13 22
----------------------------------------

public static bool IsSchoolYearFormat (string format, int minYear, int maxYear) {
    string [] parts = format.Trim ().Split (new [] {'-'}, StringSplitOptions.RemoveEmptyEntries);
    if (parts.Length == 2) {
        int fromYear;
        int toYear;
        if (int.TryParse (parts [0], out fromYear) && int.TryParse (parts [1], out toYear)) {
            if (fromYear >= minYear && toYear <= maxYear && fromYear + 1 == toYear)
                return true;
        }
    }
    return false;
}
----------------------------------------

 public static bool IsSchoolYearFormat (string format, int minYear, int maxYear) {
    if (string.IsNullOrWhiteSpace (format)) return false;
    string[] parts = format.Split(new [] {'-', ',', ';'}, 2, StringSplitOptions.RemoveEmptyEntries);
    if (parts.Length != 2) return false;
    int startYear, endYear;
    if (!int.TryParse (parts[0], out startYear) || !int.TryParse (parts[1], out endYear)) return false;
    return startYear >= minYear && endYear <= maxYear && (endYear - startYear) == 1;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
446
9
Gpt3D_Clone446_9.cs 1 12
Gpt3D_Clone446_9.cs 13 22
----------------------------------------

public static bool IsSchoolYearFormat (string format, int minYear, int maxYear) {
    string [] parts = format.Trim ().Split (new [] {'-'}, StringSplitOptions.RemoveEmptyEntries);
    if (parts.Length == 2) {
        int fromYear;
        int toYear;
        if (int.TryParse (parts [0], out fromYear) && int.TryParse (parts [1], out toYear)) {
            if (fromYear >= minYear && toYear <= maxYear && fromYear + 1 == toYear)
                return true;
        }
    }
    return false;
}
----------------------------------------

 public static bool IsSchoolYearFormat (string format, int minYear, int maxYear) {
    if (string.IsNullOrWhiteSpace (format)) return false;
    string[] parts = format.Split('-', 2, StringSplitOptions.RemoveEmptyEntries);
    if (parts.Length != 2) return false;
    int startYear, endYear;
    if (!int.TryParse (parts[0], out startYear) || !int.TryParse (parts[1], out endYear)) return false;
    return startYear >= minYear && endYear <= maxYear && (endYear - startYear) == 1;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
449
0
Gpt3D_Clone449_0.cs 1 42
Gpt3D_Clone449_0.cs 43 101
----------------------------------------

public static String Rainbow (Int32 numOfSteps, Int32 step) {
    var r = 0.0;
    var g = 0.0;
    var b = 0.0;
    var h = (Double) step / numOfSteps;
    var i = (Int32) (h * 6);
    var f = h * 6.0 - i;
    var q = 1 - f;
    switch (i % 6) {
        case 0 :
            r = 1;
            g = f;
            b = 0;
            break;
        case 1 :
            r = q;
            g = 1;
            b = 0;
            break;
        case 2 :
            r = 0;
            g = 1;
            b = f;
            break;
        case 3 :
            r = 0;
            g = q;
            b = 1;
            break;
        case 4 :
            r = f;
            g = 0;
            b = 1;
            break;
        case 5 :
            r = 1;
            g = 0;
            b = q;
            break;
    }
    return "#" + ((Int32) (r * 255)).ToString ("X2") + ((Int32) (g * 255)).ToString ("X2") + ((Int32) (b * 255)).ToString ("X2");
}
----------------------------------------

 public static string Rainbow(int numOfSteps, int step)
    {
                double red = 0.0;
                double green = 0.0;
                double blue = 0.0;
                double hue = (double)step / (double)numOfSteps;
                int index = (int)(hue * 6);
                double fraction = hue * 6.0 - index;
                double value = 1.0 - fraction;
                switch (index % 6)
                {
                    case 0:
                        {
                            red = 1.0;
                            green = fraction;
                            blue = 0.0;
                            break;
                        }
                    case 1:
                        {
                            red = value;
                            green = 1.0;
                            blue = 0.0;
                            break;
                        }
                    case 2:
                        {
                            red = 0.0;
                            green = 1.0;
                            blue = fraction;
                            break;
                        }
                    case 3:
                        {
                            red = 0.0;
                            green = value;
                            blue = 1.0;
                            break;
                        }
                    case 4:
                        {
                            red = fraction;
                            green = 0.0;
                            blue = 1.0;
                            break;
                        }
                    case 5:
                        {
                            red = 1.0;
                            green = 0.0;
                            blue = value;
                            break;
                        }
                }
                return "#" + ((int)(red * 255)).ToString("X2") + ((int)(green * 255)).ToString("X2") + ((int)(blue * 255)).ToString("X2");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
449
1
Gpt3D_Clone449_1.cs 1 42
Gpt3D_Clone449_1.cs 43 101
----------------------------------------

public static String Rainbow (Int32 numOfSteps, Int32 step) {
    var r = 0.0;
    var g = 0.0;
    var b = 0.0;
    var h = (Double) step / numOfSteps;
    var i = (Int32) (h * 6);
    var f = h * 6.0 - i;
    var q = 1 - f;
    switch (i % 6) {
        case 0 :
            r = 1;
            g = f;
            b = 0;
            break;
        case 1 :
            r = q;
            g = 1;
            b = 0;
            break;
        case 2 :
            r = 0;
            g = 1;
            b = f;
            break;
        case 3 :
            r = 0;
            g = q;
            b = 1;
            break;
        case 4 :
            r = f;
            g = 0;
            b = 1;
            break;
        case 5 :
            r = 1;
            g = 0;
            b = q;
            break;
    }
    return "#" + ((Int32) (r * 255)).ToString ("X2") + ((Int32) (g * 255)).ToString ("X2") + ((Int32) (b * 255)).ToString ("X2");
}
----------------------------------------

 public static string Rainbow(int numOfSteps, int step)
    {
                float r = 0.0f;
                float g = 0.0f;
                float b = 0.0f;
                float h = (float)step / (float)numOfSteps;
                int i = (int)(h * 6);
                float f = h * 6.0f - i;
                float q = 1.0f - f;
                switch (i % 6)
                {
                    case 0:
                        {
                            r = 1.0f;
                            g = f;
                            b = 0.0f;
                            break;
                        }
                    case 1:
                        {
                            r = q;
                            g = 1.0f;
                            b = 0.0f;
                            break;
                        }
                    case 2:
                        {
                            r = 0.0f;
                            g = 1.0f;
                            b = f;
                            break;
                        }
                    case 3:
                        {
                            r = 0.0f;
                            g = q;
                            b = 1.0f;
                            break;
                        }
                    case 4:
                        {
                            r = f;
                            g = 0.0f;
                            b = 1.0f;
                            break;
                        }
                    case 5:
                        {
                            r = 1.0f;
                            g = 0.0f;
                            b = q;
                            break;
                        }
                }
                return "#" + ((int)(r * 255)).ToString("X2") + ((int)(g * 255)).ToString("X2") + ((int)(b * 255)).ToString("X2");   
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
449
2
Gpt3D_Clone449_2.cs 1 42
Gpt3D_Clone449_2.cs 43 101
----------------------------------------

public static String Rainbow (Int32 numOfSteps, Int32 step) {
    var r = 0.0;
    var g = 0.0;
    var b = 0.0;
    var h = (Double) step / numOfSteps;
    var i = (Int32) (h * 6);
    var f = h * 6.0 - i;
    var q = 1 - f;
    switch (i % 6) {
        case 0 :
            r = 1;
            g = f;
            b = 0;
            break;
        case 1 :
            r = q;
            g = 1;
            b = 0;
            break;
        case 2 :
            r = 0;
            g = 1;
            b = f;
            break;
        case 3 :
            r = 0;
            g = q;
            b = 1;
            break;
        case 4 :
            r = f;
            g = 0;
            b = 1;
            break;
        case 5 :
            r = 1;
            g = 0;
            b = q;
            break;
    }
    return "#" + ((Int32) (r * 255)).ToString ("X2") + ((Int32) (g * 255)).ToString ("X2") + ((Int32) (b * 255)).ToString ("X2");
}
----------------------------------------

 public static string Rainbow(int numOfSteps, int step)
    {
                double red = 0.0;
                double green = 0.0;
                double blue = 0.0;
                double hue = (double)step / (double)numOfSteps;
                int index = (int)(hue * 6);
                double fraction = hue * 6.0 - index;
                double difference = 1.0 - fraction;
                switch (index % 6)
                {
                    case 0:
                        {
                            red = 1.0;
                            green = fraction;
                            blue = 0.0;
                            break;
                        }
                    case 1:
                        {
                            red = difference;
                            green = 1.0;
                            blue = 0.0;
                            break;
                        }
                    case 2:
                        {
                            red = 0.0;
                            green = 1.0;
                            blue = fraction;
                            break;
                        }
                    case 3:
                        {
                            red = 0.0;
                            green = difference;
                            blue = 1.0;
                            break;
                        }
                    case 4:
                        {
                            red = fraction;
                            green = 0.0;
                            blue = 1.0;
                            break;
                        }
                    case 5:
                        {
                            red = 1.0;
                            green = 0.0;
                            blue = difference;
                            break;
                        }
                }
                return "#" + ((int)(red * 255)).ToString("X2") + ((int)(green * 255)).ToString("X2") + ((int)(blue * 255)).ToString("X2");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
449
3
Gpt3D_Clone449_3.cs 1 42
Gpt3D_Clone449_3.cs 43 101
----------------------------------------

public static String Rainbow (Int32 numOfSteps, Int32 step) {
    var r = 0.0;
    var g = 0.0;
    var b = 0.0;
    var h = (Double) step / numOfSteps;
    var i = (Int32) (h * 6);
    var f = h * 6.0 - i;
    var q = 1 - f;
    switch (i % 6) {
        case 0 :
            r = 1;
            g = f;
            b = 0;
            break;
        case 1 :
            r = q;
            g = 1;
            b = 0;
            break;
        case 2 :
            r = 0;
            g = 1;
            b = f;
            break;
        case 3 :
            r = 0;
            g = q;
            b = 1;
            break;
        case 4 :
            r = f;
            g = 0;
            b = 1;
            break;
        case 5 :
            r = 1;
            g = 0;
            b = q;
            break;
    }
    return "#" + ((Int32) (r * 255)).ToString ("X2") + ((Int32) (g * 255)).ToString ("X2") + ((Int32) (b * 255)).ToString ("X2");
}
----------------------------------------

  public static string Rainbow(int numOfSteps, int step)
    {
                double r = 0.0;
                double g = 0.0;
                double b = 0.0;
                double h = (double)step / (double)numOfSteps;
                int i = (int)(h * 6);
                double f = h * 6.0 - i;
                double q = 1.0 - f;
                switch (i % 6)
                {
                    case 0:
                        {
                            r = 1.0;
                            g = f;
                            b = 0.0;
                            break;
                        }
                    case 1:
                        {
                            r = q;
                            g = 1.0;
                            b = 0.0;
                            break;
                        }
                    case 2:
                        {
                            r = 0.0;
                            g = 1.0;
                            b = f;
                            break;
                        }
                    case 3:
                        {
                            r = 0.0;
                            g = q;
                            b = 1.0;
                            break;
                        }
                    case 4:
                        {
                            r = f;
                            g = 0.0;
                            b = 1.0;
                            break;
                        }
                    case 5:
                        {
                            r = 1.0;
                            g = 0.0;
                            b = q;
                            break;
                        }
                }
                return "#" + ((int)(r * 255)).ToString("X2") + ((int)(g * 255)).ToString("X2") + ((int)(b * 255)).ToString("X2");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
449
4
Gpt3D_Clone449_4.cs 1 42
Gpt3D_Clone449_4.cs 43 89
----------------------------------------

public static String Rainbow (Int32 numOfSteps, Int32 step) {
    var r = 0.0;
    var g = 0.0;
    var b = 0.0;
    var h = (Double) step / numOfSteps;
    var i = (Int32) (h * 6);
    var f = h * 6.0 - i;
    var q = 1 - f;
    switch (i % 6) {
        case 0 :
            r = 1;
            g = f;
            b = 0;
            break;
        case 1 :
            r = q;
            g = 1;
            b = 0;
            break;
        case 2 :
            r = 0;
            g = 1;
            b = f;
            break;
        case 3 :
            r = 0;
            g = q;
            b = 1;
            break;
        case 4 :
            r = f;
            g = 0;
            b = 1;
            break;
        case 5 :
            r = 1;
            g = 0;
            b = q;
            break;
    }
    return "#" + ((Int32) (r * 255)).ToString ("X2") + ((Int32) (g * 255)).ToString ("X2") + ((Int32) (b * 255)).ToString ("X2");
}
----------------------------------------

 public static string Rainbow(int numOfSteps, int step) 
    {
                double red = 0.0;
                double green = 0.0;
                double blue = 0.0;
                double hue = (double)step / (double)numOfSteps;
                int index = (int)(hue * 6);
                double fraction = hue * 6.0 - index;
                double remainder = 1.0 - fraction;
            
                switch(index % 6) 
                {
                    case 0:
                        red = 1.0;
                        green = fraction;
                        blue = 0.0;
                        break;
                    case 1:
                        red = remainder;
                        green = 1.0;
                        blue = 0.0;
                        break;
                    case 2:
                        red = 0.0;
                        green = 1.0;
                        blue = fraction;
                        break;
                    case 3:
                        red = 0.0;
                        green = remainder;
                        blue = 1.0;
                        break;
                    case 4:
                        red = fraction;
                        green = 0.0;
                        blue = 1.0;
                        break;
                    case 5:
                        red = 1.0;
                        green = 0.0;
                        blue = remainder;
                        break;
                }
                return "#" + ((int)(red * 255)).ToString("X2") + ((int)(green * 255)).ToString("X2") + ((int)(blue * 255)).ToString("X2");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
449
5
Gpt3D_Clone449_5.cs 1 42
Gpt3D_Clone449_5.cs 43 93
----------------------------------------

public static String Rainbow (Int32 numOfSteps, Int32 step) {
    var r = 0.0;
    var g = 0.0;
    var b = 0.0;
    var h = (Double) step / numOfSteps;
    var i = (Int32) (h * 6);
    var f = h * 6.0 - i;
    var q = 1 - f;
    switch (i % 6) {
        case 0 :
            r = 1;
            g = f;
            b = 0;
            break;
        case 1 :
            r = q;
            g = 1;
            b = 0;
            break;
        case 2 :
            r = 0;
            g = 1;
            b = f;
            break;
        case 3 :
            r = 0;
            g = q;
            b = 1;
            break;
        case 4 :
            r = f;
            g = 0;
            b = 1;
            break;
        case 5 :
            r = 1;
            g = 0;
            b = q;
            break;
    }
    return "#" + ((Int32) (r * 255)).ToString ("X2") + ((Int32) (g * 255)).ToString ("X2") + ((Int32) (b * 255)).ToString ("X2");
}
----------------------------------------

  public static string Rainbow(int numOfSteps, int step)
    {
                float r = 0.0f;
                float g = 0.0f;
                float b = 0.0f;
                float h = step / (float)numOfSteps;
                int i = (int)(h * 6);
                float f = h * 6f - i;
                float q = 1f - f;
                if (i % 6 <= 0)
                {
                    r = 1f;
                    g = f;
                    b = 0f;
                }
                else if (i % 6 == 1)
                {
                    r = q;
                    g = 1f;
                    b = 0f;
                }
                else if (i % 6 == 2)
                {
                    r = 0f;
                    g = 1f;
                    b = f;
                }
                else if (i % 6 == 3)
                {
                    r = 0f;
                    g = q;
                    b = 1f;
                }
                else if (i % 6 == 4)
                {
                    r = f;
                    g = 0f;
                    b = 1f;
                }
                else if (i % 6 == 5)
                {
                    r = 1f;
                    g = 0f;
                    b = q;
                }
                return "#" + ((int)(r * 255)).ToString("X2") + ((int)(g * 255)).ToString("X2") + ((int)(b * 255)).ToString("X2");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
451
0
Gpt3D_Clone451_0.cs 1 18
Gpt3D_Clone451_0.cs 19 32
----------------------------------------

public static int Delta (int a, int b) {
    int delta = 0;
    if (a == b) {
        return 0;
    } else if (a < b) {
        while (a < b) {
            a ++;
            delta ++;
        }
        return delta;
    } else {
        while (b < a) {
            b ++;
            delta ++;
        }
        return delta;
    }
}
----------------------------------------

 public static int Delta(int a, int b){
    int delta = 0;
    while (a != b){
        delta++;
        if (a < b){
            a++;
        } else if (a > b){
            b++;
        }
    }
    return delta;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
451
1
Gpt3D_Clone451_1.cs 1 18
Gpt3D_Clone451_1.cs 19 26
----------------------------------------

public static int Delta (int a, int b) {
    int delta = 0;
    if (a == b) {
        return 0;
    } else if (a < b) {
        while (a < b) {
            a ++;
            delta ++;
        }
        return delta;
    } else {
        while (b < a) {
            b ++;
            delta ++;
        }
        return delta;
    }
}
----------------------------------------

 public static int Delta(int a, int b){
    int max = Math.max(a, b);
    int min = Math.min(a, b);
    int delta = max - min;
    return delta;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
451
2
Gpt3D_Clone451_2.cs 1 18
Gpt3D_Clone451_2.cs 19 25
----------------------------------------

public static int Delta (int a, int b) {
    int delta = 0;
    if (a == b) {
        return 0;
    } else if (a < b) {
        while (a < b) {
            a ++;
            delta ++;
        }
        return delta;
    } else {
        while (b < a) {
            b ++;
            delta ++;
        }
        return delta;
    }
}
----------------------------------------

 public static int Delta(int a, int b) {
    int diff  = a - b;
    int delta = (diff < 0)? diff*(-1): diff;
    return delta;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
451
3
Gpt3D_Clone451_3.cs 1 18
Gpt3D_Clone451_3.cs 19 25
----------------------------------------

public static int Delta (int a, int b) {
    int delta = 0;
    if (a == b) {
        return 0;
    } else if (a < b) {
        while (a < b) {
            a ++;
            delta ++;
        }
        return delta;
    } else {
        while (b < a) {
            b ++;
            delta ++;
        }
        return delta;
    }
}
----------------------------------------

 public static int Delta(int a, int b){
    int min  = Math.min (a, b);
    int delta = Math.max(a,b) - min;
    return delta;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
451
4
Gpt3D_Clone451_4.cs 1 18
Gpt3D_Clone451_4.cs 19 24
----------------------------------------

public static int Delta (int a, int b) {
    int delta = 0;
    if (a == b) {
        return 0;
    } else if (a < b) {
        while (a < b) {
            a ++;
            delta ++;
        }
        return delta;
    } else {
        while (b < a) {
            b ++;
            delta ++;
        }
        return delta;
    }
}
----------------------------------------

 public static int Delta(int a, int b){
    int nonZeroVal = (a==b)? 0: (a>b? a-b : b-a);
    return  nonZeroVal;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
451
5
Gpt3D_Clone451_5.cs 1 18
Gpt3D_Clone451_5.cs 19 24
----------------------------------------

public static int Delta (int a, int b) {
    int delta = 0;
    if (a == b) {
        return 0;
    } else if (a < b) {
        while (a < b) {
            a ++;
            delta ++;
        }
        return delta;
    } else {
        while (b < a) {
            b ++;
            delta ++;
        }
        return delta;
    }
}
----------------------------------------

 public static int Delta(int a, int b) {
    int absValue = Math.abs(a - b);
    return absValue;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
451
6
Gpt3D_Clone451_6.cs 1 18
Gpt3D_Clone451_6.cs 19 24
----------------------------------------

public static int Delta (int a, int b) {
    int delta = 0;
    if (a == b) {
        return 0;
    } else if (a < b) {
        while (a < b) {
            a ++;
            delta ++;
        }
        return delta;
    } else {
        while (b < a) {
            b ++;
            delta ++;
        }
        return delta;
    }
}
----------------------------------------

 public static int Delta(int a, int b) {
    int delta  = b > a ? b - a : a - b;
    return delta;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
451
7
Gpt3D_Clone451_7.cs 1 18
Gpt3D_Clone451_7.cs 19 24
----------------------------------------

public static int Delta (int a, int b) {
    int delta = 0;
    if (a == b) {
        return 0;
    } else if (a < b) {
        while (a < b) {
            a ++;
            delta ++;
        }
        return delta;
    } else {
        while (b < a) {
            b ++;
            delta ++;
        }
        return delta;
    }
}
----------------------------------------

 public static int Delta(int a, int b) {
    int difference  = Math.max(a, b)- Math.min(a,b);
    return difference;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
451
8
Gpt3D_Clone451_8.cs 1 18
Gpt3D_Clone451_8.cs 19 24
----------------------------------------

public static int Delta (int a, int b) {
    int delta = 0;
    if (a == b) {
        return 0;
    } else if (a < b) {
        while (a < b) {
            a ++;
            delta ++;
        }
        return delta;
    } else {
        while (b < a) {
            b ++;
            delta ++;
        }
        return delta;
    }
}
----------------------------------------

 public static int Delta(int a, int b){
    int delta = a > b? a - b : b - a;
    return delta;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
451
9
Gpt3D_Clone451_9.cs 1 18
Gpt3D_Clone451_9.cs 19 24
----------------------------------------

public static int Delta (int a, int b) {
    int delta = 0;
    if (a == b) {
        return 0;
    } else if (a < b) {
        while (a < b) {
            a ++;
            delta ++;
        }
        return delta;
    } else {
        while (b < a) {
            b ++;
            delta ++;
        }
        return delta;
    }
}
----------------------------------------

 public static int Delta(int a, int b){
    int delta = Math.abs (a - b);
    return delta;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
452
1
Gpt3D_Clone452_1.cs 1 9
Gpt3D_Clone452_1.cs 10 20
----------------------------------------

public static void Main (string [] args) {
    var KP = Console.ReadKey ();
    if (KP.Key == ConsoleKey.F2) {
        return;
    }
    string UserName = KP.KeyChar + Console.ReadLine ();
    Console.WriteLine (UserName);
    Console.ReadLine ();
}
----------------------------------------

 public static void Main (string [] args) {
    char ch = Console.ReadKey ().KeyChar;
    if (ch != 'F') {
        Console.WriteLine ("Please enter your name: ");
        string UserName = ch + Console.ReadLine ();
        Console.WriteLine (UserName);
    }
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
452
4
Gpt3D_Clone452_4.cs 1 9
Gpt3D_Clone452_4.cs 10 19
----------------------------------------

public static void Main (string [] args) {
    var KP = Console.ReadKey ();
    if (KP.Key == ConsoleKey.F2) {
        return;
    }
    string UserName = KP.KeyChar + Console.ReadLine ();
    Console.WriteLine (UserName);
    Console.ReadLine ();
}
----------------------------------------

 public static void Main (string [] args) {
    int ch = Console.ReadKey ().Key;
    if (ch != 70) {
        string UserName = Convert.ToChar(ch) + Console.ReadLine ();
        Console.WriteLine (UserName);
    }
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
452
8
Gpt3D_Clone452_8.cs 1 9
Gpt3D_Clone452_8.cs 10 19
----------------------------------------

public static void Main (string [] args) {
    var KP = Console.ReadKey ();
    if (KP.Key == ConsoleKey.F2) {
        return;
    }
    string UserName = KP.KeyChar + Console.ReadLine ();
    Console.WriteLine (UserName);
    Console.ReadLine ();
}
----------------------------------------

 public static void Main (string [] args) {
    char ch = Console.ReadKey ().KeyChar;
    if (ch != 'F2') {
        string UserName = ch + Console.ReadLine ();
        Console.WriteLine (UserName);
    }
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
455
1
Gpt3D_Clone455_1.cs 1 11
Gpt3D_Clone455_1.cs 12 33
----------------------------------------

private void trvAvailableFiles_AfterCheck (object sender, TreeViewEventArgs e) {
    if (! _isCheckingInProgress) {
        _isCheckingInProgress = true;
        try {
            GetAvailableFiles ();
        }
        catch {
        }
        _isCheckingInProgress = false;
    }
}
----------------------------------------

 private void trvAvailableFiles_AfterCheck (object sender, TreeViewEventArgs e) {
     if (_isCheckingInProgress) 
        return;
     lock(_lock)
     {
         _isCheckingInProgress = true;
     }
    try 
    {
        GetAvailableFiles ();
    }
    catch {
    }
    finally 
    {
        _isCheckingInProgress = false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
455
3
Gpt3D_Clone455_3.cs 1 11
Gpt3D_Clone455_3.cs 12 27
----------------------------------------

private void trvAvailableFiles_AfterCheck (object sender, TreeViewEventArgs e) {
    if (! _isCheckingInProgress) {
        _isCheckingInProgress = true;
        try {
            GetAvailableFiles ();
        }
        catch {
        }
        _isCheckingInProgress = false;
    }
}
----------------------------------------

 private void trvAvailableFiles_AfterCheck (object sender, TreeViewEventArgs e) { 
    if (! _isCheckingInProgress) 
    { 
        bool success = false;
        try { 
            _isCheckingInProgress = true; 
            GetAvailableFiles (); 
            success = true;
        } 
        finally {
            _isCheckingInProgress = success; 
       }
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
458
2
Gpt3D_Clone458_2.cs 1 24
Gpt3D_Clone458_2.cs 25 44
----------------------------------------

private TreeNode findValueStartingAtNode (TreeNode node, IComparable value) {
    Console.WriteLine ("looking for value {0}", value);
    if (node == null) {
        Console.WriteLine ("node is null -- returning null");
        return null;
    } else if (value.CompareTo (node.data) == 0) {
        Console.WriteLine ("value found at current node");
        Console.WriteLine ("current node data is {0}", node.data);
        Console.WriteLine ("done and returning node");
        return node;
    } else {
        Console.WriteLine ("checking left child");
        TreeNode left = findValueStartingAtNode (node.left_child, value);
        if (left != null)
            return left;
        Console.WriteLine ("checking right child");
        TreeNode right = findValueStartingAtNode (node.right_child, value);
        if (right != null)
            return right;
        Console.WriteLine ("value not found in either child");
        Console.WriteLine ("current node data is {0}", node.data);
        return null;
    }
}
----------------------------------------

  private TreeNode findValueStartingAtNode (TreeNode node, IComparable value) {
    Console.WriteLine ("looking for value {0}", value);
    if (node == null) {
        Console.WriteLine ("node is null -- returning null");
        return null;
    }
    int cmp = value.CompareTo(node.data);
    if (cmp == 0) {
        Console.WriteLine ("value found at current node");
        Console.WriteLine ("current node data is {0}", node.data);
        Console.WriteLine ("done and returning node");
        return node;
    }
    else if (cmp < 0) 
        return findValueStartingAtNode (node.left_child, value);
    else 
        return findValueStartingAtNode (node.right_child, value);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
458
3
Gpt3D_Clone458_3.cs 1 24
Gpt3D_Clone458_3.cs 25 43
----------------------------------------

private TreeNode findValueStartingAtNode (TreeNode node, IComparable value) {
    Console.WriteLine ("looking for value {0}", value);
    if (node == null) {
        Console.WriteLine ("node is null -- returning null");
        return null;
    } else if (value.CompareTo (node.data) == 0) {
        Console.WriteLine ("value found at current node");
        Console.WriteLine ("current node data is {0}", node.data);
        Console.WriteLine ("done and returning node");
        return node;
    } else {
        Console.WriteLine ("checking left child");
        TreeNode left = findValueStartingAtNode (node.left_child, value);
        if (left != null)
            return left;
        Console.WriteLine ("checking right child");
        TreeNode right = findValueStartingAtNode (node.right_child, value);
        if (right != null)
            return right;
        Console.WriteLine ("value not found in either child");
        Console.WriteLine ("current node data is {0}", node.data);
        return null;
    }
}
----------------------------------------

 private TreeNode findValueStartingAtNode (TreeNode node, IComparable value) {
    Console.WriteLine ("looking for value {0}", value);
    if (node == null) {
        Console.WriteLine ("node is null -- returning null");
        return null;
    }
    if (value.CompareTo (node.data) == 0) {
        Console.WriteLine ("value found at current node");
        Console.WriteLine ("current node data is {0}", node.data);
        Console.WriteLine ("done and returning node");
        return node;
    }
    else if (value.CompareTo(node.data) < 0) 
        return findValueStartingAtNode (node.left_child, value);
    else 
        return findValueStartingAtNode (node.right_child, value);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
458
4
Gpt3D_Clone458_4.cs 1 24
Gpt3D_Clone458_4.cs 25 44
----------------------------------------

private TreeNode findValueStartingAtNode (TreeNode node, IComparable value) {
    Console.WriteLine ("looking for value {0}", value);
    if (node == null) {
        Console.WriteLine ("node is null -- returning null");
        return null;
    } else if (value.CompareTo (node.data) == 0) {
        Console.WriteLine ("value found at current node");
        Console.WriteLine ("current node data is {0}", node.data);
        Console.WriteLine ("done and returning node");
        return node;
    } else {
        Console.WriteLine ("checking left child");
        TreeNode left = findValueStartingAtNode (node.left_child, value);
        if (left != null)
            return left;
        Console.WriteLine ("checking right child");
        TreeNode right = findValueStartingAtNode (node.right_child, value);
        if (right != null)
            return right;
        Console.WriteLine ("value not found in either child");
        Console.WriteLine ("current node data is {0}", node.data);
        return null;
    }
}
----------------------------------------

 private TreeNode findValueStartingAtNode (TreeNode node, IComparable value) {
    Console.WriteLine ("looking for value {0}", value);
    if (node == null) {
        Console.WriteLine ("node is null -- returning null");
        return null;
    } 
    if (value.CompareTo (node.data) == 1)
        return findValueStartingAtNode (node.right_child, value);
    else if (value.CompareTo(node.data) == -1)
        return findValueStartingAtNode (node.left_child, value);
    
    Console.WriteLine ("value found at current node");
    Console.WriteLine ("current node data is {0}", node.data);
    Console.WriteLine ("done and returning node");
    return node;
        
    
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
459
0
Gpt3D_Clone459_0.cs 1 10
Gpt3D_Clone459_0.cs 11 28
----------------------------------------

public override bool IsValid (DateTime value) {
    DateTime today = DateTime.Today;
    int age = today.Year - value.Year;
    if (value > today.AddYears (- age))
        age --;
    if (age < 18) {
        return false;
    }
    return true;
}
----------------------------------------

   public override bool IsValid (DateTime value) {
     int age = DateTime.Today.Year - value.Year;
     if (value > DateTime.Today.AddYears(-age))
        age--;
     if (age < 18)
        return false;
     return true;
    }
  public override bool IsValid (DateTime value) {
    int age = DateTime.Today.Year - value.Year;
    if (value > DateTime.Today.AddYears(-age)) {
       age--;
    } 
    return (age < 18) ? false : true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
459
7
Gpt3D_Clone459_7.cs 1 10
Gpt3D_Clone459_7.cs 11 18
----------------------------------------

public override bool IsValid (DateTime value) {
    DateTime today = DateTime.Today;
    int age = today.Year - value.Year;
    if (value > today.AddYears (- age))
        age --;
    if (age < 18) {
        return false;
    }
    return true;
}
----------------------------------------

 public override bool IsValid (DateTime value) {
    int age = DateTime.Today.Year - value.Year;
    if (value > DateTime.Today.AddYears(-age)) 
        age--;
    return age < 18 ? false : true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
459
8
Gpt3D_Clone459_8.cs 1 10
Gpt3D_Clone459_8.cs 11 18
----------------------------------------

public override bool IsValid (DateTime value) {
    DateTime today = DateTime.Today;
    int age = today.Year - value.Year;
    if (value > today.AddYears (- age))
        age --;
    if (age < 18) {
        return false;
    }
    return true;
}
----------------------------------------

  public override bool IsValid (DateTime value) {
    int age = DateTime.Today.Year - value.Year; 
    if (value > DateTime.Today.AddYears(-age)) 
        age--; 
    return age < 18 ? false : true; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
459
9
Gpt3D_Clone459_9.cs 1 10
Gpt3D_Clone459_9.cs 11 28
----------------------------------------

public override bool IsValid (DateTime value) {
    DateTime today = DateTime.Today;
    int age = today.Year - value.Year;
    if (value > today.AddYears (- age))
        age --;
    if (age < 18) {
        return false;
    }
    return true;
}
----------------------------------------

   public override bool IsValid (DateTime value) {
     int age = DateTime.Today.Year - value.Year;
     if (value > DateTime.Today.AddYears(-age))
        age--;
     if (age < 18)
        return false;
     return true;
    }
  public override bool IsValid (DateTime value) {
    int age = DateTime.Today.Year - value.Year;
    if (value > DateTime.Today.AddYears(-age)) {
       age--;
    } 
    return (age < 18) ? false : true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
461
0
Gpt3D_Clone461_0.cs 1 11
Gpt3D_Clone461_0.cs 12 52
----------------------------------------

public static string CreateZip (string stDirToZip) {
    try {
        DirectoryInfo di = new DirectoryInfo (stDirToZip);
        string stZipPath = di.Parent.FullName + "\\" + di.Name + ".zip";
        CreateZip (stZipPath, stDirToZip);
        return stZipPath;
    }
    catch (Exception) {
        throw;
    }
}
----------------------------------------

 public static string CreateZip (string stDirToZip) {
                    try {
                        DirectoryInfo di = new DirectoryInfo (stDirToZip);
                        string stZipPath = Path.Combine(di.Parent.FullName, di.Name + ".zip");
                        using (FileStream fileStream = new FileStream(stZipPath, FileMode.Create)){
                            using (ZipOutputStream zipOutputStream = new ZipOutputStream(fileStream)){
                                CompressRecursive(di, zipOutputStream);
                            }
                        }
                        return stZipPath;
                    }
                    catch (Exception) {
                        throw;
                    }
                }
                private static void CompressRecursive(DirectoryInfo di, ZipOutputStream zipOutputStream)
                {
                    foreach (FileInfo fi in di.GetFiles())
                    {
                        ZipEntry entry = new ZipEntry(fi.FullName);
                        entry.DateTime = fi.LastWriteTime;
                        entry.Size = fi.Length;
                        zipOutputStream.PutNextEntry(entry);
                        byte[] buffer = new byte[4096];
                        using (FileStream streamReader = fi.OpenRead())
                        {
                            StreamUtils.Copy(streamReader, zipOutputStream, buffer);
                        }
                        //wipe buffer
                        for (int i=0; i<buffer.Length; i++)
                            buffer[i] = 0;
                        zipOutputStream.CloseEntry();
                    }
                    foreach (DirectoryInfo ChildFolder in di.GetDirectories())
                    {
                        CompressRecursive(ChildFolder, zipOutputStream);
                    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
461
1
Gpt3D_Clone461_1.cs 1 11
Gpt3D_Clone461_1.cs 12 53
----------------------------------------

public static string CreateZip (string stDirToZip) {
    try {
        DirectoryInfo di = new DirectoryInfo (stDirToZip);
        string stZipPath = di.Parent.FullName + "\\" + di.Name + ".zip";
        CreateZip (stZipPath, stDirToZip);
        return stZipPath;
    }
    catch (Exception) {
        throw;
    }
}
----------------------------------------

 public static string CreateZip (string stDirToZip) {
                    try {
                        string stZipPath = stDirToZip + ".zip";
                        ZipOutputStream zipOutStream = new ZipOutputStream(File.Create(stZipPath));
                        zipOutStream.SetLevel(3);
                        zipOutStream.UseZip64 = Zip64Option.AsNecessary;
                            
                        ZipDirectory(stDirToZip, zipOutStream, stDirToZip);   // Call to a new method.
                        zipOutStream.Close();
                        return stZipPath;
                    }
                    catch (Exception) {
                        throw;
                    }
                }
                public static void ZipDirectory(string sourceDirectory, ZipOutputStream zipOutStream, string baseDirectory)
                {
                    foreach (string dir in Directory.GetDirectories(sourceDirectory))
                    {
                        var entries = Directory.GetDirectories(dir).Where(d => !d.Contains(".ipa")) // Exclude a folder
                                        .Select(d => new {dir = d, name = d.Replace(baseDirectory, string.Empty) });
                        foreach (var en in entries)
                        {
                            ZipDirectory(en.dir, zipOutStream, baseDirectory);
                        }
                    
                        foreach (string file in Directory.GetFiles(dir))
                        {
                            byte[] byteBuffer = File.ReadAllBytes(file);
                            string fileName = file.Replace(baseDirectory, string.Empty);
                            ZipEntry entry = new ZipEntry(fileName);
                            entry.DateTime = DateTime.Now;
                            entry.Size = byteBuffer.Length;
                            zipOutStream.PutNextEntry(entry);
                            zipOutStream.Write(byteBuffer, 0, byteBuffer.Length);
                        }
                    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
461
10
Gpt3D_Clone461_10.cs 1 11
Gpt3D_Clone461_10.cs 12 38
----------------------------------------

public static string CreateZip (string stDirToZip) {
    try {
        DirectoryInfo di = new DirectoryInfo (stDirToZip);
        string stZipPath = di.Parent.FullName + "\\" + di.Name + ".zip";
        CreateZip (stZipPath, stDirToZip);
        return stZipPath;
    }
    catch (Exception) {
        throw;
    }
}
----------------------------------------

 public static string CreateZip (string stDirToZip) {
                        try {
                            string stZipPath = stDirToZip + ".zip";
                            using (ZipArchive zipArchive = ZipFile.Open(stZipPath, ZipArchiveMode.Create)) {
                                CompressFolderContent(stDirToZip, zipArchive); // Call to a new method.
                            }
                            return stZipPath;
                        }
                        catch (Exception) {
                            throw;
                        }
                    }
                    public static void CompressFolderContent(string sDir, ZipArchive zipArchive) 
                    {
                        foreach (string file in Directory.GetFiles(sDir))
                        {
                            zipArchive.CreateEntryFromFile(file, Path.GetFileName(file), CompressionLevel.Fastest);
                        }
                    
                        foreach (string directory in Directory.GetDirectories(sDir))
                        {
                            CompressFolderContent(directory, zipArchive);
                        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
461
11
Gpt3D_Clone461_11.cs 1 11
Gpt3D_Clone461_11.cs 12 36
----------------------------------------

public static string CreateZip (string stDirToZip) {
    try {
        DirectoryInfo di = new DirectoryInfo (stDirToZip);
        string stZipPath = di.Parent.FullName + "\\" + di.Name + ".zip";
        CreateZip (stZipPath, stDirToZip);
        return stZipPath;
    }
    catch (Exception) {
        throw;
    }
}
----------------------------------------

 public static string CreateZip (string stDirToZip) {
                        try {
                            DirectoryInfo di = new DirectoryInfo (stDirToZip);
                            string stZipPath = di.Parent.FullName + "\\" + di.Name + ".zip";
                            using (ZipArchive zip = ZipFile.Open(stZipPath, ZipArchiveMode.Create)){
                                CompressContent(di, zip);  // Call to a new method;
                            }
                            return stZipPath;
                        }
                        catch (Exception) {
                            throw;
                        }
                    }
                    public static void CompressContent(DirectoryInfo di, ZipArchive zip){
                        foreach (FileInfo fi in di.GetFiles()){
                            zip.CreateEntryFromFile(fi.FullName,fi.Name);
                        }
                        foreach (DirectoryInfo childDirectory in di.GetDirectories())
                        {
                            CompressContent(childDirectory, zip);
                        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
461
3
Gpt3D_Clone461_3.cs 1 11
Gpt3D_Clone461_3.cs 12 53
----------------------------------------

public static string CreateZip (string stDirToZip) {
    try {
        DirectoryInfo di = new DirectoryInfo (stDirToZip);
        string stZipPath = di.Parent.FullName + "\\" + di.Name + ".zip";
        CreateZip (stZipPath, stDirToZip);
        return stZipPath;
    }
    catch (Exception) {
        throw;
    }
}
----------------------------------------

 public static string CreateZip (string stDirToZip) {
                    try {
                        string stZipPath = stDirToZip + ".zip";
                        ZipOutputStream zipOutStream = new ZipOutputStream(File.Create(stZipPath));
                        zipOutStream.SetLevel(3);
                        zipOutStream.UseZip64 = Zip64Option.AsNecessary;
                            
                        ZipDirectory(stDirToZip, zipOutStream, stDirToZip);   // Call to a new method.
                        zipOutStream.Close();
                        return stZipPath;
                    }
                    catch (Exception) {
                        throw;
                    }
                }
                public static void ZipDirectory(string sourceDirectory, ZipOutputStream zipOutStream, string baseDirectory)
                {
                    foreach (string dir in Directory.GetDirectories(sourceDirectory))
                    {
                        var entries = Directory.GetDirectories(dir).Where(d => !d.Contains(".ipa")) // Exclude a folder
                                        .Select(d => new {dir = d, name = d.Replace(baseDirectory, string.Empty) });
                        foreach (var en in entries)
                        {
                            ZipDirectory(en.dir, zipOutStream, baseDirectory);
                        }
                    
                        foreach (string file in Directory.GetFiles(dir))
                        {
                            byte[] byteBuffer = File.ReadAllBytes(file);
                            string fileName = file.Replace(baseDirectory, string.Empty);
                            ZipEntry entry = new ZipEntry(fileName);
                            entry.DateTime = DateTime.Now;
                            entry.Size = byteBuffer.Length;
                            zipOutStream.PutNextEntry(entry);
                            zipOutStream.Write(byteBuffer, 0, byteBuffer.Length);
                        }
                    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
461
4
Gpt3D_Clone461_4.cs 1 11
Gpt3D_Clone461_4.cs 12 26
----------------------------------------

public static string CreateZip (string stDirToZip) {
    try {
        DirectoryInfo di = new DirectoryInfo (stDirToZip);
        string stZipPath = di.Parent.FullName + "\\" + di.Name + ".zip";
        CreateZip (stZipPath, stDirToZip);
        return stZipPath;
    }
    catch (Exception) {
        throw;
    }
}
----------------------------------------

 public static string CreateZip (string stDirToZip) {
    try {
        string stZipPath = stDirToZip + ".zip";
        using(ZipFile zip = new ZipFile(stZipPath)) {
            zip.AddDirectory(stDirToZip);
            zip.Save();
        }
        return stZipPath;
    }
    catch (Exception) {
        throw;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
461
8
Gpt3D_Clone461_8.cs 1 11
Gpt3D_Clone461_8.cs 12 68
----------------------------------------

public static string CreateZip (string stDirToZip) {
    try {
        DirectoryInfo di = new DirectoryInfo (stDirToZip);
        string stZipPath = di.Parent.FullName + "\\" + di.Name + ".zip";
        CreateZip (stZipPath, stDirToZip);
        return stZipPath;
    }
    catch (Exception) {
        throw;
    }
}
----------------------------------------

 public static string CreateZip (string stDirToZip) {
                    try {
                        DirectoryInfo di = new DirectoryInfo (stDirToZip);
                        string stZipPath = di.Parent.FullName + "\\" + di.Name + ".zip";
                        CreateZipStream(stZipPath, stDirToZip);
                        return stZipPath;
                    }
                    catch (Exception) {
                        throw;
                    }
                } 
                public static void CreateZipStream(string zipPath, string sourcePath)
                {
                using (ICSharpCode.SharpZipLib.Zip.ZipOutputStream zipStream =
                            new ICSharpCode.SharpZipLib.Zip.ZipOutputStream(File.Create(zipPath)))
                {
                    // Instanciate the Directory class to recursively get the files
                    DirectoryInfo dir = new DirectoryInfo(sourcePath);
                    // Call the RecurseZipDirectories method to get all the files inside the current directory
                    RecurseZipDirectories(dir, ref zipStream);
                    // close the Zip Output Stream   
                    zipStream.Finish();
                    zipStream.Close();
                }	
                    }
                    // Recursively get all the files and folders inside a directory
                    public static void RecurseZipDirectories(DirectoryInfo dir, ref ICSharpCode.SharpZipLib.Zip.ZipOutputStream zipStream)
                    {
                        // Go through each Directory
                        foreach (DirectoryInfo dirinfo in dir.GetDirectories())
                        {
                            // Recursive Call
                            RecurseZipDirectories(dirinfo, ref zipStream);
                        }
                            
                        // Get all the files created from the previous call of RecurseZipDirectories
                        foreach (FileInfo file in dir.GetFiles())
                        {
                            // add the file to the zip stream
                            ICSharpCode.SharpZipLib.Zip.ZipEntry zipEntry = new ICSharpCode.SharpZipLib.Zip.ZipEntry(file.Name);
                            zipStream.PutNextEntry(zipEntry);
                            // Open the file to read
                            StreamReader sr = File.OpenText(file.FullName);
                            string contents = sr.ReadToEnd();
                            
                            //write the file to the zip stream
                            byte[] byteArray = System.Text.Encoding.UTF8.GetBytes(contents);
                            zipStream.Write(byteArray, 0, byteArray.Length);
                        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
463
0
Gpt3D_Clone463_0.cs 1 14
Gpt3D_Clone463_0.cs 15 32
----------------------------------------

private void CheckLog () {
    bool found = false;
    while (! found) {
        while ((s = sr.ReadLine ()) != null) {
            if (s.Contains ("test")) {
                _found = true;
                break;
            }
        }
        if (found) {
        } else {
        }
    }
}
----------------------------------------

 private void CheckLog () {
    s = sr.ReadLine();
    if (s == null) {
        return;
    }
    if (s.Contains("test")) {
        return;
    }
    while ((s = sr.ReadLine()) != null) {
        if (s.Contains("test")) {
            break;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
463
2
Gpt3D_Clone463_2.cs 1 14
Gpt3D_Clone463_2.cs 15 25
----------------------------------------

private void CheckLog () {
    bool found = false;
    while (! found) {
        while ((s = sr.ReadLine ()) != null) {
            if (s.Contains ("test")) {
                _found = true;
                break;
            }
        }
        if (found) {
        } else {
        }
    }
}
----------------------------------------

  private void CheckLog () {
    do
    {
        s = sr.ReadLine();
    }
    while (s != null && !s.Contains("test"));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
463
3
Gpt3D_Clone463_3.cs 1 14
Gpt3D_Clone463_3.cs 15 21
----------------------------------------

private void CheckLog () {
    bool found = false;
    while (! found) {
        while ((s = sr.ReadLine ()) != null) {
            if (s.Contains ("test")) {
                _found = true;
                break;
            }
        }
        if (found) {
        } else {
        }
    }
}
----------------------------------------

 private void CheckLog () {
    while (!sr.ReadLine().Contains("test")) {
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
469
7
Gpt3D_Clone469_7.cs 1 12
Gpt3D_Clone469_7.cs 13 27
----------------------------------------

public static byte [] ConvertBitmapSourceToByteArray (BitmapEncoder encoder, ImageSource imageSource) {
    byte [] bytes = null;
    var bitmapSource = imageSource as BitmapSource;
    if (bitmapSource != null) {
        encoder.Frames.Add (BitmapFrame.Create (bitmapSource));
        using (var stream = new MemoryStream ())
        {
            encoder.Save (stream);
            bytes = stream.ToArray ();
        }}
    return bytes;
}
----------------------------------------

 public static byte[] ConvertBitmapSourceToByteArray (BitmapEncoder encoder, ImageSource imageSource) 
{
    if (imageSource is BitmapSource) {
        BitmapSource source = (BitmapSource)imageSource;
        encoder.Frames.Add(BitmapFrame.Create(source));
        MemoryStream stream = new MemoryStream();
        encoder.Save(stream);
        byte [] bytes = stream.ToArray();
        return bytes;
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
472
0
Gpt3D_Clone472_0.cs 1 10
Gpt3D_Clone472_0.cs 11 24
----------------------------------------

private static void updateBandwidthInterval (double [] xval, int i, int [] bandwidthInterval) {
    int left = bandwidthInterval [0];
    int right = bandwidthInterval [1];
    int nextRight = nextNonzero (weights, right);
    if (nextRight < xval.Length && xval [nextRight] - xval [i] < xval [i] - xval [left]) {
        int nextLeft = nextNonzero (weights, bandwidthInterval [0]);
        bandwidthInterval [0] = nextLeft;
        bandwidthInterval [1] = nextRight;
    }
}
----------------------------------------

 private static void updateBandwidthInterval(double [] xval, int i, int [] bandwidthInterval){
    // Get the next left index
    int nextLeft = nextNonzero (weights, bandwidthInterval [0]); 
    // Get the next right index
    int nextRight = nextNonzero (weights, bandwidthInterval [1]);
  
    // Check if the difference between two elements is greater 
    if(nextRight < xval.Length && xval[nextRight] - xval[i] < xval[i] - xval[bandwidthInterval[0]]) {
        bandwidthInterval[0] = nextLeft; // Update the new left
        bandwidthInterval[1] = nextRight; // Update the new left
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
472
1
Gpt3D_Clone472_1.cs 1 10
Gpt3D_Clone472_1.cs 11 26
----------------------------------------

private static void updateBandwidthInterval (double [] xval, int i, int [] bandwidthInterval) {
    int left = bandwidthInterval [0];
    int right = bandwidthInterval [1];
    int nextRight = nextNonzero (weights, right);
    if (nextRight < xval.Length && xval [nextRight] - xval [i] < xval [i] - xval [left]) {
        int nextLeft = nextNonzero (weights, bandwidthInterval [0]);
        bandwidthInterval [0] = nextLeft;
        bandwidthInterval [1] = nextRight;
    }
}
----------------------------------------

 private static void updateBandwidthInterval (double [] xval, int i, int [] bandwidthInterval) {
    // Get the next left index 
    int nextLeft = nextNonzero (weights, bandwidthInterval [0]);
    // Get the next right index
    int nextRight = nextNonzero (weights, bandwidthInterval [1]);
    
    // Check if the next right index exists and 
    // the difference between the elements is smaller 
    if (nextRight < xval.Length && xval [nextRight] - xval [i] < xval [i] - xval [bandwidthInterval[0]]) {
        // Replace old left and right indexes 
        bandwidthInterval [0] = nextLeft;
        bandwidthInterval [1] = nextRight;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
472
2
Gpt3D_Clone472_2.cs 1 10
Gpt3D_Clone472_2.cs 11 25
----------------------------------------

private static void updateBandwidthInterval (double [] xval, int i, int [] bandwidthInterval) {
    int left = bandwidthInterval [0];
    int right = bandwidthInterval [1];
    int nextRight = nextNonzero (weights, right);
    if (nextRight < xval.Length && xval [nextRight] - xval [i] < xval [i] - xval [left]) {
        int nextLeft = nextNonzero (weights, bandwidthInterval [0]);
        bandwidthInterval [0] = nextLeft;
        bandwidthInterval [1] = nextRight;
    }
}
----------------------------------------

 private static void updateBandwidthInterval(double [] xval, int i, int [] bandwidthInterval){
    // Find the next 'left' or preceding index    
    int nextLeft = nextNonzero (weights, bandwidthInterval [0]);
    // Find the next 'right' or succeeding index
    int nextRight = nextNonzero (weights, bandwidthInterval [1]);
    
    // Check if the next 'right' index exists and 
    // if the difference of the elements is smaller
    if (nextRight < xval.Length && xval[nextRight] - xval[i] < xval[i] - xval[bandwidthInterval[0]]){ 
        bandwidthInterval[0] = nextLeft;  // Update left
        bandwidthInterval[1] = nextRight; // Update right
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
472
3
Gpt3D_Clone472_3.cs 1 10
Gpt3D_Clone472_3.cs 11 25
----------------------------------------

private static void updateBandwidthInterval (double [] xval, int i, int [] bandwidthInterval) {
    int left = bandwidthInterval [0];
    int right = bandwidthInterval [1];
    int nextRight = nextNonzero (weights, right);
    if (nextRight < xval.Length && xval [nextRight] - xval [i] < xval [i] - xval [left]) {
        int nextLeft = nextNonzero (weights, bandwidthInterval [0]);
        bandwidthInterval [0] = nextLeft;
        bandwidthInterval [1] = nextRight;
    }
}
----------------------------------------

 private static void updateBandwidthInterval (double [] xval, int i, int [] bandwidthInterval) {
    // Get both of the next indexes
    int nextLeft = nextNonzero (weights, bandwidthInterval [0]);
    int nextRight = nextNonzero (weights, bandwidthInterval [1]);
    
    // If the next right index is smaller than the size of the 
    // array and the difference is smaller than the original 
    if (nextRight < xval.Length && xval [nextRight] - xval [i] < xval [i] - xval [bandwidthInterval[0]]) {
        // Update the left and right indexes with the new ones 
        bandwidthInterval [0] = nextLeft; 
        bandwidthInterval [1] = nextRight;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
472
4
Gpt3D_Clone472_4.cs 1 10
Gpt3D_Clone472_4.cs 11 25
----------------------------------------

private static void updateBandwidthInterval (double [] xval, int i, int [] bandwidthInterval) {
    int left = bandwidthInterval [0];
    int right = bandwidthInterval [1];
    int nextRight = nextNonzero (weights, right);
    if (nextRight < xval.Length && xval [nextRight] - xval [i] < xval [i] - xval [left]) {
        int nextLeft = nextNonzero (weights, bandwidthInterval [0]);
        bandwidthInterval [0] = nextLeft;
        bandwidthInterval [1] = nextRight;
    }
}
----------------------------------------

 private static void updateBandwidthInterval (double [] xval, int i, int [] bandwidthInterval) {
    // Find the next 'left' or preceding index    
    int nextLeft = nextNonzero (weights, bandwidthInterval [0]);
    // Find the next 'right' or succeeding index
    int nextRight = nextNonzero (weights, bandwidthInterval [1]);
    
    // Check if the next 'right' index exists and
    // if the difference of the two elements is smaller
    if (nextRight < xval.Length && xval[nextRight]-xval[i] < xval[i]-xval[bandwidthInterval[0]]) {
        bandwidthInterval[0] = nextLeft; // Replace the old 'left' index
        bandwidthInterval[1] = nextRight; // Replace the old 'right' index
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
472
5
Gpt3D_Clone472_5.cs 1 10
Gpt3D_Clone472_5.cs 11 27
----------------------------------------

private static void updateBandwidthInterval (double [] xval, int i, int [] bandwidthInterval) {
    int left = bandwidthInterval [0];
    int right = bandwidthInterval [1];
    int nextRight = nextNonzero (weights, right);
    if (nextRight < xval.Length && xval [nextRight] - xval [i] < xval [i] - xval [left]) {
        int nextLeft = nextNonzero (weights, bandwidthInterval [0]);
        bandwidthInterval [0] = nextLeft;
        bandwidthInterval [1] = nextRight;
    }
}
----------------------------------------

 private static void updateBandwidthInterval (double [] xval, int i, int [] bandwidthInterval) {
    // Find the next 'left' or preceding index    
    int nextLeft = nextNonzero (weights, bandwidthInterval [0]);
    // Find the next 'right' or succeeding index
    int nextRight = nextNonzero (weights, bandwidthInterval [1]);
    
    // If the next 'right' is smaller than the index size of xval and the 
    // difference between xval[nextRight] and xval[i] is smaller than the 
    // difference between xval[i] and xval[left], 
    // then update the bandwidthInterval
    if (nextRight < xval.Length && xval [nextRight] - xval [i] < xval [i] - xval [left]) {
        bandwidthInterval [0] = nextLeft;
        bandwidthInterval [1] = nextRight;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
472
6
Gpt3D_Clone472_6.cs 1 10
Gpt3D_Clone472_6.cs 11 26
----------------------------------------

private static void updateBandwidthInterval (double [] xval, int i, int [] bandwidthInterval) {
    int left = bandwidthInterval [0];
    int right = bandwidthInterval [1];
    int nextRight = nextNonzero (weights, right);
    if (nextRight < xval.Length && xval [nextRight] - xval [i] < xval [i] - xval [left]) {
        int nextLeft = nextNonzero (weights, bandwidthInterval [0]);
        bandwidthInterval [0] = nextLeft;
        bandwidthInterval [1] = nextRight;
    }
}
----------------------------------------

 private static void updateBandwidthInterval (double [] xval, int i, int [] bandwidthInterval) {
    // Get the next left index
    int nextLeft = nextNonzero (weights, bandwidthInterval [0]);
    // Get the next right index
    int nextRight = nextNonzero (weights, bandwidthInterval [1]);
    
    // Check if the next right index is smaller than the 
    // array size of xval and if the difference is smaller
    if (nextRight < xval.Length && xval [nextRight] - xval [i] < xval [i] - xval [bandwidthInterval[0]]) { 
        // Update the left and right indexes
        bandwidthInterval [0] = nextLeft;
        bandwidthInterval [1] = nextRight;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
472
7
Gpt3D_Clone472_7.cs 1 10
Gpt3D_Clone472_7.cs 11 22
----------------------------------------

private static void updateBandwidthInterval (double [] xval, int i, int [] bandwidthInterval) {
    int left = bandwidthInterval [0];
    int right = bandwidthInterval [1];
    int nextRight = nextNonzero (weights, right);
    if (nextRight < xval.Length && xval [nextRight] - xval [i] < xval [i] - xval [left]) {
        int nextLeft = nextNonzero (weights, bandwidthInterval [0]);
        bandwidthInterval [0] = nextLeft;
        bandwidthInterval [1] = nextRight;
    }
}
----------------------------------------

 private static void updateBandwidthInterval(double [] xval, int i, int [] bandwidthInterval){
    int nextRight = nextNonzero(weights,bandwidthInterval[1]);
    int nextLeft = nextNonzero(weights,bandwidthInterval[0]);
    
    //Check if the difference in elements is smaller 
    if(nextRight < xval.Length && (xval[nextRight] - xval[i]) < (xval[i] - xval[nextLeft])) {
        bandwidthInterval[0] = nextLeft; // Replace left with the next left  
        bandwidthInterval[1] = nextRight; // Replace right with the next right
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
472
8
Gpt3D_Clone472_8.cs 1 10
Gpt3D_Clone472_8.cs 11 23
----------------------------------------

private static void updateBandwidthInterval (double [] xval, int i, int [] bandwidthInterval) {
    int left = bandwidthInterval [0];
    int right = bandwidthInterval [1];
    int nextRight = nextNonzero (weights, right);
    if (nextRight < xval.Length && xval [nextRight] - xval [i] < xval [i] - xval [left]) {
        int nextLeft = nextNonzero (weights, bandwidthInterval [0]);
        bandwidthInterval [0] = nextLeft;
        bandwidthInterval [1] = nextRight;
    }
}
----------------------------------------

 private static void updateBandwidthInterval(double [] xval, int i, int [] bandwidthInterval){
    int nextRight = nextNonzero(weights, bandwidthInterval[1]); //get the index of the next nonzero element
    int nextLeft = nextNonzero(weights, bandwidthInterval[0]); //get the index of the next nonzero element
    
    //Check if the difference of the xval elements is less than the original 
    if(nextRight < xval.Length && (xval[nextRight] - xval[i]) < (xval[i] - xval[bandwidthInterval[0]])){
        bandwidthInterval[0] = nextLeft;  //update the left
        bandwidthInterval[1] = nextRight; //update the right
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
472
9
Gpt3D_Clone472_9.cs 1 10
Gpt3D_Clone472_9.cs 11 21
----------------------------------------

private static void updateBandwidthInterval (double [] xval, int i, int [] bandwidthInterval) {
    int left = bandwidthInterval [0];
    int right = bandwidthInterval [1];
    int nextRight = nextNonzero (weights, right);
    if (nextRight < xval.Length && xval [nextRight] - xval [i] < xval [i] - xval [left]) {
        int nextLeft = nextNonzero (weights, bandwidthInterval [0]);
        bandwidthInterval [0] = nextLeft;
        bandwidthInterval [1] = nextRight;
    }
}
----------------------------------------

 private static void updateBandwidthInterval(double [] xval, int i, int [] bandwidthInterval){
    int nextRight = nextNonzero(weights,bandwidthInterval[1]);
    int nextLeft = nextNonzero(weights,bandwidthInterval[0]);
    if(nextRight < xval.Length && (xval[nextRight] - xval[i]) < (xval[i] - xval[nextLeft])){
        bandwidthInterval[0] = nextLeft; //update left
        bandwidthInterval[0] = nextRight; //update right
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
473
0
Gpt3D_Clone473_0.cs 1 10
Gpt3D_Clone473_0.cs 11 22
----------------------------------------

public void WriteXml (XmlWriter writer) {
    using (MemoryStream ms = new MemoryStream ())
    {
        using (XmlWriter innerWriter = XmlWriter.Create (ms, new XmlWriterSettings {OmitXmlDeclaration = true}))
        {
            shipmentInfoSerializer.Serialize (innerWriter, this.Shipment);
            innerWriter.Flush ();
            writer.WriteCData (Encoding.UTF8.GetString (ms.ToArray ()));
        }}
}
----------------------------------------

 public void WriteXml (XmlWriter writer) {
    using (MemoryStream ms = new MemoryStream()) {
        XmlSerializer serializer = new XmlSerializer(typeof(Shipment));
        serializer.Serialize(ms, this.Shipment);
        ms.Position = 0;
        using (XmlReader reader = XmlReader.Create(ms)) {
            writer.WriteCData(reader.ReadOuterXml());
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
473
1
Gpt3D_Clone473_1.cs 1 10
Gpt3D_Clone473_1.cs 11 23
----------------------------------------

public void WriteXml (XmlWriter writer) {
    using (MemoryStream ms = new MemoryStream ())
    {
        using (XmlWriter innerWriter = XmlWriter.Create (ms, new XmlWriterSettings {OmitXmlDeclaration = true}))
        {
            shipmentInfoSerializer.Serialize (innerWriter, this.Shipment);
            innerWriter.Flush ();
            writer.WriteCData (Encoding.UTF8.GetString (ms.ToArray ()));
        }}
}
----------------------------------------

 public void WriteXml (XmlWriter writer) {
    XmlSerializer xmlSerializer = new XmlSerializer(typeof(Shipment));
    using (MemoryStream memoryStream = new MemoryStream())
    {
        xmlSerializer.Serialize(memoryStream, this.Shipment);
        memoryStream.Position = 0;
        XmlDocument xmlDocument = new XmlDocument();
        xmlDocument.Load(memoryStream);
        writer.WriteCData(xmlDocument.OuterXml);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
473
2
Gpt3D_Clone473_2.cs 1 10
Gpt3D_Clone473_2.cs 11 23
----------------------------------------

public void WriteXml (XmlWriter writer) {
    using (MemoryStream ms = new MemoryStream ())
    {
        using (XmlWriter innerWriter = XmlWriter.Create (ms, new XmlWriterSettings {OmitXmlDeclaration = true}))
        {
            shipmentInfoSerializer.Serialize (innerWriter, this.Shipment);
            innerWriter.Flush ();
            writer.WriteCData (Encoding.UTF8.GetString (ms.ToArray ()));
        }}
}
----------------------------------------

 public void WriteXml (XmlWriter writer) {
    using (Stream stream = new MemoryStream())
    {
        shipmentInfoSerializer.Serialize(stream, this.Shipment);
        stream.Seek(0, 0);
        using (StreamReader reader = new StreamReader(stream))
        {
            writer.WriteCData(reader.ReadToEnd());
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
473
3
Gpt3D_Clone473_3.cs 1 10
Gpt3D_Clone473_3.cs 11 21
----------------------------------------

public void WriteXml (XmlWriter writer) {
    using (MemoryStream ms = new MemoryStream ())
    {
        using (XmlWriter innerWriter = XmlWriter.Create (ms, new XmlWriterSettings {OmitXmlDeclaration = true}))
        {
            shipmentInfoSerializer.Serialize (innerWriter, this.Shipment);
            innerWriter.Flush ();
            writer.WriteCData (Encoding.UTF8.GetString (ms.ToArray ()));
        }}
}
----------------------------------------

 public void WriteXml (XmlWriter writer) {
    XmlDocument doc = new XmlDocument();
    XmlElement root = doc.CreateElement("Root");
    doc.AppendChild(root);
    shipmentInfoSerializer.Serialize(doc, root, this.Shipment);
    MemoryStream ms = new MemoryStream();
    doc.Save(ms);
    writer.WriteCData(Encoding.UTF8.GetString(ms.ToArray()));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
473
4
Gpt3D_Clone473_4.cs 1 10
Gpt3D_Clone473_4.cs 11 22
----------------------------------------

public void WriteXml (XmlWriter writer) {
    using (MemoryStream ms = new MemoryStream ())
    {
        using (XmlWriter innerWriter = XmlWriter.Create (ms, new XmlWriterSettings {OmitXmlDeclaration = true}))
        {
            shipmentInfoSerializer.Serialize (innerWriter, this.Shipment);
            innerWriter.Flush ();
            writer.WriteCData (Encoding.UTF8.GetString (ms.ToArray ()));
        }}
}
----------------------------------------

 public void WriteXml (XmlWriter writer) {
    string xmlString;
    using (XmlWriter innerWriter = XmlWriter.Create(new MemoryStream(), new XmlWriterSettings { OmitXmlDeclaration = true }))
    {
        shipmentInfoSerializer.Serialize(innerWriter, this.shipment);
        innerWriter.Flush();
        xmlString = Encoding.UTF8.GetString(innerWriter.Flush());
    }
    writer.WriteCData(xmlString);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
473
5
Gpt3D_Clone473_5.cs 1 10
Gpt3D_Clone473_5.cs 11 20
----------------------------------------

public void WriteXml (XmlWriter writer) {
    using (MemoryStream ms = new MemoryStream ())
    {
        using (XmlWriter innerWriter = XmlWriter.Create (ms, new XmlWriterSettings {OmitXmlDeclaration = true}))
        {
            shipmentInfoSerializer.Serialize (innerWriter, this.Shipment);
            innerWriter.Flush ();
            writer.WriteCData (Encoding.UTF8.GetString (ms.ToArray ()));
        }}
}
----------------------------------------

 public void WriteXml (XmlWriter writer) {
    using (StreamWriter streamWriter = new StreamWriter(new MemoryStream(), Encoding.UTF8))
    {
        shipmentInfoSerializer.Serialize(streamWriter, this.shipment);
        streamWriter.Flush();
        writer.WriteCData(Encoding.UTF8.GetString((streamWriter.BaseStream as MemoryStream).ToArray()));
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
473
6
Gpt3D_Clone473_6.cs 1 10
Gpt3D_Clone473_6.cs 11 20
----------------------------------------

public void WriteXml (XmlWriter writer) {
    using (MemoryStream ms = new MemoryStream ())
    {
        using (XmlWriter innerWriter = XmlWriter.Create (ms, new XmlWriterSettings {OmitXmlDeclaration = true}))
        {
            shipmentInfoSerializer.Serialize (innerWriter, this.Shipment);
            innerWriter.Flush ();
            writer.WriteCData (Encoding.UTF8.GetString (ms.ToArray ()));
        }}
}
----------------------------------------

 public void WriteXml (XmlWriter writer) {
    var stringBuilder = new StringBuilder();
    using (XmlWriter stringWriter = XmlWriter.Create(stringBuilder))
    {
        shipmentInfoSerializer.Serialize(stringWriter, this.Shipment);
    }
    writer.WriteCData(stringBuilder.ToString());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
473
8
Gpt3D_Clone473_8.cs 1 10
Gpt3D_Clone473_8.cs 11 18
----------------------------------------

public void WriteXml (XmlWriter writer) {
    using (MemoryStream ms = new MemoryStream ())
    {
        using (XmlWriter innerWriter = XmlWriter.Create (ms, new XmlWriterSettings {OmitXmlDeclaration = true}))
        {
            shipmentInfoSerializer.Serialize (innerWriter, this.Shipment);
            innerWriter.Flush ();
            writer.WriteCData (Encoding.UTF8.GetString (ms.ToArray ()));
        }}
}
----------------------------------------

 public void WriteXml (XmlWriter writer) {
    Stream stream = new MemoryStream();
    shipmentInfoSerializer.Serialize(stream, this.Shipment);
    stream.Flush();
    writer.WriteCData(Encoding.UTF8.GetString(stream.ToArray()));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
473
9
Gpt3D_Clone473_9.cs 1 10
Gpt3D_Clone473_9.cs 11 18
----------------------------------------

public void WriteXml (XmlWriter writer) {
    using (MemoryStream ms = new MemoryStream ())
    {
        using (XmlWriter innerWriter = XmlWriter.Create (ms, new XmlWriterSettings {OmitXmlDeclaration = true}))
        {
            shipmentInfoSerializer.Serialize (innerWriter, this.Shipment);
            innerWriter.Flush ();
            writer.WriteCData (Encoding.UTF8.GetString (ms.ToArray ()));
        }}
}
----------------------------------------

 public void WriteXml (XmlWriter writer) {
    XDocument doc = new XDocument();
    shipmentInfoSerializer.Serialize(doc, this.Shipment);
    string xmlString = doc.ToString();
    writer.WriteCData(xmlString);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
481
9
Gpt3D_Clone481_9.cs 1 29
Gpt3D_Clone481_9.cs 30 59
----------------------------------------

private static void note () {
    int [] i = new int [1];
    do
        {
            Console.WriteLine ("Please enter test result");
            bool result = int.TryParse (Console.ReadLine (), out i [0]);
            if (! result) {
                Console.WriteLine ("Please enter a number");
                continue;
            }
            if (i [0] == 999) {
                Console.WriteLine ("You entered 999 to stop");
                break;
            } else if (i [0] < 0 || i [0] > 100) {
                Console.WriteLine ("Enter a value between 0 and 100");
            } else if (i [0] >= 90) {
                Console.WriteLine ("note is A");
            } else if (i [0] >= 80) {
                Console.WriteLine ("note is B");
            } else if (i [0] >= 70) {
                Console.WriteLine ("note is C");
            } else if (i [0] >= 60) {
                Console.WriteLine ("note is D");
            } else if (i [0] < 60) {
                Console.WriteLine ("Failure");
            }
            Console.WriteLine ("Your result is:" + i [0]);
        } while (true);
}
----------------------------------------

 private static void note(){ 
	Console.WriteLine("Please enter test result"); 
	int result = Int32.Parse(Console.ReadLine()); 
	if (result == 999) { 
		Console.WriteLine("You have entered 999 to stop"); 
		break; 
	} 
	if (result < 0){ 
		Console.WriteLine("Enter a value between 0 and 100"); 
	} 
	else if (result >= 90){ 
		Console.WriteLine("Grade is A"); 
	} 
	else if(result >= 80){ 
		Console.WriteLine("Grade is B"); 
	} 
	else if(result >= 70){ 
		Console.WriteLine("Grade is C"); 
	} 
	else if(result >= 60){ 
		Console.WriteLine("Grade is D"); 
	} 
	else { 
		Console.WriteLine("Failure"); 
	} 
	Console.WriteLine("Your Result is: " + result); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
482
0
Gpt3D_Clone482_0.cs 1 10
Gpt3D_Clone482_0.cs 11 22
----------------------------------------

public static int Next (int min, int max) {
    if (min >= max) {
        throw new ArgumentException ("Min value is greater or equals than Max value.");
    }
    byte [] intBytes = new byte [4];
    using (RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ())
    {
        rng.GetNonZeroBytes (intBytes);
    } return min + Math.Abs (BitConverter.ToInt32 (intBytes, 0)) % (max - min + 1);
}
----------------------------------------

  public static int Next (int min, int max) {
    if (min >= max) {
        throw new ArgumentException ("Min value is greater or equals than Max value.");
    }
    int result; 
    do {
      result = random.Next(min, max);
    } while (result == min || result == max); 
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
482
1
Gpt3D_Clone482_1.cs 1 10
Gpt3D_Clone482_1.cs 11 22
----------------------------------------

public static int Next (int min, int max) {
    if (min >= max) {
        throw new ArgumentException ("Min value is greater or equals than Max value.");
    }
    byte [] intBytes = new byte [4];
    using (RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ())
    {
        rng.GetNonZeroBytes (intBytes);
    } return min + Math.Abs (BitConverter.ToInt32 (intBytes, 0)) % (max - min + 1);
}
----------------------------------------

 public static int Next (int min, int max) {
    if (min >= max) {
        throw new ArgumentException ("Min value is greater or equals than Max value.");
    }
    int result;
    do {
       result = random.Next(min, max);
    } while (result < min || result > max); 
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
482
6
Gpt3D_Clone482_6.cs 1 10
Gpt3D_Clone482_6.cs 11 20
----------------------------------------

public static int Next (int min, int max) {
    if (min >= max) {
        throw new ArgumentException ("Min value is greater or equals than Max value.");
    }
    byte [] intBytes = new byte [4];
    using (RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ())
    {
        rng.GetNonZeroBytes (intBytes);
    } return min + Math.Abs (BitConverter.ToInt32 (intBytes, 0)) % (max - min + 1);
}
----------------------------------------

 public static int Next (int min, int max) {
    if (min >= max) {
        throw new ArgumentException ("Min value is greater or equals than Max value.");
    }
    Random r = new Random();
    int randomNum = r.Next(min, max); 
    return randomNum; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
482
7
Gpt3D_Clone482_7.cs 1 10
Gpt3D_Clone482_7.cs 11 20
----------------------------------------

public static int Next (int min, int max) {
    if (min >= max) {
        throw new ArgumentException ("Min value is greater or equals than Max value.");
    }
    byte [] intBytes = new byte [4];
    using (RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ())
    {
        rng.GetNonZeroBytes (intBytes);
    } return min + Math.Abs (BitConverter.ToInt32 (intBytes, 0)) % (max - min + 1);
}
----------------------------------------

 public static int Next (int min, int max) {
    if (min >= max) {
        throw new ArgumentException ("Min value is greater or equals than Max value.");
    }
    SecureRandom random = new SecureRandom();
    return min + random.NextInt(max - min + 1);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
482
8
Gpt3D_Clone482_8.cs 1 10
Gpt3D_Clone482_8.cs 11 19
----------------------------------------

public static int Next (int min, int max) {
    if (min >= max) {
        throw new ArgumentException ("Min value is greater or equals than Max value.");
    }
    byte [] intBytes = new byte [4];
    using (RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ())
    {
        rng.GetNonZeroBytes (intBytes);
    } return min + Math.Abs (BitConverter.ToInt32 (intBytes, 0)) % (max - min + 1);
}
----------------------------------------

 public static int Next (int min, int max) {
    if (min >= max) {
        throw new ArgumentException ("Min value is greater or equals than Max value.");
    }
    Random rand = new Random();
    return min + (rand.Next(max - min + 1)); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
492
0
Gpt3D_Clone492_0.cs 1 8
Gpt3D_Clone492_0.cs 9 25
----------------------------------------

static public void HideColumn (GridView gv, int columnIndex) {
    if (gv.HeaderRow != null)
        gv.HeaderRow.Cells [columnIndex].Style.Add ("display", "none");
    foreach (GridViewRow row in gv.Rows) {
        if (row.RowType == DataControlRowType.DataRow)
            row.Cells [columnIndex].Style.Add ("display", "none");
    }
}
----------------------------------------

 static public void HideColumn (GridView gv, int columnIndex) {
    foreach (TableCell header in gv.HeaderRow.Cells)
    {
        if (header.Text == columnIndex)
            header.Style.Add ("display", "none");
    }
    foreach (GridViewRow row in gv.Rows) 
    {
        foreach (TableCell cell in gv.Rows[row.RowIndex].Cells)
        {
            if (cell.Text == columnIndex)
                cell.Style.Add ("display", "none");
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
492
1
Gpt3D_Clone492_1.cs 1 8
Gpt3D_Clone492_1.cs 9 25
----------------------------------------

static public void HideColumn (GridView gv, int columnIndex) {
    if (gv.HeaderRow != null)
        gv.HeaderRow.Cells [columnIndex].Style.Add ("display", "none");
    foreach (GridViewRow row in gv.Rows) {
        if (row.RowType == DataControlRowType.DataRow)
            row.Cells [columnIndex].Style.Add ("display", "none");
    }
}
----------------------------------------

 static public void HideColumn (GridView gv, int columnIndex) {
    foreach (TableCell header in gv.HeaderRow.Cells)
    {
       if (header.Text == columnIndex)
           header.Visible = false;
    }
    foreach (GridViewRow row in gv.Rows) 
    {
        foreach (TableCell cell in gv.Rows[row.RowIndex].Cells)
        {
            if (cell.Text == columnIndex)
                cell.Visible = false;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
492
2
Gpt3D_Clone492_2.cs 1 8
Gpt3D_Clone492_2.cs 9 25
----------------------------------------

static public void HideColumn (GridView gv, int columnIndex) {
    if (gv.HeaderRow != null)
        gv.HeaderRow.Cells [columnIndex].Style.Add ("display", "none");
    foreach (GridViewRow row in gv.Rows) {
        if (row.RowType == DataControlRowType.DataRow)
            row.Cells [columnIndex].Style.Add ("display", "none");
    }
}
----------------------------------------

 static public void HideColumn (GridView gv, int columnIndex) {
    foreach (TableCell header in gv.HeaderRow.Cells)
    {
        if (header.Text == columnIndex)
            header.Attributes ["style"] = "display:none";
    }
    foreach (GridViewRow row in gv.Rows) 
    {
        foreach (TableCell cell in gv.Rows[row.RowIndex].Cells)
        {
            if (cell.Text == columnIndex)
                cell.Attributes ["style"] = "display:none";
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
492
6
Gpt3D_Clone492_6.cs 1 8
Gpt3D_Clone492_6.cs 9 13
----------------------------------------

static public void HideColumn (GridView gv, int columnIndex) {
    if (gv.HeaderRow != null)
        gv.HeaderRow.Cells [columnIndex].Style.Add ("display", "none");
    foreach (GridViewRow row in gv.Rows) {
        if (row.RowType == DataControlRowType.DataRow)
            row.Cells [columnIndex].Style.Add ("display", "none");
    }
}
----------------------------------------

 static public void HideColumn (GridView gv, int columnIndex) {
    gv.Columns [columnIndex].Style.Add ("display", "none");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
492
7
Gpt3D_Clone492_7.cs 1 8
Gpt3D_Clone492_7.cs 9 13
----------------------------------------

static public void HideColumn (GridView gv, int columnIndex) {
    if (gv.HeaderRow != null)
        gv.HeaderRow.Cells [columnIndex].Style.Add ("display", "none");
    foreach (GridViewRow row in gv.Rows) {
        if (row.RowType == DataControlRowType.DataRow)
            row.Cells [columnIndex].Style.Add ("display", "none");
    }
}
----------------------------------------

 static public void HideColumn (GridView gv, int columnIndex) {
    gv.Columns [columnIndex].Attributes ["style"] = "display:none";
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
492
8
Gpt3D_Clone492_8.cs 1 8
Gpt3D_Clone492_8.cs 9 13
----------------------------------------

static public void HideColumn (GridView gv, int columnIndex) {
    if (gv.HeaderRow != null)
        gv.HeaderRow.Cells [columnIndex].Style.Add ("display", "none");
    foreach (GridViewRow row in gv.Rows) {
        if (row.RowType == DataControlRowType.DataRow)
            row.Cells [columnIndex].Style.Add ("display", "none");
    }
}
----------------------------------------

 static public void HideColumn (GridView gv, int columnIndex) {
    gv.Columns [columnIndex].Visible = false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
493
0
Gpt3D_Clone493_0.cs 1 12
Gpt3D_Clone493_0.cs 13 33
----------------------------------------

private void fillTheListBox (string filePath) {
    List < string > results = new List < string > ();
    string currentLine = string.Empty;
    using (StreamReader sr = new StreamReader (filePath))
    {
        while ((currentLine = sr.ReadLine ()) != null) {
            foreach (string item in currentLine.Split (',')) {
                results.Add (item);
            }
        }
    } lstbx.DataSource = results;
}
----------------------------------------

 public void fillTheListBox (string filePath) 
{
    List < string > results = new List < string > ();
    string line;
    using (StreamReader sr = new StreamReader (filePath))
    {
        while ((line = sr.ReadLine ()) != null) 
        {
            char[] delimiter = {','};
            string[] values = line.Split (delimiter);
            for (int i = 0; i < values.Length; i++)
            {
                results.Add (values[i]);
            }
        }
    } 
    lstbx.DataSource = results;
    lstbx.DataBind();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
493
2
Gpt3D_Clone493_2.cs 1 12
Gpt3D_Clone493_2.cs 13 33
----------------------------------------

private void fillTheListBox (string filePath) {
    List < string > results = new List < string > ();
    string currentLine = string.Empty;
    using (StreamReader sr = new StreamReader (filePath))
    {
        while ((currentLine = sr.ReadLine ()) != null) {
            foreach (string item in currentLine.Split (',')) {
                results.Add (item);
            }
        }
    } lstbx.DataSource = results;
}
----------------------------------------

 private void fillTheListBox (string filePath) 
{
    List < string > results = new List < string > ();
    using (var sr = new StreamReader (filePath))
    {
        while (!sr.EndOfStream)
        {
            var line = sr.ReadLine();
            string[] arr = (line.Split (','));
            foreach (string item in arr)
            {
                results.Add (item);
            } 
        }
        lstbx.DataSource = results;
        lstbx.DataBind();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
493
3
Gpt3D_Clone493_3.cs 1 12
Gpt3D_Clone493_3.cs 13 32
----------------------------------------

private void fillTheListBox (string filePath) {
    List < string > results = new List < string > ();
    string currentLine = string.Empty;
    using (StreamReader sr = new StreamReader (filePath))
    {
        while ((currentLine = sr.ReadLine ()) != null) {
            foreach (string item in currentLine.Split (',')) {
                results.Add (item);
            }
        }
    } lstbx.DataSource = results;
}
----------------------------------------

 public void fillTheListBox (string filePath) 
{
    List < string > results = new List < string > ();
    string line;
    using (StreamReader sr = new StreamReader (filePath))
    {
        while ((line = sr.ReadLine ()) != null) 
        {
            string[] values = line.Split (',');
            for (int i = 0; i < values.Length; i++)
            {
                results.Add (values[i]);
            }
        }
    } 
    lstbx.DataSource = results;
    lstbx.DataBind();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
493
7
Gpt3D_Clone493_7.cs 1 12
Gpt3D_Clone493_7.cs 13 30
----------------------------------------

private void fillTheListBox (string filePath) {
    List < string > results = new List < string > ();
    string currentLine = string.Empty;
    using (StreamReader sr = new StreamReader (filePath))
    {
        while ((currentLine = sr.ReadLine ()) != null) {
            foreach (string item in currentLine.Split (',')) {
                results.Add (item);
            }
        }
    } lstbx.DataSource = results;
}
----------------------------------------

 private void fillTheListBox (string filePath) 
{
    List < string > results = new List < string > ();
    String allLines = File.ReadAllText(filePath);
    string[] lines = allLines.Split('\n');
    foreach (string line in lines) 
    {
        string[] elements = line.Split(','); 
        foreach(String element in elements) 
        {
            results.Add (element); 
        }
    }
    lstbx.DataSource = results;
    lstbx.DataBind();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
493
8
Gpt3D_Clone493_8.cs 1 12
Gpt3D_Clone493_8.cs 13 22
----------------------------------------

private void fillTheListBox (string filePath) {
    List < string > results = new List < string > ();
    string currentLine = string.Empty;
    using (StreamReader sr = new StreamReader (filePath))
    {
        while ((currentLine = sr.ReadLine ()) != null) {
            foreach (string item in currentLine.Split (',')) {
                results.Add (item);
            }
        }
    } lstbx.DataSource = results;
}
----------------------------------------

 private void fillTheListBox (string filePath)
{
    List < string > values = File.ReadAllLines(filePath)
        .SelectMany(x => x.Split(','))
        .ToList();
    lstbx.DataSource = values; 
    lstbx.DataBind();
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
496
0
Gpt3D_Clone496_0.cs 1 13
Gpt3D_Clone496_0.cs 14 26
----------------------------------------

private BitmapSource BitmaptoBitmapsource (System.Drawing.Bitmap bitmap) {
    BitmapSource bms;
    IntPtr hBitmap = bitmap.GetHbitmap ();
    BitmapSizeOptions sizeOptions = BitmapSizeOptions.FromEmptyOptions ();
    try {
        bms = System.Windows.Interop.Imaging.CreateBitmapSourceFromHBitmap (hBitmap, IntPtr.Zero, Int32Rect.Empty, sizeOptions);
        bms.Freeze ();
    }
    finally {
        DeleteObject (hBitmap);
    }
    return bms;
}
----------------------------------------

  private BitmapSource BitmaptoBitmapsource (System.Drawing.Bitmap bitmap) {
    BitmapSource bitmapSource;
    using (MemoryStream ms = new MemoryStream())
    {
        bitmap.Save (ms);
        bitmapSource = BitmapFrame.Create(ms);
        bitmapSource.Freeze();
    }
    return bitmapSource;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
499
1
Gpt3D_Clone499_1.cs 1 22
Gpt3D_Clone499_1.cs 23 48
----------------------------------------

static void Main (string [] args) {
    var EDGES = new List < Edge > ();
    EDGES.Add (new Edge (new Point (5, 50), new Point (20, 100)));
    EDGES.Add (new Edge (new Point (20, 100), new Point (30, 50)));
    EDGES.Add (new Edge (new Point (30, 50), new Point (10, 0)));
    EDGES.Add (new Edge (new Point (5, 50), new Point (30, 50)));
    EDGES.Add (new Edge (new Point (5, 50), new Point (10, 0)));
    EDGES.Add (new Edge (new Point (20, 100), new Point (80, 100)));
    EDGES.Add (new Edge (new Point (10, 0), new Point (80, 100)));
    var POINTS = new List < double [] > (EDGES.Count * 2);
    FillPoints (EDGES, ref POINTS);
    for (int i = 0; i < POINTS.Count; i ++) {
        Console.WriteLine ("{0} {1} {2}", i, POINTS [i] [0], POINTS [i] [1]);
    }
    Console.WriteLine ();
    var edgeIndices = new int [EDGES.Count, 2];
    FillEdges (EDGES, POINTS, ref edgeIndices);
    for (int i = 0; i < edgeIndices.GetLength (0); i ++) {
        Console.WriteLine ("({0}, {1})", edgeIndices [i, 0], edgeIndices [i, 1]);
    }
    Console.ReadKey (true);
}
----------------------------------------

 static void Main (string [] args) {
    SortedList<int, Edge> EDGES = new SortedList<int, Edge>();
    EDGES.Add (0, new Edge (new Point (5, 50), new Point (20, 100)));
    EDGES.Add (1, new Edge (new Point (20, 100), new Point (30, 50)));
    EDGES.Add (2, new Edge (new Point (30, 50), new Point (10, 0)));
    EDGES.Add (3, new Edge (new Point (5, 50), new Point (30, 50)));
    EDGES.Add (4, new Edge (new Point (5, 50), new Point (10, 0)));
    EDGES.Add (5, new Edge (new Point (20, 100), new Point (80, 100)));
    EDGES.Add (6, new Edge (new Point (10, 0), new Point (80, 100)));
    List<double[]> POINTS = new List<double[]>(EDGES.Count * 2);
    FillPoints(EDGES, ref POINTS);
    for (int i = 0; i < POINTS.Count; i++)
    {
        Console.WriteLine("{0} {1} {2}", i, POINTS[i][0], POINTS[i][1]);
    }
    Console.WriteLine();
    int[,] edgeIndices = new int[EDGES.Count, 2];
    FillEdges (EDGES, POINTS, ref edgeIndices);
    for (int i = 0; i < edgeIndices.GetLength(0); i++)
    {
        Console.WriteLine("({0}, {1})", edgeIndices[i, 0], edgeIndices[i, 1]);
    }
    Console.ReadKey(true);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
499
2
Gpt3D_Clone499_2.cs 1 22
Gpt3D_Clone499_2.cs 23 48
----------------------------------------

static void Main (string [] args) {
    var EDGES = new List < Edge > ();
    EDGES.Add (new Edge (new Point (5, 50), new Point (20, 100)));
    EDGES.Add (new Edge (new Point (20, 100), new Point (30, 50)));
    EDGES.Add (new Edge (new Point (30, 50), new Point (10, 0)));
    EDGES.Add (new Edge (new Point (5, 50), new Point (30, 50)));
    EDGES.Add (new Edge (new Point (5, 50), new Point (10, 0)));
    EDGES.Add (new Edge (new Point (20, 100), new Point (80, 100)));
    EDGES.Add (new Edge (new Point (10, 0), new Point (80, 100)));
    var POINTS = new List < double [] > (EDGES.Count * 2);
    FillPoints (EDGES, ref POINTS);
    for (int i = 0; i < POINTS.Count; i ++) {
        Console.WriteLine ("{0} {1} {2}", i, POINTS [i] [0], POINTS [i] [1]);
    }
    Console.WriteLine ();
    var edgeIndices = new int [EDGES.Count, 2];
    FillEdges (EDGES, POINTS, ref edgeIndices);
    for (int i = 0; i < edgeIndices.GetLength (0); i ++) {
        Console.WriteLine ("({0}, {1})", edgeIndices [i, 0], edgeIndices [i, 1]);
    }
    Console.ReadKey (true);
}
----------------------------------------

 static void Main (string [] args) {
    SortedDictionary<int, Edge> EDGES = new SortedDictionary<int, Edge>();
    EDGES.Add (0, new Edge (new Point (5, 50), new Point (20, 100)));
    EDGES.Add (1, new Edge (new Point (20, 100), new Point (30, 50)));
    EDGES.Add (2, new Edge (new Point (30, 50), new Point (10, 0)));
    EDGES.Add (3, new Edge (new Point (5, 50), new Point (30, 50)));
    EDGES.Add (4, new Edge (new Point (5, 50), new Point (10, 0)));
    EDGES.Add (5, new Edge (new Point (20, 100), new Point (80, 100)));
    EDGES.Add (6, new Edge (new Point (10, 0), new Point (80, 100)));
    List<double[]> POINTS = new List<double[]>(EDGES.Count * 2);
    FillPoints(EDGES, ref POINTS);
    for (int i = 0; i < POINTS.Count; i++)
    {
        Console.WriteLine("{0} {1} {2}", i, POINTS[i][0], POINTS[i][1]);
    }
    Console.WriteLine();
    int[,] edgeIndices = new int[EDGES.Count, 2];
    FillEdges (EDGES, POINTS, ref edgeIndices);
    for (int i = 0; i < edgeIndices.GetLength(0); i++)
    {
        Console.WriteLine("({0}, {1})", edgeIndices[i, 0], edgeIndices[i, 1]);
    }
    Console.ReadKey(true);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
4
0
Gpt3D_Clone4_0.cs 1 9
Gpt3D_Clone4_0.cs 10 24
----------------------------------------

public static long fibo_n (long N) {
    if (N <= 0)
        return 0;
    if (N == 1)
        return 1;
    if (N <= 4)
        return N - 1;
    return fibo_n (N - 1) + fibo_n (N - 2);
}
----------------------------------------

 public static long fibo_n (long N) {
    if (N <= 0)
        return 0;
    if (N == 1) 
        return 1;
    if (N == 2) 
        return 1;
    if (N == 3) 
        return 2;
    if (N == 4)
        return 3;
    return fibo_n (N - 1) + fibo_n (N - 2);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
4
1
Gpt3D_Clone4_1.cs 1 9
Gpt3D_Clone4_1.cs 10 22
----------------------------------------

public static long fibo_n (long N) {
    if (N <= 0)
        return 0;
    if (N == 1)
        return 1;
    if (N <= 4)
        return N - 1;
    return fibo_n (N - 1) + fibo_n (N - 2);
}
----------------------------------------

 public static double fibo_n(double N) {
	if (N <= 0)
		return 0.0;
	if (N == 1.0 || N == 2.0)
		return 1.0;
	if (N == 3.0) 
		return 2.0;
	if (N == 4.0)
		return 3.0;
	return fibo_n(N-1.0) + fibo_n(N-2.0);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
4
3
Gpt3D_Clone4_3.cs 1 9
Gpt3D_Clone4_3.cs 10 22
----------------------------------------

public static long fibo_n (long N) {
    if (N <= 0)
        return 0;
    if (N == 1)
        return 1;
    if (N <= 4)
        return N - 1;
    return fibo_n (N - 1) + fibo_n (N - 2);
}
----------------------------------------

 public static long fibo_n (long N) {
    if (N < 0) 
        return 0;
    if (N == 0 || N == 1)
        return 1;
    if (N == 2 || N == 3)
        return N - 1;
    if (N == 4)
        return 3;
    return fibo_n (N - 1) + fibo_n (N - 2);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
4
4
Gpt3D_Clone4_4.cs 1 9
Gpt3D_Clone4_4.cs 10 22
----------------------------------------

public static long fibo_n (long N) {
    if (N <= 0)
        return 0;
    if (N == 1)
        return 1;
    if (N <= 4)
        return N - 1;
    return fibo_n (N - 1) + fibo_n (N - 2);
}
----------------------------------------

 public static int fibo_n (int number) {
    if (number <= 0) 
        return 0;
    if (number == 1 || number == 2) 
        return 1;
    if (number == 3)
        return 2;
    if (number == 4) 
        return 3;
    return fibo_n (number - 1) + fibo_n (number - 2);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
4
6
Gpt3D_Clone4_6.cs 1 9
Gpt3D_Clone4_6.cs 10 22
----------------------------------------

public static long fibo_n (long N) {
    if (N <= 0)
        return 0;
    if (N == 1)
        return 1;
    if (N <= 4)
        return N - 1;
    return fibo_n (N - 1) + fibo_n (N - 2);
}
----------------------------------------

 public static long fibo_n (int N) {
	if (N <= 0)
		return 0;
	if (N <= 2)
		return 1;
	if (N == 3) 
		return 2;
	if (N == 4)
		return 3;
	return fibo_n (N - 1) + fibo_n (N - 2);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
4
7
Gpt3D_Clone4_7.cs 1 9
Gpt3D_Clone4_7.cs 10 22
----------------------------------------

public static long fibo_n (long N) {
    if (N <= 0)
        return 0;
    if (N == 1)
        return 1;
    if (N <= 4)
        return N - 1;
    return fibo_n (N - 1) + fibo_n (N - 2);
}
----------------------------------------

 public static int fibo_n (int N) {
    if (N < 0) 
        return 0;
    if (N == 0 || N == 1)
        return 1;
    if (N == 2 || N == 3)
        return N - 1;
    if (N == 4) 
        return 3;
    return fibo_n (N - 1) + fibo_n (N - 2);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
4
8
Gpt3D_Clone4_8.cs 1 9
Gpt3D_Clone4_8.cs 10 22
----------------------------------------

public static long fibo_n (long N) {
    if (N <= 0)
        return 0;
    if (N == 1)
        return 1;
    if (N <= 4)
        return N - 1;
    return fibo_n (N - 1) + fibo_n (N - 2);
}
----------------------------------------

 public static int fibo_n (int n) {
	if (n <= 0) 
		return 0;
	if (n == 1 || n == 2) 
		return 1;
	if (n == 3) 
		return 2;
	if (n == 4)
		return 3;
    return fibo_n (n - 1) + fibo_n (n - 2);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
4
9
Gpt3D_Clone4_9.cs 1 9
Gpt3D_Clone4_9.cs 10 17
----------------------------------------

public static long fibo_n (long N) {
    if (N <= 0)
        return 0;
    if (N == 1)
        return 1;
    if (N <= 4)
        return N - 1;
    return fibo_n (N - 1) + fibo_n (N - 2);
}
----------------------------------------

 public static int nthFibonacci(int n) {
  if (n == 0 || n == 1 || n == 2) return n;
  if (n == 3) return 2;
  if (n == 4) return 3;
  return nthFibonacci(n - 1) + nthFibonacci(n - 2);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
506
0
Gpt3D_Clone506_0.cs 1 13
Gpt3D_Clone506_0.cs 14 28
----------------------------------------

private Bitmap GetSprite (bool anim, int tsIndex, int tileIdx) {
    Rectangle cloneRect;
    string prefix = (anim) ? "A" : "S";
    using (Bitmap b = new Bitmap (prefix + tsIndex.ToString () + ".png"))
    {
        if (anim) {
            cloneRect = new Rectangle (BaseObjects.A_AnimSpriteSets [tsIndex].StaticRecs [tileIdx].X, BaseObjects.A_AnimSpriteSets [tsIndex].StaticRecs [tileIdx].Y, BaseObjects.A_AnimSpriteSets [tsIndex].RecWidth, BaseObjects.A_AnimSpriteSets [tsIndex].RecHeight);
        } else {
            cloneRect = new Rectangle (BaseObjects.A_StaticSpriteSets [tsIndex].StaticRecs [tileIdx].X, BaseObjects.A_StaticSpriteSets [tsIndex].StaticRecs [tileIdx].Y, BaseObjects.A_StaticSpriteSets [tsIndex].RecWidth, BaseObjects.A_StaticSpriteSets [tsIndex].RecHeight);
        }
        return b.Clone (cloneRect, b.PixelFormat);
    }
}
----------------------------------------

 private Bitmap GetSprite (bool anim, int tsIndex, int tileIdx) {
    string prefix = anim ? "A" : "S";
    Rectangle cloneRect;
    using (Bitmap b = new Bitmap ($"{prefix}{tsIndex}.png"))
    {
        if (anim) {
            cloneRect = GetAnimRectangle(tsIndex, tileIdx);
        } else {
            cloneRect = GetStaticRectangle(tsIndex, tileIdx);
        }
        return b.Clone (cloneRect, b.PixelFormat);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
506
8
Gpt3D_Clone506_8.cs 1 13
Gpt3D_Clone506_8.cs 14 28
----------------------------------------

private Bitmap GetSprite (bool anim, int tsIndex, int tileIdx) {
    Rectangle cloneRect;
    string prefix = (anim) ? "A" : "S";
    using (Bitmap b = new Bitmap (prefix + tsIndex.ToString () + ".png"))
    {
        if (anim) {
            cloneRect = new Rectangle (BaseObjects.A_AnimSpriteSets [tsIndex].StaticRecs [tileIdx].X, BaseObjects.A_AnimSpriteSets [tsIndex].StaticRecs [tileIdx].Y, BaseObjects.A_AnimSpriteSets [tsIndex].RecWidth, BaseObjects.A_AnimSpriteSets [tsIndex].RecHeight);
        } else {
            cloneRect = new Rectangle (BaseObjects.A_StaticSpriteSets [tsIndex].StaticRecs [tileIdx].X, BaseObjects.A_StaticSpriteSets [tsIndex].StaticRecs [tileIdx].Y, BaseObjects.A_StaticSpriteSets [tsIndex].RecWidth, BaseObjects.A_StaticSpriteSets [tsIndex].RecHeight);
        }
        return b.Clone (cloneRect, b.PixelFormat);
    }
}
----------------------------------------

 private Bitmap GetSprite (bool anim, int tsIndex, int tileIdx) {
    Rectangle cloneRect;
    string prefix = anim ? "A" : "S";
    Bitmap b = new Bitmap (prefix + tsIndex.ToString () + ".png");
    
    if (anim) {
        cloneRect = GeAnimtRectangle(tsIndex, tileIdx);
    } else {
        cloneRect = GetStaticRectangle(tsIndex, tileIdx);
    }
    
    return b.Clone (cloneRect, b.PixelFormat); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
506
9
Gpt3D_Clone506_9.cs 1 13
Gpt3D_Clone506_9.cs 14 26
----------------------------------------

private Bitmap GetSprite (bool anim, int tsIndex, int tileIdx) {
    Rectangle cloneRect;
    string prefix = (anim) ? "A" : "S";
    using (Bitmap b = new Bitmap (prefix + tsIndex.ToString () + ".png"))
    {
        if (anim) {
            cloneRect = new Rectangle (BaseObjects.A_AnimSpriteSets [tsIndex].StaticRecs [tileIdx].X, BaseObjects.A_AnimSpriteSets [tsIndex].StaticRecs [tileIdx].Y, BaseObjects.A_AnimSpriteSets [tsIndex].RecWidth, BaseObjects.A_AnimSpriteSets [tsIndex].RecHeight);
        } else {
            cloneRect = new Rectangle (BaseObjects.A_StaticSpriteSets [tsIndex].StaticRecs [tileIdx].X, BaseObjects.A_StaticSpriteSets [tsIndex].StaticRecs [tileIdx].Y, BaseObjects.A_StaticSpriteSets [tsIndex].RecWidth, BaseObjects.A_StaticSpriteSets [tsIndex].RecHeight);
        }
        return b.Clone (cloneRect, b.PixelFormat);
    }
}
----------------------------------------

  private Bitmap GetSprite (bool anim, int tsIndex, int tileIdx) {
    string prefix = anim ? "A" : "S";
    Rectangle rect;
    using (Bitmap b = new Bitmap ($"{prefix}{tsIndex}.png"))
    {
        rect = anim ? 
            new Rectangle (BaseObjects.A_AnimSpriteSets[tsIndex].StaticRecs[tileIdx].X, BaseObjects.A_AnimSpriteSets[tsIndex].StaticRecs[tileIdx].Y, BaseObjects.A_AnimSpriteSets[tsIndex].RecWidth, BaseObjects.A_AnimSpriteSets[tsIndex].RecHeight) :
            new Rectangle (BaseObjects.A_StaticSpriteSets[tsIndex].StaticRecs[tileIdx].X, BaseObjects.A_StaticSpriteSets[tsIndex].StaticRecs[tileIdx].Y, BaseObjects.A_StaticSpriteSets[tsIndex].RecWidth, BaseObjects.A_StaticSpriteSets[tsIndex].RecHeight);
        return b.Clone (rect, b.PixelFormat);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
508
0
Gpt3D_Clone508_0.cs 1 10
Gpt3D_Clone508_0.cs 11 30
----------------------------------------

public override void PreBuildUp (IBuilderContext context) {
    if (context.BuildKey.Type != typeof (Logger)) {
        var loggerPolicy = context.Policies.Get < ILoggerPolicy > (LoggerExtension.LoggerBuildKey);
        if (loggerPolicy == null) {
            loggerPolicy = new LoggerPolicy ();
            context.Policies.Set < ILoggerPolicy > (loggerPolicy, LoggerExtension.LoggerBuildKey);
        }
        loggerPolicy.Push (context.BuildKey.Type);
    }
}
----------------------------------------

  public override void PreBuildUp(IBuilderContext context) 
{
    if (context.BuildKey.Type == typeof(Logger)) return;
    ILoggerPolicy loggerPolicy;
    if (context.Policies.ContainsKey(LoggerExtension.LoggerBuildKey)) 
    {
        loggerPolicy = context.Policies.Get<ILoggerPolicy>(LoggerExtension.LoggerBuildKey);
    }
    else
    {
        loggerPolicy = new LoggerPolicy();
        context.Policies.Set<ILoggerPolicy>(loggerPolicy, LoggerExtension.LoggerBuildKey);
    }
    
    loggerPolicy.Push(context.BuildKey.Type);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
508
6
Gpt3D_Clone508_6.cs 1 10
Gpt3D_Clone508_6.cs 11 24
----------------------------------------

public override void PreBuildUp (IBuilderContext context) {
    if (context.BuildKey.Type != typeof (Logger)) {
        var loggerPolicy = context.Policies.Get < ILoggerPolicy > (LoggerExtension.LoggerBuildKey);
        if (loggerPolicy == null) {
            loggerPolicy = new LoggerPolicy ();
            context.Policies.Set < ILoggerPolicy > (loggerPolicy, LoggerExtension.LoggerBuildKey);
        }
        loggerPolicy.Push (context.BuildKey.Type);
    }
}
----------------------------------------

  public override void PreBuildUp(IBuilderContext context)
{
    if(context.BuildKey.Type != typeof(Logger))
    {
        if(context.Policies.Get<ILoggerPolicy>(LoggerExtension.LoggerBuildKey) is null)
        {
            var loggerPolicy = new LoggerPolicy();
            context.Policies.Set<ILoggerPolicy>(loggerPolicy, LoggerExtension.LoggerBuildKey);
        }
        context.Policies.Get<ILoggerPolicy>(LoggerExtension.LoggerBuildKey).Push(context.BuildKey.Type);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
508
7
Gpt3D_Clone508_7.cs 1 10
Gpt3D_Clone508_7.cs 11 23
----------------------------------------

public override void PreBuildUp (IBuilderContext context) {
    if (context.BuildKey.Type != typeof (Logger)) {
        var loggerPolicy = context.Policies.Get < ILoggerPolicy > (LoggerExtension.LoggerBuildKey);
        if (loggerPolicy == null) {
            loggerPolicy = new LoggerPolicy ();
            context.Policies.Set < ILoggerPolicy > (loggerPolicy, LoggerExtension.LoggerBuildKey);
        }
        loggerPolicy.Push (context.BuildKey.Type);
    }
}
----------------------------------------

  public override void PreBuildUp(IBuilderContext context)
{
    if(context.BuildKey.Type != typeof(Logger))
    {
        if(!context.Policies.ContainsKey(LoggerExtension.LoggerBuildKey))
        {
            context.Policies.Set<ILoggerPolicy>(new LoggerPolicy(), LoggerExtension.LoggerBuildKey);
        }
        context.Policies.Get<ILoggerPolicy>(LoggerExtension.LoggerBuildKey).Push(context.BuildKey.Type);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
509
0
Gpt3D_Clone509_0.cs 1 16
Gpt3D_Clone509_0.cs 17 46
----------------------------------------

public static bool IsQueueAvailable (string queueName) {
    MessageQueue queue;
    try {
        queue = new MessageQueue (queueName);
        queue.Peek (new TimeSpan (0, 0, 5));
        return true;
    }
    catch (Exception ex) {
        if (ex is ArgumentException) {
            return false;
        } else if (ex is MessageQueueException) {
            return (((MessageQueueException) ex).MessageQueueErrorCode == MessageQueueErrorCode.IOTimeout);
        }
        return false;
    }
}
----------------------------------------

 public static bool IsQueueAvailable (string queueName) 
{
    MessageQueue queue;
    bool flag = false;
    
    try 
    {
        queue = new MessageQueue (queueName);
        
        if (queue.Peek(new TimeSpan (0, 0, 5)) != null)
            flag = true;
        else
            flag = false;
    }
    catch (ArgumentException)
    {
        flag = false;
    }
    catch (MessageQueueException ex)
    {
        if (ex.MessageQueueErrorCode == MessageQueueErrorCode.IOTimeout)
            flag = true;
        else
            flag = false;
    }
    
    return flag;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
509
1
Gpt3D_Clone509_1.cs 1 16
Gpt3D_Clone509_1.cs 17 41
----------------------------------------

public static bool IsQueueAvailable (string queueName) {
    MessageQueue queue;
    try {
        queue = new MessageQueue (queueName);
        queue.Peek (new TimeSpan (0, 0, 5));
        return true;
    }
    catch (Exception ex) {
        if (ex is ArgumentException) {
            return false;
        } else if (ex is MessageQueueException) {
            return (((MessageQueueException) ex).MessageQueueErrorCode == MessageQueueErrorCode.IOTimeout);
        }
        return false;
    }
}
----------------------------------------

 public static bool IsQueueAvailable (string queueName) 
{
    MessageQueue queue;
    try 
    {
        queue = new MessageQueue (queueName);
        if (queue.Peek(new TimeSpan (0, 0, 5)) == false)
            return false;
        else
            return true;
    }
    catch (ArgumentException)
    {
        return false;
    }
    catch (MessageQueueException ex)
    {
        if (ex.MessageQueueErrorCode == MessageQueueErrorCode.IOTimeout)
            return true;
        else
            return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
509
2
Gpt3D_Clone509_2.cs 1 16
Gpt3D_Clone509_2.cs 17 41
----------------------------------------

public static bool IsQueueAvailable (string queueName) {
    MessageQueue queue;
    try {
        queue = new MessageQueue (queueName);
        queue.Peek (new TimeSpan (0, 0, 5));
        return true;
    }
    catch (Exception ex) {
        if (ex is ArgumentException) {
            return false;
        } else if (ex is MessageQueueException) {
            return (((MessageQueueException) ex).MessageQueueErrorCode == MessageQueueErrorCode.IOTimeout);
        }
        return false;
    }
}
----------------------------------------

 public static bool IsQueueAvailable (string queueName) 
{
    MessageQueue queue;
    try 
    {
        queue = new MessageQueue (queueName);
        if (queue.Peek(new TimeSpan (0, 0, 5)) == true)
            return true;
        else
            return false;
    }
    catch (ArgumentException)
    {
        return false;
    }
    catch (MessageQueueException ex)
    {
        if (ex.MessageQueueErrorCode == MessageQueueErrorCode.IOTimeout)
            return true;
        else
            return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
509
3
Gpt3D_Clone509_3.cs 1 16
Gpt3D_Clone509_3.cs 17 41
----------------------------------------

public static bool IsQueueAvailable (string queueName) {
    MessageQueue queue;
    try {
        queue = new MessageQueue (queueName);
        queue.Peek (new TimeSpan (0, 0, 5));
        return true;
    }
    catch (Exception ex) {
        if (ex is ArgumentException) {
            return false;
        } else if (ex is MessageQueueException) {
            return (((MessageQueueException) ex).MessageQueueErrorCode == MessageQueueErrorCode.IOTimeout);
        }
        return false;
    }
}
----------------------------------------

  public static bool IsQueueAvailable (string queueName) 
{
    MessageQueue queue;
    try 
    {
        queue = new MessageQueue (queueName);
        if (queue.Peek(new TimeSpan (0, 0, 5)) == null)
            return false;
        else
            return true;
    }
    catch (ArgumentException)
    {
        return false;
    }
    catch (MessageQueueException ex)
    {
        if (ex.MessageQueueErrorCode == MessageQueueErrorCode.IOTimeout)
            return true;
        else
            return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
509
4
Gpt3D_Clone509_4.cs 1 16
Gpt3D_Clone509_4.cs 17 47
----------------------------------------

public static bool IsQueueAvailable (string queueName) {
    MessageQueue queue;
    try {
        queue = new MessageQueue (queueName);
        queue.Peek (new TimeSpan (0, 0, 5));
        return true;
    }
    catch (Exception ex) {
        if (ex is ArgumentException) {
            return false;
        } else if (ex is MessageQueueException) {
            return (((MessageQueueException) ex).MessageQueueErrorCode == MessageQueueErrorCode.IOTimeout);
        }
        return false;
    }
}
----------------------------------------

 public static bool IsQueueAvailable (string queueName) 
{
    MessageQueue queue;
    try 
    {
        queue = new MessageQueue (queueName);
        if (queue.Peek(new TimeSpan(0, 0, 5)) != null)
        {
            // Do Nothing
        }
        else
        {
            return false;
        }
            
        return true;
    }
    catch (ArgumentException)
    {
        return false;
    }
    catch (MessageQueueException ex)
    {
        if (ex.MessageQueueErrorCode == MessageQueueErrorCode.IOTimeout)
            return true;
        else
            return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
509
5
Gpt3D_Clone509_5.cs 1 16
Gpt3D_Clone509_5.cs 17 41
----------------------------------------

public static bool IsQueueAvailable (string queueName) {
    MessageQueue queue;
    try {
        queue = new MessageQueue (queueName);
        queue.Peek (new TimeSpan (0, 0, 5));
        return true;
    }
    catch (Exception ex) {
        if (ex is ArgumentException) {
            return false;
        } else if (ex is MessageQueueException) {
            return (((MessageQueueException) ex).MessageQueueErrorCode == MessageQueueErrorCode.IOTimeout);
        }
        return false;
    }
}
----------------------------------------

  public static bool IsQueueAvailable (string queueName) 
{
    MessageQueue queue;
    try 
    {
        queue = new MessageQueue (queueName);
        if (queue.Peek(new TimeSpan (0, 0, 5)))
            return true;
        else
            return false;
    }
    catch (ArgumentException)
    {
        return false;
    }
    catch (MessageQueueException ex)
    {
        if (ex.MessageQueueErrorCode == MessageQueueErrorCode.IOTimeout)
            return true;
        else
            return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
509
6
Gpt3D_Clone509_6.cs 1 16
Gpt3D_Clone509_6.cs 17 42
----------------------------------------

public static bool IsQueueAvailable (string queueName) {
    MessageQueue queue;
    try {
        queue = new MessageQueue (queueName);
        queue.Peek (new TimeSpan (0, 0, 5));
        return true;
    }
    catch (Exception ex) {
        if (ex is ArgumentException) {
            return false;
        } else if (ex is MessageQueueException) {
            return (((MessageQueueException) ex).MessageQueueErrorCode == MessageQueueErrorCode.IOTimeout);
        }
        return false;
    }
}
----------------------------------------

 public static bool IsQueueAvailable (string queueName) 
{
    MessageQueue queue;
    try 
    {
        queue = new MessageQueue (queueName);
        if (queue.Peek(new TimeSpan (0, 0, 5)) != null)
            return true;
        else
            return false;
    }
    catch (ArgumentException)
    {
        return false;
    }
    catch (MessageQueueException ex)
    {
        if (ex.MessageQueueErrorCode == MessageQueueErrorCode.IOTimeout)
            return true;
        else
            return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
509
7
Gpt3D_Clone509_7.cs 1 16
Gpt3D_Clone509_7.cs 17 42
----------------------------------------

public static bool IsQueueAvailable (string queueName) {
    MessageQueue queue;
    try {
        queue = new MessageQueue (queueName);
        queue.Peek (new TimeSpan (0, 0, 5));
        return true;
    }
    catch (Exception ex) {
        if (ex is ArgumentException) {
            return false;
        } else if (ex is MessageQueueException) {
            return (((MessageQueueException) ex).MessageQueueErrorCode == MessageQueueErrorCode.IOTimeout);
        }
        return false;
    }
}
----------------------------------------

  public static bool IsQueueAvailable (string queueName) 
{
    MessageQueue queue;
    bool flag = false;
    
    try 
    {
        queue = new MessageQueue (queueName);
        flag = queue.Peek(new TimeSpan (0, 0, 5));
    }
    catch (ArgumentException)
    {
        flag = false;
    }
    catch (MessageQueueException ex)
    {
        if (ex.MessageQueueErrorCode == MessageQueueErrorCode.IOTimeout)
            flag = true;
        else
            flag = false;
    }
    
    return flag;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
509
8
Gpt3D_Clone509_8.cs 1 16
Gpt3D_Clone509_8.cs 17 42
----------------------------------------

public static bool IsQueueAvailable (string queueName) {
    MessageQueue queue;
    try {
        queue = new MessageQueue (queueName);
        queue.Peek (new TimeSpan (0, 0, 5));
        return true;
    }
    catch (Exception ex) {
        if (ex is ArgumentException) {
            return false;
        } else if (ex is MessageQueueException) {
            return (((MessageQueueException) ex).MessageQueueErrorCode == MessageQueueErrorCode.IOTimeout);
        }
        return false;
    }
}
----------------------------------------

  public static bool IsQueueAvailable (string queueName) 
{
    MessageQueue queue;
    bool flag = false;
    
    try 
    {
        queue = new MessageQueue (queueName);
        flag = queue.Peek(new TimeSpan (0, 0, 5));
    }
    catch (ArgumentException)
    {
        return false;
    }
    catch (MessageQueueException ex)
    {
        if (ex.MessageQueueErrorCode == MessageQueueErrorCode.IOTimeout)
            flag = true;
        else
            flag = false;
    }
    
    return flag;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
510
0
Gpt3D_Clone510_0.cs 1 19
Gpt3D_Clone510_0.cs 20 42
----------------------------------------

public DataTable MethodName (string Param) {
    DataRow dr;
    DataTable dt = new DataTable ();
    dt.Columns.Add ("Order", Type.GetType ("System.Int32"));
    dt.Columns.Add ("Driver", Type.GetType ("System.Int32"));
    dr = dt.NewRow ();
    if (AnotherMethod1 (Param)) {
        dr ["Order"] = 1;
    } else {
        dr ["Order"] = 0;
    }
    if (AnotherMethod2 (Param)) {
        dr ["Driver"] = 1;
    } else {
        dr ["Driver"] = 0;
    }
    dt.Rows.Add (dr);
    return dt;
}
----------------------------------------

 public DataTable MethodName (string Param) {
      DataTable dt = new DataTable ();
      DataRow dr = dt.NewRow();
      dt.Columns.Add ("Order", typeof(int));
      dt.Columns.Add ("Driver", typeof(int));
      object orderVal, driverVal;
      if (AnotherMethod1 (Param)) {
            orderVal = 1;
      } else {
            orderVal = 0;
      }
      if (AnotherMethod2 (Param)) {
            driverVal = 1;
      } else {
            driverVal = 0;
      }
      dr["Order"] = orderVal;
      dr["Driver"] = driverVal;
      dt.Rows.Add (dr);
      return dt;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
510
1
Gpt3D_Clone510_1.cs 1 19
Gpt3D_Clone510_1.cs 20 42
----------------------------------------

public DataTable MethodName (string Param) {
    DataRow dr;
    DataTable dt = new DataTable ();
    dt.Columns.Add ("Order", Type.GetType ("System.Int32"));
    dt.Columns.Add ("Driver", Type.GetType ("System.Int32"));
    dr = dt.NewRow ();
    if (AnotherMethod1 (Param)) {
        dr ["Order"] = 1;
    } else {
        dr ["Order"] = 0;
    }
    if (AnotherMethod2 (Param)) {
        dr ["Driver"] = 1;
    } else {
        dr ["Driver"] = 0;
    }
    dt.Rows.Add (dr);
    return dt;
}
----------------------------------------

 public DataTable MethodName (string Param) {
      DataTable dt = new DataTable ();
      DataRow dr = new DataRow();
      dt.Columns.Add ("Order", typeof(int));
      dt.Columns.Add ("Driver", typeof(int));
      int orderVal, driverVal;
      if (AnotherMethod1 (Param)) {
            orderVal = 1;
      } else {
            orderVal = 0;
      }
      if (AnotherMethod2 (Param)) {
            driverVal = 1;
      } else {
            driverVal = 0;
      }
      dr["Order"] = orderVal;
      dr["Driver"] = driverVal;
      dt.Rows.Add (dr);
      return dt;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
510
6
Gpt3D_Clone510_6.cs 1 19
Gpt3D_Clone510_6.cs 20 33
----------------------------------------

public DataTable MethodName (string Param) {
    DataRow dr;
    DataTable dt = new DataTable ();
    dt.Columns.Add ("Order", Type.GetType ("System.Int32"));
    dt.Columns.Add ("Driver", Type.GetType ("System.Int32"));
    dr = dt.NewRow ();
    if (AnotherMethod1 (Param)) {
        dr ["Order"] = 1;
    } else {
        dr ["Order"] = 0;
    }
    if (AnotherMethod2 (Param)) {
        dr ["Driver"] = 1;
    } else {
        dr ["Driver"] = 0;
    }
    dt.Rows.Add (dr);
    return dt;
}
----------------------------------------

 public DataTable MethodName (string Param) {
      DataTable dt = new DataTable ();
      DataRow dr = new DataRow();
      dt.Columns.Add ("Order", Type.GetType ("System.Int32"));
      dt.Columns.Add ("Driver", Type.GetType ("System.Int32"));
      int orderVal = AnotherMethod1 (Param) ? 1 : 0;
      int driverVal = AnotherMethod2 (Param) ? 1 : 0;
      dr["Order"] = orderVal;
      dr["Driver"] = driverVal;
      dt.Rows.Add (dr);
      return dt;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
510
7
Gpt3D_Clone510_7.cs 1 19
Gpt3D_Clone510_7.cs 20 32
----------------------------------------

public DataTable MethodName (string Param) {
    DataRow dr;
    DataTable dt = new DataTable ();
    dt.Columns.Add ("Order", Type.GetType ("System.Int32"));
    dt.Columns.Add ("Driver", Type.GetType ("System.Int32"));
    dr = dt.NewRow ();
    if (AnotherMethod1 (Param)) {
        dr ["Order"] = 1;
    } else {
        dr ["Order"] = 0;
    }
    if (AnotherMethod2 (Param)) {
        dr ["Driver"] = 1;
    } else {
        dr ["Driver"] = 0;
    }
    dt.Rows.Add (dr);
    return dt;
}
----------------------------------------

 public DataTable MethodName (string Param)
    {
        DataTable dt = new DataTable ();
        dt.Columns.Add ("Order", Type.GetType ("System.Int32"));
        dt.Columns.Add ("Driver", Type.GetType ("System.Int32"));
        DataRow dr = dt.NewRow();
        dr["Order"] = AnotherMethod1(Param) ? 1 : 0;
        dr["Driver"] = AnotherMethod2(Param) ? 1 : 0;
        dt.Rows.Add(dr);
        return dt;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
510
8
Gpt3D_Clone510_8.cs 1 19
Gpt3D_Clone510_8.cs 20 32
----------------------------------------

public DataTable MethodName (string Param) {
    DataRow dr;
    DataTable dt = new DataTable ();
    dt.Columns.Add ("Order", Type.GetType ("System.Int32"));
    dt.Columns.Add ("Driver", Type.GetType ("System.Int32"));
    dr = dt.NewRow ();
    if (AnotherMethod1 (Param)) {
        dr ["Order"] = 1;
    } else {
        dr ["Order"] = 0;
    }
    if (AnotherMethod2 (Param)) {
        dr ["Driver"] = 1;
    } else {
        dr ["Driver"] = 0;
    }
    dt.Rows.Add (dr);
    return dt;
}
----------------------------------------

 public DataTable MethodName (string Param)
    {
        DataTable dt = new DataTable();
        dt.Columns.Add ("Order", Type.GetType ("System.Int32"));
        dt.Columns.Add ("Driver", Type.GetType ("System.Int32"));
        DataRow dr = dt.NewRow();
        int order = AnotherMethod1(Param) ? 1 : 0;
        int driver = AnotherMethod2(Param) ? 1 : 0;
        dt.Rows.Add(order, driver);
        return dt;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
510
9
Gpt3D_Clone510_9.cs 1 19
Gpt3D_Clone510_9.cs 20 31
----------------------------------------

public DataTable MethodName (string Param) {
    DataRow dr;
    DataTable dt = new DataTable ();
    dt.Columns.Add ("Order", Type.GetType ("System.Int32"));
    dt.Columns.Add ("Driver", Type.GetType ("System.Int32"));
    dr = dt.NewRow ();
    if (AnotherMethod1 (Param)) {
        dr ["Order"] = 1;
    } else {
        dr ["Order"] = 0;
    }
    if (AnotherMethod2 (Param)) {
        dr ["Driver"] = 1;
    } else {
        dr ["Driver"] = 0;
    }
    dt.Rows.Add (dr);
    return dt;
}
----------------------------------------

 public DataTable MethodName (string Param) {
      DataTable dt = new DataTable ();
      DataRow dr = new DataRow();
      dt.Columns.Add ("Order", typeof(int));
      dt.Columns.Add ("Driver", typeof(int));
      dr["Order"] = AnotherMethod1 (Param) ? 1 : 0;
      dr["Driver"] = AnotherMethod2 (Param) ? 1 : 0;
      dt.Rows.Add (dr);
      return dt;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
514
0
Gpt3D_Clone514_0.cs 1 10
Gpt3D_Clone514_0.cs 11 29
----------------------------------------

private Bitmap RotateImage (Bitmap bmp, float angle) {
    Bitmap rotatedImage = new Bitmap (bmp.Width, bmp.Height);
    using (Graphics g = Graphics.FromImage (rotatedImage))
    {
        g.TranslateTransform (bmp.Width / 2, bmp.Height / 2);
        g.RotateTransform (angle);
        g.TranslateTransform (- bmp.Width / 2, - bmp.Height / 2);
        g.DrawImage (bmp, new Point (0, 0));
    } return rotatedImage;
}
----------------------------------------

  private static Bitmap RotateImage (Bitmap bmp, float angle) {
    Rectangle relBounds = new Rectangle();
    relBounds.X = 0;
    relBounds.Y = 0;
    relBounds.Height = bmp.Height;
    relBounds.Width = bmp.Width;
    
    Bitmap rotatedImage = (Bitmap)bmp.Clone();
    using (Graphics g = Graphics.FromImage(rotatedImage))
    {
        g.TranslateTransform((float)relBounds.Width / 2, (float)relBounds.Height / 2);
        g.RotateTransform(angle);
        g.TranslateTransform(-(float)relBounds.Width / 2, -(float)relBounds.Height / 2);
        g.DrawImage(bmp, relBounds);
    }
    return rotatedImage;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
514
1
Gpt3D_Clone514_1.cs 1 10
Gpt3D_Clone514_1.cs 11 30
----------------------------------------

private Bitmap RotateImage (Bitmap bmp, float angle) {
    Bitmap rotatedImage = new Bitmap (bmp.Width, bmp.Height);
    using (Graphics g = Graphics.FromImage (rotatedImage))
    {
        g.TranslateTransform (bmp.Width / 2, bmp.Height / 2);
        g.RotateTransform (angle);
        g.TranslateTransform (- bmp.Width / 2, - bmp.Height / 2);
        g.DrawImage (bmp, new Point (0, 0));
    } return rotatedImage;
}
----------------------------------------

  private static Bitmap RotateImage (Bitmap bmp, float angle) {
    Bitmap rotatedImage = new Bitmap(bmp.Width, bmp.Height);
    float cosTheta = (float)Math.Cos(angle);
    float sinTheta = (float)Math.Sin(angle);
    float[][] rotate ={
        new float[] {cosTheta, - sinTheta , 0},
        new float[] {sinTheta,cosTheta,0},
        new float[] {0, 0,1}};
    ColorMatrix rotatingMatrix = new ColorMatrix(rotate);
    ImageAttributes attributes = new ImageAttributes();
    attributes.SetColorMatrix(rotatingMatrix);
    using (Graphics g = Graphics.FromImage(rotatedImage))
    {
        g.DrawImage(bmp, new Rectangle(0,0,bmp.Width, bmp.Height)
                    ,0, 0, bmp.Width, bmp.Height, GraphicsUnit.Pixel, attributes);
    }
    return rotatedImage;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
514
2
Gpt3D_Clone514_2.cs 1 10
Gpt3D_Clone514_2.cs 11 28
----------------------------------------

private Bitmap RotateImage (Bitmap bmp, float angle) {
    Bitmap rotatedImage = new Bitmap (bmp.Width, bmp.Height);
    using (Graphics g = Graphics.FromImage (rotatedImage))
    {
        g.TranslateTransform (bmp.Width / 2, bmp.Height / 2);
        g.RotateTransform (angle);
        g.TranslateTransform (- bmp.Width / 2, - bmp.Height / 2);
        g.DrawImage (bmp, new Point (0, 0));
    } return rotatedImage;
}
----------------------------------------

  private static Bitmap RotateImage (Bitmap bmp, float angle) {
    Bitmap rotatedImage = new Bitmap (bmp.Width, bmp.Height);
    float rot_x = ((bmp.Width / 2f) * (float)Math.Cos(angle)) -
    (bmp.Height / 2f) * (float)Math.Sin(angle);
    float rot_y = ((bmp.Width / 2f) * (float)Math.Sin(angle)) +
    (bmp.Height / 2f) * (float)Math.Cos(angle);
    using (Graphics g = Graphics.FromImage (rotatedImage))
    {
        g.TranslateTransform(rot_x + bmp.Width / 2f, rot_y + bmp.Height / 2f);
        g.RotateTransform(angle * (float)(180.0 / Math.PI));
        g.TranslateTransform(-bmp.Width / 2f, -bmp.Height / 2f);
        g.DrawImage(bmp, new PointF (0, 0));
    }
    return rotatedImage;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
514
7
Gpt3D_Clone514_7.cs 1 10
Gpt3D_Clone514_7.cs 11 22
----------------------------------------

private Bitmap RotateImage (Bitmap bmp, float angle) {
    Bitmap rotatedImage = new Bitmap (bmp.Width, bmp.Height);
    using (Graphics g = Graphics.FromImage (rotatedImage))
    {
        g.TranslateTransform (bmp.Width / 2, bmp.Height / 2);
        g.RotateTransform (angle);
        g.TranslateTransform (- bmp.Width / 2, - bmp.Height / 2);
        g.DrawImage (bmp, new Point (0, 0));
    } return rotatedImage;
}
----------------------------------------

  private static Bitmap RotateImage (Bitmap bmp, float angle) {
     Bitmap rotatedImage = new Bitmap(bmp.Width, bmp.Height);
     using (Graphics g = Graphics.FromImage(rotatedImage))
     {
         Point center = new Point(bmp.Width / 2, bmp.Height / 2);
         g.RotateAt(angle, center);
         g.DrawImage(bmp, 0, 0);
     }
     return rotatedImage;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
514
8
Gpt3D_Clone514_8.cs 1 10
Gpt3D_Clone514_8.cs 11 22
----------------------------------------

private Bitmap RotateImage (Bitmap bmp, float angle) {
    Bitmap rotatedImage = new Bitmap (bmp.Width, bmp.Height);
    using (Graphics g = Graphics.FromImage (rotatedImage))
    {
        g.TranslateTransform (bmp.Width / 2, bmp.Height / 2);
        g.RotateTransform (angle);
        g.TranslateTransform (- bmp.Width / 2, - bmp.Height / 2);
        g.DrawImage (bmp, new Point (0, 0));
    } return rotatedImage;
}
----------------------------------------

 private static Bitmap RotateImage (Bitmap bmp, float angle) {
     Bitmap rotatedImage = new Bitmap(bmp.Width, bmp.Height);
     using (Graphics g = Graphics.FromImage(rotatedImage))
     {
         PointF center = new PointF(bmp.Width/2, bmp.Height/2);
         g.RotateAt(angle, center);
         g.DrawImage(bmp, 0, 0);
     }
     return rotatedImage;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
519
0
Gpt3D_Clone519_0.cs 1 13
Gpt3D_Clone519_0.cs 14 29
----------------------------------------

public override bool Equals (float a, float b) {
    float absoluteA = Math.Abs (a);
    float absoluteB = Math.Abs (b);
    float absoluteDifference = Math.Abs (a - b);
    if (a == b) {
        return true;
    } else if (a == 0 || b == 0 || absoluteDifference < InternalEpsilon) {
        return absoluteDifference < InternalEpsilon;
    } else {
        return absoluteDifference / (absoluteA + absoluteB) < InternalEpsilon;
    }
    return true;
}
----------------------------------------

 public override bool Equals (float a, float b) {
    float delta = 0.00001f;
    if (a == b)
        return true;
    float abDiff = Math.Abs(a - b);
    if (abDiff < InternalEpsilon || abDiff < delta)
        return true;
    float ratio = (Math.Abs(a) + Math.Abs(b)) / abDiff;
    if (ratio < delta)
        return true;
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
519
1
Gpt3D_Clone519_1.cs 1 13
Gpt3D_Clone519_1.cs 14 28
----------------------------------------

public override bool Equals (float a, float b) {
    float absoluteA = Math.Abs (a);
    float absoluteB = Math.Abs (b);
    float absoluteDifference = Math.Abs (a - b);
    if (a == b) {
        return true;
    } else if (a == 0 || b == 0 || absoluteDifference < InternalEpsilon) {
        return absoluteDifference < InternalEpsilon;
    } else {
        return absoluteDifference / (absoluteA + absoluteB) < InternalEpsilon;
    }
    return true;
}
----------------------------------------

  public override bool Equals (float a, float b) {
    float delta = 0.00001f;
    if (a == b)
        return true;
    float abDiff = Math.Abs(a - b);
    if (abDiff < InternalEpsilon || abDiff < delta)
        return true;
    float ratio = abDiff / (Math.Abs(a) + Math.Abs(b));
    if (ratio < delta)
        return true;
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
519
2
Gpt3D_Clone519_2.cs 1 13
Gpt3D_Clone519_2.cs 14 28
----------------------------------------

public override bool Equals (float a, float b) {
    float absoluteA = Math.Abs (a);
    float absoluteB = Math.Abs (b);
    float absoluteDifference = Math.Abs (a - b);
    if (a == b) {
        return true;
    } else if (a == 0 || b == 0 || absoluteDifference < InternalEpsilon) {
        return absoluteDifference < InternalEpsilon;
    } else {
        return absoluteDifference / (absoluteA + absoluteB) < InternalEpsilon;
    }
    return true;
}
----------------------------------------

  public override bool Equals (float a, float b) {
    if (a == b)
        return true;
    float abDiff = Math.Abs(a - b);
    if (abDiff < InternalEpsilon)
        return true;
    float ratio = abDiff / (Math.Abs(a) + Math.Abs(b));
    if (ratio < InternalEpsilon)
        return true;
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
519
3
Gpt3D_Clone519_3.cs 1 13
Gpt3D_Clone519_3.cs 14 26
----------------------------------------

public override bool Equals (float a, float b) {
    float absoluteA = Math.Abs (a);
    float absoluteB = Math.Abs (b);
    float absoluteDifference = Math.Abs (a - b);
    if (a == b) {
        return true;
    } else if (a == 0 || b == 0 || absoluteDifference < InternalEpsilon) {
        return absoluteDifference < InternalEpsilon;
    } else {
        return absoluteDifference / (absoluteA + absoluteB) < InternalEpsilon;
    }
    return true;
}
----------------------------------------

  public override bool Equals (float a, float b) {
    float epsilon = 0.00001f;
    if (a == b) {
        return true;
    } else if ( a == 0f || b == 0f || Math.Abs(a-b) < epsilon ) {
        return Math.Abs(a-b) < epsilon;
    } else {
        return Math.Abs(a-b) / (Math.Abs(a) + Math.Abs(b)) < epsilon;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
519
4
Gpt3D_Clone519_4.cs 1 13
Gpt3D_Clone519_4.cs 14 24
----------------------------------------

public override bool Equals (float a, float b) {
    float absoluteA = Math.Abs (a);
    float absoluteB = Math.Abs (b);
    float absoluteDifference = Math.Abs (a - b);
    if (a == b) {
        return true;
    } else if (a == 0 || b == 0 || absoluteDifference < InternalEpsilon) {
        return absoluteDifference < InternalEpsilon;
    } else {
        return absoluteDifference / (absoluteA + absoluteB) < InternalEpsilon;
    }
    return true;
}
----------------------------------------

  public override bool Equals (float a, float b) {
    float delta = 0.0001f;
    if (a == b)
        return true;
    float diff = Math.Abs( a-b );
    if (diff<delta)
        return true;
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
519
5
Gpt3D_Clone519_5.cs 1 13
Gpt3D_Clone519_5.cs 14 26
----------------------------------------

public override bool Equals (float a, float b) {
    float absoluteA = Math.Abs (a);
    float absoluteB = Math.Abs (b);
    float absoluteDifference = Math.Abs (a - b);
    if (a == b) {
        return true;
    } else if (a == 0 || b == 0 || absoluteDifference < InternalEpsilon) {
        return absoluteDifference < InternalEpsilon;
    } else {
        return absoluteDifference / (absoluteA + absoluteB) < InternalEpsilon;
    }
    return true;
}
----------------------------------------

  public override bool Equals (float a, float b) {
    float absoluteDiff = Math.Abs(a - b);
    if (a == b)
        return true;
    if (absoluteDiff < 0.00001f)
        return true;
    float relativeDiff = (float)(absoluteDiff / (Math.Abs(a) + Math.Abs(b)));
    return (relativeDiff <= 0.00001f);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
519
6
Gpt3D_Clone519_6.cs 1 13
Gpt3D_Clone519_6.cs 14 23
----------------------------------------

public override bool Equals (float a, float b) {
    float absoluteA = Math.Abs (a);
    float absoluteB = Math.Abs (b);
    float absoluteDifference = Math.Abs (a - b);
    if (a == b) {
        return true;
    } else if (a == 0 || b == 0 || absoluteDifference < InternalEpsilon) {
        return absoluteDifference < InternalEpsilon;
    } else {
        return absoluteDifference / (absoluteA + absoluteB) < InternalEpsilon;
    }
    return true;
}
----------------------------------------

  public override bool Equals (float a, float b) {
    if (a == b)
        return true;
    double delta = 0.00001;
    if (Math.Abs(a-b) < delta)
        return true;
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
519
7
Gpt3D_Clone519_7.cs 1 13
Gpt3D_Clone519_7.cs 14 21
----------------------------------------

public override bool Equals (float a, float b) {
    float absoluteA = Math.Abs (a);
    float absoluteB = Math.Abs (b);
    float absoluteDifference = Math.Abs (a - b);
    if (a == b) {
        return true;
    } else if (a == 0 || b == 0 || absoluteDifference < InternalEpsilon) {
        return absoluteDifference < InternalEpsilon;
    } else {
        return absoluteDifference / (absoluteA + absoluteB) < InternalEpsilon;
    }
    return true;
}
----------------------------------------

  public override bool Equals (float a, float b) {
    float epsilon = 0.00001f;
    if (Math.Abs(a - b) < epsilon)
        return true;
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
519
8
Gpt3D_Clone519_8.cs 1 13
Gpt3D_Clone519_8.cs 14 20
----------------------------------------

public override bool Equals (float a, float b) {
    float absoluteA = Math.Abs (a);
    float absoluteB = Math.Abs (b);
    float absoluteDifference = Math.Abs (a - b);
    if (a == b) {
        return true;
    } else if (a == 0 || b == 0 || absoluteDifference < InternalEpsilon) {
        return absoluteDifference < InternalEpsilon;
    } else {
        return absoluteDifference / (absoluteA + absoluteB) < InternalEpsilon;
    }
    return true;
}
----------------------------------------

  public override bool Equals (float a, float b) {
    float epsilon = 0.00001f;
    float diff = Math.Abs(a - b);
    return (diff <= epsilon);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
519
9
Gpt3D_Clone519_9.cs 1 13
Gpt3D_Clone519_9.cs 14 19
----------------------------------------

public override bool Equals (float a, float b) {
    float absoluteA = Math.Abs (a);
    float absoluteB = Math.Abs (b);
    float absoluteDifference = Math.Abs (a - b);
    if (a == b) {
        return true;
    } else if (a == 0 || b == 0 || absoluteDifference < InternalEpsilon) {
        return absoluteDifference < InternalEpsilon;
    } else {
        return absoluteDifference / (absoluteA + absoluteB) < InternalEpsilon;
    }
    return true;
}
----------------------------------------

  public override bool Equals (float a, float b) {
    float ab = Math.Abs(a-b);
    return (ab <= InternalEpsilon);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
521
3
Gpt3D_Clone521_3.cs 1 8
Gpt3D_Clone521_3.cs 9 18
----------------------------------------

public new bool Equals (object x, object y) {
    if (x is string)
        return x == y;
    else if (x is Guid)
        return x == y;
    else
        return EqualityComparer < object >.Default.Equals (x, y);
}
----------------------------------------

 public new bool Equals (object x, object y) {
        if (x is byte[]) 
            return x.Equals (y);
        else if (x is Guid)
            return x.Equals (y);
        else
            return x.Equals (y);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
525
0
Gpt3D_Clone525_0.cs 1 9
Gpt3D_Clone525_0.cs 10 21
----------------------------------------

static void Main (string [] args) {
    var sum = 0;
    foreach (var number in GetEvenFibonacciSeries ()) {
        if (sum + number > 4000000)
            break;
        sum += number;
    }
    Console.WriteLine (sum);
}
----------------------------------------

 static void Main(string[] args) {
    int sum = 0;
    IList<int> numbers = GetFibonacciSeries();
    for(int i = 0; i< numbers.Count; i++)
    {
        if(sum + numbers[i] > 4000000) break;
        sum += numbers[i];
    }
    Console.WriteLine(sum);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
525
1
Gpt3D_Clone525_1.cs 1 9
Gpt3D_Clone525_1.cs 10 21
----------------------------------------

static void Main (string [] args) {
    var sum = 0;
    foreach (var number in GetEvenFibonacciSeries ()) {
        if (sum + number > 4000000)
            break;
        sum += number;
    }
    Console.WriteLine (sum);
}
----------------------------------------

 static void Main(string[] args) {
    int sum = 0;
    var numbers = GetFibonacciSeries();
    for(int i = 0; i< numbers.Length; i++)
    {
        if(sum + numbers[i] > 4000000) break;
        sum += numbers[i];
    }
    Console.WriteLine(sum);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
525
2
Gpt3D_Clone525_2.cs 1 9
Gpt3D_Clone525_2.cs 10 21
----------------------------------------

static void Main (string [] args) {
    var sum = 0;
    foreach (var number in GetEvenFibonacciSeries ()) {
        if (sum + number > 4000000)
            break;
        sum += number;
    }
    Console.WriteLine (sum);
}
----------------------------------------

 static void Main(string[] args) {
    int sum = 0;
    var fiboNumbers = GetEvenFibonacciSeries();
    for (int i = 0; i < fiboNumbers.Length; i++)
    {
        if(sum + fiboNumbers[i] > 4000000) break;
        sum +=fiboNumbers[i];
    }
    Console.WriteLine(sum);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
525
3
Gpt3D_Clone525_3.cs 1 9
Gpt3D_Clone525_3.cs 10 21
----------------------------------------

static void Main (string [] args) {
    var sum = 0;
    foreach (var number in GetEvenFibonacciSeries ()) {
        if (sum + number > 4000000)
            break;
        sum += number;
    }
    Console.WriteLine (sum);
}
----------------------------------------

 static void Main(string[] args) {
    int sum = 0;
    List<int> numbers = GetFibonacciSeries().ToList();
    for(int i = 0; i< numbers.Count; i++)
    {
        if(sum + numbers[i] > 4000000) break;
        sum += numbers[i];
    }
    Console.WriteLine(sum);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
525
4
Gpt3D_Clone525_4.cs 1 9
Gpt3D_Clone525_4.cs 10 21
----------------------------------------

static void Main (string [] args) {
    var sum = 0;
    foreach (var number in GetEvenFibonacciSeries ()) {
        if (sum + number > 4000000)
            break;
        sum += number;
    }
    Console.WriteLine (sum);
}
----------------------------------------

 static void Main(string[] args) {
    int sum = 0;
    IEnumerator<int> nums = GetFibonacciSeries().GetEnumerator();
    while(nums.MoveNext())
    {
        if (sum + nums.Current > 4000000) break;
        sum += nums.Current;
    }
    Console.WriteLine(sum);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
526
3
Gpt3D_Clone526_3.cs 1 21
Gpt3D_Clone526_3.cs 22 57
----------------------------------------

public bool Seq_Check (int [] elems, int k) {
    for (int i = elems.Length; i > 0; i --) {
        if (elems [i] == k) {
            int curr = k - 1;
            for (; i > 0 && curr > 0; i --) {
                if (elems [i] != curr) {
                    if (elems [i] == k) {
                        curr = k - 1;
                        continue;
                    }
                    break;
                }
                curr --;
            }
            if (curr == 0) {
                return true;
            }
        }
    }
    return false;
}
----------------------------------------

 public bool Seq_Check (int [] elems, int k) 
{ 
    bool found = false; 
    for (int i = elems.Length - 1; i > 0; i--) 
    { 
        int j; 
        if (elems[i] == k) 
        { 
            // This flag is set if the sequence is  
            // found starting from i'th index 
            found = true; 
  
            // Decrement k before every iteration 
            for (j = k - 1; i >= 0 && j > 0; j--) 
            { 
                if (elems[i] != j) 
                { 
                // Reset the flag if after a found element 
                // the sequence is broken 
                    if (elems[i] == k) 
                        found = false; 
  
                    break; 
                } 
            } 
  
            if (found == true) 
                return true; 
        } 
    } 
  
    // If element is not found 
    return false; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
526
4
Gpt3D_Clone526_4.cs 1 21
Gpt3D_Clone526_4.cs 22 53
----------------------------------------

public bool Seq_Check (int [] elems, int k) {
    for (int i = elems.Length; i > 0; i --) {
        if (elems [i] == k) {
            int curr = k - 1;
            for (; i > 0 && curr > 0; i --) {
                if (elems [i] != curr) {
                    if (elems [i] == k) {
                        curr = k - 1;
                        continue;
                    }
                    break;
                }
                curr --;
            }
            if (curr == 0) {
                return true;
            }
        }
    }
    return false;
}
----------------------------------------

 public bool Seq_Check (int [] elems, int k) {
    bool found = false;
    for (int i = elems.Length - 1; i > 0; i--) 
    { 
        if (elems[i] == k) 
        {
            found = true;
            // Break the loop only if after a found element  
            // the sequence is broken 
            for (int j = elems[i] - 1; i > 0 && j > 0; j--) 
            {
                if (elems[i] != j)
                { 
                    // Reset the flag if after a found
                    // element the sequence is broken 
                    if (elems[i] == k)
                        found = false; 
                    break; 
                } 
            } 
            if (found == true) 
                return true; 
        } 
    } 
  
    // If element is not found 
    return false; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
526
5
Gpt3D_Clone526_5.cs 1 21
Gpt3D_Clone526_5.cs 22 47
----------------------------------------

public bool Seq_Check (int [] elems, int k) {
    for (int i = elems.Length; i > 0; i --) {
        if (elems [i] == k) {
            int curr = k - 1;
            for (; i > 0 && curr > 0; i --) {
                if (elems [i] != curr) {
                    if (elems [i] == k) {
                        curr = k - 1;
                        continue;
                    }
                    break;
                }
                curr --;
            }
            if (curr == 0) {
                return true;
            }
        }
    }
    return false;
}
----------------------------------------

 public bool Seq_Check (int [] elems, int k){
    bool found = false;
    
    for(int i = elems.Length-1; i >= 0; i--){
        if(elems[i] == k){
            found = true;
            
            for(int j = k-1; i >= 0 && j > 0; j--){
                if(elems[i] != j){
                    if(elems[i] == k){
                        found = false;
                    }
                    break;
                }
            }
            
            if(found == true){
                return true;
            }
        }
    }
    
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
526
6
Gpt3D_Clone526_6.cs 1 21
Gpt3D_Clone526_6.cs 22 47
----------------------------------------

public bool Seq_Check (int [] elems, int k) {
    for (int i = elems.Length; i > 0; i --) {
        if (elems [i] == k) {
            int curr = k - 1;
            for (; i > 0 && curr > 0; i --) {
                if (elems [i] != curr) {
                    if (elems [i] == k) {
                        curr = k - 1;
                        continue;
                    }
                    break;
                }
                curr --;
            }
            if (curr == 0) {
                return true;
            }
        }
    }
    return false;
}
----------------------------------------

 public bool Seq_Check (int [] elems, int k){
    bool found = false;
    
    for(int i = elems.Length-1; i > 0; i--){
        if(elems[i] == k){
            found = true;
            
            for(int j = k-1; i >= 0 && j > 0; j--){
                if(elems[i] != j){
                    if(elems[i] == k){
                        found = false;
                    }
                    break;
                }
            }
            
            if(found == true){
                return true;
            }
        }
    }
    
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
526
7
Gpt3D_Clone526_7.cs 1 21
Gpt3D_Clone526_7.cs 22 39
----------------------------------------

public bool Seq_Check (int [] elems, int k) {
    for (int i = elems.Length; i > 0; i --) {
        if (elems [i] == k) {
            int curr = k - 1;
            for (; i > 0 && curr > 0; i --) {
                if (elems [i] != curr) {
                    if (elems [i] == k) {
                        curr = k - 1;
                        continue;
                    }
                    break;
                }
                curr --;
            }
            if (curr == 0) {
                return true;
            }
        }
    }
    return false;
}
----------------------------------------

 public bool Seq_Check (int [] elems, int k) 
{
   for (int i = 0; i < elems.Length; i++){
    if (elems [i] == k){
        int counter = k - 1;
        for (; i < elems.Length && counter > 0; i++){
            if (elems[i] != counter)
                break;
            counter --;
        }
        if (counter == 0) 
            return true;
    }
   }
   return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
528
0
Gpt3D_Clone528_0.cs 1 9
Gpt3D_Clone528_0.cs 10 23
----------------------------------------

[System.Security.Permissions.SecurityPermission (System.Security.Permissions.SecurityAction.Demand)] public override void Commit (IDictionary savedState) {
    base.Commit (savedState);
    string environmentVar = Environment.GetEnvironmentVariable ("PATH");
    string oldPath = (string) Registry.LocalMachine.CreateSubKey (environmentKey).GetValue ("Path", "", RegistryValueOptions.DoNotExpandEnvironmentNames);
    var index = oldPath.IndexOf (pathUrl);
    if (index < 0) {
        Registry.LocalMachine.CreateSubKey (environmentKey).SetValue ("Path", oldPath + ";" + pathUrl, RegistryValueKind.ExpandString);
    }
}
----------------------------------------

 [System.Security.Permissions.SecurityPermission(System.Security.Permissions.SecurityAction.Demand)]
public override void Commit(IDictionary savedState)
{
    base.Commit(savedState);
    string environmentVar = System.Environment.GetEnvironmentVariable("PATH");
    string oldPath = Microsoft.Win32.Registry.LocalMachine.CreateSubKey(environmentKey).GetValue("Path","",Microsoft.Win32.RegistryValueOptions.DoNotExpandEnvironmentNames).ToString();
    int index = oldPath.IndexOf(pathUrl);
    if(index < 0)
    {
        Microsoft.Win32.Registry.LocalMachine.CreateSubKey(environmentKey).SetValue("Path", oldPath + ";" + pathUrl, Microsoft.Win32.RegistryValueKind.ExpandString);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
528
1
Gpt3D_Clone528_1.cs 1 9
Gpt3D_Clone528_1.cs 10 23
----------------------------------------

[System.Security.Permissions.SecurityPermission (System.Security.Permissions.SecurityAction.Demand)] public override void Commit (IDictionary savedState) {
    base.Commit (savedState);
    string environmentVar = Environment.GetEnvironmentVariable ("PATH");
    string oldPath = (string) Registry.LocalMachine.CreateSubKey (environmentKey).GetValue ("Path", "", RegistryValueOptions.DoNotExpandEnvironmentNames);
    var index = oldPath.IndexOf (pathUrl);
    if (index < 0) {
        Registry.LocalMachine.CreateSubKey (environmentKey).SetValue ("Path", oldPath + ";" + pathUrl, RegistryValueKind.ExpandString);
    }
}
----------------------------------------

 [System.Security.Permissions.SecurityPermission(System.Security.Permissions.SecurityAction.Demand)]
public override void Commit(IDictionary savedState)
{
    base.Commit(savedState);
    string environmentVar = System.Environment.GetEnvironmentVariable("PATH");
    string oldPath = Microsoft.Win32.Registry.LocalMachine.OpenSubKey(environmentKey).GetValue("Path","",Microsoft.Win32.RegistryValueOptions.DoNotExpandEnvironmentNames).ToString();
    int index = oldPath.IndexOf(pathUrl);
    if(index < 0)
    {
        Microsoft.Win32.Registry.LocalMachine.OpenSubKey(environmentKey, true).SetValue("Path", environmentVar + ";" + pathUrl, Microsoft.Win32.RegistryValueKind.ExpandString);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
528
2
Gpt3D_Clone528_2.cs 1 9
Gpt3D_Clone528_2.cs 10 23
----------------------------------------

[System.Security.Permissions.SecurityPermission (System.Security.Permissions.SecurityAction.Demand)] public override void Commit (IDictionary savedState) {
    base.Commit (savedState);
    string environmentVar = Environment.GetEnvironmentVariable ("PATH");
    string oldPath = (string) Registry.LocalMachine.CreateSubKey (environmentKey).GetValue ("Path", "", RegistryValueOptions.DoNotExpandEnvironmentNames);
    var index = oldPath.IndexOf (pathUrl);
    if (index < 0) {
        Registry.LocalMachine.CreateSubKey (environmentKey).SetValue ("Path", oldPath + ";" + pathUrl, RegistryValueKind.ExpandString);
    }
}
----------------------------------------

 [System.Security.Permissions.SecurityPermission(System.Security.Permissions.SecurityAction.Demand)]
public override void Commit(IDictionary savedState)
{
    base.Commit(savedState);
    string environmentVar = System.Environment.GetEnvironmentVariable("PATH");
    string oldPath = Microsoft.Win32.Registry.LocalMachine.OpenSubKey(environmentKey).GetValue("Path","",Microsoft.Win32.RegistryValueOptions.DoNotExpandEnvironmentNames).ToString();
    int index = oldPath.IndexOf(pathUrl);
    if(index < 0)
    {
        Microsoft.Win32.Registry.LocalMachine.CreateSubKey(environmentKey).SetValue("Path", oldPath + ";" + pathUrl, Microsoft.Win32.RegistryValueKind.DWord);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
528
3
Gpt3D_Clone528_3.cs 1 9
Gpt3D_Clone528_3.cs 10 23
----------------------------------------

[System.Security.Permissions.SecurityPermission (System.Security.Permissions.SecurityAction.Demand)] public override void Commit (IDictionary savedState) {
    base.Commit (savedState);
    string environmentVar = Environment.GetEnvironmentVariable ("PATH");
    string oldPath = (string) Registry.LocalMachine.CreateSubKey (environmentKey).GetValue ("Path", "", RegistryValueOptions.DoNotExpandEnvironmentNames);
    var index = oldPath.IndexOf (pathUrl);
    if (index < 0) {
        Registry.LocalMachine.CreateSubKey (environmentKey).SetValue ("Path", oldPath + ";" + pathUrl, RegistryValueKind.ExpandString);
    }
}
----------------------------------------

 [System.Security.Permissions.SecurityPermission(System.Security.Permissions.SecurityAction.Demand)]
public override void Commit(IDictionary savedState)
{
    base.Commit(savedState);
    string environmentVar = System.Environment.GetEnvironmentVariable("PATH");
    string oldPath = (string)Microsoft.Win32.Registry.LocalMachine.OpenSubKey(environmentKey).GetValue("Path","",Microsoft.Win32.RegistryValueOptions.DoNotExpandEnvironmentNames);
    int index = oldPath.IndexOf(pathUrl);
    if(index < 0)
    {
        Microsoft.Win32.Registry.LocalMachine.CreateSubKey(environmentKey).SetValue("Path", oldPath + ";" + pathUrl, Microsoft.Win32.RegistryValueKind.String);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
528
4
Gpt3D_Clone528_4.cs 1 9
Gpt3D_Clone528_4.cs 10 23
----------------------------------------

[System.Security.Permissions.SecurityPermission (System.Security.Permissions.SecurityAction.Demand)] public override void Commit (IDictionary savedState) {
    base.Commit (savedState);
    string environmentVar = Environment.GetEnvironmentVariable ("PATH");
    string oldPath = (string) Registry.LocalMachine.CreateSubKey (environmentKey).GetValue ("Path", "", RegistryValueOptions.DoNotExpandEnvironmentNames);
    var index = oldPath.IndexOf (pathUrl);
    if (index < 0) {
        Registry.LocalMachine.CreateSubKey (environmentKey).SetValue ("Path", oldPath + ";" + pathUrl, RegistryValueKind.ExpandString);
    }
}
----------------------------------------

 [System.Security.Permissions.SecurityPermission(System.Security.Permissions.SecurityAction.Demand)]
public override void Commit(IDictionary savedState)
{
    base.Commit(savedState);
    string environmentVar = System.Environment.GetEnvironmentVariable("PATH");
    string oldPath = (string)Microsoft.Win32.Registry.LocalMachine.OpenSubKey(environmentKey).GetValue("Path","",Microsoft.Win32.RegistryValueOptions.DoNotExpandEnvironmentNames);
    int index = oldPath.IndexOf(pathUrl);
    if(index < 0)
    {
        Microsoft.Win32.Registry.LocalMachine.CreateSubKey(environmentKey).SetValue("Path", environmentVar + ";" + pathUrl, Microsoft.Win32.RegistryValueKind.String);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
528
5
Gpt3D_Clone528_5.cs 1 9
Gpt3D_Clone528_5.cs 10 23
----------------------------------------

[System.Security.Permissions.SecurityPermission (System.Security.Permissions.SecurityAction.Demand)] public override void Commit (IDictionary savedState) {
    base.Commit (savedState);
    string environmentVar = Environment.GetEnvironmentVariable ("PATH");
    string oldPath = (string) Registry.LocalMachine.CreateSubKey (environmentKey).GetValue ("Path", "", RegistryValueOptions.DoNotExpandEnvironmentNames);
    var index = oldPath.IndexOf (pathUrl);
    if (index < 0) {
        Registry.LocalMachine.CreateSubKey (environmentKey).SetValue ("Path", oldPath + ";" + pathUrl, RegistryValueKind.ExpandString);
    }
}
----------------------------------------

 [System.Security.Permissions.SecurityPermission(System.Security.Permissions.SecurityAction.Demand)]
public override void Commit(IDictionary savedState)
{
    base.Commit(savedState);
    string environmentVar = System.Environment.GetEnvironmentVariable("PATH");
    string oldPath = Microsoft.Win32.Registry.LocalMachine.CreateSubKey(environmentKey).GetValue("Path","",Microsoft.Win32.RegistryValueOptions.DoNotExpandEnvironmentNames).ToString();
    int index = oldPath.IndexOf(pathUrl);
    if(index < 0)
    {
        Microsoft.Win32.Registry.LocalMachine.OpenSubKey(environmentKey, true).SetValue("Path", oldPath + ";" + pathUrl, Microsoft.Win32.RegistryValueKind.ExpandString);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
528
6
Gpt3D_Clone528_6.cs 1 9
Gpt3D_Clone528_6.cs 10 23
----------------------------------------

[System.Security.Permissions.SecurityPermission (System.Security.Permissions.SecurityAction.Demand)] public override void Commit (IDictionary savedState) {
    base.Commit (savedState);
    string environmentVar = Environment.GetEnvironmentVariable ("PATH");
    string oldPath = (string) Registry.LocalMachine.CreateSubKey (environmentKey).GetValue ("Path", "", RegistryValueOptions.DoNotExpandEnvironmentNames);
    var index = oldPath.IndexOf (pathUrl);
    if (index < 0) {
        Registry.LocalMachine.CreateSubKey (environmentKey).SetValue ("Path", oldPath + ";" + pathUrl, RegistryValueKind.ExpandString);
    }
}
----------------------------------------

 [System.Security.Permissions.SecurityPermission(System.Security.Permissions.SecurityAction.Demand)]
public override void Commit(IDictionary savedState)
{
    base.Commit(savedState);
    string environmentVar = System.Environment.GetEnvironmentVariable("PATH");
    string oldPath = (string)Microsoft.Win32.Registry.LocalMachine.GetValue(environmentKey, "Path", "", Microsoft.Win32.RegistryValueOptions.DoNotExpandEnvironmentNames);
    int index = oldPath.IndexOf(pathUrl);
    if(index < 0)
    {
        Microsoft.Win32.Registry.LocalMachine.OpenSubKey(environmentKey, true).SetValue("Path", oldPath + ";" + pathUrl, Microsoft.Win32.RegistryValueKind.String);
    }
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
528
7
Gpt3D_Clone528_7.cs 1 9
Gpt3D_Clone528_7.cs 10 23
----------------------------------------

[System.Security.Permissions.SecurityPermission (System.Security.Permissions.SecurityAction.Demand)] public override void Commit (IDictionary savedState) {
    base.Commit (savedState);
    string environmentVar = Environment.GetEnvironmentVariable ("PATH");
    string oldPath = (string) Registry.LocalMachine.CreateSubKey (environmentKey).GetValue ("Path", "", RegistryValueOptions.DoNotExpandEnvironmentNames);
    var index = oldPath.IndexOf (pathUrl);
    if (index < 0) {
        Registry.LocalMachine.CreateSubKey (environmentKey).SetValue ("Path", oldPath + ";" + pathUrl, RegistryValueKind.ExpandString);
    }
}
----------------------------------------

 [System.Security.Permissions.SecurityPermission(System.Security.Permissions.SecurityAction.Demand)]
public override void Commit(IDictionary savedState)
{
    base.Commit(savedState);
    string environmentVar = System.Environment.GetEnvironmentVariable("PATH");
    string oldPath = Microsoft.Win32.Registry.LocalMachine.OpenSubKey(environmentKey).GetValue("Path", "", Microsoft.Win32.RegistryValueOptions.DoNotExpandEnvironmentNames).ToString();
    int index = oldPath.IndexOf(pathUrl);
    if(index < 0)
    {
        Microsoft.Win32.Registry.LocalMachine.CreateSubKey(environmentKey).SetValue("Path", environmentVar + ";" + pathUrl, Microsoft.Win32.RegistryValueKind.ExpandString);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
528
8
Gpt3D_Clone528_8.cs 1 9
Gpt3D_Clone528_8.cs 10 23
----------------------------------------

[System.Security.Permissions.SecurityPermission (System.Security.Permissions.SecurityAction.Demand)] public override void Commit (IDictionary savedState) {
    base.Commit (savedState);
    string environmentVar = Environment.GetEnvironmentVariable ("PATH");
    string oldPath = (string) Registry.LocalMachine.CreateSubKey (environmentKey).GetValue ("Path", "", RegistryValueOptions.DoNotExpandEnvironmentNames);
    var index = oldPath.IndexOf (pathUrl);
    if (index < 0) {
        Registry.LocalMachine.CreateSubKey (environmentKey).SetValue ("Path", oldPath + ";" + pathUrl, RegistryValueKind.ExpandString);
    }
}
----------------------------------------

 [System.Security.Permissions.SecurityPermission(System.Security.Permissions.SecurityAction.Demand)]
public override void Commit(IDictionary savedState)
{
    base.Commit(savedState);
    string environmentVar = System.Environment.GetEnvironmentVariable("PATH");
    string oldPath = (string)Microsoft.Win32.Registry.LocalMachine.OpenSubKey(environmentKey).GetValue("Path","",Microsoft.Win32.RegistryValueOptions.DoNotExpandEnvironmentNames);
    int index = oldPath.IndexOf(pathUrl);
    if(index < 0)
    {
        Microsoft.Win32.Registry.LocalMachine.OpenSubKey(environmentKey, true).SetValue("Path", oldPath + ";" + pathUrl, Microsoft.Win32.RegistryValueKind.ExpandString);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
528
9
Gpt3D_Clone528_9.cs 1 9
Gpt3D_Clone528_9.cs 10 23
----------------------------------------

[System.Security.Permissions.SecurityPermission (System.Security.Permissions.SecurityAction.Demand)] public override void Commit (IDictionary savedState) {
    base.Commit (savedState);
    string environmentVar = Environment.GetEnvironmentVariable ("PATH");
    string oldPath = (string) Registry.LocalMachine.CreateSubKey (environmentKey).GetValue ("Path", "", RegistryValueOptions.DoNotExpandEnvironmentNames);
    var index = oldPath.IndexOf (pathUrl);
    if (index < 0) {
        Registry.LocalMachine.CreateSubKey (environmentKey).SetValue ("Path", oldPath + ";" + pathUrl, RegistryValueKind.ExpandString);
    }
}
----------------------------------------

 [System.Security.Permissions.SecurityPermission(System.Security.Permissions.SecurityAction.Demand)]
public override void Commit(IDictionary savedState)
{
    base.Commit(savedState);
    string environmentVar = System.Environment.GetEnvironmentVariable("PATH");
    string oldPath = Microsoft.Win32.Registry.LocalMachine.GetValue(environmentKey, "Path", "", Microsoft.Win32.RegistryValueOptions.DoNotExpandEnvironmentNames);
    int index = oldPath.IndexOf(pathUrl);
    if(index < 0)
    {
        Microsoft.Win32.Registry.LocalMachine.CreateSubKey(environmentKey).SetValue("Path", oldPath + ";" + pathUrl, Microsoft.Win32.RegistryValueKind.ExpandString);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
532
0
Gpt3D_Clone532_0.cs 1 14
Gpt3D_Clone532_0.cs 15 43
----------------------------------------

private void AddNode (int valueToBeInserted, Node current) {
    if (valueToBeInserted < current.value) {
        if (current.left == null)
            current.left = new Node (valueToBeInserted);
        else
            AddNode (valueToBeInserted, current.left);
    }
    if (valueToBeInserted > current.value) {
        if (current.right == null)
            current.right = new Node (valueToBeInserted);
        else
            AddNode (valueToBeInserted, current.right);
    }
}
----------------------------------------

  private void AddNode(int valueToBeInserted, Node current)
    {
        if(valueToBeInserted < current.value)
        {
            if(current.left == null)
            {
                Node retrievedNode = new Node(valueToBeInserted);
                current.left = retrievedNode;
            }
            else
            {
                AddNode(valueToBeInserted, current.left);
            }
        }
        else if(valueToBeInserted > current.value)
        {
            if(current.right == null)
            {
                Node retrievedNode = new Node(valueToBeInserted);
                current.right = retrievedNode;
            }
            else
            {
                AddNode(valueToBeInserted, current.right);
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
532
1
Gpt3D_Clone532_1.cs 1 14
Gpt3D_Clone532_1.cs 15 43
----------------------------------------

private void AddNode (int valueToBeInserted, Node current) {
    if (valueToBeInserted < current.value) {
        if (current.left == null)
            current.left = new Node (valueToBeInserted);
        else
            AddNode (valueToBeInserted, current.left);
    }
    if (valueToBeInserted > current.value) {
        if (current.right == null)
            current.right = new Node (valueToBeInserted);
        else
            AddNode (valueToBeInserted, current.right);
    }
}
----------------------------------------

  private void AddNode(int valueToBeInserted, Node current)
    {
        Node newNode = new Node(valueToBeInserted);
        
        if(valueToBeInserted < current.value)
        {
            if (current.left != null)
            {
                AddNode(valueToBeInserted, current.left);
            }
            else
            {
                current.left = newNode;
            }
        }
        else if (valueToBeInserted > current.value)
        {
            if (current.right != null)
            {
                AddNode(valueToBeInserted, current.right);
            }
            else
            {
                current.right = newNode;
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
532
2
Gpt3D_Clone532_2.cs 1 14
Gpt3D_Clone532_2.cs 15 43
----------------------------------------

private void AddNode (int valueToBeInserted, Node current) {
    if (valueToBeInserted < current.value) {
        if (current.left == null)
            current.left = new Node (valueToBeInserted);
        else
            AddNode (valueToBeInserted, current.left);
    }
    if (valueToBeInserted > current.value) {
        if (current.right == null)
            current.right = new Node (valueToBeInserted);
        else
            AddNode (valueToBeInserted, current.right);
    }
}
----------------------------------------

 private void AddNode(int valueToBeInserted, Node current)
    {
        Node insertedNode = new Node(valueToBeInserted);
        
        if (valueToBeInserted < current.value)
        {
            if (current.left == null)
            {
                current.left = insertedNode;
            }
            else
            {
                AddNode(valueToBeInserted, current.left);
            }
        }
        else if (valueToBeInserted > current.value)
        {
            if (current.right == null)
            {
                current.right = insertedNode;
            }
            else
            {
                AddNode(valueToBeInserted, current.right);
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
532
3
Gpt3D_Clone532_3.cs 1 14
Gpt3D_Clone532_3.cs 15 38
----------------------------------------

private void AddNode (int valueToBeInserted, Node current) {
    if (valueToBeInserted < current.value) {
        if (current.left == null)
            current.left = new Node (valueToBeInserted);
        else
            AddNode (valueToBeInserted, current.left);
    }
    if (valueToBeInserted > current.value) {
        if (current.right == null)
            current.right = new Node (valueToBeInserted);
        else
            AddNode (valueToBeInserted, current.right);
    }
}
----------------------------------------

  private void AddNode(int valueToBeInserted, Node current)
    {
        if (valueToBeInserted < current.value && current.left == null)
        {
            Node newNode = new Node(valueToBeInserted);
            current.left = newNode;
        }
        else if (valueToBeInserted > current.value && current.right == null)
        {
            Node newNode = new Node(valueToBeInserted);
            current.right = newNode;
        }
        else 
        {
            if (valueToBeInserted < current.value)
                AddNode(valueToBeInserted, current.left);
            else 
            {
                AddNode(valueToBeInserted, current.right);
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
532
4
Gpt3D_Clone532_4.cs 1 14
Gpt3D_Clone532_4.cs 15 43
----------------------------------------

private void AddNode (int valueToBeInserted, Node current) {
    if (valueToBeInserted < current.value) {
        if (current.left == null)
            current.left = new Node (valueToBeInserted);
        else
            AddNode (valueToBeInserted, current.left);
    }
    if (valueToBeInserted > current.value) {
        if (current.right == null)
            current.right = new Node (valueToBeInserted);
        else
            AddNode (valueToBeInserted, current.right);
    }
}
----------------------------------------

  private void AddNode(int valueToBeInserted, Node current)
    {
        Node insertionNode = new Node(valueToBeInserted);
        
        if (valueToBeInserted < current.value)
        {
            if (current.left == null)
            {
                current.left = insertionNode;
            }
            else
            {
                AddNode(valueToBeInserted, current.left);
            }
        }
        else if (valueToBeInserted > current.value)
        {
            if (current.right == null)
            {
                current.right = insertionNode;
            }
            else
            {
                AddNode(valueToBeInserted, current.right);
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
538
0
Gpt3D_Clone538_0.cs 1 24
Gpt3D_Clone538_0.cs 25 62
----------------------------------------

public static void Dispose (this MethodBuilder mb) {
    if (mb == null)
        return;
    Type mbType = typeof (MethodBuilder);
    FieldInfo mbILGen = mbType.GetField ("m_ilGenerator", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbMod = mbType.GetField ("m_module", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbContType = mbType.GetField ("m_containingType", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbLocSigHelp = mbType.GetField ("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic);
    FieldInfo mbSigHelp = mbType.GetField ("m_signature", BindingFlags.Instance | BindingFlags.NonPublic);
    ILGenerator tempIlGen = mbILGen.GetValue (mb) as ILGenerator;
    tempIlGen.Dispose ();
    SignatureHelper tempmbSigHelp = mbLocSigHelp.GetValue (mb) as SignatureHelper;
    tempmbSigHelp.Dispose ();
    tempmbSigHelp = mbSigHelp.GetValue (mb) as SignatureHelper;
    tempmbSigHelp.Dispose ();
    ModuleBuilder tempMod = mbMod.GetValue (mb) as ModuleBuilder;
    tempMod.Dispose ();
    mbMod.SetValue (mb, null);
    mbILGen.SetValue (mb, null);
    mbContType.SetValue (mb, null);
    mbLocSigHelp.SetValue (mb, null);
    mbSigHelp.SetValue (mb, null);
    mbMod.SetValue (mb, null);
}
----------------------------------------

 public static void Dispose (this MethodBuilder mb) { 
    if (mb == null)
        return;
    Type mbType = typeof (MethodBuilder);
    FieldInfo mbILGen = mbType.GetField ("m_ilGenerator", BindingFlags.Instance | BindingFlags.NonPublic);
    ILGenerator tempIlGen = (ILGenerator) mbILGen.GetValue (mb);
    tempIlGen.Dispose ();
    FieldInfo mbMod = mbType.GetField ("m_module", BindingFlags.Instance | BindingFlags.NonPublic);
    ModuleBuilder tempMod = (ModuleBuilder) mbMod.GetValue (mb);
    tempMod.Dispose ();
    mbMod.SetValue (mb, null);
    mbILGen.SetValue (mb, null);
    FieldInfo mbContType = mbType.GetField ("m_containingType", BindingFlags.Instance | BindingFlags.NonPublic);
    mbContType.SetValue (mb, null);
    tempIlGen = mbILGen.GetValue (mb) as ILGenerator;
    if (tempIlGen != null)
        tempIlGen.Dispose ();
    SignatureHelper tempmbSigHelp = mbType.GetField ("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic).GetValue (mb) as SignatureHelper;
    if (tempmbSigHelp != null)
        tempmbSigHelp.Dispose ();
    tempmbSigHelp = mbType.GetField ("m_signature", BindingFlags.Instance | BindingFlags.NonPublic).GetValue (mb) as SignatureHelper;
    if (tempmbSigHelp != null)
        tempmbSigHelp.Dispose ();
    mbType.GetField ("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic).SetValue (mb, null);
    mbType.GetField ("m_signature", BindingFlags.Instance | BindingFlags.NonPublic).SetValue (mb, null);
    mbMod.SetValue (mb, null);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
539
8
Gpt3D_Clone539_8.cs 1 9
Gpt3D_Clone539_8.cs 10 21
----------------------------------------

public static void Dispose (this ILGenerator ilGen) {
    if (ilGen == null)
        return;
    Type ilGenType = typeof (ILGenerator);
    FieldInfo ilSigHelp = ilGenType.GetField ("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic);
    SignatureHelper sigTemp = ilSigHelp.GetValue (ilGen) as SignatureHelper;
    sigTemp.Dispose ();
    ilSigHelp.SetValue (ilGen, null);
}
----------------------------------------

 public static void Dispose (this ILGenerator ilGen) {
    if (ilGen != null) {
        SignatureHelper sigHelp = ilGen.GetType()
            .GetField("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic)
            .GetValue(ilGen) as SignatureHelper;
        sigHelp?.Dispose();
        ilGen.GetType().GetField("m_localSignature", BindingFlags.Instance | BindingFlags.NonPublic).SetValue(ilGen, null);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
540
0
Gpt3D_Clone540_0.cs 1 12
Gpt3D_Clone540_0.cs 13 33
----------------------------------------

private static void Compile () {
    if (_assembly == null) {
        StringBuilder src = new StringBuilder (CodeStart);
        foreach (KeyValuePair < string, string > kvp in _conditionSnippet)
            src.AppendFormat (ConditionTemplate, DynamicConditionPrefix, kvp.Key, kvp.Value);
        foreach (KeyValuePair < string, string > kvp in _methodSnippet)
            src.AppendFormat (MethodTemplate, kvp.Key, kvp.Value);
        src.Append (CodeEnd);
        Trace.TraceError ("SOURCE\r\n{0}", src);
        _assembly = Compile (src.ToString ());
    }
}
----------------------------------------

 private static void Compile()
{
    if (_assembly == null)
    {
        List<String> srcLines = new List<String>();
        srcLines.Add(CodeStart);
        foreach (KeyValuePair < string, string > kvp in _conditionSnippet)
            srcLines.Add(string.Format(ConditionTemplate, DynamicConditionPrefix, kvp.Key, kvp.Value));
        foreach (KeyValuePair < string, string > kvp in _methodSnippet)
            srcLines.Add(string.Format(MethodTemplate, kvp.Key, kvp.Value));
        srcLines.Add(CodeEnd);
        string sourceCode = string.Join(Environment.NewLine, srcLines);
        
        Trace.TraceError("SOURCE\r\n{0}", sourceCode);
        _assembly = CompileAndLink(sourceCode);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
540
1
Gpt3D_Clone540_1.cs 1 12
Gpt3D_Clone540_1.cs 13 33
----------------------------------------

private static void Compile () {
    if (_assembly == null) {
        StringBuilder src = new StringBuilder (CodeStart);
        foreach (KeyValuePair < string, string > kvp in _conditionSnippet)
            src.AppendFormat (ConditionTemplate, DynamicConditionPrefix, kvp.Key, kvp.Value);
        foreach (KeyValuePair < string, string > kvp in _methodSnippet)
            src.AppendFormat (MethodTemplate, kvp.Key, kvp.Value);
        src.Append (CodeEnd);
        Trace.TraceError ("SOURCE\r\n{0}", src);
        _assembly = Compile (src.ToString ());
    }
}
----------------------------------------

 private static void Compile()
{
    if (_assembly == null)
    {
        List<String> sourceLines = new List<String>();
        sourceLines.Add(CodeStart);
        foreach (KeyValuePair < string, string > kvp in _conditionSnippet)
            sourceLines.Add(string.Format(ConditionTemplate, DynamicConditionPrefix, kvp.Key, kvp.Value));
        foreach (KeyValuePair < string, string > kvp in _methodSnippet)
            sourceLines.Add(string.Format(MethodTemplate, kvp.Key, kvp.Value));
        sourceLines.Add(CodeEnd);
        string sourceCode = string.Join(Environment.NewLine, sourceLines);
        
        Trace.TraceError("SOURCE\r\n{0}", sourceCode);
        _assembly = CompileSourceToAssemblyWithLinker(sourceCode);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
540
3
Gpt3D_Clone540_3.cs 1 12
Gpt3D_Clone540_3.cs 13 24
----------------------------------------

private static void Compile () {
    if (_assembly == null) {
        StringBuilder src = new StringBuilder (CodeStart);
        foreach (KeyValuePair < string, string > kvp in _conditionSnippet)
            src.AppendFormat (ConditionTemplate, DynamicConditionPrefix, kvp.Key, kvp.Value);
        foreach (KeyValuePair < string, string > kvp in _methodSnippet)
            src.AppendFormat (MethodTemplate, kvp.Key, kvp.Value);
        src.Append (CodeEnd);
        Trace.TraceError ("SOURCE\r\n{0}", src);
        _assembly = Compile (src.ToString ());
    }
}
----------------------------------------

 private static void Compile()
{
    if (_assembly == null)
    {
        var sourceCode = CreateSourceCodeString();
        
        Trace.TraceError("SOURCE\r\n{0}", sourceCode);
        _assembly = CompileCSharpCodeToAssembly(sourceCode);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
540
4
Gpt3D_Clone540_4.cs 1 12
Gpt3D_Clone540_4.cs 13 24
----------------------------------------

private static void Compile () {
    if (_assembly == null) {
        StringBuilder src = new StringBuilder (CodeStart);
        foreach (KeyValuePair < string, string > kvp in _conditionSnippet)
            src.AppendFormat (ConditionTemplate, DynamicConditionPrefix, kvp.Key, kvp.Value);
        foreach (KeyValuePair < string, string > kvp in _methodSnippet)
            src.AppendFormat (MethodTemplate, kvp.Key, kvp.Value);
        src.Append (CodeEnd);
        Trace.TraceError ("SOURCE\r\n{0}", src);
        _assembly = Compile (src.ToString ());
    }
}
----------------------------------------

 private static void Compile()
{
    if (_assembly == null)
    {
        StringBuilder src = CreateSourceString();
        Trace.TraceError("SOURCE\r\n{0}", src);
        _assembly = CompileSourceToManagedAssembly(src.ToString());
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
540
5
Gpt3D_Clone540_5.cs 1 12
Gpt3D_Clone540_5.cs 13 24
----------------------------------------

private static void Compile () {
    if (_assembly == null) {
        StringBuilder src = new StringBuilder (CodeStart);
        foreach (KeyValuePair < string, string > kvp in _conditionSnippet)
            src.AppendFormat (ConditionTemplate, DynamicConditionPrefix, kvp.Key, kvp.Value);
        foreach (KeyValuePair < string, string > kvp in _methodSnippet)
            src.AppendFormat (MethodTemplate, kvp.Key, kvp.Value);
        src.Append (CodeEnd);
        Trace.TraceError ("SOURCE\r\n{0}", src);
        _assembly = Compile (src.ToString ());
    }
}
----------------------------------------

 private static void Compile()
{
    if (_assembly == null)
    {
        StringBuilder src = CreateSourceString();
        
        Trace.TraceError("SOURCE\r\n{0}", src);
        _assembly = GenerateAssembly(src);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
540
6
Gpt3D_Clone540_6.cs 1 12
Gpt3D_Clone540_6.cs 13 22
----------------------------------------

private static void Compile () {
    if (_assembly == null) {
        StringBuilder src = new StringBuilder (CodeStart);
        foreach (KeyValuePair < string, string > kvp in _conditionSnippet)
            src.AppendFormat (ConditionTemplate, DynamicConditionPrefix, kvp.Key, kvp.Value);
        foreach (KeyValuePair < string, string > kvp in _methodSnippet)
            src.AppendFormat (MethodTemplate, kvp.Key, kvp.Value);
        src.Append (CodeEnd);
        Trace.TraceError ("SOURCE\r\n{0}", src);
        _assembly = Compile (src.ToString ());
    }
}
----------------------------------------

 private static void Compile()
{
    if (_assembly == null)
    {
        CompileSource(CreateSourceString());
        _assembly = CreateAssembly();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
541
2
Gpt3D_Clone541_2.cs 1 15
Gpt3D_Clone541_2.cs 16 31
----------------------------------------

public override System.Windows.Controls.ValidationResult Validate (object value, System.Globalization.CultureInfo cultureInfo) {
    int myInt = 0;
    try {
        if (((string) value).Length > 0)
            myInt = int.Parse ((String) value);
    }
    catch (Exception e) {
        return new ValidationResult (false, "Illegal characters or " + e.Message);
    }
    if (myInt < 0 || myInt > 20) {
        return new ValidationResult (false, "Please enter a number in the range: 0 - 20");
    } else {
        return new ValidationResult (true, null);
    }
}
----------------------------------------

 public override System.Windows.Controls.ValidationResult Validate (object value, System.Globalization.CultureInfo cultureInfo) {
    try {
        if (((string) value).Length > 0) {
            int myInt = Convert.ToInt32((String) value);
            if (myInt < 0 || myInt > 20) {
                return new ValidationResult (false, "Please enter a number in the range: 0 - 20");
            } 
        }
    }
    catch (Exception e) {
        return new ValidationResult (false, "Illegal characters or " + e.Message);
    }
    return new ValidationResult (true, null);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
541
4
Gpt3D_Clone541_4.cs 1 15
Gpt3D_Clone541_4.cs 16 25
----------------------------------------

public override System.Windows.Controls.ValidationResult Validate (object value, System.Globalization.CultureInfo cultureInfo) {
    int myInt = 0;
    try {
        if (((string) value).Length > 0)
            myInt = int.Parse ((String) value);
    }
    catch (Exception e) {
        return new ValidationResult (false, "Illegal characters or " + e.Message);
    }
    if (myInt < 0 || myInt > 20) {
        return new ValidationResult (false, "Please enter a number in the range: 0 - 20");
    } else {
        return new ValidationResult (true, null);
    }
}
----------------------------------------

 public override System.Windows.Controls.ValidationResult Validate (object value, System.Globalization.CultureInfo cultureInfo) {
    int myInt = 0; 
    if (int.TryParse((string)value, out myInt) && myInt > 0 && myInt <= 20) {
        return new ValidationResult (true, null);
    } else {
        return new ValidationResult (false, "Please enter a number in the range: 0 - 20");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
543
0
Gpt3D_Clone543_0.cs 1 17
Gpt3D_Clone543_0.cs 18 49
----------------------------------------

public Message WrapA (int a, int millisecondsTimeout) {
    int ? b;
    int count = 0;
    while ((b = Interlocked.Exchange (ref pendingB, EMPTY)) == EMPTY) {
        if (count % 7 == 0) {
            Thread.Sleep (0);
        } else if (count % 23 == 0) {
            Thread.Sleep (1);
        } else {
            Thread.Yield ();
        }
        if (++ count == 480) {
            return new Message (a, null);
        }
    }
    return new Message (a, b);
}
----------------------------------------

  public Message WrapA (int a, int millisecondsTimeout) {
    int ? b;
    int count = 0;
    while ((b = Interlocked.Exchange (ref pendingB, EMPTY)) == EMPTY) {
        if (count%7 == 0) {
            try {
                Thread.sleep(millisecondsTimeout);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        } else if (count % 23 == 0) {
            try {
                Thread.sleep(millisecondsTimeout);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        } else {
            try {
                Thread.sleep(1);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }
        if (++ count == 480) {
            return new Message (a, null);
        }
    }
    return new Message (a, b);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
544
0
Gpt3D_Clone544_0.cs 1 17
Gpt3D_Clone544_0.cs 18 40
----------------------------------------

public Message WrapB (int b, int millisecondsTimeout) {
    int count = 0;
    while (Interlocked.CompareExchange (ref pendingB, b, EMPTY) != EMPTY) {
        Thread.SpinWait ((4 << count ++));
        if (count > 10) {
            return new Message (null, b);
        }
    }
    while (Interlocked.CompareExchange (ref pendingB, EMPTY, EMPTY) == b) {
        Thread.SpinWait ((4 << count ++));
        if (count > 20) {
            int payload = Interlocked.CompareExchange (ref pendingB, EMPTY, b);
            return payload == b ? new Message (null, b) : null;
        }
    }
    return null;
}
----------------------------------------

 public Message WrapB (int b, int millisecondsTimeout) {
    int count = 0;
    while (true) {
        int status = Interlocked.CompareExchange (ref pendingB, b, EMPTY);
        if (status == EMPTY) break;
        if (count > 10) return new Message (null, b);
        if (ManualResetEvent.WaitOne(millisecondsTimeout)) break;
    }
    while (true) {
        int status = Interlocked.CompareExchange (ref pendingB, EMPTY, EMPTY);
        if (status == b) {
            if (count > 20) {
                int payload = Interlocked.CompareExchange (ref pendingB, EMPTY, b);
                return payload == b ? new Message (null, b) : null;
            }
            if (ManualResetEvent.WaitOne(millisecondsTimeout)) break;
        } 
        else break;
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
544
1
Gpt3D_Clone544_1.cs 1 17
Gpt3D_Clone544_1.cs 18 47
----------------------------------------

public Message WrapB (int b, int millisecondsTimeout) {
    int count = 0;
    while (Interlocked.CompareExchange (ref pendingB, b, EMPTY) != EMPTY) {
        Thread.SpinWait ((4 << count ++));
        if (count > 10) {
            return new Message (null, b);
        }
    }
    while (Interlocked.CompareExchange (ref pendingB, EMPTY, EMPTY) == b) {
        Thread.SpinWait ((4 << count ++));
        if (count > 20) {
            int payload = Interlocked.CompareExchange (ref pendingB, EMPTY, b);
            return payload == b ? new Message (null, b) : null;
        }
    }
    return null;
}
----------------------------------------

 public Message WrapB (int b, int millisecondsTimeout) {
    int count = 0;    
    while (true) {
        int status = Interlocked.CompareExchange(ref pendingB, b, EMPTY);
        if (status == EMPTY) {
            break;
        }
        else {
            Thread.SpinWait((4 << count++));
            if (count > 10) {
                return new Message (null, b);
            }
        }
    }        
    while (true) {
        int status = Interlocked.CompareExchange (ref pendingB, EMPTY, EMPTY);
        if (status == b) {
            Thread.SpinWait((4 << count++));
            if (count > 20) {
                int payload = Interlocked.CompareExchange(ref pendingB, EMPTY, b);
                return payload == b ? new Message (null, b) : null;
            }
        } else {
            break;
        }
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
544
2
Gpt3D_Clone544_2.cs 1 17
Gpt3D_Clone544_2.cs 18 40
----------------------------------------

public Message WrapB (int b, int millisecondsTimeout) {
    int count = 0;
    while (Interlocked.CompareExchange (ref pendingB, b, EMPTY) != EMPTY) {
        Thread.SpinWait ((4 << count ++));
        if (count > 10) {
            return new Message (null, b);
        }
    }
    while (Interlocked.CompareExchange (ref pendingB, EMPTY, EMPTY) == b) {
        Thread.SpinWait ((4 << count ++));
        if (count > 20) {
            int payload = Interlocked.CompareExchange (ref pendingB, EMPTY, b);
            return payload == b ? new Message (null, b) : null;
        }
    }
    return null;
}
----------------------------------------

 public Message WrapB (int b, int millisecondsTimeout) {
    int count = 0;
    while (true) {
        int status = Interlocked.Exchange (ref pendingB, b);
        if (status == EMPTY) break;
        AutoResetEvent.WaitOne (millisecondsTimeout);
        if (count > 10) return new Message (null, b);
    }
    while (true) {
        int status = Interlocked.Exchange (ref pendingB, EMPTY);
        if (status == b) {
            AutoResetEvent.WaitOne (millisecondsTimeout);
            if (count > 20) {
                int payload = Interlocked.Exchange (ref pendingB, EMPTY);
                return payload == b ? new Message (null, b) : null;
            }
        }
        else break;
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
544
3
Gpt3D_Clone544_3.cs 1 17
Gpt3D_Clone544_3.cs 18 40
----------------------------------------

public Message WrapB (int b, int millisecondsTimeout) {
    int count = 0;
    while (Interlocked.CompareExchange (ref pendingB, b, EMPTY) != EMPTY) {
        Thread.SpinWait ((4 << count ++));
        if (count > 10) {
            return new Message (null, b);
        }
    }
    while (Interlocked.CompareExchange (ref pendingB, EMPTY, EMPTY) == b) {
        Thread.SpinWait ((4 << count ++));
        if (count > 20) {
            int payload = Interlocked.CompareExchange (ref pendingB, EMPTY, b);
            return payload == b ? new Message (null, b) : null;
        }
    }
    return null;
}
----------------------------------------

 public Message WrapB (int b, int millisecondsTimeout) {
    int count = 0;
    while (true) {
        int status = Interlocked.CompareExchange (ref pendingB, b, EMPTY);
        if (status == EMPTY) break;
        Task.Delay(millisecondsTimeout).Wait();
        if (count > 10) return new Message (null, b);
    }
    while (true) {
        int status = Interlocked.CompareExchange (ref pendingB, EMPTY, EMPTY);
        if (status == b) {
            Task.Delay(millisecondsTimeout).Wait();
            if (count > 20) {
                int payload = Interlocked.CompareExchange (ref pendingB, EMPTY, b);
                return payload == b ? new Message (null, b) : null;
            }
        }
        else break;
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
544
4
Gpt3D_Clone544_4.cs 1 17
Gpt3D_Clone544_4.cs 18 40
----------------------------------------

public Message WrapB (int b, int millisecondsTimeout) {
    int count = 0;
    while (Interlocked.CompareExchange (ref pendingB, b, EMPTY) != EMPTY) {
        Thread.SpinWait ((4 << count ++));
        if (count > 10) {
            return new Message (null, b);
        }
    }
    while (Interlocked.CompareExchange (ref pendingB, EMPTY, EMPTY) == b) {
        Thread.SpinWait ((4 << count ++));
        if (count > 20) {
            int payload = Interlocked.CompareExchange (ref pendingB, EMPTY, b);
            return payload == b ? new Message (null, b) : null;
        }
    }
    return null;
}
----------------------------------------

 public Message WrapB (int b, int millisecondsTimeout) {
    int count = 0;
    while (true) {
        int status = Interlocked.Exchange (ref pendingB, b);
        if (status == EMPTY) break;
        SemaphoreSlim.Wait (millisecondsTimeout);
        if (count > 10) return new Message (null, b);
    }
    while (true) {
        int status = Interlocked.Exchange (ref pendingB, EMPTY);
        if (status == b) {
            SemaphoreSlim.Wait (millisecondsTimeout);
            if (count > 20) {
                int payload = Interlocked.Exchange (ref pendingB, EMPTY);
                return payload == b ? new Message (null, b) : null;
            }
        }
        else break;
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
544
5
Gpt3D_Clone544_5.cs 1 17
Gpt3D_Clone544_5.cs 18 40
----------------------------------------

public Message WrapB (int b, int millisecondsTimeout) {
    int count = 0;
    while (Interlocked.CompareExchange (ref pendingB, b, EMPTY) != EMPTY) {
        Thread.SpinWait ((4 << count ++));
        if (count > 10) {
            return new Message (null, b);
        }
    }
    while (Interlocked.CompareExchange (ref pendingB, EMPTY, EMPTY) == b) {
        Thread.SpinWait ((4 << count ++));
        if (count > 20) {
            int payload = Interlocked.CompareExchange (ref pendingB, EMPTY, b);
            return payload == b ? new Message (null, b) : null;
        }
    }
    return null;
}
----------------------------------------

 public Message WrapB (int b, int millisecondsTimeout) {
    int count = 0;
    while (true) {
        int status = Interlocked.CompareExchange (ref pendingB, b, EMPTY);
        if (status == EMPTY) break;
        CancellationTokenSource.CancelAfter (millisecondsTimeout);
        if (count > 10) return new Message (null, b);
    }
    while (true) {
        int status = Interlocked.CompareExchange (ref pendingB, EMPTY, EMPTY);
        if (status == b) {
            CancellationTokenSource.CancelAfter (millisecondsTimeout);
            if (count > 20) {
                int payload = Interlocked.CompareExchange (ref pendingB, EMPTY, b);
                return payload == b ? new Message (null, b) : null;
            }
        }
        else break;
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
546
4
Gpt3D_Clone546_4.cs 1 14
Gpt3D_Clone546_4.cs 15 37
----------------------------------------

public Message WrapA (int a, int millisecondsTimeout) {
    Message returnMessage = null;
    bool lockTaken = false;
    Monitor.TryEnter (gate, 100, ref lockTaken);
    if (lockTaken) {
        returnMessage = new Message (a, pendingB);
        pendingB = null;
        Monitor.Pulse (gate);
        Monitor.Exit (gate);
    } else {
        returnMessage = new Message (a, null);
    }
    return returnMessage;
}
----------------------------------------

 public Message WrapA (int a, int millisecondsTimeout) { 
    bool lockTaken = false;
    Timer timer = new Timer(millisecondsTimeout);
    Message returnMessage = null;
    
    timer.Elapsed += (sender, args) =>
    {
        lockTaken = true;
    };
    timer.Start();
    while (!lockTaken)
    {
    }
    returnMessage = new Message (a, pendingB);
    pendingB = null;                 
    timer.Stop();
    return returnMessage;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
546
6
Gpt3D_Clone546_6.cs 1 14
Gpt3D_Clone546_6.cs 15 33
----------------------------------------

public Message WrapA (int a, int millisecondsTimeout) {
    Message returnMessage = null;
    bool lockTaken = false;
    Monitor.TryEnter (gate, 100, ref lockTaken);
    if (lockTaken) {
        returnMessage = new Message (a, pendingB);
        pendingB = null;
        Monitor.Pulse (gate);
        Monitor.Exit (gate);
    } else {
        returnMessage = new Message (a, null);
    }
    return returnMessage;
}
----------------------------------------

 public Message WrapA (int a, int millisecondsTimeout) {  
    ReaderWriterLockSlim rwls = new ReaderWriterLockSlim(LockRecursionPolicy.NoRecursion);
    Message returnMessage = null;
    if (!rwls.TryEnterWriteLock (millisecondsTimeout)) 
    { 
        returnMessage = new Message (a, null); 
    } 
    else 
    { 
        returnMessage = new Message (a, pendingB); 
        pendingB = null; 
        Monitor.Pulse (gate); 
        rwls.ExitWriteLock (); 
    } 
    return returnMessage;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
552
0
Gpt3D_Clone552_0.cs 1 39
Gpt3D_Clone552_0.cs 40 78
----------------------------------------

private string [] splitString (string stringToSplit) {
    char [] characters = stringToSplit.ToCharArray ();
    List < string > returnValueList = new List < string > ();
    string tempString = "";
    bool blockUntilEndQuote = false;
    bool blockUntilEndQuote2 = false;
    int characterCount = 0;
    foreach (char character in characters) {
        characterCount = characterCount + 1;
        if (character == '"' && ! blockUntilEndQuote2) {
            if (blockUntilEndQuote == false) {
                blockUntilEndQuote = true;
            } else if (blockUntilEndQuote == true) {
                blockUntilEndQuote = false;
            }
        }
        if (character == '\'' && ! blockUntilEndQuote) {
            if (blockUntilEndQuote2 == false) {
                blockUntilEndQuote2 = true;
            } else if (blockUntilEndQuote2 == true) {
                blockUntilEndQuote2 = false;
            }
        }
        if (character != ',') {
            tempString = tempString + character;
        } else if (character == ',' && (blockUntilEndQuote == true || blockUntilEndQuote2 == true)) {
            tempString = tempString + character;
        } else {
            returnValueList.Add (tempString);
            tempString = "";
        }
        if (characterCount == characters.Length) {
            returnValueList.Add (tempString);
            tempString = "";
        }
    }
    string [] returnValue = returnValueList.ToArray ();
    return returnValue;
}
----------------------------------------

 private string[] splitString(string stringToSplit) 
{ 
            List<string> answer = new List<string>(); 
            int tempIndex = 0; 
            int changeIndex = 0; 
            bool inQuotes = false; 
            for(int i = 0; i < stringToSplit.Length; i++) 
            { 
                if(stringToSplit[i] == '"' && !inQuotes) 
                { 
                    inQuotes = !inQuotes; 
                } 
                else if(stringToSplit[i] == '"' && inQuotes) 
                { 
                    inQuotes = !inQuotes; 
                } 
                else if(stringToSplit[i] == ',' && !inQuotes) 
                { 
                    string resString = stringToSplit.Substring(tempIndex, i - tempIndex); 
                    changeIndex += i; 
                    tempIndex = changeIndex + 1; 
                    answer.Add(resString); 
                    continue; 
                } 
                if(i == stringToSplit.Length - 1) 
                { 
                    string resString = stringToSplit.Substring(tempIndex, i - tempIndex + 1); 
                    answer.Add(resString); 
                } 
            }  
            return answer.ToArray(); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
552
1
Gpt3D_Clone552_1.cs 1 39
Gpt3D_Clone552_1.cs 40 78
----------------------------------------

private string [] splitString (string stringToSplit) {
    char [] characters = stringToSplit.ToCharArray ();
    List < string > returnValueList = new List < string > ();
    string tempString = "";
    bool blockUntilEndQuote = false;
    bool blockUntilEndQuote2 = false;
    int characterCount = 0;
    foreach (char character in characters) {
        characterCount = characterCount + 1;
        if (character == '"' && ! blockUntilEndQuote2) {
            if (blockUntilEndQuote == false) {
                blockUntilEndQuote = true;
            } else if (blockUntilEndQuote == true) {
                blockUntilEndQuote = false;
            }
        }
        if (character == '\'' && ! blockUntilEndQuote) {
            if (blockUntilEndQuote2 == false) {
                blockUntilEndQuote2 = true;
            } else if (blockUntilEndQuote2 == true) {
                blockUntilEndQuote2 = false;
            }
        }
        if (character != ',') {
            tempString = tempString + character;
        } else if (character == ',' && (blockUntilEndQuote == true || blockUntilEndQuote2 == true)) {
            tempString = tempString + character;
        } else {
            returnValueList.Add (tempString);
            tempString = "";
        }
        if (characterCount == characters.Length) {
            returnValueList.Add (tempString);
            tempString = "";
        }
    }
    string [] returnValue = returnValueList.ToArray ();
    return returnValue;
}
----------------------------------------

 private string[] splitString(string stringToSplit) 
{ 
                List<string> answer = new List<string>(); 
                int start = 0; 
                string temp = ""; 
                bool quote = false; 
                bool apostrophe = false; 
                for (int i = 0; i < stringToSplit.Length; i++) 
                { 
                    if (stringToSplit[i] == '"') 
                    { 
                        quote = !quote; 
                    } 
                    if (stringToSplit[i] == '\'') 
                    { 
                        apostrophe = !apostrophe; 
                    } 
                    if (stringToSplit[i] == ',' && !quote && !apostrophe) 
                    { 
                        string resString = stringToSplit.Substring(start, i - start); 
                        start = i + 1; 
                        answer.Add(resString); 
                        continue; 
                    } 
                    if (i == stringToSplit.Length - 1) 
                    { 
                        string resString = stringToSplit.Substring(start, i - start + 1); 
                        answer.Add(resString); 
                    } 
                } 
                return answer.ToArray(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
552
2
Gpt3D_Clone552_2.cs 1 39
Gpt3D_Clone552_2.cs 40 75
----------------------------------------

private string [] splitString (string stringToSplit) {
    char [] characters = stringToSplit.ToCharArray ();
    List < string > returnValueList = new List < string > ();
    string tempString = "";
    bool blockUntilEndQuote = false;
    bool blockUntilEndQuote2 = false;
    int characterCount = 0;
    foreach (char character in characters) {
        characterCount = characterCount + 1;
        if (character == '"' && ! blockUntilEndQuote2) {
            if (blockUntilEndQuote == false) {
                blockUntilEndQuote = true;
            } else if (blockUntilEndQuote == true) {
                blockUntilEndQuote = false;
            }
        }
        if (character == '\'' && ! blockUntilEndQuote) {
            if (blockUntilEndQuote2 == false) {
                blockUntilEndQuote2 = true;
            } else if (blockUntilEndQuote2 == true) {
                blockUntilEndQuote2 = false;
            }
        }
        if (character != ',') {
            tempString = tempString + character;
        } else if (character == ',' && (blockUntilEndQuote == true || blockUntilEndQuote2 == true)) {
            tempString = tempString + character;
        } else {
            returnValueList.Add (tempString);
            tempString = "";
        }
        if (characterCount == characters.Length) {
            returnValueList.Add (tempString);
            tempString = "";
        }
    }
    string [] returnValue = returnValueList.ToArray ();
    return returnValue;
}
----------------------------------------

 private string[] splitString(string stringToSplit) 
{
            List<string> output = new List<string>();
            bool inQuotes = false;
            bool inApostrophes = false;
            int startIndex = 0;
            for (int i = 0; i < stringToSplit.Length; i++)
            {
                if (stringToSplit[i] == '\'' && !inApostrophes)
                {
                    inApostrophes = !inApostrophes;
                }
                else if (stringToSplit[i] == '"' && !inQuotes)
                {
                    inQuotes = !inQuotes;
                }
                else if (stringToSplit[i] == ',' && !inApostrophes && !inQuotes)
                {
                    string result = stringToSplit.Substring(startIndex, i - startIndex);
                    startIndex = i + 1;
                    output.Add(result);
                    continue;
                }
            
                if (i == stringToSplit.Length - 1)
                {
                    string result = stringToSplit.Substring(startIndex, i - startIndex + 1);
                    output.Add(result);
                }
            }
        
            return output.ToArray();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
552
3
Gpt3D_Clone552_3.cs 1 39
Gpt3D_Clone552_3.cs 40 75
----------------------------------------

private string [] splitString (string stringToSplit) {
    char [] characters = stringToSplit.ToCharArray ();
    List < string > returnValueList = new List < string > ();
    string tempString = "";
    bool blockUntilEndQuote = false;
    bool blockUntilEndQuote2 = false;
    int characterCount = 0;
    foreach (char character in characters) {
        characterCount = characterCount + 1;
        if (character == '"' && ! blockUntilEndQuote2) {
            if (blockUntilEndQuote == false) {
                blockUntilEndQuote = true;
            } else if (blockUntilEndQuote == true) {
                blockUntilEndQuote = false;
            }
        }
        if (character == '\'' && ! blockUntilEndQuote) {
            if (blockUntilEndQuote2 == false) {
                blockUntilEndQuote2 = true;
            } else if (blockUntilEndQuote2 == true) {
                blockUntilEndQuote2 = false;
            }
        }
        if (character != ',') {
            tempString = tempString + character;
        } else if (character == ',' && (blockUntilEndQuote == true || blockUntilEndQuote2 == true)) {
            tempString = tempString + character;
        } else {
            returnValueList.Add (tempString);
            tempString = "";
        }
        if (characterCount == characters.Length) {
            returnValueList.Add (tempString);
            tempString = "";
        }
    }
    string [] returnValue = returnValueList.ToArray ();
    return returnValue;
}
----------------------------------------

 private string[] splitString(string stringToSplit) 
{ 
            List<string> listElements = new List<string>(); 
            string bufferString = ""; 
            bool inQuotes = false; 
            for (int i = 0; i < stringToSplit.Length; i++) 
            { 
                if (stringToSplit[i] == '"') 
                { 
                    if(!inQuotes) 
                    { 
                        inQuotes = true; 
                    } 
                    else 
                    {  
                        inQuotes = false; 
                    }
                } 
                if (stringToSplit[i] == ',' && !inQuotes) 
                { 
                    listElements.Add(bufferString); 
                    bufferString = ""; 
                    continue; 
                } 
                bufferString += stringToSplit[i]; 
            } 
            
            listElements.Add(bufferString); 
            string[] answer = listElements.ToArray(); 
            return answer; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
552
4
Gpt3D_Clone552_4.cs 1 39
Gpt3D_Clone552_4.cs 40 76
----------------------------------------

private string [] splitString (string stringToSplit) {
    char [] characters = stringToSplit.ToCharArray ();
    List < string > returnValueList = new List < string > ();
    string tempString = "";
    bool blockUntilEndQuote = false;
    bool blockUntilEndQuote2 = false;
    int characterCount = 0;
    foreach (char character in characters) {
        characterCount = characterCount + 1;
        if (character == '"' && ! blockUntilEndQuote2) {
            if (blockUntilEndQuote == false) {
                blockUntilEndQuote = true;
            } else if (blockUntilEndQuote == true) {
                blockUntilEndQuote = false;
            }
        }
        if (character == '\'' && ! blockUntilEndQuote) {
            if (blockUntilEndQuote2 == false) {
                blockUntilEndQuote2 = true;
            } else if (blockUntilEndQuote2 == true) {
                blockUntilEndQuote2 = false;
            }
        }
        if (character != ',') {
            tempString = tempString + character;
        } else if (character == ',' && (blockUntilEndQuote == true || blockUntilEndQuote2 == true)) {
            tempString = tempString + character;
        } else {
            returnValueList.Add (tempString);
            tempString = "";
        }
        if (characterCount == characters.Length) {
            returnValueList.Add (tempString);
            tempString = "";
        }
    }
    string [] returnValue = returnValueList.ToArray ();
    return returnValue;
}
----------------------------------------

 private string[] splitString(string stringToSplit) 
{    
            List<string> splitValues = new List<string>(); 
            string tracker = ""; 
            bool trackerQuote = false; 
            bool trackerAQuote = false; 
            
            foreach(char c in stringToSplit) 
            { 
                if(c == '"' && !trackerAQuote) 
                { 
                    trackerQuote = !trackerQuote; 
                } 
                
                else if(c == '\'' && !trackerQuote) 
                { 
                    trackerAQuote = !trackerAQuote; 
                } 
                
                else if(c == ',' && !trackerQuote && !trackerAQuote) 
                { 
                    splitValues.Add(tracker); 
                    tracker = ""; 
                } 
                
                else 
                { 
                    tracker += c; 
                } 
            } 
            
            splitValues.Add(tracker); 
            
            return splitValues.ToArray(); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
552
5
Gpt3D_Clone552_5.cs 1 39
Gpt3D_Clone552_5.cs 40 77
----------------------------------------

private string [] splitString (string stringToSplit) {
    char [] characters = stringToSplit.ToCharArray ();
    List < string > returnValueList = new List < string > ();
    string tempString = "";
    bool blockUntilEndQuote = false;
    bool blockUntilEndQuote2 = false;
    int characterCount = 0;
    foreach (char character in characters) {
        characterCount = characterCount + 1;
        if (character == '"' && ! blockUntilEndQuote2) {
            if (blockUntilEndQuote == false) {
                blockUntilEndQuote = true;
            } else if (blockUntilEndQuote == true) {
                blockUntilEndQuote = false;
            }
        }
        if (character == '\'' && ! blockUntilEndQuote) {
            if (blockUntilEndQuote2 == false) {
                blockUntilEndQuote2 = true;
            } else if (blockUntilEndQuote2 == true) {
                blockUntilEndQuote2 = false;
            }
        }
        if (character != ',') {
            tempString = tempString + character;
        } else if (character == ',' && (blockUntilEndQuote == true || blockUntilEndQuote2 == true)) {
            tempString = tempString + character;
        } else {
            returnValueList.Add (tempString);
            tempString = "";
        }
        if (characterCount == characters.Length) {
            returnValueList.Add (tempString);
            tempString = "";
        }
    }
    string [] returnValue = returnValueList.ToArray ();
    return returnValue;
}
----------------------------------------

 private string[] splitString(string stringToSplit) 
{ 
            List<string> listElements = new List<string>(); 
            int startIndex = 0; 
            bool blockNextCharacter = false; 
            for(int i = 0; i < stringToSplit.Length; i++) 
            { 
                if(stringToSplit[i] == '\'' || stringToSplit[i] == '"') 
                { 
                    if(!blockNextCharacter) 
                    { 
                        blockNextCharacter = true; 
                    } 
                    else 
                    { 
                        blockNextCharacter = false; 
                    } 
                } 
                else if(stringToSplit[i] == ',' && blockNextCharacter == false) 
                { 
                    listElements.Add(stringToSplit.Substring(startIndex, i - startIndex)); 
                    startIndex = i + 1; 
                    continue; 
                }
                
                if(i == stringToSplit.Length - 1) 
                { 
                    listElements.Add(stringToSplit.Substring(startIndex, i - startIndex + 1)); 
                } 
            } 
        return listElements.ToArray(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
552
6
Gpt3D_Clone552_6.cs 1 39
Gpt3D_Clone552_6.cs 40 65
----------------------------------------

private string [] splitString (string stringToSplit) {
    char [] characters = stringToSplit.ToCharArray ();
    List < string > returnValueList = new List < string > ();
    string tempString = "";
    bool blockUntilEndQuote = false;
    bool blockUntilEndQuote2 = false;
    int characterCount = 0;
    foreach (char character in characters) {
        characterCount = characterCount + 1;
        if (character == '"' && ! blockUntilEndQuote2) {
            if (blockUntilEndQuote == false) {
                blockUntilEndQuote = true;
            } else if (blockUntilEndQuote == true) {
                blockUntilEndQuote = false;
            }
        }
        if (character == '\'' && ! blockUntilEndQuote) {
            if (blockUntilEndQuote2 == false) {
                blockUntilEndQuote2 = true;
            } else if (blockUntilEndQuote2 == true) {
                blockUntilEndQuote2 = false;
            }
        }
        if (character != ',') {
            tempString = tempString + character;
        } else if (character == ',' && (blockUntilEndQuote == true || blockUntilEndQuote2 == true)) {
            tempString = tempString + character;
        } else {
            returnValueList.Add (tempString);
            tempString = "";
        }
        if (characterCount == characters.Length) {
            returnValueList.Add (tempString);
            tempString = "";
        }
    }
    string [] returnValue = returnValueList.ToArray ();
    return returnValue;
}
----------------------------------------

 private string[] usplitString (string stringelitToSplit) 
{
        int x = 0;
        string buildstr = "";
        string[] answertocpy;
        List<string> answer = new List<string>();
        
        while (x < stringToSplit.Length)
        {
            if (stringToSplit[x] != ',')
            {
            buildstr += stringToSplit[x];
            x++;
            continue; 
            }
            answer.push_back(buildstr);
            buildstr="";
            x++;
        }
        
        answer.push_back(buildstr);
        answertocpy = answer.ToArray();
        return answertocpy;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
557
0
Gpt3D_Clone557_0.cs 1 12
Gpt3D_Clone557_0.cs 13 40
----------------------------------------

static byte [] StreamToByteArray (Stream inputStream) {
    if (! inputStream.CanRead) {
        throw new ArgumentException ();
    }
    if (inputStream.CanSeek) {
        inputStream.Seek (0, SeekOrigin.Begin);
    }
    byte [] output = new byte [inputStream.Length];
    int bytesRead = inputStream.Read (output, 0, output.Length);
    Debug.Assert (bytesRead == output.Length, "Bytes read from stream matches stream length");
    return output;
}
----------------------------------------

 static byte[] StreamToByteArray(Stream inputStream) 
{ 
   if(!inputStream.CanRead) 
    { 
        throw new ArgumentException(); 
    } 
    if (inputStream.CanSeek) 
        inputStream.Position = 0; 
 
    int bufSize = 1024; 
    var memoryStream = new MemoryStream();
    int bytesRead; 
    byte[] buf = new byte[bufSize]; 
 
    do 
    { 
        bytesRead = inputStream.Read(buf, 0, buf.Length); 
        memoryStream.Write(buf, 0, bytesRead); 
 
    } while (bytesRead > 0); 
 
    byte[] output = memoryStream.ToArray(); 
    memoryStream.Flush(); 
    memoryStream.Close();
    return output; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
557
1
Gpt3D_Clone557_1.cs 1 12
Gpt3D_Clone557_1.cs 13 35
----------------------------------------

static byte [] StreamToByteArray (Stream inputStream) {
    if (! inputStream.CanRead) {
        throw new ArgumentException ();
    }
    if (inputStream.CanSeek) {
        inputStream.Seek (0, SeekOrigin.Begin);
    }
    byte [] output = new byte [inputStream.Length];
    int bytesRead = inputStream.Read (output, 0, output.Length);
    Debug.Assert (bytesRead == output.Length, "Bytes read from stream matches stream length");
    return output;
}
----------------------------------------

 static byte[] StreamToByteArray(Stream inputStream)
{
    if(!inputStream.CanRead)
    {
        throw new ArgumentException();
    }
    if(inputStream.CanSeek)
    {
        inputStream.Seek(0,SeekOrigin.Begin);
    }
    int bufSize = 1024;
    byte[] buf = new byte[bufSize];
    List<byte> output = new List<byte>();
    int bytesRead;
    do 
    {
        bytesRead = inputStream.Read(buf,0, bufSize);
        output.AddRange(buf.Take(bytesRead));
    }while(bytesRead == bufSize);
    return output.ToArray();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
557
2
Gpt3D_Clone557_2.cs 1 12
Gpt3D_Clone557_2.cs 13 36
----------------------------------------

static byte [] StreamToByteArray (Stream inputStream) {
    if (! inputStream.CanRead) {
        throw new ArgumentException ();
    }
    if (inputStream.CanSeek) {
        inputStream.Seek (0, SeekOrigin.Begin);
    }
    byte [] output = new byte [inputStream.Length];
    int bytesRead = inputStream.Read (output, 0, output.Length);
    Debug.Assert (bytesRead == output.Length, "Bytes read from stream matches stream length");
    return output;
}
----------------------------------------

 static byte[] StreamToByteArray(Stream inputStream) 
{ 
    if (!inputStream.CanRead) 
        throw new ArgumentException();
    
    if (inputStream.CanSeek) 
        inputStream.Seek(0, SeekOrigin.Begin);
    
    int bufferSize = 1024; 
    var memoryStream = new MemoryStream(); 
    int bytesRead; 
    byte[] buffer = new byte[bufferSize]; 
    do 
    { 
        bytesRead = inputStream.Read(buffer, 0, buffer.Length); 
        memoryStream.Write(buffer, 0, bytesRead); 
    } while (bytesRead > 0); 
    
    return memoryStream.ToArray(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
557
3
Gpt3D_Clone557_3.cs 1 12
Gpt3D_Clone557_3.cs 13 37
----------------------------------------

static byte [] StreamToByteArray (Stream inputStream) {
    if (! inputStream.CanRead) {
        throw new ArgumentException ();
    }
    if (inputStream.CanSeek) {
        inputStream.Seek (0, SeekOrigin.Begin);
    }
    byte [] output = new byte [inputStream.Length];
    int bytesRead = inputStream.Read (output, 0, output.Length);
    Debug.Assert (bytesRead == output.Length, "Bytes read from stream matches stream length");
    return output;
}
----------------------------------------

 static byte[] StreamToByteArray(Stream inputStream) 
{ 
    if (!inputStream.CanRead) 
        throw new ArgumentException(); 
    if (inputStream.CanSeek) 
        inputStream.Seek(0, SeekOrigin.Begin); 
    
    
    int streamLength = (int) inputStream.Length; 
    byte[] output = new byte[streamLength]; 
    int bytesRead; 
    int totalBytesRead = 0; 
    do  
    { 
        bytesRead = inputStream.Read(output, totalBytesRead, output.Length-totalBytesRead); 
        totalBytesRead += bytesRead; 
    } while (totalBytesRead < streamLength); 
    
    return output; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
557
5
Gpt3D_Clone557_5.cs 1 12
Gpt3D_Clone557_5.cs 13 35
----------------------------------------

static byte [] StreamToByteArray (Stream inputStream) {
    if (! inputStream.CanRead) {
        throw new ArgumentException ();
    }
    if (inputStream.CanSeek) {
        inputStream.Seek (0, SeekOrigin.Begin);
    }
    byte [] output = new byte [inputStream.Length];
    int bytesRead = inputStream.Read (output, 0, output.Length);
    Debug.Assert (bytesRead == output.Length, "Bytes read from stream matches stream length");
    return output;
}
----------------------------------------

 static byte[] StreamToByteArray(Stream inputStream) 
{ 
    if (!inputStream.CanRead) 
        throw new ArgumentException(); 
  
    if (inputStream.CanSeek) 
        inputStream.Seek(0, SeekOrigin.Begin); 
    
    byte[] output = new byte[inputStream.Length]; 
    int numBytesRead = 0; 
    int n; 
    while (numBytesRead < output.Length && 
            (n = inputStream.Read(output, numBytesRead, output.Length - numBytesRead)) > 0)   
    { 
        numBytesRead += n; 
    } 
    Debug.Assert (numBytesRead == output.Length, "Bytes read from stream matches stream length");
    return output; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
557
6
Gpt3D_Clone557_6.cs 1 12
Gpt3D_Clone557_6.cs 13 29
----------------------------------------

static byte [] StreamToByteArray (Stream inputStream) {
    if (! inputStream.CanRead) {
        throw new ArgumentException ();
    }
    if (inputStream.CanSeek) {
        inputStream.Seek (0, SeekOrigin.Begin);
    }
    byte [] output = new byte [inputStream.Length];
    int bytesRead = inputStream.Read (output, 0, output.Length);
    Debug.Assert (bytesRead == output.Length, "Bytes read from stream matches stream length");
    return output;
}
----------------------------------------

 static byte[] StreamToByteArray(Stream inputStream) 
{ 
    if (!inputStream .CanRead) 
        throw new ArgumentException(); 
            
    if (inputStream.CanSeek) 
        inputStream.Position = 0; //Reset Position to 0 
            
    byte[] output = new byte[inputStream.Length]; 
    using(var objBinaryReader = new BinaryReader(inputStream)) 
    { 
        output = objBinaryReader.ReadBytes((int)inputStream.Length); 
    } 
    return output; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
557
7
Gpt3D_Clone557_7.cs 1 12
Gpt3D_Clone557_7.cs 13 26
----------------------------------------

static byte [] StreamToByteArray (Stream inputStream) {
    if (! inputStream.CanRead) {
        throw new ArgumentException ();
    }
    if (inputStream.CanSeek) {
        inputStream.Seek (0, SeekOrigin.Begin);
    }
    byte [] output = new byte [inputStream.Length];
    int bytesRead = inputStream.Read (output, 0, output.Length);
    Debug.Assert (bytesRead == output.Length, "Bytes read from stream matches stream length");
    return output;
}
----------------------------------------

 static byte[] StreamToByteArray(Stream inputStream) 
{ 
    if (!inputStream.CanRead) 
        throw new ArgumentException(); 
    if (inputStream.CanSeek) 
        inputStream.Seek(0, SeekOrigin.Begin); 
    using (var ms = new MemoryStream()) 
    { 
        inputStream.CopyTo(ms); 
        return ms.ToArray(); 
    } 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
557
8
Gpt3D_Clone557_8.cs 1 12
Gpt3D_Clone557_8.cs 13 30
----------------------------------------

static byte [] StreamToByteArray (Stream inputStream) {
    if (! inputStream.CanRead) {
        throw new ArgumentException ();
    }
    if (inputStream.CanSeek) {
        inputStream.Seek (0, SeekOrigin.Begin);
    }
    byte [] output = new byte [inputStream.Length];
    int bytesRead = inputStream.Read (output, 0, output.Length);
    Debug.Assert (bytesRead == output.Length, "Bytes read from stream matches stream length");
    return output;
}
----------------------------------------

 static byte[] StreamToByteArray(Stream inputStream) 
{
    if(!inputStream.CanRead)
    {
        throw new ArgumentException();
    }
    
    if (inputStream.Position > 0) 
        inputStream.Position = 0; // Reset Position to 0
    MemoryStream ms = new MemoryStream();
    inputStream.CopyTo(ms);
    byte[] output = ms.ToArray();
    return output;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
557
9
Gpt3D_Clone557_9.cs 1 12
Gpt3D_Clone557_9.cs 13 27
----------------------------------------

static byte [] StreamToByteArray (Stream inputStream) {
    if (! inputStream.CanRead) {
        throw new ArgumentException ();
    }
    if (inputStream.CanSeek) {
        inputStream.Seek (0, SeekOrigin.Begin);
    }
    byte [] output = new byte [inputStream.Length];
    int bytesRead = inputStream.Read (output, 0, output.Length);
    Debug.Assert (bytesRead == output.Length, "Bytes read from stream matches stream length");
    return output;
}
----------------------------------------

 static byte[] StreamToByteArray(Stream inputStream) 
{ 
    if (!inputStream.CanRead) 
        throw new ArgumentException(); 
    if (inputStream.CanSeek) 
        inputStream.Position = 0; // Reset Position to 0 
    byte[] convertedByteArray = new byte[inputStream.Length]; 
    inputStream.Read(convertedByteArray,0,convertedByteArray.Length); 
    
    return convertedByteArray; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
560
0
Gpt3D_Clone560_0.cs 1 11
Gpt3D_Clone560_0.cs 12 31
----------------------------------------

public static void DeleteEmptyDirs (this DirectoryInfo dir) {
    foreach (DirectoryInfo d in dir.GetDirectories ())
        d.DeleteEmptyDirs ();
    try {
        dir.Delete ();
    }
    catch (IOException) {
    }
    catch (UnauthorizedAccessException) {
    }
}
----------------------------------------

 public static void DeleteEmptyDirs (this DirectoryInfo dir, string[] directoryNamesToIgnore, bool suppressErrors = true) {
    foreach (DirectoryInfo d in dir.GetDirectories ())
        d.DeleteEmptyDirs (directoryNamesToIgnore, suppressErrors);
    if (!directoryNamesToIgnore.Contains(dir.Name))
    {
        try {
            dir.Delete ();
        }
        catch (IOException) {
            if (!suppressErrors)
                throw;
        }
        catch (UnauthorizedAccessException) {
            if (!suppressErrors)
                throw;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
56
3
Gpt3D_Clone56_3.cs 1 9
Gpt3D_Clone56_3.cs 10 21
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    textBox2.Clear ();
    float result;
    if (float.TryParse (textBox1.Text, out result)) {
        textBox2.AppendText (Math.Sin (result).ToString ());
    } else {
        textBox2.Text = "Invalid Input";
    }
}
----------------------------------------

  private void button1_Click (object sender, EventArgs e) {
    textBox2.Clear ();
    double result;
    if (double.TryParse (textBox1.Text, out result)) {
        result = Math.Sin (result);
        textBox2.Text += result.ToString ("#.###");
    } else {
        textBox2.Text = "Invalid Input";
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
56
4
Gpt3D_Clone56_4.cs 1 9
Gpt3D_Clone56_4.cs 10 21
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    textBox2.Clear ();
    float result;
    if (float.TryParse (textBox1.Text, out result)) {
        textBox2.AppendText (Math.Sin (result).ToString ());
    } else {
        textBox2.Text = "Invalid Input";
    }
}
----------------------------------------

  private void button1_Click (object sender, EventArgs e) {
    textBox2.Clear ();
    double result;
    if (double.TryParse (textBox1.Text, out result)) {
        result = Math.Sin (result);
        textBox2.Text += result.ToString ("N3");
    } else {
        textBox2.Text = "Invalid Input";
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
570
0
Gpt3D_Clone570_0.cs 1 12
Gpt3D_Clone570_0.cs 13 29
----------------------------------------

public string Export () {
    StringBuilder sb = new StringBuilder ();
    foreach (string field in fields)
        sb.Append (field).Append (delim);
    sb.AppendLine ();
    foreach (Dictionary < string, object > row in rows) {
        foreach (string field in fields)
            sb.Append (MakeValueCsvFriendly (row [field])).Append (delim);
        sb.AppendLine ();
    }
    return sb.ToString ();
}
----------------------------------------

 public string Export()
{
    var builedString = new StringBuilder();
    foreach (var field in fields)
        builedString.Append($"{field}{delim}");
    builedString.Append('\n');
    foreach (var row in rows)
    {
        foreach (var field in fields)
            builedString.Append(MakeValueCsvFriendly(row[field]))
                        .Append(delim);
        builedString.Append('\n');
    }
    return builedString.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
571
3
Gpt3D_Clone571_3.cs 1 17
Gpt3D_Clone571_3.cs 18 33
----------------------------------------

public string Export (bool includeHeaderLine) {
    StringBuilder sb = new StringBuilder ();
    IList < PropertyInfo > propertyInfos = typeof (T).GetProperties ();
    if (includeHeaderLine) {
        foreach (PropertyInfo propertyInfo in propertyInfos) {
            sb.Append (propertyInfo.Name).Append (",");
        }
        sb.Remove (sb.Length - 1, 1).AppendLine ();
    }
    foreach (T obj in Objects) {
        foreach (PropertyInfo propertyInfo in propertyInfos) {
            sb.Append (MakeValueCsvFriendly (propertyInfo.GetValue (obj, null))).Append (",");
        }
        sb.Remove (sb.Length - 1, 1).AppendLine ();
    }
    return sb.ToString ();
}
----------------------------------------

 
public string Export (bool includeHeaderLine) {
    StringBuilder sb = new StringBuilder ();
    var propertyInfos = typeof (T).GetProperties ();
    if (includeHeaderLine) {
        var headerRow = string.Join(",", propertyInfos.Select(p => p.Name));
        sb.AppendLine(headerRow);
    }
    foreach (T obj in Objects) {
        var rowValues = string.Join(",", propertyInfos.Select(p => MakeValueCsvFriendly (propertyInfo.GetValue (obj, null))));
        sb.AppendLine(rowValues);
    }
    return sb.ToString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
571
5
Gpt3D_Clone571_5.cs 1 17
Gpt3D_Clone571_5.cs 18 35
----------------------------------------

public string Export (bool includeHeaderLine) {
    StringBuilder sb = new StringBuilder ();
    IList < PropertyInfo > propertyInfos = typeof (T).GetProperties ();
    if (includeHeaderLine) {
        foreach (PropertyInfo propertyInfo in propertyInfos) {
            sb.Append (propertyInfo.Name).Append (",");
        }
        sb.Remove (sb.Length - 1, 1).AppendLine ();
    }
    foreach (T obj in Objects) {
        foreach (PropertyInfo propertyInfo in propertyInfos) {
            sb.Append (MakeValueCsvFriendly (propertyInfo.GetValue (obj, null))).Append (",");
        }
        sb.Remove (sb.Length - 1, 1).AppendLine ();
    }
    return sb.ToString ();
}
----------------------------------------

 
public string Export (bool includeHeaderLine) {
    StringBuilder sb = new StringBuilder ();
    var propertyInfos = typeof (T).GetProperties ();
    if (includeHeaderLine) {
        var headerRow = propertyInfos.Aggregate("", (acc, cur) =>  $"{acc}{cur.Name},");
        sb.AppendLine(headerRow.Substring(0, headerRow.Length-1));
    }
    foreach (T obj in Objects) {
        var rowValues = propertyInfos
            .Select(p => MakeValueCsvFriendly (p.GetValue (obj, null)))
            .Aggregate("", (acc, cur) =>  $"{acc}{cur},");
        sb.AppendLine(rowValues.Substring(0, rowValues.Length-1));
    }
    return sb.ToString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
572
3
Gpt3D_Clone572_3.cs 1 12
Gpt3D_Clone572_3.cs 13 37
----------------------------------------

private void button6_Click (object sender, EventArgs e) {
    string select = (listView1.SelectedItems.Count > 0) ? (listView1.SelectedItems [0].Text) : null;
    if (! string.IsNullOrWhiteSpace (select)) {
        listView1.BeginUpdate ();
        pths.Remove (select);
        rec.Remove (select);
        listView1.EndUpdate ();
        string s = String.Join ("; ", pths.ToArray ());
        string r = String.Join ("; ", rec.ToArray ());
    }
    Disp ();
}
----------------------------------------

 private void button6_Click(object sender, EventArgs e)
{
    string select = null;
    if (listView1.SelectedItems.Count > 0)
    {
        select = listView1.SelectedItems[0].Text;
    }
    if (String.IsNullOrWhiteSpace(select) 
        || !pths.Contains(select) || !rec.Contains(select))
    {
        return;
    }
    listView1.BeginUpdate();
    pths.Remove(select);
    rec.Remove(select);
    listView1.EndUpdate();
    string s = string.Join("; ", pths.ToArray());
    string r = string.Join("; ", rec.ToArray());
    Disp();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
578
0
Gpt3D_Clone578_0.cs 1 11
Gpt3D_Clone578_0.cs 12 22
----------------------------------------

static int CountDays (DayOfWeek day, DateTime start, DateTime end) {
    TimeSpan ts = end - start;
    int count = (int) Math.Floor (ts.TotalDays / 7);
    int remainder = (int) (ts.TotalDays % 7);
    int sinceLastDay = (int) (end.DayOfWeek - day);
    if (sinceLastDay < 0)
        sinceLastDay += 7;
    if (remainder >= sinceLastDay)
        count ++;
    return count;
}
----------------------------------------

 static int CountDays(DayOfWeek day, DateTime start, DateTime end) 
{ 
    int count = (int)Math.Floor((end - start).TotalDays / 7); 
    int remainder = (int)(end - start).TotalDays % 7; 
    int daysSinceLastDay = (end.DayOfWeek == day ? 0 : (end.DayOfWeek + 7 - day) % 7);
    if(remainder >= daysSinceLastDay) 
        count ++; 
    return count; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
578
1
Gpt3D_Clone578_1.cs 1 11
Gpt3D_Clone578_1.cs 12 22
----------------------------------------

static int CountDays (DayOfWeek day, DateTime start, DateTime end) {
    TimeSpan ts = end - start;
    int count = (int) Math.Floor (ts.TotalDays / 7);
    int remainder = (int) (ts.TotalDays % 7);
    int sinceLastDay = (int) (end.DayOfWeek - day);
    if (sinceLastDay < 0)
        sinceLastDay += 7;
    if (remainder >= sinceLastDay)
        count ++;
    return count;
}
----------------------------------------

 static int CountDays(DayOfWeek day, DateTime start, DateTime end) 
{ 
    TimeSpan ts = end - start; 
    int count = (int)Math.Floor(ts.TotalDays / 7); 
    int sinceLastDay = (end.DayOfWeek > day ? end.DayOfWeek - day : end.DayOfWeek + 7 - day); 
    if((int)ts.TotalDays % 7 >= sinceLastDay) 
        count += 1; 
    return count; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
578
2
Gpt3D_Clone578_2.cs 1 11
Gpt3D_Clone578_2.cs 12 21
----------------------------------------

static int CountDays (DayOfWeek day, DateTime start, DateTime end) {
    TimeSpan ts = end - start;
    int count = (int) Math.Floor (ts.TotalDays / 7);
    int remainder = (int) (ts.TotalDays % 7);
    int sinceLastDay = (int) (end.DayOfWeek - day);
    if (sinceLastDay < 0)
        sinceLastDay += 7;
    if (remainder >= sinceLastDay)
        count ++;
    return count;
}
----------------------------------------

 static int CountDays(DayOfWeek day, DateTime start, DateTime end) 
{ 
    int count = (int)Math.Floor((end - start).TotalDays / 7); 
    int diff = (end.DayOfWeek - day + 7) % 7; 
    if((end - start).TotalDays % 7 >= diff) 
        count ++; 
    return count; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
578
3
Gpt3D_Clone578_3.cs 1 11
Gpt3D_Clone578_3.cs 12 21
----------------------------------------

static int CountDays (DayOfWeek day, DateTime start, DateTime end) {
    TimeSpan ts = end - start;
    int count = (int) Math.Floor (ts.TotalDays / 7);
    int remainder = (int) (ts.TotalDays % 7);
    int sinceLastDay = (int) (end.DayOfWeek - day);
    if (sinceLastDay < 0)
        sinceLastDay += 7;
    if (remainder >= sinceLastDay)
        count ++;
    return count;
}
----------------------------------------

 static int CountDays(DayOfWeek day, DateTime start, DateTime end) 
{ 
    int count = (int)Math.Floor((end - start).TotalDays / 7); 
    int diff = (day - end.DayOfWeek + 14) % 7; 
    if((end - start).TotalDays % 7 >= diff) 
        count ++; 
    return count; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
578
4
Gpt3D_Clone578_4.cs 1 11
Gpt3D_Clone578_4.cs 12 21
----------------------------------------

static int CountDays (DayOfWeek day, DateTime start, DateTime end) {
    TimeSpan ts = end - start;
    int count = (int) Math.Floor (ts.TotalDays / 7);
    int remainder = (int) (ts.TotalDays % 7);
    int sinceLastDay = (int) (end.DayOfWeek - day);
    if (sinceLastDay < 0)
        sinceLastDay += 7;
    if (remainder >= sinceLastDay)
        count ++;
    return count;
}
----------------------------------------

  static int CountDays(DayOfWeek day, DateTime start, DateTime end) 
{ 
    TimeSpan ts = end - start; 
    int count = (int)Math.Floor(ts.TotalDays / 7); 
    if(ts.TotalDays % 7 >= (end.DayOfWeek + 7 - day)%7) 
        count ++; 
    return count; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
578
5
Gpt3D_Clone578_5.cs 1 11
Gpt3D_Clone578_5.cs 12 21
----------------------------------------

static int CountDays (DayOfWeek day, DateTime start, DateTime end) {
    TimeSpan ts = end - start;
    int count = (int) Math.Floor (ts.TotalDays / 7);
    int remainder = (int) (ts.TotalDays % 7);
    int sinceLastDay = (int) (end.DayOfWeek - day);
    if (sinceLastDay < 0)
        sinceLastDay += 7;
    if (remainder >= sinceLastDay)
        count ++;
    return count;
}
----------------------------------------

 static int CountDays(DayOfWeek day, DateTime start, DateTime end) 
{ 
    int count = (int)Math.Floor((end - start).TotalDays / 7); 
    int diff = (day - end.DayOfWeek + 7) % 7; 
    if((end - start).TotalDays % 7 >= diff) 
        count++; 
    return count; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
578
6
Gpt3D_Clone578_6.cs 1 11
Gpt3D_Clone578_6.cs 12 20
----------------------------------------

static int CountDays (DayOfWeek day, DateTime start, DateTime end) {
    TimeSpan ts = end - start;
    int count = (int) Math.Floor (ts.TotalDays / 7);
    int remainder = (int) (ts.TotalDays % 7);
    int sinceLastDay = (int) (end.DayOfWeek - day);
    if (sinceLastDay < 0)
        sinceLastDay += 7;
    if (remainder >= sinceLastDay)
        count ++;
    return count;
}
----------------------------------------

 static int CountDays(DayOfWeek day, DateTime start, DateTime end) 
{ 
    int count = (int)Math.Floor((end - start).TotalDays / 7); 
    if((end - start).TotalDays % 7 >= (end.DayOfWeek + day)%7) 
        count ++; 
    return count; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
578
7
Gpt3D_Clone578_7.cs 1 11
Gpt3D_Clone578_7.cs 12 20
----------------------------------------

static int CountDays (DayOfWeek day, DateTime start, DateTime end) {
    TimeSpan ts = end - start;
    int count = (int) Math.Floor (ts.TotalDays / 7);
    int remainder = (int) (ts.TotalDays % 7);
    int sinceLastDay = (int) (end.DayOfWeek - day);
    if (sinceLastDay < 0)
        sinceLastDay += 7;
    if (remainder >= sinceLastDay)
        count ++;
    return count;
}
----------------------------------------

  static int CountDays(DayOfWeek day, DateTime start, DateTime end) 
{ 
    int count = (int)Math.Floor(((end - start).TotalDays + day - end.DayOfWeek)/7); 
    if((end - start).TotalDays % 7 >= (end.DayOfWeek - day)) 
        count += 1; 
    return count; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
578
8
Gpt3D_Clone578_8.cs 1 11
Gpt3D_Clone578_8.cs 12 18
----------------------------------------

static int CountDays (DayOfWeek day, DateTime start, DateTime end) {
    TimeSpan ts = end - start;
    int count = (int) Math.Floor (ts.TotalDays / 7);
    int remainder = (int) (ts.TotalDays % 7);
    int sinceLastDay = (int) (end.DayOfWeek - day);
    if (sinceLastDay < 0)
        sinceLastDay += 7;
    if (remainder >= sinceLastDay)
        count ++;
    return count;
}
----------------------------------------

  static int CountDays(DayOfWeek day, DateTime start, DateTime end) 
{ 
    TimeSpan ts = end - start; 
    return (int)Math.Floor(((ts.TotalDays + ((7 - end.DayOfWeek + day) % 7)) / 7)); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
578
9
Gpt3D_Clone578_9.cs 1 11
Gpt3D_Clone578_9.cs 12 17
----------------------------------------

static int CountDays (DayOfWeek day, DateTime start, DateTime end) {
    TimeSpan ts = end - start;
    int count = (int) Math.Floor (ts.TotalDays / 7);
    int remainder = (int) (ts.TotalDays % 7);
    int sinceLastDay = (int) (end.DayOfWeek - day);
    if (sinceLastDay < 0)
        sinceLastDay += 7;
    if (remainder >= sinceLastDay)
        count ++;
    return count;
}
----------------------------------------

  static int CountDays(DayOfWeek day, DateTime start, DateTime end) 
{ 
   return (int)Math.Floor((((end > start ? end - start : start - end).TotalDays + (end.DayOfWeek < day ? day - end.DayOfWeek - 7 : day - end.DayOfWeek))/7)); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
580
0
Gpt3D_Clone580_0.cs 1 10
Gpt3D_Clone580_0.cs 11 27
----------------------------------------

static void Main (string [] args) {
    String a = "Hello ";
    String b = " World! ";
    int it = 20000;
    char [] result = new char [a.Length + it * b.Length];
    a.ToCharArray ().CopyTo (result, 0);
    for (int i = 0; i < it; i ++)
        b.ToCharArray ().CopyTo (result, a.Length + i * b.Length);
    Console.WriteLine (result);
}
----------------------------------------

 static void Main (string [] args) {
    String a = "Hello ";
    String b = " World! ";
    int it = 20000;
    char[] result = new char[a.Length + it * b.Length];
    int offset = 0;
    a.CopyTo(0, result, 0, a.Length);
    offset += a.Length;
    for (int i = 0; i < it; i++) {
        b.CopyTo(0, result, offset, b.Length);
        offset += b.Length;
    }
 
    Console.WriteLine(result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
580
1
Gpt3D_Clone580_1.cs 1 10
Gpt3D_Clone580_1.cs 11 26
----------------------------------------

static void Main (string [] args) {
    String a = "Hello ";
    String b = " World! ";
    int it = 20000;
    char [] result = new char [a.Length + it * b.Length];
    a.ToCharArray ().CopyTo (result, 0);
    for (int i = 0; i < it; i ++)
        b.ToCharArray ().CopyTo (result, a.Length + i * b.Length);
    Console.WriteLine (result);
}
----------------------------------------

 static void Main (string [] args) {
    String a = "Hello ";
    String b = " World! ";
    int it = 20000;
    char[] result = new char[a.Length + it * b.Length];
    a.CopyTo(0, result, 0, a.Length);
    int offset = a.Length;
    for (int i = 0; i < it; i++) {
        for (int j = 0; j < b.Length; j++)
            result[offset + j] = b[j];
        offset += b.Length;
    }
    Console.WriteLine(new string(result));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
580
2
Gpt3D_Clone580_2.cs 1 10
Gpt3D_Clone580_2.cs 11 25
----------------------------------------

static void Main (string [] args) {
    String a = "Hello ";
    String b = " World! ";
    int it = 20000;
    char [] result = new char [a.Length + it * b.Length];
    a.ToCharArray ().CopyTo (result, 0);
    for (int i = 0; i < it; i ++)
        b.ToCharArray ().CopyTo (result, a.Length + i * b.Length);
    Console.WriteLine (result);
}
----------------------------------------

 static void Main (string [] args) {
    String a = "Hello ";
    String b = " World! ";
    int it = 20000;
    char[] result = new char[a.Length + it * b.Length];
    Array.Copy(a.ToCharArray(), result, a.Length);
    int offset = a.Length;
    for (int i = 0; i < it; i++) {
        Array.Copy(b.ToCharArray(), 0, result, offset, b.Length);
        offset += b.Length;
    }
    Console.WriteLine(new string(result));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
580
4
Gpt3D_Clone580_4.cs 1 10
Gpt3D_Clone580_4.cs 11 25
----------------------------------------

static void Main (string [] args) {
    String a = "Hello ";
    String b = " World! ";
    int it = 20000;
    char [] result = new char [a.Length + it * b.Length];
    a.ToCharArray ().CopyTo (result, 0);
    for (int i = 0; i < it; i ++)
        b.ToCharArray ().CopyTo (result, a.Length + i * b.Length);
    Console.WriteLine (result);
}
----------------------------------------

 static void Main (string [] args) {
    String a = "Hello ";
    String b = " World! ";
    int it = 20000;
    char[] result = new char[a.Length + it * b.Length];
    a.CopyTo(0, result, 0, a.Length);
    int offset = a.Length;
    for (int i = 0; i < it; i++) {
        b.CopyTo(0, result, offset, b.Length);
        offset += b.Length;
    }
    Console.WriteLine(new string(result));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
580
6
Gpt3D_Clone580_6.cs 1 10
Gpt3D_Clone580_6.cs 11 25
----------------------------------------

static void Main (string [] args) {
    String a = "Hello ";
    String b = " World! ";
    int it = 20000;
    char [] result = new char [a.Length + it * b.Length];
    a.ToCharArray ().CopyTo (result, 0);
    for (int i = 0; i < it; i ++)
        b.ToCharArray ().CopyTo (result, a.Length + i * b.Length);
    Console.WriteLine (result);
}
----------------------------------------

 static void Main (string [] args) {
    String a = "Hello ";
    String b = " World! ";
    int it = 20000;
    char[] result = new char[a.Length + it * b.Length];
    Buffer.BlockCopy(a.ToCharArray(), 0, result, 0, a.Length * 2);
    int offset = a.Length;
    for (int i = 0; i < it; i++) {
        Buffer.BlockCopy(b.ToCharArray(), 0, result, offset * 2, b.Length * 2);
        offset += b.Length;
    }
    Console.WriteLine(new string(result));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
581
0
Gpt3D_Clone581_0.cs 1 13
Gpt3D_Clone581_0.cs 14 29
----------------------------------------

public static float Noise (float x, float y, float z, int octaves, ref float min, ref float max) {
    var perlin = 0f;
    var octave = 1;
    for (var i = 0; i < octaves; i ++) {
        var noise = Noise (x * octave, y * octave, z * octave);
        perlin += noise / octave;
        octave *= 2;
    }
    perlin = Math.Abs ((float) Math.Pow (perlin, 2));
    max = Math.Max (perlin, max);
    min = Math.Min (perlin, min);
    return perlin;
}
----------------------------------------

 public static float Noise (float x, float y, float z, int octaves, ref float min, ref float max) {
    float perlin = 0f;
    int octave = 1;
    for (int i = 0; i < octaves; i++) {
        float noise = 0f;
        noise = Noise(x * octave, y * octave, z * octave);
        perlin += noise / octave;
        octave *= 2;
    }
    perlin = Math.Abs (Math.Pow(perlin, 2));
    max = Math.Max (perlin, max);
    min = Math.Min (perlin, min);
    return perlin;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
581
1
Gpt3D_Clone581_1.cs 1 13
Gpt3D_Clone581_1.cs 14 29
----------------------------------------

public static float Noise (float x, float y, float z, int octaves, ref float min, ref float max) {
    var perlin = 0f;
    var octave = 1;
    for (var i = 0; i < octaves; i ++) {
        var noise = Noise (x * octave, y * octave, z * octave);
        perlin += noise / octave;
        octave *= 2;
    }
    perlin = Math.Abs ((float) Math.Pow (perlin, 2));
    max = Math.Max (perlin, max);
    min = Math.Min (perlin, min);
    return perlin;
}
----------------------------------------

 public static float Noise(float x, float y, float z, int octaves, ref float min, ref float max) {
    float perlin = 0f;
    int octave = 1;
    for (int i = 0; i < octaves; i++) {
        float noise = 0f;
        noise = Noise(x * octave, y * octave, z * octave);
        perlin += noise / octave;
        octave *= 2;
    }
    perlin = (float) Math.Log10(Math.Abs(perlin));
    max = Math.Max (perlin, max);
    min = Math.Min (perlin, min);
    return perlin;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
581
2
Gpt3D_Clone581_2.cs 1 13
Gpt3D_Clone581_2.cs 14 29
----------------------------------------

public static float Noise (float x, float y, float z, int octaves, ref float min, ref float max) {
    var perlin = 0f;
    var octave = 1;
    for (var i = 0; i < octaves; i ++) {
        var noise = Noise (x * octave, y * octave, z * octave);
        perlin += noise / octave;
        octave *= 2;
    }
    perlin = Math.Abs ((float) Math.Pow (perlin, 2));
    max = Math.Max (perlin, max);
    min = Math.Min (perlin, min);
    return perlin;
}
----------------------------------------

 public static float Noise(float x, float y, float z, int octaves, ref float min, ref float max) {
    float perlin = 0f;
    int octave = 1;
    for (int i = 0; i < octaves; i++) {
        float noise = 0f;
        noise = Noise(x * octave, y * octave, z * octave);
        perlin += noise / octave;
        octave *= 2;
    }
    perlin = (float) Math.Exp(Math.Abs(Math.Pow(perlin, 2)));
    max = Math.Max (perlin, max);
    min = Math.Min (perlin, min);
    return perlin;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
581
3
Gpt3D_Clone581_3.cs 1 13
Gpt3D_Clone581_3.cs 14 29
----------------------------------------

public static float Noise (float x, float y, float z, int octaves, ref float min, ref float max) {
    var perlin = 0f;
    var octave = 1;
    for (var i = 0; i < octaves; i ++) {
        var noise = Noise (x * octave, y * octave, z * octave);
        perlin += noise / octave;
        octave *= 2;
    }
    perlin = Math.Abs ((float) Math.Pow (perlin, 2));
    max = Math.Max (perlin, max);
    min = Math.Min (perlin, min);
    return perlin;
}
----------------------------------------

 public static float Noise(float x, float y, float z, int octaves, ref float min, ref float max) {
    float perlin = 0f;
    int octave = 1;
    for (int i = 0; i < octaves; i++) {
        float noise = 0f;
        noise = Noise(x * octave, y * octave, z * octave);
        perlin += noise / octave;
        octave *= 2;
    }
    perlin = (float) Math.Cbrt (Math.Abs(perlin));
    max = Math.Max (perlin, max);
    min = Math.Min (perlin, min);
    return perlin;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
581
4
Gpt3D_Clone581_4.cs 1 13
Gpt3D_Clone581_4.cs 14 29
----------------------------------------

public static float Noise (float x, float y, float z, int octaves, ref float min, ref float max) {
    var perlin = 0f;
    var octave = 1;
    for (var i = 0; i < octaves; i ++) {
        var noise = Noise (x * octave, y * octave, z * octave);
        perlin += noise / octave;
        octave *= 2;
    }
    perlin = Math.Abs ((float) Math.Pow (perlin, 2));
    max = Math.Max (perlin, max);
    min = Math.Min (perlin, min);
    return perlin;
}
----------------------------------------

 public static float Noise(float x, float y, float z, int octaves, ref float min, ref float max) {
    float perlin = 0f;
    int octave = 1;
    for (int i = 0; i < octaves; i++) {
        float noise = 0f;
        noise = Noise(x * octave, y * octave, z * octave);
        perlin += noise / octave;
        octave *= 2;
    }
    perlin = (float) Math.Exp(Math.Abs(perlin));
    max = Math.Max (perlin, max);
    min = Math.Min (perlin, min);
    return perlin;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
581
5
Gpt3D_Clone581_5.cs 1 13
Gpt3D_Clone581_5.cs 14 29
----------------------------------------

public static float Noise (float x, float y, float z, int octaves, ref float min, ref float max) {
    var perlin = 0f;
    var octave = 1;
    for (var i = 0; i < octaves; i ++) {
        var noise = Noise (x * octave, y * octave, z * octave);
        perlin += noise / octave;
        octave *= 2;
    }
    perlin = Math.Abs ((float) Math.Pow (perlin, 2));
    max = Math.Max (perlin, max);
    min = Math.Min (perlin, min);
    return perlin;
}
----------------------------------------

 public static float Noise (float x, float y, float z, int octaves, ref float min, ref float max) {
    float perlin = 0f;
    int octave = 1;
    for (int i = 0; i < octaves; i++) {
        float noise = 0f;
        noise = Noise(x * octave, y * octave, z * octave);
        perlin += noise / octave;
        octave *= 2;
    }
    perlin = (float) Math.Sqrt(Math.Abs(perlin));
    max = Math.Max (perlin, max);
    min = Math.Min (perlin, min);
    return perlin;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
581
6
Gpt3D_Clone581_6.cs 1 13
Gpt3D_Clone581_6.cs 14 29
----------------------------------------

public static float Noise (float x, float y, float z, int octaves, ref float min, ref float max) {
    var perlin = 0f;
    var octave = 1;
    for (var i = 0; i < octaves; i ++) {
        var noise = Noise (x * octave, y * octave, z * octave);
        perlin += noise / octave;
        octave *= 2;
    }
    perlin = Math.Abs ((float) Math.Pow (perlin, 2));
    max = Math.Max (perlin, max);
    min = Math.Min (perlin, min);
    return perlin;
}
----------------------------------------

 public static float Noise(float x, float y, float z, int octaves, ref float min, ref float max) {
    float perlin = 0f;
    int octave = 1;
    for (int i = 0; i < octaves; i++) {
        float noise = 0f;
        noise = Noise(x * octave, y * octave, z * octave);
        perlin += noise / octave;
        octave *= 2;
    }
    perlin = (float) Math.Log(Math.Abs(Math.Pow(perlin, 3)));
    max = Math.Max (perlin, max);
    min = Math.Min (perlin, min);
    return perlin;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
582
0
Gpt3D_Clone582_0.cs 1 11
Gpt3D_Clone582_0.cs 12 32
----------------------------------------

public static String GetString (object value) {
    if (value is string) {
        return value as string;
    } else if (value is IDictionary) {
        return GetString (value as IDictionary);
    } else if (value is IEnumerable) {
        return GetString (value as IEnumerable);
    } else {
        return value.ToString ();
    }
}
----------------------------------------

 public static string GetString (object value) 
{ 
    if (value == null) 
        return null; 
    else 
    { 
        switch (value) 
        { 
            case string str: 
                return str; 
            case IDictionary dict: 
                return GetString(dict); 
            case IEnumerable e2: 
                return GetString(e2); 
            default: 
                return value.ToString(); 
        } 
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
582
1
Gpt3D_Clone582_1.cs 1 11
Gpt3D_Clone582_1.cs 12 29
----------------------------------------

public static String GetString (object value) {
    if (value is string) {
        return value as string;
    } else if (value is IDictionary) {
        return GetString (value as IDictionary);
    } else if (value is IEnumerable) {
        return GetString (value as IEnumerable);
    } else {
        return value.ToString ();
    }
}
----------------------------------------

 public static string GetString (object value) {
    string result = null;
    if (value == null) {
        return result;
    }
    if (value is string) {
        result= value as string;
    } else if (value is IDictionary) {
        result = GetString (value as IDictionary);
    } else if (value is IEnumerable) {
        result = GetString (value as IEnumerable);
    } else {
        result= value.ToString ();
    }
    return result;  
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
582
2
Gpt3D_Clone582_2.cs 1 11
Gpt3D_Clone582_2.cs 12 27
----------------------------------------

public static String GetString (object value) {
    if (value is string) {
        return value as string;
    } else if (value is IDictionary) {
        return GetString (value as IDictionary);
    } else if (value is IEnumerable) {
        return GetString (value as IEnumerable);
    } else {
        return value.ToString ();
    }
}
----------------------------------------

 public static string GetString (object value) 
{
    if (value == null) 
    {
        return null; 
    } 
    switch (value) 
    { 
        case string str: return str;
        case IDictionary dict: return GetString(dict); 
        case IEnumerable e: return GetString(e); 
        default:  return value.ToString(); 
    } 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
582
3
Gpt3D_Clone582_3.cs 1 11
Gpt3D_Clone582_3.cs 12 37
----------------------------------------

public static String GetString (object value) {
    if (value is string) {
        return value as string;
    } else if (value is IDictionary) {
        return GetString (value as IDictionary);
    } else if (value is IEnumerable) {
        return GetString (value as IEnumerable);
    } else {
        return value.ToString ();
    }
}
----------------------------------------

 public static string GetString (object value)
{
    if (value == null)
    {
        return null;
    }
    if (value is string)
    {
        return (string)value;
    } 
    else if (value is IDictionary)
    {
        return GetString((IDictionary)value);
    }
    else if (value is IEnumerable)
    {
        return GetString((IEnumerable)value);
    }
    else
    {
        return value.ToString();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
582
4
Gpt3D_Clone582_4.cs 1 11
Gpt3D_Clone582_4.cs 12 25
----------------------------------------

public static String GetString (object value) {
    if (value is string) {
        return value as string;
    } else if (value is IDictionary) {
        return GetString (value as IDictionary);
    } else if (value is IEnumerable) {
        return GetString (value as IEnumerable);
    } else {
        return value.ToString ();
    }
}
----------------------------------------

 public static string GetString(object value) {
    switch(value) {
        case string s:
            return s;
        case IDictionary d:
            return GetString(d);
        case IEnumerable e:
            return GetString(e);
        default:
            return value.ToString();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
582
5
Gpt3D_Clone582_5.cs 1 11
Gpt3D_Clone582_5.cs 12 29
----------------------------------------

public static String GetString (object value) {
    if (value is string) {
        return value as string;
    } else if (value is IDictionary) {
        return GetString (value as IDictionary);
    } else if (value is IEnumerable) {
        return GetString (value as IEnumerable);
    } else {
        return value.ToString ();
    }
}
----------------------------------------

  public static string GetString (object value) {
    if (value == null) {
        return null;
    }
    if (value is string str) {
        return str;
    }
    if (value is IDictionary) {
        return GetString(value as IDictionary);
    }
    if (value is IEnumerable) {
        return GetString(value as IEnumerable);
    }
    return value.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
582
6
Gpt3D_Clone582_6.cs 1 11
Gpt3D_Clone582_6.cs 12 24
----------------------------------------

public static String GetString (object value) {
    if (value is string) {
        return value as string;
    } else if (value is IDictionary) {
        return GetString (value as IDictionary);
    } else if (value is IEnumerable) {
        return GetString (value as IEnumerable);
    } else {
        return value.ToString ();
    }
}
----------------------------------------

 public static string GetString(object value) 
{ 
    if (value is string) 
        return (string)value; 
    if (value is IDictionary dictionary) 
        return GetString(dictionary); 
    if (value is IEnumerable enumeration) 
        return GetString(enumeration); 
    else 
        return value.ToString(); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
582
7
Gpt3D_Clone582_7.cs 1 11
Gpt3D_Clone582_7.cs 12 29
----------------------------------------

public static String GetString (object value) {
    if (value is string) {
        return value as string;
    } else if (value is IDictionary) {
        return GetString (value as IDictionary);
    } else if (value is IEnumerable) {
        return GetString (value as IEnumerable);
    } else {
        return value.ToString ();
    }
}
----------------------------------------

 public static string GetString(object value)
{
   if (value is string || value == null)
   {
       return value as string;
   }
   if (value is IDictionary)
   {
       return GetString(value as IDictionary);
   }
   if (value is IEnumerable)
   {
       return GetString(value as IEnumerable);
   }
   return value.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
582
8
Gpt3D_Clone582_8.cs 1 11
Gpt3D_Clone582_8.cs 12 23
----------------------------------------

public static String GetString (object value) {
    if (value is string) {
        return value as string;
    } else if (value is IDictionary) {
        return GetString (value as IDictionary);
    } else if (value is IEnumerable) {
        return GetString (value as IEnumerable);
    } else {
        return value.ToString ();
    }
}
----------------------------------------

 public static string GetString(object value) 
{ 
    if (value is string x) 
        return x; 
    if (value is IDictionary v) 
        return GetString(v); 
    if (value is IEnumerable t) 
        return GetString(t); 
    return value.ToString(); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
583
0
Gpt3D_Clone583_0.cs 1 11
Gpt3D_Clone583_0.cs 12 23
----------------------------------------

public static String GetString (object value) {
    if (value is string) {
        return value as string;
    } else if (value is IDictionary) {
        return GetString (value as IDictionary);
    } else if (value is IEnumerable) {
        return GetString (value as IEnumerable);
    } else {
        return value.ToString ();
    }
}
----------------------------------------

 public static String GetString(object value)
{
    string str;
    if (value == null) str = string.Empty;
    else if ((str = value as string) != null) ;
    else if (value is IDictionary) str = GetString((IDictionary)value);
    else if (value is IEnumerable) str = GetString((IEnumerable)value);
    else str = value.ToString();
    return str;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
583
1
Gpt3D_Clone583_1.cs 1 11
Gpt3D_Clone583_1.cs 12 27
----------------------------------------

public static String GetString (object value) {
    if (value is string) {
        return value as string;
    } else if (value is IDictionary) {
        return GetString (value as IDictionary);
    } else if (value is IEnumerable) {
        return GetString (value as IEnumerable);
    } else {
        return value.ToString ();
    }
}
----------------------------------------

 public static String GetString(object value)
{
    string str;
    if (value == null)
        return string.Empty;
    else if ((str = value as string) != null)
        return str;
    else if (value is IDictionary)
        return GetString((IDictionary)value);
    else if (value is IEnumerable)
        return GetString((IEnumerable)value);
    else
        return value.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
583
2
Gpt3D_Clone583_2.cs 1 11
Gpt3D_Clone583_2.cs 12 31
----------------------------------------

public static String GetString (object value) {
    if (value is string) {
        return value as string;
    } else if (value is IDictionary) {
        return GetString (value as IDictionary);
    } else if (value is IEnumerable) {
        return GetString (value as IEnumerable);
    } else {
        return value.ToString ();
    }
}
----------------------------------------

 public static String GetString(object value)
{
    string returnStr = string.Empty;
   
    if (value != null) {
        if (value is string) {
            returnStr = (string)value;
        } else if (value is IDictionary) {
            returnStr = GetString((IDictionary)value);
        } else if (value is IEnumerable) {
            returnStr = GetString((IEnumerable)value);
        } else {
            returnStr = value.ToString();
        }
    }
   
    return returnStr;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
583
3
Gpt3D_Clone583_3.cs 1 11
Gpt3D_Clone583_3.cs 12 27
----------------------------------------

public static String GetString (object value) {
    if (value is string) {
        return value as string;
    } else if (value is IDictionary) {
        return GetString (value as IDictionary);
    } else if (value is IEnumerable) {
        return GetString (value as IEnumerable);
    } else {
        return value.ToString ();
    }
}
----------------------------------------

 public static String GetString(object value)
{
    string str = string.Empty;
    if (value is string vString)
        str = vString;
    else if (value is IDictionary vDictionary)
        str = GetString(vDictionary);
    else if (value is IEnumerable vEnumerable)
        str = GetString(vEnumerable);
    else if (value != null)
        str = value.ToString();
    return str;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
583
4
Gpt3D_Clone583_4.cs 1 11
Gpt3D_Clone583_4.cs 12 26
----------------------------------------

public static String GetString (object value) {
    if (value is string) {
        return value as string;
    } else if (value is IDictionary) {
        return GetString (value as IDictionary);
    } else if (value is IEnumerable) {
        return GetString (value as IEnumerable);
    } else {
        return value.ToString ();
    }
}
----------------------------------------

 public static String GetString(object value)
{
    if (value == null)
        return string.Empty;
    else if (value is string)
        return value as string;
    else if (value is IEnumerable)
        return GetString(value as IEnumerable);
    else if (value is IDictionary)
        return GetString(value as IDictionary);
    else
        return value.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
583
5
Gpt3D_Clone583_5.cs 1 11
Gpt3D_Clone583_5.cs 12 26
----------------------------------------

public static String GetString (object value) {
    if (value is string) {
        return value as string;
    } else if (value is IDictionary) {
        return GetString (value as IDictionary);
    } else if (value is IEnumerable) {
        return GetString (value as IEnumerable);
    } else {
        return value.ToString ();
    }
}
----------------------------------------

 public static String GetString(object value)
{
    if (value == null)
        return string.Empty;
    else if (value is string)
        return value as string;
    else if (value is IDictionary)
        return GetString(value as IDictionary);
    else if (value is IEnumerable)
        return GetString(value as IEnumerable);
    else
        return value.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
583
6
Gpt3D_Clone583_6.cs 1 11
Gpt3D_Clone583_6.cs 12 26
----------------------------------------

public static String GetString (object value) {
    if (value is string) {
        return value as string;
    } else if (value is IDictionary) {
        return GetString (value as IDictionary);
    } else if (value is IEnumerable) {
        return GetString (value as IEnumerable);
    } else {
        return value.ToString ();
    }
}
----------------------------------------

 public static String GetString(object value)
{
    string returnString = string.Empty;
    if (value is string)
        returnString = (string)value;
    else if(value is IDictionary dictionary)
        returnString = GetString(dictionary);
    else if(value is IEnumerable enumerable)
        returnString = GetString(enumerable);
    else if(value != null)
        returnString = value.ToString();
    return returnString;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
583
7
Gpt3D_Clone583_7.cs 1 11
Gpt3D_Clone583_7.cs 12 26
----------------------------------------

public static String GetString (object value) {
    if (value is string) {
        return value as string;
    } else if (value is IDictionary) {
        return GetString (value as IDictionary);
    } else if (value is IEnumerable) {
        return GetString (value as IEnumerable);
    } else {
        return value.ToString ();
    }
}
----------------------------------------

 public static String GetString(object value)
{
    if (value is string)
        return (string)value;
    else if (value is IDictionary)
        return GetString((IDictionary)value);
    else if (value is IEnumerable)
        return GetString((IEnumerable)value);
    else if (value == null)
        return string.Empty;
    else
        return value.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
583
8
Gpt3D_Clone583_8.cs 1 11
Gpt3D_Clone583_8.cs 12 25
----------------------------------------

public static String GetString (object value) {
    if (value is string) {
        return value as string;
    } else if (value is IDictionary) {
        return GetString (value as IDictionary);
    } else if (value is IEnumerable) {
        return GetString (value as IEnumerable);
    } else {
        return value.ToString ();
    }
}
----------------------------------------

 public static String GetString(object value)
{
    if (value == null)
        return string.Empty;
    if (value is string)
        return (string)value;
    if (value.GetType() == typeof(IDictionary))
        return GetString((IDictionary)value);
    if (value is IEnumerable)
        return GetString((IEnumerable)value);
    return value.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
583
9
Gpt3D_Clone583_9.cs 1 11
Gpt3D_Clone583_9.cs 12 25
----------------------------------------

public static String GetString (object value) {
    if (value is string) {
        return value as string;
    } else if (value is IDictionary) {
        return GetString (value as IDictionary);
    } else if (value is IEnumerable) {
        return GetString (value as IEnumerable);
    } else {
        return value.ToString ();
    }
}
----------------------------------------

 public static String GetString(object value)
{
    if (value == null)
        return string.Empty;
    if (value is string str)
        return str;
    if (value is IDictionary dict)
        return GetString(dict);
    if (value is IEnumerable list)
        return GetString(list);
    return value.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
584
0
Gpt3D_Clone584_0.cs 1 12
Gpt3D_Clone584_0.cs 13 43
----------------------------------------

public static List < string > LoadCitiesByState (string state) {
    List < string > cities = new List < string > ();
    try {
        DataTable dt = SharedDataAccess.GetCities (state);
    }
    catch {
    }
    foreach (DataRow row in dt.Rows) {
        cities.Add (row [0].ToString ());
    }
    return cities;
}
----------------------------------------

 public static async Task<List<string>> LoadCitiesByStateAsync(string state)
{
    List<string> cities = new List<string>();
    using (SqlConnection connection = new SqlConnection("connection string"))
    {
        await connection.OpenAsync();
        var command = new SqlCommand("SELECT name FROM City WHERE state = @stateName", connection);
        command.Parameters.Add("@stateName", SqlDbType.VarChar).Value = state;
        try
        {
            using (var reader = await command.ExecuteReaderAsync())
            {
                DataTable dt = new DataTable();
                dt.Load(reader);
                foreach (DataRow row in dt.Rows)
                {
                    cities.Add(row[0].ToString());
                }
            }
        }
        finally
        {
            connection.Close();
        }
    }
    return cities;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
584
1
Gpt3D_Clone584_1.cs 1 12
Gpt3D_Clone584_1.cs 13 49
----------------------------------------

public static List < string > LoadCitiesByState (string state) {
    List < string > cities = new List < string > ();
    try {
        DataTable dt = SharedDataAccess.GetCities (state);
    }
    catch {
    }
    foreach (DataRow row in dt.Rows) {
        cities.Add (row [0].ToString ());
    }
    return cities;
}
----------------------------------------

 public static List<string> LoadCitiesByState(string state)
{
    List<string> cities = new List<string>();
    using (SqlConnection sqlConnection = new SqlConnection("connection string"))
    {
        SqlCommand sqlCommand = new SqlCommand()
        {
            Connection = sqlConnection,
            CommandType = CommandType.StoredProcedure,
            CommandText = "GetCitiesByState"
        };
        try
        {
            sqlConnection.Open();
            var reader = sqlCommand.ExecuteReader();
            DataTable dt = new DataTable();
            dt.Load(reader);
            foreach (DataRow row in dt.Rows)
            {
                cities.Add(row[0].ToString());
            }
        }
        finally
        {
            if(sqlConnection.State == ConnectionState.Open)
            {
                sqlConnection.Close();
            }
        }
    }
    return cities;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
584
2
Gpt3D_Clone584_2.cs 1 12
Gpt3D_Clone584_2.cs 13 45
----------------------------------------

public static List < string > LoadCitiesByState (string state) {
    List < string > cities = new List < string > ();
    try {
        DataTable dt = SharedDataAccess.GetCities (state);
    }
    catch {
    }
    foreach (DataRow row in dt.Rows) {
        cities.Add (row [0].ToString ());
    }
    return cities;
}
----------------------------------------

 public static List<string> LoadCitiesByState(string state)
{
    List<string> cities = new List<string>();
    using (DbConnection connection = new SqlConnection("connection string"))
    {
        try
        {
            connection.Open();
            DataTable dt = SharedDataAccess.GetCities(state);
            foreach (DataRow row in dt.Rows)
            {
                cities.Add(row[0].ToString());
            }
        }
        catch
        {
            // log and/or handle exception
        }
        finally
        {
            if (connection != null)
            {
                connection.Close();
            }
        }
        return cities;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
586
0
Gpt3D_Clone586_0.cs 1 27
Gpt3D_Clone586_0.cs 28 47
----------------------------------------

[TestMethod] public void TestMethod1 () {
    int testVal = 2012;
    TestClass myTest = new TestClass ();
    var expected = new List < int > ();
    expected.Add (2012);
    expected.Add (2016);
    expected.Add (2020);
    expected.Add (2024);
    expected.Add (2028);
    expected.Add (2032);
    expected.Add (2036);
    expected.Add (2040);
    expected.Add (2044);
    expected.Add (2048);
    expected.Add (2052);
    expected.Add (2056);
    expected.Add (2060);
    expected.Add (2064);
    expected.Add (2068);
    expected.Add (2072);
    expected.Add (2076);
    expected.Add (2080);
    expected.Add (2084);
    expected.Add (2088);
    var actual = myTest.Testing (2012);
    CollectionAssert.AreEqual (expected, actual);
}
----------------------------------------

 [TestMethod] public void TestMethod1()
{
    int testVal = 2012;
    TestClass myTest = new TestClass();
    var expected = new List<int>()
    { 2012, 2016, 2020, 2024, 2028, 2032, 2036, 2040, 2044, 2048, 2052, 2056, 2060, 2064, 2068, 2072, 2076, 2080, 2084, 2088 };
    var actual = myTest.Testing(2012);
    // Looping through expected and actual collections
    using (IEnumerator<int> expectedEnumerator = expected.GetEnumerator())
    using (IEnumerator<int> actualEnumerator = actual.GetEnumerator())
    {
        while (expectedEnumerator.MoveNext() && actualEnumerator.MoveNext())
        {
            //Comparing elements
            Assert.AreEqual(expectedEnumerator.Current, actualEnumerator.Current);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
586
1
Gpt3D_Clone586_1.cs 1 27
Gpt3D_Clone586_1.cs 28 44
----------------------------------------

[TestMethod] public void TestMethod1 () {
    int testVal = 2012;
    TestClass myTest = new TestClass ();
    var expected = new List < int > ();
    expected.Add (2012);
    expected.Add (2016);
    expected.Add (2020);
    expected.Add (2024);
    expected.Add (2028);
    expected.Add (2032);
    expected.Add (2036);
    expected.Add (2040);
    expected.Add (2044);
    expected.Add (2048);
    expected.Add (2052);
    expected.Add (2056);
    expected.Add (2060);
    expected.Add (2064);
    expected.Add (2068);
    expected.Add (2072);
    expected.Add (2076);
    expected.Add (2080);
    expected.Add (2084);
    expected.Add (2088);
    var actual = myTest.Testing (2012);
    CollectionAssert.AreEqual (expected, actual);
}
----------------------------------------

 [TestMethod] public void TestMethod1()
{
    int testVal = 2012;
    TestClass myTest = new TestClass();
    var expected = new List<int>()
    { 2012, 2016, 2020, 2024, 2028, 2032, 2036, 2040, 2044, 2048, 2052, 2056, 2060, 2064, 2068, 2072, 2076, 2080, 2084, 2088 };
    var actual = myTest.Testing(2012);
    //comparing lengths
    Assert.AreEqual(expected.Count, actual.Count);
    for (int i = 0; i < expected.Count; i++)
    {
        //comparing elements
        Assert.AreEqual(expected[i], actual[i]);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
586
2
Gpt3D_Clone586_2.cs 1 27
Gpt3D_Clone586_2.cs 28 42
----------------------------------------

[TestMethod] public void TestMethod1 () {
    int testVal = 2012;
    TestClass myTest = new TestClass ();
    var expected = new List < int > ();
    expected.Add (2012);
    expected.Add (2016);
    expected.Add (2020);
    expected.Add (2024);
    expected.Add (2028);
    expected.Add (2032);
    expected.Add (2036);
    expected.Add (2040);
    expected.Add (2044);
    expected.Add (2048);
    expected.Add (2052);
    expected.Add (2056);
    expected.Add (2060);
    expected.Add (2064);
    expected.Add (2068);
    expected.Add (2072);
    expected.Add (2076);
    expected.Add (2080);
    expected.Add (2084);
    expected.Add (2088);
    var actual = myTest.Testing (2012);
    CollectionAssert.AreEqual (expected, actual);
}
----------------------------------------

 [TestMethod] public void TestMethod1()
{
    int testVal = 2012;
    TestClass myTest = new TestClass();
    var expected = new List<int>()
    { 2012, 2016, 2020, 2024, 2028, 2032, 2036, 2040, 2044, 2048, 2052, 2056, 2060, 2064, 2068, 2072, 2076, 2080, 2084, 2088 };
    var actual = myTest.Testing(2012);
    //writing expected and actual values to files
    WriteToFile(expected);
    WriteToFile(actual);
    //comparing files
    Assert.IsTrue(CompareFiles(), "Expected values in file do not match with actual values in file");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
586
3
Gpt3D_Clone586_3.cs 1 27
Gpt3D_Clone586_3.cs 28 42
----------------------------------------

[TestMethod] public void TestMethod1 () {
    int testVal = 2012;
    TestClass myTest = new TestClass ();
    var expected = new List < int > ();
    expected.Add (2012);
    expected.Add (2016);
    expected.Add (2020);
    expected.Add (2024);
    expected.Add (2028);
    expected.Add (2032);
    expected.Add (2036);
    expected.Add (2040);
    expected.Add (2044);
    expected.Add (2048);
    expected.Add (2052);
    expected.Add (2056);
    expected.Add (2060);
    expected.Add (2064);
    expected.Add (2068);
    expected.Add (2072);
    expected.Add (2076);
    expected.Add (2080);
    expected.Add (2084);
    expected.Add (2088);
    var actual = myTest.Testing (2012);
    CollectionAssert.AreEqual (expected, actual);
}
----------------------------------------

 [TestMethod] public void TestMethod1()
{
    int testVal = 2012;
    TestClass myTest = new TestClass();
    var expected = new List<int>()
    { 2012, 2016, 2020, 2024, 2028, 2032, 2036, 2040, 2044, 2048, 2052, 2056, 2060, 2064, 2068, 2072, 2076, 2080, 2084, 2088 };
    var actual = myTest.Testing(2012);
    //creating two separate collections
    var expectedList = new SortedSet<int>(expected);
    var actualList = new SortedSet<int>(actual);
    //comparing two sets
    Assert.IsTrue(actualList.SetEquals(expectedList),  "Expected set does not match with actual set.");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
586
4
Gpt3D_Clone586_4.cs 1 27
Gpt3D_Clone586_4.cs 28 42
----------------------------------------

[TestMethod] public void TestMethod1 () {
    int testVal = 2012;
    TestClass myTest = new TestClass ();
    var expected = new List < int > ();
    expected.Add (2012);
    expected.Add (2016);
    expected.Add (2020);
    expected.Add (2024);
    expected.Add (2028);
    expected.Add (2032);
    expected.Add (2036);
    expected.Add (2040);
    expected.Add (2044);
    expected.Add (2048);
    expected.Add (2052);
    expected.Add (2056);
    expected.Add (2060);
    expected.Add (2064);
    expected.Add (2068);
    expected.Add (2072);
    expected.Add (2076);
    expected.Add (2080);
    expected.Add (2084);
    expected.Add (2088);
    var actual = myTest.Testing (2012);
    CollectionAssert.AreEqual (expected, actual);
}
----------------------------------------

 [TestMethod] public void TestMethod1()
{
    int testVal = 2012;
    TestClass myTest = new TestClass();
    var expected = new List<int>() 
    { 2012, 2016, 2020, 2024, 2028, 2032, 2036, 2040, 2044, 2048, 2052, 2056, 2060, 2064, 2068, 2072, 2076, 2080, 2084, 2088 };
    var actual = myTest.Testing(2012);
    //saving expected and actual values separately
    var expectedValues = expected.ToArray();
    var actualValues = actual.ToArray();
    //comparing two arrays
    Assert.IsTrue(Enumerable.SequenceEqual(expectedValues, actualValues), "Expected sequence does not match with actual sequence.");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
586
5
Gpt3D_Clone586_5.cs 1 27
Gpt3D_Clone586_5.cs 28 40
----------------------------------------

[TestMethod] public void TestMethod1 () {
    int testVal = 2012;
    TestClass myTest = new TestClass ();
    var expected = new List < int > ();
    expected.Add (2012);
    expected.Add (2016);
    expected.Add (2020);
    expected.Add (2024);
    expected.Add (2028);
    expected.Add (2032);
    expected.Add (2036);
    expected.Add (2040);
    expected.Add (2044);
    expected.Add (2048);
    expected.Add (2052);
    expected.Add (2056);
    expected.Add (2060);
    expected.Add (2064);
    expected.Add (2068);
    expected.Add (2072);
    expected.Add (2076);
    expected.Add (2080);
    expected.Add (2084);
    expected.Add (2088);
    var actual = myTest.Testing (2012);
    CollectionAssert.AreEqual (expected, actual);
}
----------------------------------------

 [TestMethod] public void TestMethod1()
{
    int testVal = 2012;
    TestClass myTest = new TestClass();
    var expected = new List<int>()
    { 2012, 2016, 2020, 2024, 2028, 2032, 2036, 2040, 2044, 2048, 2052, 2056, 2060, 2064, 2068, 2072, 2076, 2080, 2084, 2088 };
    var actual = myTest.Testing(2012);
    // converting expected list to array
    var expectedArray = expected.ToArray();
    Assert.AreEqual(expectedArray, actual.ToArray());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
586
6
Gpt3D_Clone586_6.cs 1 27
Gpt3D_Clone586_6.cs 28 40
----------------------------------------

[TestMethod] public void TestMethod1 () {
    int testVal = 2012;
    TestClass myTest = new TestClass ();
    var expected = new List < int > ();
    expected.Add (2012);
    expected.Add (2016);
    expected.Add (2020);
    expected.Add (2024);
    expected.Add (2028);
    expected.Add (2032);
    expected.Add (2036);
    expected.Add (2040);
    expected.Add (2044);
    expected.Add (2048);
    expected.Add (2052);
    expected.Add (2056);
    expected.Add (2060);
    expected.Add (2064);
    expected.Add (2068);
    expected.Add (2072);
    expected.Add (2076);
    expected.Add (2080);
    expected.Add (2084);
    expected.Add (2088);
    var actual = myTest.Testing (2012);
    CollectionAssert.AreEqual (expected, actual);
}
----------------------------------------

 [TestMethod] public void TestMethod1()
{
    int testVal = 2012;
    TestClass myTest = new TestClass();
    var expected = new List<int>()
    { 2012, 2016, 2020, 2024, 2028, 2032, 2036, 2040, 2044, 2048, 2052, 2056, 2060, 2064, 2068, 2072, 2076, 2080, 2084, 2088 };
    var actual = myTest.Testing(2012);
    // filling the hash map with the expected values
    HashSet<int> expectedSet = new HashSet<int>(expected);
    Assert.IsTrue(expectedSet.SetEquals(actual));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
586
7
Gpt3D_Clone586_7.cs 1 27
Gpt3D_Clone586_7.cs 28 41
----------------------------------------

[TestMethod] public void TestMethod1 () {
    int testVal = 2012;
    TestClass myTest = new TestClass ();
    var expected = new List < int > ();
    expected.Add (2012);
    expected.Add (2016);
    expected.Add (2020);
    expected.Add (2024);
    expected.Add (2028);
    expected.Add (2032);
    expected.Add (2036);
    expected.Add (2040);
    expected.Add (2044);
    expected.Add (2048);
    expected.Add (2052);
    expected.Add (2056);
    expected.Add (2060);
    expected.Add (2064);
    expected.Add (2068);
    expected.Add (2072);
    expected.Add (2076);
    expected.Add (2080);
    expected.Add (2084);
    expected.Add (2088);
    var actual = myTest.Testing (2012);
    CollectionAssert.AreEqual (expected, actual);
}
----------------------------------------

 [TestMethod] public void TestMethod1()
{
    int testVal = 2012;
    TestClass myTest = new TestClass();
    var expected = new int[20] { 2012, 2016, 2020, 2024, 2028, 2032, 2036, 2040, 2044, 2048, 2052, 2056, 2060, 2064, 2068, 2072, 2076, 2080, 2084, 2088 };
    var actual = myTest.Testing(2012);
    // Searching expected array for same elements as in actual
    foreach (var item in actual)
    {
        Assert.IsTrue(expected.Contains(item), $"expected array doesn't contain {item}");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
586
8
Gpt3D_Clone586_8.cs 1 27
Gpt3D_Clone586_8.cs 28 38
----------------------------------------

[TestMethod] public void TestMethod1 () {
    int testVal = 2012;
    TestClass myTest = new TestClass ();
    var expected = new List < int > ();
    expected.Add (2012);
    expected.Add (2016);
    expected.Add (2020);
    expected.Add (2024);
    expected.Add (2028);
    expected.Add (2032);
    expected.Add (2036);
    expected.Add (2040);
    expected.Add (2044);
    expected.Add (2048);
    expected.Add (2052);
    expected.Add (2056);
    expected.Add (2060);
    expected.Add (2064);
    expected.Add (2068);
    expected.Add (2072);
    expected.Add (2076);
    expected.Add (2080);
    expected.Add (2084);
    expected.Add (2088);
    var actual = myTest.Testing (2012);
    CollectionAssert.AreEqual (expected, actual);
}
----------------------------------------

 [TestMethod] public void TestMethod1() 
{ 
    int testVal = 2012; 
    TestClass myTest = new TestClass(); 
    var expected = new int[] { 2012, 2016, 2020, 2024, 2028, 2032, 2036, 2040, 2044, 2048, 2052, 2056, 2060, 2064, 2068, 2072, 2076, 2080, 2084, 2088 };
    var actual = myTest.Testing(2012); 
    // calling instance method
    Assert.IsTrue(expected.SequenceEqual(actual), $"Expected sequence does not match with actual sequence");
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
586
9
Gpt3D_Clone586_9.cs 1 27
Gpt3D_Clone586_9.cs 28 37
----------------------------------------

[TestMethod] public void TestMethod1 () {
    int testVal = 2012;
    TestClass myTest = new TestClass ();
    var expected = new List < int > ();
    expected.Add (2012);
    expected.Add (2016);
    expected.Add (2020);
    expected.Add (2024);
    expected.Add (2028);
    expected.Add (2032);
    expected.Add (2036);
    expected.Add (2040);
    expected.Add (2044);
    expected.Add (2048);
    expected.Add (2052);
    expected.Add (2056);
    expected.Add (2060);
    expected.Add (2064);
    expected.Add (2068);
    expected.Add (2072);
    expected.Add (2076);
    expected.Add (2080);
    expected.Add (2084);
    expected.Add (2088);
    var actual = myTest.Testing (2012);
    CollectionAssert.AreEqual (expected, actual);
}
----------------------------------------

 [TestMethod] public void TestMethod1() 
{ 
    int testVal = 2012; 
    TestClass myTest = new TestClass(); 
    var expected = new List<int> { 2012, 2016, 2020, 2024, 2028, 2032, 2036, 2040, 2044, 2048, 2052, 2056, 2060, 2064, 2068, 2072, 2076, 2080, 2084, 2088 };
    var actual = myTest.Testing(2012); 
    CollectionAssert.AreEqual(expected, actual); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
58
9
Gpt3D_Clone58_9.cs 1 20
Gpt3D_Clone58_9.cs 21 42
----------------------------------------

public static int CountOccurrences (string original, string substring) {
    if (string.IsNullOrEmpty (substring))
        return 0;
    if (substring.Length == 1)
        return CountOccurrences (original, substring [0]);
    if (string.IsNullOrEmpty (original) || substring.Length > original.Length)
        return 0;
    int substringCount = 0;
    for (int charIndex = 0; charIndex < original.Length; charIndex ++) {
        for (int subCharIndex = 0, secondaryCharIndex = charIndex; subCharIndex < substring.Length && secondaryCharIndex < original.Length; subCharIndex ++, secondaryCharIndex ++) {
            if (substring [subCharIndex] != original [secondaryCharIndex])
                goto continueOuter;
        }
        if (charIndex + substring.Length > original.Length)
            break;
        charIndex += substring.Length - 1;
        substringCount ++;
        continueOuter :;}
    return substringCount;
}
----------------------------------------

 public static int CountOccurrences(string original, string substring) {
    if (string.IsNullOrEmpty(substring))
        return 0;
    if (substring.Length == 1)
        return CountOccurrences(original, substring[0]);
    if (string.IsNullOrEmpty(original) || substring.Length > original.Length)
        return 0;
    int substringCount = 0, startIndex = 0;
    while (startIndex < (original.Length - substring.Length + 1))
    {
        if(original.Substring(startIndex, substring.Length) == substring)
        {
            substringCount++;
            startIndex += substring.Length;
        }
        else
            startIndex++;
    }
    return substringCount;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
592
0
Gpt3D_Clone592_0.cs 1 19
Gpt3D_Clone592_0.cs 20 44
----------------------------------------

private void Download_Begin () {
    web_client = new System.Net.WebClient ();
    web_client.DownloadProgressChanged += new DownloadProgressChangedEventHandler (Download_Progress);
    web_client.DownloadFileCompleted += new AsyncCompletedEventHandler (Download_Complete);
    stop_watch = new System.Diagnostics.Stopwatch ();
    stop_watch.Start ();
    try {
        if (Program.Current_Download == "Install_Client.exe") {
            web_client.DownloadFileAsync (new Uri ("http://www.website.com/Client/Install_Client.exe"), @"C:\Downloads\Install_Client.exe");
        } else {
            web_client.DownloadFileAsync (new Uri ((string.Format ("http://www.website.com/{0}", Program.Current_Download))), (string.Format (@"C:\Downloads\{0}", Program.Current_Download)));
        }
    }
    catch (Exception) {
        stop_watch.Stop ();
    }
    Program.Downloading = true;
    Download_Success = false;
}
----------------------------------------

  private void Download_Begin () {
    web_client = new WebClient ();
    web_client.DownloadProgressChanged += Download_Progress;
    web_client.DownloadFileCompleted += Download_Complete;
    stop_watch = new Stopwatch ();
    stop_watch.Start ();
    Uri link;
    string save_file;
    if (Program.Current_Download == "Install_Client.exe") {
        link = new Uri ("http://www.website.com/Client/Install_Client.exe");
        save_file = @"C:\Downloads\Install_Client.exe";
    } else {
        link = new Uri((string.Format ("http://www.website.com/{0}", Program.Current_Download))); 
        save_file = (string.Format (@"C:\Downloads\{0}", Program.Current_Download));
    }
    try {
        web_client.DownloadFileAsync (link, save_file);
    } catch (Exception) {
        stop_watch.Stop ();
    }
    Program.Downloading = true;
    Download_Success = false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
592
1
Gpt3D_Clone592_1.cs 1 19
Gpt3D_Clone592_1.cs 20 46
----------------------------------------

private void Download_Begin () {
    web_client = new System.Net.WebClient ();
    web_client.DownloadProgressChanged += new DownloadProgressChangedEventHandler (Download_Progress);
    web_client.DownloadFileCompleted += new AsyncCompletedEventHandler (Download_Complete);
    stop_watch = new System.Diagnostics.Stopwatch ();
    stop_watch.Start ();
    try {
        if (Program.Current_Download == "Install_Client.exe") {
            web_client.DownloadFileAsync (new Uri ("http://www.website.com/Client/Install_Client.exe"), @"C:\Downloads\Install_Client.exe");
        } else {
            web_client.DownloadFileAsync (new Uri ((string.Format ("http://www.website.com/{0}", Program.Current_Download))), (string.Format (@"C:\Downloads\{0}", Program.Current_Download)));
        }
    }
    catch (Exception) {
        stop_watch.Stop ();
    }
    Program.Downloading = true;
    Download_Success = false;
}
----------------------------------------

  private void Download_Begin () {
    web_client = new WebClient ();
    web_client.DownloadProgressChanged += Download_Progress;
    web_client.DownloadFileCompleted += Download_Complete;
    stop_watch = new Stopwatch ();
    Uri url = null;
    string path = "";
    
    if (Program.Current_Download == "Install_Client.exe") {
        url = new Uri ("http://www.website.com/Client/Install_Client.exe");
        path = @"C:\Downloads\Install_Client.exe";
    } else {
        url = new Uri(string.Format ("http://www.website.com/{0}", Program.Current_Download));
        path = string.Format (@"C:\Downloads\{0}", Program.Current_Download);
    }
    try {
        stop_watch.Start ();
        web_client.DownloadFileAsync (url, path);
    }
    catch (Exception) {
        stop_watch.Stop ();
    }
    Program.Downloading = true;
    Download_Success = false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
592
2
Gpt3D_Clone592_2.cs 1 19
Gpt3D_Clone592_2.cs 20 46
----------------------------------------

private void Download_Begin () {
    web_client = new System.Net.WebClient ();
    web_client.DownloadProgressChanged += new DownloadProgressChangedEventHandler (Download_Progress);
    web_client.DownloadFileCompleted += new AsyncCompletedEventHandler (Download_Complete);
    stop_watch = new System.Diagnostics.Stopwatch ();
    stop_watch.Start ();
    try {
        if (Program.Current_Download == "Install_Client.exe") {
            web_client.DownloadFileAsync (new Uri ("http://www.website.com/Client/Install_Client.exe"), @"C:\Downloads\Install_Client.exe");
        } else {
            web_client.DownloadFileAsync (new Uri ((string.Format ("http://www.website.com/{0}", Program.Current_Download))), (string.Format (@"C:\Downloads\{0}", Program.Current_Download)));
        }
    }
    catch (Exception) {
        stop_watch.Stop ();
    }
    Program.Downloading = true;
    Download_Success = false;
}
----------------------------------------

  private void Download_Begin () {
    web_client = new WebClient ();
    web_client.DownloadProgressChanged += Download_Progress;
    web_client.DownloadFileCompleted += Download_Complete;
    stop_watch = new Stopwatch ();
    Uri ftp_url = null;
    string save_dir = "";
    
    if (Program.Current_Download == "Install_Client.exe") {
        ftp_url = new Uri ("http://www.website.com/Client/Install_Client.exe");
        save_dir = @"C:\Downloads\Install_Client.exe";
    } else {
        ftp_url = new Uri(string.Format ("http://www.website.com/{0}", Program.Current_Download));
        save_dir = string.Format (@"C:\Downloads\{0}", Program.Current_Download);
    }
    try {
        stop_watch.Start ();
        web_client.DownloadFileAsync (ftp_url, save_dir);
    }
    catch (Exception) {
        stop_watch.Stop ();
    }
    Program.Downloading = true;
    Download_Success = false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
592
3
Gpt3D_Clone592_3.cs 1 19
Gpt3D_Clone592_3.cs 20 47
----------------------------------------

private void Download_Begin () {
    web_client = new System.Net.WebClient ();
    web_client.DownloadProgressChanged += new DownloadProgressChangedEventHandler (Download_Progress);
    web_client.DownloadFileCompleted += new AsyncCompletedEventHandler (Download_Complete);
    stop_watch = new System.Diagnostics.Stopwatch ();
    stop_watch.Start ();
    try {
        if (Program.Current_Download == "Install_Client.exe") {
            web_client.DownloadFileAsync (new Uri ("http://www.website.com/Client/Install_Client.exe"), @"C:\Downloads\Install_Client.exe");
        } else {
            web_client.DownloadFileAsync (new Uri ((string.Format ("http://www.website.com/{0}", Program.Current_Download))), (string.Format (@"C:\Downloads\{0}", Program.Current_Download)));
        }
    }
    catch (Exception) {
        stop_watch.Stop ();
    }
    Program.Downloading = true;
    Download_Success = false;
}
----------------------------------------

  private void Download_Begin () {
    web_client = new WebClient ();
    web_client.DownloadProgressChanged += Download_Progress;
    web_client.DownloadFileCompleted += Download_Complete;
    stop_watch = new Stopwatch ();
    string file_url = "";
    string save_path = "";
    
    if (Program.Current_Download == "Install_Client.exe") {
        file_url = "http://www.website.com/Client/Install_Client.exe";
        save_path = @"C:\Downloads\Install_Client.exe";
    } 
    else {
        file_url = string.Format ("http://www.website.com/{0}", Program.Current_Download);
        save_path = string.Format (@"C:\Downloads\{0}", Program.Current_Download);
    }
    try {
        stop_watch.Start ();
        web_client.DownloadFileAsync (new Uri (file_url), save_path);
    }
    catch (Exception) {
        stop_watch.Stop ();
    }
    Program.Downloading = true;
    Download_Success = false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
592
4
Gpt3D_Clone592_4.cs 1 19
Gpt3D_Clone592_4.cs 20 46
----------------------------------------

private void Download_Begin () {
    web_client = new System.Net.WebClient ();
    web_client.DownloadProgressChanged += new DownloadProgressChangedEventHandler (Download_Progress);
    web_client.DownloadFileCompleted += new AsyncCompletedEventHandler (Download_Complete);
    stop_watch = new System.Diagnostics.Stopwatch ();
    stop_watch.Start ();
    try {
        if (Program.Current_Download == "Install_Client.exe") {
            web_client.DownloadFileAsync (new Uri ("http://www.website.com/Client/Install_Client.exe"), @"C:\Downloads\Install_Client.exe");
        } else {
            web_client.DownloadFileAsync (new Uri ((string.Format ("http://www.website.com/{0}", Program.Current_Download))), (string.Format (@"C:\Downloads\{0}", Program.Current_Download)));
        }
    }
    catch (Exception) {
        stop_watch.Stop ();
    }
    Program.Downloading = true;
    Download_Success = false;
}
----------------------------------------

 private void Download_Begin () {
    web_client = new WebClient ();
    web_client.DownloadProgressChanged += Download_Progress;
    web_client.DownloadFileCompleted += Download_Complete;
    stop_watch = new Stopwatch ();
    Uri ftp_link = null;
    string save_location = "";
    
    if (Program.Current_Download == "Install_Client.exe") {
        ftp_link = new Uri ("http://www.website.com/Client/Install_Client.exe");
        save_location = @"C:\Downloads\Install_Client.exe";
    } else {
        ftp_link = new Uri(string.Format ("http://www.website.com/{0}", Program.Current_Download));
        save_location = string.Format (@"C:\Downloads\{0}", Program.Current_Download);
    }
    try {
        stop_watch.Start ();
        web_client.DownloadFileAsync (ftp_link, save_location);
    }
    catch (Exception) {
        stop_watch.Stop ();
    }
    Program.Downloading = true;
    Download_Success = false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
592
5
Gpt3D_Clone592_5.cs 1 19
Gpt3D_Clone592_5.cs 20 45
----------------------------------------

private void Download_Begin () {
    web_client = new System.Net.WebClient ();
    web_client.DownloadProgressChanged += new DownloadProgressChangedEventHandler (Download_Progress);
    web_client.DownloadFileCompleted += new AsyncCompletedEventHandler (Download_Complete);
    stop_watch = new System.Diagnostics.Stopwatch ();
    stop_watch.Start ();
    try {
        if (Program.Current_Download == "Install_Client.exe") {
            web_client.DownloadFileAsync (new Uri ("http://www.website.com/Client/Install_Client.exe"), @"C:\Downloads\Install_Client.exe");
        } else {
            web_client.DownloadFileAsync (new Uri ((string.Format ("http://www.website.com/{0}", Program.Current_Download))), (string.Format (@"C:\Downloads\{0}", Program.Current_Download)));
        }
    }
    catch (Exception) {
        stop_watch.Stop ();
    }
    Program.Downloading = true;
    Download_Success = false;
}
----------------------------------------

  private void Download_Begin () {
    web_client = new WebClient ();
    web_client.DownloadProgressChanged += Download_Progress;
    web_client.DownloadFileCompleted += Download_Complete;
    stop_watch = new Stopwatch ();
    Uri link = null;
    string save_file = null;
    if (Program.Current_Download == "Install_Client.exe") {
        link = new Uri ("http://www.website.com/Client/Install_Client.exe");
        save_file = @"C:\Downloads\Install_Client.exe";
    } else {
        link = new Uri((string.Format ("http://www.website.com/{0}", Program.Current_Download))); 
        save_file = (string.Format (@"C:\Downloads\{0}", Program.Current_Download));
    }
    try {
        stop_watch.Start ();
        web_client.DownloadFileAsync (link, save_file);
    }
    catch (Exception) {
        stop_watch.Stop ();
    }
    Program.Downloading = true;
    Download_Success = false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
592
6
Gpt3D_Clone592_6.cs 1 19
Gpt3D_Clone592_6.cs 20 46
----------------------------------------

private void Download_Begin () {
    web_client = new System.Net.WebClient ();
    web_client.DownloadProgressChanged += new DownloadProgressChangedEventHandler (Download_Progress);
    web_client.DownloadFileCompleted += new AsyncCompletedEventHandler (Download_Complete);
    stop_watch = new System.Diagnostics.Stopwatch ();
    stop_watch.Start ();
    try {
        if (Program.Current_Download == "Install_Client.exe") {
            web_client.DownloadFileAsync (new Uri ("http://www.website.com/Client/Install_Client.exe"), @"C:\Downloads\Install_Client.exe");
        } else {
            web_client.DownloadFileAsync (new Uri ((string.Format ("http://www.website.com/{0}", Program.Current_Download))), (string.Format (@"C:\Downloads\{0}", Program.Current_Download)));
        }
    }
    catch (Exception) {
        stop_watch.Stop ();
    }
    Program.Downloading = true;
    Download_Success = false;
}
----------------------------------------

  private void Download_Begin () {
    web_client = new WebClient ();
    web_client.DownloadProgressChanged += Download_Progress;
    web_client.DownloadFileCompleted += Download_Complete;
    stop_watch = new Stopwatch ();
    string download_from = "";
    string download_to = ""; 
    
    if (Program.Current_Download == "Install_Client.exe") {
        download_from = "http://www.website.com/Client/Install_Client.exe";
        download_to = @"C:\Downloads\Install_Client.exe";
    } else {
        download_from = string.Format ("http://www.website.com/{0}", Program.Current_Download);
        download_to = string.Format (@"C:\Downloads\{0}", Program.Current_Download);
    }
    try {
        stop_watch.Start ();
        web_client.DownloadFileAsync (new Uri (download_from), download_to);
    }
    catch (Exception) {
        stop_watch.Stop ();
    }
    Program.Downloading = true;
    Download_Success = false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
592
7
Gpt3D_Clone592_7.cs 1 19
Gpt3D_Clone592_7.cs 20 46
----------------------------------------

private void Download_Begin () {
    web_client = new System.Net.WebClient ();
    web_client.DownloadProgressChanged += new DownloadProgressChangedEventHandler (Download_Progress);
    web_client.DownloadFileCompleted += new AsyncCompletedEventHandler (Download_Complete);
    stop_watch = new System.Diagnostics.Stopwatch ();
    stop_watch.Start ();
    try {
        if (Program.Current_Download == "Install_Client.exe") {
            web_client.DownloadFileAsync (new Uri ("http://www.website.com/Client/Install_Client.exe"), @"C:\Downloads\Install_Client.exe");
        } else {
            web_client.DownloadFileAsync (new Uri ((string.Format ("http://www.website.com/{0}", Program.Current_Download))), (string.Format (@"C:\Downloads\{0}", Program.Current_Download)));
        }
    }
    catch (Exception) {
        stop_watch.Stop ();
    }
    Program.Downloading = true;
    Download_Success = false;
}
----------------------------------------

  private void Download_Begin () {
    web_client = new WebClient ();
    web_client.DownloadProgressChanged += Download_Progress;
    web_client.DownloadFileCompleted += Download_Complete;
    stop_watch = new Stopwatch ();
    string file_url = "";
    string file_save_loc = "";
    
    if (Program.Current_Download == "Install_Client.exe") {
        file_url = "http://www.website.com/Client/Install_Client.exe";
        file_save_loc = @"C:\Downloads\Install_Client.exe";
    } else {
        file_url = string.Format ("http://www.website.com/{0}", Program.Current_Download); 
        file_save_loc = string.Format (@"C:\Downloads\{0}", Program.Current_Download);
    }
    try {
        stop_watch.Start ();
        web_client.DownloadFileAsync (new Uri (file_url), file_save_loc);
    }
    catch (Exception) {
        stop_watch.Stop ();
    }
    Program.Downloading = true;
    Download_Success = false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
592
8
Gpt3D_Clone592_8.cs 1 19
Gpt3D_Clone592_8.cs 20 45
----------------------------------------

private void Download_Begin () {
    web_client = new System.Net.WebClient ();
    web_client.DownloadProgressChanged += new DownloadProgressChangedEventHandler (Download_Progress);
    web_client.DownloadFileCompleted += new AsyncCompletedEventHandler (Download_Complete);
    stop_watch = new System.Diagnostics.Stopwatch ();
    stop_watch.Start ();
    try {
        if (Program.Current_Download == "Install_Client.exe") {
            web_client.DownloadFileAsync (new Uri ("http://www.website.com/Client/Install_Client.exe"), @"C:\Downloads\Install_Client.exe");
        } else {
            web_client.DownloadFileAsync (new Uri ((string.Format ("http://www.website.com/{0}", Program.Current_Download))), (string.Format (@"C:\Downloads\{0}", Program.Current_Download)));
        }
    }
    catch (Exception) {
        stop_watch.Stop ();
    }
    Program.Downloading = true;
    Download_Success = false;
}
----------------------------------------

  private void Download_Begin () {
    web_client = new WebClient ();
    web_client.DownloadProgressChanged += Download_Progress;
    web_client.DownloadFileCompleted += Download_Complete;
    stop_watch = new Stopwatch ();
    
    try {
        string link, save_file;
        if (Program.Current_Download == "Install_Client.exe") {
            link = "http://www.website.com/Client/Install_Client.exe";
            save_file = @"C:\Downloads\Install_Client.exe";
        } else {
            link = (string.Format ("http://www.website.com/{0}", Program.Current_Download));
            save_file = (string.Format (@"C:\Downloads\{0}", Program.Current_Download));
        }
        stop_watch.Start ();
        web_client.DownloadFileAsync (new Uri (link), save_file);
    }
    catch (Exception) {
        stop_watch.Stop ();
    }
    Program.Downloading = true;
    Download_Success = false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
592
9
Gpt3D_Clone592_9.cs 1 19
Gpt3D_Clone592_9.cs 20 45
----------------------------------------

private void Download_Begin () {
    web_client = new System.Net.WebClient ();
    web_client.DownloadProgressChanged += new DownloadProgressChangedEventHandler (Download_Progress);
    web_client.DownloadFileCompleted += new AsyncCompletedEventHandler (Download_Complete);
    stop_watch = new System.Diagnostics.Stopwatch ();
    stop_watch.Start ();
    try {
        if (Program.Current_Download == "Install_Client.exe") {
            web_client.DownloadFileAsync (new Uri ("http://www.website.com/Client/Install_Client.exe"), @"C:\Downloads\Install_Client.exe");
        } else {
            web_client.DownloadFileAsync (new Uri ((string.Format ("http://www.website.com/{0}", Program.Current_Download))), (string.Format (@"C:\Downloads\{0}", Program.Current_Download)));
        }
    }
    catch (Exception) {
        stop_watch.Stop ();
    }
    Program.Downloading = true;
    Download_Success = false;
}
----------------------------------------

  private void Download_Begin () {
    web_client = new WebClient ();
    web_client.DownloadProgressChanged += Download_Progress;
    web_client.DownloadFileCompleted += Download_Complete;
    stop_watch = new Stopwatch ();
    string url, save_to;
    
    if (Program.Current_Download == "Install_Client.exe") {
        url = "http://www.website.com/Client/Install_Client.exe";
        save_to = @"C:\Downloads\Install_Client.exe";
    } else {
        url = string.Format ("http://www.website.com/{0}", Program.Current_Download); 
        save_to = string.Format (@"C:\Downloads\{0}", Program.Current_Download);
    }
    try {
        stop_watch.Start ();
        web_client.DownloadFileAsync (new Uri (url), save_to);
    }
    catch (Exception) {
        stop_watch.Stop ();
    }
    Program.Downloading = true;
    Download_Success = false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
593
0
Gpt3D_Clone593_0.cs 1 15
Gpt3D_Clone593_0.cs 16 36
----------------------------------------

static void Main (string [] args) {
    if (args.Length == 0) {
        Sendmail ();
        Downloadfile ();
        ProcessFile ();
        ExportFile ();
    }
    foreach (string s in args) {
        switch (s) {
            case "SendMail" :
                Sendmail ();
                break;
        }
    }
}
----------------------------------------

 static void Main (string [] args) {
        if (args.Length == 0) {
    	    Message msg = new Message ();
            msg.Send ();
            Downloadfile ();
            File io = new File ();
            io.Process ();
            File io2 = new File ();
            io2.Export ();
        }
        foreach (string s in args) {
            switch (s) {
                case "SendMail" :
                    Message msg = new Message ();
                    msg.Send ();
                    break;
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
593
1
Gpt3D_Clone593_1.cs 1 15
Gpt3D_Clone593_1.cs 16 36
----------------------------------------

static void Main (string [] args) {
    if (args.Length == 0) {
        Sendmail ();
        Downloadfile ();
        ProcessFile ();
        ExportFile ();
    }
    foreach (string s in args) {
        switch (s) {
            case "SendMail" :
                Sendmail ();
                break;
        }
    }
}
----------------------------------------

 static void Main (string [] args) {
        if (args.Length == 0) {
            EmailSender sender = new EmailSender ();
            sender.Send ();
            Downloadfile ();
            FileReader read = new FileReader ();
            read.Process ();
            FileReader read2 = new FileReader ();
            read2.Export ();
        }
        foreach (string s in args) {
            switch (s) {
                case "SendMail" :
                    EmailSender sender = new EmailSender ();
                    sender.Send ();
                    break;
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
593
2
Gpt3D_Clone593_2.cs 1 15
Gpt3D_Clone593_2.cs 16 36
----------------------------------------

static void Main (string [] args) {
    if (args.Length == 0) {
        Sendmail ();
        Downloadfile ();
        ProcessFile ();
        ExportFile ();
    }
    foreach (string s in args) {
        switch (s) {
            case "SendMail" :
                Sendmail ();
                break;
        }
    }
}
----------------------------------------

 static void Main (string [] args) {
        if (args.Length == 0) {
            EmailDispatcher disp = new EmailDispatcher ();
            disp.Send ();
            Downloadfile ();
            Handler han = new Handler ();
            han.Process ();
            Handler han2 = new Handler ();
            han2.Export ();
        }
        foreach (string s in args) {
            switch (s) {
                case "SendMail" :
                    EmailDispatcher disp = new EmailDispatcher ();
                    disp.Send ();
                    break;
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
593
3
Gpt3D_Clone593_3.cs 1 15
Gpt3D_Clone593_3.cs 16 36
----------------------------------------

static void Main (string [] args) {
    if (args.Length == 0) {
        Sendmail ();
        Downloadfile ();
        ProcessFile ();
        ExportFile ();
    }
    foreach (string s in args) {
        switch (s) {
            case "SendMail" :
                Sendmail ();
                break;
        }
    }
}
----------------------------------------

 static void Main (string [] args) {
        if (args.Length == 0) {
            Sender sender = new Sender ();
            sender.Send ();
            Downloadfile ();
            Processor pro = new Processor ();
            pro.Process ();
            Processor pro2 = new Processor ();
            pro2.Export ();
        }
        foreach (string s in args) {
            switch (s) {
                case "SendMail" :
                    Sender sender = new Sender ();
                    sender.Send ();
                    break;
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
593
4
Gpt3D_Clone593_4.cs 1 15
Gpt3D_Clone593_4.cs 16 36
----------------------------------------

static void Main (string [] args) {
    if (args.Length == 0) {
        Sendmail ();
        Downloadfile ();
        ProcessFile ();
        ExportFile ();
    }
    foreach (string s in args) {
        switch (s) {
            case "SendMail" :
                Sendmail ();
                break;
        }
    }
}
----------------------------------------

 static void Main (string [] args) {
        if (args.Length == 0) {
            MailSent sender = new MailSent ();
            sender.Send ();
            Downloadfile ();
            FileController con = new FileController ();
            con.Process ();
            FileController con2 = new FileController ();
            con2.Export ();
        }
        foreach (string s in args) {
            switch (s) {
                case "SendMail" :
                    MailSent sender = new MailSent ();
                    sender.Send ();
                    break;
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
593
5
Gpt3D_Clone593_5.cs 1 15
Gpt3D_Clone593_5.cs 16 36
----------------------------------------

static void Main (string [] args) {
    if (args.Length == 0) {
        Sendmail ();
        Downloadfile ();
        ProcessFile ();
        ExportFile ();
    }
    foreach (string s in args) {
        switch (s) {
            case "SendMail" :
                Sendmail ();
                break;
        }
    }
}
----------------------------------------

 static void Main (string [] args) {
        if (args.Length == 0) {
            MessageTag tag = new MessageTag ();
            tag.Send ();
            Downloadfile ();
            HandleFile handle = new HandleFile ();
            handle.Process ();
            HandleFile handle2 = new HandleFile ();
            handle2.Export ();
        }
        foreach (string s in args) {
            switch (s) {
                case "SendMail" :
                    MessageTag tag = new MessageTag ();
                    tag.Send ();
                    break;
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
593
6
Gpt3D_Clone593_6.cs 1 15
Gpt3D_Clone593_6.cs 16 36
----------------------------------------

static void Main (string [] args) {
    if (args.Length == 0) {
        Sendmail ();
        Downloadfile ();
        ProcessFile ();
        ExportFile ();
    }
    foreach (string s in args) {
        switch (s) {
            case "SendMail" :
                Sendmail ();
                break;
        }
    }
}
----------------------------------------

 static void Main (string [] args) {
        if (args.Length == 0) {
            Email em = new Email ();
            em.Send ();
            Downloadfile ();
            Filer file = new Filer ();
            file.Process ();
            Filer file2 = new Filer ();
            file2.Export ();
        }
        foreach (string s in args) {
            switch (s) {
                case "SendMail" :
                    Email em = new Email ();
                    em.Send ();
                    break;
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
593
7
Gpt3D_Clone593_7.cs 1 15
Gpt3D_Clone593_7.cs 16 36
----------------------------------------

static void Main (string [] args) {
    if (args.Length == 0) {
        Sendmail ();
        Downloadfile ();
        ProcessFile ();
        ExportFile ();
    }
    foreach (string s in args) {
        switch (s) {
            case "SendMail" :
                Sendmail ();
                break;
        }
    }
}
----------------------------------------

 static void Main (string [] args) {
        if (args.Length == 0) {
            EmailService service = new EmailService ();
            service.Send ();
            Downloadfile ();
            FileManager manage = new FileManager ();
            manage.Process ();
            FileManager manage2 = new FileManager ();
            manage2.Export ();
        }
        foreach (string s in args) {
            switch (s) {
                case "SendMail" :
                    EmailService service = new EmailService ();
                    service.Send ();
                    break;
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
593
8
Gpt3D_Clone593_8.cs 1 15
Gpt3D_Clone593_8.cs 16 36
----------------------------------------

static void Main (string [] args) {
    if (args.Length == 0) {
        Sendmail ();
        Downloadfile ();
        ProcessFile ();
        ExportFile ();
    }
    foreach (string s in args) {
        switch (s) {
            case "SendMail" :
                Sendmail ();
                break;
        }
    }
}
----------------------------------------

 static void Main (string [] args) {
        if (args.Length == 0) {
            Mailer mail = new Mailer ();
            mail.Send ();
            Downloadfile ();
            Manipulator manip = new Manipulator ();
            manip.Process ();
            Manipulator manip2 = new Manipulator ();
            manip2.Export ();
        }
        foreach (string s in args) {
            switch (s) {
                case "SendMail" :
                    Mailer mail = new Mailer ();
                    mail.Send ();
                    break;
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
593
9
Gpt3D_Clone593_9.cs 1 15
Gpt3D_Clone593_9.cs 16 36
----------------------------------------

static void Main (string [] args) {
    if (args.Length == 0) {
        Sendmail ();
        Downloadfile ();
        ProcessFile ();
        ExportFile ();
    }
    foreach (string s in args) {
        switch (s) {
            case "SendMail" :
                Sendmail ();
                break;
        }
    }
}
----------------------------------------

 static void Main (string [] args) {
        if (args.Length == 0) {
            MessageProcesser proc = new MessageProcesser ();
            proc.Send ();
            Downloadfile ();
            ContentManager content = new ContentManager ();
            content.Process ();
            ContentManager content2 = new ContentManager ();
            content2.Export ();
        }
        foreach (string s in args) {
            switch (s) {
                case "SendMail" :
                    MessageProcesser proc = new MessageProcesser ();
                    proc.Send ();
                    break;
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
5
1
Gpt3D_Clone5_1.cs 1 12
Gpt3D_Clone5_1.cs 13 28
----------------------------------------

static void ResourceKeyChanged (DependencyObject d, DependencyPropertyChangedEventArgs e) {
    var target = d as FrameworkElement;
    var newVal = e.NewValue as Tuple < object, DependencyProperty >;
    if (target == null || newVal == null)
        return;
    var dp = newVal.Item2;
    if (newVal.Item1 == null) {
        target.SetValue (dp, dp.GetMetadata (target).DefaultValue);
        return;
    }
    target.SetResourceReference (dp, newVal.Item1);
}
----------------------------------------

 static void ResourceKeyChanged (DependencyObject d, DependencyPropertyChangedEventArgs e) {
    var target = d as FrameworkElement;
    if (target == null)
        return;
 
    var newVal = e.NewValue as Tuple<object, DependencyProperty>;
    if (newVal != null) {
        var dp = newVal.Item2;
        target.SetResourceReference (dp, newVal.Item1);
        return;
    }
    //fallback value
    target.SetValue (e.Property, e.Property.GetMetadata(target).DefaultValue);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
5
2
Gpt3D_Clone5_2.cs 1 12
Gpt3D_Clone5_2.cs 13 27
----------------------------------------

static void ResourceKeyChanged (DependencyObject d, DependencyPropertyChangedEventArgs e) {
    var target = d as FrameworkElement;
    var newVal = e.NewValue as Tuple < object, DependencyProperty >;
    if (target == null || newVal == null)
        return;
    var dp = newVal.Item2;
    if (newVal.Item1 == null) {
        target.SetValue (dp, dp.GetMetadata (target).DefaultValue);
        return;
    }
    target.SetResourceReference (dp, newVal.Item1);
}
----------------------------------------

 static void ResourceKeyChanged (DependencyObject d, DependencyPropertyChangedEventArgs e) {
    var target = d as FrameworkElement;
    if (target == null)
        return;
 
    var newVal = e.NewValue as ResourceKey;
    if (newVal != null) {
        target.SetResourceReference (e.Property, newVal);
        return;
    }
    target.ClearResourceReference (e.Property);
    target.SetValue (e.Property, e.Property.GetMetadata(target).DefaultValue);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
5
3
Gpt3D_Clone5_3.cs 1 12
Gpt3D_Clone5_3.cs 13 27
----------------------------------------

static void ResourceKeyChanged (DependencyObject d, DependencyPropertyChangedEventArgs e) {
    var target = d as FrameworkElement;
    var newVal = e.NewValue as Tuple < object, DependencyProperty >;
    if (target == null || newVal == null)
        return;
    var dp = newVal.Item2;
    if (newVal.Item1 == null) {
        target.SetValue (dp, dp.GetMetadata (target).DefaultValue);
        return;
    }
    target.SetResourceReference (dp, newVal.Item1);
}
----------------------------------------

 static void ResourceKeyChanged (DependencyObject d, DependencyPropertyChangedEventArgs e) {
    var target = d as FrameworkElement;
    if (target == null)
        return;
        
    var newVal = e.NewValue as ResourceKey;
    if (newVal == null) {
        target.ClearResourceReference (e.Property);
        target.SetValue (e.Property, e.Property.GetMetadata(target).DefaultValue);
        return;
    }
    target.SetResourceReference (e.Property, newVal);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
5
4
Gpt3D_Clone5_4.cs 1 12
Gpt3D_Clone5_4.cs 13 27
----------------------------------------

static void ResourceKeyChanged (DependencyObject d, DependencyPropertyChangedEventArgs e) {
    var target = d as FrameworkElement;
    var newVal = e.NewValue as Tuple < object, DependencyProperty >;
    if (target == null || newVal == null)
        return;
    var dp = newVal.Item2;
    if (newVal.Item1 == null) {
        target.SetValue (dp, dp.GetMetadata (target).DefaultValue);
        return;
    }
    target.SetResourceReference (dp, newVal.Item1);
}
----------------------------------------

 static void ResourceKeyChanged (DependencyObject d, DependencyPropertyChangedEventArgs e) {
    var target = d as FrameworkElement;
    var newVal = e.NewValue as ResourceKey;
    if (target == null || newVal == null)
        return;
    target.SetResourceReference (e.Property, newVal);
        
    if (newVal == null) {
        target.ClearResourceReference (e.Property);
        target.SetValue (e.Property, e.Property.GetMetadata(target).DefaultValue);
        return;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
5
5
Gpt3D_Clone5_5.cs 1 12
Gpt3D_Clone5_5.cs 13 25
----------------------------------------

static void ResourceKeyChanged (DependencyObject d, DependencyPropertyChangedEventArgs e) {
    var target = d as FrameworkElement;
    var newVal = e.NewValue as Tuple < object, DependencyProperty >;
    if (target == null || newVal == null)
        return;
    var dp = newVal.Item2;
    if (newVal.Item1 == null) {
        target.SetValue (dp, dp.GetMetadata (target).DefaultValue);
        return;
    }
    target.SetResourceReference (dp, newVal.Item1);
}
----------------------------------------

 static void ResourceKeyChanged (DependencyObject d, DependencyPropertyChangedEventArgs e) {
    var target = d as FrameworkElement;
    var newVal = e.NewValue as ResourceKey;
    if (target == null || newVal == null)
        return;
    if (newVal == null) {
        target.ClearResourceReference (e.Property);
        return;
    }
    target.SetResourceReference (e.Property, newVal);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
5
6
Gpt3D_Clone5_6.cs 1 12
Gpt3D_Clone5_6.cs 13 26
----------------------------------------

static void ResourceKeyChanged (DependencyObject d, DependencyPropertyChangedEventArgs e) {
    var target = d as FrameworkElement;
    var newVal = e.NewValue as Tuple < object, DependencyProperty >;
    if (target == null || newVal == null)
        return;
    var dp = newVal.Item2;
    if (newVal.Item1 == null) {
        target.SetValue (dp, dp.GetMetadata (target).DefaultValue);
        return;
    }
    target.SetResourceReference (dp, newVal.Item1);
}
----------------------------------------

  static void ResourceKeyChanged (DependencyObject d, DependencyPropertyChangedEventArgs e) {
    var target = d as FrameworkElement;
    var newVal = e.NewValue as object;
    if (target == null || newVal == null)
        return;
    target.SetResourceReference (e.Property, newVal);
 
    if (newVal == null) {
        target.SetValue (e.Property, DependencyProperty.UnsetValue);
        return;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
5
7
Gpt3D_Clone5_7.cs 1 12
Gpt3D_Clone5_7.cs 13 21
----------------------------------------

static void ResourceKeyChanged (DependencyObject d, DependencyPropertyChangedEventArgs e) {
    var target = d as FrameworkElement;
    var newVal = e.NewValue as Tuple < object, DependencyProperty >;
    if (target == null || newVal == null)
        return;
    var dp = newVal.Item2;
    if (newVal.Item1 == null) {
        target.SetValue (dp, dp.GetMetadata (target).DefaultValue);
        return;
    }
    target.SetResourceReference (dp, newVal.Item1);
}
----------------------------------------

 static void ResourceKeyChanged (DependencyObject d, DependencyPropertyChangedEventArgs e) {
    var target = d as FrameworkElement;
    var newVal = e.NewValue as object;
    if (target == null || newVal == null)
        return;
    target.SetResourceReference (e.Property, newVal);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
601
0
Gpt3D_Clone601_0.cs 1 16
Gpt3D_Clone601_0.cs 17 39
----------------------------------------

private static void copy (string srcFile, string dstFile, int offset, int length, byte [] buffer) {
    using (Stream inStream = File.OpenRead (srcFile))
    using (Stream outStream = File.OpenWrite (dstFile))
    {
        inStream.Seek (offset, SeekOrigin.Begin);
        int bufferLength = buffer.Length, bytesRead;
        while (length > bufferLength && (bytesRead = inStream.Read (buffer, 0, bufferLength)) > 0) {
            outStream.Write (buffer, 0, bytesRead);
            length -= bytesRead;
        }
        while (length > 0 && (bytesRead = inStream.Read (buffer, 0, length)) > 0) {
            outStream.Write (buffer, 0, bytesRead);
            length -= bytesRead;
        }
    }
}
----------------------------------------

  private static void copy (string srcFile, string dstFile, int offset, int length, byte [] buffer) {
        using (FileStream fsRead = new FileStream(srcFile, FileMode.Open, FileAccess.Read))
        {
            using (FileStream fsWrite = new FileStream(dstFile, FileMode.Create, FileAccess.Write))
            {
                fsRead.Seek(offset, SeekOrigin.Begin);
                
                long nReadSize = 0;
                while (length > buffer.Length)
                {
                    fsRead.Read(buffer, 0, buffer.Length);
                    fsWrite.Write(buffer, 0, buffer.Length);
                    nReadSize += buffer.Length;
                    length -= buffer.Length;
                }
                fsRead.Read(buffer, 0, length);
                fsWrite.Write(buffer, 0, length);
                nReadSize += length; 
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
601
1
Gpt3D_Clone601_1.cs 1 16
Gpt3D_Clone601_1.cs 17 39
----------------------------------------

private static void copy (string srcFile, string dstFile, int offset, int length, byte [] buffer) {
    using (Stream inStream = File.OpenRead (srcFile))
    using (Stream outStream = File.OpenWrite (dstFile))
    {
        inStream.Seek (offset, SeekOrigin.Begin);
        int bufferLength = buffer.Length, bytesRead;
        while (length > bufferLength && (bytesRead = inStream.Read (buffer, 0, bufferLength)) > 0) {
            outStream.Write (buffer, 0, bytesRead);
            length -= bytesRead;
        }
        while (length > 0 && (bytesRead = inStream.Read (buffer, 0, length)) > 0) {
            outStream.Write (buffer, 0, bytesRead);
            length -= bytesRead;
        }
    }
}
----------------------------------------

  private static void copy (string srcFile, string dstFile, int offset, int length, byte [] buffer) {
        using (FileStream fsRead = new FileStream(srcFile, FileMode.Open, FileAccess.Read))
        {
            using (FileStream fsWrite = new FileStream(dstFile, FileMode.Create, FileAccess.Write))
            {
                fsRead.Seek(offset, SeekOrigin.Begin);
                
                long nReadSize = 0;
                while (length > buffer.Length)
                {
                    fsRead.Read(buffer, 0, buffer.Length);
                    fsWrite.Write(buffer, 0, buffer.Length);
                    nReadSize += buffer.Length;
                    length -= buffer.Length;
                }
                fsRead.Read(buffer, 0, length);
                fsWrite.Write(buffer, 0, length);
                nReadSize += length; 
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
601
2
Gpt3D_Clone601_2.cs 1 16
Gpt3D_Clone601_2.cs 17 38
----------------------------------------

private static void copy (string srcFile, string dstFile, int offset, int length, byte [] buffer) {
    using (Stream inStream = File.OpenRead (srcFile))
    using (Stream outStream = File.OpenWrite (dstFile))
    {
        inStream.Seek (offset, SeekOrigin.Begin);
        int bufferLength = buffer.Length, bytesRead;
        while (length > bufferLength && (bytesRead = inStream.Read (buffer, 0, bufferLength)) > 0) {
            outStream.Write (buffer, 0, bytesRead);
            length -= bytesRead;
        }
        while (length > 0 && (bytesRead = inStream.Read (buffer, 0, length)) > 0) {
            outStream.Write (buffer, 0, bytesRead);
            length -= bytesRead;
        }
    }
}
----------------------------------------

  private static void copy (string srcFile, string dstFile, int offset, int length, byte [] buffer)
{
    using (var fsIn = File.Open(srcFile, FileMode.Open))
    using (var fsOut = File.Open(dstFile, FileMode.CreateNew))
    {
        var position = 0;
        var bytesRead = 0;
        fsIn.Seek(offset, SeekOrigin.Begin);
        while (length > buffer.Length)
        {
            bytesRead = fsIn.Read(buffer, 0, buffer.Length);
            fsOut.Write(buffer, 0, buffer.Length);
            length -= bytesRead;
            position += bytesRead;
        }
        bytesRead = fsIn.Read(buffer, 0, length);
        fsOut.Write(buffer, 0, length);
        position += bytesRead;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
601
3
Gpt3D_Clone601_3.cs 1 16
Gpt3D_Clone601_3.cs 17 37
----------------------------------------

private static void copy (string srcFile, string dstFile, int offset, int length, byte [] buffer) {
    using (Stream inStream = File.OpenRead (srcFile))
    using (Stream outStream = File.OpenWrite (dstFile))
    {
        inStream.Seek (offset, SeekOrigin.Begin);
        int bufferLength = buffer.Length, bytesRead;
        while (length > bufferLength && (bytesRead = inStream.Read (buffer, 0, bufferLength)) > 0) {
            outStream.Write (buffer, 0, bytesRead);
            length -= bytesRead;
        }
        while (length > 0 && (bytesRead = inStream.Read (buffer, 0, length)) > 0) {
            outStream.Write (buffer, 0, bytesRead);
            length -= bytesRead;
        }
    }
}
----------------------------------------

  private static void copy (string srcFile, string dstFile, int offset, int length, byte [] buffer)
{
    using (FileStream fsIn = new FileStream(srcFile, FileMode.Open))
    using (FileStream fsOut = new FileStream(dstFile, FileMode.CreateNew))
    {
        fsIn.Seek(offset, SeekOrigin.Begin);
        
        int bytesToRead = (length > buffer.Length) ? buffer.Length : length;
        var readBytes = 0;
        do
        {
            readBytes = fsIn.Read(buffer, 0, bytesToRead);
            fsOut.Write(buffer, 0, readBytes);
            length -= readBytes;
            bytesToRead = (length > buffer.Length) ? buffer.Length : length;
        }
        while (length > 0);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
601
4
Gpt3D_Clone601_4.cs 1 16
Gpt3D_Clone601_4.cs 17 39
----------------------------------------

private static void copy (string srcFile, string dstFile, int offset, int length, byte [] buffer) {
    using (Stream inStream = File.OpenRead (srcFile))
    using (Stream outStream = File.OpenWrite (dstFile))
    {
        inStream.Seek (offset, SeekOrigin.Begin);
        int bufferLength = buffer.Length, bytesRead;
        while (length > bufferLength && (bytesRead = inStream.Read (buffer, 0, bufferLength)) > 0) {
            outStream.Write (buffer, 0, bytesRead);
            length -= bytesRead;
        }
        while (length > 0 && (bytesRead = inStream.Read (buffer, 0, length)) > 0) {
            outStream.Write (buffer, 0, bytesRead);
            length -= bytesRead;
        }
    }
}
----------------------------------------

  private static void copy (string srcFile, string dstFile, int offset, int length, byte [] buffer) {
        using (FileStream fsRead = new FileStream(srcFile, FileMode.Open, FileAccess.Read))
        {
            using (FileStream fsWrite = new FileStream(dstFile, FileMode.Create, FileAccess.Write))
            {
                fsRead.Seek(offset, SeekOrigin.Begin);
                
                long nReadSize = 0;
                while (length > buffer.Length)
                {
                    fsRead.Read(buffer, 0, buffer.Length);
                    fsWrite.Write(buffer, 0, buffer.Length);
                    nReadSize += buffer.Length;
                    length -= buffer.Length;
                }
                fsRead.Read(buffer, 0, length);
                fsWrite.Write(buffer, 0, length);
                nReadSize += length; 
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
601
5
Gpt3D_Clone601_5.cs 1 16
Gpt3D_Clone601_5.cs 17 38
----------------------------------------

private static void copy (string srcFile, string dstFile, int offset, int length, byte [] buffer) {
    using (Stream inStream = File.OpenRead (srcFile))
    using (Stream outStream = File.OpenWrite (dstFile))
    {
        inStream.Seek (offset, SeekOrigin.Begin);
        int bufferLength = buffer.Length, bytesRead;
        while (length > bufferLength && (bytesRead = inStream.Read (buffer, 0, bufferLength)) > 0) {
            outStream.Write (buffer, 0, bytesRead);
            length -= bytesRead;
        }
        while (length > 0 && (bytesRead = inStream.Read (buffer, 0, length)) > 0) {
            outStream.Write (buffer, 0, bytesRead);
            length -= bytesRead;
        }
    }
}
----------------------------------------

  private static void copy (string srcFile, string dstFile, int offset, int length, byte [] buffer)
{
    using (var inStream = File.OpenRead (srcFile))
    using (var outStream = File.OpenWrite (dstFile))
    {
        var offsetBufferLength = buffer.Length + offset;
        var reader = new BinaryReader(inStream);
        var writer = new BinaryWriter(outStream);
        reader.BaseStream.Seek(offset, SeekOrigin.Begin);
        while (length > 0)
        {
            var bytesToRead = (offsetBufferLength >length) ? length : offsetBufferLength;
            var data = reader.ReadBytes(bytesToRead);
            writer.Write(data);
            length -= bytesToRead;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
601
6
Gpt3D_Clone601_6.cs 1 16
Gpt3D_Clone601_6.cs 17 38
----------------------------------------

private static void copy (string srcFile, string dstFile, int offset, int length, byte [] buffer) {
    using (Stream inStream = File.OpenRead (srcFile))
    using (Stream outStream = File.OpenWrite (dstFile))
    {
        inStream.Seek (offset, SeekOrigin.Begin);
        int bufferLength = buffer.Length, bytesRead;
        while (length > bufferLength && (bytesRead = inStream.Read (buffer, 0, bufferLength)) > 0) {
            outStream.Write (buffer, 0, bytesRead);
            length -= bytesRead;
        }
        while (length > 0 && (bytesRead = inStream.Read (buffer, 0, length)) > 0) {
            outStream.Write (buffer, 0, bytesRead);
            length -= bytesRead;
        }
    }
}
----------------------------------------

 private static void copy (string srcFile, string dstFile, int offset, int length, byte [] buffer) 
{
    using (var inStream = File.OpenRead(srcFile))
    using (var outStream = File.OpenWrite(dstFile))
    {
        inStream.Seek(offset, SeekOrigin.Begin);
        
        var getBytes = new byte[length];
        int byteNum = 0;
        byteNum = inStream.Read(buffer, 0, buffer.Length);
        
        outStream.Write(buffer, 0, byteNum);
        
        while (byteNum < length)
        {
            byteNum += inStream.Read(getBytes, 0, length - byteNum);
            outStream.Write(buffer, 0, byteNum);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
601
7
Gpt3D_Clone601_7.cs 1 16
Gpt3D_Clone601_7.cs 17 36
----------------------------------------

private static void copy (string srcFile, string dstFile, int offset, int length, byte [] buffer) {
    using (Stream inStream = File.OpenRead (srcFile))
    using (Stream outStream = File.OpenWrite (dstFile))
    {
        inStream.Seek (offset, SeekOrigin.Begin);
        int bufferLength = buffer.Length, bytesRead;
        while (length > bufferLength && (bytesRead = inStream.Read (buffer, 0, bufferLength)) > 0) {
            outStream.Write (buffer, 0, bytesRead);
            length -= bytesRead;
        }
        while (length > 0 && (bytesRead = inStream.Read (buffer, 0, length)) > 0) {
            outStream.Write (buffer, 0, bytesRead);
            length -= bytesRead;
        }
    }
}
----------------------------------------

private static void copy (string srcFile, string dstFile, int offset, int length, byte [] buffer) 
{
    using (FileStream fsIn = new FileStream(srcFile, FileMode.Open))
    using (FileStream fsOut = new FileStream(dstFile, FileMode.CreateNew))
    {
        fsIn.Seek(offset, SeekOrigin.Begin);
        
        while (length > 0)
        {
            int readBytes = fsIn.Read(buffer, 0, Math.Min(buffer.Length, length));
            if (readBytes == 0)
                break;
            
            fsOut.Write(buffer, 0, readBytes);
            length -= readBytes;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
601
8
Gpt3D_Clone601_8.cs 1 16
Gpt3D_Clone601_8.cs 17 35
----------------------------------------

private static void copy (string srcFile, string dstFile, int offset, int length, byte [] buffer) {
    using (Stream inStream = File.OpenRead (srcFile))
    using (Stream outStream = File.OpenWrite (dstFile))
    {
        inStream.Seek (offset, SeekOrigin.Begin);
        int bufferLength = buffer.Length, bytesRead;
        while (length > bufferLength && (bytesRead = inStream.Read (buffer, 0, bufferLength)) > 0) {
            outStream.Write (buffer, 0, bytesRead);
            length -= bytesRead;
        }
        while (length > 0 && (bytesRead = inStream.Read (buffer, 0, length)) > 0) {
            outStream.Write (buffer, 0, bytesRead);
            length -= bytesRead;
        }
    }
}
----------------------------------------

  private static void copy (string srcFile, string dstFile, int offset, int length, byte [] buffer) 
{
    using (FileStream fsIn = new FileStream(srcFile, FileMode.Open))
    using (FileStream fsOut = new FileStream(dstFile, FileMode.CreateNew))
    {
        
        fsIn.Seek(offset, SeekOrigin.Begin);
        
        var bytesRead = 0;
        for (int i = 0; i < length; i++)
        {
            bytesRead = fsIn.Read(buffer, 0, buffer.Length);
            fsOut.Write(buffer, 0, bytesRead);
            length -= bytesRead;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
601
9
Gpt3D_Clone601_9.cs 1 16
Gpt3D_Clone601_9.cs 17 29
----------------------------------------

private static void copy (string srcFile, string dstFile, int offset, int length, byte [] buffer) {
    using (Stream inStream = File.OpenRead (srcFile))
    using (Stream outStream = File.OpenWrite (dstFile))
    {
        inStream.Seek (offset, SeekOrigin.Begin);
        int bufferLength = buffer.Length, bytesRead;
        while (length > bufferLength && (bytesRead = inStream.Read (buffer, 0, bufferLength)) > 0) {
            outStream.Write (buffer, 0, bytesRead);
            length -= bytesRead;
        }
        while (length > 0 && (bytesRead = inStream.Read (buffer, 0, length)) > 0) {
            outStream.Write (buffer, 0, bytesRead);
            length -= bytesRead;
        }
    }
}
----------------------------------------

  private static void copy (string srcFile, string dstFile, int offset, int length, byte [] buffer) 
{
    using (var inStream = new FileStream(srcFile, FileMode.Open, FileAccess.Read))
    using (var outStream = new FileStream(dstFile, FileMode.OpenOrCreate, FileAccess.Write))
    {
        var br = new BinaryReader(inStream);
        br.BaseStream.Seek(offset, SeekOrigin.Begin);
        var data = br.ReadBytes(length);
        outStream.Write(data, 0, length); 
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
602
0
Gpt3D_Clone602_0.cs 1 9
Gpt3D_Clone602_0.cs 10 31
----------------------------------------

public static long fibo_n (long N) {
    if (N <= 0)
        return 0;
    if (N == 1)
        return 1;
    if (N <= 4)
        return N - 1;
    return fibo_n (N - 1) + fibo_n (N - 2);
}
----------------------------------------

 public static long fibo_n (long N) {
    if (N <= 0)
        return 0;
    if (N == 1)
        return 1;
    if (N <= 4)
        return N - 1;
    
    long a = 0;
    long b = 1;
    long c = 0;
 
    for (int i = 2; i <= N; i++)
    {
        c = a + b;
        a = b;
        b = c;
    }
    return c;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
602
1
Gpt3D_Clone602_1.cs 1 9
Gpt3D_Clone602_1.cs 10 30
----------------------------------------

public static long fibo_n (long N) {
    if (N <= 0)
        return 0;
    if (N == 1)
        return 1;
    if (N <= 4)
        return N - 1;
    return fibo_n (N - 1) + fibo_n (N - 2);
}
----------------------------------------

 public static long fibo_n (long N) {
    if (N == 0)
        return 0;
 
    if (N == 1)
        return 1;
 
    long prevprev = 0;
    long prev = 1;
    long current = 0;
 
    for (long i = 2; i <= N; i++)
    {
        current = prev + prevprev;
        prevprev = prev;
        prev = current;
    }
    return current;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
602
2
Gpt3D_Clone602_2.cs 1 9
Gpt3D_Clone602_2.cs 10 27
----------------------------------------

public static long fibo_n (long N) {
    if (N <= 0)
        return 0;
    if (N == 1)
        return 1;
    if (N <= 4)
        return N - 1;
    return fibo_n (N - 1) + fibo_n (N - 2);
}
----------------------------------------

 public static long fibo_n (long N) {
    long a = 0;
    long b = 1;
    long c;
    if (N <= 0)
        return 0;
    for (long i = 0; i < N-1; i++)
    {
        c = a + b;
        b = a;
        a = c;
    }
    return b;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
602
3
Gpt3D_Clone602_3.cs 1 9
Gpt3D_Clone602_3.cs 10 27
----------------------------------------

public static long fibo_n (long N) {
    if (N <= 0)
        return 0;
    if (N == 1)
        return 1;
    if (N <= 4)
        return N - 1;
    return fibo_n (N - 1) + fibo_n (N - 2);
}
----------------------------------------

  public static long fibo_n (long N) {
    long a = 0;
    long b = 1;
    long c;
    if (N <= 0)
        return 0;
 
    for (long i = 2; i <= N; i++)
    {
        c = a + b;
        a = b;
        b = c;
    }
    return b;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
602
4
Gpt3D_Clone602_4.cs 1 9
Gpt3D_Clone602_4.cs 10 27
----------------------------------------

public static long fibo_n (long N) {
    if (N <= 0)
        return 0;
    if (N == 1)
        return 1;
    if (N <= 4)
        return N - 1;
    return fibo_n (N - 1) + fibo_n (N - 2);
}
----------------------------------------

 public static long fibo_n (long N) {
    long a = 0;
    long b = 1;
    long c;
    if (N <= 0)
        return 0;
    for (long i = 0; i < N-1; i++)
    {
        c = a + b;
        a = b;
        b = c;
    }
    return b;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
602
5
Gpt3D_Clone602_5.cs 1 9
Gpt3D_Clone602_5.cs 10 27
----------------------------------------

public static long fibo_n (long N) {
    if (N <= 0)
        return 0;
    if (N == 1)
        return 1;
    if (N <= 4)
        return N - 1;
    return fibo_n (N - 1) + fibo_n (N - 2);
}
----------------------------------------

 public static long fibo_n (long N) {
    long f0 = 0;
    long f1 = 1;
    long f2 = 0;
    if (N == 0)
        return 0;
    for (long i = 1; i < N; i++)
    {
        f2 = f0 + f1;
        f0 = f1;
        f1 = f2;
    }
    return f2;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
602
6
Gpt3D_Clone602_6.cs 1 9
Gpt3D_Clone602_6.cs 10 26
----------------------------------------

public static long fibo_n (long N) {
    if (N <= 0)
        return 0;
    if (N == 1)
        return 1;
    if (N <= 4)
        return N - 1;
    return fibo_n (N - 1) + fibo_n (N - 2);
}
----------------------------------------

 public static long fibo_n (long N) {
    long f1 = 0;
    long f2 = 1;
 
    if (N == 0)
        return 0;
 
    for (long i = 2; i <= N; i++)
    {
        long f = f1 + f2;
        f1 = f2;
        f2 = f;
    }
    return f2;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
602
7
Gpt3D_Clone602_7.cs 1 9
Gpt3D_Clone602_7.cs 10 26
----------------------------------------

public static long fibo_n (long N) {
    if (N <= 0)
        return 0;
    if (N == 1)
        return 1;
    if (N <= 4)
        return N - 1;
    return fibo_n (N - 1) + fibo_n (N - 2);
}
----------------------------------------

 public static long fibo_n (long N) {
    if (N == 0)
        return 0;
    long[] fib = new long[(int) N];
    fib[0] = 0;
    fib[1] = 1;
 
    for (int i = 2; i < N; i++)
    {
        fib[i] = fib[i - 1] + fib[i - 2];
    }
    return fib[(int) N - 1];
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
602
8
Gpt3D_Clone602_8.cs 1 9
Gpt3D_Clone602_8.cs 10 26
----------------------------------------

public static long fibo_n (long N) {
    if (N <= 0)
        return 0;
    if (N == 1)
        return 1;
    if (N <= 4)
        return N - 1;
    return fibo_n (N - 1) + fibo_n (N - 2);
}
----------------------------------------

 public static long fibo_n (long N) {
    if (N <= 0)
        return 0;
    long[] fib = new long[(int) N + 1];
    fib[0] = 0;
    fib[1] = 1;
    for (int i = 2; i <= N; i++)
    {
        fib[i] = fib[i - 2] + fib[i - 1];
    }
    return fib[(int) N];
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
602
9
Gpt3D_Clone602_9.cs 1 9
Gpt3D_Clone602_9.cs 10 25
----------------------------------------

public static long fibo_n (long N) {
    if (N <= 0)
        return 0;
    if (N == 1)
        return 1;
    if (N <= 4)
        return N - 1;
    return fibo_n (N - 1) + fibo_n (N - 2);
}
----------------------------------------

 public static long fibo_n (long N) {
    long[] f = new long[(int) N + 1];
    f[1] = 1;
  
    if (N <= 0)
        return 0;
 
    for (int i = 2; i <= N; i++)
    {
        f[i] = f[i - 1] + f[i - 2];
    }
    return f[(int) N];
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
603
0
Gpt3D_Clone603_0.cs 1 16
Gpt3D_Clone603_0.cs 17 38
----------------------------------------

private void CheckIfPalindrome (string str) {
    char [] array = str.ToCharArray ();
    int length = array.Length - 1;
    Boolean palindrome = true;
    for (int i = 0; i <= length; i ++) {
        if (array [i] != array [length]) {
            MessageBox.Show ("not");
            palindrome = false;
            break;
        } else {
            length --;
        }
    }
    if (palindrome)
        MessageBox.Show ("Palindrome");
}
----------------------------------------

 private void CheckIfPalindrome (string str) {
    int leftInd, rightInd; 
    bool isPalindrome = true; 
    leftInd = 0 ; 
    rightInd = str.Length - 1; 
    while (leftInd < rightInd) 
    {
        if (str[leftInd] != str[rightInd]) {
            MessageBox.Show("not");
            isPalindrome = false; 
            break; 
        } 
        ++leftInd; 
        --rightInd; 
    } 
  
    if(isPalindrome)
        MessageBox.Show("Palindrome");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
603
1
Gpt3D_Clone603_1.cs 1 16
Gpt3D_Clone603_1.cs 17 37
----------------------------------------

private void CheckIfPalindrome (string str) {
    char [] array = str.ToCharArray ();
    int length = array.Length - 1;
    Boolean palindrome = true;
    for (int i = 0; i <= length; i ++) {
        if (array [i] != array [length]) {
            MessageBox.Show ("not");
            palindrome = false;
            break;
        } else {
            length --;
        }
    }
    if (palindrome)
        MessageBox.Show ("Palindrome");
}
----------------------------------------

 private void CheckIfPalindrome (string str) {
    Boolean palindrome = true;
    int i = 0;
    int len = str.Length - 1;
    while (i < len && palindrome) {
        if (str[i] != str[len]) {
            palindrome = false;
        }
        i++;
        len--;
    }
 
    if (palindrome) {
        MessageBox.Show("Palindrome");
    } else {
        MessageBox.Show("not");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
603
2
Gpt3D_Clone603_2.cs 1 16
Gpt3D_Clone603_2.cs 17 34
----------------------------------------

private void CheckIfPalindrome (string str) {
    char [] array = str.ToCharArray ();
    int length = array.Length - 1;
    Boolean palindrome = true;
    for (int i = 0; i <= length; i ++) {
        if (array [i] != array [length]) {
            MessageBox.Show ("not");
            palindrome = false;
            break;
        } else {
            length --;
        }
    }
    if (palindrome)
        MessageBox.Show ("Palindrome");
}
----------------------------------------

 private void CheckIfPalindrome (string str) {
    int length = str.Length;
    bool palindrome = true;
    for (int i = 0; i < length; i++) {
        if (str[i] != str[length -1 - i]) {
            palindrome = false;
            break;
        }
    }
    if (palindrome) {
        MessageBox.Show("Palindrome");
    }
    else {
        MessageBox.Show("not");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
603
4
Gpt3D_Clone603_4.cs 1 16
Gpt3D_Clone603_4.cs 17 33
----------------------------------------

private void CheckIfPalindrome (string str) {
    char [] array = str.ToCharArray ();
    int length = array.Length - 1;
    Boolean palindrome = true;
    for (int i = 0; i <= length; i ++) {
        if (array [i] != array [length]) {
            MessageBox.Show ("not");
            palindrome = false;
            break;
        } else {
            length --;
        }
    }
    if (palindrome)
        MessageBox.Show ("Palindrome");
}
----------------------------------------

 private void CheckIfPalindrome (string str) {
    int left = 0;
    int right = str.Length - 1;
    while (left < right) {
        if (str[left] != str[right]) {
            MessageBox.Show("not");
            return;
        }
        left ++;
        right --;
    }
 
    MessageBox.Show("Palindrome");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
603
5
Gpt3D_Clone603_5.cs 1 16
Gpt3D_Clone603_5.cs 17 29
----------------------------------------

private void CheckIfPalindrome (string str) {
    char [] array = str.ToCharArray ();
    int length = array.Length - 1;
    Boolean palindrome = true;
    for (int i = 0; i <= length; i ++) {
        if (array [i] != array [length]) {
            MessageBox.Show ("not");
            palindrome = false;
            break;
        } else {
            length --;
        }
    }
    if (palindrome)
        MessageBox.Show ("Palindrome");
}
----------------------------------------

 private void CheckIfPalindrome (string str) {
    int j = str.Length - 1;
    for (int i = 0; i < j; i++) {
        if (str[i] != str[j]) {
            MessageBox.Show("not");
            return; 
        }
        j--;
    }
    MessageBox.Show("Palindrome");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
603
6
Gpt3D_Clone603_6.cs 1 16
Gpt3D_Clone603_6.cs 17 29
----------------------------------------

private void CheckIfPalindrome (string str) {
    char [] array = str.ToCharArray ();
    int length = array.Length - 1;
    Boolean palindrome = true;
    for (int i = 0; i <= length; i ++) {
        if (array [i] != array [length]) {
            MessageBox.Show ("not");
            palindrome = false;
            break;
        } else {
            length --;
        }
    }
    if (palindrome)
        MessageBox.Show ("Palindrome");
}
----------------------------------------

 private void CheckIfPalindrome (string str) {
    char[] reversedArray = str.Reverse().ToArray();
    string reversedString =  new string(reversedArray);
    if (str.Equals(reversedString)) {
        MessageBox.Show("Palindrome");
    }
    else {
        MessageBox.Show("not");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
603
7
Gpt3D_Clone603_7.cs 1 16
Gpt3D_Clone603_7.cs 17 28
----------------------------------------

private void CheckIfPalindrome (string str) {
    char [] array = str.ToCharArray ();
    int length = array.Length - 1;
    Boolean palindrome = true;
    for (int i = 0; i <= length; i ++) {
        if (array [i] != array [length]) {
            MessageBox.Show ("not");
            palindrome = false;
            break;
        } else {
            length --;
        }
    }
    if (palindrome)
        MessageBox.Show ("Palindrome");
}
----------------------------------------

 private void CheckIfPalindrome (string str) {
    string reversedString = new string(str.ToCharArray().Reverse().ToArray()); 
    if (str.Equals(reversedString)) {
        MessageBox.Show("Palindrome");
    }
    else {
        MessageBox.Show("not");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
603
8
Gpt3D_Clone603_8.cs 1 16
Gpt3D_Clone603_8.cs 17 25
----------------------------------------

private void CheckIfPalindrome (string str) {
    char [] array = str.ToCharArray ();
    int length = array.Length - 1;
    Boolean palindrome = true;
    for (int i = 0; i <= length; i ++) {
        if (array [i] != array [length]) {
            MessageBox.Show ("not");
            palindrome = false;
            break;
        } else {
            length --;
        }
    }
    if (palindrome)
        MessageBox.Show ("Palindrome");
}
----------------------------------------

 private void CheckIfPalindrome (string str) {
    string reversed = new string (str.ToCharArray ().Reverse ().ToArray ());
    if (str == reversed)
        MessageBox.Show("Palindrome");
    else
        MessageBox.Show("not");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
603
9
Gpt3D_Clone603_9.cs 1 16
Gpt3D_Clone603_9.cs 17 27
----------------------------------------

private void CheckIfPalindrome (string str) {
    char [] array = str.ToCharArray ();
    int length = array.Length - 1;
    Boolean palindrome = true;
    for (int i = 0; i <= length; i ++) {
        if (array [i] != array [length]) {
            MessageBox.Show ("not");
            palindrome = false;
            break;
        } else {
            length --;
        }
    }
    if (palindrome)
        MessageBox.Show ("Palindrome");
}
----------------------------------------

 private void CheckIfPalindrome (string str) {
    for (int i = 0; i < str.Length; i++) {
        if (str[i] != str[str.Length -1 - i]) {
            MessageBox.Show("not");
            return; 
        }
    }
    MessageBox.Show("Palindrome");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
604
8
Gpt3D_Clone604_8.cs 1 11
Gpt3D_Clone604_8.cs 12 22
----------------------------------------

[HttpPost] public ActionResult Create () {
    string jsonPostData;
    using (var stream = Request.InputStream)
    {
        stream.Position = 0;
        using (var reader = new System.IO.StreamReader (stream))
        {
            jsonPostData = reader.ReadToEnd ();
        }} var foo = Newtonsoft.Json.JsonConvert.DeserializeObject < IDictionary < string, object > > (jsonPostData) ["foo"];
    return Json (new {success = true});
}
----------------------------------------

	[HttpPost] 
public ActionResult Create(){
    var jsonData = Request.InputStream.ParseJsonStringFromStream();
       
    var deserializedObject = JsonConvert.DeserializeObject<dynamic>(jsonData);
    var foo = deserializedObject.foo;
   
    return Json(new { success = true});
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
604
9
Gpt3D_Clone604_9.cs 1 11
Gpt3D_Clone604_9.cs 12 20
----------------------------------------

[HttpPost] public ActionResult Create () {
    string jsonPostData;
    using (var stream = Request.InputStream)
    {
        stream.Position = 0;
        using (var reader = new System.IO.StreamReader (stream))
        {
            jsonPostData = reader.ReadToEnd ();
        }} var foo = Newtonsoft.Json.JsonConvert.DeserializeObject < IDictionary < string, object > > (jsonPostData) ["foo"];
    return Json (new {success = true});
}
----------------------------------------

	[HttpPost] 
public ActionResult Create(){
    var jsonData = Request.InputStream.ReadToEnd();
    var deserializedObject = JsonConvert.DeserializeObject<dynamic>(jsonData);
    var foo = deserializedObject.foo;
    return Json(new {success = true});
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
60
0
Gpt3D_Clone60_0.cs 1 8
Gpt3D_Clone60_0.cs 9 19
----------------------------------------

private void dateTimePicker1_ValueChanged (object sender, EventArgs e) {
    if (this.dateTimePicker1.Value.Minute % 5 == 0)
        return;
    if (this.dateTimePicker1.Value.Minute % 5 == 1)
        this.dateTimePicker1.Value = this.dateTimePicker1.Value.AddMinutes (4);
    if (this.dateTimePicker1.Value.Minute % 5 == 4)
        this.dateTimePicker1.Value = this.dateTimePicker1.Value.AddMinutes (- 4);
}
----------------------------------------

 private void dateTimePicker1_ValueChanged (object sender, EventArgs e) {
    int remainderVal = this.dateTimePicker1.Value.Minute % 5;
    if (remainderVal == 0)
        this.dateTimePicker1.Value = this.dateTimePicker1.Value;
    if (remainderVal == 1)
        this.dateTimePicker1.Value = this.dateTimePicker1.Value.AddMinutes (4);
    if (remainderVal == 4)
        this.dateTimePicker1.Value = this.dateTimePicker1.Value.AddMinutes (- 4);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
60
1
Gpt3D_Clone60_1.cs 1 8
Gpt3D_Clone60_1.cs 9 19
----------------------------------------

private void dateTimePicker1_ValueChanged (object sender, EventArgs e) {
    if (this.dateTimePicker1.Value.Minute % 5 == 0)
        return;
    if (this.dateTimePicker1.Value.Minute % 5 == 1)
        this.dateTimePicker1.Value = this.dateTimePicker1.Value.AddMinutes (4);
    if (this.dateTimePicker1.Value.Minute % 5 == 4)
        this.dateTimePicker1.Value = this.dateTimePicker1.Value.AddMinutes (- 4);
}
----------------------------------------

 private void dateTimePicker1_ValueChanged (object sender, EventArgs e) {
    int remainderVal = this.dateTimePicker1.Value.Minute % 5;
    if (remainderVal == 0)
        this.dateTimePicker1.Value = this.dateTimePicker1.Value;
    else if (remainderVal == 1)
        this.dateTimePicker1.Value = this.dateTimePicker1.Value.AddMinutes (4);
    else if (remainderVal == 4)
        this.dateTimePicker1.Value = this.dateTimePicker1.Value.AddMinutes (- 4);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
60
2
Gpt3D_Clone60_2.cs 1 8
Gpt3D_Clone60_2.cs 9 19
----------------------------------------

private void dateTimePicker1_ValueChanged (object sender, EventArgs e) {
    if (this.dateTimePicker1.Value.Minute % 5 == 0)
        return;
    if (this.dateTimePicker1.Value.Minute % 5 == 1)
        this.dateTimePicker1.Value = this.dateTimePicker1.Value.AddMinutes (4);
    if (this.dateTimePicker1.Value.Minute % 5 == 4)
        this.dateTimePicker1.Value = this.dateTimePicker1.Value.AddMinutes (- 4);
}
----------------------------------------

 private void dateTimePicker1_ValueChanged (object sender, EventArgs e) {
    int remainderVal = this.dateTimePicker1.Value.Minute;
    if (remainderVal % 5 == 1)
        this.dateTimePicker1.Value = this.dateTimePicker1.Value.AddMinutes (- 4);
    else if (remainderVal % 5 == 4)
        this.dateTimePicker1.Value = this.dateTimePicker1.Value.AddMinutes (4);
    else
        return;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
60
3
Gpt3D_Clone60_3.cs 1 8
Gpt3D_Clone60_3.cs 9 19
----------------------------------------

private void dateTimePicker1_ValueChanged (object sender, EventArgs e) {
    if (this.dateTimePicker1.Value.Minute % 5 == 0)
        return;
    if (this.dateTimePicker1.Value.Minute % 5 == 1)
        this.dateTimePicker1.Value = this.dateTimePicker1.Value.AddMinutes (4);
    if (this.dateTimePicker1.Value.Minute % 5 == 4)
        this.dateTimePicker1.Value = this.dateTimePicker1.Value.AddMinutes (- 4);
}
----------------------------------------

 private void dateTimePicker1_ValueChanged (object sender, EventArgs e) {
    int remainderVal = this.dateTimePicker1.Value.Minute % 5;
    if (remainderVal == 0)
        return;
    if (remainderVal == 1)
        this.dateTimePicker1.Value = this.dateTimePicker1.Value.AddMinutes (- 4);
    if (remainderVal == 4)
        this.dateTimePicker1.Value = this.dateTimePicker1.Value.AddMinutes (4);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
60
4
Gpt3D_Clone60_4.cs 1 8
Gpt3D_Clone60_4.cs 9 19
----------------------------------------

private void dateTimePicker1_ValueChanged (object sender, EventArgs e) {
    if (this.dateTimePicker1.Value.Minute % 5 == 0)
        return;
    if (this.dateTimePicker1.Value.Minute % 5 == 1)
        this.dateTimePicker1.Value = this.dateTimePicker1.Value.AddMinutes (4);
    if (this.dateTimePicker1.Value.Minute % 5 == 4)
        this.dateTimePicker1.Value = this.dateTimePicker1.Value.AddMinutes (- 4);
}
----------------------------------------

 private void dateTimePicker1_ValueChanged (object sender, EventArgs e) {
    int remainderVal = this.dateTimePicker1.Value.Minute % 5;
    if (remainderVal == 0)
        return;
    if (remainderVal == 1)
        this.dateTimePicker1.Value = this.dateTimePicker1.Value.Subtract(TimeSpan.FromMinutes(4));
    if (remainderVal == 4)
        this.dateTimePicker1.Value = this.dateTimePicker1.Value.Add (TimeSpan.FromMinutes(4));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
60
5
Gpt3D_Clone60_5.cs 1 8
Gpt3D_Clone60_5.cs 9 20
----------------------------------------

private void dateTimePicker1_ValueChanged (object sender, EventArgs e) {
    if (this.dateTimePicker1.Value.Minute % 5 == 0)
        return;
    if (this.dateTimePicker1.Value.Minute % 5 == 1)
        this.dateTimePicker1.Value = this.dateTimePicker1.Value.AddMinutes (4);
    if (this.dateTimePicker1.Value.Minute % 5 == 4)
        this.dateTimePicker1.Value = this.dateTimePicker1.Value.AddMinutes (- 4);
}
----------------------------------------

 private void dateTimePicker1_ValueChanged (object sender, EventArgs e) {
    int remainderVal = this.dateTimePicker1.Value.Minute % 5;
    if (remainderVal != 0)
    {
      if (remainderVal == 1)
        this.dateTimePicker1.Value = this.dateTimePicker1.Value.AddMinutes (- 4);
      else
        this.dateTimePicker1.Value = this.dateTimePicker1.Value.AddMinutes (4);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
60
6
Gpt3D_Clone60_6.cs 1 8
Gpt3D_Clone60_6.cs 9 20
----------------------------------------

private void dateTimePicker1_ValueChanged (object sender, EventArgs e) {
    if (this.dateTimePicker1.Value.Minute % 5 == 0)
        return;
    if (this.dateTimePicker1.Value.Minute % 5 == 1)
        this.dateTimePicker1.Value = this.dateTimePicker1.Value.AddMinutes (4);
    if (this.dateTimePicker1.Value.Minute % 5 == 4)
        this.dateTimePicker1.Value = this.dateTimePicker1.Value.AddMinutes (- 4);
}
----------------------------------------

 private void dateTimePicker1_ValueChanged (object sender, EventArgs e) {
    int remainderVal = this.dateTimePicker1.Value.Minute;
    if (remainderVal % 5 != 0)
    {
      if (remainderVal % 5 == 1)
        this.dateTimePicker1.Value = this.dateTimePicker1.Value.AddMinutes (- 4);
      else
        this.dateTimePicker1.Value = this.dateTimePicker1.Value.AddMinutes (4);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
60
8
Gpt3D_Clone60_8.cs 1 8
Gpt3D_Clone60_8.cs 9 19
----------------------------------------

private void dateTimePicker1_ValueChanged (object sender, EventArgs e) {
    if (this.dateTimePicker1.Value.Minute % 5 == 0)
        return;
    if (this.dateTimePicker1.Value.Minute % 5 == 1)
        this.dateTimePicker1.Value = this.dateTimePicker1.Value.AddMinutes (4);
    if (this.dateTimePicker1.Value.Minute % 5 == 4)
        this.dateTimePicker1.Value = this.dateTimePicker1.Value.AddMinutes (- 4);
}
----------------------------------------

 private void dateTimePicker1_ValueChanged (object sender, EventArgs e) {
    if (this.dateTimePicker1.Value.Minute % 5 != 0)
    {
      if (this.dateTimePicker1.Value.Minute % 5 == 1)
        this.dateTimePicker1.Value = this.dateTimePicker1.Value.AddMinutes (- 4);
      else
        this.dateTimePicker1.Value = this.dateTimePicker1.Value.AddMinutes (4);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
612
0
Gpt3D_Clone612_0.cs 1 28
Gpt3D_Clone612_0.cs 29 86
----------------------------------------

private bool uploadImage (ref Bitmap p) {
    SqlConnection con = new SqlConnection ();
    con.ConnectionString = Configuration.ConfigurationManager.ConnectionStrings ("ConnStringHere").ConnectionString;
    SqlCommand cmd = new SqlCommand ();
    cmd.CommandText = "INSERT INTO Table_Name (File2) VALUES (@File2)";
    cmd.CommandType = CommandType.Text;
    cmd.Connection = con;
    SqlParameter File1 = new SqlParameter ("@File2", SqlDbType.Image);
    MemoryStream ms = new MemoryStream ();
    using (Bitmap tempImage = new Bitmap (p))
    {
        tempImage.Save (ms, p.RawFormat);
    } byte [] data = ms.GetBuffer ();
    if (! isValidImage (data)) {
        return false;
    }
    File1.Value = data;
    cmd.Parameters.Add (File1);
    con.Open ();
    int result = cmd.ExecuteNonQuery ();
    if (result > 0) {
        con.Close ();
        return true;
    } else {
        con.Close ();
        return false;
    }
}
----------------------------------------

 private bool UploadImage (ref Bitmap p) 
        { 
            SqlConnection con = new SqlConnection (Configuration.ConfigurationManager.ConnectionStrings ("ConnStringHere").ConnectionString); 
            con.Open (); 
            string query = "INSERT INTO Table_Name (File2) VALUES (@File2)"; 
            SqlCommand cmd = new SqlCommand(query, con); 
            MemoryStream memoryStream = new MemoryStream(); 
            Bitmap tempImage = new Bitmap(p); 
            tempImage.Save(memoryStream, p.RawFormat); 
            byte[] data = memoryStream.GetBuffer(); 
            if (!isValidImage(data)) 
            return false; 
            cmd.Parameters.Add("@File2", SqlDbType.Image).Value = data; 
            int result = cmd.ExecuteNonQuery(); 
            con.Close (); 
            return result > 0; 
        } 
    
 private bool uploadImage (ref Bitmap p) 
        { 
            String connStr = Configuration.ConfigurationManager.ConnectionStrings("ConnStringHere").ConnectionString; 
            SqlConnection connection = new SqlConnection(connStr); 
            connection.Open(); 
            String queryStr = "INSERT INTO Table_Name (File2) VALUES (@File2)"; 
            SqlCommand command = new SqlCommand(queryStr, connection); 
            MemoryStream memStream = new MemoryStream(); 
            Bitmap tempImg = new Bitmap(p); 
            tempImg.Save(memStream, p.RawFormat); 
            byte[] data = memStream.GetBuffer();     
            if(!isValidImage(data)) 
                return false; 
            command.Parameters.Add("@File2", SqlDbType.Image).Value = data; 
            int result = command.ExecuteNonQuery(); 
            connection.Close();     
            return result > 0; 
        } 
 private bool uploadImage (ref Bitmap p) {
    using (SqlConnection con = new SqlConnection (Configuration.ConfigurationManager.ConnectionStrings ("ConnStringHere").ConnectionString)) {
        con.Open ();
        string query = "INSERT INTO Table_Name (File2) VALUES (@File2)";
        using (SqlCommand cmd = new SqlCommand (query, con)) {
            MemoryStream ms = new MemoryStream ();
            using (Bitmap tempImage = new Bitmap (p)) {
                tempImage.Save (ms, p.RawFormat);
            }
            byte[] data = ms.GetBuffer ();
            if (! isValidImage (data)) {
                return false;
            }
            cmd.Parameters.Add ("@File2", SqlDbType.Image).Value = data;
            int result = cmd.ExecuteNonQuery ();
            return result > 0;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
612
1
Gpt3D_Clone612_1.cs 1 28
Gpt3D_Clone612_1.cs 29 50
----------------------------------------

private bool uploadImage (ref Bitmap p) {
    SqlConnection con = new SqlConnection ();
    con.ConnectionString = Configuration.ConfigurationManager.ConnectionStrings ("ConnStringHere").ConnectionString;
    SqlCommand cmd = new SqlCommand ();
    cmd.CommandText = "INSERT INTO Table_Name (File2) VALUES (@File2)";
    cmd.CommandType = CommandType.Text;
    cmd.Connection = con;
    SqlParameter File1 = new SqlParameter ("@File2", SqlDbType.Image);
    MemoryStream ms = new MemoryStream ();
    using (Bitmap tempImage = new Bitmap (p))
    {
        tempImage.Save (ms, p.RawFormat);
    } byte [] data = ms.GetBuffer ();
    if (! isValidImage (data)) {
        return false;
    }
    File1.Value = data;
    cmd.Parameters.Add (File1);
    con.Open ();
    int result = cmd.ExecuteNonQuery ();
    if (result > 0) {
        con.Close ();
        return true;
    } else {
        con.Close ();
        return false;
    }
}
----------------------------------------

 private bool uploadImage (ref Bitmap p) {
    SqlConnection con = new SqlConnection (Configuration.ConfigurationManager.ConnectionStrings ("ConnStringHere").ConnectionString);
    con.Open ();
    string sql = "INSERT INTO Table_Name (File2) VALUES (@File2)";
    SqlCommand cmd = new SqlCommand (sql, con);
    MemoryStream ms = new MemoryStream ();
    using (Bitmap tempImage = new Bitmap (p))
    {
        tempImage.Save (ms, p.RawFormat);
    }
    byte [] data = ms.GetBuffer ();
    if (! isValidImage (data))
    {
        return false;
    }
    cmd.Parameters.Add ("@File2", SqlDbType.Image).Value = data;
    int result = cmd.ExecuteNonQuery ();
    con.Close ();
    return result > 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
612
2
Gpt3D_Clone612_2.cs 1 28
Gpt3D_Clone612_2.cs 29 48
----------------------------------------

private bool uploadImage (ref Bitmap p) {
    SqlConnection con = new SqlConnection ();
    con.ConnectionString = Configuration.ConfigurationManager.ConnectionStrings ("ConnStringHere").ConnectionString;
    SqlCommand cmd = new SqlCommand ();
    cmd.CommandText = "INSERT INTO Table_Name (File2) VALUES (@File2)";
    cmd.CommandType = CommandType.Text;
    cmd.Connection = con;
    SqlParameter File1 = new SqlParameter ("@File2", SqlDbType.Image);
    MemoryStream ms = new MemoryStream ();
    using (Bitmap tempImage = new Bitmap (p))
    {
        tempImage.Save (ms, p.RawFormat);
    } byte [] data = ms.GetBuffer ();
    if (! isValidImage (data)) {
        return false;
    }
    File1.Value = data;
    cmd.Parameters.Add (File1);
    con.Open ();
    int result = cmd.ExecuteNonQuery ();
    if (result > 0) {
        con.Close ();
        return true;
    } else {
        con.Close ();
        return false;
    }
}
----------------------------------------

 private bool uploadImage (ref Bitmap p) {
    var conStr = Configuration.ConfigurationManager.ConnectionStrings ("ConnStringHere").ConnectionString;
    SqlConnection con = new SqlConnection (conStr);
    MemoryStream ms = new MemoryStream ();
    Bitmap tempImage = new Bitmap (p);
    tempImage.Save (ms, p.RawFormat);
    byte[] data = ms.GetBuffer ();
    if (! isValidImage (data)) {
        return false;
    }
    string query = "INSERT INTO Table_Name (File2) VALUES (@File2)";
    SqlCommand cmd = new SqlCommand (query, con);
    cmd.Parameters.Add ("File2", SqlDbType.Image).Value = data;
    con.Open ();
    int result = cmd.ExecuteNonQuery ();
    con.Close ();
    return result > 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
612
3
Gpt3D_Clone612_3.cs 1 28
Gpt3D_Clone612_3.cs 29 49
----------------------------------------

private bool uploadImage (ref Bitmap p) {
    SqlConnection con = new SqlConnection ();
    con.ConnectionString = Configuration.ConfigurationManager.ConnectionStrings ("ConnStringHere").ConnectionString;
    SqlCommand cmd = new SqlCommand ();
    cmd.CommandText = "INSERT INTO Table_Name (File2) VALUES (@File2)";
    cmd.CommandType = CommandType.Text;
    cmd.Connection = con;
    SqlParameter File1 = new SqlParameter ("@File2", SqlDbType.Image);
    MemoryStream ms = new MemoryStream ();
    using (Bitmap tempImage = new Bitmap (p))
    {
        tempImage.Save (ms, p.RawFormat);
    } byte [] data = ms.GetBuffer ();
    if (! isValidImage (data)) {
        return false;
    }
    File1.Value = data;
    cmd.Parameters.Add (File1);
    con.Open ();
    int result = cmd.ExecuteNonQuery ();
    if (result > 0) {
        con.Close ();
        return true;
    } else {
        con.Close ();
        return false;
    }
}
----------------------------------------

 private bool uploadImage (ref Bitmap p) {
     SqlConnection con = new SqlConnection (Configuration.ConfigurationManager.ConnectionStrings ("ConnStringHere").ConnectionString);
    con.Open ();
    string query = "INSERT INTO Table_Name (File2) VALUES (@File2)";
    using (SqlCommand cmd = new SqlCommand (query, con))
    {
        MemoryStream ms = new MemoryStream ();
        using (Bitmap tempImage = new Bitmap (p))
        {
            tempImage.Save (ms, p.RawFormat);
        } byte [] data = ms.GetBuffer ();
        if (! isValidImage (data)) {
            return false;
        }
        cmd.Parameters.Add("@File2", SqlDbType.Image).Value = data;
        int result = cmd.ExecuteNonQuery ();
        return result > 0;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
612
4
Gpt3D_Clone612_4.cs 1 28
Gpt3D_Clone612_4.cs 29 48
----------------------------------------

private bool uploadImage (ref Bitmap p) {
    SqlConnection con = new SqlConnection ();
    con.ConnectionString = Configuration.ConfigurationManager.ConnectionStrings ("ConnStringHere").ConnectionString;
    SqlCommand cmd = new SqlCommand ();
    cmd.CommandText = "INSERT INTO Table_Name (File2) VALUES (@File2)";
    cmd.CommandType = CommandType.Text;
    cmd.Connection = con;
    SqlParameter File1 = new SqlParameter ("@File2", SqlDbType.Image);
    MemoryStream ms = new MemoryStream ();
    using (Bitmap tempImage = new Bitmap (p))
    {
        tempImage.Save (ms, p.RawFormat);
    } byte [] data = ms.GetBuffer ();
    if (! isValidImage (data)) {
        return false;
    }
    File1.Value = data;
    cmd.Parameters.Add (File1);
    con.Open ();
    int result = cmd.ExecuteNonQuery ();
    if (result > 0) {
        con.Close ();
        return true;
    } else {
        con.Close ();
        return false;
    }
}
----------------------------------------

 private bool uploadImage (ref Bitmap p) {
    SqlConnection con = new SqlConnection (Configuration.ConfigurationManager.ConnectionStrings ("ConnStringHere").ConnectionString);
    string query = "INSERT INTO Table_Name (File2) VALUES (@File2)";
    SqlCommand cmd = new SqlCommand (query, con);
    MemoryStream ms = new MemoryStream ();
    using (Bitmap tempImage = new Bitmap (p))
    {
        tempImage.Save (ms, p.RawFormat);
    } byte [] data = ms.GetBuffer ();
    if (! isValidImage (data)) {
        return false;
    }
   cmd.Parameters.Add ("@File2", SqlDbType.Image).Value = data;
    con.Open ();
    int result = cmd.ExecuteNonQuery ();
    con.Close ();
    return result > 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
612
5
Gpt3D_Clone612_5.cs 1 28
Gpt3D_Clone612_5.cs 29 47
----------------------------------------

private bool uploadImage (ref Bitmap p) {
    SqlConnection con = new SqlConnection ();
    con.ConnectionString = Configuration.ConfigurationManager.ConnectionStrings ("ConnStringHere").ConnectionString;
    SqlCommand cmd = new SqlCommand ();
    cmd.CommandText = "INSERT INTO Table_Name (File2) VALUES (@File2)";
    cmd.CommandType = CommandType.Text;
    cmd.Connection = con;
    SqlParameter File1 = new SqlParameter ("@File2", SqlDbType.Image);
    MemoryStream ms = new MemoryStream ();
    using (Bitmap tempImage = new Bitmap (p))
    {
        tempImage.Save (ms, p.RawFormat);
    } byte [] data = ms.GetBuffer ();
    if (! isValidImage (data)) {
        return false;
    }
    File1.Value = data;
    cmd.Parameters.Add (File1);
    con.Open ();
    int result = cmd.ExecuteNonQuery ();
    if (result > 0) {
        con.Close ();
        return true;
    } else {
        con.Close ();
        return false;
    }
}
----------------------------------------

 private bool uploadImage (ref Bitmap p) { 
	String connString = Configuration.ConfigurationManager.ConnectionStrings("ConnStringHere").ConnectionString; 
    SqlConnection connection = new SqlConnection(connString);
	connection.Open();
	String query = "INSERT INTO Table_Name (File2) VALUES (@File2)"; 
	SqlCommand command = new SqlCommand(query, connection);
	MemoryStream memoryStream = new MemoryStream();
	Bitmap tempImage = new Bitmap(p);
	tempImage.Save(memoryStream, p.RawFormat);
	byte[] data = memoryStream.GetBuffer(); 
	if(!isValidImage(data)) 
		return false; 
	command.Parameters.Add("@File2", SqlDbType.Image).Value = data; 
	int result = command.ExecuteNonQuery();
	connection.Close(); 
	return result > 0; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
612
6
Gpt3D_Clone612_6.cs 1 28
Gpt3D_Clone612_6.cs 29 86
----------------------------------------

private bool uploadImage (ref Bitmap p) {
    SqlConnection con = new SqlConnection ();
    con.ConnectionString = Configuration.ConfigurationManager.ConnectionStrings ("ConnStringHere").ConnectionString;
    SqlCommand cmd = new SqlCommand ();
    cmd.CommandText = "INSERT INTO Table_Name (File2) VALUES (@File2)";
    cmd.CommandType = CommandType.Text;
    cmd.Connection = con;
    SqlParameter File1 = new SqlParameter ("@File2", SqlDbType.Image);
    MemoryStream ms = new MemoryStream ();
    using (Bitmap tempImage = new Bitmap (p))
    {
        tempImage.Save (ms, p.RawFormat);
    } byte [] data = ms.GetBuffer ();
    if (! isValidImage (data)) {
        return false;
    }
    File1.Value = data;
    cmd.Parameters.Add (File1);
    con.Open ();
    int result = cmd.ExecuteNonQuery ();
    if (result > 0) {
        con.Close ();
        return true;
    } else {
        con.Close ();
        return false;
    }
}
----------------------------------------

 private bool UploadImage (ref Bitmap p) 
        { 
            SqlConnection con = new SqlConnection (Configuration.ConfigurationManager.ConnectionStrings ("ConnStringHere").ConnectionString); 
            con.Open (); 
            string query = "INSERT INTO Table_Name (File2) VALUES (@File2)"; 
            SqlCommand cmd = new SqlCommand(query, con); 
            MemoryStream memoryStream = new MemoryStream(); 
            Bitmap tempImage = new Bitmap(p); 
            tempImage.Save(memoryStream, p.RawFormat); 
            byte[] data = memoryStream.GetBuffer(); 
            if (!isValidImage(data)) 
            return false; 
            cmd.Parameters.Add("@File2", SqlDbType.Image).Value = data; 
            int result = cmd.ExecuteNonQuery(); 
            con.Close (); 
            return result > 0; 
        } 
    
 private bool uploadImage (ref Bitmap p) 
        { 
            String connStr = Configuration.ConfigurationManager.ConnectionStrings("ConnStringHere").ConnectionString; 
            SqlConnection connection = new SqlConnection(connStr); 
            connection.Open(); 
            String queryStr = "INSERT INTO Table_Name (File2) VALUES (@File2)"; 
            SqlCommand command = new SqlCommand(queryStr, connection); 
            MemoryStream memStream = new MemoryStream(); 
            Bitmap tempImg = new Bitmap(p); 
            tempImg.Save(memStream, p.RawFormat); 
            byte[] data = memStream.GetBuffer();     
            if(!isValidImage(data)) 
                return false; 
            command.Parameters.Add("@File2", SqlDbType.Image).Value = data; 
            int result = command.ExecuteNonQuery(); 
            connection.Close();     
            return result > 0; 
        } 
 private bool uploadImage (ref Bitmap p) {
    using (SqlConnection con = new SqlConnection (Configuration.ConfigurationManager.ConnectionStrings ("ConnStringHere").ConnectionString)) {
        con.Open ();
        string query = "INSERT INTO Table_Name (File2) VALUES (@File2)";
        using (SqlCommand cmd = new SqlCommand (query, con)) {
            MemoryStream ms = new MemoryStream ();
            using (Bitmap tempImage = new Bitmap (p)) {
                tempImage.Save (ms, p.RawFormat);
            }
            byte[] data = ms.GetBuffer ();
            if (! isValidImage (data)) {
                return false;
            }
            cmd.Parameters.Add ("@File2", SqlDbType.Image).Value = data;
            int result = cmd.ExecuteNonQuery ();
            return result > 0;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
612
7
Gpt3D_Clone612_7.cs 1 28
Gpt3D_Clone612_7.cs 29 48
----------------------------------------

private bool uploadImage (ref Bitmap p) {
    SqlConnection con = new SqlConnection ();
    con.ConnectionString = Configuration.ConfigurationManager.ConnectionStrings ("ConnStringHere").ConnectionString;
    SqlCommand cmd = new SqlCommand ();
    cmd.CommandText = "INSERT INTO Table_Name (File2) VALUES (@File2)";
    cmd.CommandType = CommandType.Text;
    cmd.Connection = con;
    SqlParameter File1 = new SqlParameter ("@File2", SqlDbType.Image);
    MemoryStream ms = new MemoryStream ();
    using (Bitmap tempImage = new Bitmap (p))
    {
        tempImage.Save (ms, p.RawFormat);
    } byte [] data = ms.GetBuffer ();
    if (! isValidImage (data)) {
        return false;
    }
    File1.Value = data;
    cmd.Parameters.Add (File1);
    con.Open ();
    int result = cmd.ExecuteNonQuery ();
    if (result > 0) {
        con.Close ();
        return true;
    } else {
        con.Close ();
        return false;
    }
}
----------------------------------------

 private bool uploadImage (ref Bitmap p) {
    SqlConnection con  = new SqlConnection(Configuration.ConfigurationManager.ConnectionStrings("ConnStringHere").ConnectionString);
    con.Open();
    string query = "INSERT INTO Table_Name (File2) VALUES (@File2)";
    SqlCommand cmd = new SqlCommand(query, con);
    MemoryStream ms = new MemoryStream();
    Bitmap tempImage = new Bitmap(p);
    tempImage.Save(ms, p.RawFormat);
    byte[] data = ms.GetBuffer();
    if(!isValidImage(data)) 
    {
        return false;
    }
    cmd.Parameters.Add("@File2", SqlDbType.Image).Value = data;
    int result = cmd.ExecuteNonQuery();
    con.Close();
    return result > 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
612
8
Gpt3D_Clone612_8.cs 1 28
Gpt3D_Clone612_8.cs 29 46
----------------------------------------

private bool uploadImage (ref Bitmap p) {
    SqlConnection con = new SqlConnection ();
    con.ConnectionString = Configuration.ConfigurationManager.ConnectionStrings ("ConnStringHere").ConnectionString;
    SqlCommand cmd = new SqlCommand ();
    cmd.CommandText = "INSERT INTO Table_Name (File2) VALUES (@File2)";
    cmd.CommandType = CommandType.Text;
    cmd.Connection = con;
    SqlParameter File1 = new SqlParameter ("@File2", SqlDbType.Image);
    MemoryStream ms = new MemoryStream ();
    using (Bitmap tempImage = new Bitmap (p))
    {
        tempImage.Save (ms, p.RawFormat);
    } byte [] data = ms.GetBuffer ();
    if (! isValidImage (data)) {
        return false;
    }
    File1.Value = data;
    cmd.Parameters.Add (File1);
    con.Open ();
    int result = cmd.ExecuteNonQuery ();
    if (result > 0) {
        con.Close ();
        return true;
    } else {
        con.Close ();
        return false;
    }
}
----------------------------------------

 private bool uploadImage (ref Bitmap p) { 
	SqlConnection con = new SqlConnection(Configuration.ConfigurationManager.ConnectionStrings("ConnStringHere").ConnectionString); 
	String sql = "INSERT INTO Table_Name (File2) VALUES (@File2)"; 
	SqlCommand cmd = new SqlCommand(sql, con); 
	MemoryStream ms = new MemoryStream(); 
	Bitmap abc = new Bitmap(p); 
	abc.Save(ms, p.RawFormat); 
	byte[] buffer = ms.GetBuffer(); 
	if (!isValidImage(buffer)) 
		return false; 
	cmd.Parameters.Add("@File2", SqlDbType.Image).Value = buffer; 
	con.Open(); 
	int result = cmd.ExecuteNonQuery(); 
	con.Close(); 
	return result > 0; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
612
9
Gpt3D_Clone612_9.cs 1 28
Gpt3D_Clone612_9.cs 29 86
----------------------------------------

private bool uploadImage (ref Bitmap p) {
    SqlConnection con = new SqlConnection ();
    con.ConnectionString = Configuration.ConfigurationManager.ConnectionStrings ("ConnStringHere").ConnectionString;
    SqlCommand cmd = new SqlCommand ();
    cmd.CommandText = "INSERT INTO Table_Name (File2) VALUES (@File2)";
    cmd.CommandType = CommandType.Text;
    cmd.Connection = con;
    SqlParameter File1 = new SqlParameter ("@File2", SqlDbType.Image);
    MemoryStream ms = new MemoryStream ();
    using (Bitmap tempImage = new Bitmap (p))
    {
        tempImage.Save (ms, p.RawFormat);
    } byte [] data = ms.GetBuffer ();
    if (! isValidImage (data)) {
        return false;
    }
    File1.Value = data;
    cmd.Parameters.Add (File1);
    con.Open ();
    int result = cmd.ExecuteNonQuery ();
    if (result > 0) {
        con.Close ();
        return true;
    } else {
        con.Close ();
        return false;
    }
}
----------------------------------------

 private bool UploadImage (ref Bitmap p) 
        { 
            SqlConnection con = new SqlConnection (Configuration.ConfigurationManager.ConnectionStrings ("ConnStringHere").ConnectionString); 
            con.Open (); 
            string query = "INSERT INTO Table_Name (File2) VALUES (@File2)"; 
            SqlCommand cmd = new SqlCommand(query, con); 
            MemoryStream memoryStream = new MemoryStream(); 
            Bitmap tempImage = new Bitmap(p); 
            tempImage.Save(memoryStream, p.RawFormat); 
            byte[] data = memoryStream.GetBuffer(); 
            if (!isValidImage(data)) 
            return false; 
            cmd.Parameters.Add("@File2", SqlDbType.Image).Value = data; 
            int result = cmd.ExecuteNonQuery(); 
            con.Close (); 
            return result > 0; 
        } 
    
 private bool uploadImage (ref Bitmap p) 
        { 
            String connStr = Configuration.ConfigurationManager.ConnectionStrings("ConnStringHere").ConnectionString; 
            SqlConnection connection = new SqlConnection(connStr); 
            connection.Open(); 
            String queryStr = "INSERT INTO Table_Name (File2) VALUES (@File2)"; 
            SqlCommand command = new SqlCommand(queryStr, connection); 
            MemoryStream memStream = new MemoryStream(); 
            Bitmap tempImg = new Bitmap(p); 
            tempImg.Save(memStream, p.RawFormat); 
            byte[] data = memStream.GetBuffer();     
            if(!isValidImage(data)) 
                return false; 
            command.Parameters.Add("@File2", SqlDbType.Image).Value = data; 
            int result = command.ExecuteNonQuery(); 
            connection.Close();     
            return result > 0; 
        } 
 private bool uploadImage (ref Bitmap p) {
    using (SqlConnection con = new SqlConnection (Configuration.ConfigurationManager.ConnectionStrings ("ConnStringHere").ConnectionString)) {
        con.Open ();
        string query = "INSERT INTO Table_Name (File2) VALUES (@File2)";
        using (SqlCommand cmd = new SqlCommand (query, con)) {
            MemoryStream ms = new MemoryStream ();
            using (Bitmap tempImage = new Bitmap (p)) {
                tempImage.Save (ms, p.RawFormat);
            }
            byte[] data = ms.GetBuffer ();
            if (! isValidImage (data)) {
                return false;
            }
            cmd.Parameters.Add ("@File2", SqlDbType.Image).Value = data;
            int result = cmd.ExecuteNonQuery ();
            return result > 0;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
613
2
Gpt3D_Clone613_2.cs 1 27
Gpt3D_Clone613_2.cs 28 43
----------------------------------------

public bool UrlIsValid (string url) {
    try {
        HttpWebRequest request = HttpWebRequest.Create (url) as HttpWebRequest;
        request.Timeout = 5000;
        request.Method = "HEAD";
        using (HttpWebResponse response = request.GetResponse () as HttpWebResponse)
        {
            int statusCode = (int) response.StatusCode;
            if (statusCode >= 100 && statusCode < 400) {
                return true;
            } else if (statusCode >= 500 && statusCode <= 510) {
                Debug.WriteLine (String.Format ("The remote server has thrown an internal error. Url is not valid: {0}", url));
                return false;
            }
        }}
    catch (WebException ex) {
        if (ex.Status == WebExceptionStatus.ProtocolError) {
            return false;
        } else {
            log.Warn (String.Format ("Unhandled status [{0}] returned for url: {1}", ex.Status, url), ex);
        }
    }
    catch (Exception ex) {
        log.Error (String.Format ("Could not test url {0}.", url), ex);
    }
    return false;
}
----------------------------------------

 public bool IsUrlValid (string url) { 
    try {
        Uri testUri = new Uri (url);
        HttpWebRequest request = (HttpWebRequest) WebRequest.Create (testUri);
        HttpWebResponse response = (HttpWebResponse) request.GetResponse ();
        if (response.StatusCode == HttpStatusCode.OK) { 
            return true; 
        }
    } catch {
        return false; 
    }
    return false; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
613
3
Gpt3D_Clone613_3.cs 1 27
Gpt3D_Clone613_3.cs 28 41
----------------------------------------

public bool UrlIsValid (string url) {
    try {
        HttpWebRequest request = HttpWebRequest.Create (url) as HttpWebRequest;
        request.Timeout = 5000;
        request.Method = "HEAD";
        using (HttpWebResponse response = request.GetResponse () as HttpWebResponse)
        {
            int statusCode = (int) response.StatusCode;
            if (statusCode >= 100 && statusCode < 400) {
                return true;
            } else if (statusCode >= 500 && statusCode <= 510) {
                Debug.WriteLine (String.Format ("The remote server has thrown an internal error. Url is not valid: {0}", url));
                return false;
            }
        }}
    catch (WebException ex) {
        if (ex.Status == WebExceptionStatus.ProtocolError) {
            return false;
        } else {
            log.Warn (String.Format ("Unhandled status [{0}] returned for url: {1}", ex.Status, url), ex);
        }
    }
    catch (Exception ex) {
        log.Error (String.Format ("Could not test url {0}.", url), ex);
    }
    return false;
}
----------------------------------------

 public bool UrlIsValid (string url) { 
    try { 
        WebRequest request = WebRequest.Create (url); 
        WebResponse response = request.GetResponse (); 
        if (((HttpWebResponse)response).StatusCode == HttpStatusCode.OK) { 
            return true; 
        }
    } catch { 
        return false; 
    }
    return false; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
614
4
Gpt3D_Clone614_4.cs 1 20
Gpt3D_Clone614_4.cs 21 43
----------------------------------------

internal static void RunScriptFile (SqlConnection conn, string fileName) {
    long fileSize = 0;
    using (FileStream stream = File.OpenRead (fileName))
    {
        fileSize = stream.Length;
        using (StreamReader reader = new StreamReader (stream))
        {
            StringBuilder sb = new StringBuilder ();
            string line = string.Empty;
            while (! reader.EndOfStream) {
                line = reader.ReadLine ();
                if (string.Compare (line.Trim (), "GO", StringComparison.InvariantCultureIgnoreCase) == 0) {
                    RunCommand (conn, sb.ToString ());
                    sb.Length = 0;
                } else {
                    sb.AppendLine (line);
                }
            }
        }}
}
----------------------------------------

 internal static void RunScriptFile (SqlConnection conn, string fileName) 
{ 
    using (var fs = new FileStream(fileName, FileMode.Open)) 
    { 
        using (var sr = new StreamReader(fs)) 
        { 
            StringBuilder sb = new StringBuilder(); 
            string line; 
            while ((line = sr.ReadLine()) != null) 
            { 
                if (string.Compare(line.Trim(), "GO", StringComparison.InvariantCultureIgnoreCase) == 0) 
                { 
                    RunCommand(conn, sb.ToString()); 
                    sb.Length = 0; 
                } 
                else 
                    sb.AppendLine(line); 
            } 
        } 
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
614
7
Gpt3D_Clone614_7.cs 1 20
Gpt3D_Clone614_7.cs 21 39
----------------------------------------

internal static void RunScriptFile (SqlConnection conn, string fileName) {
    long fileSize = 0;
    using (FileStream stream = File.OpenRead (fileName))
    {
        fileSize = stream.Length;
        using (StreamReader reader = new StreamReader (stream))
        {
            StringBuilder sb = new StringBuilder ();
            string line = string.Empty;
            while (! reader.EndOfStream) {
                line = reader.ReadLine ();
                if (string.Compare (line.Trim (), "GO", StringComparison.InvariantCultureIgnoreCase) == 0) {
                    RunCommand (conn, sb.ToString ());
                    sb.Length = 0;
                } else {
                    sb.AppendLine (line);
                }
            }
        }}
}
----------------------------------------

 internal static void RunScriptFile (SqlConnection conn, string fileName) 
{ 
    byte[] b = readFileBytes(fileName); 
    string data = Encoding.UTF8.GetString(b); 
    string[] lines = data.Split(new string[]{"\r\n"}, StringSplitOptions.None); 
    StringBuilder sb = new StringBuilder(); 
    foreach (string line in lines) 
    { 
        if (string.Compare(line.Trim(), "GO", StringComparison.InvariantCultureIgnoreCase) == 0) 
        { 
            RunCommand(conn, sb.ToString()); 
            sb.Length = 0; 
        } 
        else 
            sb.AppendLine(line); 
    } 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
614
8
Gpt3D_Clone614_8.cs 1 20
Gpt3D_Clone614_8.cs 21 40
----------------------------------------

internal static void RunScriptFile (SqlConnection conn, string fileName) {
    long fileSize = 0;
    using (FileStream stream = File.OpenRead (fileName))
    {
        fileSize = stream.Length;
        using (StreamReader reader = new StreamReader (stream))
        {
            StringBuilder sb = new StringBuilder ();
            string line = string.Empty;
            while (! reader.EndOfStream) {
                line = reader.ReadLine ();
                if (string.Compare (line.Trim (), "GO", StringComparison.InvariantCultureIgnoreCase) == 0) {
                    RunCommand (conn, sb.ToString ());
                    sb.Length = 0;
                } else {
                    sb.AppendLine (line);
                }
            }
        }}
}
----------------------------------------

 internal static void RunScriptFile (SqlConnection conn, string fileName) 
{ 
    using (var sr = new StreamReader(fileName)) 
    { 
        StringBuilder sb = new StringBuilder(); 
        string line; 
        while ((line = sr.ReadLine()) != null) 
        { 
            if (string.Compare(line.Trim(), "GO", StringComparison.InvariantCultureIgnoreCase) == 0) 
            { 
                RunCommand(conn, sb.ToString()); 
                sb.Length = 0; 
            } 
            else 
                sb.AppendLine(line); 
        } 
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
614
9
Gpt3D_Clone614_9.cs 1 20
Gpt3D_Clone614_9.cs 21 37
----------------------------------------

internal static void RunScriptFile (SqlConnection conn, string fileName) {
    long fileSize = 0;
    using (FileStream stream = File.OpenRead (fileName))
    {
        fileSize = stream.Length;
        using (StreamReader reader = new StreamReader (stream))
        {
            StringBuilder sb = new StringBuilder ();
            string line = string.Empty;
            while (! reader.EndOfStream) {
                line = reader.ReadLine ();
                if (string.Compare (line.Trim (), "GO", StringComparison.InvariantCultureIgnoreCase) == 0) {
                    RunCommand (conn, sb.ToString ());
                    sb.Length = 0;
                } else {
                    sb.AppendLine (line);
                }
            }
        }}
}
----------------------------------------

 internal static void RunScriptFile (SqlConnection conn, string fileName) 
{ 
    string[] lines = File.ReadAllLines(fileName); 
    StringBuilder sb = new StringBuilder(); 
    foreach (string line in lines) 
    { 
        if (string.Compare(line.Trim(), "GO", StringComparison.InvariantCultureIgnoreCase) == 0) 
        { 
            RunCommand(conn, sb.ToString()); 
            sb.Length = 0; 
        } 
        else 
            sb.AppendLine(line); 
    } 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
615
0
Gpt3D_Clone615_0.cs 1 12
Gpt3D_Clone615_0.cs 13 36
----------------------------------------

private static bool AlreadyRunning () {
    Process [] processes = Process.GetProcesses ();
    Process currentProc = Process.GetCurrentProcess ();
    logger.LogDebug ("Current proccess: {0}", currentProc.ProcessName);
    foreach (Process process in processes) {
        if (currentProc.ProcessName == process.ProcessName && currentProc.Id != process.Id) {
            logger.LogInformation ("Another instance of this process is already running: {pid}", process.Id);
            return true;
        }
    }
    return false;
}
----------------------------------------

  private static bool AlreadyRunning () {
    Process currentProc = Process.GetCurrentProcess ();
    logger.LogDebug ("Current proccess: {0}", currentProc.ProcessName);
    string processName = currentProc.ProcessName;
    bool result = false;
    try {
        int processesRunning = 0;
        Process [] processes = Process.GetProcessesByName (processName);
        foreach (Process process in processes) {
            if (currentProc.Id != process.Id) {
                logger.LogInformation ("Another instance of this process is already running: {pid}", process.Id);
                processesRunning++;
            }
        }
        if (processesRunning > 0) {
            result = true;
        }
    } catch (Exception ex) {
        logger.LogError (ex, "Error in checking for already running process");
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
615
1
Gpt3D_Clone615_1.cs 1 12
Gpt3D_Clone615_1.cs 13 37
----------------------------------------

private static bool AlreadyRunning () {
    Process [] processes = Process.GetProcesses ();
    Process currentProc = Process.GetCurrentProcess ();
    logger.LogDebug ("Current proccess: {0}", currentProc.ProcessName);
    foreach (Process process in processes) {
        if (currentProc.ProcessName == process.ProcessName && currentProc.Id != process.Id) {
            logger.LogInformation ("Another instance of this process is already running: {pid}", process.Id);
            return true;
        }
    }
    return false;
}
----------------------------------------

  private static bool AlreadyRunning () {
    HashSet <int> processIds = new HashSet <int> ();
    Process currentProc = Process.GetCurrentProcess ();
    logger.LogDebug ("Current proccess: {0}", currentProc.ProcessName);
    Process [] processes = Process.GetProcessesByName (currentProc.ProcessName);
    foreach (Process process in processes) {
        processIds.Add (process.Id);
    }
    if (processIds.Count > 1) {
        if (processIds.Contains (currentProc.Id)) {
            for (int i = 0; i < processes.Length; i++) {
                if (processes [i].Id == currentProc.Id) {
                    continue;
                }
                else {
                    logger.LogInformation ("Another instance of this process is already running: {pid}", processes [i].Id);
                    return true;
                }
            }
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
615
2
Gpt3D_Clone615_2.cs 1 12
Gpt3D_Clone615_2.cs 13 37
----------------------------------------

private static bool AlreadyRunning () {
    Process [] processes = Process.GetProcesses ();
    Process currentProc = Process.GetCurrentProcess ();
    logger.LogDebug ("Current proccess: {0}", currentProc.ProcessName);
    foreach (Process process in processes) {
        if (currentProc.ProcessName == process.ProcessName && currentProc.Id != process.Id) {
            logger.LogInformation ("Another instance of this process is already running: {pid}", process.Id);
            return true;
        }
    }
    return false;
}
----------------------------------------

  private static bool AlreadyRunning () {
    Process currentProc = Process.GetCurrentProcess ();
    logger.LogDebug ("Current proccess: {0}", currentProc.ProcessName);
    Process [] processes = Process.GetProcessesByName (currentProc.ProcessName);
    List <int> processIds = new List <int> ();
    foreach (Process process in processes) {
        processIds.Add (process.Id);
    }
    if (processIds.Count > 1) {
        if (processIds.Contains (currentProc.Id)) {
            for (int i = 0; i < processes.Length; i++) {
                if (processes [i].Id == currentProc.Id) {
                    continue;
                }
                else {
                    logger.LogInformation ("Another instance of this process is already running: {pid}", processes [i].Id);
                    return true;
                }
            }
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
615
3
Gpt3D_Clone615_3.cs 1 12
Gpt3D_Clone615_3.cs 13 32
----------------------------------------

private static bool AlreadyRunning () {
    Process [] processes = Process.GetProcesses ();
    Process currentProc = Process.GetCurrentProcess ();
    logger.LogDebug ("Current proccess: {0}", currentProc.ProcessName);
    foreach (Process process in processes) {
        if (currentProc.ProcessName == process.ProcessName && currentProc.Id != process.Id) {
            logger.LogInformation ("Another instance of this process is already running: {pid}", process.Id);
            return true;
        }
    }
    return false;
}
----------------------------------------

  private static bool AlreadyRunning () {
    Process currentProc = Process.GetCurrentProcess ();
    logger.LogDebug ("Current proccess: {0}", currentProc.ProcessName);
    string processName = currentProc.ProcessName;
    bool result = false;
    try {
        Process [] processes = Process.GetProcessesByName (processName);
        foreach (Process process in processes) {
            if (currentProc.Id != process.Id) {
                logger.LogInformation ("Another instance of this process is already running: {pid}", process.Id);
                result = true;
            }
        }
    } catch (Exception ex) {
        logger.LogError (ex, "Error in checking for already running process");
    }
    return result;
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
615
6
Gpt3D_Clone615_6.cs 1 12
Gpt3D_Clone615_6.cs 13 28
----------------------------------------

private static bool AlreadyRunning () {
    Process [] processes = Process.GetProcesses ();
    Process currentProc = Process.GetCurrentProcess ();
    logger.LogDebug ("Current proccess: {0}", currentProc.ProcessName);
    foreach (Process process in processes) {
        if (currentProc.ProcessName == process.ProcessName && currentProc.Id != process.Id) {
            logger.LogInformation ("Another instance of this process is already running: {pid}", process.Id);
            return true;
        }
    }
    return false;
}
----------------------------------------

  private static bool AlreadyRunning () {
    Process currentProc = Process.GetCurrentProcess ();
    logger.LogDebug ("Current proccess: {0}", currentProc.ProcessName);
    Process [] processes = Process.GetProcessesByName (currentProc.ProcessName);
    if (processes.Length > 1) {
        for (int i = 0; i < processes.Length; i++) {
            if (processes [i].Id != currentProc.Id) {
                logger.LogInformation ("Another instance of this process is already running: {pid}", processes [i].Id);
                return true;
            }
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
615
7
Gpt3D_Clone615_7.cs 1 12
Gpt3D_Clone615_7.cs 13 28
----------------------------------------

private static bool AlreadyRunning () {
    Process [] processes = Process.GetProcesses ();
    Process currentProc = Process.GetCurrentProcess ();
    logger.LogDebug ("Current proccess: {0}", currentProc.ProcessName);
    foreach (Process process in processes) {
        if (currentProc.ProcessName == process.ProcessName && currentProc.Id != process.Id) {
            logger.LogInformation ("Another instance of this process is already running: {pid}", process.Id);
            return true;
        }
    }
    return false;
}
----------------------------------------

  private static bool AlreadyRunning () {
    Process currentProc = Process.GetCurrentProcess ();
    logger.LogDebug ("Current proccess: {0}", currentProc.ProcessName);
    Process [] processes = Process.GetProcessesByName (currentProc.ProcessName);
    if (processes.Length > 1) {
        for (int i = 0; i < processes.Length; i++) {
            if (processes [i].Id != currentProc.Id) {
                logger.LogInformation ("Another instance of this process is already running: {pid}", processes [i].Id);
                return true;
            }
        }
    }
    return false;
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
618
0
Gpt3D_Clone618_0.cs 1 17
Gpt3D_Clone618_0.cs 18 47
----------------------------------------

public static int IndexOf (byte [] haystack, byte [] needle) {
    if (needle.Length == 0) {
        return 0;
    }
    int [] charTable = MakeCharTable (needle);
    int [] offsetTable = MakeOffsetTable (needle);
    for (int i = needle.Length - 1; i < haystack.Length;) {
        int j;
        for (j = needle.Length - 1; needle [j] == haystack [i]; -- i, -- j) {
            if (j == 0) {
                return i;
            }
        }
        i += Math.Max (offsetTable [needle.Length - 1 - j], charTable [haystack [i]]);
    }
    return - 1;
}
----------------------------------------

 public static int IndexOf (byte [] haystack, byte [] needle) {
    // handle null cases
    if (needle.Length == 0) {
        return 0;
    }
    // pre-process the needle
    int [] charTable = MakeCharTable (needle);
    int [] offsetTable = MakeOffsetTable (needle);
    // perform the search
    int haystackLength = haystack.Length;
    int needleLength = needle.Length;
    int i = needleLength - 1;
    while (i < haystackLength) {
        int j = needleLength - 1;
        while (needle[j] == haystack[i]) {
            if (j == 0) {
                return i;
            }
            i--;
            j--;
        }
        i += Math.Max(offsetTable[needleLength - 1 - j], 
            charTable[haystack[i]]);
    }
    return -1;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
618
1
Gpt3D_Clone618_1.cs 1 17
Gpt3D_Clone618_1.cs 18 46
----------------------------------------

public static int IndexOf (byte [] haystack, byte [] needle) {
    if (needle.Length == 0) {
        return 0;
    }
    int [] charTable = MakeCharTable (needle);
    int [] offsetTable = MakeOffsetTable (needle);
    for (int i = needle.Length - 1; i < haystack.Length;) {
        int j;
        for (j = needle.Length - 1; needle [j] == haystack [i]; -- i, -- j) {
            if (j == 0) {
                return i;
            }
        }
        i += Math.Max (offsetTable [needle.Length - 1 - j], charTable [haystack [i]]);
    }
    return - 1;
}
----------------------------------------

 public static int IndexOf (byte [] haystack, byte [] needle) {
    // perform a null-check
    if (needle.Length == 0) {
        return 0;
    }
 
    // pre-process the needle
    int [] charTable = MakeCharTable (needle);
    int [] offsetTable = MakeOffsetTable (needle);
 
    // perform the search
    int needleLength = needle.Length;
    int haystackIndex = needleLength - 1;
    while (haystackIndex < haystack.Length) {
        int needleIndex = needleLength - 1;
        while (needleIndex >= 0 && haystack[haystackIndex] == needle[needleIndex]) {
            needleIndex--;
            haystackIndex--;
        }
        if (needleIndex < 0) {
            return haystackIndex + 1;
        }
        haystackIndex += Math.Max(offsetTable[needleLength - 1 - needleIndex],
            charTable[haystack[haystackIndex]]);
    }
    return -1;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
618
8
Gpt3D_Clone618_8.cs 1 17
Gpt3D_Clone618_8.cs 18 37
----------------------------------------

public static int IndexOf (byte [] haystack, byte [] needle) {
    if (needle.Length == 0) {
        return 0;
    }
    int [] charTable = MakeCharTable (needle);
    int [] offsetTable = MakeOffsetTable (needle);
    for (int i = needle.Length - 1; i < haystack.Length;) {
        int j;
        for (j = needle.Length - 1; needle [j] == haystack [i]; -- i, -- j) {
            if (j == 0) {
                return i;
            }
        }
        i += Math.Max (offsetTable [needle.Length - 1 - j], charTable [haystack [i]]);
    }
    return - 1;
}
----------------------------------------

 public static int IndexOf (byte [] haystack, byte [] needle) {
    if(needle.Length == 0) {
        return 0;
    }
    int [] charTable= MakeCharTable (needle);
    int [] offsetTable = MakeOffsetTable (needle);
    int i = 0;
    while(i <= haystack.Length - needle.Length) {
        int j = needle.Length - 1;
        while(needle[j] == haystack[i + j]) {
            if(j == 0)
                return i;
            j--;
        }
        i += Math.Max(offsetTable[needle.Length - 1 - j], charTable[haystack[i + j]]);
    }
    return -1;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
619
1
Gpt3D_Clone619_1.cs 1 24
Gpt3D_Clone619_1.cs 25 65
----------------------------------------

public int Compare (string s1, string s2) {
    int s1r, s2r;
    var s1n = IsNumeric (s1, out s1r);
    var s2n = IsNumeric (s2, out s2r);
    if (s1n && s2n)
        return s1r - s2r;
    else if (s1n)
        return - 1;
    else if (s2n)
        return 1;
    var num1 = Regex.Match (s1, @"\d+$");
    var num2 = Regex.Match (s2, @"\d+$");
    var onlyString1 = s1.Remove (num1.Index, num1.Length);
    var onlyString2 = s2.Remove (num2.Index, num2.Length);
    if (onlyString1 == onlyString2) {
        if (num1.Success && num2.Success)
            return Convert.ToInt32 (num1.Value) - Convert.ToInt32 (num2.Value);
        else if (num1.Success)
            return 1;
        else if (num2.Success)
            return - 1;
    }
    return string.Compare (s1, s2, true);
}
----------------------------------------

 
public int Compare(string s1, string s2) 
{
    int s1output, s2output;
    bool isNum1 = int.TryParse(s1, out s1output); 
    bool isNum2 = int.TryParse(s2, out s2output); 
     
    if (isNum1 && isNum2) { 
        return s1output - s2output; 
    } 
    else if (isNum1) { 
        return -1; 
    } 
    else if (isNum2) { 
        return 1; 
    } 
     
    Regex r1 = new Regex(@"\d+$"); 
    Regex r2 = new Regex(@"\d+$"); 
    Match m1 = r1.Match(s1); 
    Match m2 = r2.Match(s2); 
     
    string s1Removal = s1.Remove(m1.Index, m1.Length); 
    string s2Removal = s2.Remove(m2.Index, m2.Length); 
     
    if (s1Removal == s2Removal) { 
        if (m1.Success && m2.Success) { 
            return int.Parse(m1.Value) - int.Parse(m2.Value); 
        } 
        else if (m1.Success) { 
            return 1; 
        } 
        else if (m2.Success) { 
            return -1; 
        } 
    } 
     
    return string.Compare(s1, s2, true); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
619
2
Gpt3D_Clone619_2.cs 1 24
Gpt3D_Clone619_2.cs 25 61
----------------------------------------

public int Compare (string s1, string s2) {
    int s1r, s2r;
    var s1n = IsNumeric (s1, out s1r);
    var s2n = IsNumeric (s2, out s2r);
    if (s1n && s2n)
        return s1r - s2r;
    else if (s1n)
        return - 1;
    else if (s2n)
        return 1;
    var num1 = Regex.Match (s1, @"\d+$");
    var num2 = Regex.Match (s2, @"\d+$");
    var onlyString1 = s1.Remove (num1.Index, num1.Length);
    var onlyString2 = s2.Remove (num2.Index, num2.Length);
    if (onlyString1 == onlyString2) {
        if (num1.Success && num2.Success)
            return Convert.ToInt32 (num1.Value) - Convert.ToInt32 (num2.Value);
        else if (num1.Success)
            return 1;
        else if (num2.Success)
            return - 1;
    }
    return string.Compare (s1, s2, true);
}
----------------------------------------

 
public int Compare(string s1, string s2) 
{ 
    int s1Output, s2Output; 
    bool isNum1 = int.TryParse(s1, out s1Output); 
    bool isNum2 = int.TryParse(s2, out s2Output); 
    if (isNum1 && isNum2) {     
        return s1Output - s2Output; 
    } 
    else if (isNum1) { 
        return -1; 
    } 
    else if (isNum2) { 
        return 1; 
    } 
    Regex rx1 = new Regex(@"\d+$"); 
    Regex rx2 = new Regex(@"\d+$"); 
    Match m1 = rx1.Match(s1); 
    Match m2 = rx2.Match(s2); 
    string max1 = s1.Remove(m1.Index, m1.Length); 
    string max2 = s2.Remove(m2.Index, m2.Length); 
     
    if (max1 == max2) { 
        if (m1.Success && m2.Success) 
            return int.Parse(m1.Value) - int.Parse(m2.Value); 
        else if (m1.Success) 
            return 1; 
        else if (m2.Success) 
            return -1; 
    } 
    return string.Compare(s1, s2, true); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
619
3
Gpt3D_Clone619_3.cs 1 24
Gpt3D_Clone619_3.cs 25 58
----------------------------------------

public int Compare (string s1, string s2) {
    int s1r, s2r;
    var s1n = IsNumeric (s1, out s1r);
    var s2n = IsNumeric (s2, out s2r);
    if (s1n && s2n)
        return s1r - s2r;
    else if (s1n)
        return - 1;
    else if (s2n)
        return 1;
    var num1 = Regex.Match (s1, @"\d+$");
    var num2 = Regex.Match (s2, @"\d+$");
    var onlyString1 = s1.Remove (num1.Index, num1.Length);
    var onlyString2 = s2.Remove (num2.Index, num2.Length);
    if (onlyString1 == onlyString2) {
        if (num1.Success && num2.Success)
            return Convert.ToInt32 (num1.Value) - Convert.ToInt32 (num2.Value);
        else if (num1.Success)
            return 1;
        else if (num2.Success)
            return - 1;
    }
    return string.Compare (s1, s2, true);
}
----------------------------------------

 
public int Compare(string s1, string s2) 
{
    int rs1, rs2;
    bool isNum1 = int.TryParse(s1, out rs1); 
    bool isNum2 = int.TryParse(s2, out rs2);
    if (isNum1 && isNum2) {
        return rs1 - rs2;
    }
    else if (isNum1) {
        return -1;
    }
    else if (isNum2) {
        return 1;
    }
    Regex r1 = new Regex(@"\d+$");
    Regex r2 = new Regex(@"\d+$");
    Match m1 = r1.Match(s1);
    Match m2 = r2.Match(s2);
    string s1r = s1.Remove(m1.Index, m1.Length);
    string s2r = s2.Remove(m2.Index, m2.Length);
    if (s1r == s2r) {
        if (m1.Success && m2.Success)
            return int.Parse(m1.Value) - int.Parse(m2.Value);
        else if (m1.Success)
            return 1;
        else if (m2.Success)
            return -1;
    }
    return string.Compare(s1, s2, true);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
619
4
Gpt3D_Clone619_4.cs 1 24
Gpt3D_Clone619_4.cs 25 57
----------------------------------------

public int Compare (string s1, string s2) {
    int s1r, s2r;
    var s1n = IsNumeric (s1, out s1r);
    var s2n = IsNumeric (s2, out s2r);
    if (s1n && s2n)
        return s1r - s2r;
    else if (s1n)
        return - 1;
    else if (s2n)
        return 1;
    var num1 = Regex.Match (s1, @"\d+$");
    var num2 = Regex.Match (s2, @"\d+$");
    var onlyString1 = s1.Remove (num1.Index, num1.Length);
    var onlyString2 = s2.Remove (num2.Index, num2.Length);
    if (onlyString1 == onlyString2) {
        if (num1.Success && num2.Success)
            return Convert.ToInt32 (num1.Value) - Convert.ToInt32 (num2.Value);
        else if (num1.Success)
            return 1;
        else if (num2.Success)
            return - 1;
    }
    return string.Compare (s1, s2, true);
}
----------------------------------------

 
public int Compare(string s1, string s2) 
{
    int s1result, s2result;
    bool num1 = int.TryParse(s1, out s1result);
    bool num2 = int.TryParse(s2, out s2result);
    if (num1 && num2) {
        return s1result - s2result;
    }
    else if (num1) {
        return -1;
    }
    else if (num2) {
        return 1;
    }
    Regex re1 = new Regex(@"\d+$");
    Regex re2 = new Regex(@"\d+$");
    Match match1 = re1.Match(s1);
    Match match2 = re2.Match(s2);
    string firstString = s1.Remove(match1.Index, match1.Length);
    string secondString = s2.Remove(match2.Index, match2.Length);
    if (firstString == secondString) {
        if (match1.Success && match2.Success)
            return int.Parse(match1.Value) - int.Parse(match2.Value);
        else if (match1.Success)
            return 1;
        else if (match2.Success)
            return -1;
    }
    return string.Compare(s1, s2, true);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
619
7
Gpt3D_Clone619_7.cs 1 24
Gpt3D_Clone619_7.cs 25 58
----------------------------------------

public int Compare (string s1, string s2) {
    int s1r, s2r;
    var s1n = IsNumeric (s1, out s1r);
    var s2n = IsNumeric (s2, out s2r);
    if (s1n && s2n)
        return s1r - s2r;
    else if (s1n)
        return - 1;
    else if (s2n)
        return 1;
    var num1 = Regex.Match (s1, @"\d+$");
    var num2 = Regex.Match (s2, @"\d+$");
    var onlyString1 = s1.Remove (num1.Index, num1.Length);
    var onlyString2 = s2.Remove (num2.Index, num2.Length);
    if (onlyString1 == onlyString2) {
        if (num1.Success && num2.Success)
            return Convert.ToInt32 (num1.Value) - Convert.ToInt32 (num2.Value);
        else if (num1.Success)
            return 1;
        else if (num2.Success)
            return - 1;
    }
    return string.Compare (s1, s2, true);
}
----------------------------------------

 
public int Compare(string s1, string s2) 
{    
    int result1, result2;    
    var isNum1 = int.TryParse(s1, out result1);
    var isNum2 = int.TryParse(s2, out result2);    
    if (isNum1 && isNum2) {        
        return result1 - result2;    
    }    
    else if (isNum1) {        
        return -1;    
    }    
    else if (isNum2) {        
        return 1;    
    }    
    var num1 = Regex.Match(s1, @"\d+$");    
    var num2 = Regex.Match(s2, @"\d+$");    
    var str1 = s1.Substring(0, num1.Index);    
    var str2 = s2.Substring(0, num2.Index);
        if (str1 == str2) {        
        if (num1.Success && num2.Success) {            
            return int.Parse(num1.Value) - int.Parse(num2.Value);        
        }        
        else if (num1.Success) {            
            return 1;        
        }        
        else if (num2.Success) {            
            return -1;        
        }    
    }
    return string.Compare(s1, s2, true);    
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
2
Gpt3D_Clone61_2.cs 1 23
Gpt3D_Clone61_2.cs 24 59
----------------------------------------

static bool Check2DArray (int [,] data, int [,] find) {
    int dataLen = data.Length;
    int findLen = find.Length;
    for (int i = 0; i < dataLen; i ++) {
        int dataX = i % data.GetLength (0);
        int dataY = i / data.GetLength (0);
        bool okay = true;
        for (int j = 0; j < findLen && okay; j ++) {
            int findX = j % find.GetLength (1);
            int findY = j / find.GetLength (1);
            int checkedX = findX + dataX;
            int checkedY = findY + dataY;
            if (checkedX >= data.GetLength (0) || checkedY >= data.GetLength (1)) {
                okay = false;
                break;
            }
            okay = data [dataY + findY, dataX + findX] == find [findY, findX];
        }
        if (okay)
            return true;
    }
    return false;
}
----------------------------------------

 static bool Check2DArray(int[,] data, int[,] find)
{
	int dataRows = data.GetLength(0);
	int dataCols = data.GetLength(1);
	int findRows = find.GetLength(0);
	int findCols = find.GetLength(1);
	for (int row = 0; row <= dataRows - 1 - findRows; row++)
	{
		for (int col = 0; col <= dataCols - 1 - findCols; col++)
		{
			bool okay = true;
			int checkedRow, checkedCol;
			for (int findRow = 0; findRow < findRows && okay; findRow++)
			{
				for (int findCol = 0; findCol < findCols && okay; findCol++)
				{
					checkedRow = row + findRow;
					checkedCol = col + findCol;
					if (checkedRow >= dataRows || checkedCol >= dataCols)
					{
						okay = false;
						break;
					}
					okay = data[checkedRow, checkedCol] == find[findRow, findCol];
				}
			}
			if (okay)
				return true;
		}
	}
	return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
3
Gpt3D_Clone61_3.cs 1 23
Gpt3D_Clone61_3.cs 24 53
----------------------------------------

static bool Check2DArray (int [,] data, int [,] find) {
    int dataLen = data.Length;
    int findLen = find.Length;
    for (int i = 0; i < dataLen; i ++) {
        int dataX = i % data.GetLength (0);
        int dataY = i / data.GetLength (0);
        bool okay = true;
        for (int j = 0; j < findLen && okay; j ++) {
            int findX = j % find.GetLength (1);
            int findY = j / find.GetLength (1);
            int checkedX = findX + dataX;
            int checkedY = findY + dataY;
            if (checkedX >= data.GetLength (0) || checkedY >= data.GetLength (1)) {
                okay = false;
                break;
            }
            okay = data [dataY + findY, dataX + findX] == find [findY, findX];
        }
        if (okay)
            return true;
    }
    return false;
}
----------------------------------------

 static bool Check2DArray (int [,] data, int [,] find) {
    int dataRows = data.GetLength(0);
    int dataCols = data.GetLength(1);
    int findRows = find.GetLength(0);
    int findCols = find.GetLength(1);
    if (dataRows < findRows || dataCols < findCols) {
            return false;
        }
        
    for (int row = 0; row < dataRows; row++) {
        for (int col = 0; col < dataCols; col++) {
            bool okay = true;
            if (row + findRows > dataRows || col + findCols > dataCols) {
                break;
            }
            for (int findRow = 0; findRow < findRows && okay; findRow++) {
                for (int findCol = 0; findCol < findCols && okay; findCol++) {
                    int checkedRow = row + findRow;
                    int checkedCol = col + findCol;
                    okay = data[checkedRow, checkedCol] == find[findRow, findCol];
                }
            }
            if (okay)
                return true;
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
6
Gpt3D_Clone61_6.cs 1 23
Gpt3D_Clone61_6.cs 24 50
----------------------------------------

static bool Check2DArray (int [,] data, int [,] find) {
    int dataLen = data.Length;
    int findLen = find.Length;
    for (int i = 0; i < dataLen; i ++) {
        int dataX = i % data.GetLength (0);
        int dataY = i / data.GetLength (0);
        bool okay = true;
        for (int j = 0; j < findLen && okay; j ++) {
            int findX = j % find.GetLength (1);
            int findY = j / find.GetLength (1);
            int checkedX = findX + dataX;
            int checkedY = findY + dataY;
            if (checkedX >= data.GetLength (0) || checkedY >= data.GetLength (1)) {
                okay = false;
                break;
            }
            okay = data [dataY + findY, dataX + findX] == find [findY, findX];
        }
        if (okay)
            return true;
    }
    return false;
}
----------------------------------------

 static bool Check2DArray (int [,] data, int [,] find) {
    int dataRows = data.GetLength(0);
    int dataCols = data.GetLength(1);
    int findRows = find.GetLength(0);
    int findCols = find.GetLength(1);
    
    for (int row = 0; row < dataRows; row++) {
        for (int col = 0; col < dataCols; col++) {
            bool okay = true;
            if (row + findRows > dataRows || col + findCols > dataCols) {
                continue;
            }
            for (int findRow = 0; findRow < findRows && okay; findRow++) {
                for (int findCol = 0; findCol < findCols && okay; findCol++) {
                    int checkedRow = row + findRow;
                    int checkedCol = col + findCol;
                    okay = data[checkedRow, checkedCol] == find[findRow, findCol];
                }
            }
            if (okay)
                return true;
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
7
Gpt3D_Clone61_7.cs 1 23
Gpt3D_Clone61_7.cs 24 48
----------------------------------------

static bool Check2DArray (int [,] data, int [,] find) {
    int dataLen = data.Length;
    int findLen = find.Length;
    for (int i = 0; i < dataLen; i ++) {
        int dataX = i % data.GetLength (0);
        int dataY = i / data.GetLength (0);
        bool okay = true;
        for (int j = 0; j < findLen && okay; j ++) {
            int findX = j % find.GetLength (1);
            int findY = j / find.GetLength (1);
            int checkedX = findX + dataX;
            int checkedY = findY + dataY;
            if (checkedX >= data.GetLength (0) || checkedY >= data.GetLength (1)) {
                okay = false;
                break;
            }
            okay = data [dataY + findY, dataX + findX] == find [findY, findX];
        }
        if (okay)
            return true;
    }
    return false;
}
----------------------------------------

 static bool Check2DArray (int [,] data, int [,] find) {
    int dataRows = data.GetLength(0);
    int dataCols = data.GetLength(1);
    int findRows = find.GetLength(0);
    int findCols = find.GetLength(1);
     
    for (int row = 0; row <= dataRows - findRows; row++) {
        for (int col = 0; col <= dataCols - findCols; col++) {
            bool okay = true;
            for (int findRow = 0; findRow < findRows && okay; findRow++) {
                for (int findCol = 0; findCol < findCols && okay; findCol++) {
                    okay = data[row + findRow, col + findCol] == find[findRow, findCol];
                     if(okay == false) {
                         break;
                     }
                }
            }
            if (okay)
                return true;
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
61
8
Gpt3D_Clone61_8.cs 1 23
Gpt3D_Clone61_8.cs 24 46
----------------------------------------

static bool Check2DArray (int [,] data, int [,] find) {
    int dataLen = data.Length;
    int findLen = find.Length;
    for (int i = 0; i < dataLen; i ++) {
        int dataX = i % data.GetLength (0);
        int dataY = i / data.GetLength (0);
        bool okay = true;
        for (int j = 0; j < findLen && okay; j ++) {
            int findX = j % find.GetLength (1);
            int findY = j / find.GetLength (1);
            int checkedX = findX + dataX;
            int checkedY = findY + dataY;
            if (checkedX >= data.GetLength (0) || checkedY >= data.GetLength (1)) {
                okay = false;
                break;
            }
            okay = data [dataY + findY, dataX + findX] == find [findY, findX];
        }
        if (okay)
            return true;
    }
    return false;
}
----------------------------------------

 static bool Check2DArray (int [,] data, int [,] find) {
    int dataRows = data.GetLength(0);
    int dataCols = data.GetLength(1);
    int findRows = find.GetLength(0);
    int findCols = find.GetLength(1);
    for (int row = 0; row <= dataRows - 1 - findRows; row++) {
        for (int col = 0; col <= dataCols - 1 - findCols; col++) {
            bool okay = true;
            for (int findRow = 0; findRow < findRows && okay; findRow++) {
                for (int findCol = 0; findCol < findCols && okay; findCol++) {
                    int checkedRow = row + findRow;
                    int checkedCol = col + findCol;
                    okay = data[checkedRow, checkedCol] == find[findRow, findCol];
                }
            }
            if (okay)
                return true;
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
620
0
Gpt3D_Clone620_0.cs 1 9
Gpt3D_Clone620_0.cs 10 28
----------------------------------------

public static void Swap < T > (ref T obj, Func < T, T > cloner, Action < T > op) where T : class {
    while (true) {
        var objBefore = Volatile.Read (ref obj);
        var newObj = cloner (objBefore);
        op (newObj);
        if (Interlocked.CompareExchange (ref obj, newObj, objBefore) == objBefore)
            return;
    }
}
----------------------------------------

 public static void Swap<T>(ref T obj, Func<T,T> cloner = null, Action<T> op = null) where T : class
{
    bool flag = true;
    while (flag)
    {
        T readObject = obj;
        T newObject = cloner(obj);
        if (op != null)
        {
           op(newObject); 
        }
        if (Interlocked.CompareExchange(ref obj, newObject, readObject) == readObject) {
            flag = false;
        } 
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
620
1
Gpt3D_Clone620_1.cs 1 9
Gpt3D_Clone620_1.cs 10 26
----------------------------------------

public static void Swap < T > (ref T obj, Func < T, T > cloner, Action < T > op) where T : class {
    while (true) {
        var objBefore = Volatile.Read (ref obj);
        var newObj = cloner (objBefore);
        op (newObj);
        if (Interlocked.CompareExchange (ref obj, newObj, objBefore) == objBefore)
            return;
    }
}
----------------------------------------

 public static void Swap<T>(ref T obj, Func<T,T> cloner = null, Action<T> op = null) where T: class
{
    try
    {
        var objBefore = Volatile.Read(ref obj);
        var newObj = cloner(objBefore);
        op?.Invoke(newObj);
        if (Interlocked.CompareExchange(ref obj, newObj, objBefore) == objBefore)
            return;
    }
    catch (Exception e)
    {
        Console.WriteLine(e.Message);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
620
2
Gpt3D_Clone620_2.cs 1 9
Gpt3D_Clone620_2.cs 10 28
----------------------------------------

public static void Swap < T > (ref T obj, Func < T, T > cloner, Action < T > op) where T : class {
    while (true) {
        var objBefore = Volatile.Read (ref obj);
        var newObj = cloner (objBefore);
        op (newObj);
        if (Interlocked.CompareExchange (ref obj, newObj, objBefore) == objBefore)
            return;
    }
}
----------------------------------------

 public static void Swap<T>(ref T obj, Func<T,T> cloner = null, Action<T> op = null) where T: class
{
    bool swapped = false;
    while (!swapped)
    {
        T before = Volatile.Read(ref obj);
        T newObject = cloner(before);
        if (op != null)
        {
            op(newObject);
        }
        if (Interlocked.CompareExchange(ref obj, newObject, before) == before)
        {
            swapped = true;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
620
4
Gpt3D_Clone620_4.cs 1 9
Gpt3D_Clone620_4.cs 10 25
----------------------------------------

public static void Swap < T > (ref T obj, Func < T, T > cloner, Action < T > op) where T : class {
    while (true) {
        var objBefore = Volatile.Read (ref obj);
        var newObj = cloner (objBefore);
        op (newObj);
        if (Interlocked.CompareExchange (ref obj, newObj, objBefore) == objBefore)
            return;
    }
}
----------------------------------------

 public static void Swap<T>(ref T obj, Func<T,T> cloner = null, Action<T> op = null) where T : class
{
    bool swapped = false;
    while (!swapped)
    {
        var item = Volatile.Read(ref obj);
        T newItem = cloner(item);
        if (op != null)
        {
            op(newItem);
        }
        swapped = Interlocked.CompareExchange(ref obj, newItem, item) == item;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
620
5
Gpt3D_Clone620_5.cs 1 9
Gpt3D_Clone620_5.cs 10 23
----------------------------------------

public static void Swap < T > (ref T obj, Func < T, T > cloner, Action < T > op) where T : class {
    while (true) {
        var objBefore = Volatile.Read (ref obj);
        var newObj = cloner (objBefore);
        op (newObj);
        if (Interlocked.CompareExchange (ref obj, newObj, objBefore) == objBefore)
            return;
    }
}
----------------------------------------

  public static void Swap<T>(ref T obj, Func<T,T> cloner = null, Action<T> op = null) where T : class
{
    bool done = false;
    while (!done)
    {
        var current = Volatile.Read(ref obj);
        T result = cloner(current);
        if (op != null)
            op(result); 
        done = Interlocked.CompareExchange(ref obj, result, current) == current;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
620
6
Gpt3D_Clone620_6.cs 1 9
Gpt3D_Clone620_6.cs 10 23
----------------------------------------

public static void Swap < T > (ref T obj, Func < T, T > cloner, Action < T > op) where T : class {
    while (true) {
        var objBefore = Volatile.Read (ref obj);
        var newObj = cloner (objBefore);
        op (newObj);
        if (Interlocked.CompareExchange (ref obj, newObj, objBefore) == objBefore)
            return;
    }
}
----------------------------------------

 public static void Swap<T>(ref T obj, Func<T,T> cloner = null, Action<T> op = null) where T : class
{
    bool isSwapped = false;
    while (!isSwapped) 
    {
        T previousObj = Volatile.Read(ref obj);
        T newObj = cloner(previousObj);
        if (op != null)
            op(newObj);
        isSwapped = Interlocked.CompareExchange(ref obj, newObj, previousObj) == previousObj;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
620
7
Gpt3D_Clone620_7.cs 1 9
Gpt3D_Clone620_7.cs 10 23
----------------------------------------

public static void Swap < T > (ref T obj, Func < T, T > cloner, Action < T > op) where T : class {
    while (true) {
        var objBefore = Volatile.Read (ref obj);
        var newObj = cloner (objBefore);
        op (newObj);
        if (Interlocked.CompareExchange (ref obj, newObj, objBefore) == objBefore)
            return;
    }
}
----------------------------------------

 public static void Swap<T>(ref T obj, Func<T,T> cloner = null, Action<T> op = null) where T : class 
{  
    bool isSwapping = true; 
    while (isSwapping) 
    {  
        T obj_before = Volatile.Read(ref obj); 
        T newObj = cloner(obj_before); 
        op?.Invoke(newObj); 
        if (Interlocked.CompareExchange(ref obj, newObj, obj_before) == obj_before) 
            isSwapping = false; 
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
623
0
Gpt3D_Clone623_0.cs 1 13
Gpt3D_Clone623_0.cs 14 75
----------------------------------------

public string ReadCookie (string strCookieName) {
    foreach (string strCookie in HttpContext.Current.Response.Cookies.AllKeys) {
        if (strCookie == strCookieName) {
            return HttpContext.Current.Response.Cookies [strCookie].Value;
        }
    }
    foreach (string strCookie in HttpContext.Current.Request.Cookies.AllKeys) {
        if (strCookie == strCookieName) {
            return HttpContext.Current.Request.Cookies [strCookie].Value;
        }
    }
    return null;
}
----------------------------------------

 public string ReadCookie (string strCookieName) 
    { 
            if (HttpContext.Current.Response.Cookies[strCookieName] != null) 
            { 
                    return HttpContext.Current.Response.Cookies[strCookieName].Value; 
            } 
            if (HttpContext.Current.Request.Cookies[strCookieName] != null) 
            { 
                    return HttpContext.Current.Request.Cookies[strCookieName].Value; 
            } 
            return null; 
    }
 public string ReadCookie (string strCookieName) 
    { 
        string value = null; 
        List<string> cookieNames = HttpContext.Current.Response.Cookies.AllKeys.Union(HttpContext.Current.Request.Cookies.AllKeys).ToList(); 
        if (cookieNames.Contains(strCookieName)) 
        { 
            if (HttpContext.Current.Response.Cookies[strCookieName] != null) 
            { 
                value = HttpContext.Current.Response.Cookies[strCookieName].Value; 
            } 
            if (string.IsNullOrEmpty(value) && HttpContext.Current.Request.Cookies[strCookieName] != null) 
            { 
                value = HttpContext.Current.Request.Cookies[strCookieName].Value; 
            } 
        } 
        return value; 
    }
 public string ReadCookie (string strCookieName) 
{
    bool found = false;
    string cookieValue = null;
    if (HttpContext.Current.Response.Cookies.Count > 0)
    {
        foreach (HttpCookie cookie in HttpContext.Current.Response.Cookies)
        {
            if (cookie.Name == strCookieName)
            {
                cookieValue = cookie.Value;
                found = true;
                break;
            }
        }
    }
    if (!found)
    {
        foreach (HttpCookie cookie in HttpContext.Current.Request.Cookies)
        {
            if (cookie.Name == strCookieName)
            {
                cookieValue = cookie.Value;
                break;
            }
        }
    }
    return cookieValue;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
623
1
Gpt3D_Clone623_1.cs 1 13
Gpt3D_Clone623_1.cs 14 41
----------------------------------------

public string ReadCookie (string strCookieName) {
    foreach (string strCookie in HttpContext.Current.Response.Cookies.AllKeys) {
        if (strCookie == strCookieName) {
            return HttpContext.Current.Response.Cookies [strCookie].Value;
        }
    }
    foreach (string strCookie in HttpContext.Current.Request.Cookies.AllKeys) {
        if (strCookie == strCookieName) {
            return HttpContext.Current.Request.Cookies [strCookie].Value;
        }
    }
    return null;
}
----------------------------------------

 public string ReadCookie (string strCookieName) 
{
    string result = string.Empty;
    List<HttpCookie> cookieList = HttpContext.Current.Response.Cookies.AllKeys.Cast<string>().Select(str => HttpContext.Current.Response.Cookies[str]).ToList();
    if (cookieList.Any(cookie => cookie.Name.Equals(strCookieName)))
    {
        result = cookieList.First(cookie => cookie.Name.Equals(strCookieName)).Value;
    }
    else
    {
        cookieList = HttpContext.Current.Request.Cookies.AllKeys.Cast<string>().Select(str => HttpContext.Current.Request.Cookies[str]).ToList();
        if (cookieList.Any(cookie => cookie.Name.Equals(strCookieName)))
        {
            result = cookieList.First(cookie => cookie.Name.Equals(strCookieName)).Value;
        }
    }
    if (String.IsNullOrEmpty(result))
    {
        return null;
    }
    else
    {
        return result;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
623
2
Gpt3D_Clone623_2.cs 1 13
Gpt3D_Clone623_2.cs 14 45
----------------------------------------

public string ReadCookie (string strCookieName) {
    foreach (string strCookie in HttpContext.Current.Response.Cookies.AllKeys) {
        if (strCookie == strCookieName) {
            return HttpContext.Current.Response.Cookies [strCookie].Value;
        }
    }
    foreach (string strCookie in HttpContext.Current.Request.Cookies.AllKeys) {
        if (strCookie == strCookieName) {
            return HttpContext.Current.Request.Cookies [strCookie].Value;
        }
    }
    return null;
}
----------------------------------------

 public string ReadCookie (string strCookieName) 
{
    string theValue = null;
    string cookieName;
    for (int i = 0; i < HttpContext.Current.Response.Cookies.Count; i++)
    {
        cookieName = HttpContext.Current.Response.Cookies[i].Name;
        if (cookieName == strCookieName)
        {
            theValue = HttpContext.Current.Response.Cookies[i].Value;
        }
    }
    if (string.IsNullOrEmpty(theValue))
    {
        for (int i = 0; i < HttpContext.Current.Request.Cookies.Count; i++)
        {
            cookieName = HttpContext.Current.Request.Cookies[i].Name;
            if (cookieName == strCookieName)
            {
                theValue = HttpContext.Current.Request.Cookies[i].Value;
            }
        }
    }
    return theValue;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
623
3
Gpt3D_Clone623_3.cs 1 13
Gpt3D_Clone623_3.cs 14 75
----------------------------------------

public string ReadCookie (string strCookieName) {
    foreach (string strCookie in HttpContext.Current.Response.Cookies.AllKeys) {
        if (strCookie == strCookieName) {
            return HttpContext.Current.Response.Cookies [strCookie].Value;
        }
    }
    foreach (string strCookie in HttpContext.Current.Request.Cookies.AllKeys) {
        if (strCookie == strCookieName) {
            return HttpContext.Current.Request.Cookies [strCookie].Value;
        }
    }
    return null;
}
----------------------------------------

 public string ReadCookie (string strCookieName) 
    { 
            if (HttpContext.Current.Response.Cookies[strCookieName] != null) 
            { 
                    return HttpContext.Current.Response.Cookies[strCookieName].Value; 
            } 
            if (HttpContext.Current.Request.Cookies[strCookieName] != null) 
            { 
                    return HttpContext.Current.Request.Cookies[strCookieName].Value; 
            } 
            return null; 
    }
 public string ReadCookie (string strCookieName) 
    { 
        string value = null; 
        List<string> cookieNames = HttpContext.Current.Response.Cookies.AllKeys.Union(HttpContext.Current.Request.Cookies.AllKeys).ToList(); 
        if (cookieNames.Contains(strCookieName)) 
        { 
            if (HttpContext.Current.Response.Cookies[strCookieName] != null) 
            { 
                value = HttpContext.Current.Response.Cookies[strCookieName].Value; 
            } 
            if (string.IsNullOrEmpty(value) && HttpContext.Current.Request.Cookies[strCookieName] != null) 
            { 
                value = HttpContext.Current.Request.Cookies[strCookieName].Value; 
            } 
        } 
        return value; 
    }
 public string ReadCookie (string strCookieName) 
{
    bool found = false;
    string cookieValue = null;
    if (HttpContext.Current.Response.Cookies.Count > 0)
    {
        foreach (HttpCookie cookie in HttpContext.Current.Response.Cookies)
        {
            if (cookie.Name == strCookieName)
            {
                cookieValue = cookie.Value;
                found = true;
                break;
            }
        }
    }
    if (!found)
    {
        foreach (HttpCookie cookie in HttpContext.Current.Request.Cookies)
        {
            if (cookie.Name == strCookieName)
            {
                cookieValue = cookie.Value;
                break;
            }
        }
    }
    return cookieValue;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
623
4
Gpt3D_Clone623_4.cs 1 13
Gpt3D_Clone623_4.cs 14 36
----------------------------------------

public string ReadCookie (string strCookieName) {
    foreach (string strCookie in HttpContext.Current.Response.Cookies.AllKeys) {
        if (strCookie == strCookieName) {
            return HttpContext.Current.Response.Cookies [strCookie].Value;
        }
    }
    foreach (string strCookie in HttpContext.Current.Request.Cookies.AllKeys) {
        if (strCookie == strCookieName) {
            return HttpContext.Current.Request.Cookies [strCookie].Value;
        }
    }
    return null;
}
----------------------------------------

 public string ReadCookie (string strCookieName) 
{
    string result = string.Empty;
      if (HttpContext.Current.Response.Cookies.Count > 0)
      {
           if (HttpContext.Current.Response.Cookies[strCookieName] != null)
           {
               result = HttpContext.Current.Response.Cookies[strCookieName].Value;
           }
      }
      else if (HttpContext.Current.Request.Cookies.Count > 0)
      {
            if (HttpContext.Current.Request.Cookies[strCookieName] != null)
            {
                  result = HttpContext.Current.Request.Cookies[strCookieName].Value;
            }
      }
       
      return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
623
5
Gpt3D_Clone623_5.cs 1 13
Gpt3D_Clone623_5.cs 14 36
----------------------------------------

public string ReadCookie (string strCookieName) {
    foreach (string strCookie in HttpContext.Current.Response.Cookies.AllKeys) {
        if (strCookie == strCookieName) {
            return HttpContext.Current.Response.Cookies [strCookie].Value;
        }
    }
    foreach (string strCookie in HttpContext.Current.Request.Cookies.AllKeys) {
        if (strCookie == strCookieName) {
            return HttpContext.Current.Request.Cookies [strCookie].Value;
        }
    }
    return null;
}
----------------------------------------

 public string ReadCookie (string strCookieName) 
{
    if (!String.IsNullOrEmpty(strCookieName))
    {
        foreach (var cookie in HttpContext.Current.Response.Cookies)
        {
            if (cookie.Name.Equals(strCookieName))
            {
                return HttpContext.Current.Response.Cookies[cookie.Name].Value;
            }
        }
        foreach (var cookie in HttpContext.Current.Request.Cookies)
        {
            if (cookie.Name.Equals(strCookieName))
            {
                return HttpContext.Current.Request.Cookies[cookie.Name].Value;
            }
        }
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
623
6
Gpt3D_Clone623_6.cs 1 13
Gpt3D_Clone623_6.cs 14 27
----------------------------------------

public string ReadCookie (string strCookieName) {
    foreach (string strCookie in HttpContext.Current.Response.Cookies.AllKeys) {
        if (strCookie == strCookieName) {
            return HttpContext.Current.Response.Cookies [strCookie].Value;
        }
    }
    foreach (string strCookie in HttpContext.Current.Request.Cookies.AllKeys) {
        if (strCookie == strCookieName) {
            return HttpContext.Current.Request.Cookies [strCookie].Value;
        }
    }
    return null;
}
----------------------------------------

 public string ReadCookie (string strCookieName) 
{
    if (HttpContext.Current.Response.Cookies[strCookieName] != null)
    {
        return HttpContext.Current.Response.Cookies[strCookieName].Value;
    }
    else if (HttpContext.Current.Request.Cookies[strCookieName] != null)
    {
        return HttpContext.Current.Request.Cookies[strCookieName].Value;
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
623
7
Gpt3D_Clone623_7.cs 1 13
Gpt3D_Clone623_7.cs 14 29
----------------------------------------

public string ReadCookie (string strCookieName) {
    foreach (string strCookie in HttpContext.Current.Response.Cookies.AllKeys) {
        if (strCookie == strCookieName) {
            return HttpContext.Current.Response.Cookies [strCookie].Value;
        }
    }
    foreach (string strCookie in HttpContext.Current.Request.Cookies.AllKeys) {
        if (strCookie == strCookieName) {
            return HttpContext.Current.Request.Cookies [strCookie].Value;
        }
    }
    return null;
}
----------------------------------------

 public string ReadCookie (string strCookieName) 
{
    if (HttpContext.Current.Request.Cookies[strCookieName] != null &&
       HttpContext.Current.Request.Cookies[strCookieName].Value != null)
    {
        return HttpContext.Current.Request.Cookies[strCookieName].Value;
    }
    if (HttpContext.Current.Response.Cookies[strCookieName] != null &&
           HttpContext.Current.Response.Cookies[strCookieName].Value != null)
    {
        return HttpContext.Current.Response.Cookies[strCookieName].Value;
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
623
8
Gpt3D_Clone623_8.cs 1 13
Gpt3D_Clone623_8.cs 14 28
----------------------------------------

public string ReadCookie (string strCookieName) {
    foreach (string strCookie in HttpContext.Current.Response.Cookies.AllKeys) {
        if (strCookie == strCookieName) {
            return HttpContext.Current.Response.Cookies [strCookie].Value;
        }
    }
    foreach (string strCookie in HttpContext.Current.Request.Cookies.AllKeys) {
        if (strCookie == strCookieName) {
            return HttpContext.Current.Request.Cookies [strCookie].Value;
        }
    }
    return null;
}
----------------------------------------

 public string ReadCookie (string strCookieName) 
{ 
    string theValue = String.Empty; 
    if ((HttpContext.Current.Response.Cookies.Count > 0 && HttpContext.Current.Response.Cookies[strCookieName] != null) 
        || 
        (HttpContext.Current.Request.Cookies.Count > 0 && HttpContext.Current.Request.Cookies[strCookieName] != null)) 
    { 
        HttpCookie cookie = HttpContext.Current.Response.Cookies[strCookieName] 
                                 ?? HttpContext.Current.Request.Cookies[strCookieName]; 
        theValue = cookie.Value; 
    } 
    return theValue; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
623
9
Gpt3D_Clone623_9.cs 1 13
Gpt3D_Clone623_9.cs 14 27
----------------------------------------

public string ReadCookie (string strCookieName) {
    foreach (string strCookie in HttpContext.Current.Response.Cookies.AllKeys) {
        if (strCookie == strCookieName) {
            return HttpContext.Current.Response.Cookies [strCookie].Value;
        }
    }
    foreach (string strCookie in HttpContext.Current.Request.Cookies.AllKeys) {
        if (strCookie == strCookieName) {
            return HttpContext.Current.Request.Cookies [strCookie].Value;
        }
    }
    return null;
}
----------------------------------------

 public string ReadCookie (string strCookieName) 
    { 
            if (HttpContext.Current.Response.Cookies[strCookieName] != null) 
            { 
                    return HttpContext.Current.Response.Cookies[strCookieName].Value; 
            } 
            if (HttpContext.Current.Request.Cookies[strCookieName] != null) 
            { 
                    return HttpContext.Current.Request.Cookies[strCookieName].Value; 
            } 
            return null; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
626
2
Gpt3D_Clone626_2.cs 1 23
Gpt3D_Clone626_2.cs 24 123
----------------------------------------

private void mainForm_KeyDown (object sender, KeyEventArgs e) {
    if (e.KeyCode.Equals (Keys.Enter)) {
        if (txtUserName.Text.Length > 0) {
            if (txtUserName.Focused) {
                Regex rg = new Regex (txtUserName.Text, RegexOptions.IgnoreCase);
                for (int i = 0; i < txtUserName.AutoCompleteCustomSource.Count; i ++) {
                    if (rg.IsMatch (txtUserName.AutoCompleteCustomSource [i])) {
                        txtUserName.Text = txtUserName.AutoCompleteCustomSource [i];
                        txtPassword.Focus ();
                        return;
                    }
                }
            }
            if (txtPassword.Text.Length > 0) {
                btnLogin_Click (null, null);
            } else {
                txtPassword.Focus ();
            }
        } else {
            txtUserName.Focus ();
        }
    }
}
----------------------------------------

  private void mainForm_KeyDown(object sender, KeyEventArgs e)
    {
        if (e.KeyCode.Equals(Keys.Enter))
        {
            if (txtUserName.Text.Length > 0)
            {
                if (txtUserName.Focused)
                {
                    bool upperCaseMatch = false;
                    foreach (string source in txtUserName.AutoCompleteCustomSource)
                    {
                        if (source.ToUpperInvariant().Equals(txtUserName.Text.ToUpperInvariant()))
                        {
                            txtUserName.Text = source;
                            txtPassword.Focus();
                            upperCaseMatch = true;
                            break;
                        }
                    }
                    if (upperCaseMatch)
                    {
                        return;
                    }
                }
                if (String.IsNullOrWhiteSpace(txtPassword.Text))
                {
                    txtPassword.Focus();
                }
                else
                {
                    btnLogin_Click(null, null);
                }
            }
            else
            {
                txtUserName.Focus();
            }
        }
    }
    
    
 private void MainForm_KeyDown (object sender, KeyEventArgs e) {
        if (e.KeyCode.Equals(Keys.Enter))
        {
            if (String.IsNullOrEmpty(txtUserName.Text))
            {
                txtUserName.Focus();
            }
            else
            {
                if (txtUserName.Focused)
                {
                    foreach (string source in txtUserName.AutoCompleteCustomSource)
                    {
                        if (String.Equals(source, txtUserName.Text, StringComparison.OrdinalIgnoreCase))
                        {
                            txtUserName.Text = source;
                            txtPassword.Focus();
                            return;
                        }
                    }
                }
                if  (String.IsNullOrEmpty(txtPassword.Text))
                {
                    txtPassword.Focus();
                }
                else
                {
                    btnLogin_Click(null, null);
                }
            }
        }
    }
    
    
     private void mainForm_KeyDown (object sender, KeyEventArgs e) {
    if (e.KeyCode.Equals (Keys.Enter)) {
        if (txtUserName.Text.Length > 0) {
            if (txtUserName.Focused) {
                for (int i = 0; i < txtUserName.AutoCompleteCustomSource.Count; i ++) {
                    if (txtUserName.Text.ToLower() == txtUserName.AutoCompleteCustomSource[i].ToLower()) {
                        txtUserName.Text = txtUserName.AutoCompleteCustomSource[i];
                        txtPassword.Focus ();
                        return;
                    }
                }
            }
            if (txtPassword.Text.Length > 0) {
                btnLogin_Click (null, null);
            } else {
                txtPassword.Focus ();
            }
        } else {
            txtUserName.Focus ();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
626
4
Gpt3D_Clone626_4.cs 1 23
Gpt3D_Clone626_4.cs 24 64
----------------------------------------

private void mainForm_KeyDown (object sender, KeyEventArgs e) {
    if (e.KeyCode.Equals (Keys.Enter)) {
        if (txtUserName.Text.Length > 0) {
            if (txtUserName.Focused) {
                Regex rg = new Regex (txtUserName.Text, RegexOptions.IgnoreCase);
                for (int i = 0; i < txtUserName.AutoCompleteCustomSource.Count; i ++) {
                    if (rg.IsMatch (txtUserName.AutoCompleteCustomSource [i])) {
                        txtUserName.Text = txtUserName.AutoCompleteCustomSource [i];
                        txtPassword.Focus ();
                        return;
                    }
                }
            }
            if (txtPassword.Text.Length > 0) {
                btnLogin_Click (null, null);
            } else {
                txtPassword.Focus ();
            }
        } else {
            txtUserName.Focus ();
        }
    }
}
----------------------------------------

  private void mainForm_KeyDown(object sender, KeyEventArgs e)
    {
        if (e.KeyCode.Equals(Keys.Enter))
        {
            if (txtUserName.Text.Length > 0)
            {
                if (txtUserName.Focused)
                {
                    bool upperCaseMatch = false;
                    foreach (string source in txtUserName.AutoCompleteCustomSource)
                    {
                        if (source.ToUpperInvariant().Equals(txtUserName.Text.ToUpperInvariant()))
                        {
                            txtUserName.Text = source;
                            txtPassword.Focus();
                            upperCaseMatch = true;
                            break;
                        }
                    }
                    if (upperCaseMatch)
                    {
                        return;
                    }
                }
                if (String.IsNullOrWhiteSpace(txtPassword.Text))
                {
                    txtPassword.Focus();
                }
                else
                {
                    btnLogin_Click(null, null);
                }
            }
            else
            {
                txtUserName.Focus();
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
626
5
Gpt3D_Clone626_5.cs 1 23
Gpt3D_Clone626_5.cs 24 58
----------------------------------------

private void mainForm_KeyDown (object sender, KeyEventArgs e) {
    if (e.KeyCode.Equals (Keys.Enter)) {
        if (txtUserName.Text.Length > 0) {
            if (txtUserName.Focused) {
                Regex rg = new Regex (txtUserName.Text, RegexOptions.IgnoreCase);
                for (int i = 0; i < txtUserName.AutoCompleteCustomSource.Count; i ++) {
                    if (rg.IsMatch (txtUserName.AutoCompleteCustomSource [i])) {
                        txtUserName.Text = txtUserName.AutoCompleteCustomSource [i];
                        txtPassword.Focus ();
                        return;
                    }
                }
            }
            if (txtPassword.Text.Length > 0) {
                btnLogin_Click (null, null);
            } else {
                txtPassword.Focus ();
            }
        } else {
            txtUserName.Focus ();
        }
    }
}
----------------------------------------

  private void MainForm_KeyDown (object sender, KeyEventArgs e) {
        if (e.KeyCode.Equals(Keys.Enter))
        {
            if (String.IsNullOrWhiteSpace(txtUserName.Text))
            {
                txtUserName.Focus();
            }
            else
            {
                if (txtUserName.Focused)
                {
                    foreach (string source in txtUserName.AutoCompleteCustomSource)
                    {
                        if (source.Equals(txtUserName.Text, StringComparison.OrdinalIgnoreCase))
                        {
                            txtUserName.Text = source;
                            txtPassword.Focus();
                            return;
                        }
                    }
                }
                if  (String.IsNullOrWhiteSpace(txtPassword.Text))
                {
                    txtPassword.Focus();
                }
                else
                {
                    btnLogin_Click(null, null);
                }
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
628
0
Gpt3D_Clone628_0.cs 1 9
Gpt3D_Clone628_0.cs 10 25
----------------------------------------

public void add (object entry) {
    node newNode = new node (entry);
    if (headNode == null)
        headNode = newNode;
    if (tailNode != null)
        tailNode.next = newNode;
    tailNode = newNode;
    ++ node_count;
}
----------------------------------------

public void add(Object entry) {
    Node newNode = new Node(entry);
    if (headNode == null)
        headNode = newNode;
    else {
        Node current = headNode;
        while (current.next != null)
            current = current.next;
        current.next = newNode; 
        tailNode = newNode;
    }
    node_count++;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
628
1
Gpt3D_Clone628_1.cs 1 9
Gpt3D_Clone628_1.cs 10 27
----------------------------------------

public void add (object entry) {
    node newNode = new node (entry);
    if (headNode == null)
        headNode = newNode;
    if (tailNode != null)
        tailNode.next = newNode;
    tailNode = newNode;
    ++ node_count;
}
----------------------------------------

public void add(Object entry) {
   Node newNode = new Node(entry);
   if(headNode == null) {
      headNode = tailNode = newNode;
   } 
   else {
      Node tempNode = headNode;
      while(tempNode.next != null) {
         tempNode = tempNode.next;
      }
      tempNode.next = newNode;
      tailNode = newNode;
   }
   node_count++;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
628
2
Gpt3D_Clone628_2.cs 1 9
Gpt3D_Clone628_2.cs 10 25
----------------------------------------

public void add (object entry) {
    node newNode = new node (entry);
    if (headNode == null)
        headNode = newNode;
    if (tailNode != null)
        tailNode.next = newNode;
    tailNode = newNode;
    ++ node_count;
}
----------------------------------------

public void add(Object entry) {
    Node currentNode = new Node(entry);
    if (headNode == null) {
        headNode = tailNode = currentNode; 
    } else {
        Node iterator = headNode;
        while(iterator.next != null) {
            iterator = iterator.next;
        }
        iterator.next = currentNode;
        tailNode = currentNode;
    }
    node_count++;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
628
3
Gpt3D_Clone628_3.cs 1 9
Gpt3D_Clone628_3.cs 10 25
----------------------------------------

public void add (object entry) {
    node newNode = new node (entry);
    if (headNode == null)
        headNode = newNode;
    if (tailNode != null)
        tailNode.next = newNode;
    tailNode = newNode;
    ++ node_count;
}
----------------------------------------

public void add(Object entry) {
    Node node = new Node(entry);
    if (headNode == null)
        headNode = node;
    else {
        Node temp = headNode;
        while (temp.next != null)
            temp = temp.next;
        temp.next = node;
        tailNode = node;
    }
    node_count++;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
628
4
Gpt3D_Clone628_4.cs 1 9
Gpt3D_Clone628_4.cs 10 25
----------------------------------------

public void add (object entry) {
    node newNode = new node (entry);
    if (headNode == null)
        headNode = newNode;
    if (tailNode != null)
        tailNode.next = newNode;
    tailNode = newNode;
    ++ node_count;
}
----------------------------------------

public void add(Object entry) {
    Node newNode = new Node(entry);
    if (headNode == null)
        headNode = newNode;
    else {
        Node currentNode = headNode;
        while (currentNode.next != null) {
            currentNode = currentNode.next;
        }
        currentNode.next = newNode;
    }
    tailNode = newNode;
    node_count++;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
628
5
Gpt3D_Clone628_5.cs 1 9
Gpt3D_Clone628_5.cs 10 26
----------------------------------------

public void add (object entry) {
    node newNode = new node (entry);
    if (headNode == null)
        headNode = newNode;
    if (tailNode != null)
        tailNode.next = newNode;
    tailNode = newNode;
    ++ node_count;
}
----------------------------------------

public void add(Object entry) {
    Node newNode = new Node(entry);
    if (headNode == null) {
        headNode = tailNode = newNode;
    } else {
        Node currentNode = headNode;
        while (currentNode.next != null)
            currentNode = currentNode.next;
        currentNode.next = newNode;
        tailNode = newNode;
    }
    node_count++;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
628
6
Gpt3D_Clone628_6.cs 1 9
Gpt3D_Clone628_6.cs 10 24
----------------------------------------

public void add (object entry) {
    node newNode = new node (entry);
    if (headNode == null)
        headNode = newNode;
    if (tailNode != null)
        tailNode.next = newNode;
    tailNode = newNode;
    ++ node_count;
}
----------------------------------------

     public void add(object entry) {  
        Node newNode = new Node(entry);  
        if (headNode == null) {  
            headNode = newNode;  
        }  
        Node lastNode = headNode;  
        while (lastNode.next != null) {  
            lastNode = lastNode.next;  
        }  
        lastNode.next = newNode;  
        tailNode = newNode;  
        node_count++;  
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
628
7
Gpt3D_Clone628_7.cs 1 9
Gpt3D_Clone628_7.cs 10 24
----------------------------------------

public void add (object entry) {
    node newNode = new node (entry);
    if (headNode == null)
        headNode = newNode;
    if (tailNode != null)
        tailNode.next = newNode;
    tailNode = newNode;
    ++ node_count;
}
----------------------------------------

     public void add(object entry) {  
        Node newNode = new Node(entry);  
        if (headNode == null) {  
            headNode = newNode;  
        }  
        Node lastNode = headNode;  
        while (lastNode.next != null) {  
            lastNode = lastNode.next;  
        }  
        lastNode.next = newNode;  
        tailNode = newNode;  
        node_count++;  
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
628
8
Gpt3D_Clone628_8.cs 1 9
Gpt3D_Clone628_8.cs 10 21
----------------------------------------

public void add (object entry) {
    node newNode = new node (entry);
    if (headNode == null)
        headNode = newNode;
    if (tailNode != null)
        tailNode.next = newNode;
    tailNode = newNode;
    ++ node_count;
}
----------------------------------------

public void add(object entry) {
    Node newNode = new Node(entry);
    if(headNode == null) {
        headNode = tailNode = newNode; 
    } else {
        tailNode.next = newNode;
        tailNode = newNode; 
    }
    node_count++; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
630
0
Gpt3D_Clone630_0.cs 1 18
Gpt3D_Clone630_0.cs 19 54
----------------------------------------

public void readArchive () {
    StreamReader SR;
    string S;
    int i = 0;
    SR = File.OpenText (@"the path here for the excel archive");
    S = SR.ReadToEnd ();
    SR.Close ();
    Console.WriteLine (S);
    string [] words = S.Split (';');
    Array.Sort (words);
    for (i = 0; i < words.Length; i ++)
        Console.WriteLine (words [i]);
    StreamWriter SW;
    SW = File.CreateText (@"the path here for the .txt");
    for (i = 0; i < words.Length; i ++)
        SW.WriteLine (words [i]);
    SW.Close ();
}
----------------------------------------

 public void readArchive()
{
    string idPath = @"the path here for the excel archive";
    string content = string.Empty;
    string result = "";
    //Read contents from specified file
    using (StreamReader sr = File.OpenText(idPath)) 
    {
        content = sr.ReadToEnd();
    }
    //Sort content line by line 
    string[] lines = content.Split(Environment.NewLine);
    foreach (string line in lines)
    {
        if(!String.IsNullOrEmpty(line))
        {
            Console.WriteLine(line);
            string[] words = line.Split(';');
            Array.Sort(words);
            foreach (string word in words) 
            {
                result += word + ";";
                Console.WriteLine(word);
            }
        }
    }
    //Write sorted content to the specified file
    StreamWriter outputFile = new StreamWriter(@"the path here for the .txt");
    outputFile.WriteLine(result);
    outputFile.Close();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
630
1
Gpt3D_Clone630_1.cs 1 18
Gpt3D_Clone630_1.cs 19 44
----------------------------------------

public void readArchive () {
    StreamReader SR;
    string S;
    int i = 0;
    SR = File.OpenText (@"the path here for the excel archive");
    S = SR.ReadToEnd ();
    SR.Close ();
    Console.WriteLine (S);
    string [] words = S.Split (';');
    Array.Sort (words);
    for (i = 0; i < words.Length; i ++)
        Console.WriteLine (words [i]);
    StreamWriter SW;
    SW = File.CreateText (@"the path here for the .txt");
    for (i = 0; i < words.Length; i ++)
        SW.WriteLine (words [i]);
    SW.Close ();
}
----------------------------------------

 public void readArchive()
{
    string idPath = @"the path here for the excel archive";
    string content = string.Empty;
    string result = "";
    using (StreamReader sr = File.OpenText(idPath)) 
    {
        while ((content = sr.ReadLine()) != null)
        {
            Console.WriteLine(content);
            string[] words = content.Split(';');
            Array.Sort(words);
            foreach (string word in words) 
            {
                result += word + ";";
                Console.WriteLine(word);
            }
        }
    }
    StreamWriter outputFile = new StreamWriter(@"the path here for the .txt");
    outputFile.WriteLine(result);
    outputFile.Close();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
630
2
Gpt3D_Clone630_2.cs 1 18
Gpt3D_Clone630_2.cs 19 41
----------------------------------------

public void readArchive () {
    StreamReader SR;
    string S;
    int i = 0;
    SR = File.OpenText (@"the path here for the excel archive");
    S = SR.ReadToEnd ();
    SR.Close ();
    Console.WriteLine (S);
    string [] words = S.Split (';');
    Array.Sort (words);
    for (i = 0; i < words.Length; i ++)
        Console.WriteLine (words [i]);
    StreamWriter SW;
    SW = File.CreateText (@"the path here for the .txt");
    for (i = 0; i < words.Length; i ++)
        SW.WriteLine (words [i]);
    SW.Close ();
}
----------------------------------------

 public void readArchive()
{
    string[] wordsArray;
    string wordsString;
    List<string> sortedList;
    string thePath = @"the path here for the excel archive";
    StreamReader streamReader = new StreamReader(thePath);
    wordsString = streamReader.ReadToEnd();
    wordsArray = wordsString.Split(';');
    sortedList = wordsArray.OrderBy(x => x).ToList();
    streamReader.Close();
    StreamWriter streamWriter = new StreamWriter(@"the path here for the .txt");
    foreach (string word in sortedList)
    {
        Console.WriteLine(word);
        streamWriter.WriteLine(word);
    }
    streamWriter.Close();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
630
3
Gpt3D_Clone630_3.cs 1 18
Gpt3D_Clone630_3.cs 19 44
----------------------------------------

public void readArchive () {
    StreamReader SR;
    string S;
    int i = 0;
    SR = File.OpenText (@"the path here for the excel archive");
    S = SR.ReadToEnd ();
    SR.Close ();
    Console.WriteLine (S);
    string [] words = S.Split (';');
    Array.Sort (words);
    for (i = 0; i < words.Length; i ++)
        Console.WriteLine (words [i]);
    StreamWriter SW;
    SW = File.CreateText (@"the path here for the .txt");
    for (i = 0; i < words.Length; i ++)
        SW.WriteLine (words [i]);
    SW.Close ();
}
----------------------------------------

 public void readArchive()
{
    string content = "";
    string result = "";
    using (StreamReader sr = new StreamReader(@"the path here for the excel archive"))
    {
        content = sr.ReadToEnd();
    }
    string[] wordsArray = content.Split(';');
    wordsArray = wordsArray.OrderBy(x => x).ToArray();
    foreach (string word in wordsArray)
    {
        Console.WriteLine(word);
        result += word + ";";
    }
    using (StreamWriter sw = new StreamWriter(@"the path here for the .txt"))
    {
        sw.WriteLine(result);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
630
4
Gpt3D_Clone630_4.cs 1 18
Gpt3D_Clone630_4.cs 19 41
----------------------------------------

public void readArchive () {
    StreamReader SR;
    string S;
    int i = 0;
    SR = File.OpenText (@"the path here for the excel archive");
    S = SR.ReadToEnd ();
    SR.Close ();
    Console.WriteLine (S);
    string [] words = S.Split (';');
    Array.Sort (words);
    for (i = 0; i < words.Length; i ++)
        Console.WriteLine (words [i]);
    StreamWriter SW;
    SW = File.CreateText (@"the path here for the .txt");
    for (i = 0; i < words.Length; i ++)
        SW.WriteLine (words [i]);
    SW.Close ();
}
----------------------------------------

 public void readArchive()
{
    StreamReader SR = new StreamReader(@"the path here for the excel archive");
    string S = SR.ReadToEnd();
    SR.Close();
    Console.WriteLine(S);
    string[] words = Regex.Split(S, ";");
    Array.Sort(words);
    string result = "";
    foreach (string word in words)
    {
        result += word + ";";
        Console.WriteLine(word);
    }
    StreamWriter SW = new StreamWriter(@"the path here for the .txt");
    SW.WriteLine(result);
    SW.Close();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
630
5
Gpt3D_Clone630_5.cs 1 18
Gpt3D_Clone630_5.cs 19 43
----------------------------------------

public void readArchive () {
    StreamReader SR;
    string S;
    int i = 0;
    SR = File.OpenText (@"the path here for the excel archive");
    S = SR.ReadToEnd ();
    SR.Close ();
    Console.WriteLine (S);
    string [] words = S.Split (';');
    Array.Sort (words);
    for (i = 0; i < words.Length; i ++)
        Console.WriteLine (words [i]);
    StreamWriter SW;
    SW = File.CreateText (@"the path here for the .txt");
    for (i = 0; i < words.Length; i ++)
        SW.WriteLine (words [i]);
    SW.Close ();
}
----------------------------------------

 public void readArchive()
{
    string[] wordsArray;
    string wordsString;
    List<string> sortedList;
    using (StreamReader sr = File.OpenText(@"the path here for the excel archive"))
    {
        wordsString = sr.ReadToEnd();
        wordsArray = wordsString.Split(';');
    }
    sortedList = wordsArray.OrderBy(x => x).ToList();
    using (StreamWriter sw = File.CreateText(@"the path here for the .txt"))
    {
        foreach (string word in sortedList)
        {
            Console.WriteLine(word);
            sw.WriteLine(word);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
630
6
Gpt3D_Clone630_6.cs 1 18
Gpt3D_Clone630_6.cs 19 41
----------------------------------------

public void readArchive () {
    StreamReader SR;
    string S;
    int i = 0;
    SR = File.OpenText (@"the path here for the excel archive");
    S = SR.ReadToEnd ();
    SR.Close ();
    Console.WriteLine (S);
    string [] words = S.Split (';');
    Array.Sort (words);
    for (i = 0; i < words.Length; i ++)
        Console.WriteLine (words [i]);
    StreamWriter SW;
    SW = File.CreateText (@"the path here for the .txt");
    for (i = 0; i < words.Length; i ++)
        SW.WriteLine (words [i]);
    SW.Close ();
}
----------------------------------------

 public void readArchive()
{
    string[] wordsArray;
    string wordsString;
    List<string> sortedList;
    StreamReader streamReader = new StreamReader(@"the path here for the excel archive");
    wordsString = streamReader.ReadToEnd();
    wordsArray = wordsString.Split(';');
    streamReader.Close();
    sortedList = wordsArray.OrderBy(x => x).ToList();
    StreamWriter streamWriter = new StreamWriter(@"the path here for the .txt");
    foreach (string word in sortedList)
    {
        Console.WriteLine(word);
        streamWriter.WriteLine(word);
    }
    streamWriter.Close();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
630
7
Gpt3D_Clone630_7.cs 1 18
Gpt3D_Clone630_7.cs 19 43
----------------------------------------

public void readArchive () {
    StreamReader SR;
    string S;
    int i = 0;
    SR = File.OpenText (@"the path here for the excel archive");
    S = SR.ReadToEnd ();
    SR.Close ();
    Console.WriteLine (S);
    string [] words = S.Split (';');
    Array.Sort (words);
    for (i = 0; i < words.Length; i ++)
        Console.WriteLine (words [i]);
    StreamWriter SW;
    SW = File.CreateText (@"the path here for the .txt");
    for (i = 0; i < words.Length; i ++)
        SW.WriteLine (words [i]);
    SW.Close ();
}
----------------------------------------

 public void readArchive()
{
    string[] wordsArray;
    string wordsString = "";
    List<string> sortedList;
    using (StreamReader sr = new StreamReader(@"the path here for the excel archive"))
    {
        wordsString = sr.ReadToEnd();
        wordsArray = wordsString.Split(';');
    }
    sortedList = wordsArray.OrderBy(x => x).ToList();
    using (StreamWriter sw = new StreamWriter(@"the path here for the .txt"))
    {
        foreach (string word in sortedList)
        {
            Console.WriteLine(word);
            sw.WriteLine(word);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
630
8
Gpt3D_Clone630_8.cs 1 18
Gpt3D_Clone630_8.cs 19 41
----------------------------------------

public void readArchive () {
    StreamReader SR;
    string S;
    int i = 0;
    SR = File.OpenText (@"the path here for the excel archive");
    S = SR.ReadToEnd ();
    SR.Close ();
    Console.WriteLine (S);
    string [] words = S.Split (';');
    Array.Sort (words);
    for (i = 0; i < words.Length; i ++)
        Console.WriteLine (words [i]);
    StreamWriter SW;
    SW = File.CreateText (@"the path here for the .txt");
    for (i = 0; i < words.Length; i ++)
        SW.WriteLine (words [i]);
    SW.Close ();
}
----------------------------------------

 public void readArchive()
{
    StreamReader SR = File.OpenText(@"the path here for the excel archive");
    string S = SR.ReadToEnd();
    SR.Close();
    Console.WriteLine(S);
    string[] words = S.Split(';');
    Array.Sort(words);
    string result = "";
    foreach(string word in words)
    {
        result += word + ";";
        Console.WriteLine(word);
    } 
    StreamWriter SW = File.CreateText(@"the path here for the .txt");
    SW.WriteLine(result);
    SW.Close();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
630
9
Gpt3D_Clone630_9.cs 1 18
Gpt3D_Clone630_9.cs 19 43
----------------------------------------

public void readArchive () {
    StreamReader SR;
    string S;
    int i = 0;
    SR = File.OpenText (@"the path here for the excel archive");
    S = SR.ReadToEnd ();
    SR.Close ();
    Console.WriteLine (S);
    string [] words = S.Split (';');
    Array.Sort (words);
    for (i = 0; i < words.Length; i ++)
        Console.WriteLine (words [i]);
    StreamWriter SW;
    SW = File.CreateText (@"the path here for the .txt");
    for (i = 0; i < words.Length; i ++)
        SW.WriteLine (words [i]);
    SW.Close ();
}
----------------------------------------

 public void readArchive()
{
    string content = "";
    using (StreamReader sr = File.OpenText(@"the path here for the excel archive"))
    {
        content = sr.ReadToEnd();
    }
    string[] wordsArray = content.Split(';');
    Array.Sort(wordsArray);
    string result = String.Join(";",wordsArray);
    using (StreamWriter sw = File.CreateText(@"the path here for the .txt"))
    {
        foreach (string word in wordsArray)
        {
            Console.WriteLine(word);
        }
        sw.WriteLine(result);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
632
0
Gpt3D_Clone632_0.cs 1 20
Gpt3D_Clone632_0.cs 21 48
----------------------------------------

public static string RenderPartialView (string controllerName, string partialView, object model) {
    var context = new HttpContextWrapper (System.Web.HttpContext.Current) as HttpContextBase;
    var routes = new System.Web.Routing.RouteData ();
    routes.Values.Add ("controller", controllerName);
    var requestContext = new RequestContext (context, routes);
    string requiredString = requestContext.RouteData.GetRequiredString ("controller");
    var controllerFactory = ControllerBuilder.Current.GetControllerFactory ();
    var controller = controllerFactory.CreateController (requestContext, requiredString) as ControllerBase;
    controller.ControllerContext = new ControllerContext (context, routes, controller);
    var ViewData = new ViewDataDictionary ();
    var TempData = new TempDataDictionary ();
    ViewData.Model = model;
    using (var sw = new StringWriter ())
    {
        var viewResult = ViewEngines.Engines.FindPartialView (controller.ControllerContext, partialView);
        var viewContext = new ViewContext (controller.ControllerContext, viewResult.View, ViewData, TempData, sw);
        viewResult.View.Render (viewContext, sw);
        return sw.GetStringBuilder ().ToString ();
    }
}
----------------------------------------

public static string ReturnStringView(string controllerName, string partialView, object model)  
{  
    HttpRequestBase request = new HttpRequestWrapper(HttpContext.Current.Request);  
    HttpResponseBase response = new HttpResponseWrapper(HttpContext.Current.Response);  
    RouteData routeData = RouteTable.Routes.GetRouteData(new HttpContextWrapper(HttpContext.Current));  
    if (routeData != null)  
    {  
        request.RequestContext.RouteData = routeData;  
    }  
    request.RequestContext.RouteData.Values.Add("controller", controllerName);  
    var controller = ControllerBuilder.Current.GetControllerFactory().CreateController(request.RequestContext, controllerName);  
    if (controller != null)  
    {  
        controller.ControllerContext = new ControllerContext(request.RequestContext, controller);  
        var viewData = new ViewDataDictionary { Model = model };  
  
        using (var sw = new StringWriter())  
        {  
            var viewResult = ViewEngines.Engines.FindPartialView(controller.ControllerContext, partialView);  
            var viewContext = new ViewContext(controller.ControllerContext, viewResult.View, viewData, new TempDataDictionary(), sw);  
            viewResult.View.Render(viewContext, sw);  
            return sw.GetStringBuilder().ToString();  
        }  
    }  
    throw new InvalidOperationException("Could not locate a controller for controller name: " + controllerName);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
632
1
Gpt3D_Clone632_1.cs 1 20
Gpt3D_Clone632_1.cs 21 48
----------------------------------------

public static string RenderPartialView (string controllerName, string partialView, object model) {
    var context = new HttpContextWrapper (System.Web.HttpContext.Current) as HttpContextBase;
    var routes = new System.Web.Routing.RouteData ();
    routes.Values.Add ("controller", controllerName);
    var requestContext = new RequestContext (context, routes);
    string requiredString = requestContext.RouteData.GetRequiredString ("controller");
    var controllerFactory = ControllerBuilder.Current.GetControllerFactory ();
    var controller = controllerFactory.CreateController (requestContext, requiredString) as ControllerBase;
    controller.ControllerContext = new ControllerContext (context, routes, controller);
    var ViewData = new ViewDataDictionary ();
    var TempData = new TempDataDictionary ();
    ViewData.Model = model;
    using (var sw = new StringWriter ())
    {
        var viewResult = ViewEngines.Engines.FindPartialView (controller.ControllerContext, partialView);
        var viewContext = new ViewContext (controller.ControllerContext, viewResult.View, ViewData, TempData, sw);
        viewResult.View.Render (viewContext, sw);
        return sw.GetStringBuilder ().ToString ();
    }
}
----------------------------------------

 public static string GetPartialViewResponse(string controllerName, string partialView, object model)  
{  
    HttpRequestBase request = new HttpRequestWrapper(HttpContext.Current.Request);  
    HttpResponseBase response = new HttpResponseWrapper(HttpContext.Current.Response);  
    RouteData routeData = RouteTable.Routes.GetRouteData(new HttpContextWrapper(HttpContext.Current));  
    if (routeData != null)  
    {  
        request.RequestContext.RouteData = routeData;  
    }  
    request.RequestContext.RouteData.Values.Add("controller", controllerName);  
    var controller = ControllerBuilder.Current.GetControllerFactory().CreateController(request.RequestContext, controllerName);  
    if (controller != null)  
    {  
        controller.ControllerContext = new ControllerContext(request.RequestContext, controller);  
        var viewData = new ViewDataDictionary { Model = model };  
  
        using (var sw = new StringWriter())  
        {  
            var viewResult = ViewEngines.Engines.FindPartialView(controller.ControllerContext, partialView);  
            var viewContext = new ViewContext(controller.ControllerContext, viewResult.View, viewData, new TempDataDictionary(), sw);  
            viewResult.View.Render(viewContext, sw);  
            return sw.GetStringBuilder().ToString();  
        }  
    }  
    throw new InvalidOperationException("Could not locate a controller for controller name: " + controllerName);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
632
2
Gpt3D_Clone632_2.cs 1 20
Gpt3D_Clone632_2.cs 21 41
----------------------------------------

public static string RenderPartialView (string controllerName, string partialView, object model) {
    var context = new HttpContextWrapper (System.Web.HttpContext.Current) as HttpContextBase;
    var routes = new System.Web.Routing.RouteData ();
    routes.Values.Add ("controller", controllerName);
    var requestContext = new RequestContext (context, routes);
    string requiredString = requestContext.RouteData.GetRequiredString ("controller");
    var controllerFactory = ControllerBuilder.Current.GetControllerFactory ();
    var controller = controllerFactory.CreateController (requestContext, requiredString) as ControllerBase;
    controller.ControllerContext = new ControllerContext (context, routes, controller);
    var ViewData = new ViewDataDictionary ();
    var TempData = new TempDataDictionary ();
    ViewData.Model = model;
    using (var sw = new StringWriter ())
    {
        var viewResult = ViewEngines.Engines.FindPartialView (controller.ControllerContext, partialView);
        var viewContext = new ViewContext (controller.ControllerContext, viewResult.View, ViewData, TempData, sw);
        viewResult.View.Render (viewContext, sw);
        return sw.GetStringBuilder ().ToString ();
    }
}
----------------------------------------

 public static string RenderRazorPartialView(string controllerName, string partialView, object model)  
{  
    RouteData routeData = new RouteData();  
    routeData.Values["controller"] = controllerName;  
    controllerName = controllerName.Replace("Controller", string.Empty);  
    using (var controllerContext = new ControllerContext(new RequestContext(new HttpContextWrapper(HttpContext.Current), routeData),  
        System.Reflection.Assembly.GetExecutingAssembly().CreateInstance("Controller." + controllerName + "Controller") as Controller))  
    {  
        controllerContext.RouteData.Values["controller"] = controllerName;  
        var viewData = new ViewDataDictionary(model);  
        viewData.TemplateInfo.HtmlFieldPrefix = controllerName;  
  
        var viewResult = ViewEngines.Engines.FindPartialView(controllerContext, partialView);  
        var razorView = viewResult.View;  
        var sw = new StringWriter();  
        razorView.Render(new ViewContext(controllerContext, razorView, viewData, new TempDataDictionary(), sw), sw);  
        return sw.ToString();  
    }  
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
633
0
Gpt3D_Clone633_0.cs 1 30
Gpt3D_Clone633_0.cs 31 38
----------------------------------------

public static void moveMouse (ref int currentx, ref int currenty, string whattodo, int pNombre) {
    switch (whattodo) {
        case "addX" :
            for (int i = 0; i < pNombre; i ++) {
                currentx ++;
                SetCursorPos (currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
            }
            break;
        case "addY" :
            for (int i = 0; i < pNombre; i ++) {
                currenty ++;
                SetCursorPos (currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
            }
            break;
        case "remX" :
            for (int i = 0; i < pNombre; i ++) {
                currentx --;
                SetCursorPos (currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
            }
            break;
        case "remY" :
            for (int i = 0; i < pNombre; i ++) {
                currenty --;
                SetCursorPos (currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
            }
            break;
        default :
            break;
    }
}
----------------------------------------

private static void AddYAxis(int currentx, int currenty, int pNombre) {
    for(int i = 0; i < pNombre; i++) {
        currenty++;
        SetCursorPos(currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
633
1
Gpt3D_Clone633_1.cs 1 30
Gpt3D_Clone633_1.cs 31 38
----------------------------------------

public static void moveMouse (ref int currentx, ref int currenty, string whattodo, int pNombre) {
    switch (whattodo) {
        case "addX" :
            for (int i = 0; i < pNombre; i ++) {
                currentx ++;
                SetCursorPos (currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
            }
            break;
        case "addY" :
            for (int i = 0; i < pNombre; i ++) {
                currenty ++;
                SetCursorPos (currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
            }
            break;
        case "remX" :
            for (int i = 0; i < pNombre; i ++) {
                currentx --;
                SetCursorPos (currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
            }
            break;
        case "remY" :
            for (int i = 0; i < pNombre; i ++) {
                currenty --;
                SetCursorPos (currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
            }
            break;
        default :
            break;
    }
}
----------------------------------------

private static void RemYAxis(int currentx, int currenty, int pNombre) {
    for(int i = 0; i < pNombre; i++) {
        currenty--;
        SetCursorPos(currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
633
2
Gpt3D_Clone633_2.cs 1 30
Gpt3D_Clone633_2.cs 31 38
----------------------------------------

public static void moveMouse (ref int currentx, ref int currenty, string whattodo, int pNombre) {
    switch (whattodo) {
        case "addX" :
            for (int i = 0; i < pNombre; i ++) {
                currentx ++;
                SetCursorPos (currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
            }
            break;
        case "addY" :
            for (int i = 0; i < pNombre; i ++) {
                currenty ++;
                SetCursorPos (currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
            }
            break;
        case "remX" :
            for (int i = 0; i < pNombre; i ++) {
                currentx --;
                SetCursorPos (currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
            }
            break;
        case "remY" :
            for (int i = 0; i < pNombre; i ++) {
                currenty --;
                SetCursorPos (currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
            }
            break;
        default :
            break;
    }
}
----------------------------------------

private static void AddX(int currentx, int currenty, int pNombre) {
    for(int i = 0; i < pNombre; i++) {
        currentx++;
        SetCursorPos(currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
633
3
Gpt3D_Clone633_3.cs 1 30
Gpt3D_Clone633_3.cs 31 38
----------------------------------------

public static void moveMouse (ref int currentx, ref int currenty, string whattodo, int pNombre) {
    switch (whattodo) {
        case "addX" :
            for (int i = 0; i < pNombre; i ++) {
                currentx ++;
                SetCursorPos (currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
            }
            break;
        case "addY" :
            for (int i = 0; i < pNombre; i ++) {
                currenty ++;
                SetCursorPos (currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
            }
            break;
        case "remX" :
            for (int i = 0; i < pNombre; i ++) {
                currentx --;
                SetCursorPos (currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
            }
            break;
        case "remY" :
            for (int i = 0; i < pNombre; i ++) {
                currenty --;
                SetCursorPos (currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
            }
            break;
        default :
            break;
    }
}
----------------------------------------

private static void AddXAxis(int currentx, int currenty, int pNombre) {
    for(int i = 0; i < pNombre; i++) {
        currentx++;
        SetCursorPos(currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
633
4
Gpt3D_Clone633_4.cs 1 30
Gpt3D_Clone633_4.cs 31 38
----------------------------------------

public static void moveMouse (ref int currentx, ref int currenty, string whattodo, int pNombre) {
    switch (whattodo) {
        case "addX" :
            for (int i = 0; i < pNombre; i ++) {
                currentx ++;
                SetCursorPos (currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
            }
            break;
        case "addY" :
            for (int i = 0; i < pNombre; i ++) {
                currenty ++;
                SetCursorPos (currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
            }
            break;
        case "remX" :
            for (int i = 0; i < pNombre; i ++) {
                currentx --;
                SetCursorPos (currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
            }
            break;
        case "remY" :
            for (int i = 0; i < pNombre; i ++) {
                currenty --;
                SetCursorPos (currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
            }
            break;
        default :
            break;
    }
}
----------------------------------------

private static void RemXAxis(int currentx, int currenty, int pNombre) {
    for(int i = 0; i < pNombre; i++) {
        currentx--;
        SetCursorPos(currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
633
5
Gpt3D_Clone633_5.cs 1 30
Gpt3D_Clone633_5.cs 31 38
----------------------------------------

public static void moveMouse (ref int currentx, ref int currenty, string whattodo, int pNombre) {
    switch (whattodo) {
        case "addX" :
            for (int i = 0; i < pNombre; i ++) {
                currentx ++;
                SetCursorPos (currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
            }
            break;
        case "addY" :
            for (int i = 0; i < pNombre; i ++) {
                currenty ++;
                SetCursorPos (currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
            }
            break;
        case "remX" :
            for (int i = 0; i < pNombre; i ++) {
                currentx --;
                SetCursorPos (currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
            }
            break;
        case "remY" :
            for (int i = 0; i < pNombre; i ++) {
                currenty --;
                SetCursorPos (currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
            }
            break;
        default :
            break;
    }
}
----------------------------------------

private static void RemY(int currentx, int currenty, int pNombre) {
    for(int i = 0; i < pNombre; i++) {
        currenty--;
        SetCursorPos(currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
633
6
Gpt3D_Clone633_6.cs 1 30
Gpt3D_Clone633_6.cs 31 38
----------------------------------------

public static void moveMouse (ref int currentx, ref int currenty, string whattodo, int pNombre) {
    switch (whattodo) {
        case "addX" :
            for (int i = 0; i < pNombre; i ++) {
                currentx ++;
                SetCursorPos (currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
            }
            break;
        case "addY" :
            for (int i = 0; i < pNombre; i ++) {
                currenty ++;
                SetCursorPos (currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
            }
            break;
        case "remX" :
            for (int i = 0; i < pNombre; i ++) {
                currentx --;
                SetCursorPos (currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
            }
            break;
        case "remY" :
            for (int i = 0; i < pNombre; i ++) {
                currenty --;
                SetCursorPos (currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
            }
            break;
        default :
            break;
    }
}
----------------------------------------

private static void RemX(int currentx, int currenty, int pNombre) {
    for(int i = 0; i < pNombre; i++) {
        currentx--;
        SetCursorPos(currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
633
7
Gpt3D_Clone633_7.cs 1 30
Gpt3D_Clone633_7.cs 31 38
----------------------------------------

public static void moveMouse (ref int currentx, ref int currenty, string whattodo, int pNombre) {
    switch (whattodo) {
        case "addX" :
            for (int i = 0; i < pNombre; i ++) {
                currentx ++;
                SetCursorPos (currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
            }
            break;
        case "addY" :
            for (int i = 0; i < pNombre; i ++) {
                currenty ++;
                SetCursorPos (currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
            }
            break;
        case "remX" :
            for (int i = 0; i < pNombre; i ++) {
                currentx --;
                SetCursorPos (currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
            }
            break;
        case "remY" :
            for (int i = 0; i < pNombre; i ++) {
                currenty --;
                SetCursorPos (currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
            }
            break;
        default :
            break;
    }
}
----------------------------------------

private static void AddY(int currentx, int currenty, int pNombre) {
    for(int i = 0; i < pNombre; i++) {
        currenty++;
        SetCursorPos(currentx + Form1.m_Border_x, currenty + Form1.m_Border_y);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
634
0
Gpt3D_Clone634_0.cs 1 21
Gpt3D_Clone634_0.cs 22 36
----------------------------------------

public override string ToString () {
    builder.Clear ();
    builder.AppendLine ("<html>");
    builder.AppendLine ("<head></head>");
    builder.AppendLine ("<body>");
    builder.AppendLine ("<table>");
    builder.AppendLine ("<col>");
    foreach (List < HDNData > row in data) {
        builder.AppendLine ("<tr>");
        foreach (HDNData col in row) {
            builder.AppendLine ("<td>");
            builder.Append (col.ToString ());
            builder.AppendLine ("</td>");
        }
        builder.AppendLine ("</tr>");
    }
    builder.AppendLine ("</table>");
    builder.AppendLine ("</body>");
    builder.AppendLine ("</html>");
    return builder.ToString ();
}
----------------------------------------

 public override string ToString () {
    StringBuilder sb = new StringBuilder ();
    sb.AppendLine ("<html> <head></head> <body> <table> <col>");
    foreach (List < HDNData > row in data) {
        sb.AppendLine ("<tr>");
        foreach (HDNData col in row) {
            sb.AppendFormat ("<td> {0} </td>", col.ToString ());          
        }
        sb.AppendLine ("</tr>");
    }
    sb.AppendLine ("</table> </body> </html>");
    return sb.ToString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
634
1
Gpt3D_Clone634_1.cs 1 21
Gpt3D_Clone634_1.cs 22 36
----------------------------------------

public override string ToString () {
    builder.Clear ();
    builder.AppendLine ("<html>");
    builder.AppendLine ("<head></head>");
    builder.AppendLine ("<body>");
    builder.AppendLine ("<table>");
    builder.AppendLine ("<col>");
    foreach (List < HDNData > row in data) {
        builder.AppendLine ("<tr>");
        foreach (HDNData col in row) {
            builder.AppendLine ("<td>");
            builder.Append (col.ToString ());
            builder.AppendLine ("</td>");
        }
        builder.AppendLine ("</tr>");
    }
    builder.AppendLine ("</table>");
    builder.AppendLine ("</body>");
    builder.AppendLine ("</html>");
    return builder.ToString ();
}
----------------------------------------

 public override string ToString () {
    StringBuilder sb = new StringBuilder ();
    sb.AppendLine ("<html>\n<head></head>\n<body>\n<table>\n<col>");
    foreach (List < HDNData > row in data) {
        sb.AppendLine ("<tr>");
        foreach (HDNData col in row) {
            sb.AppendLine ("\t<td>\n\t\t" + col.ToString () + "\n\t</td>");
        }
        sb.AppendLine ("</tr>");
    }
    sb.AppendLine ("</table>\n</body>\n</html>");
    return sb.ToString ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
634
2
Gpt3D_Clone634_2.cs 1 21
Gpt3D_Clone634_2.cs 22 37
----------------------------------------

public override string ToString () {
    builder.Clear ();
    builder.AppendLine ("<html>");
    builder.AppendLine ("<head></head>");
    builder.AppendLine ("<body>");
    builder.AppendLine ("<table>");
    builder.AppendLine ("<col>");
    foreach (List < HDNData > row in data) {
        builder.AppendLine ("<tr>");
        foreach (HDNData col in row) {
            builder.AppendLine ("<td>");
            builder.Append (col.ToString ());
            builder.AppendLine ("</td>");
        }
        builder.AppendLine ("</tr>");
    }
    builder.AppendLine ("</table>");
    builder.AppendLine ("</body>");
    builder.AppendLine ("</html>");
    return builder.ToString ();
}
----------------------------------------

 public override string ToString () {
    StringBuilder sb = new StringBuilder ();
    sb.AppendLine ("<html><head></head><body><table><col>");
    foreach(List<HDNData> dataRow in data){
        sb.AppendLine("<tr>");
        foreach (HDNData col in dataRow)
        {
            sb.AppendLine("<td>"+col.ToString()+"</td>");
        }
        sb.AppendLine("</tr>");
    }
    sb.AppendLine("</table></body></html>");
    return sb.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
634
3
Gpt3D_Clone634_3.cs 1 21
Gpt3D_Clone634_3.cs 22 38
----------------------------------------

public override string ToString () {
    builder.Clear ();
    builder.AppendLine ("<html>");
    builder.AppendLine ("<head></head>");
    builder.AppendLine ("<body>");
    builder.AppendLine ("<table>");
    builder.AppendLine ("<col>");
    foreach (List < HDNData > row in data) {
        builder.AppendLine ("<tr>");
        foreach (HDNData col in row) {
            builder.AppendLine ("<td>");
            builder.Append (col.ToString ());
            builder.AppendLine ("</td>");
        }
        builder.AppendLine ("</tr>");
    }
    builder.AppendLine ("</table>");
    builder.AppendLine ("</body>");
    builder.AppendLine ("</html>");
    return builder.ToString ();
}
----------------------------------------

 public override string ToString () {
    var sb = new StringBuilder();
    sb.AppendLine("<html><head></head><body><table><col>");
    foreach(var row in data)
    {
        sb.Append("<tr>");
        foreach(var col in row)
        {
            sb.AppendLine("<td>"+col.ToString()+"</td>");
        }
        sb.Append("</tr>");
    }
    sb.Append("</table></body></html>");
    return sb.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
637
1
Gpt3D_Clone637_1.cs 1 10
Gpt3D_Clone637_1.cs 11 26
----------------------------------------

private static bool IsPowerOfTwo (ulong number) {
    while (number != 0) {
        if (number == 1)
            return true;
        if ((number & 1) == 1)
            return false;
        number = number > > 1;
    }
    return false;
}
----------------------------------------

 private static bool IsPowerOfTwo (ulong number) {
    if (number == 0)
        return false;
    bool HasOneBit = false;
    while (number > 0) {
        if ((number & 1) > 0) {
            if (HasOneBit)
               return false;
            HasOneBit = true;
        } 
        number >>= 1;
    }
    return HasOneBit;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
637
2
Gpt3D_Clone637_2.cs 1 10
Gpt3D_Clone637_2.cs 11 24
----------------------------------------

private static bool IsPowerOfTwo (ulong number) {
    while (number != 0) {
        if (number == 1)
            return true;
        if ((number & 1) == 1)
            return false;
        number = number > > 1;
    }
    return false;
}
----------------------------------------

 private static bool IsPowerOfTwo (ulong number) {
    if (number == 0)
        return false;
    ulong mask = 1;
    for (int i = 0; i < 63; i++) {
        if ((number & mask) == 1) {
            return false;
        }
        mask <<= 1;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
637
3
Gpt3D_Clone637_3.cs 1 10
Gpt3D_Clone637_3.cs 11 24
----------------------------------------

private static bool IsPowerOfTwo (ulong number) {
    while (number != 0) {
        if (number == 1)
            return true;
        if ((number & 1) == 1)
            return false;
        number = number > > 1;
    }
    return false;
}
----------------------------------------

 private static bool IsPowerOfTwo (ulong number) {
    if (number == 0)
        return false;
    int i;
    for (i = 0; i < 63; i++) {
        if ((number & 1) == 1) {
            return false;
        }
        number >>= 1;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
637
4
Gpt3D_Clone637_4.cs 1 10
Gpt3D_Clone637_4.cs 11 22
----------------------------------------

private static bool IsPowerOfTwo (ulong number) {
    while (number != 0) {
        if (number == 1)
            return true;
        if ((number & 1) == 1)
            return false;
        number = number > > 1;
    }
    return false;
}
----------------------------------------

 private static bool IsPowerOfTwo (ulong number) {
    if (number == 0)
        return false;
    while (number > 1) {
        if ((number & 1) > 0)
            return false;
        number = number >> 1;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
637
6
Gpt3D_Clone637_6.cs 1 10
Gpt3D_Clone637_6.cs 11 22
----------------------------------------

private static bool IsPowerOfTwo (ulong number) {
    while (number != 0) {
        if (number == 1)
            return true;
        if ((number & 1) == 1)
            return false;
        number = number > > 1;
    }
    return false;
}
----------------------------------------

 private static bool IsPowerOfTwo (ulong number) {
    if (number == 0)
        return false;
    while (number > 1) {
        if ((number & 1) == 1)
            return false;
        number >>= 1;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
637
7
Gpt3D_Clone637_7.cs 1 10
Gpt3D_Clone637_7.cs 11 22
----------------------------------------

private static bool IsPowerOfTwo (ulong number) {
    while (number != 0) {
        if (number == 1)
            return true;
        if ((number & 1) == 1)
            return false;
        number = number > > 1;
    }
    return false;
}
----------------------------------------

 private static bool IsPowerOfTwo (ulong number) {
    if (number == 0)
        return false;
    while (number > 1) {
        if ((number & 1) == 1)
            return false;
        number >>= 1;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
646
6
Gpt3D_Clone646_6.cs 1 31
Gpt3D_Clone646_6.cs 32 50
----------------------------------------

void AcceptClientsTask (TcpListener listener, CancellationToken ct) {
    try {
        while (! ct.IsCancellationRequested) {
            try {
                TcpClient client = listener.AcceptTcpClient ();
                if (! ct.IsCancellationRequested) {
                    functions.Logger.log ("Client connected from " + client.Client.RemoteEndPoint.ToString (), "RemoteConsole", "General", LOGLEVEL.DEBUG);
                    ParseAndReply (client, ct);
                }
            }
            catch (SocketException e) {
                if (e.SocketErrorCode == SocketError.Interrupted) {
                    break;
                } else {
                    throw e;
                }
            }
            catch (Exception E) {
                functions.Logger.log ("Error in Remote Console Loop: " + E.Message, "RemoteConsole", "General", LOGLEVEL.ERROR);
            }
        }
        functions.Logger.log ("Stopping Remote Console Loop", "RemoteConsole", "General", LOGLEVEL.DEBUG);
    }
    catch (Exception E) {
        functions.Logger.log ("Error in Remote Console: " + E.Message, "RemoteConsole", "General", LOGLEVEL.ERROR);
    }
    finally {
        stopped = true;
    }
    functions.Logger.log ("Stopping Remote Console", "RemoteConsole", "General", LOGLEVEL.INFO);
}
----------------------------------------

 void AcceptClientsTask (TcpListener listener, CancellationToken ct) {
     while (! ct.IsCancellationRequested) {
        TcpClient client = listener.AcceptTcpClient();
        if (ct.IsCancellationRequested) {
            break;
        } else {
            try {
                ParseAndReply(client, ct);
            } catch (Exception e) {
                functions.Logger.log ("Error in Remote Console Loop: " + E.Message, "RemoteConsole", "General", LOGLEVEL.ERROR);
            }
        }
    }
    stopped = true;
    functions.Logger.log ("Stopping Remote Console Loop", "RemoteConsole", "General", LOGLEVEL.DEBUG);
    functions.Logger.log ("Stopping Remote Console", "RemoteConsole", "General", LOGLEVEL.INFO);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
647
3
Gpt3D_Clone647_3.cs 1 22
Gpt3D_Clone647_3.cs 23 46
----------------------------------------

public static int Count < TSource > (this IEnumerable < TSource > source) {
    checked {
        if (source == null) {
            throw Error.ArgumentNull ("source");
        }
        ICollection < TSource > collection = source as ICollection < TSource >;
        if (collection != null) {
            return collection.Count;
        }
        ICollection collection2 = source as ICollection;
        if (collection2 != null) {
            return collection2.Count;
        }
        int num = 0;
        using (IEnumerator < TSource > enumerator = source.GetEnumerator ())
        {
            while (enumerator.MoveNext ()) {
                num ++;
            }
        } return num;
    }
}
----------------------------------------

 public static int Count<TSource>(IEnumerable<TSource> source)
    {
        if(source == null) throw new System.ArgumentNullException("source");
        
        int count = 0;
        
        ICollection<TSource> collection = source as ICollection<TSource>;
        if (collection != null)
        {
            return collection.Count;
        }
        ICollection collection2 = source as ICollection;
        if (collection2 != null)
        {
            return collection2.Count;
        }
        foreach(TSource element in source) 
        {
            checked { count++; }
        }
        return count;   
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
647
4
Gpt3D_Clone647_4.cs 1 22
Gpt3D_Clone647_4.cs 23 38
----------------------------------------

public static int Count < TSource > (this IEnumerable < TSource > source) {
    checked {
        if (source == null) {
            throw Error.ArgumentNull ("source");
        }
        ICollection < TSource > collection = source as ICollection < TSource >;
        if (collection != null) {
            return collection.Count;
        }
        ICollection collection2 = source as ICollection;
        if (collection2 != null) {
            return collection2.Count;
        }
        int num = 0;
        using (IEnumerator < TSource > enumerator = source.GetEnumerator ())
        {
            while (enumerator.MoveNext ()) {
                num ++;
            }
        } return num;
    }
}
----------------------------------------

 public static int Count<TSource>(IEnumerable<TSource> source)
    {
        if (source == null) throw Error.ArgumentNull("source");
        int count = 0;
        using (IEnumerator<TSource> enumerator = source.GetEnumerator())
        {
            while (enumerator.MoveNext())
            {
                checked { count++; }
            }
        }
        return count;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
647
5
Gpt3D_Clone647_5.cs 1 22
Gpt3D_Clone647_5.cs 23 38
----------------------------------------

public static int Count < TSource > (this IEnumerable < TSource > source) {
    checked {
        if (source == null) {
            throw Error.ArgumentNull ("source");
        }
        ICollection < TSource > collection = source as ICollection < TSource >;
        if (collection != null) {
            return collection.Count;
        }
        ICollection collection2 = source as ICollection;
        if (collection2 != null) {
            return collection2.Count;
        }
        int num = 0;
        using (IEnumerator < TSource > enumerator = source.GetEnumerator ())
        {
            while (enumerator.MoveNext ()) {
                num ++;
            }
        } return num;
    }
}
----------------------------------------

 public static int Count<TSource>(IEnumerable<TSource> source)
    {
        if (source == null) throw new System.ArgumentNullException("source");
        int count = 0;
        foreach (TSource sourceElement in source)
        {
            ICollection<TSource> collection = source as ICollection<TSource>;
            ICollection collection2 = source as ICollection;   
            checked { count++; }
        }
        return count;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
647
6
Gpt3D_Clone647_6.cs 1 22
Gpt3D_Clone647_6.cs 23 38
----------------------------------------

public static int Count < TSource > (this IEnumerable < TSource > source) {
    checked {
        if (source == null) {
            throw Error.ArgumentNull ("source");
        }
        ICollection < TSource > collection = source as ICollection < TSource >;
        if (collection != null) {
            return collection.Count;
        }
        ICollection collection2 = source as ICollection;
        if (collection2 != null) {
            return collection2.Count;
        }
        int num = 0;
        using (IEnumerator < TSource > enumerator = source.GetEnumerator ())
        {
            while (enumerator.MoveNext ()) {
                num ++;
            }
        } return num;
    }
}
----------------------------------------

 public static int Count<TSource>(IEnumerable<TSource> source)
    {
        if(source == null) throw new System.ArgumentNullException("source");
        int count = 0;
        IEnumerator<TSource> sourceEnum = source.GetEnumerator();
   
        while(sourceEnum.MoveNext())
        {
            checked { count++; }
        }
        return count;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
647
7
Gpt3D_Clone647_7.cs 1 22
Gpt3D_Clone647_7.cs 23 36
----------------------------------------

public static int Count < TSource > (this IEnumerable < TSource > source) {
    checked {
        if (source == null) {
            throw Error.ArgumentNull ("source");
        }
        ICollection < TSource > collection = source as ICollection < TSource >;
        if (collection != null) {
            return collection.Count;
        }
        ICollection collection2 = source as ICollection;
        if (collection2 != null) {
            return collection2.Count;
        }
        int num = 0;
        using (IEnumerator < TSource > enumerator = source.GetEnumerator ())
        {
            while (enumerator.MoveNext ()) {
                num ++;
            }
        } return num;
    }
}
----------------------------------------

 public static int Count<TSource>(IEnumerable<TSource> source)
    {
        if(source == null) throw new System.ArgumentNullException("source");
        
        int count = 0;
        IEnumerator<TSource> sourceEnumn = source.GetEnumerator();
        while(sourceEnumn.MoveNext()) {
            checked { count++; }
        }
        return count;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
647
8
Gpt3D_Clone647_8.cs 1 22
Gpt3D_Clone647_8.cs 23 35
----------------------------------------

public static int Count < TSource > (this IEnumerable < TSource > source) {
    checked {
        if (source == null) {
            throw Error.ArgumentNull ("source");
        }
        ICollection < TSource > collection = source as ICollection < TSource >;
        if (collection != null) {
            return collection.Count;
        }
        ICollection collection2 = source as ICollection;
        if (collection2 != null) {
            return collection2.Count;
        }
        int num = 0;
        using (IEnumerator < TSource > enumerator = source.GetEnumerator ())
        {
            while (enumerator.MoveNext ()) {
                num ++;
            }
        } return num;
    }
}
----------------------------------------

  public static int Count<TSource>(IEnumerable<TSource> source)
    {
        if(source == null) throw new System.ArgumentNullException("source");
        int count = 0;
        foreach(TSource sourceElem in source)
        {
            checked { count++; }
        }
        return count;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
647
9
Gpt3D_Clone647_9.cs 1 22
Gpt3D_Clone647_9.cs 23 35
----------------------------------------

public static int Count < TSource > (this IEnumerable < TSource > source) {
    checked {
        if (source == null) {
            throw Error.ArgumentNull ("source");
        }
        ICollection < TSource > collection = source as ICollection < TSource >;
        if (collection != null) {
            return collection.Count;
        }
        ICollection collection2 = source as ICollection;
        if (collection2 != null) {
            return collection2.Count;
        }
        int num = 0;
        using (IEnumerator < TSource > enumerator = source.GetEnumerator ())
        {
            while (enumerator.MoveNext ()) {
                num ++;
            }
        } return num;
    }
}
----------------------------------------

 public static int Count<TSource>(IEnumerable<TSource> source)
    {
        if(source == null) throw new System.ArgumentNullException("source");
        int count = 0;
        foreach(TSource sourceElement in source)
        {
            checked { count++; }
        }
        return count;   
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
648
0
Gpt3D_Clone648_0.cs 1 17
Gpt3D_Clone648_0.cs 18 60
----------------------------------------

static void Main (string [] args) {
    if (args.Length == 2) {
        using (StreamReader input = new StreamReader (args [0]))
        using (StreamWriter output = new StreamWriter (args [1]))
        {
            int readSize = 0;
            int blockSize = 100000;
            char [] inBuffer = new char [blockSize];
            char [] outBuffer = new char [blockSize * 3];
            while ((readSize = input.ReadBlock (inBuffer, 0, blockSize)) > 0) {
                int writeSize = TransformBlock (inBuffer, outBuffer, readSize);
                output.Write (outBuffer, 0, writeSize);
            }
        }} else {
        Console.WriteLine ("Usage:  repchar {inputfile} {outputfile}");
    }
}
----------------------------------------

 static void Main(string[] args) 
{ 
    if (args.Length == 2) 
    { 
        StreamReader input = null; 
        StreamWriter output = null; 
        try 
        { 
            input = new StreamReader(args[0]); 
            output = new StreamWriter(args[1]); 
            int readSize = 0; 
            int blockSize = 100000; 
            char[] inBuffer = new char[blockSize]; 
            char[] outBuffer = new char[blockSize * 3]; 
            while ((readSize = input.ReadBlock(inBuffer, 0, blockSize)) > 0) 
            { 
                int writeSize = TransformBlock(inBuffer, outBuffer, readSize); 
                output.Write(outBuffer, 0, writeSize); 
            } 
        } 
        catch (Exception e) 
        { 
            Console.WriteLine("An error occurred: " + e.Message); 
        } 
        finally 
        { 
            if (input != null) 
            { 
                input.Dispose(); 
            } 
            if (output != null) 
            { 
                output.Dispose(); 
            } 
        } 
    } 
    else 
    { 
        Console.WriteLine("Incorrect number of arguments passed. Please specify input and output files."); 
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
648
1
Gpt3D_Clone648_1.cs 1 17
Gpt3D_Clone648_1.cs 18 60
----------------------------------------

static void Main (string [] args) {
    if (args.Length == 2) {
        using (StreamReader input = new StreamReader (args [0]))
        using (StreamWriter output = new StreamWriter (args [1]))
        {
            int readSize = 0;
            int blockSize = 100000;
            char [] inBuffer = new char [blockSize];
            char [] outBuffer = new char [blockSize * 3];
            while ((readSize = input.ReadBlock (inBuffer, 0, blockSize)) > 0) {
                int writeSize = TransformBlock (inBuffer, outBuffer, readSize);
                output.Write (outBuffer, 0, writeSize);
            }
        }} else {
        Console.WriteLine ("Usage:  repchar {inputfile} {outputfile}");
    }
}
----------------------------------------

 static void Main(string[] args) 
{ 
    if (args.Length == 2) 
    { 
        StreamReader input = null; 
        StreamWriter output = null; 
        try 
        { 
            input = new StreamReader(args[0]); 
            output = new StreamWriter(args[1]); 
            int readSize = 0; 
            int blockSize = 100000; 
            char[] inBuffer = new char[blockSize]; 
            char[] outBuffer = new char[blockSize * 3]; 
            while ((readSize = input.ReadBlock(inBuffer, 0, blockSize)) > 0) 
            { 
                int writeSize = TransformBlock(inBuffer, outBuffer, readSize); 
                output.Write(outBuffer, 0, writeSize); 
            } 
        } 
        catch 
        { 
            Console.WriteLine("Error processing files"); 
        } 
        finally 
        { 
            if (input != null) 
            { 
                input.Dispose(); 
            } 
            if (output != null) 
            { 
                output.Dispose(); 
            } 
        } 
    } 
    else 
    { 
        Console.WriteLine("Usage: repchar {inputfile} {outputfile}"); 
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
648
2
Gpt3D_Clone648_2.cs 1 17
Gpt3D_Clone648_2.cs 18 60
----------------------------------------

static void Main (string [] args) {
    if (args.Length == 2) {
        using (StreamReader input = new StreamReader (args [0]))
        using (StreamWriter output = new StreamWriter (args [1]))
        {
            int readSize = 0;
            int blockSize = 100000;
            char [] inBuffer = new char [blockSize];
            char [] outBuffer = new char [blockSize * 3];
            while ((readSize = input.ReadBlock (inBuffer, 0, blockSize)) > 0) {
                int writeSize = TransformBlock (inBuffer, outBuffer, readSize);
                output.Write (outBuffer, 0, writeSize);
            }
        }} else {
        Console.WriteLine ("Usage:  repchar {inputfile} {outputfile}");
    }
}
----------------------------------------

 static void Main(string[] args)
{ 
    if (args.Length == 2)
    { 
        StreamReader input = null; 
        StreamWriter output = null; 
        try 
        { 
            input = new StreamReader(args[0]); 
            output = new StreamWriter(args[1]); 
            int readSize; 
            int blockSize = 100000;
            char[] inBuffer = new char[blockSize]; 
            char[] outBuffer = new char[blockSize * 3]; 
            while ((readSize = input.Read(inBuffer, 0, blockSize)) > 0) 
            { 
                int writeSize = TransformBlock(inBuffer, outBuffer, readSize); 
                output.Write(outBuffer, 0, writeSize); 
            } 
        } 
        catch 
        { 
            Console.WriteLine("An error has occurred while processing the files"); 
        } 
        finally 
        { 
            if (input != null) 
            { 
                input.Dispose(); 
            } 
            if (output != null) 
            { 
                output.Dispose(); 
            } 
        } 
    } 
    else 
    { 
        Console.WriteLine("Incorrect number of arguments passed. Please specify input and output files."); 
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
649
2
Gpt3D_Clone649_2.cs 1 29
Gpt3D_Clone649_2.cs 30 55
----------------------------------------

private static void SetIEVersioneKeyforWebBrowserControl (string appName, int ieval) {
    RegistryKey Regkey = null;
    try {
        Regkey = Microsoft.Win32.Registry.LocalMachine.OpenSubKey (@"SOFTWARE\Microsoft\Internet Explorer\Main\FeatureControl\FEATURE_BROWSER_EMULATION", true);
        if (Regkey == null) {
            YukLoggerObj.logWarnMsg ("Application FEATURE_BROWSER_EMULATION Failed - Registry key Not found");
            return;
        }
        string FindAppkey = Convert.ToString (Regkey.GetValue (appName));
        if (FindAppkey == "" + ieval) {
            YukLoggerObj.logInfoMsg ("Application FEATURE_BROWSER_EMULATION already set to " + ieval);
            Regkey.Close ();
            return;
        }
        Regkey.SetValue (appName, unchecked ((int) ieval), RegistryValueKind.DWord);
        FindAppkey = Convert.ToString (Regkey.GetValue (appName));
        if (FindAppkey == "" + ieval)
            YukLoggerObj.logInfoMsg ("Application FEATURE_BROWSER_EMULATION changed to " + ieval + "; changes will be visible at application restart");
        else
            YukLoggerObj.logWarnMsg ("Application FEATURE_BROWSER_EMULATION setting failed; current value is  " + ieval);
    }
    catch (Exception ex) {
        YukLoggerObj.logWarnMsg ("Application FEATURE_BROWSER_EMULATION setting failed; " + ex.Message);
    }
    finally {
        if (Regkey != null)
            Regkey.Close ();
    }
}
----------------------------------------

 private static void SetIEVersioneKeyforWebBrowserControl (string appName, int ieval) {
    if (ieval == 0) 
    { 
        RegistryKey Regkey = Microsoft.Win32.Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Internet Explorer\Main\FeatureControl\FEATURE_BROWSER_EMULATION", true); 
        if (Regkey != null) 
        { 
            string FindAppkey = Convert.ToString(Regkey.GetValue(appName));
            if (FindAppkey == "" + ieval && FindAppkey == " 0") 
            {
                YukLoggerObj.logInfoMsg("Application FEATURE_BROWSER_EMULATION already set to " + ieval);
                Regkey.Close();
            }
            else 
            {
                Regkey.SetValue(appName, unchecked((int) ieval), RegistryValueKind.DWord); 
                FindAppkey = Convert.ToString(Regkey.GetValue(appName)); 
                if (FindAppkey == "" + ieval) 
                    YukLoggerObj.logInfoMsg("Application FEATURE_BROWSER_EMULATION changed to " + ieval + "; changes will be visible at application restart"); 
                else 
                    YukLoggerObj.logWarnMsg("Application FEATURE_BROWSER_EMULATION setting failed; current value is  " + ieval); 
            } 
        } 
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
649
3
Gpt3D_Clone649_3.cs 1 29
Gpt3D_Clone649_3.cs 30 51
----------------------------------------

private static void SetIEVersioneKeyforWebBrowserControl (string appName, int ieval) {
    RegistryKey Regkey = null;
    try {
        Regkey = Microsoft.Win32.Registry.LocalMachine.OpenSubKey (@"SOFTWARE\Microsoft\Internet Explorer\Main\FeatureControl\FEATURE_BROWSER_EMULATION", true);
        if (Regkey == null) {
            YukLoggerObj.logWarnMsg ("Application FEATURE_BROWSER_EMULATION Failed - Registry key Not found");
            return;
        }
        string FindAppkey = Convert.ToString (Regkey.GetValue (appName));
        if (FindAppkey == "" + ieval) {
            YukLoggerObj.logInfoMsg ("Application FEATURE_BROWSER_EMULATION already set to " + ieval);
            Regkey.Close ();
            return;
        }
        Regkey.SetValue (appName, unchecked ((int) ieval), RegistryValueKind.DWord);
        FindAppkey = Convert.ToString (Regkey.GetValue (appName));
        if (FindAppkey == "" + ieval)
            YukLoggerObj.logInfoMsg ("Application FEATURE_BROWSER_EMULATION changed to " + ieval + "; changes will be visible at application restart");
        else
            YukLoggerObj.logWarnMsg ("Application FEATURE_BROWSER_EMULATION setting failed; current value is  " + ieval);
    }
    catch (Exception ex) {
        YukLoggerObj.logWarnMsg ("Application FEATURE_BROWSER_EMULATION setting failed; " + ex.Message);
    }
    finally {
        if (Regkey != null)
            Regkey.Close ();
    }
}
----------------------------------------

 private static void SetIEVersioneKeyforWebBrowserControl(string appName, int ieval) 
    { 
        using (RegistryKey Regkey = Microsoft.Win32.Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Internet Explorer\Main\FeatureControl\FEATURE_BROWSER_EMULATION", true))
        { 
            string FindAppkey = Convert.ToString(Regkey.GetValue(appName)); 
            if (FindAppkey == "" + ieval) 
            { 
                YukLoggerObj.logInfoMsg("Application FEATURE_BROWSER_EMULATION already set to " + ieval);
            } 
            else 
            { 
                Regkey.SetValue(appName, unchecked((int)ieval), RegistryValueKind.DWord);
                FindAppkey = Convert.ToString(Regkey.GetValue(appName)); 
                if (FindAppkey == "" + ieval) 
                    YukLoggerObj.logInfoMsg("Application FEATURE_BROWSER_EMULATION changed to " + ieval + "; changes will be visible at application restart"); 
                else 
                    YukLoggerObj.logWarnMsg("Application FEATURE_BROWSER_EMULATION setting failed; current value is  " + ieval); 
            } 
        } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
64
0
Gpt3D_Clone64_0.cs 1 14
Gpt3D_Clone64_0.cs 15 30
----------------------------------------

public object BindModel (ControllerContext controllerContext, ModelBindingContext bindingContext) {
    if (! controllerContext.HttpContext.Request.ContentType.StartsWith ("application/json", StringComparison.OrdinalIgnoreCase)) {
        return null;
    }
    var inpStream = controllerContext.HttpContext.Request.InputStream;
    inpStream.Seek (0, SeekOrigin.Begin);
    StreamReader reader = new StreamReader (controllerContext.HttpContext.Request.InputStream);
    string bodyText = reader.ReadToEnd ();
    reader.Close ();
    if (String.IsNullOrEmpty (bodyText)) {
        return null;
    }
    return JsonValue.Parse (bodyText);
}
----------------------------------------

 public object BindModel (ControllerContext controllerContext, ModelBindingContext bindingContext) {
    if (controllerContext.HttpContext.Request.ContentType.StartsWith ("application/json", StringComparison.OrdinalIgnoreCase)) {
        var inpStream = controllerContext.HttpContext.Request.InputStream;
        inpStream.Close();
        inpStream.Position = 0;
        StreamReader reader = new StreamReader (inpStream);
        string bodyText = reader.ReadToEnd ();
        reader.Close ();
        if (!String.IsNullOrEmpty (bodyText)) {
            return JsonValue.Parse (bodyText);
        }
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
64
1
Gpt3D_Clone64_1.cs 1 14
Gpt3D_Clone64_1.cs 15 29
----------------------------------------

public object BindModel (ControllerContext controllerContext, ModelBindingContext bindingContext) {
    if (! controllerContext.HttpContext.Request.ContentType.StartsWith ("application/json", StringComparison.OrdinalIgnoreCase)) {
        return null;
    }
    var inpStream = controllerContext.HttpContext.Request.InputStream;
    inpStream.Seek (0, SeekOrigin.Begin);
    StreamReader reader = new StreamReader (controllerContext.HttpContext.Request.InputStream);
    string bodyText = reader.ReadToEnd ();
    reader.Close ();
    if (String.IsNullOrEmpty (bodyText)) {
        return null;
    }
    return JsonValue.Parse (bodyText);
}
----------------------------------------

 public object BindModel (ControllerContext controllerContext, ModelBindingContext bindingContext) {
    if (controllerContext.HttpContext.Request.ContentType.StartsWith ("application/json", StringComparison.OrdinalIgnoreCase)) {
        var inpStream = controllerContext.HttpContext.Request.InputStream;
        inpStream.Position = 0;
        var reader = new StreamReader (inpStream, Encoding.UTF8, true);
        string bodyText = reader.ReadToEnd ();
        reader.Close ();
        if (!String.IsNullOrEmpty (bodyText)) {
            return JsonValue.Parse (bodyText);
        }
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
64
2
Gpt3D_Clone64_2.cs 1 14
Gpt3D_Clone64_2.cs 15 29
----------------------------------------

public object BindModel (ControllerContext controllerContext, ModelBindingContext bindingContext) {
    if (! controllerContext.HttpContext.Request.ContentType.StartsWith ("application/json", StringComparison.OrdinalIgnoreCase)) {
        return null;
    }
    var inpStream = controllerContext.HttpContext.Request.InputStream;
    inpStream.Seek (0, SeekOrigin.Begin);
    StreamReader reader = new StreamReader (controllerContext.HttpContext.Request.InputStream);
    string bodyText = reader.ReadToEnd ();
    reader.Close ();
    if (String.IsNullOrEmpty (bodyText)) {
        return null;
    }
    return JsonValue.Parse (bodyText);
}
----------------------------------------

 public object BindModel (ControllerContext controllerContext, ModelBindingContext bindingContext) {
    if (controllerContext.HttpContext.Request.ContentType.StartsWith ("application/json", StringComparison.OrdinalIgnoreCase)) {
        var inpStream = controllerContext.HttpContext.Request.InputStream;
        inpStream.Position = 0;
        StreamReader reader = new StreamReader (inpStream);
        string bodyText = reader.ReadToEnd ();
        reader.Close ();
        if (!String.IsNullOrEmpty (bodyText)) {
            return JsonValue.Parse (bodyText);
        }
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
64
3
Gpt3D_Clone64_3.cs 1 14
Gpt3D_Clone64_3.cs 15 29
----------------------------------------

public object BindModel (ControllerContext controllerContext, ModelBindingContext bindingContext) {
    if (! controllerContext.HttpContext.Request.ContentType.StartsWith ("application/json", StringComparison.OrdinalIgnoreCase)) {
        return null;
    }
    var inpStream = controllerContext.HttpContext.Request.InputStream;
    inpStream.Seek (0, SeekOrigin.Begin);
    StreamReader reader = new StreamReader (controllerContext.HttpContext.Request.InputStream);
    string bodyText = reader.ReadToEnd ();
    reader.Close ();
    if (String.IsNullOrEmpty (bodyText)) {
        return null;
    }
    return JsonValue.Parse (bodyText);
}
----------------------------------------

 public object BindModel (ControllerContext controllerContext, ModelBindingContext bindingContext) {
    if (controllerContext.HttpContext.Request.ContentType.Contains ("application/json", StringComparison.OrdinalIgnoreCase)) {
        var inpStream = controllerContext.HttpContext.Request.InputStream;
        inpStream.Position = 0;
        StreamReader reader = new StreamReader (inpStream);
        string bodyText = reader.ReadToEnd ();
        reader.Close ();
        if (!String.IsNullOrEmpty (bodyText)) {
            return JsonValue.Parse (bodyText);
        }
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
64
4
Gpt3D_Clone64_4.cs 1 14
Gpt3D_Clone64_4.cs 15 29
----------------------------------------

public object BindModel (ControllerContext controllerContext, ModelBindingContext bindingContext) {
    if (! controllerContext.HttpContext.Request.ContentType.StartsWith ("application/json", StringComparison.OrdinalIgnoreCase)) {
        return null;
    }
    var inpStream = controllerContext.HttpContext.Request.InputStream;
    inpStream.Seek (0, SeekOrigin.Begin);
    StreamReader reader = new StreamReader (controllerContext.HttpContext.Request.InputStream);
    string bodyText = reader.ReadToEnd ();
    reader.Close ();
    if (String.IsNullOrEmpty (bodyText)) {
        return null;
    }
    return JsonValue.Parse (bodyText);
}
----------------------------------------

  public object BindModel (ControllerContext controllerContext, ModelBindingContext bindingContext) {
    if (controllerContext.HttpContext.Request.ContentType.Equals ("application/json", StringComparison.OrdinalIgnoreCase)) {
        var inpStream = controllerContext.HttpContext.Request.InputStream;
        inpStream.Position = 0;
        StreamReader reader = new StreamReader (inpStream);
        string bodyText = reader.ReadToEnd ();
        reader.Close ();
        if (!String.IsNullOrEmpty (bodyText)) {
            return JsonValue.Parse (bodyText);
        }
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
656
0
Gpt3D_Clone656_0.cs 1 10
Gpt3D_Clone656_0.cs 11 30
----------------------------------------

public void Run () {
    for (int i = 0; i < 50; i ++) {
        Thread newThread = new Thread (new Worker (ThreadDone).DoWork);
        newThread.IsBackground = true;
        waitingThreads.Enqueue (newThread);
    }
    LaunchWaitingThreads ();
    while (! done)
        Thread.Sleep (200);
}
----------------------------------------

 public void Run()
{
    for (int i = 0; i < 50; i++)
    {
        Thread t = new Thread(new Worker(ThreadDone).DoWork);
        lock (waitingThreads)
        {       
            t.IsBackground = true;
            waitingThreads.Enqueue(t);
            Monitor.PulseAll(waitingThreads);
        }
    }
    LaunchWaitingThreads();
    while (!done)
    {
        Monitor.Wait(waitingThreads, 200);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
657
0
Gpt3D_Clone657_0.cs 1 16
Gpt3D_Clone657_0.cs 17 37
----------------------------------------

private static void Main (string [] args) {
    const int maxPassword = 100000000;
    Console.WriteLine ("Enter number of threads: ");
    var threadsCountString = Console.ReadLine ();
    var threadsCount = int.Parse (threadsCountString);
    var threads = new Thread [threadsCount];
    for (int i = 0; i < threadsCount; i ++) {
        var thread = new Thread (Bruteforce);
        threads [i] = thread;
    }
    time.Start ();
    for (int i = 0; i < threadsCount; i ++) {
        threads [i].Start (new BruteforceParams {StartNumber = i * maxPassword / threadsCount, EndNumber = (i + 1) * maxPassword / threadsCount});
    }
    Console.ReadKey ();
}
----------------------------------------

 private static void Main(string[] args)
{
    const int maxPassword = 100000000;
    Console.Write("Enter the number of threads: ");
    int threadsCount = int.Parse(Console.ReadLine());
    Thread[] threads = new Thread[threadsCount];
    int start = 0;
    int end = 0;
    time.Start();
    for (int i = 0; i < threadsCount; i++)
    {
        start = i * maxPassword / threadsCount;
        end = (i + 1) * maxPassword / threadsCount;
        threads[i] = new Thread(() => Bruteforce(start, end));
    }
    foreach(Thread t in threads)
        t.Start();
    Console.ReadKey();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
657
1
Gpt3D_Clone657_1.cs 1 16
Gpt3D_Clone657_1.cs 17 38
----------------------------------------

private static void Main (string [] args) {
    const int maxPassword = 100000000;
    Console.WriteLine ("Enter number of threads: ");
    var threadsCountString = Console.ReadLine ();
    var threadsCount = int.Parse (threadsCountString);
    var threads = new Thread [threadsCount];
    for (int i = 0; i < threadsCount; i ++) {
        var thread = new Thread (Bruteforce);
        threads [i] = thread;
    }
    time.Start ();
    for (int i = 0; i < threadsCount; i ++) {
        threads [i].Start (new BruteforceParams {StartNumber = i * maxPassword / threadsCount, EndNumber = (i + 1) * maxPassword / threadsCount});
    }
    Console.ReadKey ();
}
----------------------------------------

 private static void Main(string[] args)
{
    const int maxPassword = 100000000;
    Console.Write("Enter the number of threads: ");
    int threadsCount = int.Parse(Console.ReadLine());
    Thread[] threads = new Thread[threadsCount];
    time.Start();
    for (int i = 0; i < threadsCount; i++)
    {
        int start = i * maxPassword / threadsCount;
        int end = (i + 1) * maxPassword / threadsCount;
        threads[i] = new Thread(delegate () 
        {
            Bruteforce(start, end);
        });
    }
    foreach (Thread t in threads)
        t.Start();
    Console.ReadKey();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
657
2
Gpt3D_Clone657_2.cs 1 16
Gpt3D_Clone657_2.cs 17 40
----------------------------------------

private static void Main (string [] args) {
    const int maxPassword = 100000000;
    Console.WriteLine ("Enter number of threads: ");
    var threadsCountString = Console.ReadLine ();
    var threadsCount = int.Parse (threadsCountString);
    var threads = new Thread [threadsCount];
    for (int i = 0; i < threadsCount; i ++) {
        var thread = new Thread (Bruteforce);
        threads [i] = thread;
    }
    time.Start ();
    for (int i = 0; i < threadsCount; i ++) {
        threads [i].Start (new BruteforceParams {StartNumber = i * maxPassword / threadsCount, EndNumber = (i + 1) * maxPassword / threadsCount});
    }
    Console.ReadKey ();
}
----------------------------------------

 private static void Main(string[] args)
{
    const int maxPassword = 100000000;
    Console.Write("Enter the number of threads: ");
    int threadsCount = int.Parse(Console.ReadLine());
    Thread[] threads = new Thread[threadsCount];
    for (int i = 0; i < threadsCount; i++)
    {
        int start = i * maxPassword / threadsCount;
        int end = (i + 1) * maxPassword / threadsCount;
        threads[i] = new Thread (() => 
        {
            Bruteforce(start, end);
        });
    }
    time.Start();
    for (int i = 0; i < threads.Length; i++)
    {
        threads[i].Start();
    }
    Console.ReadKey();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
657
3
Gpt3D_Clone657_3.cs 1 16
Gpt3D_Clone657_3.cs 17 42
----------------------------------------

private static void Main (string [] args) {
    const int maxPassword = 100000000;
    Console.WriteLine ("Enter number of threads: ");
    var threadsCountString = Console.ReadLine ();
    var threadsCount = int.Parse (threadsCountString);
    var threads = new Thread [threadsCount];
    for (int i = 0; i < threadsCount; i ++) {
        var thread = new Thread (Bruteforce);
        threads [i] = thread;
    }
    time.Start ();
    for (int i = 0; i < threadsCount; i ++) {
        threads [i].Start (new BruteforceParams {StartNumber = i * maxPassword / threadsCount, EndNumber = (i + 1) * maxPassword / threadsCount});
    }
    Console.ReadKey ();
}
----------------------------------------

 private static void Main(string[] args)
{
    const int maxPassword = 100000000;
    Console.Write("Enter the number of threads: ");
    int threadsCount = int.Parse(Console.ReadLine());
    Thread[] threads = new Thread[threadsCount];
    for (int i = 0; i < threadsCount; i++)
    {
        int startNum = i * maxPassword / threadsCount;
        int endNum = (i + 1) * maxPassword / threadsCount;
        threads[i] = new Thread(new ParameterizedThreadStart(Bruteforce));
    }
    time.Start();
    for (int i = 0; i < threads.Length; i++)
    {
        BruteforceParams parameter = new BruteforceParams
        {
            StartNumber = startNum,
            EndNumber = endNum
        };
        threads[i].Start(parameter);
    }
    Console.ReadKey();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
657
4
Gpt3D_Clone657_4.cs 1 16
Gpt3D_Clone657_4.cs 17 37
----------------------------------------

private static void Main (string [] args) {
    const int maxPassword = 100000000;
    Console.WriteLine ("Enter number of threads: ");
    var threadsCountString = Console.ReadLine ();
    var threadsCount = int.Parse (threadsCountString);
    var threads = new Thread [threadsCount];
    for (int i = 0; i < threadsCount; i ++) {
        var thread = new Thread (Bruteforce);
        threads [i] = thread;
    }
    time.Start ();
    for (int i = 0; i < threadsCount; i ++) {
        threads [i].Start (new BruteforceParams {StartNumber = i * maxPassword / threadsCount, EndNumber = (i + 1) * maxPassword / threadsCount});
    }
    Console.ReadKey ();
}
----------------------------------------

 private static void Main(string[] args)
{
    const int maxPassword = 100000000;
    Console.WriteLine("Enter the number of threads: ");
    int threadsCount = int.Parse(Console.ReadLine());
    Thread[] threads = new Thread[threadsCount];
    for (int i = 0; i < threadsCount; i++)
    {
        threads[i] = new Thread(Bruteforce);
    }
    int x = 0;
    time.Start();
    foreach (Thread thread in threads)
    {
        thread.Start(x);
        x = +1;
    }
    Console.ReadKey();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
657
6
Gpt3D_Clone657_6.cs 1 16
Gpt3D_Clone657_6.cs 17 37
----------------------------------------

private static void Main (string [] args) {
    const int maxPassword = 100000000;
    Console.WriteLine ("Enter number of threads: ");
    var threadsCountString = Console.ReadLine ();
    var threadsCount = int.Parse (threadsCountString);
    var threads = new Thread [threadsCount];
    for (int i = 0; i < threadsCount; i ++) {
        var thread = new Thread (Bruteforce);
        threads [i] = thread;
    }
    time.Start ();
    for (int i = 0; i < threadsCount; i ++) {
        threads [i].Start (new BruteforceParams {StartNumber = i * maxPassword / threadsCount, EndNumber = (i + 1) * maxPassword / threadsCount});
    }
    Console.ReadKey ();
}
----------------------------------------

 private static void Main(string[] args)
{
    const int maxPassword = 100000000;
    Console.WriteLine("Enter the number of threads: ");
    int threadsCount = int.Parse(Console.ReadLine());
    Thread[] threads = new Thread[threadsCount];
    for (int i = 0; i < threadsCount; i++)
    {
        threads[i] = new Thread(Bruteforce);
        var bfp = new BruteforceParams{ StartNumber = i * maxPassword / threadsCount, EndNumber = (i + 1) * maxPassword / threadsCount };
        threads[i].Start(bfp);
    }
    time.Start();
    foreach (Thread thread in threads)
    {
        thread.Join(); 
    } 
    Console.ReadKey();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
657
7
Gpt3D_Clone657_7.cs 1 16
Gpt3D_Clone657_7.cs 17 35
----------------------------------------

private static void Main (string [] args) {
    const int maxPassword = 100000000;
    Console.WriteLine ("Enter number of threads: ");
    var threadsCountString = Console.ReadLine ();
    var threadsCount = int.Parse (threadsCountString);
    var threads = new Thread [threadsCount];
    for (int i = 0; i < threadsCount; i ++) {
        var thread = new Thread (Bruteforce);
        threads [i] = thread;
    }
    time.Start ();
    for (int i = 0; i < threadsCount; i ++) {
        threads [i].Start (new BruteforceParams {StartNumber = i * maxPassword / threadsCount, EndNumber = (i + 1) * maxPassword / threadsCount});
    }
    Console.ReadKey ();
}
----------------------------------------

 private static void Main(string[] args)
{
    const int maxPassword = 100000000;
    Console.WriteLine("Enter the number of threads: ");
    int threadsCount = int.Parse(Console.ReadLine());
    Thread[] threads = new Thread[threadsCount];
    for (int i = 0; i < threadsCount; i++)
    {
        int startNum = i * maxPassword / threadsCount;
        int endNum = (i + 1) * maxPassword / threadsCount;
        threads[i] = new Thread(Bruteforce);
        var bfp = new BruteforceParams{ StartNumber = startNum, EndNumber = endNum };
        threads[i].Start(bfp);
    }
    time.Start();
    Console.ReadKey();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
657
8
Gpt3D_Clone657_8.cs 1 16
Gpt3D_Clone657_8.cs 17 38
----------------------------------------

private static void Main (string [] args) {
    const int maxPassword = 100000000;
    Console.WriteLine ("Enter number of threads: ");
    var threadsCountString = Console.ReadLine ();
    var threadsCount = int.Parse (threadsCountString);
    var threads = new Thread [threadsCount];
    for (int i = 0; i < threadsCount; i ++) {
        var thread = new Thread (Bruteforce);
        threads [i] = thread;
    }
    time.Start ();
    for (int i = 0; i < threadsCount; i ++) {
        threads [i].Start (new BruteforceParams {StartNumber = i * maxPassword / threadsCount, EndNumber = (i + 1) * maxPassword / threadsCount});
    }
    Console.ReadKey ();
}
----------------------------------------

 private static void Main(string[] args)
{
    const int maxPassword = 100000000;
    Console.WriteLine("Enter the number of threads: ");
    int threadsCount = int.Parse(Console.ReadLine());
    Thread[] threads = new Thread[threadsCount];
    for (int i = 0; i < threadsCount; i++)
    {
        threads[i] = new Thread(func => 
            Bruteforce((int)func, (int)func+1));
    }
    int x = 0;
    time.Start();
    foreach (Thread thread in threads)
    {
        thread.Start(x);
        x = x+1;
    }
    Console.ReadKey();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
65
0
Gpt3D_Clone65_0.cs 1 14
Gpt3D_Clone65_0.cs 15 36
----------------------------------------

public object BindModel (ControllerContext controllerContext, ModelBindingContext bindingContext) {
    if (! controllerContext.HttpContext.Request.ContentType.StartsWith ("application/json", StringComparison.OrdinalIgnoreCase)) {
        return null;
    }
    var inpStream = controllerContext.HttpContext.Request.InputStream;
    inpStream.Seek (0, SeekOrigin.Begin);
    StreamReader reader = new StreamReader (controllerContext.HttpContext.Request.InputStream);
    string bodyText = reader.ReadToEnd ();
    reader.Close ();
    if (String.IsNullOrEmpty (bodyText)) {
        return null;
    }
    return JsonValue.Parse (bodyText);
}
----------------------------------------

  public object BindModel(ControllerContext controllerContext, ModelBindingContext bindingContext)
{
    if (!controllerContext.HttpContext.Request.ContentType.StartsWith("application/json", StringComparison.OrdinalIgnoreCase))
    {
        return null;
    }
    var buffer = new char[controllerContext.HttpContext.Request.ContentLength];
    var byteOffset = 0;
    var byteCount = controllerContext.HttpContext.Request.InputStream.Read(buffer, byteOffset, buffer.Length);
    if (byteCount > 0)
    {
        var bodyText = new string(buffer);
        return JsonValue.Parse(bodyText);
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
660
0
Gpt3D_Clone660_0.cs 1 13
Gpt3D_Clone660_0.cs 14 35
----------------------------------------

public int solution (int [] array) {
    HashSet < int > found = new HashSet < int > ();
    for (int i = 0; i < array.Length; i ++) {
        if (array [i] > 0) {
            found.Add (array [i]);
        }
    }
    int result = 1;
    while (found.Contains (result)) {
        result ++;
    }
    return result;
}
----------------------------------------

 public int solution(int[] array) {
    bool[] check = new bool[array.Length];
    int max = 0, result = 1;
    for (int i = 0; i < array.Length; i++) {
        int current = array[i];
        if (current > 0) {
            if (current > max) {
                max = current;
            }
            check[current - 1] = true;
        }
    }
    for (int i = 0; i < max; i++) {
        if (!check[i]) {
            result = i + 1;
            break;
        }
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
660
1
Gpt3D_Clone660_1.cs 1 13
Gpt3D_Clone660_1.cs 14 31
----------------------------------------

public int solution (int [] array) {
    HashSet < int > found = new HashSet < int > ();
    for (int i = 0; i < array.Length; i ++) {
        if (array [i] > 0) {
            found.Add (array [i]);
        }
    }
    int result = 1;
    while (found.Contains (result)) {
        result ++;
    }
    return result;
}
----------------------------------------

 public int solution(int[] array) {
    Array.Sort(array);
    int result = 1;
    for (int i = 0; i < array.Length; i++) {
        int num = array[i];
        if (num > 0) {
            while (num > result) {
                result++;
            }
            if (num == result) {
                result++;
            }
        }
    }
    return result;
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
660
2
Gpt3D_Clone660_2.cs 1 13
Gpt3D_Clone660_2.cs 14 32
----------------------------------------

public int solution (int [] array) {
    HashSet < int > found = new HashSet < int > ();
    for (int i = 0; i < array.Length; i ++) {
        if (array [i] > 0) {
            found.Add (array [i]);
        }
    }
    int result = 1;
    while (found.Contains (result)) {
        result ++;
    }
    return result;
}
----------------------------------------

 public int solution(int[] array) {
    Array.Sort(array);
    int result = 1;
    for (int i = 0; i < array.Length; i++) {
        int num = array[i];
        if (num > 0) {
            for (int j = num; j > 0; j--) {
                if (j != result) {
                    result = j;
                }
            }
            result++;
        }
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
660
3
Gpt3D_Clone660_3.cs 1 13
Gpt3D_Clone660_3.cs 14 29
----------------------------------------

public int solution (int [] array) {
    HashSet < int > found = new HashSet < int > ();
    for (int i = 0; i < array.Length; i ++) {
        if (array [i] > 0) {
            found.Add (array [i]);
        }
    }
    int result = 1;
    while (found.Contains (result)) {
        result ++;
    }
    return result;
}
----------------------------------------

  public int solution(int[] array) {
    Array.Sort(array);
    int result = 1;
    for (int i = 0; i < array.Length; i++) {
        int num = array[i];
        if (num > 0 && num == result) {
            result++;
            while(i+1 < array.Length && array[i+1] == num){
                i++;
            }
        }
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
660
4
Gpt3D_Clone660_4.cs 1 13
Gpt3D_Clone660_4.cs 14 28
----------------------------------------

public int solution (int [] array) {
    HashSet < int > found = new HashSet < int > ();
    for (int i = 0; i < array.Length; i ++) {
        if (array [i] > 0) {
            found.Add (array [i]);
        }
    }
    int result = 1;
    while (found.Contains (result)) {
        result ++;
    }
    return result;
}
----------------------------------------

 public int solution(int[] array) {
    Array.Sort(array);
    int result = 1;
    for (int i = 0; i < array.Length; i++) {
        int num = array[i];
        if (num == result) {
            result++;
        } else if (num > result) {
            break;
        }
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
660
5
Gpt3D_Clone660_5.cs 1 13
Gpt3D_Clone660_5.cs 14 29
----------------------------------------

public int solution (int [] array) {
    HashSet < int > found = new HashSet < int > ();
    for (int i = 0; i < array.Length; i ++) {
        if (array [i] > 0) {
            found.Add (array [i]);
        }
    }
    int result = 1;
    while (found.Contains (result)) {
        result ++;
    }
    return result;
}
----------------------------------------

 public int solution(int[] array) {
    int result = 1;
    HashSet<int> found = new HashSet<int>();
    for(int i = 0; i < array.Length; i++) {
        int num = array[i];
        if(num > 0 && !found.Contains(num)) {
            found.Add(num);
            if (num == result) {
                result ++;
            }
        }
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
660
7
Gpt3D_Clone660_7.cs 1 13
Gpt3D_Clone660_7.cs 14 25
----------------------------------------

public int solution (int [] array) {
    HashSet < int > found = new HashSet < int > ();
    for (int i = 0; i < array.Length; i ++) {
        if (array [i] > 0) {
            found.Add (array [i]);
        }
    }
    int result = 1;
    while (found.Contains (result)) {
        result ++;
    }
    return result;
}
----------------------------------------

 public int solution(int[] array) {
    array = array.Where(n => n > 0).Distinct().OrderBy(n => n).ToArray();
    int result = 1;
    for (int i = 0; i < array.Length; i++) {
        if (array[i] == result) {
            result++;
        }
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
660
8
Gpt3D_Clone660_8.cs 1 13
Gpt3D_Clone660_8.cs 14 25
----------------------------------------

public int solution (int [] array) {
    HashSet < int > found = new HashSet < int > ();
    for (int i = 0; i < array.Length; i ++) {
        if (array [i] > 0) {
            found.Add (array [i]);
        }
    }
    int result = 1;
    while (found.Contains (result)) {
        result ++;
    }
    return result;
}
----------------------------------------

 public int solution(int[] array) {
    int result = 1;
    for (int i = 0; i < array.Length; i++) {
        int current = array[i];
        if (current > 0 && current == result) {
            result++;
        }
    }
    return result;
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
663
0
Gpt3D_Clone663_0.cs 1 18
Gpt3D_Clone663_0.cs 19 39
----------------------------------------

public void ReadXml (System.Xml.XmlReader reader) {
    reader.Read ();
    reader.MoveToContent ();
    if (reader.LocalName == "AnotherNode") {
        var innerXml = Serializer < AnotherClass >.CreateSerializer ();
        Remove = (AnotherClass) innerXml.Deserialize (reader);
        reader.MoveToContent ();
    }
    reader.Read ();
    if (reader.IsStartElement ()) {
        do
            {
                var innerXml = Serializer < T >.CreateSerializer ();
                var obj = (T) innerXml.Deserialize (reader);
                Updates.Add (obj);
            } while (reader.MoveToContent () == XmlNodeType.Element);
    }
}
----------------------------------------

	public void ReadXml(System.Xml.XmlReader reader) {
	
	var serializerOfAnotherClass = Serializer<AnotherClass>.CreateSerializer();
	var serializerOfT = Serializer<T>.CreateSerializer();
    
	reader.MoveToContent();
	while (reader.Read()) {
		if (reader.LocalName == "AnotherNode") {
			Remove = (AnotherClass)serializerOfAnotherClass.Deserialize(reader);
			reader.Read();
		}
		while (reader.LocalName == "T") {
			var obj = (T)serializerOfT.Deserialize(reader);
			Updates.Add(obj);
			reader.Read();
		}
		reader.MoveToContent();
	}
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
667
0
Gpt3D_Clone667_0.cs 1 20
Gpt3D_Clone667_0.cs 21 39
----------------------------------------

public static void WriteLog (string strLog) {
    StreamWriter log;
    FileStream fileStream = null;
    DirectoryInfo logDirInfo = null;
    FileInfo logFileInfo;
    string logFilePath = "C:\\Logs\\";
    logFilePath = logFilePath + "Log-" + System.DateTime.Today.ToString ("MM-dd-yyyy") + "." + "txt";
    logFileInfo = new FileInfo (logFilePath);
    logDirInfo = new DirectoryInfo (logFileInfo.DirectoryName);
    if (! logDirInfo.Exists)
        logDirInfo.Create ();
    if (! logFileInfo.Exists) {
        fileStream = logFileInfo.Create ();
    } else {
        fileStream = new FileStream (logFilePath, FileMode.Append);
    }
    log = new StreamWriter (fileStream);
    log.WriteLine (strLog);
    log.Close ();
}
----------------------------------------

  public static void WriteLog (string strLog) 
    {
        FileStream fs = null; 
        StreamWriter swLog = null;
        string logFilePath = Path.Combine("C:\\Logs\\Log-" + System.DateTime.Today.ToString ("MM-dd-yyyy") + "." + "txt");
        DirectoryInfo diLogDir = new DirectoryInfo(logFilePath);
        if(!diLogDir.Exists) 
        { 
            diLogDir.Create(); 
        }
        fs = File.Open(logFilePath, FileMode.Append);
        swLog = new StreamWriter(fs); 
        swLog.WriteLine(strLog); 
        swLog.Close(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
667
1
Gpt3D_Clone667_1.cs 1 20
Gpt3D_Clone667_1.cs 21 39
----------------------------------------

public static void WriteLog (string strLog) {
    StreamWriter log;
    FileStream fileStream = null;
    DirectoryInfo logDirInfo = null;
    FileInfo logFileInfo;
    string logFilePath = "C:\\Logs\\";
    logFilePath = logFilePath + "Log-" + System.DateTime.Today.ToString ("MM-dd-yyyy") + "." + "txt";
    logFileInfo = new FileInfo (logFilePath);
    logDirInfo = new DirectoryInfo (logFileInfo.DirectoryName);
    if (! logDirInfo.Exists)
        logDirInfo.Create ();
    if (! logFileInfo.Exists) {
        fileStream = logFileInfo.Create ();
    } else {
        fileStream = new FileStream (logFilePath, FileMode.Append);
    }
    log = new StreamWriter (fileStream);
    log.WriteLine (strLog);
    log.Close ();
}
----------------------------------------

  public static void WriteLog (string strLog) 
    {
        string logFilePath = Path.Combine("C:\\Logs\\Log-" + System.DateTime.Today.ToString ("MM-dd-yyyy") + "." + "txt");
        if (!Directory.Exists(Path.GetDirectoryName(logFilePath)))
        { 
            Directory.CreateDirectory(Path.GetDirectoryName(logFilePath));
        }
        FileStream fs = new FileStream(logFilePath, FileMode.Append);
        StreamWriter swLog = new StreamWriter (fs);
        swLog.WriteLine(strLog); 
        swLog.Flush(); 
        swLog.Close();
        fs.Close();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
667
2
Gpt3D_Clone667_2.cs 1 20
Gpt3D_Clone667_2.cs 21 38
----------------------------------------

public static void WriteLog (string strLog) {
    StreamWriter log;
    FileStream fileStream = null;
    DirectoryInfo logDirInfo = null;
    FileInfo logFileInfo;
    string logFilePath = "C:\\Logs\\";
    logFilePath = logFilePath + "Log-" + System.DateTime.Today.ToString ("MM-dd-yyyy") + "." + "txt";
    logFileInfo = new FileInfo (logFilePath);
    logDirInfo = new DirectoryInfo (logFileInfo.DirectoryName);
    if (! logDirInfo.Exists)
        logDirInfo.Create ();
    if (! logFileInfo.Exists) {
        fileStream = logFileInfo.Create ();
    } else {
        fileStream = new FileStream (logFilePath, FileMode.Append);
    }
    log = new StreamWriter (fileStream);
    log.WriteLine (strLog);
    log.Close ();
}
----------------------------------------

 public static void WriteLog(string strLog) 
    { 
        string folderName = "C:\\Logs";  
        string fileName = "Log-" + DateTime.Today.ToString ("MM-dd-yyyy") + ".txt";
        string filePath = Path.Combine(folderName, fileName);
        if (!Directory.Exists (folderName)) 
        {
            Directory.CreateDirectory(folderName);
        }
        using (StreamWriter logFile = new StreamWriter(filePath, true))
        {
            logFile.WriteLine(strLog);
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
667
3
Gpt3D_Clone667_3.cs 1 20
Gpt3D_Clone667_3.cs 21 37
----------------------------------------

public static void WriteLog (string strLog) {
    StreamWriter log;
    FileStream fileStream = null;
    DirectoryInfo logDirInfo = null;
    FileInfo logFileInfo;
    string logFilePath = "C:\\Logs\\";
    logFilePath = logFilePath + "Log-" + System.DateTime.Today.ToString ("MM-dd-yyyy") + "." + "txt";
    logFileInfo = new FileInfo (logFilePath);
    logDirInfo = new DirectoryInfo (logFileInfo.DirectoryName);
    if (! logDirInfo.Exists)
        logDirInfo.Create ();
    if (! logFileInfo.Exists) {
        fileStream = logFileInfo.Create ();
    } else {
        fileStream = new FileStream (logFilePath, FileMode.Append);
    }
    log = new StreamWriter (fileStream);
    log.WriteLine (strLog);
    log.Close ();
}
----------------------------------------

  public static void WriteLog (string strLog) 
    {
        string logFilePath = Path.Combine("C:\\Logs\\Log-" + System.DateTime.Today.ToString ("MM-dd-yyyy") + "." + "txt");
        if (!Directory.Exists(Path.GetDirectoryName(logFilePath)))
        {
            DirectoryInfo directoryInfo = Directory.CreateDirectory(Path.GetDirectoryName(logFilePath));
        }
        using (FileStream fs = File.Open(logFilePath, FileMode.Append))
        {
            using (StreamWriter swLog = new StreamWriter (fs))
            {
                swLog.WriteLine(strLog);
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
667
4
Gpt3D_Clone667_4.cs 1 20
Gpt3D_Clone667_4.cs 21 35
----------------------------------------

public static void WriteLog (string strLog) {
    StreamWriter log;
    FileStream fileStream = null;
    DirectoryInfo logDirInfo = null;
    FileInfo logFileInfo;
    string logFilePath = "C:\\Logs\\";
    logFilePath = logFilePath + "Log-" + System.DateTime.Today.ToString ("MM-dd-yyyy") + "." + "txt";
    logFileInfo = new FileInfo (logFilePath);
    logDirInfo = new DirectoryInfo (logFileInfo.DirectoryName);
    if (! logDirInfo.Exists)
        logDirInfo.Create ();
    if (! logFileInfo.Exists) {
        fileStream = logFileInfo.Create ();
    } else {
        fileStream = new FileStream (logFilePath, FileMode.Append);
    }
    log = new StreamWriter (fileStream);
    log.WriteLine (strLog);
    log.Close ();
}
----------------------------------------

 public static void WriteLog(string strLog) 
    {
        string logFilePath = Path.Combine("C:\\Logs\\Log-" + System.DateTime.Today.ToString ("MM-dd-yyyy") + "." + "txt");
        if (!Directory.Exists(Path.GetDirectoryName(logFilePath)))
        {
            DirectoryInfo directoryInfo = Directory.CreateDirectory(Path.GetDirectoryName(logFilePath));
        }
        StreamWriter swLog = new StreamWriter(logFilePath, true);
        swLog.WriteLine(strLog);
        swLog.Flush();
        swLog.Close();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
667
5
Gpt3D_Clone667_5.cs 1 20
Gpt3D_Clone667_5.cs 21 33
----------------------------------------

public static void WriteLog (string strLog) {
    StreamWriter log;
    FileStream fileStream = null;
    DirectoryInfo logDirInfo = null;
    FileInfo logFileInfo;
    string logFilePath = "C:\\Logs\\";
    logFilePath = logFilePath + "Log-" + System.DateTime.Today.ToString ("MM-dd-yyyy") + "." + "txt";
    logFileInfo = new FileInfo (logFilePath);
    logDirInfo = new DirectoryInfo (logFileInfo.DirectoryName);
    if (! logDirInfo.Exists)
        logDirInfo.Create ();
    if (! logFileInfo.Exists) {
        fileStream = logFileInfo.Create ();
    } else {
        fileStream = new FileStream (logFilePath, FileMode.Append);
    }
    log = new StreamWriter (fileStream);
    log.WriteLine (strLog);
    log.Close ();
}
----------------------------------------

 public static void WriteLog (string strLog)
    {
        string logFilePath = Path.Combine("C:\\Logs\\Log-" + System.DateTime.Today.ToString ("MM-dd-yyyy") + "." + "txt");
        FileStream fs = File.Open(logFilePath, FileMode.Append);
        StreamWriter swLog = new StreamWriter(fs); 
        swLog.WriteLine(strLog); 
        swLog.Flush();
        swLog.Close();
        fs.Close(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
667
6
Gpt3D_Clone667_6.cs 1 20
Gpt3D_Clone667_6.cs 21 35
----------------------------------------

public static void WriteLog (string strLog) {
    StreamWriter log;
    FileStream fileStream = null;
    DirectoryInfo logDirInfo = null;
    FileInfo logFileInfo;
    string logFilePath = "C:\\Logs\\";
    logFilePath = logFilePath + "Log-" + System.DateTime.Today.ToString ("MM-dd-yyyy") + "." + "txt";
    logFileInfo = new FileInfo (logFilePath);
    logDirInfo = new DirectoryInfo (logFileInfo.DirectoryName);
    if (! logDirInfo.Exists)
        logDirInfo.Create ();
    if (! logFileInfo.Exists) {
        fileStream = logFileInfo.Create ();
    } else {
        fileStream = new FileStream (logFilePath, FileMode.Append);
    }
    log = new StreamWriter (fileStream);
    log.WriteLine (strLog);
    log.Close ();
}
----------------------------------------

 public static void WriteLog (string strLog) 
    {
        string logFilePath = Path.Combine("C:\\Logs\\Log-" + System.DateTime.Today.ToString ("MM-dd-yyyy") + "." + "txt");
        if (!Directory.Exists(Path.GetDirectoryName(logFilePath)))
        {
            Directory.CreateDirectory(Path.GetDirectoryName(logFilePath));
        }
        StreamWriter swLog = File.AppendText(logFilePath);
        swLog.WriteLine(strLog);
        swLog.Flush();
        swLog.Close();
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
667
7
Gpt3D_Clone667_7.cs 1 20
Gpt3D_Clone667_7.cs 21 35
----------------------------------------

public static void WriteLog (string strLog) {
    StreamWriter log;
    FileStream fileStream = null;
    DirectoryInfo logDirInfo = null;
    FileInfo logFileInfo;
    string logFilePath = "C:\\Logs\\";
    logFilePath = logFilePath + "Log-" + System.DateTime.Today.ToString ("MM-dd-yyyy") + "." + "txt";
    logFileInfo = new FileInfo (logFilePath);
    logDirInfo = new DirectoryInfo (logFileInfo.DirectoryName);
    if (! logDirInfo.Exists)
        logDirInfo.Create ();
    if (! logFileInfo.Exists) {
        fileStream = logFileInfo.Create ();
    } else {
        fileStream = new FileStream (logFilePath, FileMode.Append);
    }
    log = new StreamWriter (fileStream);
    log.WriteLine (strLog);
    log.Close ();
}
----------------------------------------

  public static void WriteLog (string strLog) 
    {
        string logFilePath = Path.Combine("C:\\Logs\\Log-" + System.DateTime.Today.ToString ("MM-dd-yyyy") + "." + "txt");
        if (!Directory.Exists(Path.GetDirectoryName(logFilePath)))
        {
            Directory.CreateDirectory(Path.GetDirectoryName(logFilePath));
        }
        using (StreamWriter swLog = new StreamWriter(logFilePath, true))
        {
            swLog.WriteLine(strLog);
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
667
8
Gpt3D_Clone667_8.cs 1 20
Gpt3D_Clone667_8.cs 21 31
----------------------------------------

public static void WriteLog (string strLog) {
    StreamWriter log;
    FileStream fileStream = null;
    DirectoryInfo logDirInfo = null;
    FileInfo logFileInfo;
    string logFilePath = "C:\\Logs\\";
    logFilePath = logFilePath + "Log-" + System.DateTime.Today.ToString ("MM-dd-yyyy") + "." + "txt";
    logFileInfo = new FileInfo (logFilePath);
    logDirInfo = new DirectoryInfo (logFileInfo.DirectoryName);
    if (! logDirInfo.Exists)
        logDirInfo.Create ();
    if (! logFileInfo.Exists) {
        fileStream = logFileInfo.Create ();
    } else {
        fileStream = new FileStream (logFilePath, FileMode.Append);
    }
    log = new StreamWriter (fileStream);
    log.WriteLine (strLog);
    log.Close ();
}
----------------------------------------

 public static void WriteLog (string strLog) 
    {
        string logFilePath = Path.Combine("C:\\Logs\\Log-" + System.DateTime.Today.ToString ("MM-dd-yyyy") + "." + "txt");
        if (!Directory.Exists(Path.GetDirectoryName(logFilePath)))
        { 
            Directory.CreateDirectory(Path.GetDirectoryName(logFilePath));
        }
        File.AppendAllText(logFilePath, strLog + Environment.NewLine);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
672
0
Gpt3D_Clone672_0.cs 1 17
Gpt3D_Clone672_0.cs 18 170
----------------------------------------

private void loadFromFile (String file) {
    foreach (String line in System.IO.File.ReadAllLines (file)) {
        if ((! String.IsNullOrEmpty (line)) && (! line.StartsWith (";")) && (! line.StartsWith ("#")) && (! line.StartsWith ("'")) && (line.Contains ('='))) {
            int index = line.IndexOf ('=');
            String key = line.Substring (0, index).Trim ();
            String value = line.Substring (index + 1).Trim ();
            if ((value.StartsWith ("\"") && value.EndsWith ("\"")) || (value.StartsWith ("'") && value.EndsWith ("'"))) {
                value = value.Substring (1, value.Length - 2);
            }
            try {
                list.Add (key, value);
            }
            catch {
            }
        }
    }
}
----------------------------------------

  private void loadFromFile (String file) {
           StringBuilder lineData = new StringBuilder();
            using (FileStream fs = new FileStream(file, FileMode.OpenOrCreate, FileAccess.ReadWrite))
            { 
                StreamReader reader = new StreamReader(fs);
                while (!reader.EndOfStream)
                {
                    lineData.AppendLine(reader.ReadLine());
                }
                bool check;
                string[] keyValue = lineData.ToString().Split(';');
                foreach (string keyValueData in keyValue)
                {
                    if (!string.IsNullOrEmpty(keyValueData))
                    {
                        
                        if (keyValueData.Contains('='))
                        {
                            var keyandValue = keyValueData.Split('=');
                            if (keyandValue[1].Trim().StartsWith("'") && keyandValue[1].Trim().EndsWith("'"))
                            {
                                check = true;
                            }
                            else if (keyandValue[1].Trim().StartsWith("\"") && keyandValue[1].Trim().EndsWith("\""))
                            {
                                check = true;
                            }
                            else
                            {
                                check = false;
                            }
                            if (check == true)
                            {
                                string newValue = keyandValue[1].Trim().Substring(1, keyandValue[1].Trim().Length - 2);
                                try
                                {
                                    list.Add(keyandValue[0], newValue);
                                }
                                catch
                                {
                                }
                            }
                        }
                    }
                }
            }
        }
  private void loadFromFile (String file)
        {
            if (!string.IsNullOrEmpty(file))
            {
                string[] lines = File.ReadAllLines(file);
                for (int i = 0; i < lines.Length; i++)
                {
                    if (lines[i].Contains('=') && !lines[i].StartsWith(";") && !lines[i].StartsWith("#") && !lines[i].StartsWith("'"))
                    {
                        int index = lines[i].IndexOf('=');
                        string key = lines[i].Substring(0, index).Trim();
                        string value = lines[i].Substring(index + 1).Trim();
                        if ((value.StartsWith("\"") && value.EndsWith("\"")) || (value.StartsWith("'") && value.EndsWith("'")))
                        {
                            value = value.Substring(1, value.Length - 2);
                            try
                            {
                                list.Add(key, value);
                            }
                            catch
                            {
                            }
                        }
                    }
                }
            }
        }
        
 private void loadFromFile (String file)
        {
            if (!File.Exists(file))
            {
                return;
            }
            string[] linesArray = File.ReadAllLines(file);
            List<string> linesList = linesArray.Where(x => !string.IsNullOrWhiteSpace(x)).ToList();
            foreach (string line in linesList)
            {
                if (line.Contains('='))
                {
                    int index = line.IndexOf('=');
                    string key = line.Substring(0, index).Trim();
                    string value = line.Substring(index + 1).Trim();
                    if ((value.StartsWith("\"") && value.EndsWith("\"")) || (value.StartsWith("'") && value.EndsWith("'")))
                    {
                        value = value.Substring(1, value.Length - 2);
                        list.Add(key, value);
                    }
                }
            }
        }
        
 private void loadFromFile (String file) {
		if (!string.IsNullOrEmpty(file) && File.Exists(file)) {
			List<string> lines = File.ReadLines(file).Cast<string>().ToList();
			
			foreach (string line in lines) {
				if (line.Contains('=') && !line.Trim().StartsWith(";") && !line.Trim().StartsWith("#") && !line.Trim().StartsWith("'")) {
					int index = line.IndexOf('=');
					string key = line.Substring(0, index).Trim();
					string value = line.Substring(index + 1).Trim();
					
					if ((value.StartsWith("\"") && value.EndsWith("\"")) || (value.StartsWith("'") && value.EndsWith("'"))) {
						value = value.Substring(1, value.Length - 2);
						list.Add(key, value);
					}
				}
			}
		}
	}
	
	
 private void loadFromFile (String file) {
    if (!string.IsNullOrEmpty(file)) {
        string[] lines = File.ReadAllLines(file);
        foreach (string line in lines) {
            if (line.Contains('=') && !line.Trim().StartsWith(";") && !line.Trim().StartsWith("#") && !line.Trim().StartsWith("'")) {
                int index = line.IndexOf('=');
                string key = line.Substring(0, index).Trim();
                string value = line.Substring(index + 1).Trim();
                if (value.StartsWith("\"") && value.EndsWith("\"") || value.StartsWith("'") && value.EndsWith("'")) {
                    value = value.Substring(1, value.Length - 2);
                    try {
                        list.Add(key, value);
                    } catch (Exception e) {
                    }
                } 
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
672
1
Gpt3D_Clone672_1.cs 1 17
Gpt3D_Clone672_1.cs 18 200
----------------------------------------

private void loadFromFile (String file) {
    foreach (String line in System.IO.File.ReadAllLines (file)) {
        if ((! String.IsNullOrEmpty (line)) && (! line.StartsWith (";")) && (! line.StartsWith ("#")) && (! line.StartsWith ("'")) && (line.Contains ('='))) {
            int index = line.IndexOf ('=');
            String key = line.Substring (0, index).Trim ();
            String value = line.Substring (index + 1).Trim ();
            if ((value.StartsWith ("\"") && value.EndsWith ("\"")) || (value.StartsWith ("'") && value.EndsWith ("'"))) {
                value = value.Substring (1, value.Length - 2);
            }
            try {
                list.Add (key, value);
            }
            catch {
            }
        }
    }
}
----------------------------------------

 private void loadFromFile (String file)
        {
            if (string.IsNullOrWhiteSpace(file))
            {
                return;
            }
            string[] lines = File.ReadAllLines(file);
            foreach (string line in lines)
            {
                if (!line.StartsWith(";") && !line.StartsWith("#") && !line.StartsWith("'") && line.Contains('='))
                {
                    int index = line.IndexOf('=');
                    string key = line.Substring(0, index).Trim();
                    string value = line.Substring(index + 1).Trim();
                    if (value.StartsWith("\"") && value.EndsWith ("\"") || value.StartsWith ("'") && value.EndsWith ("'"))
                    {
                        string newValue = value.Substring(1, value.Length - 2);
                        list.Add(key, newValue);
                    }
                }
            }
        }
 private void loadFromFile (String file) {
    if (string.IsNullOrEmpty(file))
    {
        throw new ArgumentNullException(nameof(file),"file cannot be null of empty");
    }
           string[] lines = File.ReadAllLines(file); 
            foreach (string line in lines) { 
                if (line.Contains('=') && !line.Trim().StartsWith(";") && !line.Trim().StartsWith("#") && !line.Trim().StartsWith("'")) {
                    int index = line.IndexOf('=');
                    string key = line.Substring(0, index).Trim();
                    string value = line.Substring(index + 1).Trim();
                    if ((value.StartsWith("\"") && value.EndsWith("\"")) || (value.StartsWith("'") && value.EndsWith("'")))
                    {
                        value = value.Substring(1, value.Length - 2);
                        try {
                            list.Add(key,value);
                        }
                        catch (IOException e) {
                            Console.WriteLine("IO Exception Occured");
                        }
                    }
                }
            }
        }
 private void loadFromFile (String file) {
        // Check if the file exists.
        if (File.Exists(file))
        {
            string[] lines = File.ReadAllLines(file);
            foreach (string line in lines)
            {
                if (!String.IsNullOrEmpty(line) &&
                                            !line.StartsWith(";") &&
                                            !line.StartsWith("#") &&
                                            !line.StartsWith("'") &&
                                            line.Contains('='))
                {
                    int index = line.IndexOf('=');
                    String key = line.Substring(0, index).Trim();
                    String value = line.Substring(index + 1).Trim();
                    if ((value.StartsWith("\"") && value.EndsWith("\"")) ||
                        (value.StartsWith("'") && value.EndsWith("'")))
                    {
                        value = value.Substring(1, value.Length - 2);
                        try
                        {
                            list.Add(key, value);
                        }
                        catch (Exception ex)
                        {
                            // Exception catch.
                        }
                    }
                }
            }
        }
    }
 private void loadFromFile (String file) 
    { 
        // Sanity check for file
        if (string.IsNullOrWhiteSpace(file))
            return;
        if (!File.Exists(file))
            return;
        // Read all lines from file
        string[] lines = File.ReadAllLines(file);
        // Iterate through lines
        foreach (string line in lines)
        {
            // Only process lines containing "=" 
            if (line.Contains('=') && 
                !line.Trim().StartsWith(";") && 
                !line.Trim().StartsWith("#") && 
                !line.Trim().StartsWith("'"))
            {
                int index = line.IndexOf('=');
                string key = line.Substring(0, index).Trim();
                string value = line.Substring(index + 1).Trim();
                if ((value.StartsWith("\"") && value.EndsWith("\"")) || (value.StartsWith("'") && value.EndsWith("'")))
                {
                    value = value.Substring(1, value.Length - 2);
                    try
                    {
                        list.Add(key, value);
                    }
                    catch 
                    {
                        // Exception Catch
                    }
                }
            }
        }
    }
 private void loadFromFile (String file) 
{
    if (string.IsNullOrWhiteSpace(file))
    {
        // Return exception
        return;
    }
    if (!File.Exists(file))
    {
        // Return exception
        return;
    }
    string[] lines = File.ReadAllLines(file);
    foreach (string line in lines)
    {
        // Continue if line is not empty or null and doesn't starts with ";", "#", or "'"
        if (line != null && line != string.Empty && !line.StartsWith(';') && !line.StartsWith('#') && !line.StartsWith('\''))
        {
            // Check if line contains "="
            if (line.Contains('='))
            {
                // Get index of "="
                int index = line.IndexOf('=');
                // Store key and value
                string key = line.Substring(0, index).Trim();
                string value = line.Substring(index + 1).Trim();
                // Check if value starts and ends with " or '
                if (value.StartsWith('"') && value.EndsWith('"') || value.StartsWith('\'') && value.EndsWith('\''))
                {
                    // Get new value
                    string newValue = value.Substring(1, value.Length - 2);
                    // Add key and value to list
                    try {
                        list.Add(key, newValue);
                    }               
                    catch 
                    {
                        // Exception Catch
                    }
                }
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
672
2
Gpt3D_Clone672_2.cs 1 17
Gpt3D_Clone672_2.cs 18 200
----------------------------------------

private void loadFromFile (String file) {
    foreach (String line in System.IO.File.ReadAllLines (file)) {
        if ((! String.IsNullOrEmpty (line)) && (! line.StartsWith (";")) && (! line.StartsWith ("#")) && (! line.StartsWith ("'")) && (line.Contains ('='))) {
            int index = line.IndexOf ('=');
            String key = line.Substring (0, index).Trim ();
            String value = line.Substring (index + 1).Trim ();
            if ((value.StartsWith ("\"") && value.EndsWith ("\"")) || (value.StartsWith ("'") && value.EndsWith ("'"))) {
                value = value.Substring (1, value.Length - 2);
            }
            try {
                list.Add (key, value);
            }
            catch {
            }
        }
    }
}
----------------------------------------

 private void loadFromFile (String file)
        {
            if (string.IsNullOrWhiteSpace(file))
            {
                return;
            }
            string[] lines = File.ReadAllLines(file);
            foreach (string line in lines)
            {
                if (!line.StartsWith(";") && !line.StartsWith("#") && !line.StartsWith("'") && line.Contains('='))
                {
                    int index = line.IndexOf('=');
                    string key = line.Substring(0, index).Trim();
                    string value = line.Substring(index + 1).Trim();
                    if (value.StartsWith("\"") && value.EndsWith ("\"") || value.StartsWith ("'") && value.EndsWith ("'"))
                    {
                        string newValue = value.Substring(1, value.Length - 2);
                        list.Add(key, newValue);
                    }
                }
            }
        }
 private void loadFromFile (String file) {
    if (string.IsNullOrEmpty(file))
    {
        throw new ArgumentNullException(nameof(file),"file cannot be null of empty");
    }
           string[] lines = File.ReadAllLines(file); 
            foreach (string line in lines) { 
                if (line.Contains('=') && !line.Trim().StartsWith(";") && !line.Trim().StartsWith("#") && !line.Trim().StartsWith("'")) {
                    int index = line.IndexOf('=');
                    string key = line.Substring(0, index).Trim();
                    string value = line.Substring(index + 1).Trim();
                    if ((value.StartsWith("\"") && value.EndsWith("\"")) || (value.StartsWith("'") && value.EndsWith("'")))
                    {
                        value = value.Substring(1, value.Length - 2);
                        try {
                            list.Add(key,value);
                        }
                        catch (IOException e) {
                            Console.WriteLine("IO Exception Occured");
                        }
                    }
                }
            }
        }
 private void loadFromFile (String file) {
        // Check if the file exists.
        if (File.Exists(file))
        {
            string[] lines = File.ReadAllLines(file);
            foreach (string line in lines)
            {
                if (!String.IsNullOrEmpty(line) &&
                                            !line.StartsWith(";") &&
                                            !line.StartsWith("#") &&
                                            !line.StartsWith("'") &&
                                            line.Contains('='))
                {
                    int index = line.IndexOf('=');
                    String key = line.Substring(0, index).Trim();
                    String value = line.Substring(index + 1).Trim();
                    if ((value.StartsWith("\"") && value.EndsWith("\"")) ||
                        (value.StartsWith("'") && value.EndsWith("'")))
                    {
                        value = value.Substring(1, value.Length - 2);
                        try
                        {
                            list.Add(key, value);
                        }
                        catch (Exception ex)
                        {
                            // Exception catch.
                        }
                    }
                }
            }
        }
    }
 private void loadFromFile (String file) 
    { 
        // Sanity check for file
        if (string.IsNullOrWhiteSpace(file))
            return;
        if (!File.Exists(file))
            return;
        // Read all lines from file
        string[] lines = File.ReadAllLines(file);
        // Iterate through lines
        foreach (string line in lines)
        {
            // Only process lines containing "=" 
            if (line.Contains('=') && 
                !line.Trim().StartsWith(";") && 
                !line.Trim().StartsWith("#") && 
                !line.Trim().StartsWith("'"))
            {
                int index = line.IndexOf('=');
                string key = line.Substring(0, index).Trim();
                string value = line.Substring(index + 1).Trim();
                if ((value.StartsWith("\"") && value.EndsWith("\"")) || (value.StartsWith("'") && value.EndsWith("'")))
                {
                    value = value.Substring(1, value.Length - 2);
                    try
                    {
                        list.Add(key, value);
                    }
                    catch 
                    {
                        // Exception Catch
                    }
                }
            }
        }
    }
 private void loadFromFile (String file) 
{
    if (string.IsNullOrWhiteSpace(file))
    {
        // Return exception
        return;
    }
    if (!File.Exists(file))
    {
        // Return exception
        return;
    }
    string[] lines = File.ReadAllLines(file);
    foreach (string line in lines)
    {
        // Continue if line is not empty or null and doesn't starts with ";", "#", or "'"
        if (line != null && line != string.Empty && !line.StartsWith(';') && !line.StartsWith('#') && !line.StartsWith('\''))
        {
            // Check if line contains "="
            if (line.Contains('='))
            {
                // Get index of "="
                int index = line.IndexOf('=');
                // Store key and value
                string key = line.Substring(0, index).Trim();
                string value = line.Substring(index + 1).Trim();
                // Check if value starts and ends with " or '
                if (value.StartsWith('"') && value.EndsWith('"') || value.StartsWith('\'') && value.EndsWith('\''))
                {
                    // Get new value
                    string newValue = value.Substring(1, value.Length - 2);
                    // Add key and value to list
                    try {
                        list.Add(key, newValue);
                    }               
                    catch 
                    {
                        // Exception Catch
                    }
                }
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
672
3
Gpt3D_Clone672_3.cs 1 17
Gpt3D_Clone672_3.cs 18 200
----------------------------------------

private void loadFromFile (String file) {
    foreach (String line in System.IO.File.ReadAllLines (file)) {
        if ((! String.IsNullOrEmpty (line)) && (! line.StartsWith (";")) && (! line.StartsWith ("#")) && (! line.StartsWith ("'")) && (line.Contains ('='))) {
            int index = line.IndexOf ('=');
            String key = line.Substring (0, index).Trim ();
            String value = line.Substring (index + 1).Trim ();
            if ((value.StartsWith ("\"") && value.EndsWith ("\"")) || (value.StartsWith ("'") && value.EndsWith ("'"))) {
                value = value.Substring (1, value.Length - 2);
            }
            try {
                list.Add (key, value);
            }
            catch {
            }
        }
    }
}
----------------------------------------

 private void loadFromFile (String file)
        {
            if (string.IsNullOrWhiteSpace(file))
            {
                return;
            }
            string[] lines = File.ReadAllLines(file);
            foreach (string line in lines)
            {
                if (!line.StartsWith(";") && !line.StartsWith("#") && !line.StartsWith("'") && line.Contains('='))
                {
                    int index = line.IndexOf('=');
                    string key = line.Substring(0, index).Trim();
                    string value = line.Substring(index + 1).Trim();
                    if (value.StartsWith("\"") && value.EndsWith ("\"") || value.StartsWith ("'") && value.EndsWith ("'"))
                    {
                        string newValue = value.Substring(1, value.Length - 2);
                        list.Add(key, newValue);
                    }
                }
            }
        }
 private void loadFromFile (String file) {
    if (string.IsNullOrEmpty(file))
    {
        throw new ArgumentNullException(nameof(file),"file cannot be null of empty");
    }
           string[] lines = File.ReadAllLines(file); 
            foreach (string line in lines) { 
                if (line.Contains('=') && !line.Trim().StartsWith(";") && !line.Trim().StartsWith("#") && !line.Trim().StartsWith("'")) {
                    int index = line.IndexOf('=');
                    string key = line.Substring(0, index).Trim();
                    string value = line.Substring(index + 1).Trim();
                    if ((value.StartsWith("\"") && value.EndsWith("\"")) || (value.StartsWith("'") && value.EndsWith("'")))
                    {
                        value = value.Substring(1, value.Length - 2);
                        try {
                            list.Add(key,value);
                        }
                        catch (IOException e) {
                            Console.WriteLine("IO Exception Occured");
                        }
                    }
                }
            }
        }
 private void loadFromFile (String file) {
        // Check if the file exists.
        if (File.Exists(file))
        {
            string[] lines = File.ReadAllLines(file);
            foreach (string line in lines)
            {
                if (!String.IsNullOrEmpty(line) &&
                                            !line.StartsWith(";") &&
                                            !line.StartsWith("#") &&
                                            !line.StartsWith("'") &&
                                            line.Contains('='))
                {
                    int index = line.IndexOf('=');
                    String key = line.Substring(0, index).Trim();
                    String value = line.Substring(index + 1).Trim();
                    if ((value.StartsWith("\"") && value.EndsWith("\"")) ||
                        (value.StartsWith("'") && value.EndsWith("'")))
                    {
                        value = value.Substring(1, value.Length - 2);
                        try
                        {
                            list.Add(key, value);
                        }
                        catch (Exception ex)
                        {
                            // Exception catch.
                        }
                    }
                }
            }
        }
    }
 private void loadFromFile (String file) 
    { 
        // Sanity check for file
        if (string.IsNullOrWhiteSpace(file))
            return;
        if (!File.Exists(file))
            return;
        // Read all lines from file
        string[] lines = File.ReadAllLines(file);
        // Iterate through lines
        foreach (string line in lines)
        {
            // Only process lines containing "=" 
            if (line.Contains('=') && 
                !line.Trim().StartsWith(";") && 
                !line.Trim().StartsWith("#") && 
                !line.Trim().StartsWith("'"))
            {
                int index = line.IndexOf('=');
                string key = line.Substring(0, index).Trim();
                string value = line.Substring(index + 1).Trim();
                if ((value.StartsWith("\"") && value.EndsWith("\"")) || (value.StartsWith("'") && value.EndsWith("'")))
                {
                    value = value.Substring(1, value.Length - 2);
                    try
                    {
                        list.Add(key, value);
                    }
                    catch 
                    {
                        // Exception Catch
                    }
                }
            }
        }
    }
 private void loadFromFile (String file) 
{
    if (string.IsNullOrWhiteSpace(file))
    {
        // Return exception
        return;
    }
    if (!File.Exists(file))
    {
        // Return exception
        return;
    }
    string[] lines = File.ReadAllLines(file);
    foreach (string line in lines)
    {
        // Continue if line is not empty or null and doesn't starts with ";", "#", or "'"
        if (line != null && line != string.Empty && !line.StartsWith(';') && !line.StartsWith('#') && !line.StartsWith('\''))
        {
            // Check if line contains "="
            if (line.Contains('='))
            {
                // Get index of "="
                int index = line.IndexOf('=');
                // Store key and value
                string key = line.Substring(0, index).Trim();
                string value = line.Substring(index + 1).Trim();
                // Check if value starts and ends with " or '
                if (value.StartsWith('"') && value.EndsWith('"') || value.StartsWith('\'') && value.EndsWith('\''))
                {
                    // Get new value
                    string newValue = value.Substring(1, value.Length - 2);
                    // Add key and value to list
                    try {
                        list.Add(key, newValue);
                    }               
                    catch 
                    {
                        // Exception Catch
                    }
                }
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
672
4
Gpt3D_Clone672_4.cs 1 17
Gpt3D_Clone672_4.cs 18 170
----------------------------------------

private void loadFromFile (String file) {
    foreach (String line in System.IO.File.ReadAllLines (file)) {
        if ((! String.IsNullOrEmpty (line)) && (! line.StartsWith (";")) && (! line.StartsWith ("#")) && (! line.StartsWith ("'")) && (line.Contains ('='))) {
            int index = line.IndexOf ('=');
            String key = line.Substring (0, index).Trim ();
            String value = line.Substring (index + 1).Trim ();
            if ((value.StartsWith ("\"") && value.EndsWith ("\"")) || (value.StartsWith ("'") && value.EndsWith ("'"))) {
                value = value.Substring (1, value.Length - 2);
            }
            try {
                list.Add (key, value);
            }
            catch {
            }
        }
    }
}
----------------------------------------

  private void loadFromFile (String file) {
           StringBuilder lineData = new StringBuilder();
            using (FileStream fs = new FileStream(file, FileMode.OpenOrCreate, FileAccess.ReadWrite))
            { 
                StreamReader reader = new StreamReader(fs);
                while (!reader.EndOfStream)
                {
                    lineData.AppendLine(reader.ReadLine());
                }
                bool check;
                string[] keyValue = lineData.ToString().Split(';');
                foreach (string keyValueData in keyValue)
                {
                    if (!string.IsNullOrEmpty(keyValueData))
                    {
                        
                        if (keyValueData.Contains('='))
                        {
                            var keyandValue = keyValueData.Split('=');
                            if (keyandValue[1].Trim().StartsWith("'") && keyandValue[1].Trim().EndsWith("'"))
                            {
                                check = true;
                            }
                            else if (keyandValue[1].Trim().StartsWith("\"") && keyandValue[1].Trim().EndsWith("\""))
                            {
                                check = true;
                            }
                            else
                            {
                                check = false;
                            }
                            if (check == true)
                            {
                                string newValue = keyandValue[1].Trim().Substring(1, keyandValue[1].Trim().Length - 2);
                                try
                                {
                                    list.Add(keyandValue[0], newValue);
                                }
                                catch
                                {
                                }
                            }
                        }
                    }
                }
            }
        }
  private void loadFromFile (String file)
        {
            if (!string.IsNullOrEmpty(file))
            {
                string[] lines = File.ReadAllLines(file);
                for (int i = 0; i < lines.Length; i++)
                {
                    if (lines[i].Contains('=') && !lines[i].StartsWith(";") && !lines[i].StartsWith("#") && !lines[i].StartsWith("'"))
                    {
                        int index = lines[i].IndexOf('=');
                        string key = lines[i].Substring(0, index).Trim();
                        string value = lines[i].Substring(index + 1).Trim();
                        if ((value.StartsWith("\"") && value.EndsWith("\"")) || (value.StartsWith("'") && value.EndsWith("'")))
                        {
                            value = value.Substring(1, value.Length - 2);
                            try
                            {
                                list.Add(key, value);
                            }
                            catch
                            {
                            }
                        }
                    }
                }
            }
        }
        
 private void loadFromFile (String file)
        {
            if (!File.Exists(file))
            {
                return;
            }
            string[] linesArray = File.ReadAllLines(file);
            List<string> linesList = linesArray.Where(x => !string.IsNullOrWhiteSpace(x)).ToList();
            foreach (string line in linesList)
            {
                if (line.Contains('='))
                {
                    int index = line.IndexOf('=');
                    string key = line.Substring(0, index).Trim();
                    string value = line.Substring(index + 1).Trim();
                    if ((value.StartsWith("\"") && value.EndsWith("\"")) || (value.StartsWith("'") && value.EndsWith("'")))
                    {
                        value = value.Substring(1, value.Length - 2);
                        list.Add(key, value);
                    }
                }
            }
        }
        
 private void loadFromFile (String file) {
		if (!string.IsNullOrEmpty(file) && File.Exists(file)) {
			List<string> lines = File.ReadLines(file).Cast<string>().ToList();
			
			foreach (string line in lines) {
				if (line.Contains('=') && !line.Trim().StartsWith(";") && !line.Trim().StartsWith("#") && !line.Trim().StartsWith("'")) {
					int index = line.IndexOf('=');
					string key = line.Substring(0, index).Trim();
					string value = line.Substring(index + 1).Trim();
					
					if ((value.StartsWith("\"") && value.EndsWith("\"")) || (value.StartsWith("'") && value.EndsWith("'"))) {
						value = value.Substring(1, value.Length - 2);
						list.Add(key, value);
					}
				}
			}
		}
	}
	
	
 private void loadFromFile (String file) {
    if (!string.IsNullOrEmpty(file)) {
        string[] lines = File.ReadAllLines(file);
        foreach (string line in lines) {
            if (line.Contains('=') && !line.Trim().StartsWith(";") && !line.Trim().StartsWith("#") && !line.Trim().StartsWith("'")) {
                int index = line.IndexOf('=');
                string key = line.Substring(0, index).Trim();
                string value = line.Substring(index + 1).Trim();
                if (value.StartsWith("\"") && value.EndsWith("\"") || value.StartsWith("'") && value.EndsWith("'")) {
                    value = value.Substring(1, value.Length - 2);
                    try {
                        list.Add(key, value);
                    } catch (Exception e) {
                    }
                } 
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
672
5
Gpt3D_Clone672_5.cs 1 17
Gpt3D_Clone672_5.cs 18 170
----------------------------------------

private void loadFromFile (String file) {
    foreach (String line in System.IO.File.ReadAllLines (file)) {
        if ((! String.IsNullOrEmpty (line)) && (! line.StartsWith (";")) && (! line.StartsWith ("#")) && (! line.StartsWith ("'")) && (line.Contains ('='))) {
            int index = line.IndexOf ('=');
            String key = line.Substring (0, index).Trim ();
            String value = line.Substring (index + 1).Trim ();
            if ((value.StartsWith ("\"") && value.EndsWith ("\"")) || (value.StartsWith ("'") && value.EndsWith ("'"))) {
                value = value.Substring (1, value.Length - 2);
            }
            try {
                list.Add (key, value);
            }
            catch {
            }
        }
    }
}
----------------------------------------

  private void loadFromFile (String file) {
           StringBuilder lineData = new StringBuilder();
            using (FileStream fs = new FileStream(file, FileMode.OpenOrCreate, FileAccess.ReadWrite))
            { 
                StreamReader reader = new StreamReader(fs);
                while (!reader.EndOfStream)
                {
                    lineData.AppendLine(reader.ReadLine());
                }
                bool check;
                string[] keyValue = lineData.ToString().Split(';');
                foreach (string keyValueData in keyValue)
                {
                    if (!string.IsNullOrEmpty(keyValueData))
                    {
                        
                        if (keyValueData.Contains('='))
                        {
                            var keyandValue = keyValueData.Split('=');
                            if (keyandValue[1].Trim().StartsWith("'") && keyandValue[1].Trim().EndsWith("'"))
                            {
                                check = true;
                            }
                            else if (keyandValue[1].Trim().StartsWith("\"") && keyandValue[1].Trim().EndsWith("\""))
                            {
                                check = true;
                            }
                            else
                            {
                                check = false;
                            }
                            if (check == true)
                            {
                                string newValue = keyandValue[1].Trim().Substring(1, keyandValue[1].Trim().Length - 2);
                                try
                                {
                                    list.Add(keyandValue[0], newValue);
                                }
                                catch
                                {
                                }
                            }
                        }
                    }
                }
            }
        }
  private void loadFromFile (String file)
        {
            if (!string.IsNullOrEmpty(file))
            {
                string[] lines = File.ReadAllLines(file);
                for (int i = 0; i < lines.Length; i++)
                {
                    if (lines[i].Contains('=') && !lines[i].StartsWith(";") && !lines[i].StartsWith("#") && !lines[i].StartsWith("'"))
                    {
                        int index = lines[i].IndexOf('=');
                        string key = lines[i].Substring(0, index).Trim();
                        string value = lines[i].Substring(index + 1).Trim();
                        if ((value.StartsWith("\"") && value.EndsWith("\"")) || (value.StartsWith("'") && value.EndsWith("'")))
                        {
                            value = value.Substring(1, value.Length - 2);
                            try
                            {
                                list.Add(key, value);
                            }
                            catch
                            {
                            }
                        }
                    }
                }
            }
        }
        
 private void loadFromFile (String file)
        {
            if (!File.Exists(file))
            {
                return;
            }
            string[] linesArray = File.ReadAllLines(file);
            List<string> linesList = linesArray.Where(x => !string.IsNullOrWhiteSpace(x)).ToList();
            foreach (string line in linesList)
            {
                if (line.Contains('='))
                {
                    int index = line.IndexOf('=');
                    string key = line.Substring(0, index).Trim();
                    string value = line.Substring(index + 1).Trim();
                    if ((value.StartsWith("\"") && value.EndsWith("\"")) || (value.StartsWith("'") && value.EndsWith("'")))
                    {
                        value = value.Substring(1, value.Length - 2);
                        list.Add(key, value);
                    }
                }
            }
        }
        
 private void loadFromFile (String file) {
		if (!string.IsNullOrEmpty(file) && File.Exists(file)) {
			List<string> lines = File.ReadLines(file).Cast<string>().ToList();
			
			foreach (string line in lines) {
				if (line.Contains('=') && !line.Trim().StartsWith(";") && !line.Trim().StartsWith("#") && !line.Trim().StartsWith("'")) {
					int index = line.IndexOf('=');
					string key = line.Substring(0, index).Trim();
					string value = line.Substring(index + 1).Trim();
					
					if ((value.StartsWith("\"") && value.EndsWith("\"")) || (value.StartsWith("'") && value.EndsWith("'"))) {
						value = value.Substring(1, value.Length - 2);
						list.Add(key, value);
					}
				}
			}
		}
	}
	
	
 private void loadFromFile (String file) {
    if (!string.IsNullOrEmpty(file)) {
        string[] lines = File.ReadAllLines(file);
        foreach (string line in lines) {
            if (line.Contains('=') && !line.Trim().StartsWith(";") && !line.Trim().StartsWith("#") && !line.Trim().StartsWith("'")) {
                int index = line.IndexOf('=');
                string key = line.Substring(0, index).Trim();
                string value = line.Substring(index + 1).Trim();
                if (value.StartsWith("\"") && value.EndsWith("\"") || value.StartsWith("'") && value.EndsWith("'")) {
                    value = value.Substring(1, value.Length - 2);
                    try {
                        list.Add(key, value);
                    } catch (Exception e) {
                    }
                } 
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
672
6
Gpt3D_Clone672_6.cs 1 17
Gpt3D_Clone672_6.cs 18 170
----------------------------------------

private void loadFromFile (String file) {
    foreach (String line in System.IO.File.ReadAllLines (file)) {
        if ((! String.IsNullOrEmpty (line)) && (! line.StartsWith (";")) && (! line.StartsWith ("#")) && (! line.StartsWith ("'")) && (line.Contains ('='))) {
            int index = line.IndexOf ('=');
            String key = line.Substring (0, index).Trim ();
            String value = line.Substring (index + 1).Trim ();
            if ((value.StartsWith ("\"") && value.EndsWith ("\"")) || (value.StartsWith ("'") && value.EndsWith ("'"))) {
                value = value.Substring (1, value.Length - 2);
            }
            try {
                list.Add (key, value);
            }
            catch {
            }
        }
    }
}
----------------------------------------

  private void loadFromFile (String file) {
           StringBuilder lineData = new StringBuilder();
            using (FileStream fs = new FileStream(file, FileMode.OpenOrCreate, FileAccess.ReadWrite))
            { 
                StreamReader reader = new StreamReader(fs);
                while (!reader.EndOfStream)
                {
                    lineData.AppendLine(reader.ReadLine());
                }
                bool check;
                string[] keyValue = lineData.ToString().Split(';');
                foreach (string keyValueData in keyValue)
                {
                    if (!string.IsNullOrEmpty(keyValueData))
                    {
                        
                        if (keyValueData.Contains('='))
                        {
                            var keyandValue = keyValueData.Split('=');
                            if (keyandValue[1].Trim().StartsWith("'") && keyandValue[1].Trim().EndsWith("'"))
                            {
                                check = true;
                            }
                            else if (keyandValue[1].Trim().StartsWith("\"") && keyandValue[1].Trim().EndsWith("\""))
                            {
                                check = true;
                            }
                            else
                            {
                                check = false;
                            }
                            if (check == true)
                            {
                                string newValue = keyandValue[1].Trim().Substring(1, keyandValue[1].Trim().Length - 2);
                                try
                                {
                                    list.Add(keyandValue[0], newValue);
                                }
                                catch
                                {
                                }
                            }
                        }
                    }
                }
            }
        }
  private void loadFromFile (String file)
        {
            if (!string.IsNullOrEmpty(file))
            {
                string[] lines = File.ReadAllLines(file);
                for (int i = 0; i < lines.Length; i++)
                {
                    if (lines[i].Contains('=') && !lines[i].StartsWith(";") && !lines[i].StartsWith("#") && !lines[i].StartsWith("'"))
                    {
                        int index = lines[i].IndexOf('=');
                        string key = lines[i].Substring(0, index).Trim();
                        string value = lines[i].Substring(index + 1).Trim();
                        if ((value.StartsWith("\"") && value.EndsWith("\"")) || (value.StartsWith("'") && value.EndsWith("'")))
                        {
                            value = value.Substring(1, value.Length - 2);
                            try
                            {
                                list.Add(key, value);
                            }
                            catch
                            {
                            }
                        }
                    }
                }
            }
        }
        
 private void loadFromFile (String file)
        {
            if (!File.Exists(file))
            {
                return;
            }
            string[] linesArray = File.ReadAllLines(file);
            List<string> linesList = linesArray.Where(x => !string.IsNullOrWhiteSpace(x)).ToList();
            foreach (string line in linesList)
            {
                if (line.Contains('='))
                {
                    int index = line.IndexOf('=');
                    string key = line.Substring(0, index).Trim();
                    string value = line.Substring(index + 1).Trim();
                    if ((value.StartsWith("\"") && value.EndsWith("\"")) || (value.StartsWith("'") && value.EndsWith("'")))
                    {
                        value = value.Substring(1, value.Length - 2);
                        list.Add(key, value);
                    }
                }
            }
        }
        
 private void loadFromFile (String file) {
		if (!string.IsNullOrEmpty(file) && File.Exists(file)) {
			List<string> lines = File.ReadLines(file).Cast<string>().ToList();
			
			foreach (string line in lines) {
				if (line.Contains('=') && !line.Trim().StartsWith(";") && !line.Trim().StartsWith("#") && !line.Trim().StartsWith("'")) {
					int index = line.IndexOf('=');
					string key = line.Substring(0, index).Trim();
					string value = line.Substring(index + 1).Trim();
					
					if ((value.StartsWith("\"") && value.EndsWith("\"")) || (value.StartsWith("'") && value.EndsWith("'"))) {
						value = value.Substring(1, value.Length - 2);
						list.Add(key, value);
					}
				}
			}
		}
	}
	
	
 private void loadFromFile (String file) {
    if (!string.IsNullOrEmpty(file)) {
        string[] lines = File.ReadAllLines(file);
        foreach (string line in lines) {
            if (line.Contains('=') && !line.Trim().StartsWith(";") && !line.Trim().StartsWith("#") && !line.Trim().StartsWith("'")) {
                int index = line.IndexOf('=');
                string key = line.Substring(0, index).Trim();
                string value = line.Substring(index + 1).Trim();
                if (value.StartsWith("\"") && value.EndsWith("\"") || value.StartsWith("'") && value.EndsWith("'")) {
                    value = value.Substring(1, value.Length - 2);
                    try {
                        list.Add(key, value);
                    } catch (Exception e) {
                    }
                } 
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
672
8
Gpt3D_Clone672_8.cs 1 17
Gpt3D_Clone672_8.cs 18 200
----------------------------------------

private void loadFromFile (String file) {
    foreach (String line in System.IO.File.ReadAllLines (file)) {
        if ((! String.IsNullOrEmpty (line)) && (! line.StartsWith (";")) && (! line.StartsWith ("#")) && (! line.StartsWith ("'")) && (line.Contains ('='))) {
            int index = line.IndexOf ('=');
            String key = line.Substring (0, index).Trim ();
            String value = line.Substring (index + 1).Trim ();
            if ((value.StartsWith ("\"") && value.EndsWith ("\"")) || (value.StartsWith ("'") && value.EndsWith ("'"))) {
                value = value.Substring (1, value.Length - 2);
            }
            try {
                list.Add (key, value);
            }
            catch {
            }
        }
    }
}
----------------------------------------

 private void loadFromFile (String file)
        {
            if (string.IsNullOrWhiteSpace(file))
            {
                return;
            }
            string[] lines = File.ReadAllLines(file);
            foreach (string line in lines)
            {
                if (!line.StartsWith(";") && !line.StartsWith("#") && !line.StartsWith("'") && line.Contains('='))
                {
                    int index = line.IndexOf('=');
                    string key = line.Substring(0, index).Trim();
                    string value = line.Substring(index + 1).Trim();
                    if (value.StartsWith("\"") && value.EndsWith ("\"") || value.StartsWith ("'") && value.EndsWith ("'"))
                    {
                        string newValue = value.Substring(1, value.Length - 2);
                        list.Add(key, newValue);
                    }
                }
            }
        }
 private void loadFromFile (String file) {
    if (string.IsNullOrEmpty(file))
    {
        throw new ArgumentNullException(nameof(file),"file cannot be null of empty");
    }
           string[] lines = File.ReadAllLines(file); 
            foreach (string line in lines) { 
                if (line.Contains('=') && !line.Trim().StartsWith(";") && !line.Trim().StartsWith("#") && !line.Trim().StartsWith("'")) {
                    int index = line.IndexOf('=');
                    string key = line.Substring(0, index).Trim();
                    string value = line.Substring(index + 1).Trim();
                    if ((value.StartsWith("\"") && value.EndsWith("\"")) || (value.StartsWith("'") && value.EndsWith("'")))
                    {
                        value = value.Substring(1, value.Length - 2);
                        try {
                            list.Add(key,value);
                        }
                        catch (IOException e) {
                            Console.WriteLine("IO Exception Occured");
                        }
                    }
                }
            }
        }
 private void loadFromFile (String file) {
        // Check if the file exists.
        if (File.Exists(file))
        {
            string[] lines = File.ReadAllLines(file);
            foreach (string line in lines)
            {
                if (!String.IsNullOrEmpty(line) &&
                                            !line.StartsWith(";") &&
                                            !line.StartsWith("#") &&
                                            !line.StartsWith("'") &&
                                            line.Contains('='))
                {
                    int index = line.IndexOf('=');
                    String key = line.Substring(0, index).Trim();
                    String value = line.Substring(index + 1).Trim();
                    if ((value.StartsWith("\"") && value.EndsWith("\"")) ||
                        (value.StartsWith("'") && value.EndsWith("'")))
                    {
                        value = value.Substring(1, value.Length - 2);
                        try
                        {
                            list.Add(key, value);
                        }
                        catch (Exception ex)
                        {
                            // Exception catch.
                        }
                    }
                }
            }
        }
    }
 private void loadFromFile (String file) 
    { 
        // Sanity check for file
        if (string.IsNullOrWhiteSpace(file))
            return;
        if (!File.Exists(file))
            return;
        // Read all lines from file
        string[] lines = File.ReadAllLines(file);
        // Iterate through lines
        foreach (string line in lines)
        {
            // Only process lines containing "=" 
            if (line.Contains('=') && 
                !line.Trim().StartsWith(";") && 
                !line.Trim().StartsWith("#") && 
                !line.Trim().StartsWith("'"))
            {
                int index = line.IndexOf('=');
                string key = line.Substring(0, index).Trim();
                string value = line.Substring(index + 1).Trim();
                if ((value.StartsWith("\"") && value.EndsWith("\"")) || (value.StartsWith("'") && value.EndsWith("'")))
                {
                    value = value.Substring(1, value.Length - 2);
                    try
                    {
                        list.Add(key, value);
                    }
                    catch 
                    {
                        // Exception Catch
                    }
                }
            }
        }
    }
 private void loadFromFile (String file) 
{
    if (string.IsNullOrWhiteSpace(file))
    {
        // Return exception
        return;
    }
    if (!File.Exists(file))
    {
        // Return exception
        return;
    }
    string[] lines = File.ReadAllLines(file);
    foreach (string line in lines)
    {
        // Continue if line is not empty or null and doesn't starts with ";", "#", or "'"
        if (line != null && line != string.Empty && !line.StartsWith(';') && !line.StartsWith('#') && !line.StartsWith('\''))
        {
            // Check if line contains "="
            if (line.Contains('='))
            {
                // Get index of "="
                int index = line.IndexOf('=');
                // Store key and value
                string key = line.Substring(0, index).Trim();
                string value = line.Substring(index + 1).Trim();
                // Check if value starts and ends with " or '
                if (value.StartsWith('"') && value.EndsWith('"') || value.StartsWith('\'') && value.EndsWith('\''))
                {
                    // Get new value
                    string newValue = value.Substring(1, value.Length - 2);
                    // Add key and value to list
                    try {
                        list.Add(key, newValue);
                    }               
                    catch 
                    {
                        // Exception Catch
                    }
                }
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
672
9
Gpt3D_Clone672_9.cs 1 17
Gpt3D_Clone672_9.cs 18 170
----------------------------------------

private void loadFromFile (String file) {
    foreach (String line in System.IO.File.ReadAllLines (file)) {
        if ((! String.IsNullOrEmpty (line)) && (! line.StartsWith (";")) && (! line.StartsWith ("#")) && (! line.StartsWith ("'")) && (line.Contains ('='))) {
            int index = line.IndexOf ('=');
            String key = line.Substring (0, index).Trim ();
            String value = line.Substring (index + 1).Trim ();
            if ((value.StartsWith ("\"") && value.EndsWith ("\"")) || (value.StartsWith ("'") && value.EndsWith ("'"))) {
                value = value.Substring (1, value.Length - 2);
            }
            try {
                list.Add (key, value);
            }
            catch {
            }
        }
    }
}
----------------------------------------

  private void loadFromFile (String file) {
           StringBuilder lineData = new StringBuilder();
            using (FileStream fs = new FileStream(file, FileMode.OpenOrCreate, FileAccess.ReadWrite))
            { 
                StreamReader reader = new StreamReader(fs);
                while (!reader.EndOfStream)
                {
                    lineData.AppendLine(reader.ReadLine());
                }
                bool check;
                string[] keyValue = lineData.ToString().Split(';');
                foreach (string keyValueData in keyValue)
                {
                    if (!string.IsNullOrEmpty(keyValueData))
                    {
                        
                        if (keyValueData.Contains('='))
                        {
                            var keyandValue = keyValueData.Split('=');
                            if (keyandValue[1].Trim().StartsWith("'") && keyandValue[1].Trim().EndsWith("'"))
                            {
                                check = true;
                            }
                            else if (keyandValue[1].Trim().StartsWith("\"") && keyandValue[1].Trim().EndsWith("\""))
                            {
                                check = true;
                            }
                            else
                            {
                                check = false;
                            }
                            if (check == true)
                            {
                                string newValue = keyandValue[1].Trim().Substring(1, keyandValue[1].Trim().Length - 2);
                                try
                                {
                                    list.Add(keyandValue[0], newValue);
                                }
                                catch
                                {
                                }
                            }
                        }
                    }
                }
            }
        }
  private void loadFromFile (String file)
        {
            if (!string.IsNullOrEmpty(file))
            {
                string[] lines = File.ReadAllLines(file);
                for (int i = 0; i < lines.Length; i++)
                {
                    if (lines[i].Contains('=') && !lines[i].StartsWith(";") && !lines[i].StartsWith("#") && !lines[i].StartsWith("'"))
                    {
                        int index = lines[i].IndexOf('=');
                        string key = lines[i].Substring(0, index).Trim();
                        string value = lines[i].Substring(index + 1).Trim();
                        if ((value.StartsWith("\"") && value.EndsWith("\"")) || (value.StartsWith("'") && value.EndsWith("'")))
                        {
                            value = value.Substring(1, value.Length - 2);
                            try
                            {
                                list.Add(key, value);
                            }
                            catch
                            {
                            }
                        }
                    }
                }
            }
        }
        
 private void loadFromFile (String file)
        {
            if (!File.Exists(file))
            {
                return;
            }
            string[] linesArray = File.ReadAllLines(file);
            List<string> linesList = linesArray.Where(x => !string.IsNullOrWhiteSpace(x)).ToList();
            foreach (string line in linesList)
            {
                if (line.Contains('='))
                {
                    int index = line.IndexOf('=');
                    string key = line.Substring(0, index).Trim();
                    string value = line.Substring(index + 1).Trim();
                    if ((value.StartsWith("\"") && value.EndsWith("\"")) || (value.StartsWith("'") && value.EndsWith("'")))
                    {
                        value = value.Substring(1, value.Length - 2);
                        list.Add(key, value);
                    }
                }
            }
        }
        
 private void loadFromFile (String file) {
		if (!string.IsNullOrEmpty(file) && File.Exists(file)) {
			List<string> lines = File.ReadLines(file).Cast<string>().ToList();
			
			foreach (string line in lines) {
				if (line.Contains('=') && !line.Trim().StartsWith(";") && !line.Trim().StartsWith("#") && !line.Trim().StartsWith("'")) {
					int index = line.IndexOf('=');
					string key = line.Substring(0, index).Trim();
					string value = line.Substring(index + 1).Trim();
					
					if ((value.StartsWith("\"") && value.EndsWith("\"")) || (value.StartsWith("'") && value.EndsWith("'"))) {
						value = value.Substring(1, value.Length - 2);
						list.Add(key, value);
					}
				}
			}
		}
	}
	
	
 private void loadFromFile (String file) {
    if (!string.IsNullOrEmpty(file)) {
        string[] lines = File.ReadAllLines(file);
        foreach (string line in lines) {
            if (line.Contains('=') && !line.Trim().StartsWith(";") && !line.Trim().StartsWith("#") && !line.Trim().StartsWith("'")) {
                int index = line.IndexOf('=');
                string key = line.Substring(0, index).Trim();
                string value = line.Substring(index + 1).Trim();
                if (value.StartsWith("\"") && value.EndsWith("\"") || value.StartsWith("'") && value.EndsWith("'")) {
                    value = value.Substring(1, value.Length - 2);
                    try {
                        list.Add(key, value);
                    } catch (Exception e) {
                    }
                } 
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
673
2
Gpt3D_Clone673_2.cs 1 33
Gpt3D_Clone673_2.cs 34 50
----------------------------------------

public static DateTime AddBusinessDays (this DateTime date, int days) {
    date = date.AddDays ((days / 5) * 7);
    int remainder = days % 5;
    switch (date.DayOfWeek) {
        case DayOfWeek.Tuesday :
            if (remainder > 3)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Wednesday :
            if (remainder > 2)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Thursday :
            if (remainder > 1)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Friday :
            if (remainder > 0)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Saturday :
            if (days > 0)
                date = date.AddDays ((remainder == 0) ? 2 : 1);
            break;
        case DayOfWeek.Sunday :
            if (days > 0)
                date = date.AddDays ((remainder == 0) ? 1 : 0);
            break;
        default :
            break;
    }
    return date.AddDays (remainder);
}
----------------------------------------

  public static DateTime AddBusinessDays (this DateTime date, int days) {
    DateTime newDateTime = date;
    newDateTime = newDateTime.AddDays((days / 5) * 7);
    var daysToAdd = days % 5;
    while (daysToAdd > 0) {
        newDateTime = newDateTime.AddDays(1);
        if (newDateTime.DayOfWeek != DayOfWeek.Saturday 
            && newDateTime.DayOfWeek != DayOfWeek.Sunday) {
            daysToAdd--;
        }
    }
    return newDateTime;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
673
3
Gpt3D_Clone673_3.cs 1 33
Gpt3D_Clone673_3.cs 34 48
----------------------------------------

public static DateTime AddBusinessDays (this DateTime date, int days) {
    date = date.AddDays ((days / 5) * 7);
    int remainder = days % 5;
    switch (date.DayOfWeek) {
        case DayOfWeek.Tuesday :
            if (remainder > 3)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Wednesday :
            if (remainder > 2)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Thursday :
            if (remainder > 1)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Friday :
            if (remainder > 0)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Saturday :
            if (days > 0)
                date = date.AddDays ((remainder == 0) ? 2 : 1);
            break;
        case DayOfWeek.Sunday :
            if (days > 0)
                date = date.AddDays ((remainder == 0) ? 1 : 0);
            break;
        default :
            break;
    }
    return date.AddDays (remainder);
}
----------------------------------------

 public static DateTime AddBusinessDays (this DateTime date, int days) {
   DateTime newDateTime = date;
   for (int i = 0; i < days; i++) {
       newDateTime = newDateTime.AddDays(1);
       switch (newDateTime.DayOfWeek) {
           case DayOfWeek.Saturday: 
           case DayOfWeek.Sunday: 
               i--;
               break;
       }
   }
   return newDateTime;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
673
4
Gpt3D_Clone673_4.cs 1 33
Gpt3D_Clone673_4.cs 34 51
----------------------------------------

public static DateTime AddBusinessDays (this DateTime date, int days) {
    date = date.AddDays ((days / 5) * 7);
    int remainder = days % 5;
    switch (date.DayOfWeek) {
        case DayOfWeek.Tuesday :
            if (remainder > 3)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Wednesday :
            if (remainder > 2)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Thursday :
            if (remainder > 1)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Friday :
            if (remainder > 0)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Saturday :
            if (days > 0)
                date = date.AddDays ((remainder == 0) ? 2 : 1);
            break;
        case DayOfWeek.Sunday :
            if (days > 0)
                date = date.AddDays ((remainder == 0) ? 1 : 0);
            break;
        default :
            break;
    }
    return date.AddDays (remainder);
}
----------------------------------------

 public static DateTime AddBusinessDays (this DateTime date, int days) {
    DateTime newDateTime = date;
    int remainder = days;
 
    while (remainder > 0)
    {
        if (!IsWeekend(newDateTime.DayOfWeek))
        {
            remainder--;
        }
 
        newDateTime = newDateTime.AddDays(1);
    }
 
    return newDateTime;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
673
5
Gpt3D_Clone673_5.cs 1 33
Gpt3D_Clone673_5.cs 34 48
----------------------------------------

public static DateTime AddBusinessDays (this DateTime date, int days) {
    date = date.AddDays ((days / 5) * 7);
    int remainder = days % 5;
    switch (date.DayOfWeek) {
        case DayOfWeek.Tuesday :
            if (remainder > 3)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Wednesday :
            if (remainder > 2)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Thursday :
            if (remainder > 1)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Friday :
            if (remainder > 0)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Saturday :
            if (days > 0)
                date = date.AddDays ((remainder == 0) ? 2 : 1);
            break;
        case DayOfWeek.Sunday :
            if (days > 0)
                date = date.AddDays ((remainder == 0) ? 1 : 0);
            break;
        default :
            break;
    }
    return date.AddDays (remainder);
}
----------------------------------------

 public static DateTime AddBusinessDays (this DateTime date, int days) {
    DateTime newDateTime = date;
    int remainder = days;
    while (remainder > 0) {
        newDateTime = newDateTime.AddDays(1);
        if (newDateTime.DayOfWeek != DayOfWeek.Saturday && newDateTime.DayOfWeek != DayOfWeek.Sunday) {
            remainder--;
        }
    }
    return newDateTime;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
673
6
Gpt3D_Clone673_6.cs 1 33
Gpt3D_Clone673_6.cs 34 51
----------------------------------------

public static DateTime AddBusinessDays (this DateTime date, int days) {
    date = date.AddDays ((days / 5) * 7);
    int remainder = days % 5;
    switch (date.DayOfWeek) {
        case DayOfWeek.Tuesday :
            if (remainder > 3)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Wednesday :
            if (remainder > 2)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Thursday :
            if (remainder > 1)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Friday :
            if (remainder > 0)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Saturday :
            if (days > 0)
                date = date.AddDays ((remainder == 0) ? 2 : 1);
            break;
        case DayOfWeek.Sunday :
            if (days > 0)
                date = date.AddDays ((remainder == 0) ? 1 : 0);
            break;
        default :
            break;
    }
    return date.AddDays (remainder);
}
----------------------------------------

 public static DateTime AddBusinessDays (this DateTime date, int days) {
    DateTime newDateTime = date;
    
    for (int i = 0; i < days; i++) 
    {
        newDateTime = newDateTime.AddDays(1);
        for (DayOfWeek enumValue = DayOfWeek.Saturday; enumValue <= DayOfWeek.Sunday; enumValue++)
        {
            if (newDateTime.DayOfWeek == enumValue)
            {
                i--;
            }
        }
    }
    return newDateTime;    
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
673
7
Gpt3D_Clone673_7.cs 1 33
Gpt3D_Clone673_7.cs 34 46
----------------------------------------

public static DateTime AddBusinessDays (this DateTime date, int days) {
    date = date.AddDays ((days / 5) * 7);
    int remainder = days % 5;
    switch (date.DayOfWeek) {
        case DayOfWeek.Tuesday :
            if (remainder > 3)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Wednesday :
            if (remainder > 2)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Thursday :
            if (remainder > 1)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Friday :
            if (remainder > 0)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Saturday :
            if (days > 0)
                date = date.AddDays ((remainder == 0) ? 2 : 1);
            break;
        case DayOfWeek.Sunday :
            if (days > 0)
                date = date.AddDays ((remainder == 0) ? 1 : 0);
            break;
        default :
            break;
    }
    return date.AddDays (remainder);
}
----------------------------------------

 public static DateTime AddBusinessDays (this DateTime date, int days) {
    DateTime newDateTime = date;
   
    for(int i = 0; i < days; i++) {
        newDateTime = newDateTime.AddDays(1);
        if (newDateTime.DayOfWeek == DayOfWeek.Saturday || newDateTime.DayOfWeek == DayOfWeek.Sunday) {
            i--;
        }
    }
    return newDateTime;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
673
8
Gpt3D_Clone673_8.cs 1 33
Gpt3D_Clone673_8.cs 34 45
----------------------------------------

public static DateTime AddBusinessDays (this DateTime date, int days) {
    date = date.AddDays ((days / 5) * 7);
    int remainder = days % 5;
    switch (date.DayOfWeek) {
        case DayOfWeek.Tuesday :
            if (remainder > 3)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Wednesday :
            if (remainder > 2)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Thursday :
            if (remainder > 1)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Friday :
            if (remainder > 0)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Saturday :
            if (days > 0)
                date = date.AddDays ((remainder == 0) ? 2 : 1);
            break;
        case DayOfWeek.Sunday :
            if (days > 0)
                date = date.AddDays ((remainder == 0) ? 1 : 0);
            break;
        default :
            break;
    }
    return date.AddDays (remainder);
}
----------------------------------------

 public static DateTime AddBusinessDays (this DateTime date, int days) {
    int numOfFullWeeks = days / 5;
    int numOfRemainingDays = days - (numOfFullWeeks * 5);
    DateTime newDateTime = date.AddDays((numOfFullWeeks * 7) + numOfRemainingDays);
    while (IsWeekend(newDateTime.DayOfWeek)) {
        newDateTime = newDateTime.AddDays(-1);
    }
   return newDateTime;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
673
9
Gpt3D_Clone673_9.cs 1 33
Gpt3D_Clone673_9.cs 34 45
----------------------------------------

public static DateTime AddBusinessDays (this DateTime date, int days) {
    date = date.AddDays ((days / 5) * 7);
    int remainder = days % 5;
    switch (date.DayOfWeek) {
        case DayOfWeek.Tuesday :
            if (remainder > 3)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Wednesday :
            if (remainder > 2)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Thursday :
            if (remainder > 1)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Friday :
            if (remainder > 0)
                date = date.AddDays (2);
            break;
        case DayOfWeek.Saturday :
            if (days > 0)
                date = date.AddDays ((remainder == 0) ? 2 : 1);
            break;
        case DayOfWeek.Sunday :
            if (days > 0)
                date = date.AddDays ((remainder == 0) ? 1 : 0);
            break;
        default :
            break;
    }
    return date.AddDays (remainder);
}
----------------------------------------

 public static DateTime AddBusinessDays (this DateTime date, int days) {
    int totalDaysToAdd = days + (days / 5) * 2; // Additional 2 days off per 5 work days
    DateTime newDateTime = date.AddDays(totalDaysToAdd);
    while (newDateTime.DayOfWeek == DayOfWeek.Saturday || newDateTime.DayOfWeek == DayOfWeek.Sunday) 
    { 
        newDateTime = newDateTime.AddDays(1);
    }
    return newDateTime;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
675
3
Gpt3D_Clone675_3.cs 1 18
Gpt3D_Clone675_3.cs 19 59
----------------------------------------

static IEnumerable < IEnumerable < T > > Partition < T > (this IEnumerable < T > source, int size) {
    int count = 0;
    T [] group = null;
    foreach (T item in source) {
        if (group == null)
            group = new T [size];
        group [count ++] = item;
        if (count == size) {
            yield return group;
            group = null;
            count = 0;
        }
    }
    if (count > 0) {
        Array.Resize (ref group, count);
        yield return group;
    }
}
----------------------------------------

 static IEnumerable<IEnumerable<T>> Partition<T>(this IEnumerable<T> source, int size) 
            {
              List<T[]> largeGroup = new List<T[]>();
              int j = 0;
              T[] currentGroup = new T[size];
              foreach (var item in source)
              {
                if (j == size)
                {
                  largeGroup.Add(currentGroup);
                  currentGroup = new T[size];
                  j = 0;
                }
                currentGroup[j++] = item;
              }
              if (currentGroup.Length == size)
                largeGroup.Add(currentGroup);
              
              return largeGroup;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
675
4
Gpt3D_Clone675_4.cs 1 18
Gpt3D_Clone675_4.cs 19 58
----------------------------------------

static IEnumerable < IEnumerable < T > > Partition < T > (this IEnumerable < T > source, int size) {
    int count = 0;
    T [] group = null;
    foreach (T item in source) {
        if (group == null)
            group = new T [size];
        group [count ++] = item;
        if (count == size) {
            yield return group;
            group = null;
            count = 0;
        }
    }
    if (count > 0) {
        Array.Resize (ref group, count);
        yield return group;
    }
}
----------------------------------------

            
 static IEnumerable<IEnumerable<T>> Partition<T>(this IEnumerable<T> source, int size) 
            {
              List<T[]> largeGroup = new List<T[]>();
              int j = 0;
              T[] currentGroup = new T[size];
              foreach (T item in source)
              {
                currentGroup[j] = item;
                if (++j % size == 0)
                {
                  largeGroup.Add(currentGroup);
                  currentGroup = new T[size];
                }
              }
              if (currentGroup.Length == size)
                largeGroup.Add(currentGroup);
                
              return largeGroup;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
675
5
Gpt3D_Clone675_5.cs 1 18
Gpt3D_Clone675_5.cs 19 57
----------------------------------------

static IEnumerable < IEnumerable < T > > Partition < T > (this IEnumerable < T > source, int size) {
    int count = 0;
    T [] group = null;
    foreach (T item in source) {
        if (group == null)
            group = new T [size];
        group [count ++] = item;
        if (count == size) {
            yield return group;
            group = null;
            count = 0;
        }
    }
    if (count > 0) {
        Array.Resize (ref group, count);
        yield return group;
    }
}
----------------------------------------

 static IEnumerable<IEnumerable<T>> Partition<T>(this IEnumerable<T> source, int size) 
            {
              List<List<T>> largeGroup = new List<List<T>>();
              int count = 0;
              List<T> group = new List<T>();
              foreach (T item in source)
              {
                group.Add(item);
                if (++count == size)
                {
                  largeGroup.Add(group);
                  group = new List<T>();
                  count = 0;
                }
              }
              largeGroup.Add(group);
              
              return largeGroup.Select(x => x.ToArray());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
675
6
Gpt3D_Clone675_6.cs 1 18
Gpt3D_Clone675_6.cs 19 55
----------------------------------------

static IEnumerable < IEnumerable < T > > Partition < T > (this IEnumerable < T > source, int size) {
    int count = 0;
    T [] group = null;
    foreach (T item in source) {
        if (group == null)
            group = new T [size];
        group [count ++] = item;
        if (count == size) {
            yield return group;
            group = null;
            count = 0;
        }
    }
    if (count > 0) {
        Array.Resize (ref group, count);
        yield return group;
    }
}
----------------------------------------

 static IEnumerable<IEnumerable<T>> Partition<T>(this IEnumerable<T> source, int size) 
            {
              List<Queue<T>> largeGroup = new List<Queue<T>>();
              int count = 0;
              Queue<T> group = new Queue<T>();
              foreach (var item in source)
              {
                group.Enqueue(item);
                if (++count % size == 0)
                {
                  largeGroup.Add(group);
                  group = new Queue<T>();
                }
              }
              largeGroup.Add(group);
              
              return largeGroup.Select(grp => grp.ToArray());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
675
7
Gpt3D_Clone675_7.cs 1 18
Gpt3D_Clone675_7.cs 19 55
----------------------------------------

static IEnumerable < IEnumerable < T > > Partition < T > (this IEnumerable < T > source, int size) {
    int count = 0;
    T [] group = null;
    foreach (T item in source) {
        if (group == null)
            group = new T [size];
        group [count ++] = item;
        if (count == size) {
            yield return group;
            group = null;
            count = 0;
        }
    }
    if (count > 0) {
        Array.Resize (ref group, count);
        yield return group;
    }
}
----------------------------------------

 static IEnumerable<IEnumerable<T>> Partition<T>(this IEnumerable<T> source, int size) 
            {
              List<Stack<T>> largeGroup = new List<Stack<T>>();
              int count = 0;
              Stack<T> group = new Stack<T>();
              foreach (var item in source)
              {
                group.Push(item);
                if (++count % size == 0)
                {
                  largeGroup.Add(group);
                  group = new Stack<T>();
                }
              }
              largeGroup.Add(group);
              
              return largeGroup.Select(grp => grp.ToArray());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
675
8
Gpt3D_Clone675_8.cs 1 18
Gpt3D_Clone675_8.cs 19 55
----------------------------------------

static IEnumerable < IEnumerable < T > > Partition < T > (this IEnumerable < T > source, int size) {
    int count = 0;
    T [] group = null;
    foreach (T item in source) {
        if (group == null)
            group = new T [size];
        group [count ++] = item;
        if (count == size) {
            yield return group;
            group = null;
            count = 0;
        }
    }
    if (count > 0) {
        Array.Resize (ref group, count);
        yield return group;
    }
}
----------------------------------------

  static IEnumerable<IEnumerable<T>> Partition<T>(this IEnumerable<T> source, int size) 
            {
              List<List<T>> largeGroup = new List<List<T>>();
              int count = 0;
              List<T> group = new List<T>();
              foreach (var item in source)
              {
                group.Add(item);
                if (++count % size == 0)
                {
                  largeGroup.Add(group);
                  group = new List<T>();
                }
              }
              largeGroup.Add(group);
              
              return largeGroup.Select(x => x.ToArray());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
675
9
Gpt3D_Clone675_9.cs 1 18
Gpt3D_Clone675_9.cs 19 41
----------------------------------------

static IEnumerable < IEnumerable < T > > Partition < T > (this IEnumerable < T > source, int size) {
    int count = 0;
    T [] group = null;
    foreach (T item in source) {
        if (group == null)
            group = new T [size];
        group [count ++] = item;
        if (count == size) {
            yield return group;
            group = null;
            count = 0;
        }
    }
    if (count > 0) {
        Array.Resize (ref group, count);
        yield return group;
    }
}
----------------------------------------

 static IEnumerable<IEnumerable<T>> Partition<T>(this IEnumerable<T> source, int size)
            {
              List<T[]> largeGroup = new List<T[]>();
              int count = 0;
              for (int i = 0; i < source.Count(); i+=size)
              {
                T[] tempGroup = source.Skip(i).Take(size).ToArray();
                largeGroup.Add(tempGroup);
              }
              return largeGroup;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
676
0
Gpt3D_Clone676_0.cs 1 12
Gpt3D_Clone676_0.cs 13 37
----------------------------------------

public void DoWorkUpdatingRow (object state) {
    List < DataRow > rowsToWorkOn = (List < DataRow >) state;
    foreach (DataRow dr in rowsToWorkOn) {
        Monitor.Enter (this);
        try {
            dr ["value"] = dr ["id"] + " new value";
        }
        finally {
            Monitor.Exit (this);
        }
    }
}
----------------------------------------

 public void DoWorkUpdatingRow (object state) {
    List < DataRow > rowsToWorkOn = (List < DataRow >) state;
    SpinLock sl = new SpinLock ();
    bool gotLock = false;
    try {
        foreach (DataRow dr in rowsToWorkOn) {
            sl.Enter (ref gotLock);
            try {
                dr ["value"] = dr ["id"] + " new value";
            }
            finally {
                if (gotLock) {
                    sl.Exit ();
                }
            }
        }
    }
    finally {
        if (gotLock) {
            sl.Exit ();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
676
2
Gpt3D_Clone676_2.cs 1 12
Gpt3D_Clone676_2.cs 13 29
----------------------------------------

public void DoWorkUpdatingRow (object state) {
    List < DataRow > rowsToWorkOn = (List < DataRow >) state;
    foreach (DataRow dr in rowsToWorkOn) {
        Monitor.Enter (this);
        try {
            dr ["value"] = dr ["id"] + " new value";
        }
        finally {
            Monitor.Exit (this);
        }
    }
}
----------------------------------------

 public void DoWorkUpdatingRow (object state) {
    List < DataRow > rowsToWorkOn = (List < DataRow >) state;
    ReaderWriterLockSlim rwLock = null;
    try{
        rwLock = new ReaderWriterLockSlim();
        rwLock.EnterWriteLock();
        foreach (DataRow dr in rowsToWorkOn) {
            dr ["value"] = dr ["id"] + " new value";
        }
    }finally{
        if(rwLock != null){
            rwLock.ExitWriteLock();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
676
4
Gpt3D_Clone676_4.cs 1 12
Gpt3D_Clone676_4.cs 13 24
----------------------------------------

public void DoWorkUpdatingRow (object state) {
    List < DataRow > rowsToWorkOn = (List < DataRow >) state;
    foreach (DataRow dr in rowsToWorkOn) {
        Monitor.Enter (this);
        try {
            dr ["value"] = dr ["id"] + " new value";
        }
        finally {
            Monitor.Exit (this);
        }
    }
}
----------------------------------------

 public async void DoWorkUpdatingRow (object state) {
    List < DataRow > rowsToWorkOn = (List < DataRow >) state;
    await Task.Run (() => {
        Parallel.ForEach (rowsToWorkOn, row => {
            lock (this) {
                row ["value"] = row ["id"] + " new value";
            }
        });
    });
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
676
5
Gpt3D_Clone676_5.cs 1 12
Gpt3D_Clone676_5.cs 13 22
----------------------------------------

public void DoWorkUpdatingRow (object state) {
    List < DataRow > rowsToWorkOn = (List < DataRow >) state;
    foreach (DataRow dr in rowsToWorkOn) {
        Monitor.Enter (this);
        try {
            dr ["value"] = dr ["id"] + " new value";
        }
        finally {
            Monitor.Exit (this);
        }
    }
}
----------------------------------------

 public void DoWorkUpdatingRow (object state) {
    List < DataRow > rowsToWorkOn = (List < DataRow >) state;
    lock (this) {
        foreach (DataRow dr in rowsToWorkOn) {
            dr ["value"] = dr ["id"] + " new value";
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
676
6
Gpt3D_Clone676_6.cs 1 12
Gpt3D_Clone676_6.cs 13 22
----------------------------------------

public void DoWorkUpdatingRow (object state) {
    List < DataRow > rowsToWorkOn = (List < DataRow >) state;
    foreach (DataRow dr in rowsToWorkOn) {
        Monitor.Enter (this);
        try {
            dr ["value"] = dr ["id"] + " new value";
        }
        finally {
            Monitor.Exit (this);
        }
    }
}
----------------------------------------

 public void DoWorkUpdatingRow (object state) {
    List < DataRow > rowsToWorkOn = (List < DataRow >) state;
    System.Threading.Interlocked.CompareExchange(this, this, this);
    foreach (DataRow dr in rowsToWorkOn) {
        dr ["value"] = dr ["id"] + " new value";
    }
    System.Threading.Interlocked.CompareExchange(this, this, this);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
679
0
Gpt3D_Clone679_0.cs 1 19
Gpt3D_Clone679_0.cs 20 41
----------------------------------------

protected override void WndProc (ref Message m) {
    base.WndProc (ref m);
    if (m.Msg == WM_PAINT) {
        using (Graphics g = Graphics.FromHwnd (m.HWnd))
        {
            if (tabControl.Parent != null) {
                g.SetClip (new Rectangle (0, 0, tabControl.Width - 2, tabControl.Height - 1), CombineMode.Exclude);
                using (SolidBrush sb = new SolidBrush (tabControl.Parent.BackColor))
                g.FillRectangle (sb, new Rectangle (0, tabControl.ItemSize.Height + 2, tabControl.Width, tabControl.Height - (tabControl.ItemSize.Height + 2)));
            }
            if (tabControl.SelectedTab != null) {
                g.ResetClip ();
                Rectangle r = tabControl.SelectedTab.Bounds;
                g.SetClip (r, CombineMode.Exclude);
                using (SolidBrush sb = new SolidBrush (tabControl.SelectedTab.BackColor))
                g.FillRectangle (sb, new Rectangle (r.Left - 3, r.Top - 1, r.Width + 4, r.Height + 3));
            }
        }}
}
----------------------------------------

  protected override void WndProc (ref Message m) {
    if (m.Msg == WM_PAINT) {
        using (Graphics g = Graphics.FromHwnd (m.HWnd)) 
        {
            if (tabControl.Parent != null) {
                Rectangle rect = new Rectangle(0, tabControl.ItemSize.Height + 2, tabControl.Width, tabControl.Height - (tabControl.ItemSize.Height + 2));
                g.ExcludeClip(rect);
                g.FillRectangle(new SolidBrush(tabControl.Parent.BackColor), rect);
            }
            if (tabControl.SelectedTab != null) {
                Rectangle r = tabControl.SelectedTab.Bounds;
                g.ResetClip ();
                g.ExcludeClip (r);
                g.FillRectangle(new SolidBrush(tabControl.SelectedTab.BackColor), r.Left - 3, r.Top - 1, r.Width + 4, r.Height + 3);
            }
        }
    }
    base.WndProc (ref m);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
679
1
Gpt3D_Clone679_1.cs 1 19
Gpt3D_Clone679_1.cs 20 41
----------------------------------------

protected override void WndProc (ref Message m) {
    base.WndProc (ref m);
    if (m.Msg == WM_PAINT) {
        using (Graphics g = Graphics.FromHwnd (m.HWnd))
        {
            if (tabControl.Parent != null) {
                g.SetClip (new Rectangle (0, 0, tabControl.Width - 2, tabControl.Height - 1), CombineMode.Exclude);
                using (SolidBrush sb = new SolidBrush (tabControl.Parent.BackColor))
                g.FillRectangle (sb, new Rectangle (0, tabControl.ItemSize.Height + 2, tabControl.Width, tabControl.Height - (tabControl.ItemSize.Height + 2)));
            }
            if (tabControl.SelectedTab != null) {
                g.ResetClip ();
                Rectangle r = tabControl.SelectedTab.Bounds;
                g.SetClip (r, CombineMode.Exclude);
                using (SolidBrush sb = new SolidBrush (tabControl.SelectedTab.BackColor))
                g.FillRectangle (sb, new Rectangle (r.Left - 3, r.Top - 1, r.Width + 4, r.Height + 3));
            }
        }}
}
----------------------------------------

  protected override void WndProc (ref Message m) {
    if (m.Msg == WM_PAINT) {
        using (Graphics g = Graphics.FromHwnd (m.HWnd)) 
        {
            if (tabControl.Parent != null) {
                Rectangle rect = new Rectangle(0, tabControl.ItemSize.Height + 2, tabControl.Width, tabControl.Height - (tabControl.ItemSize.Height + 2));
                g.SetClipping(rect);
                g.FillRectangle(new SolidBrush(tabControl.Parent.BackColor), rect);
            }
            if (tabControl.SelectedTab != null) {
                Rectangle r = tabControl.SelectedTab.Bounds;
                g.ResetClip ();
                g.ClipExcluding(r);
                g.FillRectangle(new SolidBrush(tabControl.SelectedTab.BackColor), r.Left - 3, r.Top - 1, r.Width + 4, r.Height + 3);
            }
        }
    }
    base.WndProc (ref m);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
679
3
Gpt3D_Clone679_3.cs 1 19
Gpt3D_Clone679_3.cs 20 41
----------------------------------------

protected override void WndProc (ref Message m) {
    base.WndProc (ref m);
    if (m.Msg == WM_PAINT) {
        using (Graphics g = Graphics.FromHwnd (m.HWnd))
        {
            if (tabControl.Parent != null) {
                g.SetClip (new Rectangle (0, 0, tabControl.Width - 2, tabControl.Height - 1), CombineMode.Exclude);
                using (SolidBrush sb = new SolidBrush (tabControl.Parent.BackColor))
                g.FillRectangle (sb, new Rectangle (0, tabControl.ItemSize.Height + 2, tabControl.Width, tabControl.Height - (tabControl.ItemSize.Height + 2)));
            }
            if (tabControl.SelectedTab != null) {
                g.ResetClip ();
                Rectangle r = tabControl.SelectedTab.Bounds;
                g.SetClip (r, CombineMode.Exclude);
                using (SolidBrush sb = new SolidBrush (tabControl.SelectedTab.BackColor))
                g.FillRectangle (sb, new Rectangle (r.Left - 3, r.Top - 1, r.Width + 4, r.Height + 3));
            }
        }}
}
----------------------------------------

 protected override void WndProc (ref Message m) {
    if (m.Msg == WM_PAINT) {
        using (Graphics g = Graphics.FromHwnd (m.HWnd)) 
        {
            if (tabControl.Parent != null) {
                Rectangle rect = new Rectangle(0, 0, tabControl.Width - 2, tabControl.Height - 1);
                g.SetClipping(rect);
                g.FillRectangle(new SolidBrush(tabControl.Parent.BackColor), 0, tabControl.ItemSize.Height + 2, tabControl.Width, tabControl.Height - (tabControl.ItemSize.Height + 2));
            }
            if (tabControl.SelectedTab != null) {
                Rectangle r = tabControl.SelectedTab.Bounds;
                g.ResetClip ();
                g.ClipExcluding(r);
                g.FillRectangle(new SolidBrush(tabControl.SelectedTab.BackColor), r.Left - 3, r.Top - 1, r.Width + 4, r.Height + 3);
            }
        }
    }
    base.WndProc (ref m);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
679
7
Gpt3D_Clone679_7.cs 1 19
Gpt3D_Clone679_7.cs 20 38
----------------------------------------

protected override void WndProc (ref Message m) {
    base.WndProc (ref m);
    if (m.Msg == WM_PAINT) {
        using (Graphics g = Graphics.FromHwnd (m.HWnd))
        {
            if (tabControl.Parent != null) {
                g.SetClip (new Rectangle (0, 0, tabControl.Width - 2, tabControl.Height - 1), CombineMode.Exclude);
                using (SolidBrush sb = new SolidBrush (tabControl.Parent.BackColor))
                g.FillRectangle (sb, new Rectangle (0, tabControl.ItemSize.Height + 2, tabControl.Width, tabControl.Height - (tabControl.ItemSize.Height + 2)));
            }
            if (tabControl.SelectedTab != null) {
                g.ResetClip ();
                Rectangle r = tabControl.SelectedTab.Bounds;
                g.SetClip (r, CombineMode.Exclude);
                using (SolidBrush sb = new SolidBrush (tabControl.SelectedTab.BackColor))
                g.FillRectangle (sb, new Rectangle (r.Left - 3, r.Top - 1, r.Width + 4, r.Height + 3));
            }
        }}
}
----------------------------------------

  protected override void WndProc (ref Message m) {
    if (m.Msg == WM_PAINT) {
        using (Graphics g = Graphics.FromHwnd (m.HWnd)) 
        {
            if (tabControl.Parent != null) {
                g.FillRectangle(new SolidBrush(tabControl.Parent.BackColor), 0, tabControl.ItemSize.Height + 2, tabControl.Width, tabControl.Height - (tabControl.ItemSize.Height + 2));
            }
            if (tabControl.SelectedTab != null) {
                Rectangle r = tabControl.SelectedTab.Bounds;
                g.ClipExcluding(r);
                g.FillRectangle(new SolidBrush(tabControl.SelectedTab.BackColor), r.Left - 3, r.Top - 1, r.Width + 4, r.Height + 3);
            }
        }
    }
    base.WndProc (ref m);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
679
8
Gpt3D_Clone679_8.cs 1 19
Gpt3D_Clone679_8.cs 20 38
----------------------------------------

protected override void WndProc (ref Message m) {
    base.WndProc (ref m);
    if (m.Msg == WM_PAINT) {
        using (Graphics g = Graphics.FromHwnd (m.HWnd))
        {
            if (tabControl.Parent != null) {
                g.SetClip (new Rectangle (0, 0, tabControl.Width - 2, tabControl.Height - 1), CombineMode.Exclude);
                using (SolidBrush sb = new SolidBrush (tabControl.Parent.BackColor))
                g.FillRectangle (sb, new Rectangle (0, tabControl.ItemSize.Height + 2, tabControl.Width, tabControl.Height - (tabControl.ItemSize.Height + 2)));
            }
            if (tabControl.SelectedTab != null) {
                g.ResetClip ();
                Rectangle r = tabControl.SelectedTab.Bounds;
                g.SetClip (r, CombineMode.Exclude);
                using (SolidBrush sb = new SolidBrush (tabControl.SelectedTab.BackColor))
                g.FillRectangle (sb, new Rectangle (r.Left - 3, r.Top - 1, r.Width + 4, r.Height + 3));
            }
        }}
}
----------------------------------------

  protected override void WndProc (ref Message m) {
    if (m.Msg == WM_PAINT) {
        using (Graphics g = Graphics.FromHwnd (m.HWnd)) 
        {
            if (tabControl.Parent != null) {
                Rectangle rect = new Rectangle(0, tabControl.ItemSize.Height + 2, tabControl.Width, tabControl.Height - (tabControl.ItemSize.Height + 2));
                g.FillRectangle(new SolidBrush(tabControl.Parent.BackColor), rect);
            }
            if (tabControl.SelectedTab != null) {
                Rectangle r = tabControl.SelectedTab.Bounds;
                g.FillRectangle(new SolidBrush(tabControl.SelectedTab.BackColor), r.Left - 3, r.Top - 1, r.Width + 4, r.Height + 3);
            }
        }
    }
    base.WndProc (ref m);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
679
9
Gpt3D_Clone679_9.cs 1 19
Gpt3D_Clone679_9.cs 20 38
----------------------------------------

protected override void WndProc (ref Message m) {
    base.WndProc (ref m);
    if (m.Msg == WM_PAINT) {
        using (Graphics g = Graphics.FromHwnd (m.HWnd))
        {
            if (tabControl.Parent != null) {
                g.SetClip (new Rectangle (0, 0, tabControl.Width - 2, tabControl.Height - 1), CombineMode.Exclude);
                using (SolidBrush sb = new SolidBrush (tabControl.Parent.BackColor))
                g.FillRectangle (sb, new Rectangle (0, tabControl.ItemSize.Height + 2, tabControl.Width, tabControl.Height - (tabControl.ItemSize.Height + 2)));
            }
            if (tabControl.SelectedTab != null) {
                g.ResetClip ();
                Rectangle r = tabControl.SelectedTab.Bounds;
                g.SetClip (r, CombineMode.Exclude);
                using (SolidBrush sb = new SolidBrush (tabControl.SelectedTab.BackColor))
                g.FillRectangle (sb, new Rectangle (r.Left - 3, r.Top - 1, r.Width + 4, r.Height + 3));
            }
        }}
}
----------------------------------------

  protected override void WndProc (ref Message m) {
    if (m.Msg == WM_PAINT) {
        using (Graphics g = Graphics.FromHwnd (m.HWnd)) 
        {
            if (tabControl.Parent != null) {
                g.FillRectangle(new SolidBrush(tabControl.Parent.BackColor), 0, tabControl.ItemSize.Height + 2, tabControl.Width, tabControl.Height - (tabControl.ItemSize.Height + 2));
            }
            if (tabControl.SelectedTab != null) {
                Rectangle r = tabControl.SelectedTab.Bounds;
                g.FillRectangle(new SolidBrush(tabControl.SelectedTab.BackColor), r.Left - 3, r.Top - 1, r.Width + 4, r.Height + 3);
            }
        }
    }
    base.WndProc (ref m);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
1
Gpt3D_Clone67_1.cs 1 10
Gpt3D_Clone67_1.cs 11 25
----------------------------------------

public static string ReadLine (this BinaryReader reader) {
    if (reader.IsEndOfStream ())
        return null;
    StringBuilder result = new StringBuilder ();
    char character;
    while (! reader.IsEndOfStream () && (character = reader.ReadChar ()) != '\n')
        if (character != '\r' && character != '\n')
            result.Append (character);
    return result.ToString ();
}
----------------------------------------

 public static string ReadLine (this BinaryReader reader) {
    if (reader.IsEndOfStream())
        return null;
    List<char> readLine = new List<char>();
    while (!reader.IsEndOfStream()) {
        char character = reader.ReadChar();
        if (character == '\r' || character == '\n') {
            break;
        }
        readLine.Add(character);
    }
    return new string(readLine.ToArray());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
67
4
Gpt3D_Clone67_4.cs 1 10
Gpt3D_Clone67_4.cs 11 22
----------------------------------------

public static string ReadLine (this BinaryReader reader) {
    if (reader.IsEndOfStream ())
        return null;
    StringBuilder result = new StringBuilder ();
    char character;
    while (! reader.IsEndOfStream () && (character = reader.ReadChar ()) != '\n')
        if (character != '\r' && character != '\n')
            result.Append (character);
    return result.ToString ();
}
----------------------------------------

 public static string ReadLine (this BinaryReader reader) {
    if (reader.IsEndOfStream ())
        return null;
    char[] characters = new char[255];
    int i = 0;
    while (! reader.IsEndOfStream () && (characters[i] = reader.ReadChar ()) != '\n')
        if (characters[i] != '\r' && characters[i] != '\n')
            i++;
    return new string (characters, 0, i);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
680
1
Gpt3D_Clone680_1.cs 1 15
Gpt3D_Clone680_1.cs 16 33
----------------------------------------

[TestMethod] public void Test_ThatMyEventIsRaised () {
    Dictionary < string, int > receivedEvents = new Dictionary < string, int > ();
    MyClass myClass = new MyClass ();
    myClass.PropertyChanged += delegate (object sender, PropertyChangedEventArgs e) {
        if (receivedEvents.ContainsKey (e.PropertyName))
            receivedEvents [e.PropertyName] ++;
        else
            receivedEvents.Add (e.PropertyName, 1);
    };
    myClass.MyProperty = "testing";
    Assert.IsTrue (receivedEvents.ContainsKey ("MyProperty"));
    Assert.AreEqual (1, receivedEvents ["MyProperty"]);
    Assert.IsTrue (receivedEvents.ContainsKey ("MyOtherProperty"));
    Assert.AreEqual (1, receivedEvents ["MyOtherProperty"]);
}
----------------------------------------

	[TestMethod] public void Test_ThatMyEventIsRaised()
{
    bool myPropertyRaised = false;
    bool myOtherPropertyRaised = false;
    MyClass myClass = new MyClass();
    myClass.PropertyChanged += delegate(object sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == "MyProperty")
            myPropertyRaised = true;
        else if (e.PropertyName == "MyOtherProperty")
            myOtherPropertyRaised = true;
    };
    myClass.MyProperty = "testing";
    Assert.IsTrue(myPropertyRaised);
    Assert.IsTrue(myOtherPropertyRaised);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
680
2
Gpt3D_Clone680_2.cs 1 15
Gpt3D_Clone680_2.cs 16 33
----------------------------------------

[TestMethod] public void Test_ThatMyEventIsRaised () {
    Dictionary < string, int > receivedEvents = new Dictionary < string, int > ();
    MyClass myClass = new MyClass ();
    myClass.PropertyChanged += delegate (object sender, PropertyChangedEventArgs e) {
        if (receivedEvents.ContainsKey (e.PropertyName))
            receivedEvents [e.PropertyName] ++;
        else
            receivedEvents.Add (e.PropertyName, 1);
    };
    myClass.MyProperty = "testing";
    Assert.IsTrue (receivedEvents.ContainsKey ("MyProperty"));
    Assert.AreEqual (1, receivedEvents ["MyProperty"]);
    Assert.IsTrue (receivedEvents.ContainsKey ("MyOtherProperty"));
    Assert.AreEqual (1, receivedEvents ["MyOtherProperty"]);
}
----------------------------------------

	[TestMethod] public void Test_ThatMyEventIsRaised()
{
    int myPropertyCounter = 0;
    int myOtherPropertyCounter = 0;
    MyClass myClass = new MyClass();
    myClass.PropertyChanged += delegate(object sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == "MyProperty")
            myPropertyCounter++;
        else if (e.PropertyName == "MyOtherProperty")
            myOtherPropertyCounter++;
    };
    myClass.MyProperty = "testing";
    Assert.AreEqual(1, myPropertyCounter);
    Assert.AreEqual(1, myOtherPropertyCounter);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
680
3
Gpt3D_Clone680_3.cs 1 15
Gpt3D_Clone680_3.cs 16 33
----------------------------------------

[TestMethod] public void Test_ThatMyEventIsRaised () {
    Dictionary < string, int > receivedEvents = new Dictionary < string, int > ();
    MyClass myClass = new MyClass ();
    myClass.PropertyChanged += delegate (object sender, PropertyChangedEventArgs e) {
        if (receivedEvents.ContainsKey (e.PropertyName))
            receivedEvents [e.PropertyName] ++;
        else
            receivedEvents.Add (e.PropertyName, 1);
    };
    myClass.MyProperty = "testing";
    Assert.IsTrue (receivedEvents.ContainsKey ("MyProperty"));
    Assert.AreEqual (1, receivedEvents ["MyProperty"]);
    Assert.IsTrue (receivedEvents.ContainsKey ("MyOtherProperty"));
    Assert.AreEqual (1, receivedEvents ["MyOtherProperty"]);
}
----------------------------------------

	[TestMethod] public void Test_ThatMyEventIsRaised()
{
    int myPropertyCount = 0;
    int myOtherPropertyCount = 0;
    MyClass myClass = new MyClass();
    myClass.PropertyChanged += delegate(object sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == "MyProperty")
            myPropertyCount++;
        else if (e.PropertyName == "MyOtherProperty")
            myOtherPropertyCount++;
    };
    myClass.MyProperty = "testing";
    Assert.AreEqual(1, myPropertyCount);
    Assert.AreEqual(1, myOtherPropertyCount);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
680
5
Gpt3D_Clone680_5.cs 1 15
Gpt3D_Clone680_5.cs 16 30
----------------------------------------

[TestMethod] public void Test_ThatMyEventIsRaised () {
    Dictionary < string, int > receivedEvents = new Dictionary < string, int > ();
    MyClass myClass = new MyClass ();
    myClass.PropertyChanged += delegate (object sender, PropertyChangedEventArgs e) {
        if (receivedEvents.ContainsKey (e.PropertyName))
            receivedEvents [e.PropertyName] ++;
        else
            receivedEvents.Add (e.PropertyName, 1);
    };
    myClass.MyProperty = "testing";
    Assert.IsTrue (receivedEvents.ContainsKey ("MyProperty"));
    Assert.AreEqual (1, receivedEvents ["MyProperty"]);
    Assert.IsTrue (receivedEvents.ContainsKey ("MyOtherProperty"));
    Assert.AreEqual (1, receivedEvents ["MyOtherProperty"]);
}
----------------------------------------

	[TestMethod] public void Test_ThatMyEventIsRaised()
{
    List<string> receivedEvents = new List<string>();
    MyClass myClass = new MyClass();
    myClass.PropertyChanged += delegate(object sender, PropertyChangedEventArgs e)
    {
        if(!receivedEvents.Contains(e.PropertyName))
            receivedEvents.Add(e.PropertyName);
    };
    myClass.MyProperty = "testing";
    Assert.IsTrue(receivedEvents.Contains(myClass.MyProperty));
    Assert.IsTrue(receivedEvents.Contains(myClass.MyOtherProperty));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
684
0
Gpt3D_Clone684_0.cs 1 12
Gpt3D_Clone684_0.cs 13 36
----------------------------------------

public void LaunchThreads () {
    for (int i = 0; i < 20; i ++) {
        Worker worker = new Worker ();
        worker.DoneCallBack = new WorkerCallbackDelegate (WorkerCallback);
        Thread thread = new Thread (worker.DoWork);
        thread.IsBackground = true;
        thread.Start ();
        lock (locker)
        {
            activeWorkers.Add (thread.ManagedThreadId, worker);
        }}
}
----------------------------------------

  public void LaunchThreads () {
    CountdownEvent countDownEvent = new CountdownEvent(20);
    for (int i = 0; i < 20; i ++) {
        Worker worker = new Worker ();
        worker.DoneCallBack = new WorkerCallbackDelegate (WorkerCallback);
        ThreadPool.QueueUserWorkItem (new WaitCallback((object state) =>
        {
            try
            {
                worker.DoWork();
            }
            finally
            {
                countDownEvent.Signal();
            }
        }));
        lock (locker)
        {
            activeWorkers.Add (ThreadPool.GetCurrentlyRunningThreadId(), worker);
        }}
    countDownEvent.Wait();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
685
3
Gpt3D_Clone685_3.cs 1 17
Gpt3D_Clone685_3.cs 18 47
----------------------------------------

public void ValidateBearerToken (OwinContext context) {
    try {
        var tokenHandler = new JwtSecurityTokenHandler ();
        byte [] securityKey = GetBytes ("some key");
        SecurityToken securityToken;
        var validationParameters = new TokenValidationParameters () {ValidAudience = "http://localhost:2000", IssuerSigningToken = new BinarySecretSecurityToken (securityKey), ValidIssuer = "Self"};
        var auth = context.Request.Headers ["Authorization"];
        if (! string.IsNullOrWhiteSpace (auth) && auth.Contains ("Bearer")) {
            var token = auth.Split (' ') [1];
            var principal = tokenHandler.ValidateToken (token, validationParameters, out securityToken);
            context.Request.User = principal;
        }
    }
    catch (Exception ex) {
        var message = ex.Message;
    }
}
----------------------------------------

	public void ValidateBearerToken (OwinContext context) {
        try
    {
        string auth = context.Request.Headers["Authorization"];
        if (!String.IsNullOrWhiteSpace(auth) && auth.Contains("Bearer"))
        {
            var token = auth.Split(' ')[1];
            var handler = new JwtSecurityTokenHandler();
            var keyBytes = GetBytes("some key");
            var securityToken = new BinarySecretSecurityToken(keyBytes);
            var validationParameters = new TokenValidationParameters
            {
                ValidAudience = "http://localhost:2000",
                IssuerSigningToken = securityToken,
                ValidIssuer = "Self"
            };
        var principal = handler.ValidateToken(token, validationParameters, out securityToken);
        context.Request.User = principal;
        }  
    }
    catch (Exception ex)
    {
    Console.WriteLine(ex.Message);}
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
687
0
Gpt3D_Clone687_0.cs 1 31
Gpt3D_Clone687_0.cs 32 65
----------------------------------------

public static IEnumerable < T > TakeLast < T > (this IEnumerable < T > input, int count) {
    if (count <= 0)
        yield break;
    var inputList = input as IList < T >;
    if (inputList != null) {
        int last = inputList.Count;
        int first = last - count;
        if (first < 0)
            first = 0;
        for (int i = first; i < last; i ++)
            yield return inputList [i];
    } else {
        T [] buffer = new T [count];
        int index = 0;
        count = 0;
        foreach (T item in input) {
            buffer [index] = item;
            index = (index + 1) % buffer.Length;
            count ++;
        }
        if (count < buffer.Length)
            index = 0;
        else
            count = buffer.Length;
        while (count > 0) {
            yield return buffer [index];
            index = (index + 1) % buffer.Length;
            count --;
        }
    }
}
----------------------------------------

 public static IEnumerable<T> TakeLast<T>(this IEnumerable<T> input, int count)
{
    if (count <= 0)
        yield break;
    int skippedCount = 0;
    bool canSkip = true;
    T[] arr = new T[count];
    int index = 0;
    foreach (T item in input)
    {
        if (skippedCount == count)
        {
            canSkip = false;
            yield return arr[index];
            arr[index] = item;
        }
        else
        {
            arr[index] = item;
            skippedCount++;
        }
       
        if (index == count - 1)
            index = 0;
        else
            index++;
 
        if (canSkip)
            continue;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
687
2
Gpt3D_Clone687_2.cs 1 31
Gpt3D_Clone687_2.cs 32 55
----------------------------------------

public static IEnumerable < T > TakeLast < T > (this IEnumerable < T > input, int count) {
    if (count <= 0)
        yield break;
    var inputList = input as IList < T >;
    if (inputList != null) {
        int last = inputList.Count;
        int first = last - count;
        if (first < 0)
            first = 0;
        for (int i = first; i < last; i ++)
            yield return inputList [i];
    } else {
        T [] buffer = new T [count];
        int index = 0;
        count = 0;
        foreach (T item in input) {
            buffer [index] = item;
            index = (index + 1) % buffer.Length;
            count ++;
        }
        if (count < buffer.Length)
            index = 0;
        else
            count = buffer.Length;
        while (count > 0) {
            yield return buffer [index];
            index = (index + 1) % buffer.Length;
            count --;
        }
    }
}
----------------------------------------

 public static IEnumerable<T> TakeLast<T>(this IEnumerable<T> input, int count)
{
    if (count <= 0)
        yield break;
    int countSoFar = 0;
    int total = 0;
    Queue<T> q = new Queue<T>();
    foreach (T item in input)
    {
        if (countSoFar < count)
        {
            q.Enqueue(item);
            countSoFar++;
        }
        total++;
    }
    for (int i = total-count; i < total; i++)
        yield return q.Dequeue();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
687
3
Gpt3D_Clone687_3.cs 1 31
Gpt3D_Clone687_3.cs 32 51
----------------------------------------

public static IEnumerable < T > TakeLast < T > (this IEnumerable < T > input, int count) {
    if (count <= 0)
        yield break;
    var inputList = input as IList < T >;
    if (inputList != null) {
        int last = inputList.Count;
        int first = last - count;
        if (first < 0)
            first = 0;
        for (int i = first; i < last; i ++)
            yield return inputList [i];
    } else {
        T [] buffer = new T [count];
        int index = 0;
        count = 0;
        foreach (T item in input) {
            buffer [index] = item;
            index = (index + 1) % buffer.Length;
            count ++;
        }
        if (count < buffer.Length)
            index = 0;
        else
            count = buffer.Length;
        while (count > 0) {
            yield return buffer [index];
            index = (index + 1) % buffer.Length;
            count --;
        }
    }
}
----------------------------------------

 public static IEnumerable<T> TakeLast<T>(this IEnumerable<T> input, int count)
{
    if (count <= 0)
        yield break;
    int startIndex = 0;
    List<T> inputList = new List<T>();
    foreach (T value in input)
        inputList.Add(value);
    if (inputList.Count < count) // case when inputList has less items than requested to take
        startIndex = 0;
    else
        startIndex = inputList.Count - count;
       
    for (int i = startIndex; i < inputList.Count; i++)
        yield return inputList[i];
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
687
4
Gpt3D_Clone687_4.cs 1 31
Gpt3D_Clone687_4.cs 32 52
----------------------------------------

public static IEnumerable < T > TakeLast < T > (this IEnumerable < T > input, int count) {
    if (count <= 0)
        yield break;
    var inputList = input as IList < T >;
    if (inputList != null) {
        int last = inputList.Count;
        int first = last - count;
        if (first < 0)
            first = 0;
        for (int i = first; i < last; i ++)
            yield return inputList [i];
    } else {
        T [] buffer = new T [count];
        int index = 0;
        count = 0;
        foreach (T item in input) {
            buffer [index] = item;
            index = (index + 1) % buffer.Length;
            count ++;
        }
        if (count < buffer.Length)
            index = 0;
        else
            count = buffer.Length;
        while (count > 0) {
            yield return buffer [index];
            index = (index + 1) % buffer.Length;
            count --;
        }
    }
}
----------------------------------------

 public static IEnumerable<T> TakeLast<T>(this IEnumerable<T> input, int count)
{
    if (count <= 0)
        yield break;
    int index = 0;
    T[] temp = new T[count];
    foreach (T item in input)
    {
        temp[index] = item;
        index = index + 1;
        if(index > count - 1)
            index = 0;
    }
    for(int i = 0; i < count; i++)
    {
        yield return temp[i];
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
687
5
Gpt3D_Clone687_5.cs 1 31
Gpt3D_Clone687_5.cs 32 67
----------------------------------------

public static IEnumerable < T > TakeLast < T > (this IEnumerable < T > input, int count) {
    if (count <= 0)
        yield break;
    var inputList = input as IList < T >;
    if (inputList != null) {
        int last = inputList.Count;
        int first = last - count;
        if (first < 0)
            first = 0;
        for (int i = first; i < last; i ++)
            yield return inputList [i];
    } else {
        T [] buffer = new T [count];
        int index = 0;
        count = 0;
        foreach (T item in input) {
            buffer [index] = item;
            index = (index + 1) % buffer.Length;
            count ++;
        }
        if (count < buffer.Length)
            index = 0;
        else
            count = buffer.Length;
        while (count > 0) {
            yield return buffer [index];
            index = (index + 1) % buffer.Length;
            count --;
        }
    }
}
----------------------------------------

 public static IEnumerable<T> TakeLast<T>(this IEnumerable<T> input, int count)
    {
        if (count <= 0)
            yield break;
        int index = 0;
        T[]buffer = new T[count];
        foreach (T item in input)
        {
            buffer[index] = item;
            index = (index + 1) % buffer.Length;
        }
        for (int i = 0; i < count; i++)
        {
            yield return buffer[i];
        }
    }
 public static IEnumerable<T> TakeLast<T>(this IEnumerable<T> input, int count)
{
    if (count <= 0)
        yield break;
    List<T> list = new List<T>();
    foreach (T item in input)
        list.Add(item);
    int startIndex = list.Count - count;
    if (startIndex < 0)
        startIndex = 0;
    while (startIndex < list.Count)
        yield return list[startIndex++];
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
687
6
Gpt3D_Clone687_6.cs 1 31
Gpt3D_Clone687_6.cs 32 49
----------------------------------------

public static IEnumerable < T > TakeLast < T > (this IEnumerable < T > input, int count) {
    if (count <= 0)
        yield break;
    var inputList = input as IList < T >;
    if (inputList != null) {
        int last = inputList.Count;
        int first = last - count;
        if (first < 0)
            first = 0;
        for (int i = first; i < last; i ++)
            yield return inputList [i];
    } else {
        T [] buffer = new T [count];
        int index = 0;
        count = 0;
        foreach (T item in input) {
            buffer [index] = item;
            index = (index + 1) % buffer.Length;
            count ++;
        }
        if (count < buffer.Length)
            index = 0;
        else
            count = buffer.Length;
        while (count > 0) {
            yield return buffer [index];
            index = (index + 1) % buffer.Length;
            count --;
        }
    }
}
----------------------------------------

 public static IEnumerable<T> TakeLast<T>(this IEnumerable<T> input, int count)
{
    if (count <= 0)
        yield break;
    Queue<T> q = new Queue<T>();
    foreach (T item in input)
    {
        q.Enqueue(item);
        if (q.Count > count)
            q.Dequeue();
    }
    while (q.Count > 0)
        yield return q.Dequeue();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
687
7
Gpt3D_Clone687_7.cs 1 31
Gpt3D_Clone687_7.cs 32 51
----------------------------------------

public static IEnumerable < T > TakeLast < T > (this IEnumerable < T > input, int count) {
    if (count <= 0)
        yield break;
    var inputList = input as IList < T >;
    if (inputList != null) {
        int last = inputList.Count;
        int first = last - count;
        if (first < 0)
            first = 0;
        for (int i = first; i < last; i ++)
            yield return inputList [i];
    } else {
        T [] buffer = new T [count];
        int index = 0;
        count = 0;
        foreach (T item in input) {
            buffer [index] = item;
            index = (index + 1) % buffer.Length;
            count ++;
        }
        if (count < buffer.Length)
            index = 0;
        else
            count = buffer.Length;
        while (count > 0) {
            yield return buffer [index];
            index = (index + 1) % buffer.Length;
            count --;
        }
    }
}
----------------------------------------

 public static IEnumerable<T> TakeLast<T>(this IEnumerable<T> input, int count) 
{ 
    if (count <= 0) 
        yield break; 
    else 
    { 
        Stack<T> st = new Stack<T>(); 
        foreach(T item in input) 
        { 
            if (st.Count < count) 
                st.Push(item); 
        } 
        while (st.Count > 0) 
        { 
            yield return st.Pop(); 
        } 
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
687
8
Gpt3D_Clone687_8.cs 1 31
Gpt3D_Clone687_8.cs 32 67
----------------------------------------

public static IEnumerable < T > TakeLast < T > (this IEnumerable < T > input, int count) {
    if (count <= 0)
        yield break;
    var inputList = input as IList < T >;
    if (inputList != null) {
        int last = inputList.Count;
        int first = last - count;
        if (first < 0)
            first = 0;
        for (int i = first; i < last; i ++)
            yield return inputList [i];
    } else {
        T [] buffer = new T [count];
        int index = 0;
        count = 0;
        foreach (T item in input) {
            buffer [index] = item;
            index = (index + 1) % buffer.Length;
            count ++;
        }
        if (count < buffer.Length)
            index = 0;
        else
            count = buffer.Length;
        while (count > 0) {
            yield return buffer [index];
            index = (index + 1) % buffer.Length;
            count --;
        }
    }
}
----------------------------------------

 public static IEnumerable<T> TakeLast<T>(this IEnumerable<T> input, int count)
    {
        if (count <= 0)
            yield break;
        int index = 0;
        T[]buffer = new T[count];
        foreach (T item in input)
        {
            buffer[index] = item;
            index = (index + 1) % buffer.Length;
        }
        for (int i = 0; i < count; i++)
        {
            yield return buffer[i];
        }
    }
 public static IEnumerable<T> TakeLast<T>(this IEnumerable<T> input, int count)
{
    if (count <= 0)
        yield break;
    List<T> list = new List<T>();
    foreach (T item in input)
        list.Add(item);
    int startIndex = list.Count - count;
    if (startIndex < 0)
        startIndex = 0;
    while (startIndex < list.Count)
        yield return list[startIndex++];
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
687
9
Gpt3D_Clone687_9.cs 1 31
Gpt3D_Clone687_9.cs 32 50
----------------------------------------

public static IEnumerable < T > TakeLast < T > (this IEnumerable < T > input, int count) {
    if (count <= 0)
        yield break;
    var inputList = input as IList < T >;
    if (inputList != null) {
        int last = inputList.Count;
        int first = last - count;
        if (first < 0)
            first = 0;
        for (int i = first; i < last; i ++)
            yield return inputList [i];
    } else {
        T [] buffer = new T [count];
        int index = 0;
        count = 0;
        foreach (T item in input) {
            buffer [index] = item;
            index = (index + 1) % buffer.Length;
            count ++;
        }
        if (count < buffer.Length)
            index = 0;
        else
            count = buffer.Length;
        while (count > 0) {
            yield return buffer [index];
            index = (index + 1) % buffer.Length;
            count --;
        }
    }
}
----------------------------------------

 public static IEnumerable<T> TakeLast<T>(this IEnumerable<T> input, int count) 
{ 
    if (count <= 0) 
        yield break; 
    else 
    { 
        LinkedList<T> llist = new LinkedList<T>(); 
        foreach(T item in input) 
        { 
            llist.AddLast(item); 
        } 
        for (int i=llist.Count-count; i<llist.Count; i++) 
        { 
            yield return llist.ElementAt(i); 
        } 
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
688
0
Gpt3D_Clone688_0.cs 1 10
Gpt3D_Clone688_0.cs 11 30
----------------------------------------

static void Main (string [] args) {
    string [] cDirectories = Directory.GetDirectories ("C:\\");
    List < DirectorySize > listSizes = new List < DirectorySize > ();
    for (int i = 0; i < cDirectories.Length; i ++) {
        long size = GetDirectorySize (cDirectories [i]);
        if (size != - 1) {
            listSizes.Add (new DirectorySize () {DirectoryName = cDirectories [i], DirectorySizes = size});
        }
    }
}
----------------------------------------

   static void Main(string[] args)
{
    string[] cDirectories = Directory.GetDirectories("C:\\");
    List<DirectorySize> listSizes = new List<DirectorySize>();
    Thread t1 = new Thread(() =>
    {
        foreach (string item in cDirectories)
        {
            long size = GetDirectorySize(item);
            if (size != -1)
            {
                listSizes.Add(new DirectorySize() { DirectoryName = item, DirectorySizes = size });
            }
        }
    });
    t1.Start();
    t1.Join();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
688
1
Gpt3D_Clone688_1.cs 1 10
Gpt3D_Clone688_1.cs 11 27
----------------------------------------

static void Main (string [] args) {
    string [] cDirectories = Directory.GetDirectories ("C:\\");
    List < DirectorySize > listSizes = new List < DirectorySize > ();
    for (int i = 0; i < cDirectories.Length; i ++) {
        long size = GetDirectorySize (cDirectories [i]);
        if (size != - 1) {
            listSizes.Add (new DirectorySize () {DirectoryName = cDirectories [i], DirectorySizes = size});
        }
    }
}
----------------------------------------

   static void Main(string[] args)
{
    string[] cDirectories = Directory.GetDirectories("C:\\");
    List<DirectorySize> listSizes = new List<DirectorySize>();
    ConcurrentBag<DirectorySize> bagSizes = new ConcurrentBag<DirectorySize>();
    Parallel.ForEach(cDirectories, item =>
    {
        long size = GetDirectorySize(item);
        if (size != -1)
        {
            bagSizes.Add(new DirectorySize() { DirectoryName = item, DirectorySizes = size });
        }
    });
    listSizes = bagSizes.ToList();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
688
2
Gpt3D_Clone688_2.cs 1 10
Gpt3D_Clone688_2.cs 11 28
----------------------------------------

static void Main (string [] args) {
    string [] cDirectories = Directory.GetDirectories ("C:\\");
    List < DirectorySize > listSizes = new List < DirectorySize > ();
    for (int i = 0; i < cDirectories.Length; i ++) {
        long size = GetDirectorySize (cDirectories [i]);
        if (size != - 1) {
            listSizes.Add (new DirectorySize () {DirectoryName = cDirectories [i], DirectorySizes = size});
        }
    }
}
----------------------------------------

  static void Main(string[] args)
{
    string[] cDirectories = Directory.GetDirectories("C:\\");
    List<DirectorySize> listSizes = new List<DirectorySize>();
    lock (listSizes)
    {
        foreach(string item in cDirectories)
        {
            long size = GetDirectorySize(item);
            if (size != -1)
            {
                listSizes.Add(new DirectorySize() { DirectoryName = item, DirectorySizes = size });
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
688
3
Gpt3D_Clone688_3.cs 1 10
Gpt3D_Clone688_3.cs 11 25
----------------------------------------

static void Main (string [] args) {
    string [] cDirectories = Directory.GetDirectories ("C:\\");
    List < DirectorySize > listSizes = new List < DirectorySize > ();
    for (int i = 0; i < cDirectories.Length; i ++) {
        long size = GetDirectorySize (cDirectories [i]);
        if (size != - 1) {
            listSizes.Add (new DirectorySize () {DirectoryName = cDirectories [i], DirectorySizes = size});
        }
    }
}
----------------------------------------

   static void Main(string[] args)
{
    string[] cDirectories = Directory.GetDirectories("C:\\");
    List<DirectorySize> listSizes = new List<DirectorySize>();
    listSizes = cDirectories.Select(x =>
    {
        long size = GetDirectorySize(x);
        if (size != -1)
            return (new DirectorySize() { DirectoryName = x, DirectorySizes = size });
        return null;
    }).Where(y => y != null).ToList();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
688
4
Gpt3D_Clone688_4.cs 1 10
Gpt3D_Clone688_4.cs 11 24
----------------------------------------

static void Main (string [] args) {
    string [] cDirectories = Directory.GetDirectories ("C:\\");
    List < DirectorySize > listSizes = new List < DirectorySize > ();
    for (int i = 0; i < cDirectories.Length; i ++) {
        long size = GetDirectorySize (cDirectories [i]);
        if (size != - 1) {
            listSizes.Add (new DirectorySize () {DirectoryName = cDirectories [i], DirectorySizes = size});
        }
    }
}
----------------------------------------

  static void Main(string[] args)
{
    string[] cDirectories = Directory.GetDirectories("C:\\");
    List<DirectorySize> listSizes = new List<DirectorySize>();
    cDirectories.AsParallel().ForAll(dir=>{
        long size = GetDirectorySize(dir);
        if(size != -1)
        {
            listSizes.Add(new DirectorySize(){DirectoryName=dir,DirectorySizes=size});
        }
    });
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
688
5
Gpt3D_Clone688_5.cs 1 10
Gpt3D_Clone688_5.cs 11 22
----------------------------------------

static void Main (string [] args) {
    string [] cDirectories = Directory.GetDirectories ("C:\\");
    List < DirectorySize > listSizes = new List < DirectorySize > ();
    for (int i = 0; i < cDirectories.Length; i ++) {
        long size = GetDirectorySize (cDirectories [i]);
        if (size != - 1) {
            listSizes.Add (new DirectorySize () {DirectoryName = cDirectories [i], DirectorySizes = size});
        }
    }
}
----------------------------------------

   static void Main(string[] args)
{
    string[] cDirectories = Directory.GetDirectories("C:\\");
    List<DirectorySize> listSizes = new List<DirectorySize>();
    IEnumerable<DirectorySize> dirSizes = from dir in cDirectories
                                         let size = GetDirectorySize(dir)
                                         where size != -1
                                         select new DirectorySize() { DirectoryName = dir, DirectorySizes = size };
    listSizes = dirSizes.ToList();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
688
6
Gpt3D_Clone688_6.cs 1 10
Gpt3D_Clone688_6.cs 11 24
----------------------------------------

static void Main (string [] args) {
    string [] cDirectories = Directory.GetDirectories ("C:\\");
    List < DirectorySize > listSizes = new List < DirectorySize > ();
    for (int i = 0; i < cDirectories.Length; i ++) {
        long size = GetDirectorySize (cDirectories [i]);
        if (size != - 1) {
            listSizes.Add (new DirectorySize () {DirectoryName = cDirectories [i], DirectorySizes = size});
        }
    }
}
----------------------------------------

   static void Main(string[] args)
{
    string[] cDirectories = Directory.GetDirectories("C:\\");
    List<DirectorySize> listSizes = new List<DirectorySize>();
    Parallel.ForEach(cDirectories, item => {
        long size = GetDirectorySize(item);
        if (size != -1)
        {
            listSizes.Add(new DirectorySize() { DirectoryName = item, DirectorySizes = size });
        }
    });
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
688
8
Gpt3D_Clone688_8.cs 1 10
Gpt3D_Clone688_8.cs 11 25
----------------------------------------

static void Main (string [] args) {
    string [] cDirectories = Directory.GetDirectories ("C:\\");
    List < DirectorySize > listSizes = new List < DirectorySize > ();
    for (int i = 0; i < cDirectories.Length; i ++) {
        long size = GetDirectorySize (cDirectories [i]);
        if (size != - 1) {
            listSizes.Add (new DirectorySize () {DirectoryName = cDirectories [i], DirectorySizes = size});
        }
    }
}
----------------------------------------

   static void Main(string[] args)
{
    string[] cDirectories = Directory.GetDirectories("C:\\");
    Dictionary<string, long> dirSizes = new Dictionary<string, long>();
    foreach (string item in cDirectories)
    {
        long size = GetDirectorySize(item);
        if (size != -1)
        {
            dirSizes.Add(item, size);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
689
0
Gpt3D_Clone689_0.cs 1 24
Gpt3D_Clone689_0.cs 25 77
----------------------------------------

public bool ApplyRules (List < Rule > rules, User user) {
    foreach (var rule in rules) {
        IComparable value = null;
        object limit = null;
        if (rule.objectProperty == "age") {
            value = user.age;
            limit = Convert.ToInt32 (rule.TargetValue);
        } else if (rule.objectProperty == "username") {
            value = user.username;
            limit = rule.TargetValue;
        } else
            throw new InvalidOperationException ("invalid property");
        int result = value.CompareTo (limit);
        if (rule.ComparisonOperator == "equal") {
            if (! (result == 0))
                return false;
        } else if (rule.ComparisonOperator == "greater_than") {
            if (! (result > 0))
                return false;
        } else
            throw new InvalidOperationException ("invalid operator");
    }
    return true;
}
----------------------------------------

 public bool ApplyRules(List<Rule> rules, User user) 
{
    bool flag = true;
    for (int i = 0; i < rules.Count; i++) 
    {
        IComparable value = null;
        object limit = null;
        if (rules[i].objectProperty == "age") 
        {
            value = user.age;
            limit = Convert.ToInt32(rules[i].TargetValue);
        } 
        else if (rules[i].objectProperty == "username") 
        {
            value = user.username;
            limit = rules[i].TargetValue;
        } 
        else 
        {
            throw new InvalidOperationException("invalid property");
        }
        int result = value.CompareTo(limit);
        
        switch (rules[i].ComparisonOperator) 
        {
            case "equal":
                if (result != 0) 
                {
                    flag = false;
                } 
                else 
                {
                    flag = true;
                }
                break;
            case "greater_than":
                if (result <= 0) 
                {
                    flag = false;
                } 
                else 
                {
                    flag = true;
                }
                break;
            default:
                throw new InvalidOperationException("invalid operator");
        }
    }
    return flag;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
689
1
Gpt3D_Clone689_1.cs 1 24
Gpt3D_Clone689_1.cs 25 68
----------------------------------------

public bool ApplyRules (List < Rule > rules, User user) {
    foreach (var rule in rules) {
        IComparable value = null;
        object limit = null;
        if (rule.objectProperty == "age") {
            value = user.age;
            limit = Convert.ToInt32 (rule.TargetValue);
        } else if (rule.objectProperty == "username") {
            value = user.username;
            limit = rule.TargetValue;
        } else
            throw new InvalidOperationException ("invalid property");
        int result = value.CompareTo (limit);
        if (rule.ComparisonOperator == "equal") {
            if (! (result == 0))
                return false;
        } else if (rule.ComparisonOperator == "greater_than") {
            if (! (result > 0))
                return false;
        } else
            throw new InvalidOperationException ("invalid operator");
    }
    return true;
}
----------------------------------------

 public bool ApplyRules(List<Rule> rules, User user) 
{
    bool result = true;
    foreach (Rule rule in rules) 
    {
        IComparable value = null;
        object limit = null;
        switch (rule.objectProperty) 
        {
            case "age":
                value = user.age;
                limit = Convert.ToInt32(rule.TargetValue);
                break;
            case "username":
                value = user.username;
                limit = rule.TargetValue;
                break;
            default:
                throw new InvalidOperationException("invalid property");
        }
        
        int compareResult = value.CompareTo(limit);
        switch (rule.ComparisonOperator) 
        {
            case "equal":
                if (compareResult != 0) 
                {
                    result = false;
                }
                break;
            case "greater_than":
                if (compareResult <= 0) 
                {
                    result = false;
                }
                break;
            default:
                throw new InvalidOperationException("invalid operator");
        }
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
689
3
Gpt3D_Clone689_3.cs 1 24
Gpt3D_Clone689_3.cs 25 69
----------------------------------------

public bool ApplyRules (List < Rule > rules, User user) {
    foreach (var rule in rules) {
        IComparable value = null;
        object limit = null;
        if (rule.objectProperty == "age") {
            value = user.age;
            limit = Convert.ToInt32 (rule.TargetValue);
        } else if (rule.objectProperty == "username") {
            value = user.username;
            limit = rule.TargetValue;
        } else
            throw new InvalidOperationException ("invalid property");
        int result = value.CompareTo (limit);
        if (rule.ComparisonOperator == "equal") {
            if (! (result == 0))
                return false;
        } else if (rule.ComparisonOperator == "greater_than") {
            if (! (result > 0))
                return false;
        } else
            throw new InvalidOperationException ("invalid operator");
    }
    return true;
}
----------------------------------------

 public bool ApplyRules(List<Rule> rules, User user) 
{
    bool result = true;
    foreach (Rule rule in rules) 
    {
        IComparable target = null;
        object limit = null;
        if (rule.objectProperty == "age") 
        {
            target = user.age;
            limit = Convert.ToInt32(rule.TargetValue);
        } 
        else if (rule.objectProperty == "username") 
        {
            target = user.username;
            limit = rule.TargetValue;
        } 
        else 
        {
            throw new InvalidOperationException("invalid property");
        }
        int comparisonResult = target.CompareTo(limit);
        
        switch (rule.ComparisonOperator) 
        {
            case "equal":
                if (comparisonResult != 0) 
                {
                    result = false;
                } 
                break;
            case "greater_than":
                if (comparisonResult <= 0) 
                {
                    result = false;
                } 
                break;
            default:
                throw new InvalidOperationException("invalid operator");
        }
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
689
5
Gpt3D_Clone689_5.cs 1 24
Gpt3D_Clone689_5.cs 25 68
----------------------------------------

public bool ApplyRules (List < Rule > rules, User user) {
    foreach (var rule in rules) {
        IComparable value = null;
        object limit = null;
        if (rule.objectProperty == "age") {
            value = user.age;
            limit = Convert.ToInt32 (rule.TargetValue);
        } else if (rule.objectProperty == "username") {
            value = user.username;
            limit = rule.TargetValue;
        } else
            throw new InvalidOperationException ("invalid property");
        int result = value.CompareTo (limit);
        if (rule.ComparisonOperator == "equal") {
            if (! (result == 0))
                return false;
        } else if (rule.ComparisonOperator == "greater_than") {
            if (! (result > 0))
                return false;
        } else
            throw new InvalidOperationException ("invalid operator");
    }
    return true;
}
----------------------------------------

  public bool ApplyRules(List<Rule> rules, User user) 
{
    for (int i = 0; i < rules.Count; i++) 
    {
        IComparable value = null;
        object limit = null;
        if (rules[i].objectProperty == "age") 
        {
            value = user.age;
            limit = Convert.ToInt32(rules[i].TargetValue);
        } 
        else if (rules[i].objectProperty == "username") 
        {
            value = user.username;
            limit = rules[i].TargetValue;
        } 
        else 
        {
            throw new InvalidOperationException("invalid property");
        }
        int result = value.CompareTo(limit);
        
        switch(rules[i].ComparisonOperator) 
        {
            case "equal":
                if (result != 0) 
                {
                    return false;
                }
                break;
            case "greater_than":
                if (result <= 0) 
                {
                    return false;
                }
                break;
        default:
            throw new InvalidOperationException("invalid operator");
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
689
6
Gpt3D_Clone689_6.cs 1 24
Gpt3D_Clone689_6.cs 25 69
----------------------------------------

public bool ApplyRules (List < Rule > rules, User user) {
    foreach (var rule in rules) {
        IComparable value = null;
        object limit = null;
        if (rule.objectProperty == "age") {
            value = user.age;
            limit = Convert.ToInt32 (rule.TargetValue);
        } else if (rule.objectProperty == "username") {
            value = user.username;
            limit = rule.TargetValue;
        } else
            throw new InvalidOperationException ("invalid property");
        int result = value.CompareTo (limit);
        if (rule.ComparisonOperator == "equal") {
            if (! (result == 0))
                return false;
        } else if (rule.ComparisonOperator == "greater_than") {
            if (! (result > 0))
                return false;
        } else
            throw new InvalidOperationException ("invalid operator");
    }
    return true;
}
----------------------------------------

 public bool ApplyRules(List<Rule> rules, User user) 
{
    for (int i = 0; i < rules.Count; i++) 
    {
        IComparable value = null;
        object limit = null;
        if (rules[i].objectProperty == "age") 
        {
            value = user.age;
            limit = Convert.ToInt32(rules[i].TargetValue);
        } 
        else if (rules[i].objectProperty == "username") 
        {
            value = user.username;
            limit = rules[i].TargetValue;
        } 
        else 
        {
            throw new InvalidOperationException("invalid property");
        }
        int result = value.CompareTo(limit);
        
        if (rules[i].ComparisonOperator == "equal") 
        {
            if (!(result == 0)) 
            {
                return false;
            }
        } 
        else if (rules[i].ComparisonOperator == "greater_than") 
        {
            if (!(result > 0)) 
            {
                return false;
            }
        } 
        else 
        {
            throw new InvalidOperationException("invalid operator");
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
689
7
Gpt3D_Clone689_7.cs 1 24
Gpt3D_Clone689_7.cs 25 69
----------------------------------------

public bool ApplyRules (List < Rule > rules, User user) {
    foreach (var rule in rules) {
        IComparable value = null;
        object limit = null;
        if (rule.objectProperty == "age") {
            value = user.age;
            limit = Convert.ToInt32 (rule.TargetValue);
        } else if (rule.objectProperty == "username") {
            value = user.username;
            limit = rule.TargetValue;
        } else
            throw new InvalidOperationException ("invalid property");
        int result = value.CompareTo (limit);
        if (rule.ComparisonOperator == "equal") {
            if (! (result == 0))
                return false;
        } else if (rule.ComparisonOperator == "greater_than") {
            if (! (result > 0))
                return false;
        } else
            throw new InvalidOperationException ("invalid operator");
    }
    return true;
}
----------------------------------------

 public bool ApplyRules(List<Rule> rules, User user) 
{
    for (int i = 0; i < rules.Count; i++) 
    {
        IComparable value = null;
        object limit = null;
        if (rules[i].objectProperty == "age") 
        {
            value = user.age;
            limit = Convert.ToInt32(rules[i].TargetValue);
        } 
        else if (rules[i].objectProperty == "username") 
        {
            value = user.username;
            limit = rules[i].TargetValue;
        } 
        else 
        {
            throw new InvalidOperationException("invalid property");
        }
        int result = value.CompareTo(limit);
        
        if (rules[i].ComparisonOperator == "equal") 
        {
            if (((IComparable) result).CompareTo(0) != 0) 
            {
                return false;
            }
        } 
        else if (rules[i].ComparisonOperator == "greater_than") 
        {
            if (((IComparable) result).CompareTo(0) <= 0) 
            {
                return false;
            }
        } 
        else 
        {
            throw new InvalidOperationException("invalid operator");
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
689
8
Gpt3D_Clone689_8.cs 1 24
Gpt3D_Clone689_8.cs 25 66
----------------------------------------

public bool ApplyRules (List < Rule > rules, User user) {
    foreach (var rule in rules) {
        IComparable value = null;
        object limit = null;
        if (rule.objectProperty == "age") {
            value = user.age;
            limit = Convert.ToInt32 (rule.TargetValue);
        } else if (rule.objectProperty == "username") {
            value = user.username;
            limit = rule.TargetValue;
        } else
            throw new InvalidOperationException ("invalid property");
        int result = value.CompareTo (limit);
        if (rule.ComparisonOperator == "equal") {
            if (! (result == 0))
                return false;
        } else if (rule.ComparisonOperator == "greater_than") {
            if (! (result > 0))
                return false;
        } else
            throw new InvalidOperationException ("invalid operator");
    }
    return true;
}
----------------------------------------

 public bool ApplyRules(List<Rule> rules, User user) 
{
    for (int i = 0; i < rules.Count; i++) 
    {
        IComparable value = null;
        object limit = null;
        if (rules[i].objectProperty == "age") 
        {
            value = user.age;
            limit = Convert.ToInt32(rules[i].TargetValue);
        } 
        else if (rules[i].objectProperty == "username") 
        {
            value = user.username;
            limit = rules[i].TargetValue;
        } 
        else 
        {
            throw new InvalidOperationException("invalid property");
        }
        int result = value.CompareTo(limit);
        
        try 
        {
            if (rules[i].ComparisonOperator == "equal" && result != 0) 
            {
                return false;
            } 
            else if (rules[i].ComparisonOperator == "greater_than" && result <= 0) 
            {
                return false;
            } 
        } 
        catch (InvalidOperationException e) 
        {
            throw new InvalidOperationException("invalid operator");
        } 
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
691
0
Gpt3D_Clone691_0.cs 1 11
Gpt3D_Clone691_0.cs 12 31
----------------------------------------

public static string EnumValue (this MyEnum e) {
    switch (e) {
        case MyEnum.First :
            return "First Friendly Value";
        case MyEnum.Second :
            return "Second Friendly Value";
        case MyEnum.Third :
            return "Third Friendly Value";
    }
    return "Horrible Failure!!";
}
----------------------------------------

 public static string EnumValue (this MyEnum e) {
        string result;
        switch (e) {
            case MyEnum.First :
                result = "First Friendly Value";
                break;
            case MyEnum.Second :
                result = "Second Friendly Value";
                break;
            case MyEnum.Third :
                result = "Third Friendly Value";
                break;
            default:
                result= "Horrible Failure!!";
                break;
        }
        return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
691
1
Gpt3D_Clone691_1.cs 1 11
Gpt3D_Clone691_1.cs 12 31
----------------------------------------

public static string EnumValue (this MyEnum e) {
    switch (e) {
        case MyEnum.First :
            return "First Friendly Value";
        case MyEnum.Second :
            return "Second Friendly Value";
        case MyEnum.Third :
            return "Third Friendly Value";
    }
    return "Horrible Failure!!";
}
----------------------------------------

 public static string EnumValue (this MyEnum e) {
        string result;
        switch (e) {
        case MyEnum.First :
            result = "First Friendly Value";
            break;
        case MyEnum.Second :
            result = "Second Friendly Value";
            break;
        case MyEnum.Third :
            result = "Third Friendly Value";
            break;
        default:
            result = "Horrible Failure!!";
            break;
        }
        return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
691
2
Gpt3D_Clone691_2.cs 1 11
Gpt3D_Clone691_2.cs 12 31
----------------------------------------

public static string EnumValue (this MyEnum e) {
    switch (e) {
        case MyEnum.First :
            return "First Friendly Value";
        case MyEnum.Second :
            return "Second Friendly Value";
        case MyEnum.Third :
            return "Third Friendly Value";
    }
    return "Horrible Failure!!";
}
----------------------------------------

 public static string EnumValue (this MyEnum e) {
        string result;
        switch (e) {
            case MyEnum.First:
                result ="First Friendly Value";
                break;
            case MyEnum.Second:
                result ="Second Friendly Value";
                break;
            case MyEnum.Third:
                result ="Third Friendly Value";
                break;
            default:
                result ="Horrible Failure!!";
                break;
        }
        return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
691
3
Gpt3D_Clone691_3.cs 1 11
Gpt3D_Clone691_3.cs 12 31
----------------------------------------

public static string EnumValue (this MyEnum e) {
    switch (e) {
        case MyEnum.First :
            return "First Friendly Value";
        case MyEnum.Second :
            return "Second Friendly Value";
        case MyEnum.Third :
            return "Third Friendly Value";
    }
    return "Horrible Failure!!";
}
----------------------------------------

 public static string EnumValue (this MyEnum e) {
        string result;
        switch (e) {
            case MyEnum.First : 
                result = "First Friendly Value";
                break;
            case MyEnum.Second :
                result = "Second Friendly Value";
                break;
            case MyEnum.Third : 
                result = "Third Friendly Value";
                break;
            default: 
                result = "Horrible Failure!!";
                break;
        }
        return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
691
4
Gpt3D_Clone691_4.cs 1 11
Gpt3D_Clone691_4.cs 12 30
----------------------------------------

public static string EnumValue (this MyEnum e) {
    switch (e) {
        case MyEnum.First :
            return "First Friendly Value";
        case MyEnum.Second :
            return "Second Friendly Value";
        case MyEnum.Third :
            return "Third Friendly Value";
    }
    return "Horrible Failure!!";
}
----------------------------------------

 public static string EnumValue (this MyEnum e) {
        string result = "";
        switch (e) {
            case MyEnum.First :
                result =  "First Friendly Value";
            break;
            case MyEnum.Second :
                result =  "Second Friendly Value";
            break;
            case MyEnum.Third :
                result =  "Third Friendly Value";
            break;
            default:
                result =  "Horrible Failure!!";
        }
        return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
691
6
Gpt3D_Clone691_6.cs 1 11
Gpt3D_Clone691_6.cs 12 27
----------------------------------------

public static string EnumValue (this MyEnum e) {
    switch (e) {
        case MyEnum.First :
            return "First Friendly Value";
        case MyEnum.Second :
            return "Second Friendly Value";
        case MyEnum.Third :
            return "Third Friendly Value";
    }
    return "Horrible Failure!!";
}
----------------------------------------

 public static string EnumValue (this MyEnum e) {
        string result = "";
        List<MyEnum> enumVal  = new List<MyEnum>(){MyEnum.First,MyEnum.Second,MyEnum.Third};
        int index = enumVal.IndexOf(e);
        if(index == 0) 
            result =  "First Friendly Value";
        else if (index == 1) 
            result = "Second Friendly Value";
        else if (index == 2) 
            result =  "Third Friendly Value";
        else 
            result = "Horrible Failure!!";    
        return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
691
7
Gpt3D_Clone691_7.cs 1 11
Gpt3D_Clone691_7.cs 12 28
----------------------------------------

public static string EnumValue (this MyEnum e) {
    switch (e) {
        case MyEnum.First :
            return "First Friendly Value";
        case MyEnum.Second :
            return "Second Friendly Value";
        case MyEnum.Third :
            return "Third Friendly Value";
    }
    return "Horrible Failure!!";
}
----------------------------------------

 public static string EnumValue (this MyEnum e) {
        string result;
        Dictionary<MyEnum, string> dict= new Dictionary<MyEnum, string>();
        dict[MyEnum.First]  =  "First Friendly Value";
        dict[MyEnum.Second] =  "Second Friendly Value";
        dict[MyEnum.Third]  =  "Third Friendly Value";
        if (dict.TryGetValue(e, out result)) 
            return result;
        else 
            return "Horrible Failure!!";
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
691
8
Gpt3D_Clone691_8.cs 1 11
Gpt3D_Clone691_8.cs 12 23
----------------------------------------

public static string EnumValue (this MyEnum e) {
    switch (e) {
        case MyEnum.First :
            return "First Friendly Value";
        case MyEnum.Second :
            return "Second Friendly Value";
        case MyEnum.Third :
            return "Third Friendly Value";
    }
    return "Horrible Failure!!";
}
----------------------------------------

 public static string EnumValue (this MyEnum e) {
        Dictionary<MyEnum,string> dict = new Dictionary<MyEnum, string>();
        dict.Add(MyEnum.First ,"First Friendly Value");
        dict.Add(MyEnum.Second, "Second Friendly Value");
        dict.Add(MyEnum.Third, "Third Friendly Value");
        if (dict.TryGetValue(e, out string result))
            return result;
        else
            return "Horrible Failure!!";
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
693
1
Gpt3D_Clone693_1.cs 1 32
Gpt3D_Clone693_1.cs 33 67
----------------------------------------

private long [] GetHistogram (Bitmap image) {
    var histogram = new long [256];
    bool imageWasCloned = false;
    if (image.PixelFormat != PixelFormat.Format24bppRgb) {
        image = image.Clone (new Rectangle (0, 0, image.Width, image.Height), PixelFormat.Format24bppRgb);
        imageWasCloned = true;
    }
    BitmapData bmd = null;
    try {
        bmd = image.LockBits (new Rectangle (0, 0, image.Width, image.Height), ImageLockMode.ReadOnly, PixelFormat.Format24bppRgb);
        const int pixelSize = 3;
        int height = bmd.Height;
        int width = bmd.Width;
        int rowPadding = bmd.Stride - (width * pixelSize);
        unsafe {
            byte * pixelPtr = (byte *) bmd.Scan0;
            for (int y = 0; y < height; ++ y) {
                for (int x = 0; x < width; ++ x) {
                    histogram [(pixelPtr [0] + pixelPtr [1] + pixelPtr [2]) / 3] ++;
                    pixelPtr += pixelSize;
                }
                pixelPtr += rowPadding;
            }
        }}
    finally {
        if (bmd != null)
            image.UnlockBits (bmd);
        if (imageWasCloned)
            image.Dispose ();
    }
    return histogram;
}
----------------------------------------

 private long[] GetHistogram(Bitmap image)
{
    long[] histogram = new long[256];
    Bitmap newImage = new Bitmap(image.Width, image.Height, PixelFormat.Format24bppRgb);
    using (Graphics g = Graphics.FromImage(newImage))
      {
        g.DrawImage(image, 0, 0);
      }
    BitmapData bmd = newImage.LockBits(new Rectangle(0, 0, newImage.Width, newImage.Height), 
                            ImageLockMode.ReadOnly, PixelFormat.Format24bppRgb);
	
	int bytesPerPixel = Image.GetPixelFormatSize(image.PixelFormat)/8;
	int heightInPixels = bmd.Height;
	int widthInBytes = bmd.Width * bytesPerPixel;
    unsafe 
    {
        byte* pixelPtr = (byte*)(void*)bmd.Scan0;
        for (int y = 0; y < heightInPixels; y++)
        {
            for (int x = 0; x < widthInBytes; x=x+bytesPerPixel )
            {
                histogram[(pixelPtr[0] + pixelPtr[1] + pixelPtr[2]) / 3]++;
                pixelPtr += bytesPerPixel; 
            }
            pixelPtr += bmd.Stride - widthInBytes;
        }
    }
    newImage.UnlockBits(bmd);
    newImage.Dispose();
    return histogram;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
693
2
Gpt3D_Clone693_2.cs 1 32
Gpt3D_Clone693_2.cs 33 63
----------------------------------------

private long [] GetHistogram (Bitmap image) {
    var histogram = new long [256];
    bool imageWasCloned = false;
    if (image.PixelFormat != PixelFormat.Format24bppRgb) {
        image = image.Clone (new Rectangle (0, 0, image.Width, image.Height), PixelFormat.Format24bppRgb);
        imageWasCloned = true;
    }
    BitmapData bmd = null;
    try {
        bmd = image.LockBits (new Rectangle (0, 0, image.Width, image.Height), ImageLockMode.ReadOnly, PixelFormat.Format24bppRgb);
        const int pixelSize = 3;
        int height = bmd.Height;
        int width = bmd.Width;
        int rowPadding = bmd.Stride - (width * pixelSize);
        unsafe {
            byte * pixelPtr = (byte *) bmd.Scan0;
            for (int y = 0; y < height; ++ y) {
                for (int x = 0; x < width; ++ x) {
                    histogram [(pixelPtr [0] + pixelPtr [1] + pixelPtr [2]) / 3] ++;
                    pixelPtr += pixelSize;
                }
                pixelPtr += rowPadding;
            }
        }}
    finally {
        if (bmd != null)
            image.UnlockBits (bmd);
        if (imageWasCloned)
            image.Dispose ();
    }
    return histogram;
}
----------------------------------------

  private long[] GetHistogram(Bitmap image)
{ 
    long[] histogram = new long[256];
    image = image.Clone(new Rectangle(0, 0, image.Width, image.Height), PixelFormat.Format24bppRgb);
 
    BitmapData bmd = image.LockBits(new Rectangle(0, 0, image.Width, image.Height), 
                            ImageLockMode.ReadOnly, PixelFormat.Format24bppRgb);
 
    int stride = bmd.Stride;
    int padding = stride - (bmd.Width * 3);
    IntPtr ptr = bmd.Scan0;
 
    unsafe 
    {
        byte* pixelPtr = (byte*)(void*)ptr;
        for (int y = 0; y < bmd.Height; y++)
        {
            for (int x = 0; x < bmd.Width; x++ )
            {
                histogram[(pixelPtr[0] + pixelPtr[1] + pixelPtr[2]) / 3]++;
                pixelPtr += 3; 
            }
            pixelPtr += padding;            
        }
    }
    image.UnlockBits(bmd);
    image.Dispose();
    return histogram;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
693
3
Gpt3D_Clone693_3.cs 1 32
Gpt3D_Clone693_3.cs 33 64
----------------------------------------

private long [] GetHistogram (Bitmap image) {
    var histogram = new long [256];
    bool imageWasCloned = false;
    if (image.PixelFormat != PixelFormat.Format24bppRgb) {
        image = image.Clone (new Rectangle (0, 0, image.Width, image.Height), PixelFormat.Format24bppRgb);
        imageWasCloned = true;
    }
    BitmapData bmd = null;
    try {
        bmd = image.LockBits (new Rectangle (0, 0, image.Width, image.Height), ImageLockMode.ReadOnly, PixelFormat.Format24bppRgb);
        const int pixelSize = 3;
        int height = bmd.Height;
        int width = bmd.Width;
        int rowPadding = bmd.Stride - (width * pixelSize);
        unsafe {
            byte * pixelPtr = (byte *) bmd.Scan0;
            for (int y = 0; y < height; ++ y) {
                for (int x = 0; x < width; ++ x) {
                    histogram [(pixelPtr [0] + pixelPtr [1] + pixelPtr [2]) / 3] ++;
                    pixelPtr += pixelSize;
                }
                pixelPtr += rowPadding;
            }
        }}
    finally {
        if (bmd != null)
            image.UnlockBits (bmd);
        if (imageWasCloned)
            image.Dispose ();
    }
    return histogram;
}
----------------------------------------

 private long[] GetHistogram(Bitmap image)
{
    long[] histogram = new long[256];
    Bitmap clonedImage = image.Clone(new Rectangle(0, 0, image.Width, image.Height), PixelFormat.Format24bppRgb);
 
    BitmapData bmd = clonedImage.LockBits(new Rectangle(0, 0, clonedImage.Width, clonedImage.Height), 
                             ImageLockMode.ReadOnly, PixelFormat.Format24bppRgb);
	
	int bytesPerPixel = Image.GetPixelFormatSize(image.PixelFormat)/8;
	int heightInPixels = bmd.Height;
	int widthInBytes = bmd.Width * bytesPerPixel;
    unsafe 
    {
        byte* pixelPtr = (byte*)(void*)bmd.Scan0;
        for (int y = 0; y < heightInPixels; y++)
        {
            for (int x = 0; x < widthInBytes; x=x+bytesPerPixel )
            {
                histogram[(pixelPtr[0] + pixelPtr[1] + pixelPtr[2]) / 3]++;
                pixelPtr += bytesPerPixel; 
            }
            pixelPtr += bmd.Stride - widthInBytes;
        }
    }
    clonedImage.UnlockBits(bmd);
    clonedImage.Dispose();
    return histogram;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
693
4
Gpt3D_Clone693_4.cs 1 32
Gpt3D_Clone693_4.cs 33 64
----------------------------------------

private long [] GetHistogram (Bitmap image) {
    var histogram = new long [256];
    bool imageWasCloned = false;
    if (image.PixelFormat != PixelFormat.Format24bppRgb) {
        image = image.Clone (new Rectangle (0, 0, image.Width, image.Height), PixelFormat.Format24bppRgb);
        imageWasCloned = true;
    }
    BitmapData bmd = null;
    try {
        bmd = image.LockBits (new Rectangle (0, 0, image.Width, image.Height), ImageLockMode.ReadOnly, PixelFormat.Format24bppRgb);
        const int pixelSize = 3;
        int height = bmd.Height;
        int width = bmd.Width;
        int rowPadding = bmd.Stride - (width * pixelSize);
        unsafe {
            byte * pixelPtr = (byte *) bmd.Scan0;
            for (int y = 0; y < height; ++ y) {
                for (int x = 0; x < width; ++ x) {
                    histogram [(pixelPtr [0] + pixelPtr [1] + pixelPtr [2]) / 3] ++;
                    pixelPtr += pixelSize;
                }
                pixelPtr += rowPadding;
            }
        }}
    finally {
        if (bmd != null)
            image.UnlockBits (bmd);
        if (imageWasCloned)
            image.Dispose ();
    }
    return histogram;
}
----------------------------------------

 private long[] GetHistogram(Bitmap image) 
{ 
    long[] histogram = new long[256];
    image = image.Clone(new Rectangle(0, 0, image.Width, image.Height), PixelFormat.Format24bppRgb);
    
    BitmapData bmd = image.LockBits(new Rectangle(0, 0, image.Width, image.Height), 
                             ImageLockMode.ReadOnly, PixelFormat.Format24bppRgb);
	
	int bytesPerPixel = Image.GetPixelFormatSize(image.PixelFormat)/8;
	int heightInPixels = bmd.Height;
	int widthInBytes = bmd.Width * bytesPerPixel;
    unsafe 
    {
        byte* pixelPtr = (byte*)(void*)bmd.Scan0;
        for (int y = 0; y < heightInPixels; y++)
        {
            for (int x = 0; x < widthInBytes; x=x+bytesPerPixel )
            {
                histogram[(pixelPtr[0] + pixelPtr[1] + pixelPtr[2]) / 3]++;
                pixelPtr += bytesPerPixel; 
            }
            pixelPtr += bmd.Stride - widthInBytes;
        }
    }
    image.UnlockBits(bmd);
    image.Dispose();
    return histogram;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
693
5
Gpt3D_Clone693_5.cs 1 32
Gpt3D_Clone693_5.cs 33 62
----------------------------------------

private long [] GetHistogram (Bitmap image) {
    var histogram = new long [256];
    bool imageWasCloned = false;
    if (image.PixelFormat != PixelFormat.Format24bppRgb) {
        image = image.Clone (new Rectangle (0, 0, image.Width, image.Height), PixelFormat.Format24bppRgb);
        imageWasCloned = true;
    }
    BitmapData bmd = null;
    try {
        bmd = image.LockBits (new Rectangle (0, 0, image.Width, image.Height), ImageLockMode.ReadOnly, PixelFormat.Format24bppRgb);
        const int pixelSize = 3;
        int height = bmd.Height;
        int width = bmd.Width;
        int rowPadding = bmd.Stride - (width * pixelSize);
        unsafe {
            byte * pixelPtr = (byte *) bmd.Scan0;
            for (int y = 0; y < height; ++ y) {
                for (int x = 0; x < width; ++ x) {
                    histogram [(pixelPtr [0] + pixelPtr [1] + pixelPtr [2]) / 3] ++;
                    pixelPtr += pixelSize;
                }
                pixelPtr += rowPadding;
            }
        }}
    finally {
        if (bmd != null)
            image.UnlockBits (bmd);
        if (imageWasCloned)
            image.Dispose ();
    }
    return histogram;
}
----------------------------------------

  private long[] GetHistogram(Bitmap image)
{ 
    long[] histogram = new long[256];
    using (var tmpBmpData = new Bitmap(image.Width, image.Height, PixelFormat.Format24bppRgb))
    {
        using (var g = Graphics.FromImage(tmpBmpData))
            g.DrawImageUnscaled(image, Point.Empty).Dispose();
        var bmd = tmpBmpData.LockBits(new Rectangle(0, 0, tmpBmpData.Width, tmpBmpData.Height), 
                            ImageLockMode.ReadOnly, PixelFormat.Format24bppRgb);
        unsafe 
        {
            byte* pixelPtr = (byte*)(void*)bmd.Scan0;
            for (int y = 0; y < bmd.Height; ++y)
            {
                for (int x = 0; x < bmd.Width; ++x)
                {
                    histogram[(pixelPtr[0] + pixelPtr[1] + pixelPtr[2]) / 3]++;
                    pixelPtr += 3;
                }
            pixelPtr += bmd.Stride - (bmd.Width * 3);
            }
        }
        tmpBmpData.UnlockBits(bmd);
    }
    return histogram;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
697
7
Gpt3D_Clone697_7.cs 1 12
Gpt3D_Clone697_7.cs 13 29
----------------------------------------

private void textBox1_TextChanged (object sender, EventArgs e) {
    Point caretLocalLoc = textBox1.GetPositionFromCharIndex (textBox1.Text.Length - 1);
    Point caretLoc = new Point (caretLocalLoc.X + InitialTextBoxLoc.X, caretLocalLoc.Y + InitialTextBoxLoc.Y);
    Point scrollLoc = flowLayoutPanel1.AutoScrollPosition;
    if (caretLoc.X >= flowLayoutPanel1.Size.Width - 10) {
        scrollLoc.X = caretLoc.X;
    }
    if (caretLoc.Y >= flowLayoutPanel1.Size.Height - 10) {
        scrollLoc.Y = caretLoc.Y;
    }
    flowLayoutPanel1.AutoScrollPosition = scrollLoc;
}
----------------------------------------

 private void textBox1_TextChanged(object sender, EventArgs e)
{   
    int x = textBox1.GetPositionFromCharIndex(textBox1.Text.Length - 1).X + InitialTextBoxLoc.X;
    int y = textBox1.GetPositionFromCharIndex(textBox1.Text.Length - 1).Y + InitialTextBoxLoc.Y;
    if(x >= flowLayoutPanel1.Size.Width - 10)
    {
        flowLayoutPanel1.AutoScrollPosition = new Point(x, flowLayoutPanel1.AutoScrollPosition.Y);
    }
    if(y >= flowLayoutPanel1.Size.Height - 10)
    {
        flowLayoutPanel1.AutoScrollPosition = new Point(flowLayoutPanel1.AutoScrollPosition.X, y);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
697
8
Gpt3D_Clone697_8.cs 1 12
Gpt3D_Clone697_8.cs 13 24
----------------------------------------

private void textBox1_TextChanged (object sender, EventArgs e) {
    Point caretLocalLoc = textBox1.GetPositionFromCharIndex (textBox1.Text.Length - 1);
    Point caretLoc = new Point (caretLocalLoc.X + InitialTextBoxLoc.X, caretLocalLoc.Y + InitialTextBoxLoc.Y);
    Point scrollLoc = flowLayoutPanel1.AutoScrollPosition;
    if (caretLoc.X >= flowLayoutPanel1.Size.Width - 10) {
        scrollLoc.X = caretLoc.X;
    }
    if (caretLoc.Y >= flowLayoutPanel1.Size.Height - 10) {
        scrollLoc.Y = caretLoc.Y;
    }
    flowLayoutPanel1.AutoScrollPosition = scrollLoc;
}
----------------------------------------

 private void textBox1_TextChanged(object sender, EventArgs e)
{
    Point caretLocalLoc = textBox1.GetPositionFromCharIndex(textBox1.Text.Length - 1);
    Point caretLoc = new Point(caretLocalLoc.X + InitialTextBoxLoc.X, caretLocalLoc.Y + InitialTextBoxLoc.Y);
    if(caretLoc.X >= flowLayoutPanel1.Size.Width - 10 || caretLoc.Y >= flowLayoutPanel1.Size.Height - 10)
    {
        flowLayoutPanel1.ScrollControlIntoView(textBox1);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
698
0
Gpt3D_Clone698_0.cs 1 25
Gpt3D_Clone698_0.cs 26 48
----------------------------------------

public IEnumerable < int [] > GetIntPermutations (int [] index, int offset, int len) {
    switch (len) {
        case 1 :
            yield return index;
            break;
        case 2 :
            yield return index;
            Swap (index, offset, offset + 1);
            yield return index;
            Swap (index, offset, offset + 1);
            break;
        default :
            foreach (var result in GetIntPermutations (index, offset + 1, len - 1)) {
                yield return result;
            }
            for (var i = 1; i < len; i ++) {
                Swap (index, offset, offset + i);
                foreach (var result in GetIntPermutations (index, offset + 1, len - 1)) {
                    yield return result;
                }
                Swap (index, offset, offset + i);
            }
            break;
    }
}
----------------------------------------

  public IEnumerable < int[] > GetIntPermutations (int[] index, int offset, int len) {
           if(len == 1) 
             yield return index;
           else if(len == 2) {
               yield return index;
               Swap (index, offset, offset+1);
               yield return index;
               Swap (index, offset, offset+1);
           }
           else {
               for(int i = 0; i < len; i++) {
                   int j = (i + 1) % len;
                   while(j != i) {
                       Swap (index, offset+i, offset+j);
                       yield return index;
                       Swap (index, offset+i, offset+j);
                       j = (j + 1) % len;
                   }
               }
           } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
698
1
Gpt3D_Clone698_1.cs 1 25
Gpt3D_Clone698_1.cs 26 48
----------------------------------------

public IEnumerable < int [] > GetIntPermutations (int [] index, int offset, int len) {
    switch (len) {
        case 1 :
            yield return index;
            break;
        case 2 :
            yield return index;
            Swap (index, offset, offset + 1);
            yield return index;
            Swap (index, offset, offset + 1);
            break;
        default :
            foreach (var result in GetIntPermutations (index, offset + 1, len - 1)) {
                yield return result;
            }
            for (var i = 1; i < len; i ++) {
                Swap (index, offset, offset + i);
                foreach (var result in GetIntPermutations (index, offset + 1, len - 1)) {
                    yield return result;
                }
                Swap (index, offset, offset + i);
            }
            break;
    }
}
----------------------------------------

 public IEnumerable<int[]> GetIntPermutations(int[] index, int offset, int len) {
           if (len == 1)
               yield return index;
           else if (len == 2) {
               yield return index;
               Swap(index, offset, offset + 1);
               yield return index;
               Swap(index, offset, offset + 1);
           }
           else {
               for (int i = 0; i < len; i++) {
                   for (int j = 0; j < len; j++) {
                       if (i != j) {
                           Swap(index, offset + i, offset + j);
                           yield return index;
                           Swap(index, offset + i, offset + j);
                       }
                   }
               }
           }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
698
2
Gpt3D_Clone698_2.cs 1 25
Gpt3D_Clone698_2.cs 26 48
----------------------------------------

public IEnumerable < int [] > GetIntPermutations (int [] index, int offset, int len) {
    switch (len) {
        case 1 :
            yield return index;
            break;
        case 2 :
            yield return index;
            Swap (index, offset, offset + 1);
            yield return index;
            Swap (index, offset, offset + 1);
            break;
        default :
            foreach (var result in GetIntPermutations (index, offset + 1, len - 1)) {
                yield return result;
            }
            for (var i = 1; i < len; i ++) {
                Swap (index, offset, offset + i);
                foreach (var result in GetIntPermutations (index, offset + 1, len - 1)) {
                    yield return result;
                }
                Swap (index, offset, offset + i);
            }
            break;
    }
}
----------------------------------------

  public IEnumerable<int[]> GetIntPermutations(int[] index, int offset, int len) {
           if (len == 1)
               yield return index;
           else if (len == 2) {
               yield return index;
               Swap(index, offset, offset + 1);
               yield return index;
               Swap(index, offset, offset + 1);
           }
           else {
               // Generate all permutations of the array
               // starting from the initial order.
               yield return index;
               for (int i = 0; i < len; i++) {
                   for (int j = i + 1; j < len; j++) {
                       Swap(index,offset + i, offset + j);
                       yield return index;
                   }
               }
           }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
698
3
Gpt3D_Clone698_3.cs 1 25
Gpt3D_Clone698_3.cs 26 46
----------------------------------------

public IEnumerable < int [] > GetIntPermutations (int [] index, int offset, int len) {
    switch (len) {
        case 1 :
            yield return index;
            break;
        case 2 :
            yield return index;
            Swap (index, offset, offset + 1);
            yield return index;
            Swap (index, offset, offset + 1);
            break;
        default :
            foreach (var result in GetIntPermutations (index, offset + 1, len - 1)) {
                yield return result;
            }
            for (var i = 1; i < len; i ++) {
                Swap (index, offset, offset + i);
                foreach (var result in GetIntPermutations (index, offset + 1, len - 1)) {
                    yield return result;
                }
                Swap (index, offset, offset + i);
            }
            break;
    }
}
----------------------------------------

  public IEnumerable < int[] > GetIntPermutations (int[] index, int offset, int len) {	
           if(len == 1) 
             yield return index;
	   else if(len == 2) {
               yield return index;
               Swap (index, offset, offset+1);
               yield return index;
               Swap (index, offset, offset+1);
	   }
	   else {
	       for(int i = 0; i < (len-1); i++) {
	           for(int j = i + 1; j < len; j++) {
	               Swap (index, offset+i, offset+j);
	               yield return index;
	               Swap (index, offset+i, offset+j);
	           }
	       }
	   } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
698
4
Gpt3D_Clone698_4.cs 1 25
Gpt3D_Clone698_4.cs 26 46
----------------------------------------

public IEnumerable < int [] > GetIntPermutations (int [] index, int offset, int len) {
    switch (len) {
        case 1 :
            yield return index;
            break;
        case 2 :
            yield return index;
            Swap (index, offset, offset + 1);
            yield return index;
            Swap (index, offset, offset + 1);
            break;
        default :
            foreach (var result in GetIntPermutations (index, offset + 1, len - 1)) {
                yield return result;
            }
            for (var i = 1; i < len; i ++) {
                Swap (index, offset, offset + i);
                foreach (var result in GetIntPermutations (index, offset + 1, len - 1)) {
                    yield return result;
                }
                Swap (index, offset, offset + i);
            }
            break;
    }
}
----------------------------------------

 public IEnumerable<int[]> GetIntPermutations(int[] index, int offset, int len) {
           if(len == 2) 
             yield return index;
	   else if(len == 2) {
               yield return index;
               Swap (index, offset, offset+1);
               yield return index;
               Swap (index, offset, offset+1);
	   }
	   else {
	       for(int i = offset; i < (offset + len); i++) {
	           for(int j = i + 1; j < (offset + len); j++) {
	               Swap (index, i, j);
	               yield return index;
	               Swap (index, i, j);
	           }
	       }
	   } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
698
5
Gpt3D_Clone698_5.cs 1 25
Gpt3D_Clone698_5.cs 26 46
----------------------------------------

public IEnumerable < int [] > GetIntPermutations (int [] index, int offset, int len) {
    switch (len) {
        case 1 :
            yield return index;
            break;
        case 2 :
            yield return index;
            Swap (index, offset, offset + 1);
            yield return index;
            Swap (index, offset, offset + 1);
            break;
        default :
            foreach (var result in GetIntPermutations (index, offset + 1, len - 1)) {
                yield return result;
            }
            for (var i = 1; i < len; i ++) {
                Swap (index, offset, offset + i);
                foreach (var result in GetIntPermutations (index, offset + 1, len - 1)) {
                    yield return result;
                }
                Swap (index, offset, offset + i);
            }
            break;
    }
}
----------------------------------------

  public IEnumerable<int[]> GetIntPermutations(int[] index, int offset, int len) {
           if (len == 1)
               yield return index;
           else if (len == 2) {
               yield return index;
               Swap(index, offset, offset + 1);
               yield return index;
               Swap(index, offset, offset + 1);
           }
           else {
               for (int i = 0; i < len; i++) {
                   for (int j = i + 1; j < len; j++) {
                       Swap(index, offset + i, offset + j);
                       yield return index;
                       Swap(index, offset + i, offset + j);
                   }
               }
           }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
698
6
Gpt3D_Clone698_6.cs 1 25
Gpt3D_Clone698_6.cs 26 46
----------------------------------------

public IEnumerable < int [] > GetIntPermutations (int [] index, int offset, int len) {
    switch (len) {
        case 1 :
            yield return index;
            break;
        case 2 :
            yield return index;
            Swap (index, offset, offset + 1);
            yield return index;
            Swap (index, offset, offset + 1);
            break;
        default :
            foreach (var result in GetIntPermutations (index, offset + 1, len - 1)) {
                yield return result;
            }
            for (var i = 1; i < len; i ++) {
                Swap (index, offset, offset + i);
                foreach (var result in GetIntPermutations (index, offset + 1, len - 1)) {
                    yield return result;
                }
                Swap (index, offset, offset + i);
            }
            break;
    }
}
----------------------------------------

 public IEnumerable<int[]> GetIntPermutations(int[] index, int offset, int len) {
           if (len == 1)
               yield return index;
           else if (len == 2) {
               yield return index;
               Swap(index, offset, offset + 1);
               yield return index;
               Swap(index, offset, offset + 1);
           }
           else {
               for (int i = 0; i < len; i++) {
                   for (int j = i + 1; j < len; j++) {
                       Swap(index, offset + i, offset + j);
                       yield return index;
                       Swap(index, offset + i, offset + j);
                   }
               }
           }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
698
7
Gpt3D_Clone698_7.cs 1 25
Gpt3D_Clone698_7.cs 26 45
----------------------------------------

public IEnumerable < int [] > GetIntPermutations (int [] index, int offset, int len) {
    switch (len) {
        case 1 :
            yield return index;
            break;
        case 2 :
            yield return index;
            Swap (index, offset, offset + 1);
            yield return index;
            Swap (index, offset, offset + 1);
            break;
        default :
            foreach (var result in GetIntPermutations (index, offset + 1, len - 1)) {
                yield return result;
            }
            for (var i = 1; i < len; i ++) {
                Swap (index, offset, offset + i);
                foreach (var result in GetIntPermutations (index, offset + 1, len - 1)) {
                    yield return result;
                }
                Swap (index, offset, offset + i);
            }
            break;
    }
}
----------------------------------------

  public IEnumerable<int[]> GetIntPermutations(int[] index, int offset, int len) {
           if (len == 1)
               yield return index;
           else if (len == 2) {
               yield return index;
               Swap(index, offset, offset + 1);
               yield return index;
               Swap(index, offset, offset + 1);
           }
           else {
               for (int i = offset; i < len + offset; i++) {
                   for (int j = i + 1; j < len + offset; j++) {
                       Swap(index, i, j);
                       yield return index;
                   }
               }
           }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
698
8
Gpt3D_Clone698_8.cs 1 25
Gpt3D_Clone698_8.cs 26 45
----------------------------------------

public IEnumerable < int [] > GetIntPermutations (int [] index, int offset, int len) {
    switch (len) {
        case 1 :
            yield return index;
            break;
        case 2 :
            yield return index;
            Swap (index, offset, offset + 1);
            yield return index;
            Swap (index, offset, offset + 1);
            break;
        default :
            foreach (var result in GetIntPermutations (index, offset + 1, len - 1)) {
                yield return result;
            }
            for (var i = 1; i < len; i ++) {
                Swap (index, offset, offset + i);
                foreach (var result in GetIntPermutations (index, offset + 1, len - 1)) {
                    yield return result;
                }
                Swap (index, offset, offset + i);
            }
            break;
    }
}
----------------------------------------

 public IEnumerable<int[]> GetIntPermutations(int[] index, int offset, int len) {
           if (len == 1)
               yield return index;
           else if (len == 2) {
               yield return index;
               Swap(index, offset, offset + 1);
               yield return index;
               Swap(index, offset, offset + 1);
           }
           else {
               for (int i = offset; i < len + offset - 1; i++) {
                   for (int j = i + 1; j < offset + len; j++) {
                       Swap(index, i, j);
                       yield return index;
                   }
               }
           }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
700
0
Gpt3D_Clone700_0.cs 1 16
Gpt3D_Clone700_0.cs 17 40
----------------------------------------

public void Update1 (T obj, string [] input, object newval) {
    Type t = typeof (T);
    var param1 = Expression.Parameter (t);
    Expression exp = param1;
    foreach (var it in input.Skip (1).Take (input.Length - 2)) {
        var minfo = t.GetProperty (it).GetGetMethod ();
        exp = Expression.Call (exp, minfo);
        t = minfo.ReturnType;
    }
    var lastprop = t.GetProperty (input.Last ());
    var minfoset = lastprop.GetSetMethod ();
    var variableexp = Expression.Variable (lastprop.PropertyType);
    exp = Expression.Call (exp, minfoset, variableexp);
    var lambda = Expression.Lambda (exp, param1, variableexp);
    lambda.Compile ().DynamicInvoke (obj, newval);
}
----------------------------------------

 public void Update1 (T obj, string [] input, object newval) {
    Type t = typeof (T);
    MemberExpression memberExpression = null;
    for(int i=1;i<input.Length-1;i++)
    {
        var minfo = t.GetProperty(input[i]); 
        memberExpression = Expression.Property(memberExpression, minfo);
        t = minfo.PropertyType;
    }
    var lastprop = t.GetProperty(input.Last());
    ParameterExpression exp = Expression.Parameter(typeof(T), "x");
    MemberExpression memberExpression1 = Expression.Property(exp, lastprop);
    var setMethod = lastprop.GetSetMethod();
    UnaryExpression setExp = Expression.Convert(Expression.Constant(newval, typeof(object)), lastprop.PropertyType);
    Expression body = Expression.Call(memberExpression,setMethod, setExp);
    LambdaExpression lambda = Expression.Lambda(body, exp);
    Delegate dn = lambda.Compile();
    dn.DynamicInvoke(obj);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
700
1
Gpt3D_Clone700_1.cs 1 16
Gpt3D_Clone700_1.cs 17 49
----------------------------------------

public void Update1 (T obj, string [] input, object newval) {
    Type t = typeof (T);
    var param1 = Expression.Parameter (t);
    Expression exp = param1;
    foreach (var it in input.Skip (1).Take (input.Length - 2)) {
        var minfo = t.GetProperty (it).GetGetMethod ();
        exp = Expression.Call (exp, minfo);
        t = minfo.ReturnType;
    }
    var lastprop = t.GetProperty (input.Last ());
    var minfoset = lastprop.GetSetMethod ();
    var variableexp = Expression.Variable (lastprop.PropertyType);
    exp = Expression.Call (exp, minfoset, variableexp);
    var lambda = Expression.Lambda (exp, param1, variableexp);
    lambda.Compile ().DynamicInvoke (obj, newval);
}
----------------------------------------

 public void Update1(T obj, string[] input, object newval)
{
    var type = typeof (T);
    // Create a parameter expression representing our input object
    var parameterExpression = Expression.Parameter(type, "obj");
    // Create an expression to hold the result
    var expression = parameterExpression;
    // Loop through each element of the input array
    foreach (var element in input.Skip(1).Take(input.Length - 2))
    {
        // Get a reference to the PropertyInfo object
        var prop = type.GetProperty(element);
        // Get a reference to the Getter method 
        var propgetter = prop.GetGetMethod();
        // Get the return type of the Getter method 
        type = propgetter.ReturnType;
        // Add the getter to the expression 
        expression = Expression.Call(expression, propgetter);
    }
    // Get the last property from the array 
    var lastprop = type.GetProperty(input.Last());
    // Get the Setter Method from the PropertyInfo object 
    var minfoset = lastprop.GetSetMethod();
    // Create a new expression from the Setter Method 
    var setterCall = Expression.Call(expression, minfoset, Expression.Constant(newval, lastprop.PropertyType));
    // Create a lambda expression from the expression 
    var lambda = Expression.Lambda(setterCall, parameterExpression);
    // Compile and invoke the lambda 
    var compiled = lambda.Compile();
    compiled.DynamicInvoke(obj);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
700
3
Gpt3D_Clone700_3.cs 1 16
Gpt3D_Clone700_3.cs 17 37
----------------------------------------

public void Update1 (T obj, string [] input, object newval) {
    Type t = typeof (T);
    var param1 = Expression.Parameter (t);
    Expression exp = param1;
    foreach (var it in input.Skip (1).Take (input.Length - 2)) {
        var minfo = t.GetProperty (it).GetGetMethod ();
        exp = Expression.Call (exp, minfo);
        t = minfo.ReturnType;
    }
    var lastprop = t.GetProperty (input.Last ());
    var minfoset = lastprop.GetSetMethod ();
    var variableexp = Expression.Variable (lastprop.PropertyType);
    exp = Expression.Call (exp, minfoset, variableexp);
    var lambda = Expression.Lambda (exp, param1, variableexp);
    lambda.Compile ().DynamicInvoke (obj, newval);
}
----------------------------------------

 public void Update1(T obj, string[] input, object newval){
    Type type = typeof(T);
    ParameterExpression exp = Expression.Parameter(type, "obj");
    Expression tree = null;
    for(int i=1;i<input.Length-1;i++){
        var minfo = type.GetProperty(input[i]);
        tree = Expression.Property(exp, minfo.Name);
        type = minfo.PropertyType;
    }
   
    var lastprop = type.GetProperty(input.Last());
    var setMethod = lastprop.GetSetMethod();
    var assign = Expression.Assign(tree, Expression.Constant(newval, typeof(object)));
    LambdaExpression lambda = Expression.Lambda(assign, exp);
    Delegate dn = lambda.Compile();
    dn.DynamicInvoke(obj);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
700
4
Gpt3D_Clone700_4.cs 1 16
Gpt3D_Clone700_4.cs 17 39
----------------------------------------

public void Update1 (T obj, string [] input, object newval) {
    Type t = typeof (T);
    var param1 = Expression.Parameter (t);
    Expression exp = param1;
    foreach (var it in input.Skip (1).Take (input.Length - 2)) {
        var minfo = t.GetProperty (it).GetGetMethod ();
        exp = Expression.Call (exp, minfo);
        t = minfo.ReturnType;
    }
    var lastprop = t.GetProperty (input.Last ());
    var minfoset = lastprop.GetSetMethod ();
    var variableexp = Expression.Variable (lastprop.PropertyType);
    exp = Expression.Call (exp, minfoset, variableexp);
    var lambda = Expression.Lambda (exp, param1, variableexp);
    lambda.Compile ().DynamicInvoke (obj, newval);
}
----------------------------------------

 public void Update1(T obj, string[] input, object newval)
{
    Type type = typeof(T);
    ParameterExpression exp = Expression.Parameter(type,"obj");
    Expression tree = null;
    for(int i=1;i<input.Length-1;i++){
        var minfo = type.GetProperty(input[i]);
        tree = Expression.Property(exp, minfo.Name);
        type = minfo.PropertyType;
    }
   
    var lastprop = type.GetProperty(input.Last());
    var setMethod = lastprop.GetSetMethod();
    tree = Expression.Call(tree, setMethod, Expression.Constant(newval));
    LambdaExpression lambda = Expression.Lambda(tree,exp);
    Delegate dn = lambda.Compile();
    dn.DynamicInvoke(obj);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
700
5
Gpt3D_Clone700_5.cs 1 16
Gpt3D_Clone700_5.cs 17 38
----------------------------------------

public void Update1 (T obj, string [] input, object newval) {
    Type t = typeof (T);
    var param1 = Expression.Parameter (t);
    Expression exp = param1;
    foreach (var it in input.Skip (1).Take (input.Length - 2)) {
        var minfo = t.GetProperty (it).GetGetMethod ();
        exp = Expression.Call (exp, minfo);
        t = minfo.ReturnType;
    }
    var lastprop = t.GetProperty (input.Last ());
    var minfoset = lastprop.GetSetMethod ();
    var variableexp = Expression.Variable (lastprop.PropertyType);
    exp = Expression.Call (exp, minfoset, variableexp);
    var lambda = Expression.Lambda (exp, param1, variableexp);
    lambda.Compile ().DynamicInvoke (obj, newval);
}
----------------------------------------

 public void Update1(T obj, string[] input, object newval)
{
    Type t = typeof(T);
    var param1 = Expression.Parameter(t);
    Expression exp = default(Expression);
    for (int i=1; i <input.Length-1; i++)
    {
       var minfo = t.GetProperty(input[i]).GetGetMethod();
       exp = Expression.Call(exp, minfo);
       t = minfo.ReturnType;
    }
   
    var lastprop = t.GetProperty(input.Last());
    var minfoset = lastprop.GetSetMethod();
    exp = Expression.Call(exp, minfoset, Expression.Constant(newval, lastprop.PropertyType));
    var lambda = Expression.Lambda(exp, param1);
    lambda.Compile().DynamicInvoke(obj);
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
700
6
Gpt3D_Clone700_6.cs 1 16
Gpt3D_Clone700_6.cs 17 37
----------------------------------------

public void Update1 (T obj, string [] input, object newval) {
    Type t = typeof (T);
    var param1 = Expression.Parameter (t);
    Expression exp = param1;
    foreach (var it in input.Skip (1).Take (input.Length - 2)) {
        var minfo = t.GetProperty (it).GetGetMethod ();
        exp = Expression.Call (exp, minfo);
        t = minfo.ReturnType;
    }
    var lastprop = t.GetProperty (input.Last ());
    var minfoset = lastprop.GetSetMethod ();
    var variableexp = Expression.Variable (lastprop.PropertyType);
    exp = Expression.Call (exp, minfoset, variableexp);
    var lambda = Expression.Lambda (exp, param1, variableexp);
    lambda.Compile ().DynamicInvoke (obj, newval);
}
----------------------------------------

 public void Update1 (T obj, string [] input, object newval) 
{   
    Type t = typeof (T);
    Expression exp = null;
    for (int i=1; i<input.Length-1; i++)
    {
        var minfo = t.GetProperty(input[i]);
        exp = Expression.Property(exp, minfo);
        t = minfo.PropertyType;
    }
    var lastprop = t.GetProperty(input.Last());
    var minfoset = lastprop.GetSetMethod();
    var assign = Expression.Assign (exp, Expression.Constant(newval,typeof(object)));
    LambdaExpression lambda = Expression.Lambda(assign, exp);
    Delegate dn = lambda.Compile();
    dn.DynamicInvoke(obj);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
700
7
Gpt3D_Clone700_7.cs 1 16
Gpt3D_Clone700_7.cs 17 34
----------------------------------------

public void Update1 (T obj, string [] input, object newval) {
    Type t = typeof (T);
    var param1 = Expression.Parameter (t);
    Expression exp = param1;
    foreach (var it in input.Skip (1).Take (input.Length - 2)) {
        var minfo = t.GetProperty (it).GetGetMethod ();
        exp = Expression.Call (exp, minfo);
        t = minfo.ReturnType;
    }
    var lastprop = t.GetProperty (input.Last ());
    var minfoset = lastprop.GetSetMethod ();
    var variableexp = Expression.Variable (lastprop.PropertyType);
    exp = Expression.Call (exp, minfoset, variableexp);
    var lambda = Expression.Lambda (exp, param1, variableexp);
    lambda.Compile ().DynamicInvoke (obj, newval);
}
----------------------------------------

 public void Update1(T obj, string[] input, object newval)
{
    Expression exp = Expression.Parameter(typeof(T),"obj");
    Type t = exp.Type;
    foreach (var item in input.Skip(1).Take(input.Length - 2))
    {
        var minfo = t.GetProperty(item).GetGetMethod();
        exp = Expression.Call(exp, minfo);
        t = minfo.ReturnType;
    }
    var lastprop = t.GetProperty(input.Last());
    var lastpropSetMethod = lastprop.GetSetMethod();
    var assign = Expression.Assign(exp, Expression.Constant(newval, typeof(object)));
    var lamda = Expression.Lambda<Action<T>>(assign, exp);
    lamda.Compile().Invoke(obj);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
700
8
Gpt3D_Clone700_8.cs 1 16
Gpt3D_Clone700_8.cs 17 32
----------------------------------------

public void Update1 (T obj, string [] input, object newval) {
    Type t = typeof (T);
    var param1 = Expression.Parameter (t);
    Expression exp = param1;
    foreach (var it in input.Skip (1).Take (input.Length - 2)) {
        var minfo = t.GetProperty (it).GetGetMethod ();
        exp = Expression.Call (exp, minfo);
        t = minfo.ReturnType;
    }
    var lastprop = t.GetProperty (input.Last ());
    var minfoset = lastprop.GetSetMethod ();
    var variableexp = Expression.Variable (lastprop.PropertyType);
    exp = Expression.Call (exp, minfoset, variableexp);
    var lambda = Expression.Lambda (exp, param1, variableexp);
    lambda.Compile ().DynamicInvoke (obj, newval);
}
----------------------------------------

 public void Update1(T obj, string[] input, object newval)
{
    var pType = typeof(T);
    MemberExpression exp = null;
    for (int i=1; i <input.Length-1; i++){
        exp = Expression.Property(exp, pType.GetProperty(input[i]));
        pType = exp.Type;
    }
    var lastproperty = pType.GetProperty(input.Last());
    var setter = lastproperty.GetSetMethod();
    var assign = Expression.Assign(exp, Expression.Constant(newval, typeof(object)));
    var lamda = Expression.Lambda<Action<T>>(assign, exp);
    lamda.Compile().Invoke(obj);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
700
9
Gpt3D_Clone700_9.cs 1 16
Gpt3D_Clone700_9.cs 17 28
----------------------------------------

public void Update1 (T obj, string [] input, object newval) {
    Type t = typeof (T);
    var param1 = Expression.Parameter (t);
    Expression exp = param1;
    foreach (var it in input.Skip (1).Take (input.Length - 2)) {
        var minfo = t.GetProperty (it).GetGetMethod ();
        exp = Expression.Call (exp, minfo);
        t = minfo.ReturnType;
    }
    var lastprop = t.GetProperty (input.Last ());
    var minfoset = lastprop.GetSetMethod ();
    var variableexp = Expression.Variable (lastprop.PropertyType);
    exp = Expression.Call (exp, minfoset, variableexp);
    var lambda = Expression.Lambda (exp, param1, variableexp);
    lambda.Compile ().DynamicInvoke (obj, newval);
}
----------------------------------------

 public void Update1(T obj, string[] input, object newval)
{
    var type = typeof(T);
    var prop = Expression.Parameter(type);
    var body = BuildTree(input, type);
    var delegateType = typeof(Action<,>).MakeGenericType(type, body.Type);
    var expression = Expression.Lambda(delegateType, body, prop, Expression.Constant(newval, body.Type));
    var compiled = expression.Compile();
    compiled.DynamicInvoke(obj);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
701
0
Gpt3D_Clone701_0.cs 1 16
Gpt3D_Clone701_0.cs 17 25
----------------------------------------

public string FormatNumDigits (double number, int x) {
    string asString = (number >= 0 ? "+" : "") + number.ToString ("F50", System.Globalization.CultureInfo.InvariantCulture);
    if (asString.Contains ('.')) {
        if (asString.Length > x + 2) {
            return asString.Substring (0, x + 2);
        } else {
            return asString.Insert (asString.Length, new String ('0', x + 2 - asString.Length));
        }
    } else {
        if (asString.Length > x + 1) {
            return asString.Substring (0, x + 1);
        } else {
            return asString.Insert (1, new String ('0', x + 1 - asString.Length));
        }
    }
}
----------------------------------------

 public string FormatNumDigits(double number, int x) 
{ 
    System.Globalization.NumberFormatInfo nfi = new System.Globalization.NumberFormatInfo(); 
    nfi.NumberDecimalDigits = x; 
    string asString = number.ToString("N", nfi); 
    return asString; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
701
1
Gpt3D_Clone701_1.cs 1 16
Gpt3D_Clone701_1.cs 17 24
----------------------------------------

public string FormatNumDigits (double number, int x) {
    string asString = (number >= 0 ? "+" : "") + number.ToString ("F50", System.Globalization.CultureInfo.InvariantCulture);
    if (asString.Contains ('.')) {
        if (asString.Length > x + 2) {
            return asString.Substring (0, x + 2);
        } else {
            return asString.Insert (asString.Length, new String ('0', x + 2 - asString.Length));
        }
    } else {
        if (asString.Length > x + 1) {
            return asString.Substring (0, x + 1);
        } else {
            return asString.Insert (1, new String ('0', x + 1 - asString.Length));
        }
    }
}
----------------------------------------

 public string FormatNumDigits(double number, int x) 
{ 
    double printValue = Math.Round(number, x); 
    string asString = printValue.ToString(System.Globalization.CultureInfo.InvariantCulture); 
    return asString; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
701
2
Gpt3D_Clone701_2.cs 1 16
Gpt3D_Clone701_2.cs 17 24
----------------------------------------

public string FormatNumDigits (double number, int x) {
    string asString = (number >= 0 ? "+" : "") + number.ToString ("F50", System.Globalization.CultureInfo.InvariantCulture);
    if (asString.Contains ('.')) {
        if (asString.Length > x + 2) {
            return asString.Substring (0, x + 2);
        } else {
            return asString.Insert (asString.Length, new String ('0', x + 2 - asString.Length));
        }
    } else {
        if (asString.Length > x + 1) {
            return asString.Substring (0, x + 1);
        } else {
            return asString.Insert (1, new String ('0', x + 1 - asString.Length));
        }
    }
}
----------------------------------------

 public string FormatNumDigits(double number, int x) 
{ 
    string asString = (number >= 0 ? "+" : "") + number.ToString(String.Format("F{0}", x), System.Globalization.CultureInfo.InvariantCulture); 
    asString = asString.Truncate(x + 2); 
    return asString; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
701
3
Gpt3D_Clone701_3.cs 1 16
Gpt3D_Clone701_3.cs 17 24
----------------------------------------

public string FormatNumDigits (double number, int x) {
    string asString = (number >= 0 ? "+" : "") + number.ToString ("F50", System.Globalization.CultureInfo.InvariantCulture);
    if (asString.Contains ('.')) {
        if (asString.Length > x + 2) {
            return asString.Substring (0, x + 2);
        } else {
            return asString.Insert (asString.Length, new String ('0', x + 2 - asString.Length));
        }
    } else {
        if (asString.Length > x + 1) {
            return asString.Substring (0, x + 1);
        } else {
            return asString.Insert (1, new String ('0', x + 1 - asString.Length));
        }
    }
}
----------------------------------------

 public string FormatNumDigits(double number, int x) 
{ 
    string asString = number.ToString(String.Format("F{0}", x), System.Globalization.CultureInfo.InvariantCulture); 
    asString = asString.PadLeft(x + 2); 
    return asString; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
701
4
Gpt3D_Clone701_4.cs 1 16
Gpt3D_Clone701_4.cs 17 24
----------------------------------------

public string FormatNumDigits (double number, int x) {
    string asString = (number >= 0 ? "+" : "") + number.ToString ("F50", System.Globalization.CultureInfo.InvariantCulture);
    if (asString.Contains ('.')) {
        if (asString.Length > x + 2) {
            return asString.Substring (0, x + 2);
        } else {
            return asString.Insert (asString.Length, new String ('0', x + 2 - asString.Length));
        }
    } else {
        if (asString.Length > x + 1) {
            return asString.Substring (0, x + 1);
        } else {
            return asString.Insert (1, new String ('0', x + 1 - asString.Length));
        }
    }
}
----------------------------------------

 public string FormatNumDigits(double number, int x) 
{ 
    int precision = Math.Max(0, x); 
    string asString = number.ToString(String.Format("F{0}", precision), System.Globalization.CultureInfo.InvariantCulture); 
    return asString; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
701
5
Gpt3D_Clone701_5.cs 1 16
Gpt3D_Clone701_5.cs 17 24
----------------------------------------

public string FormatNumDigits (double number, int x) {
    string asString = (number >= 0 ? "+" : "") + number.ToString ("F50", System.Globalization.CultureInfo.InvariantCulture);
    if (asString.Contains ('.')) {
        if (asString.Length > x + 2) {
            return asString.Substring (0, x + 2);
        } else {
            return asString.Insert (asString.Length, new String ('0', x + 2 - asString.Length));
        }
    } else {
        if (asString.Length > x + 1) {
            return asString.Substring (0, x + 1);
        } else {
            return asString.Insert (1, new String ('0', x + 1 - asString.Length));
        }
    }
}
----------------------------------------

 public string FormatNumDigits(double number, int x) 
{ 
    string asString = (number >= 0 ? "+" : "") + number.ToString(String.Format("F{0}", x), System.Globalization.CultureInfo.InvariantCulture); 
    string paddedString = asString.PadRight(x + 2, '0'); 
    return paddedString; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
701
6
Gpt3D_Clone701_6.cs 1 16
Gpt3D_Clone701_6.cs 17 24
----------------------------------------

public string FormatNumDigits (double number, int x) {
    string asString = (number >= 0 ? "+" : "") + number.ToString ("F50", System.Globalization.CultureInfo.InvariantCulture);
    if (asString.Contains ('.')) {
        if (asString.Length > x + 2) {
            return asString.Substring (0, x + 2);
        } else {
            return asString.Insert (asString.Length, new String ('0', x + 2 - asString.Length));
        }
    } else {
        if (asString.Length > x + 1) {
            return asString.Substring (0, x + 1);
        } else {
            return asString.Insert (1, new String ('0', x + 1 - asString.Length));
        }
    }
}
----------------------------------------

 public string FormatNumDigits(double number, int x) 
{ 
    int precision = Math.Max(0, x); 
    string asString = number.ToString("#.".PadRight(precision + 2, '0'), System.Globalization.CultureInfo.InvariantCulture); 
    return asString; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
701
7
Gpt3D_Clone701_7.cs 1 16
Gpt3D_Clone701_7.cs 17 23
----------------------------------------

public string FormatNumDigits (double number, int x) {
    string asString = (number >= 0 ? "+" : "") + number.ToString ("F50", System.Globalization.CultureInfo.InvariantCulture);
    if (asString.Contains ('.')) {
        if (asString.Length > x + 2) {
            return asString.Substring (0, x + 2);
        } else {
            return asString.Insert (asString.Length, new String ('0', x + 2 - asString.Length));
        }
    } else {
        if (asString.Length > x + 1) {
            return asString.Substring (0, x + 1);
        } else {
            return asString.Insert (1, new String ('0', x + 1 - asString.Length));
        }
    }
}
----------------------------------------

 public string FormatNumDigits(double number, int x) 
{ 
    string asString =  System.Math.Round(number,x).ToString(); 
    return asString; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
701
8
Gpt3D_Clone701_8.cs 1 16
Gpt3D_Clone701_8.cs 17 23
----------------------------------------

public string FormatNumDigits (double number, int x) {
    string asString = (number >= 0 ? "+" : "") + number.ToString ("F50", System.Globalization.CultureInfo.InvariantCulture);
    if (asString.Contains ('.')) {
        if (asString.Length > x + 2) {
            return asString.Substring (0, x + 2);
        } else {
            return asString.Insert (asString.Length, new String ('0', x + 2 - asString.Length));
        }
    } else {
        if (asString.Length > x + 1) {
            return asString.Substring (0, x + 1);
        } else {
            return asString.Insert (1, new String ('0', x + 1 - asString.Length));
        }
    }
}
----------------------------------------

 public string FormatNumDigits(double number, int x) 
{ 
    string asString = string.Format("{0:F"+x+"}", number); 
    return asString; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
701
9
Gpt3D_Clone701_9.cs 1 16
Gpt3D_Clone701_9.cs 17 23
----------------------------------------

public string FormatNumDigits (double number, int x) {
    string asString = (number >= 0 ? "+" : "") + number.ToString ("F50", System.Globalization.CultureInfo.InvariantCulture);
    if (asString.Contains ('.')) {
        if (asString.Length > x + 2) {
            return asString.Substring (0, x + 2);
        } else {
            return asString.Insert (asString.Length, new String ('0', x + 2 - asString.Length));
        }
    } else {
        if (asString.Length > x + 1) {
            return asString.Substring (0, x + 1);
        } else {
            return asString.Insert (1, new String ('0', x + 1 - asString.Length));
        }
    }
}
----------------------------------------

 public string FormatNumDigits(double number, int x) 
{ 
    string asString = (number >= 0 ? "+" : "") + number.ToString(String.Format("F{0}", x), System.Globalization.CultureInfo.InvariantCulture); 
    return asString; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
703
0
Gpt3D_Clone703_0.cs 1 14
Gpt3D_Clone703_0.cs 15 60
----------------------------------------

private bool IsAnagramFast (string a, string b) {
    if (a.Length != b.Length) {
        return false;
    }
    var aFrequency = CalculateFrequency (a);
    var bFrequency = CalculateFrequency (b);
    foreach (var key in aFrequency.Keys) {
        if (! bFrequency.ContainsKey (key))
            return false;
        if (aFrequency [key] != bFrequency [key])
            return false;
    }
    return true;
}
----------------------------------------

 private bool IsAnagramFast (string a, string b) {
    if(a.Length == 0 && b.Length == 0) return true;
    if (a.Length != b.Length) {
        return false;
    }
    a = a.ToLower();
    b = b.ToLower();
    var dictA = new Dictionary<char, int>();
    var dictB = new Dictionary<char, int>();
    foreach (var chr in a)
    {
        if (!dictA.ContainsKey(chr))
        {
            dictA[chr] = 1;
        }
        else 
        {
            dictA[chr]++;
        }
    }
    foreach (var chr in b)
    {
        if (!dictB.ContainsKey(chr))
        {
            dictB[chr] = 1;
        }
        else 
        {
            dictB[chr]++;
        }
    }
    foreach (var item in dictA)
    {
        if (!dictB.ContainsKey(item.Key))
            return false;
            
        if (dictB[item.Key] != item.Value)
            return false;
    }
    return true;
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
703
1
Gpt3D_Clone703_1.cs 1 14
Gpt3D_Clone703_1.cs 15 58
----------------------------------------

private bool IsAnagramFast (string a, string b) {
    if (a.Length != b.Length) {
        return false;
    }
    var aFrequency = CalculateFrequency (a);
    var bFrequency = CalculateFrequency (b);
    foreach (var key in aFrequency.Keys) {
        if (! bFrequency.ContainsKey (key))
            return false;
        if (aFrequency [key] != bFrequency [key])
            return false;
    }
    return true;
}
----------------------------------------

  private bool IsAnagramFast (string a, string b) {
    if(a.Length == 0 && b.Length == 0) return true;
    if (a.Length != b.Length) {
        return false;
    }
    string aAlphabets = "";
    string bAlphabets = "";
    foreach(char c in a.ToLower())
    {
        if(!aAlphabets.Contains(c))
        {
            aAlphabets += c;
        }
    }
    foreach(char c in b.ToLower())
    {
        if(!bAlphabets.Contains(c))
        {
            bAlphabets += c;
        }
    }
   
    if(aAlphabets.Length != bAlphabets.Length)
    {
        return false;
    }
    int index = 0;
    foreach(char c in aAlphabets)
    {
        if(!bAlphabets.Contains(c))
        {
            return false;
        }
        index = bAlphabets.IndexOf(c);
        if(a.ToLower().Count(f=> f == c) != b.ToLower().Count(f=> f == bAlphabets[index]))
        {
            return false;
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
703
2
Gpt3D_Clone703_2.cs 1 14
Gpt3D_Clone703_2.cs 15 46
----------------------------------------

private bool IsAnagramFast (string a, string b) {
    if (a.Length != b.Length) {
        return false;
    }
    var aFrequency = CalculateFrequency (a);
    var bFrequency = CalculateFrequency (b);
    foreach (var key in aFrequency.Keys) {
        if (! bFrequency.ContainsKey (key))
            return false;
        if (aFrequency [key] != bFrequency [key])
            return false;
    }
    return true;
}
----------------------------------------

 private bool IsAnagramFast (string a, string b) {
    if(a.Length == 0 && b.Length == 0) return true;
    if (a.Length != b.Length) {
        return false;
    }
    List<char> aList = new List<char>();
    List<char> bList = new List<char>();
    foreach (char ch in a.ToLower())
    {
        if (!aList.Contains(ch))
            aList.Add(ch);
    }
    foreach (char ch in b.ToLower())
    {
        if (!bList.Contains(ch))
            bList.Add(ch);
    }
    if (aList.Count != bList.Count)
        return false;
    foreach (char ch in aList)
    {
        if (!bList.Contains(ch))
            return false;
        int fa = a.ToLower().Count(f => f == ch);
        int fb = b.ToLower().Count(f => f == ch);
        if (fa != fb)
            return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
703
3
Gpt3D_Clone703_3.cs 1 14
Gpt3D_Clone703_3.cs 15 57
----------------------------------------

private bool IsAnagramFast (string a, string b) {
    if (a.Length != b.Length) {
        return false;
    }
    var aFrequency = CalculateFrequency (a);
    var bFrequency = CalculateFrequency (b);
    foreach (var key in aFrequency.Keys) {
        if (! bFrequency.ContainsKey (key))
            return false;
        if (aFrequency [key] != bFrequency [key])
            return false;
    }
    return true;
}
----------------------------------------

 private bool IsAnagramFast (string a, string b) {
    if(a.Length == 0 && b.Length == 0) return true;
    if (a.Length != b.Length) {
        return false;
    }
    Dictionary<char, int> aAlphabets = new Dictionary<char, int>();
    Dictionary<char, int> bAlphabets = new Dictionary<char, int>();
    foreach(char c in a.ToLower())
    {
        if(!aAlphabets.ContainsKey(c))
        {
            aAlphabets.Add(c, a.ToLower().Count(f=> f == c));
        }
    }
    foreach(char c in b.ToLower())
    {
        if(!bAlphabets.ContainsKey(c))
        {
            bAlphabets.Add(c, b.ToLower().Count(f=> f == c));
        }
    }
   
    if(aAlphabets.Count != bAlphabets.Count)
    {
        return false;
    }
  
    foreach(KeyValuePair<char, int> kvp in aAlphabets)
    {
        if(!bAlphabets.ContainsKey(kvp.Key))
        {
            return false;
        }
        if(bAlphabets[kvp.Key] != kvp.Value)
        {
            return false;
        }
    }
    return true;
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
703
4
Gpt3D_Clone703_4.cs 1 14
Gpt3D_Clone703_4.cs 15 35
----------------------------------------

private bool IsAnagramFast (string a, string b) {
    if (a.Length != b.Length) {
        return false;
    }
    var aFrequency = CalculateFrequency (a);
    var bFrequency = CalculateFrequency (b);
    foreach (var key in aFrequency.Keys) {
        if (! bFrequency.ContainsKey (key))
            return false;
        if (aFrequency [key] != bFrequency [key])
            return false;
    }
    return true;
}
----------------------------------------

 private bool IsAnagramFast (string a, string b) {
    if(a.Length == 0 && b.Length == 0) return true;
    if (a.Length != b.Length) {
        return false;
    }
    var aChars = a.ToLower().GroupBy(c => c).ToDictionary(c => c.Key, c => c.Count());
    var bChars = b.ToLower().GroupBy(c => c).ToDictionary(c => c.Key, c => c.Count());
    if(aChars.Count != bChars.Count) return false;
    
    foreach (char c in aChars.Keys) {
        if (!bChars.ContainsKey(c))
            return false;
        int fa = a.ToLower().Where(f => f == c).Count();
        int fb = b.ToLower().Where(f => f == c).Count();
        if (fa != fb)
            return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
703
5
Gpt3D_Clone703_5.cs 1 14
Gpt3D_Clone703_5.cs 15 40
----------------------------------------

private bool IsAnagramFast (string a, string b) {
    if (a.Length != b.Length) {
        return false;
    }
    var aFrequency = CalculateFrequency (a);
    var bFrequency = CalculateFrequency (b);
    foreach (var key in aFrequency.Keys) {
        if (! bFrequency.ContainsKey (key))
            return false;
        if (aFrequency [key] != bFrequency [key])
            return false;
    }
    return true;
}
----------------------------------------

 private bool IsAnagramFast (string a, string b) {
    if(a.Length == 0 && b.Length == 0) return true;
    if (a.Length != b.Length) {
        return false;
    }
    char[] aLowerChars = a.ToLower().ToCharArray();
    char[] bLowerChars = b.ToLower().ToCharArray();
   
    if (aLowerChars.Length != bLowerChars.Length) return false;
    int[] charCnt = new int[26]; 
    for (int i = 0; i < aLowerChars.Length; i++) 
    { 
        charCnt[aLowerChars[i]-97]++; 
        charCnt[bLowerChars[i]-97]--; 
    } 
    
    for (int i = 0; i < 26; i++) 
        if (charCnt[i] != 0) 
            return false; 
   
    return true; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
703
7
Gpt3D_Clone703_7.cs 1 14
Gpt3D_Clone703_7.cs 15 33
----------------------------------------

private bool IsAnagramFast (string a, string b) {
    if (a.Length != b.Length) {
        return false;
    }
    var aFrequency = CalculateFrequency (a);
    var bFrequency = CalculateFrequency (b);
    foreach (var key in aFrequency.Keys) {
        if (! bFrequency.ContainsKey (key))
            return false;
        if (aFrequency [key] != bFrequency [key])
            return false;
    }
    return true;
}
----------------------------------------

 private bool IsAnagramFast (string a, string b) {
    if(a.Length == 0 && b.Length == 0) return true;
    if (a.Length != b.Length) {
        return false;
    }
    string _a = new string (a.ToLower().Distinct().ToArray());
    string _b = new string (b.ToLower().Distinct().ToArray());
    foreach (char c in _a) {
        if (!_b.Contains(c)) return false;
        int fa = a.ToLower().Count(f => f == c);
        int fb = b.ToLower().Count(f => f == c);
        if (fa != fb) return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
703
8
Gpt3D_Clone703_8.cs 1 14
Gpt3D_Clone703_8.cs 15 32
----------------------------------------

private bool IsAnagramFast (string a, string b) {
    if (a.Length != b.Length) {
        return false;
    }
    var aFrequency = CalculateFrequency (a);
    var bFrequency = CalculateFrequency (b);
    foreach (var key in aFrequency.Keys) {
        if (! bFrequency.ContainsKey (key))
            return false;
        if (aFrequency [key] != bFrequency [key])
            return false;
    }
    return true;
}
----------------------------------------

 private bool IsAnagramFast (string a, string b) {
    if(a.Length == 0 && b.Length == 0) return true;
    if (a.Length != b.Length) {
        return false;
    }
    var aCharList = a.ToLower().ToList();
    var bCharList = b.ToLower().ToList();
    if(!aCharList.All(x=>bCharList.Contains(x)))
        return false;
    foreach (var aChar in aCharList)
    {
	if(aCharList.Count(x=> x==aChar) != bCharList.Count(x=> x==aChar))
          return false;
    }
    return true;
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
703
9
Gpt3D_Clone703_9.cs 1 14
Gpt3D_Clone703_9.cs 15 32
----------------------------------------

private bool IsAnagramFast (string a, string b) {
    if (a.Length != b.Length) {
        return false;
    }
    var aFrequency = CalculateFrequency (a);
    var bFrequency = CalculateFrequency (b);
    foreach (var key in aFrequency.Keys) {
        if (! bFrequency.ContainsKey (key))
            return false;
        if (aFrequency [key] != bFrequency [key])
            return false;
    }
    return true;
}
----------------------------------------

 private bool IsAnagramFast (string a, string b) {
    if(a.Length == 0 && b.Length == 0) return true;
    if (a.Length != b.Length) {
        return false;
    }
    var aCharCount = a.ToLower().GroupBy(x=>x).Select(x=> new { Char = x.Key, Count = x.Count()}).ToList();
    var bCharCount = b.ToLower().GroupBy(x=>x).Select(x=> new { Char = x.Key, Count = x.Count()}).ToList(); 
    if(aCharCount.Count != bCharCount.Count)
        return false;
    foreach (var w in aCharCount)
    {
        if(!bCharCount.Any(x => x.Char == w.Char && x.Count == w.Count))
            return false;
    }
    return true;
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
706
4
Gpt3D_Clone706_4.cs 1 36
Gpt3D_Clone706_4.cs 37 59
----------------------------------------

private static void OneTimeSetup () {
    try {
        Type stackFrameHelperType = typeof (object).Assembly.GetType ("System.Diagnostics.StackFrameHelper");
        MethodInfo getStackFramesInternal = Type.GetType ("System.Diagnostics.StackTrace, mscorlib").GetMethod ("GetStackFramesInternal", BindingFlags.Static | BindingFlags.NonPublic);
        if (getStackFramesInternal == null)
            return;
        DynamicMethod dynamicMethod = new DynamicMethod ("GetStackFrameHelper", typeof (object), new Type [0], typeof (StackTrace), true);
        ILGenerator generator = dynamicMethod.GetILGenerator ();
        generator.DeclareLocal (stackFrameHelperType);
        bool newDotNet = false;
        ConstructorInfo constructorInfo = stackFrameHelperType.GetConstructor (new Type [] {typeof (bool), typeof (Thread)});
        if (constructorInfo != null)
            generator.Emit (OpCodes.Ldc_I4_0);
        else {
            constructorInfo = stackFrameHelperType.GetConstructor (new Type [] {typeof (Thread)});
            if (constructorInfo == null)
                return;
            newDotNet = true;
        }
        generator.Emit (OpCodes.Ldnull);
        generator.Emit (OpCodes.Newobj, constructorInfo);
        generator.Emit (OpCodes.Stloc_0);
        generator.Emit (OpCodes.Ldloc_0);
        generator.Emit (OpCodes.Ldc_I4_0);
        if (newDotNet)
            generator.Emit (OpCodes.Ldc_I4_0);
        generator.Emit (OpCodes.Ldnull);
        generator.Emit (OpCodes.Call, getStackFramesInternal);
        generator.Emit (OpCodes.Ldloc_0);
        generator.Emit (OpCodes.Ret);
        _getStackFrameHelper = (DGetStackFrameHelper) dynamicMethod.CreateDelegate (typeof (DGetStackFrameHelper));
        _frameCount = stackFrameHelperType.GetField ("iFrameCount", BindingFlags.NonPublic | BindingFlags.Instance);
    }
    catch {
    }
}
----------------------------------------

 private static void OneTimeSetup () { 
    try { 
        Type stackFrameHelperType = typeof(object).Assembly.GetType("System.Diagnostics.StackFrameHelper");
        MethodInfo getStackFramesInternal = Type.GetType("System.Diagnostics.StackTrace, mscorlib").GetMethod("GetStackFramesInternal", BindingFlags.Static | BindingFlags.NonPublic);
        if (getStackFramesInternal == null)
            return;
        bool newDotNet = false;
        ConstructorInfo constructorInfo = stackFrameHelperType.GetConstructor(new Type [] {typeof (bool), typeof (Thread)});
        if (constructorInfo != null)
            newDotNet = true;
        else {
            constructorInfo = stackFrameHelperType.GetConstructor(new Type [] {typeof (Thread)});
            if (constructorInfo == null)
                return;
        }
        _getStackFrameHelper = (DGetStackFrameHelper) Delegate.CreateDelegate(typeof(DGetStackFrameHelper), getStackFramesInternal, true);
        _frameCount = stackFrameHelperType.GetField("iFrameCount", BindingFlags.NonPublic | BindingFlags.Instance);
    } 
    catch {
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
706
5
Gpt3D_Clone706_5.cs 1 36
Gpt3D_Clone706_5.cs 37 59
----------------------------------------

private static void OneTimeSetup () {
    try {
        Type stackFrameHelperType = typeof (object).Assembly.GetType ("System.Diagnostics.StackFrameHelper");
        MethodInfo getStackFramesInternal = Type.GetType ("System.Diagnostics.StackTrace, mscorlib").GetMethod ("GetStackFramesInternal", BindingFlags.Static | BindingFlags.NonPublic);
        if (getStackFramesInternal == null)
            return;
        DynamicMethod dynamicMethod = new DynamicMethod ("GetStackFrameHelper", typeof (object), new Type [0], typeof (StackTrace), true);
        ILGenerator generator = dynamicMethod.GetILGenerator ();
        generator.DeclareLocal (stackFrameHelperType);
        bool newDotNet = false;
        ConstructorInfo constructorInfo = stackFrameHelperType.GetConstructor (new Type [] {typeof (bool), typeof (Thread)});
        if (constructorInfo != null)
            generator.Emit (OpCodes.Ldc_I4_0);
        else {
            constructorInfo = stackFrameHelperType.GetConstructor (new Type [] {typeof (Thread)});
            if (constructorInfo == null)
                return;
            newDotNet = true;
        }
        generator.Emit (OpCodes.Ldnull);
        generator.Emit (OpCodes.Newobj, constructorInfo);
        generator.Emit (OpCodes.Stloc_0);
        generator.Emit (OpCodes.Ldloc_0);
        generator.Emit (OpCodes.Ldc_I4_0);
        if (newDotNet)
            generator.Emit (OpCodes.Ldc_I4_0);
        generator.Emit (OpCodes.Ldnull);
        generator.Emit (OpCodes.Call, getStackFramesInternal);
        generator.Emit (OpCodes.Ldloc_0);
        generator.Emit (OpCodes.Ret);
        _getStackFrameHelper = (DGetStackFrameHelper) dynamicMethod.CreateDelegate (typeof (DGetStackFrameHelper));
        _frameCount = stackFrameHelperType.GetField ("iFrameCount", BindingFlags.NonPublic | BindingFlags.Instance);
    }
    catch {
    }
}
----------------------------------------

 private static void OneTimeSetup()
{
    try
    {
        Type stackFrameHelperType = typeof(object).Assembly.GetType("System.Diagnostics.StackFrameHelper");
        MethodInfo getStackFramesInternal = Type.GetType("System.Diagnostics.StackTrace, mscorlib").GetMethod("GetStackFramesInternal", BindingFlags.Static | BindingFlags.NonPublic);
        if (getStackFramesInternal == null)
            return;
        var dynamicMethod = new DynamicMethod("GetStackFrameHelperForStackTrace", typeof(object), new[] { typeof(Thread) }, typeof(StackTrace), true);
        ILGenerator generator = dynamicMethod.GetILGenerator();
        generator.DeclareLocal(stackFrameHelperType);
 
        ConstructorInfo constructorInfo = stackFrameHelperType.GetConstructor(new[] { typeof(Thread) });
        if (constructorInfo == null)
            return;
        GenerateMethodBody(generator, constructorInfo, stackFrameHelperType, getStackFramesInternal);
        _getStackFrameHelper = (DGetStackFrameHelper)dynamicMethod.CreateDelegate(typeof(DGetStackFrameHelper));
        _frameCount = stackFrameHelperType.GetField("iFrameCount", BindingFlags.NonPublic | BindingFlags.Instance);
    }
    catch { }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
706
6
Gpt3D_Clone706_6.cs 1 36
Gpt3D_Clone706_6.cs 37 50
----------------------------------------

private static void OneTimeSetup () {
    try {
        Type stackFrameHelperType = typeof (object).Assembly.GetType ("System.Diagnostics.StackFrameHelper");
        MethodInfo getStackFramesInternal = Type.GetType ("System.Diagnostics.StackTrace, mscorlib").GetMethod ("GetStackFramesInternal", BindingFlags.Static | BindingFlags.NonPublic);
        if (getStackFramesInternal == null)
            return;
        DynamicMethod dynamicMethod = new DynamicMethod ("GetStackFrameHelper", typeof (object), new Type [0], typeof (StackTrace), true);
        ILGenerator generator = dynamicMethod.GetILGenerator ();
        generator.DeclareLocal (stackFrameHelperType);
        bool newDotNet = false;
        ConstructorInfo constructorInfo = stackFrameHelperType.GetConstructor (new Type [] {typeof (bool), typeof (Thread)});
        if (constructorInfo != null)
            generator.Emit (OpCodes.Ldc_I4_0);
        else {
            constructorInfo = stackFrameHelperType.GetConstructor (new Type [] {typeof (Thread)});
            if (constructorInfo == null)
                return;
            newDotNet = true;
        }
        generator.Emit (OpCodes.Ldnull);
        generator.Emit (OpCodes.Newobj, constructorInfo);
        generator.Emit (OpCodes.Stloc_0);
        generator.Emit (OpCodes.Ldloc_0);
        generator.Emit (OpCodes.Ldc_I4_0);
        if (newDotNet)
            generator.Emit (OpCodes.Ldc_I4_0);
        generator.Emit (OpCodes.Ldnull);
        generator.Emit (OpCodes.Call, getStackFramesInternal);
        generator.Emit (OpCodes.Ldloc_0);
        generator.Emit (OpCodes.Ret);
        _getStackFrameHelper = (DGetStackFrameHelper) dynamicMethod.CreateDelegate (typeof (DGetStackFrameHelper));
        _frameCount = stackFrameHelperType.GetField ("iFrameCount", BindingFlags.NonPublic | BindingFlags.Instance);
    }
    catch {
    }
}
----------------------------------------

private static void GenerateMethodBody(ILGenerator generator, ConstructorInfo constructorInfo, Type stackFrameHelperType, MethodInfo getStackFramesInternal)
{
    generator.Emit(OpCodes.Ldnull);
    generator.Emit(OpCodes.Newobj, constructorInfo);
    generator.Emit(OpCodes.Stloc_0);
    generator.Emit(OpCodes.Ldloc_0);
    generator.Emit(OpCodes.Ldc_I4_0);
    generator.Emit(OpCodes.Ldarg_0);
    generator.Emit(OpCodes.Call, getStackFramesInternal);
    generator.Emit(OpCodes.Ldloc_0);
    generator.Emit(OpCodes.Ret);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
706
7
Gpt3D_Clone706_7.cs 1 36
Gpt3D_Clone706_7.cs 37 51
----------------------------------------

private static void OneTimeSetup () {
    try {
        Type stackFrameHelperType = typeof (object).Assembly.GetType ("System.Diagnostics.StackFrameHelper");
        MethodInfo getStackFramesInternal = Type.GetType ("System.Diagnostics.StackTrace, mscorlib").GetMethod ("GetStackFramesInternal", BindingFlags.Static | BindingFlags.NonPublic);
        if (getStackFramesInternal == null)
            return;
        DynamicMethod dynamicMethod = new DynamicMethod ("GetStackFrameHelper", typeof (object), new Type [0], typeof (StackTrace), true);
        ILGenerator generator = dynamicMethod.GetILGenerator ();
        generator.DeclareLocal (stackFrameHelperType);
        bool newDotNet = false;
        ConstructorInfo constructorInfo = stackFrameHelperType.GetConstructor (new Type [] {typeof (bool), typeof (Thread)});
        if (constructorInfo != null)
            generator.Emit (OpCodes.Ldc_I4_0);
        else {
            constructorInfo = stackFrameHelperType.GetConstructor (new Type [] {typeof (Thread)});
            if (constructorInfo == null)
                return;
            newDotNet = true;
        }
        generator.Emit (OpCodes.Ldnull);
        generator.Emit (OpCodes.Newobj, constructorInfo);
        generator.Emit (OpCodes.Stloc_0);
        generator.Emit (OpCodes.Ldloc_0);
        generator.Emit (OpCodes.Ldc_I4_0);
        if (newDotNet)
            generator.Emit (OpCodes.Ldc_I4_0);
        generator.Emit (OpCodes.Ldnull);
        generator.Emit (OpCodes.Call, getStackFramesInternal);
        generator.Emit (OpCodes.Ldloc_0);
        generator.Emit (OpCodes.Ret);
        _getStackFrameHelper = (DGetStackFrameHelper) dynamicMethod.CreateDelegate (typeof (DGetStackFrameHelper));
        _frameCount = stackFrameHelperType.GetField ("iFrameCount", BindingFlags.NonPublic | BindingFlags.Instance);
    }
    catch {
    }
}
----------------------------------------

  private static void OneTimeSetup()
{
    try
    {
        Type stackFrameHelperType = typeof(object).Assembly.GetType("System.Diagnostics.StackFrameHelper");
        MethodInfo getStackFramesInternal = Type.GetType("System.Diagnostics.StackTrace, mscorlib").GetMethod("GetStackFramesInternal", BindingFlags.Static | BindingFlags.NonPublic);
        if (getStackFramesInternal == null)
            return;
        Delegate dGetStackFrameHelper = (DGetStackFrameHelper)Delegate.CreateDelegate(typeof(DGetStackFrameHelper), getStackFramesInternal, true);
        _frameCount = stackFrameHelperType.GetField("iFrameCount", BindingFlags.NonPublic | BindingFlags.Instance);
    }
    catch { }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
708
0
Gpt3D_Clone708_0.cs 1 22
Gpt3D_Clone708_0.cs 23 43
----------------------------------------

private static JToken NormalizeToken (JToken token) {
    JObject o;
    JArray array;
    if ((o = token as JObject) != null) {
        List < JProperty > orderedProperties = new List < JProperty > (o.Properties ());
        orderedProperties.Sort (delegate (JProperty x, JProperty y) {
            return x.Name.CompareTo (y.Name);
        });
        JObject normalized = new JObject ();
        foreach (JProperty property in orderedProperties) {
            normalized.Add (property.Name, NormalizeToken (property.Value));
        }
        return normalized;
    } else if ((array = token as JArray) != null) {
        for (int i = 0; i < array.Count; i ++) {
            array [i] = NormalizeToken (array [i]);
        }
        return array;
    } else {
        return token;
    }
}
----------------------------------------

 private static JToken NormalizeToken (JToken token) {
        JObject o;
        JArray array;
        if (token is JObject o) {
            JObject normalized = new JObject ();
            o.Properties().OrderBy(x => x.Name)
                .Aggregate(normalized, (obj, prop) 
                    => {
                        obj.Add (prop.Name, NormalizeToken (prop.Value));
                        return obj;
                    });
            return normalized;
        } else if (token is JArray array) {
            array.ReplaceAll(x => NormalizeToken(x));
            return array;
        } else {
            return token;
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
708
2
Gpt3D_Clone708_2.cs 1 22
Gpt3D_Clone708_2.cs 23 41
----------------------------------------

private static JToken NormalizeToken (JToken token) {
    JObject o;
    JArray array;
    if ((o = token as JObject) != null) {
        List < JProperty > orderedProperties = new List < JProperty > (o.Properties ());
        orderedProperties.Sort (delegate (JProperty x, JProperty y) {
            return x.Name.CompareTo (y.Name);
        });
        JObject normalized = new JObject ();
        foreach (JProperty property in orderedProperties) {
            normalized.Add (property.Name, NormalizeToken (property.Value));
        }
        return normalized;
    } else if ((array = token as JArray) != null) {
        for (int i = 0; i < array.Count; i ++) {
            array [i] = NormalizeToken (array [i]);
        }
        return array;
    } else {
        return token;
    }
}
----------------------------------------

 	private static JToken NormalizeToken (JToken token) {
        JObject o;
        JArray array;
        if (token is JObject o) {
            JObject normalized = new JObject ();
            o.Properties().OrderBy(x => x.Name)
                .ForEach(prop => {
                    normalized.Add (prop.Name, NormalizeToken (prop.Value));
                });
            return normalized;
        } else if (token is JArray array) {
            array.ReplaceAll(x => NormalizeToken(x));
            return array;
        } else {
            return token;
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
708
4
Gpt3D_Clone708_4.cs 1 22
Gpt3D_Clone708_4.cs 23 40
----------------------------------------

private static JToken NormalizeToken (JToken token) {
    JObject o;
    JArray array;
    if ((o = token as JObject) != null) {
        List < JProperty > orderedProperties = new List < JProperty > (o.Properties ());
        orderedProperties.Sort (delegate (JProperty x, JProperty y) {
            return x.Name.CompareTo (y.Name);
        });
        JObject normalized = new JObject ();
        foreach (JProperty property in orderedProperties) {
            normalized.Add (property.Name, NormalizeToken (property.Value));
        }
        return normalized;
    } else if ((array = token as JArray) != null) {
        for (int i = 0; i < array.Count; i ++) {
            array [i] = NormalizeToken (array [i]);
        }
        return array;
    } else {
        return token;
    }
}
----------------------------------------

 	private static JToken NormalizeToken (JToken token) {
        JObject o;
        JArray array;
        if (token is JObject o) {
            var normalized = new JObject();
            foreach (JProperty property in o.Properties().OrderBy(x => x.Name)) {
                normalized.Add (property.Name, NormalizeToken (property.Value));
            }
            return normalized;
        } else if (token is JArray array) {
            array.ReplaceAll(x => NormalizeToken(x));
            return array;
        } else {
            return token;
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
708
5
Gpt3D_Clone708_5.cs 1 22
Gpt3D_Clone708_5.cs 23 40
----------------------------------------

private static JToken NormalizeToken (JToken token) {
    JObject o;
    JArray array;
    if ((o = token as JObject) != null) {
        List < JProperty > orderedProperties = new List < JProperty > (o.Properties ());
        orderedProperties.Sort (delegate (JProperty x, JProperty y) {
            return x.Name.CompareTo (y.Name);
        });
        JObject normalized = new JObject ();
        foreach (JProperty property in orderedProperties) {
            normalized.Add (property.Name, NormalizeToken (property.Value));
        }
        return normalized;
    } else if ((array = token as JArray) != null) {
        for (int i = 0; i < array.Count; i ++) {
            array [i] = NormalizeToken (array [i]);
        }
        return array;
    } else {
        return token;
    }
}
----------------------------------------

 private static JToken NormalizeToken (JToken token) {
        JObject o;
        JArray array;
        if (token is JObject o) {
            JObject normalized = new JObject ();
            IEnumerable<JProperty> orderedProperties = o.Properties().OrderBy(x => x.Name);
            orderedProperties.ToList()
                .ForEach(prop => normalized.Add (prop.Name, NormalizeToken (prop.Value)));
            return normalized;
        } else if (token is JArray array) {
            array.ReplaceAll(x => NormalizeToken(x));
            return array;
        } else {
            return token;
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
708
6
Gpt3D_Clone708_6.cs 1 22
Gpt3D_Clone708_6.cs 23 40
----------------------------------------

private static JToken NormalizeToken (JToken token) {
    JObject o;
    JArray array;
    if ((o = token as JObject) != null) {
        List < JProperty > orderedProperties = new List < JProperty > (o.Properties ());
        orderedProperties.Sort (delegate (JProperty x, JProperty y) {
            return x.Name.CompareTo (y.Name);
        });
        JObject normalized = new JObject ();
        foreach (JProperty property in orderedProperties) {
            normalized.Add (property.Name, NormalizeToken (property.Value));
        }
        return normalized;
    } else if ((array = token as JArray) != null) {
        for (int i = 0; i < array.Count; i ++) {
            array [i] = NormalizeToken (array [i]);
        }
        return array;
    } else {
        return token;
    }
}
----------------------------------------

 	private static JToken NormalizeToken (JToken token) {
        JObject o;
        JArray array;
        if (token is JObject o) {
            JObject normalized = new JObject ();
            o.Properties().OrderBy(x => x.Name).ToList()
                .ForEach(prop => 
                    normalized.Add (prop.Name, NormalizeToken (property.Value)));
            return normalized;
        } else if (token is JArray array) {
            array.ReplaceAll(x => NormalizeToken(x));
            return array;
        } else {
            return token;
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
708
7
Gpt3D_Clone708_7.cs 1 22
Gpt3D_Clone708_7.cs 23 39
----------------------------------------

private static JToken NormalizeToken (JToken token) {
    JObject o;
    JArray array;
    if ((o = token as JObject) != null) {
        List < JProperty > orderedProperties = new List < JProperty > (o.Properties ());
        orderedProperties.Sort (delegate (JProperty x, JProperty y) {
            return x.Name.CompareTo (y.Name);
        });
        JObject normalized = new JObject ();
        foreach (JProperty property in orderedProperties) {
            normalized.Add (property.Name, NormalizeToken (property.Value));
        }
        return normalized;
    } else if ((array = token as JArray) != null) {
        for (int i = 0; i < array.Count; i ++) {
            array [i] = NormalizeToken (array [i]);
        }
        return array;
    } else {
        return token;
    }
}
----------------------------------------

 private static JToken NormalizeToken (JToken token) {
        JObject o;
        JArray array;
        if (token is JObject o) {
            JObject normalized = new JObject ();
            o.Properties().OrderBy(x => x.Name)
                .Each(prop => normalized.Add (prop.Name, NormalizeToken (prop.Value)));
            return normalized;
        } else if (token is JArray array) {
            array.ReplaceAll(x => NormalizeToken(x));
            return array;
        } else {
            return token;
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
708
8
Gpt3D_Clone708_8.cs 1 22
Gpt3D_Clone708_8.cs 23 39
----------------------------------------

private static JToken NormalizeToken (JToken token) {
    JObject o;
    JArray array;
    if ((o = token as JObject) != null) {
        List < JProperty > orderedProperties = new List < JProperty > (o.Properties ());
        orderedProperties.Sort (delegate (JProperty x, JProperty y) {
            return x.Name.CompareTo (y.Name);
        });
        JObject normalized = new JObject ();
        foreach (JProperty property in orderedProperties) {
            normalized.Add (property.Name, NormalizeToken (property.Value));
        }
        return normalized;
    } else if ((array = token as JArray) != null) {
        for (int i = 0; i < array.Count; i ++) {
            array [i] = NormalizeToken (array [i]);
        }
        return array;
    } else {
        return token;
    }
}
----------------------------------------

 	private static JToken NormalizeToken (JToken token) {
        JObject o;
        JArray array;
        if (token is JObject o) {
            JObject normalized = new JObject ();
            o.Properties().OrderBy(x => x.Name)
                .Iter(prop => normalized.Add (prop.Name, NormalizeToken (prop.Value)));
            return normalized;
        } else if (token is JArray array) {
            array.ReplaceAll(x => NormalizeToken(x));
            return array;
        } else {
            return token;
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
708
9
Gpt3D_Clone708_9.cs 1 22
Gpt3D_Clone708_9.cs 23 39
----------------------------------------

private static JToken NormalizeToken (JToken token) {
    JObject o;
    JArray array;
    if ((o = token as JObject) != null) {
        List < JProperty > orderedProperties = new List < JProperty > (o.Properties ());
        orderedProperties.Sort (delegate (JProperty x, JProperty y) {
            return x.Name.CompareTo (y.Name);
        });
        JObject normalized = new JObject ();
        foreach (JProperty property in orderedProperties) {
            normalized.Add (property.Name, NormalizeToken (property.Value));
        }
        return normalized;
    } else if ((array = token as JArray) != null) {
        for (int i = 0; i < array.Count; i ++) {
            array [i] = NormalizeToken (array [i]);
        }
        return array;
    } else {
        return token;
    }
}
----------------------------------------

 	private static JToken NormalizeToken (JToken token) {
        JObject o;
        JArray array;
        if (token is JObject o) {
            JObject normalized = new JObject ();
            o.Properties().OrderBy(x => x.Name).ToList()
                .ForEach(prop => normalized.Add (prop.Name, NormalizeToken (prop.Value)));
            return normalized;
        } else if (token is JArray array) {
            array.ReplaceAll(x => NormalizeToken(x));
            return array;
        } else {
            return token;
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
709
2
Gpt3D_Clone709_2.cs 1 9
Gpt3D_Clone709_2.cs 10 21
----------------------------------------

private static string DictionaryToString (IDictionary dict) {
    if (null == dict)
        throw new ArgumentNullException ("dict");
    var valueStrings = new List < string > ();
    foreach (DictionaryEntry item in dict) {
        valueStrings.Add (item.Key + ": " + item.Value);
    }
    return string.Join ("\n", valueStrings.ToArray ());
}
----------------------------------------

 private static string DictionaryToString (IDictionary dict) {
    if (null == dict)
        throw new ArgumentNullException ("dict");
    StringBuilder sb = new StringBuilder();
    foreach (var key in dict.Keys)
    {
        sb.AppendFormat("{0}: {1}\n", key, dict[key]);
    }
    return sb.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
709
4
Gpt3D_Clone709_4.cs 1 9
Gpt3D_Clone709_4.cs 10 24
----------------------------------------

private static string DictionaryToString (IDictionary dict) {
    if (null == dict)
        throw new ArgumentNullException ("dict");
    var valueStrings = new List < string > ();
    foreach (DictionaryEntry item in dict) {
        valueStrings.Add (item.Key + ": " + item.Value);
    }
    return string.Join ("\n", valueStrings.ToArray ());
}
----------------------------------------

 private static string DictionaryToString (IDictionary dict)
{
    if (dict == null)
    {
        throw new ArgumentNullException("dict");
    }
    string concatString = "";
    foreach (DictionaryEntry item in dict)
    {
        concatString +=  item.Key + ": " + item.Value + "\n";
    }
    return concatString;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
709
5
Gpt3D_Clone709_5.cs 1 9
Gpt3D_Clone709_5.cs 10 21
----------------------------------------

private static string DictionaryToString (IDictionary dict) {
    if (null == dict)
        throw new ArgumentNullException ("dict");
    var valueStrings = new List < string > ();
    foreach (DictionaryEntry item in dict) {
        valueStrings.Add (item.Key + ": " + item.Value);
    }
    return string.Join ("\n", valueStrings.ToArray ());
}
----------------------------------------

 private static string DictionaryToString (IDictionary dict) {
    if (null == dict)
        throw new ArgumentNullException ("dict");
    StringBuilder valueStrings = new StringBuilder();
    foreach (var key in dict.Keys)
    {
        valueStrings.Append(key).Append(": ").Append(dict[key]).AppendLine();
    }
    return valueStrings.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
709
6
Gpt3D_Clone709_6.cs 1 9
Gpt3D_Clone709_6.cs 10 17
----------------------------------------

private static string DictionaryToString (IDictionary dict) {
    if (null == dict)
        throw new ArgumentNullException ("dict");
    var valueStrings = new List < string > ();
    foreach (DictionaryEntry item in dict) {
        valueStrings.Add (item.Key + ": " + item.Value);
    }
    return string.Join ("\n", valueStrings.ToArray ());
}
----------------------------------------

 private static string DictionaryToString (IDictionary dict) {
    if (null == dict)
        throw new ArgumentNullException ("dict");
    var valueStrings = dict.Keys.Select(key => key + ": " + dict[key]).ToArray();
    return string.Join("\n", valueStrings);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
709
7
Gpt3D_Clone709_7.cs 1 9
Gpt3D_Clone709_7.cs 10 17
----------------------------------------

private static string DictionaryToString (IDictionary dict) {
    if (null == dict)
        throw new ArgumentNullException ("dict");
    var valueStrings = new List < string > ();
    foreach (DictionaryEntry item in dict) {
        valueStrings.Add (item.Key + ": " + item.Value);
    }
    return string.Join ("\n", valueStrings.ToArray ());
}
----------------------------------------

 private static string DictionaryToString (IDictionary dict) {
    if (null == dict)
        throw new ArgumentNullException ("dict");
    var valueStrings = dict.Keys.Cast<string>().Select(key => key + ": " + dict[key]).ToArray();
    return string.Join ("\n", valueStrings);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
709
8
Gpt3D_Clone709_8.cs 1 9
Gpt3D_Clone709_8.cs 10 17
----------------------------------------

private static string DictionaryToString (IDictionary dict) {
    if (null == dict)
        throw new ArgumentNullException ("dict");
    var valueStrings = new List < string > ();
    foreach (DictionaryEntry item in dict) {
        valueStrings.Add (item.Key + ": " + item.Value);
    }
    return string.Join ("\n", valueStrings.ToArray ());
}
----------------------------------------

 private static string DictionaryToString (IDictionary dict) {
    if (null == dict)
        throw new ArgumentNullException ("dict");
    var valueStrings = dict.Select(kvp => kvp.Key + ": " + kvp.Value);
    return string.Join("\n", valueStrings);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
709
9
Gpt3D_Clone709_9.cs 1 9
Gpt3D_Clone709_9.cs 10 17
----------------------------------------

private static string DictionaryToString (IDictionary dict) {
    if (null == dict)
        throw new ArgumentNullException ("dict");
    var valueStrings = new List < string > ();
    foreach (DictionaryEntry item in dict) {
        valueStrings.Add (item.Key + ": " + item.Value);
    }
    return string.Join ("\n", valueStrings.ToArray ());
}
----------------------------------------

 private static string DictionaryToString (IDictionary dict) {
    if (null == dict)
        throw new ArgumentNullException ("dict");
    var valueStrings = dict.Cast<DictionaryEntry>().Select(kvp => kvp.Key + ": " + kvp.Value).ToArray();    
    return string.Join ("\n", valueStrings);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
70
1
Gpt3D_Clone70_1.cs 1 13
Gpt3D_Clone70_1.cs 14 34
----------------------------------------

public void Set (int index) {
    int handlerCount;
    Action [] handlerList;
    lock (syncLock)
    {
        if (entries [index].IsSet)
            throw new InvalidOperationException ();
        entries [index].IsSet = true;
        handlerCount = entries [index].HandlerCount;
        handlerList = entries [index].HandlerList;
    } for (int i = 0; i < handlerCount; i ++)
        handlerList [i] ();
}
----------------------------------------

 public void Execute(int index)
{
    lock(syncLock)
    {
        if (entries[index].IsSet)
            throw new InvalidOperationException();
        entries[index].IsSet = true;
    }
    Action[] handlerList = entries[index].HandlerList;
    int handlerCount = entries[index].HandlerCount;
 
    for (int i = 0; i < handlerCount; i++)
    {
        Action handler = handlerList[i];
        handler();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
70
2
Gpt3D_Clone70_2.cs 1 13
Gpt3D_Clone70_2.cs 14 36
----------------------------------------

public void Set (int index) {
    int handlerCount;
    Action [] handlerList;
    lock (syncLock)
    {
        if (entries [index].IsSet)
            throw new InvalidOperationException ();
        entries [index].IsSet = true;
        handlerCount = entries [index].HandlerCount;
        handlerList = entries [index].HandlerList;
    } for (int i = 0; i < handlerCount; i ++)
        handlerList [i] ();
}
----------------------------------------

 public void SetIndex(int index)
{
    lock (syncLock)
    {
        if(entries[index].IsSet) 
        {
            throw new InvalidOperationException ();
        }
        else
        {
            entries[index].IsSet = true;
            entries[index].HandlerCount++;
        }
    }
    Action[] handlerList = entries[index].HandlerList;
    for (int i = 0; i < entries[index].HandlerCount; i++) 
    {
        handlerList[i]();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
70
3
Gpt3D_Clone70_3.cs 1 13
Gpt3D_Clone70_3.cs 14 31
----------------------------------------

public void Set (int index) {
    int handlerCount;
    Action [] handlerList;
    lock (syncLock)
    {
        if (entries [index].IsSet)
            throw new InvalidOperationException ();
        entries [index].IsSet = true;
        handlerCount = entries [index].HandlerCount;
        handlerList = entries [index].HandlerList;
    } for (int i = 0; i < handlerCount; i ++)
        handlerList [i] ();
}
----------------------------------------

 public void Enact (int index)
{
    lock (syncLock) 
    {
        if(entries[index].IsSet)
            throw new InvalidOperationException();
        entries[index].IsSet = true;
    }
    Action[] handlerList = entries[index].HandlerList;
    for (int i = 0; i < entries[index].HandlerCount; i++)
    {
        Action handler = handlerList[i];
        handler();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
70
7
Gpt3D_Clone70_7.cs 1 13
Gpt3D_Clone70_7.cs 14 29
----------------------------------------

public void Set (int index) {
    int handlerCount;
    Action [] handlerList;
    lock (syncLock)
    {
        if (entries [index].IsSet)
            throw new InvalidOperationException ();
        entries [index].IsSet = true;
        handlerCount = entries [index].HandlerCount;
        handlerList = entries [index].HandlerList;
    } for (int i = 0; i < handlerCount; i ++)
        handlerList [i] ();
}
----------------------------------------

 public void Setting(int index)
{
    lock (syncLock) 
    {
        if (entries [index].IsSet)
            throw new InvalidOperationException ();
        entries [index].IsSet = true;
    }
    for (int i = 0; i < entries [index].HandlerCount; i ++) {
        Action handler = entries[index].HandlerList[i];
        handler();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
70
8
Gpt3D_Clone70_8.cs 1 13
Gpt3D_Clone70_8.cs 14 27
----------------------------------------

public void Set (int index) {
    int handlerCount;
    Action [] handlerList;
    lock (syncLock)
    {
        if (entries [index].IsSet)
            throw new InvalidOperationException ();
        entries [index].IsSet = true;
        handlerCount = entries [index].HandlerCount;
        handlerList = entries [index].HandlerList;
    } for (int i = 0; i < handlerCount; i ++)
        handlerList [i] ();
}
----------------------------------------

 public void Initilize(int index)
{
    lock (syncLock)
    {
        if (entries[index].IsSet)
            throw new InvalidOperationException();
        entries[index].IsSet = true;
    }
    for (int handler = 0; handler < entries[index].HandlerCount; handler++)
        entries[index].HandlerList[handler]();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
70
9
Gpt3D_Clone70_9.cs 1 13
Gpt3D_Clone70_9.cs 14 29
----------------------------------------

public void Set (int index) {
    int handlerCount;
    Action [] handlerList;
    lock (syncLock)
    {
        if (entries [index].IsSet)
            throw new InvalidOperationException ();
        entries [index].IsSet = true;
        handlerCount = entries [index].HandlerCount;
        handlerList = entries [index].HandlerList;
    } for (int i = 0; i < handlerCount; i ++)
        handlerList [i] ();
}
----------------------------------------

 public void Change (int index)
{
    lock (syncLock)
    {
        if (entries[index].IsSet)
            throw new InvalidOperationException();
        entries[index].IsSet = true;
    }
    foreach (Action handler in entries[index].HandlerList)
    {
        handler();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
714
4
Gpt3D_Clone714_4.cs 1 11
Gpt3D_Clone714_4.cs 12 31
----------------------------------------

private int CountDivisorsOfNumber (int number) {
    int count = 0;
    int end = (int) Math.Sqrt (number);
    for (int i = 1; i < end; i ++) {
        if (number % i == 0)
            count += 2;
    }
    if (end * end == number)
        count ++;
    return count;
}
----------------------------------------

  private int CountDivisorsOfNumber (int number) {
    int count = 0;
    double sqRoot = Math.Sqrt (number); 
    if(sqRoot == (int) sqRoot)
    {
        count++;
    }
    for (int i = 1; i < sqRoot; i++) 
    {
        double quotient = (double) number / i;
        if(quotient == (int) quotient)
        {
            count+=2;
        }
    }
    return count;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
714
6
Gpt3D_Clone714_6.cs 1 11
Gpt3D_Clone714_6.cs 12 25
----------------------------------------

private int CountDivisorsOfNumber (int number) {
    int count = 0;
    int end = (int) Math.Sqrt (number);
    for (int i = 1; i < end; i ++) {
        if (number % i == 0)
            count += 2;
    }
    if (end * end == number)
        count ++;
    return count;
}
----------------------------------------

  private int CountDivisorsOfNumber (int number) {
    int count = 0;
    for (int i = 1; i * i <= number; i+=2) {
        if (number % i == 0) {
            count += 2;
        }
    }
    if (Math.sqrt(number) * Math.sqrt(number) == number) {
        count--;
    }
    return count;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
714
7
Gpt3D_Clone714_7.cs 1 11
Gpt3D_Clone714_7.cs 12 25
----------------------------------------

private int CountDivisorsOfNumber (int number) {
    int count = 0;
    int end = (int) Math.Sqrt (number);
    for (int i = 1; i < end; i ++) {
        if (number % i == 0)
            count += 2;
    }
    if (end * end == number)
        count ++;
    return count;
}
----------------------------------------

  private int CountDivisorsOfNumber (int number) {
    int count = 0;
    for (int i = 1; i * i <= number; i++) {
        if (number % i == 0) {
            count += 2;
        }
    }
    if (Math.sqrt(number) * Math.sqrt(number) == number) {
        count--;
    }
    return count;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
716
5
Gpt3D_Clone716_5.cs 1 20
Gpt3D_Clone716_5.cs 21 44
----------------------------------------

private static Control FindControlIterative (this Control control, string id) {
    Control ctl = control;
    LinkedList < Control > controls = new LinkedList < Control > ();
    while (ctl != null) {
        if (ctl.ID == id) {
            return ctl;
        }
        foreach (Control child in ctl.Controls) {
            if (child.ID == id) {
                return child;
            }
            if (child.HasControls ()) {
                controls.AddLast (child);
            }
        }
        ctl = controls.First.Value;
        controls.Remove (ctl);
    }
    return null;
}
----------------------------------------

 private static Control FindControlIterative(this Control control, string id) 
{
    Queue<Control> controls = new Queue<Control>();
    controls.Enqueue(control);
    while (controls.Count > 0)
    {
        Control ctl = controls.Dequeue();
        if (ctl.ID == id) 
            return ctl;
        foreach (Control child in ctl.Controls) 
        {
            if (child.ID == id) 
                return child;
            
            if (child.HasControls()) 
                controls.Enqueue(child);
        }
    } 
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
719
0
Gpt3D_Clone719_0.cs 1 9
Gpt3D_Clone719_0.cs 10 26
----------------------------------------

public int Compare (Level x, Level y) {
    if (object.ReferenceEquals (x, y))
        return 0;
    if (x == null)
        return 1;
    else if (y == null)
        return - 1;
    return x.LevelID.CompareTo (y.LevelID);
}
----------------------------------------

 public int Compare(Level x, Level y) 
{ 
    int compareResult = 0; 
  
    if (object.ReferenceEquals(x, y)) 
        compareResult = 0; 
    else if (x == null) 
        compareResult = 1; 
    else if (y == null) 
        compareResult = -1; 
    else 
        compareResult = x.LevelID.CompareTo(y.LevelID); 
  
    return compareResult; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
719
2
Gpt3D_Clone719_2.cs 1 9
Gpt3D_Clone719_2.cs 10 24
----------------------------------------

public int Compare (Level x, Level y) {
    if (object.ReferenceEquals (x, y))
        return 0;
    if (x == null)
        return 1;
    else if (y == null)
        return - 1;
    return x.LevelID.CompareTo (y.LevelID);
}
----------------------------------------

 public int Compare(Level x, Level y) 
{ 
    int result = 0; 
  
    if (x != null && y != null) 
        result = x.LevelID.CompareTo(y.LevelID); 
    else if (x != null && y == null) 
        result = -1; 
    else if (x == null && y != null) 
        result = 1; 
  
    return result; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
719
3
Gpt3D_Clone719_3.cs 1 9
Gpt3D_Clone719_3.cs 10 24
----------------------------------------

public int Compare (Level x, Level y) {
    if (object.ReferenceEquals (x, y))
        return 0;
    if (x == null)
        return 1;
    else if (y == null)
        return - 1;
    return x.LevelID.CompareTo (y.LevelID);
}
----------------------------------------

 public int Compare(Level x, Level y) 
{ 
    int compareResult; 
  
    if (object.ReferenceEquals(x, y)) 
        compareResult = 0; 
    else if (x == null || y == null) 
        compareResult = (x == null) ? 1 : -1; 
    else 
        compareResult = x.LevelID.CompareTo(y.LevelID); 
  
    return compareResult; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
719
6
Gpt3D_Clone719_6.cs 1 9
Gpt3D_Clone719_6.cs 10 22
----------------------------------------

public int Compare (Level x, Level y) {
    if (object.ReferenceEquals (x, y))
        return 0;
    if (x == null)
        return 1;
    else if (y == null)
        return - 1;
    return x.LevelID.CompareTo (y.LevelID);
}
----------------------------------------

 public int Compare(Level x, Level y) 
{ 
    if (object.ReferenceEquals(x, y)) 
        return 0; 
  
    if (x == null || y == null) 
        return x == null ? 1 : -1; 
      
    int compareResult = x.LevelID.CompareTo(y.LevelID); 
    return compareResult; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
719
7
Gpt3D_Clone719_7.cs 1 9
Gpt3D_Clone719_7.cs 10 21
----------------------------------------

public int Compare (Level x, Level y) {
    if (object.ReferenceEquals (x, y))
        return 0;
    if (x == null)
        return 1;
    else if (y == null)
        return - 1;
    return x.LevelID.CompareTo (y.LevelID);
}
----------------------------------------

 public int Compare(Level x, Level y) 
{ 
    if (object.ReferenceEquals(x, y)) 
        return 0; 
  
    if (x == null || y == null) 
        return (x == null) ? 1 : -1; 
  
    return x.LevelID.CompareTo(y.LevelID); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
719
8
Gpt3D_Clone719_8.cs 1 9
Gpt3D_Clone719_8.cs 10 21
----------------------------------------

public int Compare (Level x, Level y) {
    if (object.ReferenceEquals (x, y))
        return 0;
    if (x == null)
        return 1;
    else if (y == null)
        return - 1;
    return x.LevelID.CompareTo (y.LevelID);
}
----------------------------------------

 public int Compare(Level x, Level y) 
{  
    if (object.ReferenceEquals(x, y)) 
        return 0; 
  
    if (x == null || y == null) 
        return x == null ? 1 : -1; 
  
    return x.LevelID.CompareTo(y.LevelID); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
719
9
Gpt3D_Clone719_9.cs 1 9
Gpt3D_Clone719_9.cs 10 19
----------------------------------------

public int Compare (Level x, Level y) {
    if (object.ReferenceEquals (x, y))
        return 0;
    if (x == null)
        return 1;
    else if (y == null)
        return - 1;
    return x.LevelID.CompareTo (y.LevelID);
}
----------------------------------------

 public int Compare(Level x, Level y) 
{ 
    int compareResult = 0; 
      
    compareResult = object.ReferenceEquals(x, y) ? 0 : (x == null ? 1 : (y == null ? -1 : x.LevelID.CompareTo(y.LevelID))); 
  
    return compareResult; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
720
0
Gpt3D_Clone720_0.cs 1 20
Gpt3D_Clone720_0.cs 21 69
----------------------------------------

private static IEnumerable < Enum > GetFlags (Enum value, Enum [] values) {
    ulong bits = Convert.ToUInt64 (value);
    List < Enum > results = new List < Enum > ();
    for (int i = values.Length - 1; i >= 0; i --) {
        ulong mask = Convert.ToUInt64 (values [i]);
        if (i == 0 && mask == 0L)
            break;
        if ((bits & mask) == mask) {
            results.Add (values [i]);
            bits -= mask;
        }
    }
    if (bits != 0L)
        return Enumerable.Empty < Enum > ();
    if (Convert.ToUInt64 (value) != 0L)
        return results.Reverse < Enum > ();
    if (bits == Convert.ToUInt64 (value) && values.Length > 0 && Convert.ToUInt64 (values [0]) == 0L)
        return values.Take (1);
    return Enumerable.Empty < Enum > ();
}
----------------------------------------

  private static IEnumerable<Enum> GetFlags(Enum value, Enum[] values)
{
    ulong bits = Convert.ToUInt64(value);
    List<Enum> results = new List<Enum>();
    while (bits != 0 && values.Length > 0)
    {
        uint highestValue = 0;
        int index = 0;
        int count = 0;
        // Find the highest value that is less than or equal to "bits"
        foreach (var item in values)
        {
            uint val = Convert.ToUInt32(item);
            if (val <= bits && val > highestValue)
            {
                highestValue = val;
                index = count;
            }
            count++;
        }
        // Watch for edge case where highest value is 0 and the array
        // only has 1 item
        if (values.Length == 1 && values[0] == 0)
            highestValue = 0;
        // Add highest value to results and subtract from "bits"
        if (highestValue > 0)
        {
            results.Add(values[index]);
            bits -= highestValue;
        }
    }
    if (bits != 0)
    {
        return Enumerable.Empty<Enum>();
    }
    if (Convert.ToUInt64(value) == 0 && values.Length > 0 && Convert.ToUInt64(values[0]) == 0)
    {
        return values.Take(1);
    }
    return results;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
720
1
Gpt3D_Clone720_1.cs 1 20
Gpt3D_Clone720_1.cs 21 57
----------------------------------------

private static IEnumerable < Enum > GetFlags (Enum value, Enum [] values) {
    ulong bits = Convert.ToUInt64 (value);
    List < Enum > results = new List < Enum > ();
    for (int i = values.Length - 1; i >= 0; i --) {
        ulong mask = Convert.ToUInt64 (values [i]);
        if (i == 0 && mask == 0L)
            break;
        if ((bits & mask) == mask) {
            results.Add (values [i]);
            bits -= mask;
        }
    }
    if (bits != 0L)
        return Enumerable.Empty < Enum > ();
    if (Convert.ToUInt64 (value) != 0L)
        return results.Reverse < Enum > ();
    if (bits == Convert.ToUInt64 (value) && values.Length > 0 && Convert.ToUInt64 (values [0]) == 0L)
        return values.Take (1);
    return Enumerable.Empty < Enum > ();
}
----------------------------------------

 private static IEnumerable<Enum> GetFlags(Enum value, Enum[] values)
{
    ulong bits = Convert.ToUInt64(value);
    List<Enum> results = new List<Enum>();
    while (bits != 0)
    {
        bool resultAdded = false;
        for (int i = 0; i < values.Length; i++)
        {
            if (bits >= Convert.ToUInt64(values[i]))
            {
                bits -= Convert.ToUInt64(values[i]);
                results.Add(values[i]);
                resultAdded = true;
                break;
            }
        }
        // No valid result found, exiting early
        if (!resultAdded)
            break;
    }
    if (bits != 0)
    {
        return Enumerable.Empty<Enum>();
    }
    if (Convert.ToUInt64(value) == 0 && values.Length > 0 && Convert.ToUInt64(values[0]) == 0)
    {
        return values.Take(1);
    }
    return results;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
720
2
Gpt3D_Clone720_2.cs 1 20
Gpt3D_Clone720_2.cs 21 51
----------------------------------------

private static IEnumerable < Enum > GetFlags (Enum value, Enum [] values) {
    ulong bits = Convert.ToUInt64 (value);
    List < Enum > results = new List < Enum > ();
    for (int i = values.Length - 1; i >= 0; i --) {
        ulong mask = Convert.ToUInt64 (values [i]);
        if (i == 0 && mask == 0L)
            break;
        if ((bits & mask) == mask) {
            results.Add (values [i]);
            bits -= mask;
        }
    }
    if (bits != 0L)
        return Enumerable.Empty < Enum > ();
    if (Convert.ToUInt64 (value) != 0L)
        return results.Reverse < Enum > ();
    if (bits == Convert.ToUInt64 (value) && values.Length > 0 && Convert.ToUInt64 (values [0]) == 0L)
        return values.Take (1);
    return Enumerable.Empty < Enum > ();
}
----------------------------------------

 private static IEnumerable<Enum> GetFlags(Enum value, Enum[] values)
{
    ulong bits = Convert.ToUInt64(value);
    List<Enum> results = new List<Enum>();
    ulong bitmask = 1;
    while (bits != 0)
    {
        if (bitmask > bits) break;
        if (bits & bitmask)
        {
            bits -= bitmask;
            results.Add(values[(int) (bitmask - 1)]);
        }
        bitmask <<= 1;
    }
    if (bits != 0)
    {
        return Enumerable.Empty<Enum>();
    }
    if (Convert.ToUInt64(value) == 0 && values.Length > 0 && Convert.ToUInt64(values[0]) == 0)
    {
        return values.Take(1);
    }
    return results;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
720
3
Gpt3D_Clone720_3.cs 1 20
Gpt3D_Clone720_3.cs 21 50
----------------------------------------

private static IEnumerable < Enum > GetFlags (Enum value, Enum [] values) {
    ulong bits = Convert.ToUInt64 (value);
    List < Enum > results = new List < Enum > ();
    for (int i = values.Length - 1; i >= 0; i --) {
        ulong mask = Convert.ToUInt64 (values [i]);
        if (i == 0 && mask == 0L)
            break;
        if ((bits & mask) == mask) {
            results.Add (values [i]);
            bits -= mask;
        }
    }
    if (bits != 0L)
        return Enumerable.Empty < Enum > ();
    if (Convert.ToUInt64 (value) != 0L)
        return results.Reverse < Enum > ();
    if (bits == Convert.ToUInt64 (value) && values.Length > 0 && Convert.ToUInt64 (values [0]) == 0L)
        return values.Take (1);
    return Enumerable.Empty < Enum > ();
}
----------------------------------------

 private static IEnumerable<Enum> GetFlags(Enum value, Enum[] values)
{
    ulong bits = Convert.ToUInt64(value);
    List<Enum> results = new List<Enum>();
    ulong bitmask = 1;
    for (int i = 0; bits > 0 && i < 64; i++, bitmask <<= 1)
    {
        if (bitmask > bits) break;
        if (bits & bitmask)
        {
            bits -= bitmask;
            results.Add(values[i]);
        }
    }
    if (bits != 0)
    {
        return Enumerable.Empty<Enum>();
    }
    if (Convert.ToUInt64(value) == 0 && values.Length > 0 && Convert.ToUInt64(values[0]) == 0)
    {
        return values.Take(1);
    }
    return results;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
720
4
Gpt3D_Clone720_4.cs 1 20
Gpt3D_Clone720_4.cs 21 50
----------------------------------------

private static IEnumerable < Enum > GetFlags (Enum value, Enum [] values) {
    ulong bits = Convert.ToUInt64 (value);
    List < Enum > results = new List < Enum > ();
    for (int i = values.Length - 1; i >= 0; i --) {
        ulong mask = Convert.ToUInt64 (values [i]);
        if (i == 0 && mask == 0L)
            break;
        if ((bits & mask) == mask) {
            results.Add (values [i]);
            bits -= mask;
        }
    }
    if (bits != 0L)
        return Enumerable.Empty < Enum > ();
    if (Convert.ToUInt64 (value) != 0L)
        return results.Reverse < Enum > ();
    if (bits == Convert.ToUInt64 (value) && values.Length > 0 && Convert.ToUInt64 (values [0]) == 0L)
        return values.Take (1);
    return Enumerable.Empty < Enum > ();
}
----------------------------------------

 private static IEnumerable<Enum> GetFlags(Enum value, Enum[] values)
{
    ulong bits = Convert.ToUInt64(value);
    List<Enum> results = new List<Enum>();
    int count = 0;
    while (bits != 0 && values.Length > count)
    {
        ulong bit = bits & (ulong)values[count];
        if ( bit != 0)
        {
            bits &= ~bit;
            results.Add(values[count]);
        }
        count++;
    }
    if (bits != 0)
    {
        return Enumerable.Empty<Enum>();
    }
    if (Convert.ToUInt64(value) == 0 && values.Length > 0 && Convert.ToUInt64(values[0]) == 0)
    {
        return values.Take(1);
    }
    return results;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
720
5
Gpt3D_Clone720_5.cs 1 20
Gpt3D_Clone720_5.cs 21 49
----------------------------------------

private static IEnumerable < Enum > GetFlags (Enum value, Enum [] values) {
    ulong bits = Convert.ToUInt64 (value);
    List < Enum > results = new List < Enum > ();
    for (int i = values.Length - 1; i >= 0; i --) {
        ulong mask = Convert.ToUInt64 (values [i]);
        if (i == 0 && mask == 0L)
            break;
        if ((bits & mask) == mask) {
            results.Add (values [i]);
            bits -= mask;
        }
    }
    if (bits != 0L)
        return Enumerable.Empty < Enum > ();
    if (Convert.ToUInt64 (value) != 0L)
        return results.Reverse < Enum > ();
    if (bits == Convert.ToUInt64 (value) && values.Length > 0 && Convert.ToUInt64 (values [0]) == 0L)
        return values.Take (1);
    return Enumerable.Empty < Enum > ();
}
----------------------------------------

  private static IEnumerable<Enum> GetFlags(Enum value, Enum[] values)
{
    ulong bits = Convert.ToUInt64(value);
    List<Enum> results = new List<Enum>();
    ulong mask = 1;
    for (int i = 0; i < 64 && bits != 0; i++)
    {
        if ((bits & mask) != 0)
        {
            results.Add(values[i]);
            bits &= ~mask;
        }
        mask <<= 1;
    }
    if (bits != 0)
    {
        return Enumerable.Empty<Enum>();
    }
    if (Convert.ToUInt64(value) == 0 && values.Length > 0 && Convert.ToUInt64(values[0]) == 0)
    {
        return values.Take(1);
    }
    return results;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
720
6
Gpt3D_Clone720_6.cs 1 20
Gpt3D_Clone720_6.cs 21 49
----------------------------------------

private static IEnumerable < Enum > GetFlags (Enum value, Enum [] values) {
    ulong bits = Convert.ToUInt64 (value);
    List < Enum > results = new List < Enum > ();
    for (int i = values.Length - 1; i >= 0; i --) {
        ulong mask = Convert.ToUInt64 (values [i]);
        if (i == 0 && mask == 0L)
            break;
        if ((bits & mask) == mask) {
            results.Add (values [i]);
            bits -= mask;
        }
    }
    if (bits != 0L)
        return Enumerable.Empty < Enum > ();
    if (Convert.ToUInt64 (value) != 0L)
        return results.Reverse < Enum > ();
    if (bits == Convert.ToUInt64 (value) && values.Length > 0 && Convert.ToUInt64 (values [0]) == 0L)
        return values.Take (1);
    return Enumerable.Empty < Enum > ();
}
----------------------------------------

  private static IEnumerable<Enum> GetFlags(Enum value, Enum[] values)
{
    ulong bits = Convert.ToUInt64(value);
    List<Enum> results = new List<Enum>();
    int count = 0;
    while (bits != 0 && values.Length > count)
    {
        if (bits >= Convert.ToUInt64(values[count]))
        {
            bits = bits - Convert.ToUInt64(values[count]);
            results.Add(values[count]);
        }
        count++;
    }
    if (bits != 0)
    {
        return Enumerable.Empty<Enum>();
    }
    if (Convert.ToUInt64(value) == 0 && values.Length > 0 && Convert.ToUInt64(values[0]) == 0)
    {
        return values.Take(1);
    }
    return results;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
720
7
Gpt3D_Clone720_7.cs 1 20
Gpt3D_Clone720_7.cs 21 49
----------------------------------------

private static IEnumerable < Enum > GetFlags (Enum value, Enum [] values) {
    ulong bits = Convert.ToUInt64 (value);
    List < Enum > results = new List < Enum > ();
    for (int i = values.Length - 1; i >= 0; i --) {
        ulong mask = Convert.ToUInt64 (values [i]);
        if (i == 0 && mask == 0L)
            break;
        if ((bits & mask) == mask) {
            results.Add (values [i]);
            bits -= mask;
        }
    }
    if (bits != 0L)
        return Enumerable.Empty < Enum > ();
    if (Convert.ToUInt64 (value) != 0L)
        return results.Reverse < Enum > ();
    if (bits == Convert.ToUInt64 (value) && values.Length > 0 && Convert.ToUInt64 (values [0]) == 0L)
        return values.Take (1);
    return Enumerable.Empty < Enum > ();
}
----------------------------------------

 private static IEnumerable<Enum> GetFlags(Enum value, Enum[] values)
{
    ulong bits = Convert.ToUInt64(value);
    List<Enum> results = new List<Enum>();
    foreach (Enum variable in values)
    {
        ulong testVal = Convert.ToUInt64(variable);
        if (bits >= testVal)
        {
            bits -= testVal;
            results.Add(variable);
        }
    }
    if (bits != 0)
    {
        return Enumerable.Empty<Enum>();
    }
    if (Convert.ToUInt64(value) == 0 && values.Length > 0 && Convert.ToUInt64(values[0]) == 0)
    {
        return values.Take(1);
    }
    return results;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
720
8
Gpt3D_Clone720_8.cs 1 20
Gpt3D_Clone720_8.cs 21 49
----------------------------------------

private static IEnumerable < Enum > GetFlags (Enum value, Enum [] values) {
    ulong bits = Convert.ToUInt64 (value);
    List < Enum > results = new List < Enum > ();
    for (int i = values.Length - 1; i >= 0; i --) {
        ulong mask = Convert.ToUInt64 (values [i]);
        if (i == 0 && mask == 0L)
            break;
        if ((bits & mask) == mask) {
            results.Add (values [i]);
            bits -= mask;
        }
    }
    if (bits != 0L)
        return Enumerable.Empty < Enum > ();
    if (Convert.ToUInt64 (value) != 0L)
        return results.Reverse < Enum > ();
    if (bits == Convert.ToUInt64 (value) && values.Length > 0 && Convert.ToUInt64 (values [0]) == 0L)
        return values.Take (1);
    return Enumerable.Empty < Enum > ();
}
----------------------------------------

  private static IEnumerable<Enum> GetFlags(Enum value, Enum[] values)
{
    ulong bits = Convert.ToUInt64(value);
    List<Enum> results = new List<Enum>();
    for (int i = 0; i < values.Length; i++)
    {
        ulong testVal = Convert.ToUInt64(values[i]);
        if (bits >= testVal)
        {
            bits -= testVal;
            results.Add(values[i]);
        }
    }
    if (bits != 0)
    {
        return Enumerable.Empty<Enum>();
    }
    if (Convert.ToUInt64(value) == 0 && values.Length > 0 && Convert.ToUInt64(values[0]) == 0)
    {
        return values.Take(1);
    }
    return results;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
720
9
Gpt3D_Clone720_9.cs 1 20
Gpt3D_Clone720_9.cs 21 50
----------------------------------------

private static IEnumerable < Enum > GetFlags (Enum value, Enum [] values) {
    ulong bits = Convert.ToUInt64 (value);
    List < Enum > results = new List < Enum > ();
    for (int i = values.Length - 1; i >= 0; i --) {
        ulong mask = Convert.ToUInt64 (values [i]);
        if (i == 0 && mask == 0L)
            break;
        if ((bits & mask) == mask) {
            results.Add (values [i]);
            bits -= mask;
        }
    }
    if (bits != 0L)
        return Enumerable.Empty < Enum > ();
    if (Convert.ToUInt64 (value) != 0L)
        return results.Reverse < Enum > ();
    if (bits == Convert.ToUInt64 (value) && values.Length > 0 && Convert.ToUInt64 (values [0]) == 0L)
        return values.Take (1);
    return Enumerable.Empty < Enum > ();
}
----------------------------------------

  private static IEnumerable<Enum> GetFlags(Enum value, Enum[] values)
{
    int bits = Convert.ToInt32(value);
    List<Enum> results = new List<Enum>();
    for(int i = 0; i < values.Length && bits != 0; i++)
    {
        if((bits & (int)values[i]) != 0)
        {
            results.Add(values[i]);
            bits &= ~((int)values[i]);
        }
    }
    if (bits != 0)
    {
        return Enumerable.Empty<Enum>();
    }
    if (Convert.ToInt32(value) == 0 && values.Length > 0 && Convert.ToInt32(values[0]) == 0)
    {
        return values.Take(1);
    }
    return results;
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
721
0
Gpt3D_Clone721_0.cs 1 12
Gpt3D_Clone721_0.cs 13 53
----------------------------------------

private static int ParseNybble (char c) {
    if (c >= '0' && c <= '9') {
        return c - '0';
    }
    if (c >= 'A' && c <= 'F') {
        return c - 'A' + 10;
    }
    if (c >= 'a' && c <= 'f') {
        return c - 'A' + 10;
    }
    throw new ArgumentOutOfRangeException ("Invalid hex digit: " + c);
}
----------------------------------------

  private static int ParseNybble (char c) {
    switch (c)
    {
        case '0':
            return 0;
        case '1':
            return 1;
        case '2':
            return 2;
        case '3':
            return 3;
        case '4':
            return 4;
        case '5':
            return 5;
        case '6':
            return 6;
        case '7':
            return 7;
        case '8':
            return 8;
        case '9':
            return 9;
        case 'A': case 'a':
            return 10;
        case 'B': case 'b':
            return 11;
        case 'C': case 'c':
            return 12;
        case 'D': case 'd':
            return 13;
        case 'E': case 'e':
            return 14;
        case 'F': case 'f':
            return 15;
        default:
            throw new ArgumentOutOfRangeException ("Invalid hex digit: " + c);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
721
3
Gpt3D_Clone721_3.cs 1 12
Gpt3D_Clone721_3.cs 13 38
----------------------------------------

private static int ParseNybble (char c) {
    if (c >= '0' && c <= '9') {
        return c - '0';
    }
    if (c >= 'A' && c <= 'F') {
        return c - 'A' + 10;
    }
    if (c >= 'a' && c <= 'f') {
        return c - 'A' + 10;
    }
    throw new ArgumentOutOfRangeException ("Invalid hex digit: " + c);
}
----------------------------------------

 private static int ParseNybble(char c)
    {
        if (char.IsDigit(c))
        {
            return c - '0';
        }
        else if (char.IsLetter(c))
        {
            return (int)(char.ToUpper(c) - 'A') + 10;
        }
        else
        {
            throw new ArgumentOutOfRangeException ("Invalid hex digit: " + c);
        }
    }
 private static int ParseNybble (char c) {
    if (c < 'A') {
        return c - '0';
    }
    else {
        return (c | 0x20) - 'a' + 10;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
721
4
Gpt3D_Clone721_4.cs 1 12
Gpt3D_Clone721_4.cs 13 23
----------------------------------------

private static int ParseNybble (char c) {
    if (c >= '0' && c <= '9') {
        return c - '0';
    }
    if (c >= 'A' && c <= 'F') {
        return c - 'A' + 10;
    }
    if (c >= 'a' && c <= 'f') {
        return c - 'A' + 10;
    }
    throw new ArgumentOutOfRangeException ("Invalid hex digit: " + c);
}
----------------------------------------

 private static int ParseNybble (char c) {
    string validChars = "0123456789abcdefABCDEF";
    int index = validChars.IndexOf (c);
    if (index < 0) {
        throw new ArgumentOutOfRangeException ("Invalid hex digit: " + c);
    }
    return index;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
721
5
Gpt3D_Clone721_5.cs 1 12
Gpt3D_Clone721_5.cs 13 22
----------------------------------------

private static int ParseNybble (char c) {
    if (c >= '0' && c <= '9') {
        return c - '0';
    }
    if (c >= 'A' && c <= 'F') {
        return c - 'A' + 10;
    }
    if (c >= 'a' && c <= 'f') {
        return c - 'A' + 10;
    }
    throw new ArgumentOutOfRangeException ("Invalid hex digit: " + c);
}
----------------------------------------

 private static int ParseNybble (char c) {
    string nybbleString = c.ToString ().ToUpperInvariant ();
    int value;
    if (!int.TryParse (nybbleString, NumberStyles.HexNumber, CultureInfo.InvariantCulture, out value)) {
        throw new ArgumentOutOfRangeException ("Invalid hex digit: " + c);
    }
    return value;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
721
6
Gpt3D_Clone721_6.cs 1 12
Gpt3D_Clone721_6.cs 13 23
----------------------------------------

private static int ParseNybble (char c) {
    if (c >= '0' && c <= '9') {
        return c - '0';
    }
    if (c >= 'A' && c <= 'F') {
        return c - 'A' + 10;
    }
    if (c >= 'a' && c <= 'f') {
        return c - 'A' + 10;
    }
    throw new ArgumentOutOfRangeException ("Invalid hex digit: " + c);
}
----------------------------------------

 private static int ParseNybble (char c) {
    int value;
    if (int.TryParse (c.ToString (), NumberStyles.HexNumber, CultureInfo.InvariantCulture, out value)) {
        return value;
    }
    else {
        throw new ArgumentOutOfRangeException ("Invalid hex digit: " + c);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
721
7
Gpt3D_Clone721_7.cs 1 12
Gpt3D_Clone721_7.cs 13 21
----------------------------------------

private static int ParseNybble (char c) {
    if (c >= '0' && c <= '9') {
        return c - '0';
    }
    if (c >= 'A' && c <= 'F') {
        return c - 'A' + 10;
    }
    if (c >= 'a' && c <= 'f') {
        return c - 'A' + 10;
    }
    throw new ArgumentOutOfRangeException ("Invalid hex digit: " + c);
}
----------------------------------------

  private static int ParseNybble (char c) {
    int value;
    if (!int.TryParse (c.ToString (), NumberStyles.HexNumber, CultureInfo.InvariantCulture, out value)) {
        throw new ArgumentOutOfRangeException ("Invalid hex digit: " + c);
    }
    return value;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
721
8
Gpt3D_Clone721_8.cs 1 12
Gpt3D_Clone721_8.cs 13 38
----------------------------------------

private static int ParseNybble (char c) {
    if (c >= '0' && c <= '9') {
        return c - '0';
    }
    if (c >= 'A' && c <= 'F') {
        return c - 'A' + 10;
    }
    if (c >= 'a' && c <= 'f') {
        return c - 'A' + 10;
    }
    throw new ArgumentOutOfRangeException ("Invalid hex digit: " + c);
}
----------------------------------------

 private static int ParseNybble(char c)
    {
        if (char.IsDigit(c))
        {
            return c - '0';
        }
        else if (char.IsLetter(c))
        {
            return (int)(char.ToUpper(c) - 'A') + 10;
        }
        else
        {
            throw new ArgumentOutOfRangeException ("Invalid hex digit: " + c);
        }
    }
 private static int ParseNybble (char c) {
    if (c < 'A') {
        return c - '0';
    }
    else {
        return (c | 0x20) - 'a' + 10;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
721
9
Gpt3D_Clone721_9.cs 1 12
Gpt3D_Clone721_9.cs 13 17
----------------------------------------

private static int ParseNybble (char c) {
    if (c >= '0' && c <= '9') {
        return c - '0';
    }
    if (c >= 'A' && c <= 'F') {
        return c - 'A' + 10;
    }
    if (c >= 'a' && c <= 'f') {
        return c - 'A' + 10;
    }
    throw new ArgumentOutOfRangeException ("Invalid hex digit: " + c);
}
----------------------------------------

 private static int ParseNybble (char c) {
    return Convert.ToInt32 (c.ToString(), 16);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
723
0
Gpt3D_Clone723_0.cs 1 23
Gpt3D_Clone723_0.cs 24 53
----------------------------------------

public static bool IsInPolygon (Point [] poly, Point p) {
    Point p1, p2;
    bool inside = false;
    if (poly.Length < 3) {
        return inside;
    }
    var oldPoint = new Point (poly [poly.Length - 1].X, poly [poly.Length - 1].Y);
    for (int i = 0; i < poly.Length; i ++) {
        var newPoint = new Point (poly [i].X, poly [i].Y);
        if (newPoint.X > oldPoint.X) {
            p1 = oldPoint;
            p2 = newPoint;
        } else {
            p1 = newPoint;
            p2 = oldPoint;
        }
        if ((newPoint.X < p.X) == (p.X <= oldPoint.X) && (p.Y - (long) p1.Y) * (p2.X - p1.X) < (p2.Y - (long) p1.Y) * (p.X - p1.X)) {
            inside = ! inside;
        }
        oldPoint = newPoint;
    }
    return inside;
}
----------------------------------------

 public static bool IsInPolygon (Point [] poly, Point p) {
    float xNew, yNew;
    bool inside = false;
    xNew = p.X;
    yNew = p.Y;
    int side_count = 0;
    int i, j = poly.Length-1;
    for (i = 0; i < poly.Length; i++)
    {
        if (poly[i].Y < yNew && poly[j].Y >= yNew || poly[j].Y < yNew && poly[i].Y >= yNew)
        {
            if (poly[i].X + (yNew-poly[i].Y)/(poly[j].Y-poly[i].Y)*(poly[j].X-poly[i].X) < xNew)
            {
                side_count++;
            }
        }
        j = i; 
    }
    if (side_count % 2 != 0)
    {
        inside = true;
    }
    return inside;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
723
1
Gpt3D_Clone723_1.cs 1 23
Gpt3D_Clone723_1.cs 24 45
----------------------------------------

public static bool IsInPolygon (Point [] poly, Point p) {
    Point p1, p2;
    bool inside = false;
    if (poly.Length < 3) {
        return inside;
    }
    var oldPoint = new Point (poly [poly.Length - 1].X, poly [poly.Length - 1].Y);
    for (int i = 0; i < poly.Length; i ++) {
        var newPoint = new Point (poly [i].X, poly [i].Y);
        if (newPoint.X > oldPoint.X) {
            p1 = oldPoint;
            p2 = newPoint;
        } else {
            p1 = newPoint;
            p2 = oldPoint;
        }
        if ((newPoint.X < p.X) == (p.X <= oldPoint.X) && (p.Y - (long) p1.Y) * (p2.X - p1.X) < (p2.Y - (long) p1.Y) * (p.X - p1.X)) {
            inside = ! inside;
        }
        oldPoint = newPoint;
    }
    return inside;
}
----------------------------------------

 public static bool IsInPolygon (Point [] poly, Point p) {
    bool inside = false;
    if (poly.Length < 3) {
        return inside;
    }
    double previousX = poly[poly.Length - 1].X; 
    double previousY = poly[poly.Length - 1].Y; 
    for (int i = 0; i < poly.Length; i ++) {
        double currentX = poly[i].X;
        double currentY = poly[i].Y;
        if (currentY > p.Y != previousY > p.Y && 
            p.X < (previousX - currentX) * (p.Y - currentY) / (previousY - currentY) + currentX) 
        {
            inside = ! inside;
        }
        previousX = currentX; 
        previousY = currentY; 
    }
    return inside;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
723
2
Gpt3D_Clone723_2.cs 1 23
Gpt3D_Clone723_2.cs 24 49
----------------------------------------

public static bool IsInPolygon (Point [] poly, Point p) {
    Point p1, p2;
    bool inside = false;
    if (poly.Length < 3) {
        return inside;
    }
    var oldPoint = new Point (poly [poly.Length - 1].X, poly [poly.Length - 1].Y);
    for (int i = 0; i < poly.Length; i ++) {
        var newPoint = new Point (poly [i].X, poly [i].Y);
        if (newPoint.X > oldPoint.X) {
            p1 = oldPoint;
            p2 = newPoint;
        } else {
            p1 = newPoint;
            p2 = oldPoint;
        }
        if ((newPoint.X < p.X) == (p.X <= oldPoint.X) && (p.Y - (long) p1.Y) * (p2.X - p1.X) < (p2.Y - (long) p1.Y) * (p.X - p1.X)) {
            inside = ! inside;
        }
        oldPoint = newPoint;
    }
    return inside;
}
----------------------------------------

 public static bool IsInPolygon (Point [] poly, Point p) {
    float xNew, yNew;
    bool inside;
    if (poly.Length < 3)
        return inside;
    xNew = p.X;
    yNew = p.Y;
    int i, j = poly.Length-1;
    inside = false;
    for (i=0; i<poly.Length; i++)
    {
        if ( ( (poly[i].Y < yNew) && (poly[j].Y >= yNew)
        || (poly[j].Y < yNew && poly[i].Y >= yNew) )
        && (poly[i].X <= xNew || poly[j].X <= xNew) )
        {
            inside ^= (poly[i].X + (yNew-poly[i].Y)/(poly[j].Y-poly[i].Y)*(poly[j].X-poly[i].X) < xNew);
        }
        j = i; 
    }
    return inside;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
723
3
Gpt3D_Clone723_3.cs 1 23
Gpt3D_Clone723_3.cs 24 44
----------------------------------------

public static bool IsInPolygon (Point [] poly, Point p) {
    Point p1, p2;
    bool inside = false;
    if (poly.Length < 3) {
        return inside;
    }
    var oldPoint = new Point (poly [poly.Length - 1].X, poly [poly.Length - 1].Y);
    for (int i = 0; i < poly.Length; i ++) {
        var newPoint = new Point (poly [i].X, poly [i].Y);
        if (newPoint.X > oldPoint.X) {
            p1 = oldPoint;
            p2 = newPoint;
        } else {
            p1 = newPoint;
            p2 = oldPoint;
        }
        if ((newPoint.X < p.X) == (p.X <= oldPoint.X) && (p.Y - (long) p1.Y) * (p2.X - p1.X) < (p2.Y - (long) p1.Y) * (p.X - p1.X)) {
            inside = ! inside;
        }
        oldPoint = newPoint;
    }
    return inside;
}
----------------------------------------

 public static bool IsInPolygon (Point [] poly, Point p) {
    if(poly.Length < 3) {
        return false;
    }
    int sides = 0;
    int i, j = poly.Length - 1;
    for(i = 0; i < poly.Length; i++) {
        if( ( (poly[i].Y < p.Y) && (poly[j].Y >= p.Y) ) || 
            ( (poly[j].Y < p.Y) && (poly[i].Y >= p.Y) ) ) {
            if(poly[i].X + (p.Y - poly[i].Y) / (poly[j].Y - poly[i].Y) *
               (poly[j].X - poly[i].X) < p.X) {
                sides++;
            }
        }
        j = i;
    }
    return sides % 2 != 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
723
4
Gpt3D_Clone723_4.cs 1 23
Gpt3D_Clone723_4.cs 24 38
----------------------------------------

public static bool IsInPolygon (Point [] poly, Point p) {
    Point p1, p2;
    bool inside = false;
    if (poly.Length < 3) {
        return inside;
    }
    var oldPoint = new Point (poly [poly.Length - 1].X, poly [poly.Length - 1].Y);
    for (int i = 0; i < poly.Length; i ++) {
        var newPoint = new Point (poly [i].X, poly [i].Y);
        if (newPoint.X > oldPoint.X) {
            p1 = oldPoint;
            p2 = newPoint;
        } else {
            p1 = newPoint;
            p2 = oldPoint;
        }
        if ((newPoint.X < p.X) == (p.X <= oldPoint.X) && (p.Y - (long) p1.Y) * (p2.X - p1.X) < (p2.Y - (long) p1.Y) * (p.X - p1.X)) {
            inside = ! inside;
        }
        oldPoint = newPoint;
    }
    return inside;
}
----------------------------------------

  public static bool IsInPolygon (Point [] poly, Point p) {
    int intersect = 0; 
    for (int i = 0; i < poly.Length; i++) 
    { 
        int next = (i+1)%poly.Length; 
        if (doIntersect(poly[i], poly[next], p, new Point (poly.Length-1))) 
            intersect++; 
    } 
    if (intersect % 2 == 0) 
        return false; 
    else
        return true; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
723
5
Gpt3D_Clone723_5.cs 1 23
Gpt3D_Clone723_5.cs 24 39
----------------------------------------

public static bool IsInPolygon (Point [] poly, Point p) {
    Point p1, p2;
    bool inside = false;
    if (poly.Length < 3) {
        return inside;
    }
    var oldPoint = new Point (poly [poly.Length - 1].X, poly [poly.Length - 1].Y);
    for (int i = 0; i < poly.Length; i ++) {
        var newPoint = new Point (poly [i].X, poly [i].Y);
        if (newPoint.X > oldPoint.X) {
            p1 = oldPoint;
            p2 = newPoint;
        } else {
            p1 = newPoint;
            p2 = oldPoint;
        }
        if ((newPoint.X < p.X) == (p.X <= oldPoint.X) && (p.Y - (long) p1.Y) * (p2.X - p1.X) < (p2.Y - (long) p1.Y) * (p.X - p1.X)) {
            inside = ! inside;
        }
        oldPoint = newPoint;
    }
    return inside;
}
----------------------------------------

 public static bool IsInPolygon (Point [] poly, Point p) {
    if (poly.Length < 3)
        return false;
        
    int i, j, c = 0;
    int n = poly.length;
    for (i = 0, j = n-1; i < n; j = i++) 
    {
        if ( ((poly[i].Y>p.Y) != (poly[j].Y>p.Y)) &&
	     (p.X < (poly[j].X-poly[i].X) * (p.Y-poly[i].Y) / (poly[j].Y-poly[i].Y) + poly[i].X) )
           c = !c;
    }
    return c;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
723
6
Gpt3D_Clone723_6.cs 1 23
Gpt3D_Clone723_6.cs 24 40
----------------------------------------

public static bool IsInPolygon (Point [] poly, Point p) {
    Point p1, p2;
    bool inside = false;
    if (poly.Length < 3) {
        return inside;
    }
    var oldPoint = new Point (poly [poly.Length - 1].X, poly [poly.Length - 1].Y);
    for (int i = 0; i < poly.Length; i ++) {
        var newPoint = new Point (poly [i].X, poly [i].Y);
        if (newPoint.X > oldPoint.X) {
            p1 = oldPoint;
            p2 = newPoint;
        } else {
            p1 = newPoint;
            p2 = oldPoint;
        }
        if ((newPoint.X < p.X) == (p.X <= oldPoint.X) && (p.Y - (long) p1.Y) * (p2.X - p1.X) < (p2.Y - (long) p1.Y) * (p.X - p1.X)) {
            inside = ! inside;
        }
        oldPoint = newPoint;
    }
    return inside;
}
----------------------------------------

  public static bool IsInPolygon (Point [] poly, Point p) {
    if (poly.Length < 3) {
        return false;
    }
    
    bool isInside = false;
    for(int i = 0; i < poly.Length; i++) {
        int nextInd = (i+1) % poly.Length;
        if(doIntersect(poly[i], poly[nextInd], p, new Point(poly.Length-1))) {
            isInside = !isInside;
        }
    }
    return isInside;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
72
0
Gpt3D_Clone72_0.cs 1 20
Gpt3D_Clone72_0.cs 21 53
----------------------------------------

[STAThread] static void Main (string [] args) {
    fileDialog.ShowDialog ();
    string fileName = fileDialog.FileName;
    if (string.IsNullOrEmpty (fileName) == false) {
        AppDomain.CurrentDomain.AssemblyResolve += CurrentDomain_AssemblyResolve;
        if (Directory.Exists (@"c:\Provisioning\") == false)
            Directory.CreateDirectory (@"c:\Provisioning\");
        assemblyDirectory = Path.GetDirectoryName (fileName);
        Assembly loadedAssembly = Assembly.LoadFile (fileName);
        List < Type > assemblyTypes = loadedAssembly.GetTypes ().ToList < Type > ();
        foreach (var type in assemblyTypes) {
            if (type.IsInterface == false) {
                StreamWriter jsonFile = File.CreateText (string.Format (@"c:\Provisioning\{0}.json", type.Name));
                JavaScriptSerializer serializer = new JavaScriptSerializer ();
                jsonFile.WriteLine (serializer.Serialize (Activator.CreateInstance (type)));
                jsonFile.Close ();
            }
        }
    }
}
----------------------------------------

 [STAThread] static void Main (string [] args){
    OpenFileDialog fileDialog = new OpenFileDialog();
    DialogResult result = fileDialog.ShowDialog();
    if (result == DialogResult.OK) {
        string fileName = fileDialog.FileName;
        if (!string.IsNullOrEmpty(fileName)) {
            AppDomain.CurrentDomain.AssemblyResolve += CurrentDomain_AssemblyResolve;
            if (!Directory.Exists(@"c:\\Provisioning\\")){
                Directory.CreateDirectory(@"c:\\Provisioning\\");
            }
            string assemblyDirectory = Path.GetDirectoryName(fileName);
            Assembly loadedAssembly = Assembly.LoadFrom(fileName);
            List<Type> assemblyTypes = loadedAssembly.GetTypes().ToList<Type>();
            
            foreach (var type in assemblyTypes) {
                if (!type.IsInterface) {
                    string filename = string.Format(@"c:(\\Provisioning\\{0}.json", type.Name);
                    StreamWriter jsonFile = File.CreateText(filename);
                    JavaScriptSerializer serializer = new JavaScriptSerializer();
                    object appObject = Activator.CreateInstance(type);
                    jsonFile.WriteLine(serializer.Serialize(appObject));
                    jsonFile.Close();
                }
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
72
1
Gpt3D_Clone72_1.cs 1 20
Gpt3D_Clone72_1.cs 21 53
----------------------------------------

[STAThread] static void Main (string [] args) {
    fileDialog.ShowDialog ();
    string fileName = fileDialog.FileName;
    if (string.IsNullOrEmpty (fileName) == false) {
        AppDomain.CurrentDomain.AssemblyResolve += CurrentDomain_AssemblyResolve;
        if (Directory.Exists (@"c:\Provisioning\") == false)
            Directory.CreateDirectory (@"c:\Provisioning\");
        assemblyDirectory = Path.GetDirectoryName (fileName);
        Assembly loadedAssembly = Assembly.LoadFile (fileName);
        List < Type > assemblyTypes = loadedAssembly.GetTypes ().ToList < Type > ();
        foreach (var type in assemblyTypes) {
            if (type.IsInterface == false) {
                StreamWriter jsonFile = File.CreateText (string.Format (@"c:\Provisioning\{0}.json", type.Name));
                JavaScriptSerializer serializer = new JavaScriptSerializer ();
                jsonFile.WriteLine (serializer.Serialize (Activator.CreateInstance (type)));
                jsonFile.Close ();
            }
        }
    }
}
----------------------------------------

 [STAThread] static void Main (string [] args){
    OpenFileDialog fileDialog = new OpenFileDialog();
    DialogResult result = fileDialog.ShowDialog();
    if (result == DialogResult.OK) {
        string fileName = fileDialog.FileName;
        if (!string.IsNullOrEmpty(fileName)) {
            AppDomain.CurrentDomain.AssemblyResolve += CurrentDomain_AssemblyResolve;
            if (!Directory.Exists(@"c:\\Provisioning\\")){
                Directory.CreateDirectory(@"c:\\Provisioning\\");
            }
            string assemblyDirectory = Path.GetDirectoryName(fileName);
            Assembly loadedAssembly = Assembly.LoadFrom(fileName);
            List<Type> assemblyTypes = loadedAssembly.GetTypes().ToList<Type>();
            
            foreach (var type in assemblyTypes) {
                if (!type.IsInterface) {
                    string filename = string.Format(@"c:(\\Provisioning\\{0}.json", type.Name);
                    FileStream jsonFile = new FileStream(filename, FileMode.Create);
                    DataContractJsonSerializer serializer = new DataContractJsonSerializer(type);
                    object appObject = Activator.CreateInstance(type);
                    serializer.WriteObject(jsonFile, appObject);
                    jsonFile.Close();
                }
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
72
2
Gpt3D_Clone72_2.cs 1 20
Gpt3D_Clone72_2.cs 21 53
----------------------------------------

[STAThread] static void Main (string [] args) {
    fileDialog.ShowDialog ();
    string fileName = fileDialog.FileName;
    if (string.IsNullOrEmpty (fileName) == false) {
        AppDomain.CurrentDomain.AssemblyResolve += CurrentDomain_AssemblyResolve;
        if (Directory.Exists (@"c:\Provisioning\") == false)
            Directory.CreateDirectory (@"c:\Provisioning\");
        assemblyDirectory = Path.GetDirectoryName (fileName);
        Assembly loadedAssembly = Assembly.LoadFile (fileName);
        List < Type > assemblyTypes = loadedAssembly.GetTypes ().ToList < Type > ();
        foreach (var type in assemblyTypes) {
            if (type.IsInterface == false) {
                StreamWriter jsonFile = File.CreateText (string.Format (@"c:\Provisioning\{0}.json", type.Name));
                JavaScriptSerializer serializer = new JavaScriptSerializer ();
                jsonFile.WriteLine (serializer.Serialize (Activator.CreateInstance (type)));
                jsonFile.Close ();
            }
        }
    }
}
----------------------------------------

 [STAThread] static void Main (string [] args){
    OpenFileDialog fileDialog = new OpenFileDialog();
    DialogResult result = fileDialog.ShowDialog();
    if (result == DialogResult.OK) {
        string fileName = fileDialog.FileName;
        if (!string.IsNullOrEmpty(fileName)) {
            AppDomain.CurrentDomain.AssemblyResolve += CurrentDomain_AssemblyResolve;
            if (!Directory.Exists(@"c:\\Provisioning\\")){
                Directory.CreateDirectory(@"c:\\Provisioning\\");
            }
            string assemblyDirectory = Path.GetDirectoryName(fileName);
            Assembly loadedAssembly = Assembly.LoadFrom(fileName);
            List<Type> assemblyTypes = loadedAssembly.GetTypes().ToList<Type>();
            
            foreach (var type in assemblyTypes) {
                if (!type.IsInterface) {
                    string filename = string.Format(@"c:(\\Provisioning\\{0}.json", type.Name);
                    System.IO.TextWriter jsonFile = new JsonTextWriter(new StreamWriter(filename));
                    JavaScriptSerializer serializer = new JavaScriptSerializer();
                    object appObject = Activator.CreateInstance(type);
                    serializer.Serialize(jsonFile, appObject);
                    jsonFile.Close();
                }
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
72
3
Gpt3D_Clone72_3.cs 1 20
Gpt3D_Clone72_3.cs 21 53
----------------------------------------

[STAThread] static void Main (string [] args) {
    fileDialog.ShowDialog ();
    string fileName = fileDialog.FileName;
    if (string.IsNullOrEmpty (fileName) == false) {
        AppDomain.CurrentDomain.AssemblyResolve += CurrentDomain_AssemblyResolve;
        if (Directory.Exists (@"c:\Provisioning\") == false)
            Directory.CreateDirectory (@"c:\Provisioning\");
        assemblyDirectory = Path.GetDirectoryName (fileName);
        Assembly loadedAssembly = Assembly.LoadFile (fileName);
        List < Type > assemblyTypes = loadedAssembly.GetTypes ().ToList < Type > ();
        foreach (var type in assemblyTypes) {
            if (type.IsInterface == false) {
                StreamWriter jsonFile = File.CreateText (string.Format (@"c:\Provisioning\{0}.json", type.Name));
                JavaScriptSerializer serializer = new JavaScriptSerializer ();
                jsonFile.WriteLine (serializer.Serialize (Activator.CreateInstance (type)));
                jsonFile.Close ();
            }
        }
    }
}
----------------------------------------

 [STAThread] static void Main (string [] args){
    OpenFileDialog fileDialog = new OpenFileDialog();
    DialogResult result = fileDialog.ShowDialog();
    if (result == DialogResult.OK) {
        string fileName = fileDialog.FileName;
        if (!string.IsNullOrEmpty(fileName)) {
            AppDomain.CurrentDomain.AssemblyResolve += CurrentDomain_AssemblyResolve;
            if (!Directory.Exists(@"c:\\Provisioning\\")){
                Directory.CreateDirectory(@"c:\\Provisioning\\");
            }
            string assemblyDirectory = Path.GetDirectoryName(fileName);
            Assembly loadedAssembly = Assembly.LoadFrom(fileName);
            List<Type> assemblyTypes = loadedAssembly.GetTypes().ToList<Type>();
            
            foreach (var type in assemblyTypes) {
                if (!type.IsInterface) {
                    string filename = string.Format(@"c:(\\Provisioning\\{0}.json", type.Name);
                    System.IO.TextWriter jsonFile = new JsonTextWriter(new StreamWriter(filename));
                    NewtonsoftJsonSerializer serializer = new NewtonsoftJsonSerializer();
                    object appObject = Activator.CreateInstance(type);
                    serializer.Serialize(jsonFile, appObject);
                    jsonFile.Close();
                }
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
72
4
Gpt3D_Clone72_4.cs 1 20
Gpt3D_Clone72_4.cs 21 53
----------------------------------------

[STAThread] static void Main (string [] args) {
    fileDialog.ShowDialog ();
    string fileName = fileDialog.FileName;
    if (string.IsNullOrEmpty (fileName) == false) {
        AppDomain.CurrentDomain.AssemblyResolve += CurrentDomain_AssemblyResolve;
        if (Directory.Exists (@"c:\Provisioning\") == false)
            Directory.CreateDirectory (@"c:\Provisioning\");
        assemblyDirectory = Path.GetDirectoryName (fileName);
        Assembly loadedAssembly = Assembly.LoadFile (fileName);
        List < Type > assemblyTypes = loadedAssembly.GetTypes ().ToList < Type > ();
        foreach (var type in assemblyTypes) {
            if (type.IsInterface == false) {
                StreamWriter jsonFile = File.CreateText (string.Format (@"c:\Provisioning\{0}.json", type.Name));
                JavaScriptSerializer serializer = new JavaScriptSerializer ();
                jsonFile.WriteLine (serializer.Serialize (Activator.CreateInstance (type)));
                jsonFile.Close ();
            }
        }
    }
}
----------------------------------------

 [STAThread] static void Main (string [] args){
    OpenFileDialog fileDialog = new OpenFileDialog();
    DialogResult result = fileDialog.ShowDialog();
    if (result == DialogResult.OK) {
        string fileName = fileDialog.FileName;
        if (!string.IsNullOrEmpty(fileName)) {
            AppDomain.CurrentDomain.AssemblyResolve += CurrentDomain_AssemblyResolve;
            if (!Directory.Exists(@"c:\\Provisioning\\")){
                Directory.CreateDirectory(@"c:\\Provisioning\\");
            }
            string assemblyDirectory = Path.GetDirectoryName(fileName);
            Assembly loadedAssembly = Assembly.LoadFile(fileName);
            List<Type> assemblyTypes = loadedAssembly.GetTypes().ToList<Type>();
            
            foreach (var type in assemblyTypes) {
                if (!type.IsInterface) {
                    string filename = string.Format(@"c:(\\Provisioning\\{0}.json", type.Name);
                    StreamWriter jsonFile = File.CreateText(filename);
                    JavaScriptSerializer serializer = new JavaScriptSerializer();
                    object appObject = Activator.CreateInstance(type);
                    jsonFile.WriteLine(serializer.Serialize(appObject));
                    jsonFile.Close();
                }
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
72
5
Gpt3D_Clone72_5.cs 1 20
Gpt3D_Clone72_5.cs 21 53
----------------------------------------

[STAThread] static void Main (string [] args) {
    fileDialog.ShowDialog ();
    string fileName = fileDialog.FileName;
    if (string.IsNullOrEmpty (fileName) == false) {
        AppDomain.CurrentDomain.AssemblyResolve += CurrentDomain_AssemblyResolve;
        if (Directory.Exists (@"c:\Provisioning\") == false)
            Directory.CreateDirectory (@"c:\Provisioning\");
        assemblyDirectory = Path.GetDirectoryName (fileName);
        Assembly loadedAssembly = Assembly.LoadFile (fileName);
        List < Type > assemblyTypes = loadedAssembly.GetTypes ().ToList < Type > ();
        foreach (var type in assemblyTypes) {
            if (type.IsInterface == false) {
                StreamWriter jsonFile = File.CreateText (string.Format (@"c:\Provisioning\{0}.json", type.Name));
                JavaScriptSerializer serializer = new JavaScriptSerializer ();
                jsonFile.WriteLine (serializer.Serialize (Activator.CreateInstance (type)));
                jsonFile.Close ();
            }
        }
    }
}
----------------------------------------

 [STAThread] static void Main (string [] args){
    OpenFileDialog fileDialog = new OpenFileDialog();
    DialogResult result = fileDialog.ShowDialog();
    if (result == DialogResult.OK) {
        string fileName = fileDialog.FileName;
        if (!string.IsNullOrEmpty(fileName)) {
            AppDomain.CurrentDomain.AssemblyResolve += CurrentDomain_AssemblyResolve;
            if (!Directory.Exists(@"c:\\Provisioning\\")){
                Directory.CreateDirectory(@"c:\\Provisioning\\");
            }
            string assemblyDirectory = Path.GetDirectoryName(fileName);
            Assembly loadedAssembly = Assembly.LoadFrom(fileName);
            List<Type> assemblyTypes = loadedAssembly.GetTypes().ToList<Type>();
            
            foreach (var type in assemblyTypes) {
                if (!type.IsInterface) {
                    string filename = string.Format(@"c:(\\Provisioning\\{0}.json", type.Name);
                    System.IO.TextWriter jsonFile = new JsonTextWriter(new StreamWriter(filename));
                    DataContractJsonSerializer serializer = new DataContractJsonSerializer(type);
                    object appObject = Activator.CreateInstance(type);
                    serializer.WriteObject(jsonFile.BaseStream, appObject);
                    jsonFile.Close();
                }
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
72
6
Gpt3D_Clone72_6.cs 1 20
Gpt3D_Clone72_6.cs 21 53
----------------------------------------

[STAThread] static void Main (string [] args) {
    fileDialog.ShowDialog ();
    string fileName = fileDialog.FileName;
    if (string.IsNullOrEmpty (fileName) == false) {
        AppDomain.CurrentDomain.AssemblyResolve += CurrentDomain_AssemblyResolve;
        if (Directory.Exists (@"c:\Provisioning\") == false)
            Directory.CreateDirectory (@"c:\Provisioning\");
        assemblyDirectory = Path.GetDirectoryName (fileName);
        Assembly loadedAssembly = Assembly.LoadFile (fileName);
        List < Type > assemblyTypes = loadedAssembly.GetTypes ().ToList < Type > ();
        foreach (var type in assemblyTypes) {
            if (type.IsInterface == false) {
                StreamWriter jsonFile = File.CreateText (string.Format (@"c:\Provisioning\{0}.json", type.Name));
                JavaScriptSerializer serializer = new JavaScriptSerializer ();
                jsonFile.WriteLine (serializer.Serialize (Activator.CreateInstance (type)));
                jsonFile.Close ();
            }
        }
    }
}
----------------------------------------

 [STAThread] static void Main (string [] args){
    OpenFileDialog fileDialog = new OpenFileDialog();
    DialogResult result = fileDialog.ShowDialog();
    if (result == DialogResult.OK) {
        string fileName = fileDialog.FileName;
        if (!string.IsNullOrEmpty(fileName)) {
            AppDomain.CurrentDomain.AssemblyResolve += CurrentDomain_AssemblyResolve;
            if (!Directory.Exists(@"c:\\Provisioning\\")){
                Directory.CreateDirectory(@"c:\\Provisioning\\");
            }
            string assemblyDirectory = Path.GetDirectoryName(fileName);
            Assembly loadedAssembly = Assembly.LoadFrom(fileName);
            List<Type> assemblyTypes = loadedAssembly.GetTypes().ToList<Type>();
            
            foreach (var type in assemblyTypes) {
                if (!type.IsInterface) {
                    string filename = string.Format(@"c:(\\Provisioning\\{0}.json", type.Name);
                    StreamWriter jsonFile = File.CreateText(filename);
                    DataContractJsonSerializer serializer = new DataContractJsonSerializer(type);
                    object appObject = Activator.CreateInstance(type);
                    serializer.WriteObject(jsonFile.BaseStream, appObject);
                    jsonFile.Close();
                }
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
72
8
Gpt3D_Clone72_8.cs 1 20
Gpt3D_Clone72_8.cs 21 52
----------------------------------------

[STAThread] static void Main (string [] args) {
    fileDialog.ShowDialog ();
    string fileName = fileDialog.FileName;
    if (string.IsNullOrEmpty (fileName) == false) {
        AppDomain.CurrentDomain.AssemblyResolve += CurrentDomain_AssemblyResolve;
        if (Directory.Exists (@"c:\Provisioning\") == false)
            Directory.CreateDirectory (@"c:\Provisioning\");
        assemblyDirectory = Path.GetDirectoryName (fileName);
        Assembly loadedAssembly = Assembly.LoadFile (fileName);
        List < Type > assemblyTypes = loadedAssembly.GetTypes ().ToList < Type > ();
        foreach (var type in assemblyTypes) {
            if (type.IsInterface == false) {
                StreamWriter jsonFile = File.CreateText (string.Format (@"c:\Provisioning\{0}.json", type.Name));
                JavaScriptSerializer serializer = new JavaScriptSerializer ();
                jsonFile.WriteLine (serializer.Serialize (Activator.CreateInstance (type)));
                jsonFile.Close ();
            }
        }
    }
}
----------------------------------------

 [STAThread] static void Main (string [] args){
    OpenFileDialog fileDialog = new OpenFileDialog();
    DialogResult result = fileDialog.ShowDialog();
    if (result == DialogResult.OK) {
        string fileName = fileDialog.FileName;
        if (!string.IsNullOrEmpty(fileName)) {
            AppDomain.CurrentDomain.AssemblyResolve += CurrentDomain_AssemblyResolve;
            if (!Directory.Exists(@"c:\\Provisioning\\")){
                Directory.CreateDirectory(@"c:\\Provisioning\\");
            }
            string assemblyDirectory = Path.GetDirectoryName(fileName);
            Assembly loadedAssembly = Assembly.LoadFile(fileName);
            List<Type> assemblyTypes = loadedAssembly.GetTypes().ToList<Type>();
            
            foreach (var type in assemblyTypes) {
                if (!type.IsInterface) {
                    string filename = string.Format(@"c:(\\Provisioning\\{0}.json", type.Name);
                    StreamWriter jsonFile = File.CreateText(filename);
                    System.Web.Script.Serialization.JavaScriptSerializer serializer = new System.Web.Script.Serialization.JavaScriptSerializer();
                    jsonFile.WriteLine(serializer.Serialize(Activator.CreateInstance(type)));
                    jsonFile.Close();
                }
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
731
0
Gpt3D_Clone731_0.cs 1 15
Gpt3D_Clone731_0.cs 16 29
----------------------------------------

private void txt_miktar_TextChanged (object sender, TextChangedEventArgs e) {
    if ((sender as TextBox).Text.Length < 1) {
        return;
    }
    try {
        int adet = Convert.ToInt32 ((sender as TextBox).Text);
    }
    catch {
        string s = "";
        s = (sender as TextBox).Text;
        s = s.Substring (0, s.Length - 1);
        (sender as TextBox).Text = s;
        (sender as TextBox).Select (s.Length, s.Length);
    }
}
----------------------------------------

	private void txt_miktar_TextChanged (object sender, TextChangedEventArgs e) {
    var tb = (sender as TextBox);
    if (string.IsNullOrWhiteSpace (tb.Text)) {
        return;
    }
    int adet;
    if (!int.TryParse (tb.Text, out adet) || adet < 0) {
        tb.Text = tb.Text.Substring (0, tb.Text.Length - 1);
        tb.Select (tb.Text.Length, tb.Text.Length);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
732
0
Gpt3D_Clone732_0.cs 1 25
Gpt3D_Clone732_0.cs 26 43
----------------------------------------

public static T [] Slice < T > (this T [] arr, int offset, int length) {
    int start, end;
    if (offset < 0)
        start = arr.Length + offset;
    else
        start = offset;
    if (start < 0)
        start = 0;
    else if (start > arr.Length)
        start = arr.Length;
    if (length < 0)
        end = arr.Length + length;
    else
        end = start + length;
    if (end < 0)
        end = 0;
    if (end > arr.Length)
        end = arr.Length;
    int len = end - start;
    T [] result = new T [len];
    for (int i = 0; i < len; i ++) {
        result [i] = arr [start + i];
    }
    return result;
}
----------------------------------------

 public static T [] Slice < T > (this T [] arr, int offset, int length) {
    int start, end;
    if (offset < 0)
        start = Math.Max(arr.Length + offset, 0);
    else
        start = Math.Min(offset, arr.Length -1);
    if (length <0)
        end = arr.Length + length;
    else
        end = Math.Min(start + Math.Max(length, 0), arr.Length);
    if (end < start)
        return new T [] {};
    T [] result = new T [end - start];
    Array.Copy(arr, start, result, 0, end-start);
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
732
1
Gpt3D_Clone732_1.cs 1 25
Gpt3D_Clone732_1.cs 26 42
----------------------------------------

public static T [] Slice < T > (this T [] arr, int offset, int length) {
    int start, end;
    if (offset < 0)
        start = arr.Length + offset;
    else
        start = offset;
    if (start < 0)
        start = 0;
    else if (start > arr.Length)
        start = arr.Length;
    if (length < 0)
        end = arr.Length + length;
    else
        end = start + length;
    if (end < 0)
        end = 0;
    if (end > arr.Length)
        end = arr.Length;
    int len = end - start;
    T [] result = new T [len];
    for (int i = 0; i < len; i ++) {
        result [i] = arr [start + i];
    }
    return result;
}
----------------------------------------

 public static T [] Slice < T > (this T [] arr, int offset, int length) {
    int start;
    if (offset < 0)
        start = arr.Length + offset;
    else
        start = Math.Max(offset, 0);
    int end = Math.Min(start + Math.Max(length, 0), arr.Length);
    if (start > arr.Length)
        return new T [] {};
    else if (end <= start)
        return new T [] {};
    T [] result = new T [end - start];
    Array.Copy(arr, start, result, 0, end-start);
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
732
2
Gpt3D_Clone732_2.cs 1 25
Gpt3D_Clone732_2.cs 26 40
----------------------------------------

public static T [] Slice < T > (this T [] arr, int offset, int length) {
    int start, end;
    if (offset < 0)
        start = arr.Length + offset;
    else
        start = offset;
    if (start < 0)
        start = 0;
    else if (start > arr.Length)
        start = arr.Length;
    if (length < 0)
        end = arr.Length + length;
    else
        end = start + length;
    if (end < 0)
        end = 0;
    if (end > arr.Length)
        end = arr.Length;
    int len = end - start;
    T [] result = new T [len];
    for (int i = 0; i < len; i ++) {
        result [i] = arr [start + i];
    }
    return result;
}
----------------------------------------

 public static T [] Slice < T > (this T [] arr, int offset, int length) {
    int start = Math.Max(offset, 0);
    int end;
    if (length < 0)
        end = Math.Max(arr.Length + length, offset);
    else
        end = Math.Min(start + length, arr.Length);
    if (end <= start)
        return new T [] {};
    T [] result = new T [end - start];
    Array.Copy(arr, start, result, 0, end-start);
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
732
3
Gpt3D_Clone732_3.cs 1 25
Gpt3D_Clone732_3.cs 26 38
----------------------------------------

public static T [] Slice < T > (this T [] arr, int offset, int length) {
    int start, end;
    if (offset < 0)
        start = arr.Length + offset;
    else
        start = offset;
    if (start < 0)
        start = 0;
    else if (start > arr.Length)
        start = arr.Length;
    if (length < 0)
        end = arr.Length + length;
    else
        end = start + length;
    if (end < 0)
        end = 0;
    if (end > arr.Length)
        end = arr.Length;
    int len = end - start;
    T [] result = new T [len];
    for (int i = 0; i < len; i ++) {
        result [i] = arr [start + i];
    }
    return result;
}
----------------------------------------

 public static T [] Slice < T > (this T [] arr, int offset, int length) {
    int start, end;
    start = Math.Max(Math.Min(offset, arr.Length - 1), 0); 
    end = Math.Min(start + Math.Max(length, 0), arr.Length); 
    int len = end - start;
    T [] result = new T [len];
    for (int i = 0; i < len; i ++) {
        result [i] = arr [start + i];
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
732
4
Gpt3D_Clone732_4.cs 1 25
Gpt3D_Clone732_4.cs 26 37
----------------------------------------

public static T [] Slice < T > (this T [] arr, int offset, int length) {
    int start, end;
    if (offset < 0)
        start = arr.Length + offset;
    else
        start = offset;
    if (start < 0)
        start = 0;
    else if (start > arr.Length)
        start = arr.Length;
    if (length < 0)
        end = arr.Length + length;
    else
        end = start + length;
    if (end < 0)
        end = 0;
    if (end > arr.Length)
        end = arr.Length;
    int len = end - start;
    T [] result = new T [len];
    for (int i = 0; i < len; i ++) {
        result [i] = arr [start + i];
    }
    return result;
}
----------------------------------------

 public static T [] Slice < T > (this T [] arr, int offset, int length) {
    int start, end;
    start = Math.Max(Math.Min(offset, arr.Length - 1), 0);
    end = Math.Min(start + Math.Max(length, 0), arr.Length);
    if(end <= start)
        return new T[] {};
    T [] result = new T [end - start];
    System.Array.Copy(arr, start, result, 0, end - start);
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
732
5
Gpt3D_Clone732_5.cs 1 25
Gpt3D_Clone732_5.cs 26 37
----------------------------------------

public static T [] Slice < T > (this T [] arr, int offset, int length) {
    int start, end;
    if (offset < 0)
        start = arr.Length + offset;
    else
        start = offset;
    if (start < 0)
        start = 0;
    else if (start > arr.Length)
        start = arr.Length;
    if (length < 0)
        end = arr.Length + length;
    else
        end = start + length;
    if (end < 0)
        end = 0;
    if (end > arr.Length)
        end = arr.Length;
    int len = end - start;
    T [] result = new T [len];
    for (int i = 0; i < len; i ++) {
        result [i] = arr [start + i];
    }
    return result;
}
----------------------------------------

 public static T [] Slice < T > (this T [] arr, int offset, int length) {
    int start, end;
    start = Math.Max(Math.Min(offset, arr.Length - 1), 0);
    end = Math.Min(start + Math.Max(length, 0), arr.Length);
    if (start >= arr.Length || end <= 0)
        return new T [] {};
    T [] result = new T [end - start];
    Array.Copy(arr, start, result, 0, end-start);
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
732
6
Gpt3D_Clone732_6.cs 1 25
Gpt3D_Clone732_6.cs 26 36
----------------------------------------

public static T [] Slice < T > (this T [] arr, int offset, int length) {
    int start, end;
    if (offset < 0)
        start = arr.Length + offset;
    else
        start = offset;
    if (start < 0)
        start = 0;
    else if (start > arr.Length)
        start = arr.Length;
    if (length < 0)
        end = arr.Length + length;
    else
        end = start + length;
    if (end < 0)
        end = 0;
    if (end > arr.Length)
        end = arr.Length;
    int len = end - start;
    T [] result = new T [len];
    for (int i = 0; i < len; i ++) {
        result [i] = arr [start + i];
    }
    return result;
}
----------------------------------------

 public static T [] Slice < T > (this T [] arr, int offset, int length) {
    int start = Math.Max(Math.Min(offset, arr.Length - 1), 0);
    int end = Math.Max(Math.Min(start + length, arr.Length), 0);
    if (end <= start)
        return new T [] {};
    T [] result = new T [end - start];
    Array.Copy(arr, start, result, 0, end-start);
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
732
7
Gpt3D_Clone732_7.cs 1 25
Gpt3D_Clone732_7.cs 26 36
----------------------------------------

public static T [] Slice < T > (this T [] arr, int offset, int length) {
    int start, end;
    if (offset < 0)
        start = arr.Length + offset;
    else
        start = offset;
    if (start < 0)
        start = 0;
    else if (start > arr.Length)
        start = arr.Length;
    if (length < 0)
        end = arr.Length + length;
    else
        end = start + length;
    if (end < 0)
        end = 0;
    if (end > arr.Length)
        end = arr.Length;
    int len = end - start;
    T [] result = new T [len];
    for (int i = 0; i < len; i ++) {
        result [i] = arr [start + i];
    }
    return result;
}
----------------------------------------

 public static T [] Slice < T > (this T [] arr, int offset, int length) {
    int start = Math.Max(Math.Min(offset, arr.Length - 1), 0);
    int end = Math.Min(start + Math.Max(length, 0), arr.Length);
    if (end < start)
        return new T [] {};
    T [] result = new T [end - start];
    Array.Copy(arr, start, result, 0, end-start);
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
732
8
Gpt3D_Clone732_8.cs 1 25
Gpt3D_Clone732_8.cs 26 35
----------------------------------------

public static T [] Slice < T > (this T [] arr, int offset, int length) {
    int start, end;
    if (offset < 0)
        start = arr.Length + offset;
    else
        start = offset;
    if (start < 0)
        start = 0;
    else if (start > arr.Length)
        start = arr.Length;
    if (length < 0)
        end = arr.Length + length;
    else
        end = start + length;
    if (end < 0)
        end = 0;
    if (end > arr.Length)
        end = arr.Length;
    int len = end - start;
    T [] result = new T [len];
    for (int i = 0; i < len; i ++) {
        result [i] = arr [start + i];
    }
    return result;
}
----------------------------------------

 public static T [] Slice < T > (this T [] arr, int offset, int length) {
    int start = Math.Max(offset, 0);
    int end = Math.Min(start + Math.Max(length, 0), arr.Length);
    int len = end - start;
    T [] result = new T [len];
    Array.Copy(arr, start, result, 0, len);
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
732
9
Gpt3D_Clone732_9.cs 1 25
Gpt3D_Clone732_9.cs 26 35
----------------------------------------

public static T [] Slice < T > (this T [] arr, int offset, int length) {
    int start, end;
    if (offset < 0)
        start = arr.Length + offset;
    else
        start = offset;
    if (start < 0)
        start = 0;
    else if (start > arr.Length)
        start = arr.Length;
    if (length < 0)
        end = arr.Length + length;
    else
        end = start + length;
    if (end < 0)
        end = 0;
    if (end > arr.Length)
        end = arr.Length;
    int len = end - start;
    T [] result = new T [len];
    for (int i = 0; i < len; i ++) {
        result [i] = arr [start + i];
    }
    return result;
}
----------------------------------------

 public static T [] Slice < T > (this T [] arr, int offset, int length) {
    int start = Math.Min(Math.Max(offset, 0), arr.Length - 1);
    int end = Math.Min(start + Math.Max(length, 0), arr.Length);
    int len = end - start;
    T [] result = new T [len];
    System.Array.Copy(arr, start, result, 0, len);
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
733
0
Gpt3D_Clone733_0.cs 1 20
Gpt3D_Clone733_0.cs 21 59
----------------------------------------

static void Main (string [] args) {
    var qin = new Quote {InsDetails = new InsuranceDetails {Details1 = "insurance details text"}, PayDetails = new PaymentDetails {Details1 = "payment details text"},};
    string xml;
    using (var stream = new MemoryStream ())
    {
        var serializer = new XmlSerializer (typeof (Quote));
        serializer.Serialize (stream, qin);
        stream.Position = 0;
        using (var sr = new StreamReader (stream))
        {
            xml = sr.ReadToEnd ();
        }} Quote qout;
    using (TextReader read = new StringReader (xml))
    {
        var deserializer = new XmlSerializer (typeof (Quote));
        var obj = deserializer.Deserialize (read);
        qout = (Quote) obj;
    } Console.WriteLine ("InsDetails.Details1='{0}'", qout.InsDetails.Details1);
    Console.WriteLine ("PayDetails.Details1='{0}'", qout.PayDetails.Details1);
}
----------------------------------------

 
static void Main(string[] args) 
{
    var qin = new Quote { 
        InsDetails = new InsuranceDetails { Details1 = "insurance details text" }, 
        PayDetails = new PaymentDetails { Details1 = "payment details text" }
    };
    string xml;
    using (var stream = new MemoryStream())
    {
        XmlWriterSettings settings = new XmlWriterSettings();
        settings.OmitXmlDeclaration = true;
        settings.Indent = true;
        settings.ConformanceLevel = ConformanceLevel.Auto;
        using (XmlWriter xWriter = XmlWriter.Create(stream, settings)) 
        { 
            xWriter.WriteStartElement("Quote"); 
            xWriter.WriteElementString("InsDetails", qin.InsDetails.Details1); 
            xWriter.WriteElementString("PayDetails", qin.PayDetails.Details1);
            xWriter.WriteEndElement(); 
            xWriter.Flush(); 
            stream.Position = 0;
            using ( StreamReader sr = new StreamReader(stream)) 
            {
                 xml = sr.ReadToEnd();
            }
        }
    }
    
    XmlSerializer serializer = new XmlSerializer(typeof(Quote)); 
    TextReader reader = new StringReader(xml); 
    Quote qout = (Quote)serializer.Deserialize(reader); 
    Console.WriteLine("InsDetails.Details1='{0}'", qout.InsDetails.Details1); 
    Console.WriteLine("PayDetails.Details1='{0}'", qout.PayDetails.Details1);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
733
1
Gpt3D_Clone733_1.cs 1 20
Gpt3D_Clone733_1.cs 21 56
----------------------------------------

static void Main (string [] args) {
    var qin = new Quote {InsDetails = new InsuranceDetails {Details1 = "insurance details text"}, PayDetails = new PaymentDetails {Details1 = "payment details text"},};
    string xml;
    using (var stream = new MemoryStream ())
    {
        var serializer = new XmlSerializer (typeof (Quote));
        serializer.Serialize (stream, qin);
        stream.Position = 0;
        using (var sr = new StreamReader (stream))
        {
            xml = sr.ReadToEnd ();
        }} Quote qout;
    using (TextReader read = new StringReader (xml))
    {
        var deserializer = new XmlSerializer (typeof (Quote));
        var obj = deserializer.Deserialize (read);
        qout = (Quote) obj;
    } Console.WriteLine ("InsDetails.Details1='{0}'", qout.InsDetails.Details1);
    Console.WriteLine ("PayDetails.Details1='{0}'", qout.PayDetails.Details1);
}
----------------------------------------

 
static void Main(string[] args) 
{
    var qin = new Quote 
    { 
        InsDetails = new InsuranceDetails { Details1 = "insurance details text" }, 
        PayDetails = new PaymentDetails { Details1 = "payment details text" }
    };
    string xml;
    using (var stream = new MemoryStream())
    {
        using (XmlWriter xWriter = XmlWriter.Create(stream, new XmlWriterSettings { Encoding = Encoding.UTF8, OmitXmlDeclaration = true })) 
        { 
            xWriter.WriteStartElement("Quote"); 
            xWriter.WriteElementString("InsDetails", qin.InsDetails.Details1); 
            xWriter.WriteElementString("PayDetails", qin.PayDetails.Details1);
            xWriter.WriteEndElement(); 
            xWriter.Flush(); 
            stream.Position = 0;
            using ( StreamReader sr = new StreamReader(stream)) 
            {
                 xml = sr.ReadToEnd();
            }
        }
    }
    
    XmlSerializer serializer = new XmlSerializer(typeof(Quote)); 
    TextReader reader = new StringReader(xml); 
    Quote qout = (Quote)serializer.Deserialize(reader); 
    Console.WriteLine("InsDetails.Details1='{0}'", qout.InsDetails.Details1); 
    Console.WriteLine("PayDetails.Details1='{0}'", qout.PayDetails.Details1);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
733
2
Gpt3D_Clone733_2.cs 1 20
Gpt3D_Clone733_2.cs 21 56
----------------------------------------

static void Main (string [] args) {
    var qin = new Quote {InsDetails = new InsuranceDetails {Details1 = "insurance details text"}, PayDetails = new PaymentDetails {Details1 = "payment details text"},};
    string xml;
    using (var stream = new MemoryStream ())
    {
        var serializer = new XmlSerializer (typeof (Quote));
        serializer.Serialize (stream, qin);
        stream.Position = 0;
        using (var sr = new StreamReader (stream))
        {
            xml = sr.ReadToEnd ();
        }} Quote qout;
    using (TextReader read = new StringReader (xml))
    {
        var deserializer = new XmlSerializer (typeof (Quote));
        var obj = deserializer.Deserialize (read);
        qout = (Quote) obj;
    } Console.WriteLine ("InsDetails.Details1='{0}'", qout.InsDetails.Details1);
    Console.WriteLine ("PayDetails.Details1='{0}'", qout.PayDetails.Details1);
}
----------------------------------------

 
static void Main(string[] args) 
{
    var qin = new Quote 
    {
        InsDetails = new InsuranceDetails { Details1 = "insurance details text" }, 
        PayDetails = new PaymentDetails { Details1 = "payment details text" }
    };
    string xml;
    using (var stream = new MemoryStream())
    {
        using (XmlWriter xWriter = XmlWriter.Create(stream)) 
        { 
            xWriter.WriteStartElement("Quote"); 
            xWriter.WriteElementString("InsDetails", qin.InsDetails.Details1); 
            xWriter.WriteElementString("PayDetails", qin.PayDetails.Details1);
            xWriter.WriteEndElement(); 
            xWriter.Flush(); 
            stream.Position = 0;
            using ( StreamReader sr = new StreamReader(stream)) 
            {
                 xml = sr.ReadToEnd();
            }
        }
    }
    
    XmlSerializer serializer = new XmlSerializer(typeof(Quote)); 
    TextReader reader = new StringReader(xml); 
    Quote qout = (Quote)serializer.Deserialize(reader); 
    Console.WriteLine("InsDetails.Details1='{0}'", qout.InsDetails.Details1); 
    Console.WriteLine("PayDetails.Details1='{0}'", qout.PayDetails.Details1);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
733
3
Gpt3D_Clone733_3.cs 1 20
Gpt3D_Clone733_3.cs 21 52
----------------------------------------

static void Main (string [] args) {
    var qin = new Quote {InsDetails = new InsuranceDetails {Details1 = "insurance details text"}, PayDetails = new PaymentDetails {Details1 = "payment details text"},};
    string xml;
    using (var stream = new MemoryStream ())
    {
        var serializer = new XmlSerializer (typeof (Quote));
        serializer.Serialize (stream, qin);
        stream.Position = 0;
        using (var sr = new StreamReader (stream))
        {
            xml = sr.ReadToEnd ();
        }} Quote qout;
    using (TextReader read = new StringReader (xml))
    {
        var deserializer = new XmlSerializer (typeof (Quote));
        var obj = deserializer.Deserialize (read);
        qout = (Quote) obj;
    } Console.WriteLine ("InsDetails.Details1='{0}'", qout.InsDetails.Details1);
    Console.WriteLine ("PayDetails.Details1='{0}'", qout.PayDetails.Details1);
}
----------------------------------------

 
static void Main(string[] args) 
{
    var qin = new Quote { 
        InsDetails = new InsuranceDetails { Details1 = "insurance details text" }, 
        PayDetails = new PaymentDetails { Details1 = "payment details text" }
    };
    StringBuilder sb = new StringBuilder();
    StringWriter sw = new StringWriter(sb);
    XmlWriterSettings settings = new XmlWriterSettings();
    settings.OmitXmlDeclaration = true;
    settings.Indent = true;
    settings.ConformanceLevel = ConformanceLevel.Auto;
    using (XmlWriter xWriter = XmlWriter.Create(sw, settings)) 
    { 
        xWriter.WriteStartElement("Quote"); 
        xWriter.WriteElementString("InsDetails", qin.InsDetails.Details1); 
        xWriter.WriteElementString("PayDetails", qin.PayDetails.Details1); 
        xWriter.WriteEndElement(); 
    }
    string xml = sb.ToString();
    
    TextReader reader = new StringReader(xml); 
    XmlSerializer serializer = new XmlSerializer(typeof(Quote)); 
    Quote qout = (Quote)serializer.Deserialize(reader); 
    Console.WriteLine("InsDetails.Details1='{0}'", qout.InsDetails.Details1); 
    Console.WriteLine("PayDetails.Details1='{0}'", qout.PayDetails.Details1);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
733
4
Gpt3D_Clone733_4.cs 1 20
Gpt3D_Clone733_4.cs 21 56
----------------------------------------

static void Main (string [] args) {
    var qin = new Quote {InsDetails = new InsuranceDetails {Details1 = "insurance details text"}, PayDetails = new PaymentDetails {Details1 = "payment details text"},};
    string xml;
    using (var stream = new MemoryStream ())
    {
        var serializer = new XmlSerializer (typeof (Quote));
        serializer.Serialize (stream, qin);
        stream.Position = 0;
        using (var sr = new StreamReader (stream))
        {
            xml = sr.ReadToEnd ();
        }} Quote qout;
    using (TextReader read = new StringReader (xml))
    {
        var deserializer = new XmlSerializer (typeof (Quote));
        var obj = deserializer.Deserialize (read);
        qout = (Quote) obj;
    } Console.WriteLine ("InsDetails.Details1='{0}'", qout.InsDetails.Details1);
    Console.WriteLine ("PayDetails.Details1='{0}'", qout.PayDetails.Details1);
}
----------------------------------------

 
static void Main(string[] args) 
{
    Quote qin = new Quote 
    {
        InsDetails = new InsuranceDetails { Details1 = "insurance details text" }, 
        PayDetails = new PaymentDetails { Details1 = "payment details text" }
    };
    XmlWriterSettings settings = new XmlWriterSettings();
    settings.Indent = true;
    settings.OmitXmlDeclaration = true;
    using (XmlWriter xWriter = XmlWriter.Create("data.xml", settings)) 
    { 
        xWriter.WriteStartElement("Quote"); 
        xWriter.WriteElementString("InsDetails", qin.InsDetails.Details1); 
        xWriter.WriteElementString("PayDetails", qin.PayDetails.Details1); 
        xWriter.WriteEndElement(); 
        xWriter.Flush(); 
    }
    XmlDocument xDoc = new XmlDocument();
    xDoc.Load("data.xml");
    XmlNode root = xDoc.DocumentElement;
    Quote qout = new Quote 
    {
        InsDetails = new InsuranceDetails { Details1 = root["InsDetails"].InnerText },
        PayDetails = new PaymentDetails { Details1 = root["PayDetails"].InnerText }
    };
    Console.WriteLine("InsDetails.Details1='{0}'", qout.InsDetails.Details1); 
    Console.WriteLine("PayDetails.Details1='{0}'", qout.PayDetails.Details1);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
733
5
Gpt3D_Clone733_5.cs 1 20
Gpt3D_Clone733_5.cs 21 51
----------------------------------------

static void Main (string [] args) {
    var qin = new Quote {InsDetails = new InsuranceDetails {Details1 = "insurance details text"}, PayDetails = new PaymentDetails {Details1 = "payment details text"},};
    string xml;
    using (var stream = new MemoryStream ())
    {
        var serializer = new XmlSerializer (typeof (Quote));
        serializer.Serialize (stream, qin);
        stream.Position = 0;
        using (var sr = new StreamReader (stream))
        {
            xml = sr.ReadToEnd ();
        }} Quote qout;
    using (TextReader read = new StringReader (xml))
    {
        var deserializer = new XmlSerializer (typeof (Quote));
        var obj = deserializer.Deserialize (read);
        qout = (Quote) obj;
    } Console.WriteLine ("InsDetails.Details1='{0}'", qout.InsDetails.Details1);
    Console.WriteLine ("PayDetails.Details1='{0}'", qout.PayDetails.Details1);
}
----------------------------------------

 
static void Main(string[] args) 
{
    Quote qin = new Quote 
    {
        InsDetails = new InsuranceDetails { Details1 = "insurance details text" }, 
        PayDetails = new PaymentDetails { Details1 = "payment details text" }
    };
    XmlDocument xDoc = new XmlDocument();
    XmlNode rootNode = xDoc.CreateElement("Quote");
    xDoc.AppendChild(rootNode);
    XmlNode node = xDoc.CreateElement("InsDetails");
    node.InnerText = qin.InsDetails.Details1;
    rootNode.AppendChild(node);
    node = xDoc.CreateElement("PayDetails");
    node.InnerText = qin.PayDetails.Details1;
    rootNode.AppendChild(node);
    string xml = xDoc.OuterXml;
    TextReader reader = new StringReader(xml); 
    XmlSerializer serializer = new XmlSerializer(typeof(Quote)); 
    Quote qout = (Quote)serializer.Deserialize(reader); 
    Console.WriteLine("InsDetails.Details1='{0}'", qout.InsDetails.Details1); 
    Console.WriteLine("PayDetails.Details1='{0}'", qout.PayDetails.Details1);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
733
6
Gpt3D_Clone733_6.cs 1 20
Gpt3D_Clone733_6.cs 21 52
----------------------------------------

static void Main (string [] args) {
    var qin = new Quote {InsDetails = new InsuranceDetails {Details1 = "insurance details text"}, PayDetails = new PaymentDetails {Details1 = "payment details text"},};
    string xml;
    using (var stream = new MemoryStream ())
    {
        var serializer = new XmlSerializer (typeof (Quote));
        serializer.Serialize (stream, qin);
        stream.Position = 0;
        using (var sr = new StreamReader (stream))
        {
            xml = sr.ReadToEnd ();
        }} Quote qout;
    using (TextReader read = new StringReader (xml))
    {
        var deserializer = new XmlSerializer (typeof (Quote));
        var obj = deserializer.Deserialize (read);
        qout = (Quote) obj;
    } Console.WriteLine ("InsDetails.Details1='{0}'", qout.InsDetails.Details1);
    Console.WriteLine ("PayDetails.Details1='{0}'", qout.PayDetails.Details1);
}
----------------------------------------

 
static void Main(string[] args) 
{
    Quote qin = new Quote 
    {
        InsDetails = new InsuranceDetails { Details1 = "insurance details text" }, 
        PayDetails = new PaymentDetails { Details1 = "payment details text" }
    };
    using (XmlWriter xWriter = XmlWriter.Create("data.xml", new XmlWriterSettings { Encoding = Encoding.UTF8, OmitXmlDeclaration = true })) 
    { 
        xWriter.WriteStartElement("Quote"); 
        xWriter.WriteElementString("InsDetails", qin.InsDetails.Details1); 
        xWriter.WriteElementString("PayDetails", qin.PayDetails.Details1); 
        xWriter.WriteEndElement(); 
        xWriter.Flush(); 
    }
    XmlDocument xDoc = new XmlDocument();
    xDoc.Load("data.xml");
    XmlNode root = xDoc.DocumentElement;
    Quote qout = new Quote 
    {
        InsDetails = new InsuranceDetails { Details1 = root["InsDetails"].InnerText },
        PayDetails = new PaymentDetails { Details1 = root["PayDetails"].InnerText }
    };
    Console.WriteLine("InsDetails.Details1='{0}'", qout.InsDetails.Details1); 
    Console.WriteLine("PayDetails.Details1='{0}'", qout.PayDetails.Details1);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
733
7
Gpt3D_Clone733_7.cs 1 20
Gpt3D_Clone733_7.cs 21 47
----------------------------------------

static void Main (string [] args) {
    var qin = new Quote {InsDetails = new InsuranceDetails {Details1 = "insurance details text"}, PayDetails = new PaymentDetails {Details1 = "payment details text"},};
    string xml;
    using (var stream = new MemoryStream ())
    {
        var serializer = new XmlSerializer (typeof (Quote));
        serializer.Serialize (stream, qin);
        stream.Position = 0;
        using (var sr = new StreamReader (stream))
        {
            xml = sr.ReadToEnd ();
        }} Quote qout;
    using (TextReader read = new StringReader (xml))
    {
        var deserializer = new XmlSerializer (typeof (Quote));
        var obj = deserializer.Deserialize (read);
        qout = (Quote) obj;
    } Console.WriteLine ("InsDetails.Details1='{0}'", qout.InsDetails.Details1);
    Console.WriteLine ("PayDetails.Details1='{0}'", qout.PayDetails.Details1);
}
----------------------------------------

 
static void Main(string[] args) 
{
    Quote qin = new Quote 
    {
        InsDetails = new InsuranceDetails { Details1 = "insurance details text" }, 
        PayDetails = new PaymentDetails { Details1 = "payment details text" }
    };
    MemoryStream ms = new MemoryStream();
    StreamingContext context = new StreamingContext(StreamingContextStates.All);
    XmlSerializerNamespaces ns = new XmlSerializerNamespaces(new XmlQualifiedName[] { XmlQualifiedName.Empty });   
    XmlSerializer serializer = new XmlSerializer(typeof(Quote));
    serializer.Serialize(ms, qin, context, ns); 
    ms.Position = 0;
    byte[] byteData = new byte[ms.Length];
    ms.Read(byteData, 0, byteData.Length);
    string xml = Encoding.UTF8.GetString(byteData);
    
    TextReader reader = new StringReader(xml); 
    Quote qout = (Quote)serializer.Deserialize(reader);
    Console.WriteLine("InsDetails.Details1='{0}'", qout.InsDetails.Details1); 
    Console.WriteLine("PayDetails.Details1='{0}'", qout.PayDetails.Details1);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
733
8
Gpt3D_Clone733_8.cs 1 20
Gpt3D_Clone733_8.cs 21 52
----------------------------------------

static void Main (string [] args) {
    var qin = new Quote {InsDetails = new InsuranceDetails {Details1 = "insurance details text"}, PayDetails = new PaymentDetails {Details1 = "payment details text"},};
    string xml;
    using (var stream = new MemoryStream ())
    {
        var serializer = new XmlSerializer (typeof (Quote));
        serializer.Serialize (stream, qin);
        stream.Position = 0;
        using (var sr = new StreamReader (stream))
        {
            xml = sr.ReadToEnd ();
        }} Quote qout;
    using (TextReader read = new StringReader (xml))
    {
        var deserializer = new XmlSerializer (typeof (Quote));
        var obj = deserializer.Deserialize (read);
        qout = (Quote) obj;
    } Console.WriteLine ("InsDetails.Details1='{0}'", qout.InsDetails.Details1);
    Console.WriteLine ("PayDetails.Details1='{0}'", qout.PayDetails.Details1);
}
----------------------------------------

 
static void Main(string[] args) 
{
    Quote qin = new Quote 
    {
        InsDetails = new InsuranceDetails { Details1 = "insurance details text" }, 
        PayDetails = new PaymentDetails { Details1 = "payment details text" }
    };
    using (XmlWriter xWriter = XmlWriter.Create("data.xml")) 
    { 
        xWriter.WriteStartElement("Quote"); 
        xWriter.WriteElementString("InsDetails", qin.InsDetails.Details1); 
        xWriter.WriteElementString("PayDetails", qin.PayDetails.Details1); 
        xWriter.WriteEndElement(); 
        xWriter.Flush(); 
    }
    XmlDocument xDoc = new XmlDocument();
    xDoc.Load("data.xml");
    XmlNode root = xDoc.DocumentElement;
    Quote qout = new Quote 
    {
        InsDetails = new InsuranceDetails { Details1 = root["InsDetails"].InnerText },
        PayDetails = new PaymentDetails { Details1 = root["PayDetails"].InnerText }
    };
    Console.WriteLine("InsDetails.Details1='{0}'", qout.InsDetails.Details1); 
    Console.WriteLine("PayDetails.Details1='{0}'", qout.PayDetails.Details1);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
733
9
Gpt3D_Clone733_9.cs 1 20
Gpt3D_Clone733_9.cs 21 41
----------------------------------------

static void Main (string [] args) {
    var qin = new Quote {InsDetails = new InsuranceDetails {Details1 = "insurance details text"}, PayDetails = new PaymentDetails {Details1 = "payment details text"},};
    string xml;
    using (var stream = new MemoryStream ())
    {
        var serializer = new XmlSerializer (typeof (Quote));
        serializer.Serialize (stream, qin);
        stream.Position = 0;
        using (var sr = new StreamReader (stream))
        {
            xml = sr.ReadToEnd ();
        }} Quote qout;
    using (TextReader read = new StringReader (xml))
    {
        var deserializer = new XmlSerializer (typeof (Quote));
        var obj = deserializer.Deserialize (read);
        qout = (Quote) obj;
    } Console.WriteLine ("InsDetails.Details1='{0}'", qout.InsDetails.Details1);
    Console.WriteLine ("PayDetails.Details1='{0}'", qout.PayDetails.Details1);
}
----------------------------------------

 
static void Main(string[] args) 
{
    Quote qin = new Quote { 
        InsDetails = new InsuranceDetails { Details1 = "insurance details text" }, 
        PayDetails = new PaymentDetails { Details1 = "payment details text" }
    };
    XmlSerializer serializer = new XmlSerializer(typeof(Quote)); 
    StringWriter writer = new StringWriter(); 
    serializer.Serialize(writer, qin); 
    string xml = writer.ToString(); 
    TextReader reader = new StringReader(xml); 
    Quote qout = (Quote)serializer.Deserialize(reader); 
    Console.WriteLine("InsDetails.Details1='{0}'", qout.InsDetails.Details1); 
    Console.WriteLine("PayDetails.Details1='{0}'", qout.PayDetails.Details1);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
735
0
Gpt3D_Clone735_0.cs 1 9
Gpt3D_Clone735_0.cs 10 26
----------------------------------------

public static void AssignValueToProperty (this ObjectAccessor accessor, string propertyName, object value) {
    var index = propertyName.IndexOf ('.');
    if (index == - 1) {
        accessor [propertyName] = value;
    } else {
        accessor = ObjectAccessor.Create (accessor [propertyName.Substring (0, index)]);
        AssignValueToProperty (accessor, propertyName.Substring (index + 1), value);
    }
}
----------------------------------------

// Implementation 1
public static void AssignValueToProperty (this ObjectAccessor accessor, string propertyName, object value) 
{
    var index = 0;
    if (propertyName.Contains('.'))
    {
        index = propertyName.IndexOf ('.');
        accessor = ObjectAccessor.Create (accessor [propertyName.Substring (0, index)]);
        AssignValueToProperty (accessor, propertyName.Substring (index + 1), value);
    }
    else
    {
        accessor[propertyName] = value;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
735
1
Gpt3D_Clone735_1.cs 1 9
Gpt3D_Clone735_1.cs 10 26
----------------------------------------

public static void AssignValueToProperty (this ObjectAccessor accessor, string propertyName, object value) {
    var index = propertyName.IndexOf ('.');
    if (index == - 1) {
        accessor [propertyName] = value;
    } else {
        accessor = ObjectAccessor.Create (accessor [propertyName.Substring (0, index)]);
        AssignValueToProperty (accessor, propertyName.Substring (index + 1), value);
    }
}
----------------------------------------

// Implementation 5
public static void AssignValueToProperty (ObjectAccessor accessor, string propertyName, object value) 
{
    var index = 0;
    if (propertyName.Contains('.'))
    {
        index = propertyName.IndexOf ('.');
        accessor = ObjectAccessor.Create (accessor [propertyName.Substring (0, index)]);
        AssignValueToProperty (accessor, propertyName.Substring (index + 1), value);
    }
    else
    {
        accessor[propertyName] = value;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
735
2
Gpt3D_Clone735_2.cs 1 9
Gpt3D_Clone735_2.cs 10 25
----------------------------------------

public static void AssignValueToProperty (this ObjectAccessor accessor, string propertyName, object value) {
    var index = propertyName.IndexOf ('.');
    if (index == - 1) {
        accessor [propertyName] = value;
    } else {
        accessor = ObjectAccessor.Create (accessor [propertyName.Substring (0, index)]);
        AssignValueToProperty (accessor, propertyName.Substring (index + 1), value);
    }
}
----------------------------------------

// Implementation 7
public static void AssignValueToProperty (ObjectAccessor accessor, string propertyName, object value) 
{
    if (propertyName.Contains('.'))
    {
        var index = propertyName.IndexOf ('.');
        accessor = ObjectAccessor.Create (accessor [propertyName.Substring (0, index)]);
        AssignValueToProperty (accessor, propertyName.Substring (index + 1), value);
    }
    else
    {
        accessor[propertyName] = value;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
735
3
Gpt3D_Clone735_3.cs 1 9
Gpt3D_Clone735_3.cs 10 23
----------------------------------------

public static void AssignValueToProperty (this ObjectAccessor accessor, string propertyName, object value) {
    var index = propertyName.IndexOf ('.');
    if (index == - 1) {
        accessor [propertyName] = value;
    } else {
        accessor = ObjectAccessor.Create (accessor [propertyName.Substring (0, index)]);
        AssignValueToProperty (accessor, propertyName.Substring (index + 1), value);
    }
}
----------------------------------------

// Implementation 6
public static void AssignValueToProperty (ObjectAccessor accessor, string propertyName, object value) 
{
    var index = 0;
    while (propertyName.Contains('.'))
    {
        index = propertyName.IndexOf ('.');
        accessor = ObjectAccessor.Create (accessor [propertyName.Substring (0, index)]);
        propertyName = propertyName.Substring (index + 1);            
    } 
    accessor[propertyName] = value; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
735
4
Gpt3D_Clone735_4.cs 1 9
Gpt3D_Clone735_4.cs 10 25
----------------------------------------

public static void AssignValueToProperty (this ObjectAccessor accessor, string propertyName, object value) {
    var index = propertyName.IndexOf ('.');
    if (index == - 1) {
        accessor [propertyName] = value;
    } else {
        accessor = ObjectAccessor.Create (accessor [propertyName.Substring (0, index)]);
        AssignValueToProperty (accessor, propertyName.Substring (index + 1), value);
    }
}
----------------------------------------

// Implementation 10
public static void AssignValueToProperty (ObjectAccessor accessor, string propertyName, object value) 
{
    var index = propertyName.IndexOf ('.');
    if (index > 0) 
    {
        accessor = ObjectAccessor.Create (accessor [propertyName.Substring (0, index)]);
        AssignValueToProperty (accessor, propertyName.Substring (index + 1), value);
    } 
    else
    {
        accessor[propertyName] = value;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
735
6
Gpt3D_Clone735_6.cs 1 9
Gpt3D_Clone735_6.cs 10 25
----------------------------------------

public static void AssignValueToProperty (this ObjectAccessor accessor, string propertyName, object value) {
    var index = propertyName.IndexOf ('.');
    if (index == - 1) {
        accessor [propertyName] = value;
    } else {
        accessor = ObjectAccessor.Create (accessor [propertyName.Substring (0, index)]);
        AssignValueToProperty (accessor, propertyName.Substring (index + 1), value);
    }
}
----------------------------------------

// Implementation 9
public static void AssignValueToProperty (ObjectAccessor accessor, string propertyName, object value) 
{
    if (propertyName.IndexOf ('.') != -1) 
    { 
        var index = propertyName.IndexOf ('.');
        accessor = ObjectAccessor.Create (accessor [propertyName.Substring (0, index)]);
        AssignValueToProperty (accessor, propertyName.Substring (index + 1), value);
    } 
    else
    {
        accessor[propertyName] = value;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
735
8
Gpt3D_Clone735_8.cs 1 9
Gpt3D_Clone735_8.cs 10 22
----------------------------------------

public static void AssignValueToProperty (this ObjectAccessor accessor, string propertyName, object value) {
    var index = propertyName.IndexOf ('.');
    if (index == - 1) {
        accessor [propertyName] = value;
    } else {
        accessor = ObjectAccessor.Create (accessor [propertyName.Substring (0, index)]);
        AssignValueToProperty (accessor, propertyName.Substring (index + 1), value);
    }
}
----------------------------------------

// Implementation 8
public static void AssignValueToProperty (ObjectAccessor accessor, string propertyName, object value) 
{
    while (propertyName.Contains('.'))
    {
        var index = propertyName.IndexOf ('.');
        accessor = ObjectAccessor.Create (accessor [propertyName.Substring (0, index)]);
        propertyName = propertyName.Substring (index + 1);            
    } 
    accessor[propertyName] = value; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
735
9
Gpt3D_Clone735_9.cs 1 9
Gpt3D_Clone735_9.cs 10 22
----------------------------------------

public static void AssignValueToProperty (this ObjectAccessor accessor, string propertyName, object value) {
    var index = propertyName.IndexOf ('.');
    if (index == - 1) {
        accessor [propertyName] = value;
    } else {
        accessor = ObjectAccessor.Create (accessor [propertyName.Substring (0, index)]);
        AssignValueToProperty (accessor, propertyName.Substring (index + 1), value);
    }
}
----------------------------------------

// Implementation 2
public static void AssignValueToProperty (this ObjectAccessor accessor, string propertyName, object value) 
{
    while (propertyName.Contains('.'))
    {
        var index = propertyName.IndexOf ('.');
        accessor = ObjectAccessor.Create (accessor [propertyName.Substring (0, index)]);
        propertyName = propertyName.Substring (index + 1);            
    } 
    accessor[propertyName] = value; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
736
10
Gpt3D_Clone736_10.cs 1 14
Gpt3D_Clone736_10.cs 15 39
----------------------------------------

public static string GetAllMessages (this Exception ex) {
    if (ex == null)
        throw new ArgumentNullException ("ex");
    StringBuilder sb = new StringBuilder ();
    while (ex != null) {
        if (! string.IsNullOrEmpty (ex.Message)) {
            if (sb.Length > 0)
                sb.Append (" ");
            sb.Append (ex.Message);
        }
        ex = ex.InnerException;
    }
    return sb.ToString ();
}
----------------------------------------

 public static string GetAllMessages(this Exception ex)
{
                if(ex == null)
                    throw new ArgumentNullException("ex");
                string messages = "";
                CheckExceptionRecursively(ref ex, ref messages);
                return messages;
            }
            private static void CheckExceptionRecursively(ref Exception ex, ref string messages)
            {
                if(ex.InnerException == null)
                {
                    if(!string.IsNullOrEmpty(ex.Message))
                        messages += ex.Message + " ";
                    return;
                }
                if(!string.IsNullOrEmpty(ex.Message))
                    messages += ex.Message + " ";
                ex = ex.InnerException;
                CheckExceptionRecursively(ref ex, ref messages);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
736
11
Gpt3D_Clone736_11.cs 1 14
Gpt3D_Clone736_11.cs 15 37
----------------------------------------

public static string GetAllMessages (this Exception ex) {
    if (ex == null)
        throw new ArgumentNullException ("ex");
    StringBuilder sb = new StringBuilder ();
    while (ex != null) {
        if (! string.IsNullOrEmpty (ex.Message)) {
            if (sb.Length > 0)
                sb.Append (" ");
            sb.Append (ex.Message);
        }
        ex = ex.InnerException;
    }
    return sb.ToString ();
}
----------------------------------------

 public static string GetAllMessages(this Exception ex)
{
                if(ex == null)
                    throw new ArgumentNullException("ex");
                var messagesBuilder = new StringBuilder();
                ParseExceptionRecursively(ex, messagesBuilder);
                return messagesBuilder.ToString();
            }
            private static void ParseExceptionRecursively(Exception ex, StringBuilder messagesBuilder)
            {
                if(ex.InnerException == null)
                {
                    if(!string.IsNullOrEmpty(ex.Message))
                        messagesBuilder.Append(ex.Message);
                    return;
                }
                messagesBuilder.Append(ex.Message);
                ParseExceptionRecursively(ex.InnerException, messagesBuilder);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
736
12
Gpt3D_Clone736_12.cs 1 14
Gpt3D_Clone736_12.cs 15 38
----------------------------------------

public static string GetAllMessages (this Exception ex) {
    if (ex == null)
        throw new ArgumentNullException ("ex");
    StringBuilder sb = new StringBuilder ();
    while (ex != null) {
        if (! string.IsNullOrEmpty (ex.Message)) {
            if (sb.Length > 0)
                sb.Append (" ");
            sb.Append (ex.Message);
        }
        ex = ex.InnerException;
    }
    return sb.ToString ();
}
----------------------------------------

 public static string GetAllMessages (this Exception ex)
{
            if (ex == null)
                throw new ArgumentNullException ("ex");
            StringBuilder sb = new StringBuilder ();
            GetAllMessagesRecursively (ex.InnerException, sb, true);
            return sb.ToString ();
        }
        private static void GetAllMessagesRecursively (Exception ex, StringBuilder sb, bool prependSpace = false)
        {
            if (ex == null)
                return;
            GetAllMessagesRecursively (ex.InnerException, sb, true);
            if (prependSpace && !string.IsNullOrEmpty(ex.Message))
                sb.Append(' ');
            if (!string.IsNullOrEmpty (ex.Message))
                sb.Append (ex.Message);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
736
13
Gpt3D_Clone736_13.cs 1 14
Gpt3D_Clone736_13.cs 15 38
----------------------------------------

public static string GetAllMessages (this Exception ex) {
    if (ex == null)
        throw new ArgumentNullException ("ex");
    StringBuilder sb = new StringBuilder ();
    while (ex != null) {
        if (! string.IsNullOrEmpty (ex.Message)) {
            if (sb.Length > 0)
                sb.Append (" ");
            sb.Append (ex.Message);
        }
        ex = ex.InnerException;
    }
    return sb.ToString ();
}
----------------------------------------

 public static string GetAllMessages(this Exception ex)
{
                if(ex == null)
                    throw new ArgumentNullException("ex");
                var messages = new List<string>();
                CheckExceptionRecursively(ex, ref messages);
                return string.Join(" ", messages);
            }
            private static void CheckExceptionRecursively(Exception ex, ref List<string> messages)
            {
                if(ex.InnerException == null)
                {
                    if(!string.IsNullOrEmpty(ex.Message))
                        messages.Add(ex.Message);
                    return;
                }
                messages.Add(ex.Message);
                ex = ex.InnerException;
                CheckExceptionRecursively(ex, ref messages);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
736
14
Gpt3D_Clone736_14.cs 1 14
Gpt3D_Clone736_14.cs 15 35
----------------------------------------

public static string GetAllMessages (this Exception ex) {
    if (ex == null)
        throw new ArgumentNullException ("ex");
    StringBuilder sb = new StringBuilder ();
    while (ex != null) {
        if (! string.IsNullOrEmpty (ex.Message)) {
            if (sb.Length > 0)
                sb.Append (" ");
            sb.Append (ex.Message);
        }
        ex = ex.InnerException;
    }
    return sb.ToString ();
}
----------------------------------------

 public static string GetAllMessages (this Exception ex) 
{
                if (ex == null)
                    throw new ArgumentNullException ("ex");
                List<string> allMessages = new List<string> ();
                GetAllMessagesRecursively (ex, allMessages);
                return string.Join(" ", allMessages);
            }
            private static void GetAllMessagesRecursively (Exception ex, List<string> allMessages)
            {
                if (!string.IsNullOrEmpty (ex.Message)) 
                    allMessages.Add (ex.Message);
                if (ex.InnerException != null) 
                    GetAllMessagesRecursively (ex.InnerException, allMessages);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
736
2
Gpt3D_Clone736_2.cs 1 14
Gpt3D_Clone736_2.cs 15 32
----------------------------------------

public static string GetAllMessages (this Exception ex) {
    if (ex == null)
        throw new ArgumentNullException ("ex");
    StringBuilder sb = new StringBuilder ();
    while (ex != null) {
        if (! string.IsNullOrEmpty (ex.Message)) {
            if (sb.Length > 0)
                sb.Append (" ");
            sb.Append (ex.Message);
        }
        ex = ex.InnerException;
    }
    return sb.ToString ();
}
----------------------------------------

 public static string GetAllMessages(this Exception ex)
{
    if(ex == null)
        throw new ArgumentNullException("ex");
    string messages = "";
    while(ex != null)
    {
        if(!string.IsNullOrEmpty(ex.Message))
            messages += ex.Message + " ";
        ex = ex.InnerException;
    }
    return messages;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
736
4
Gpt3D_Clone736_4.cs 1 14
Gpt3D_Clone736_4.cs 15 39
----------------------------------------

public static string GetAllMessages (this Exception ex) {
    if (ex == null)
        throw new ArgumentNullException ("ex");
    StringBuilder sb = new StringBuilder ();
    while (ex != null) {
        if (! string.IsNullOrEmpty (ex.Message)) {
            if (sb.Length > 0)
                sb.Append (" ");
            sb.Append (ex.Message);
        }
        ex = ex.InnerException;
    }
    return sb.ToString ();
}
----------------------------------------

 public static string GetAllMessages(this Exception ex)
{
                if(ex == null)
                    throw new ArgumentNullException("ex");
                string messages = "";
                CheckExceptionRecursively(ref ex, ref messages);
                return messages;
            }
            private static void CheckExceptionRecursively(ref Exception ex, ref string messages)
            {
                if(ex.InnerException == null)
                {
                    if(!string.IsNullOrEmpty(ex.Message))
                        messages += ex.Message + " ";
                    return;
                }
                if(!string.IsNullOrEmpty(ex.Message))
                    messages += ex.Message + " ";
                ex = ex.InnerException;
                CheckExceptionRecursively(ref ex, ref messages);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
736
5
Gpt3D_Clone736_5.cs 1 14
Gpt3D_Clone736_5.cs 15 38
----------------------------------------

public static string GetAllMessages (this Exception ex) {
    if (ex == null)
        throw new ArgumentNullException ("ex");
    StringBuilder sb = new StringBuilder ();
    while (ex != null) {
        if (! string.IsNullOrEmpty (ex.Message)) {
            if (sb.Length > 0)
                sb.Append (" ");
            sb.Append (ex.Message);
        }
        ex = ex.InnerException;
    }
    return sb.ToString ();
}
----------------------------------------

 public static string GetAllMessages (this Exception ex)
{
            if (ex == null)
                throw new ArgumentNullException ("ex");
            StringBuilder sb = new StringBuilder ();
            GetAllMessagesRecursively (ex.InnerException, sb, true);
            return sb.ToString ();
        }
        private static void GetAllMessagesRecursively (Exception ex, StringBuilder sb, bool prependSpace = false)
        {
            if (ex == null)
                return;
            GetAllMessagesRecursively (ex.InnerException, sb, true);
            if (prependSpace && !string.IsNullOrEmpty(ex.Message))
                sb.Append(' ');
            if (!string.IsNullOrEmpty (ex.Message))
                sb.Append (ex.Message);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
736
6
Gpt3D_Clone736_6.cs 1 14
Gpt3D_Clone736_6.cs 15 38
----------------------------------------

public static string GetAllMessages (this Exception ex) {
    if (ex == null)
        throw new ArgumentNullException ("ex");
    StringBuilder sb = new StringBuilder ();
    while (ex != null) {
        if (! string.IsNullOrEmpty (ex.Message)) {
            if (sb.Length > 0)
                sb.Append (" ");
            sb.Append (ex.Message);
        }
        ex = ex.InnerException;
    }
    return sb.ToString ();
}
----------------------------------------

 public static string GetAllMessages(this Exception ex)
{
                if(ex == null)
                    throw new ArgumentNullException("ex");
                var messages = new List<string>();
                CheckExceptionRecursively(ex, ref messages);
                return string.Join(" ", messages);
            }
            private static void CheckExceptionRecursively(Exception ex, ref List<string> messages)
            {
                if(ex.InnerException == null)
                {
                    if(!string.IsNullOrEmpty(ex.Message))
                        messages.Add(ex.Message);
                    return;
                }
                messages.Add(ex.Message);
                ex = ex.InnerException;
                CheckExceptionRecursively(ex, ref messages);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
736
7
Gpt3D_Clone736_7.cs 1 14
Gpt3D_Clone736_7.cs 15 37
----------------------------------------

public static string GetAllMessages (this Exception ex) {
    if (ex == null)
        throw new ArgumentNullException ("ex");
    StringBuilder sb = new StringBuilder ();
    while (ex != null) {
        if (! string.IsNullOrEmpty (ex.Message)) {
            if (sb.Length > 0)
                sb.Append (" ");
            sb.Append (ex.Message);
        }
        ex = ex.InnerException;
    }
    return sb.ToString ();
}
----------------------------------------

 public static string GetAllMessages(this Exception ex)
{
                if(ex == null)
                    throw new ArgumentNullException("ex");
                var messagesBuilder = new StringBuilder();
                ParseExceptionRecursively(ex, messagesBuilder);
                return messagesBuilder.ToString();
            }
            private static void ParseExceptionRecursively(Exception ex, StringBuilder messagesBuilder)
            {
                if(ex.InnerException == null)
                {
                    if(!string.IsNullOrEmpty(ex.Message))
                        messagesBuilder.Append(ex.Message);
                    return;
                }
                messagesBuilder.Append(ex.Message);
                ParseExceptionRecursively(ex.InnerException, messagesBuilder);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
736
8
Gpt3D_Clone736_8.cs 1 14
Gpt3D_Clone736_8.cs 15 27
----------------------------------------

public static string GetAllMessages (this Exception ex) {
    if (ex == null)
        throw new ArgumentNullException ("ex");
    StringBuilder sb = new StringBuilder ();
    while (ex != null) {
        if (! string.IsNullOrEmpty (ex.Message)) {
            if (sb.Length > 0)
                sb.Append (" ");
            sb.Append (ex.Message);
        }
        ex = ex.InnerException;
    }
    return sb.ToString ();
}
----------------------------------------

private static void GetAllMessagesRecursively (Exception ex, StringBuilder sb)
{
    if (! string.IsNullOrEmpty (ex.Message))
    {
        if (sb.Length > 0)
            sb.Append (" ");
        sb.Append (ex.Message);
    }
    if (ex.InnerException != null)
        GetAllMessagesRecursively (ex.InnerException, sb);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
736
9
Gpt3D_Clone736_9.cs 1 14
Gpt3D_Clone736_9.cs 15 35
----------------------------------------

public static string GetAllMessages (this Exception ex) {
    if (ex == null)
        throw new ArgumentNullException ("ex");
    StringBuilder sb = new StringBuilder ();
    while (ex != null) {
        if (! string.IsNullOrEmpty (ex.Message)) {
            if (sb.Length > 0)
                sb.Append (" ");
            sb.Append (ex.Message);
        }
        ex = ex.InnerException;
    }
    return sb.ToString ();
}
----------------------------------------

 public static string GetAllMessages (this Exception ex) 
{
                if (ex == null)
                    throw new ArgumentNullException ("ex");
                List<string> allMessages = new List<string> ();
                GetAllMessagesRecursively (ex, allMessages);
                return string.Join(" ", allMessages);
            }
            private static void GetAllMessagesRecursively (Exception ex, List<string> allMessages)
            {
                if (!string.IsNullOrEmpty (ex.Message)) 
                    allMessages.Add (ex.Message);
                if (ex.InnerException != null) 
                    GetAllMessagesRecursively (ex.InnerException, allMessages);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
742
0
Gpt3D_Clone742_0.cs 1 40
Gpt3D_Clone742_0.cs 41 79
----------------------------------------

static Result Play (Input userInput) {
    Input computer = Input.Scissors;
    switch (userInput) {
        case Input.Paper :
            switch (computer) {
                case Input.Paper :
                    return Result.Draw;
                case Input.Rock :
                    return Result.Win;
                case Input.Scissors :
                    return Result.Lose;
                default :
                    throw new Exception ("Logic fail.");
            }
        case Input.Rock :
            switch (computer) {
                case Input.Paper :
                    return Result.Lose;
                case Input.Rock :
                    return Result.Draw;
                case Input.Scissors :
                    return Result.Win;
                default :
                    throw new Exception ("Logic fail.");
            }
        case Input.Scissors :
            switch (computer) {
                case Input.Paper :
                    return Result.Win;
                case Input.Rock :
                    return Result.Lose;
                case Input.Scissors :
                    return Result.Draw;
                default :
                    throw new Exception ("Logic fail.");
            }
        default :
            throw new Exception ("Logic fail.");
    }
}
----------------------------------------

 Result Play(Input userInput) {
   Input computer = Input.Scissors;
   switch (userInput) {
      case Input.Paper:
         if (computer == Input.Paper) {
            return Result.Draw;
         }
         else if (computer == Input.Rock) {
            return Result.Win;
         }
         else if (computer == Input.Scissors) {
            return Result.Lose;
         }
      case Input.Rock:
         if (computer == Input.Paper) {
            return Result.Lose;
         }
         else if (computer == Input.Rock) {
            return Result.Draw;
         }
         else if (computer == Input.Scissors) {
            return Result.Win;
         }
      case Input.Scissors:
         if (computer == Input.Paper) {
            return Result.Win;
         }
         else if (computer == Input.Rock) {
            return Result.Lose;
         }
         else if (computer == Input.Scissors) {
            return Result.Draw;
         }
   }
   throw new Exception("Logic fail.");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
742
1
Gpt3D_Clone742_1.cs 1 40
Gpt3D_Clone742_1.cs 41 80
----------------------------------------

static Result Play (Input userInput) {
    Input computer = Input.Scissors;
    switch (userInput) {
        case Input.Paper :
            switch (computer) {
                case Input.Paper :
                    return Result.Draw;
                case Input.Rock :
                    return Result.Win;
                case Input.Scissors :
                    return Result.Lose;
                default :
                    throw new Exception ("Logic fail.");
            }
        case Input.Rock :
            switch (computer) {
                case Input.Paper :
                    return Result.Lose;
                case Input.Rock :
                    return Result.Draw;
                case Input.Scissors :
                    return Result.Win;
                default :
                    throw new Exception ("Logic fail.");
            }
        case Input.Scissors :
            switch (computer) {
                case Input.Paper :
                    return Result.Win;
                case Input.Rock :
                    return Result.Lose;
                case Input.Scissors :
                    return Result.Draw;
                default :
                    throw new Exception ("Logic fail.");
            }
        default :
            throw new Exception ("Logic fail.");
    }
}
----------------------------------------

 Result Play(Input userInput) {
    Input computer = Input.Scissors;
    Result output;
    if (userInput == Input.Paper) {
       if (computer == Input.Paper) {
          output = Result.Draw;
       }
       else if (computer == Input.Rock) {
          output = Result.Win;
       }
       else {
          output = Result.Lose;
       }
    }
    else if (userInput == Input.Rock) {
       if (computer == Input.Paper) {
          output = Result.Lose;
       }
       else if (computer == Input.Rock) {
          output = Result.Draw;
       }
       else {
          output = Result.Win;
       }
    }
    else {
       if (computer == Input.Paper) {
          output = Result.Win;
       }
       else if (computer == Input.Rock) {
          output = Result.Lose;
       }
       else {
          output = Result.Draw;
       }
    }
    return output;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
742
2
Gpt3D_Clone742_2.cs 1 40
Gpt3D_Clone742_2.cs 41 79
----------------------------------------

static Result Play (Input userInput) {
    Input computer = Input.Scissors;
    switch (userInput) {
        case Input.Paper :
            switch (computer) {
                case Input.Paper :
                    return Result.Draw;
                case Input.Rock :
                    return Result.Win;
                case Input.Scissors :
                    return Result.Lose;
                default :
                    throw new Exception ("Logic fail.");
            }
        case Input.Rock :
            switch (computer) {
                case Input.Paper :
                    return Result.Lose;
                case Input.Rock :
                    return Result.Draw;
                case Input.Scissors :
                    return Result.Win;
                default :
                    throw new Exception ("Logic fail.");
            }
        case Input.Scissors :
            switch (computer) {
                case Input.Paper :
                    return Result.Win;
                case Input.Rock :
                    return Result.Lose;
                case Input.Scissors :
                    return Result.Draw;
                default :
                    throw new Exception ("Logic fail.");
            }
        default :
            throw new Exception ("Logic fail.");
    }
}
----------------------------------------

 Result Play(Input userInput) {
    Input computer = Input.Scissors;
    if (userInput == Input.Paper) {
        if (computer == Input.Paper) {
            return Result.Draw;
        }
        else if (computer == Input.Rock) {
            return Result.Win;
        }
        else if (computer == Input.Scissors) {
            return Result.Lose;
        }
    }
    else if (userInput == Input.Rock) {
        if (computer == Input.Paper) {
            return Result.Lose;
        }
        else if (computer == Input.Rock) {
            return Result.Draw;
        }
        else if (computer == Input.Scissors) {
            return Result.Win;
        }
    }
    else if (userInput == Input.Scissors) {
        if (computer == Input.Paper) {
            return Result.Win;
        }
        else if (computer == Input.Rock) {
            return Result.Lose;
        }
        else if (computer == Input.Scissors) {
            return Result.Draw;
        }
    }
    throw new Exception("Logic fail.");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
742
3
Gpt3D_Clone742_3.cs 1 40
Gpt3D_Clone742_3.cs 41 60
----------------------------------------

static Result Play (Input userInput) {
    Input computer = Input.Scissors;
    switch (userInput) {
        case Input.Paper :
            switch (computer) {
                case Input.Paper :
                    return Result.Draw;
                case Input.Rock :
                    return Result.Win;
                case Input.Scissors :
                    return Result.Lose;
                default :
                    throw new Exception ("Logic fail.");
            }
        case Input.Rock :
            switch (computer) {
                case Input.Paper :
                    return Result.Lose;
                case Input.Rock :
                    return Result.Draw;
                case Input.Scissors :
                    return Result.Win;
                default :
                    throw new Exception ("Logic fail.");
            }
        case Input.Scissors :
            switch (computer) {
                case Input.Paper :
                    return Result.Win;
                case Input.Rock :
                    return Result.Lose;
                case Input.Scissors :
                    return Result.Draw;
                default :
                    throw new Exception ("Logic fail.");
            }
        default :
            throw new Exception ("Logic fail.");
    }
}
----------------------------------------

 Result Play(Input userInput) {
    Input computer = Input.Scissors;
    int player = userInput.ordinal() + 1;
    int comp = computer.ordinal() + 1;
    int result = comp - player;
    switch (result) {
       case 0:
          return Result.Draw;
       case -1:
       case 2:
          return Result.Win;
       case 1:
       case -2:
          return Result.Lose;
       default:
          throw new Exception("Logic fail.");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
742
4
Gpt3D_Clone742_4.cs 1 40
Gpt3D_Clone742_4.cs 41 62
----------------------------------------

static Result Play (Input userInput) {
    Input computer = Input.Scissors;
    switch (userInput) {
        case Input.Paper :
            switch (computer) {
                case Input.Paper :
                    return Result.Draw;
                case Input.Rock :
                    return Result.Win;
                case Input.Scissors :
                    return Result.Lose;
                default :
                    throw new Exception ("Logic fail.");
            }
        case Input.Rock :
            switch (computer) {
                case Input.Paper :
                    return Result.Lose;
                case Input.Rock :
                    return Result.Draw;
                case Input.Scissors :
                    return Result.Win;
                default :
                    throw new Exception ("Logic fail.");
            }
        case Input.Scissors :
            switch (computer) {
                case Input.Paper :
                    return Result.Win;
                case Input.Rock :
                    return Result.Lose;
                case Input.Scissors :
                    return Result.Draw;
                default :
                    throw new Exception ("Logic fail.");
            }
        default :
            throw new Exception ("Logic fail.");
    }
}
----------------------------------------

 Result Play(Input userInput) {
   Input computer = Input.Scissors;
   Result output;
   if (userInput == computer) {
      output = Result.Draw;
   }
   else if (userInput == Input.Paper && computer == Input.Rock) {
      output = Result.Win;
   }
   else if (userInput == Input.Rock && computer == Input.Scissors) {
      output = Result.Win;
   }
   else if (userInput == Input.Scissors && computer == Input.Paper) {
      output = Result.Win;
   }
   else {
      output = Result.Lose;
   }
   return output;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
742
5
Gpt3D_Clone742_5.cs 1 40
Gpt3D_Clone742_5.cs 41 60
----------------------------------------

static Result Play (Input userInput) {
    Input computer = Input.Scissors;
    switch (userInput) {
        case Input.Paper :
            switch (computer) {
                case Input.Paper :
                    return Result.Draw;
                case Input.Rock :
                    return Result.Win;
                case Input.Scissors :
                    return Result.Lose;
                default :
                    throw new Exception ("Logic fail.");
            }
        case Input.Rock :
            switch (computer) {
                case Input.Paper :
                    return Result.Lose;
                case Input.Rock :
                    return Result.Draw;
                case Input.Scissors :
                    return Result.Win;
                default :
                    throw new Exception ("Logic fail.");
            }
        case Input.Scissors :
            switch (computer) {
                case Input.Paper :
                    return Result.Win;
                case Input.Rock :
                    return Result.Lose;
                case Input.Scissors :
                    return Result.Draw;
                default :
                    throw new Exception ("Logic fail.");
            }
        default :
            throw new Exception ("Logic fail.");
    }
}
----------------------------------------

 Result Play(Input userInput) {
   Input computer = Input.Scissors;
   int player = userInput.ordinal();
   int comp = computer.ordinal();
   int result = comp - player;
   switch (result) {
      case -2:
      case 1:
         return Result.Win;
      case 0:
         return Result.Draw;
      case -1:
      case 2:
         return Result.Lose;
      default:
         throw new Exception("Logic fail.");
   }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
742
6
Gpt3D_Clone742_6.cs 1 40
Gpt3D_Clone742_6.cs 41 55
----------------------------------------

static Result Play (Input userInput) {
    Input computer = Input.Scissors;
    switch (userInput) {
        case Input.Paper :
            switch (computer) {
                case Input.Paper :
                    return Result.Draw;
                case Input.Rock :
                    return Result.Win;
                case Input.Scissors :
                    return Result.Lose;
                default :
                    throw new Exception ("Logic fail.");
            }
        case Input.Rock :
            switch (computer) {
                case Input.Paper :
                    return Result.Lose;
                case Input.Rock :
                    return Result.Draw;
                case Input.Scissors :
                    return Result.Win;
                default :
                    throw new Exception ("Logic fail.");
            }
        case Input.Scissors :
            switch (computer) {
                case Input.Paper :
                    return Result.Win;
                case Input.Rock :
                    return Result.Lose;
                case Input.Scissors :
                    return Result.Draw;
                default :
                    throw new Exception ("Logic fail.");
            }
        default :
            throw new Exception ("Logic fail.");
    }
}
----------------------------------------

 Result Play(Input userInput) {
    Input computer = Input.Scissors;
    switch (userInput) {
        case Input.Paper:
            return (computer == Input.Paper) ? Result.Draw : (computer == Input.Rock) ? Result.Win : Result.Lose;
        case Input.Rock:
            return (computer == Input.Paper) ? Result.Lose : (computer == Input.Rock) ? Result.Draw : Result.Win;
        case Input.Scissors:
            return (computer == Input.Paper) ? Result.Win : (computer == Input.Rock) ? Result.Lose : Result.Draw;
        default:
            throw new Exception("Logic fail.");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
742
7
Gpt3D_Clone742_7.cs 1 40
Gpt3D_Clone742_7.cs 41 58
----------------------------------------

static Result Play (Input userInput) {
    Input computer = Input.Scissors;
    switch (userInput) {
        case Input.Paper :
            switch (computer) {
                case Input.Paper :
                    return Result.Draw;
                case Input.Rock :
                    return Result.Win;
                case Input.Scissors :
                    return Result.Lose;
                default :
                    throw new Exception ("Logic fail.");
            }
        case Input.Rock :
            switch (computer) {
                case Input.Paper :
                    return Result.Lose;
                case Input.Rock :
                    return Result.Draw;
                case Input.Scissors :
                    return Result.Win;
                default :
                    throw new Exception ("Logic fail.");
            }
        case Input.Scissors :
            switch (computer) {
                case Input.Paper :
                    return Result.Win;
                case Input.Rock :
                    return Result.Lose;
                case Input.Scissors :
                    return Result.Draw;
                default :
                    throw new Exception ("Logic fail.");
            }
        default :
            throw new Exception ("Logic fail.");
    }
}
----------------------------------------

 Result Play(Input userInput) {
    Input computer = Input.Scissors;
    if ((userInput == Input.Paper && computer == Input.Paper) || (userInput == Input.Rock && computer == Input.Rock) 
    || (userInput == Input.Scissors && computer == Input.Scissors)) {
        return Result.Draw;
    }
    if ((userInput == Input.Paper && computer == Input.Rock) || (userInput == Input.Rock && computer == Input.Scissors) 
    || (userInput == Input.Scissors && computer == Input.Paper)) {
        return Result.Win;
    }
    if ((userInput == Input.Paper && computer == Input.Scissors) || (userInput == Input.Rock && computer == Input.Paper) 
    || (userInput == Input.Scissors && computer == Input.Rock)) {
        return Result.Lose;
    }
    throw new Exception("Logic fail.");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
742
8
Gpt3D_Clone742_8.cs 1 40
Gpt3D_Clone742_8.cs 41 59
----------------------------------------

static Result Play (Input userInput) {
    Input computer = Input.Scissors;
    switch (userInput) {
        case Input.Paper :
            switch (computer) {
                case Input.Paper :
                    return Result.Draw;
                case Input.Rock :
                    return Result.Win;
                case Input.Scissors :
                    return Result.Lose;
                default :
                    throw new Exception ("Logic fail.");
            }
        case Input.Rock :
            switch (computer) {
                case Input.Paper :
                    return Result.Lose;
                case Input.Rock :
                    return Result.Draw;
                case Input.Scissors :
                    return Result.Win;
                default :
                    throw new Exception ("Logic fail.");
            }
        case Input.Scissors :
            switch (computer) {
                case Input.Paper :
                    return Result.Win;
                case Input.Rock :
                    return Result.Lose;
                case Input.Scissors :
                    return Result.Draw;
                default :
                    throw new Exception ("Logic fail.");
            }
        default :
            throw new Exception ("Logic fail.");
    }
}
----------------------------------------

 Result Play(Input userInput) {
   Input computer = Input.Scissors;
   if (userInput == computer) {
      return Result.Draw;
   }
   else if ((userInput == Input.Paper && computer == Input.Rock) ||
            (userInput == Input.Rock && computer == Input.Scissors) ||
            (userInput == Input.Scissors && computer == Input.Paper)) {
      return Result.Win;
   }
   else if ((userInput == Input.Paper && computer == Input.Scissors) ||
            (userInput == Input.Rock && computer == Input.Paper) ||
            (userInput == Input.Scissors && computer == Input.Rock)) {
      return Result.Lose;
   }
   throw new Exception("Logic fail.");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
743
0
Gpt3D_Clone743_0.cs 1 11
Gpt3D_Clone743_0.cs 12 29
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    textBox2.Clear ();
    try {
        float v = float.Parse (textBox1.Text);
        textBox2.AppendText ((Math.Sin (v)).ToString ());
    }
    catch {
        textBox2.Clear ();
        textBox2.AppendText ("Invalid Input");
    }
}
----------------------------------------

 private void button1_Click (object sender, EventArgs e) {
    textBox2.Clear();
    var input = textBox1.Text;
    double formattedInput;
    if (double.TryParse(input, out formattedInput))
    {
        textBox2.AppendText((Math.Sin(formattedInput)).ToString());
    }
    else
    {
        textBox2.AppendText("Invalid Input");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
743
1
Gpt3D_Clone743_1.cs 1 11
Gpt3D_Clone743_1.cs 12 26
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    textBox2.Clear ();
    try {
        float v = float.Parse (textBox1.Text);
        textBox2.AppendText ((Math.Sin (v)).ToString ());
    }
    catch {
        textBox2.Clear ();
        textBox2.AppendText ("Invalid Input");
    }
}
----------------------------------------

 private void button1_Click (object sender, EventArgs e) {
    textBox2.Clear ();
    float num;
    bool validValue = float.TryParse (textBox1.Text, out num);  
    if(validValue)
    {
        textBox2.AppendText((Math.Sin(num)).ToString());
    }   
    else
    {
        textBox2.AppendText("Invalid Input");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
743
2
Gpt3D_Clone743_2.cs 1 11
Gpt3D_Clone743_2.cs 12 25
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    textBox2.Clear ();
    try {
        float v = float.Parse (textBox1.Text);
        textBox2.AppendText ((Math.Sin (v)).ToString ());
    }
    catch {
        textBox2.Clear ();
        textBox2.AppendText ("Invalid Input");
    }
}
----------------------------------------

 private void button1_Click (object sender, EventArgs e) {
    textBox2.Clear ();
    double parseValue;
    if(double.TryParse(textBox1.Text, out parseValue))
    {
        textBox2.AppendText((Math.Sin(parseValue)).ToString());
    }
    else
    {
        textBox2.AppendText("Invalid Input");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
743
3
Gpt3D_Clone743_3.cs 1 11
Gpt3D_Clone743_3.cs 12 25
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    textBox2.Clear ();
    try {
        float v = float.Parse (textBox1.Text);
        textBox2.AppendText ((Math.Sin (v)).ToString ());
    }
    catch {
        textBox2.Clear ();
        textBox2.AppendText ("Invalid Input");
    }
}
----------------------------------------

 private void button1_Click (object sender, EventArgs e) {
    textBox2.Clear ();
    short num;
    if (short.TryParse (textBox1.Text, out num))
    {
        textBox2.AppendText ((Math.Sin (num)).ToString ());
    } 
    else
    {
        textBox2.AppendText ("Invalid Input");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
743
4
Gpt3D_Clone743_4.cs 1 11
Gpt3D_Clone743_4.cs 12 25
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    textBox2.Clear ();
    try {
        float v = float.Parse (textBox1.Text);
        textBox2.AppendText ((Math.Sin (v)).ToString ());
    }
    catch {
        textBox2.Clear ();
        textBox2.AppendText ("Invalid Input");
    }
}
----------------------------------------

 private void button1_Click (object sender, EventArgs e) {
    textBox2.Clear ();
    double num;
    if(double.TryParse(textBox1.Text, out num))
    {
        textBox2.AppendText((Math.Sin(num)).ToString());
    }   
    else
    {
        textBox2.AppendText("Invalid Input");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
743
5
Gpt3D_Clone743_5.cs 1 11
Gpt3D_Clone743_5.cs 12 25
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    textBox2.Clear ();
    try {
        float v = float.Parse (textBox1.Text);
        textBox2.AppendText ((Math.Sin (v)).ToString ());
    }
    catch {
        textBox2.Clear ();
        textBox2.AppendText ("Invalid Input");
    }
}
----------------------------------------

 private void button1_Click (object sender, EventArgs e) {
    textBox2.Clear ();
    Single result;
    if(Single.TryParse(textBox1.Text, out result))
    {
        textBox2.AppendText((Math.Sin(result)).ToString());
    }
    else
    {
        textBox2.AppendText("Invalid Input");
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
743
6
Gpt3D_Clone743_6.cs 1 11
Gpt3D_Clone743_6.cs 12 25
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    textBox2.Clear ();
    try {
        float v = float.Parse (textBox1.Text);
        textBox2.AppendText ((Math.Sin (v)).ToString ());
    }
    catch {
        textBox2.Clear ();
        textBox2.AppendText ("Invalid Input");
    }
}
----------------------------------------

 private void button1_Click (object sender, EventArgs e) {
    textBox2.Clear ();
    decimal num;
    if (Decimal.TryParse (textBox1.Text, out num))
    {
        textBox2.AppendText ( (Math.Sin (num)).ToString ());
    }
    else
    {
        textBox2.AppendText ("Invalid Input");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
743
7
Gpt3D_Clone743_7.cs 1 11
Gpt3D_Clone743_7.cs 12 25
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    textBox2.Clear ();
    try {
        float v = float.Parse (textBox1.Text);
        textBox2.AppendText ((Math.Sin (v)).ToString ());
    }
    catch {
        textBox2.Clear ();
        textBox2.AppendText ("Invalid Input");
    }
}
----------------------------------------

 private void button1_Click (object sender, EventArgs e) {
    textBox2.Clear();
    double result = 0;
    if(double.TryParse(textBox1.Text, out result))
    {
        textBox2.AppendText((Math.Sin(result)).ToString());
    }
    else   
    {
        textBox2.AppendText("Invalid Input");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
743
8
Gpt3D_Clone743_8.cs 1 11
Gpt3D_Clone743_8.cs 12 25
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    textBox2.Clear ();
    try {
        float v = float.Parse (textBox1.Text);
        textBox2.AppendText ((Math.Sin (v)).ToString ());
    }
    catch {
        textBox2.Clear ();
        textBox2.AppendText ("Invalid Input");
    }
}
----------------------------------------

 private void button1_Click (object sender, EventArgs e) {
    textBox2.Clear ();
    float num;
    if(float.TryParse(textBox1.Text, out num))
    {
        textBox2.AppendText((Math.Sin(num)).ToString());
    }
    else
    {
        textBox2.AppendText("Invalid Input");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
743
9
Gpt3D_Clone743_9.cs 1 11
Gpt3D_Clone743_9.cs 12 22
----------------------------------------

private void button1_Click (object sender, EventArgs e) {
    textBox2.Clear ();
    try {
        float v = float.Parse (textBox1.Text);
        textBox2.AppendText ((Math.Sin (v)).ToString ());
    }
    catch {
        textBox2.Clear ();
        textBox2.AppendText ("Invalid Input");
    }
}
----------------------------------------

 private void button1_Click (object sender, EventArgs e) {
    textBox2.Clear ();
    decimal num;
    if (decimal.TryParse (textBox1.Text, out num)) {
        textBox2.AppendText ((Math.Sin (num)).ToString ());
    } else {
        textBox2.AppendText ("Invalid Input");
    }    
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
744
0
Gpt3D_Clone744_0.cs 1 16
Gpt3D_Clone744_0.cs 17 44
----------------------------------------

private static string GetPropertyName < TPropertySource > (Expression < Func < TPropertySource, object > > expression) {
    var lambda = expression as LambdaExpression;
    MemberExpression memberExpression;
    if (lambda.Body is UnaryExpression) {
        var unaryExpression = lambda.Body as UnaryExpression;
        memberExpression = unaryExpression.Operand as MemberExpression;
    } else {
        memberExpression = lambda.Body as MemberExpression;
    }
    Debug.Assert (memberExpression != null, "Please provide a lambda expression like 'n => n.PropertyName'");
    if (memberExpression != null) {
        var propertyInfo = memberExpression.Member as PropertyInfo;
        return propertyInfo.Name;
    }
    return null;
}
----------------------------------------

 private static string GetPropertyName < TPropertySource > (Expression < Func < TPropertySource, object > > expression) {
    string propertyName = null;
    var expressionBody = expression.Body;
    var unaryExpression = expressionBody as UnaryExpression;
    if (unaryExpression != null) {
        MemberExpression memberExpression = unaryExpression.Operand as MemberExpression;
        if (memberExpression != null) {
            var propertyInfo = memberExpression.Member as PropertyInfo;
            propertyName = propertyInfo.Name;
        } else {
            Debug.Assert(memberExpression != null, "Please provide a lambda expression like 'n => n.PropertyName'");
        }
    } else {
       MemberExpression memberExpression = expressionBody as MemberExpression;
        var propertyInfo = memberExpression.Member as PropertyInfo;
        propertyName = propertyInfo.Name;
    }
    return propertyName;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
744
2
Gpt3D_Clone744_2.cs 1 16
Gpt3D_Clone744_2.cs 17 36
----------------------------------------

private static string GetPropertyName < TPropertySource > (Expression < Func < TPropertySource, object > > expression) {
    var lambda = expression as LambdaExpression;
    MemberExpression memberExpression;
    if (lambda.Body is UnaryExpression) {
        var unaryExpression = lambda.Body as UnaryExpression;
        memberExpression = unaryExpression.Operand as MemberExpression;
    } else {
        memberExpression = lambda.Body as MemberExpression;
    }
    Debug.Assert (memberExpression != null, "Please provide a lambda expression like 'n => n.PropertyName'");
    if (memberExpression != null) {
        var propertyInfo = memberExpression.Member as PropertyInfo;
        return propertyInfo.Name;
    }
    return null;
}
----------------------------------------

 private static string GetPropertyName < TPropertySource > (Expression < Func < TPropertySource, object > > expression) {
    string propertyName = null;
    var expressionBody = expression.Body;
    MemberExpression memberExpression;
    if (expressionBody is UnaryExpression) {
        memberExpression = (expressionBody as UnaryExpression).Operand as MemberExpression;
    } else {
        memberExpression = expressionBody as MemberExpression;
    }
    if (memberExpression != null) {
        var propertyInfo = memberExpression.Member as PropertyInfo;
        propertyName = propertyInfo.Name;
    } else {
        Debug.Assert(memberExpression != null, "Please provide a lambda expression like 'n => n.PropertyName'");
    }
    return propertyName;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
744
3
Gpt3D_Clone744_3.cs 1 16
Gpt3D_Clone744_3.cs 17 41
----------------------------------------

private static string GetPropertyName < TPropertySource > (Expression < Func < TPropertySource, object > > expression) {
    var lambda = expression as LambdaExpression;
    MemberExpression memberExpression;
    if (lambda.Body is UnaryExpression) {
        var unaryExpression = lambda.Body as UnaryExpression;
        memberExpression = unaryExpression.Operand as MemberExpression;
    } else {
        memberExpression = lambda.Body as MemberExpression;
    }
    Debug.Assert (memberExpression != null, "Please provide a lambda expression like 'n => n.PropertyName'");
    if (memberExpression != null) {
        var propertyInfo = memberExpression.Member as PropertyInfo;
        return propertyInfo.Name;
    }
    return null;
}
----------------------------------------

  private static string GetPropertyName<TPropertySource>(Expression<Func<TPropertySource, object>> expression)
    {
        var expressionBody = expression.Body;
        MemberExpression memberExpression;
        if (expressionBody is UnaryExpression unaryExpression)
        {
            memberExpression = (MemberExpression)unaryExpression.Operand;
        }
        else
        {
            memberExpression = (MemberExpression)expression.Body;
        }
        if (memberExpression == null)
        {
            Debug.Assert(memberExpression != null, "Please provide a lambda expression like 'n => n.PropertyName'");
            return null;
        }
        var propertyInfo = (PropertyInfo)memberExpression.Member;
        return propertyInfo.Name;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
744
4
Gpt3D_Clone744_4.cs 1 16
Gpt3D_Clone744_4.cs 17 31
----------------------------------------

private static string GetPropertyName < TPropertySource > (Expression < Func < TPropertySource, object > > expression) {
    var lambda = expression as LambdaExpression;
    MemberExpression memberExpression;
    if (lambda.Body is UnaryExpression) {
        var unaryExpression = lambda.Body as UnaryExpression;
        memberExpression = unaryExpression.Operand as MemberExpression;
    } else {
        memberExpression = lambda.Body as MemberExpression;
    }
    Debug.Assert (memberExpression != null, "Please provide a lambda expression like 'n => n.PropertyName'");
    if (memberExpression != null) {
        var propertyInfo = memberExpression.Member as PropertyInfo;
        return propertyInfo.Name;
    }
    return null;
}
----------------------------------------

 private static string GetPropertyName < TPropertySource > (Expression < Func < TPropertySource, object > > expression) {
    var expressionBody = expression.Body;
    MemberExpression memberExpression = null;
    if (expressionBody is UnaryExpression) {
        var unaryExpression = expressionBody as UnaryExpression;
        memberExpression = unaryExpression.Operand as MemberExpression;
    } else 
        memberExpression = expressionBody as MemberExpression;
    if (memberExpression == null) 
        Debug.Assert (memberExpression != null, "Please provide a lambda expression like 'n => n.PropertyName'");
    PropertyInfo propertyInfo = memberExpression?.Member as PropertyInfo;
    return propertyInfo?.Name;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
744
5
Gpt3D_Clone744_5.cs 1 16
Gpt3D_Clone744_5.cs 17 41
----------------------------------------

private static string GetPropertyName < TPropertySource > (Expression < Func < TPropertySource, object > > expression) {
    var lambda = expression as LambdaExpression;
    MemberExpression memberExpression;
    if (lambda.Body is UnaryExpression) {
        var unaryExpression = lambda.Body as UnaryExpression;
        memberExpression = unaryExpression.Operand as MemberExpression;
    } else {
        memberExpression = lambda.Body as MemberExpression;
    }
    Debug.Assert (memberExpression != null, "Please provide a lambda expression like 'n => n.PropertyName'");
    if (memberExpression != null) {
        var propertyInfo = memberExpression.Member as PropertyInfo;
        return propertyInfo.Name;
    }
    return null;
}
----------------------------------------

 private static string GetPropertyName<TPropertySource>(Expression<Func<TPropertySource, object>> expression)
{
    MemberExpression memberExpression;
    if (expression.Body is UnaryExpression)
    {
        var unaryExpression = (UnaryExpression)expression.Body;
        memberExpression = (MemberExpression)unaryExpression.Operand;
    }
    else
    {
        memberExpression = (MemberExpression)expression.Body;
    }
    if (memberExpression == null)
    {
        Debug.Assert(memberExpression != null, "Please provide a lambda expression like 'n => n.PropertyName'");
        return null;
    }
    var propertyInfo = (PropertyInfo)memberExpression.Member;
    return propertyInfo.Name;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
744
6
Gpt3D_Clone744_6.cs 1 16
Gpt3D_Clone744_6.cs 17 40
----------------------------------------

private static string GetPropertyName < TPropertySource > (Expression < Func < TPropertySource, object > > expression) {
    var lambda = expression as LambdaExpression;
    MemberExpression memberExpression;
    if (lambda.Body is UnaryExpression) {
        var unaryExpression = lambda.Body as UnaryExpression;
        memberExpression = unaryExpression.Operand as MemberExpression;
    } else {
        memberExpression = lambda.Body as MemberExpression;
    }
    Debug.Assert (memberExpression != null, "Please provide a lambda expression like 'n => n.PropertyName'");
    if (memberExpression != null) {
        var propertyInfo = memberExpression.Member as PropertyInfo;
        return propertyInfo.Name;
    }
    return null;
}
----------------------------------------

  private static string GetPropertyName<TPropertySource>(Expression<Func<TPropertySource, object>> expression)
    {
        MemberExpression memberExpression;
        if (expression.Body is UnaryExpression unaryExpression)
        {
            memberExpression = (MemberExpression)unaryExpression.Operand;
        }
        else
        {
            memberExpression = (MemberExpression)expression.Body;
        }
        if (memberExpression == null)
        {
            Debug.Assert(memberExpression != null, "Please provide a lambda expression like 'n => n.PropertyName'");
            return null;
        }
        var propertyInfo = (PropertyInfo)memberExpression.Member;
        return propertyInfo.Name;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
744
7
Gpt3D_Clone744_7.cs 1 16
Gpt3D_Clone744_7.cs 17 40
----------------------------------------

private static string GetPropertyName < TPropertySource > (Expression < Func < TPropertySource, object > > expression) {
    var lambda = expression as LambdaExpression;
    MemberExpression memberExpression;
    if (lambda.Body is UnaryExpression) {
        var unaryExpression = lambda.Body as UnaryExpression;
        memberExpression = unaryExpression.Operand as MemberExpression;
    } else {
        memberExpression = lambda.Body as MemberExpression;
    }
    Debug.Assert (memberExpression != null, "Please provide a lambda expression like 'n => n.PropertyName'");
    if (memberExpression != null) {
        var propertyInfo = memberExpression.Member as PropertyInfo;
        return propertyInfo.Name;
    }
    return null;
}
----------------------------------------

 private static string GetPropertyName<TPropertySource>(Expression<Func<TPropertySource, object>> expression)
{
    MemberExpression memberExpression;
    if (expression.Body is UnaryExpression unaryExpression)
    {
        memberExpression = (MemberExpression)unaryExpression.Operand;
    }
    else
    {
        memberExpression = (MemberExpression)expression.Body;
    }
    if (memberExpression == null)
    {
        Debug.Assert(memberExpression != null, "Please provide a lambda expression like 'n => n.PropertyName'");
        return null;
    }
    var propertyInfo = (PropertyInfo)memberExpression.Member;
    return propertyInfo.Name;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
745
4
Gpt3D_Clone745_4.cs 1 20
Gpt3D_Clone745_4.cs 21 44
----------------------------------------

public T GetFromPool () {
    T item = null;
    do
        {
            lock (this)
            {
                if (this.pool.Count == 0) {
                    if (this.currentSize < this.maxSize) {
                        item = this.constructor ();
                        this.currentSize ++;
                    }
                } else {
                    item = this.pool.Dequeue ();
                }
            } if (null == item) {
                this.poolReleasedEvent.WaitOne ();
            }
        } while (null == item);
    return item;
}
----------------------------------------

 public T GetFromPool () {
    T item = null;
    int count = 0;
    while (item == null && count<10){
        lock (this) {
            if (this.pool.Count > 0) {
                item = this.pool.Dequeue();
            } else {
                if (this.currentSize < this.maxSize) {
                    item = this.constructor();
                    this.currentSize++;
                }
            }
        } 
        if (item == null) {
            this.poolReleasedEvent.WaitOne (200);
            count++;
        }
    }
    return item;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
745
9
Gpt3D_Clone745_9.cs 1 20
Gpt3D_Clone745_9.cs 21 41
----------------------------------------

public T GetFromPool () {
    T item = null;
    do
        {
            lock (this)
            {
                if (this.pool.Count == 0) {
                    if (this.currentSize < this.maxSize) {
                        item = this.constructor ();
                        this.currentSize ++;
                    }
                } else {
                    item = this.pool.Dequeue ();
                }
            } if (null == item) {
                this.poolReleasedEvent.WaitOne ();
            }
        } while (null == item);
    return item;
}
----------------------------------------

 public T GetFromPool () {
    T item = null;
    while (true) {
        lock (this) {
            if (this.pool.Count > 0) {
                item = this.pool.Dequeue();
                break;
            } else {
                item = this.TryConstruct();
                break;
            }
        }
        if (item == null)
            this.poolReleasedEvent.WaitOne();
    }
    return item;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
746
0
Gpt3D_Clone746_0.cs 1 20
Gpt3D_Clone746_0.cs 21 73
----------------------------------------

public static int CountOccurrences (string original, string substring) {
    if (string.IsNullOrEmpty (substring))
        return 0;
    if (substring.Length == 1)
        return CountOccurrences (original, substring [0]);
    if (string.IsNullOrEmpty (original) || substring.Length > original.Length)
        return 0;
    int substringCount = 0;
    for (int charIndex = 0; charIndex < original.Length; charIndex ++) {
        for (int subCharIndex = 0, secondaryCharIndex = charIndex; subCharIndex < substring.Length && secondaryCharIndex < original.Length; subCharIndex ++, secondaryCharIndex ++) {
            if (substring [subCharIndex] != original [secondaryCharIndex])
                goto continueOuter;
        }
        if (charIndex + substring.Length > original.Length)
            break;
        charIndex += substring.Length - 1;
        substringCount ++;
        continueOuter :;}
    return substringCount;
}
----------------------------------------

	public static int CountOccurrences(string original, string substring) 
{
    if (string.IsNullOrEmpty(substring))
        return 0;
    if (substring.Length == 1)
        return CountOccurrences(original, substring[0]);
    if (string.IsNullOrEmpty(original) || substring.Length > original.Length)
        return 0;
    int substringCount = 0;
    int charIndex = 0;
    int subCharIndex = 0;
    int secondaryCharIndex = 0;
    bool matching = false;
    while (charIndex < original.Length)
    {
        secondaryCharIndex = charIndex;
        int nextSecondaryCharIndex = charIndex + substring.Length;
        if (nextSecondaryCharIndex > original.Length)
            break;
        matching = true;
        subCharIndex = 0;
        while (subCharIndex < substring.Length && secondaryCharIndex < original.Length)
        {
            if (substring[subCharIndex] != original[secondaryCharIndex])
            {
                matching = false;
                break;
            }
            else
            {
                subCharIndex++;
                secondaryCharIndex++;
            }
        }
        if (matching)
        {
            charIndex += substring.Length;
            substringCount++;
        }
        else
            charIndex++;
    }
    return substringCount;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
746
1
Gpt3D_Clone746_1.cs 1 20
Gpt3D_Clone746_1.cs 21 73
----------------------------------------

public static int CountOccurrences (string original, string substring) {
    if (string.IsNullOrEmpty (substring))
        return 0;
    if (substring.Length == 1)
        return CountOccurrences (original, substring [0]);
    if (string.IsNullOrEmpty (original) || substring.Length > original.Length)
        return 0;
    int substringCount = 0;
    for (int charIndex = 0; charIndex < original.Length; charIndex ++) {
        for (int subCharIndex = 0, secondaryCharIndex = charIndex; subCharIndex < substring.Length && secondaryCharIndex < original.Length; subCharIndex ++, secondaryCharIndex ++) {
            if (substring [subCharIndex] != original [secondaryCharIndex])
                goto continueOuter;
        }
        if (charIndex + substring.Length > original.Length)
            break;
        charIndex += substring.Length - 1;
        substringCount ++;
        continueOuter :;}
    return substringCount;
}
----------------------------------------

	public static int CountOccurrences(string original, string substring) 
{
    if (string.IsNullOrEmpty(substring))
        return 0;
    if (substring.Length == 1)
        return CountOccurrences(original, substring[0]);
    if (string.IsNullOrEmpty(original) || substring.Length > original.Length)
        return 0;
    int substringCount = 0;
    int charIndex = 0;
    int subCharIndex = 0;
    int secondaryCharIndex = 0;
    bool allMatching = true;
    while (charIndex < original.Length)
    {
        secondaryCharIndex = charIndex;
        int nextSecondaryCharIndex = charIndex + substring.Length;
        if (nextSecondaryCharIndex > original.Length)
            break;
        allMatching = true;
        subCharIndex = 0;
        while (subCharIndex < substring.Length && secondaryCharIndex < original.Length)
        {
            if (substring[subCharIndex] != original[secondaryCharIndex])
            {
                allMatching = false;
                break;
            }
            else
            {
                subCharIndex++;
                secondaryCharIndex++;
            }
        }
        if (allMatching)
        {
            charIndex += substring.Length;
            substringCount++;
        }
        else
            charIndex++;
    }
    return substringCount;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
746
2
Gpt3D_Clone746_2.cs 1 20
Gpt3D_Clone746_2.cs 21 72
----------------------------------------

public static int CountOccurrences (string original, string substring) {
    if (string.IsNullOrEmpty (substring))
        return 0;
    if (substring.Length == 1)
        return CountOccurrences (original, substring [0]);
    if (string.IsNullOrEmpty (original) || substring.Length > original.Length)
        return 0;
    int substringCount = 0;
    for (int charIndex = 0; charIndex < original.Length; charIndex ++) {
        for (int subCharIndex = 0, secondaryCharIndex = charIndex; subCharIndex < substring.Length && secondaryCharIndex < original.Length; subCharIndex ++, secondaryCharIndex ++) {
            if (substring [subCharIndex] != original [secondaryCharIndex])
                goto continueOuter;
        }
        if (charIndex + substring.Length > original.Length)
            break;
        charIndex += substring.Length - 1;
        substringCount ++;
        continueOuter :;}
    return substringCount;
}
----------------------------------------

	public static int CountOccurrences(string original, string substring) 
{
    if (string.IsNullOrEmpty(substring))
        return 0;
    if (substring.Length == 1)
        return CountOccurrences(original, substring[0]);
    if (string.IsNullOrEmpty(original) || substring.Length > original.Length)
        return 0;
    int substringCount = 0;
    int charIndex = 0;
    int secondaryCharIndex = 0;
    int nextSecondaryCharIndex = 0;
    while (charIndex < original.Length)
    {
        secondaryCharIndex = charIndex;
        nextSecondaryCharIndex = charIndex + substring.Length;
        if (nextSecondaryCharIndex > original.Length)
            break;
        int subCharIndex = 0;
        while (subCharIndex < substring.Length && secondaryCharIndex < original.Length)
        {
            if (substring[subCharIndex] != original[secondaryCharIndex])
                break;
            else
            {
                subCharIndex++;
                secondaryCharIndex++;
            }
        }
        if (subCharIndex == substring.Length)
        {
            if (secondaryCharIndex == original.Length - 1)
                break;
            else
            {
                substringCount++;
                charIndex = secondaryCharIndex + substring.Length - 1;
            }
        }
        charIndex++;
    }
    return substringCount;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
746
3
Gpt3D_Clone746_3.cs 1 20
Gpt3D_Clone746_3.cs 21 69
----------------------------------------

public static int CountOccurrences (string original, string substring) {
    if (string.IsNullOrEmpty (substring))
        return 0;
    if (substring.Length == 1)
        return CountOccurrences (original, substring [0]);
    if (string.IsNullOrEmpty (original) || substring.Length > original.Length)
        return 0;
    int substringCount = 0;
    for (int charIndex = 0; charIndex < original.Length; charIndex ++) {
        for (int subCharIndex = 0, secondaryCharIndex = charIndex; subCharIndex < substring.Length && secondaryCharIndex < original.Length; subCharIndex ++, secondaryCharIndex ++) {
            if (substring [subCharIndex] != original [secondaryCharIndex])
                goto continueOuter;
        }
        if (charIndex + substring.Length > original.Length)
            break;
        charIndex += substring.Length - 1;
        substringCount ++;
        continueOuter :;}
    return substringCount;
}
----------------------------------------

	public static int CountOccurrences(string original, string substring) 
{
    if (string.IsNullOrEmpty(substring))
        return 0;
    if (substring.Length == 1)
        return CountOccurrences(original, substring[0]);
    if (string.IsNullOrEmpty(original) || substring.Length > original.Length)
        return 0;
    int substringCount = 0;
    int charIndex = 0;
    int subCharIndex = 0;    
    int secondaryCharIndex = 0;
    int nextSecondaryCharIndex = 0;
    bool substringMatched = false;
    while (charIndex < original.Length)
    {
        secondaryCharIndex = charIndex;
        nextSecondaryCharIndex = charIndex + substring.Length;
        substringMatched = false;
        if (nextSecondaryCharIndex > original.Length)
            break;
        
        for (subCharIndex = 0; subCharIndex < substring.Length; subCharIndex++, secondaryCharIndex++)
        {
            if (substring[subCharIndex] != original[secondaryCharIndex])
            {
                substringMatched = false;
                break;
            }
            else
                substringMatched = true;
        }
        if (substringMatched)
        {
            substringCount++;
            charIndex += substring.Length;
        }
        else
            charIndex++;
    }
    return substringCount;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
746
4
Gpt3D_Clone746_4.cs 1 20
Gpt3D_Clone746_4.cs 21 69
----------------------------------------

public static int CountOccurrences (string original, string substring) {
    if (string.IsNullOrEmpty (substring))
        return 0;
    if (substring.Length == 1)
        return CountOccurrences (original, substring [0]);
    if (string.IsNullOrEmpty (original) || substring.Length > original.Length)
        return 0;
    int substringCount = 0;
    for (int charIndex = 0; charIndex < original.Length; charIndex ++) {
        for (int subCharIndex = 0, secondaryCharIndex = charIndex; subCharIndex < substring.Length && secondaryCharIndex < original.Length; subCharIndex ++, secondaryCharIndex ++) {
            if (substring [subCharIndex] != original [secondaryCharIndex])
                goto continueOuter;
        }
        if (charIndex + substring.Length > original.Length)
            break;
        charIndex += substring.Length - 1;
        substringCount ++;
        continueOuter :;}
    return substringCount;
}
----------------------------------------

	public static int CountOccurrences(string original, string substring) 
{
    if (string.IsNullOrEmpty(substring))
        return 0;
    if (substring.Length == 1)
        return CountOccurrences(original, substring[0]);
    if (string.IsNullOrEmpty(original) || substring.Length > original.Length)
        return 0;
    int substringCount = 0;
    int charIndex = 0;
    int secondaryCharIndex = 0;
    int nextSecondaryCharIndex = 0;
    bool matching = false;
    if (original.Length <= substring.Length)
        return 0;
    while (charIndex < original.Length)
    {
        matching = true;
        secondaryCharIndex = charIndex;
        nextSecondaryCharIndex = charIndex + substring.Length;
        if (nextSecondaryCharIndex > original.Length)
            break;
        for (int subCharIndex = 0; subCharIndex < substring.Length; subCharIndex++, secondaryCharIndex++)
        {
            if (substring[subCharIndex] != original[secondaryCharIndex])
            {
                matching = false;
                break;
            }
        }
        if (matching)
        {
            charIndex += substring.Length;
            substringCount++;
        }
        else
            charIndex++;
    }
    return substringCount;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
746
5
Gpt3D_Clone746_5.cs 1 20
Gpt3D_Clone746_5.cs 21 68
----------------------------------------

public static int CountOccurrences (string original, string substring) {
    if (string.IsNullOrEmpty (substring))
        return 0;
    if (substring.Length == 1)
        return CountOccurrences (original, substring [0]);
    if (string.IsNullOrEmpty (original) || substring.Length > original.Length)
        return 0;
    int substringCount = 0;
    for (int charIndex = 0; charIndex < original.Length; charIndex ++) {
        for (int subCharIndex = 0, secondaryCharIndex = charIndex; subCharIndex < substring.Length && secondaryCharIndex < original.Length; subCharIndex ++, secondaryCharIndex ++) {
            if (substring [subCharIndex] != original [secondaryCharIndex])
                goto continueOuter;
        }
        if (charIndex + substring.Length > original.Length)
            break;
        charIndex += substring.Length - 1;
        substringCount ++;
        continueOuter :;}
    return substringCount;
}
----------------------------------------

	public static int CountOccurrences(string original, string substring) 
{
    if (string.IsNullOrEmpty(substring))
        return 0;
    if (substring.Length == 1)
        return CountOccurrences(original, substring[0]);
    if (string.IsNullOrEmpty(original) || substring.Length > original.Length)
        return 0;
    int substringCount = 0;
    int charIndex = 0;
    int secondaryCharIndex = 0;
    bool matching = false;
    while (charIndex < original.Length)
    {
        secondaryCharIndex = charIndex;
        int nextSecondaryCharIndex = charIndex + substring.Length;
        if (nextSecondaryCharIndex > original.Length)
            break;
        matching = false;
        for (int subCharIndex = 0; subCharIndex < substring.Length; subCharIndex++, secondaryCharIndex++)
        {
            if (substring[subCharIndex] != original[secondaryCharIndex])
            {
                matching = false;
                break;
            }
            else
                matching = true;
        }
        if (matching)
        {
            charIndex += substring.Length;
            substringCount++;
        }
        else
            charIndex++;
    }
    return substringCount;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
746
6
Gpt3D_Clone746_6.cs 1 20
Gpt3D_Clone746_6.cs 21 68
----------------------------------------

public static int CountOccurrences (string original, string substring) {
    if (string.IsNullOrEmpty (substring))
        return 0;
    if (substring.Length == 1)
        return CountOccurrences (original, substring [0]);
    if (string.IsNullOrEmpty (original) || substring.Length > original.Length)
        return 0;
    int substringCount = 0;
    for (int charIndex = 0; charIndex < original.Length; charIndex ++) {
        for (int subCharIndex = 0, secondaryCharIndex = charIndex; subCharIndex < substring.Length && secondaryCharIndex < original.Length; subCharIndex ++, secondaryCharIndex ++) {
            if (substring [subCharIndex] != original [secondaryCharIndex])
                goto continueOuter;
        }
        if (charIndex + substring.Length > original.Length)
            break;
        charIndex += substring.Length - 1;
        substringCount ++;
        continueOuter :;}
    return substringCount;
}
----------------------------------------

	public static int CountOccurrences(string original, string substring) 
{
    if (string.IsNullOrEmpty(substring))
        return 0;
    if (substring.Length == 1)
        return CountOccurrences(original, substring[0]);
    if (string.IsNullOrEmpty(original) || substring.Length > original.Length)
        return 0;
    int substringCount = 0;
    int charIndex = 0;
    int subCharIndex = 0;
    int secondaryCharIndex = 0;
    while (charIndex < original.Length)
    {
        subCharIndex = 0;
        secondaryCharIndex = charIndex;
        while (subCharIndex < substring.Length && secondaryCharIndex < original.Length)
        {
            if (substring[subCharIndex] != original[secondaryCharIndex])
                break;
            else
            {
                subCharIndex++;
                secondaryCharIndex++;
            }
        }
        if (subCharIndex == substring.Length)
        {
            if (secondaryCharIndex == original.Length)
                break;
            else
            {
                substringCount++;
                charIndex = secondaryCharIndex + substring.Length - 1;
            }
        }
        charIndex ++;
    }
    return substringCount;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
746
7
Gpt3D_Clone746_7.cs 1 20
Gpt3D_Clone746_7.cs 21 64
----------------------------------------

public static int CountOccurrences (string original, string substring) {
    if (string.IsNullOrEmpty (substring))
        return 0;
    if (substring.Length == 1)
        return CountOccurrences (original, substring [0]);
    if (string.IsNullOrEmpty (original) || substring.Length > original.Length)
        return 0;
    int substringCount = 0;
    for (int charIndex = 0; charIndex < original.Length; charIndex ++) {
        for (int subCharIndex = 0, secondaryCharIndex = charIndex; subCharIndex < substring.Length && secondaryCharIndex < original.Length; subCharIndex ++, secondaryCharIndex ++) {
            if (substring [subCharIndex] != original [secondaryCharIndex])
                goto continueOuter;
        }
        if (charIndex + substring.Length > original.Length)
            break;
        charIndex += substring.Length - 1;
        substringCount ++;
        continueOuter :;}
    return substringCount;
}
----------------------------------------

	public static int CountOccurrences(string original, string substring) 
{
    if (string.IsNullOrEmpty(substring))
        return 0;
    if (substring.Length == 1)
        return CountOccurrences(original, substring[0]);
    if (string.IsNullOrEmpty(original) || substring.Length > original.Length)
        return 0;
    int substringCount = 0;
    int charIndex = 0;
    int secondaryCharIndex = 0;
    while (charIndex < original.Length)
    {
        secondaryCharIndex = charIndex;
        int nextSecondaryCharIndex = charIndex + substring.Length;
        if (nextSecondaryCharIndex > original.Length)
            break;
        bool substringMatched = true;
        for (int subCharIndex = 0; subCharIndex < substring.Length; subCharIndex++, secondaryCharIndex++)
        {
            if (substring[subCharIndex] != original[secondaryCharIndex])
            {
                substringMatched = false;
                break;
            }
        }
        if (substringMatched)
        {
            charIndex += substring.Length;
            substringCount++;
        }
        else
            charIndex++;
    }
    return substringCount;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
752
4
Gpt3D_Clone752_4.cs 1 12
Gpt3D_Clone752_4.cs 13 24
----------------------------------------

private void DragDropTarget_DragEnter (object sender, Microsoft.Windows.DragEventArgs e) {
    var sw = sender as DataGridDragDropTarget;
    if (sw == null) {
        return;
    }
    if (GetAssignmentCondition (e)) {
        e.Effects = DragDropEffects.Link;
    } else {
        e.Effects = DragDropEffects.None;
    }
    e.Handled = true;
}
----------------------------------------

 private void DragDropTarget_DragEnter(object sender, Microsoft.Windows.DragEventArgs e) {
    e.Handled = true;
 
    if(sender is DataGridDragDropTarget sw) {
        if(GetAssignmentCondition(e))
            e.Effects = DragDropEffects.Link;
        else
            e.Effects = DragDropEffects.None;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
752
5
Gpt3D_Clone752_5.cs 1 12
Gpt3D_Clone752_5.cs 13 23
----------------------------------------

private void DragDropTarget_DragEnter (object sender, Microsoft.Windows.DragEventArgs e) {
    var sw = sender as DataGridDragDropTarget;
    if (sw == null) {
        return;
    }
    if (GetAssignmentCondition (e)) {
        e.Effects = DragDropEffects.Link;
    } else {
        e.Effects = DragDropEffects.None;
    }
    e.Handled = true;
}
----------------------------------------

private void DragDropTarget_DragEnter (object sender, Microsoft.Windows.DragEventArgs e) {
    var sw = sender as DataGridDragDropTarget;
    if (sw != null) {
        e.Effects = GetAssignmentCondition(e) 
                        ? DragDropEffects.Link 
                        : DragDropEffects.None;
    }    
    e.Handled = true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
752
6
Gpt3D_Clone752_6.cs 1 12
Gpt3D_Clone752_6.cs 13 20
----------------------------------------

private void DragDropTarget_DragEnter (object sender, Microsoft.Windows.DragEventArgs e) {
    var sw = sender as DataGridDragDropTarget;
    if (sw == null) {
        return;
    }
    if (GetAssignmentCondition (e)) {
        e.Effects = DragDropEffects.Link;
    } else {
        e.Effects = DragDropEffects.None;
    }
    e.Handled = true;
}
----------------------------------------

private void DragDropTarget_DragEnter(object sender, Microsoft.Windows.DragEventArgs e) {   
    if(sender is DataGridDragDropTarget sw)
        e.Effects = GetAssignmentCondition(e) ? DragDropEffects.Link : DragDropEffects.None;  
     
    e.Handled = true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
752
7
Gpt3D_Clone752_7.cs 1 12
Gpt3D_Clone752_7.cs 13 25
----------------------------------------

private void DragDropTarget_DragEnter (object sender, Microsoft.Windows.DragEventArgs e) {
    var sw = sender as DataGridDragDropTarget;
    if (sw == null) {
        return;
    }
    if (GetAssignmentCondition (e)) {
        e.Effects = DragDropEffects.Link;
    } else {
        e.Effects = DragDropEffects.None;
    }
    e.Handled = true;
}
----------------------------------------

  private void DragDropTarget_DragEnter(object sender, Microsoft.Windows.DragEventArgs e) 
  {    
     if (sender is DataGridDragDropTarget sw) 
     {
        e.Effects = GetAssignmentCondition(e) 
                      ? DragDropEffects.Link 
                      : DragDropEffects.None;
      }
     e.Handled = true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
752
8
Gpt3D_Clone752_8.cs 1 12
Gpt3D_Clone752_8.cs 13 21
----------------------------------------

private void DragDropTarget_DragEnter (object sender, Microsoft.Windows.DragEventArgs e) {
    var sw = sender as DataGridDragDropTarget;
    if (sw == null) {
        return;
    }
    if (GetAssignmentCondition (e)) {
        e.Effects = DragDropEffects.Link;
    } else {
        e.Effects = DragDropEffects.None;
    }
    e.Handled = true;
}
----------------------------------------

 private void DragDropTarget_DragEnter (object send, Microsoft.Windows.DragEventArgs e) 
    {
        e.Effects = sender is DataGridDragDropTarget sw && GetAssignmentCondition(e)
            ? DragDropEffects.Link 
            : DragDropEffects.None;  
        e.Handled = true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
753
0
Gpt3D_Clone753_0.cs 1 19
Gpt3D_Clone753_0.cs 20 45
----------------------------------------

public static bool SetKeepAlive (this Socket socket, ulong time, ulong interval) {
    try {
        var input = new [] {(time == 0 || interval == 0) ? 0UL : 1UL, time, interval};
        byte [] inValue = new byte [3 * BytesPerLong];
        for (int i = 0; i < input.Length; i ++) {
            inValue [i * BytesPerLong + 3] = (byte) (input [i] > > ((BytesPerLong - 1) * BitsPerByte) & 0xff);
            inValue [i * BytesPerLong + 2] = (byte) (input [i] > > ((BytesPerLong - 2) * BitsPerByte) & 0xff);
            inValue [i * BytesPerLong + 1] = (byte) (input [i] > > ((BytesPerLong - 3) * BitsPerByte) & 0xff);
            inValue [i * BytesPerLong + 0] = (byte) (input [i] > > ((BytesPerLong - 4) * BitsPerByte) & 0xff);
        }
        byte [] outValue = BitConverter.GetBytes (0);
        socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
        socket.IOControl (IOControlCode.KeepAliveValues, inValue, outValue);
    }
    catch (SocketException) {
        return false;
    }
    return true;
}
----------------------------------------

 public static Boolean SetKeepAlive (this Socket socket, ulong time, ulong interval) 
{
    try 
    {
        List<byte> input = new List<byte> {(time == 0 || interval == 0) ? 0 : (byte)1};
        for (int i = 0; i < 3; i++)
        {
            ulong value = (i == 0) ? time : interval;
            for (int j = 0; j < 4; j++)
            {
                byte b = (byte)(value >> (j * 8));
                input.Add (b);
            }
        }
        byte[] outValue = BitConverter.GetBytes (0);
        socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
        socket.IOControl (IOControlCode.KeepAliveValues, input.ToArray(), outValue);
    }
    catch (SocketException) 
    {
        return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
753
1
Gpt3D_Clone753_1.cs 1 19
Gpt3D_Clone753_1.cs 20 39
----------------------------------------

public static bool SetKeepAlive (this Socket socket, ulong time, ulong interval) {
    try {
        var input = new [] {(time == 0 || interval == 0) ? 0UL : 1UL, time, interval};
        byte [] inValue = new byte [3 * BytesPerLong];
        for (int i = 0; i < input.Length; i ++) {
            inValue [i * BytesPerLong + 3] = (byte) (input [i] > > ((BytesPerLong - 1) * BitsPerByte) & 0xff);
            inValue [i * BytesPerLong + 2] = (byte) (input [i] > > ((BytesPerLong - 2) * BitsPerByte) & 0xff);
            inValue [i * BytesPerLong + 1] = (byte) (input [i] > > ((BytesPerLong - 3) * BitsPerByte) & 0xff);
            inValue [i * BytesPerLong + 0] = (byte) (input [i] > > ((BytesPerLong - 4) * BitsPerByte) & 0xff);
        }
        byte [] outValue = BitConverter.GetBytes (0);
        socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
        socket.IOControl (IOControlCode.KeepAliveValues, inValue, outValue);
    }
    catch (SocketException) {
        return false;
    }
    return true;
}
----------------------------------------

 public static Boolean SetKeepAlive(this Socket socket, ulong time, ulong interval) {
    try {
        byte[] inValue = new byte[6];
        inValue[0] = (time == 0 || interval == 0) ? (byte)0 : (byte)1;
        inValue[1] = (byte)(time >> 8);
        inValue[2] = (byte)(time & 0x00FF);
        inValue[3] = (byte)(interval >> 8);
        inValue[4] = (byte)(interval & 0x00FF);
        inValue[5] = 0;
        socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
        socket.IOControl (IOControlCode.KeepAliveValues, inValue, new byte[2]);
    }
    catch (SocketException) {
        return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
753
2
Gpt3D_Clone753_2.cs 1 19
Gpt3D_Clone753_2.cs 20 122
----------------------------------------

public static bool SetKeepAlive (this Socket socket, ulong time, ulong interval) {
    try {
        var input = new [] {(time == 0 || interval == 0) ? 0UL : 1UL, time, interval};
        byte [] inValue = new byte [3 * BytesPerLong];
        for (int i = 0; i < input.Length; i ++) {
            inValue [i * BytesPerLong + 3] = (byte) (input [i] > > ((BytesPerLong - 1) * BitsPerByte) & 0xff);
            inValue [i * BytesPerLong + 2] = (byte) (input [i] > > ((BytesPerLong - 2) * BitsPerByte) & 0xff);
            inValue [i * BytesPerLong + 1] = (byte) (input [i] > > ((BytesPerLong - 3) * BitsPerByte) & 0xff);
            inValue [i * BytesPerLong + 0] = (byte) (input [i] > > ((BytesPerLong - 4) * BitsPerByte) & 0xff);
        }
        byte [] outValue = BitConverter.GetBytes (0);
        socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
        socket.IOControl (IOControlCode.KeepAliveValues, inValue, outValue);
    }
    catch (SocketException) {
        return false;
    }
    return true;
}
----------------------------------------

 public static Boolean SetKeepAlive(this Socket socket, ulong time, ulong interval)
    {
        try
        {
            byte[] data = new byte[6] {(time == 0 || interval == 0) ? 0 : 1, (byte)(time >> 8), (byte)(time & 0xFF), (byte)(interval >> 8), (byte)(interval & 0xFF), 0};
            byte [] outValue = BitConverter.GetBytes (0);
            socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
            socket.IOControl (IOControlCode.KeepAliveValues, data, outValue);
        }
        catch (SocketException) {
            return false;
        }
        return true;
    }
 public static Boolean SetKeepAlive(this Socket socket, ulong time, ulong interval)
    {
        try
        {
            List<byte> input = new List<byte> {(time == 0 || interval == 0) ? 0 : 1};
            input.AddRange(BitConverter.GetBytes(time));
            input.AddRange(BitConverter.GetBytes(interval));
            byte [] outValue = BitConverter.GetBytes (0);
            socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
            socket.IOControl (IOControlCode.KeepAliveValues, input.ToArray(), outValue);
        }
        catch (SocketException) {
            return false;
        }
        return true;
    }
 public static Boolean SetKeepAlive(this Socket socket, ulong time, ulong interval)
    {
        try
        {
            List<byte> input = new List<byte> {(time == 0 || interval == 0) ? 0 : 1};
            input.AddRange(BitConverter.GetBytes(time));
            input.AddRange(BitConverter.GetBytes(interval));
            byte [] outValue = new byte[3 * BitConverter.GetBytes(0).Length];
            socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
            socket.IOControl (IOControlCode.KeepAliveValues, input.ToArray(), outValue);
        }
        catch (SocketException) {
            return false;
        }
        return true;
    }
 public static Boolean SetKeepAlive(this Socket socket, ulong time, ulong interval)
    {
        try
        {
            uint flags = (time == 0 || interval == 0) ? 0 : 4;
            List<byte> input = new List<byte> {(byte)(flags & 0xFF), (byte)(flags >> 8), (byte)time, (byte)interval };
            byte [] outValue = BitConverter.GetBytes (0);
            socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
            socket.IOControl (IOControlCode.KeepAliveValues, input.ToArray(), outValue);
        }
        catch (SocketException) {
            return false;
        }
        return true;
    }
 public static Boolean SetKeepAlive(this Socket socket, ulong time, ulong interval)
    {
        try
        {
              List<byte> input = new List<byte> {(time == 0 || interval == 0) ? 0 : (byte)1};
            input.AddRange(BitConverter.GetBytes(time));
            input.AddRange(BitConverter.GetBytes(interval));
            byte [] outValue = BitConverter.GetBytes (0);
            socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
            socket.IOControl (IOControlCode.KeepAliveValues, input.ToArray() , outValue);
        }
        catch (SocketException) {
            return false;
        }
        return true;
    }
    
 public static Boolean SetKeepAlive (this Socket socket, ulong time, ulong interval) 
{
    try 
    {
        List<byte> input = new List<byte> {(time == 0 || interval == 0) ? 0 : 1};
        input.AddRange (BitConverter.GetBytes (time));
        input.AddRange (BitConverter.GetBytes (interval));
        byte[] outValue = BitConverter.GetBytes (0);
        socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
        socket.IOControl (IOControlCode.KeepAliveValues, input.ToArray (), outValue);
    }
    catch (SocketException) 
    {
        return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
753
3
Gpt3D_Clone753_3.cs 1 19
Gpt3D_Clone753_3.cs 20 122
----------------------------------------

public static bool SetKeepAlive (this Socket socket, ulong time, ulong interval) {
    try {
        var input = new [] {(time == 0 || interval == 0) ? 0UL : 1UL, time, interval};
        byte [] inValue = new byte [3 * BytesPerLong];
        for (int i = 0; i < input.Length; i ++) {
            inValue [i * BytesPerLong + 3] = (byte) (input [i] > > ((BytesPerLong - 1) * BitsPerByte) & 0xff);
            inValue [i * BytesPerLong + 2] = (byte) (input [i] > > ((BytesPerLong - 2) * BitsPerByte) & 0xff);
            inValue [i * BytesPerLong + 1] = (byte) (input [i] > > ((BytesPerLong - 3) * BitsPerByte) & 0xff);
            inValue [i * BytesPerLong + 0] = (byte) (input [i] > > ((BytesPerLong - 4) * BitsPerByte) & 0xff);
        }
        byte [] outValue = BitConverter.GetBytes (0);
        socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
        socket.IOControl (IOControlCode.KeepAliveValues, inValue, outValue);
    }
    catch (SocketException) {
        return false;
    }
    return true;
}
----------------------------------------

 public static Boolean SetKeepAlive(this Socket socket, ulong time, ulong interval)
    {
        try
        {
            byte[] data = new byte[6] {(time == 0 || interval == 0) ? 0 : 1, (byte)(time >> 8), (byte)(time & 0xFF), (byte)(interval >> 8), (byte)(interval & 0xFF), 0};
            byte [] outValue = BitConverter.GetBytes (0);
            socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
            socket.IOControl (IOControlCode.KeepAliveValues, data, outValue);
        }
        catch (SocketException) {
            return false;
        }
        return true;
    }
 public static Boolean SetKeepAlive(this Socket socket, ulong time, ulong interval)
    {
        try
        {
            List<byte> input = new List<byte> {(time == 0 || interval == 0) ? 0 : 1};
            input.AddRange(BitConverter.GetBytes(time));
            input.AddRange(BitConverter.GetBytes(interval));
            byte [] outValue = BitConverter.GetBytes (0);
            socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
            socket.IOControl (IOControlCode.KeepAliveValues, input.ToArray(), outValue);
        }
        catch (SocketException) {
            return false;
        }
        return true;
    }
 public static Boolean SetKeepAlive(this Socket socket, ulong time, ulong interval)
    {
        try
        {
            List<byte> input = new List<byte> {(time == 0 || interval == 0) ? 0 : 1};
            input.AddRange(BitConverter.GetBytes(time));
            input.AddRange(BitConverter.GetBytes(interval));
            byte [] outValue = new byte[3 * BitConverter.GetBytes(0).Length];
            socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
            socket.IOControl (IOControlCode.KeepAliveValues, input.ToArray(), outValue);
        }
        catch (SocketException) {
            return false;
        }
        return true;
    }
 public static Boolean SetKeepAlive(this Socket socket, ulong time, ulong interval)
    {
        try
        {
            uint flags = (time == 0 || interval == 0) ? 0 : 4;
            List<byte> input = new List<byte> {(byte)(flags & 0xFF), (byte)(flags >> 8), (byte)time, (byte)interval };
            byte [] outValue = BitConverter.GetBytes (0);
            socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
            socket.IOControl (IOControlCode.KeepAliveValues, input.ToArray(), outValue);
        }
        catch (SocketException) {
            return false;
        }
        return true;
    }
 public static Boolean SetKeepAlive(this Socket socket, ulong time, ulong interval)
    {
        try
        {
              List<byte> input = new List<byte> {(time == 0 || interval == 0) ? 0 : (byte)1};
            input.AddRange(BitConverter.GetBytes(time));
            input.AddRange(BitConverter.GetBytes(interval));
            byte [] outValue = BitConverter.GetBytes (0);
            socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
            socket.IOControl (IOControlCode.KeepAliveValues, input.ToArray() , outValue);
        }
        catch (SocketException) {
            return false;
        }
        return true;
    }
    
 public static Boolean SetKeepAlive (this Socket socket, ulong time, ulong interval) 
{
    try 
    {
        List<byte> input = new List<byte> {(time == 0 || interval == 0) ? 0 : 1};
        input.AddRange (BitConverter.GetBytes (time));
        input.AddRange (BitConverter.GetBytes (interval));
        byte[] outValue = BitConverter.GetBytes (0);
        socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
        socket.IOControl (IOControlCode.KeepAliveValues, input.ToArray (), outValue);
    }
    catch (SocketException) 
    {
        return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
753
4
Gpt3D_Clone753_4.cs 1 19
Gpt3D_Clone753_4.cs 20 122
----------------------------------------

public static bool SetKeepAlive (this Socket socket, ulong time, ulong interval) {
    try {
        var input = new [] {(time == 0 || interval == 0) ? 0UL : 1UL, time, interval};
        byte [] inValue = new byte [3 * BytesPerLong];
        for (int i = 0; i < input.Length; i ++) {
            inValue [i * BytesPerLong + 3] = (byte) (input [i] > > ((BytesPerLong - 1) * BitsPerByte) & 0xff);
            inValue [i * BytesPerLong + 2] = (byte) (input [i] > > ((BytesPerLong - 2) * BitsPerByte) & 0xff);
            inValue [i * BytesPerLong + 1] = (byte) (input [i] > > ((BytesPerLong - 3) * BitsPerByte) & 0xff);
            inValue [i * BytesPerLong + 0] = (byte) (input [i] > > ((BytesPerLong - 4) * BitsPerByte) & 0xff);
        }
        byte [] outValue = BitConverter.GetBytes (0);
        socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
        socket.IOControl (IOControlCode.KeepAliveValues, inValue, outValue);
    }
    catch (SocketException) {
        return false;
    }
    return true;
}
----------------------------------------

 public static Boolean SetKeepAlive(this Socket socket, ulong time, ulong interval)
    {
        try
        {
            byte[] data = new byte[6] {(time == 0 || interval == 0) ? 0 : 1, (byte)(time >> 8), (byte)(time & 0xFF), (byte)(interval >> 8), (byte)(interval & 0xFF), 0};
            byte [] outValue = BitConverter.GetBytes (0);
            socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
            socket.IOControl (IOControlCode.KeepAliveValues, data, outValue);
        }
        catch (SocketException) {
            return false;
        }
        return true;
    }
 public static Boolean SetKeepAlive(this Socket socket, ulong time, ulong interval)
    {
        try
        {
            List<byte> input = new List<byte> {(time == 0 || interval == 0) ? 0 : 1};
            input.AddRange(BitConverter.GetBytes(time));
            input.AddRange(BitConverter.GetBytes(interval));
            byte [] outValue = BitConverter.GetBytes (0);
            socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
            socket.IOControl (IOControlCode.KeepAliveValues, input.ToArray(), outValue);
        }
        catch (SocketException) {
            return false;
        }
        return true;
    }
 public static Boolean SetKeepAlive(this Socket socket, ulong time, ulong interval)
    {
        try
        {
            List<byte> input = new List<byte> {(time == 0 || interval == 0) ? 0 : 1};
            input.AddRange(BitConverter.GetBytes(time));
            input.AddRange(BitConverter.GetBytes(interval));
            byte [] outValue = new byte[3 * BitConverter.GetBytes(0).Length];
            socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
            socket.IOControl (IOControlCode.KeepAliveValues, input.ToArray(), outValue);
        }
        catch (SocketException) {
            return false;
        }
        return true;
    }
 public static Boolean SetKeepAlive(this Socket socket, ulong time, ulong interval)
    {
        try
        {
            uint flags = (time == 0 || interval == 0) ? 0 : 4;
            List<byte> input = new List<byte> {(byte)(flags & 0xFF), (byte)(flags >> 8), (byte)time, (byte)interval };
            byte [] outValue = BitConverter.GetBytes (0);
            socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
            socket.IOControl (IOControlCode.KeepAliveValues, input.ToArray(), outValue);
        }
        catch (SocketException) {
            return false;
        }
        return true;
    }
 public static Boolean SetKeepAlive(this Socket socket, ulong time, ulong interval)
    {
        try
        {
              List<byte> input = new List<byte> {(time == 0 || interval == 0) ? 0 : (byte)1};
            input.AddRange(BitConverter.GetBytes(time));
            input.AddRange(BitConverter.GetBytes(interval));
            byte [] outValue = BitConverter.GetBytes (0);
            socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
            socket.IOControl (IOControlCode.KeepAliveValues, input.ToArray() , outValue);
        }
        catch (SocketException) {
            return false;
        }
        return true;
    }
    
 public static Boolean SetKeepAlive (this Socket socket, ulong time, ulong interval) 
{
    try 
    {
        List<byte> input = new List<byte> {(time == 0 || interval == 0) ? 0 : 1};
        input.AddRange (BitConverter.GetBytes (time));
        input.AddRange (BitConverter.GetBytes (interval));
        byte[] outValue = BitConverter.GetBytes (0);
        socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
        socket.IOControl (IOControlCode.KeepAliveValues, input.ToArray (), outValue);
    }
    catch (SocketException) 
    {
        return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
753
5
Gpt3D_Clone753_5.cs 1 19
Gpt3D_Clone753_5.cs 20 122
----------------------------------------

public static bool SetKeepAlive (this Socket socket, ulong time, ulong interval) {
    try {
        var input = new [] {(time == 0 || interval == 0) ? 0UL : 1UL, time, interval};
        byte [] inValue = new byte [3 * BytesPerLong];
        for (int i = 0; i < input.Length; i ++) {
            inValue [i * BytesPerLong + 3] = (byte) (input [i] > > ((BytesPerLong - 1) * BitsPerByte) & 0xff);
            inValue [i * BytesPerLong + 2] = (byte) (input [i] > > ((BytesPerLong - 2) * BitsPerByte) & 0xff);
            inValue [i * BytesPerLong + 1] = (byte) (input [i] > > ((BytesPerLong - 3) * BitsPerByte) & 0xff);
            inValue [i * BytesPerLong + 0] = (byte) (input [i] > > ((BytesPerLong - 4) * BitsPerByte) & 0xff);
        }
        byte [] outValue = BitConverter.GetBytes (0);
        socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
        socket.IOControl (IOControlCode.KeepAliveValues, inValue, outValue);
    }
    catch (SocketException) {
        return false;
    }
    return true;
}
----------------------------------------

 public static Boolean SetKeepAlive(this Socket socket, ulong time, ulong interval)
    {
        try
        {
            byte[] data = new byte[6] {(time == 0 || interval == 0) ? 0 : 1, (byte)(time >> 8), (byte)(time & 0xFF), (byte)(interval >> 8), (byte)(interval & 0xFF), 0};
            byte [] outValue = BitConverter.GetBytes (0);
            socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
            socket.IOControl (IOControlCode.KeepAliveValues, data, outValue);
        }
        catch (SocketException) {
            return false;
        }
        return true;
    }
 public static Boolean SetKeepAlive(this Socket socket, ulong time, ulong interval)
    {
        try
        {
            List<byte> input = new List<byte> {(time == 0 || interval == 0) ? 0 : 1};
            input.AddRange(BitConverter.GetBytes(time));
            input.AddRange(BitConverter.GetBytes(interval));
            byte [] outValue = BitConverter.GetBytes (0);
            socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
            socket.IOControl (IOControlCode.KeepAliveValues, input.ToArray(), outValue);
        }
        catch (SocketException) {
            return false;
        }
        return true;
    }
 public static Boolean SetKeepAlive(this Socket socket, ulong time, ulong interval)
    {
        try
        {
            List<byte> input = new List<byte> {(time == 0 || interval == 0) ? 0 : 1};
            input.AddRange(BitConverter.GetBytes(time));
            input.AddRange(BitConverter.GetBytes(interval));
            byte [] outValue = new byte[3 * BitConverter.GetBytes(0).Length];
            socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
            socket.IOControl (IOControlCode.KeepAliveValues, input.ToArray(), outValue);
        }
        catch (SocketException) {
            return false;
        }
        return true;
    }
 public static Boolean SetKeepAlive(this Socket socket, ulong time, ulong interval)
    {
        try
        {
            uint flags = (time == 0 || interval == 0) ? 0 : 4;
            List<byte> input = new List<byte> {(byte)(flags & 0xFF), (byte)(flags >> 8), (byte)time, (byte)interval };
            byte [] outValue = BitConverter.GetBytes (0);
            socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
            socket.IOControl (IOControlCode.KeepAliveValues, input.ToArray(), outValue);
        }
        catch (SocketException) {
            return false;
        }
        return true;
    }
 public static Boolean SetKeepAlive(this Socket socket, ulong time, ulong interval)
    {
        try
        {
              List<byte> input = new List<byte> {(time == 0 || interval == 0) ? 0 : (byte)1};
            input.AddRange(BitConverter.GetBytes(time));
            input.AddRange(BitConverter.GetBytes(interval));
            byte [] outValue = BitConverter.GetBytes (0);
            socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
            socket.IOControl (IOControlCode.KeepAliveValues, input.ToArray() , outValue);
        }
        catch (SocketException) {
            return false;
        }
        return true;
    }
    
 public static Boolean SetKeepAlive (this Socket socket, ulong time, ulong interval) 
{
    try 
    {
        List<byte> input = new List<byte> {(time == 0 || interval == 0) ? 0 : 1};
        input.AddRange (BitConverter.GetBytes (time));
        input.AddRange (BitConverter.GetBytes (interval));
        byte[] outValue = BitConverter.GetBytes (0);
        socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
        socket.IOControl (IOControlCode.KeepAliveValues, input.ToArray (), outValue);
    }
    catch (SocketException) 
    {
        return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
753
6
Gpt3D_Clone753_6.cs 1 19
Gpt3D_Clone753_6.cs 20 122
----------------------------------------

public static bool SetKeepAlive (this Socket socket, ulong time, ulong interval) {
    try {
        var input = new [] {(time == 0 || interval == 0) ? 0UL : 1UL, time, interval};
        byte [] inValue = new byte [3 * BytesPerLong];
        for (int i = 0; i < input.Length; i ++) {
            inValue [i * BytesPerLong + 3] = (byte) (input [i] > > ((BytesPerLong - 1) * BitsPerByte) & 0xff);
            inValue [i * BytesPerLong + 2] = (byte) (input [i] > > ((BytesPerLong - 2) * BitsPerByte) & 0xff);
            inValue [i * BytesPerLong + 1] = (byte) (input [i] > > ((BytesPerLong - 3) * BitsPerByte) & 0xff);
            inValue [i * BytesPerLong + 0] = (byte) (input [i] > > ((BytesPerLong - 4) * BitsPerByte) & 0xff);
        }
        byte [] outValue = BitConverter.GetBytes (0);
        socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
        socket.IOControl (IOControlCode.KeepAliveValues, inValue, outValue);
    }
    catch (SocketException) {
        return false;
    }
    return true;
}
----------------------------------------

 public static Boolean SetKeepAlive(this Socket socket, ulong time, ulong interval)
    {
        try
        {
            byte[] data = new byte[6] {(time == 0 || interval == 0) ? 0 : 1, (byte)(time >> 8), (byte)(time & 0xFF), (byte)(interval >> 8), (byte)(interval & 0xFF), 0};
            byte [] outValue = BitConverter.GetBytes (0);
            socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
            socket.IOControl (IOControlCode.KeepAliveValues, data, outValue);
        }
        catch (SocketException) {
            return false;
        }
        return true;
    }
 public static Boolean SetKeepAlive(this Socket socket, ulong time, ulong interval)
    {
        try
        {
            List<byte> input = new List<byte> {(time == 0 || interval == 0) ? 0 : 1};
            input.AddRange(BitConverter.GetBytes(time));
            input.AddRange(BitConverter.GetBytes(interval));
            byte [] outValue = BitConverter.GetBytes (0);
            socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
            socket.IOControl (IOControlCode.KeepAliveValues, input.ToArray(), outValue);
        }
        catch (SocketException) {
            return false;
        }
        return true;
    }
 public static Boolean SetKeepAlive(this Socket socket, ulong time, ulong interval)
    {
        try
        {
            List<byte> input = new List<byte> {(time == 0 || interval == 0) ? 0 : 1};
            input.AddRange(BitConverter.GetBytes(time));
            input.AddRange(BitConverter.GetBytes(interval));
            byte [] outValue = new byte[3 * BitConverter.GetBytes(0).Length];
            socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
            socket.IOControl (IOControlCode.KeepAliveValues, input.ToArray(), outValue);
        }
        catch (SocketException) {
            return false;
        }
        return true;
    }
 public static Boolean SetKeepAlive(this Socket socket, ulong time, ulong interval)
    {
        try
        {
            uint flags = (time == 0 || interval == 0) ? 0 : 4;
            List<byte> input = new List<byte> {(byte)(flags & 0xFF), (byte)(flags >> 8), (byte)time, (byte)interval };
            byte [] outValue = BitConverter.GetBytes (0);
            socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
            socket.IOControl (IOControlCode.KeepAliveValues, input.ToArray(), outValue);
        }
        catch (SocketException) {
            return false;
        }
        return true;
    }
 public static Boolean SetKeepAlive(this Socket socket, ulong time, ulong interval)
    {
        try
        {
              List<byte> input = new List<byte> {(time == 0 || interval == 0) ? 0 : (byte)1};
            input.AddRange(BitConverter.GetBytes(time));
            input.AddRange(BitConverter.GetBytes(interval));
            byte [] outValue = BitConverter.GetBytes (0);
            socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
            socket.IOControl (IOControlCode.KeepAliveValues, input.ToArray() , outValue);
        }
        catch (SocketException) {
            return false;
        }
        return true;
    }
    
 public static Boolean SetKeepAlive (this Socket socket, ulong time, ulong interval) 
{
    try 
    {
        List<byte> input = new List<byte> {(time == 0 || interval == 0) ? 0 : 1};
        input.AddRange (BitConverter.GetBytes (time));
        input.AddRange (BitConverter.GetBytes (interval));
        byte[] outValue = BitConverter.GetBytes (0);
        socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
        socket.IOControl (IOControlCode.KeepAliveValues, input.ToArray (), outValue);
    }
    catch (SocketException) 
    {
        return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
753
7
Gpt3D_Clone753_7.cs 1 19
Gpt3D_Clone753_7.cs 20 122
----------------------------------------

public static bool SetKeepAlive (this Socket socket, ulong time, ulong interval) {
    try {
        var input = new [] {(time == 0 || interval == 0) ? 0UL : 1UL, time, interval};
        byte [] inValue = new byte [3 * BytesPerLong];
        for (int i = 0; i < input.Length; i ++) {
            inValue [i * BytesPerLong + 3] = (byte) (input [i] > > ((BytesPerLong - 1) * BitsPerByte) & 0xff);
            inValue [i * BytesPerLong + 2] = (byte) (input [i] > > ((BytesPerLong - 2) * BitsPerByte) & 0xff);
            inValue [i * BytesPerLong + 1] = (byte) (input [i] > > ((BytesPerLong - 3) * BitsPerByte) & 0xff);
            inValue [i * BytesPerLong + 0] = (byte) (input [i] > > ((BytesPerLong - 4) * BitsPerByte) & 0xff);
        }
        byte [] outValue = BitConverter.GetBytes (0);
        socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
        socket.IOControl (IOControlCode.KeepAliveValues, inValue, outValue);
    }
    catch (SocketException) {
        return false;
    }
    return true;
}
----------------------------------------

 public static Boolean SetKeepAlive(this Socket socket, ulong time, ulong interval)
    {
        try
        {
            byte[] data = new byte[6] {(time == 0 || interval == 0) ? 0 : 1, (byte)(time >> 8), (byte)(time & 0xFF), (byte)(interval >> 8), (byte)(interval & 0xFF), 0};
            byte [] outValue = BitConverter.GetBytes (0);
            socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
            socket.IOControl (IOControlCode.KeepAliveValues, data, outValue);
        }
        catch (SocketException) {
            return false;
        }
        return true;
    }
 public static Boolean SetKeepAlive(this Socket socket, ulong time, ulong interval)
    {
        try
        {
            List<byte> input = new List<byte> {(time == 0 || interval == 0) ? 0 : 1};
            input.AddRange(BitConverter.GetBytes(time));
            input.AddRange(BitConverter.GetBytes(interval));
            byte [] outValue = BitConverter.GetBytes (0);
            socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
            socket.IOControl (IOControlCode.KeepAliveValues, input.ToArray(), outValue);
        }
        catch (SocketException) {
            return false;
        }
        return true;
    }
 public static Boolean SetKeepAlive(this Socket socket, ulong time, ulong interval)
    {
        try
        {
            List<byte> input = new List<byte> {(time == 0 || interval == 0) ? 0 : 1};
            input.AddRange(BitConverter.GetBytes(time));
            input.AddRange(BitConverter.GetBytes(interval));
            byte [] outValue = new byte[3 * BitConverter.GetBytes(0).Length];
            socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
            socket.IOControl (IOControlCode.KeepAliveValues, input.ToArray(), outValue);
        }
        catch (SocketException) {
            return false;
        }
        return true;
    }
 public static Boolean SetKeepAlive(this Socket socket, ulong time, ulong interval)
    {
        try
        {
            uint flags = (time == 0 || interval == 0) ? 0 : 4;
            List<byte> input = new List<byte> {(byte)(flags & 0xFF), (byte)(flags >> 8), (byte)time, (byte)interval };
            byte [] outValue = BitConverter.GetBytes (0);
            socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
            socket.IOControl (IOControlCode.KeepAliveValues, input.ToArray(), outValue);
        }
        catch (SocketException) {
            return false;
        }
        return true;
    }
 public static Boolean SetKeepAlive(this Socket socket, ulong time, ulong interval)
    {
        try
        {
              List<byte> input = new List<byte> {(time == 0 || interval == 0) ? 0 : (byte)1};
            input.AddRange(BitConverter.GetBytes(time));
            input.AddRange(BitConverter.GetBytes(interval));
            byte [] outValue = BitConverter.GetBytes (0);
            socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
            socket.IOControl (IOControlCode.KeepAliveValues, input.ToArray() , outValue);
        }
        catch (SocketException) {
            return false;
        }
        return true;
    }
    
 public static Boolean SetKeepAlive (this Socket socket, ulong time, ulong interval) 
{
    try 
    {
        List<byte> input = new List<byte> {(time == 0 || interval == 0) ? 0 : 1};
        input.AddRange (BitConverter.GetBytes (time));
        input.AddRange (BitConverter.GetBytes (interval));
        byte[] outValue = BitConverter.GetBytes (0);
        socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
        socket.IOControl (IOControlCode.KeepAliveValues, input.ToArray (), outValue);
    }
    catch (SocketException) 
    {
        return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
753
8
Gpt3D_Clone753_8.cs 1 19
Gpt3D_Clone753_8.cs 20 33
----------------------------------------

public static bool SetKeepAlive (this Socket socket, ulong time, ulong interval) {
    try {
        var input = new [] {(time == 0 || interval == 0) ? 0UL : 1UL, time, interval};
        byte [] inValue = new byte [3 * BytesPerLong];
        for (int i = 0; i < input.Length; i ++) {
            inValue [i * BytesPerLong + 3] = (byte) (input [i] > > ((BytesPerLong - 1) * BitsPerByte) & 0xff);
            inValue [i * BytesPerLong + 2] = (byte) (input [i] > > ((BytesPerLong - 2) * BitsPerByte) & 0xff);
            inValue [i * BytesPerLong + 1] = (byte) (input [i] > > ((BytesPerLong - 3) * BitsPerByte) & 0xff);
            inValue [i * BytesPerLong + 0] = (byte) (input [i] > > ((BytesPerLong - 4) * BitsPerByte) & 0xff);
        }
        byte [] outValue = BitConverter.GetBytes (0);
        socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
        socket.IOControl (IOControlCode.KeepAliveValues, inValue, outValue);
    }
    catch (SocketException) {
        return false;
    }
    return true;
}
----------------------------------------

 public static Boolean SetKeepAlive (this Socket socket, ulong time, ulong interval) {
    try {
        byte[] data = new byte[3] {(time == 0 || interval == 0) ? 0 : 1, (byte)time, (byte)interval};
        byte [] outValue = BitConverter.GetBytes (0);
        socket.SetSocketOption (SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
        socket.IOControl (IOControlCode.KeepAliveValues, data, outValue);
    }
    catch (SocketException) {
        return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
754
2
Gpt3D_Clone754_2.cs 1 16
Gpt3D_Clone754_2.cs 17 192
----------------------------------------

private string GenerateSequence (int num) {
    string str = "";
    char achar;
    int mod;
    while (true) {
        mod = (num % 26) + 65;
        num = (int) (num / 26);
        achar = (char) mod;
        str = achar + str;
        if (num > 0)
            num --;
        else if (num == 0)
            break;
    }
    return str;
}
----------------------------------------

   private string GenerateSequence(int num)
     {
         StringBuilder str = new StringBuilder(string.Empty);
         int mod;
         while (true)
         {
             mod = (num % 26) + 65;
             num = (int)(num / 26);
             str.Insert(0, Convert.ToChar(mod));
             if (num > 0)
                 num--;
             else if (num == 0)
                 break;
         }
         return str.ToString();
     }
  private string GenerateSequence(int num)
    {
        List<char> charList = new List<char>();
        while (true)
        {
            int mod = (num % 26) + 65;
            num = (int) (num / 26);
            charList.Insert(0, (char) mod);
            if (num > 0)
                num--;
            else if (num == 0)
                break;
        }
        return string.Join("", charList);
    }
  private string GenerateSequence(int num)
    {
        string str = "";
        char achar;
        int mod;
        while (true)
        {
            mod = (num % 26) + 65;
            num = (int)(num / 26);
            achar = Convert.ToChar(mod);
            str = achar + str;
            if (num > 0)
                num--;
            else if (num == 0)
                break;
        }
        return str;
    }
  private string GenerateSequence(int num)
    {
        StringBuilder sb = new StringBuilder();
        int mod;
        while (true)
        {
            mod = (num % 26) + 65;
            num = (int)(num / 26);
            sb.Insert(0, (char) mod);
            if (num > 0)
                num--;
            else if (num == 0)
                break;
        }
        return sb.ToString();
    }
  private string GenerateSequence(int num)
    {
        StringBuilder sb = new StringBuilder();
        int mod;
        do
        {
            mod = (num % 26) + 65;
            num = (int)(num / 26);
            sb.Insert(0, (char) mod);
            if (num > 0)
                num--;
        } while (num != 0);
        return sb.ToString();
    }
  private string GenerateSequence(int num)
    {
        string str = "";
        int mod;
        while (true)
        {
            mod = (num % 26) + 65;
            num = (int)(num / 26);
            str = Convert.ToChar(mod) + str;
            if (num > 0)
                num--;
            else if (num == 0)
                break;
        }
        return str;
    }
  private string GenerateSequence(int num)
    {
        Stack<char> charStack = new Stack<char>();
        int mod;
        while (true)
        {
            mod = (num % 26) + 65;
            num = (int)(num / 26);
            charStack.Push(Convert.ToChar(mod));
            if (num > 0)
                num--;
            else if (num == 0)
                break;
        }
        return new string(charStack.ToArray());
    }
  private string GenerateSequence(int num)
    {
        Stack<char> charStack = new Stack<char>();
        int mod;
        do
        {
            mod = (num % 26) + 65;
            num = (int)(num / 26);
            charStack.Push(Convert.ToChar(mod));
            if (num > 0)
                num--;
        } while (num != 0);
        return new string(charStack.ToArray());
    }
 private string GenerateSequence(int num)
 {
     List<char> charList = new List<char>();
     int mod;
    do
    {
        mod = (num % 26) + 65;
        num = (int) (num / 26);
        charList.Insert(0, Convert.ToChar(mod));
        if (num > 0)
            num--;
    } while (num != 0);
    return string.Join("", charList);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
754
4
Gpt3D_Clone754_4.cs 1 16
Gpt3D_Clone754_4.cs 17 192
----------------------------------------

private string GenerateSequence (int num) {
    string str = "";
    char achar;
    int mod;
    while (true) {
        mod = (num % 26) + 65;
        num = (int) (num / 26);
        achar = (char) mod;
        str = achar + str;
        if (num > 0)
            num --;
        else if (num == 0)
            break;
    }
    return str;
}
----------------------------------------

   private string GenerateSequence(int num)
     {
         StringBuilder str = new StringBuilder(string.Empty);
         int mod;
         while (true)
         {
             mod = (num % 26) + 65;
             num = (int)(num / 26);
             str.Insert(0, Convert.ToChar(mod));
             if (num > 0)
                 num--;
             else if (num == 0)
                 break;
         }
         return str.ToString();
     }
  private string GenerateSequence(int num)
    {
        List<char> charList = new List<char>();
        while (true)
        {
            int mod = (num % 26) + 65;
            num = (int) (num / 26);
            charList.Insert(0, (char) mod);
            if (num > 0)
                num--;
            else if (num == 0)
                break;
        }
        return string.Join("", charList);
    }
  private string GenerateSequence(int num)
    {
        string str = "";
        char achar;
        int mod;
        while (true)
        {
            mod = (num % 26) + 65;
            num = (int)(num / 26);
            achar = Convert.ToChar(mod);
            str = achar + str;
            if (num > 0)
                num--;
            else if (num == 0)
                break;
        }
        return str;
    }
  private string GenerateSequence(int num)
    {
        StringBuilder sb = new StringBuilder();
        int mod;
        while (true)
        {
            mod = (num % 26) + 65;
            num = (int)(num / 26);
            sb.Insert(0, (char) mod);
            if (num > 0)
                num--;
            else if (num == 0)
                break;
        }
        return sb.ToString();
    }
  private string GenerateSequence(int num)
    {
        StringBuilder sb = new StringBuilder();
        int mod;
        do
        {
            mod = (num % 26) + 65;
            num = (int)(num / 26);
            sb.Insert(0, (char) mod);
            if (num > 0)
                num--;
        } while (num != 0);
        return sb.ToString();
    }
  private string GenerateSequence(int num)
    {
        string str = "";
        int mod;
        while (true)
        {
            mod = (num % 26) + 65;
            num = (int)(num / 26);
            str = Convert.ToChar(mod) + str;
            if (num > 0)
                num--;
            else if (num == 0)
                break;
        }
        return str;
    }
  private string GenerateSequence(int num)
    {
        Stack<char> charStack = new Stack<char>();
        int mod;
        while (true)
        {
            mod = (num % 26) + 65;
            num = (int)(num / 26);
            charStack.Push(Convert.ToChar(mod));
            if (num > 0)
                num--;
            else if (num == 0)
                break;
        }
        return new string(charStack.ToArray());
    }
  private string GenerateSequence(int num)
    {
        Stack<char> charStack = new Stack<char>();
        int mod;
        do
        {
            mod = (num % 26) + 65;
            num = (int)(num / 26);
            charStack.Push(Convert.ToChar(mod));
            if (num > 0)
                num--;
        } while (num != 0);
        return new string(charStack.ToArray());
    }
 private string GenerateSequence(int num)
 {
     List<char> charList = new List<char>();
     int mod;
    do
    {
        mod = (num % 26) + 65;
        num = (int) (num / 26);
        charList.Insert(0, Convert.ToChar(mod));
        if (num > 0)
            num--;
    } while (num != 0);
    return string.Join("", charList);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
754
5
Gpt3D_Clone754_5.cs 1 16
Gpt3D_Clone754_5.cs 17 192
----------------------------------------

private string GenerateSequence (int num) {
    string str = "";
    char achar;
    int mod;
    while (true) {
        mod = (num % 26) + 65;
        num = (int) (num / 26);
        achar = (char) mod;
        str = achar + str;
        if (num > 0)
            num --;
        else if (num == 0)
            break;
    }
    return str;
}
----------------------------------------

   private string GenerateSequence(int num)
     {
         StringBuilder str = new StringBuilder(string.Empty);
         int mod;
         while (true)
         {
             mod = (num % 26) + 65;
             num = (int)(num / 26);
             str.Insert(0, Convert.ToChar(mod));
             if (num > 0)
                 num--;
             else if (num == 0)
                 break;
         }
         return str.ToString();
     }
  private string GenerateSequence(int num)
    {
        List<char> charList = new List<char>();
        while (true)
        {
            int mod = (num % 26) + 65;
            num = (int) (num / 26);
            charList.Insert(0, (char) mod);
            if (num > 0)
                num--;
            else if (num == 0)
                break;
        }
        return string.Join("", charList);
    }
  private string GenerateSequence(int num)
    {
        string str = "";
        char achar;
        int mod;
        while (true)
        {
            mod = (num % 26) + 65;
            num = (int)(num / 26);
            achar = Convert.ToChar(mod);
            str = achar + str;
            if (num > 0)
                num--;
            else if (num == 0)
                break;
        }
        return str;
    }
  private string GenerateSequence(int num)
    {
        StringBuilder sb = new StringBuilder();
        int mod;
        while (true)
        {
            mod = (num % 26) + 65;
            num = (int)(num / 26);
            sb.Insert(0, (char) mod);
            if (num > 0)
                num--;
            else if (num == 0)
                break;
        }
        return sb.ToString();
    }
  private string GenerateSequence(int num)
    {
        StringBuilder sb = new StringBuilder();
        int mod;
        do
        {
            mod = (num % 26) + 65;
            num = (int)(num / 26);
            sb.Insert(0, (char) mod);
            if (num > 0)
                num--;
        } while (num != 0);
        return sb.ToString();
    }
  private string GenerateSequence(int num)
    {
        string str = "";
        int mod;
        while (true)
        {
            mod = (num % 26) + 65;
            num = (int)(num / 26);
            str = Convert.ToChar(mod) + str;
            if (num > 0)
                num--;
            else if (num == 0)
                break;
        }
        return str;
    }
  private string GenerateSequence(int num)
    {
        Stack<char> charStack = new Stack<char>();
        int mod;
        while (true)
        {
            mod = (num % 26) + 65;
            num = (int)(num / 26);
            charStack.Push(Convert.ToChar(mod));
            if (num > 0)
                num--;
            else if (num == 0)
                break;
        }
        return new string(charStack.ToArray());
    }
  private string GenerateSequence(int num)
    {
        Stack<char> charStack = new Stack<char>();
        int mod;
        do
        {
            mod = (num % 26) + 65;
            num = (int)(num / 26);
            charStack.Push(Convert.ToChar(mod));
            if (num > 0)
                num--;
        } while (num != 0);
        return new string(charStack.ToArray());
    }
 private string GenerateSequence(int num)
 {
     List<char> charList = new List<char>();
     int mod;
    do
    {
        mod = (num % 26) + 65;
        num = (int) (num / 26);
        charList.Insert(0, Convert.ToChar(mod));
        if (num > 0)
            num--;
    } while (num != 0);
    return string.Join("", charList);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
754
6
Gpt3D_Clone754_6.cs 1 16
Gpt3D_Clone754_6.cs 17 192
----------------------------------------

private string GenerateSequence (int num) {
    string str = "";
    char achar;
    int mod;
    while (true) {
        mod = (num % 26) + 65;
        num = (int) (num / 26);
        achar = (char) mod;
        str = achar + str;
        if (num > 0)
            num --;
        else if (num == 0)
            break;
    }
    return str;
}
----------------------------------------

   private string GenerateSequence(int num)
     {
         StringBuilder str = new StringBuilder(string.Empty);
         int mod;
         while (true)
         {
             mod = (num % 26) + 65;
             num = (int)(num / 26);
             str.Insert(0, Convert.ToChar(mod));
             if (num > 0)
                 num--;
             else if (num == 0)
                 break;
         }
         return str.ToString();
     }
  private string GenerateSequence(int num)
    {
        List<char> charList = new List<char>();
        while (true)
        {
            int mod = (num % 26) + 65;
            num = (int) (num / 26);
            charList.Insert(0, (char) mod);
            if (num > 0)
                num--;
            else if (num == 0)
                break;
        }
        return string.Join("", charList);
    }
  private string GenerateSequence(int num)
    {
        string str = "";
        char achar;
        int mod;
        while (true)
        {
            mod = (num % 26) + 65;
            num = (int)(num / 26);
            achar = Convert.ToChar(mod);
            str = achar + str;
            if (num > 0)
                num--;
            else if (num == 0)
                break;
        }
        return str;
    }
  private string GenerateSequence(int num)
    {
        StringBuilder sb = new StringBuilder();
        int mod;
        while (true)
        {
            mod = (num % 26) + 65;
            num = (int)(num / 26);
            sb.Insert(0, (char) mod);
            if (num > 0)
                num--;
            else if (num == 0)
                break;
        }
        return sb.ToString();
    }
  private string GenerateSequence(int num)
    {
        StringBuilder sb = new StringBuilder();
        int mod;
        do
        {
            mod = (num % 26) + 65;
            num = (int)(num / 26);
            sb.Insert(0, (char) mod);
            if (num > 0)
                num--;
        } while (num != 0);
        return sb.ToString();
    }
  private string GenerateSequence(int num)
    {
        string str = "";
        int mod;
        while (true)
        {
            mod = (num % 26) + 65;
            num = (int)(num / 26);
            str = Convert.ToChar(mod) + str;
            if (num > 0)
                num--;
            else if (num == 0)
                break;
        }
        return str;
    }
  private string GenerateSequence(int num)
    {
        Stack<char> charStack = new Stack<char>();
        int mod;
        while (true)
        {
            mod = (num % 26) + 65;
            num = (int)(num / 26);
            charStack.Push(Convert.ToChar(mod));
            if (num > 0)
                num--;
            else if (num == 0)
                break;
        }
        return new string(charStack.ToArray());
    }
  private string GenerateSequence(int num)
    {
        Stack<char> charStack = new Stack<char>();
        int mod;
        do
        {
            mod = (num % 26) + 65;
            num = (int)(num / 26);
            charStack.Push(Convert.ToChar(mod));
            if (num > 0)
                num--;
        } while (num != 0);
        return new string(charStack.ToArray());
    }
 private string GenerateSequence(int num)
 {
     List<char> charList = new List<char>();
     int mod;
    do
    {
        mod = (num % 26) + 65;
        num = (int) (num / 26);
        charList.Insert(0, Convert.ToChar(mod));
        if (num > 0)
            num--;
    } while (num != 0);
    return string.Join("", charList);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
756
0
Gpt3D_Clone756_0.cs 1 12
Gpt3D_Clone756_0.cs 13 33
----------------------------------------

public IDisposable Enter (string key) {
    Locker locker;
    lock (this.globalLock)
    {
        if (! this.locks.TryGetValue (key, out locker)) {
            this.locks [key] = locker = new Locker (this, key);
        }
        locker.WaitCount ++;
    } locker.Enter ();
    locker.WaitCount --;
    return locker;
}
----------------------------------------

  public IDisposable Enter(string key)
{
    lock (this.globalLock)
    {
        if (this.locks.ContainsKey(key))
        {
            Locker locker = this.locks[key];
            locker.WaitCount++;
            return locker;
        }
        else
        {
            Locker locker = new Locker (this, key);
            this.locks.Add(key, locker);
            locker.Enter();
            return locker;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
756
5
Gpt3D_Clone756_5.cs 1 12
Gpt3D_Clone756_5.cs 13 30
----------------------------------------

public IDisposable Enter (string key) {
    Locker locker;
    lock (this.globalLock)
    {
        if (! this.locks.TryGetValue (key, out locker)) {
            this.locks [key] = locker = new Locker (this, key);
        }
        locker.WaitCount ++;
    } locker.Enter ();
    locker.WaitCount --;
    return locker;
}
----------------------------------------

  public IDisposable Enter (string key) { 
    lock (this.globalLock) 
    { 
        if (!this.locks.ContainsKey(key)) 
        { 
            Locker locker = new Locker (this, key); 
            this.locks.Add(key, locker); 
            locker.Enter(); 
            return locker; 
        } 
        else 
        { 
            return this.locks[key]; 
        } 
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
756
7
Gpt3D_Clone756_7.cs 1 12
Gpt3D_Clone756_7.cs 13 22
----------------------------------------

public IDisposable Enter (string key) {
    Locker locker;
    lock (this.globalLock)
    {
        if (! this.locks.TryGetValue (key, out locker)) {
            this.locks [key] = locker = new Locker (this, key);
        }
        locker.WaitCount ++;
    } locker.Enter ();
    locker.WaitCount --;
    return locker;
}
----------------------------------------

  public IDisposable Enter (string key) {
    Locker locker = new Locker (this, key);
    lock (this.globalLock) {
        this.locks.Add(key, locker);
    }
    locker.Enter ();
    return locker;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
757
0
Gpt3D_Clone757_0.cs 1 15
Gpt3D_Clone757_0.cs 16 73
----------------------------------------

public void ProcessRequest (HttpContext context) {
    ClearResponse (context);
    switch (context.Request.HttpMethod.ToUpper ()) {
        case "OPTIONS" :
            SetAllowCrossSiteRequestHeaders (context);
            SetAllowCrossSiteRequestOrigin (context);
            context.Response.End ();
            break;
        default :
            context.Response.Headers.Add ("Allow", "OPTIONS");
            context.Response.StatusCode = 405;
            break;
    }
    context.ApplicationInstance.CompleteRequest ();
}
----------------------------------------

  public void ProcessRequest (HttpContext context) {
    ClearResponse (context);
    switch (context.Request.HttpMethod.ToUpper ()) {
        case "PATCH": 
            SetAllowCrossSiteRequestHeaders (context);
            SetAllowCrossSiteRequestOrigin (context);
            context.Response.End ();
            break;
        case "POST": 
            SetAllowCrossSiteRequestHeaders (context);
            SetAllowCrossSiteRequestOrigin (context);
            context.Response.End ();
            break;
        case "PUT": 
            SetAllowCrossSiteRequestHeaders (context);
            SetAllowCrossSiteRequestOrigin (context);
            context.Response.End ();
            break;
        case "DELETE": 
            SetAllowCrossSiteRequestHeaders (context);
            SetAllowCrossSiteRequestOrigin (context);
            context.Response.End ();
            break;
        case "TRACE": 
            SetAllowCrossSiteRequestHeaders (context);
            SetAllowCrossSiteRequestOrigin (context);
            context.Response.End ();
            break;
        case "HEAD": 
            SetAllowCrossSiteRequestHeaders (context);
            SetAllowCrossSiteRequestOrigin (context);
            context.Response.End ();
            break;
        case "CONNECT": 
            SetAllowCrossSiteRequestHeaders (context);
            SetAllowCrossSiteRequestOrigin (context);
            context.Response.End ();
            break;
        case "GET": 
            SetAllowCrossSiteRequestHeaders (context);
            SetAllowCrossSiteRequestOrigin (context);
            context.Response.End ();
            break;
        case "OPTIONS" :
            SetAllowCrossSiteRequestHeaders (context);
            SetAllowCrossSiteRequestOrigin (context);
            context.Response.End ();
            break;
        default :
            context.Response.Headers.Add ("Allow", "PATCH, POST, PUT, DELETE, TRACE, HEAD, CONNECT, GET, OPTIONS");
            context.Response.StatusCode = 405;
            break;
    }
    context.ApplicationInstance.CompleteRequest ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
757
1
Gpt3D_Clone757_1.cs 1 15
Gpt3D_Clone757_1.cs 16 67
----------------------------------------

public void ProcessRequest (HttpContext context) {
    ClearResponse (context);
    switch (context.Request.HttpMethod.ToUpper ()) {
        case "OPTIONS" :
            SetAllowCrossSiteRequestHeaders (context);
            SetAllowCrossSiteRequestOrigin (context);
            context.Response.End ();
            break;
        default :
            context.Response.Headers.Add ("Allow", "OPTIONS");
            context.Response.StatusCode = 405;
            break;
    }
    context.ApplicationInstance.CompleteRequest ();
}
----------------------------------------

  public void ProcessRequest (HttpContext context) {
    ClearResponse (context);
    switch (context.Request.HttpMethod.ToUpper ()) {
        case "PUT":
            SetAllowCrossSiteRequestHeaders (context);
            SetAllowCrossSiteRequestOrigin (context);
            context.Response.End ();
            break;
        case "DELETE":
            SetAllowCrossSiteRequestHeaders (context);
            SetAllowCrossSiteRequestOrigin (context);
            context.Response.End ();
            break;
        case "TRACE":
            SetAllowCrossSiteRequestHeaders (context);
            SetAllowCrossSiteRequestOrigin (context);
            context.Response.End ();
            break;
        case "HEAD":
            SetAllowCrossSiteRequestHeaders (context);
            SetAllowCrossSiteRequestOrigin (context);
            context.Response.End ();
            break;
        case "CONNECT":
            SetAllowCrossSiteRequestHeaders (context);
            SetAllowCrossSiteRequestOrigin (context);
            context.Response.End ();
            break;
        case "GET":
            SetAllowCrossSiteRequestHeaders (context);
            SetAllowCrossSiteRequestOrigin (context);
            context.Response.End ();
            break;
        case "OPTIONS" :
            SetAllowCrossSiteRequestHeaders (context);
            SetAllowCrossSiteRequestOrigin (context);
            context.Response.End ();
            break;
        case "POST": 
            SetAllowCrossSiteRequestHeaders (context);
            SetAllowCrossSiteRequestOrigin (context);
            context.Response.End ();
            break;
        default :
            context.Response.Headers.Add ("Allow", "PUT, DELETE, TRACE, HEAD, CONNECT, GET, OPTIONS, POST");
            context.Response.StatusCode = 405;
            break;
    }
    context.ApplicationInstance.CompleteRequest ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
762
0
Gpt3D_Clone762_0.cs 1 12
Gpt3D_Clone762_0.cs 13 27
----------------------------------------

static IOperations < T > Create () {
    var type = typeof (T);
    switch (Type.GetTypeCode (type)) {
        case TypeCode.Byte :
            return (IOperations < T >) new ByteOperations ();
        case TypeCode.Single :
            return (IOperations < T >) new SingleOperations ();
        default :
            var message = String.Format ("Operations for type {0} is not supported.", type.Name);
            throw new NotSupportedException (message);
    }
}
----------------------------------------

 static IOperations < T > Create() {
      var type = typeof(T); 
      if (type == typeof(byte) || type == typeof(Single)) {
          if (type == typeof(byte))
              return (IOperations<T>) new ByteOperations(); 
          else
              return (IOperations<T>) new SingleOperations(); 
      }
      else {
          string message = string.Format("Operations for type {0} is not supported.", type.Name); 
          throw new NotSupportedException(message); 
      }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
762
1
Gpt3D_Clone762_1.cs 1 12
Gpt3D_Clone762_1.cs 13 25
----------------------------------------

static IOperations < T > Create () {
    var type = typeof (T);
    switch (Type.GetTypeCode (type)) {
        case TypeCode.Byte :
            return (IOperations < T >) new ByteOperations ();
        case TypeCode.Single :
            return (IOperations < T >) new SingleOperations ();
        default :
            var message = String.Format ("Operations for type {0} is not supported.", type.Name);
            throw new NotSupportedException (message);
    }
}
----------------------------------------

  static IOperations < T > Create() {
    var type = typeof(T); 
    if ( type == typeof(byte)) 
        return (IOperations<T>) new ByteOperations(); 
    else if ( type == typeof(Single)) 
        return (IOperations<T>) new SingleOperations(); 
    else { 
        string message = string.Format("Operations for type {0} is not supported.", type.Name); 
        throw new NotSupportedException(message); 
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
764
0
Gpt3D_Clone764_0.cs 1 15
Gpt3D_Clone764_0.cs 16 37
----------------------------------------

public string ConvertCsvFileToJsonObject (string path) {
    var csv = new List < string [] > ();
    var lines = File.ReadAllLines (path);
    foreach (string line in lines)
        csv.Add (line.Split (','));
    var properties = lines [0].Split (',');
    var listObjResult = new List < Dictionary < string, string > > ();
    for (int i = 1; i < lines.Length; i ++) {
        var objResult = new Dictionary < string, string > ();
        for (int j = 0; j < properties.Length; j ++)
            objResult.Add (properties [j], csv [i] [j]);
        listObjResult.Add (objResult);
    }
    return JsonConvert.SerializeObject (listObjResult);
}
----------------------------------------

 public string ConvertCsvFileToJsonObject (string path) 
    { 
        var lines = File.ReadAllLines(path).Skip(1); 
        var columns = File.ReadLines(path).First().Split(','); 
        var jsonArray = String.Empty; 
        foreach (var line in lines) 
        { 
            var valueItems = line.Split(',');
            var jsonObject = String.Empty; 
            for (int i = 0; i < columns.Length; i++) 
            { 
                var valueItem = valueItems[i]; 
                jsonObject += "\"" + columns[i] + "\": \"" + valueItem.Trim() + "\","; 
            } 
            jsonObject = jsonObject.Substring(0, jsonObject.Length - 1); 
            jsonArray = jsonArray + "{" + jsonObject + "},"; 
        } 
        jsonArray = jsonArray.Substring(0, jsonArray.Length - 1); 
        return  JsonConvert.SerializeObject ("[" + jsonArray + "]");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
764
1
Gpt3D_Clone764_1.cs 1 15
Gpt3D_Clone764_1.cs 16 32
----------------------------------------

public string ConvertCsvFileToJsonObject (string path) {
    var csv = new List < string [] > ();
    var lines = File.ReadAllLines (path);
    foreach (string line in lines)
        csv.Add (line.Split (','));
    var properties = lines [0].Split (',');
    var listObjResult = new List < Dictionary < string, string > > ();
    for (int i = 1; i < lines.Length; i ++) {
        var objResult = new Dictionary < string, string > ();
        for (int j = 0; j < properties.Length; j ++)
            objResult.Add (properties [j], csv [i] [j]);
        listObjResult.Add (objResult);
    }
    return JsonConvert.SerializeObject (listObjResult);
}
----------------------------------------

  public string ConvertCsvFileToJsonObject (string path) 
    { 
        var lines = File.ReadAllLines (path).Skip(1); 
        var fields = lines.First().Split(','); 
        var results = lines.Skip(1).Select(x => { 
            var values = x.Split(','); 
            var obj = new Dictionary<string, string>(); 
            for (int i = 0; i < fields.Length; i++) 
            { 
                obj.Add(fields[i], values[i]); 
            } 
            return obj; 
        }); 
        return  JsonConvert.SerializeObject (results);
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
764
2
Gpt3D_Clone764_2.cs 1 15
Gpt3D_Clone764_2.cs 16 34
----------------------------------------

public string ConvertCsvFileToJsonObject (string path) {
    var csv = new List < string [] > ();
    var lines = File.ReadAllLines (path);
    foreach (string line in lines)
        csv.Add (line.Split (','));
    var properties = lines [0].Split (',');
    var listObjResult = new List < Dictionary < string, string > > ();
    for (int i = 1; i < lines.Length; i ++) {
        var objResult = new Dictionary < string, string > ();
        for (int j = 0; j < properties.Length; j ++)
            objResult.Add (properties [j], csv [i] [j]);
        listObjResult.Add (objResult);
    }
    return JsonConvert.SerializeObject (listObjResult);
}
----------------------------------------

 public string ConvertCsvFileToJsonObject (string path) 
    { 
        var lines = File.ReadAllLines(path);
        var fields = lines.First().Split(','); 
        var results = lines.Skip(1)
            .Select(line =>
            {
                var values = line.Split(','); 
                var json = new Dictionary<string, string>(); 
                for (int i = 0; i < fields.Length; i++) 
                { 
                    json.Add(fields[i], values[i]); 
                }
                return json; 
            });
        return  JsonConvert.SerializeObject (results);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
764
3
Gpt3D_Clone764_3.cs 1 15
Gpt3D_Clone764_3.cs 16 34
----------------------------------------

public string ConvertCsvFileToJsonObject (string path) {
    var csv = new List < string [] > ();
    var lines = File.ReadAllLines (path);
    foreach (string line in lines)
        csv.Add (line.Split (','));
    var properties = lines [0].Split (',');
    var listObjResult = new List < Dictionary < string, string > > ();
    for (int i = 1; i < lines.Length; i ++) {
        var objResult = new Dictionary < string, string > ();
        for (int j = 0; j < properties.Length; j ++)
            objResult.Add (properties [j], csv [i] [j]);
        listObjResult.Add (objResult);
    }
    return JsonConvert.SerializeObject (listObjResult);
}
----------------------------------------

 public string ConvertCsvFileToJsonObject (string path) 
    { 
        var fields = File.ReadLines(path).First().Split(','); 
        var results = File.ReadLines(path)
            .Skip(1)
            .Select(x => x.Split(','))
            .Select(x =>
            {
                var jsonObject = new Dictionary<string, string>(); 
                for (int i = 0; i < fields.Length; i++) 
                { 
                    jsonObject.Add(fields[i], x[i]); 
                }
                return jsonObject; 
            });
        return  JsonConvert.SerializeObject (results);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
764
4
Gpt3D_Clone764_4.cs 1 15
Gpt3D_Clone764_4.cs 16 34
----------------------------------------

public string ConvertCsvFileToJsonObject (string path) {
    var csv = new List < string [] > ();
    var lines = File.ReadAllLines (path);
    foreach (string line in lines)
        csv.Add (line.Split (','));
    var properties = lines [0].Split (',');
    var listObjResult = new List < Dictionary < string, string > > ();
    for (int i = 1; i < lines.Length; i ++) {
        var objResult = new Dictionary < string, string > ();
        for (int j = 0; j < properties.Length; j ++)
            objResult.Add (properties [j], csv [i] [j]);
        listObjResult.Add (objResult);
    }
    return JsonConvert.SerializeObject (listObjResult);
}
----------------------------------------

 public string ConvertCsvFileToJsonObject (string path) 
    { 
        var csv = File.ReadAllLines(path); 
        var lines = csv.Skip(1); 
        var json = lines.Select(line => string.Join(",", line.Split(',').Select(e => $"\"{e.TrimEnd()}\"")));
        var jsonString = "[" + string.Join(',', json) + "]"; 
        return  JsonConvert.SerializeObject (jsonString);
    }
 public string ConvertCsvFileToJsonObject (string path) 
    { 
        var lines = File.ReadAllLines(path); 
        var headers = lines.First().Split(',').Select(e => e.Trim()); 
        var values = lines.Skip(1).Select(x => x.Split(',').Select(e => e.Trim()).ToArray());
        var list = values.Select(v => headers.Zip(v, (h, val) => new {h, val}).ToDictionary(a => a.h, a => a.val)); 
        return  JsonConvert.SerializeObject (list);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
764
5
Gpt3D_Clone764_5.cs 1 15
Gpt3D_Clone764_5.cs 16 34
----------------------------------------

public string ConvertCsvFileToJsonObject (string path) {
    var csv = new List < string [] > ();
    var lines = File.ReadAllLines (path);
    foreach (string line in lines)
        csv.Add (line.Split (','));
    var properties = lines [0].Split (',');
    var listObjResult = new List < Dictionary < string, string > > ();
    for (int i = 1; i < lines.Length; i ++) {
        var objResult = new Dictionary < string, string > ();
        for (int j = 0; j < properties.Length; j ++)
            objResult.Add (properties [j], csv [i] [j]);
        listObjResult.Add (objResult);
    }
    return JsonConvert.SerializeObject (listObjResult);
}
----------------------------------------

 public string ConvertCsvFileToJsonObject (string path) 
    { 
        var csv = File.ReadAllLines(path); 
        var lines = csv.Skip(1); 
        var json = lines.Select(line => string.Join(",", line.Split(',').Select(e => $"\"{e.TrimEnd()}\"")));
        var jsonString = "[" + string.Join(',', json) + "]"; 
        return  JsonConvert.SerializeObject (jsonString);
    }
 public string ConvertCsvFileToJsonObject (string path) 
    { 
        var lines = File.ReadAllLines(path); 
        var headers = lines.First().Split(',').Select(e => e.Trim()); 
        var values = lines.Skip(1).Select(x => x.Split(',').Select(e => e.Trim()).ToArray());
        var list = values.Select(v => headers.Zip(v, (h, val) => new {h, val}).ToDictionary(a => a.h, a => a.val)); 
        return  JsonConvert.SerializeObject (list);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
764
6
Gpt3D_Clone764_6.cs 1 15
Gpt3D_Clone764_6.cs 16 25
----------------------------------------

public string ConvertCsvFileToJsonObject (string path) {
    var csv = new List < string [] > ();
    var lines = File.ReadAllLines (path);
    foreach (string line in lines)
        csv.Add (line.Split (','));
    var properties = lines [0].Split (',');
    var listObjResult = new List < Dictionary < string, string > > ();
    for (int i = 1; i < lines.Length; i ++) {
        var objResult = new Dictionary < string, string > ();
        for (int j = 0; j < properties.Length; j ++)
            objResult.Add (properties [j], csv [i] [j]);
        listObjResult.Add (objResult);
    }
    return JsonConvert.SerializeObject (listObjResult);
}
----------------------------------------

 public string ConvertCsvFileToJsonObject (string path) 
    { 
        var lines = File.ReadAllLines(path);
        var headers = lines[0].Split(','); 
        var values = lines.Skip(1).Select(x => x.Split(',').Select(e => e.Trim()).ToArray());
        var serialized = values.Select(v => headers.Zip(v, (h, val) => new {h, val}).ToDictionary(a => a.h, a => a.val)); 
        return  JsonConvert.SerializeObject (serialized);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
764
7
Gpt3D_Clone764_7.cs 1 15
Gpt3D_Clone764_7.cs 16 32
----------------------------------------

public string ConvertCsvFileToJsonObject (string path) {
    var csv = new List < string [] > ();
    var lines = File.ReadAllLines (path);
    foreach (string line in lines)
        csv.Add (line.Split (','));
    var properties = lines [0].Split (',');
    var listObjResult = new List < Dictionary < string, string > > ();
    for (int i = 1; i < lines.Length; i ++) {
        var objResult = new Dictionary < string, string > ();
        for (int j = 0; j < properties.Length; j ++)
            objResult.Add (properties [j], csv [i] [j]);
        listObjResult.Add (objResult);
    }
    return JsonConvert.SerializeObject (listObjResult);
}
----------------------------------------

 public string ConvertCsvFileToJsonObject (string path) 
    { 
        string[][] values = File.ReadLines(path)
            .Skip(1) 
            .Select(l => l.Split(','))
            .ToArray();
        
        var headers = File.ReadLines(path).First().Split(',');
        
        var result = values.Select(array => array.Zip(headers, (value, header) =>  
            new {header, value})
            .ToDictionary(x => x.header, x => x.value));
        return  JsonConvert.SerializeObject (result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
764
8
Gpt3D_Clone764_8.cs 1 15
Gpt3D_Clone764_8.cs 16 27
----------------------------------------

public string ConvertCsvFileToJsonObject (string path) {
    var csv = new List < string [] > ();
    var lines = File.ReadAllLines (path);
    foreach (string line in lines)
        csv.Add (line.Split (','));
    var properties = lines [0].Split (',');
    var listObjResult = new List < Dictionary < string, string > > ();
    for (int i = 1; i < lines.Length; i ++) {
        var objResult = new Dictionary < string, string > ();
        for (int j = 0; j < properties.Length; j ++)
            objResult.Add (properties [j], csv [i] [j]);
        listObjResult.Add (objResult);
    }
    return JsonConvert.SerializeObject (listObjResult);
}
----------------------------------------

 public string ConvertCsvFileToJsonObject (string path) 
    { 
        var headers = File.ReadLines(path).First().Split(','); 
        var records = File.ReadLines(path)
            .Skip(1)
            .Select(x => x.Split(','));
        var objs = records.Select(line => line.Zip(headers, (v, h) => new {Header = h.Trim(), Value = v.Trim()}).ToDictionary(x => x.Header, x => x.Value))
            .ToList();
        return  JsonConvert.SerializeObject (objs);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
764
9
Gpt3D_Clone764_9.cs 1 15
Gpt3D_Clone764_9.cs 16 25
----------------------------------------

public string ConvertCsvFileToJsonObject (string path) {
    var csv = new List < string [] > ();
    var lines = File.ReadAllLines (path);
    foreach (string line in lines)
        csv.Add (line.Split (','));
    var properties = lines [0].Split (',');
    var listObjResult = new List < Dictionary < string, string > > ();
    for (int i = 1; i < lines.Length; i ++) {
        var objResult = new Dictionary < string, string > ();
        for (int j = 0; j < properties.Length; j ++)
            objResult.Add (properties [j], csv [i] [j]);
        listObjResult.Add (objResult);
    }
    return JsonConvert.SerializeObject (listObjResult);
}
----------------------------------------

 public string ConvertCsvFileToJsonObject (string path) 
    { 
        var csvdata = File.ReadAllLines(path);
        var headers = csvdata[0].Split(','); 
        
        var jsondata = csvdata.Skip(1).Select(x => x.Split(',').Select((data, index) => new { Key = headers[index], Value = data }).ToDictionary(x => x.Key, y => y.Value));
        return  JsonConvert.SerializeObject (jsondata);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
766
10
Gpt3D_Clone766_10.cs 1 16
Gpt3D_Clone766_10.cs 17 31
----------------------------------------

static void Main (string [] args) {
    unpack ();
    Process process = new Process ();
    process.StartInfo.FileName = "exe1.exe";
    process.Start ();
    process.WaitForExit ();
    process = new Process ();
    process.StartInfo.FileName = "exe2.exe";
    process.Start ();
    process.WaitForExit ();
    process = new Process ();
    process.StartInfo.FileName = @"C:\Windows\SysWOW64\WindowsPowerShell\v1.0\powershell.exe";
    process.StartInfo.Arguments = "ps1.ps1";
    process.Start ();
    process.WaitForExit ();
}
----------------------------------------

 static void Main(string[] args) {
            Unpack();
            Exe1();
            Exe2();
            PowerShellPs1();
            }
            static void Exe1() {
            Process process = new Process();
            process.StartInfo.FileName = "exe1.exe";
            process.Start();
            process.WaitForExit();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
766
11
Gpt3D_Clone766_11.cs 1 16
Gpt3D_Clone766_11.cs 17 31
----------------------------------------

static void Main (string [] args) {
    unpack ();
    Process process = new Process ();
    process.StartInfo.FileName = "exe1.exe";
    process.Start ();
    process.WaitForExit ();
    process = new Process ();
    process.StartInfo.FileName = "exe2.exe";
    process.Start ();
    process.WaitForExit ();
    process = new Process ();
    process.StartInfo.FileName = @"C:\Windows\SysWOW64\WindowsPowerShell\v1.0\powershell.exe";
    process.StartInfo.Arguments = "ps1.ps1";
    process.Start ();
    process.WaitForExit ();
}
----------------------------------------

 static void Main(string[] args) {
            Unpack();
            Exe1();
            Exe2();
            PowerShellPs1();
            }
            static void Exe1() {
            Process process = new Process();
            process.StartInfo.FileName = "exe1.exe";
            process.Start();
            process.WaitForExit();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
766
12
Gpt3D_Clone766_12.cs 1 16
Gpt3D_Clone766_12.cs 17 32
----------------------------------------

static void Main (string [] args) {
    unpack ();
    Process process = new Process ();
    process.StartInfo.FileName = "exe1.exe";
    process.Start ();
    process.WaitForExit ();
    process = new Process ();
    process.StartInfo.FileName = "exe2.exe";
    process.Start ();
    process.WaitForExit ();
    process = new Process ();
    process.StartInfo.FileName = @"C:\Windows\SysWOW64\WindowsPowerShell\v1.0\powershell.exe";
    process.StartInfo.Arguments = "ps1.ps1";
    process.Start ();
    process.WaitForExit ();
}
----------------------------------------

static void Exe2() {
            Process process = new Process();
            process.StartInfo.FileName = "exe2.exe";
            process.Start();
            process.WaitForExit();
            }
            static void PowerShallPs1() {
            Process process = new Process();
            process.StartInfo.FileName = @"C:\Windows\SysWOW64\WindowsPowerShell\v1.0\PowerShell.exe";
            process.StartInfo.Arguments = "ps1.ps1";
            process.Start();
            process.WaitForExit();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
766
4
Gpt3D_Clone766_4.cs 1 16
Gpt3D_Clone766_4.cs 17 41
----------------------------------------

static void Main (string [] args) {
    unpack ();
    Process process = new Process ();
    process.StartInfo.FileName = "exe1.exe";
    process.Start ();
    process.WaitForExit ();
    process = new Process ();
    process.StartInfo.FileName = "exe2.exe";
    process.Start ();
    process.WaitForExit ();
    process = new Process ();
    process.StartInfo.FileName = @"C:\Windows\SysWOW64\WindowsPowerShell\v1.0\powershell.exe";
    process.StartInfo.Arguments = "ps1.ps1";
    process.Start ();
    process.WaitForExit ();
}
----------------------------------------

 static void Main(string[] args) {
   Unpack();
   // Create and init a Dictionary mapping ProcessStartInfo to a delegate
   Dictionary<ProcessStartInfo, Action> dictProcessStartInfoToAction = new Dictionary<ProcessStartInfo, Action>();
   dictProcessStartInfoToAction.Add(new ProcessStartInfo { FileName = "exe1.exe" }, () => {
       Process process = new Process { StartInfo = new ProcessStartInfo { FileName = "exe1.exe" } };
       process.Start();
       process.WaitForExit();
   });
   dictProcessStartInfoToAction.Add(new ProcessStartInfo { FileName = "exe2.exe" }, () => {
       Process process = new Process { StartInfo = new ProcessStartInfo { FileName = "exe2.exe" } };
       process.Start();
       process.WaitForExit();
   });
   dictProcessStartInfoToAction.Add(new ProcessStartInfo { FileName = @"C:\Windows\SysWOW64\WindowsPowerShell\v1.0\PowerShell.exe", Arguments = "ps1.ps1" }, () => {
       Process process = new Process { StartInfo = new ProcessStartInfo { FileName = @"C:\Windows\SysWOW64\WindowsPowerShell\v1.0\PowerShell.exe", Arguments = "ps1.ps1" } };
       process.Start();
       process.WaitForExit();
   });
    // Execute every action in the Dictionary
    foreach (var processStartInfoAndAction in dictProcessStartInfoToAction) 
        processStartInfoAndAction.Value.Invoke();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
766
5
Gpt3D_Clone766_5.cs 1 16
Gpt3D_Clone766_5.cs 17 32
----------------------------------------

static void Main (string [] args) {
    unpack ();
    Process process = new Process ();
    process.StartInfo.FileName = "exe1.exe";
    process.Start ();
    process.WaitForExit ();
    process = new Process ();
    process.StartInfo.FileName = "exe2.exe";
    process.Start ();
    process.WaitForExit ();
    process = new Process ();
    process.StartInfo.FileName = @"C:\Windows\SysWOW64\WindowsPowerShell\v1.0\powershell.exe";
    process.StartInfo.Arguments = "ps1.ps1";
    process.Start ();
    process.WaitForExit ();
}
----------------------------------------

 static void Main (string [] args) {
            Unpack ();
            //defines a queue for processes
            Queue<Process> processQueue = new Queue<Process>();
            processQueue.Enqueue(new Process { StartInfo = new ProcessStartInfo { FileName = "exe1.exe" } });
            processQueue.Enqueue(new Process { StartInfo = new ProcessStartInfo { FileName = "exe2.exe" } });
            processQueue.Enqueue(new Process { StartInfo = new ProcessStartInfo { FileName = @"C:\Windows\SysWOW64\WindowsPowerShell\v1.0\PowerShell.exe", Arguments = "ps1.ps1" } });
            //executes every process in the Queue
            while (processQueue.Count != 0) {
                Process process = processQueue.Dequeue();
                process.Start();
                process.WaitForExit();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
766
6
Gpt3D_Clone766_6.cs 1 16
Gpt3D_Clone766_6.cs 17 31
----------------------------------------

static void Main (string [] args) {
    unpack ();
    Process process = new Process ();
    process.StartInfo.FileName = "exe1.exe";
    process.Start ();
    process.WaitForExit ();
    process = new Process ();
    process.StartInfo.FileName = "exe2.exe";
    process.Start ();
    process.WaitForExit ();
    process = new Process ();
    process.StartInfo.FileName = @"C:\Windows\SysWOW64\WindowsPowerShell\v1.0\powershell.exe";
    process.StartInfo.Arguments = "ps1.ps1";
    process.Start ();
    process.WaitForExit ();
}
----------------------------------------

 static void Main(string[] args) {
   Unpack();
   // Create a List of Process objects
   List<Process> processList = new List<Process>();
   processList.Add(new Process { StartInfo = new ProcessStartInfo { FileName = "exe1.exe" } });
   processList.Add(new Process { StartInfo = new ProcessStartInfo { FileName = "exe2.exe" } });
   processList.Add(new Process { StartInfo = new ProcessStartInfo { FileName = @"C:\Windows\SysWOW64\WindowsPowerShell\v1.0\PowerShell.exe", Arguments = "ps1.ps1" } });
   // Execute every process in the List
   foreach (Process process in processList) {
       process.Start();
       process.WaitForExit();
   }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
766
7
Gpt3D_Clone766_7.cs 1 16
Gpt3D_Clone766_7.cs 17 31
----------------------------------------

static void Main (string [] args) {
    unpack ();
    Process process = new Process ();
    process.StartInfo.FileName = "exe1.exe";
    process.Start ();
    process.WaitForExit ();
    process = new Process ();
    process.StartInfo.FileName = "exe2.exe";
    process.Start ();
    process.WaitForExit ();
    process = new Process ();
    process.StartInfo.FileName = @"C:\Windows\SysWOW64\WindowsPowerShell\v1.0\powershell.exe";
    process.StartInfo.Arguments = "ps1.ps1";
    process.Start ();
    process.WaitForExit ();
}
----------------------------------------

 static void Main(string[] args) {
   Unpack();
   // Define and init array of different exe names
   string[] exeNames = { "exe1.exe", "exe2.exe", @"C:\Windows\SysWOW64\WindowsPowerShell\v1.0\PowerShell.exe" };
   // Loop through the array of exe names and execute every command
   foreach (string exeName in exeNames) {
       Process process = new Process();
       process.StartInfo.FileName = exeName;
       process.StartInfo.Arguments = (exeName == @"C:\Windows\SysWOW64\WindowsPowerShell\v1.0\PowerShell.exe") ? "ps1.ps1" : string.Empty;
       process.Start();
       process.WaitForExit();
   }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
766
8
Gpt3D_Clone766_8.cs 1 16
Gpt3D_Clone766_8.cs 17 33
----------------------------------------

static void Main (string [] args) {
    unpack ();
    Process process = new Process ();
    process.StartInfo.FileName = "exe1.exe";
    process.Start ();
    process.WaitForExit ();
    process = new Process ();
    process.StartInfo.FileName = "exe2.exe";
    process.Start ();
    process.WaitForExit ();
    process = new Process ();
    process.StartInfo.FileName = @"C:\Windows\SysWOW64\WindowsPowerShell\v1.0\powershell.exe";
    process.StartInfo.Arguments = "ps1.ps1";
    process.Start ();
    process.WaitForExit ();
}
----------------------------------------

 static void Main(string[] args) {
   Unpack();
   // Define and init array of changed ProcessStartInfo objects
   ProcessStartInfo[] processStartInfos = { 
       new ProcessStartInfo { FileName = "exe1.exe" }, 
       new ProcessStartInfo { FileName = "exe2.exe" },
       new ProcessStartInfo { FileName = @"C:\Windows\SysWOW64\WindowsPowerShell\v1.0\PowerShell.exe", Arguments = "ps1.ps1" } 
   };
   // Loop through the array of ProcessStartInfo objects and execute every command
   foreach (ProcessStartInfo processStartInfo in processStartInfos) {
       Process process = new Process { StartInfo = processStartInfo };
       process.Start();
       process.WaitForExit();
   }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
766
9
Gpt3D_Clone766_9.cs 1 16
Gpt3D_Clone766_9.cs 17 32
----------------------------------------

static void Main (string [] args) {
    unpack ();
    Process process = new Process ();
    process.StartInfo.FileName = "exe1.exe";
    process.Start ();
    process.WaitForExit ();
    process = new Process ();
    process.StartInfo.FileName = "exe2.exe";
    process.Start ();
    process.WaitForExit ();
    process = new Process ();
    process.StartInfo.FileName = @"C:\Windows\SysWOW64\WindowsPowerShell\v1.0\powershell.exe";
    process.StartInfo.Arguments = "ps1.ps1";
    process.Start ();
    process.WaitForExit ();
}
----------------------------------------

static void Exe2() {
            Process process = new Process();
            process.StartInfo.FileName = "exe2.exe";
            process.Start();
            process.WaitForExit();
            }
            static void PowerShallPs1() {
            Process process = new Process();
            process.StartInfo.FileName = @"C:\Windows\SysWOW64\WindowsPowerShell\v1.0\PowerShell.exe";
            process.StartInfo.Arguments = "ps1.ps1";
            process.Start();
            process.WaitForExit();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
768
0
Gpt3D_Clone768_0.cs 1 18
Gpt3D_Clone768_0.cs 19 36
----------------------------------------

private static string NextUniqueFilename (string fileName, Func < string, bool > inUse) {
    if (! inUse (fileName)) {
        return fileName;
    }
    var name = Path.GetFileNameWithoutExtension (fileName);
    var extension = Path.GetExtension (fileName);
    if (name == null) {
        throw new Exception ("File name without extension returned null.");
    }
    const int max = 9999;
    for (var i = 1; i < max; i ++) {
        var nextUniqueFilename = string.Format ("{0} ({1}){2}", name, i, extension);
        if (! inUse (nextUniqueFilename)) {
            return nextUniqueFilename;
        }
    }
    throw new Exception (string.Format ("Too many files by this name. Limit: {0}", max));
}
----------------------------------------

 private static string NextUniqueFilename (string fileName, Func < string, bool > inUse) {
    var i=1;
    string nextUniqueFileName = fileName;
    while (inUse (nextUniqueFileName)) {
        int extensionLocation = fileName.LastIndexOfAny(new char[] { '/', '.'});
        string newName = String.Format("{0} ({1}{2}",
                fileName.Substring(0, extensionLocation),           
                i++,
                fileName.Substring(extensionLocation, 
                fileName.Length - extensionLocation));
        // Increment after getting the new filename
        nextUniqueFileName = newName;
    }
    return nextUniqueFileName;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
769
0
Gpt3D_Clone769_0.cs 1 15
Gpt3D_Clone769_0.cs 16 135
----------------------------------------

private bool IsOk (string str) {
    char ? last = null;
    var i = 1;
    foreach (var c in str) {
        if (last == c) {
            i ++;
            if (i > 2)
                return false;
        } else {
            i = 1;
        }
        last = c;
    }
    return true;
}
----------------------------------------

  private bool IsOk (string str) {
        HashSet<char> characters = new HashSet<char>();
        foreach(char c in str)
        {
            if(characters.Contains(c))
            {
                return false;
            }
            else
            {
                characters.Add(c);
            }
        }
        return true;
    }
  private bool IsOk (string str) {
        var charDictionary = new Dictionary<char, int>();
        foreach(char c in str)
        {
            if(!charDictionary.ContainsKey(c))
            {
                charDictionary[c] = 1;
            }
            else
            {
                if(charDictionary[c] == 2)
                    return false;
                else
                    charDictionary[c]++;
            }
        }
        return true;
    }
  private bool IsOk (string str) {
        int numSame = 0; 
        char prev = new char(); 
    
        foreach(char c in str) {
            if(numSame == 0){
                prev = c;
                numSame++;
            } else if(prev == c){
                numSame++;
            } else {
                prev = c;
                numSame = 1;
            }
            if(numSame > 2){
                return false;
            }
    
        }
        return true;
    }
 private bool IsOk (string str) {
        char ? prev = null;
        int count = 0;
        foreach(char current in str) {
            if (prev!=null) {
                if(prev == current) {
                    count ++;
                    if (count >2) {
                        return false;
                    }
                }else {
                    count = 1;
                }
            }
            prev = current;
        }
        return true;
    }
  private bool IsOk (string str) {
        HashSet<char> repeatedChars = new HashSet<char>();
       
        foreach(char c in str){
            if(repeatedChars.Contains(c))
                return false;
            else
                repeatedChars.Add(c);
        }
    
        return true;
    }
  private bool IsOk (string str) {
        bool[] seen = new bool[256];
        int length = 0;
	
        foreach(char c in str ) {
            length++;
            if(seen[c])
	            return false;
            else
                seen[c] = true;
            if(length > 2)
	            return false;
        }
        return true;
    }
 private bool IsOk (string str) {
    int[] letterFrequency = new int[256];
    
    foreach (char c in str) {
        letterFrequency[c]++;
        
        if (letterFrequency[c] > 2) {
            return false;
        }
    }
    
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
769
2
Gpt3D_Clone769_2.cs 1 15
Gpt3D_Clone769_2.cs 16 135
----------------------------------------

private bool IsOk (string str) {
    char ? last = null;
    var i = 1;
    foreach (var c in str) {
        if (last == c) {
            i ++;
            if (i > 2)
                return false;
        } else {
            i = 1;
        }
        last = c;
    }
    return true;
}
----------------------------------------

  private bool IsOk (string str) {
        HashSet<char> characters = new HashSet<char>();
        foreach(char c in str)
        {
            if(characters.Contains(c))
            {
                return false;
            }
            else
            {
                characters.Add(c);
            }
        }
        return true;
    }
  private bool IsOk (string str) {
        var charDictionary = new Dictionary<char, int>();
        foreach(char c in str)
        {
            if(!charDictionary.ContainsKey(c))
            {
                charDictionary[c] = 1;
            }
            else
            {
                if(charDictionary[c] == 2)
                    return false;
                else
                    charDictionary[c]++;
            }
        }
        return true;
    }
  private bool IsOk (string str) {
        int numSame = 0; 
        char prev = new char(); 
    
        foreach(char c in str) {
            if(numSame == 0){
                prev = c;
                numSame++;
            } else if(prev == c){
                numSame++;
            } else {
                prev = c;
                numSame = 1;
            }
            if(numSame > 2){
                return false;
            }
    
        }
        return true;
    }
 private bool IsOk (string str) {
        char ? prev = null;
        int count = 0;
        foreach(char current in str) {
            if (prev!=null) {
                if(prev == current) {
                    count ++;
                    if (count >2) {
                        return false;
                    }
                }else {
                    count = 1;
                }
            }
            prev = current;
        }
        return true;
    }
  private bool IsOk (string str) {
        HashSet<char> repeatedChars = new HashSet<char>();
       
        foreach(char c in str){
            if(repeatedChars.Contains(c))
                return false;
            else
                repeatedChars.Add(c);
        }
    
        return true;
    }
  private bool IsOk (string str) {
        bool[] seen = new bool[256];
        int length = 0;
	
        foreach(char c in str ) {
            length++;
            if(seen[c])
	            return false;
            else
                seen[c] = true;
            if(length > 2)
	            return false;
        }
        return true;
    }
 private bool IsOk (string str) {
    int[] letterFrequency = new int[256];
    
    foreach (char c in str) {
        letterFrequency[c]++;
        
        if (letterFrequency[c] > 2) {
            return false;
        }
    }
    
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
769
3
Gpt3D_Clone769_3.cs 1 15
Gpt3D_Clone769_3.cs 16 135
----------------------------------------

private bool IsOk (string str) {
    char ? last = null;
    var i = 1;
    foreach (var c in str) {
        if (last == c) {
            i ++;
            if (i > 2)
                return false;
        } else {
            i = 1;
        }
        last = c;
    }
    return true;
}
----------------------------------------

  private bool IsOk (string str) {
        HashSet<char> characters = new HashSet<char>();
        foreach(char c in str)
        {
            if(characters.Contains(c))
            {
                return false;
            }
            else
            {
                characters.Add(c);
            }
        }
        return true;
    }
  private bool IsOk (string str) {
        var charDictionary = new Dictionary<char, int>();
        foreach(char c in str)
        {
            if(!charDictionary.ContainsKey(c))
            {
                charDictionary[c] = 1;
            }
            else
            {
                if(charDictionary[c] == 2)
                    return false;
                else
                    charDictionary[c]++;
            }
        }
        return true;
    }
  private bool IsOk (string str) {
        int numSame = 0; 
        char prev = new char(); 
    
        foreach(char c in str) {
            if(numSame == 0){
                prev = c;
                numSame++;
            } else if(prev == c){
                numSame++;
            } else {
                prev = c;
                numSame = 1;
            }
            if(numSame > 2){
                return false;
            }
    
        }
        return true;
    }
 private bool IsOk (string str) {
        char ? prev = null;
        int count = 0;
        foreach(char current in str) {
            if (prev!=null) {
                if(prev == current) {
                    count ++;
                    if (count >2) {
                        return false;
                    }
                }else {
                    count = 1;
                }
            }
            prev = current;
        }
        return true;
    }
  private bool IsOk (string str) {
        HashSet<char> repeatedChars = new HashSet<char>();
       
        foreach(char c in str){
            if(repeatedChars.Contains(c))
                return false;
            else
                repeatedChars.Add(c);
        }
    
        return true;
    }
  private bool IsOk (string str) {
        bool[] seen = new bool[256];
        int length = 0;
	
        foreach(char c in str ) {
            length++;
            if(seen[c])
	            return false;
            else
                seen[c] = true;
            if(length > 2)
	            return false;
        }
        return true;
    }
 private bool IsOk (string str) {
    int[] letterFrequency = new int[256];
    
    foreach (char c in str) {
        letterFrequency[c]++;
        
        if (letterFrequency[c] > 2) {
            return false;
        }
    }
    
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
769
4
Gpt3D_Clone769_4.cs 1 15
Gpt3D_Clone769_4.cs 16 135
----------------------------------------

private bool IsOk (string str) {
    char ? last = null;
    var i = 1;
    foreach (var c in str) {
        if (last == c) {
            i ++;
            if (i > 2)
                return false;
        } else {
            i = 1;
        }
        last = c;
    }
    return true;
}
----------------------------------------

  private bool IsOk (string str) {
        HashSet<char> characters = new HashSet<char>();
        foreach(char c in str)
        {
            if(characters.Contains(c))
            {
                return false;
            }
            else
            {
                characters.Add(c);
            }
        }
        return true;
    }
  private bool IsOk (string str) {
        var charDictionary = new Dictionary<char, int>();
        foreach(char c in str)
        {
            if(!charDictionary.ContainsKey(c))
            {
                charDictionary[c] = 1;
            }
            else
            {
                if(charDictionary[c] == 2)
                    return false;
                else
                    charDictionary[c]++;
            }
        }
        return true;
    }
  private bool IsOk (string str) {
        int numSame = 0; 
        char prev = new char(); 
    
        foreach(char c in str) {
            if(numSame == 0){
                prev = c;
                numSame++;
            } else if(prev == c){
                numSame++;
            } else {
                prev = c;
                numSame = 1;
            }
            if(numSame > 2){
                return false;
            }
    
        }
        return true;
    }
 private bool IsOk (string str) {
        char ? prev = null;
        int count = 0;
        foreach(char current in str) {
            if (prev!=null) {
                if(prev == current) {
                    count ++;
                    if (count >2) {
                        return false;
                    }
                }else {
                    count = 1;
                }
            }
            prev = current;
        }
        return true;
    }
  private bool IsOk (string str) {
        HashSet<char> repeatedChars = new HashSet<char>();
       
        foreach(char c in str){
            if(repeatedChars.Contains(c))
                return false;
            else
                repeatedChars.Add(c);
        }
    
        return true;
    }
  private bool IsOk (string str) {
        bool[] seen = new bool[256];
        int length = 0;
	
        foreach(char c in str ) {
            length++;
            if(seen[c])
	            return false;
            else
                seen[c] = true;
            if(length > 2)
	            return false;
        }
        return true;
    }
 private bool IsOk (string str) {
    int[] letterFrequency = new int[256];
    
    foreach (char c in str) {
        letterFrequency[c]++;
        
        if (letterFrequency[c] > 2) {
            return false;
        }
    }
    
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
769
5
Gpt3D_Clone769_5.cs 1 15
Gpt3D_Clone769_5.cs 16 135
----------------------------------------

private bool IsOk (string str) {
    char ? last = null;
    var i = 1;
    foreach (var c in str) {
        if (last == c) {
            i ++;
            if (i > 2)
                return false;
        } else {
            i = 1;
        }
        last = c;
    }
    return true;
}
----------------------------------------

  private bool IsOk (string str) {
        HashSet<char> characters = new HashSet<char>();
        foreach(char c in str)
        {
            if(characters.Contains(c))
            {
                return false;
            }
            else
            {
                characters.Add(c);
            }
        }
        return true;
    }
  private bool IsOk (string str) {
        var charDictionary = new Dictionary<char, int>();
        foreach(char c in str)
        {
            if(!charDictionary.ContainsKey(c))
            {
                charDictionary[c] = 1;
            }
            else
            {
                if(charDictionary[c] == 2)
                    return false;
                else
                    charDictionary[c]++;
            }
        }
        return true;
    }
  private bool IsOk (string str) {
        int numSame = 0; 
        char prev = new char(); 
    
        foreach(char c in str) {
            if(numSame == 0){
                prev = c;
                numSame++;
            } else if(prev == c){
                numSame++;
            } else {
                prev = c;
                numSame = 1;
            }
            if(numSame > 2){
                return false;
            }
    
        }
        return true;
    }
 private bool IsOk (string str) {
        char ? prev = null;
        int count = 0;
        foreach(char current in str) {
            if (prev!=null) {
                if(prev == current) {
                    count ++;
                    if (count >2) {
                        return false;
                    }
                }else {
                    count = 1;
                }
            }
            prev = current;
        }
        return true;
    }
  private bool IsOk (string str) {
        HashSet<char> repeatedChars = new HashSet<char>();
       
        foreach(char c in str){
            if(repeatedChars.Contains(c))
                return false;
            else
                repeatedChars.Add(c);
        }
    
        return true;
    }
  private bool IsOk (string str) {
        bool[] seen = new bool[256];
        int length = 0;
	
        foreach(char c in str ) {
            length++;
            if(seen[c])
	            return false;
            else
                seen[c] = true;
            if(length > 2)
	            return false;
        }
        return true;
    }
 private bool IsOk (string str) {
    int[] letterFrequency = new int[256];
    
    foreach (char c in str) {
        letterFrequency[c]++;
        
        if (letterFrequency[c] > 2) {
            return false;
        }
    }
    
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
769
6
Gpt3D_Clone769_6.cs 1 15
Gpt3D_Clone769_6.cs 16 135
----------------------------------------

private bool IsOk (string str) {
    char ? last = null;
    var i = 1;
    foreach (var c in str) {
        if (last == c) {
            i ++;
            if (i > 2)
                return false;
        } else {
            i = 1;
        }
        last = c;
    }
    return true;
}
----------------------------------------

  private bool IsOk (string str) {
        HashSet<char> characters = new HashSet<char>();
        foreach(char c in str)
        {
            if(characters.Contains(c))
            {
                return false;
            }
            else
            {
                characters.Add(c);
            }
        }
        return true;
    }
  private bool IsOk (string str) {
        var charDictionary = new Dictionary<char, int>();
        foreach(char c in str)
        {
            if(!charDictionary.ContainsKey(c))
            {
                charDictionary[c] = 1;
            }
            else
            {
                if(charDictionary[c] == 2)
                    return false;
                else
                    charDictionary[c]++;
            }
        }
        return true;
    }
  private bool IsOk (string str) {
        int numSame = 0; 
        char prev = new char(); 
    
        foreach(char c in str) {
            if(numSame == 0){
                prev = c;
                numSame++;
            } else if(prev == c){
                numSame++;
            } else {
                prev = c;
                numSame = 1;
            }
            if(numSame > 2){
                return false;
            }
    
        }
        return true;
    }
 private bool IsOk (string str) {
        char ? prev = null;
        int count = 0;
        foreach(char current in str) {
            if (prev!=null) {
                if(prev == current) {
                    count ++;
                    if (count >2) {
                        return false;
                    }
                }else {
                    count = 1;
                }
            }
            prev = current;
        }
        return true;
    }
  private bool IsOk (string str) {
        HashSet<char> repeatedChars = new HashSet<char>();
       
        foreach(char c in str){
            if(repeatedChars.Contains(c))
                return false;
            else
                repeatedChars.Add(c);
        }
    
        return true;
    }
  private bool IsOk (string str) {
        bool[] seen = new bool[256];
        int length = 0;
	
        foreach(char c in str ) {
            length++;
            if(seen[c])
	            return false;
            else
                seen[c] = true;
            if(length > 2)
	            return false;
        }
        return true;
    }
 private bool IsOk (string str) {
    int[] letterFrequency = new int[256];
    
    foreach (char c in str) {
        letterFrequency[c]++;
        
        if (letterFrequency[c] > 2) {
            return false;
        }
    }
    
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
770
0
Gpt3D_Clone770_0.cs 1 21
Gpt3D_Clone770_0.cs 22 42
----------------------------------------

public static string JoinAnd < T > (string separator, string sepLast, IEnumerable < T > values) {
    var sb = new StringBuilder ();
    var enumerator = values.GetEnumerator ();
    if (enumerator.MoveNext ()) {
        sb.Append (enumerator.Current);
    }
    object obj = null;
    if (enumerator.MoveNext ()) {
        obj = enumerator.Current;
    }
    while (enumerator.MoveNext ()) {
        sb.Append (separator);
        sb.Append (obj);
        obj = enumerator.Current;
    }
    if (obj != null) {
        sb.Append (sepLast);
        sb.Append (obj);
    }
    return sb.ToString ();
}
----------------------------------------

 public static string JoinAnd<T> (string separator, string sepLast, IEnumerable<T> values) 
{ 
    string delimiter = ""; 
    string result = string.Empty; 
    int size = 0; 
    string temp; 
    foreach (T t in values) 
    { 
        if (size == values.Count() - 2) 
            delimiter = sepLast; 
        else 
            delimiter = separator; 
        temp = t.ToString() + delimiter; 
        result += temp; 
        size++; 
    } 
    return result; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
770
2
Gpt3D_Clone770_2.cs 1 21
Gpt3D_Clone770_2.cs 22 43
----------------------------------------

public static string JoinAnd < T > (string separator, string sepLast, IEnumerable < T > values) {
    var sb = new StringBuilder ();
    var enumerator = values.GetEnumerator ();
    if (enumerator.MoveNext ()) {
        sb.Append (enumerator.Current);
    }
    object obj = null;
    if (enumerator.MoveNext ()) {
        obj = enumerator.Current;
    }
    while (enumerator.MoveNext ()) {
        sb.Append (separator);
        sb.Append (obj);
        obj = enumerator.Current;
    }
    if (obj != null) {
        sb.Append (sepLast);
        sb.Append (obj);
    }
    return sb.ToString ();
}
----------------------------------------

 public static string JoinAnd<T>(string separator, string sepLast, IEnumerable<T> values)
{
    var output = new StringBuilder();
    var size = values.Count();
    var index = 1;
    foreach (T value in values)
    {
        output.Append(value.ToString());
        if (index == size)
            output.Append(sepLast);
        else
            output.Append(separator);
        index++;
    }
    return output.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
770
3
Gpt3D_Clone770_3.cs 1 21
Gpt3D_Clone770_3.cs 22 42
----------------------------------------

public static string JoinAnd < T > (string separator, string sepLast, IEnumerable < T > values) {
    var sb = new StringBuilder ();
    var enumerator = values.GetEnumerator ();
    if (enumerator.MoveNext ()) {
        sb.Append (enumerator.Current);
    }
    object obj = null;
    if (enumerator.MoveNext ()) {
        obj = enumerator.Current;
    }
    while (enumerator.MoveNext ()) {
        sb.Append (separator);
        sb.Append (obj);
        obj = enumerator.Current;
    }
    if (obj != null) {
        sb.Append (sepLast);
        sb.Append (obj);
    }
    return sb.ToString ();
}
----------------------------------------

 public static string JoinAnd<T>(string separator, string sepLast, IEnumerable<T> values)
{
    string joinedString = "";
    string delimiter = separator;
    bool isLast = false;
    foreach (T value in values)
    {
        if (!isLast)
        {
            int count = values.Count();
            isLast = count - 1 == 0 ? true : false;
            delimiter = isLast ? sepLast : separator;
        }
        joinedString += string.Concat(value.ToString(), delimiter);
    }
    return joinedString;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
770
4
Gpt3D_Clone770_4.cs 1 21
Gpt3D_Clone770_4.cs 22 41
----------------------------------------

public static string JoinAnd < T > (string separator, string sepLast, IEnumerable < T > values) {
    var sb = new StringBuilder ();
    var enumerator = values.GetEnumerator ();
    if (enumerator.MoveNext ()) {
        sb.Append (enumerator.Current);
    }
    object obj = null;
    if (enumerator.MoveNext ()) {
        obj = enumerator.Current;
    }
    while (enumerator.MoveNext ()) {
        sb.Append (separator);
        sb.Append (obj);
        obj = enumerator.Current;
    }
    if (obj != null) {
        sb.Append (sepLast);
        sb.Append (obj);
    }
    return sb.ToString ();
}
----------------------------------------

 public static string JoinAnd<T> (string separator, string sepLast, IEnumerable<T> values)
{
    var output = new StringBuilder();
    var currentSep = separator;
    int i = 0;
    foreach (T value in values) 
    {
        if (i == values.Count() - 1) 
        {
            currentSep = sepLast;
        }
        output.Append(value.ToString());
        output.Append(currentSep);
        i++;
    }
    return output.ToString(0, output.Length - 1);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
770
5
Gpt3D_Clone770_5.cs 1 21
Gpt3D_Clone770_5.cs 22 42
----------------------------------------

public static string JoinAnd < T > (string separator, string sepLast, IEnumerable < T > values) {
    var sb = new StringBuilder ();
    var enumerator = values.GetEnumerator ();
    if (enumerator.MoveNext ()) {
        sb.Append (enumerator.Current);
    }
    object obj = null;
    if (enumerator.MoveNext ()) {
        obj = enumerator.Current;
    }
    while (enumerator.MoveNext ()) {
        sb.Append (separator);
        sb.Append (obj);
        obj = enumerator.Current;
    }
    if (obj != null) {
        sb.Append (sepLast);
        sb.Append (obj);
    }
    return sb.ToString ();
}
----------------------------------------

 public static string JoinAnd<T>(string separator, string sepLast, IEnumerable<T> values)
{
    string joinedString = "";
    string lastString = "";
    int index = 0;
    foreach (string value in values)
    {
        if (index == values.Count()-1) 
        { 
            lastString = sepLast; 
        }
        joinedString += value + lastString;
        lastString = separator;
        index++;
    }
    return joinedString;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
770
6
Gpt3D_Clone770_6.cs 1 21
Gpt3D_Clone770_6.cs 22 38
----------------------------------------

public static string JoinAnd < T > (string separator, string sepLast, IEnumerable < T > values) {
    var sb = new StringBuilder ();
    var enumerator = values.GetEnumerator ();
    if (enumerator.MoveNext ()) {
        sb.Append (enumerator.Current);
    }
    object obj = null;
    if (enumerator.MoveNext ()) {
        obj = enumerator.Current;
    }
    while (enumerator.MoveNext ()) {
        sb.Append (separator);
        sb.Append (obj);
        obj = enumerator.Current;
    }
    if (obj != null) {
        sb.Append (sepLast);
        sb.Append (obj);
    }
    return sb.ToString ();
}
----------------------------------------

 public static string JoinAnd<T>(string separator, string sepLast, IEnumerable<T> values)
{
    var joinedString = "";
    string delimiter;
    int counter = 0;
    foreach (var value in values)
    {
        delimiter = counter == values.Count() - 1 ? sepLast : separator;
        joinedString += $"{value.ToString()}{delimiter}";
        counter++;
    }
    return joinedString;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
770
7
Gpt3D_Clone770_7.cs 1 21
Gpt3D_Clone770_7.cs 22 37
----------------------------------------

public static string JoinAnd < T > (string separator, string sepLast, IEnumerable < T > values) {
    var sb = new StringBuilder ();
    var enumerator = values.GetEnumerator ();
    if (enumerator.MoveNext ()) {
        sb.Append (enumerator.Current);
    }
    object obj = null;
    if (enumerator.MoveNext ()) {
        obj = enumerator.Current;
    }
    while (enumerator.MoveNext ()) {
        sb.Append (separator);
        sb.Append (obj);
        obj = enumerator.Current;
    }
    if (obj != null) {
        sb.Append (sepLast);
        sb.Append (obj);
    }
    return sb.ToString ();
}
----------------------------------------

 public static string JoinAnd<T>(string separator, string sepLast, IEnumerable<T> values)
{
     var output = new StringBuilder();
     var currentSep = separator;
     foreach (T value in values)
     {
         currentSep = value == values.Last() ? sepLast : separator;
         output.Append(value.ToString());
         output.Append(currentSep);
     }
     return output.ToString(0, output.Length - 1);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
770
8
Gpt3D_Clone770_8.cs 1 21
Gpt3D_Clone770_8.cs 22 38
----------------------------------------

public static string JoinAnd < T > (string separator, string sepLast, IEnumerable < T > values) {
    var sb = new StringBuilder ();
    var enumerator = values.GetEnumerator ();
    if (enumerator.MoveNext ()) {
        sb.Append (enumerator.Current);
    }
    object obj = null;
    if (enumerator.MoveNext ()) {
        obj = enumerator.Current;
    }
    while (enumerator.MoveNext ()) {
        sb.Append (separator);
        sb.Append (obj);
        obj = enumerator.Current;
    }
    if (obj != null) {
        sb.Append (sepLast);
        sb.Append (obj);
    }
    return sb.ToString ();
}
----------------------------------------

 public static string JoinAnd<T>(string separator, string sepLast, IEnumerable<T> values)
{
    var separatedValues = new List<string>();
    foreach (var value in values)
    {
        separatedValues.Add(value.ToString());
    }
    var result = string.Join(separator, separatedValues.GetRange(0, separatedValues.Count - 1));
    result += string.Concat(sepLast, separatedValues.Last());
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
770
9
Gpt3D_Clone770_9.cs 1 21
Gpt3D_Clone770_9.cs 22 33
----------------------------------------

public static string JoinAnd < T > (string separator, string sepLast, IEnumerable < T > values) {
    var sb = new StringBuilder ();
    var enumerator = values.GetEnumerator ();
    if (enumerator.MoveNext ()) {
        sb.Append (enumerator.Current);
    }
    object obj = null;
    if (enumerator.MoveNext ()) {
        obj = enumerator.Current;
    }
    while (enumerator.MoveNext ()) {
        sb.Append (separator);
        sb.Append (obj);
        obj = enumerator.Current;
    }
    if (obj != null) {
        sb.Append (sepLast);
        sb.Append (obj);
    }
    return sb.ToString ();
}
----------------------------------------

 public static string JoinAnd<T>(string separator, string sepLast, IEnumerable<T> values)
{
    string joinedString = "";
    foreach (var v in values)
    {
        var lastVal = values.Last().ToString() == v.ToString() ? sepLast : separator;
        joinedString += $"{v.ToString()}{lastVal}";
    }
    return joinedString;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
777
0
Gpt3D_Clone777_0.cs 1 14
Gpt3D_Clone777_0.cs 15 40
----------------------------------------

public static LinkedList < T > SwapPairwise < T > (this LinkedList < T > source) {
    if (source == null)
        throw new ArgumentNullException ("source");
    var current = source.First;
    if (current == null)
        return source;
    while (current.Next != null) {
        current.SwapWith (current.Next);
        current = current.Next;
        if (current != null)
            current = current.Next;
    }
    return source;
}
----------------------------------------

	public static LinkedList < T > SwapPairwise < T > (this LinkedList < T > source) {
    if (source == null)
        throw new ArgumentNullException ("source");
    var current = source.First;
    if (current == null)
        return source;
    while (current != null && current.Next != null) {
        var next = current.Next;
        if (next.Next == null) {
            next.Next = current;
            current.Next = null;
            current.Previous = next;
        }
        else {
            current.Next = next.Next;
            current.Previous = next;
            next.Next = current;
            next.Previous = current.Previous;
            current = current.Previous;
        }
        current = current.Next;
    }
    return source;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
777
1
Gpt3D_Clone777_1.cs 1 14
Gpt3D_Clone777_1.cs 15 37
----------------------------------------

public static LinkedList < T > SwapPairwise < T > (this LinkedList < T > source) {
    if (source == null)
        throw new ArgumentNullException ("source");
    var current = source.First;
    if (current == null)
        return source;
    while (current.Next != null) {
        current.SwapWith (current.Next);
        current = current.Next;
        if (current != null)
            current = current.Next;
    }
    return source;
}
----------------------------------------

	public static LinkedList < T > SwapPairwise < T > (this LinkedList < T > source) {
    if (source == null)
        throw new ArgumentNullException ("source");
    var current = source.First;
    if (current == null)
        return source;
    while (current != null && current.Next != null) {
        var next = current.Next;
        var previous = current.Previous;
        current.Next = current.Previous;
        current.Previous = next;
        if (previous != null) {
            previous.Next = next;
        }
        if (next != null) {
           next.Previous = previous;
        }
        current = current.Next.Next;
    }
    return source;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
777
3
Gpt3D_Clone777_3.cs 1 14
Gpt3D_Clone777_3.cs 15 36
----------------------------------------

public static LinkedList < T > SwapPairwise < T > (this LinkedList < T > source) {
    if (source == null)
        throw new ArgumentNullException ("source");
    var current = source.First;
    if (current == null)
        return source;
    while (current.Next != null) {
        current.SwapWith (current.Next);
        current = current.Next;
        if (current != null)
            current = current.Next;
    }
    return source;
}
----------------------------------------

	public static LinkedList < T > SwapPairwise < T > (this LinkedList < T > source) {
    if (source == null)
        throw new ArgumentNullException ("source");
    var current = source.First;
    if (current == null)
        return source;
    while (current != null && current.Next != null) {
        var previous = current.Previous;
        if (previous != null) {
            current.Previous = current.Next;
            current.Next = previous;
        }
        else {
            current.Next = current.Previous;
            current.Previous = current.Next;
        }
        current = current.Next.Next;
    }
    return source;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
777
4
Gpt3D_Clone777_4.cs 1 14
Gpt3D_Clone777_4.cs 15 32
----------------------------------------

public static LinkedList < T > SwapPairwise < T > (this LinkedList < T > source) {
    if (source == null)
        throw new ArgumentNullException ("source");
    var current = source.First;
    if (current == null)
        return source;
    while (current.Next != null) {
        current.SwapWith (current.Next);
        current = current.Next;
        if (current != null)
            current = current.Next;
    }
    return source;
}
----------------------------------------

	public static LinkedList < T > SwapPairwise < T > (this LinkedList < T > source) {
    if (source == null)
        throw new ArgumentNullException ("source");
    var current = source.First;
    if (current == null)
        return source;
    while (current != null && current.Next != null) {
        var previous = current.Previous;
        var next = current.Next;
        current.Remove();
        current.AddAfter(previous, next);
        current.AddBefore(next, current);
        current = current.Next.Next;
    }
    return source;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
777
5
Gpt3D_Clone777_5.cs 1 14
Gpt3D_Clone777_5.cs 15 32
----------------------------------------

public static LinkedList < T > SwapPairwise < T > (this LinkedList < T > source) {
    if (source == null)
        throw new ArgumentNullException ("source");
    var current = source.First;
    if (current == null)
        return source;
    while (current.Next != null) {
        current.SwapWith (current.Next);
        current = current.Next;
        if (current != null)
            current = current.Next;
    }
    return source;
}
----------------------------------------

	public static LinkedList < T > SwapPairwise < T > (this LinkedList < T > source) {
    if (source == null)
        throw new ArgumentNullException ("source");
    var current = source.First;
    if (current == null)
        return source;
    while (current != null && current.Next != null) {
        var next = current.Next;
        current.Remove();
        next.Remove();
        source.AddBefore(next , current);
        source.AddBefore(current , next);
        current = current.Next.Next;
    }
    return source;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
784
2
Gpt3D_Clone784_2.cs 1 33
Gpt3D_Clone784_2.cs 34 59
----------------------------------------

public static void RecycleApplicationPool (string serverName, string appPoolName) {
    if (! string.IsNullOrEmpty (serverName) && ! string.IsNullOrEmpty (appPoolName)) {
        try {
            using (ServerManager manager = ServerManager.OpenRemote (serverName))
            {
                ApplicationPool appPool = manager.ApplicationPools.FirstOrDefault (ap => ap.Name == appPoolName);
                if (appPool != null) {
                    bool appPoolRunning = appPool.State == ObjectState.Started || appPool.State == ObjectState.Starting;
                    bool appPoolStopped = appPool.State == ObjectState.Stopped || appPool.State == ObjectState.Stopping;
                    if (appPoolRunning) {
                        while (appPool.State == ObjectState.Starting) {
                            System.Threading.Thread.Sleep (1000);
                        }
                        if (appPool.State != ObjectState.Stopped) {
                            appPool.Stop ();
                        }
                        appPoolStopped = true;
                    }
                    if (appPoolStopped && appPoolRunning) {
                        while (appPool.State == ObjectState.Stopping) {
                            System.Threading.Thread.Sleep (1000);
                        }
                        appPool.Start ();
                    }
                } else {
                    throw new Exception (string.Format ("An Application Pool does not exist with the name {0}.{1}", serverName, appPoolName));
                }
            }}
        catch (Exception ex) {
            throw new Exception (string.Format ("Unable to restart the application pools for {0}.{1}", serverName, appPoolName), ex.InnerException);
        }
    }
}
----------------------------------------

  public static void RecycleApplicationPool (string serverName, string appPoolName) {
        if (! string.IsNullOrEmpty (serverName) && ! string.IsNullOrEmpty (appPoolName)) {
            try {
                using (ServerManager manager = ServerManager.OpenRemote (serverName))
                {
                    ApplicationPool appPool = manager.ApplicationPools.FirstOrDefault (ap => ap.Name == appPoolName);
                    if (appPool != null) {
                        switch (appPool.State) {
                        case ObjectState.Started:
                        case ObjectState.Starting:
                            appPool.Stop ();
                            break;
                        case ObjectState.Stopped:
                        case ObjectState.Stopping:
                            appPool.Start ();
                            break;
                        }
                    }}
                }
            catch (Exception ex) {
                throw new Exception (string.Format ("Unable to restart the application pools for {0}.{1}", serverName, appPoolName), ex.InnerException);
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
784
8
Gpt3D_Clone784_8.cs 1 33
Gpt3D_Clone784_8.cs 34 55
----------------------------------------

public static void RecycleApplicationPool (string serverName, string appPoolName) {
    if (! string.IsNullOrEmpty (serverName) && ! string.IsNullOrEmpty (appPoolName)) {
        try {
            using (ServerManager manager = ServerManager.OpenRemote (serverName))
            {
                ApplicationPool appPool = manager.ApplicationPools.FirstOrDefault (ap => ap.Name == appPoolName);
                if (appPool != null) {
                    bool appPoolRunning = appPool.State == ObjectState.Started || appPool.State == ObjectState.Starting;
                    bool appPoolStopped = appPool.State == ObjectState.Stopped || appPool.State == ObjectState.Stopping;
                    if (appPoolRunning) {
                        while (appPool.State == ObjectState.Starting) {
                            System.Threading.Thread.Sleep (1000);
                        }
                        if (appPool.State != ObjectState.Stopped) {
                            appPool.Stop ();
                        }
                        appPoolStopped = true;
                    }
                    if (appPoolStopped && appPoolRunning) {
                        while (appPool.State == ObjectState.Stopping) {
                            System.Threading.Thread.Sleep (1000);
                        }
                        appPool.Start ();
                    }
                } else {
                    throw new Exception (string.Format ("An Application Pool does not exist with the name {0}.{1}", serverName, appPoolName));
                }
            }}
        catch (Exception ex) {
            throw new Exception (string.Format ("Unable to restart the application pools for {0}.{1}", serverName, appPoolName), ex.InnerException);
        }
    }
}
----------------------------------------

  public static void RecycleApplicationPool (string serverName, string appPoolName) {
        if (! string.IsNullOrEmpty (serverName) && ! string.IsNullOrEmpty (appPoolName)) {
            try {
                using (ServerManager manager = ServerManager.OpenRemote (serverName))
                {
                    ApplicationPool appPool = manager.ApplicationPools.FirstOrDefault (ap => ap.Name == appPoolName);
                    if (appPool != null) {
                        if (appPool.State == ObjectState.Started || appPool.State == ObjectState.Starting) {
                            appPool.Recycle ();
                        }
                        else if (appPool.State == ObjectState.Stopped || appPool.State == ObjectState.Stopping) {
                            appPool.Start ();
                        }
                    }}
                }
            catch (Exception ex) {
                throw new Exception (string.Format ("Unable to restart the application pools for {0}.{1}", serverName, appPoolName), ex.InnerException);
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
784
9
Gpt3D_Clone784_9.cs 1 33
Gpt3D_Clone784_9.cs 34 56
----------------------------------------

public static void RecycleApplicationPool (string serverName, string appPoolName) {
    if (! string.IsNullOrEmpty (serverName) && ! string.IsNullOrEmpty (appPoolName)) {
        try {
            using (ServerManager manager = ServerManager.OpenRemote (serverName))
            {
                ApplicationPool appPool = manager.ApplicationPools.FirstOrDefault (ap => ap.Name == appPoolName);
                if (appPool != null) {
                    bool appPoolRunning = appPool.State == ObjectState.Started || appPool.State == ObjectState.Starting;
                    bool appPoolStopped = appPool.State == ObjectState.Stopped || appPool.State == ObjectState.Stopping;
                    if (appPoolRunning) {
                        while (appPool.State == ObjectState.Starting) {
                            System.Threading.Thread.Sleep (1000);
                        }
                        if (appPool.State != ObjectState.Stopped) {
                            appPool.Stop ();
                        }
                        appPoolStopped = true;
                    }
                    if (appPoolStopped && appPoolRunning) {
                        while (appPool.State == ObjectState.Stopping) {
                            System.Threading.Thread.Sleep (1000);
                        }
                        appPool.Start ();
                    }
                } else {
                    throw new Exception (string.Format ("An Application Pool does not exist with the name {0}.{1}", serverName, appPoolName));
                }
            }}
        catch (Exception ex) {
            throw new Exception (string.Format ("Unable to restart the application pools for {0}.{1}", serverName, appPoolName), ex.InnerException);
        }
    }
}
----------------------------------------

  public static void RecycleApplicationPool (string serverName, string appPoolName) {
        if (! string.IsNullOrEmpty (serverName) && ! string.IsNullOrEmpty (appPoolName)) {
            try {
                using (ServerManager manager = ServerManager.OpenRemote (serverName))
                {
                    ApplicationPool appPool = manager.ApplicationPools. FirstOrDefault (ap => ap.Name == appPoolName);
                    if (appPool != null) {
                        if (appPool.State == ObjectState.Started || appPool.State == ObjectState.Starting) {
                            appPool.Stop ();
                        }
                        else if (appPool.State == ObjectState.Stopped || appPool.State == ObjectState.Stopping) {
                            appPool.Start ();
                        }
                    }}
                }
            catch (Exception ex) {
                throw new Exception (string.Format ("Unable to restart the application pools for {0}.{1}", serverName, appPoolName), ex.InnerException);
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
786
1
Gpt3D_Clone786_1.cs 1 14
Gpt3D_Clone786_1.cs 15 42
----------------------------------------

public static DateTime GetStartDateTimeFromWeekNumberInYear (int year, uint weekOfYear) {
    if (weekOfYear == 0 || weekOfYear > 54)
        throw new ArgumentException ("Week number must be between 1 and 54! (Yes, 54... Year 2000 had Jan. 1 on a Saturday plus 53 Sundays.)");
    DateTime firstDayInWeek = new DateTime (year, 1, 1);
    if (weekOfYear == 1)
        return firstDayInWeek;
    do
        {
            firstDayInWeek = firstDayInWeek.AddDays (1);
        } while (firstDayInWeek.DayOfWeek != DayOfWeek.Sunday);
    if (weekOfYear == 2)
        return firstDayInWeek;
    return firstDayInWeek.AddDays ((weekOfYear - 2) * 7);
}
----------------------------------------

 public static DateTime GetStartDateTimeFromWeekNumberInYear (int year, uint weekOfYear) {
    if (weekOfYear == 0 || weekOfYear > 54)
        throw new ArgumentException ("Week number must be between 1 and 54!");
    DateTime getStartDateTime = new DateTime(year,1,1);
   
    if(weekOfYear == 1)
    {
        return getStartDateTime;
    }    
    
    int dayOfWeekStart = 7 - ((int)getStartDateTime.DayOfWeek+1);
    getStartDateTime = getStartDateTime.AddDays(dayOfWeekStart);
   
    if(weekOfYear >=2)
    {
        getStartDateTime = getStartDateTime.AddDays((weekOfYear-2)*7);
    }
   
    while(getStartDateTime.DayOfWeek != DayOfWeek.Sunday)
    {
        getStartDateTime = getStartDateTime.AddDays(-1);
    }
   
    return getStartDateTime;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
786
2
Gpt3D_Clone786_2.cs 1 14
Gpt3D_Clone786_2.cs 15 65
----------------------------------------

public static DateTime GetStartDateTimeFromWeekNumberInYear (int year, uint weekOfYear) {
    if (weekOfYear == 0 || weekOfYear > 54)
        throw new ArgumentException ("Week number must be between 1 and 54! (Yes, 54... Year 2000 had Jan. 1 on a Saturday plus 53 Sundays.)");
    DateTime firstDayInWeek = new DateTime (year, 1, 1);
    if (weekOfYear == 1)
        return firstDayInWeek;
    do
        {
            firstDayInWeek = firstDayInWeek.AddDays (1);
        } while (firstDayInWeek.DayOfWeek != DayOfWeek.Sunday);
    if (weekOfYear == 2)
        return firstDayInWeek;
    return firstDayInWeek.AddDays ((weekOfYear - 2) * 7);
}
----------------------------------------

 public static DateTime GetStartDateTimeFromWeekNumberInYear (int year, uint weekOfYear) 
    {
        if (weekOfYear == 0 || weekOfYear > 54)
            throw new ArgumentException ("Week number must be between 1 and 54!");
        
        int daysForYear = 0;
        DateTime startWeek = new DateTime (year, 1, 1);
        while (++daysForYear <= weekOfYear) 
        {
            if (startWeek.DayOfWeek == DayOfWeek.Sunday) {
                daysForYear++;
            }
            startWeek = startWeek.AddDays(1);
        }
        return startWeek;
    }
    
public static DateTime GetStartDateTimeFromWeekNumberInYear(int year, uint weekOfYear)
    {
        if (weekOfYear == 0 || weekOfYear > 54)
            throw new ArgumentException("Week number must be between 1 and 54!");
        DateTime firstOfYear = new DateTime(year, 1, 1).AddDays((weekOfYear - 1) * 7);
        while (firstOfYear.DayOfWeek != DayOfWeek.Sunday)
        {
            firstOfYear = firstOfYear.AddDays(-1);
        }
        return firstOfYear;
    }
public static DateTime GetStartDateTimeFromWeekNumberInYear (int year, uint weekOfYear) {
    if (weekOfYear == 0 || weekOfYear > 54)
        throw new ArgumentException ("Week number must be between 1 and 54!");
    
    DateTime startWeek = new DateTime (year, 1, 1);
    DateTime dayOfWeekSunday = new DateTime ();
    long weekNumber = (long)weekOfYear - 1;
    if (weekNumber == 0) {
        return startWeek; 
    } 
    for (int i = 0; i < weekNumber; i++) {
        startWeek = startWeek.AddDays(7);
        if (startWeek.DayOfWeek == DayOfWeek.Sunday) {
            dayOfWeekSunday = startWeek;
        } 
    }
    return dayOfWeekSunday;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
786
3
Gpt3D_Clone786_3.cs 1 14
Gpt3D_Clone786_3.cs 15 32
----------------------------------------

public static DateTime GetStartDateTimeFromWeekNumberInYear (int year, uint weekOfYear) {
    if (weekOfYear == 0 || weekOfYear > 54)
        throw new ArgumentException ("Week number must be between 1 and 54! (Yes, 54... Year 2000 had Jan. 1 on a Saturday plus 53 Sundays.)");
    DateTime firstDayInWeek = new DateTime (year, 1, 1);
    if (weekOfYear == 1)
        return firstDayInWeek;
    do
        {
            firstDayInWeek = firstDayInWeek.AddDays (1);
        } while (firstDayInWeek.DayOfWeek != DayOfWeek.Sunday);
    if (weekOfYear == 2)
        return firstDayInWeek;
    return firstDayInWeek.AddDays ((weekOfYear - 2) * 7);
}
----------------------------------------

 public static DateTime GetStartDateTimeFromWeekNumberInYear (int year, uint weekOfYear){
    if (weekOfYear == 0 || weekOfYear > 54)
        throw new ArgumentException("Week number must be between 1 and 54!");
       
    DateTime startWeek = new DateTime(year, 1, 1).AddDays((weekOfYear - 1) * 7);
    if (weekOfYear == 1)
        return startWeek;
    else
    {
        while (startWeek.DayOfWeek != DayOfWeek.Sunday)
        {
            startWeek = startWeek.AddDays(-1);
        }
    }
    return startWeek;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
786
4
Gpt3D_Clone786_4.cs 1 14
Gpt3D_Clone786_4.cs 15 43
----------------------------------------

public static DateTime GetStartDateTimeFromWeekNumberInYear (int year, uint weekOfYear) {
    if (weekOfYear == 0 || weekOfYear > 54)
        throw new ArgumentException ("Week number must be between 1 and 54! (Yes, 54... Year 2000 had Jan. 1 on a Saturday plus 53 Sundays.)");
    DateTime firstDayInWeek = new DateTime (year, 1, 1);
    if (weekOfYear == 1)
        return firstDayInWeek;
    do
        {
            firstDayInWeek = firstDayInWeek.AddDays (1);
        } while (firstDayInWeek.DayOfWeek != DayOfWeek.Sunday);
    if (weekOfYear == 2)
        return firstDayInWeek;
    return firstDayInWeek.AddDays ((weekOfYear - 2) * 7);
}
----------------------------------------

 public static DateTime GetStartDateTimeFromWeekNumberInYear(int year, uint weekOfYear)
    {
        if (weekOfYear == 0 || weekOfYear > 54)
            throw new ArgumentException ("Week number must be between 1 and 54!");
        DateTime firstDayInWeek = new DateTime(year,1,1);
        TimeSpan diff = firstDayInWeek.Subtract(new DateTime(1,1,1));
        int weekInYear = diff.Days / 7;
        int daysDiff = (weekOfYear - weekInYear - 1) * 7;
        firstDayInWeek = firstDayInWeek.AddDays(daysDiff);
        return firstDayInWeek;
    }
    
 public static DateTime GetStartDateTimeFromWeekNumberInYear (int year, uint weekOfYear) {
    if (weekOfYear == 0 || weekOfYear > 54)
        throw new ArgumentException ("Week number must be between 1 and 54!");
    
    DateTime currentWeekDate = new DateTime(year, 1, 1);
    
    if (weekOfYear>1) {
        // Week 1 is January 1st ...
        int daysToAdd = (weekOfYear * 7) - 8;
        // Days needed for the 1st of January to be the Sunday of this week minus the 1st of January day
        currentWeekDate = currentWeekDate.AddDays(daysToAdd);
    }
    
    return currentWeekDate;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
786
5
Gpt3D_Clone786_5.cs 1 14
Gpt3D_Clone786_5.cs 15 28
----------------------------------------

public static DateTime GetStartDateTimeFromWeekNumberInYear (int year, uint weekOfYear) {
    if (weekOfYear == 0 || weekOfYear > 54)
        throw new ArgumentException ("Week number must be between 1 and 54! (Yes, 54... Year 2000 had Jan. 1 on a Saturday plus 53 Sundays.)");
    DateTime firstDayInWeek = new DateTime (year, 1, 1);
    if (weekOfYear == 1)
        return firstDayInWeek;
    do
        {
            firstDayInWeek = firstDayInWeek.AddDays (1);
        } while (firstDayInWeek.DayOfWeek != DayOfWeek.Sunday);
    if (weekOfYear == 2)
        return firstDayInWeek;
    return firstDayInWeek.AddDays ((weekOfYear - 2) * 7);
}
----------------------------------------

 public static DateTime GetStartDateTimeFromWeekNumberInYear (int year, uint weekOfYear) {
    if (weekOfYear == 0 || weekOfYear > 54)
        throw new ArgumentException ("Week number must be between 1 and 54!");
    DateTime desiredWeekStartDateTime = new DateTime (year, 1, 1);
    int desiredWeek = 1;
    while (desiredWeek < weekOfYear)
        {
            desiredWeekStartDateTime = desiredWeekStartDateTime.AddDays (7);
            desiredWeek++;
        }
    return desiredWeekStartDateTime;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
786
6
Gpt3D_Clone786_6.cs 1 14
Gpt3D_Clone786_6.cs 15 43
----------------------------------------

public static DateTime GetStartDateTimeFromWeekNumberInYear (int year, uint weekOfYear) {
    if (weekOfYear == 0 || weekOfYear > 54)
        throw new ArgumentException ("Week number must be between 1 and 54! (Yes, 54... Year 2000 had Jan. 1 on a Saturday plus 53 Sundays.)");
    DateTime firstDayInWeek = new DateTime (year, 1, 1);
    if (weekOfYear == 1)
        return firstDayInWeek;
    do
        {
            firstDayInWeek = firstDayInWeek.AddDays (1);
        } while (firstDayInWeek.DayOfWeek != DayOfWeek.Sunday);
    if (weekOfYear == 2)
        return firstDayInWeek;
    return firstDayInWeek.AddDays ((weekOfYear - 2) * 7);
}
----------------------------------------

 public static DateTime GetStartDateTimeFromWeekNumberInYear(int year, uint weekOfYear)
    {
        if (weekOfYear == 0 || weekOfYear > 54)
            throw new ArgumentException ("Week number must be between 1 and 54!");
        DateTime firstDayInWeek = new DateTime(year,1,1);
        TimeSpan diff = firstDayInWeek.Subtract(new DateTime(1,1,1));
        int weekInYear = diff.Days / 7;
        int daysDiff = (weekOfYear - weekInYear - 1) * 7;
        firstDayInWeek = firstDayInWeek.AddDays(daysDiff);
        return firstDayInWeek;
    }
    
 public static DateTime GetStartDateTimeFromWeekNumberInYear (int year, uint weekOfYear) {
    if (weekOfYear == 0 || weekOfYear > 54)
        throw new ArgumentException ("Week number must be between 1 and 54!");
    
    DateTime currentWeekDate = new DateTime(year, 1, 1);
    
    if (weekOfYear>1) {
        // Week 1 is January 1st ...
        int daysToAdd = (weekOfYear * 7) - 8;
        // Days needed for the 1st of January to be the Sunday of this week minus the 1st of January day
        currentWeekDate = currentWeekDate.AddDays(daysToAdd);
    }
    
    return currentWeekDate;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
786
7
Gpt3D_Clone786_7.cs 1 14
Gpt3D_Clone786_7.cs 15 29
----------------------------------------

public static DateTime GetStartDateTimeFromWeekNumberInYear (int year, uint weekOfYear) {
    if (weekOfYear == 0 || weekOfYear > 54)
        throw new ArgumentException ("Week number must be between 1 and 54! (Yes, 54... Year 2000 had Jan. 1 on a Saturday plus 53 Sundays.)");
    DateTime firstDayInWeek = new DateTime (year, 1, 1);
    if (weekOfYear == 1)
        return firstDayInWeek;
    do
        {
            firstDayInWeek = firstDayInWeek.AddDays (1);
        } while (firstDayInWeek.DayOfWeek != DayOfWeek.Sunday);
    if (weekOfYear == 2)
        return firstDayInWeek;
    return firstDayInWeek.AddDays ((weekOfYear - 2) * 7);
}
----------------------------------------

 public static DateTime GetStartDateTimeFromWeekNumberInYear (int year, uint weekOfYear) {
    
    if (weekOfYear == 0 || weekOfYear > 54)
        throw new ArgumentException("Week number must be between 1 and 54!");
    DateTime startWeek = new DateTime(year, 1, 1).AddDays((weekOfYear - 1) * 7);
    while (startWeek.AddDays(-1).DayOfWeek != DayOfWeek.Sunday)
    {
        startWeek = startWeek.AddDays(-1);
    }
    return startWeek;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
786
8
Gpt3D_Clone786_8.cs 1 14
Gpt3D_Clone786_8.cs 15 65
----------------------------------------

public static DateTime GetStartDateTimeFromWeekNumberInYear (int year, uint weekOfYear) {
    if (weekOfYear == 0 || weekOfYear > 54)
        throw new ArgumentException ("Week number must be between 1 and 54! (Yes, 54... Year 2000 had Jan. 1 on a Saturday plus 53 Sundays.)");
    DateTime firstDayInWeek = new DateTime (year, 1, 1);
    if (weekOfYear == 1)
        return firstDayInWeek;
    do
        {
            firstDayInWeek = firstDayInWeek.AddDays (1);
        } while (firstDayInWeek.DayOfWeek != DayOfWeek.Sunday);
    if (weekOfYear == 2)
        return firstDayInWeek;
    return firstDayInWeek.AddDays ((weekOfYear - 2) * 7);
}
----------------------------------------

 public static DateTime GetStartDateTimeFromWeekNumberInYear (int year, uint weekOfYear) 
    {
        if (weekOfYear == 0 || weekOfYear > 54)
            throw new ArgumentException ("Week number must be between 1 and 54!");
        
        int daysForYear = 0;
        DateTime startWeek = new DateTime (year, 1, 1);
        while (++daysForYear <= weekOfYear) 
        {
            if (startWeek.DayOfWeek == DayOfWeek.Sunday) {
                daysForYear++;
            }
            startWeek = startWeek.AddDays(1);
        }
        return startWeek;
    }
    
public static DateTime GetStartDateTimeFromWeekNumberInYear(int year, uint weekOfYear)
    {
        if (weekOfYear == 0 || weekOfYear > 54)
            throw new ArgumentException("Week number must be between 1 and 54!");
        DateTime firstOfYear = new DateTime(year, 1, 1).AddDays((weekOfYear - 1) * 7);
        while (firstOfYear.DayOfWeek != DayOfWeek.Sunday)
        {
            firstOfYear = firstOfYear.AddDays(-1);
        }
        return firstOfYear;
    }
public static DateTime GetStartDateTimeFromWeekNumberInYear (int year, uint weekOfYear) {
    if (weekOfYear == 0 || weekOfYear > 54)
        throw new ArgumentException ("Week number must be between 1 and 54!");
    
    DateTime startWeek = new DateTime (year, 1, 1);
    DateTime dayOfWeekSunday = new DateTime ();
    long weekNumber = (long)weekOfYear - 1;
    if (weekNumber == 0) {
        return startWeek; 
    } 
    for (int i = 0; i < weekNumber; i++) {
        startWeek = startWeek.AddDays(7);
        if (startWeek.DayOfWeek == DayOfWeek.Sunday) {
            dayOfWeekSunday = startWeek;
        } 
    }
    return dayOfWeekSunday;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
786
9
Gpt3D_Clone786_9.cs 1 14
Gpt3D_Clone786_9.cs 15 26
----------------------------------------

public static DateTime GetStartDateTimeFromWeekNumberInYear (int year, uint weekOfYear) {
    if (weekOfYear == 0 || weekOfYear > 54)
        throw new ArgumentException ("Week number must be between 1 and 54! (Yes, 54... Year 2000 had Jan. 1 on a Saturday plus 53 Sundays.)");
    DateTime firstDayInWeek = new DateTime (year, 1, 1);
    if (weekOfYear == 1)
        return firstDayInWeek;
    do
        {
            firstDayInWeek = firstDayInWeek.AddDays (1);
        } while (firstDayInWeek.DayOfWeek != DayOfWeek.Sunday);
    if (weekOfYear == 2)
        return firstDayInWeek;
    return firstDayInWeek.AddDays ((weekOfYear - 2) * 7);
}
----------------------------------------

public static DateTime GetStartDateTimeFromWeekNumberInYear (int year, uint weekOfYear) {
    if (weekOfYear == 0 || weekOfYear > 54)
        throw new ArgumentException ("Week number must be between 1 and 54!");
       
    DateTime startWeek = new DateTime(year, 1, 1).AddDays((weekOfYear - 1) * 7);
    while (startWeek.DayOfWeek != DayOfWeek.Sunday) {
        startWeek = startWeek.AddDays(-1);
    }   
    return startWeek;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
788
2
Gpt3D_Clone788_2.cs 1 12
Gpt3D_Clone788_2.cs 13 29
----------------------------------------

static void Main () {
    _bw = new BackgroundWorker {WorkerReportsProgress = true, WorkerSupportsCancellation = true};
    _bw.DoWork += bw_DoWork;
    _bw.ProgressChanged += bw_ProgressChanged;
    _bw.RunWorkerCompleted += bw_RunWorkerCompleted;
    _bw.RunWorkerAsync ("Hello to worker");
    Console.WriteLine ("Press Enter in the next 5 seconds to cancel");
    Console.ReadLine ();
    if (_bw.IsBusy)
        _bw.CancelAsync ();
    Console.ReadLine ();
}
----------------------------------------

  private void BackgroundWorkerLogic()
    { 
        BackgroundWorker _bw = new BackgroundWorker();
        _bw.WorkerReportsProgress = true;
        _bw.WorkerSupportsCancellation = true;
        _bw.DoWork += new DoWorkEventHandler(bw_DoWork);
        _bw.ProgressChanged += new ProgressChangedEventHandler(bw_ProgressChanged);
        _bw.RunWorkerCompleted += new RunWorkerCompletedEventHandler(bw_RunWorkerCompleted);
        _bw.RunWorkerAsync("Hello to worker");
        Console.WriteLine("Press Enter in the next 5 seconds to cancel");
        Console.ReadLine();
        if (_bw.IsBusy)
            _bw.CancelAsync();
        Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
788
3
Gpt3D_Clone788_3.cs 1 12
Gpt3D_Clone788_3.cs 13 29
----------------------------------------

static void Main () {
    _bw = new BackgroundWorker {WorkerReportsProgress = true, WorkerSupportsCancellation = true};
    _bw.DoWork += bw_DoWork;
    _bw.ProgressChanged += bw_ProgressChanged;
    _bw.RunWorkerCompleted += bw_RunWorkerCompleted;
    _bw.RunWorkerAsync ("Hello to worker");
    Console.WriteLine ("Press Enter in the next 5 seconds to cancel");
    Console.ReadLine ();
    if (_bw.IsBusy)
        _bw.CancelAsync ();
    Console.ReadLine ();
}
----------------------------------------

   private void ExecuteBackgroundWorkerCode()
     { 
       BackgroundWorker bgWorker = new BackgroundWorker();
        bgWorker.WorkerReportsProgress = true;
        bgWorker.WorkerSupportsCancellation = true;
        bgWorker.DoWork += new DoWorkEventHandler(bw_DoWork);
        bgWorker.ProgressChanged += new ProgressChangedEventHandler(bw_ProgressChanged);
        bgWorker.RunWorkerCompleted += new RunWorkerCompletedEventHandler(bw_RunWorkerCompleted);
        bgWorker.RunWorkerAsync("Hello to worker");
        Console.WriteLine("Press Enter in the next 5 seconds to cancel");
        Console.ReadLine();
        if (bgWorker.IsBusy)
            bgWorker.CancelAsync();
        Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
788
4
Gpt3D_Clone788_4.cs 1 12
Gpt3D_Clone788_4.cs 13 29
----------------------------------------

static void Main () {
    _bw = new BackgroundWorker {WorkerReportsProgress = true, WorkerSupportsCancellation = true};
    _bw.DoWork += bw_DoWork;
    _bw.ProgressChanged += bw_ProgressChanged;
    _bw.RunWorkerCompleted += bw_RunWorkerCompleted;
    _bw.RunWorkerAsync ("Hello to worker");
    Console.WriteLine ("Press Enter in the next 5 seconds to cancel");
    Console.ReadLine ();
    if (_bw.IsBusy)
        _bw.CancelAsync ();
    Console.ReadLine ();
}
----------------------------------------

  public void RunBackgroundJob()
     { 
        BackgroundWorker bg = new BackgroundWorker();
        bg.WorkerReportsProgress = true;
        bg.WorkerSupportsCancellation = true;
        bg.DoWork += new DoWorkEventHandler(bw_DoWork);
        bg.ProgressChanged += new ProgressChangedEventHandler(bw_ProgressChanged);
        bg.RunWorkerCompleted += new RunWorkerCompletedEventHandler(bw_RunWorkerCompleted);
        bg.RunWorkerAsync("Hello to worker");
        Console.WriteLine("Press Enter in the next 5 seconds to cancel");
        Console.ReadLine();
        if (bg.IsBusy)
            bg.CancelAsync();
        Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
788
5
Gpt3D_Clone788_5.cs 1 12
Gpt3D_Clone788_5.cs 13 30
----------------------------------------

static void Main () {
    _bw = new BackgroundWorker {WorkerReportsProgress = true, WorkerSupportsCancellation = true};
    _bw.DoWork += bw_DoWork;
    _bw.ProgressChanged += bw_ProgressChanged;
    _bw.RunWorkerCompleted += bw_RunWorkerCompleted;
    _bw.RunWorkerAsync ("Hello to worker");
    Console.WriteLine ("Press Enter in the next 5 seconds to cancel");
    Console.ReadLine ();
    if (_bw.IsBusy)
        _bw.CancelAsync ();
    Console.ReadLine ();
}
----------------------------------------

   private void InitBackgroundWorker()
     { 
        BackgroundWorker _bw = new BackgroundWorker();
        _bw.WorkerReportsProgress = true;
        _bw.WorkerSupportsCancellation = true;
        _bw.DoWork += new DoWorkEventHandler(bw_DoWork);
        _bw.ProgressChanged += new ProgressChangedEventHandler(bw_ProgressChanged);
        _bw.RunWorkerCompleted += new RunWorkerCompletedEventHandler(bw_RunWorkerCompleted);
        _bw.RunWorkerAsync("Hello to worker");
        Console.WriteLine("Press Enter in the next 5 seconds to cancel");
        Console.ReadLine();
        if (_bw.IsBusy)
            _bw.CancelAsync();
        Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
789
0
Gpt3D_Clone789_0.cs 1 12
Gpt3D_Clone789_0.cs 13 32
----------------------------------------

void OnShapeBrushChanged () {
    Brush rtn = default (Brush);
    for (int i = 0; i < ShapeChildren.Count; i ++) {
        Shape shape = ShapeChildren [i];
        if (i == 0) {
            rtn = shape.Fill;
        } else if (rtn != shape.Fill) {
            SetValue (FillDifferentProperty, default (Brush));
        } else
            SetValue (FillDifferentProperty, rtn);
    }
}
----------------------------------------

  void OnShapeBrushChanged () {
    if (ShapeChildren.Count == 0)
        return;
    else {
        Brush rtn = null;
        for (int i = 0; i < ShapeChildren.Count; i++) {
            if (rtn == null) {             
                Shape shape = ShapeChildren[i];
                rtn = shape.Fill;
                SetValue (FillDifferentProperty, rtn);
            }
            else if (rtn != shape.Fill) {
                SetValue(FillDifferentProperty, default (Brush));
                break;
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
789
2
Gpt3D_Clone789_2.cs 1 12
Gpt3D_Clone789_2.cs 13 30
----------------------------------------

void OnShapeBrushChanged () {
    Brush rtn = default (Brush);
    for (int i = 0; i < ShapeChildren.Count; i ++) {
        Shape shape = ShapeChildren [i];
        if (i == 0) {
            rtn = shape.Fill;
        } else if (rtn != shape.Fill) {
            SetValue (FillDifferentProperty, default (Brush));
        } else
            SetValue (FillDifferentProperty, rtn);
    }
}
----------------------------------------

  void OnShapeBrushChanged () {
    bool flag = false;
    for (int i = 0; i < ShapeChildren.Count; i ++) {
        Shape shape = ShapeChildren[i];
        if (i == 0) {
            SetValue (FillDifferentProperty, shape.Fill);
        }
        else if (shape.Fill != GetValue (FillDifferentProperty)) {
            SetValue (FillDifferentProperty, default (Brush));
            flag = true;
            break;
        }
    }
    if (flag == false && ShapeChildren.Count!=0)
        SetValue (FillDifferentProperty, ShapeChildren[0].Fill);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
789
3
Gpt3D_Clone789_3.cs 1 12
Gpt3D_Clone789_3.cs 13 31
----------------------------------------

void OnShapeBrushChanged () {
    Brush rtn = default (Brush);
    for (int i = 0; i < ShapeChildren.Count; i ++) {
        Shape shape = ShapeChildren [i];
        if (i == 0) {
            rtn = shape.Fill;
        } else if (rtn != shape.Fill) {
            SetValue (FillDifferentProperty, default (Brush));
        } else
            SetValue (FillDifferentProperty, rtn);
    }
}
----------------------------------------

  void OnShapeBrushChanged () {
    Brush rtn;
    if (ShapeChildren.Count == 0)
        rtn = default (Brush);
    else {
        rtn = ShapeChildren[0].Fill;
        SetValue (FillDifferentProperty, rtn);
        for (int i = 1; i < ShapeChildren.Count; i++) {            
            if (rtn != ShapeChildren[i].Fill) {
                rtn = default (Brush);
                SetValue(FillDifferentProperty, rtn);
                break;
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
789
4
Gpt3D_Clone789_4.cs 1 12
Gpt3D_Clone789_4.cs 13 29
----------------------------------------

void OnShapeBrushChanged () {
    Brush rtn = default (Brush);
    for (int i = 0; i < ShapeChildren.Count; i ++) {
        Shape shape = ShapeChildren [i];
        if (i == 0) {
            rtn = shape.Fill;
        } else if (rtn != shape.Fill) {
            SetValue (FillDifferentProperty, default (Brush));
        } else
            SetValue (FillDifferentProperty, rtn);
    }
}
----------------------------------------

  void OnShapeBrushChanged () {
    Brush rtn = default (Brush);
    int i = 0;
    while (i < ShapeChildren.Count) {
        rtn = ShapeChildren[i].Fill;
        SetValue (FillDifferentProperty, rtn);
        i += 1;
        if (i < ShapeChildren.Count) {
            if (ShapeChildren[i].Fill != rtn) {
                SetValue (FillDifferentProperty, default (Brush));
                break;
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
790
0
Gpt3D_Clone790_0.cs 1 15
Gpt3D_Clone790_0.cs 16 60
----------------------------------------

public object CallMethod (object instance, MethodInfo methodInfo, Dictionary < string, string > parameters) {
    var methodParameters = methodInfo.GetParameters ();
    var parametersForInvocation = new List < object > ();
    foreach (var methodParameter in methodParameters) {
        string value;
        if (parameters.TryGetValue (methodParameter.Name, out value)) {
            var convertedValue = ConvertStringToNewType (value, methodParameter.ParameterType);
            parametersForInvocation.Add (convertedValue);
        } else {
            var defaultValue = Activator.CreateInstance (methodParameter.ParameterType);
            parametersForInvocation.Add (defaultValue);
        }
    }
    return methodInfo.Invoke (instance, parametersForInvocation.ToArray ());
}
----------------------------------------

 public object CallMethod (object instance, MethodInfo methodInfo, Dictionary < string, string > parameters) {
    var methodParameters = methodInfo.GetParameters ();
    var parametersForInvocation = new List < object > ();
    foreach (var methodParameter in methodParameters) {
        string value;
        if (parameters.TryGetValue (methodParameter.Name, out value)) {
            var convertedValue = ConvertStringToNewType (value, methodParameter.ParameterType);
            parametersForInvocation.Add (convertedValue);
        } else {
            //check if parameter type is a structure 
            if (methodParameter.ParameterType.IsValueType)
            {
                //Create an instance of default struct 
                var defaultValue = Activator.CreateInstance (methodParameter.ParameterType);
                //Check if it is of a numeric type to handle overflows 
                if(Type.GetTypeCode(methodParameter.ParameterType) >= TypeCode.SByte && Type.GetTypeCode(methodParameter.ParameterType) <= TypeCode.Decimal )
                {
                    //Check and set overflow value
                    double upperValue = Math.Pow(2, 8*methodParameter.ParameterType.StructLayoutAttribute.Size - 1) - 1;
                    double lowerValue = -Math.Pow(2, 8*methodParameter.ParameterType.StructLayoutAttribute.Size - 1);
                    if((double)defaultValue > upperValue || (double)defaultValue < lowerValue)
                    {
                        if (defaultValue is Int64 || defaultValue is UInt64 || defaultValue is Int32 || defaultValue is UInt32 )
                            defaultValue = 0;
                        else if (defaultValue is Int16 || defaultValue is UInt16 || defaultValue is Byte )
                            defaultValue = (short)0;
                        else
                            defaultValue = 0.0;
                    }
                }
                parametersForInvocation.Add (defaultValue);
            }
            else
            {
                //set value to null
                parametersForInvocation.Add(null);
            }
        }
    }
    return methodInfo.Invoke (instance, parametersForInvocation.ToArray ());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
793
0
Gpt3D_Clone793_0.cs 1 16
Gpt3D_Clone793_0.cs 17 43
----------------------------------------

public string SplitLongWords (string text, int maxWordLength) {
    var result = new StringBuilder ();
    int currentWordLength = 0;
    foreach (char c in text) {
        if (char.IsWhiteSpace (c)) {
            currentWordLength = 0;
        } else if (currentWordLength == maxWordLength) {
            currentWordLength = 1;
            result.Append (' ');
        } else {
            ++ currentWordLength;
        }
        result.Append (c);
    }
    return result.ToString ().TrimEnd ();
}
----------------------------------------

 public string SplitLongWords(string text, int maxWordLength) 
{
        string output = "";
        int currentWordLength = 0;
        foreach (char c in text) 
        {
            if (Char.IsWhiteSpace(c)) 
            {
               currentWordLength = 0;
            }
            else if (currentWordLength == maxWordLength) 
            {
                currentWordLength = 0;
                output += c;
                output += ' ';
            }
            else 
            {
                currentWordLength++;
                output += c; 
            }
        }
 
        return output.TrimEnd();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
793
1
Gpt3D_Clone793_1.cs 1 16
Gpt3D_Clone793_1.cs 17 43
----------------------------------------

public string SplitLongWords (string text, int maxWordLength) {
    var result = new StringBuilder ();
    int currentWordLength = 0;
    foreach (char c in text) {
        if (char.IsWhiteSpace (c)) {
            currentWordLength = 0;
        } else if (currentWordLength == maxWordLength) {
            currentWordLength = 1;
            result.Append (' ');
        } else {
            ++ currentWordLength;
        }
        result.Append (c);
    }
    return result.ToString ().TrimEnd ();
}
----------------------------------------

 public string SplitLongWords(string text, int maxWordLength)
{
    string output = "";
    int currentWordLength = 0;
    foreach (char c in text)
    {
        if (char.IsWhiteSpace(c)) 
        {
            currentWordLength = 0; 
        }
        else if (currentWordLength+1 == maxWordLength) 
        {
            currentWordLength = 0;
            output += " ";
            output += c;
        }
        else 
        {
            currentWordLength++;
            output += c; 
        }
    }
 
    return output.TrimEnd();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
796
0
Gpt3D_Clone796_0.cs 1 17
Gpt3D_Clone796_0.cs 18 39
----------------------------------------

public static string getDropBoxPath () {
    try {
        var appDataPath = Environment.GetFolderPath (Environment.SpecialFolder.LocalApplicationData);
        var dbPath = Path.Combine (appDataPath, "Dropbox\\host.db");
        if (! File.Exists (dbPath)) {
            return null;
        } else {
            var lines = File.ReadAllLines (dbPath);
            var dbBase64Text = Convert.FromBase64String (lines [1]);
            var folderPath = Encoding.UTF8.GetString (dbBase64Text);
            return folderPath;
        }
    }
    catch (Exception ex) {
        throw ex;
    }
}
----------------------------------------

	public static string ExtractDropBoxPath()
        {
            try
            {
                string appDataDirectory = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);
                string dbPath = Path.Combine(appDataDirectory, "Dropbox\\host.db");
                if (!File.Exists(dbPath))
                    return null;
                string[] dbContent = File.ReadAllLines(dbPath);
                byte[] base64Text = Convert.FromBase64String(dbContent[1]);
                string dropboxPath = Encoding.UTF8.GetString(base64Text);
                return dropboxPath;
            }
            catch (Exception ex)
            {
                throw ex;
            }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
796
1
Gpt3D_Clone796_1.cs 1 17
Gpt3D_Clone796_1.cs 18 39
----------------------------------------

public static string getDropBoxPath () {
    try {
        var appDataPath = Environment.GetFolderPath (Environment.SpecialFolder.LocalApplicationData);
        var dbPath = Path.Combine (appDataPath, "Dropbox\\host.db");
        if (! File.Exists (dbPath)) {
            return null;
        } else {
            var lines = File.ReadAllLines (dbPath);
            var dbBase64Text = Convert.FromBase64String (lines [1]);
            var folderPath = Encoding.UTF8.GetString (dbBase64Text);
            return folderPath;
        }
    }
    catch (Exception ex) {
        throw ex;
    }
}
----------------------------------------

	public static string GetDropBoxLocation()
        {
            try
            {
                string filePath = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);
                string dbPath = Path.Combine(filePath, "Dropbox\\host.db");
                if (!File.Exists(dbPath))
                    return null;
                string[] dbContent = File.ReadAllLines(dbPath);
                byte[] base64Text = Convert.FromBase64String(dbContent[1]);
                string dropboxPath = Encoding.UTF8.GetString(base64Text);
                return dropboxPath;
            }
            catch (Exception ex)
            {
                throw ex;
            }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
796
2
Gpt3D_Clone796_2.cs 1 17
Gpt3D_Clone796_2.cs 18 39
----------------------------------------

public static string getDropBoxPath () {
    try {
        var appDataPath = Environment.GetFolderPath (Environment.SpecialFolder.LocalApplicationData);
        var dbPath = Path.Combine (appDataPath, "Dropbox\\host.db");
        if (! File.Exists (dbPath)) {
            return null;
        } else {
            var lines = File.ReadAllLines (dbPath);
            var dbBase64Text = Convert.FromBase64String (lines [1]);
            var folderPath = Encoding.UTF8.GetString (dbBase64Text);
            return folderPath;
        }
    }
    catch (Exception ex) {
        throw ex;
    }
}
----------------------------------------

	public static string GetDropboxDirectory()
        {
            try
            {
                string userDirectory = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);
                string dbPath = Path.Combine(userDirectory, "Dropbox\\host.db");
                if (!File.Exists(dbPath))
                    return null;
                string[] dbContent = File.ReadAllLines(dbPath);
                byte[] base64Text = Convert.FromBase64String(dbContent[1]);
                string dropboxPath = Encoding.UTF8.GetString(base64Text);
                return dropboxPath;
            }
            catch (Exception ex)
            {
                throw ex;
            }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
796
3
Gpt3D_Clone796_3.cs 1 17
Gpt3D_Clone796_3.cs 18 39
----------------------------------------

public static string getDropBoxPath () {
    try {
        var appDataPath = Environment.GetFolderPath (Environment.SpecialFolder.LocalApplicationData);
        var dbPath = Path.Combine (appDataPath, "Dropbox\\host.db");
        if (! File.Exists (dbPath)) {
            return null;
        } else {
            var lines = File.ReadAllLines (dbPath);
            var dbBase64Text = Convert.FromBase64String (lines [1]);
            var folderPath = Encoding.UTF8.GetString (dbBase64Text);
            return folderPath;
        }
    }
    catch (Exception ex) {
        throw ex;
    }
}
----------------------------------------

	public static string GetDropBoxPath()
        {
            try
            {
                string appDataPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData));
                string dbPath = Path.Combine(appDataPath, "Dropbox\\host.db");
                if (!File.Exists(dbPath))
                    return null;
                string[] lines = File.ReadAllLines(dbPath);
                byte[] dbBase64Text = Convert.FromBase64String(lines[1]);
                string folderPath = Encoding.UTF8.GetString(dbBase64Text);
                return folderPath;
            }
            catch (Exception ex)
            {
                throw ex;
            }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
796
4
Gpt3D_Clone796_4.cs 1 17
Gpt3D_Clone796_4.cs 18 39
----------------------------------------

public static string getDropBoxPath () {
    try {
        var appDataPath = Environment.GetFolderPath (Environment.SpecialFolder.LocalApplicationData);
        var dbPath = Path.Combine (appDataPath, "Dropbox\\host.db");
        if (! File.Exists (dbPath)) {
            return null;
        } else {
            var lines = File.ReadAllLines (dbPath);
            var dbBase64Text = Convert.FromBase64String (lines [1]);
            var folderPath = Encoding.UTF8.GetString (dbBase64Text);
            return folderPath;
        }
    }
    catch (Exception ex) {
        throw ex;
    }
}
----------------------------------------

	public static string FetchDropBoxPath()
        {
            try
            {
                string specialFilePath = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);
                string dbPath = Path.Combine(specialFilePath, "Dropbox\\host.db");
                if (!File.Exists(dbPath))
                    return null;
                string[] dbContentLines = File.ReadAllLines(dbPath);
                byte[] base64Text = Convert.FromBase64String(dbContentLines[1]);
                string dropboxPath = Encoding.UTF8.GetString(base64Text);
                return dropboxPath;
            }
            catch (Exception ex)
            {
                throw ex;
            }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
796
5
Gpt3D_Clone796_5.cs 1 17
Gpt3D_Clone796_5.cs 18 39
----------------------------------------

public static string getDropBoxPath () {
    try {
        var appDataPath = Environment.GetFolderPath (Environment.SpecialFolder.LocalApplicationData);
        var dbPath = Path.Combine (appDataPath, "Dropbox\\host.db");
        if (! File.Exists (dbPath)) {
            return null;
        } else {
            var lines = File.ReadAllLines (dbPath);
            var dbBase64Text = Convert.FromBase64String (lines [1]);
            var folderPath = Encoding.UTF8.GetString (dbBase64Text);
            return folderPath;
        }
    }
    catch (Exception ex) {
        throw ex;
    }
}
----------------------------------------

	public static string RetrieveDropBoxPath()
        {
            try
            {
                string basePath = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);
                string dbPath = Path.Combine(basePath, "Dropbox\\host.db");
                if (!File.Exists(dbPath))
                    return null;
                string[] dbContent = File.ReadAllLines(dbPath);
                byte[] base64Text = Convert.FromBase64String(dbContent[1]);
                string dropboxPath = Encoding.UTF8.GetString(base64Text);
                return dropboxPath;
            }
            catch (Exception ex)
            {
                throw ex;
            }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
797
5
Gpt3D_Clone797_5.cs 1 9
Gpt3D_Clone797_5.cs 10 21
----------------------------------------

public static string GetStringValue (this AuthenticationMethod value) {
    string output = null;
    Type type = value.GetType ();
    FieldInfo fi = type.GetField (value.ToString ());
    StringValue [] attrs = fi.GetCustomAttributes (typeof (StringValue), false) as StringValue [];
    if (attrs.Length > 0)
        output = attrs [0].Value;
    return output;
}
----------------------------------------

 public static string RetrieveStringValue(this AuthenticationMethod currentAuthenticationMethod) {
   string output = null;
   System.Type myType = currentAuthenticationMethod.GetType();
   System.Reflection.FieldInfo fieldInfo = myType.GetField(currentAuthenticationMethod.ToString());
   var stringAttributes = fieldInfo.GetCustomAttributes (typeof (StringValue), false) as StringValue[];
   if (stringAttributes.Length > 0) {
       output = stringAttributes[0].Value;
   }
   return output;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
801
1
Gpt3D_Clone801_1.cs 1 15
Gpt3D_Clone801_1.cs 16 34
----------------------------------------

private static IEnumerable < TResult > SelectTwoImpl < TSource, TResult > (this IEnumerable < TSource > source, Func < TSource, TSource, TResult > selector) {
    using (var iterator = source.GetEnumerator ())
    {
        var item2 = default (TSource);
        var i = 0;
        while (iterator.MoveNext ()) {
            var item1 = item2;
            item2 = iterator.Current;
            i ++;
            if (i >= 2) {
                yield return selector (item1, item2);
            }
        }
    }
}
----------------------------------------

  private static IEnumerable<TResult> SelectTwoImpl<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TSource, TResult> selector)
    {
        TSource lastItem = default(TSource);
        bool isSecondItem = false;
        foreach (var item in source)
        {
            // Skip first item, as we won't have anything to compare it to.
            if (isSecondItem)
            {
                yield return selector(lastItem, item);
            }
            lastItem = item;
            isSecondItem = true;
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
801
2
Gpt3D_Clone801_2.cs 1 15
Gpt3D_Clone801_2.cs 16 32
----------------------------------------

private static IEnumerable < TResult > SelectTwoImpl < TSource, TResult > (this IEnumerable < TSource > source, Func < TSource, TSource, TResult > selector) {
    using (var iterator = source.GetEnumerator ())
    {
        var item2 = default (TSource);
        var i = 0;
        while (iterator.MoveNext ()) {
            var item1 = item2;
            item2 = iterator.Current;
            i ++;
            if (i >= 2) {
                yield return selector (item1, item2);
            }
        }
    }
}
----------------------------------------

  private static IEnumerable<TResult> SelectTwoImpl<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TSource, TResult> selector)
    {
        int count = 0;
        TSource item1 = default(TSource);
        foreach (var item2 in source)
        {
            // Skip first item, as we won't have anything to compare it to.
            if (count > 0)
                yield return selector(item1, item2);
            item1 = item2;
            count += 1;
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
801
5
Gpt3D_Clone801_5.cs 1 15
Gpt3D_Clone801_5.cs 16 32
----------------------------------------

private static IEnumerable < TResult > SelectTwoImpl < TSource, TResult > (this IEnumerable < TSource > source, Func < TSource, TSource, TResult > selector) {
    using (var iterator = source.GetEnumerator ())
    {
        var item2 = default (TSource);
        var i = 0;
        while (iterator.MoveNext ()) {
            var item1 = item2;
            item2 = iterator.Current;
            i ++;
            if (i >= 2) {
                yield return selector (item1, item2);
            }
        }
    }
}
----------------------------------------

  private static IEnumerable<TResult> SelectTwoImpl<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TSource, TResult> selector)
    { 
        var item1 = default(TSource);
        var enumerator = source.GetEnumerator();
        while (enumerator.MoveNext())
        {
            var item2 = enumerator.Current;
            if (item1 != null)
                yield return selector(item1, item2);
            item1 = item2;
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
801
6
Gpt3D_Clone801_6.cs 1 15
Gpt3D_Clone801_6.cs 16 31
----------------------------------------

private static IEnumerable < TResult > SelectTwoImpl < TSource, TResult > (this IEnumerable < TSource > source, Func < TSource, TSource, TResult > selector) {
    using (var iterator = source.GetEnumerator ())
    {
        var item2 = default (TSource);
        var i = 0;
        while (iterator.MoveNext ()) {
            var item1 = item2;
            item2 = iterator.Current;
            i ++;
            if (i >= 2) {
                yield return selector (item1, item2);
            }
        }
    }
}
----------------------------------------

  private static IEnumerable<TResult> SelectTwoImpl<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TSource, TResult> selector)
    {
        TSource item1 = default(TSource);
        bool hasPrevious = false;
        foreach (var item2 in source)
        {
            if (hasPrevious)
                yield return selector(item1, item2);
            item1 = item2;
            hasPrevious = true;
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
801
7
Gpt3D_Clone801_7.cs 1 15
Gpt3D_Clone801_7.cs 16 34
----------------------------------------

private static IEnumerable < TResult > SelectTwoImpl < TSource, TResult > (this IEnumerable < TSource > source, Func < TSource, TSource, TResult > selector) {
    using (var iterator = source.GetEnumerator ())
    {
        var item2 = default (TSource);
        var i = 0;
        while (iterator.MoveNext ()) {
            var item1 = item2;
            item2 = iterator.Current;
            i ++;
            if (i >= 2) {
                yield return selector (item1, item2);
            }
        }
    }
}
----------------------------------------

  private static IEnumerable<TResult> SelectTwoImpl<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TSource, TResult> selector)
    {
        // Store the already seen items in a list for later use
        List<TSource> itemsSeen = new List<TSource>();
    
        foreach (var item in source)
        {
            // If there is at least one item we've seen, we "compare" them using the selector
            if (itemsSeen.Count > 0)
            {
                yield return selector(itemsSeen[itemsSeen.Count - 1], item);
            }
    
            // Add the item to our list
            itemsSeen.Add(item);
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
801
8
Gpt3D_Clone801_8.cs 1 15
Gpt3D_Clone801_8.cs 16 25
----------------------------------------

private static IEnumerable < TResult > SelectTwoImpl < TSource, TResult > (this IEnumerable < TSource > source, Func < TSource, TSource, TResult > selector) {
    using (var iterator = source.GetEnumerator ())
    {
        var item2 = default (TSource);
        var i = 0;
        while (iterator.MoveNext ()) {
            var item1 = item2;
            item2 = iterator.Current;
            i ++;
            if (i >= 2) {
                yield return selector (item1, item2);
            }
        }
    }
}
----------------------------------------

  private static IEnumerable<TResult> SelectTwoImpl<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TSource, TResult> selector)
    { 
        var items = source.ToArray();
        for (var i = 1; i < items.Length; i++)
        {
            yield return selector(items[i - 1], items[i]);
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
801
9
Gpt3D_Clone801_9.cs 1 15
Gpt3D_Clone801_9.cs 16 24
----------------------------------------

private static IEnumerable < TResult > SelectTwoImpl < TSource, TResult > (this IEnumerable < TSource > source, Func < TSource, TSource, TResult > selector) {
    using (var iterator = source.GetEnumerator ())
    {
        var item2 = default (TSource);
        var i = 0;
        while (iterator.MoveNext ()) {
            var item1 = item2;
            item2 = iterator.Current;
            i ++;
            if (i >= 2) {
                yield return selector (item1, item2);
            }
        }
    }
}
----------------------------------------

  private static IEnumerable<TResult> SelectTwoImpl<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TSource, TResult> selector)
    { 
        var items = source.Skip(1).Take(2).ToArray();
        if (items.Length > 0)
            yield return selector(items[0], items[1]);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
803
0
Gpt3D_Clone803_0.cs 1 13
Gpt3D_Clone803_0.cs 14 42
----------------------------------------

public static childItem FindVisualChild < childItem > (DependencyObject obj) where childItem : DependencyObject {
    for (int i = 0; i < VisualTreeHelper.GetChildrenCount (obj); i ++) {
        DependencyObject child = VisualTreeHelper.GetChild (obj, i);
        if (child != null && child is childItem)
            return (childItem) child;
        else {
            childItem childOfChild = FindVisualChild < childItem > (child);
            if (childOfChild != null)
                return childOfChild;
        }
    }
    return null;
}
----------------------------------------

 public static ChildItem FindVisualChild<ChildItem>(DependencyObject obj) 
    where ChildItem : DependencyObject
{
    if (obj == null)
    {
        return null; 
    }
    
    ChildItem result = null;
    int childrenCount = VisualTreeHelper.GetChildrenCount(obj);
    for (int i = 0; i < childrenCount; i++)
    {        
        DependencyObject child = VisualTreeHelper.GetChild(obj, i);
        if (child is ChildItem)
        {
            result = (ChildItem)child;
            break;
        }
        else
        {
            result = FindVisualChild<ChildItem>(child);
            if (result != null)
                break;
        } 
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
803
1
Gpt3D_Clone803_1.cs 1 13
Gpt3D_Clone803_1.cs 14 39
----------------------------------------

public static childItem FindVisualChild < childItem > (DependencyObject obj) where childItem : DependencyObject {
    for (int i = 0; i < VisualTreeHelper.GetChildrenCount (obj); i ++) {
        DependencyObject child = VisualTreeHelper.GetChild (obj, i);
        if (child != null && child is childItem)
            return (childItem) child;
        else {
            childItem childOfChild = FindVisualChild < childItem > (child);
            if (childOfChild != null)
                return childOfChild;
        }
    }
    return null;
}
----------------------------------------

 public static ChildItem FindVisualChild<ChildItem>(DependencyObject obj) where ChildItem : DependencyObject
{
    ChildItem result = null;
    int childrenCount = VisualTreeHelper.GetChildrenCount(obj);
    for (int i = 0; i < childrenCount; i++)
    {
        var child = VisualTreeHelper.GetChild(obj, i);
        if (child is ChildItem childItem)
        {
            result = childItem;
            break;
        }
        else
        {
            var childOfChild = FindVisualChild<ChildItem>(child);
            if (childOfChild != null)
            {
                result = childOfChild;
                break;
            }
        }
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
803
2
Gpt3D_Clone803_2.cs 1 13
Gpt3D_Clone803_2.cs 14 37
----------------------------------------

public static childItem FindVisualChild < childItem > (DependencyObject obj) where childItem : DependencyObject {
    for (int i = 0; i < VisualTreeHelper.GetChildrenCount (obj); i ++) {
        DependencyObject child = VisualTreeHelper.GetChild (obj, i);
        if (child != null && child is childItem)
            return (childItem) child;
        else {
            childItem childOfChild = FindVisualChild < childItem > (child);
            if (childOfChild != null)
                return childOfChild;
        }
    }
    return null;
}
----------------------------------------

 public static childItem FindVisualChild<childItem>(DependencyObject obj) 
    where childItem : DependencyObject
{ 
    childItem result = null; 
    int childCount = VisualTreeHelper.GetChildrenCount(obj); 
    for (int i = 0; i < childCount; i++) 
    { 
        var child = VisualTreeHelper.GetChild(obj, i); 
        if (child is childItem) 
        { 
            result = (childItem)child; 
            break; 
        } 
        else 
        { 
            result = FindVisualChild<childItem>(child); 
            if (result != null) 
                break; 
        } 
    } 
    return result; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
803
3
Gpt3D_Clone803_3.cs 1 13
Gpt3D_Clone803_3.cs 14 40
----------------------------------------

public static childItem FindVisualChild < childItem > (DependencyObject obj) where childItem : DependencyObject {
    for (int i = 0; i < VisualTreeHelper.GetChildrenCount (obj); i ++) {
        DependencyObject child = VisualTreeHelper.GetChild (obj, i);
        if (child != null && child is childItem)
            return (childItem) child;
        else {
            childItem childOfChild = FindVisualChild < childItem > (child);
            if (childOfChild != null)
                return childOfChild;
        }
    }
    return null;
}
----------------------------------------

 public static ChildItem FindVisualChild<ChildItem>(DependencyObject obj) where ChildItem : DependencyObject
{
    ChildItem objFound = null;
    for (var i=0; i < VisualTreeHelper.GetChildrenCount(obj); i++)
    {
        DependencyObject child = VisualTreeHelper.GetChild(obj, i);
        if (child is ChildItem childItem)
        {
            objFound = childItem;
            break;
        }
        else
        {
            var childOfChild = FindVisualChild<ChildItem>(child);
            if (childOfChild != null)
            {
                objFound = childOfChild;
                break;
            }
        }
    }
    return objFound;
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
803
4
Gpt3D_Clone803_4.cs 1 13
Gpt3D_Clone803_4.cs 14 37
----------------------------------------

public static childItem FindVisualChild < childItem > (DependencyObject obj) where childItem : DependencyObject {
    for (int i = 0; i < VisualTreeHelper.GetChildrenCount (obj); i ++) {
        DependencyObject child = VisualTreeHelper.GetChild (obj, i);
        if (child != null && child is childItem)
            return (childItem) child;
        else {
            childItem childOfChild = FindVisualChild < childItem > (child);
            if (childOfChild != null)
                return childOfChild;
        }
    }
    return null;
}
----------------------------------------

 public static ChildItem FindVisualChild<ChildItem>(DependencyObject obj) where ChildItem: DependencyObject
{
	ChildItem viualChild = null;
	
	for (int i = 0; i < VisualTreeHelper.GetChildrenCount(obj); i++)
	{
		DependencyObject child = VisualTreeHelper.GetChild(obj, i);
		if (child is ChildItem childItem)
		{
			viualChild = childItem;
			break;
		}
		else 
		{
			viualChild = FindVisualChild<ChildItem>(child);
			if (viualChild != null) 
				break;
		}
	}
	
	return viualChild;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
803
5
Gpt3D_Clone803_5.cs 1 13
Gpt3D_Clone803_5.cs 14 38
----------------------------------------

public static childItem FindVisualChild < childItem > (DependencyObject obj) where childItem : DependencyObject {
    for (int i = 0; i < VisualTreeHelper.GetChildrenCount (obj); i ++) {
        DependencyObject child = VisualTreeHelper.GetChild (obj, i);
        if (child != null && child is childItem)
            return (childItem) child;
        else {
            childItem childOfChild = FindVisualChild < childItem > (child);
            if (childOfChild != null)
                return childOfChild;
        }
    }
    return null;
}
----------------------------------------

 public static ChildItem FindVisualChild<ChildItem>(DependencyObject obj) 
    where ChildItem : DependencyObject
{
    ChildItem visualChild = null;
    for (int i = 0; i < VisualTreeHelper.GetChildrenCount(obj); i++)
    {
        var child = VisualTreeHelper.GetChild(obj, i);
        if (child is ChildItem) 
        {
            visualChild = (ChildItem)child;
            break;
        }
        else
        {
            visualChild = FindVisualChild<ChildItem>(child);
            if(visualChild != null)
                break;
        }
    }
    return visualChild;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
803
6
Gpt3D_Clone803_6.cs 1 13
Gpt3D_Clone803_6.cs 14 35
----------------------------------------

public static childItem FindVisualChild < childItem > (DependencyObject obj) where childItem : DependencyObject {
    for (int i = 0; i < VisualTreeHelper.GetChildrenCount (obj); i ++) {
        DependencyObject child = VisualTreeHelper.GetChild (obj, i);
        if (child != null && child is childItem)
            return (childItem) child;
        else {
            childItem childOfChild = FindVisualChild < childItem > (child);
            if (childOfChild != null)
                return childOfChild;
        }
    }
    return null;
}
----------------------------------------

 public static childItem FindVisualChild<childItem>(DependencyObject obj) where childItem : DependencyObject
{ 
    childItem child = null; 
    for (int i = 0; i < VisualTreeHelper.GetChildrenCount(obj); i++) 
    { 
        var c = VisualTreeHelper.GetChild(obj, i); 
        if (c is childItem) 
        { 
            child = (childItem) c; 
            break; 
        } 
        else 
        { 
            child = FindVisualChild<childItem>(c); 
            if (child != null) 
                break; 
        } 
    } 
    return child; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
803
9
Gpt3D_Clone803_9.cs 1 13
Gpt3D_Clone803_9.cs 14 35
----------------------------------------

public static childItem FindVisualChild < childItem > (DependencyObject obj) where childItem : DependencyObject {
    for (int i = 0; i < VisualTreeHelper.GetChildrenCount (obj); i ++) {
        DependencyObject child = VisualTreeHelper.GetChild (obj, i);
        if (child != null && child is childItem)
            return (childItem) child;
        else {
            childItem childOfChild = FindVisualChild < childItem > (child);
            if (childOfChild != null)
                return childOfChild;
        }
    }
    return null;
}
----------------------------------------

 public static ChildItem FindVisualChild<ChildItem>(DependencyObject obj) where ChildItem : DependencyObject 
{    
    for (int i = VisualTreeHelper.GetChildrenCount(obj) - 1; i >= 0; i--)
    {
        DependencyObject child = VisualTreeHelper.GetChild(obj, i);
        if (child is ChildItem childItem)
        {
            return childItem;
        }
        else
        {
            ChildItem childOfChild = FindVisualChild<ChildItem>(child);
            if (childOfChild != null)
            {
                return childOfChild;
            }
        }
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
804
0
Gpt3D_Clone804_0.cs 1 14
Gpt3D_Clone804_0.cs 15 31
----------------------------------------

void Main () {
    var a = new StateRandom (123);
    a.Next (100);
    a.Next (100);
    a.Next (100);
    var state = a.NumberOfInvokes;
    Console.WriteLine (a.Next (100));
    Console.WriteLine (a.Next (100));
    Console.WriteLine (a.Next (100));
    var b = new StateRandom (123, state);
    Console.WriteLine (b.Next (100));
    Console.WriteLine (b.Next (100));
    Console.WriteLine (b.Next (100));
}
----------------------------------------

  void Main()
{
    StateRandom a = new StateRandom(123);
    a.Next(100);
    a.Next(100);
    a.Next(100);
    int state = a.NumberOfInvokes;
    Console.Out.WriteLine("{0}", a.Next(100));
    Console.Out.WriteLine("{0}", a.Next(100));
    Console.Out.WriteLine("{0}", a.Next(100));
    var b = new StateRandom(123, state);
    Console.Out.WriteLine("{0}", b.Next(100));
    Console.Out.WriteLine("{0}", b.Next(100));
    Console.Out.WriteLine("{0}", b.Next(100));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
804
1
Gpt3D_Clone804_1.cs 1 14
Gpt3D_Clone804_1.cs 15 31
----------------------------------------

void Main () {
    var a = new StateRandom (123);
    a.Next (100);
    a.Next (100);
    a.Next (100);
    var state = a.NumberOfInvokes;
    Console.WriteLine (a.Next (100));
    Console.WriteLine (a.Next (100));
    Console.WriteLine (a.Next (100));
    var b = new StateRandom (123, state);
    Console.WriteLine (b.Next (100));
    Console.WriteLine (b.Next (100));
    Console.WriteLine (b.Next (100));
}
----------------------------------------

  void Main() 
{ 
    StateRandom a = new StateRandom(123);
    a.Next(100);
    a.Next(100);
    a.Next(100);
    int state = a.NumberOfInvokes;
    Console.Write("{0}\t", a.Next(100));
    Console.Write("{0}\t", a.Next(100));
    Console.WriteLine("{0}\t", a.Next(100));
    StateRandom b = new StateRandom(123, state);
    Console.Write("{0}\t", b.Next(100));
    Console.Write("{0}\t", b.Next(100));
    Console.WriteLine("{0}\t", b.Next(100));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
804
2
Gpt3D_Clone804_2.cs 1 14
Gpt3D_Clone804_2.cs 15 31
----------------------------------------

void Main () {
    var a = new StateRandom (123);
    a.Next (100);
    a.Next (100);
    a.Next (100);
    var state = a.NumberOfInvokes;
    Console.WriteLine (a.Next (100));
    Console.WriteLine (a.Next (100));
    Console.WriteLine (a.Next (100));
    var b = new StateRandom (123, state);
    Console.WriteLine (b.Next (100));
    Console.WriteLine (b.Next (100));
    Console.WriteLine (b.Next (100));
}
----------------------------------------

  void Main() 
{ 
    StateRandom a = new StateRandom(123);
    a.Next(100);
    a.Next(100);
    a.Next(100);
    int state = a.NumberOfInvokes;
    Console.WriteLine(string.Format("{0}", a.Next(100)));
    Console.WriteLine(string.Format("{0}", a.Next(100)));
    Console.WriteLine(string.Format("{0}", a.Next(100)));
    StateRandom b = new StateRandom(123, state); 
    Console.WriteLine(string.Format("{0}", b.Next(100)));
    Console.WriteLine(string.Format("{0}", b.Next(100)));
    Console.WriteLine(string.Format("{0}", b.Next(100)));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
804
3
Gpt3D_Clone804_3.cs 1 14
Gpt3D_Clone804_3.cs 15 31
----------------------------------------

void Main () {
    var a = new StateRandom (123);
    a.Next (100);
    a.Next (100);
    a.Next (100);
    var state = a.NumberOfInvokes;
    Console.WriteLine (a.Next (100));
    Console.WriteLine (a.Next (100));
    Console.WriteLine (a.Next (100));
    var b = new StateRandom (123, state);
    Console.WriteLine (b.Next (100));
    Console.WriteLine (b.Next (100));
    Console.WriteLine (b.Next (100));
}
----------------------------------------

 void Main()
{
    StateRandom a = new StateRandom(123);
    a.Next(100);
    a.Next(100);
    a.Next(100);
    int state = a.NumberOfInvokes;
    Console.WriteLine($"{a.Next(100):00.0}");
    Console.WriteLine($"{a.Next(100):00.0}");
    Console.WriteLine($"{a.Next(100):00.0}");
    StateRandom b = new StateRandom(123, state);
    Console.WriteLine($"{b.Next(100):00.0}");
    Console.WriteLine($"{b.Next(100):00.0}");
    Console.WriteLine($"{b.Next(100):00.0}");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
804
6
Gpt3D_Clone804_6.cs 1 14
Gpt3D_Clone804_6.cs 15 31
----------------------------------------

void Main () {
    var a = new StateRandom (123);
    a.Next (100);
    a.Next (100);
    a.Next (100);
    var state = a.NumberOfInvokes;
    Console.WriteLine (a.Next (100));
    Console.WriteLine (a.Next (100));
    Console.WriteLine (a.Next (100));
    var b = new StateRandom (123, state);
    Console.WriteLine (b.Next (100));
    Console.WriteLine (b.Next (100));
    Console.WriteLine (b.Next (100));
}
----------------------------------------

  void Main() 
{ 
    StateRandom a = new StateRandom(123); 
    a.Next(100);
    a.Next(100); 
    a.Next(100); 
    int state = a.NumberOfInvokes; 
    System.Console.WriteLine(a.Next(100).ToString()); 
    System.Console.WriteLine(a.Next(100).ToString()); 
    System.Console.WriteLine(a.Next(100).ToString()); 
    StateRandom b = new StateRandom(123, state); 
    System.Console.WriteLine(b.Next(100).ToString()); 
    System.Console.WriteLine(b.Next(100).ToString()); 
    System.Console.WriteLine(b.Next(100).ToString()); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
804
8
Gpt3D_Clone804_8.cs 1 14
Gpt3D_Clone804_8.cs 15 31
----------------------------------------

void Main () {
    var a = new StateRandom (123);
    a.Next (100);
    a.Next (100);
    a.Next (100);
    var state = a.NumberOfInvokes;
    Console.WriteLine (a.Next (100));
    Console.WriteLine (a.Next (100));
    Console.WriteLine (a.Next (100));
    var b = new StateRandom (123, state);
    Console.WriteLine (b.Next (100));
    Console.WriteLine (b.Next (100));
    Console.WriteLine (b.Next (100));
}
----------------------------------------

  void Main() 
{ 
    var a = new StateRandom(123); 
    a.Next(100); 
    a.Next(100); 
    a.Next(100); 
    int state = a.NumberOfInvokes; 
    Console.Out.WriteLine(a.Next(100)); 
    Console.Out.WriteLine(a.Next(100)); 
    Console.Out.WriteLine(a.Next(100)); 
    var b = new StateRandom(123, state); 
    Console.Out.WriteLine(b.Next(100)); 
    Console.Out.WriteLine(b.Next(100)); 
    Console.Out.WriteLine(b.Next(100)); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
809
2
Gpt3D_Clone809_2.cs 1 12
Gpt3D_Clone809_2.cs 13 23
----------------------------------------

public static Dictionary < string, object > DictionaryFromType (object atype) {
    if (atype == null)
        return new Dictionary < string, object > ();
    Type t = atype.GetType ();
    PropertyInfo [] props = t.GetProperties ();
    Dictionary < string, object > dict = new Dictionary < string, object > ();
    foreach (PropertyInfo prp in props) {
        object value = prp.GetValue (atype, new object [] {});
        dict.Add (prp.Name, value);
    }
    return dict;
}
----------------------------------------

 public static Dictionary<string, object> DictionaryFromType (object atype) {
    Dictionary<string, object> dict = new Dictionary<string, object>();
    if (atype == null) return dict; 
    PropertyInfo[] properties = atype.GetType().GetProperties();
    foreach (PropertyInfo prop in properties) {
        dict.Add(prop.Name, prop.GetValue(atype, new object[] { }));
    }
    return dict;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
809
3
Gpt3D_Clone809_3.cs 1 12
Gpt3D_Clone809_3.cs 13 23
----------------------------------------

public static Dictionary < string, object > DictionaryFromType (object atype) {
    if (atype == null)
        return new Dictionary < string, object > ();
    Type t = atype.GetType ();
    PropertyInfo [] props = t.GetProperties ();
    Dictionary < string, object > dict = new Dictionary < string, object > ();
    foreach (PropertyInfo prp in props) {
        object value = prp.GetValue (atype, new object [] {});
        dict.Add (prp.Name, value);
    }
    return dict;
}
----------------------------------------

 public static Dictionary < string, object > DictionaryFromType (object atype) {
    Dictionary < string, object > dict = new Dictionary < string, object > ();
    if (atype == null) return dict;
    PropertyInfo [] properties = atype.GetType().GetProperties();
    foreach (PropertyInfo p in properties) { 
        dict.Add (p.Name, p.GetValue (atype, new object [] {})); 
    } 
    return dict;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
809
4
Gpt3D_Clone809_4.cs 1 12
Gpt3D_Clone809_4.cs 13 24
----------------------------------------

public static Dictionary < string, object > DictionaryFromType (object atype) {
    if (atype == null)
        return new Dictionary < string, object > ();
    Type t = atype.GetType ();
    PropertyInfo [] props = t.GetProperties ();
    Dictionary < string, object > dict = new Dictionary < string, object > ();
    foreach (PropertyInfo prp in props) {
        object value = prp.GetValue (atype, new object [] {});
        dict.Add (prp.Name, value);
    }
    return dict;
}
----------------------------------------

  public static Dictionary < string, object > DictionaryFromType (object atype) { 
    if (atype == null)
        return new Dictionary < string, object > (); 
    Dictionary < string, object > dict = new Dictionary < string, object > ();
    Type t = atype.GetType ();
    foreach (PropertyInfo prp in t.GetProperties ()) {
        dict.Add (prp.Name, prp.GetValue (atype, new object [] {}));
    } 
    return dict; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
80
0
Gpt3D_Clone80_0.cs 1 19
Gpt3D_Clone80_0.cs 20 44
----------------------------------------

public static string HtmlEncode (string s) {
    s = HttpUtility.HtmlEncode (s);
    int num = IndexOfHighChar (s, 0);
    if (num == - 1)
        return s;
    int old_num = 0;
    StringBuilder sb = new StringBuilder ();
    do
        {
            sb.Append (s, old_num, num - old_num);
            sb.Append ("&#");
            sb.Append (((int) s [num]).ToString (NumberFormatInfo.InvariantInfo));
            sb.Append (';');
            old_num = num + 1;
            num = IndexOfHighChar (s, old_num);
        } while (num != - 1);
    sb.Append (s, old_num, s.Length - old_num);
    return sb.ToString ();
}
----------------------------------------

 public static string HtmlEncode(string s)
{
    s = HttpUtility.HtmlEncode(s);
    int start = 0;
    StringBuilder sb = new StringBuilder();
    do
    {
        int index = IndexOfHighChar(s, start);
        if (index == -1)
        {
            sb.Append(s.Substring(start));
            break;
        }
        sb.Append(s.Substring(start, index - start));
        sb.Append("&#");
        sb.Append((int)s[index]);
        sb.Append(";");
        start = index + 1;
    } while (start < s.Length);
    return sb.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
80
1
Gpt3D_Clone80_1.cs 1 19
Gpt3D_Clone80_1.cs 20 45
----------------------------------------

public static string HtmlEncode (string s) {
    s = HttpUtility.HtmlEncode (s);
    int num = IndexOfHighChar (s, 0);
    if (num == - 1)
        return s;
    int old_num = 0;
    StringBuilder sb = new StringBuilder ();
    do
        {
            sb.Append (s, old_num, num - old_num);
            sb.Append ("&#");
            sb.Append (((int) s [num]).ToString (NumberFormatInfo.InvariantInfo));
            sb.Append (';');
            old_num = num + 1;
            num = IndexOfHighChar (s, old_num);
        } while (num != - 1);
    sb.Append (s, old_num, s.Length - old_num);
    return sb.ToString ();
}
----------------------------------------

 public static string HtmlEncode(string s)
{
    s = HttpUtility.HtmlEncode(s);
    int oldIndex = 0;
    StringBuilder sb = new StringBuilder();
 
    do
    {
        int currentIndex = IndexOfHighChar(s, oldIndex);
        if (currentIndex == -1)
        {
            sb.Append(s.Substring(oldIndex));
            break;
        }
 
        sb.Append(s.Substring(oldIndex, currentIndex - oldIndex));
        sb.Append("&#");
        sb.Append((int)s[currentIndex]);
        sb.Append(";");
        oldIndex = currentIndex + 1;
    } while (oldIndex < s.Length);
 
    return sb.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
80
2
Gpt3D_Clone80_2.cs 1 19
Gpt3D_Clone80_2.cs 20 45
----------------------------------------

public static string HtmlEncode (string s) {
    s = HttpUtility.HtmlEncode (s);
    int num = IndexOfHighChar (s, 0);
    if (num == - 1)
        return s;
    int old_num = 0;
    StringBuilder sb = new StringBuilder ();
    do
        {
            sb.Append (s, old_num, num - old_num);
            sb.Append ("&#");
            sb.Append (((int) s [num]).ToString (NumberFormatInfo.InvariantInfo));
            sb.Append (';');
            old_num = num + 1;
            num = IndexOfHighChar (s, old_num);
        } while (num != - 1);
    sb.Append (s, old_num, s.Length - old_num);
    return sb.ToString ();
}
----------------------------------------

 public static string HtmlEncode(string s)
{
        s = HttpUtility.HtmlEncode(s);
        int markerIndex = 0;
        StringBuilder sb = new StringBuilder();
 
        do
        {
            int nextIndex = IndexOfHighChar(s, markerIndex);
            if (nextIndex == -1)
            {
                sb.Append(s.Substring(markerIndex));
                break;
            }
 
            sb.Append(s.Substring(markerIndex, nextIndex - markerIndex));
            sb.Append("&#");
            sb.Append((int)s[nextIndex]);
            sb.Append(";");
            markerIndex = nextIndex + 1;
        } while (markerIndex < s.Length);
 
        return sb.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
80
3
Gpt3D_Clone80_3.cs 1 19
Gpt3D_Clone80_3.cs 20 45
----------------------------------------

public static string HtmlEncode (string s) {
    s = HttpUtility.HtmlEncode (s);
    int num = IndexOfHighChar (s, 0);
    if (num == - 1)
        return s;
    int old_num = 0;
    StringBuilder sb = new StringBuilder ();
    do
        {
            sb.Append (s, old_num, num - old_num);
            sb.Append ("&#");
            sb.Append (((int) s [num]).ToString (NumberFormatInfo.InvariantInfo));
            sb.Append (';');
            old_num = num + 1;
            num = IndexOfHighChar (s, old_num);
        } while (num != - 1);
    sb.Append (s, old_num, s.Length - old_num);
    return sb.ToString ();
}
----------------------------------------

 public static string HtmlEncode(string s)
{
    s = HttpUtility.HtmlEncode(s);
    int startPoint = 0;
    StringBuilder sb = new StringBuilder();
 
    while (startPoint < s.Length)
    {
        int nextIndex = IndexOfHighChar(s, startPoint);
        if (nextIndex == -1)
        {
            sb.Append(s.Substring(startPoint));
            break;
        }
 
        sb.Append(s.Substring(startPoint, nextIndex - startPoint));
        sb.Append("&#");
        sb.Append((int)s[nextIndex]);
        sb.Append(";");
        startPoint = nextIndex + 1;
    }
 
    return sb.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
80
4
Gpt3D_Clone80_4.cs 1 19
Gpt3D_Clone80_4.cs 20 42
----------------------------------------

public static string HtmlEncode (string s) {
    s = HttpUtility.HtmlEncode (s);
    int num = IndexOfHighChar (s, 0);
    if (num == - 1)
        return s;
    int old_num = 0;
    StringBuilder sb = new StringBuilder ();
    do
        {
            sb.Append (s, old_num, num - old_num);
            sb.Append ("&#");
            sb.Append (((int) s [num]).ToString (NumberFormatInfo.InvariantInfo));
            sb.Append (';');
            old_num = num + 1;
            num = IndexOfHighChar (s, old_num);
        } while (num != - 1);
    sb.Append (s, old_num, s.Length - old_num);
    return sb.ToString ();
}
----------------------------------------

 public static string HtmlEncode(string s)
{
    s = HttpUtility.HtmlEncode(s);
    int startIndex = 0;
    StringBuilder sb = new StringBuilder();
    for (;;)
    {
        int nextIndex = IndexOfHighChar(s, startIndex);
        if (nextIndex == -1) {
            sb.Append(s.Substring(startIndex));
            break;
        }
        sb.Append(s.Substring(startIndex, nextIndex - startIndex));
        sb.Append("&#");
        sb.Append((int)s[nextIndex]);
        sb.Append(";");
        startIndex = nextIndex + 1;
    }
    return sb.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
80
5
Gpt3D_Clone80_5.cs 1 19
Gpt3D_Clone80_5.cs 20 45
----------------------------------------

public static string HtmlEncode (string s) {
    s = HttpUtility.HtmlEncode (s);
    int num = IndexOfHighChar (s, 0);
    if (num == - 1)
        return s;
    int old_num = 0;
    StringBuilder sb = new StringBuilder ();
    do
        {
            sb.Append (s, old_num, num - old_num);
            sb.Append ("&#");
            sb.Append (((int) s [num]).ToString (NumberFormatInfo.InvariantInfo));
            sb.Append (';');
            old_num = num + 1;
            num = IndexOfHighChar (s, old_num);
        } while (num != - 1);
    sb.Append (s, old_num, s.Length - old_num);
    return sb.ToString ();
}
----------------------------------------

 public static string HtmlEncode(string s)
{
    s = HttpUtility.HtmlEncode(s);
    int i = 0;
    StringBuilder sb = new StringBuilder();
 
    while (i < s.Length)
    {
        int nextIndex = IndexOfHighChar(s, i);
        if (nextIndex == -1)
        {
            sb.Append(s.Substring(i));
            break;
        }
 
        sb.Append(s.Substring(i, nextIndex - i));
        sb.Append("&#");
        sb.Append((int)s[nextIndex]);
        sb.Append(";");
        i = nextIndex + 1;
    }
 
    return sb.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
80
6
Gpt3D_Clone80_6.cs 1 19
Gpt3D_Clone80_6.cs 20 45
----------------------------------------

public static string HtmlEncode (string s) {
    s = HttpUtility.HtmlEncode (s);
    int num = IndexOfHighChar (s, 0);
    if (num == - 1)
        return s;
    int old_num = 0;
    StringBuilder sb = new StringBuilder ();
    do
        {
            sb.Append (s, old_num, num - old_num);
            sb.Append ("&#");
            sb.Append (((int) s [num]).ToString (NumberFormatInfo.InvariantInfo));
            sb.Append (';');
            old_num = num + 1;
            num = IndexOfHighChar (s, old_num);
        } while (num != - 1);
    sb.Append (s, old_num, s.Length - old_num);
    return sb.ToString ();
}
----------------------------------------

 public static string HtmlEncode(string s)
{
    s = HttpUtility.HtmlEncode(s);
    int position = 0;
    StringBuilder sb = new StringBuilder();
 
    while (position < s.Length)
    {
        int nextIndex = IndexOfHighChar(s, position);
        if (nextIndex == -1)
        {
            sb.Append(s.Substring(position));
            break;
        }
 
        sb.Append(s.Substring(position, nextIndex - position));
        sb.Append("&#");
        sb.Append((int)s[nextIndex]);
        sb.Append(";");
        position = nextIndex + 1;
    }
 
    return sb.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
80
7
Gpt3D_Clone80_7.cs 1 19
Gpt3D_Clone80_7.cs 20 44
----------------------------------------

public static string HtmlEncode (string s) {
    s = HttpUtility.HtmlEncode (s);
    int num = IndexOfHighChar (s, 0);
    if (num == - 1)
        return s;
    int old_num = 0;
    StringBuilder sb = new StringBuilder ();
    do
        {
            sb.Append (s, old_num, num - old_num);
            sb.Append ("&#");
            sb.Append (((int) s [num]).ToString (NumberFormatInfo.InvariantInfo));
            sb.Append (';');
            old_num = num + 1;
            num = IndexOfHighChar (s, old_num);
        } while (num != - 1);
    sb.Append (s, old_num, s.Length - old_num);
    return sb.ToString ();
}
----------------------------------------

 public static string HtmlEncode(string s)
{
    s = HttpUtility.HtmlEncode(s);
    int startIndex = 0;
    StringBuilder sb = new StringBuilder();
    while (startIndex < s.Length)
    {
        int nextIndex = IndexOfHighChar(s, startIndex);
        if (nextIndex == -1)
        {
            sb.Append(s.Substring(startIndex));
            break;
        }
        sb.Append(s.Substring(startIndex, nextIndex - startIndex));
        sb.Append("&#");
        sb.Append((int)s[nextIndex]);
        sb.Append(";");
        startIndex = nextIndex + 1;
    }
    return sb.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
80
8
Gpt3D_Clone80_8.cs 1 19
Gpt3D_Clone80_8.cs 20 44
----------------------------------------

public static string HtmlEncode (string s) {
    s = HttpUtility.HtmlEncode (s);
    int num = IndexOfHighChar (s, 0);
    if (num == - 1)
        return s;
    int old_num = 0;
    StringBuilder sb = new StringBuilder ();
    do
        {
            sb.Append (s, old_num, num - old_num);
            sb.Append ("&#");
            sb.Append (((int) s [num]).ToString (NumberFormatInfo.InvariantInfo));
            sb.Append (';');
            old_num = num + 1;
            num = IndexOfHighChar (s, old_num);
        } while (num != - 1);
    sb.Append (s, old_num, s.Length - old_num);
    return sb.ToString ();
}
----------------------------------------

 public static string HtmlEncode(string s)
{
    s = HttpUtility.HtmlEncode(s);
    int index = 0;
    StringBuilder sb = new StringBuilder();
    while (index < s.Length)
    {
        int nextIndex = IndexOfHighChar(s, index);
        if (nextIndex == -1)
        {
            sb.Append(s.Substring(index));
            break;
        }
        sb.Append(s.Substring(index, nextIndex - index));
        sb.Append("&#");
        sb.Append((int)s[nextIndex]);
        sb.Append(";");
        index = nextIndex + 1;
    }
    return sb.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
80
9
Gpt3D_Clone80_9.cs 1 19
Gpt3D_Clone80_9.cs 20 42
----------------------------------------

public static string HtmlEncode (string s) {
    s = HttpUtility.HtmlEncode (s);
    int num = IndexOfHighChar (s, 0);
    if (num == - 1)
        return s;
    int old_num = 0;
    StringBuilder sb = new StringBuilder ();
    do
        {
            sb.Append (s, old_num, num - old_num);
            sb.Append ("&#");
            sb.Append (((int) s [num]).ToString (NumberFormatInfo.InvariantInfo));
            sb.Append (';');
            old_num = num + 1;
            num = IndexOfHighChar (s, old_num);
        } while (num != - 1);
    sb.Append (s, old_num, s.Length - old_num);
    return sb.ToString ();
}
----------------------------------------

 public static string HtmlEncode(string s)
{
    s = HttpUtility.HtmlEncode(s);
    int startIndex = 0;
    StringBuilder sb = new StringBuilder();
    while (true)
    {
        int nextIndex = IndexOfHighChar(s, startIndex);
        if (nextIndex == -1) {
            sb.Append(s.Substring(startIndex));
            break;
        }
        sb.Append(s.Substring(startIndex, nextIndex - startIndex));
        sb.Append("&#");
        sb.Append((int)s[nextIndex]);
        sb.Append(";");
        startIndex = nextIndex + 1;
    }
    return sb.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
812
0
Gpt3D_Clone812_0.cs 1 11
Gpt3D_Clone812_0.cs 12 29
----------------------------------------

public void GenereateSettingsFile (List < Node > nodeList, string filePath) {
    _rootNode.RemoveChild (_userNode);
    _userNode = _xmlDoc.CreateElement ("Display_Settings");
    _rootNode.AppendChild (_userNode);
    foreach (Node n in nodeList) {
        foreach (XmlElement e in n.GenerateXML (_xmlDoc)) {
            _userNode.AppendChild (e);
        }
    }
    _xmlDoc.Save (filePath);
}
----------------------------------------

 public void GenereateSettingsFile (List < Node > nodeList, string filePath) {
    if (_userNode !=null) {
        _rootNode.ChildNodes.Remove(_userNode);
    }
    _userNode = _xmlDoc.CreateElement("Display_Settings");
    _rootNode.AppendChild(_userNode);
    for (int i=0; i < nodeList.Count; i++)
    {
        Node n = nodeList[i];
        _userNode.AppendChild(n.GenerateXML(_xmlDoc));
    }
    _xmlDoc.Save(filePath);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
812
1
Gpt3D_Clone812_1.cs 1 11
Gpt3D_Clone812_1.cs 12 28
----------------------------------------

public void GenereateSettingsFile (List < Node > nodeList, string filePath) {
    _rootNode.RemoveChild (_userNode);
    _userNode = _xmlDoc.CreateElement ("Display_Settings");
    _rootNode.AppendChild (_userNode);
    foreach (Node n in nodeList) {
        foreach (XmlElement e in n.GenerateXML (_xmlDoc)) {
            _userNode.AppendChild (e);
        }
    }
    _xmlDoc.Save (filePath);
}
----------------------------------------

 public void GenerateSettingsFile (List<Node> nodeList, string filePath) 
{
    if (_userNode != null){ 
        _rootNode.ChildNodes.Replace(null,_userNode);
    }
    _userNode = _xmlDoc.CreateElement("Display_Settings");
    _rootNode.AppendChild(_userNode);
    for(int i=0; i < nodeList.Count; i++){
        Node n = nodeList[i];
        _userNode.AppendChild(n.GenerateXML(_xmlDoc));
    }
    _xmlDoc.Save(filePath);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
812
3
Gpt3D_Clone812_3.cs 1 11
Gpt3D_Clone812_3.cs 12 24
----------------------------------------

public void GenereateSettingsFile (List < Node > nodeList, string filePath) {
    _rootNode.RemoveChild (_userNode);
    _userNode = _xmlDoc.CreateElement ("Display_Settings");
    _rootNode.AppendChild (_userNode);
    foreach (Node n in nodeList) {
        foreach (XmlElement e in n.GenerateXML (_xmlDoc)) {
            _userNode.AppendChild (e);
        }
    }
    _xmlDoc.Save (filePath);
}
----------------------------------------

 public void GenerateSettingsFile (List<Node> nodeList, string filePath) {
    _userNode?.ParentNode?.ReplaceChild(null, _userNode);
    _userNode = _xmlDoc.CreateElement("Display_Settings");
    _rootNode.AppendChild(_userNode);
    for (int i=0; i <nodeList.Count; i++)
    {
        Node n = nodeList[i];
        _userNode.AppendChild(n.GenerateXML(_xmlDoc));
    }
    _xmlDoc.Save(filePath);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
812
5
Gpt3D_Clone812_5.cs 1 11
Gpt3D_Clone812_5.cs 12 24
----------------------------------------

public void GenereateSettingsFile (List < Node > nodeList, string filePath) {
    _rootNode.RemoveChild (_userNode);
    _userNode = _xmlDoc.CreateElement ("Display_Settings");
    _rootNode.AppendChild (_userNode);
    foreach (Node n in nodeList) {
        foreach (XmlElement e in n.GenerateXML (_xmlDoc)) {
            _userNode.AppendChild (e);
        }
    }
    _xmlDoc.Save (filePath);
}
----------------------------------------

 public void GenerateSettingsFile (List<Node> nodeList, string filePath) 
{
    if (_userNode != null) 
        _rootNode.ReplaceChild(null, _userNode);
    _userNode = _xmlDoc.CreateElement("Display_Settings");
    _rootNode.AppendChild(_userNode);
    nodeList.ForEach(n => n.GenerateXML(_xmlDoc).ForEach(_userNode.AppendChild));
    _xmlDoc.Save(filePath);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
812
7
Gpt3D_Clone812_7.cs 1 11
Gpt3D_Clone812_7.cs 12 20
----------------------------------------

public void GenereateSettingsFile (List < Node > nodeList, string filePath) {
    _rootNode.RemoveChild (_userNode);
    _userNode = _xmlDoc.CreateElement ("Display_Settings");
    _rootNode.AppendChild (_userNode);
    foreach (Node n in nodeList) {
        foreach (XmlElement e in n.GenerateXML (_xmlDoc)) {
            _userNode.AppendChild (e);
        }
    }
    _xmlDoc.Save (filePath);
}
----------------------------------------

 public void GenerateSettingsFile (List < Node > nodeList, string filePath) {
    _rootNode.ReplaceChild(null, _userNode);
    _userNode = _xmlDoc.CreateElement("Display_Settings");
    _rootNode.AppendChild(_userNode);
    nodeList.ForEach(n => n.GenerateXML(_xmldoc).ForEach(_userNode.AppendChild));
    _xmlDoc.Save(filePath);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
812
8
Gpt3D_Clone812_8.cs 1 11
Gpt3D_Clone812_8.cs 12 20
----------------------------------------

public void GenereateSettingsFile (List < Node > nodeList, string filePath) {
    _rootNode.RemoveChild (_userNode);
    _userNode = _xmlDoc.CreateElement ("Display_Settings");
    _rootNode.AppendChild (_userNode);
    foreach (Node n in nodeList) {
        foreach (XmlElement e in n.GenerateXML (_xmlDoc)) {
            _userNode.AppendChild (e);
        }
    }
    _xmlDoc.Save (filePath);
}
----------------------------------------

 public void GenereateSettingsFile (List < Node > nodeList, string filePath) {
    _userNode?.ParentNode?.RemoveChild (_userNode);
    _userNode = _xmlDoc.CreateElement ("Display_Settings");
    _rootNode.AppendChild (_userNode);
    nodeList.ForEach (n => n.GenerateXML (_xmlDoc).ForEach (_userNode.AppendChild));
    _xmlDoc.Save (filePath);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
818
0
Gpt3D_Clone818_0.cs 1 8
Gpt3D_Clone818_0.cs 9 19
----------------------------------------

private static IEnumerable < Type > GetTypeArguments (Type t, IEnumerable < Type > values) {
    if (t.IsGenericType)
        foreach (var arg in t.GetGenericArguments ())
            values = values.Union (GetTypeArguments (arg, values));
    else
        values = values.Union (new [] {t});
    return values;
}
----------------------------------------

	private static IEnumerable <Type> GetTypeArguments (Type t, IEnumerable <Type> accum) {
    if (t.IsGenericType) {
        accum = accum.Concat(t.GetGenericArguments());
        foreach (var arg in t.GetGenericArguments ())
            accum = GetTypeArguments(arg, accum); 
    } else
        accum = accum.Concat(new []{t});
    return accum; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
819
3
Gpt3D_Clone819_3.cs 1 28
Gpt3D_Clone819_3.cs 29 61
----------------------------------------

public string CreateCacheKey (MethodBase method, params object [] inputs) {
    try {
        var sb = new StringBuilder ();
        if (method.DeclaringType != null) {
            sb.Append (method.DeclaringType.FullName);
        }
        sb.Append (':');
        sb.Append (method.Name);
        TextWriter writer = new StringWriter (sb);
        if (inputs != null) {
            foreach (var input in inputs) {
                sb.Append (':');
                if (input != null) {
                    var inputDateTime = input as DateTime ?;
                    if (inputDateTime.HasValue) {
                        sb.Append (inputDateTime.Value.Ticks);
                    } else {
                        serializer.Serialize (writer, input);
                    }
                }
            }
        }
        return sb.ToString ();
    }
    catch {
        return null;
    }
}
----------------------------------------

 public string CreateCacheKey (MethodBase method, params object [] inputs) {
     try
    {
        var cacheKey = new StringBuilder(method.DeclaringType.FullName + ':' + method.Name);
        if(inputs != null)
        {
            foreach (var input in inputs)
            {
                cacheKey.Append(':');
                if (input != null)
                {
                    if (input is DateTime d)
                        cacheKey.Append(d.Ticks);
                    else
                    {
                        using (var sw = new StringWriter())
                        {
                            serializer.Serialize(sw, input);
                            cacheKey.Append(sw.ToString());
                        }
                    }
                }
            }
        }
        return cacheKey.ToString();
    }
    catch 
    { 
        return null;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
826
0
Gpt3D_Clone826_0.cs 1 9
Gpt3D_Clone826_0.cs 10 41
----------------------------------------

private static string [] SplitIntoChunks (string text, int chunkSize, bool truncateRemaining) {
    string chunk = chunkSize.ToString ();
    string pattern = truncateRemaining ? ".{" + chunk + "}" : ".{1," + chunk + "}";
    string [] chunks = null;
    if (chunkSize > 0 && ! String.IsNullOrEmpty (text))
        chunks = (from Match m in Regex.Matches (text, pattern)
            select m.Value).ToArray ();
    return chunks;
}
----------------------------------------

  private static string [] SplitIntoChunks(string text, int chunkSize, bool truncateRemaining) {
    string[] chunks = null;
    int textLength = text.Length;
    if (chunkSize > 0 && textLength > 0) {
        int numChunks = 0;
        int offset = 0;
        if(!truncateRemaining && textLength % chunkSize > 0)
            numChunks = textLength / chunkSize + 1;
        else
            numChunks = textLength / chunkSize;
        chunks = new string[numChunks];
        while(offset < textLength) {
            string s = "";
            if (textLength - offset > chunkSize)
            {
                s = text.Substring(offset, chunkSize);
            }
            else
            {
                s = text.Substring(offset, textLength - offset);
            } 
            chunks[offset/chunkSize] = s;
            offset += chunkSize;
        }
    }
    return chunks;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
826
1
Gpt3D_Clone826_1.cs 1 9
Gpt3D_Clone826_1.cs 10 50
----------------------------------------

private static string [] SplitIntoChunks (string text, int chunkSize, bool truncateRemaining) {
    string chunk = chunkSize.ToString ();
    string pattern = truncateRemaining ? ".{" + chunk + "}" : ".{1," + chunk + "}";
    string [] chunks = null;
    if (chunkSize > 0 && ! String.IsNullOrEmpty (text))
        chunks = (from Match m in Regex.Matches (text, pattern)
            select m.Value).ToArray ();
    return chunks;
}
----------------------------------------

 private static string [] SplitIntoChunks(string text, int chunkSize, bool truncateRemaining)
{
    string [] chunks = null;
    if (chunkSize > 0 && !string.IsNullOrEmpty(text))
    {
        int offset = 0;
        int position = 0;
        int textLength = text.Length;
        int remain = chunkSize;
        if (truncateRemaining){
            remain = textLength % chunkSize;
        }
        while(position < textLength)
        {
            int length = Math.Min(remain, textLength-position);
            string currentChunk = text.Substring(position, length);
            if(chunks == null)
            {
                chunks = new string[textLength / chunkSize + (remain>0 ? 1 : 0)];
            }
            chunks[offset] = currentChunk;
            offset++;
            position += chunkSize;
            if(chunkSize > remain)
            {
                remain = chunkSize;
            }
        }
    }
 
    return chunks;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
826
2
Gpt3D_Clone826_2.cs 1 9
Gpt3D_Clone826_2.cs 10 36
----------------------------------------

private static string [] SplitIntoChunks (string text, int chunkSize, bool truncateRemaining) {
    string chunk = chunkSize.ToString ();
    string pattern = truncateRemaining ? ".{" + chunk + "}" : ".{1," + chunk + "}";
    string [] chunks = null;
    if (chunkSize > 0 && ! String.IsNullOrEmpty (text))
        chunks = (from Match m in Regex.Matches (text, pattern)
            select m.Value).ToArray ();
    return chunks;
}
----------------------------------------

 private static string [] SplitIntoChunks(string text, int chunkSize, bool truncateRemaining) {
   string[] chunks = null;
   int textLength = text.Length;
   if (chunkSize > 0 && textLength > 0) {
      int numChunks =  textLength / chunkSize;
      int remainingCharacters = textLength % chunkSize;
      List<String> tempChunks = new List<String>();
      if (truncateRemaining)
          remainingCharacters = 0;
      for (int i = 0; i < numChunks; i++) {
         string subString = text.Substring(i * chunkSize, chunkSize);
         tempChunks.Add(subString);
      }
      if (remainingCharacters > 0) {
         string lastChunk = text.Substring((numChunks) * chunkSize, remainingCharacters);
         chunks[numChunks] = lastChunk;
      }
      chunks = tempChunks.ToArray();
   }
  
   return chunks;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
826
3
Gpt3D_Clone826_3.cs 1 9
Gpt3D_Clone826_3.cs 10 37
----------------------------------------

private static string [] SplitIntoChunks (string text, int chunkSize, bool truncateRemaining) {
    string chunk = chunkSize.ToString ();
    string pattern = truncateRemaining ? ".{" + chunk + "}" : ".{1," + chunk + "}";
    string [] chunks = null;
    if (chunkSize > 0 && ! String.IsNullOrEmpty (text))
        chunks = (from Match m in Regex.Matches (text, pattern)
            select m.Value).ToArray ();
    return chunks;
}
----------------------------------------

 private static string [] SplitIntoChunks(string text, int chunkSize, bool truncateRemaining) {
   string [] chunks = null;
   int textLength = text.Length;
   if (chunkSize > 0 && textLength > 0) {
      int numChunks =  textLength / chunkSize;
      int remainingCharacters = textLength % chunkSize;
      if (truncateRemaining) {
         numChunks += 1;
         remainingCharacters = 0;
      }
      chunks = new string[numChunks];
      for (int i = 0; i < numChunks - 1; i++) {
         string subString = text.Substring(i * chunkSize, chunkSize);
         chunks[i] = subString;
      }
      string lastChunk = text.Substring((numChunks - 1) * chunkSize, remainingCharacters);
      chunks[numChunks - 1] = lastChunk;
   }
   return chunks;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
826
4
Gpt3D_Clone826_4.cs 1 9
Gpt3D_Clone826_4.cs 10 35
----------------------------------------

private static string [] SplitIntoChunks (string text, int chunkSize, bool truncateRemaining) {
    string chunk = chunkSize.ToString ();
    string pattern = truncateRemaining ? ".{" + chunk + "}" : ".{1," + chunk + "}";
    string [] chunks = null;
    if (chunkSize > 0 && ! String.IsNullOrEmpty (text))
        chunks = (from Match m in Regex.Matches (text, pattern)
            select m.Value).ToArray ();
    return chunks;
}
----------------------------------------

 private static string [] SplitIntoChunks(string text, int chunkSize, bool truncateRemaining) {
   int textLength = text.Length;
   if (chunkSize <= 0 || textLength == 0)
      return null;
   int numChunks =  textLength / chunkSize;
   int remainingCharacters = textLength % chunkSize;
   int length = truncateRemaining ? chunkSize : remainingCharacters;
   string[] chunks = new string[numChunks + (remainingCharacters > 0 ? 1 : 0)];
   for (int i = 0; i < numChunks; i++) {
      string subString = text.Substring(i * chunkSize, chunkSize);
      chunks[i] = subString;
   }
   if (remainingCharacters > 0) {
      string lastChunk = text.Substring((numChunks) * chunkSize, (truncateRemaining ? chunkSize : remainingCharacters));
      chunks[numChunks] = lastChunk;
   }
   return chunks;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
827
1
Gpt3D_Clone827_1.cs 1 11
Gpt3D_Clone827_1.cs 12 24
----------------------------------------

void webBrowser1_DocumentCompleted (object sender, WebBrowserDocumentCompletedEventArgs e) {
    foreach (HtmlElement element in webBrowser1.Document.GetElementsByTagName ("button")) {
        if (element.GetAttribute ("ClassName") == "mybtn") {
            Point controlLoc = this.PointToScreen (webBrowser1.Location);
            controlLoc.X = controlLoc.X + element.OffsetRectangle.Left;
            controlLoc.Y = controlLoc.Y + element.OffsetRectangle.Top;
            Cursor.Position = controlLoc;
            MouseSimulator.ClickRightMouseButton ();
        }
    }
}
----------------------------------------

void webBrowser1_DocumentCompleted (object sender, WebBrowserDocumentCompletedEventArgs e) {
    foreach (HtmlElement element in webBrowser1.Document.GetElementsByTagName ("button")) {
        if (element.GetAttribute ("ClassName") == "mybtn") {
            this.Cursor = new Cursor(Cursor.Current.Handle);
            Cursor.Position = webBrowser1.PointToClient(Cursor.Position);
            webBrowser1.DoDragDrop(element.OffsetRectangle, DragDropEffects.Move);
            MouseSimulator.ClickRightMouseButton ();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
828
0
Gpt3D_Clone828_0.cs 1 11
Gpt3D_Clone828_0.cs 12 27
----------------------------------------

private void ImplementLongRunningOperation () {
    int id;
    string name;
    Task.Factory.StartNew (() => {
        id = 42;
        name = "Jonh Doe";
    }).ContinueWith (t => {
        label1.Text = id.ToString ();
        label2.Text = name;
    }, TaskScheduler.FromSynchronizationContext);
}
----------------------------------------

 private void ImplementLongRunningOperation () {
    int id;
    string name;
    var bw = new BackgroundWorker();
    bw.DoWork += (sender, e) => {
        e.Result = new { Id = 42, Name = "John Doe" };
    };
    bw.RunWorkerCompleted += (sender, e) => {
        var result = (dynamic) e.Result;
        label1.Text = result.Id.ToString();
        label2.Text = result.Name;
    };
    bw.RunWorkerAsync();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
829
3
Gpt3D_Clone829_3.cs 1 10
Gpt3D_Clone829_3.cs 11 22
----------------------------------------

void initialize () {
    ConcurrentQueue < string > queue = new ConcurrentQueue < string > ();
    foreach (string url in websites) {
        queue.Enqueue (url);
    }
    List < Thread > threads = new List < Thread > ();
    for (int i = 0; i < threadCountFromTheUser; i ++) {
        threads.Add (new Thread (work));
    }
}
----------------------------------------

  void initialize () {
    ConcurrentQueue<string> queue = new ConcurrentQueue<string>();
    Parallel.ForEach (websites, url => {
        queue.Enqueue(url);
    });
    Thread[] threads = new Thread[threadCountFromTheUser];
    for (int i = 0;i < threadCountFromTheUser; i ++) {
        threads[i] = new Thread (work);
    }  
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
82
0
Gpt3D_Clone82_0.cs 1 68
Gpt3D_Clone82_0.cs 69 183
----------------------------------------

static int CharToValue (char c) {
    char cl = char.ToLower (c);
    if (cl == 'a')
        return 0;
    if (cl == 'b')
        return 1;
    if (cl == 'c')
        return 2;
    if (cl == 'd')
        return 3;
    if (cl == 'e')
        return 4;
    if (cl == 'f')
        return 5;
    if (cl == 'g')
        return 6;
    if (cl == 'h')
        return 7;
    if (cl == 'i')
        return 8;
    if (cl == 'j')
        return 9;
    if (cl == 'k')
        return 10;
    if (cl == 'l')
        return 11;
    if (cl == 'm')
        return 12;
    if (cl == 'n')
        return 13;
    if (cl == 'o')
        return 14;
    if (cl == 'p')
        return 15;
    if (cl == 'q')
        return 16;
    if (cl == 'r')
        return 17;
    if (cl == 's')
        return 18;
    if (cl == 't')
        return 19;
    if (cl == 'u')
        return 20;
    if (cl == 'v')
        return 21;
    if (cl == 'w')
        return 22;
    if (cl == 'x')
        return 23;
    if (cl == 'y')
        return 24;
    if (cl == 'z')
        return 25;
    if (cl == '2')
        return 26;
    if (cl == '3')
        return 27;
    if (cl == '4')
        return 28;
    if (cl == '5')
        return 29;
    if (cl == '6')
        return 30;
    if (cl == '7')
        return 31;
    throw new Exception ("Not a base32 string");
}
----------------------------------------

 
static int CharToValue(char c)
{
    char cl = char.ToLower(c);
    int value = -1;
    switch(cl)
    {
        case 'a':
            value = 0;
            break;
        case 'b':
            value = 1;
            break;
        case 'c':
            value = 2;
            break;
        case 'd':
            value = 3;
            break;
        case 'e':
            value = 4;
            break;
        case 'f':
            value = 5;
            break;
        case 'g':
            value = 6;
            break;
        case 'h':
            value = 7;
            break;
        case 'i':
            value = 8;
            break;
        case 'j':
            value = 9;
            break;
        case 'k':
            value = 10;
            break;
        case 'l':
            value = 11;
            break;
        case 'm':
            value = 12;
            break;
        case 'n':
            value = 13;
            break;
        case 'o':
            value = 14;
            break;
        case 'p':
            value = 15;
            break;
        case 'q':
            value = 16;
            break;
        case 'r':
            value = 17;
            break;
        case 's':
            value = 18;
            break;
        case 't':
            value = 19;
            break;
        case 'u':
            value = 20;
            break;
        case 'v':
            value = 21;
            break;
        case 'w':
            value = 22;
            break;
        case 'x':
            value = 23;
            break;
        case 'y':
            value = 24;
            break;
        case 'z':
            value = 25;
            break;
        case '2':
            value = 26;
            break;
        case '3':
            value = 27;
            break;
        case '4':
           value = 28;
            break;
        case '5':
            value = 29;
            break;
        case '6':
            value = 30;
            break;
        case '7':
            value = 31;
            break;
    }
    if (value == -1)
    {
        throw new Exception("Not a base32 string");
    }
    return value;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
82
1
Gpt3D_Clone82_1.cs 1 68
Gpt3D_Clone82_1.cs 69 144
----------------------------------------

static int CharToValue (char c) {
    char cl = char.ToLower (c);
    if (cl == 'a')
        return 0;
    if (cl == 'b')
        return 1;
    if (cl == 'c')
        return 2;
    if (cl == 'd')
        return 3;
    if (cl == 'e')
        return 4;
    if (cl == 'f')
        return 5;
    if (cl == 'g')
        return 6;
    if (cl == 'h')
        return 7;
    if (cl == 'i')
        return 8;
    if (cl == 'j')
        return 9;
    if (cl == 'k')
        return 10;
    if (cl == 'l')
        return 11;
    if (cl == 'm')
        return 12;
    if (cl == 'n')
        return 13;
    if (cl == 'o')
        return 14;
    if (cl == 'p')
        return 15;
    if (cl == 'q')
        return 16;
    if (cl == 'r')
        return 17;
    if (cl == 's')
        return 18;
    if (cl == 't')
        return 19;
    if (cl == 'u')
        return 20;
    if (cl == 'v')
        return 21;
    if (cl == 'w')
        return 22;
    if (cl == 'x')
        return 23;
    if (cl == 'y')
        return 24;
    if (cl == 'z')
        return 25;
    if (cl == '2')
        return 26;
    if (cl == '3')
        return 27;
    if (cl == '4')
        return 28;
    if (cl == '5')
        return 29;
    if (cl == '6')
        return 30;
    if (cl == '7')
        return 31;
    throw new Exception ("Not a base32 string");
}
----------------------------------------

 static int CharToValue(char c)
{
    char cl = char.ToLower(c);
    int value = 0;
    if (cl == 'a')
        value = 0;
    else if (cl == 'b')
        value = 1;
    else if (cl == 'c')
        value = 2;
    else if (cl == 'd')
        value = 3;
    else if (cl == 'e')
        value = 4;
    else if (cl == 'f')
        value = 5;
    else if (cl == 'g')
        value = 6;
    else if (cl == 'h')
        value = 7;
    else if (cl == 'i')
        value = 8;
    else if (cl == 'j')
        value = 9;
    else if (cl == 'k')
        value = 10;
    else if (cl == 'l')
        value = 11;
    else if (cl == 'm')
        value = 12;
    else if (cl == 'n')
        value = 13;
    else if (cl == 'o')
        value = 14;
    else if (cl == 'p')
        value = 15;
    else if (cl == 'q')
        value = 16;
    else if (cl == 'r')
        value = 17;
    else if (cl == 's')
        value = 18;
    else if (cl == 't')
        value = 19;
    else if (cl == 'u')
        value = 20;
    else if (cl == 'v')
        value = 21;
    else if (cl == 'w')
        value = 22;
    else if (cl == 'x')
        value = 23;
    else if (cl == 'y')
        value = 24;
    else if (cl == 'z')
        value = 25;
    else if (cl == '2')
        value = 26;
    else if (cl == '3')
        value = 27;
    else if (cl == '4')
        value = 28;
    else if (cl == '5')
        value = 29;
    else if (cl == '6')
        value = 30;
    else if (cl == '7')
        value = 31;
    else
        throw new Exception("Not a base32 string");
    return value;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
82
2
Gpt3D_Clone82_2.cs 1 68
Gpt3D_Clone82_2.cs 69 144
----------------------------------------

static int CharToValue (char c) {
    char cl = char.ToLower (c);
    if (cl == 'a')
        return 0;
    if (cl == 'b')
        return 1;
    if (cl == 'c')
        return 2;
    if (cl == 'd')
        return 3;
    if (cl == 'e')
        return 4;
    if (cl == 'f')
        return 5;
    if (cl == 'g')
        return 6;
    if (cl == 'h')
        return 7;
    if (cl == 'i')
        return 8;
    if (cl == 'j')
        return 9;
    if (cl == 'k')
        return 10;
    if (cl == 'l')
        return 11;
    if (cl == 'm')
        return 12;
    if (cl == 'n')
        return 13;
    if (cl == 'o')
        return 14;
    if (cl == 'p')
        return 15;
    if (cl == 'q')
        return 16;
    if (cl == 'r')
        return 17;
    if (cl == 's')
        return 18;
    if (cl == 't')
        return 19;
    if (cl == 'u')
        return 20;
    if (cl == 'v')
        return 21;
    if (cl == 'w')
        return 22;
    if (cl == 'x')
        return 23;
    if (cl == 'y')
        return 24;
    if (cl == 'z')
        return 25;
    if (cl == '2')
        return 26;
    if (cl == '3')
        return 27;
    if (cl == '4')
        return 28;
    if (cl == '5')
        return 29;
    if (cl == '6')
        return 30;
    if (cl == '7')
        return 31;
    throw new Exception ("Not a base32 string");
}
----------------------------------------

 
static int CharToValue(char c)
{
    char cl = char.ToLower(c);
    switch(cl)
    {
        case 'a':
            return 0;
        case 'b':
            return 1;
        case 'c':
            return 2;
        case 'd':
            return 3;
        case 'e':
            return 4;
        case 'f':
            return 5;
        case 'g':
            return 6;
        case 'h':
            return 7;
        case 'i':
            return 8;
        case 'j':
            return 9;
        case 'k':
            return 10;
        case 'l':
            return 11;
        case 'm':
            return 12;
        case 'n':
            return 13;
        case 'o':
            return 14;
        case 'p':
            return 15;
        case 'q':
            return 16;
        case 'r':
            return 17;
        case 's':
            return 18;
        case 't':
            return 19;
        case 'u':
            return 20;
        case 'v':
            return 21;
        case 'w':
            return 22;
        case 'x':
            return 23;
        case 'y':
            return 24;
        case 'z':
            return 25;
        case '2':
            return 26;
        case '3':
            return 27;
        case '4':
            return 28;
        case '5':
            return 29;
        case '6':
            return 30;
        case '7':
            return 31;
        default:
            throw new Exception("Not a base32 string");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
82
3
Gpt3D_Clone82_3.cs 1 68
Gpt3D_Clone82_3.cs 69 118
----------------------------------------

static int CharToValue (char c) {
    char cl = char.ToLower (c);
    if (cl == 'a')
        return 0;
    if (cl == 'b')
        return 1;
    if (cl == 'c')
        return 2;
    if (cl == 'd')
        return 3;
    if (cl == 'e')
        return 4;
    if (cl == 'f')
        return 5;
    if (cl == 'g')
        return 6;
    if (cl == 'h')
        return 7;
    if (cl == 'i')
        return 8;
    if (cl == 'j')
        return 9;
    if (cl == 'k')
        return 10;
    if (cl == 'l')
        return 11;
    if (cl == 'm')
        return 12;
    if (cl == 'n')
        return 13;
    if (cl == 'o')
        return 14;
    if (cl == 'p')
        return 15;
    if (cl == 'q')
        return 16;
    if (cl == 'r')
        return 17;
    if (cl == 's')
        return 18;
    if (cl == 't')
        return 19;
    if (cl == 'u')
        return 20;
    if (cl == 'v')
        return 21;
    if (cl == 'w')
        return 22;
    if (cl == 'x')
        return 23;
    if (cl == 'y')
        return 24;
    if (cl == 'z')
        return 25;
    if (cl == '2')
        return 26;
    if (cl == '3')
        return 27;
    if (cl == '4')
        return 28;
    if (cl == '5')
        return 29;
    if (cl == '6')
        return 30;
    if (cl == '7')
        return 31;
    throw new Exception ("Not a base32 string");
}
----------------------------------------

static int CharToValue(char c)
{
    char cl = char.ToLower(c);
    Dictionary<char, int> dictLookup = new Dictionary<char, int>();
    dictLookup.Add('a', 0);
    dictLookup.Add('b', 1);
    dictLookup.Add('c', 2);
    dictLookup.Add('d', 3);
    dictLookup.Add('e', 4);
    dictLookup.Add('f', 5);
    dictLookup.Add('g', 6);
    dictLookup.Add('h', 7);
    dictLookup.Add('i', 8);
    dictLookup.Add('j', 9);
    dictLookup.Add('k', 10);
    dictLookup.Add('l', 11);
    dictLookup.Add('m', 12);
    dictLookup.Add('n', 13);
    dictLookup.Add('o', 14);
    dictLookup.Add('p', 15);
    dictLookup.Add('q', 16);
    dictLookup.Add('r', 17);
    dictLookup.Add('s', 18);
    dictLookup.Add('t', 19);
    dictLookup.Add('u', 20);
    dictLookup.Add('v', 21);
    dictLookup.Add('w', 22);
    dictLookup.Add('x', 23);
    dictLookup.Add('y', 24);
    dictLookup.Add('z', 25);
    dictLookup.Add('2', 26);
    dictLookup.Add('3', 27);
    dictLookup.Add('4', 28);
    dictLookup.Add('5', 29);
    dictLookup.Add('6', 30);
    dictLookup.Add('7', 31);
    if (dictLookup.ContainsKey(cl))
    {
        return dictLookup[cl];
    }
    else
    {
        throw new Exception("Not a base32 string");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
82
4
Gpt3D_Clone82_4.cs 1 68
Gpt3D_Clone82_4.cs 69 86
----------------------------------------

static int CharToValue (char c) {
    char cl = char.ToLower (c);
    if (cl == 'a')
        return 0;
    if (cl == 'b')
        return 1;
    if (cl == 'c')
        return 2;
    if (cl == 'd')
        return 3;
    if (cl == 'e')
        return 4;
    if (cl == 'f')
        return 5;
    if (cl == 'g')
        return 6;
    if (cl == 'h')
        return 7;
    if (cl == 'i')
        return 8;
    if (cl == 'j')
        return 9;
    if (cl == 'k')
        return 10;
    if (cl == 'l')
        return 11;
    if (cl == 'm')
        return 12;
    if (cl == 'n')
        return 13;
    if (cl == 'o')
        return 14;
    if (cl == 'p')
        return 15;
    if (cl == 'q')
        return 16;
    if (cl == 'r')
        return 17;
    if (cl == 's')
        return 18;
    if (cl == 't')
        return 19;
    if (cl == 'u')
        return 20;
    if (cl == 'v')
        return 21;
    if (cl == 'w')
        return 22;
    if (cl == 'x')
        return 23;
    if (cl == 'y')
        return 24;
    if (cl == 'z')
        return 25;
    if (cl == '2')
        return 26;
    if (cl == '3')
        return 27;
    if (cl == '4')
        return 28;
    if (cl == '5')
        return 29;
    if (cl == '6')
        return 30;
    if (cl == '7')
        return 31;
    throw new Exception ("Not a base32 string");
}
----------------------------------------

 static int CharToValue(char c) 
{
    char cl = char.ToLower(c);
    for (int i = 0; i < 26; i++)
    {
        if (cl == (char)('a' + i)) return i;
    }
    for (int i = 0; i < 5; i++)
    {
        if (cl == (char)('2' + i)) return i + 26;
    }
    throw new Exception("Not a base32 string");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
82
5
Gpt3D_Clone82_5.cs 1 68
Gpt3D_Clone82_5.cs 69 86
----------------------------------------

static int CharToValue (char c) {
    char cl = char.ToLower (c);
    if (cl == 'a')
        return 0;
    if (cl == 'b')
        return 1;
    if (cl == 'c')
        return 2;
    if (cl == 'd')
        return 3;
    if (cl == 'e')
        return 4;
    if (cl == 'f')
        return 5;
    if (cl == 'g')
        return 6;
    if (cl == 'h')
        return 7;
    if (cl == 'i')
        return 8;
    if (cl == 'j')
        return 9;
    if (cl == 'k')
        return 10;
    if (cl == 'l')
        return 11;
    if (cl == 'm')
        return 12;
    if (cl == 'n')
        return 13;
    if (cl == 'o')
        return 14;
    if (cl == 'p')
        return 15;
    if (cl == 'q')
        return 16;
    if (cl == 'r')
        return 17;
    if (cl == 's')
        return 18;
    if (cl == 't')
        return 19;
    if (cl == 'u')
        return 20;
    if (cl == 'v')
        return 21;
    if (cl == 'w')
        return 22;
    if (cl == 'x')
        return 23;
    if (cl == 'y')
        return 24;
    if (cl == 'z')
        return 25;
    if (cl == '2')
        return 26;
    if (cl == '3')
        return 27;
    if (cl == '4')
        return 28;
    if (cl == '5')
        return 29;
    if (cl == '6')
        return 30;
    if (cl == '7')
        return 31;
    throw new Exception ("Not a base32 string");
}
----------------------------------------

 static int CharToValue(char c)
{
    char cl = char.ToLower(c);
    if (cl >= 'a' && cl <= 'z')
    {
        return cl - 'a';
    }
    else if (cl >= '2' && cl <= '7')
    {
        return cl - '2' + 26;
    }
    else
    {
        throw new Exception("Not a base32 string");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
82
6
Gpt3D_Clone82_6.cs 1 68
Gpt3D_Clone82_6.cs 69 83
----------------------------------------

static int CharToValue (char c) {
    char cl = char.ToLower (c);
    if (cl == 'a')
        return 0;
    if (cl == 'b')
        return 1;
    if (cl == 'c')
        return 2;
    if (cl == 'd')
        return 3;
    if (cl == 'e')
        return 4;
    if (cl == 'f')
        return 5;
    if (cl == 'g')
        return 6;
    if (cl == 'h')
        return 7;
    if (cl == 'i')
        return 8;
    if (cl == 'j')
        return 9;
    if (cl == 'k')
        return 10;
    if (cl == 'l')
        return 11;
    if (cl == 'm')
        return 12;
    if (cl == 'n')
        return 13;
    if (cl == 'o')
        return 14;
    if (cl == 'p')
        return 15;
    if (cl == 'q')
        return 16;
    if (cl == 'r')
        return 17;
    if (cl == 's')
        return 18;
    if (cl == 't')
        return 19;
    if (cl == 'u')
        return 20;
    if (cl == 'v')
        return 21;
    if (cl == 'w')
        return 22;
    if (cl == 'x')
        return 23;
    if (cl == 'y')
        return 24;
    if (cl == 'z')
        return 25;
    if (cl == '2')
        return 26;
    if (cl == '3')
        return 27;
    if (cl == '4')
        return 28;
    if (cl == '5')
        return 29;
    if (cl == '6')
        return 30;
    if (cl == '7')
        return 31;
    throw new Exception ("Not a base32 string");
}
----------------------------------------

 static int CharToValue(char c) 
{
    char cl = char.ToLower(c);
    int[] valueMap = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31};
    char[] charMap = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '2', '3', '4', '5', '6', '7'};
    
    for (int i = 0; i < charMap.Length; i++)
    {
        if (cl == charMap[i]) return valueMap[i];
    }
    
    throw new Exception("Not a base32 string");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
830
1
Gpt3D_Clone830_1.cs 1 11
Gpt3D_Clone830_1.cs 12 27
----------------------------------------

public static void Main (string [] args) {
    List < Demo > all = new List < Demo > ();
    all.Add (new Demo {Name = "a"});
    all.Add (new Demo {Name = "ab"});
    all.Add (new Demo {Name = "abc"});
    all.Add (new Demo {Name = "cba"});
    all.Add (new Demo {Name = "bac"});
    all.Add (new Demo {Name = "ddd"});
    var t = Filter (all, "Name", "a");
    Console.WriteLine (t.Count);
}
----------------------------------------

 public static void Exec(string[] args)
{
    IList<Demo> listOfDemos = new List<Demo>(){
        new Demo {Name="a"},
        new Demo {Name="ab"},
        new Demo {Name="abc"},
        new Demo {Name="cba"},
        new Demo {Name="bac"},
        new Demo {Name="ddd"}
    };
    var t = Filter(listOfDemos, "Name", "a");
    Console.WriteLine(t.Count);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
830
2
Gpt3D_Clone830_2.cs 1 11
Gpt3D_Clone830_2.cs 12 28
----------------------------------------

public static void Main (string [] args) {
    List < Demo > all = new List < Demo > ();
    all.Add (new Demo {Name = "a"});
    all.Add (new Demo {Name = "ab"});
    all.Add (new Demo {Name = "abc"});
    all.Add (new Demo {Name = "cba"});
    all.Add (new Demo {Name = "bac"});
    all.Add (new Demo {Name = "ddd"});
    var t = Filter (all, "Name", "a");
    Console.WriteLine (t.Count);
}
----------------------------------------

 public static void Process(string[] args)
{
     List<Demo> dList = new List<Demo> {
          new Demo {Name="a"},
          new Demo {Name="ab"},
          new Demo {Name="abc"},
          new Demo {Name="cba"},
          new Demo {Name="bac"},
          new Demo {Name= "ddd"}
     };
     var t = Filter(dList, "Name", "a");
     Console.WriteLine(t.Count);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
830
3
Gpt3D_Clone830_3.cs 1 11
Gpt3D_Clone830_3.cs 12 27
----------------------------------------

public static void Main (string [] args) {
    List < Demo > all = new List < Demo > ();
    all.Add (new Demo {Name = "a"});
    all.Add (new Demo {Name = "ab"});
    all.Add (new Demo {Name = "abc"});
    all.Add (new Demo {Name = "cba"});
    all.Add (new Demo {Name = "bac"});
    all.Add (new Demo {Name = "ddd"});
    var t = Filter (all, "Name", "a");
    Console.WriteLine (t.Count);
}
----------------------------------------

 public static void Main(string[] args)
{
     var filters = new List<Demo> {
         new Demo{Name="a"},
         new Demo{Name="ab"},
         new Demo{Name="abc"},
         new Demo{Name="cba"},
         new Demo{Name = "bac"},
         new Demo{Name = "ddd"}
     };
     var t = Filter(filters, "Name", "a");
     Console.WriteLine(t.Count);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
830
4
Gpt3D_Clone830_4.cs 1 11
Gpt3D_Clone830_4.cs 12 28
----------------------------------------

public static void Main (string [] args) {
    List < Demo > all = new List < Demo > ();
    all.Add (new Demo {Name = "a"});
    all.Add (new Demo {Name = "ab"});
    all.Add (new Demo {Name = "abc"});
    all.Add (new Demo {Name = "cba"});
    all.Add (new Demo {Name = "bac"});
    all.Add (new Demo {Name = "ddd"});
    var t = Filter (all, "Name", "a");
    Console.WriteLine (t.Count);
}
----------------------------------------

 public static void Start(string[] args)
{
     List<Demo> allDemos = new List<Demo>(){
          new Demo {Name="a"},
          new Demo {Name="ab"},
          new Demo {Name="abc"},
          new Demo {Name="cba"},
          new Demo {Name="bac"},
          new Demo {Name="ddd"}
     };
     var t = Filter(allDemos, "Name", "a");
     Console.WriteLine(t.Count);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
830
5
Gpt3D_Clone830_5.cs 1 11
Gpt3D_Clone830_5.cs 12 27
----------------------------------------

public static void Main (string [] args) {
    List < Demo > all = new List < Demo > ();
    all.Add (new Demo {Name = "a"});
    all.Add (new Demo {Name = "ab"});
    all.Add (new Demo {Name = "abc"});
    all.Add (new Demo {Name = "cba"});
    all.Add (new Demo {Name = "bac"});
    all.Add (new Demo {Name = "ddd"});
    var t = Filter (all, "Name", "a");
    Console.WriteLine (t.Count);
}
----------------------------------------

  public static void RunMain(string[] args)
{
    List<Demo> data = new List<Demo> {
         new Demo {Name = "a"},
         new Demo {Name = "ab"},
         new Demo {Name = "abc"},
         new Demo {Name = "cba"},
         new Demo {Name = "bac"},
         new Demo {Name = "ddd"}
    };
    var t = Filter(data, "Name", "a");
    Console.WriteLine(t.Count);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
830
6
Gpt3D_Clone830_6.cs 1 11
Gpt3D_Clone830_6.cs 12 27
----------------------------------------

public static void Main (string [] args) {
    List < Demo > all = new List < Demo > ();
    all.Add (new Demo {Name = "a"});
    all.Add (new Demo {Name = "ab"});
    all.Add (new Demo {Name = "abc"});
    all.Add (new Demo {Name = "cba"});
    all.Add (new Demo {Name = "bac"});
    all.Add (new Demo {Name = "ddd"});
    var t = Filter (all, "Name", "a");
    Console.WriteLine (t.Count);
}
----------------------------------------

 public static void Run(string[] args){
      List<Demo> dataGrp = new List<Demo>{
           new Demo{Name="a"},
           new Demo{Name="ab"},
           new Demo{Name="abc"},
           new Demo{Name="cba"},
           new Demo{Name="bac"},
           new Demo{Name="ddd"}
      };
      var t = Filter(dataGrp, "Name", "a");
      Console.WriteLine(t.Count);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
830
7
Gpt3D_Clone830_7.cs 1 11
Gpt3D_Clone830_7.cs 12 28
----------------------------------------

public static void Main (string [] args) {
    List < Demo > all = new List < Demo > ();
    all.Add (new Demo {Name = "a"});
    all.Add (new Demo {Name = "ab"});
    all.Add (new Demo {Name = "abc"});
    all.Add (new Demo {Name = "cba"});
    all.Add (new Demo {Name = "bac"});
    all.Add (new Demo {Name = "ddd"});
    var t = Filter (all, "Name", "a");
    Console.WriteLine (t.Count);
}
----------------------------------------

 public static void Main (string[] args)
{
     List<Demo> demoCollection = new List<Demo>
     {
          new Demo {Name="a"},
          new Demo {Name="ab"},
          new Demo {Name="abc"},
          new Demo {Name="cba"},
          new Demo {Name="bac"},
          new Demo {Name="ddd"}
     };
     var returnedCollection = Filter(demoCollection, "Name", "a");
     Console.WriteLine(returnedCollection.Count);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
830
8
Gpt3D_Clone830_8.cs 1 11
Gpt3D_Clone830_8.cs 12 27
----------------------------------------

public static void Main (string [] args) {
    List < Demo > all = new List < Demo > ();
    all.Add (new Demo {Name = "a"});
    all.Add (new Demo {Name = "ab"});
    all.Add (new Demo {Name = "abc"});
    all.Add (new Demo {Name = "cba"});
    all.Add (new Demo {Name = "bac"});
    all.Add (new Demo {Name = "ddd"});
    var t = Filter (all, "Name", "a");
    Console.WriteLine (t.Count);
}
----------------------------------------

 public static void Running(string[] args)
{
     List<Demo> collection = new List<Demo> {
        new Demo {Name="a"},
        new Demo {Name="ab"},
        new Demo {Name="abc"},
        new Demo {Name="cba"},
        new Demo {Name="bac"},
        new Demo {Name ="ddd"}
     };
     var t = Filter(collection, "Name", "a");
     Console.WriteLine(t.Count);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
831
0
Gpt3D_Clone831_0.cs 1 15
Gpt3D_Clone831_0.cs 16 77
----------------------------------------

public Control FindControl (Control root, string name) {
    if (root == null)
        throw new ArgumentNullException ("root");
    var stack = new Stack < Control > ();
    stack.Push (root);
    while (stack.Count > 0) {
        Control item = stack.Pop ();
        if (item.Name == name)
            return item;
        foreach (Control child in item.Controls) {
            stack.Push (child);
        }
    }
    return null;
}
----------------------------------------

 public Control FindControl(Control root, string name)  
{  
    if (root == null)  
        throw new ArgumentNullException("root");  
    HashSet<Control> set = new HashSet<Control>();  
    set.Add(root);  
    while (set.Count > 0)  
    {  
        Control item = set.ToList()[0];  
        set.Remove(item);  
        if (item.Name == name)  
            return item;  
        foreach (Control control in item.Controls)  
        {  
           set.Add(control);  
        }  
    }  
    return null;  
}  
 public Control FindControl(Control root, string name)  
{  
    if (root == null)  
        throw new ArgumentNullException("root");  
    SortedSet<Control> set = new SortedSet<Control>();  
    set.Add(root);  
    while (set.Count > 0)  
    {  
        Control item = set.ToList()[0];  
        set.Remove(item);  
        if (item.Name == name)  
            return item;  
        foreach (Control control in item.Controls)  
        {  
           set.Add(control);  
        }  
    }  
    return null;  
}  
 public Control FindControl(Control root, string name)
{
    if (root == null)
        throw new ArgumentNullException("root");
    SortedList<int, Control> list = new SortedList<int, Control>();
    list.Add(0, root);
    int index = 0;
    while (index < list.Count)
    {
        Control item = list[index];
        index++;
        if (item.Name == name)
            return item;
        foreach (Control control in item.Controls)
        {
           list.Add(index, control);
        }
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
842
0
Gpt3D_Clone842_0.cs 1 23
Gpt3D_Clone842_0.cs 24 46
----------------------------------------

static void LoadDefaultValues () {
    var settingsDict = new NSDictionary (NSBundle.MainBundle.PathForResource ("Settings.bundle/Root.plist", null));
    if (settingsDict != null) {
        var prefSpecifierArray = settingsDict [(NSString) "PreferenceSpecifiers"] as NSArray;
        if (prefSpecifierArray != null) {
            foreach (var prefItem in NSArray.FromArray < NSDictionary > (prefSpecifierArray)) {
                var key = prefItem [(NSString) "Key"] as NSString;
                if (key == null)
                    continue;
                var value = prefItem [(NSString) "DefaultValue"];
                if (value == null)
                    continue;
                switch (key.ToString ()) {
                    case API_PATH_KEY :
                        ApiPath = value.ToString ();
                        break;
                    default :
                        break;
                }
            }
        }
    }
}
----------------------------------------

 static void LoadDefaultValues() 
{ 
    var path = NSBundle.MainBundle.PathForResource("Settings.bundle/Root.plist", null); 
    if (path != null) 
    { 
        var settingsDict = NSDictionary.FromFile(path); 
        var prefSpecifierArray = settingsDict[(NSString)"PreferenceSpecifiers"] as NSArray; 
        if (prefSpecifierArray != null) 
        { 
            for (int i = 0; i < prefSpecifierArray.Count; i++) 
            { 
                NSDictionary prefItem = prefSpecifierArray.GetItem<NSDictionary>(i); 
                NSString key = prefItem[(NSString)"Key"] as NSString; 
                 var value = prefItem[(NSString)"DefaultValue"]; 
                if (key != null && value != null && key.ToString() == API_PATH_KEY) 
                    ApiPath = (String)value; 
            } 
        } 
    } 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
842
1
Gpt3D_Clone842_1.cs 1 23
Gpt3D_Clone842_1.cs 24 45
----------------------------------------

static void LoadDefaultValues () {
    var settingsDict = new NSDictionary (NSBundle.MainBundle.PathForResource ("Settings.bundle/Root.plist", null));
    if (settingsDict != null) {
        var prefSpecifierArray = settingsDict [(NSString) "PreferenceSpecifiers"] as NSArray;
        if (prefSpecifierArray != null) {
            foreach (var prefItem in NSArray.FromArray < NSDictionary > (prefSpecifierArray)) {
                var key = prefItem [(NSString) "Key"] as NSString;
                if (key == null)
                    continue;
                var value = prefItem [(NSString) "DefaultValue"];
                if (value == null)
                    continue;
                switch (key.ToString ()) {
                    case API_PATH_KEY :
                        ApiPath = value.ToString ();
                        break;
                    default :
                        break;
                }
            }
        }
    }
}
----------------------------------------

 
 static void LoadDefaultValues() 
{ 
    NSDictionary settingsDict = NSDictionary.FromFile("Settings.bundle/Root.plist"); 
    if (settingsDict == null) 
        return; 
    var prefSpecifierArray = settingsDict[(NSString)"PreferenceSpecifiers"] as NSArray; 
    if (prefSpecifierArray == null) 
        return; 
    foreach (NSDictionary prefItem in NSArray.FromArray<NSDictionary>(prefSpecifierArray)) 
    { 
        string keyStr = prefItem[(NSString)"Key"] as NSString; 
        var value = prefItem[(NSString)"DefaultValue"]; 
        if (keyStr == API_PATH_KEY) 
            ApiPath = value.ToString(); 
    } 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
842
3
Gpt3D_Clone842_3.cs 1 23
Gpt3D_Clone842_3.cs 24 45
----------------------------------------

static void LoadDefaultValues () {
    var settingsDict = new NSDictionary (NSBundle.MainBundle.PathForResource ("Settings.bundle/Root.plist", null));
    if (settingsDict != null) {
        var prefSpecifierArray = settingsDict [(NSString) "PreferenceSpecifiers"] as NSArray;
        if (prefSpecifierArray != null) {
            foreach (var prefItem in NSArray.FromArray < NSDictionary > (prefSpecifierArray)) {
                var key = prefItem [(NSString) "Key"] as NSString;
                if (key == null)
                    continue;
                var value = prefItem [(NSString) "DefaultValue"];
                if (value == null)
                    continue;
                switch (key.ToString ()) {
                    case API_PATH_KEY :
                        ApiPath = value.ToString ();
                        break;
                    default :
                        break;
                }
            }
        }
    }
}
----------------------------------------

 static void LoadDefaultValues() 
{ 
    NSDictionary settingsDict = NSDictionary.FromFile("Settings.bundle/Root.plist"); 
    if (settingsDict != null) 
    { 
        var prefSpecifierArray = settingsDict[(NSString)"PreferenceSpecifiers"] as NSArray; 
        if (prefSpecifierArray != null) 
        { 
            for (nint i = 0; i < prefSpecifierArray.Count; i++) 
            { 
                NSDictionary prefItem = (NSDictionary)prefSpecifierArray.GetItem<NSObject>(i); 
                NSString key = prefItem[(NSString)"Key"] as NSString; 
                 var value = prefItem[(NSString)"DefaultValue"]; 
                if (key != null && value != null && key.ToString() == API_PATH_KEY) 
                    ApiPath = (String)value; 
            } 
        } 
    } 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
842
4
Gpt3D_Clone842_4.cs 1 23
Gpt3D_Clone842_4.cs 24 45
----------------------------------------

static void LoadDefaultValues () {
    var settingsDict = new NSDictionary (NSBundle.MainBundle.PathForResource ("Settings.bundle/Root.plist", null));
    if (settingsDict != null) {
        var prefSpecifierArray = settingsDict [(NSString) "PreferenceSpecifiers"] as NSArray;
        if (prefSpecifierArray != null) {
            foreach (var prefItem in NSArray.FromArray < NSDictionary > (prefSpecifierArray)) {
                var key = prefItem [(NSString) "Key"] as NSString;
                if (key == null)
                    continue;
                var value = prefItem [(NSString) "DefaultValue"];
                if (value == null)
                    continue;
                switch (key.ToString ()) {
                    case API_PATH_KEY :
                        ApiPath = value.ToString ();
                        break;
                    default :
                        break;
                }
            }
        }
    }
}
----------------------------------------

 
 static void LoadDefaultValues() 
{ 
    NSDictionary settingsDict = NSDictionary.FromFile("Settings.bundle/Root.plist"); 
    if (settingsDict != null) 
    { 
        var prefSpecifierArray = settingsDict[(NSString)"PreferenceSpecifiers"] as NSArray; 
        if (prefSpecifierArray != null) 
        { 
            foreach (NSDictionary prefItem in NSArray.FromArray<NSDictionary>(prefSpecifierArray)) 
            { 
                NSString key = (NSString)prefItem["Key"]; 
                var value = prefItem[(NSString)"DefaultValue"]; 
                if (key != null && value != null && key.ToString() == API_PATH_KEY) 
                    ApiPath = (String)value; 
            } 
        } 
    } 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
842
5
Gpt3D_Clone842_5.cs 1 23
Gpt3D_Clone842_5.cs 24 45
----------------------------------------

static void LoadDefaultValues () {
    var settingsDict = new NSDictionary (NSBundle.MainBundle.PathForResource ("Settings.bundle/Root.plist", null));
    if (settingsDict != null) {
        var prefSpecifierArray = settingsDict [(NSString) "PreferenceSpecifiers"] as NSArray;
        if (prefSpecifierArray != null) {
            foreach (var prefItem in NSArray.FromArray < NSDictionary > (prefSpecifierArray)) {
                var key = prefItem [(NSString) "Key"] as NSString;
                if (key == null)
                    continue;
                var value = prefItem [(NSString) "DefaultValue"];
                if (value == null)
                    continue;
                switch (key.ToString ()) {
                    case API_PATH_KEY :
                        ApiPath = value.ToString ();
                        break;
                    default :
                        break;
                }
            }
        }
    }
}
----------------------------------------

 static void LoadDefaultValues()
{
    NSDictionary settings = NSUserDefaults.StandardUserDefaults.DictionaryForKey(SettingsBundleKey);
    if (settings != null)
    {
        var specifiers = settings[NSUserDefaults.SpecifiersKey] as NSArray;
        if (specifiers != null)
        {
            foreach (NSDictionary prefItem in NSArray.FromArray<NSDictionary>(specifiers))
            {
                NSString key = prefItem[(NSString)"Key"] as NSString; 
                var value = prefItem[(NSString)"DefaultValue"]; 
                if (key != null && value != null && key.ToString() == API_PATH_KEY) 
                    ApiPath = (String)value; 
            }
            
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
842
6
Gpt3D_Clone842_6.cs 1 23
Gpt3D_Clone842_6.cs 24 44
----------------------------------------

static void LoadDefaultValues () {
    var settingsDict = new NSDictionary (NSBundle.MainBundle.PathForResource ("Settings.bundle/Root.plist", null));
    if (settingsDict != null) {
        var prefSpecifierArray = settingsDict [(NSString) "PreferenceSpecifiers"] as NSArray;
        if (prefSpecifierArray != null) {
            foreach (var prefItem in NSArray.FromArray < NSDictionary > (prefSpecifierArray)) {
                var key = prefItem [(NSString) "Key"] as NSString;
                if (key == null)
                    continue;
                var value = prefItem [(NSString) "DefaultValue"];
                if (value == null)
                    continue;
                switch (key.ToString ()) {
                    case API_PATH_KEY :
                        ApiPath = value.ToString ();
                        break;
                    default :
                        break;
                }
            }
        }
    }
}
----------------------------------------

 static void LoadDefaultValues() 
{ 
    NSDictionary settingsDict = NSDictionary.FromPlist("Settings.bundle/Root.plist"); 
    if (settingsDict != null) 
    { 
        NSArray prefSpecifierArray = settingsDict[(NSString)"PreferenceSpecifiers"] as NSArray; 
        if (prefSpecifierArray != null) 
        { 
            foreach (NSDictionary prefItem in NSArray.FromArray<NSDictionary>(prefSpecifierArray)) 
            { 
                NSString key = prefItem[(NSString)"Key"] as NSString; 
                var value = prefItem[(NSString)"DefaultValue"]; 
                if (key != null && value != null && key.ToString() == API_PATH_KEY) 
                    ApiPath = (String)value; 
            } 
        } 
    } 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
842
7
Gpt3D_Clone842_7.cs 1 23
Gpt3D_Clone842_7.cs 24 44
----------------------------------------

static void LoadDefaultValues () {
    var settingsDict = new NSDictionary (NSBundle.MainBundle.PathForResource ("Settings.bundle/Root.plist", null));
    if (settingsDict != null) {
        var prefSpecifierArray = settingsDict [(NSString) "PreferenceSpecifiers"] as NSArray;
        if (prefSpecifierArray != null) {
            foreach (var prefItem in NSArray.FromArray < NSDictionary > (prefSpecifierArray)) {
                var key = prefItem [(NSString) "Key"] as NSString;
                if (key == null)
                    continue;
                var value = prefItem [(NSString) "DefaultValue"];
                if (value == null)
                    continue;
                switch (key.ToString ()) {
                    case API_PATH_KEY :
                        ApiPath = value.ToString ();
                        break;
                    default :
                        break;
                }
            }
        }
    }
}
----------------------------------------

 static void LoadDefaultValues() 
{ 
    NSDictionary settingsDict = NSDictionary.FromPlist("Settings.bundle/Root"); 
    if (settingsDict != null) 
    { 
        NSArray prefSpecifierArray = settingsDict[(NSString)"PreferenceSpecifiers"] as NSArray; 
        if (prefSpecifierArray != null) 
        { 
            foreach (NSDictionary prefItem in NSArray.FromArray<NSDictionary>(prefSpecifierArray)) 
            { 
                NSString key = (NSString)prefItem["Key"]; 
                 var value = prefItem[(NSString)"DefaultValue"]; 
                if (key != null && value != null && key.ToString() == API_PATH_KEY) 
                    ApiPath = (String)value; 
            } 
        } 
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
842
8
Gpt3D_Clone842_8.cs 1 23
Gpt3D_Clone842_8.cs 24 45
----------------------------------------

static void LoadDefaultValues () {
    var settingsDict = new NSDictionary (NSBundle.MainBundle.PathForResource ("Settings.bundle/Root.plist", null));
    if (settingsDict != null) {
        var prefSpecifierArray = settingsDict [(NSString) "PreferenceSpecifiers"] as NSArray;
        if (prefSpecifierArray != null) {
            foreach (var prefItem in NSArray.FromArray < NSDictionary > (prefSpecifierArray)) {
                var key = prefItem [(NSString) "Key"] as NSString;
                if (key == null)
                    continue;
                var value = prefItem [(NSString) "DefaultValue"];
                if (value == null)
                    continue;
                switch (key.ToString ()) {
                    case API_PATH_KEY :
                        ApiPath = value.ToString ();
                        break;
                    default :
                        break;
                }
            }
        }
    }
}
----------------------------------------

 static void LoadDefaultValues() 
{ 
    NSObject[] settingsDict = (NSObject[])NSArray.FromFile("Settings.bundle/Root.plist"); 
    if (settingsDict != null) 
    { 
        foreach (NSObject prefItem in settingsDict) 
        { 
            NSDictionary itemDictionary = prefItem as NSDictionary; 
            if (itemDictionary != null) 
            { 
                NSString key = itemDictionary[(NSString)"Key"] as NSString; 
                var value = itemDictionary[(NSString)"DefaultValue"]; 
                if (key != null && value != null && key.ToString() == API_PATH_KEY) 
                    ApiPath = (String)value; 
            } 
        } 
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
842
9
Gpt3D_Clone842_9.cs 1 23
Gpt3D_Clone842_9.cs 24 42
----------------------------------------

static void LoadDefaultValues () {
    var settingsDict = new NSDictionary (NSBundle.MainBundle.PathForResource ("Settings.bundle/Root.plist", null));
    if (settingsDict != null) {
        var prefSpecifierArray = settingsDict [(NSString) "PreferenceSpecifiers"] as NSArray;
        if (prefSpecifierArray != null) {
            foreach (var prefItem in NSArray.FromArray < NSDictionary > (prefSpecifierArray)) {
                var key = prefItem [(NSString) "Key"] as NSString;
                if (key == null)
                    continue;
                var value = prefItem [(NSString) "DefaultValue"];
                if (value == null)
                    continue;
                switch (key.ToString ()) {
                    case API_PATH_KEY :
                        ApiPath = value.ToString ();
                        break;
                    default :
                        break;
                }
            }
        }
    }
}
----------------------------------------

 static void LoadDefaultValues()
{
    var settingsDict = NSUserDefaults.StandardUserDefaults.DictionaryForKey("Settings.bundle/Root.plist");
    var prefSpecifierArray = settingsDict[(NSString)"PreferenceSpecifiers"] as NSArray;
    if (prefSpecifierArray != null)
    {
        foreach (NSDictionary prefItem in NSArray.FromArray<NSDictionary>(prefSpecifierArray))
        {
            NSString key = (NSString)prefItem["Key"];
            var value = prefItem[(NSString)"DefaultValue"];
            if (key != null && value != null && key.ToString() == API_PATH_KEY)
                ApiPath = (String)value;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
844
0
Gpt3D_Clone844_0.cs 1 14
Gpt3D_Clone844_0.cs 15 34
----------------------------------------

public void FiscalYearRange () {
    TimeCalendar fiscalYearCalendar = new TimeCalendar (new TimeCalendarConfig {YearBaseMonth = YearMonth.April, YearType = YearType.FiscalYear});
    TimeRange timeRange = new TimeRange (new DateTime (2007, 10, 1), new DateTime (2012, 2, 25));
    Console.WriteLine ("Time range: " + timeRange);
    Console.WriteLine ();
    Console.WriteLine ("Start Quarter: " + new Quarter (timeRange.Start, fiscalYearCalendar));
    Console.WriteLine ("End Quarter: " + new Quarter (timeRange.End, fiscalYearCalendar));
    Console.WriteLine ();
    Year year = new Year (timeRange.Start, fiscalYearCalendar);
    while (year.Start < timeRange.End) {
        Console.WriteLine ("Fiscal Year: " + year);
        year = year.GetNextYear ();
    }
}
----------------------------------------

 public void FiscalYearRange() 
{ 
    TimeCalendar fiscalYearCalendar = new TimeCalendar(new TimeCalendarConfig { YearBaseMonth = YearMonth.February, YearType = YearType.FiscalYear }); 
    TimeRange timeRange = new TimeRange(new DateTime(2007, 10, 1), new DateTime(2012, 2, 25)); 
    Console.WriteLine("Time range: " + timeRange); 
    Console.WriteLine(); 
    Console.WriteLine("Start Year: " + timeRange.Start.Year); 
    Console.WriteLine("End Year: " + timeRange.End.Year); 
    Console.WriteLine(); 
    DateTime startDate = timeRange.Start; 
    DateTime endDate = timeRange.End; 
    while (startDate < endDate) 
    { 
        Console.WriteLine("Fiscal Year: " + startDate.Year); 
        startDate = startDate.AddYears(1); 
    } 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
844
1
Gpt3D_Clone844_1.cs 1 14
Gpt3D_Clone844_1.cs 15 32
----------------------------------------

public void FiscalYearRange () {
    TimeCalendar fiscalYearCalendar = new TimeCalendar (new TimeCalendarConfig {YearBaseMonth = YearMonth.April, YearType = YearType.FiscalYear});
    TimeRange timeRange = new TimeRange (new DateTime (2007, 10, 1), new DateTime (2012, 2, 25));
    Console.WriteLine ("Time range: " + timeRange);
    Console.WriteLine ();
    Console.WriteLine ("Start Quarter: " + new Quarter (timeRange.Start, fiscalYearCalendar));
    Console.WriteLine ("End Quarter: " + new Quarter (timeRange.End, fiscalYearCalendar));
    Console.WriteLine ();
    Year year = new Year (timeRange.Start, fiscalYearCalendar);
    while (year.Start < timeRange.End) {
        Console.WriteLine ("Fiscal Year: " + year);
        year = year.GetNextYear ();
    }
}
----------------------------------------

 public void FiscalYearRange() 
{ 
    TimeCalendar fiscalYearCalendar = new TimeCalendar(new TimeCalendarConfig { YearBaseMonth = YearMonth.July, YearType = YearType.FiscalYear}); 
    TimeRange timeRange = new TimeRange(new DateTime(2007, 10, 1), new DateTime(2012, 2, 25)); 
    Console.WriteLine("Time range: " + timeRange); 
    Console.WriteLine(); 
    DateTime startDate = timeRange.Start; 
    while (startDate.Year < timeRange.End.Year) 
    { 
        Year year = new Year(startDate, fiscalYearCalendar); 
        Console.WriteLine("Fiscal Year: " + year); 
        startDate = startDate.AddYears(1); 
    } 
    Console.WriteLine("End Quarter: " + new Quarter(timeRange.End, fiscalYearCalendar)); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
844
4
Gpt3D_Clone844_4.cs 1 14
Gpt3D_Clone844_4.cs 15 32
----------------------------------------

public void FiscalYearRange () {
    TimeCalendar fiscalYearCalendar = new TimeCalendar (new TimeCalendarConfig {YearBaseMonth = YearMonth.April, YearType = YearType.FiscalYear});
    TimeRange timeRange = new TimeRange (new DateTime (2007, 10, 1), new DateTime (2012, 2, 25));
    Console.WriteLine ("Time range: " + timeRange);
    Console.WriteLine ();
    Console.WriteLine ("Start Quarter: " + new Quarter (timeRange.Start, fiscalYearCalendar));
    Console.WriteLine ("End Quarter: " + new Quarter (timeRange.End, fiscalYearCalendar));
    Console.WriteLine ();
    Year year = new Year (timeRange.Start, fiscalYearCalendar);
    while (year.Start < timeRange.End) {
        Console.WriteLine ("Fiscal Year: " + year);
        year = year.GetNextYear ();
    }
}
----------------------------------------

 public void FiscalYearRange() 
{ 
    TimeCalendar fiscalYearCalendar = new TimeCalendar(new TimeCalendarConfig { YearBaseMonth = YearMonth.September, YearType = YearType.FiscalYear }); 
    TimeRange timeRange = new TimeRange(new DateTime(2007, 10, 1), new DateTime(2012, 2, 25)); 
    Console.WriteLine("Time range: " + timeRange); 
    Console.WriteLine(); 
    DateTime startDate = timeRange.Start; 
    while (startDate < timeRange.End) 
    { 
        Year year = new Year(startDate, fiscalYearCalendar); 
        Console.WriteLine("Fiscal Year: " + year); 
        startDate = startDate.AddYears(1); 
    } 
    Console.WriteLine("End Quarter: " + new Quarter(timeRange.End, fiscalYearCalendar)); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
844
5
Gpt3D_Clone844_5.cs 1 14
Gpt3D_Clone844_5.cs 15 32
----------------------------------------

public void FiscalYearRange () {
    TimeCalendar fiscalYearCalendar = new TimeCalendar (new TimeCalendarConfig {YearBaseMonth = YearMonth.April, YearType = YearType.FiscalYear});
    TimeRange timeRange = new TimeRange (new DateTime (2007, 10, 1), new DateTime (2012, 2, 25));
    Console.WriteLine ("Time range: " + timeRange);
    Console.WriteLine ();
    Console.WriteLine ("Start Quarter: " + new Quarter (timeRange.Start, fiscalYearCalendar));
    Console.WriteLine ("End Quarter: " + new Quarter (timeRange.End, fiscalYearCalendar));
    Console.WriteLine ();
    Year year = new Year (timeRange.Start, fiscalYearCalendar);
    while (year.Start < timeRange.End) {
        Console.WriteLine ("Fiscal Year: " + year);
        year = year.GetNextYear ();
    }
}
----------------------------------------

 public void FiscalYearRange() 
{ 
    TimeCalendar fiscalYearCalendar = new TimeCalendar(new TimeCalendarConfig { YearBaseMonth = YearMonth.April, YearType = YearType.FiscalYear}); 
    TimeRange timeRange = new TimeRange(new DateTime(2007, 10, 1), new DateTime(2012, 2, 25)); 
    Console.WriteLine("Time range: " + timeRange); 
    Console.WriteLine(); 
    DateTime startDate = timeRange.Start; 
    DateTime endDate = timeRange.End; 
    while (startDate < endDate) 
    { 
        Year year = new Year(startDate, fiscalYearCalendar); 
        Console.WriteLine("Fiscal Year: " + year); 
        startDate = startDate.AddYears(1); 
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
844
6
Gpt3D_Clone844_6.cs 1 14
Gpt3D_Clone844_6.cs 15 32
----------------------------------------

public void FiscalYearRange () {
    TimeCalendar fiscalYearCalendar = new TimeCalendar (new TimeCalendarConfig {YearBaseMonth = YearMonth.April, YearType = YearType.FiscalYear});
    TimeRange timeRange = new TimeRange (new DateTime (2007, 10, 1), new DateTime (2012, 2, 25));
    Console.WriteLine ("Time range: " + timeRange);
    Console.WriteLine ();
    Console.WriteLine ("Start Quarter: " + new Quarter (timeRange.Start, fiscalYearCalendar));
    Console.WriteLine ("End Quarter: " + new Quarter (timeRange.End, fiscalYearCalendar));
    Console.WriteLine ();
    Year year = new Year (timeRange.Start, fiscalYearCalendar);
    while (year.Start < timeRange.End) {
        Console.WriteLine ("Fiscal Year: " + year);
        year = year.GetNextYear ();
    }
}
----------------------------------------

 public void FiscalYearRange() 
{ 
    TimeCalendar fiscalYearCalendar = new TimeCalendar(new TimeCalendarConfig { YearBaseMonth = YearMonth.April, YearType = YearType.FiscalYear}); 
    TimeRange timeRange = new TimeRange(new DateTime(2007, 10, 1), new DateTime(2012, 2, 25)); 
    Console.WriteLine("Time range: " + timeRange); 
    Console.WriteLine(); 
    DateTime startDate = timeRange.Start; 
    while (startDate < timeRange.End) 
    { 
        Year year = new Year(startDate, fiscalYearCalendar); 
        Console.WriteLine("Fiscal Year: " + year); 
        startDate = startDate.AddYears(1); 
    } 
    Console.WriteLine("End Quarter: " + new Quarter(timeRange.End, fiscalYearCalendar)); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
844
7
Gpt3D_Clone844_7.cs 1 14
Gpt3D_Clone844_7.cs 15 32
----------------------------------------

public void FiscalYearRange () {
    TimeCalendar fiscalYearCalendar = new TimeCalendar (new TimeCalendarConfig {YearBaseMonth = YearMonth.April, YearType = YearType.FiscalYear});
    TimeRange timeRange = new TimeRange (new DateTime (2007, 10, 1), new DateTime (2012, 2, 25));
    Console.WriteLine ("Time range: " + timeRange);
    Console.WriteLine ();
    Console.WriteLine ("Start Quarter: " + new Quarter (timeRange.Start, fiscalYearCalendar));
    Console.WriteLine ("End Quarter: " + new Quarter (timeRange.End, fiscalYearCalendar));
    Console.WriteLine ();
    Year year = new Year (timeRange.Start, fiscalYearCalendar);
    while (year.Start < timeRange.End) {
        Console.WriteLine ("Fiscal Year: " + year);
        year = year.GetNextYear ();
    }
}
----------------------------------------

 public void FiscalYearRange() 
{ 
    TimeCalendar fiscalYearCalendar = new TimeCalendar(new TimeCalendarConfig { YearBaseMonth = YearMonth.January, YearType = YearType.FiscalYear }); 
    TimeRange timeRange = new TimeRange(new DateTime(2007, 10, 1), new DateTime(2012, 2, 25)); 
    Console.WriteLine("Time range: " + timeRange); 
    Console.WriteLine(); 
    DateTime startDate = timeRange.Start; 
    while (startDate.Year < timeRange.End.Year) 
    { 
        Year year = new Year(startDate, fiscalYearCalendar); 
        Console.WriteLine("Fiscal Year: " + year); 
        startDate = startDate.AddYears(1); 
    } 
    Console.WriteLine("End Quarter: " + new Quarter(timeRange.End, fiscalYearCalendar)); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
844
8
Gpt3D_Clone844_8.cs 1 14
Gpt3D_Clone844_8.cs 15 31
----------------------------------------

public void FiscalYearRange () {
    TimeCalendar fiscalYearCalendar = new TimeCalendar (new TimeCalendarConfig {YearBaseMonth = YearMonth.April, YearType = YearType.FiscalYear});
    TimeRange timeRange = new TimeRange (new DateTime (2007, 10, 1), new DateTime (2012, 2, 25));
    Console.WriteLine ("Time range: " + timeRange);
    Console.WriteLine ();
    Console.WriteLine ("Start Quarter: " + new Quarter (timeRange.Start, fiscalYearCalendar));
    Console.WriteLine ("End Quarter: " + new Quarter (timeRange.End, fiscalYearCalendar));
    Console.WriteLine ();
    Year year = new Year (timeRange.Start, fiscalYearCalendar);
    while (year.Start < timeRange.End) {
        Console.WriteLine ("Fiscal Year: " + year);
        year = year.GetNextYear ();
    }
}
----------------------------------------

 public void FiscalYearRange() 
{ 
    TimeCalendar fiscalYearCalendar = new TimeCalendar(new TimeCalendarConfig { YearBaseMonth = YearMonth.October, YearType = YearType.FiscalYear}); 
    TimeRange timeRange = new TimeRange(new DateTime(2007, 10, 1), new DateTime(2012, 2, 25)); 
    Console.WriteLine("Time range: " + timeRange); 
    Console.WriteLine(); 
    int startYear = timeRange.Start.Year; 
    int endYear = timeRange.End.Year; 
    for (int fiscalYear = startYear; fiscalYear <= endYear; fiscalYear++) 
    { 
        Year year = new Year(fiscalYear, fiscalYearCalendar); 
        Console.WriteLine("Fiscal Year: " + year); 
    } 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
844
9
Gpt3D_Clone844_9.cs 1 14
Gpt3D_Clone844_9.cs 15 31
----------------------------------------

public void FiscalYearRange () {
    TimeCalendar fiscalYearCalendar = new TimeCalendar (new TimeCalendarConfig {YearBaseMonth = YearMonth.April, YearType = YearType.FiscalYear});
    TimeRange timeRange = new TimeRange (new DateTime (2007, 10, 1), new DateTime (2012, 2, 25));
    Console.WriteLine ("Time range: " + timeRange);
    Console.WriteLine ();
    Console.WriteLine ("Start Quarter: " + new Quarter (timeRange.Start, fiscalYearCalendar));
    Console.WriteLine ("End Quarter: " + new Quarter (timeRange.End, fiscalYearCalendar));
    Console.WriteLine ();
    Year year = new Year (timeRange.Start, fiscalYearCalendar);
    while (year.Start < timeRange.End) {
        Console.WriteLine ("Fiscal Year: " + year);
        year = year.GetNextYear ();
    }
}
----------------------------------------

 public void FiscalYearRange() 
{ 
    TimeCalendar fiscalYearCalendar = new TimeCalendar(); 
    TimeRange timeRange = new TimeRange(new DateTime(2007, 10, 1), new DateTime(2012, 2, 25)); 
    Console.WriteLine("Time range: " + timeRange); 
    Console.WriteLine(); 
    int startYear = timeRange.Start.Year; 
    int endYear = timeRange.End.Year; 
    for (int fiscalYear = startYear; fiscalYear <= endYear; fiscalYear++) 
    { 
        Year year = new Year(fiscalYear, fiscalYearCalendar); 
        Console.WriteLine("Fiscal Year: " + year); 
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
847
3
Gpt3D_Clone847_3.cs 1 22
Gpt3D_Clone847_3.cs 23 51
----------------------------------------

private static IEnumerable < int > Approximations (IEnumerable < int > values, int target) {
    int sum = 0;
    bool first = true;
    foreach (var item in values) {
        if (sum + item < target || first) {
            first = false;
            sum += item;
        } else {
            if (sum + item - target < target - sum) {
                yield return sum + item;
                sum = 0;
                first = true;
            } else {
                yield return sum;
                sum = item;
            }
        }
    }
    if (first)
        yield break;
    yield return sum;
}
----------------------------------------

 private static IEnumerable<int> Approximations(IEnumerable<int> values, int target)
{
    int sum = 0;
    bool first = true;
    foreach (var item in values)
    {
        if (first)
        {
            first = false;
            sum += item;
            continue;
        }
        
        if (sum + item > target)
        {
            yield return (sum + item - target < target - sum) ? sum + item : sum;
            sum = item;
        }
        else
        {
            sum += item;
        }
    }
    if (!first)
        yield return sum;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
847
6
Gpt3D_Clone847_6.cs 1 22
Gpt3D_Clone847_6.cs 23 44
----------------------------------------

private static IEnumerable < int > Approximations (IEnumerable < int > values, int target) {
    int sum = 0;
    bool first = true;
    foreach (var item in values) {
        if (sum + item < target || first) {
            first = false;
            sum += item;
        } else {
            if (sum + item - target < target - sum) {
                yield return sum + item;
                sum = 0;
                first = true;
            } else {
                yield return sum;
                sum = item;
            }
        }
    }
    if (first)
        yield break;
    yield return sum;
}
----------------------------------------

  private static IEnumerable<int> Approximations(IEnumerable<int> values, int target)
{
    int sum = 0;
    bool first = true;
    foreach (var item in values)
    {
        if (sum + item > target && !first)
        {
            yield return (sum + item - target < target - sum) ? sum + item : sum;
            sum = item;
        }
        else
        {
            first = false;
            sum += item;
        }
    }
    if(!first)
        yield return sum;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
849
4
Gpt3D_Clone849_4.cs 1 11
Gpt3D_Clone849_4.cs 12 32
----------------------------------------

public void ReadXml (XmlReader reader) {
    if (! reader.HasAttributes)
        throw new FormatException ("expected a type attribute!");
    string type = reader.GetAttribute ("type");
    reader.Read ();
    if (type == "null")
        return;
    XmlSerializer serializer = new XmlSerializer (Type.GetType (type));
    this.Value = (T) serializer.Deserialize (reader);
    reader.ReadEndElement ();
}
----------------------------------------

 public void ReadXml (XmlReader reader) 
{
    if (reader.HasAttributes)
    {
        string type = reader.GetAttribute("type");
        reader.Read();
        if (type != "null")
        {
            Type t = Type.GetType(type);
            XmlSerializer serializer = new XmlSerializer(t);
            this.Value = (T)serializer.Deserialize(reader);
            reader.ReadEndElement();
        }
    else
    {
        throw new FormatException("expected a type attribute!");
    }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
849
6
Gpt3D_Clone849_6.cs 1 11
Gpt3D_Clone849_6.cs 12 33
----------------------------------------

public void ReadXml (XmlReader reader) {
    if (! reader.HasAttributes)
        throw new FormatException ("expected a type attribute!");
    string type = reader.GetAttribute ("type");
    reader.Read ();
    if (type == "null")
        return;
    XmlSerializer serializer = new XmlSerializer (Type.GetType (type));
    this.Value = (T) serializer.Deserialize (reader);
    reader.ReadEndElement ();
}
----------------------------------------

 public void ReadXml (XmlReader reader) 
{
    if (reader.HasAttributes)
    {
        string type = reader.GetAttribute("type");
        reader.Read();
        if (type != "null")
        {
            Type refType = Type.GetType(type);
            XmlSerializer serializer = new XmlSerializer(refType);
            this.Value = (T)serializer.Deserialize(reader);
            reader.ReadEndElement();
        }
    }
    else
    {
        throw new FormatException("expected a type attribute!");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
850
0
Gpt3D_Clone850_0.cs 1 33
Gpt3D_Clone850_0.cs 34 54
----------------------------------------

public static string Format (this TimeSpan obj) {
    StringBuilder sb = new StringBuilder ();
    if (obj.Hours != 0) {
        sb.Append (obj.Hours);
        sb.Append (" ");
        sb.Append ("hours");
        sb.Append (" ");
    }
    if (obj.Minutes != 0 || sb.Length != 0) {
        sb.Append (obj.Minutes);
        sb.Append (" ");
        sb.Append ("minutes");
        sb.Append (" ");
    }
    if (obj.Seconds != 0 || sb.Length != 0) {
        sb.Append (obj.Seconds);
        sb.Append (" ");
        sb.Append ("seconds");
        sb.Append (" ");
    }
    if (obj.Milliseconds != 0 || sb.Length != 0) {
        sb.Append (obj.Milliseconds);
        sb.Append (" ");
        sb.Append ("Milliseconds");
        sb.Append (" ");
    }
    if (sb.Length == 0) {
        sb.Append (0);
        sb.Append (" ");
        sb.Append ("Milliseconds");
    }
    return sb.ToString ();
}
----------------------------------------

  public static string Format (this TimeSpan obj) {
        StringBuilder sb = new StringBuilder();
        if (obj.Hours != 0) {
            sb.AppendFormat("{0} hours ", obj.Hours);
        }
        if (obj.Minutes != 0 || sb.Length != 0) {
            sb.AppendFormat("{0} minutes ", obj.Minutes);
        }
        if (obj.Seconds != 0 || sb.Length != 0) {
            sb.AppendFormat("{0} seconds ", obj.Seconds);
        }
        if (obj.Milliseconds != 0 || sb.Length != 0) {
            sb.AppendFormat("{0} milliseconds ", obj.Milliseconds);
        }
        if (sb.Length == 0) {
            sb.Append("0 milliseconds");
        }
        return sb.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
850
1
Gpt3D_Clone850_1.cs 1 33
Gpt3D_Clone850_1.cs 34 50
----------------------------------------

public static string Format (this TimeSpan obj) {
    StringBuilder sb = new StringBuilder ();
    if (obj.Hours != 0) {
        sb.Append (obj.Hours);
        sb.Append (" ");
        sb.Append ("hours");
        sb.Append (" ");
    }
    if (obj.Minutes != 0 || sb.Length != 0) {
        sb.Append (obj.Minutes);
        sb.Append (" ");
        sb.Append ("minutes");
        sb.Append (" ");
    }
    if (obj.Seconds != 0 || sb.Length != 0) {
        sb.Append (obj.Seconds);
        sb.Append (" ");
        sb.Append ("seconds");
        sb.Append (" ");
    }
    if (obj.Milliseconds != 0 || sb.Length != 0) {
        sb.Append (obj.Milliseconds);
        sb.Append (" ");
        sb.Append ("Milliseconds");
        sb.Append (" ");
    }
    if (sb.Length == 0) {
        sb.Append (0);
        sb.Append (" ");
        sb.Append ("Milliseconds");
    }
    return sb.ToString ();
}
----------------------------------------

 public static string Format(this TimeSpan obj)
    {
        var strBuilder = new StringBuilder();
        if (obj.Hours != 0)
            strBuilder.Append($"{obj.Hours} hours ");
        if (obj.Minutes != 0 || strBuilder.Length > 0)
            strBuilder.Append($"{obj.Minutes} minutes ");
        if (obj.Seconds != 0 || strBuilder.Length > 0)
            strBuilder.Append($"{obj.Seconds} seconds ");
        if (obj.Milliseconds != 0 || strBuilder.Length > 0)
            strBuilder.Append($"{obj.Milliseconds} milliseconds ");
        if (strBuilder.Length == 0)
            strBuilder.Append("0 milliseconds");
        return strBuilder.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
850
2
Gpt3D_Clone850_2.cs 1 33
Gpt3D_Clone850_2.cs 34 50
----------------------------------------

public static string Format (this TimeSpan obj) {
    StringBuilder sb = new StringBuilder ();
    if (obj.Hours != 0) {
        sb.Append (obj.Hours);
        sb.Append (" ");
        sb.Append ("hours");
        sb.Append (" ");
    }
    if (obj.Minutes != 0 || sb.Length != 0) {
        sb.Append (obj.Minutes);
        sb.Append (" ");
        sb.Append ("minutes");
        sb.Append (" ");
    }
    if (obj.Seconds != 0 || sb.Length != 0) {
        sb.Append (obj.Seconds);
        sb.Append (" ");
        sb.Append ("seconds");
        sb.Append (" ");
    }
    if (obj.Milliseconds != 0 || sb.Length != 0) {
        sb.Append (obj.Milliseconds);
        sb.Append (" ");
        sb.Append ("Milliseconds");
        sb.Append (" ");
    }
    if (sb.Length == 0) {
        sb.Append (0);
        sb.Append (" ");
        sb.Append ("Milliseconds");
    }
    return sb.ToString ();
}
----------------------------------------

  public static string Format (this TimeSpan obj) 
    {
        var output = new StringBuilder();
        if (obj.Hours != 0)
            output.Append($"{obj.Hours} hours ");
         if (obj.Minutes != 0 || output.Length != 0)
            output.Append($"{obj.Minutes} minutes ");
        if (obj.Seconds != 0 || output.Length != 0)
            output.Append($"{obj.Seconds} seconds ");
        if (obj.Milliseconds != 0 || output.Length != 0)
            output.Append($"{obj.Milliseconds} milliseconds ");
        if (output.Length == 0)
            output.Append("0 milliseconds");
        return output.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
850
3
Gpt3D_Clone850_3.cs 1 33
Gpt3D_Clone850_3.cs 34 51
----------------------------------------

public static string Format (this TimeSpan obj) {
    StringBuilder sb = new StringBuilder ();
    if (obj.Hours != 0) {
        sb.Append (obj.Hours);
        sb.Append (" ");
        sb.Append ("hours");
        sb.Append (" ");
    }
    if (obj.Minutes != 0 || sb.Length != 0) {
        sb.Append (obj.Minutes);
        sb.Append (" ");
        sb.Append ("minutes");
        sb.Append (" ");
    }
    if (obj.Seconds != 0 || sb.Length != 0) {
        sb.Append (obj.Seconds);
        sb.Append (" ");
        sb.Append ("seconds");
        sb.Append (" ");
    }
    if (obj.Milliseconds != 0 || sb.Length != 0) {
        sb.Append (obj.Milliseconds);
        sb.Append (" ");
        sb.Append ("Milliseconds");
        sb.Append (" ");
    }
    if (sb.Length == 0) {
        sb.Append (0);
        sb.Append (" ");
        sb.Append ("Milliseconds");
    }
    return sb.ToString ();
}
----------------------------------------

  public static string Format (this TimeSpan obj) 
    {
        var sb = new StringBuilder();
        if (obj.Hours != 0)
            sb.AppendFormat("{0} hours ", obj.Hours);
        if (obj.Minutes != 0 || sb.Length > 0)
            sb.AppendFormat("{0} minuets ", obj.Minutes);
        if (obj.Seconds != 0 || sb.Length > 0)
            sb.AppendFormat("{0} seconds ", obj.Seconds);
        if (obj.Milliseconds != 0 || sb.Length > 0)
            sb.AppendFormat("{0} milliseconds ", obj.Milliseconds);
        if (sb.Length == 0)
            sb.Append("0 milliseconds");
        return sb.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
850
4
Gpt3D_Clone850_4.cs 1 33
Gpt3D_Clone850_4.cs 34 54
----------------------------------------

public static string Format (this TimeSpan obj) {
    StringBuilder sb = new StringBuilder ();
    if (obj.Hours != 0) {
        sb.Append (obj.Hours);
        sb.Append (" ");
        sb.Append ("hours");
        sb.Append (" ");
    }
    if (obj.Minutes != 0 || sb.Length != 0) {
        sb.Append (obj.Minutes);
        sb.Append (" ");
        sb.Append ("minutes");
        sb.Append (" ");
    }
    if (obj.Seconds != 0 || sb.Length != 0) {
        sb.Append (obj.Seconds);
        sb.Append (" ");
        sb.Append ("seconds");
        sb.Append (" ");
    }
    if (obj.Milliseconds != 0 || sb.Length != 0) {
        sb.Append (obj.Milliseconds);
        sb.Append (" ");
        sb.Append ("Milliseconds");
        sb.Append (" ");
    }
    if (sb.Length == 0) {
        sb.Append (0);
        sb.Append (" ");
        sb.Append ("Milliseconds");
    }
    return sb.ToString ();
}
----------------------------------------

  public static string Format (this TimeSpan obj) {
        string output = "";
        if (obj.Hours != 0) {
            output += obj.Hours + " hours ";
        }
        if (obj.Minutes != 0) {
            output += obj.Minutes + " minutes ";
        }
        if (obj.Seconds != 0) {
            output += obj.Seconds + " seconds ";
        }
        if (obj.Milliseconds != 0) {
            output += obj.Milliseconds + " Milliseconds ";
        }
        if (output == "") {
            output += "0 Milliseconds";
        }
        return output;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
850
5
Gpt3D_Clone850_5.cs 1 33
Gpt3D_Clone850_5.cs 34 49
----------------------------------------

public static string Format (this TimeSpan obj) {
    StringBuilder sb = new StringBuilder ();
    if (obj.Hours != 0) {
        sb.Append (obj.Hours);
        sb.Append (" ");
        sb.Append ("hours");
        sb.Append (" ");
    }
    if (obj.Minutes != 0 || sb.Length != 0) {
        sb.Append (obj.Minutes);
        sb.Append (" ");
        sb.Append ("minutes");
        sb.Append (" ");
    }
    if (obj.Seconds != 0 || sb.Length != 0) {
        sb.Append (obj.Seconds);
        sb.Append (" ");
        sb.Append ("seconds");
        sb.Append (" ");
    }
    if (obj.Milliseconds != 0 || sb.Length != 0) {
        sb.Append (obj.Milliseconds);
        sb.Append (" ");
        sb.Append ("Milliseconds");
        sb.Append (" ");
    }
    if (sb.Length == 0) {
        sb.Append (0);
        sb.Append (" ");
        sb.Append ("Milliseconds");
    }
    return sb.ToString ();
}
----------------------------------------

  public static string Format (this TimeSpan obj) {
        StringBuilder sb = new StringBuilder();
        if (obj.Hours > 0)
            sb.AppendFormat("{0} hours ", obj.Hours);
        if (obj.Minutes > 0 || sb.Length > 0)
            sb.AppendFormat("{0} minutes ", obj.Minutes);
        if (obj.Seconds > 0 || sb.Length > 0)
            sb.AppendFormat("{0} seconds ", obj.Seconds);
        if (obj.Milliseconds > 0 || sb.Length > 0)
            sb.AppendFormat("{0} milliseconds ", obj.Milliseconds);
        if (sb.Length == 0)
            sb.Append("0 milliseconds");
        return sb.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
850
6
Gpt3D_Clone850_6.cs 1 33
Gpt3D_Clone850_6.cs 34 50
----------------------------------------

public static string Format (this TimeSpan obj) {
    StringBuilder sb = new StringBuilder ();
    if (obj.Hours != 0) {
        sb.Append (obj.Hours);
        sb.Append (" ");
        sb.Append ("hours");
        sb.Append (" ");
    }
    if (obj.Minutes != 0 || sb.Length != 0) {
        sb.Append (obj.Minutes);
        sb.Append (" ");
        sb.Append ("minutes");
        sb.Append (" ");
    }
    if (obj.Seconds != 0 || sb.Length != 0) {
        sb.Append (obj.Seconds);
        sb.Append (" ");
        sb.Append ("seconds");
        sb.Append (" ");
    }
    if (obj.Milliseconds != 0 || sb.Length != 0) {
        sb.Append (obj.Milliseconds);
        sb.Append (" ");
        sb.Append ("Milliseconds");
        sb.Append (" ");
    }
    if (sb.Length == 0) {
        sb.Append (0);
        sb.Append (" ");
        sb.Append ("Milliseconds");
    }
    return sb.ToString ();
}
----------------------------------------

  public static string Format (this TimeSpan obj) 
    {
        var output = new StringBuilder();
        if (obj.Hours != 0)
            output.Append($"{obj.Hours} hours ");
        if (obj.Minutes != 0 || output.Length > 0)
            output.Append($"{obj.Minutes} minutes ");
        if (obj.Seconds != 0 || output.Length > 0) 
            output.Append($"{obj.Seconds} seconds ");
        if (obj.Milliseconds != 0 || output.Length > 0) 
            output.Append($"{obj.Milliseconds} milliseconds ");
        if (output.Length == 0) 
            output.Append("0 milliseconds");
        return output.ToString();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
850
7
Gpt3D_Clone850_7.cs 1 33
Gpt3D_Clone850_7.cs 34 50
----------------------------------------

public static string Format (this TimeSpan obj) {
    StringBuilder sb = new StringBuilder ();
    if (obj.Hours != 0) {
        sb.Append (obj.Hours);
        sb.Append (" ");
        sb.Append ("hours");
        sb.Append (" ");
    }
    if (obj.Minutes != 0 || sb.Length != 0) {
        sb.Append (obj.Minutes);
        sb.Append (" ");
        sb.Append ("minutes");
        sb.Append (" ");
    }
    if (obj.Seconds != 0 || sb.Length != 0) {
        sb.Append (obj.Seconds);
        sb.Append (" ");
        sb.Append ("seconds");
        sb.Append (" ");
    }
    if (obj.Milliseconds != 0 || sb.Length != 0) {
        sb.Append (obj.Milliseconds);
        sb.Append (" ");
        sb.Append ("Milliseconds");
        sb.Append (" ");
    }
    if (sb.Length == 0) {
        sb.Append (0);
        sb.Append (" ");
        sb.Append ("Milliseconds");
    }
    return sb.ToString ();
}
----------------------------------------

  public static string Format (this TimeSpan obj) 
    {
        String output = String.Empty;
        if (obj.Hours != 0)
            output = String.Format("{0} hours", obj.Hours);
        if (obj.Minutes != 0 || output != "")
            output += String.Format("{0}{1} minutes", output == "" ? "" : " ", obj.Minutes);
        if (obj.Seconds != 0 || output != "")
            output += String.Format("{0}{1} seconds", output == "" ? "" : " ", obj.Seconds);
        if (obj.Milliseconds != 0 || output != "")
            output += String.Format("{0}{1} milliseconds", output == "" ? "" : " ", obj.Milliseconds);
        if (output == "")
            output = "0 milliseconds";
        return output;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
850
8
Gpt3D_Clone850_8.cs 1 33
Gpt3D_Clone850_8.cs 34 49
----------------------------------------

public static string Format (this TimeSpan obj) {
    StringBuilder sb = new StringBuilder ();
    if (obj.Hours != 0) {
        sb.Append (obj.Hours);
        sb.Append (" ");
        sb.Append ("hours");
        sb.Append (" ");
    }
    if (obj.Minutes != 0 || sb.Length != 0) {
        sb.Append (obj.Minutes);
        sb.Append (" ");
        sb.Append ("minutes");
        sb.Append (" ");
    }
    if (obj.Seconds != 0 || sb.Length != 0) {
        sb.Append (obj.Seconds);
        sb.Append (" ");
        sb.Append ("seconds");
        sb.Append (" ");
    }
    if (obj.Milliseconds != 0 || sb.Length != 0) {
        sb.Append (obj.Milliseconds);
        sb.Append (" ");
        sb.Append ("Milliseconds");
        sb.Append (" ");
    }
    if (sb.Length == 0) {
        sb.Append (0);
        sb.Append (" ");
        sb.Append ("Milliseconds");
    }
    return sb.ToString ();
}
----------------------------------------

  public static string Format (this TimeSpan obj) {
        string output = "";
        if (obj.Hours != 0)
            output = string.Format("{0} hours", obj.Hours);
        if (obj.Minutes != 0 || output != "")
            output = string.Format("{0}{1} minutes", output == "" ? "" : output + " ", obj.Minutes);
        if (obj.Seconds != 0 || output != "")
            output = string.Format("{0}{1} seconds", output == "" ? "" : output + " ", obj.Seconds);
        if (obj.Milliseconds != 0 || output != "")
            output = string.Format("{0}{1} milliseconds", output == "" ? "" : output + " ", obj.Milliseconds);
        if (output == "")
            output = "0 milliseconds";
        return output;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
850
9
Gpt3D_Clone850_9.cs 1 33
Gpt3D_Clone850_9.cs 34 48
----------------------------------------

public static string Format (this TimeSpan obj) {
    StringBuilder sb = new StringBuilder ();
    if (obj.Hours != 0) {
        sb.Append (obj.Hours);
        sb.Append (" ");
        sb.Append ("hours");
        sb.Append (" ");
    }
    if (obj.Minutes != 0 || sb.Length != 0) {
        sb.Append (obj.Minutes);
        sb.Append (" ");
        sb.Append ("minutes");
        sb.Append (" ");
    }
    if (obj.Seconds != 0 || sb.Length != 0) {
        sb.Append (obj.Seconds);
        sb.Append (" ");
        sb.Append ("seconds");
        sb.Append (" ");
    }
    if (obj.Milliseconds != 0 || sb.Length != 0) {
        sb.Append (obj.Milliseconds);
        sb.Append (" ");
        sb.Append ("Milliseconds");
        sb.Append (" ");
    }
    if (sb.Length == 0) {
        sb.Append (0);
        sb.Append (" ");
        sb.Append ("Milliseconds");
    }
    return sb.ToString ();
}
----------------------------------------

  public static string Format (this TimeSpan obj) {
        List<string> output = new List<string>();
        if (obj.Hours != 0) 
            output.Add(obj.Hours + " hours");
        if (obj.Minutes != 0) 
            output.Add(obj.Minutes + " minutes");
        if (obj.Seconds != 0) 
            output.Add(obj.Seconds + " seconds");
        if (obj.Milliseconds != 0) 
            output.Add(obj.Milliseconds + " Milliseconds");
        return output.Count == 0 ? "0 Milliseconds" : string.Join(" ", output);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
853
0
Gpt3D_Clone853_0.cs 1 11
Gpt3D_Clone853_0.cs 12 34
----------------------------------------

void Main () {
    Foo < int > fooObject = new Foo < int > ();
    fooObject.Items = new List < int > {1, 2, 3};
    object obj = (object) fooObject;
    PropertyInfo propInfo = obj.GetType ().GetProperty ("Items");
    object itemValue = propInfo.GetValue (obj, null);
    Console.WriteLine (itemValue);
    IList values = (IList) itemValue;
    foreach (var val in values)
        Console.WriteLine (val);
}
----------------------------------------

  void Main () {
    Foo < int > fooObject = new Foo < int > ();
    HashSet<int> myHashSet = new HashSet<int>();
    myHashSet.Add(1);
    myHashSet.Add(2);
    myHashSet.Add(3);
    object obj = (object) fooObject;
    Type type = obj.GetType ();
    PropertyInfo [] propInfo = type.GetProperties();
    foreach( PropertyInfo item in propInfo )
    {
        if (item.Name == "Items")
        {
            item.SetValue(obj, myHashSet, null);
        }
    }
    Console.WriteLine (itemValue);
    IList values = (IList) itemValue;
    foreach (var val in values)
        Console.WriteLine (val);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
853
1
Gpt3D_Clone853_1.cs 1 11
Gpt3D_Clone853_1.cs 12 34
----------------------------------------

void Main () {
    Foo < int > fooObject = new Foo < int > ();
    fooObject.Items = new List < int > {1, 2, 3};
    object obj = (object) fooObject;
    PropertyInfo propInfo = obj.GetType ().GetProperty ("Items");
    object itemValue = propInfo.GetValue (obj, null);
    Console.WriteLine (itemValue);
    IList values = (IList) itemValue;
    foreach (var val in values)
        Console.WriteLine (val);
}
----------------------------------------

  void Main () {
    Foo < int > fooObject = new Foo < int > ();
    Stack<int> myStack = new Stack<int>();
    myStack.Push(1);
    myStack.Push(2);
    myStack.Push(3);
    object obj = (object) fooObject;
    Type type = obj.GetType ();
    PropertyInfo [] propInfo = type.GetProperties();
    foreach( PropertyInfo item in propInfo )
    {
        if (item.Name == "Items")
        {
            item.SetValue(obj, myStack, null);
        }
    }
    Console.WriteLine (itemValue);
    IList values = (IList) itemValue;
    foreach (var val in values)
        Console.WriteLine (val);
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
853
2
Gpt3D_Clone853_2.cs 1 11
Gpt3D_Clone853_2.cs 12 34
----------------------------------------

void Main () {
    Foo < int > fooObject = new Foo < int > ();
    fooObject.Items = new List < int > {1, 2, 3};
    object obj = (object) fooObject;
    PropertyInfo propInfo = obj.GetType ().GetProperty ("Items");
    object itemValue = propInfo.GetValue (obj, null);
    Console.WriteLine (itemValue);
    IList values = (IList) itemValue;
    foreach (var val in values)
        Console.WriteLine (val);
}
----------------------------------------

  void Main () {
    Foo < int > fooObject = new Foo < int > ();
    Queue<int> myQueue = new Queue<int>();
    myQueue.Enqueue(1);
    myQueue.Enqueue(2);
    myQueue.Enqueue(3);
    object obj = (object) fooObject;
    Type type = obj.GetType ();
    PropertyInfo [] propInfo = type.GetProperties();
    foreach( PropertyInfo item in propInfo )
    {
        if (item.Name == "Items")
        {
            item.SetValue(obj, myQueue, null);
        }
    }
    Console.WriteLine (itemValue);
    IList values = (IList) itemValue;
    foreach (var val in values)
        Console.WriteLine (val);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
853
3
Gpt3D_Clone853_3.cs 1 11
Gpt3D_Clone853_3.cs 12 38
----------------------------------------

void Main () {
    Foo < int > fooObject = new Foo < int > ();
    fooObject.Items = new List < int > {1, 2, 3};
    object obj = (object) fooObject;
    PropertyInfo propInfo = obj.GetType ().GetProperty ("Items");
    object itemValue = propInfo.GetValue (obj, null);
    Console.WriteLine (itemValue);
    IList values = (IList) itemValue;
    foreach (var val in values)
        Console.WriteLine (val);
}
----------------------------------------

  void Main () {
    Foo < int > fooObject = new Foo < int > ();
    List<int> myList = new List<int>();
    //add element in list
    myList.Add(1); 
    myList.Add(2);
    myList.Add(3);
    object obj = (object) fooObject;
    Type type = obj.GetType ();
    //Get properties
    PropertyInfo [] propInfo = type.GetProperties();
    //loop through the properties
    foreach( PropertyInfo item in propInfo )
    {
        if (item.Name == "Items")
        {
            //set value
            item.SetValue(obj, myList, null);
        }
    }
    Console.WriteLine (itemValue);
    IList values = (IList) itemValue;
    foreach (var val in values)
        Console.WriteLine (val);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
853
4
Gpt3D_Clone853_4.cs 1 11
Gpt3D_Clone853_4.cs 12 34
----------------------------------------

void Main () {
    Foo < int > fooObject = new Foo < int > ();
    fooObject.Items = new List < int > {1, 2, 3};
    object obj = (object) fooObject;
    PropertyInfo propInfo = obj.GetType ().GetProperty ("Items");
    object itemValue = propInfo.GetValue (obj, null);
    Console.WriteLine (itemValue);
    IList values = (IList) itemValue;
    foreach (var val in values)
        Console.WriteLine (val);
}
----------------------------------------

 void Main () {
    Foo < int > fooObject = new Foo < int > ();
    SortedSet<int> mySortedSet = new SortedSet<int>();
    mySortedSet.Add(1);
    mySortedSet.Add(2);
    mySortedSet.Add(3);
    object obj = (object) fooObject;
    Type type = obj.GetType ();
    PropertyInfo [] propInfo = type.GetProperties();
    foreach( PropertyInfo item in propInfo )
    {
        if (item.Name == "Items")
        {
            item.SetValue(obj, mySortedSet, null);
        }
    }
    Console.WriteLine (itemValue);
    IList values = (IList) itemValue;
    foreach (var val in values)
        Console.WriteLine (val);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
853
5
Gpt3D_Clone853_5.cs 1 11
Gpt3D_Clone853_5.cs 12 35
----------------------------------------

void Main () {
    Foo < int > fooObject = new Foo < int > ();
    fooObject.Items = new List < int > {1, 2, 3};
    object obj = (object) fooObject;
    PropertyInfo propInfo = obj.GetType ().GetProperty ("Items");
    object itemValue = propInfo.GetValue (obj, null);
    Console.WriteLine (itemValue);
    IList values = (IList) itemValue;
    foreach (var val in values)
        Console.WriteLine (val);
}
----------------------------------------

  void Main () {
    Foo < int > fooObject = new Foo < int > ();
    Dictionary<int, int> dictionayList = new Dictionary<int, int>();
    //add elements in dictionary
    dictionaryList.Add(1, 1); 
    dictionaryList.Add(2, 2);
    dictionaryList.Add(3, 3);
    object obj = (object) fooObject;
    Type type = obj.GetType ();
    PropertyInfo [] propInfo = type.GetProperties();
    foreach( PropertyInfo item in propInfo )
    {
        if (item.Name == "Items")
        {
            item.SetValue(obj, dictionaryList, null);
        }
    }
    Console.WriteLine (itemValue);
    IList values = (IList) itemValue;
    foreach (var val in values)
        Console.WriteLine (val);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
853
7
Gpt3D_Clone853_7.cs 1 11
Gpt3D_Clone853_7.cs 12 28
----------------------------------------

void Main () {
    Foo < int > fooObject = new Foo < int > ();
    fooObject.Items = new List < int > {1, 2, 3};
    object obj = (object) fooObject;
    PropertyInfo propInfo = obj.GetType ().GetProperty ("Items");
    object itemValue = propInfo.GetValue (obj, null);
    Console.WriteLine (itemValue);
    IList values = (IList) itemValue;
    foreach (var val in values)
        Console.WriteLine (val);
}
----------------------------------------

  void Main () {
    Foo < int > fooObject = new Foo < int > ();
    fooObject.Items = new int[] {1, 2, 3};
    object obj = (object) fooObject;
    Type type = obj.GetType ();
    PropertyInfo [] propInfo = type.GetProperties();
    for (int i = 0; i < propInfo.Length; i++) {
        if (propInfo[i].Name == "Items") {
            object value = propInfo[i].GetValue (obj, null);
            IList values = (IList) value;
            foreach (var val in values)
                Console.WriteLine (val);
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
857
1
Gpt3D_Clone857_1.cs 1 17
Gpt3D_Clone857_1.cs 18 28
----------------------------------------

public int PerformAction () {
    int state;
    if (SomeArbitraryCondition ()) {
        if (SomeArbitraryCondition ()) {
            state = 1;
        } else {
            state = 2;
        }
    } else {
        if (SomeArbitraryCondition ()) {
            state = 3;
        } else {
            state = 4;
        }
    }
    return state;
}
----------------------------------------

 int PerformAction () {
    int state = 0;
    if (!SomeArbitraryCondition ()) {
        state = SomeArbitraryCondition () ? 4 : 3;
    } else {
        state = SomeArbitraryCondition () ? 1 : 2;
    }
    return state;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
857
2
Gpt3D_Clone857_2.cs 1 17
Gpt3D_Clone857_2.cs 18 28
----------------------------------------

public int PerformAction () {
    int state;
    if (SomeArbitraryCondition ()) {
        if (SomeArbitraryCondition ()) {
            state = 1;
        } else {
            state = 2;
        }
    } else {
        if (SomeArbitraryCondition ()) {
            state = 3;
        } else {
            state = 4;
        }
    }
    return state;
}
----------------------------------------

 int PerformAction () {
    int state;
    if (SomeArbitraryCondition ()) {
        state = (SomeArbitraryCondition ()) ? 2 : 1;
    } else {
        state = (SomeArbitraryCondition ()) ? 4 : 3;
    }
    return state;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
857
3
Gpt3D_Clone857_3.cs 1 17
Gpt3D_Clone857_3.cs 18 28
----------------------------------------

public int PerformAction () {
    int state;
    if (SomeArbitraryCondition ()) {
        if (SomeArbitraryCondition ()) {
            state = 1;
        } else {
            state = 2;
        }
    } else {
        if (SomeArbitraryCondition ()) {
            state = 3;
        } else {
            state = 4;
        }
    }
    return state;
}
----------------------------------------

 int PerformAction () {
    int state = 0;
    if (!SomeArbitraryCondition ()) {
        state = SomeArbitraryCondition () ? 3 : 4;
    } else {
        state = SomeArbitraryCondition () ? 2 : 1;
    }
    return state;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
857
4
Gpt3D_Clone857_4.cs 1 17
Gpt3D_Clone857_4.cs 18 28
----------------------------------------

public int PerformAction () {
    int state;
    if (SomeArbitraryCondition ()) {
        if (SomeArbitraryCondition ()) {
            state = 1;
        } else {
            state = 2;
        }
    } else {
        if (SomeArbitraryCondition ()) {
            state = 3;
        } else {
            state = 4;
        }
    }
    return state;
}
----------------------------------------

 int PerformAction () {
    int state;
    if (SomeArbitraryCondition ()) {
        state = (SomeArbitraryCondition ()) ? 1 : 2;
    } else {
        state = (SomeArbitraryCondition ()) ? 3 : 4;
    }
    return state;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
857
5
Gpt3D_Clone857_5.cs 1 17
Gpt3D_Clone857_5.cs 18 28
----------------------------------------

public int PerformAction () {
    int state;
    if (SomeArbitraryCondition ()) {
        if (SomeArbitraryCondition ()) {
            state = 1;
        } else {
            state = 2;
        }
    } else {
        if (SomeArbitraryCondition ()) {
            state = 3;
        } else {
            state = 4;
        }
    }
    return state;
}
----------------------------------------

 int PerformAction () {
    int state = 0;
    if (SomeArbitraryCondition ()) {
        state = SomeArbitraryCondition () ? 2 : 1;
    } else {
        state = SomeArbitraryCondition () ? 4 : 3;
    }
    return state;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
857
6
Gpt3D_Clone857_6.cs 1 17
Gpt3D_Clone857_6.cs 18 29
----------------------------------------

public int PerformAction () {
    int state;
    if (SomeArbitraryCondition ()) {
        if (SomeArbitraryCondition ()) {
            state = 1;
        } else {
            state = 2;
        }
    } else {
        if (SomeArbitraryCondition ()) {
            state = 3;
        } else {
            state = 4;
        }
    }
    return state;
}
----------------------------------------

 int PerformAction () {
    int state = 0;
    if (SomeArbitraryCondition ()) {
        state = SomeArbitraryCondition () ? 1 : 2;
    } else {
        state = SomeArbitraryCondition () ? 3 : 4;
    }
    return state;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
859
4
Gpt3D_Clone859_4.cs 1 19
Gpt3D_Clone859_4.cs 20 36
----------------------------------------

public IEnumerable < T > DequeueAll () {
    while (! shutDown) {
        do
            {
                T item;
                lock (queue)
                {
                    if (queue.Count == 0) {
                        if (shutDown)
                            break;
                        Monitor.Wait (queue);
                        if (queue.Count == 0)
                            break;
                    }
                    item = queue.Dequeue ();
                } yield return item;
            } while (! shutDown);
    }
}
----------------------------------------

 public IEnumerable < T > DequeueAll () {
    while (! shutDown) {
        lock (queue) {
            while (queue.Count > 0) {
                T item = queue.Dequeue ();
                yield return item;
            }
            if ( queue.Count == 0 ) {
                if (shutDown)
                    break;
                Monitor.Wait (queue);
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
859
5
Gpt3D_Clone859_5.cs 1 19
Gpt3D_Clone859_5.cs 20 35
----------------------------------------

public IEnumerable < T > DequeueAll () {
    while (! shutDown) {
        do
            {
                T item;
                lock (queue)
                {
                    if (queue.Count == 0) {
                        if (shutDown)
                            break;
                        Monitor.Wait (queue);
                        if (queue.Count == 0)
                            break;
                    }
                    item = queue.Dequeue ();
                } yield return item;
            } while (! shutDown);
    }
}
----------------------------------------

 public IEnumerable < T > DequeueAll () {
    while (! shutDown) {
        lock (queue) {
            if ( queue.Count > 0 ) {
                var item = queue.Dequeue ();
                yield return item;
            } else if ( queue.Count == 0 ) {
                if (shutDown) 
                    break;
                Monitor.Wait (queue);
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
859
6
Gpt3D_Clone859_6.cs 1 19
Gpt3D_Clone859_6.cs 20 37
----------------------------------------

public IEnumerable < T > DequeueAll () {
    while (! shutDown) {
        do
            {
                T item;
                lock (queue)
                {
                    if (queue.Count == 0) {
                        if (shutDown)
                            break;
                        Monitor.Wait (queue);
                        if (queue.Count == 0)
                            break;
                    }
                    item = queue.Dequeue ();
                } yield return item;
            } while (! shutDown);
    }
}
----------------------------------------

 public IEnumerable < T > DequeueAll () {
    while (! shutDown) {
        lock (queue) {
            while (queue.Count == 0) {
                if (shutDown)
                    break;
                Monitor.Wait (queue);
            }
            if (queue.Count > 0) {
                var item = queue.Dequeue ();
                yield return item;
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
85
0
Gpt3D_Clone85_0.cs 1 11
Gpt3D_Clone85_0.cs 12 28
----------------------------------------

static void Main (string [] args) {
    string choice = "";
    displayMenu ();
    do
        {
            choice = getChoice ();
        } while (choice != "10");
    {
        Console.ReadLine ();
    }
}
----------------------------------------

	static void Main (string [] args) 
{
    string choice;
    bool endLoop = false;
    do 
    {
        displayMenu();
        choice = getChoice();
        if (choice == "10") endLoop = true;
    } 
    while (endLoop == false);
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
85
3
Gpt3D_Clone85_3.cs 1 11
Gpt3D_Clone85_3.cs 12 31
----------------------------------------

static void Main (string [] args) {
    string choice = "";
    displayMenu ();
    do
        {
            choice = getChoice ();
        } while (choice != "10");
    {
        Console.ReadLine ();
    }
}
----------------------------------------

	static void Main(string[] args)
{
    string choice = "";
    bool running = true;
    while (running)
    {
        displayMenu();
        choice = getChoice();
        if (choice == "10")
        {
            running = false;
        }
    }
    Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
85
4
Gpt3D_Clone85_4.cs 1 11
Gpt3D_Clone85_4.cs 12 28
----------------------------------------

static void Main (string [] args) {
    string choice = "";
    displayMenu ();
    do
        {
            choice = getChoice ();
        } while (choice != "10");
    {
        Console.ReadLine ();
    }
}
----------------------------------------

	static void Main(string[] args)
{
    string choice;
    bool con = true;
    while(con)
    {
        displayMenu();
        choice = getChoice();
        if (choice == "10")
        {
            con = false; 
        }
    }
    Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
85
5
Gpt3D_Clone85_5.cs 1 11
Gpt3D_Clone85_5.cs 12 31
----------------------------------------

static void Main (string [] args) {
    string choice = "";
    displayMenu ();
    do
        {
            choice = getChoice ();
        } while (choice != "10");
    {
        Console.ReadLine ();
    }
}
----------------------------------------

	static void Main(string[] args)
{
    string choice = "";
    bool canContinue = false;
    while (!canContinue)
    {
        displayMenu();
        choice = getChoice();
        if (choice == "10")
        {
            canContinue = true;
        }
    }
    Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
85
7
Gpt3D_Clone85_7.cs 1 11
Gpt3D_Clone85_7.cs 12 26
----------------------------------------

static void Main (string [] args) {
    string choice = "";
    displayMenu ();
    do
        {
            choice = getChoice ();
        } while (choice != "10");
    {
        Console.ReadLine ();
    }
}
----------------------------------------

	static void Main(string[] args)
{
    string choice;
    displayMenu();
    choice = getChoice();
    while (choice != "10")
    {
        choice = getChoice();
    }
    Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
85
8
Gpt3D_Clone85_8.cs 1 11
Gpt3D_Clone85_8.cs 12 25
----------------------------------------

static void Main (string [] args) {
    string choice = "";
    displayMenu ();
    do
        {
            choice = getChoice ();
        } while (choice != "10");
    {
        Console.ReadLine ();
    }
}
----------------------------------------

	static void Main(string[] args)
{
    string choice = getChoice();
    while (choice != "10")
    {
        displayMenu();
        choice = getChoice();
    }
    Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
85
9
Gpt3D_Clone85_9.cs 1 11
Gpt3D_Clone85_9.cs 12 23
----------------------------------------

static void Main (string [] args) {
    string choice = "";
    displayMenu ();
    do
        {
            choice = getChoice ();
        } while (choice != "10");
    {
        Console.ReadLine ();
    }
}
----------------------------------------

	static void Main(string[] args)
{
    string choice = "";
    displayMenu();
    while (choice != "10")
    {
        choice = getChoice();
    }
    Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
861
4
Gpt3D_Clone861_4.cs 1 11
Gpt3D_Clone861_4.cs 12 28
----------------------------------------

protected void Unnamed1_Click (object sender, EventArgs e) {
    foreach (GridViewRow row in GridView1.Rows) {
        if (row.RowType == DataControlRowType.DataRow) {
            CheckBox cb = (CheckBox) row.FindControl ("ProductSelector");
            if (cb != null && cb.Checked) {
                int productID = Convert.ToInt32 (GridView1.DataKeys [row.RowIndex].Value);
                Response.Write (string.Format ("This would have deleted ProductID {0}<br />", productID));
            }
        }
    }
}
----------------------------------------

 protected void Unnamed1_Click (object sender, EventArgs e) {
     int rowCount = GridView1.Rows.Count;
        for (int i = 0; i < rowCount; i++)
        {
            if (GridView1.Rows[i].RowType == DataControlRowType.DataRow)
            {
                CheckBox cb = (CheckBox)GridView1.Rows[i].FindControl("ProductSelector");
                if (cb.Checked==true)
                { 
                    int productID = Convert.ToInt32(GridView1.DataKeys[i].Value);
                    Response.Write (string.Format("This would have deleted ProductID {0}<br />", productID));
                }
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
861
5
Gpt3D_Clone861_5.cs 1 11
Gpt3D_Clone861_5.cs 12 27
----------------------------------------

protected void Unnamed1_Click (object sender, EventArgs e) {
    foreach (GridViewRow row in GridView1.Rows) {
        if (row.RowType == DataControlRowType.DataRow) {
            CheckBox cb = (CheckBox) row.FindControl ("ProductSelector");
            if (cb != null && cb.Checked) {
                int productID = Convert.ToInt32 (GridView1.DataKeys [row.RowIndex].Value);
                Response.Write (string.Format ("This would have deleted ProductID {0}<br />", productID));
            }
        }
    }
}
----------------------------------------

 protected void Unnamed1_Click (object sender, EventArgs e) {
     for (int rIndex = 0; rIndex < GridView1.Rows.Count; rIndex++)
        {
            if (GridView1.Rows[rIndex].RowType == DataControlRowType.DataRow)
            {
                CheckBox cb = (CheckBox)GridView1.Rows[rIndex].FindControl("ProductSelector");
                if (cb != null && cb.Checked)
                {
                    int productID = Convert.ToInt32(GridView1.DataKeys[rIndex].Value);
                    Response.Write(string.Format("This would have deleted ProductID {0}<br />", productID));
                }
            }
        } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
861
6
Gpt3D_Clone861_6.cs 1 11
Gpt3D_Clone861_6.cs 12 27
----------------------------------------

protected void Unnamed1_Click (object sender, EventArgs e) {
    foreach (GridViewRow row in GridView1.Rows) {
        if (row.RowType == DataControlRowType.DataRow) {
            CheckBox cb = (CheckBox) row.FindControl ("ProductSelector");
            if (cb != null && cb.Checked) {
                int productID = Convert.ToInt32 (GridView1.DataKeys [row.RowIndex].Value);
                Response.Write (string.Format ("This would have deleted ProductID {0}<br />", productID));
            }
        }
    }
}
----------------------------------------

 protected void Unnamed1_Click (object sender, EventArgs e) {
     for (int currentRow = 0; currentRow < GridView1.Rows.Count; currentRow++)
        {
            if (GridView1.Rows[currentRow].RowType == DataControlRowType.DataRow)
            {
                CheckBox cb = (CheckBox)GridView1.Rows[currentRow].FindControl("ProductSelector");
                if (cb != null && cb.Checked)
                {
                    int productID = Convert.ToInt32(GridView1.DataKeys[currentRow].Value);
                    Response.Write(string.Format("This would have deleted ProductID {0}<br />", productID));
                }
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
861
7
Gpt3D_Clone861_7.cs 1 11
Gpt3D_Clone861_7.cs 12 27
----------------------------------------

protected void Unnamed1_Click (object sender, EventArgs e) {
    foreach (GridViewRow row in GridView1.Rows) {
        if (row.RowType == DataControlRowType.DataRow) {
            CheckBox cb = (CheckBox) row.FindControl ("ProductSelector");
            if (cb != null && cb.Checked) {
                int productID = Convert.ToInt32 (GridView1.DataKeys [row.RowIndex].Value);
                Response.Write (string.Format ("This would have deleted ProductID {0}<br />", productID));
            }
        }
    }
}
----------------------------------------

 protected void Unnamed1_Click (object sender, EventArgs e) {
     for (var numRows=0; numRows < GridView1.Rows.Count; numRows++)
        {
            if (GridView1.Rows[numRows].RowType == DataControlRowType.DataRow)
            {
                CheckBox cb = (CheckBox)GridView1.Rows[numRows].FindControl("ProductSelector");
                if (cb != null && cb.Checked)
                {
                    int productID = Convert.ToInt32(GridView1.DataKeys[numRows].Value);
                    Response.Write(string.Format("This would have deleted ProductID {0}<br />", productID));
                }
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
861
8
Gpt3D_Clone861_8.cs 1 11
Gpt3D_Clone861_8.cs 12 27
----------------------------------------

protected void Unnamed1_Click (object sender, EventArgs e) {
    foreach (GridViewRow row in GridView1.Rows) {
        if (row.RowType == DataControlRowType.DataRow) {
            CheckBox cb = (CheckBox) row.FindControl ("ProductSelector");
            if (cb != null && cb.Checked) {
                int productID = Convert.ToInt32 (GridView1.DataKeys [row.RowIndex].Value);
                Response.Write (string.Format ("This would have deleted ProductID {0}<br />", productID));
            }
        }
    }
}
----------------------------------------

 protected void Unnamed1_Click (object sender, EventArgs e) {
    for (int i = 0; i < GridView1.Rows.Count; i++)
        {
            if (GridView1.Rows[i].RowType == DataControlRowType.DataRow)
            {
                CheckBox cb = (CheckBox)GridView1.Rows[i].FindControl("ProductSelector");
                if (cb != null && cb.Checked)
                {
                    int productID = Convert.ToInt32(GridView1.DataKeys[i].Value);
                    Response.Write(string.Format("This would have deleted ProductID {0}<br />", productID));
                }
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
862
0
Gpt3D_Clone862_0.cs 1 10
Gpt3D_Clone862_0.cs 11 28
----------------------------------------

public HashSet < TEntity > GetCollection < TEntity > () {
    var type = typeof (TEntity);
    if (type == typeof (Bike))
        return (HashSet < TEntity >) (object) Bikes;
    if (type == typeof (Car))
        return (HashSet < TEntity >) (object) Cars;
    if (type == typeof (Truck))
        return (HashSet < TEntity >) (object) Trucks;
    throw new InvalidOperationException ();
}
----------------------------------------

 public TEntity[] GetCollection<TEntity>()
{
    var type = typeof (TEntity);
    TEntity[] collection = null;
    if (type == typeof(Bike))
        collection = Bikes.ToArray();
    else if (type == typeof(Car))
        collection = Cars.ToArray();
    else if (type == typeof(Truck))
        collection = Trucks.ToArray();
    else
        throw new InvalidOperationException();
    return collection;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
862
1
Gpt3D_Clone862_1.cs 1 10
Gpt3D_Clone862_1.cs 11 28
----------------------------------------

public HashSet < TEntity > GetCollection < TEntity > () {
    var type = typeof (TEntity);
    if (type == typeof (Bike))
        return (HashSet < TEntity >) (object) Bikes;
    if (type == typeof (Car))
        return (HashSet < TEntity >) (object) Cars;
    if (type == typeof (Truck))
        return (HashSet < TEntity >) (object) Trucks;
    throw new InvalidOperationException ();
}
----------------------------------------

 public IEnumerable<TEntity> GetCollection<TEntity>()
{
	var type = typeof(TEntity);
	IEnumerable<TEntity> collection = null;
    if (type == typeof(Bike))
        collection = Bikes;
    else if (type == typeof(Car))
        collection = Cars;
    else if (type == typeof(Truck))
        collection = Trucks;
    else
        throw new InvalidOperationException();
    return collection;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
862
2
Gpt3D_Clone862_2.cs 1 10
Gpt3D_Clone862_2.cs 11 28
----------------------------------------

public HashSet < TEntity > GetCollection < TEntity > () {
    var type = typeof (TEntity);
    if (type == typeof (Bike))
        return (HashSet < TEntity >) (object) Bikes;
    if (type == typeof (Car))
        return (HashSet < TEntity >) (object) Cars;
    if (type == typeof (Truck))
        return (HashSet < TEntity >) (object) Trucks;
    throw new InvalidOperationException ();
}
----------------------------------------

 public ICollection<TEntity> GetCollection<TEntity>()
{
	var type = typeof(TEntity);
	ICollection<TEntity> collection = null;
    if (type == typeof(Bike))
        collection = new Collection<TEntity>(Bikes);
    else if (type == typeof(Car))
        collection = new Collection<TEntity>(Cars);
    else if (type == typeof(Truck))
        collection = new Collection<TEntity>(Trucks);
    else
        throw new InvalidOperationException();
    return collection;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
862
3
Gpt3D_Clone862_3.cs 1 10
Gpt3D_Clone862_3.cs 11 29
----------------------------------------

public HashSet < TEntity > GetCollection < TEntity > () {
    var type = typeof (TEntity);
    if (type == typeof (Bike))
        return (HashSet < TEntity >) (object) Bikes;
    if (type == typeof (Car))
        return (HashSet < TEntity >) (object) Cars;
    if (type == typeof (Truck))
        return (HashSet < TEntity >) (object) Trucks;
    throw new InvalidOperationException ();
}
----------------------------------------

 public HashSet<TEntity> GetCollection<TEntity>()
{
	var type = typeof(TEntity);
    var collection = default(HashSet<TEntity>);
    if (type == typeof(Bike))
        collection = new HashSet<TEntity>(Bikes);
    else if (type == typeof(Car))
        collection = new HashSet<TEntity>(Cars);
    else if (type == typeof(Truck))
        collection = new HashSet<TEntity>(Trucks);
    else
        throw new InvalidOperationException();
    return collection;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
862
4
Gpt3D_Clone862_4.cs 1 10
Gpt3D_Clone862_4.cs 11 28
----------------------------------------

public HashSet < TEntity > GetCollection < TEntity > () {
    var type = typeof (TEntity);
    if (type == typeof (Bike))
        return (HashSet < TEntity >) (object) Bikes;
    if (type == typeof (Car))
        return (HashSet < TEntity >) (object) Cars;
    if (type == typeof (Truck))
        return (HashSet < TEntity >) (object) Trucks;
    throw new InvalidOperationException ();
}
----------------------------------------

 public List<TEntity> GetCollection<TEntity>()
{	
	var type = typeof(TEntity);
    List<TEntity> collection = null;
    if (type == typeof(Bike))
        collection = Bikes.Cast<TEntity>().ToList();
    else if (type == typeof(Car))
        collection = Cars.Cast<TEntity>().ToList();
    else if (type == typeof(Truck))
        collection = Trucks.Cast<TEntity>().ToList();
    else
        throw new InvalidOperationException();
    return collection;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
863
0
Gpt3D_Clone863_0.cs 1 12
Gpt3D_Clone863_0.cs 13 39
----------------------------------------

private void button6_Click (object sender, EventArgs e) {
    string select = (listView1.SelectedItems.Count > 0) ? (listView1.SelectedItems [0].Text) : null;
    if (! string.IsNullOrWhiteSpace (select)) {
        listView1.BeginUpdate ();
        pths.Remove (select);
        rec.Remove (select);
        listView1.EndUpdate ();
        string s = String.Join ("; ", pths.ToArray ());
        string r = String.Join ("; ", rec.ToArray ());
    }
    Disp ();
}
----------------------------------------

 private void button6_Click (object sender, EventArgs e) 
{
    if (listView1.SelectedItems.Count > 0)
    {
        string select = listView1.SelectedItems[0] != null ? listView1.SelectedItems[0].Text.Trim() : string.Empty;
        if(!string.IsNullOrWhiteSpace(select))
        {
            listView1.BeginUpdate();
            pths.Remove(select);
            rec.Remove(select);
            listView1.EndUpdate(); 
            string s = "";
            foreach(string path in pths)
            {
                s = s + "; " + path;
            }
            string r = "";
            foreach(string record in rec)
            {
                r = r + "; " + record;
            }
            Disp();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
863
1
Gpt3D_Clone863_1.cs 1 12
Gpt3D_Clone863_1.cs 13 39
----------------------------------------

private void button6_Click (object sender, EventArgs e) {
    string select = (listView1.SelectedItems.Count > 0) ? (listView1.SelectedItems [0].Text) : null;
    if (! string.IsNullOrWhiteSpace (select)) {
        listView1.BeginUpdate ();
        pths.Remove (select);
        rec.Remove (select);
        listView1.EndUpdate ();
        string s = String.Join ("; ", pths.ToArray ());
        string r = String.Join ("; ", rec.ToArray ());
    }
    Disp ();
}
----------------------------------------

 private void button6_Click(object sender, EventArgs e)
{
    if (listView1.SelectedItems.Count > 0)
    {
        string select = listView1.SelectedItems[0] != null ? listView1.SelectedItems[0].Text.Trim() : string.Empty;
        if(!string.IsNullOrWhiteSpace(select))
        {
            listView1.BeginUpdate();
            pths.Remove(select);
            rec.Remove(select);
            listView1.EndUpdate();
            StringBuilder s = new StringBuilder();
            foreach (string _s in pths)
            {
                s.Append(_s + "; ");
            }
            StringBuilder r = new StringBuilder();
            foreach (string _r in rec)
            {
                r.Append(_r + "; ");
            }
            Disp();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
863
6
Gpt3D_Clone863_6.cs 1 12
Gpt3D_Clone863_6.cs 13 31
----------------------------------------

private void button6_Click (object sender, EventArgs e) {
    string select = (listView1.SelectedItems.Count > 0) ? (listView1.SelectedItems [0].Text) : null;
    if (! string.IsNullOrWhiteSpace (select)) {
        listView1.BeginUpdate ();
        pths.Remove (select);
        rec.Remove (select);
        listView1.EndUpdate ();
        string s = String.Join ("; ", pths.ToArray ());
        string r = String.Join ("; ", rec.ToArray ());
    }
    Disp ();
}
----------------------------------------

 private void button6_Click(object sender, EventArgs e)
{
    if (listView1.SelectedItems.Count > 0)
    {
        string select = listView1.SelectedItems[0].Text;
        if(!string.IsNullOrWhiteSpace(select))
        {
            listView1.BeginUpdate();
            pths.Remove(listView1.SelectedItem);
            rec.Remove(listView1.SelectedItem);
            listView1.EndUpdate();
            string s = string.Join(" ; ", pths.ToList());
            string r = string.Join(" ; ", rec.ToList());
            Disp();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
865
0
Gpt3D_Clone865_0.cs 1 28
Gpt3D_Clone865_0.cs 29 59
----------------------------------------

static void Main (string [] args) {
    memberLocation student, teacher, manager;
    student = new memberLocation ();
    teacher = new memberLocation ();
    manager = new memberLocation ();
    String filePath = "data.txt";
    StreamReader sr = new StreamReader (filePath);
    String fileData = sr.ReadToEnd ();
    student.start = fileData.IndexOf ("[Student]");
    teacher.start = fileData.IndexOf ("[Teacher]");
    manager.start = fileData.IndexOf ("[Manager]");
    student.end = fileData.IndexOf (']', student.start + 9) - 9;
    teacher.end = fileData.IndexOf (']', teacher.start + 9) - 9;
    manager.end = fileData.IndexOf (']', manager.start + 9) - 9;
    String studentStr, teacherStr, managerStr;
    if (student.end > 0)
        studentStr = fileData.Substring (student.start, student.end - student.start);
    else
        studentStr = fileData.Substring (student.start);
    if (teacher.end > 0)
        teacherStr = fileData.Substring (teacher.start, teacher.end - teacher.start);
    else
        teacherStr = fileData.Substring (teacher.start);
    if (manager.end > 0)
        managerStr = fileData.Substring (manager.start, manager.end - manager.start);
    else
        managerStr = fileData.Substring (manager.start);
}
----------------------------------------

  static void Main (string [] args)
{
    memberLocation student, teacher, manager;
    student = new memberLocation ();
    teacher = new memberLocation ();
    manager = new memberLocation ();
    String filePath = "data.txt";
    StreamReader sr = new StreamReader (filePath);
    String fileData = sr.ReadToEnd ();
    int studentIndex = fileData.IndexOf ("[Student]");
    int teacherIndex = fileData.IndexOf ("[Teacher]");
    int managerIndex = fileData.IndexOf ("[Manager]");
    int studentEndIndex = fileData.IndexOf (']', studentIndex + 9) - 9;
    int teacherEndIndex = fileData.IndexOf (']', teacherIndex + 9) - 9;
    int managerEndIndex = fileData.IndexOf (']', managerIndex + 9) - 9;
    String studentStr, teacherStr, managerStr;
    if (studentEndIndex > 0)
        studentStr = fileData.Substring (studentIndex, studentEndIndex - studentIndex);
    else
        studentStr = fileData.Substring (studentIndex);
    if (teacherEndIndex > 0)
        teacherStr = fileData.Substring (teacherIndex, teacherEndIndex - teacherIndex);
    else
        teacherStr = fileData.Substring (teacherIndex);
    if (managerEndIndex > 0)
        managerStr = fileData.Substring (managerIndex, managerEndIndex - managerIndex);
    else
        managerStr = fileData.Substring (managerIndex);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
868
1
Gpt3D_Clone868_1.cs 1 13
Gpt3D_Clone868_1.cs 14 28
----------------------------------------

static void Main (string [] args) {
    List < Phone > phones = new List < Phone > ();
    bool shouldContinue = true;
    do
        {
            phones.Add (GetPhone ());
            Console.Write ("Would like to process another phone? [Y or N]: ", shouldContinue);
            shouldContinue = Console.ReadLine ().ToUpper () == "Y";
        } while (shouldContinue == true);
    if (shouldContinue == false) {
        DisplayPhones (phones);
    }
}
----------------------------------------

	static void Main(string[] args) {
    List<Phone> phones = new List<Phone>();
    bool shouldContinue;
    do {
        phones.Add(GetPhone());
        Console.Write("Would like to process another phone? [Y or N]: ");
        string input = Console.ReadLine();
        shouldContinue = (input == "Y") ? true : false;
    } while (shouldContinue);
    if (!shouldContinue) {
        DisplayPhones(phones);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
868
2
Gpt3D_Clone868_2.cs 1 13
Gpt3D_Clone868_2.cs 14 28
----------------------------------------

static void Main (string [] args) {
    List < Phone > phones = new List < Phone > ();
    bool shouldContinue = true;
    do
        {
            phones.Add (GetPhone ());
            Console.Write ("Would like to process another phone? [Y or N]: ", shouldContinue);
            shouldContinue = Console.ReadLine ().ToUpper () == "Y";
        } while (shouldContinue == true);
    if (shouldContinue == false) {
        DisplayPhones (phones);
    }
}
----------------------------------------

	static void Main(string[] args) {
    List<Phone> phones = new List<Phone>();
    bool shouldContinue;
    do {
        phones.Add(GetPhone());
        Console.Write("Would like to process another phone? [Y or N]: ");
        string input = Console.ReadLine().ToUpper();
        shouldContinue = (input == "Y") ? true : false;
    } while (shouldContinue);
    if (!shouldContinue) {
        DisplayPhones(phones);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
868
5
Gpt3D_Clone868_5.cs 1 13
Gpt3D_Clone868_5.cs 14 28
----------------------------------------

static void Main (string [] args) {
    List < Phone > phones = new List < Phone > ();
    bool shouldContinue = true;
    do
        {
            phones.Add (GetPhone ());
            Console.Write ("Would like to process another phone? [Y or N]: ", shouldContinue);
            shouldContinue = Console.ReadLine ().ToUpper () == "Y";
        } while (shouldContinue == true);
    if (shouldContinue == false) {
        DisplayPhones (phones);
    }
}
----------------------------------------

	static void Main(string[] args) {
    List<Phone> phones = new List<Phone>();
    bool shouldContinue = true;
    while (shouldContinue) {
        phones.Add(GetPhone());
        Console.Write("Would like to process another phone? [Y or N]: ");
        string input = Console.ReadLine();
        shouldContinue = (input.Equals("Y", StringComparison.OrdinalIgnoreCase)) ? true : false;
    } 
    if (!shouldContinue) {
        DisplayPhones(phones);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
868
6
Gpt3D_Clone868_6.cs 1 13
Gpt3D_Clone868_6.cs 14 28
----------------------------------------

static void Main (string [] args) {
    List < Phone > phones = new List < Phone > ();
    bool shouldContinue = true;
    do
        {
            phones.Add (GetPhone ());
            Console.Write ("Would like to process another phone? [Y or N]: ", shouldContinue);
            shouldContinue = Console.ReadLine ().ToUpper () == "Y";
        } while (shouldContinue == true);
    if (shouldContinue == false) {
        DisplayPhones (phones);
    }
}
----------------------------------------

	static void Main(string[] args) {
    List<Phone> phones = new List<Phone>();
    bool shouldContinue = true;
    while (shouldContinue) {
        phones.Add(GetPhone());
        Console.Write("Would like to process another phone? [Y or N]: ");
        string input = Console.ReadLine().ToUpper();
        shouldContinue = (input.Equals("Y")) ? true : false;
    } 
    if (!shouldContinue) {
        DisplayPhones(phones);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
868
8
Gpt3D_Clone868_8.cs 1 13
Gpt3D_Clone868_8.cs 14 27
----------------------------------------

static void Main (string [] args) {
    List < Phone > phones = new List < Phone > ();
    bool shouldContinue = true;
    do
        {
            phones.Add (GetPhone ());
            Console.Write ("Would like to process another phone? [Y or N]: ", shouldContinue);
            shouldContinue = Console.ReadLine ().ToUpper () == "Y";
        } while (shouldContinue == true);
    if (shouldContinue == false) {
        DisplayPhones (phones);
    }
}
----------------------------------------

	static void Main(string[] args) {
    List<Phone> phones = new List<Phone>();
    bool shouldContinue = true;
    while (shouldContinue) {
        phones.Add(GetPhone());
        Console.Write("Would like to process another phone? [Y or N]: ");
        shouldContinue = (Console.ReadLine().ToUpper() == "Y") ? true : false;
    } 
    if (!shouldContinue) {
        DisplayPhones(phones);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
869
1
Gpt3D_Clone869_1.cs 1 16
Gpt3D_Clone869_1.cs 17 46
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    var obj = JToken.ReadFrom (reader);
    if (objectType == typeof (Dictionary < string, TValue >)) {
        var comparer = obj.Value < string > ("Comparer");
        Dictionary < string, TValue > result;
        if (comparer == "OrdinalIgnoreCase") {
            result = new Dictionary < string, TValue > (StringComparer.OrdinalIgnoreCase);
        } else {
            result = new Dictionary < string, TValue > ();
        }
        obj ["Comparer"].Parent.Remove ();
        serializer.Populate (obj.CreateReader (), result);
        return result;
    }
    return obj.ToObject (objectType);
}
----------------------------------------

  public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
{
    JToken obj = JToken.ReadFrom(reader);
    var comparer = obj.Value<string>("Comparer");
    Dictionary<string, TValue> result = null;
    
    if (objectType == typeof(Dictionary<string, TValue>)) {
        switch (comparer)
        {
            //Ignore case
            case "OrdinalIgnoreCase":
                result = new Dictionary<string, TValue>(StringComparer.OrdinalIgnoreCase);
                break;
            //Consider case
            case "Ordinal":
                result = new Dictionary<string, TValue>(StringComparer.Ordinal);
                break;
            default:
                result = new Dictionary<string, TValue>();
                break;
        }
        obj["Comparer"].Parent.Remove();
        serializer.Populate(obj.CreateReader(), result);
        return result;
    }
    return obj.ToObject(objectType);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
870
4
Gpt3D_Clone870_4.cs 1 14
Gpt3D_Clone870_4.cs 15 34
----------------------------------------

public static ScrollViewer FindScrollViewer (FlowDocumentScrollViewer flowDocumentScrollViewer) {
    if (VisualTreeHelper.GetChildrenCount (flowDocumentScrollViewer) == 0) {
        return null;
    }
    DependencyObject firstChild = VisualTreeHelper.GetChild (flowDocumentScrollViewer, 0);
    if (firstChild == null) {
        return null;
    }
    Decorator border = VisualTreeHelper.GetChild (firstChild, 0) as Decorator;
    if (border == null) {
        return null;
    }
    return border.Child as ScrollViewer;
}
----------------------------------------

 ScrollViewer FindScrollViewer(FlowDocumentScrollViewer flowDocumentScrollViewer)
{
    DependencyObject current = VisualTreeHelper.GetChild(flowDocumentScrollViewer, 0);
    while (current != null)
    {
        Decorator border = current as Decorator;
        if (border != null && border.Child is ScrollViewer)
        {
            return (ScrollViewer)border.Child;
        }
        current = VisualTreeHelper.GetChild(current, 0);
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
870
5
Gpt3D_Clone870_5.cs 1 14
Gpt3D_Clone870_5.cs 15 31
----------------------------------------

public static ScrollViewer FindScrollViewer (FlowDocumentScrollViewer flowDocumentScrollViewer) {
    if (VisualTreeHelper.GetChildrenCount (flowDocumentScrollViewer) == 0) {
        return null;
    }
    DependencyObject firstChild = VisualTreeHelper.GetChild (flowDocumentScrollViewer, 0);
    if (firstChild == null) {
        return null;
    }
    Decorator border = VisualTreeHelper.GetChild (firstChild, 0) as Decorator;
    if (border == null) {
        return null;
    }
    return border.Child as ScrollViewer;
}
----------------------------------------

 ScrollViewer FindScrollViewer(FlowDocumentScrollViewer flowDocumentScrollViewer)
{
    Decorator border = null;
    
    if (VisualTreeHelper.GetChildrenCount(flowDocumentScrollViewer) > 0)
    {
        DependencyObject child = VisualTreeHelper.GetChild(flowDocumentScrollViewer, 0);
        if (VisualTreeHelper.GetChildrenCount(child) > 0)
        {
            border = VisualTreeHelper.GetChild(child, 0) as Decorator;
        }
    }
    
    return (border != null) ? border.Child as ScrollViewer : null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
870
6
Gpt3D_Clone870_6.cs 1 14
Gpt3D_Clone870_6.cs 15 32
----------------------------------------

public static ScrollViewer FindScrollViewer (FlowDocumentScrollViewer flowDocumentScrollViewer) {
    if (VisualTreeHelper.GetChildrenCount (flowDocumentScrollViewer) == 0) {
        return null;
    }
    DependencyObject firstChild = VisualTreeHelper.GetChild (flowDocumentScrollViewer, 0);
    if (firstChild == null) {
        return null;
    }
    Decorator border = VisualTreeHelper.GetChild (firstChild, 0) as Decorator;
    if (border == null) {
        return null;
    }
    return border.Child as ScrollViewer;
}
----------------------------------------

 ScrollViewer FindScrollViewer(FlowDocumentScrollViewer flowDocumentScrollViewer)
{
    Decorator border = null;
    if (VisualTreeHelper.GetChildrenCount(flowDocumentScrollViewer) > 0)
    {
        DependencyObject firstChild = VisualTreeHelper.GetChild(flowDocumentScrollViewer, 0);
        if (firstChild != null && VisualTreeHelper.GetChildrenCount(firstChild) > 0)
        {
            border = VisualTreeHelper.GetChild(firstChild, 0) as Decorator;
        }
    }
    
    return (border == null) ? null : border.Child as ScrollViewer;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
870
7
Gpt3D_Clone870_7.cs 1 14
Gpt3D_Clone870_7.cs 15 26
----------------------------------------

public static ScrollViewer FindScrollViewer (FlowDocumentScrollViewer flowDocumentScrollViewer) {
    if (VisualTreeHelper.GetChildrenCount (flowDocumentScrollViewer) == 0) {
        return null;
    }
    DependencyObject firstChild = VisualTreeHelper.GetChild (flowDocumentScrollViewer, 0);
    if (firstChild == null) {
        return null;
    }
    Decorator border = VisualTreeHelper.GetChild (firstChild, 0) as Decorator;
    if (border == null) {
        return null;
    }
    return border.Child as ScrollViewer;
}
----------------------------------------

 ScrollViewer FindScrollViewer (FlowDocumentScrollViewer flowDocumentScrollViewer)
{
    DependencyObject child = VisualTreeHelper.GetChild(flowDocumentScrollViewer, 0);
    Decorator borderChild = VisualTreeHelper.GetChild(child, 0) as Decorator;
    if (borderChild == null || !(borderChild.Child is ScrollViewer)) {
        return null;
    }
    return borderChild.Child as ScrollViewer;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
870
8
Gpt3D_Clone870_8.cs 1 14
Gpt3D_Clone870_8.cs 15 23
----------------------------------------

public static ScrollViewer FindScrollViewer (FlowDocumentScrollViewer flowDocumentScrollViewer) {
    if (VisualTreeHelper.GetChildrenCount (flowDocumentScrollViewer) == 0) {
        return null;
    }
    DependencyObject firstChild = VisualTreeHelper.GetChild (flowDocumentScrollViewer, 0);
    if (firstChild == null) {
        return null;
    }
    Decorator border = VisualTreeHelper.GetChild (firstChild, 0) as Decorator;
    if (border == null) {
        return null;
    }
    return border.Child as ScrollViewer;
}
----------------------------------------

 ScrollViewer FindScrollViewer (FlowDocumentScrollViewer flowDocumentScrollViewer)
{
    DependencyObject firstChild = VisualTreeHelper.GetChild (flowDocumentScrollViewer, 0);
    Decorator border = VisualTreeHelper.GetChild(firstChild, 0) as Decorator;
    return (border == null) ? null : border.Child as ScrollViewer;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
873
3
Gpt3D_Clone873_3.cs 1 23
Gpt3D_Clone873_3.cs 24 40
----------------------------------------

private static IEnumerable < IEnumerable < T > > ClumpIterator < T > (IEnumerable < T > source, int size) {
    Debug.Assert (source != null, "source is null.");
    T [] items = new T [size];
    int count = 0;
    foreach (var item in source) {
        items [count] = item;
        count ++;
        if (count == size) {
            yield return items;
            items = new T [size];
            count = 0;
        }
    }
    if (count > 0) {
        if (count == size)
            yield return items;
        else {
            T [] tempItems = new T [count];
            Array.Copy (items, tempItems, count);
            yield return tempItems;
        }
    }
}
----------------------------------------

	private static IEnumerable<IEnumerable<T>> SplitItemsIterator<T>(IEnumerable<T> source, int size)
{
    List<T> output = new List<T>();
    foreach(T item in source)
    {
        output.Add(item);
        if (output.Count == size)
        {
            yield return output;
            output = new List<T>();
        }
    }
    if (output.Count > 0)
        yield return output;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
873
4
Gpt3D_Clone873_4.cs 1 23
Gpt3D_Clone873_4.cs 24 37
----------------------------------------

private static IEnumerable < IEnumerable < T > > ClumpIterator < T > (IEnumerable < T > source, int size) {
    Debug.Assert (source != null, "source is null.");
    T [] items = new T [size];
    int count = 0;
    foreach (var item in source) {
        items [count] = item;
        count ++;
        if (count == size) {
            yield return items;
            items = new T [size];
            count = 0;
        }
    }
    if (count > 0) {
        if (count == size)
            yield return items;
        else {
            T [] tempItems = new T [count];
            Array.Copy (items, tempItems, count);
            yield return tempItems;
        }
    }
}
----------------------------------------

	private static IEnumerable < IEnumerable < T >> SplitIterator<T>(IEnumerable<T> source, int size) {
    List<T> output = new List<T>();
    foreach(T item in source) {
        output.Add(item);
        if (output.Count == size) {
            yield return output;
            output = new List<T>();
        }
    }
    if (output.Count > 0)
        yield return output;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
874
0
Gpt3D_Clone874_0.cs 1 12
Gpt3D_Clone874_0.cs 13 23
----------------------------------------

public static void DelayedExecute (int millisecondsToDelay, MethodInvoker methodToExecute) {
    Timer timer = new Timer ();
    timer.Interval = millisecondsToDelay;
    timer.Tick += delegate {
        if (timer.Enabled) {
            timer.Stop ();
            methodToExecute.Invoke ();
            timer.Dispose ();
        }
    };
    timer.Start ();
}
----------------------------------------

 public static void DelayedExecute (int millisecondsToDelay, MethodInvoker methodToExecute) {
    CountdownEvent countdownEvent = new CountdownEvent(1);
    Timer timer = new Timer(delegate(object state) {
        methodToExecute.Invoke(); 
        countdownEvent.Signal(); 
    }, null, millisecondsToDelay, 0);
    countdownEvent.Wait();
    timer.Dispose();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
874
1
Gpt3D_Clone874_1.cs 1 12
Gpt3D_Clone874_1.cs 13 23
----------------------------------------

public static void DelayedExecute (int millisecondsToDelay, MethodInvoker methodToExecute) {
    Timer timer = new Timer ();
    timer.Interval = millisecondsToDelay;
    timer.Tick += delegate {
        if (timer.Enabled) {
            timer.Stop ();
            methodToExecute.Invoke ();
            timer.Dispose ();
        }
    };
    timer.Start ();
}
----------------------------------------

 public static void DelayedExecute (int millisecondsToDelay, MethodInvoker methodToExecute) {
    ManualResetEvent manualEvent = new ManualResetEvent(false);
    Timer timer = new Timer (delegate {
        manualEvent.Set();
    },null,millisecondsToDelay,0);
    manualEvent.WaitOne();
    methodToExecute.Invoke ();
    timer.Dispose ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
874
2
Gpt3D_Clone874_2.cs 1 12
Gpt3D_Clone874_2.cs 13 23
----------------------------------------

public static void DelayedExecute (int millisecondsToDelay, MethodInvoker methodToExecute) {
    Timer timer = new Timer ();
    timer.Interval = millisecondsToDelay;
    timer.Tick += delegate {
        if (timer.Enabled) {
            timer.Stop ();
            methodToExecute.Invoke ();
            timer.Dispose ();
        }
    };
    timer.Start ();
}
----------------------------------------

 public static void DelayedExecute (int millisecondsToDelay, MethodInvoker methodToExecute) {
    SemaphoreSlim semaphore = new SemaphoreSlim(0);
    Task.Run(async () => {
        await Task.Delay(millisecondsToDelay);
        semaphore.Release();
    });
    semaphore.Wait();
    methodToExecute.Invoke();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
874
3
Gpt3D_Clone874_3.cs 1 12
Gpt3D_Clone874_3.cs 13 21
----------------------------------------

public static void DelayedExecute (int millisecondsToDelay, MethodInvoker methodToExecute) {
    Timer timer = new Timer ();
    timer.Interval = millisecondsToDelay;
    timer.Tick += delegate {
        if (timer.Enabled) {
            timer.Stop ();
            methodToExecute.Invoke ();
            timer.Dispose ();
        }
    };
    timer.Start ();
}
----------------------------------------

 public static void DelayedExecute (int millisecondsToDelay, MethodInvoker methodToExecute) {
    Thread thread = new Thread(() => {
        SpinWait.SpinUntil(() => Thread.ReentrantContext == millisecondsToDelay);
        methodToExecute.Invoke();
    });
    thread.Start();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
874
4
Gpt3D_Clone874_4.cs 1 12
Gpt3D_Clone874_4.cs 13 22
----------------------------------------

public static void DelayedExecute (int millisecondsToDelay, MethodInvoker methodToExecute) {
    Timer timer = new Timer ();
    timer.Interval = millisecondsToDelay;
    timer.Tick += delegate {
        if (timer.Enabled) {
            timer.Stop ();
            methodToExecute.Invoke ();
            timer.Dispose ();
        }
    };
    timer.Start ();
}
----------------------------------------

 public static void DelayedExecute (int millisecondsToDelay, MethodInvoker methodToExecute) {
    Thread thread = new Thread(() => {
        Thread.Sleep(millisecondsToDelay);
        methodToExecute.Invoke();
    });
    thread.Start();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
874
5
Gpt3D_Clone874_5.cs 1 12
Gpt3D_Clone874_5.cs 13 23
----------------------------------------

public static void DelayedExecute (int millisecondsToDelay, MethodInvoker methodToExecute) {
    Timer timer = new Timer ();
    timer.Interval = millisecondsToDelay;
    timer.Tick += delegate {
        if (timer.Enabled) {
            timer.Stop ();
            methodToExecute.Invoke ();
            timer.Dispose ();
        }
    };
    timer.Start ();
}
----------------------------------------

 public static void DelayedExecute(int millisecondsToDelay, MethodInvoker methodToExecute){
    Stopwatch stopwatch = new Stopwatch();
    stopwatch.Start();
    while(stopwatch.ElapsedMilliseconds <= millisecondsToDelay){
        
    }
    stopwatch.Stop();
    methodToExecute.Invoke();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
874
6
Gpt3D_Clone874_6.cs 1 12
Gpt3D_Clone874_6.cs 13 20
----------------------------------------

public static void DelayedExecute (int millisecondsToDelay, MethodInvoker methodToExecute) {
    Timer timer = new Timer ();
    timer.Interval = millisecondsToDelay;
    timer.Tick += delegate {
        if (timer.Enabled) {
            timer.Stop ();
            methodToExecute.Invoke ();
            timer.Dispose ();
        }
    };
    timer.Start ();
}
----------------------------------------

 public static void DelayedExecute (int millisecondsToDelay, MethodInvoker methodToExecute) {
    Task.Run(async () => {
        await Task.Delay(millisecondsToDelay);
        methodToExecute.Invoke();
    });
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
874
7
Gpt3D_Clone874_7.cs 1 12
Gpt3D_Clone874_7.cs 13 20
----------------------------------------

public static void DelayedExecute (int millisecondsToDelay, MethodInvoker methodToExecute) {
    Timer timer = new Timer ();
    timer.Interval = millisecondsToDelay;
    timer.Tick += delegate {
        if (timer.Enabled) {
            timer.Stop ();
            methodToExecute.Invoke ();
            timer.Dispose ();
        }
    };
    timer.Start ();
}
----------------------------------------

 public static void DelayedExecute (int millisecondsToDelay, MethodInvoker methodToExecute) {
    Task.Factory.StartNew(() => {
        Thread.Sleep(millisecondsToDelay);
        methodToExecute.Invoke();
    });
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
874
8
Gpt3D_Clone874_8.cs 1 12
Gpt3D_Clone874_8.cs 13 18
----------------------------------------

public static void DelayedExecute (int millisecondsToDelay, MethodInvoker methodToExecute) {
    Timer timer = new Timer ();
    timer.Interval = millisecondsToDelay;
    timer.Tick += delegate {
        if (timer.Enabled) {
            timer.Stop ();
            methodToExecute.Invoke ();
            timer.Dispose ();
        }
    };
    timer.Start ();
}
----------------------------------------

 public static async void DelayedExecute (int millisecondsToDelay, MethodInvoker methodToExecute) {
    await Task.Delay(millisecondsToDelay);
    methodToExecute.Invoke();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
874
9
Gpt3D_Clone874_9.cs 1 12
Gpt3D_Clone874_9.cs 13 17
----------------------------------------

public static void DelayedExecute (int millisecondsToDelay, MethodInvoker methodToExecute) {
    Timer timer = new Timer ();
    timer.Interval = millisecondsToDelay;
    timer.Tick += delegate {
        if (timer.Enabled) {
            timer.Stop ();
            methodToExecute.Invoke ();
            timer.Dispose ();
        }
    };
    timer.Start ();
}
----------------------------------------

 public static void DelayedExecute (int millisecondsToDelay, MethodInvoker methodToExecute) {
    Task.Delay(millisecondsToDelay).ContinueWith(_ => methodToExecute.Invoke());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
877
1
Gpt3D_Clone877_1.cs 1 22
Gpt3D_Clone877_1.cs 23 48
----------------------------------------

public override void Serialize (BsonSerializationContext context, BsonSerializationArgs args, T value) {
    var nominalType = args.NominalType;
    var fields = nominalType.GetFields (BindingFlags.Instance | BindingFlags.Public);
    var propsAll = nominalType.GetProperties (BindingFlags.Instance | BindingFlags.Public);
    var props = new List < PropertyInfo > ();
    foreach (var prop in propsAll) {
        if (prop.CanWrite) {
            props.Add (prop);
        }
    }
    var bsonWriter = context.Writer;
    bsonWriter.WriteStartDocument ();
    foreach (var field in fields) {
        bsonWriter.WriteName (field.Name);
        BsonSerializer.Serialize (bsonWriter, field.FieldType, field.GetValue (value));
    }
    foreach (var prop in props) {
        bsonWriter.WriteName (prop.Name);
        BsonSerializer.Serialize (bsonWriter, prop.PropertyType, prop.GetValue (value, null));
    }
    bsonWriter.WriteEndDocument ();
}
----------------------------------------

 public override void Serialize(BsonSerializationContext context, BsonSerializationArgs args, T value)
{
    var type = args.NominalType;
    var bsonWriter = context.Writer;
    bsonWriter.WriteStartDocument();
    type.GetFields(BindingFlags.Instance | BindingFlags.Public)
        .Select(field =>
            {
                bsonWriter.WriteName(field.Name);
                return BsonSerializer.Serialize(bsonWriter, field.FieldType, field.GetValue(value));
            })
        .ToList();
    type.GetProperties(BindingFlags.Instance | BindingFlags.Public)
        .Where(prop => prop.CanWrite)
        .Select(prop =>
            {
                bsonWriter.WriteName(prop.Name);
                return BsonSerializer.Serialize(bsonWriter, prop.PropertyType, prop.GetValue(value, null));
            }).ToList();
    bsonWriter.WriteEndDocument();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
877
7
Gpt3D_Clone877_7.cs 1 22
Gpt3D_Clone877_7.cs 23 50
----------------------------------------

public override void Serialize (BsonSerializationContext context, BsonSerializationArgs args, T value) {
    var nominalType = args.NominalType;
    var fields = nominalType.GetFields (BindingFlags.Instance | BindingFlags.Public);
    var propsAll = nominalType.GetProperties (BindingFlags.Instance | BindingFlags.Public);
    var props = new List < PropertyInfo > ();
    foreach (var prop in propsAll) {
        if (prop.CanWrite) {
            props.Add (prop);
        }
    }
    var bsonWriter = context.Writer;
    bsonWriter.WriteStartDocument ();
    foreach (var field in fields) {
        bsonWriter.WriteName (field.Name);
        BsonSerializer.Serialize (bsonWriter, field.FieldType, field.GetValue (value));
    }
    foreach (var prop in props) {
        bsonWriter.WriteName (prop.Name);
        BsonSerializer.Serialize (bsonWriter, prop.PropertyType, prop.GetValue (value, null));
    }
    bsonWriter.WriteEndDocument ();
}
----------------------------------------

 public override void Serialize(BsonSerializationContext context, BsonSerializationArgs args, T value) {
            var nominalType = args.NominalType;
            var bsonWriter = context.Writer;
            bsonWriter.WriteStartDocument();
            foreach (var field in nominalType.GetFields(BindingFlags.Instance | BindingFlags.Public))
            {
                bsonWriter.WriteName(field.Name);
                BsonSerializer.Serialize(bsonWriter, field.FieldType, field.GetValue(value));
            }
            foreach (var prop in GetWriteableProperties(nominalType))
            {
                bsonWriter.WriteName(prop.Name);
                BsonSerializer.Serialize(bsonWriter, prop.PropertyType, prop.GetValue(value, null));
            }
            bsonWriter.WriteEndDocument();
        }
        
        private List < PropertyInfo > GetWriteableProperties(Type type)
        {
            var propsAll = type.GetProperties(BindingFlags.Instance | BindingFlags.Public);
            return propsAll.Where(prop => prop.CanWrite).ToList(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
877
8
Gpt3D_Clone877_8.cs 1 22
Gpt3D_Clone877_8.cs 23 47
----------------------------------------

public override void Serialize (BsonSerializationContext context, BsonSerializationArgs args, T value) {
    var nominalType = args.NominalType;
    var fields = nominalType.GetFields (BindingFlags.Instance | BindingFlags.Public);
    var propsAll = nominalType.GetProperties (BindingFlags.Instance | BindingFlags.Public);
    var props = new List < PropertyInfo > ();
    foreach (var prop in propsAll) {
        if (prop.CanWrite) {
            props.Add (prop);
        }
    }
    var bsonWriter = context.Writer;
    bsonWriter.WriteStartDocument ();
    foreach (var field in fields) {
        bsonWriter.WriteName (field.Name);
        BsonSerializer.Serialize (bsonWriter, field.FieldType, field.GetValue (value));
    }
    foreach (var prop in props) {
        bsonWriter.WriteName (prop.Name);
        BsonSerializer.Serialize (bsonWriter, prop.PropertyType, prop.GetValue (value, null));
    }
    bsonWriter.WriteEndDocument ();
}
----------------------------------------

 public override void Serialize (BsonSerializationContext context, BsonSerializationArgs args, T value) {
                var nominalType = args.NominalType;
                var bsonWriter = context.Writer;
                bsonWriter.WriteStartDocument ();
            
                foreach (var field in nominalType.GetFields (BindingFlags.Instance | BindingFlags.Public)) {
                    bsonWriter.WriteName (field.Name);
                    BsonSerializer.Serialize (bsonWriter, field.FieldType, field.GetValue (value));
                }
            
                foreach (var prop in GetWriteableProperties (nominalType)) {
                    bsonWriter.WriteName (prop.Name);
                    BsonSerializer.Serialize (bsonWriter, prop.PropertyType, prop.GetValue (value, null));
                }
            
                bsonWriter.WriteEndDocument ();
            }
            private IEnumerable < PropertyInfo > GetWriteableProperties(Type type)
            {
                var propsAll = type.GetProperties(BindingFlags.Instance | BindingFlags.Public);
                return propsAll.Where(prop => prop.CanWrite); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
878
0
Gpt3D_Clone878_0.cs 1 15
Gpt3D_Clone878_0.cs 16 49
----------------------------------------

static int [,] GetLCSDifferenceMatrix < T > (Collection < T > baseline, Collection < T > revision) {
    int [,] matrix = new int [baseline.Count + 1, revision.Count + 1];
    for (int baselineIndex = 0; baselineIndex < baseline.Count; baselineIndex ++) {
        for (int revisionIndex = 0; revisionIndex < revision.Count; revisionIndex ++) {
            if (baseline [baselineIndex].Equals (revision [revisionIndex])) {
                matrix [baselineIndex + 1, revisionIndex + 1] = matrix [baselineIndex, revisionIndex] + 1;
            } else {
                int possibilityOne = matrix [baselineIndex + 1, revisionIndex];
                int possibilityTwo = matrix [baselineIndex, revisionIndex + 1];
                matrix [baselineIndex + 1, revisionIndex + 1] = Math.Max (possibilityOne, possibilityTwo);
            }
        }
    }
    return matrix;
}
----------------------------------------

 static int [,] GetLCSDifferenceMatrix < T > (Collection < T > baseline, Collection < T > revision) 
    {
        int [,] matrix = new int [baseline.Count + 1, revision.Count + 1];
        for (int baselineIndex = 0; baselineIndex < baseline.Count; baselineIndex ++) 
        {
            for (int revisionIndex = 0; revisionIndex < revision.Count; revisionIndex ++) 
            {
                if (baseline [baselineIndex].Equals (revision [revisionIndex])) 
                {
                    matrix [baselineIndex + 1, revisionIndex + 1] = matrix [baselineIndex, revisionIndex] + 1;
                } 
                else 
                {
                    int possibilityOne = matrix [baselineIndex + 1, revisionIndex];
                    int possibilityTwo = matrix [baselineIndex, revisionIndex + 1];
                    matrix [baselineIndex + 1, revisionIndex + 1] = GreatestVal(possibilityOne, possibilityTwo);
                }
            }
        }
        return matrix;
    } 
    
   private static int GreatestVal (int num1, int num2)
    {
        int largestVal = 0;
        if( num1 > num2)
            largestVal = num1;
        else 
            largestVal = num2;
        
        return largestVal;
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
878
1
Gpt3D_Clone878_1.cs 1 15
Gpt3D_Clone878_1.cs 16 70
----------------------------------------

static int [,] GetLCSDifferenceMatrix < T > (Collection < T > baseline, Collection < T > revision) {
    int [,] matrix = new int [baseline.Count + 1, revision.Count + 1];
    for (int baselineIndex = 0; baselineIndex < baseline.Count; baselineIndex ++) {
        for (int revisionIndex = 0; revisionIndex < revision.Count; revisionIndex ++) {
            if (baseline [baselineIndex].Equals (revision [revisionIndex])) {
                matrix [baselineIndex + 1, revisionIndex + 1] = matrix [baselineIndex, revisionIndex] + 1;
            } else {
                int possibilityOne = matrix [baselineIndex + 1, revisionIndex];
                int possibilityTwo = matrix [baselineIndex, revisionIndex + 1];
                matrix [baselineIndex + 1, revisionIndex + 1] = Math.Max (possibilityOne, possibilityTwo);
            }
        }
    }
    return matrix;
}
----------------------------------------

 static int [,] GetLCSDifferenceMatrix < T > (Collection < T > baseline, Collection < T > revision) 
    {
        int [,] matrix = new int [baseline.Count + 1, revision.Count + 1];
        for (int baselineIndex = 0; baselineIndex < baseline.Count; baselineIndex ++) {
            for (int revisionIndex = 0; revisionIndex < revision.Count; revisionIndex ++) {
                if (baseline [baselineIndex].Equals (revision [revisionIndex])) {
                    matrix [baselineIndex + 1, revisionIndex + 1] = matrix [baselineIndex, revisionIndex] + 1;
                } else {
                    int possibilityOne = matrix [baselineIndex + 1, revisionIndex];
                    int possibilityTwo = matrix [baselineIndex, revisionIndex + 1];
                    int bigger = Maximum (possibilityOne, possibilityTwo);
                    matrix [baselineIndex + 1, revisionIndex + 1] = bigger;
                }
            }
        }
        return matrix;
    } 
    public static int Maximum(int number1, int number2) 
    {
        if (number1 > number2) 
            return number1;
        else 
            return number2;
}   
 static int [,] GetLCSDifferenceMatrix < T > (Collection < T > baseline, Collection < T > revision) 
    {
        int [,] matrix = new int [baseline.Count + 1, revision.Count + 1];
        for (int baselineIndex = 0; baselineIndex < baseline.Count; baselineIndex ++) {
            for (int revisionIndex = 0; revisionIndex < revision.Count; revisionIndex ++) {
                if (baseline [baselineIndex].Equals (revision [revisionIndex])) {
                    matrix [baselineIndex + 1, revisionIndex + 1] = matrix [baselineIndex, revisionIndex] + 1;
                } else {
                    int possibilityOne = matrix [baselineIndex + 1, revisionIndex];
                    int possibilityTwo = matrix [baselineIndex, revisionIndex + 1];
                    matrix [baselineIndex + 1, revisionIndex + 1] = FindMax (possibilityOne, possibilityTwo);
                }
            }
        }
        return matrix;
    } 
   private static int FindMax (int num1, int num2) 
    {
       int maxNum = 0;
       if (num1 > num2) 
            maxNum = num1;
       else 
            maxNum = num2;
        
       return maxNum;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
878
2
Gpt3D_Clone878_2.cs 1 15
Gpt3D_Clone878_2.cs 16 41
----------------------------------------

static int [,] GetLCSDifferenceMatrix < T > (Collection < T > baseline, Collection < T > revision) {
    int [,] matrix = new int [baseline.Count + 1, revision.Count + 1];
    for (int baselineIndex = 0; baselineIndex < baseline.Count; baselineIndex ++) {
        for (int revisionIndex = 0; revisionIndex < revision.Count; revisionIndex ++) {
            if (baseline [baselineIndex].Equals (revision [revisionIndex])) {
                matrix [baselineIndex + 1, revisionIndex + 1] = matrix [baselineIndex, revisionIndex] + 1;
            } else {
                int possibilityOne = matrix [baselineIndex + 1, revisionIndex];
                int possibilityTwo = matrix [baselineIndex, revisionIndex + 1];
                matrix [baselineIndex + 1, revisionIndex + 1] = Math.Max (possibilityOne, possibilityTwo);
            }
        }
    }
    return matrix;
}
----------------------------------------

 static int [,] GetLCSDifferenceMatrix < T > (Collection < T > baseline, Collection < T > revision) 
    {
        int [,] matrix = new int [baseline.Count + 1, revision.Count + 1];
        for (int baselineIndex = 0; baselineIndex < baseline.Count; baselineIndex ++) {
            for (int revisionIndex = 0; revisionIndex < revision.Count; revisionIndex ++) {
                if (baseline [baselineIndex].Equals (revision [revisionIndex])) {
                    matrix [baselineIndex + 1, revisionIndex + 1] = matrix [baselineIndex, revisionIndex] + 1;
                } else {
                    int possibilityOne = matrix [baselineIndex + 1, revisionIndex];
                    int possibilityTwo = matrix [baselineIndex, revisionIndex + 1];
                    matrix [baselineIndex + 1, revisionIndex + 1] = GreaterNumber (possibilityOne, possibilityTwo);
                }
            }
        }
        return matrix;
    } 
    public static int GreaterNumber(int number1, int number2) 
    {
        if (number1 >= number2) 
            return number1;
        else 
            return number2;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
878
3
Gpt3D_Clone878_3.cs 1 15
Gpt3D_Clone878_3.cs 16 39
----------------------------------------

static int [,] GetLCSDifferenceMatrix < T > (Collection < T > baseline, Collection < T > revision) {
    int [,] matrix = new int [baseline.Count + 1, revision.Count + 1];
    for (int baselineIndex = 0; baselineIndex < baseline.Count; baselineIndex ++) {
        for (int revisionIndex = 0; revisionIndex < revision.Count; revisionIndex ++) {
            if (baseline [baselineIndex].Equals (revision [revisionIndex])) {
                matrix [baselineIndex + 1, revisionIndex + 1] = matrix [baselineIndex, revisionIndex] + 1;
            } else {
                int possibilityOne = matrix [baselineIndex + 1, revisionIndex];
                int possibilityTwo = matrix [baselineIndex, revisionIndex + 1];
                matrix [baselineIndex + 1, revisionIndex + 1] = Math.Max (possibilityOne, possibilityTwo);
            }
        }
    }
    return matrix;
}
----------------------------------------

  static int [,] GetLCSDifferenceMatrix < T > (Collection < T > baseline, Collection < T > revision) 
    {
        int [,] matrix = new int [baseline.Count + 1, revision.Count + 1];
        for (int baselineIndex = 0; baselineIndex < baseline.Count; baselineIndex ++) {
            for (int revisionIndex = 0; revisionIndex < revision.Count; revisionIndex ++) {
                if (baseline [baselineIndex].Equals (revision [revisionIndex])) {
                    matrix [baselineIndex + 1, revisionIndex + 1] = matrix [baselineIndex, revisionIndex] + 1;
                } else {
                    int possibilityOne = matrix [baselineIndex + 1, revisionIndex];
                    int possibilityTwo = matrix [baselineIndex, revisionIndex + 1];
                    matrix [baselineIndex + 1, revisionIndex + 1] = Math.maxComparing (possibilityOne, possibilityTwo);
                }
            }
        }
        return matrix;
    } 
  private static int maxComparing (int num1, int num2)
    {
        if (num1 > num2) return num1;
        else return num2;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
878
4
Gpt3D_Clone878_4.cs 1 15
Gpt3D_Clone878_4.cs 16 39
----------------------------------------

static int [,] GetLCSDifferenceMatrix < T > (Collection < T > baseline, Collection < T > revision) {
    int [,] matrix = new int [baseline.Count + 1, revision.Count + 1];
    for (int baselineIndex = 0; baselineIndex < baseline.Count; baselineIndex ++) {
        for (int revisionIndex = 0; revisionIndex < revision.Count; revisionIndex ++) {
            if (baseline [baselineIndex].Equals (revision [revisionIndex])) {
                matrix [baselineIndex + 1, revisionIndex + 1] = matrix [baselineIndex, revisionIndex] + 1;
            } else {
                int possibilityOne = matrix [baselineIndex + 1, revisionIndex];
                int possibilityTwo = matrix [baselineIndex, revisionIndex + 1];
                matrix [baselineIndex + 1, revisionIndex + 1] = Math.Max (possibilityOne, possibilityTwo);
            }
        }
    }
    return matrix;
}
----------------------------------------

 static int [,] GetLCSDifferenceMatrix < T > (Collection < T > baseline, Collection < T > revision) 
    {
        int [,] matrix = new int [baseline.Count + 1, revision.Count + 1];
        for (int baselineIndex = 0; baselineIndex < baseline.Count; baselineIndex ++) {
            for (int revisionIndex = 0; revisionIndex < revision.Count; revisionIndex ++) {
                if (baseline [baselineIndex].Equals (revision [revisionIndex])) {
                    matrix [baselineIndex + 1, revisionIndex + 1] = matrix [baselineIndex, revisionIndex] + 1;
                } else {
                    int possibilityOne = matrix [baselineIndex + 1, revisionIndex];
                    int possibilityTwo = matrix [baselineIndex, revisionIndex + 1];
                    matrix [baselineIndex + 1, revisionIndex + 1] = max (possibilityOne, possibilityTwo);
                }
            }
        }
        return matrix;
    } 
   private static int max (int num1, int num2) 
   {
        if (num1 >= num2) return num1;
        else return num2;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
878
5
Gpt3D_Clone878_5.cs 1 15
Gpt3D_Clone878_5.cs 16 70
----------------------------------------

static int [,] GetLCSDifferenceMatrix < T > (Collection < T > baseline, Collection < T > revision) {
    int [,] matrix = new int [baseline.Count + 1, revision.Count + 1];
    for (int baselineIndex = 0; baselineIndex < baseline.Count; baselineIndex ++) {
        for (int revisionIndex = 0; revisionIndex < revision.Count; revisionIndex ++) {
            if (baseline [baselineIndex].Equals (revision [revisionIndex])) {
                matrix [baselineIndex + 1, revisionIndex + 1] = matrix [baselineIndex, revisionIndex] + 1;
            } else {
                int possibilityOne = matrix [baselineIndex + 1, revisionIndex];
                int possibilityTwo = matrix [baselineIndex, revisionIndex + 1];
                matrix [baselineIndex + 1, revisionIndex + 1] = Math.Max (possibilityOne, possibilityTwo);
            }
        }
    }
    return matrix;
}
----------------------------------------

 static int [,] GetLCSDifferenceMatrix < T > (Collection < T > baseline, Collection < T > revision) 
    {
        int [,] matrix = new int [baseline.Count + 1, revision.Count + 1];
        for (int baselineIndex = 0; baselineIndex < baseline.Count; baselineIndex ++) {
            for (int revisionIndex = 0; revisionIndex < revision.Count; revisionIndex ++) {
                if (baseline [baselineIndex].Equals (revision [revisionIndex])) {
                    matrix [baselineIndex + 1, revisionIndex + 1] = matrix [baselineIndex, revisionIndex] + 1;
                } else {
                    int possibilityOne = matrix [baselineIndex + 1, revisionIndex];
                    int possibilityTwo = matrix [baselineIndex, revisionIndex + 1];
                    int bigger = Maximum (possibilityOne, possibilityTwo);
                    matrix [baselineIndex + 1, revisionIndex + 1] = bigger;
                }
            }
        }
        return matrix;
    } 
    public static int Maximum(int number1, int number2) 
    {
        if (number1 > number2) 
            return number1;
        else 
            return number2;
}   
 static int [,] GetLCSDifferenceMatrix < T > (Collection < T > baseline, Collection < T > revision) 
    {
        int [,] matrix = new int [baseline.Count + 1, revision.Count + 1];
        for (int baselineIndex = 0; baselineIndex < baseline.Count; baselineIndex ++) {
            for (int revisionIndex = 0; revisionIndex < revision.Count; revisionIndex ++) {
                if (baseline [baselineIndex].Equals (revision [revisionIndex])) {
                    matrix [baselineIndex + 1, revisionIndex + 1] = matrix [baselineIndex, revisionIndex] + 1;
                } else {
                    int possibilityOne = matrix [baselineIndex + 1, revisionIndex];
                    int possibilityTwo = matrix [baselineIndex, revisionIndex + 1];
                    matrix [baselineIndex + 1, revisionIndex + 1] = FindMax (possibilityOne, possibilityTwo);
                }
            }
        }
        return matrix;
    } 
   private static int FindMax (int num1, int num2) 
    {
       int maxNum = 0;
       if (num1 > num2) 
            maxNum = num1;
       else 
            maxNum = num2;
        
       return maxNum;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
878
6
Gpt3D_Clone878_6.cs 1 15
Gpt3D_Clone878_6.cs 16 39
----------------------------------------

static int [,] GetLCSDifferenceMatrix < T > (Collection < T > baseline, Collection < T > revision) {
    int [,] matrix = new int [baseline.Count + 1, revision.Count + 1];
    for (int baselineIndex = 0; baselineIndex < baseline.Count; baselineIndex ++) {
        for (int revisionIndex = 0; revisionIndex < revision.Count; revisionIndex ++) {
            if (baseline [baselineIndex].Equals (revision [revisionIndex])) {
                matrix [baselineIndex + 1, revisionIndex + 1] = matrix [baselineIndex, revisionIndex] + 1;
            } else {
                int possibilityOne = matrix [baselineIndex + 1, revisionIndex];
                int possibilityTwo = matrix [baselineIndex, revisionIndex + 1];
                matrix [baselineIndex + 1, revisionIndex + 1] = Math.Max (possibilityOne, possibilityTwo);
            }
        }
    }
    return matrix;
}
----------------------------------------

 static int [,] GetLCSDifferenceMatrix < T > (Collection < T > baseline, Collection < T > revision) 
    {
        int [,] matrix = new int [baseline.Count + 1, revision.Count + 1];
        for (int baselineIndex = 0; baselineIndex < baseline.Count; baselineIndex ++) {
            for (int revisionIndex = 0; revisionIndex < revision.Count; revisionIndex ++) {
                if (baseline [baselineIndex].Equals (revision [revisionIndex])) {
                    matrix [baselineIndex + 1, revisionIndex + 1] = matrix [baselineIndex, revisionIndex] + 1;
                } else {
                    int possibilityOne = matrix [baselineIndex + 1, revisionIndex];
                    int possibilityTwo = matrix [baselineIndex, revisionIndex + 1];
                    matrix [baselineIndex + 1, revisionIndex + 1] = comparison (possibilityOne, possibilityTwo);
                }
            }
        }
        return matrix;
    } 
    private static int comparison (int num1, int num2) 
    {
        if (num1 > num2) return num1;
        else return num2;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
879
6
Gpt3D_Clone879_6.cs 1 13
Gpt3D_Clone879_6.cs 14 26
----------------------------------------

void browser_DocumentCompleted (object sender, WebBrowserDocumentCompletedEventArgs e) {
    WebBrowser browser = (WebBrowser) sender;
    HtmlElement expandDetails = browser.Document.GetElementById ("form:SummarySubView:closedToggleControl");
    if (expandDetails == null) {
    } else {
        expandDetails.InvokeMember ("click");
        while (expandDetails != null) {
            expandDetails = browser.Document.GetElementById ("form:SummarySubView0:closedToggleControl");
            Application.DoEvents ();
            System.Threading.Thread.Sleep (200);
        }
    }
}
----------------------------------------

 void browser_DocumentCompleted (object sender, WebBrowserDocumentCompletedEventArgs e) { 
   WebBrowser browser = (WebBrowser)sender; 
   HtmlElement expandDetails = browser.Document.GetElementById ("form:SummarySubView:closedToggleControl"); 
   if (expandDetails != null) { 
        System.Timers.Timer timer = new System.Timers.Timer (200); 
        expandDetails.InvokeMember ("click"); 
        while (expandDetails != null && timer.Enabled) { 
           expandDetails = browser.Document.GetElementById ("form:SummarySubView0:closedToggleControl"); 
        } 
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
87
3
Gpt3D_Clone87_3.cs 1 20
Gpt3D_Clone87_3.cs 21 43
----------------------------------------

public void question () {
    switch (questionNr) {
        case 1 :
            questionLabel.Text = "What is Chuck's full name?";
            ans1.Text = "Charles Irving Bartowski";
            ans2.Text = "Charles Richard Bartowski";
            ans3.Text = "Charles Luke Bartowski";
            ans4.Text = "Zachary Strahovski";
            break;
        case 2 :
            questionLabel.Text = "Who/what is Orion?";
            ans1.Text = "Original name of the Intersect";
            ans2.Text = "Alias of a secret mission";
            ans3.Text = "Morgan's Xbox";
            ans4.Text = "Chuck's father";
            break;
        case 3 :
            break;
    }
}
----------------------------------------

 
public void question (int questionNr) {
                switch (questionNr) {
                    case 1 :
                        setQuestion(questionLabel, ans1, ans2, ans3, ans4, "What is Chuck's full name?", "Charles Irving Bartowski", "Charles Richard Bartowski", "Charles Luke Bartowski", "Zachary Strahovski");
                        break;
                    case 2 :
                        setQuestion(questionLabel, ans1, ans2, ans3, ans4, "Who/what is Orion?", "Original name of the Intersect", "Alias of a secret mission", "Morgan's Xbox", "Chuck's father");
                        break;
                    case 3 :
                        break;
                }
            }
            public void setQuestion(TextView questionLabel, TextView ans1, TextView ans2, TextView ans3, TextView ans4, String question, String a1, String a2, String a3, String a4) {
                questionLabel.Text = question; 
                ans1.Text = a1;
                ans2.Text = a2;
                ans3.Text = a3;
                ans4.Text = a4;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
87
4
Gpt3D_Clone87_4.cs 1 20
Gpt3D_Clone87_4.cs 21 51
----------------------------------------

public void question () {
    switch (questionNr) {
        case 1 :
            questionLabel.Text = "What is Chuck's full name?";
            ans1.Text = "Charles Irving Bartowski";
            ans2.Text = "Charles Richard Bartowski";
            ans3.Text = "Charles Luke Bartowski";
            ans4.Text = "Zachary Strahovski";
            break;
        case 2 :
            questionLabel.Text = "Who/what is Orion?";
            ans1.Text = "Original name of the Intersect";
            ans2.Text = "Alias of a secret mission";
            ans3.Text = "Morgan's Xbox";
            ans4.Text = "Chuck's father";
            break;
        case 3 :
            break;
    }
}
----------------------------------------

 
public void question (int questionNr) {
                switch (questionNr) {
                    case 1 :
                        askQuestion(questionLabel, ans1, ans2, ans3, ans4, questionNr);
                        break;
                    case 2 :
                        askQuestion(questionLabel, ans1, ans2, ans3, ans4, questionNr);
                        break;
                    case 3 :
                        break;
                }
            }
            public void askQuestion(TextView questionLabel, TextView ans1, TextView ans2, TextView ans3, TextView ans4, int questionNr) {
                if (questionNr == 1) {
                    questionLabel.Text = "What is Chuck's full name?";
                    ans1.Text = "Charles Irving Bartowski";
                    ans2.Text = "Charles Richard Bartowski";
                    ans3.Text = "Charles Luke Bartowski";
                    ans4.Text = "Zachary Strahovski";
                } else if (questionNr == 2) {
                    questionLabel.Text = "Who/what is Orion?";
                    ans1.Text = "Original name of the Intersect";
                    ans2.Text = "Alias of a secret mission";
                    ans3.Text = "Morgan's Xbox";
                    ans4.Text = "Chuck's father";
                } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
87
5
Gpt3D_Clone87_5.cs 1 20
Gpt3D_Clone87_5.cs 21 66
----------------------------------------

public void question () {
    switch (questionNr) {
        case 1 :
            questionLabel.Text = "What is Chuck's full name?";
            ans1.Text = "Charles Irving Bartowski";
            ans2.Text = "Charles Richard Bartowski";
            ans3.Text = "Charles Luke Bartowski";
            ans4.Text = "Zachary Strahovski";
            break;
        case 2 :
            questionLabel.Text = "Who/what is Orion?";
            ans1.Text = "Original name of the Intersect";
            ans2.Text = "Alias of a secret mission";
            ans3.Text = "Morgan's Xbox";
            ans4.Text = "Chuck's father";
            break;
        case 3 :
            break;
    }
}
----------------------------------------

// 5.
// HashMap<Integer, String[]> questions = new HashMap<>(); 
// questions.put(1, new String[]{"What is Chuck's full name?", "Charles Irving Bartowski", "Charles Richard Bartowski", "Charles Luke Bartowski", "Zachary Strahovski"}); 
// questions.put(2, new String[]{"Who/what is Orion?", "Original name of the Intersect", "Alias of a secret mission", "Morgan's Xbox", "Chuck's father"})
// public void question (int questionNr) {
//     if (questions.containsKey(questionNr)) { 
//         String[] questionDetails = questions.get(questionNr);
//         questionLabel.Text = questionDetails[0];
//         ans1.Text = questionDetails[1];
//         ans2.Text = questionDetails[2];
//         ans3.Text = questionDetails[3];
//         ans4.Text = questionDetails[4]; 
//     }
// }
 public void question (int questionNr) {
                switch (questionNr) {
                    case 1 :
                        askQuestion(1);
                        break;
                    case 2 :
                        askQuestion(2);
                        break;
                    case 3 :
                        break;
                }
            }
            public void askQuestion(int questionNr) {
                if (questionNr == 1) {
                    questionLabel.Text = "What is Chuck's full name?";
                    ans1.Text = "Charles Irving Bartowski";
                    ans2.Text = "Charles Richard Bartowski";
                    ans3.Text = "Charles Luke Bartowski";
                    ans4.Text = "Zachary Strahovski";
                } else if (questionNr == 2) {
                    questionLabel.Text = "Who/what is Orion?";
                    ans1.Text = "Original name of the Intersect";
                    ans2.Text = "Alias of a secret mission";
                    ans3.Text = "Morgan's Xbox";
                    ans4.Text = "Chuck's father";
                } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
87
6
Gpt3D_Clone87_6.cs 1 20
Gpt3D_Clone87_6.cs 21 44
----------------------------------------

public void question () {
    switch (questionNr) {
        case 1 :
            questionLabel.Text = "What is Chuck's full name?";
            ans1.Text = "Charles Irving Bartowski";
            ans2.Text = "Charles Richard Bartowski";
            ans3.Text = "Charles Luke Bartowski";
            ans4.Text = "Zachary Strahovski";
            break;
        case 2 :
            questionLabel.Text = "Who/what is Orion?";
            ans1.Text = "Original name of the Intersect";
            ans2.Text = "Alias of a secret mission";
            ans3.Text = "Morgan's Xbox";
            ans4.Text = "Chuck's father";
            break;
        case 3 :
            break;
    }
}
----------------------------------------

 
public void displayQuestion(int questionNr) {
                // Initialize class variables
                switch (questionNr) {
                    case 1 :
                        setupQuestion("What is Chuck's full name?", "Charles Irving Bartowski", "Charles Richard Bartowski", "Charles Luke Bartowski", "Zachary Strahovski");
                        break;
                    case 2 :
                        setupQuestion("Who/what is Orion?", "Original name of the Intersect", "Alias of a secret mission", "Morgan's Xbox", "Chuck's father");
                        break;
                    case 3 :
                        break;
                }
            }
            public void setupQuestion(String questionLabel, String a1, String a2, String a3, String a4) {
                this.questionLabel.Text = questionLabel; 
                ans1.Text = a1;
                ans2.Text = a2;
                ans3.Text = a3;
                ans4.Text = a4;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
882
4
Gpt3D_Clone882_4.cs 1 39
Gpt3D_Clone882_4.cs 40 69
----------------------------------------

private void PopulateBlock (RichTextBlock Blocker) {
    bool firstItem = true;
    int firstLength = 0;
    Paragraph paraItem = null;
    Run itemRun = null;
    string CurrentIsle = "None";
    foreach (Grocery j in Grocs) {
        if (j.Isle != CurrentIsle) {
            if ((CurrentIsle != "None") && (! firstItem)) {
                paraItem.Inlines.Add (itemRun);
                Blocker.Blocks.Add (paraItem);
            }
            CurrentIsle = j.Isle;
            firstItem = true;
            Paragraph paraIsle = new Paragraph ();
            Run paraRan = new Run ();
            paraRan.Text = "     " + j.Isle;
            paraIsle.Inlines.Add (paraRan);
            Blocker.Blocks.Add (paraIsle);
        }
        if (firstItem) {
            paraItem = new Paragraph ();
            itemRun = new Run ();
            itemRun.Text = "        [] " + j.Item;
            firstLength = j.Item.Length;
            firstItem = false;
        } else {
            firstItem = true;
            string s = new string (' ', 30 - firstLength);
            itemRun.Text += s + "[] " + j.Item;
            paraItem.Inlines.Add (itemRun);
            Blocker.Blocks.Add (paraItem);
        }
    }
    if (! firstItem) {
        paraItem.Inlines.Add (itemRun);
        Blocker.Blocks.Add (paraItem);
    }
}
----------------------------------------

  private void PopulateBlock(RichTextBlock Blocker)
    {
        string CurrentIsle = "None";
        int firstLength = 0;
        Paragraph paraItem = null;
        Run itemRun = null;
        foreach (Grocery j in Grocs)
        {
            if (CurrentIsle != j.Isle)
            {
                CurrentIsle = j.Isle;
                paraItem = new Paragraph();
                Run paraRan = new Run();
                paraRan.Text = "     " + j.Isle;
                paraItem.Inlines.Add(paraRan);
                Blocker.Blocks.Add(paraItem);
            }
            paraItem = new Paragraph();
            itemRun = new Run();
            itemRun.Text = "        [] " + j.Item;
            firstLength = j.Item.Length;
            paraItem.Inlines.Add(itemRun);
            Blocker.Blocks.Add(paraItem); 
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
882
5
Gpt3D_Clone882_5.cs 1 39
Gpt3D_Clone882_5.cs 40 61
----------------------------------------

private void PopulateBlock (RichTextBlock Blocker) {
    bool firstItem = true;
    int firstLength = 0;
    Paragraph paraItem = null;
    Run itemRun = null;
    string CurrentIsle = "None";
    foreach (Grocery j in Grocs) {
        if (j.Isle != CurrentIsle) {
            if ((CurrentIsle != "None") && (! firstItem)) {
                paraItem.Inlines.Add (itemRun);
                Blocker.Blocks.Add (paraItem);
            }
            CurrentIsle = j.Isle;
            firstItem = true;
            Paragraph paraIsle = new Paragraph ();
            Run paraRan = new Run ();
            paraRan.Text = "     " + j.Isle;
            paraIsle.Inlines.Add (paraRan);
            Blocker.Blocks.Add (paraIsle);
        }
        if (firstItem) {
            paraItem = new Paragraph ();
            itemRun = new Run ();
            itemRun.Text = "        [] " + j.Item;
            firstLength = j.Item.Length;
            firstItem = false;
        } else {
            firstItem = true;
            string s = new string (' ', 30 - firstLength);
            itemRun.Text += s + "[] " + j.Item;
            paraItem.Inlines.Add (itemRun);
            Blocker.Blocks.Add (paraItem);
        }
    }
    if (! firstItem) {
        paraItem.Inlines.Add (itemRun);
        Blocker.Blocks.Add (paraItem);
    }
}
----------------------------------------

  private void PopulateBlock (RichTextBlock Blocker) {
        string CurrentIsle = "None";
        Paragraph paraItem = null;
        Run itemRun = null;
        foreach (Grocery j in Grocs) {
            if (j.Isle != CurrentIsle) {
                CurrentIsle = j.Isle;
                Paragraph paraIsle = new Paragraph ();
                Run paraRan = new Run ();
                paraRan.Text = "     " + j.Isle;
                paraIsle.Inlines.Add (paraRan);
                Blocker.Blocks.Add (paraIsle);
            }
            paraItem = new Paragraph ();
            itemRun = new Run ();
            itemRun.Text += "        [] " + j.Item;
            paraItem.Inlines.Add (itemRun);
            Blocker.Blocks.Add (paraItem);
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
882
6
Gpt3D_Clone882_6.cs 1 39
Gpt3D_Clone882_6.cs 40 67
----------------------------------------

private void PopulateBlock (RichTextBlock Blocker) {
    bool firstItem = true;
    int firstLength = 0;
    Paragraph paraItem = null;
    Run itemRun = null;
    string CurrentIsle = "None";
    foreach (Grocery j in Grocs) {
        if (j.Isle != CurrentIsle) {
            if ((CurrentIsle != "None") && (! firstItem)) {
                paraItem.Inlines.Add (itemRun);
                Blocker.Blocks.Add (paraItem);
            }
            CurrentIsle = j.Isle;
            firstItem = true;
            Paragraph paraIsle = new Paragraph ();
            Run paraRan = new Run ();
            paraRan.Text = "     " + j.Isle;
            paraIsle.Inlines.Add (paraRan);
            Blocker.Blocks.Add (paraIsle);
        }
        if (firstItem) {
            paraItem = new Paragraph ();
            itemRun = new Run ();
            itemRun.Text = "        [] " + j.Item;
            firstLength = j.Item.Length;
            firstItem = false;
        } else {
            firstItem = true;
            string s = new string (' ', 30 - firstLength);
            itemRun.Text += s + "[] " + j.Item;
            paraItem.Inlines.Add (itemRun);
            Blocker.Blocks.Add (paraItem);
        }
    }
    if (! firstItem) {
        paraItem.Inlines.Add (itemRun);
        Blocker.Blocks.Add (paraItem);
    }
}
----------------------------------------

  private void PopulateBlock(RichTextBlock Blocker)
    {
        string CurrentIsle = "None";
        Paragraph paraItem = null;
        Run itemRun = null;
        foreach (Grocery j in Grocs)
        {
            if(CurrentIsle != j.Isle)
            {
                CurrentIsle = j.Isle;
                paraItem = new Paragraph();
                Run paraRan = new Run();
                paraRan.Text = "     " + j.Isle;
                paraItem.Inlines.Add(paraRan);
                Blocker.Blocks.Add(paraItem);
            }
            paraItem = new Paragraph();
            itemRun = new Run();
            itemRun.Text += "        [] " + j.Item;
            paraItem.Inlines.Add(itemRun);
            Blocker.Blocks.Add(paraItem);
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
882
7
Gpt3D_Clone882_7.cs 1 39
Gpt3D_Clone882_7.cs 40 67
----------------------------------------

private void PopulateBlock (RichTextBlock Blocker) {
    bool firstItem = true;
    int firstLength = 0;
    Paragraph paraItem = null;
    Run itemRun = null;
    string CurrentIsle = "None";
    foreach (Grocery j in Grocs) {
        if (j.Isle != CurrentIsle) {
            if ((CurrentIsle != "None") && (! firstItem)) {
                paraItem.Inlines.Add (itemRun);
                Blocker.Blocks.Add (paraItem);
            }
            CurrentIsle = j.Isle;
            firstItem = true;
            Paragraph paraIsle = new Paragraph ();
            Run paraRan = new Run ();
            paraRan.Text = "     " + j.Isle;
            paraIsle.Inlines.Add (paraRan);
            Blocker.Blocks.Add (paraIsle);
        }
        if (firstItem) {
            paraItem = new Paragraph ();
            itemRun = new Run ();
            itemRun.Text = "        [] " + j.Item;
            firstLength = j.Item.Length;
            firstItem = false;
        } else {
            firstItem = true;
            string s = new string (' ', 30 - firstLength);
            itemRun.Text += s + "[] " + j.Item;
            paraItem.Inlines.Add (itemRun);
            Blocker.Blocks.Add (paraItem);
        }
    }
    if (! firstItem) {
        paraItem.Inlines.Add (itemRun);
        Blocker.Blocks.Add (paraItem);
    }
}
----------------------------------------

  private void PopulateBlock(RichTextBlock Blocker)
    {
        string CurrentIsle = "None";
        Paragraph paraItem = null;
        Run itemRun = null;
        foreach (Grocery j in Grocs)
        {
            paraItem = new Paragraph();
            itemRun = new Run();
            itemRun.Text += j.Item;
            if (CurrentIsle != j.Isle)
            {
                CurrentIsle = j.Isle;
                Run paraRan = new Run();
                paraRan.Text = "    " + j.Isle;
                paraItem.Inlines.Add(paraRan);
            }
            itemRun.Text += "        [] " + j.Item;
            paraItem.Inlines.Add(itemRun);
            Blocker.Blocks.Add(paraItem);
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
883
1
Gpt3D_Clone883_1.cs 1 35
Gpt3D_Clone883_1.cs 36 81
----------------------------------------

public static IEnumerable < IEnumerable < T > > GetPermutations < T > (IEnumerable < IEnumerable < T > > lists) {
    if (! lists.Any ()) {
        yield break;
    }
    List < IEnumerator < T > > iterators = new List < IEnumerator < T > > ();
    foreach (var list in lists) {
        var it = list.GetEnumerator ();
        if (! it.MoveNext ()) {
            continue;
        }
        iterators.Add (it);
    }
    bool done = false;
    while (! done) {
        yield return from it in iterators
            select it.Current;
        bool recurse = false;
        var mainIt = iterators.GetEnumerator ();
        mainIt.MoveNext ();
        do
            {
                recurse = false;
                var subIt = mainIt.Current;
                if (! subIt.MoveNext ()) {
                    subIt.Reset ();
                    subIt.MoveNext ();
                    if (! mainIt.MoveNext ()) {
                        done = true;
                    } else {
                        recurse = true;
                    }
                }
            } while (recurse);
    }
}
----------------------------------------

 public static IEnumerable<IEnumerable<T>> GetPermutations<T>(IEnumerable<IEnumerable<T>> lists)
{
    if (!lists.Any())
    {
        yield break;
    }
    List<IEnumerator<T>> iterators = new List<IEnumerator<T>>();
    
    foreach (var list in lists)
    {
        var it = list.GetEnumerator();
        if (!it.MoveNext())
            continue;
        iterators.Add(it);
    }
    
    bool done = false;
    while (!done)
    {
        List<T> currentPermutation = new List<T>();
        foreach (var it in iterators)
        {
            currentPermutation.Add(it.Current);
        }
        yield return currentPermutation;
        bool checkAll = true;
        for (int i = iterators.Count-1; i >= 0; i--)
        {
            if (iterators[i].MoveNext())
            {
                checkAll = false;
                break;
            }
            else
            {
                iterators[i].Reset();
                iterators[i].MoveNext();
            }
        }
        if (checkAll)
            done = true;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
883
2
Gpt3D_Clone883_2.cs 1 35
Gpt3D_Clone883_2.cs 36 63
----------------------------------------

public static IEnumerable < IEnumerable < T > > GetPermutations < T > (IEnumerable < IEnumerable < T > > lists) {
    if (! lists.Any ()) {
        yield break;
    }
    List < IEnumerator < T > > iterators = new List < IEnumerator < T > > ();
    foreach (var list in lists) {
        var it = list.GetEnumerator ();
        if (! it.MoveNext ()) {
            continue;
        }
        iterators.Add (it);
    }
    bool done = false;
    while (! done) {
        yield return from it in iterators
            select it.Current;
        bool recurse = false;
        var mainIt = iterators.GetEnumerator ();
        mainIt.MoveNext ();
        do
            {
                recurse = false;
                var subIt = mainIt.Current;
                if (! subIt.MoveNext ()) {
                    subIt.Reset ();
                    subIt.MoveNext ();
                    if (! mainIt.MoveNext ()) {
                        done = true;
                    } else {
                        recurse = true;
                    }
                }
            } while (recurse);
    }
}
----------------------------------------

 public static IEnumerable < IEnumerable < T > > GetPermutations < T > (IEnumerable < IEnumerable < T > > lists) {
    if (!lists.Any()) {
        yield break;
    }
    IEnumerable<int> listCounts = lists.Select(list => list.Count());
    // Number of permutations = product of all list lengths 
    long permutationsCount = listCounts.Aggregate<int, long>(1, (p, c) => p * c);
    // Calculate permutations for given set
    for (long permIndex = 0; permIndex < permutationsCount; permIndex++)
    {
        // Build permutation from indices 
        List<T> currentPermutation = new List<T>();
        for (int listIndex = 0; listIndex < lists.Count(); listIndex++)
        {
            int elementIndex = (int)(permIndex % listCounts.ElementAt(listIndex));
            double elementDouble = lists.ElementAt(listIndex).ElementAt(elementIndex);
            T element = (T)Convert.ChangeType(elementDouble, typeof(T));
            currentPermutation.Add(element);
            permIndex = permIndex / listCounts.ElementAt(listIndex);
        }
        // Return permutation
        yield return currentPermutation;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
883
3
Gpt3D_Clone883_3.cs 1 35
Gpt3D_Clone883_3.cs 36 60
----------------------------------------

public static IEnumerable < IEnumerable < T > > GetPermutations < T > (IEnumerable < IEnumerable < T > > lists) {
    if (! lists.Any ()) {
        yield break;
    }
    List < IEnumerator < T > > iterators = new List < IEnumerator < T > > ();
    foreach (var list in lists) {
        var it = list.GetEnumerator ();
        if (! it.MoveNext ()) {
            continue;
        }
        iterators.Add (it);
    }
    bool done = false;
    while (! done) {
        yield return from it in iterators
            select it.Current;
        bool recurse = false;
        var mainIt = iterators.GetEnumerator ();
        mainIt.MoveNext ();
        do
            {
                recurse = false;
                var subIt = mainIt.Current;
                if (! subIt.MoveNext ()) {
                    subIt.Reset ();
                    subIt.MoveNext ();
                    if (! mainIt.MoveNext ()) {
                        done = true;
                    } else {
                        recurse = true;
                    }
                }
            } while (recurse);
    }
}
----------------------------------------

 public static IEnumerable<IEnumerable<T>> GetPermutations<T>(IEnumerable<IEnumerable<T>> lists)
{
    if (!lists.Any())
    {
        yield break;
    }
    List<List<T>> permutations = new List<List<T>>();
    foreach(var list in lists)
    {
        var it = list.ToList();
        while (it.Any())
        {
            List<T> perm = new List<T>();
            foreach(var subList in lists)
            {
                perm.Add(it.First());
                it.RemoveAt(0);
            }
            permutations.Add(perm);
        }
    }
    return permutations;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
883
4
Gpt3D_Clone883_4.cs 1 35
Gpt3D_Clone883_4.cs 36 55
----------------------------------------

public static IEnumerable < IEnumerable < T > > GetPermutations < T > (IEnumerable < IEnumerable < T > > lists) {
    if (! lists.Any ()) {
        yield break;
    }
    List < IEnumerator < T > > iterators = new List < IEnumerator < T > > ();
    foreach (var list in lists) {
        var it = list.GetEnumerator ();
        if (! it.MoveNext ()) {
            continue;
        }
        iterators.Add (it);
    }
    bool done = false;
    while (! done) {
        yield return from it in iterators
            select it.Current;
        bool recurse = false;
        var mainIt = iterators.GetEnumerator ();
        mainIt.MoveNext ();
        do
            {
                recurse = false;
                var subIt = mainIt.Current;
                if (! subIt.MoveNext ()) {
                    subIt.Reset ();
                    subIt.MoveNext ();
                    if (! mainIt.MoveNext ()) {
                        done = true;
                    } else {
                        recurse = true;
                    }
                }
            } while (recurse);
    }
}
----------------------------------------

  public static IEnumerable < IEnumerable < T > > GetPermutations < T > (IEnumerable < IEnumerable < T > > lists) {
    List < IEnumerable < T > > result = new List < IEnumerable < T > > ();
    if (lists.Count() == 0)
        return result;
    else {
        foreach (var list in lists) {
            var it = list.GetEnumerator ();
            while (it.MoveNext()) {
                IEnumerable<T> currentPermutation = new List<T>();
                foreach (var subList in lists) {
                    currentPermutation = currentPermutation.Append(it.Current);
                }
                result.Add(currentPermutation);
            }
        }
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
883
5
Gpt3D_Clone883_5.cs 1 35
Gpt3D_Clone883_5.cs 36 54
----------------------------------------

public static IEnumerable < IEnumerable < T > > GetPermutations < T > (IEnumerable < IEnumerable < T > > lists) {
    if (! lists.Any ()) {
        yield break;
    }
    List < IEnumerator < T > > iterators = new List < IEnumerator < T > > ();
    foreach (var list in lists) {
        var it = list.GetEnumerator ();
        if (! it.MoveNext ()) {
            continue;
        }
        iterators.Add (it);
    }
    bool done = false;
    while (! done) {
        yield return from it in iterators
            select it.Current;
        bool recurse = false;
        var mainIt = iterators.GetEnumerator ();
        mainIt.MoveNext ();
        do
            {
                recurse = false;
                var subIt = mainIt.Current;
                if (! subIt.MoveNext ()) {
                    subIt.Reset ();
                    subIt.MoveNext ();
                    if (! mainIt.MoveNext ()) {
                        done = true;
                    } else {
                        recurse = true;
                    }
                }
            } while (recurse);
    }
}
----------------------------------------

 public static IEnumerable < IEnumerable < T > > GetPermutations < T > (IEnumerable < IEnumerable < T > > lists) {
    if (! lists.Any ()) {
        yield break;
    } 
    
    var totalCount = lists.Select(e => e.Count()).Sum();
    for (var jCount = 0; jCount < totalCount; jCount++)
    {
        List<T> currentPermutation = new List<T>();
        foreach (var list in lists)
        {
            currentPermutation.Add(list.ElementAt(jCount % list.Count()));
        }
        yield return currentPermutation;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
886
4
Gpt3D_Clone886_4.cs 1 40
Gpt3D_Clone886_4.cs 41 82
----------------------------------------

[Test] [TestCase ("parralele", "parallel", "par[ralele]")] [TestCase ("personil", "personal", "person[i]l")] [TestCase ("disfuncshunal", "dysfunctional", "d[isfuncshu]nal")] [TestCase ("ato", "auto", "a[]to")] [TestCase ("inactioned", "inaction", "inaction[ed]")] [TestCase ("refraction", "fraction", "[re]fraction")] [TestCase ("adiction", "ad[]diction", "ad[]iction")] public void CompareStringsTest (string attempted, string correct, string expectedResult) {
    int first = - 1, last = - 1;
    string result = null;
    int shorterLength = (attempted.Length < correct.Length ? attempted.Length : correct.Length);
    for (int i = 0; i < shorterLength; i ++) {
        if (correct [i] != attempted [i]) {
            first = i;
            break;
        }
    }
    var a = correct.Reverse ().ToArray ();
    var b = attempted.Reverse ().ToArray ();
    for (int i = 0; i < shorterLength; i ++) {
        if (a [i] != b [i]) {
            last = i;
            break;
        }
    }
    if (first == - 1 && last == - 1)
        result = attempted;
    else {
        var sb = new StringBuilder ();
        if (first == - 1)
            first = shorterLength;
        if (last == - 1)
            last = shorterLength;
        if (first + last > shorterLength)
            last = shorterLength - first;
        if (first > 0)
            sb.Append (attempted.Substring (0, first));
        sb.Append ("[");
        if (last > - 1 && last + first < attempted.Length)
            sb.Append (attempted.Substring (first, attempted.Length - last - first));
        sb.Append ("]");
        if (last > 0)
            sb.Append (attempted.Substring (attempted.Length - last, last));
        result = sb.ToString ();
    }
    Assert.AreEqual (expectedResult, result);
}
----------------------------------------

 [Test] [TestCase("parralele","parallel","par[ralele]")] [TestCase("personil","personal","person[i]l")] [TestCase("disfuncshunal","dysfunctional","d[isfuncshu]nal")] [TestCase("ato","auto","a[]to")] [TestCase("inactioned","inaction","inaction[ed]")] [TestCase("refraction","fraction","[re]fraction")] [TestCase("adiction","addiction","ad[]diction")]  public void CompareStringsTest(string attempted, string correct, string expectedResult){
    string result = null;
    int firstIndex = attempted.Length; 
    int lastIndex= attempted.Length; 
    for(int i=0; i < attempted.Length && i < correct.Length;i++){
        if(attempted[i] != correct[i]){
            firstIndex = i;
            break;
        }
    }
    for(int i=attempted.Length-1, j=correct.Length-1; i>=0 && j>=0;i--, j--){
        if(attempted[i] != correct[j]){
            lastIndex = i;
            break;
        }
    }
    if(firstIndex == -1 && lastIndex == -1){
        result = attempted;
    }
    else{
        if(firstIndex+lastIndex>attempted.Length){
            lastIndex = attempted.Length - firstIndex;
        }
        if(firstIndex > 0){
            result = attempted.Substring(0, firstIndex);
        }
        result += "[";
        if(lastIndex > -1 && lastIndex + firstIndex < attempted.Length){
            result+=attempted.Substring(firstIndex, attempted.Length - lastIndex-firstIndex);
        } 
        result += "]";
        if(lastIndex>0){
            result += attempted.Substring(attempted.Length-lastIndex, lastIndex);
        }
    }
    Assert.AreEqual(expectedResult, result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
886
5
Gpt3D_Clone886_5.cs 1 40
Gpt3D_Clone886_5.cs 41 77
----------------------------------------

[Test] [TestCase ("parralele", "parallel", "par[ralele]")] [TestCase ("personil", "personal", "person[i]l")] [TestCase ("disfuncshunal", "dysfunctional", "d[isfuncshu]nal")] [TestCase ("ato", "auto", "a[]to")] [TestCase ("inactioned", "inaction", "inaction[ed]")] [TestCase ("refraction", "fraction", "[re]fraction")] [TestCase ("adiction", "ad[]diction", "ad[]iction")] public void CompareStringsTest (string attempted, string correct, string expectedResult) {
    int first = - 1, last = - 1;
    string result = null;
    int shorterLength = (attempted.Length < correct.Length ? attempted.Length : correct.Length);
    for (int i = 0; i < shorterLength; i ++) {
        if (correct [i] != attempted [i]) {
            first = i;
            break;
        }
    }
    var a = correct.Reverse ().ToArray ();
    var b = attempted.Reverse ().ToArray ();
    for (int i = 0; i < shorterLength; i ++) {
        if (a [i] != b [i]) {
            last = i;
            break;
        }
    }
    if (first == - 1 && last == - 1)
        result = attempted;
    else {
        var sb = new StringBuilder ();
        if (first == - 1)
            first = shorterLength;
        if (last == - 1)
            last = shorterLength;
        if (first + last > shorterLength)
            last = shorterLength - first;
        if (first > 0)
            sb.Append (attempted.Substring (0, first));
        sb.Append ("[");
        if (last > - 1 && last + first < attempted.Length)
            sb.Append (attempted.Substring (first, attempted.Length - last - first));
        sb.Append ("]");
        if (last > 0)
            sb.Append (attempted.Substring (attempted.Length - last, last));
        result = sb.ToString ();
    }
    Assert.AreEqual (expectedResult, result);
}
----------------------------------------

 [Test] [TestCase("parralele","parallel","par[ralele]")] [TestCase("personil","personal","person[i]l")] [TestCase("disfuncshunal","dysfunctional","d[isfuncshu]nal")] [TestCase("ato","auto","a[]to")] [TestCase("inactioned","inaction","inaction[ed]")] [TestCase("refraction","fraction","[re]fraction")] [TestCase("adiction","addiction","ad[]diction")]  public void CompareStringsTest(string attempted, string correct, string expectedResult){
    int first=attempted.IndexOfAny(correct.ToArray());
    int last=correct.IndexOfAny(attempted.ToArray(),attempted.Length-1);  
    string result = null;
    if(first == -1 && last == -1){
        result = attempted;
    }
    else{
        if(first == -1){
            first = attempted.Length;
        }
        if(last == -1){
            last = attempted.Length;
        }
        if( first + last > attempted.Length){
            last = attempted.Length - first;
        }
        if(first > 0){
            result = attempted.Substring(0,first);
        }
        result += "[";
        if(last > -1 && last + first < attempted.Length){
            result += attempted.Substring(first, attempted.Length - last - first);
        }  
        result += "]";
        if(last > 0){
            result += attempted.Substring(attempted.Length-last, last);
        }
    }
  
    Assert.AreEqual(expectedResult, result);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
888
5
Gpt3D_Clone888_5.cs 1 22
Gpt3D_Clone888_5.cs 23 38
----------------------------------------

static void Main (string [] args) {
    List < string > alpha = new List < string > ();
    for (char a = 'a'; a <= 'd'; a ++) {
        alpha.Add (a.ToString ());
        alpha.Add (a.ToString ());
    }
    Console.WriteLine ("Data :");
    alpha.ForEach (delegate (string t) {
        Console.WriteLine (t);
    });
    alpha.ForEach (delegate (string v) {
        if (alpha.FindAll (delegate (string t) {
            return t == v;
        }).Count > 1)
            alpha.Remove (v);
    });
    Console.WriteLine ("Unique Result :");
    alpha.ForEach (delegate (string t) {
        Console.WriteLine (t);
    });
    Console.ReadKey ();
}
----------------------------------------

 static void Main (string [] args) {
    Dictionary<string, int> alpha = new Dictionary<string, int>();
    for (char a = 'a'; a <= 'd'; a ++) {
        if (alpha.ContainsKey(a.ToString()))
            alpha[a.ToString()] += 1;
        else
            alpha[a.ToString()] = 1;
    }
    Console.WriteLine ("Data :");
    alpha.Keys.ToList().ForEach(t => Console.WriteLine(t));
    Console.WriteLine ("Unique Result :");
    alpha.Where(x => x.Value == 1).Select(x => x.Key).ToList().ForEach(t => Console.WriteLine(t));
    Console.ReadKey();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
888
6
Gpt3D_Clone888_6.cs 1 22
Gpt3D_Clone888_6.cs 23 36
----------------------------------------

static void Main (string [] args) {
    List < string > alpha = new List < string > ();
    for (char a = 'a'; a <= 'd'; a ++) {
        alpha.Add (a.ToString ());
        alpha.Add (a.ToString ());
    }
    Console.WriteLine ("Data :");
    alpha.ForEach (delegate (string t) {
        Console.WriteLine (t);
    });
    alpha.ForEach (delegate (string v) {
        if (alpha.FindAll (delegate (string t) {
            return t == v;
        }).Count > 1)
            alpha.Remove (v);
    });
    Console.WriteLine ("Unique Result :");
    alpha.ForEach (delegate (string t) {
        Console.WriteLine (t);
    });
    Console.ReadKey ();
}
----------------------------------------

 static void Main (string [] args) {
    ConcurrentBag<string> alpha = new ConcurrentBag<string>();
    for (char a = 'a'; a <= 'd'; a ++) {
        alpha.Add (a.ToString ());
        alpha.Add (a.ToString ());
    }
    Console.WriteLine ("Data :");
    alpha.ToList().ForEach(t => Console.WriteLine(t));
    Console.WriteLine ("Unique Result :");
    alpha.Distinct().ToList().ForEach(t => Console.WriteLine(t));
    Console.ReadKey();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
88
0
Gpt3D_Clone88_0.cs 1 9
Gpt3D_Clone88_0.cs 10 33
----------------------------------------

public int checkComRegnumberAvailable (string conRegnumber) {
    List < OtherCompany > checklist = getCompanyDetails ();
    if (checklist.Count == 0)
        return 2;
    for (int i = 0; i < checkList.Count; i ++)
        if (checklist [i].RegNumber == conRegnumber)
            return 1;
    return 0;
}
----------------------------------------

 public int checkComRegnumberAvailable (string conRegnumber) {
    List < OtherCompany > checklist = getCompanyDetails ();
    //you can check here if the list is empty or not.
    if (!checklist.Any())
        return 2;
    bool found = false;
    foreach (var curComp in checklist)
    {
        if (curComp.RegNumber.Equals(conRegnumber))
        {
            found = true;
            break;
        }
    }
    if (found)
        return 1;
    else
        return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
88
1
Gpt3D_Clone88_1.cs 1 9
Gpt3D_Clone88_1.cs 10 26
----------------------------------------

public int checkComRegnumberAvailable (string conRegnumber) {
    List < OtherCompany > checklist = getCompanyDetails ();
    if (checklist.Count == 0)
        return 2;
    for (int i = 0; i < checkList.Count; i ++)
        if (checklist [i].RegNumber == conRegnumber)
            return 1;
    return 0;
}
----------------------------------------

  public int checkComRegnumberAvailable (string conRegnumber) {
    List < OtherCompany > checklist = getCompanyDetails ();
    if (checklist.IsEmpty())
        return 2;
    int i = 0;
    bool found = false;
    while (i < checklist.Count && !found){
        if (checklist[i].RegNumber == conRegnumber){
            found = true;
            return 1;
        }
        i++;
    }
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
88
2
Gpt3D_Clone88_2.cs 1 9
Gpt3D_Clone88_2.cs 10 24
----------------------------------------

public int checkComRegnumberAvailable (string conRegnumber) {
    List < OtherCompany > checklist = getCompanyDetails ();
    if (checklist.Count == 0)
        return 2;
    for (int i = 0; i < checkList.Count; i ++)
        if (checklist [i].RegNumber == conRegnumber)
            return 1;
    return 0;
}
----------------------------------------

public int checkComRegnumberAvailable (string conRegnumber) {
    List < OtherCompany > checklist = getCompanyDetails ();
    if (checklist.Count == 0)
        return 2;
    
    int result = 0;
    checklist.ForEach(c => {
        if (c.RegNumber == conRegnumber)
            result = 1;
    });
    
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
892
0
Gpt3D_Clone892_0.cs 1 12
Gpt3D_Clone892_0.cs 13 41
----------------------------------------

protected void btnNext_Click1 (object sender, EventArgs e) {
    DAL.TicketsDataSetTableAdapters.TicketDetailsTableAdapter eobj = new DAL.TicketsDataSetTableAdapters.TicketDetailsTableAdapter ();
    DataTable dt = new DataTable ();
    if (txtNextStep.Tag == null)
        dt = eobj.GetTicketFirstUpdate (txtSupportRef.Text);
    else
        dt = eobj.GetNextTicketUpdate (txtSupportRef.Text, (string) txtNextStep.Tag);
    if (dt.Rows.Count != 0) {
        txtNextStep.Text = dt.Rows [0] ["NextStep"].ToString ();
        txtNextStep.Tag = dt.Rows [0] ["Id"].ToString ();
    }
}
----------------------------------------

 protected void btnNext_Click1 (object sender, EventArgs e) {
    DAL.TicketsDataSetTableAdapters.TicketDetailsTableAdapter eobj = new DAL.TicketsDataSetTableAdapters.TicketDetailsTableAdapter ();
    DataTable dt = new DataTable ();
    if (txtNextStep.Tag == null){
        // retrieve the first ticket update
        dt = eobj.GetTicketFirstUpdate (txtSupportRef.Text);
        if(dt != null && dt.Rows.Count > 0) {
            txtNextStep.Text = dt.Rows[0]["NextStep"].ToString();
            txtNextStep.Tag = dt.Rows[0]["Id"].ToString();
        }else {
            // else return empty table object
            dt = new DataTable();
        }
    }else {
        // retrieve the next ticket update based on the current ticket ID
        dt = eobj.GetNextTicketUpdate(txtSupportRef.Text, (string)txtNextStep.Tag);
        if(dt != null && dt.Rows.Count > 0) {
            txtNextStep.Text = dt.Rows[0]["NextStep"].ToString();
            txtNextStep.Tag = dt.Rows[0]["Id"].ToString();
        }else {
            // else return empty table object
            dt = new DataTable();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
896
10
Gpt3D_Clone896_10.cs 1 21
Gpt3D_Clone896_10.cs 22 68
----------------------------------------

public void PrintRandom () {
    Random r = new Random ();
    int strLength = r.Next (1, 10);
    var sb = new StringBuilder ();
    for (int i = 0; i < strLength; i ++) {
        int whichType = r.Next (0, 3);
        switch (whichType) {
            case 0 :
                sb.Append ((char) (97 + r.Next (0, 26)));
                break;
            case 1 :
                sb.Append ((char) (65 + r.Next (0, 26)));
                break;
            case 2 :
                sb.Append ((char) (48 + r.Next (0, 10)));
                break;
        }
    }
    Console.WriteLine (sb.ToString ());
    Console.ReadLine ();
}
----------------------------------------

 public void PrintRandom()
    {
        Random r = new Random();
        int strLength = r.Next(1, 10);
        int whichType;
        var sb = new StringBuilder();
        for (int i = 0; i < strLength; i++)
        {
            whichType = r.Next(0, 3);
            switch (whichType)
            {
                case 0:
                    sb.Append(randomLetter());
                    break;
                case 1:
                    sb.Append(randomUppercase());
                    break;
                case 2:
                    sb.Append(randomNumber());
                    break;
            }
        }
        Console.WriteLine($"Generated random string: {sb.ToString()}");
        Console.ReadLine();
    }
    // Helper methods
    private char randomLetter()
    {
        Random r = new Random();
        return (char)(97 + r.Next(0, 26));
    }
    private char randomUppercase()
    {
        Random r = new Random();
        return (char)(65 + r.Next(0, 26));
    }
    private char randomNumber()
    {
        Random r = new Random();
        return (char)(48 + r.Next(0, 10));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
896
4
Gpt3D_Clone896_4.cs 1 21
Gpt3D_Clone896_4.cs 22 42
----------------------------------------

public void PrintRandom () {
    Random r = new Random ();
    int strLength = r.Next (1, 10);
    var sb = new StringBuilder ();
    for (int i = 0; i < strLength; i ++) {
        int whichType = r.Next (0, 3);
        switch (whichType) {
            case 0 :
                sb.Append ((char) (97 + r.Next (0, 26)));
                break;
            case 1 :
                sb.Append ((char) (65 + r.Next (0, 26)));
                break;
            case 2 :
                sb.Append ((char) (48 + r.Next (0, 10)));
                break;
        }
    }
    Console.WriteLine (sb.ToString ());
    Console.ReadLine ();
}
----------------------------------------

 public void PrintRandom()
    {
        char[] characterSet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                            + "abcdefghijklmnopqrstuvwxyz"
                            + "1234567890".ToCharArray();
        Random rand = new Random();
        string result = "";
        int strLength = rand.Next(1, 10);
       
        for(int i = 0; i < strLength; i++)
        {
            int randomIdx = rand.Next(characterSet.Length); 
            result += characterSet[randomIdx]; 
        }
       Console.WriteLine($"Generated random string: {result}");
       Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
896
5
Gpt3D_Clone896_5.cs 1 21
Gpt3D_Clone896_5.cs 22 39
----------------------------------------

public void PrintRandom () {
    Random r = new Random ();
    int strLength = r.Next (1, 10);
    var sb = new StringBuilder ();
    for (int i = 0; i < strLength; i ++) {
        int whichType = r.Next (0, 3);
        switch (whichType) {
            case 0 :
                sb.Append ((char) (97 + r.Next (0, 26)));
                break;
            case 1 :
                sb.Append ((char) (65 + r.Next (0, 26)));
                break;
            case 2 :
                sb.Append ((char) (48 + r.Next (0, 10)));
                break;
        }
    }
    Console.WriteLine (sb.ToString ());
    Console.ReadLine ();
}
----------------------------------------

 public void PrintRandom()
    {
        char[] characterSet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                            + "abcdefghijklmnopqrstuvwxyz"
                            + "1234567890".ToCharArray();
        Random r = new Random();
        int strLength = r.Next(1, 10);
        var sb = new StringBuilder(strLength);
        for (int i = 0; i < strLength; i++)
            sb.Append(characterSet[r.Next(0, characterSet.Length)]);
        Console.WriteLine($"Generated random string: {sb.ToString()}");
        Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
896
6
Gpt3D_Clone896_6.cs 1 21
Gpt3D_Clone896_6.cs 22 63
----------------------------------------

public void PrintRandom () {
    Random r = new Random ();
    int strLength = r.Next (1, 10);
    var sb = new StringBuilder ();
    for (int i = 0; i < strLength; i ++) {
        int whichType = r.Next (0, 3);
        switch (whichType) {
            case 0 :
                sb.Append ((char) (97 + r.Next (0, 26)));
                break;
            case 1 :
                sb.Append ((char) (65 + r.Next (0, 26)));
                break;
            case 2 :
                sb.Append ((char) (48 + r.Next (0, 10)));
                break;
        }
    }
    Console.WriteLine (sb.ToString ());
    Console.ReadLine ();
}
----------------------------------------

 public void PrintRandom()
    {
        var r = new Random().Next(1, 10); //Create random size of the string
        
        // Pass random size of the string to the RandomString 
        // method and store it in string variable
        var output = RandomString(r);
        // Print the generated random string
        Console.WriteLine($"Generated random string: {output}");
        Console.ReadLine();
    }
    // RandomString method to generate random string 
    // with size of the string as input parameter 
    static string RandomString(int size)
    {
        // Create random object
        var rand = new Random(); 
        // Take 8 character sets 
        var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890";
 
        // Create a string array to store the characters
        var output = new char[size];
 
        // Iterate the size passed as input parameter 
        for (int i = 0; i < size; i++)
        {
            // Use Next on random to generate a random index 
            var index = rand.Next(0, chars.Length); 
 
            // Fill the output string with character on 
            // random index generated
            output[i] = chars[index];
        }
 
        // Return the randomly generated string 
        return new string(output);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
896
7
Gpt3D_Clone896_7.cs 1 21
Gpt3D_Clone896_7.cs 22 63
----------------------------------------

public void PrintRandom () {
    Random r = new Random ();
    int strLength = r.Next (1, 10);
    var sb = new StringBuilder ();
    for (int i = 0; i < strLength; i ++) {
        int whichType = r.Next (0, 3);
        switch (whichType) {
            case 0 :
                sb.Append ((char) (97 + r.Next (0, 26)));
                break;
            case 1 :
                sb.Append ((char) (65 + r.Next (0, 26)));
                break;
            case 2 :
                sb.Append ((char) (48 + r.Next (0, 10)));
                break;
        }
    }
    Console.WriteLine (sb.ToString ());
    Console.ReadLine ();
}
----------------------------------------

 public void PrintRandom()
    {
        var r = new Random().Next(1, 10); //Create random size of the string
        
        // Pass random size of the string to the RandomString 
        // method and store it in string variable
        var output = RandomString(r);
        // Print the generated random string
        Console.WriteLine($"Generated random string: {output}");
        Console.ReadLine();
    }
    // RandomString method to generate random string 
    // with size of the string as input parameter 
    static string RandomString(int size)
    {
        // Create random object
        var rand = new Random(); 
        // Take 8 character sets 
        var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890";
 
        // Create a string array to store the characters
        var output = new char[size];
 
        // Iterate the size passed as input parameter 
        for (int i = 0; i < size; i++)
        {
            // Use Next on random to generate a random index 
            var index = rand.Next(0, chars.Length); 
 
            // Fill the output string with character on 
            // random index generated
            output[i] = chars[index];
        }
 
        // Return the randomly generated string 
        return new string(output);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
896
8
Gpt3D_Clone896_8.cs 1 21
Gpt3D_Clone896_8.cs 22 68
----------------------------------------

public void PrintRandom () {
    Random r = new Random ();
    int strLength = r.Next (1, 10);
    var sb = new StringBuilder ();
    for (int i = 0; i < strLength; i ++) {
        int whichType = r.Next (0, 3);
        switch (whichType) {
            case 0 :
                sb.Append ((char) (97 + r.Next (0, 26)));
                break;
            case 1 :
                sb.Append ((char) (65 + r.Next (0, 26)));
                break;
            case 2 :
                sb.Append ((char) (48 + r.Next (0, 10)));
                break;
        }
    }
    Console.WriteLine (sb.ToString ());
    Console.ReadLine ();
}
----------------------------------------

 public void PrintRandom()
    {
        Random r = new Random();
        int strLength = r.Next(1, 10);
        int whichType;
        var sb = new StringBuilder();
        for (int i = 0; i < strLength; i++)
        {
            whichType = r.Next(0, 3);
            switch (whichType)
            {
                case 0:
                    sb.Append(randomLetter());
                    break;
                case 1:
                    sb.Append(randomUppercase());
                    break;
                case 2:
                    sb.Append(randomNumber());
                    break;
            }
        }
        Console.WriteLine($"Generated random string: {sb.ToString()}");
        Console.ReadLine();
    }
    // Helper methods
    private char randomLetter()
    {
        Random r = new Random();
        return (char)(97 + r.Next(0, 26));
    }
    private char randomUppercase()
    {
        Random r = new Random();
        return (char)(65 + r.Next(0, 26));
    }
    private char randomNumber()
    {
        Random r = new Random();
        return (char)(48 + r.Next(0, 10));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
896
9
Gpt3D_Clone896_9.cs 1 21
Gpt3D_Clone896_9.cs 22 68
----------------------------------------

public void PrintRandom () {
    Random r = new Random ();
    int strLength = r.Next (1, 10);
    var sb = new StringBuilder ();
    for (int i = 0; i < strLength; i ++) {
        int whichType = r.Next (0, 3);
        switch (whichType) {
            case 0 :
                sb.Append ((char) (97 + r.Next (0, 26)));
                break;
            case 1 :
                sb.Append ((char) (65 + r.Next (0, 26)));
                break;
            case 2 :
                sb.Append ((char) (48 + r.Next (0, 10)));
                break;
        }
    }
    Console.WriteLine (sb.ToString ());
    Console.ReadLine ();
}
----------------------------------------

 public void PrintRandom()
    {
        Random r = new Random();
        int strLength = r.Next(1, 10);
        int whichType;
        var sb = new StringBuilder();
        for (int i = 0; i < strLength; i++)
        {
            whichType = r.Next(0, 3);
            switch (whichType)
            {
                case 0:
                    sb.Append(randomLetter());
                    break;
                case 1:
                    sb.Append(randomUppercase());
                    break;
                case 2:
                    sb.Append(randomNumber());
                    break;
            }
        }
        Console.WriteLine($"Generated random string: {sb.ToString()}");
        Console.ReadLine();
    }
    // Helper methods
    private char randomLetter()
    {
        Random r = new Random();
        return (char)(97 + r.Next(0, 26));
    }
    private char randomUppercase()
    {
        Random r = new Random();
        return (char)(65 + r.Next(0, 26));
    }
    private char randomNumber()
    {
        Random r = new Random();
        return (char)(48 + r.Next(0, 10));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
89
0
Gpt3D_Clone89_0.cs 1 9
Gpt3D_Clone89_0.cs 10 46
----------------------------------------

protected override void OnStartup (StartupEventArgs e) {
    const string appName = "MyAppName";
    bool createdNew;
    _mutex = new Mutex (true, appName, out createdNew);
    if (! createdNew) {
        Application.Current.Shutdown ();
    }
    base.OnStartup (e);
}
----------------------------------------

 protected override void OnStartup(StartupEventArgs e)
{
    string appName = "MyAppName";
    Mutex mutex = null;
    try
    {
        bool createdNew = false;
        try
        {
            mutex = new Mutex(true, appName, out createdNew);
        }
        catch (UnauthorizedAccessException)
        {
            //This Exception is thrown if the Mutex has been created in another user-session.
        }
        if (!createdNew)
        {
            Application.Current.Shutdown();
            return;
        }
        base.OnStartup(e);
    }
    finally
    {
        //
        // This allows other instances to start OK
        //
        if (mutex != null)
            mutex.ReleaseMutex();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
89
1
Gpt3D_Clone89_1.cs 1 9
Gpt3D_Clone89_1.cs 10 39
----------------------------------------

protected override void OnStartup (StartupEventArgs e) {
    const string appName = "MyAppName";
    bool createdNew;
    _mutex = new Mutex (true, appName, out createdNew);
    if (! createdNew) {
        Application.Current.Shutdown ();
    }
    base.OnStartup (e);
}
----------------------------------------

 protected override void OnStartup(StartupEventArgs e)
{
    string appName = "MyAppName";
    Mutex mutex = null;
    try
    {
        bool createdNew;
        mutex = new Mutex(true, appName, out createdNew);
        if (!createdNew)
        {
            Application.Current.Shutdown();
            return;
        }
        base.OnStartup(e);
    }
    finally
    {
        //
        // This allows other instances to start OK
        //
        if (mutex != null)
            mutex.ReleaseMutex();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
89
3
Gpt3D_Clone89_3.cs 1 9
Gpt3D_Clone89_3.cs 10 35
----------------------------------------

protected override void OnStartup (StartupEventArgs e) {
    const string appName = "MyAppName";
    bool createdNew;
    _mutex = new Mutex (true, appName, out createdNew);
    if (! createdNew) {
        Application.Current.Shutdown ();
    }
    base.OnStartup (e);
}
----------------------------------------

 protected override void OnStartup(StartupEventArgs e)
{
    string appName = "MyAppName";
    bool createdNew;
    Mutex singleInstanceMutex = null;
    try
    {
        singleInstanceMutex = new Mutex(true, appName, out createdNew);
        if (!createdNew)
        {
            Application.Current.Shutdown();
            return;
        }
        base.OnStartup(e);
    }
    finally
    {
        if (singleInstanceMutex != null)
            singleInstanceMutex.ReleaseMutex();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
89
4
Gpt3D_Clone89_4.cs 1 9
Gpt3D_Clone89_4.cs 10 39
----------------------------------------

protected override void OnStartup (StartupEventArgs e) {
    const string appName = "MyAppName";
    bool createdNew;
    _mutex = new Mutex (true, appName, out createdNew);
    if (! createdNew) {
        Application.Current.Shutdown ();
    }
    base.OnStartup (e);
}
----------------------------------------

 protected override void OnStartup (StartupEventArgs e) { 
      using (Mutex singleInstanceMutex =  new Mutex(true, Application.ProductName, out bool createdNew))
      {
        if (createdNew)
        {   
            base.OnStartup (e);
            singleInstanceMutex.ReleaseMutex();
        }
        else 
            Application.Current.Shutdown ();
      }
    }
 protected override void OnStartup (StartupEventArgs e) { 
    Mutex singleInstanceMutex = new Mutex (true, Application.ProductName, out bool createdNew);
    try
    {
       if (createdNew)
       {   
            base.OnStartup (e);
       }
       else 
            Application.Current.Shutdown ();
    }
    finally{
        singleInstanceMutex.ReleaseMutex();
    }                    
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
89
5
Gpt3D_Clone89_5.cs 1 9
Gpt3D_Clone89_5.cs 10 27
----------------------------------------

protected override void OnStartup (StartupEventArgs e) {
    const string appName = "MyAppName";
    bool createdNew;
    _mutex = new Mutex (true, appName, out createdNew);
    if (! createdNew) {
        Application.Current.Shutdown ();
    }
    base.OnStartup (e);
}
----------------------------------------

 protected override void OnStartup(StartupEventArgs e)
{
    bool createdNew;
    using(Mutex singleInstanceMutex = new Mutex(true, Application.ProductName, out createdNew))
    {
        if(createdNew)
        {
            base.OnStartup(e);
            singleInstanceMutex.ReleaseMutex();
        }
        else
        {
            Application.Current.Shutdown();
        }
    }    
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
89
6
Gpt3D_Clone89_6.cs 1 9
Gpt3D_Clone89_6.cs 10 27
----------------------------------------

protected override void OnStartup (StartupEventArgs e) {
    const string appName = "MyAppName";
    bool createdNew;
    _mutex = new Mutex (true, appName, out createdNew);
    if (! createdNew) {
        Application.Current.Shutdown ();
    }
    base.OnStartup (e);
}
----------------------------------------

 protected override void OnStartup(StartupEventArgs e)
{
    const string appName = "MyAppName";
    bool createdNew;
    
    using (Mutex singleInstanceMutex = new Mutex(true, appName, out createdNew))
    {
        if (createdNew)
        {   
            base.OnStartup(e);
        }
        else 
            //Inform application to terminate as another instance is still running
            Application.Current.Shutdown();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
89
7
Gpt3D_Clone89_7.cs 1 9
Gpt3D_Clone89_7.cs 10 26
----------------------------------------

protected override void OnStartup (StartupEventArgs e) {
    const string appName = "MyAppName";
    bool createdNew;
    _mutex = new Mutex (true, appName, out createdNew);
    if (! createdNew) {
        Application.Current.Shutdown ();
    }
    base.OnStartup (e);
}
----------------------------------------

 protected override void OnStartup(StartupEventArgs e)
{
    bool createdNew;
    Mutex singleInstanceMutex = new Mutex(true, Application.ProductName, out createdNew);
    if (createdNew)
    {
        base.OnStartup(e);
        singleInstanceMutex.ReleaseMutex();
    }
    else
    {
        Application.Current.Shutdown();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
89
8
Gpt3D_Clone89_8.cs 1 9
Gpt3D_Clone89_8.cs 10 27
----------------------------------------

protected override void OnStartup (StartupEventArgs e) {
    const string appName = "MyAppName";
    bool createdNew;
    _mutex = new Mutex (true, appName, out createdNew);
    if (! createdNew) {
        Application.Current.Shutdown ();
    }
    base.OnStartup (e);
}
----------------------------------------

 protected override void OnStartup(StartupEventArgs e)
{
    bool createdNew;
    Mutex singleInstanceMutex = new Mutex(true, Application.ProductName, out createdNew);
    if(createdNew)
    {
        base.OnStartup(e);
        singleInstanceMutex.ReleaseMutex();
    }
    else
    {
        Application.Current.Shutdown();
    }    
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
89
9
Gpt3D_Clone89_9.cs 1 9
Gpt3D_Clone89_9.cs 10 39
----------------------------------------

protected override void OnStartup (StartupEventArgs e) {
    const string appName = "MyAppName";
    bool createdNew;
    _mutex = new Mutex (true, appName, out createdNew);
    if (! createdNew) {
        Application.Current.Shutdown ();
    }
    base.OnStartup (e);
}
----------------------------------------

 protected override void OnStartup (StartupEventArgs e) { 
      using (Mutex singleInstanceMutex =  new Mutex(true, Application.ProductName, out bool createdNew))
      {
        if (createdNew)
        {   
            base.OnStartup (e);
            singleInstanceMutex.ReleaseMutex();
        }
        else 
            Application.Current.Shutdown ();
      }
    }
 protected override void OnStartup (StartupEventArgs e) { 
    Mutex singleInstanceMutex = new Mutex (true, Application.ProductName, out bool createdNew);
    try
    {
       if (createdNew)
       {   
            base.OnStartup (e);
       }
       else 
            Application.Current.Shutdown ();
    }
    finally{
        singleInstanceMutex.ReleaseMutex();
    }                    
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
905
0
Gpt3D_Clone905_0.cs 1 27
Gpt3D_Clone905_0.cs 28 49
----------------------------------------

public static bool IsWindowOnAnyScreen (Window Window, short WindowSizeX, short WindowSizeY, bool AutoAdjustWindow) {
    var Screen = System.Windows.Forms.Screen.FromHandle (new WindowInteropHelper (Window).Handle);
    bool LeftSideTest = false, TopSideTest = false, BottomSideTest = false, RightSideTest = false;
    if (Window.Left >= Screen.WorkingArea.Left)
        LeftSideTest = true;
    if (Window.Top >= Screen.WorkingArea.Top)
        TopSideTest = true;
    if ((Window.Top + WindowSizeY) <= Screen.WorkingArea.Bottom)
        BottomSideTest = true;
    if ((Window.Left + WindowSizeX) <= Screen.WorkingArea.Right)
        RightSideTest = true;
    if (LeftSideTest && TopSideTest && BottomSideTest && RightSideTest)
        return true;
    else {
        if (AutoAdjustWindow) {
            if (! LeftSideTest)
                Window.Left = Window.Left - (Window.Left - Screen.WorkingArea.Left);
            if (! TopSideTest)
                Window.Top = Window.Top - (Window.Top - Screen.WorkingArea.Top);
            if (! BottomSideTest)
                Window.Top = Window.Top - ((Window.Top + WindowSizeY) - Screen.WorkingArea.Bottom);
            if (! RightSideTest)
                Window.Left = Window.Left - ((Window.Left + WindowSizeX) - Screen.WorkingArea.Right);
        }
    }
    return false;
}
----------------------------------------

  public static bool IsWindowOnAnyScreen (Window Window, short WindowSizeX, short WindowSizeY, bool AutoAdjustWindow) {
    var ProvidedScreen = System.Windows.Forms.Screen.FromHandle (new WindowInteropHelper (Window).Handle);
    bool InsideXArea = false, InsideYArea = false;
    if (Window.Left >= ProvidedScreen.WorkingArea.Left && (Window.Left + WindowSizeX) <= ProvidedScreen.WorkingArea.Right)
        InsideXArea = true;
    if (Window.Top >= ProvidedScreen.WorkingArea.Top && (Window.Top + WindowSizeY) <= ProvidedScreen.WorkingArea.Bottom)
        InsideYArea = true;
        
    if (InsideXArea && InsideYArea)
        return true;
    else {
        if (AutoAdjustWindow) {
            if (! InsideXArea)
                Window.Left = ProvidedScreen.WorkingArea.Left;
            if (! InsideYArea)
                Window.Top = ProvidedScreen.WorkingArea.Top;
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
905
1
Gpt3D_Clone905_1.cs 1 27
Gpt3D_Clone905_1.cs 28 49
----------------------------------------

public static bool IsWindowOnAnyScreen (Window Window, short WindowSizeX, short WindowSizeY, bool AutoAdjustWindow) {
    var Screen = System.Windows.Forms.Screen.FromHandle (new WindowInteropHelper (Window).Handle);
    bool LeftSideTest = false, TopSideTest = false, BottomSideTest = false, RightSideTest = false;
    if (Window.Left >= Screen.WorkingArea.Left)
        LeftSideTest = true;
    if (Window.Top >= Screen.WorkingArea.Top)
        TopSideTest = true;
    if ((Window.Top + WindowSizeY) <= Screen.WorkingArea.Bottom)
        BottomSideTest = true;
    if ((Window.Left + WindowSizeX) <= Screen.WorkingArea.Right)
        RightSideTest = true;
    if (LeftSideTest && TopSideTest && BottomSideTest && RightSideTest)
        return true;
    else {
        if (AutoAdjustWindow) {
            if (! LeftSideTest)
                Window.Left = Window.Left - (Window.Left - Screen.WorkingArea.Left);
            if (! TopSideTest)
                Window.Top = Window.Top - (Window.Top - Screen.WorkingArea.Top);
            if (! BottomSideTest)
                Window.Top = Window.Top - ((Window.Top + WindowSizeY) - Screen.WorkingArea.Bottom);
            if (! RightSideTest)
                Window.Left = Window.Left - ((Window.Left + WindowSizeX) - Screen.WorkingArea.Right);
        }
    }
    return false;
}
----------------------------------------

  public static bool IsWindowOnAnyScreen (Window Window, short WindowSizeX, short WindowSizeY, bool AutoAdjustWindow) {
    var CurrentScreen = System.Windows.Forms.Screen.FromHandle (new WindowInteropHelper (Window).Handle);
    bool BeyondXBorder = false, BeyondYBorder = false;
    if (Window.Left >= CurrentScreen.WorkingArea.Left && (Window.Left + WindowSizeX) <= CurrentScreen.WorkingArea.Right)
        BeyondXBorder = true;
    if (Window.Top >= CurrentScreen.WorkingArea.Top && (Window.Top + WindowSizeY) <= CurrentScreen.WorkingArea.Bottom)
        BeyondYBorder = true;
        
    if (BeyondXBorder && BeyondYBorder)
        return true;
    else {
        if (AutoAdjustWindow) {
            if (! BeyondXBorder)
                Window.Left = CurrentScreen.WorkingArea.Left;
            if (! BeyondYBorder)
                Window.Top = CurrentScreen.WorkingArea.Top;
        }
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
905
2
Gpt3D_Clone905_2.cs 1 27
Gpt3D_Clone905_2.cs 28 60
----------------------------------------

public static bool IsWindowOnAnyScreen (Window Window, short WindowSizeX, short WindowSizeY, bool AutoAdjustWindow) {
    var Screen = System.Windows.Forms.Screen.FromHandle (new WindowInteropHelper (Window).Handle);
    bool LeftSideTest = false, TopSideTest = false, BottomSideTest = false, RightSideTest = false;
    if (Window.Left >= Screen.WorkingArea.Left)
        LeftSideTest = true;
    if (Window.Top >= Screen.WorkingArea.Top)
        TopSideTest = true;
    if ((Window.Top + WindowSizeY) <= Screen.WorkingArea.Bottom)
        BottomSideTest = true;
    if ((Window.Left + WindowSizeX) <= Screen.WorkingArea.Right)
        RightSideTest = true;
    if (LeftSideTest && TopSideTest && BottomSideTest && RightSideTest)
        return true;
    else {
        if (AutoAdjustWindow) {
            if (! LeftSideTest)
                Window.Left = Window.Left - (Window.Left - Screen.WorkingArea.Left);
            if (! TopSideTest)
                Window.Top = Window.Top - (Window.Top - Screen.WorkingArea.Top);
            if (! BottomSideTest)
                Window.Top = Window.Top - ((Window.Top + WindowSizeY) - Screen.WorkingArea.Bottom);
            if (! RightSideTest)
                Window.Left = Window.Left - ((Window.Left + WindowSizeX) - Screen.WorkingArea.Right);
        }
    }
    return false;
}
----------------------------------------

  public static bool IsWindowOnAnyScreen (Window Window, short WindowSizeX, short WindowSizeY, bool AutoAdjustWindow) {
    var ScreenFrame = System.Windows.Forms.Screen.FromHandle (new WindowInteropHelper (Window).Handle);
    int HighestScreenBorder = ScreenFrame.WorkingArea.Bottom, RightmostScreenBorder = ScreenFrame.WorkingArea.Right;
    if ((Window.Left >= ScreenFrame.WorkingArea.Left) && 
        (Window.Top >= ScreenFrame.WorkingArea.Top) && 
        (Window.Top + WindowSizeY) <= HighestScreenBorder && 
        (Window.Left + WindowSizeX) <= RightmostScreenBorder) 
{
        return true;
    } else {
        if (AutoAdjustWindow) {
            if (Window.Left < ScreenFrame.WorkingArea.Left) 
            {
                Window.Left = ScreenFrame.WorkingArea.Left; 
            }
            if (Window.Top < ScreenFrame.WorkingArea.Top) 
            {
                Window.Top = ScreenFrame.WorkingArea.Top;
            }
            if (Window.Top + WindowSizeY > HighestScreenBorder) 
            {
                Window.Top = HighestScreenBorder - WindowSizeY;
            }
            if (Window.Left + WindowSizeX > RightmostScreenBorder) 
            {
                Window.Left = RightmostScreenBorder - WindowSizeX;
            }
        }
        return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
905
3
Gpt3D_Clone905_3.cs 1 27
Gpt3D_Clone905_3.cs 28 59
----------------------------------------

public static bool IsWindowOnAnyScreen (Window Window, short WindowSizeX, short WindowSizeY, bool AutoAdjustWindow) {
    var Screen = System.Windows.Forms.Screen.FromHandle (new WindowInteropHelper (Window).Handle);
    bool LeftSideTest = false, TopSideTest = false, BottomSideTest = false, RightSideTest = false;
    if (Window.Left >= Screen.WorkingArea.Left)
        LeftSideTest = true;
    if (Window.Top >= Screen.WorkingArea.Top)
        TopSideTest = true;
    if ((Window.Top + WindowSizeY) <= Screen.WorkingArea.Bottom)
        BottomSideTest = true;
    if ((Window.Left + WindowSizeX) <= Screen.WorkingArea.Right)
        RightSideTest = true;
    if (LeftSideTest && TopSideTest && BottomSideTest && RightSideTest)
        return true;
    else {
        if (AutoAdjustWindow) {
            if (! LeftSideTest)
                Window.Left = Window.Left - (Window.Left - Screen.WorkingArea.Left);
            if (! TopSideTest)
                Window.Top = Window.Top - (Window.Top - Screen.WorkingArea.Top);
            if (! BottomSideTest)
                Window.Top = Window.Top - ((Window.Top + WindowSizeY) - Screen.WorkingArea.Bottom);
            if (! RightSideTest)
                Window.Left = Window.Left - ((Window.Left + WindowSizeX) - Screen.WorkingArea.Right);
        }
    }
    return false;
}
----------------------------------------

  public static bool IsWindowOnAnyScreen (Window Window, short WindowSizeX, short WindowSizeY, bool AutoAdjustWindow) {
    var ThisScreen = System.Windows.Forms.Screen.FromHandle (new WindowInteropHelper (Window).Handle);
    if ((Window.Left >= ThisScreen.WorkingArea.Left) && 
        (Window.Top >= ThisScreen.WorkingArea.Top) && 
        ((Window.Top + WindowSizeY) <= ThisScreen.WorkingArea.Bottom) && 
        ((Window.Left + WindowSizeX) <= ThisScreen.WorkingArea.Right)) 
{
        return true;
    } else {
        if (AutoAdjustWindow) {
            if (Window.Left < ThisScreen.WorkingArea.Left) 
            {
                Window.Left = ThisScreen.WorkingArea.Left; 
            }
            if (Window.Top < ThisScreen.WorkingArea.Top) 
            {
                Window.Top = ThisScreen.WorkingArea.Top;
            }
            if (Window.Top + WindowSizeY > ThisScreen.WorkingArea.Bottom) 
            {
                Window.Top = ThisScreen.WorkingArea.Bottom - WindowSizeY;
            }
            if (Window.Left + WindowSizeX > ThisScreen.WorkingArea.Right) 
            {
                Window.Left = ThisScreen.WorkingArea.Right - WindowSizeX;
            }
        }
        return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
905
4
Gpt3D_Clone905_4.cs 1 27
Gpt3D_Clone905_4.cs 28 57
----------------------------------------

public static bool IsWindowOnAnyScreen (Window Window, short WindowSizeX, short WindowSizeY, bool AutoAdjustWindow) {
    var Screen = System.Windows.Forms.Screen.FromHandle (new WindowInteropHelper (Window).Handle);
    bool LeftSideTest = false, TopSideTest = false, BottomSideTest = false, RightSideTest = false;
    if (Window.Left >= Screen.WorkingArea.Left)
        LeftSideTest = true;
    if (Window.Top >= Screen.WorkingArea.Top)
        TopSideTest = true;
    if ((Window.Top + WindowSizeY) <= Screen.WorkingArea.Bottom)
        BottomSideTest = true;
    if ((Window.Left + WindowSizeX) <= Screen.WorkingArea.Right)
        RightSideTest = true;
    if (LeftSideTest && TopSideTest && BottomSideTest && RightSideTest)
        return true;
    else {
        if (AutoAdjustWindow) {
            if (! LeftSideTest)
                Window.Left = Window.Left - (Window.Left - Screen.WorkingArea.Left);
            if (! TopSideTest)
                Window.Top = Window.Top - (Window.Top - Screen.WorkingArea.Top);
            if (! BottomSideTest)
                Window.Top = Window.Top - ((Window.Top + WindowSizeY) - Screen.WorkingArea.Bottom);
            if (! RightSideTest)
                Window.Left = Window.Left - ((Window.Left + WindowSizeX) - Screen.WorkingArea.Right);
        }
    }
    return false;
}
----------------------------------------

  public static bool IsWindowOnAnyScreen (Window Window, short WindowSizeX, short WindowSizeY, bool AutoAdjustWindow) {
    var NowScreen = System.Windows.Forms.Screen.FromHandle (new WindowInteropHelper (Window).Handle);
    if (Window.Left >= NowScreen.WorkingArea.Left && Window.Top >= NowScreen.WorkingArea.Top && 
    Window.Top + WindowSizeY <= NowScreen.WorkingArea.Bottom && Window.Left + WindowSizeX <= NowScreen.WorkingArea.Right) 
{
        return true;
    } else {
        if (AutoAdjustWindow) {
            if (Window.Left < NowScreen.WorkingArea.Left) 
            {
                Window.Left = NowScreen.WorkingArea.Left;
            }
            if (Window.Top < NowScreen.WorkingArea.Top) 
            {
                Window.Top = NowScreen.WorkingArea.Top;
            }
            if (Window.Top + WindowSizeY > NowScreen.WorkingArea.Bottom) 
            {
                Window.Top = NowScreen.WorkingArea.Bottom - WindowSizeY;
            }
            if (Window.Left + WindowSizeX > NowScreen.WorkingArea.Right) 
            {
                Window.Left = NowScreen.WorkingArea.Right - WindowSizeX;
            }
        }
        return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
905
5
Gpt3D_Clone905_5.cs 1 27
Gpt3D_Clone905_5.cs 28 59
----------------------------------------

public static bool IsWindowOnAnyScreen (Window Window, short WindowSizeX, short WindowSizeY, bool AutoAdjustWindow) {
    var Screen = System.Windows.Forms.Screen.FromHandle (new WindowInteropHelper (Window).Handle);
    bool LeftSideTest = false, TopSideTest = false, BottomSideTest = false, RightSideTest = false;
    if (Window.Left >= Screen.WorkingArea.Left)
        LeftSideTest = true;
    if (Window.Top >= Screen.WorkingArea.Top)
        TopSideTest = true;
    if ((Window.Top + WindowSizeY) <= Screen.WorkingArea.Bottom)
        BottomSideTest = true;
    if ((Window.Left + WindowSizeX) <= Screen.WorkingArea.Right)
        RightSideTest = true;
    if (LeftSideTest && TopSideTest && BottomSideTest && RightSideTest)
        return true;
    else {
        if (AutoAdjustWindow) {
            if (! LeftSideTest)
                Window.Left = Window.Left - (Window.Left - Screen.WorkingArea.Left);
            if (! TopSideTest)
                Window.Top = Window.Top - (Window.Top - Screen.WorkingArea.Top);
            if (! BottomSideTest)
                Window.Top = Window.Top - ((Window.Top + WindowSizeY) - Screen.WorkingArea.Bottom);
            if (! RightSideTest)
                Window.Left = Window.Left - ((Window.Left + WindowSizeX) - Screen.WorkingArea.Right);
        }
    }
    return false;
}
----------------------------------------

  public static bool IsWindowOnAnyScreen (Window Window, short WindowSizeX, short WindowSizeY, bool AutoAdjustWindow) {
    var CurrentScreen = System.Windows.Forms.Screen.FromHandle (new WindowInteropHelper (Window).Handle);
    if ((Window.Left >= Screen.WorkingArea.Left) && 
        (Window.Top >= Screen.WorkingArea.Top) && 
        ((Window.Top + WindowSizeY) <= Screen.WorkingArea.Bottom) && 
        ((Window.Left + WindowSizeX) <= Screen.WorkingArea.Right)) 
{
        return true;
    } else {
        if (AutoAdjustWindow) {
            if (Window.Left < Screen.WorkingArea.Left) 
            {
                Window.Left = Screen.WorkingArea.Left; 
            }
            if (Window.Top < Screen.WorkingArea.Top) 
            {
                Window.Top = Screen.WorkingArea.Top;
            }
            if (Window.Top + WindowSizeY > Screen.WorkingArea.Bottom) 
            {
                Window.Top = Screen.WorkingArea.Bottom - WindowSizeY;
            }
            if (Window.Left + WindowSizeX > Screen.WorkingArea.Right) 
            {
                Window.Left = Screen.WorkingArea.Right - WindowSizeX;
            }
        }
        return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
905
6
Gpt3D_Clone905_6.cs 1 27
Gpt3D_Clone905_6.cs 28 59
----------------------------------------

public static bool IsWindowOnAnyScreen (Window Window, short WindowSizeX, short WindowSizeY, bool AutoAdjustWindow) {
    var Screen = System.Windows.Forms.Screen.FromHandle (new WindowInteropHelper (Window).Handle);
    bool LeftSideTest = false, TopSideTest = false, BottomSideTest = false, RightSideTest = false;
    if (Window.Left >= Screen.WorkingArea.Left)
        LeftSideTest = true;
    if (Window.Top >= Screen.WorkingArea.Top)
        TopSideTest = true;
    if ((Window.Top + WindowSizeY) <= Screen.WorkingArea.Bottom)
        BottomSideTest = true;
    if ((Window.Left + WindowSizeX) <= Screen.WorkingArea.Right)
        RightSideTest = true;
    if (LeftSideTest && TopSideTest && BottomSideTest && RightSideTest)
        return true;
    else {
        if (AutoAdjustWindow) {
            if (! LeftSideTest)
                Window.Left = Window.Left - (Window.Left - Screen.WorkingArea.Left);
            if (! TopSideTest)
                Window.Top = Window.Top - (Window.Top - Screen.WorkingArea.Top);
            if (! BottomSideTest)
                Window.Top = Window.Top - ((Window.Top + WindowSizeY) - Screen.WorkingArea.Bottom);
            if (! RightSideTest)
                Window.Left = Window.Left - ((Window.Left + WindowSizeX) - Screen.WorkingArea.Right);
        }
    }
    return false;
}
----------------------------------------

  public static bool IsWindowOnAnyScreen (Window Window, short WindowSizeX, short WindowSizeY, bool AutoAdjustWindow) {
    var Screen = System.Windows.Forms.Screen.FromHandle (new WindowInteropHelper (Window).Handle);
    if (Window.Left >= Screen.WorkingArea.Left && 
        Window.Top >= Screen.WorkingArea.Top && 
        (Window.Top + WindowSizeY) <= Screen.WorkingArea.Bottom && 
        (Window.Left + WindowSizeX) <= Screen.WorkingArea.Right) 
{
        return true;
    } else {
        if (AutoAdjustWindow) {
            if (Window.Left < Screen.WorkingArea.Left) 
            {
                Window.Left = Screen.WorkingArea.Left;
            }
            if (Window.Top < Screen.WorkingArea.Top) 
            {
                Window.Top = Screen.WorkingArea.Top;
            }
            if (Window.Top + WindowSizeY > Screen.WorkingArea.Bottom) 
            {
                Window.Top = Screen.WorkingArea.Bottom - WindowSizeY;
            }
            if (Window.Left + WindowSizeX > Screen.WorkingArea.Right) 
            {
                Window.Left = Screen.WorkingArea.Right - WindowSizeX;
            }
        }
        return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
905
7
Gpt3D_Clone905_7.cs 1 27
Gpt3D_Clone905_7.cs 28 57
----------------------------------------

public static bool IsWindowOnAnyScreen (Window Window, short WindowSizeX, short WindowSizeY, bool AutoAdjustWindow) {
    var Screen = System.Windows.Forms.Screen.FromHandle (new WindowInteropHelper (Window).Handle);
    bool LeftSideTest = false, TopSideTest = false, BottomSideTest = false, RightSideTest = false;
    if (Window.Left >= Screen.WorkingArea.Left)
        LeftSideTest = true;
    if (Window.Top >= Screen.WorkingArea.Top)
        TopSideTest = true;
    if ((Window.Top + WindowSizeY) <= Screen.WorkingArea.Bottom)
        BottomSideTest = true;
    if ((Window.Left + WindowSizeX) <= Screen.WorkingArea.Right)
        RightSideTest = true;
    if (LeftSideTest && TopSideTest && BottomSideTest && RightSideTest)
        return true;
    else {
        if (AutoAdjustWindow) {
            if (! LeftSideTest)
                Window.Left = Window.Left - (Window.Left - Screen.WorkingArea.Left);
            if (! TopSideTest)
                Window.Top = Window.Top - (Window.Top - Screen.WorkingArea.Top);
            if (! BottomSideTest)
                Window.Top = Window.Top - ((Window.Top + WindowSizeY) - Screen.WorkingArea.Bottom);
            if (! RightSideTest)
                Window.Left = Window.Left - ((Window.Left + WindowSizeX) - Screen.WorkingArea.Right);
        }
    }
    return false;
}
----------------------------------------

  public static bool IsWindowOnAnyScreen (Window Window, short WindowSizeX, short WindowSizeY, bool AutoAdjustWindow) {
    var TargetScreen = System.Windows.Forms.Screen.FromHandle (new WindowInteropHelper (Window).Handle);
    if (Window.Left >= TargetScreen.WorkingArea.Left && Window.Top >= TargetScreen.WorkingArea.Top 
    && Window.Top + WindowSizeY <= TargetScreen.WorkingArea.Bottom && Window.Left + WindowSizeX <= TargetScreen.WorkingArea.Right) 
{
        return true;
    } else {
        if (AutoAdjustWindow) {
            if (Window.Left < TargetScreen.WorkingArea.Left) 
            {
                Window.Left = TargetScreen.WorkingArea.Left; 
            }
            if (Window.Top < TargetScreen.WorkingArea.Top) 
            {
                Window.Top = TargetScreen.WorkingArea.Top;
            }
            if (Window.Top + WindowSizeY > TargetScreen.WorkingArea.Bottom) 
            {
                Window.Top = TargetScreen.WorkingArea.Bottom - WindowSizeY;
            }
            if (Window.Left + WindowSizeX > TargetScreen.WorkingArea.Right) 
            {
                Window.Left = TargetScreen.WorkingArea.Right - WindowSizeX;
            }
        }
        return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
908
0
Gpt3D_Clone908_0.cs 1 13
Gpt3D_Clone908_0.cs 14 38
----------------------------------------

static bool IsXmlRooted (Stream st) {
    bool sawRoot = false;
    using (var reader = XmlReader.Create (st, new XmlReaderSettings () {ConformanceLevel = ConformanceLevel.Fragment}))
    {
        while (reader.Read ()) {
            if (reader.NodeType == XmlNodeType.Element && reader.Depth == 0) {
                if (sawRoot)
                    return false;
                sawRoot = true;
            }
        }
    } return true;
}
----------------------------------------

 static bool IsXmlRooted (Stream st) {
    bool isRooted = false;
    int depthLevel = 0;
    using (var reader = XmlReader.Create (st, new XmlReaderSettings() {ConformanceLevel = ConformanceLevel.Fragment}))
    {
        while (reader.Read()) {
            switch (reader.NodeType) {
                case XmlNodeType.Element:
                    if (depthLevel > 0)
                        break;
                    isRooted = true;
                    depthLevel++;
                    break;
                case XmlNodeType.EndElement:
                    depthLevel--;
                    break;
            }
            if (depthLevel == 0 && !isRooted)
                return false;
        }
    }
    return isRooted;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
908
1
Gpt3D_Clone908_1.cs 1 13
Gpt3D_Clone908_1.cs 14 37
----------------------------------------

static bool IsXmlRooted (Stream st) {
    bool sawRoot = false;
    using (var reader = XmlReader.Create (st, new XmlReaderSettings () {ConformanceLevel = ConformanceLevel.Fragment}))
    {
        while (reader.Read ()) {
            if (reader.NodeType == XmlNodeType.Element && reader.Depth == 0) {
                if (sawRoot)
                    return false;
                sawRoot = true;
            }
        }
    } return true;
}
----------------------------------------

 static bool IsXmlRooted (Stream st) {
    bool isRooted = true;
    int depthLevel = 0;
    using (var reader = XmlReader.Create (st, new XmlReaderSettings() {ConformanceLevel = ConformanceLevel.Fragment}))
    {
        while (reader.Read()) {
            switch (reader.NodeType){
                case XmlNodeType.Element:
                    if (depthLevel > 0)
                        isRooted = false;
                    depthLevel++;
                    break;
                case XmlNodeType.EndElement:
                    depthLevel--;
                    break;
            }
            if (!isRooted)
                return false;
        }
    }
    return isRooted;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
908
2
Gpt3D_Clone908_2.cs 1 13
Gpt3D_Clone908_2.cs 14 34
----------------------------------------

static bool IsXmlRooted (Stream st) {
    bool sawRoot = false;
    using (var reader = XmlReader.Create (st, new XmlReaderSettings () {ConformanceLevel = ConformanceLevel.Fragment}))
    {
        while (reader.Read ()) {
            if (reader.NodeType == XmlNodeType.Element && reader.Depth == 0) {
                if (sawRoot)
                    return false;
                sawRoot = true;
            }
        }
    } return true;
}
----------------------------------------

 static bool IsXmlRooted (Stream st) {
    int depthLevel = 0;
    bool sawRoot = false;
    using (var reader = XmlReader.Create (st, new XmlReaderSettings() {ConformanceLevel = ConformanceLevel.Fragment}))
    {
        while (reader.Read()) {
            if (reader.NodeType == XmlNodeType.Element) {
                depthLevel++;
                if (depthLevel == 1)
                    sawRoot = true;
            }
            else if (reader.NodeType == XmlNodeType.EndElement)
                depthLevel--;
            if (sawRoot && depthLevel > 1)
                return false;
        }
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
908
8
Gpt3D_Clone908_8.cs 1 13
Gpt3D_Clone908_8.cs 14 28
----------------------------------------

static bool IsXmlRooted (Stream st) {
    bool sawRoot = false;
    using (var reader = XmlReader.Create (st, new XmlReaderSettings () {ConformanceLevel = ConformanceLevel.Fragment}))
    {
        while (reader.Read ()) {
            if (reader.NodeType == XmlNodeType.Element && reader.Depth == 0) {
                if (sawRoot)
                    return false;
                sawRoot = true;
            }
        }
    } return true;
}
----------------------------------------

  static bool IsXmlRooted (Stream st) {
    using (var reader = XmlReader.Create (st, new XmlReaderSettings() {ConformanceLevel = ConformanceLevel.Fragment}))
    {
        int elementCount = 0;
        while (reader.Read()) {
            if (reader.NodeType == XmlNodeType.Element && reader.Depth == 0) 
                elementCount++;
        }
        if (elementCount == 1)
            return true;
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
911
0
Gpt3D_Clone911_0.cs 1 12
Gpt3D_Clone911_0.cs 13 42
----------------------------------------

static int Main (string [] args) {
    try {
        int testcase = (Int32.Parse (args [0]));
        RunTest (testcase);
    }
    catch (Exception x) {
        Console.WriteLine ("test failed: " + x.Message);
        return 1;
    }
    Console.WriteLine ("test passed.");
    return 0;
}
----------------------------------------

 static int Main(string[] args)
{
    int testcase;
    try
    {
        if(Int32.TryParse(args[0], out testcase))
        {
            RunTest(testcase);
            Console.WriteLine("test passed.");
            return 0;
        }
        else
        {
            throw new FormatException();
        }
    }
    catch(FormatException ex)
    {
        Console.WriteLine("test failed: " + ex.Message);
        return 1;
    }
    catch (Exception x)
    {
        Console.WriteLine("test failed: " + x.Message);
        return 1;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
911
1
Gpt3D_Clone911_1.cs 1 12
Gpt3D_Clone911_1.cs 13 37
----------------------------------------

static int Main (string [] args) {
    try {
        int testcase = (Int32.Parse (args [0]));
        RunTest (testcase);
    }
    catch (Exception x) {
        Console.WriteLine ("test failed: " + x.Message);
        return 1;
    }
    Console.WriteLine ("test passed.");
    return 0;
}
----------------------------------------

 static int Main(string[] args)
{
    int testcase;
    bool isParsed = Int32.TryParse(args[0], out testcase);
    if(isParsed)
    {
        try 
        {
            RunTest(testcase);
            Console.WriteLine("test passed.");
            return 0;
        }
        catch (Exception x)
        {
            Console.WriteLine("test failed:" + x.Message);
            return 1;
        }
    }
    else 
    {
        throw new FormatException("invalid format");
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
911
2
Gpt3D_Clone911_2.cs 1 12
Gpt3D_Clone911_2.cs 13 37
----------------------------------------

static int Main (string [] args) {
    try {
        int testcase = (Int32.Parse (args [0]));
        RunTest (testcase);
    }
    catch (Exception x) {
        Console.WriteLine ("test failed: " + x.Message);
        return 1;
    }
    Console.WriteLine ("test passed.");
    return 0;
}
----------------------------------------

 static int Main(string[] args)
{
    try
    {
        int testcase;
        if(Int32.TryParse(args[0], out testcase))
        {
            RunTest(testcase);
            Console.WriteLine("test passed.");
            return 0;
        }
        else 
        {
            throw new Exception();
        }
    }
    catch(Exception x)
    {
        Console.WriteLine("test failed:" + x.Message);
        return 1;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
914
0
Gpt3D_Clone914_0.cs 1 15
Gpt3D_Clone914_0.cs 16 41
----------------------------------------

private static string InsertFillerChar (char filler, string text, int inserts) {
    string result = "";
    int inserted = 0;
    for (int i = 0; i < text.Length; i ++) {
        result += text [i];
        if (i >= text.Length - 1)
            continue;
        int shouldbeinserted = (int) (inserts * (i + 1) / (text.Length - 1.0));
        int insertnow = shouldbeinserted - inserted;
        for (int j = 0; j < insertnow; j ++)
            result += filler;
        inserted += insertnow;
    }
    return result;
}
----------------------------------------

 private static string InsertFillerChar (char filler, string text, int inserts) {
    string result = "";
    int index = 0;
    bool insertFiller = false;
    
	for (int i = 0; i < text.Length - 1; i++) {
		if (index == (inserts)) {
			insertFiller = true;
			index = 0;
		}
		
		result += text[i];
		
		if (insertFiller) {
			result += filler;
			insertFiller = false;
		}
		
		index++;
    }
    result += text[text.Length - 1];
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
914
1
Gpt3D_Clone914_1.cs 1 15
Gpt3D_Clone914_1.cs 16 33
----------------------------------------

private static string InsertFillerChar (char filler, string text, int inserts) {
    string result = "";
    int inserted = 0;
    for (int i = 0; i < text.Length; i ++) {
        result += text [i];
        if (i >= text.Length - 1)
            continue;
        int shouldbeinserted = (int) (inserts * (i + 1) / (text.Length - 1.0));
        int insertnow = shouldbeinserted - inserted;
        for (int j = 0; j < insertnow; j ++)
            result += filler;
        inserted += insertnow;
    }
    return result;
}
----------------------------------------

private static string InsertFillerChar (char filler, string text, int inserts) {
    string result = "";
    int counter = 0;
    
	for (int i = 0; i < text.Length - 1; i++) {
		result += text[i];
		counter++;
		if (counter == inserts) {
			result += filler;
			counter = 0;
		}
    }
		
    result += text[text.Length - 1];
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
914
2
Gpt3D_Clone914_2.cs 1 15
Gpt3D_Clone914_2.cs 16 32
----------------------------------------

private static string InsertFillerChar (char filler, string text, int inserts) {
    string result = "";
    int inserted = 0;
    for (int i = 0; i < text.Length; i ++) {
        result += text [i];
        if (i >= text.Length - 1)
            continue;
        int shouldbeinserted = (int) (inserts * (i + 1) / (text.Length - 1.0));
        int insertnow = shouldbeinserted - inserted;
        for (int j = 0; j < insertnow; j ++)
            result += filler;
        inserted += insertnow;
    }
    return result;
}
----------------------------------------

 private static string InsertFillerChar (char filler, string text, int inserts) {
    string result = "";
    int numInserts = 0;
	for (int i = 0; i < text.Length - 1; i++) {
		result += text[i];
		if (numInserts < inserts) {
			result += filler;
			numInserts++;
		}
    }
		
    result += text[text.Length - 1];
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
914
3
Gpt3D_Clone914_3.cs 1 15
Gpt3D_Clone914_3.cs 16 30
----------------------------------------

private static string InsertFillerChar (char filler, string text, int inserts) {
    string result = "";
    int inserted = 0;
    for (int i = 0; i < text.Length; i ++) {
        result += text [i];
        if (i >= text.Length - 1)
            continue;
        int shouldbeinserted = (int) (inserts * (i + 1) / (text.Length - 1.0));
        int insertnow = shouldbeinserted - inserted;
        for (int j = 0; j < insertnow; j ++)
            result += filler;
        inserted += insertnow;
    }
    return result;
}
----------------------------------------

 private static string InsertFillerChar (char filler, string text, int inserts) {
    string result = "";
    int numToInsert = (int)(text.Length / inserts);
    
	for (int i = 0; i < text.Length - 1; i++) {
		result += text[i];
		if (i % numToInsert == 0)
			result += filler;
    }
		
    result += text[text.Length - 1];
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
914
4
Gpt3D_Clone914_4.cs 1 15
Gpt3D_Clone914_4.cs 16 30
----------------------------------------

private static string InsertFillerChar (char filler, string text, int inserts) {
    string result = "";
    int inserted = 0;
    for (int i = 0; i < text.Length; i ++) {
        result += text [i];
        if (i >= text.Length - 1)
            continue;
        int shouldbeinserted = (int) (inserts * (i + 1) / (text.Length - 1.0));
        int insertnow = shouldbeinserted - inserted;
        for (int j = 0; j < insertnow; j ++)
            result += filler;
        inserted += insertnow;
    }
    return result;
}
----------------------------------------

 private static string InsertFillerChar (char filler, string text, int inserts) {
    string result = "";
    
	for (int i = 0; i < text.Length; i++) {
		decimal decimalInserts = (decimal)inserts * i / (text.Length - 1);
		int ceilingInserts = (int) Math.Ceiling(decimalInserts);
		for(int j = 0; j < ceilingInserts; j++) {
			result += filler;   
		} 
		result += text[i];
    }  
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
914
5
Gpt3D_Clone914_5.cs 1 15
Gpt3D_Clone914_5.cs 16 30
----------------------------------------

private static string InsertFillerChar (char filler, string text, int inserts) {
    string result = "";
    int inserted = 0;
    for (int i = 0; i < text.Length; i ++) {
        result += text [i];
        if (i >= text.Length - 1)
            continue;
        int shouldbeinserted = (int) (inserts * (i + 1) / (text.Length - 1.0));
        int insertnow = shouldbeinserted - inserted;
        for (int j = 0; j < insertnow; j ++)
            result += filler;
        inserted += insertnow;
    }
    return result;
}
----------------------------------------

  private static string InsertFillerChar (char filler, string text, int inserts) {
    string result = "";
    int i;
    
	for (i = 0; i < inserts; i++) {
		result += filler;
		result += text[i];
    }
		
    for ( ; i < text.Length; i++)
        result += text[i];
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
914
7
Gpt3D_Clone914_7.cs 1 15
Gpt3D_Clone914_7.cs 16 27
----------------------------------------

private static string InsertFillerChar (char filler, string text, int inserts) {
    string result = "";
    int inserted = 0;
    for (int i = 0; i < text.Length; i ++) {
        result += text [i];
        if (i >= text.Length - 1)
            continue;
        int shouldbeinserted = (int) (inserts * (i + 1) / (text.Length - 1.0));
        int insertnow = shouldbeinserted - inserted;
        for (int j = 0; j < insertnow; j ++)
            result += filler;
        inserted += insertnow;
    }
    return result;
}
----------------------------------------

 private static string InsertFillerChar (char filler, string text, int inserts) {
    string result = "";
    
	for (int i = 0; i < text.Length; i++) {
		result += text[i];
		if (i % inserts == 0 && i != text.Length - 1)
			result += filler;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
914
8
Gpt3D_Clone914_8.cs 1 15
Gpt3D_Clone914_8.cs 16 26
----------------------------------------

private static string InsertFillerChar (char filler, string text, int inserts) {
    string result = "";
    int inserted = 0;
    for (int i = 0; i < text.Length; i ++) {
        result += text [i];
        if (i >= text.Length - 1)
            continue;
        int shouldbeinserted = (int) (inserts * (i + 1) / (text.Length - 1.0));
        int insertnow = shouldbeinserted - inserted;
        for (int j = 0; j < insertnow; j ++)
            result += filler;
        inserted += insertnow;
    }
    return result;
}
----------------------------------------

 private static string InsertFillerChar (char filler, string text, int inserts) {
    string result = "";
    int lastIndexPlaced; 
    
	for (lastIndexPlaced = 0; lastIndexPlaced + inserts < text.Length - 1; lastIndexPlaced += inserts)
        result = result + text[lastIndexPlaced] + new String(filler, inserts);
    result += text.Substring(lastIndexPlaced);
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
914
9
Gpt3D_Clone914_9.cs 1 15
Gpt3D_Clone914_9.cs 16 26
----------------------------------------

private static string InsertFillerChar (char filler, string text, int inserts) {
    string result = "";
    int inserted = 0;
    for (int i = 0; i < text.Length; i ++) {
        result += text [i];
        if (i >= text.Length - 1)
            continue;
        int shouldbeinserted = (int) (inserts * (i + 1) / (text.Length - 1.0));
        int insertnow = shouldbeinserted - inserted;
        for (int j = 0; j < insertnow; j ++)
            result += filler;
        inserted += insertnow;
    }
    return result;
}
----------------------------------------

  private static string InsertFillerChar (char filler, string text, int inserts) {
    string result = "";
    int interval = (int) Math.Ceiling((text.Length - 1.0)/inserts);
    
	for (int i = 0; i < text.Length - 1; i+= interval)
        result = result + text[i] + filler;
    result += text[text.Length - 1];
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
915
1
Gpt3D_Clone915_1.cs 1 26
Gpt3D_Clone915_1.cs 27 62
----------------------------------------

private DataTable GetDTfromDGV (DataGridView dgv) {
    DataTable dt = new DataTable ();
    foreach (DataGridViewColumn column in dgv.Columns) {
        dt.Columns.Add (column.Name, typeof (string));
    }
    foreach (DataGridViewRow dgvRow in dgv.Rows) {
        DataRow dr = dt.NewRow ();
        for (int col = 0; col < dgv.Columns.Count; col ++) {
            dr [col] = dgvRow.Cells [col].Value;
        }
        dt.Rows.Add (dr);
    }
    for (int row = dt.Rows.Count - 1; row >= 0; row --) {
        bool flag = true;
        for (int col = 0; col < dt.Columns.Count; col ++) {
            if (dt.Rows [row] [col] != DBNull.Value) {
                flag = false;
                break;
            }
        }
        if (flag == true) {
            dt.Rows.RemoveAt (row);
        }
    }
    return dt;
}
----------------------------------------

 public DataTable GetDataTableFromDataGridView (DataGridView dgv)
{
        DataTable dt = new DataTable ();
        foreach (DataGridViewColumn column in dgv.Columns)
        {
          dt.Columns.Add (column.Name, typeof (string));
        }
        
        foreach (DataGridViewRow row in dgv.Rows)
        {
          if (! row.IsNewRow)
          {
            DataRow dr = dt.NewRow ();
            int colCount = 0;
            foreach (DataGridViewCell cell in row.Cells)
            {
              dr.ItemArray [colCount] = cell.Value;
              colCount ++;
            }
            dt.Rows.Add (dr);
          }
        }
        
        for (int row = 0; row < dt.Rows.Count; row ++)
        {
          if (dt.Rows [row].ItemArray.All (item => System.Convert.IsDBNull (item)))
          {
            dt.Rows.RemoveAt (row);
          }
        }
        
        return dt;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
915
2
Gpt3D_Clone915_2.cs 1 26
Gpt3D_Clone915_2.cs 27 59
----------------------------------------

private DataTable GetDTfromDGV (DataGridView dgv) {
    DataTable dt = new DataTable ();
    foreach (DataGridViewColumn column in dgv.Columns) {
        dt.Columns.Add (column.Name, typeof (string));
    }
    foreach (DataGridViewRow dgvRow in dgv.Rows) {
        DataRow dr = dt.NewRow ();
        for (int col = 0; col < dgv.Columns.Count; col ++) {
            dr [col] = dgvRow.Cells [col].Value;
        }
        dt.Rows.Add (dr);
    }
    for (int row = dt.Rows.Count - 1; row >= 0; row --) {
        bool flag = true;
        for (int col = 0; col < dt.Columns.Count; col ++) {
            if (dt.Rows [row] [col] != DBNull.Value) {
                flag = false;
                break;
            }
        }
        if (flag == true) {
            dt.Rows.RemoveAt (row);
        }
    }
    return dt;
}
----------------------------------------

 public DataTable GetDataTableFromDataGridView (DataGridView dgv)
{
          DataTable dt = new DataTable ();
          foreach (DataGridViewColumn column in dgv.Columns)
          {
            dt.Columns.Add (column.Name, typeof (string));
          }
          foreach (DataGridViewRow dgvRow in dgv.Rows)
          {
            DataRow dr = dt.NewRow ();
            int colIndex = 0;
            foreach (DataGridViewCell cell in dgvRow.Cells)
            {
              dr.ItemArray [colIndex] = cell.Value;
              colIndex ++;
            }
            dt.Rows.Add (dr);
          }
        
          for ( int row = dt.Rows.Count - 1; row >= 0; row -- )
          {
            if ( dt.Rows [row].ItemArray.All (item => System.Convert.IsDBNull (item)))
            {
              dt.Rows.RemoveAt (row);
            }
          }
          return dt;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
915
3
Gpt3D_Clone915_3.cs 1 26
Gpt3D_Clone915_3.cs 27 53
----------------------------------------

private DataTable GetDTfromDGV (DataGridView dgv) {
    DataTable dt = new DataTable ();
    foreach (DataGridViewColumn column in dgv.Columns) {
        dt.Columns.Add (column.Name, typeof (string));
    }
    foreach (DataGridViewRow dgvRow in dgv.Rows) {
        DataRow dr = dt.NewRow ();
        for (int col = 0; col < dgv.Columns.Count; col ++) {
            dr [col] = dgvRow.Cells [col].Value;
        }
        dt.Rows.Add (dr);
    }
    for (int row = dt.Rows.Count - 1; row >= 0; row --) {
        bool flag = true;
        for (int col = 0; col < dt.Columns.Count; col ++) {
            if (dt.Rows [row] [col] != DBNull.Value) {
                flag = false;
                break;
            }
        }
        if (flag == true) {
            dt.Rows.RemoveAt (row);
        }
    }
    return dt;
}
----------------------------------------

 public DataTable GetDataTableFromDataGridView (DataGridView dgv)
{
        DataTable dt = new DataTable ();
        foreach (DataGridViewColumn column in dgv.Columns)
        {
          dt.Columns.Add (column.Name, typeof (string));
        }
        foreach (DataGridViewRow dgvRow in dgv.Rows)
        {
          DataRow dr = dt.NewRow ();
          int colIndex = 0;
          foreach (DataGridViewCell cell in dgvRow.Cells)
          {
            dr.ItemArray [colIndex] = cell.Value;
            colIndex ++;
          }
          dt.Rows.Add (dr);
        }
        dt.Rows.ToList ().RemoveAll (r => r.ItemArray.All (v => v == DBNull.Value));
        return dt;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
915
4
Gpt3D_Clone915_4.cs 1 26
Gpt3D_Clone915_4.cs 27 51
----------------------------------------

private DataTable GetDTfromDGV (DataGridView dgv) {
    DataTable dt = new DataTable ();
    foreach (DataGridViewColumn column in dgv.Columns) {
        dt.Columns.Add (column.Name, typeof (string));
    }
    foreach (DataGridViewRow dgvRow in dgv.Rows) {
        DataRow dr = dt.NewRow ();
        for (int col = 0; col < dgv.Columns.Count; col ++) {
            dr [col] = dgvRow.Cells [col].Value;
        }
        dt.Rows.Add (dr);
    }
    for (int row = dt.Rows.Count - 1; row >= 0; row --) {
        bool flag = true;
        for (int col = 0; col < dt.Columns.Count; col ++) {
            if (dt.Rows [row] [col] != DBNull.Value) {
                flag = false;
                break;
            }
        }
        if (flag == true) {
            dt.Rows.RemoveAt (row);
        }
    }
    return dt;
}
----------------------------------------

 public DataTable GetDataTableFromDataGridView (DataGridView dgv)
{
        DataTable dt = new DataTable ();
        foreach (DataGridViewColumn column in dgv.Columns)
        {
          dt.Columns.Add (column.Name, typeof (string));
        }
        foreach (DataGridViewRow dgvRow in dgv.Rows)
        {
          DataRow dr = dt.NewRow ();
          for (int col = 0; col < dgv.Columns.Count; col ++)
          {
            dr [col] = dgvRow.Cells [col].Value;
          }
          dt.Rows.Add (dr);
        }
        
        dt.Rows.Remove (dt.Rows.Cast<DataRow> ().Where (r => r.ItemArray.All (v => v == DBNull.Value)).ToArray ());
        return dt;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
916
0
Gpt3D_Clone916_0.cs 1 16
Gpt3D_Clone916_0.cs 17 47
----------------------------------------

static void Main (string [] args) {
    Console.WriteLine ("Enter the string");
    string x = Console.ReadLine ();
    Console.WriteLine ("enter the string to be searched");
    string SearchText = Console.ReadLine ();
    string [] myarr = new string [30];
    myarr = x.Split (' ');
    int i = 0;
    foreach (string s in myarr) {
        i = i + 1;
        if (s == SearchText) {
            Console.WriteLine ("The string found at position:" + i);
        }
    }
    Console.ReadLine ();
}
----------------------------------------

 static void Main(string[] args) 
{ 
    Console.WriteLine("Enter the string"); 
    string x = Console.ReadLine(); 
    Console.WriteLine("enter the string to be searched"); 
    string searchText = Console.ReadLine(); 
    string myWord = ""; 
    int pos = -1; 
    int index = 0; 
    while (myWord != searchText && index <= x.Length) 
    { 
        pos = index; 
        while (x[index] != ' ' && index < x.Length) 
        { 
            myWord += x[index]; 
            index++; 
        } 
        myWord = ""; 
        index++; 
    } 
    if (pos > -1) 
    { 
        Console.WriteLine("The string found at position:" + (pos + 1)); 
    } 
    Console.ReadLine(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
916
1
Gpt3D_Clone916_1.cs 1 16
Gpt3D_Clone916_1.cs 17 47
----------------------------------------

static void Main (string [] args) {
    Console.WriteLine ("Enter the string");
    string x = Console.ReadLine ();
    Console.WriteLine ("enter the string to be searched");
    string SearchText = Console.ReadLine ();
    string [] myarr = new string [30];
    myarr = x.Split (' ');
    int i = 0;
    foreach (string s in myarr) {
        i = i + 1;
        if (s == SearchText) {
            Console.WriteLine ("The string found at position:" + i);
        }
    }
    Console.ReadLine ();
}
----------------------------------------

 static void Main(string[] args) 
{ 
    Console.WriteLine("Enter the string"); 
    string x = Console.ReadLine(); 
    Console.WriteLine("enter the string to be searched"); 
    string searchText = Console.ReadLine(); 
    string myWord = ""; 
    int pos = -1; 
    int index = 0; 
    while (myWord != searchText && index < x.Length) 
    { 
        pos = index; 
        while ((x[index] != ' ' || x[index] != '\n') && index < x.Length) 
        { 
            myWord += x[index]; 
            index++; 
        } 
        myWord = ""; 
        index++; 
    } 
    if (pos > -1) 
    { 
        Console.WriteLine("The string found at position:" + (pos + 1)); 
    } 
    Console.ReadLine(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
916
2
Gpt3D_Clone916_2.cs 1 16
Gpt3D_Clone916_2.cs 17 50
----------------------------------------

static void Main (string [] args) {
    Console.WriteLine ("Enter the string");
    string x = Console.ReadLine ();
    Console.WriteLine ("enter the string to be searched");
    string SearchText = Console.ReadLine ();
    string [] myarr = new string [30];
    myarr = x.Split (' ');
    int i = 0;
    foreach (string s in myarr) {
        i = i + 1;
        if (s == SearchText) {
            Console.WriteLine ("The string found at position:" + i);
        }
    }
    Console.ReadLine ();
}
----------------------------------------

 static void Main(string[] args) 
{ 
    Console.WriteLine("Enter the string"); 
    string x = Console.ReadLine(); 
    Console.WriteLine("enter the string to be searched"); 
    string searchText = Console.ReadLine(); 
    int index = 0; 
    int pos = -1; 
    int len = searchText.Length; 
    while (x.IndexOf(searchText, pos + 1) > -1) 
    { 
        // pos = x.IndexOf(searchText, index); 
        for (int i = 0; i < len; i++) 
        { 
            if (x[index++] != searchText[i]) 
                break; 
            else
            { 
                if (i == len - 1) 
                    pos = index - len; 
            } 
        } 
    } 
    if (pos > -1) 
    { 
        Console.WriteLine("The string found at position:" + (pos + 1)); 
    } 
    Console.ReadLine(); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
916
5
Gpt3D_Clone916_5.cs 1 16
Gpt3D_Clone916_5.cs 17 38
----------------------------------------

static void Main (string [] args) {
    Console.WriteLine ("Enter the string");
    string x = Console.ReadLine ();
    Console.WriteLine ("enter the string to be searched");
    string SearchText = Console.ReadLine ();
    string [] myarr = new string [30];
    myarr = x.Split (' ');
    int i = 0;
    foreach (string s in myarr) {
        i = i + 1;
        if (s == SearchText) {
            Console.WriteLine ("The string found at position:" + i);
        }
    }
    Console.ReadLine ();
}
----------------------------------------

 static void Main(string[] args) 
{ 
    Console.WriteLine("Enter the string"); 
    string x = Console.ReadLine(); 
    Console.WriteLine("enter the string to be searched"); 
    string searchText = Console.ReadLine(); 
    int pos = -1;
    while (x.IndexOf(searchText, pos + 1) > -1){ 
        pos = x.IndexOf(searchText, pos + 1); 
    }
    if (pos > -1) 
    { 
        Console.WriteLine("The string found at position:" + (pos + 1)); 
    } 
    Console.ReadLine(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
916
6
Gpt3D_Clone916_6.cs 1 16
Gpt3D_Clone916_6.cs 17 35
----------------------------------------

static void Main (string [] args) {
    Console.WriteLine ("Enter the string");
    string x = Console.ReadLine ();
    Console.WriteLine ("enter the string to be searched");
    string SearchText = Console.ReadLine ();
    string [] myarr = new string [30];
    myarr = x.Split (' ');
    int i = 0;
    foreach (string s in myarr) {
        i = i + 1;
        if (s == SearchText) {
            Console.WriteLine ("The string found at position:" + i);
        }
    }
    Console.ReadLine ();
}
----------------------------------------

 static void Main(string[] args) 
{ 
    Console.WriteLine("Enter the string"); 
    string x = Console.ReadLine(); 
    Console.WriteLine("enter the string to be searched"); 
    string searchText = Console.ReadLine(); 
    List<string> myList = new List<string>(); 
    myList.AddRange(x.Split(' ')); 
    int pos = myList.IndexOf(searchText); 
    if (pos > -1) 
    { 
        Console.WriteLine("The string found at position:" + (pos + 1)); 
    } 
    Console.ReadLine(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
916
7
Gpt3D_Clone916_7.cs 1 16
Gpt3D_Clone916_7.cs 17 33
----------------------------------------

static void Main (string [] args) {
    Console.WriteLine ("Enter the string");
    string x = Console.ReadLine ();
    Console.WriteLine ("enter the string to be searched");
    string SearchText = Console.ReadLine ();
    string [] myarr = new string [30];
    myarr = x.Split (' ');
    int i = 0;
    foreach (string s in myarr) {
        i = i + 1;
        if (s == SearchText) {
            Console.WriteLine ("The string found at position:" + i);
        }
    }
    Console.ReadLine ();
}
----------------------------------------

 static void Main(string[] args){ 
    Console.WriteLine("Enter the string"); 
    string x = Console.ReadLine(); 
    Console.WriteLine("enter the string to be searched"); 
    string searchText = Console.ReadLine(); 
    string[] myarr = x.Split(' '); 
    int pos = Array.IndexOf(myarr, searchText); 
    if (pos > -1) 
    { 
        Console.WriteLine("The string found at position:" + (pos + 1)); 
    } 
    Console.ReadLine(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
916
8
Gpt3D_Clone916_8.cs 1 16
Gpt3D_Clone916_8.cs 17 34
----------------------------------------

static void Main (string [] args) {
    Console.WriteLine ("Enter the string");
    string x = Console.ReadLine ();
    Console.WriteLine ("enter the string to be searched");
    string SearchText = Console.ReadLine ();
    string [] myarr = new string [30];
    myarr = x.Split (' ');
    int i = 0;
    foreach (string s in myarr) {
        i = i + 1;
        if (s == SearchText) {
            Console.WriteLine ("The string found at position:" + i);
        }
    }
    Console.ReadLine ();
}
----------------------------------------

 static void Main(string[] args) 
{ 
    Console.WriteLine("Enter the string"); 
    string x = Console.ReadLine(); 
    Console.WriteLine("enter the string to be searched"); 
    string searchText = Console.ReadLine(); 
     
    int pos = x.IndexOf(searchText, 0); 
    while (pos > -1) 
    { 
        Console.WriteLine("The string found at position:" + (pos + 1)); 
        pos = x.IndexOf(searchText, pos + 1); 
    } 
    Console.ReadLine(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
916
9
Gpt3D_Clone916_9.cs 1 16
Gpt3D_Clone916_9.cs 17 34
----------------------------------------

static void Main (string [] args) {
    Console.WriteLine ("Enter the string");
    string x = Console.ReadLine ();
    Console.WriteLine ("enter the string to be searched");
    string SearchText = Console.ReadLine ();
    string [] myarr = new string [30];
    myarr = x.Split (' ');
    int i = 0;
    foreach (string s in myarr) {
        i = i + 1;
        if (s == SearchText) {
            Console.WriteLine ("The string found at position:" + i);
        }
    }
    Console.ReadLine ();
}
----------------------------------------

 static void Main(string[] args) 
{ 
    Console.WriteLine("Enter the string"); 
    string x = Console.ReadLine(); 
    Console.WriteLine("enter the string to be searched"); 
    string searchText = Console.ReadLine(); 
     
    int pos = x.IndexOf(searchText); 
    if (pos > -1) 
    { 
        Console.WriteLine("The string found at position:" + (pos + 1)); 
    } 
    Console.ReadLine(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
917
0
Gpt3D_Clone917_0.cs 1 13
Gpt3D_Clone917_0.cs 14 44
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    JToken token = JToken.Load (reader);
    if (token.Type == JTokenType.Float || token.Type == JTokenType.Integer) {
        return token.ToObject < decimal > ();
    }
    if (token.Type == JTokenType.String) {
        return Decimal.Parse (token.ToString (), System.Globalization.CultureInfo.GetCultureInfo ("es-ES"));
    }
    if (token.Type == JTokenType.Null && objectType == typeof (decimal ?)) {
        return null;
    }
    throw new JsonSerializationException ("Unexpected token type: " + token.Type.ToString ());
}
----------------------------------------

 public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
{
    JToken token = JToken.Load(reader);
    decimal result = 0;
    switch (token.Type)
    {
        case JTokenType.Float:
        case JTokenType.Integer:
            result = token.ToObject<Decimal>();
            break;
        case JTokenType.String:
            try
            {
                result = Decimal.Parse(token.ToString(), System.Globalization.CultureInfo.GetCultureInfo("es-ES"));
            }
            catch
            {
                throw new JsonSerializationException("Unexpected token type: " + token.Type.ToString());
            }
            break;
        case JTokenType.Null when objectType == typeof(decimal?):
            return null;
        default:
            throw new JsonSerializationException("Unexpected token type: " + token.Type.ToString());
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
917
1
Gpt3D_Clone917_1.cs 1 13
Gpt3D_Clone917_1.cs 14 36
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    JToken token = JToken.Load (reader);
    if (token.Type == JTokenType.Float || token.Type == JTokenType.Integer) {
        return token.ToObject < decimal > ();
    }
    if (token.Type == JTokenType.String) {
        return Decimal.Parse (token.ToString (), System.Globalization.CultureInfo.GetCultureInfo ("es-ES"));
    }
    if (token.Type == JTokenType.Null && objectType == typeof (decimal ?)) {
        return null;
    }
    throw new JsonSerializationException ("Unexpected token type: " + token.Type.ToString ());
}
----------------------------------------

 public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
{
    JToken token = JToken.Load(reader);
    decimal result;
    switch(token.Type) {
        case JTokenType.Float:
        case JTokenType.Integer:
            result = token.ToObject<Decimal>();
            break;
        case JTokenType.String:
            string str = token.ToString();
            result = Decimal.Parse(str, System.Globalization.CultureInfo.GetCultureInfo("es-ES"));
            break;
        case JTokenType.Null when objectType == typeof(decimal?):
            return null;
        default:
            throw new JsonSerializationException("Unexpected token type: " + token.Type.ToString());
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
917
2
Gpt3D_Clone917_2.cs 1 13
Gpt3D_Clone917_2.cs 14 37
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    JToken token = JToken.Load (reader);
    if (token.Type == JTokenType.Float || token.Type == JTokenType.Integer) {
        return token.ToObject < decimal > ();
    }
    if (token.Type == JTokenType.String) {
        return Decimal.Parse (token.ToString (), System.Globalization.CultureInfo.GetCultureInfo ("es-ES"));
    }
    if (token.Type == JTokenType.Null && objectType == typeof (decimal ?)) {
        return null;
    }
    throw new JsonSerializationException ("Unexpected token type: " + token.Type.ToString ());
}
----------------------------------------

 public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
{
    JToken token = JToken.Load(reader); 
    decimal result = 0;
    switch(token.Type)
    {
        case JTokenType.Float:
        case JTokenType.Integer:
            result = token.ToObject<Decimal>(); 
            break; 
        case JTokenType.String:
            string str = token.ToString(); 
            result = Decimal.Parse(str, System.Globalization.CultureInfo.GetCultureInfo("es-ES"));
            break; 
        case JTokenType.Null when objectType == typeof(decimal?):
            return null; 
        default:
            throw new JsonSerializationException("Unexpected token type: " + token.Type.ToString());
    }      
    return result; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
917
3
Gpt3D_Clone917_3.cs 1 13
Gpt3D_Clone917_3.cs 14 35
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    JToken token = JToken.Load (reader);
    if (token.Type == JTokenType.Float || token.Type == JTokenType.Integer) {
        return token.ToObject < decimal > ();
    }
    if (token.Type == JTokenType.String) {
        return Decimal.Parse (token.ToString (), System.Globalization.CultureInfo.GetCultureInfo ("es-ES"));
    }
    if (token.Type == JTokenType.Null && objectType == typeof (decimal ?)) {
        return null;
    }
    throw new JsonSerializationException ("Unexpected token type: " + token.Type.ToString ());
}
----------------------------------------

 public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
{
    JToken token = JToken.Load(reader);
    decimal result = 0;
    switch (token.Type)
    {
        case JTokenType.Float:
        case JTokenType.Integer:
            result = token.ToObject<Decimal>();
            break;
        case JTokenType.String:
            result = Decimal.Parse(token.ToString(), System.Globalization.CultureInfo.GetCultureInfo("es-ES"));
            break;
        case JTokenType.Null when objectType == typeof(decimal?):
            return null;
        default:
            throw new JsonSerializationException("Unexpected token type: " + token.Type.ToString());
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
917
4
Gpt3D_Clone917_4.cs 1 13
Gpt3D_Clone917_4.cs 14 46
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    JToken token = JToken.Load (reader);
    if (token.Type == JTokenType.Float || token.Type == JTokenType.Integer) {
        return token.ToObject < decimal > ();
    }
    if (token.Type == JTokenType.String) {
        return Decimal.Parse (token.ToString (), System.Globalization.CultureInfo.GetCultureInfo ("es-ES"));
    }
    if (token.Type == JTokenType.Null && objectType == typeof (decimal ?)) {
        return null;
    }
    throw new JsonSerializationException ("Unexpected token type: " + token.Type.ToString ());
}
----------------------------------------

 public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
{
    JToken token = JToken.Load(reader);
    decimal result;
    try
    {
        if (token.Type == JTokenType.Float || token.Type == JTokenType.Integer)
        {
            result = token.ToObject<Decimal>();
        }
        else if (token.Type == JTokenType.String)
        {
            result = Decimal.Parse(token.ToString(), System.Globalization.CultureInfo.GetCultureInfo("es-ES"));
        }
        else if (token.Type == JTokenType.Null && objectType == typeof(decimal?))
        {
            return null;
        }
        else
        {
            throw new JsonSerializationException("Unexpected token type: " + token.Type.ToString());
        }
    }
    catch
    {
        throw new JsonSerializationException("Unexpected token type: " + token.Type.ToString());
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
917
5
Gpt3D_Clone917_5.cs 1 13
Gpt3D_Clone917_5.cs 14 46
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    JToken token = JToken.Load (reader);
    if (token.Type == JTokenType.Float || token.Type == JTokenType.Integer) {
        return token.ToObject < decimal > ();
    }
    if (token.Type == JTokenType.String) {
        return Decimal.Parse (token.ToString (), System.Globalization.CultureInfo.GetCultureInfo ("es-ES"));
    }
    if (token.Type == JTokenType.Null && objectType == typeof (decimal ?)) {
        return null;
    }
    throw new JsonSerializationException ("Unexpected token type: " + token.Type.ToString ());
}
----------------------------------------

 public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) 
{
    JToken token = JToken.Load(reader);
    decimal result = 0;
    if (token.Type == JTokenType.Float || token.Type == JTokenType.Integer)
    {
        result = token.ToObject<Decimal>();
    }
    else if (token.Type == JTokenType.String)
    {
        try
        {
            result = Decimal.Parse(token.ToString(), System.Globalization.CultureInfo.GetCultureInfo("es-ES"));
        }
        catch
        {
            throw new JsonSerializationException("Unexpected token type: " + token.Type.ToString());
        }
    }
    else if (token.Type == JTokenType.Null && objectType == typeof(decimal?))
    {
        return null;
    }
    else
    {
        throw new JsonSerializationException("Unexpected token type: " + token.Type.ToString());
    } 
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
917
6
Gpt3D_Clone917_6.cs 1 13
Gpt3D_Clone917_6.cs 14 35
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    JToken token = JToken.Load (reader);
    if (token.Type == JTokenType.Float || token.Type == JTokenType.Integer) {
        return token.ToObject < decimal > ();
    }
    if (token.Type == JTokenType.String) {
        return Decimal.Parse (token.ToString (), System.Globalization.CultureInfo.GetCultureInfo ("es-ES"));
    }
    if (token.Type == JTokenType.Null && objectType == typeof (decimal ?)) {
        return null;
    }
    throw new JsonSerializationException ("Unexpected token type: " + token.Type.ToString ());
}
----------------------------------------

 public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) 
{
   JToken token = JToken.Load(reader);
   decimal result;
   switch (token.Type) {
      case JTokenType.Float:
      case JTokenType.Integer:
         result = token.ToObject<Decimal>();
         break; 
      case JTokenType.String:
         result = Decimal.Parse(token.ToString(), System.Globalization.CultureInfo.GetCultureInfo("es-ES"));
         break;
      case JTokenType.Null when objectType == typeof(decimal?):
         return null;
      default:
        throw new JsonSerializationException("Unexpected token type: " + token.Type.ToString());
   }
   return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
917
7
Gpt3D_Clone917_7.cs 1 13
Gpt3D_Clone917_7.cs 14 39
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    JToken token = JToken.Load (reader);
    if (token.Type == JTokenType.Float || token.Type == JTokenType.Integer) {
        return token.ToObject < decimal > ();
    }
    if (token.Type == JTokenType.String) {
        return Decimal.Parse (token.ToString (), System.Globalization.CultureInfo.GetCultureInfo ("es-ES"));
    }
    if (token.Type == JTokenType.Null && objectType == typeof (decimal ?)) {
        return null;
    }
    throw new JsonSerializationException ("Unexpected token type: " + token.Type.ToString ());
}
----------------------------------------

 public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) 
{
   JToken token = JToken.Load(reader);
   decimal result;
   if (token.Type == JTokenType.Float || token.Type == JTokenType.Integer)
   {
      result = token.ToObject<Decimal>();
   }
   else if(token.Type == JTokenType.String)
   {
      string str = token.ToString();
      result = Decimal.Parse(str, System.Globalization.CultureInfo.GetCultureInfo("es-ES"));
   }
   else if (token.Type == JTokenType.Null && objectType == typeof(decimal?))
   {
      return null;
   }
   else
   {
      throw new JsonSerializationException("Unexpected token type: " + token.Type.ToString());
   }
   return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
917
8
Gpt3D_Clone917_8.cs 1 13
Gpt3D_Clone917_8.cs 14 35
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    JToken token = JToken.Load (reader);
    if (token.Type == JTokenType.Float || token.Type == JTokenType.Integer) {
        return token.ToObject < decimal > ();
    }
    if (token.Type == JTokenType.String) {
        return Decimal.Parse (token.ToString (), System.Globalization.CultureInfo.GetCultureInfo ("es-ES"));
    }
    if (token.Type == JTokenType.Null && objectType == typeof (decimal ?)) {
        return null;
    }
    throw new JsonSerializationException ("Unexpected token type: " + token.Type.ToString ());
}
----------------------------------------

 public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) 
{
    JToken token = JToken.Load(reader);
    decimal result;
    if (token.Type == JTokenType.Float || token.Type == JTokenType.Integer)
    {
        result = token.ToObject<Decimal>();
    } else if (token.Type == JTokenType.String)
    {
        result = Decimal.Parse(token.ToString(), System.Globalization.CultureInfo.GetCultureInfo("es-ES"));
    } else if (token.Type == JTokenType.Null && objectType == typeof(decimal?))
    {
        return null;
    } else 
    {
        throw new JsonSerializationException("Unexpected token type: " + token.Type.ToString());
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
917
9
Gpt3D_Clone917_9.cs 1 13
Gpt3D_Clone917_9.cs 14 39
----------------------------------------

public override object ReadJson (JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) {
    JToken token = JToken.Load (reader);
    if (token.Type == JTokenType.Float || token.Type == JTokenType.Integer) {
        return token.ToObject < decimal > ();
    }
    if (token.Type == JTokenType.String) {
        return Decimal.Parse (token.ToString (), System.Globalization.CultureInfo.GetCultureInfo ("es-ES"));
    }
    if (token.Type == JTokenType.Null && objectType == typeof (decimal ?)) {
        return null;
    }
    throw new JsonSerializationException ("Unexpected token type: " + token.Type.ToString ());
}
----------------------------------------

 public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) 
{
    JToken token = JToken.Load(reader);
    decimal result;
    if (token.Type == JTokenType.Float || token.Type == JTokenType.Integer)
    {
        result = token.ToObject<Decimal>();
    }
    else if (token.Type == JTokenType.String)
    {
        result = Decimal.Parse(token.ToString(), System.Globalization.CultureInfo.GetCultureInfo("es-ES"));
    }
    else if (token.Type == JTokenType.Null && objectType == typeof(decimal?)) 
    {
        return null;
    } 
    else
    {
        throw new JsonSerializationException("Unexpected token type: " + token.Type.ToString());
    } 
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
920
0
Gpt3D_Clone920_0.cs 1 15
Gpt3D_Clone920_0.cs 16 37
----------------------------------------

public static String QueryAssemblyInfo (string assemblyName) {
    var assembyInfo = new AssemblyInfo {cchBuf = 512};
    assembyInfo.currentAssemblyPath = new String ('', assembyInfo.cchBuf);
    IAssemblyCache assemblyCache;
    var hr = GacApi.CreateAssemblyCache (out assemblyCache, 0);
    if (hr == IntPtr.Zero) {
        hr = assemblyCache.QueryAssemblyInfo (1, assemblyName, ref assembyInfo);
        if (hr != IntPtr.Zero) {
            Marshal.ThrowExceptionForHR (hr.ToInt32 ());
        }
    } else {
        Marshal.ThrowExceptionForHR (hr.ToInt32 ());
    }
    return assembyInfo.currentAssemblyPath;
}
----------------------------------------

	public static String QueryAssemblyInfo (string assemblyName) {
		var assemblyInfo = new AssemblyInfo {cchBuf = 512};
		var buf = new StringBuilder (assemblyInfo.cchBuf);
		assemblyInfo.currentAssemblyPath = buf.ToString ();
		IAssemblyCache assemblyCache;
		int hr = GacApi.CreateAssemblyCache (out assemblyCache, 0);
		if (hr == 0) {
			try {
				hr = assemblyCache.QueryAssemblyInfo (1, assemblyName, ref assemblyInfo);
				if (hr == 0) {
					return assemblyInfo.currentAssemblyPath;
				}
			} catch (Exception ex) {
				Marshal.ThrowExceptionForHR (hr);
			}
		} else {
			Marshal.ThrowExceptionForHR (hr);
		}
		return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
920
1
Gpt3D_Clone920_1.cs 1 15
Gpt3D_Clone920_1.cs 16 37
----------------------------------------

public static String QueryAssemblyInfo (string assemblyName) {
    var assembyInfo = new AssemblyInfo {cchBuf = 512};
    assembyInfo.currentAssemblyPath = new String ('', assembyInfo.cchBuf);
    IAssemblyCache assemblyCache;
    var hr = GacApi.CreateAssemblyCache (out assemblyCache, 0);
    if (hr == IntPtr.Zero) {
        hr = assemblyCache.QueryAssemblyInfo (1, assemblyName, ref assembyInfo);
        if (hr != IntPtr.Zero) {
            Marshal.ThrowExceptionForHR (hr.ToInt32 ());
        }
    } else {
        Marshal.ThrowExceptionForHR (hr.ToInt32 ());
    }
    return assembyInfo.currentAssemblyPath;
}
----------------------------------------

	public static String QueryAssemblyInfo (string assemblyName) {
		AssemblyInfo info = new AssemblyInfo {cchBuf = 512};
		StringBuilder builder = new StringBuilder (info.cchBuf);
		info.currentAssemblyPath = builder.ToString ();
		IAssemblyCache assemblyCache;
		int hr = GacApi.CreateAssemblyCache (out assemblyCache, 0);
		if (hr == 0) {
			try {
				hr = assemblyCache.QueryAssemblyInfo (1, assemblyName, ref info);
				if (hr == 0) {
					return info.currentAssemblyPath;
				}
			} catch {
				Marshal.ThrowExceptionForHR (hr);
			}
		} else {
		Marshal.ThrowExceptionForHR (hr);
		}
		return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
920
2
Gpt3D_Clone920_2.cs 1 15
Gpt3D_Clone920_2.cs 16 35
----------------------------------------

public static String QueryAssemblyInfo (string assemblyName) {
    var assembyInfo = new AssemblyInfo {cchBuf = 512};
    assembyInfo.currentAssemblyPath = new String ('', assembyInfo.cchBuf);
    IAssemblyCache assemblyCache;
    var hr = GacApi.CreateAssemblyCache (out assemblyCache, 0);
    if (hr == IntPtr.Zero) {
        hr = assemblyCache.QueryAssemblyInfo (1, assemblyName, ref assembyInfo);
        if (hr != IntPtr.Zero) {
            Marshal.ThrowExceptionForHR (hr.ToInt32 ());
        }
    } else {
        Marshal.ThrowExceptionForHR (hr.ToInt32 ());
    }
    return assembyInfo.currentAssemblyPath;
}
----------------------------------------

	public static String QueryAssemblyInfo (string assemblyName) {
		var assemblyInfo = new AssemblyInfo {cchBuf = 512};
		var buf = new StringBuilder (assemblyInfo.cchBuf);
		assemblyInfo.currentAssemblyPath = buf.ToString ();
		IAssemblyCache assemblyCache;
		int hr = GacApi.CreateAssemblyCache (out assemblyCache, 0);
		if (hr == 0) {
			hr = assemblyCache.QueryAssemblyInfo (1, assemblyName, ref assemblyInfo);
			if (hr == 0) {
				return assemblyInfo.currentAssemblyPath;
			} else {
				Marshal.ThrowExceptionForHR (hr);
			}
		} else {
			Marshal.ThrowExceptionForHR (hr);
		}
		return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
920
3
Gpt3D_Clone920_3.cs 1 15
Gpt3D_Clone920_3.cs 16 36
----------------------------------------

public static String QueryAssemblyInfo (string assemblyName) {
    var assembyInfo = new AssemblyInfo {cchBuf = 512};
    assembyInfo.currentAssemblyPath = new String ('', assembyInfo.cchBuf);
    IAssemblyCache assemblyCache;
    var hr = GacApi.CreateAssemblyCache (out assemblyCache, 0);
    if (hr == IntPtr.Zero) {
        hr = assemblyCache.QueryAssemblyInfo (1, assemblyName, ref assembyInfo);
        if (hr != IntPtr.Zero) {
            Marshal.ThrowExceptionForHR (hr.ToInt32 ());
        }
    } else {
        Marshal.ThrowExceptionForHR (hr.ToInt32 ());
    }
    return assembyInfo.currentAssemblyPath;
}
----------------------------------------

	public static String QueryAssemblyInfo (string assemblyName) {
		var assemblyInfo = new AssemblyInfo {cchBuf = 512};
		assemblyInfo.currentAssemblyPath = new String ('\0', assemblyInfo.cchBuf);
		IAssemblyCache assemblyCache;
		int hr = GacApi.CreateAssemblyCache (out assemblyCache, 0);
		if (hr == 0) {
			try {
				hr = assemblyCache.QueryAssemblyInfo (1, assemblyName, ref assemblyInfo);
				if (hr == 0) {
					return assemblyInfo.currentAssemblyPath;
				}
			} catch (Exception ex) {
				Marshal.ThrowExceptionForHR (hr);
			}
		} else {
			Marshal.ThrowExceptionForHR (hr);
		}
		return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
920
5
Gpt3D_Clone920_5.cs 1 15
Gpt3D_Clone920_5.cs 16 36
----------------------------------------

public static String QueryAssemblyInfo (string assemblyName) {
    var assembyInfo = new AssemblyInfo {cchBuf = 512};
    assembyInfo.currentAssemblyPath = new String ('', assembyInfo.cchBuf);
    IAssemblyCache assemblyCache;
    var hr = GacApi.CreateAssemblyCache (out assemblyCache, 0);
    if (hr == IntPtr.Zero) {
        hr = assemblyCache.QueryAssemblyInfo (1, assemblyName, ref assembyInfo);
        if (hr != IntPtr.Zero) {
            Marshal.ThrowExceptionForHR (hr.ToInt32 ());
        }
    } else {
        Marshal.ThrowExceptionForHR (hr.ToInt32 ());
    }
    return assembyInfo.currentAssemblyPath;
}
----------------------------------------

	public static String QueryAssemblyInfo (string assemblyName) {
		var assemblyInfo = new AssemblyInfo {cchBuf = 512};
		assemblyInfo.currentAssemblyPath = new String ('', assemblyInfo.cchBuf);
		IAssemblyCache assemblyCache;
		int hr = GacApi.CreateAssemblyCache (out assemblyCache, 0);
		if (hr == 0) {
			try {
				hr = assemblyCache.QueryAssemblyInfo (1, assemblyName, ref assemblyInfo);
				if (hr == 0) {
					return assemblyInfo.currentAssemblyPath;
				}
			} catch {
				Marshal.ThrowExceptionForHR (hr);
			}
		} else {
			Marshal.ThrowExceptionForHR (hr);
		}
		return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
920
6
Gpt3D_Clone920_6.cs 1 15
Gpt3D_Clone920_6.cs 16 35
----------------------------------------

public static String QueryAssemblyInfo (string assemblyName) {
    var assembyInfo = new AssemblyInfo {cchBuf = 512};
    assembyInfo.currentAssemblyPath = new String ('', assembyInfo.cchBuf);
    IAssemblyCache assemblyCache;
    var hr = GacApi.CreateAssemblyCache (out assemblyCache, 0);
    if (hr == IntPtr.Zero) {
        hr = assemblyCache.QueryAssemblyInfo (1, assemblyName, ref assembyInfo);
        if (hr != IntPtr.Zero) {
            Marshal.ThrowExceptionForHR (hr.ToInt32 ());
        }
    } else {
        Marshal.ThrowExceptionForHR (hr.ToInt32 ());
    }
    return assembyInfo.currentAssemblyPath;
}
----------------------------------------

 	public static String QueryAssemblyInfo (string assemblyName) {
		var assemblyInfo = new AssemblyInfo {cchBuf = 512};
		var buf = new String('\u0000', assemblyInfo.cchBuf);
		assemblyInfo.currentAssemblyPath = buf;
		IAssemblyCache assemblyCache;
		int hr = GacApi.CreateAssemblyCache (out assemblyCache, 0);
		if (hr == 0) {
			hr = assemblyCache.QueryAssemblyInfo (1, assemblyName, ref assemblyInfo);
			if (hr == 0) {
				return assemblyInfo.currentAssemblyPath;
			} else {
				Marshal.ThrowExceptionForHR (hr);
			}
		} else {
			Marshal.ThrowExceptionForHR (hr);
		}
		return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
920
7
Gpt3D_Clone920_7.cs 1 15
Gpt3D_Clone920_7.cs 16 34
----------------------------------------

public static String QueryAssemblyInfo (string assemblyName) {
    var assembyInfo = new AssemblyInfo {cchBuf = 512};
    assembyInfo.currentAssemblyPath = new String ('', assembyInfo.cchBuf);
    IAssemblyCache assemblyCache;
    var hr = GacApi.CreateAssemblyCache (out assemblyCache, 0);
    if (hr == IntPtr.Zero) {
        hr = assemblyCache.QueryAssemblyInfo (1, assemblyName, ref assembyInfo);
        if (hr != IntPtr.Zero) {
            Marshal.ThrowExceptionForHR (hr.ToInt32 ());
        }
    } else {
        Marshal.ThrowExceptionForHR (hr.ToInt32 ());
    }
    return assembyInfo.currentAssemblyPath;
}
----------------------------------------

	public static String QueryAssemblyInfo (string assemblyName) {
		var assemblyInfo = new AssemblyInfo {cchBuf = 512};
		assemblyInfo.currentAssemblyPath = new String ('', assemblyInfo.cchBuf);
		IAssemblyCache assemblyCache;
		int hr = GacApi.CreateAssemblyCache (out assemblyCache, 0);
		if (hr == 0) {
			hr = assemblyCache.QueryAssemblyInfo (1, assemblyName, ref assemblyInfo);
			if (hr == 0) {
				return assemblyInfo.currentAssemblyPath;
			} else {
				Marshal.ThrowExceptionForHR (hr);
			}
		} else {
			Marshal.ThrowExceptionForHR (hr);
		}
		return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
921
0
Gpt3D_Clone921_0.cs 1 11
Gpt3D_Clone921_0.cs 12 24
----------------------------------------

public static IEnumerable < T > EnumToList < T > () where T : struct {
    Type enumType = typeof (T);
    if (enumType.BaseType != typeof (Enum))
        throw new ArgumentException ("T must be of type System.Enum");
    Array enumValArray = Enum.GetValues (enumType);
    List < T > enumValList = new List < T > ();
    foreach (T val in enumValArray) {
        enumValList.Add (val.ToString ());
    }
    return enumValList;
}
----------------------------------------

 public static IList<T> EnumToList<T>() where T : struct {
	if (!typeof(T).BaseType.Equals(typeof(Enum))) 
		throw new ArgumentException("T must be of type System.Enum");
	Array values = Enum.GetValues(typeof(T));
	List<T> enumValList = new List<T>();
	foreach (object obj in values) 
		enumValList.Add((T)obj);
	return enumValList;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
921
2
Gpt3D_Clone921_2.cs 1 11
Gpt3D_Clone921_2.cs 12 25
----------------------------------------

public static IEnumerable < T > EnumToList < T > () where T : struct {
    Type enumType = typeof (T);
    if (enumType.BaseType != typeof (Enum))
        throw new ArgumentException ("T must be of type System.Enum");
    Array enumValArray = Enum.GetValues (enumType);
    List < T > enumValList = new List < T > ();
    foreach (T val in enumValArray) {
        enumValList.Add (val.ToString ());
    }
    return enumValList;
}
----------------------------------------

 public static IEnumerable<T> EnumToList<T>() where T : struct {
	if (!(typeof(T).BaseType == typeof(Enum)))
	   throw new ArgumentException("T must be of type System.Enum");
	
	var enumValues = Enum.GetValues(typeof(T));
	var list = new List<T>();
	
	foreach (T val in enumValues)
	   list.Add((T)val);
	
	return list;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
921
3
Gpt3D_Clone921_3.cs 1 11
Gpt3D_Clone921_3.cs 12 25
----------------------------------------

public static IEnumerable < T > EnumToList < T > () where T : struct {
    Type enumType = typeof (T);
    if (enumType.BaseType != typeof (Enum))
        throw new ArgumentException ("T must be of type System.Enum");
    Array enumValArray = Enum.GetValues (enumType);
    List < T > enumValList = new List < T > ();
    foreach (T val in enumValArray) {
        enumValList.Add (val.ToString ());
    }
    return enumValList;
}
----------------------------------------

 public static IEnumerable<T> EnumToList<T>() where T : struct {
	if (typeof(T).BaseType != typeof(Enum)) 
		throw new ArgumentException("T must be of type System.Enum");
	Array enumValArray = Enum.GetValues(typeof(T));
	var enumValList = new List<T>(enumValArray.Length);
	foreach (T val in enumValArray) 
		enumValList.Add(val);
	
	return enumValList;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
921
4
Gpt3D_Clone921_4.cs 1 11
Gpt3D_Clone921_4.cs 12 23
----------------------------------------

public static IEnumerable < T > EnumToList < T > () where T : struct {
    Type enumType = typeof (T);
    if (enumType.BaseType != typeof (Enum))
        throw new ArgumentException ("T must be of type System.Enum");
    Array enumValArray = Enum.GetValues (enumType);
    List < T > enumValList = new List < T > ();
    foreach (T val in enumValArray) {
        enumValList.Add (val.ToString ());
    }
    return enumValList;
}
----------------------------------------

 public static IEnumerable<T> EnumToList<T>() where T : struct {
	if (typeof(T).BaseType != typeof(Enum)) 
		throw new ArgumentException("T must be of type System.Enum");
	Array values = Enum.GetValues(typeof(T));
	List<object> list = new List<object>(values);
	var enumValList = list.ConvertAll<T>(new Converter<object,T>(i=>(T)i));
	return enumValList;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
921
5
Gpt3D_Clone921_5.cs 1 11
Gpt3D_Clone921_5.cs 12 23
----------------------------------------

public static IEnumerable < T > EnumToList < T > () where T : struct {
    Type enumType = typeof (T);
    if (enumType.BaseType != typeof (Enum))
        throw new ArgumentException ("T must be of type System.Enum");
    Array enumValArray = Enum.GetValues (enumType);
    List < T > enumValList = new List < T > ();
    foreach (T val in enumValArray) {
        enumValList.Add (val.ToString ());
    }
    return enumValList;
}
----------------------------------------

 public static List<T> EnumToList<T>() where T : struct {
	Type enumType = typeof(T);
	if (!(enumType.BaseType == typeof(Enum)))
		throw new ArgumentException("T must be of type System.Enum");
    T[] enumValues = (T[])Enum.GetValues(enumType);
    List<T> enumValList = new List<T>(enumValues);
	return enumValList;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
921
6
Gpt3D_Clone921_6.cs 1 11
Gpt3D_Clone921_6.cs 12 23
----------------------------------------

public static IEnumerable < T > EnumToList < T > () where T : struct {
    Type enumType = typeof (T);
    if (enumType.BaseType != typeof (Enum))
        throw new ArgumentException ("T must be of type System.Enum");
    Array enumValArray = Enum.GetValues (enumType);
    List < T > enumValList = new List < T > ();
    foreach (T val in enumValArray) {
        enumValList.Add (val.ToString ());
    }
    return enumValList;
}
----------------------------------------

 public static IList<T> EnumToList<T>() where T : struct {
	if (!(typeof(T).BaseType == typeof(Enum))) 
		throw new ArgumentException("T must be of type System.Enum");
	List<T> enumValList = new List<T>();
	foreach (var val in Enum.GetValues(typeof(T))) 
	   enumValList.Add((T)val);
	return enumValList;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
921
8
Gpt3D_Clone921_8.cs 1 11
Gpt3D_Clone921_8.cs 12 23
----------------------------------------

public static IEnumerable < T > EnumToList < T > () where T : struct {
    Type enumType = typeof (T);
    if (enumType.BaseType != typeof (Enum))
        throw new ArgumentException ("T must be of type System.Enum");
    Array enumValArray = Enum.GetValues (enumType);
    List < T > enumValList = new List < T > ();
    foreach (T val in enumValArray) {
        enumValList.Add (val.ToString ());
    }
    return enumValList;
}
----------------------------------------

 public static IEnumerable<T> EnumToList<T>() where T : struct {
	if (typeof(T).BaseType != typeof(Enum)) 
		throw new ArgumentException("T must be of type System.Enum");
    List<T> enumValList = new List<T>();
	foreach (var value in Enum.GetValues(typeof(T))) 
		enumValList.Add((T)value);
	return enumValList;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
921
9
Gpt3D_Clone921_9.cs 1 11
Gpt3D_Clone921_9.cs 12 19
----------------------------------------

public static IEnumerable < T > EnumToList < T > () where T : struct {
    Type enumType = typeof (T);
    if (enumType.BaseType != typeof (Enum))
        throw new ArgumentException ("T must be of type System.Enum");
    Array enumValArray = Enum.GetValues (enumType);
    List < T > enumValList = new List < T > ();
    foreach (T val in enumValArray) {
        enumValList.Add (val.ToString ());
    }
    return enumValList;
}
----------------------------------------

 public static IEnumerable<T> EnumToList<T>() where T : struct {
	if (typeof(T).BaseType != typeof(Enum))
	  throw new ArgumentException("T must be of type System.Enum");
		
	return Enum.GetValues(typeof(T)).Cast<T>().ToList();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
926
0
Gpt3D_Clone926_0.cs 1 15
Gpt3D_Clone926_0.cs 16 44
----------------------------------------

private static void ExpandItemWithInitialExpandedAttribute (PropertyGrid propertyGrid, GridItem gridItem) {
    if (gridItem != null) {
        if (gridItem.GridItemType == GridItemType.Property && gridItem.Expandable) {
            object [] objs = gridItem.Value.GetType ().GetCustomAttributes (typeof (PropertyGridInitialExpandedAttribute), false);
            if (objs.Length > 0) {
                if (((PropertyGridInitialExpandedAttribute) objs [0]).InitialExpanded) {
                    gridItem.Expanded = true;
                }
            }
        }
        foreach (GridItem childItem in gridItem.GridItems) {
            ExpandItemWithInitialExpandedAttribute (propertyGrid, childItem);
        }
    }
}
----------------------------------------

 private static void ExpandItemWithInitialExpandedAttribute(PropertyGrid propertyGrid, GridItem gridItem)
{
    if (gridItem != null && gridItem.GridItemType == GridItemType.Property && gridItem.Expandable)
    {
        // Get the custom attribute list
        var attributes = gridItem.Value.GetType().GetCustomAttributes(
            typeof(PropertyGridInitialExpandedAttribute), 
            false);
        // Check if the list is not empty
        if (attributes.Length)
        {
            // Cast the first element to the type PropertyGridInitialExpandedAttribute
            var attr = attributes[0] as PropertyGridInitialExpandedAttribute;
            if (attr.InitialExpanded)
            {
                gridItem.Expanded = true;
            }
        }
    }
    // recursively expand any child items
    foreach (GridItem childItem in gridItem.GridItems)
    {
        ExpandItemWithInitialExpandedAttribute(propertyGrid, childItem);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
926
5
Gpt3D_Clone926_5.cs 1 15
Gpt3D_Clone926_5.cs 16 38
----------------------------------------

private static void ExpandItemWithInitialExpandedAttribute (PropertyGrid propertyGrid, GridItem gridItem) {
    if (gridItem != null) {
        if (gridItem.GridItemType == GridItemType.Property && gridItem.Expandable) {
            object [] objs = gridItem.Value.GetType ().GetCustomAttributes (typeof (PropertyGridInitialExpandedAttribute), false);
            if (objs.Length > 0) {
                if (((PropertyGridInitialExpandedAttribute) objs [0]).InitialExpanded) {
                    gridItem.Expanded = true;
                }
            }
        }
        foreach (GridItem childItem in gridItem.GridItems) {
            ExpandItemWithInitialExpandedAttribute (propertyGrid, childItem);
        }
    }
}
----------------------------------------

 private static void ExpandItemWithInitialExpandedAttribute(PropertyGrid propertyGrid, GridItem gridItem)
{
    if (gridItem != null && gridItem.GridItemType == GridItemType.Property 
        && gridItem.Expandable)
    {
        var attributes = gridItem.Value.GetType().GetCustomAttributes(
            typeof(PropertyGridInitialExpandedAttribute), 
            false);
        if (attributes.Length > 0)
        {
            var attr = attributes[0] as PropertyGridInitialExpandedAttribute;
            gridItem.Expanded = attr.InitialExpanded;
        }
    }
    foreach (GridItem childItem in gridItem.GridItems)
    {
        ExpandItemWithInitialExpandedAttribute(propertyGrid, childItem);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
926
6
Gpt3D_Clone926_6.cs 1 15
Gpt3D_Clone926_6.cs 16 37
----------------------------------------

private static void ExpandItemWithInitialExpandedAttribute (PropertyGrid propertyGrid, GridItem gridItem) {
    if (gridItem != null) {
        if (gridItem.GridItemType == GridItemType.Property && gridItem.Expandable) {
            object [] objs = gridItem.Value.GetType ().GetCustomAttributes (typeof (PropertyGridInitialExpandedAttribute), false);
            if (objs.Length > 0) {
                if (((PropertyGridInitialExpandedAttribute) objs [0]).InitialExpanded) {
                    gridItem.Expanded = true;
                }
            }
        }
        foreach (GridItem childItem in gridItem.GridItems) {
            ExpandItemWithInitialExpandedAttribute (propertyGrid, childItem);
        }
    }
}
----------------------------------------

 private static void ExpandItemWithInitialExpandedAttribute (PropertyGrid propertyGrid, GridItem gridItem) 
{
    // If GridItem is an expandable property
    if (gridItem != null && gridItem.GridItemType == GridItemType.Property && gridItem.Expandable) 
    {
        PropertyGridInitialExpandedAttribute attr = gridItem.Value.GetType().GetCustomAttributes(typeof(PropertyGridInitialExpandedAttribute), false)
            .OfType<PropertyGridInitialExpandedAttribute>()
            .FirstOrDefault();        
        // Check for initial expanded attribute
        if (attr != null && attr.InitialExpanded) 
        {
            gridItem.Expanded = true;
        }
    }
    // recursively expand any child item
    foreach (GridItem childItem in gridItem.GridItems) 
    {
        ExpandItemWithInitialExpandedAttribute (propertyGrid, childItem);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
927
0
Gpt3D_Clone927_0.cs 1 30
Gpt3D_Clone927_0.cs 31 83
----------------------------------------

private static void SanitizeNode (HtmlNode node) {
    if (node.NodeType == HtmlNodeType.Element) {
        if (! Whitelist.ContainsKey (node.Name)) {
            if (! DeletableNodesXpath.Contains (node.Name)) {
                node.Name = "removeableNode";
                DeletableNodesXpath.Add (node.Name);
            }
            if (node.HasChildNodes) {
                SanitizeChildren (node);
            }
            return;
        }
        if (node.HasAttributes) {
            for (int i = node.Attributes.Count - 1; i >= 0; i --) {
                HtmlAttribute currentAttribute = node.Attributes [i];
                string [] allowedAttributes = Whitelist [node.Name];
                if (allowedAttributes != null) {
                    if (! allowedAttributes.Contains (currentAttribute.Name)) {
                        node.Attributes.Remove (currentAttribute);
                    }
                } else {
                    node.Attributes.Remove (currentAttribute);
                }
            }
        }
    }
    if (node.HasChildNodes) {
        SanitizeChildren (node);
    }
}
----------------------------------------

 private static void SanitizeNode (HtmlNode node) 
{
    if (node.NodeType == HtmlNodeType.Element) 
    {
        if (Whitelist.ContainsKey(node.Name)) 
        {
            if (node.HasAttributes) 
            {
                List<int> indexToRemoveList = new List<int>();
                string [] allowedAttributes = Whitelist[node.Name];
                if (allowedAttributes != null){
                    for (int i = 0; i < node.Attributes.Count; i++) 
                    {
                        HtmlAttribute currentAttribute = node.Attributes[i];
                        if (!allowedAttributes.Contains(currentAttribute.Name)) 
                        {
                            indexToRemoveList.Add(i);
                        }
                    }
                    for (int i = 0; i < indexToRemoveList.Count; i++)
                    {
                        node.Attributes.RemoveAt(indexToRemoveList[i] - i);
                    }
                } else {
                    for (int i = 0; i < node.Attributes.Count; i++) 
                    {
                        HtmlAttribute currentAttribute = node.Attributes[i];
                        node.Attributes.RemoveAt(i);
                    }
                }
            }
        } 
        else 
        {
            if (!DeletableNodesXpath.Contains(node.Name)) 
            {
                node.Name = "removeableNode";
                DeletableNodesXpath.Add(node.Name);
            }
            if (node.HasChildNodes) 
            {
                SanitizeChildren(node);
            }
            return;
        }
    }
    if (node.HasChildNodes) 
    {
        SanitizeChildren(node);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
928
2
Gpt3D_Clone928_2.cs 1 24
Gpt3D_Clone928_2.cs 25 51
----------------------------------------

private static string RemoveExcessPeriods (string text) {
    if (string.IsNullOrEmpty (text))
        return string.Empty;
    if (! text.Contains (".."))
        return text;
    string extension = Path.GetExtension (text);
    string fileName = Path.GetFileNameWithoutExtension (text);
    StringBuilder result = new StringBuilder (text.Length);
    bool lastCharacterWasPeriod = false;
    bool thisCharacterIsPeriod = fileName.Length > 0 && fileName [0] == '.';
    bool nextCharacterIsPeriod;
    for (int index = 0; index < fileName.Length; index ++) {
        nextCharacterIsPeriod = fileName.Length == index + 1 || fileName [index + 1] == '.';
        if (! thisCharacterIsPeriod)
            result.Append (fileName [index]);
        else if (thisCharacterIsPeriod && ! lastCharacterWasPeriod && ! nextCharacterIsPeriod)
            result.Append ('.');
        else if (thisCharacterIsPeriod && ! lastCharacterWasPeriod)
            result.Append (' ');
        lastCharacterWasPeriod = thisCharacterIsPeriod;
        thisCharacterIsPeriod = nextCharacterIsPeriod;
    }
    return result.ToString () + extension;
}
----------------------------------------

 
private static string RemoveExcessPeriods (string text) {
    if (string.IsNullOrEmpty (text))
        return string.Empty;
    if (! text.Contains (".."))
        return text;
    string extension = Path.GetExtension (text);
    string fileName = Path.GetFileNameWithoutExtension (text);
    StringBuilder result = new StringBuilder (text.Length);
    int periodCount = 0;
    for (int index = 0; index < fileName.Length; index ++) {
        if (fileName [index] == '.')
            periodCount++;
        else {
            periodCount = 0;
            result.Append (fileName [index]);
        }
        if (periodCount > 1) {
            result.Remove (result.Length - 1, 1);
            periodCount = 1;
        }
    }
    return result.ToString () + extension;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
928
3
Gpt3D_Clone928_3.cs 1 24
Gpt3D_Clone928_3.cs 25 47
----------------------------------------

private static string RemoveExcessPeriods (string text) {
    if (string.IsNullOrEmpty (text))
        return string.Empty;
    if (! text.Contains (".."))
        return text;
    string extension = Path.GetExtension (text);
    string fileName = Path.GetFileNameWithoutExtension (text);
    StringBuilder result = new StringBuilder (text.Length);
    bool lastCharacterWasPeriod = false;
    bool thisCharacterIsPeriod = fileName.Length > 0 && fileName [0] == '.';
    bool nextCharacterIsPeriod;
    for (int index = 0; index < fileName.Length; index ++) {
        nextCharacterIsPeriod = fileName.Length == index + 1 || fileName [index + 1] == '.';
        if (! thisCharacterIsPeriod)
            result.Append (fileName [index]);
        else if (thisCharacterIsPeriod && ! lastCharacterWasPeriod && ! nextCharacterIsPeriod)
            result.Append ('.');
        else if (thisCharacterIsPeriod && ! lastCharacterWasPeriod)
            result.Append (' ');
        lastCharacterWasPeriod = thisCharacterIsPeriod;
        thisCharacterIsPeriod = nextCharacterIsPeriod;
    }
    return result.ToString () + extension;
}
----------------------------------------

 
private static string RemoveExcessPeriods (string text) {
    if (string.IsNullOrEmpty (text))
        return string.Empty;
    if (! text.Contains (".."))
        return text;
    string extension = Path.GetExtension (text);
    string fileName = Path.GetFileNameWithoutExtension (text);
    StringBuilder result = new StringBuilder (text.Length);
    bool isNextCharPeriod = false;
    for (int index = fileName.Length - 1; index >= 0; index--) {
        if (fileName [index] == '.' && isNextCharPeriod)
            continue;
        if (fileName [index] == '.')
            isNextCharPeriod = true;
        else 
            isNextCharPeriod = false;
        result.Append (fileName [index]);
    }
    return result.ToString () + extension;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
928
4
Gpt3D_Clone928_4.cs 1 24
Gpt3D_Clone928_4.cs 25 47
----------------------------------------

private static string RemoveExcessPeriods (string text) {
    if (string.IsNullOrEmpty (text))
        return string.Empty;
    if (! text.Contains (".."))
        return text;
    string extension = Path.GetExtension (text);
    string fileName = Path.GetFileNameWithoutExtension (text);
    StringBuilder result = new StringBuilder (text.Length);
    bool lastCharacterWasPeriod = false;
    bool thisCharacterIsPeriod = fileName.Length > 0 && fileName [0] == '.';
    bool nextCharacterIsPeriod;
    for (int index = 0; index < fileName.Length; index ++) {
        nextCharacterIsPeriod = fileName.Length == index + 1 || fileName [index + 1] == '.';
        if (! thisCharacterIsPeriod)
            result.Append (fileName [index]);
        else if (thisCharacterIsPeriod && ! lastCharacterWasPeriod && ! nextCharacterIsPeriod)
            result.Append ('.');
        else if (thisCharacterIsPeriod && ! lastCharacterWasPeriod)
            result.Append (' ');
        lastCharacterWasPeriod = thisCharacterIsPeriod;
        thisCharacterIsPeriod = nextCharacterIsPeriod;
    }
    return result.ToString () + extension;
}
----------------------------------------

 
private static string RemoveExcessPeriods (string text) {
    if (string.IsNullOrEmpty (text))
        return string.Empty;
    if (! text.Contains (".."))
        return text;
    string extension = Path.GetExtension (text);
    string fileName = Path.GetFileNameWithoutExtension (text);
    StringBuilder result = new StringBuilder (text.Length);
    int periodCount = 0;
    for (int index = 0; index < fileName.Length; index ++) {
        if (fileName [index] == '.')
            periodCount++;
        else 
            periodCount = 0;
        if (periodCount > 1)
            continue;
        result.Append (fileName [index]);
    }
    return result.ToString () + extension;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
928
6
Gpt3D_Clone928_6.cs 1 24
Gpt3D_Clone928_6.cs 25 47
----------------------------------------

private static string RemoveExcessPeriods (string text) {
    if (string.IsNullOrEmpty (text))
        return string.Empty;
    if (! text.Contains (".."))
        return text;
    string extension = Path.GetExtension (text);
    string fileName = Path.GetFileNameWithoutExtension (text);
    StringBuilder result = new StringBuilder (text.Length);
    bool lastCharacterWasPeriod = false;
    bool thisCharacterIsPeriod = fileName.Length > 0 && fileName [0] == '.';
    bool nextCharacterIsPeriod;
    for (int index = 0; index < fileName.Length; index ++) {
        nextCharacterIsPeriod = fileName.Length == index + 1 || fileName [index + 1] == '.';
        if (! thisCharacterIsPeriod)
            result.Append (fileName [index]);
        else if (thisCharacterIsPeriod && ! lastCharacterWasPeriod && ! nextCharacterIsPeriod)
            result.Append ('.');
        else if (thisCharacterIsPeriod && ! lastCharacterWasPeriod)
            result.Append (' ');
        lastCharacterWasPeriod = thisCharacterIsPeriod;
        thisCharacterIsPeriod = nextCharacterIsPeriod;
    }
    return result.ToString () + extension;
}
----------------------------------------

 
private static string RemoveExcessPeriods (string text) {
    if (string.IsNullOrEmpty (text))
        return string.Empty;
    if (! text.Contains (".."))
        return text;
    string extension = Path.GetExtension (text);
    string fileName = Path.GetFileNameWithoutExtension (text);
    StringBuilder result = new StringBuilder (text.Length);
    bool isPreviousCharPeriod = fileName [0] == '.';
    for (int index = 0; index < fileName.Length; index ++) {
        if (fileName [index] == '.' && isPreviousCharPeriod)
            continue;
        if (fileName [index] == '.')
            isPreviousCharPeriod = true;
        else 
            isPreviousCharPeriod = false;
        result.Append (fileName [index]);
    }
    return result.ToString () + extension;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
928
8
Gpt3D_Clone928_8.cs 1 24
Gpt3D_Clone928_8.cs 25 46
----------------------------------------

private static string RemoveExcessPeriods (string text) {
    if (string.IsNullOrEmpty (text))
        return string.Empty;
    if (! text.Contains (".."))
        return text;
    string extension = Path.GetExtension (text);
    string fileName = Path.GetFileNameWithoutExtension (text);
    StringBuilder result = new StringBuilder (text.Length);
    bool lastCharacterWasPeriod = false;
    bool thisCharacterIsPeriod = fileName.Length > 0 && fileName [0] == '.';
    bool nextCharacterIsPeriod;
    for (int index = 0; index < fileName.Length; index ++) {
        nextCharacterIsPeriod = fileName.Length == index + 1 || fileName [index + 1] == '.';
        if (! thisCharacterIsPeriod)
            result.Append (fileName [index]);
        else if (thisCharacterIsPeriod && ! lastCharacterWasPeriod && ! nextCharacterIsPeriod)
            result.Append ('.');
        else if (thisCharacterIsPeriod && ! lastCharacterWasPeriod)
            result.Append (' ');
        lastCharacterWasPeriod = thisCharacterIsPeriod;
        thisCharacterIsPeriod = nextCharacterIsPeriod;
    }
    return result.ToString () + extension;
}
----------------------------------------

 
private static string RemoveExcessPeriods (string text) {
    if (string.IsNullOrEmpty (text))
        return string.Empty;
    if (! text.Contains (".."))
        return text;
    string extension = Path.GetExtension (text);
    string fileName = Path.GetFileNameWithoutExtension (text);
    StringBuilder result = new StringBuilder (text.Length);
    int periodIndex = 0;
    while (periodIndex < fileName.Length - 1) {
        if (fileName [periodIndex] == '.' && fileName [periodIndex + 1] == '.') {
            periodIndex++;
            continue;
        } 
        result.Append (fileName [periodIndex]);
        periodIndex++;
    }
    return result.ToString () + extension;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
928
9
Gpt3D_Clone928_9.cs 1 24
Gpt3D_Clone928_9.cs 25 42
----------------------------------------

private static string RemoveExcessPeriods (string text) {
    if (string.IsNullOrEmpty (text))
        return string.Empty;
    if (! text.Contains (".."))
        return text;
    string extension = Path.GetExtension (text);
    string fileName = Path.GetFileNameWithoutExtension (text);
    StringBuilder result = new StringBuilder (text.Length);
    bool lastCharacterWasPeriod = false;
    bool thisCharacterIsPeriod = fileName.Length > 0 && fileName [0] == '.';
    bool nextCharacterIsPeriod;
    for (int index = 0; index < fileName.Length; index ++) {
        nextCharacterIsPeriod = fileName.Length == index + 1 || fileName [index + 1] == '.';
        if (! thisCharacterIsPeriod)
            result.Append (fileName [index]);
        else if (thisCharacterIsPeriod && ! lastCharacterWasPeriod && ! nextCharacterIsPeriod)
            result.Append ('.');
        else if (thisCharacterIsPeriod && ! lastCharacterWasPeriod)
            result.Append (' ');
        lastCharacterWasPeriod = thisCharacterIsPeriod;
        thisCharacterIsPeriod = nextCharacterIsPeriod;
    }
    return result.ToString () + extension;
}
----------------------------------------

 
private static string RemoveExcessPeriods (string text) {
    if (string.IsNullOrEmpty (text))
        return string.Empty;
    if (! text.Contains (".."))
        return text;
    string extension = Path.GetExtension (text);
    string fileName = Path.GetFileNameWithoutExtension (text);
    StringBuilder result = new StringBuilder (text.Length);
    for (int index = 0; index < fileName.Length; index ++) {
        if (fileName [index] == '.' && index != fileName.Length - 1 && fileName [index+1] == '.')
            continue;
        result.Append (fileName [index]);
    }
    return result.ToString () + extension;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
92
0
Gpt3D_Clone92_0.cs 1 17
Gpt3D_Clone92_0.cs 18 50
----------------------------------------

static void Main (string [] args) {
    int n;
    Console.WriteLine ("Enter A Number :");
    n = int.Parse (Console.ReadLine ());
    if (n % 3 == 0) {
        if (n % 5 == 0) {
            Console.WriteLine ("This Number is Divisible by 3 and 5!");
        } else {
            printf ("\nThe number is divisible by 3 but not by 5");
        }
    } else if (n % 5 == 0) {
        Console.WriteLine ("The number is divisible by 5 but not by 3");
    } else {
        Console.WriteLine ("\nThis Number is Not Divisible by 3 and 5!");
    }
    Console.ReadLine ();
}
----------------------------------------

 
static void Main(string[] args) 
{ 
    int n; 
    Console.WriteLine("Enter A Number :"); 
    n = int.Parse(Console.ReadLine()); 
    bool divisibleBy3 = n % 3 == 0;
    bool divisibleBy5 = n % 5 == 0;
    string output = "";
    if (divisibleBy3 && divisibleBy5) { 
        output = "This Number is Divisible by 3 and 5!"; 
    } 
    else {
        if (divisibleBy3) 
        { 
            output = "\nThe number is divisible by 3 but not by 5"; 
        } 
        else 
        if (divisibleBy5) 
        { 
            output= "The number is divisible by 5 but not by 3"; 
        } 
        else 
        { 
            output = "\nThis Number is Not Divisible by 3 and 5!"; 
        } 
    } 
    Console.WriteLine(output);
    Console.ReadLine(); 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
933
0
Gpt3D_Clone933_0.cs 1 10
Gpt3D_Clone933_0.cs 11 25
----------------------------------------

[Test] public void test () {
    List < int > test = new List < int > ();
    for (int i = 0; i < 10; i ++) {
        test.Add (MyMath.Random (100));
    }
    Console.WriteLine ("result:");
    foreach (int i in test) {
        Console.WriteLine ();
    }
}
----------------------------------------

 [Test] public void test() {
    List<int> test = new List<int>();
    int j = 0;
    while (j < 10) {
        int randNum = MyMath.Random(100);
        test.Add(randNum);
        j++;
    }
    Console.Write("result:");
    foreach (int num in test) {
        Console.Write(" " + num);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
933
1
Gpt3D_Clone933_1.cs 1 10
Gpt3D_Clone933_1.cs 11 23
----------------------------------------

[Test] public void test () {
    List < int > test = new List < int > ();
    for (int i = 0; i < 10; i ++) {
        test.Add (MyMath.Random (100));
    }
    Console.WriteLine ("result:");
    foreach (int i in test) {
        Console.WriteLine ();
    }
}
----------------------------------------

 [Test] public void test() {
    List<int> test = new List<int>();
    int j = 0;
    while (j < 10) {
        int randNum = MyMath.Random(100);
        test.Add(randNum);
        j++;
    }
    Console.WriteLine("result:");
    test.ForEach(num => Console.WriteLine(num));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
933
4
Gpt3D_Clone933_4.cs 1 10
Gpt3D_Clone933_4.cs 11 23
----------------------------------------

[Test] public void test () {
    List < int > test = new List < int > ();
    for (int i = 0; i < 10; i ++) {
        test.Add (MyMath.Random (100));
    }
    Console.WriteLine ("result:");
    foreach (int i in test) {
        Console.WriteLine ();
    }
}
----------------------------------------

 [Test] public void test() {
    int[] test = new int[10];
    for (int i = 0; i < test.Length; i++) {
        test[i] = MyMath.Random(100);
    }
    Console.WriteLine("result:");
    foreach (int i in test) {
        Console.WriteLine(i);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
935
0
Gpt3D_Clone935_0.cs 1 27
Gpt3D_Clone935_0.cs 28 44
----------------------------------------

static void Main () {
    var dict = new Dictionary < string, int > ();
    dict.Add ("cat", 2);
    dict.Add ("dog", 3);
    dict.Add ("x", 4);
    var dict2 = new Dictionary < string, int > ();
    dict2.Add ("cat", 2);
    dict2.Add ("dog", 3);
    dict2.Add ("x", 4);
    bool equal = false;
    if (dict.Count == dict2.Count) {
        equal = true;
        foreach (var pair in dict) {
            int value;
            if (dict2.TryGetValue (pair.Key, out value)) {
                if (value != pair.Value) {
                    equal = false;
                    break;
                }
            } else {
                equal = false;
                break;
            }
        }
    }
    Console.WriteLine (equal);
}
----------------------------------------

 
static void Main () 
{
    var dict = new Dictionary < string, int > ();
    dict.Add ("cat", 2);
    dict.Add ("dog", 3);
    dict.Add ("x", 4);
    var dict2 = new Dictionary < string, int > ();
    dict2.Add ("cat", 2);
    dict2.Add ("dog", 3);
    dict2.Add ("x", 4);
    bool equal = dict.Count == dict2.Count && dict.Keys.Except(dict2.Keys).Count()==0 
            && dict.Values.Except(dict2.Values).Count() == 0;
    Console.WriteLine (equal);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
935
1
Gpt3D_Clone935_1.cs 1 27
Gpt3D_Clone935_1.cs 28 44
----------------------------------------

static void Main () {
    var dict = new Dictionary < string, int > ();
    dict.Add ("cat", 2);
    dict.Add ("dog", 3);
    dict.Add ("x", 4);
    var dict2 = new Dictionary < string, int > ();
    dict2.Add ("cat", 2);
    dict2.Add ("dog", 3);
    dict2.Add ("x", 4);
    bool equal = false;
    if (dict.Count == dict2.Count) {
        equal = true;
        foreach (var pair in dict) {
            int value;
            if (dict2.TryGetValue (pair.Key, out value)) {
                if (value != pair.Value) {
                    equal = false;
                    break;
                }
            } else {
                equal = false;
                break;
            }
        }
    }
    Console.WriteLine (equal);
}
----------------------------------------

 
static void Main () 
{
    var dict = new Dictionary < string, int > ();
    dict.Add ("cat", 2);
    dict.Add ("dog", 3);
    dict.Add ("x", 4);
    var dict2 = new Dictionary < string, int > ();
    dict2.Add ("cat", 2);
    dict2.Add ("dog", 3);
    dict2.Add ("x", 4);
    bool equal = dict.Count == dict2.Count && dict.Keys.Intersect(dict2.Keys).Count() == dict.Count
            && dict.Values.Intersect(dict2.Values).Count() == dict.Count;
    Console.WriteLine (equal);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
935
2
Gpt3D_Clone935_2.cs 1 27
Gpt3D_Clone935_2.cs 28 43
----------------------------------------

static void Main () {
    var dict = new Dictionary < string, int > ();
    dict.Add ("cat", 2);
    dict.Add ("dog", 3);
    dict.Add ("x", 4);
    var dict2 = new Dictionary < string, int > ();
    dict2.Add ("cat", 2);
    dict2.Add ("dog", 3);
    dict2.Add ("x", 4);
    bool equal = false;
    if (dict.Count == dict2.Count) {
        equal = true;
        foreach (var pair in dict) {
            int value;
            if (dict2.TryGetValue (pair.Key, out value)) {
                if (value != pair.Value) {
                    equal = false;
                    break;
                }
            } else {
                equal = false;
                break;
            }
        }
    }
    Console.WriteLine (equal);
}
----------------------------------------

 
static void Main () 
{
    var dict = new Dictionary < string, int > ();
    dict.Add ("cat", 2);
    dict.Add ("dog", 3);
    dict.Add ("x", 4);
    var dict2 = new Dictionary < string, int > ();
    dict2.Add ("cat", 2);
    dict2.Add ("dog", 3);
    dict2.Add ("x", 4);
    bool equal = dict.Count == dict2.Count && dict.OrderBy(pair => pair.Key).SequenceEqual(dict2.OrderBy(pair => pair.Key));
    Console.WriteLine (equal);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
935
3
Gpt3D_Clone935_3.cs 1 27
Gpt3D_Clone935_3.cs 28 44
----------------------------------------

static void Main () {
    var dict = new Dictionary < string, int > ();
    dict.Add ("cat", 2);
    dict.Add ("dog", 3);
    dict.Add ("x", 4);
    var dict2 = new Dictionary < string, int > ();
    dict2.Add ("cat", 2);
    dict2.Add ("dog", 3);
    dict2.Add ("x", 4);
    bool equal = false;
    if (dict.Count == dict2.Count) {
        equal = true;
        foreach (var pair in dict) {
            int value;
            if (dict2.TryGetValue (pair.Key, out value)) {
                if (value != pair.Value) {
                    equal = false;
                    break;
                }
            } else {
                equal = false;
                break;
            }
        }
    }
    Console.WriteLine (equal);
}
----------------------------------------

 
static void Main () 
{
    var dict = new Dictionary < string, int > ();
    dict.Add ("cat", 2);
    dict.Add ("dog", 3);
    dict.Add ("x", 4);
    var dict2 = new Dictionary < string, int > ();
    dict2.Add ("cat", 2);
    dict2.Add ("dog", 3);
    dict2.Add ("x", 4);
    bool equal = dict.Count == dict2.Count && dict.Keys.All(key => dict2.Contains(key, out int value)) &&
           dict2.Keys.All(key => dict2.Contains(key, out int value));
    Console.WriteLine (equal);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
935
4
Gpt3D_Clone935_4.cs 1 27
Gpt3D_Clone935_4.cs 28 43
----------------------------------------

static void Main () {
    var dict = new Dictionary < string, int > ();
    dict.Add ("cat", 2);
    dict.Add ("dog", 3);
    dict.Add ("x", 4);
    var dict2 = new Dictionary < string, int > ();
    dict2.Add ("cat", 2);
    dict2.Add ("dog", 3);
    dict2.Add ("x", 4);
    bool equal = false;
    if (dict.Count == dict2.Count) {
        equal = true;
        foreach (var pair in dict) {
            int value;
            if (dict2.TryGetValue (pair.Key, out value)) {
                if (value != pair.Value) {
                    equal = false;
                    break;
                }
            } else {
                equal = false;
                break;
            }
        }
    }
    Console.WriteLine (equal);
}
----------------------------------------

 
static void Main () 
{
    var dict = new Dictionary < string, int > ();
    dict.Add ("cat", 2);
    dict.Add ("dog", 3);
    dict.Add ("x", 4);
    var dict2 = new Dictionary < string, int > ();
    dict2.Add ("cat", 2);
    dict2.Add ("dog", 3);
    dict2.Add ("x", 4);
    bool equal = dict.Count == dict2.Count && dict.All(p => dict2.ContainsKey(p.Key) && dict2[p.Key] == p.Value);
    Console.WriteLine (equal);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
935
5
Gpt3D_Clone935_5.cs 1 27
Gpt3D_Clone935_5.cs 28 43
----------------------------------------

static void Main () {
    var dict = new Dictionary < string, int > ();
    dict.Add ("cat", 2);
    dict.Add ("dog", 3);
    dict.Add ("x", 4);
    var dict2 = new Dictionary < string, int > ();
    dict2.Add ("cat", 2);
    dict2.Add ("dog", 3);
    dict2.Add ("x", 4);
    bool equal = false;
    if (dict.Count == dict2.Count) {
        equal = true;
        foreach (var pair in dict) {
            int value;
            if (dict2.TryGetValue (pair.Key, out value)) {
                if (value != pair.Value) {
                    equal = false;
                    break;
                }
            } else {
                equal = false;
                break;
            }
        }
    }
    Console.WriteLine (equal);
}
----------------------------------------

 
static void Main () 
{
    var dict = new Dictionary < string, int > ();
    dict.Add ("cat", 2);
    dict.Add ("dog", 3);
    dict.Add ("x", 4);
    var dict2 = new Dictionary < string, int > ();
    dict2.Add ("cat", 2);
    dict2.Add ("dog", 3);
    dict2.Add ("x", 4);
    bool equal = dict.Count == dict2.Count && dict.Keys.All(key => dict2.ContainsKey(key) && dict2[key] == dict[key]);
    Console.WriteLine (equal);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
935
6
Gpt3D_Clone935_6.cs 1 27
Gpt3D_Clone935_6.cs 28 43
----------------------------------------

static void Main () {
    var dict = new Dictionary < string, int > ();
    dict.Add ("cat", 2);
    dict.Add ("dog", 3);
    dict.Add ("x", 4);
    var dict2 = new Dictionary < string, int > ();
    dict2.Add ("cat", 2);
    dict2.Add ("dog", 3);
    dict2.Add ("x", 4);
    bool equal = false;
    if (dict.Count == dict2.Count) {
        equal = true;
        foreach (var pair in dict) {
            int value;
            if (dict2.TryGetValue (pair.Key, out value)) {
                if (value != pair.Value) {
                    equal = false;
                    break;
                }
            } else {
                equal = false;
                break;
            }
        }
    }
    Console.WriteLine (equal);
}
----------------------------------------

 
static void Main () 
{
    var dict = new Dictionary < string, int > ();
    dict.Add ("cat", 2);
    dict.Add ("dog", 3);
    dict.Add ("x", 4);
    var dict2 = new Dictionary < string, int > ();
    dict2.Add ("cat", 2);
    dict2.Add ("dog", 3);
    dict2.Add ("x", 4);
    bool equal = Enumerable.SequenceEqual(dict, dict2);
    Console.WriteLine (equal);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
935
7
Gpt3D_Clone935_7.cs 1 27
Gpt3D_Clone935_7.cs 28 44
----------------------------------------

static void Main () {
    var dict = new Dictionary < string, int > ();
    dict.Add ("cat", 2);
    dict.Add ("dog", 3);
    dict.Add ("x", 4);
    var dict2 = new Dictionary < string, int > ();
    dict2.Add ("cat", 2);
    dict2.Add ("dog", 3);
    dict2.Add ("x", 4);
    bool equal = false;
    if (dict.Count == dict2.Count) {
        equal = true;
        foreach (var pair in dict) {
            int value;
            if (dict2.TryGetValue (pair.Key, out value)) {
                if (value != pair.Value) {
                    equal = false;
                    break;
                }
            } else {
                equal = false;
                break;
            }
        }
    }
    Console.WriteLine (equal);
}
----------------------------------------

 
static void Main () 
{
    var dict = new Dictionary < string, int > ();
    dict.Add ("cat", 2);
    dict.Add ("dog", 3);
    dict.Add ("x", 4);
    var dict2 = new Dictionary < string, int > ();
    dict2.Add ("cat", 2);
    dict2.Add ("dog", 3);
    dict2.Add ("x", 4);
    bool equal = dict.Count == dict2.Count && dict.Keys.OrderBy(k => k).SequenceEqual(dict2.Keys.OrderBy(k => k))
           && dict.Values.OrderBy(v => v).SequenceEqual(dict2.Values.OrderBy(v => v));
    Console.WriteLine (equal);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
935
8
Gpt3D_Clone935_8.cs 1 27
Gpt3D_Clone935_8.cs 28 43
----------------------------------------

static void Main () {
    var dict = new Dictionary < string, int > ();
    dict.Add ("cat", 2);
    dict.Add ("dog", 3);
    dict.Add ("x", 4);
    var dict2 = new Dictionary < string, int > ();
    dict2.Add ("cat", 2);
    dict2.Add ("dog", 3);
    dict2.Add ("x", 4);
    bool equal = false;
    if (dict.Count == dict2.Count) {
        equal = true;
        foreach (var pair in dict) {
            int value;
            if (dict2.TryGetValue (pair.Key, out value)) {
                if (value != pair.Value) {
                    equal = false;
                    break;
                }
            } else {
                equal = false;
                break;
            }
        }
    }
    Console.WriteLine (equal);
}
----------------------------------------

static void Main () 
{
    var dict = new Dictionary < string, int > ();
    dict.Add ("cat", 2);
    dict.Add ("dog", 3);
    dict.Add ("x", 4);
    var dict2 = new Dictionary < string, int > ();
    dict2.Add ("cat", 2);
    dict2.Add ("dog", 3);
    dict2.Add ("x", 4);
    bool equal = dict.Count == dict2.Count && dict.Keys.All(x => dict2.Keys.Contains(x) && dict2[x] == dict[x]);
    Console.WriteLine (equal);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
935
9
Gpt3D_Clone935_9.cs 1 27
Gpt3D_Clone935_9.cs 28 43
----------------------------------------

static void Main () {
    var dict = new Dictionary < string, int > ();
    dict.Add ("cat", 2);
    dict.Add ("dog", 3);
    dict.Add ("x", 4);
    var dict2 = new Dictionary < string, int > ();
    dict2.Add ("cat", 2);
    dict2.Add ("dog", 3);
    dict2.Add ("x", 4);
    bool equal = false;
    if (dict.Count == dict2.Count) {
        equal = true;
        foreach (var pair in dict) {
            int value;
            if (dict2.TryGetValue (pair.Key, out value)) {
                if (value != pair.Value) {
                    equal = false;
                    break;
                }
            } else {
                equal = false;
                break;
            }
        }
    }
    Console.WriteLine (equal);
}
----------------------------------------

 
static void Main () 
{
    var dict = new Dictionary < string, int > ();
    dict.Add ("cat", 2);
    dict.Add ("dog", 3);
    dict.Add ("x", 4);
    var dict2 = new Dictionary < string, int > ();
    dict2.Add ("cat", 2);
    dict2.Add ("dog", 3);
    dict2.Add ("x", 4);
    bool equal = dict.Count == dict2.Count && dict.ToList().TrueForAll(pair => dict2[pair.Key] == pair.Value);
    Console.WriteLine (equal);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
936
0
Gpt3D_Clone936_0.cs 1 12
Gpt3D_Clone936_0.cs 13 30
----------------------------------------

public static int GetSeed () {
    byte [] raw = Guid.NewGuid ().ToByteArray ();
    int i1 = BitConverter.ToInt32 (raw, 0);
    int i2 = BitConverter.ToInt32 (raw, 4);
    int i3 = BitConverter.ToInt32 (raw, 8);
    int i4 = BitConverter.ToInt32 (raw, 12);
    long val = i1 + i2 + i3 + i4;
    while (val > int.MaxValue) {
        val -= int.MaxValue;
    }
    return (int) val;
}
----------------------------------------

 public static int GetSeed () {
    string seed = Guid.NewGuid().ToString();
    int i1 = 0;
    int i2 = 0;
    int i3 = 0;
    int i4 = 0;
    int.TryParse(seed.Substring(0, 8), out i1);
    int.TryParse(seed.Substring(8, 8), out i2);
    int.TryParse(seed.Substring(16, 8), out i3);
    int.TryParse(seed.Substring(24, 8), out i4);
    long val = i1 + i2 + i3 + i4;
    while (val > int.MaxValue) {
        val -= int.MaxValue;
    }
    return (int) val;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
936
5
Gpt3D_Clone936_5.cs 1 12
Gpt3D_Clone936_5.cs 13 26
----------------------------------------

public static int GetSeed () {
    byte [] raw = Guid.NewGuid ().ToByteArray ();
    int i1 = BitConverter.ToInt32 (raw, 0);
    int i2 = BitConverter.ToInt32 (raw, 4);
    int i3 = BitConverter.ToInt32 (raw, 8);
    int i4 = BitConverter.ToInt32 (raw, 12);
    long val = i1 + i2 + i3 + i4;
    while (val > int.MaxValue) {
        val -= int.MaxValue;
    }
    return (int) val;
}
----------------------------------------

 public static int GetSeed () {
    int seed = new Random().Next(int.MinValue, int.MaxValue);
    int i1 = seed;
    int i2 = seed << 1;
    int i3 = seed >> 1;
    int i4 = seed + 1;
    long val = i1 + i2 + i3 + i4;
    while (val > int.MaxValue) {
        val -= int.MaxValue;
    }
    return (int) val;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
936
6
Gpt3D_Clone936_6.cs 1 12
Gpt3D_Clone936_6.cs 13 26
----------------------------------------

public static int GetSeed () {
    byte [] raw = Guid.NewGuid ().ToByteArray ();
    int i1 = BitConverter.ToInt32 (raw, 0);
    int i2 = BitConverter.ToInt32 (raw, 4);
    int i3 = BitConverter.ToInt32 (raw, 8);
    int i4 = BitConverter.ToInt32 (raw, 12);
    long val = i1 + i2 + i3 + i4;
    while (val > int.MaxValue) {
        val -= int.MaxValue;
    }
    return (int) val;
}
----------------------------------------

 public static int GetSeed () {
    Random rnd = new Random();
    int i1 = rnd.Next(int.MinValue, int.MaxValue);
    int i2 = rnd.Next(int.MinValue, int.MaxValue);
    int i3 = rnd.Next(int.MinValue, int.MaxValue);
    int i4 = rnd.Next(int.MinValue, int.MaxValue);
    long val = i1 + i2 + i3 + i4;
    while (val > int.MaxValue) {
        val -= int.MaxValue;
    }
    return (int) val;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
936
7
Gpt3D_Clone936_7.cs 1 12
Gpt3D_Clone936_7.cs 13 27
----------------------------------------

public static int GetSeed () {
    byte [] raw = Guid.NewGuid ().ToByteArray ();
    int i1 = BitConverter.ToInt32 (raw, 0);
    int i2 = BitConverter.ToInt32 (raw, 4);
    int i3 = BitConverter.ToInt32 (raw, 8);
    int i4 = BitConverter.ToInt32 (raw, 12);
    long val = i1 + i2 + i3 + i4;
    while (val > int.MaxValue) {
        val -= int.MaxValue;
    }
    return (int) val;
}
----------------------------------------

 public static int GetSeed () {
    string hex = Guid.NewGuid().ToString().Replace("-", "");
    long val = 0;
    int i = 0;
    while (i < hex.Length && i <= 10) {
        val += Int32.Parse(hex.Substring(i*2, 2), System.Globalization.NumberStyles.HexNumber);
        i++;
    }
    while (val > int.MaxValue) {
        val -= int.MaxValue;
    }
    return (int) val;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
936
8
Gpt3D_Clone936_8.cs 1 12
Gpt3D_Clone936_8.cs 13 26
----------------------------------------

public static int GetSeed () {
    byte [] raw = Guid.NewGuid ().ToByteArray ();
    int i1 = BitConverter.ToInt32 (raw, 0);
    int i2 = BitConverter.ToInt32 (raw, 4);
    int i3 = BitConverter.ToInt32 (raw, 8);
    int i4 = BitConverter.ToInt32 (raw, 12);
    long val = i1 + i2 + i3 + i4;
    while (val > int.MaxValue) {
        val -= int.MaxValue;
    }
    return (int) val;
}
----------------------------------------

 public static int GetSeed () {
    Random random = new Random();
    int i1 = random.Next();
    int i2 = random.Next();
    int i3 = random.Next();
    int i4 = random.Next();
    long val = i1 + i2 + i3 + i4;
    while (val > int.MaxValue) {
        val -= int.MaxValue;
    }
    return (int) val;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
936
9
Gpt3D_Clone936_9.cs 1 12
Gpt3D_Clone936_9.cs 13 25
----------------------------------------

public static int GetSeed () {
    byte [] raw = Guid.NewGuid ().ToByteArray ();
    int i1 = BitConverter.ToInt32 (raw, 0);
    int i2 = BitConverter.ToInt32 (raw, 4);
    int i3 = BitConverter.ToInt32 (raw, 8);
    int i4 = BitConverter.ToInt32 (raw, 12);
    long val = i1 + i2 + i3 + i4;
    while (val > int.MaxValue) {
        val -= int.MaxValue;
    }
    return (int) val;
}
----------------------------------------

 public static int GetSeed () {
    int i1 = 42;
    int i2 = 314;
    int i3 = 836;
    int i4 = 898;
    long val = i1 + i2 + i3 + i4;
    while (val > int.MaxValue) {
        val -= int.MaxValue;
    }
    return (int) val;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
938
0
Gpt3D_Clone938_0.cs 1 15
Gpt3D_Clone938_0.cs 16 30
----------------------------------------

public int Compare (string s1, string s2) {
    if (IsNumeric (s1) && IsNumeric (s2)) {
        if (Convert.ToInt32 (s1) > Convert.ToInt32 (s2))
            return 1;
        if (Convert.ToInt32 (s1) < Convert.ToInt32 (s2))
            return - 1;
        if (Convert.ToInt32 (s1) == Convert.ToInt32 (s2))
            return 0;
    }
    if (IsNumeric (s1) && ! IsNumeric (s2))
        return 1;
    if (! IsNumeric (s1) && IsNumeric (s2))
        return - 1;
    return string.Compare (s1, s2, true);
}
----------------------------------------

public int CompareNumbers(int x, int y)
{
    if (x > y)
    {
        return 1;
    }
    else if (x < y)
    {
        return -1;
    }
 
    return 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
93
0
Gpt3D_Clone93_0.cs 1 12
Gpt3D_Clone93_0.cs 13 36
----------------------------------------

public RecaptchaValidationResult Validate (string recaptchaResponse) {
    RecaptchaValidationResult result = new RecaptchaValidationResult ();
    HttpWebRequest req = (HttpWebRequest) WebRequest.Create ("https://www.google.com/recaptcha/api/siteverify?secret=" + SecretKey + "&response=" + recaptchaResponse + "&remoteip=" + GetClientIp ());
    using (WebResponse wResponse = req.GetResponse ())
    {
        using (StreamReader readStream = new StreamReader (wResponse.GetResponseStream ()))
        {
            string jsonResponse = readStream.ReadToEnd ();
            JavaScriptSerializer js = new JavaScriptSerializer ();
            result = js.Deserialize < RecaptchaValidationResult > (jsonResponse.Replace ("error-codes", "ErrorMessages").Replace ("success", "Succeeded"));
        }} return result;
}
----------------------------------------

	public RecaptchaValidationResult Validate (string recaptchaResponse) {
    RecaptchaValidationResult result = new RecaptchaValidationResult ();
    string googleRecaptchaUrl = "https://www.google.com/recaptcha/api/siteverify";
    string postData = String.Format("secret={0}&response={1}&remoteip={2}", SecretKey, recaptchaResponse, GetClientIp());
    byte[] byteArray = Encoding.ASCII.GetBytes(postData);
    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(googleRecaptchaUrl);
    request.Method = "POST";
    request.ContentType = "application/x-www-form-urlencoded";
    request.ContentLength = byteArray.Length;
    using (Stream dataStream = request.GetRequestStream())
        dataStream.Write(byteArray, 0, byteArray.Length);
    using (HttpWebResponse response = (HttpWebResponse)await request.GetResponseAsync())
    using (StreamReader reader = new StreamReader(response.GetResponseStream()))
    {
        JavaScriptSerializer js = new JavaScriptSerializer();
        result = js.Deserialize<RecaptchaValidationResult>(reader.ReadToEnd().Replace("error-codes", "ErrorMessages").Replace("success", "Succeeded"));
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
93
1
Gpt3D_Clone93_1.cs 1 12
Gpt3D_Clone93_1.cs 13 35
----------------------------------------

public RecaptchaValidationResult Validate (string recaptchaResponse) {
    RecaptchaValidationResult result = new RecaptchaValidationResult ();
    HttpWebRequest req = (HttpWebRequest) WebRequest.Create ("https://www.google.com/recaptcha/api/siteverify?secret=" + SecretKey + "&response=" + recaptchaResponse + "&remoteip=" + GetClientIp ());
    using (WebResponse wResponse = req.GetResponse ())
    {
        using (StreamReader readStream = new StreamReader (wResponse.GetResponseStream ()))
        {
            string jsonResponse = readStream.ReadToEnd ();
            JavaScriptSerializer js = new JavaScriptSerializer ();
            result = js.Deserialize < RecaptchaValidationResult > (jsonResponse.Replace ("error-codes", "ErrorMessages").Replace ("success", "Succeeded"));
        }} return result;
}
----------------------------------------

 public RecaptchaValidationResult Validate (string recaptchaResponse) {
    RecaptchaValidationResult result = new RecaptchaValidationResult ();
    string googleRecaptchaUrl = "https://www.google.com/recaptcha/api/siteverify";
    string postData = "secret=" + SecretKey + "&response=" + recaptchaResponse + "&remoteip=" + GetClientIp();
    HttpWebRequest request = WebRequest.Create(googleRecaptchaUrl) as HttpWebRequest;
    request.Method = "POST";
    request.ContentType = "application/x-www-form-urlencoded";
    using (Stream dataStream = request.GetRequestStream())
    using (StreamWriter writer = new StreamWriter(dataStream))
        writer.Write(postData);
    using (HttpWebResponse response = (HttpWebResponse)await request.GetResponseAsync())
    using (StreamReader reader = new StreamReader(response.GetResponseStream()))
    {
        JavaScriptSerializer js = new JavaScriptSerializer();
        result = js.Deserialize<RecaptchaValidationResult>(reader.ReadToEnd().Replace("error-codes", "ErrorMessages").Replace("success", "Succeeded"));
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
93
2
Gpt3D_Clone93_2.cs 1 12
Gpt3D_Clone93_2.cs 13 27
----------------------------------------

public RecaptchaValidationResult Validate (string recaptchaResponse) {
    RecaptchaValidationResult result = new RecaptchaValidationResult ();
    HttpWebRequest req = (HttpWebRequest) WebRequest.Create ("https://www.google.com/recaptcha/api/siteverify?secret=" + SecretKey + "&response=" + recaptchaResponse + "&remoteip=" + GetClientIp ());
    using (WebResponse wResponse = req.GetResponse ())
    {
        using (StreamReader readStream = new StreamReader (wResponse.GetResponseStream ()))
        {
            string jsonResponse = readStream.ReadToEnd ();
            JavaScriptSerializer js = new JavaScriptSerializer ();
            result = js.Deserialize < RecaptchaValidationResult > (jsonResponse.Replace ("error-codes", "ErrorMessages").Replace ("success", "Succeeded"));
        }} return result;
}
----------------------------------------

	public RecaptchaValidationResult Validate (string recaptchaResponse) {
    RecaptchaValidationResult result = new RecaptchaValidationResult ();
    string url = "https://www.google.com/recaptcha/api/siteverify?secret=" + SecretKey + "&response=" + recaptchaResponse + "&remoteip=" + GetClientIp ();
    HttpWebRequest request = WebRequest.Create (url) as HttpWebRequest;
    using (HttpWebResponse response = request.GetResponse () as HttpWebResponse)
    {
        StreamReader reader = new StreamReader (response.GetResponseStream ());
        string jsonText = reader.ReadToEnd ().Replace ("error-codes", "ErrorMessages").Replace ("success", "Succeeded");
        JavaScriptSerializer js = new JavaScriptSerializer ();
        result = (RecaptchaValidationResult) js.Deserialize (jsonText, typeof (RecaptchaValidationResult));
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
93
3
Gpt3D_Clone93_3.cs 1 12
Gpt3D_Clone93_3.cs 13 26
----------------------------------------

public RecaptchaValidationResult Validate (string recaptchaResponse) {
    RecaptchaValidationResult result = new RecaptchaValidationResult ();
    HttpWebRequest req = (HttpWebRequest) WebRequest.Create ("https://www.google.com/recaptcha/api/siteverify?secret=" + SecretKey + "&response=" + recaptchaResponse + "&remoteip=" + GetClientIp ());
    using (WebResponse wResponse = req.GetResponse ())
    {
        using (StreamReader readStream = new StreamReader (wResponse.GetResponseStream ()))
        {
            string jsonResponse = readStream.ReadToEnd ();
            JavaScriptSerializer js = new JavaScriptSerializer ();
            result = js.Deserialize < RecaptchaValidationResult > (jsonResponse.Replace ("error-codes", "ErrorMessages").Replace ("success", "Succeeded"));
        }} return result;
}
----------------------------------------

 public RecaptchaValidationResult Validate (string recaptchaResponse) {
    RecaptchaValidationResult result = new RecaptchaValidationResult ();
    string url = string.Format("https://www.google.com/recaptcha/api/siteverify?secret={0}&response={1}&remoteip={2}", SecretKey, recaptchaResponse, GetClientIp());
    HttpWebRequest request = WebRequest.Create(url) as HttpWebRequest;
    using (HttpWebResponse response = request.GetResponse() as HttpWebResponse){
        StreamReader reader = new StreamReader(response.GetResponseStream());
        string json = reader.ReadToEnd().Replace("error-codes", "ErrorMessages").Replace("success", "Succeeded");
        JavaScriptSerializer js = new JavaScriptSerializer();
        result = js.Deserialize<RecaptchaValidationResult> (json);
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
93
5
Gpt3D_Clone93_5.cs 1 12
Gpt3D_Clone93_5.cs 13 25
----------------------------------------

public RecaptchaValidationResult Validate (string recaptchaResponse) {
    RecaptchaValidationResult result = new RecaptchaValidationResult ();
    HttpWebRequest req = (HttpWebRequest) WebRequest.Create ("https://www.google.com/recaptcha/api/siteverify?secret=" + SecretKey + "&response=" + recaptchaResponse + "&remoteip=" + GetClientIp ());
    using (WebResponse wResponse = req.GetResponse ())
    {
        using (StreamReader readStream = new StreamReader (wResponse.GetResponseStream ()))
        {
            string jsonResponse = readStream.ReadToEnd ();
            JavaScriptSerializer js = new JavaScriptSerializer ();
            result = js.Deserialize < RecaptchaValidationResult > (jsonResponse.Replace ("error-codes", "ErrorMessages").Replace ("success", "Succeeded"));
        }} return result;
}
----------------------------------------

 public RecaptchaValidationResult Validate (string recaptchaResponse) {
    RecaptchaValidationResult result = new RecaptchaValidationResult ();
    string url = "https://www.google.com/recaptcha/api/siteverify?secret=" + SecretKey + "&response=" + recaptchaResponse + "&remoteip=" + GetClientIp ();
    HttpWebRequest request = (HttpWebRequest)WebRequest.Create (url);
    using (HttpWebResponse response = (HttpWebResponse)request.GetResponse ()) {
        StreamReader reader = new StreamReader(response.GetResponseStream());
        JavaScriptSerializer js = new JavaScriptSerializer();
        result = js.Deserialize<RecaptchaValidationResult>(reader.ReadToEnd().Replace("error-codes", "ErrorMessages").Replace("success", "Succeeded"));
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
93
9
Gpt3D_Clone93_9.cs 1 12
Gpt3D_Clone93_9.cs 13 22
----------------------------------------

public RecaptchaValidationResult Validate (string recaptchaResponse) {
    RecaptchaValidationResult result = new RecaptchaValidationResult ();
    HttpWebRequest req = (HttpWebRequest) WebRequest.Create ("https://www.google.com/recaptcha/api/siteverify?secret=" + SecretKey + "&response=" + recaptchaResponse + "&remoteip=" + GetClientIp ());
    using (WebResponse wResponse = req.GetResponse ())
    {
        using (StreamReader readStream = new StreamReader (wResponse.GetResponseStream ()))
        {
            string jsonResponse = readStream.ReadToEnd ();
            JavaScriptSerializer js = new JavaScriptSerializer ();
            result = js.Deserialize < RecaptchaValidationResult > (jsonResponse.Replace ("error-codes", "ErrorMessages").Replace ("success", "Succeeded"));
        }} return result;
}
----------------------------------------

 public RecaptchaValidationResult Validate (string recaptchaResponse) {
    RecaptchaValidationResult result = new RecaptchaValidationResult ();
    HttpWebRequest req = WebRequest.CreateHttp("https://www.google.com/recaptcha/api/siteverify? secret=" + SecretKey + "&response=" + recaptchaResponse + "&remoteip=" + GetClientIp ::GetClientIp());
    using (HttpWebResponse resp = req.GetResponse() as HttpWebResponse){
        result = new JavaScriptSerializer().Deserialize < RecaptchaValidationResult>(resp.GetResponseStream().ReadToEnd().Replace("error-codes","ErrorMessages").Replace("success","Succeeded"));
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
944
1
Gpt3D_Clone944_1.cs 1 16
Gpt3D_Clone944_1.cs 17 40
----------------------------------------

private void RunTest () {
    byte [] iba;
    iba = ReadImage ("D:\\Images\\Image01.jpg");
    using (Image img = DeserializeImage (iba))
    {
        SaveImage (img, "D:\\Images\\Image01_Copy.jpg");
    } iba = ReadImage ("D:\\Images\\Image02.png");
    using (Image img1 = DeserializeImage (iba))
    {
        SaveImage (img1, "D:\\Images\\Image02_Copy.png");
    } iba = ReadImage ("D:\\Images\\Image03.gif");
    using (var img2 = DeserializeImage (iba))
    {
        SaveImage (img2, "D:\\Images\\Image03_Copy.gif");
    } MessageBox.Show ("Test Complete");
}
----------------------------------------

 private void RunTest () {
            Dictionary<string, string> imagePaths = new Dictionary<string, string>(3)
            {
                { "D:\\Images\\Image01.jpg", "D:\\Images\\Image01_Copy.jpg" },
                { "D:\\Images\\Image02.png", "D:\\Images\\Image02_Copy.png" },
                { "D:\\Images\\Image03.gif", "D:\\Images\\Image03_Copy.gif" }
            };
            foreach( string sourcePath in imagePaths.Keys) {
                processImage(sourcePath, imagePaths[sourcePath]); 
            }
            MessageBox.Show ("Test Complete");
        }
        private void processImage(string sourcePath, string destPath) {
            byte [] iba;
            iba = ReadImage (sourcePath);
            using (Image img = DeserializeImage (iba))
            {
                SaveImage (img, destPath);
            }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
944
2
Gpt3D_Clone944_2.cs 1 16
Gpt3D_Clone944_2.cs 17 45
----------------------------------------

private void RunTest () {
    byte [] iba;
    iba = ReadImage ("D:\\Images\\Image01.jpg");
    using (Image img = DeserializeImage (iba))
    {
        SaveImage (img, "D:\\Images\\Image01_Copy.jpg");
    } iba = ReadImage ("D:\\Images\\Image02.png");
    using (Image img1 = DeserializeImage (iba))
    {
        SaveImage (img1, "D:\\Images\\Image02_Copy.png");
    } iba = ReadImage ("D:\\Images\\Image03.gif");
    using (var img2 = DeserializeImage (iba))
    {
        SaveImage (img2, "D:\\Images\\Image03_Copy.gif");
    } MessageBox.Show ("Test Complete");
}
----------------------------------------

 private void RunTest () {
            Dictionary<string, string> imagePaths = new Dictionary<string, string>(3)
            {
                { "D:\\Images\\Image01.jpg", "D:\\Images\\Image01_Copy.jpg" },
                { "D:\\Images\\Image02.png", "D:\\Images\\Image02_Copy.png" },
                { "D:\\Images\\Image03.gif", "D:\\Images\\Image03_Copy.gif" }
            };
            ThreadPool.QueueUserWorkItem( new WaitCallback(parallelProcessImages), imagePaths);
            MessageBox.Show ("Test Complete");
        }
        private void parallelProcessImages(object state) {
            Dictionary<string, string> imagePaths = state as Dictionary<string, string>;
            foreach (string sourcePath in imagePaths.Keys) {
                processImage(sourcePath, imagePaths[sourcePath]); 
            }
        }
        private void processImage(string sourcePath, string destPath) {
            byte [] iba;
            iba = ReadImage (sourcePath);
            using (Image img = DeserializeImage (iba))
            {
                SaveImage (img, destPath);
            }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
944
3
Gpt3D_Clone944_3.cs 1 16
Gpt3D_Clone944_3.cs 17 45
----------------------------------------

private void RunTest () {
    byte [] iba;
    iba = ReadImage ("D:\\Images\\Image01.jpg");
    using (Image img = DeserializeImage (iba))
    {
        SaveImage (img, "D:\\Images\\Image01_Copy.jpg");
    } iba = ReadImage ("D:\\Images\\Image02.png");
    using (Image img1 = DeserializeImage (iba))
    {
        SaveImage (img1, "D:\\Images\\Image02_Copy.png");
    } iba = ReadImage ("D:\\Images\\Image03.gif");
    using (var img2 = DeserializeImage (iba))
    {
        SaveImage (img2, "D:\\Images\\Image03_Copy.gif");
    } MessageBox.Show ("Test Complete");
}
----------------------------------------

 private void RunTest () {
            List<String> imagePaths = new List<String>{
                "D:\\Images\\Image01.jpg", 
                "D:\\Images\\Image02.png",
                "D:\\Images\\Image03.gif"
            };
            List<String> copyImagePaths = new List<String>{
                "D:\\Images\\Image01_Copy.jpg", 
                "D:\\Images\\Image02_Copy.png",
                "D:\\Images\\Image03_Copy.gif"
            };
            for (int i = 0; i < imagePaths.count(); i++) {
                processImage(imagePaths[i], copyImagePaths[i]); 
            }
            MessageBox.Show ("Test Complete");
        }
        private void processImage(string sourcePath, string destPath) {
            byte [] iba;
            iba = ReadImage (sourcePath);
            using (Image img = DeserializeImage (iba))
            {
                SaveImage (img, destPath);
            }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
944
4
Gpt3D_Clone944_4.cs 1 16
Gpt3D_Clone944_4.cs 17 44
----------------------------------------

private void RunTest () {
    byte [] iba;
    iba = ReadImage ("D:\\Images\\Image01.jpg");
    using (Image img = DeserializeImage (iba))
    {
        SaveImage (img, "D:\\Images\\Image01_Copy.jpg");
    } iba = ReadImage ("D:\\Images\\Image02.png");
    using (Image img1 = DeserializeImage (iba))
    {
        SaveImage (img1, "D:\\Images\\Image02_Copy.png");
    } iba = ReadImage ("D:\\Images\\Image03.gif");
    using (var img2 = DeserializeImage (iba))
    {
        SaveImage (img2, "D:\\Images\\Image03_Copy.gif");
    } MessageBox.Show ("Test Complete");
}
----------------------------------------

 private void RunTest () {
            Dictionary<string, string> imagePaths = new Dictionary<string, string>(3)
            {
                { "D:\\Images\\Image01.jpg", "D:\\Images\\Image01_Copy.jpg" },
                { "D:\\Images\\Image02.png", "D:\\Images\\Image02_Copy.png" },
                { "D:\\Images\\Image03.gif", "D:\\Images\\Image03_Copy.gif" }
            };
            parallelProcessImages(imagePaths);
            MessageBox.Show ("Test Complete");
        }
        private void parallelProcessImages(Dictionary<string, string> imagePaths) {
            Parallel.ForEach(imagePaths, kvp => { 
                processImage(kvp.Key, kvp.Value);  
            });
        }
        private void processImage(string sourcePath, string destPath) {
            byte [] iba;
            iba = ReadImage (sourcePath);
            using (Image img = DeserializeImage (iba))
            {
                SaveImage (img, destPath);
            }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
944
5
Gpt3D_Clone944_5.cs 1 16
Gpt3D_Clone944_5.cs 17 45
----------------------------------------

private void RunTest () {
    byte [] iba;
    iba = ReadImage ("D:\\Images\\Image01.jpg");
    using (Image img = DeserializeImage (iba))
    {
        SaveImage (img, "D:\\Images\\Image01_Copy.jpg");
    } iba = ReadImage ("D:\\Images\\Image02.png");
    using (Image img1 = DeserializeImage (iba))
    {
        SaveImage (img1, "D:\\Images\\Image02_Copy.png");
    } iba = ReadImage ("D:\\Images\\Image03.gif");
    using (var img2 = DeserializeImage (iba))
    {
        SaveImage (img2, "D:\\Images\\Image03_Copy.gif");
    } MessageBox.Show ("Test Complete");
}
----------------------------------------

 private void RunTest () {
            List<String> imagePaths = new List<String>{
                "D:\\Images\\Image01.jpg", 
                "D:\\Images\\Image02.png",
                "D:\\Images\\Image03.gif"
            };
            List<String> copyImagePaths = new List<String>{
                "D:\\Images\\Image01_Copy.jpg", 
                "D:\\Images\\Image02_Copy.png",
                "D:\\Images\\Image03_Copy.gif"
            };
            for (int i = 0; i < imagePaths.count(); i++) {
                processImage(imagePaths[i], copyImagePaths[i]); 
            }
            MessageBox.Show ("Test Complete");
        }
        private void processImage(string sourcePath, string destPath) {
            byte [] iba;
            iba = ReadImage (sourcePath);
            using (Image img = DeserializeImage (iba))
            {
                SaveImage (img, destPath);
            }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
944
6
Gpt3D_Clone944_6.cs 1 16
Gpt3D_Clone944_6.cs 17 40
----------------------------------------

private void RunTest () {
    byte [] iba;
    iba = ReadImage ("D:\\Images\\Image01.jpg");
    using (Image img = DeserializeImage (iba))
    {
        SaveImage (img, "D:\\Images\\Image01_Copy.jpg");
    } iba = ReadImage ("D:\\Images\\Image02.png");
    using (Image img1 = DeserializeImage (iba))
    {
        SaveImage (img1, "D:\\Images\\Image02_Copy.png");
    } iba = ReadImage ("D:\\Images\\Image03.gif");
    using (var img2 = DeserializeImage (iba))
    {
        SaveImage (img2, "D:\\Images\\Image03_Copy.gif");
    } MessageBox.Show ("Test Complete");
}
----------------------------------------

 private void RunTest () {
            Dictionary<string, string> imagePaths = new Dictionary<string, string>(3)
            {
                { "D:\\Images\\Image01.jpg", "D:\\Images\\Image01_Copy.jpg" },
                { "D:\\Images\\Image02.png", "D:\\Images\\Image02_Copy.png" },
                { "D:\\Images\\Image03.gif", "D:\\Images\\Image03_Copy.gif" }
            };
            foreach( string sourcePath in imagePaths.Keys) {
                processImage(sourcePath, imagePaths[sourcePath]); 
            }
            MessageBox.Show ("Test Complete");
        }
        private void processImage(string sourcePath, string destPath) {
            byte [] iba;
            iba = ReadImage (sourcePath);
            using (Image img = DeserializeImage (iba))
            {
                SaveImage (img, destPath);
            }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
944
7
Gpt3D_Clone944_7.cs 1 16
Gpt3D_Clone944_7.cs 17 45
----------------------------------------

private void RunTest () {
    byte [] iba;
    iba = ReadImage ("D:\\Images\\Image01.jpg");
    using (Image img = DeserializeImage (iba))
    {
        SaveImage (img, "D:\\Images\\Image01_Copy.jpg");
    } iba = ReadImage ("D:\\Images\\Image02.png");
    using (Image img1 = DeserializeImage (iba))
    {
        SaveImage (img1, "D:\\Images\\Image02_Copy.png");
    } iba = ReadImage ("D:\\Images\\Image03.gif");
    using (var img2 = DeserializeImage (iba))
    {
        SaveImage (img2, "D:\\Images\\Image03_Copy.gif");
    } MessageBox.Show ("Test Complete");
}
----------------------------------------

 private void RunTest () {
            Dictionary<string, string> imagePaths = new Dictionary<string, string>(3)
            {
                { "D:\\Images\\Image01.jpg", "D:\\Images\\Image01_Copy.jpg" },
                { "D:\\Images\\Image02.png", "D:\\Images\\Image02_Copy.png" },
                { "D:\\Images\\Image03.gif", "D:\\Images\\Image03_Copy.gif" }
            };
            ThreadPool.QueueUserWorkItem( new WaitCallback(parallelProcessImages), imagePaths);
            MessageBox.Show ("Test Complete");
        }
        private void parallelProcessImages(object state) {
            Dictionary<string, string> imagePaths = state as Dictionary<string, string>;
            foreach (string sourcePath in imagePaths.Keys) {
                processImage(sourcePath, imagePaths[sourcePath]); 
            }
        }
        private void processImage(string sourcePath, string destPath) {
            byte [] iba;
            iba = ReadImage (sourcePath);
            using (Image img = DeserializeImage (iba))
            {
                SaveImage (img, destPath);
            }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
944
8
Gpt3D_Clone944_8.cs 1 16
Gpt3D_Clone944_8.cs 17 44
----------------------------------------

private void RunTest () {
    byte [] iba;
    iba = ReadImage ("D:\\Images\\Image01.jpg");
    using (Image img = DeserializeImage (iba))
    {
        SaveImage (img, "D:\\Images\\Image01_Copy.jpg");
    } iba = ReadImage ("D:\\Images\\Image02.png");
    using (Image img1 = DeserializeImage (iba))
    {
        SaveImage (img1, "D:\\Images\\Image02_Copy.png");
    } iba = ReadImage ("D:\\Images\\Image03.gif");
    using (var img2 = DeserializeImage (iba))
    {
        SaveImage (img2, "D:\\Images\\Image03_Copy.gif");
    } MessageBox.Show ("Test Complete");
}
----------------------------------------

 private void RunTest () {
            Dictionary<string, string> imagePaths = new Dictionary<string, string>(3)
            {
                { "D:\\Images\\Image01.jpg", "D:\\Images\\Image01_Copy.jpg" },
                { "D:\\Images\\Image02.png", "D:\\Images\\Image02_Copy.png" },
                { "D:\\Images\\Image03.gif", "D:\\Images\\Image03_Copy.gif" }
            };
            parallelProcessImages(imagePaths);
            MessageBox.Show ("Test Complete");
        }
        private void parallelProcessImages(Dictionary<string, string> imagePaths) {
            Parallel.ForEach(imagePaths, kvp => { 
                processImage(kvp.Key, kvp.Value);  
            });
        }
        private void processImage(string sourcePath, string destPath) {
            byte [] iba;
            iba = ReadImage (sourcePath);
            using (Image img = DeserializeImage (iba))
            {
                SaveImage (img, destPath);
            }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
945
0
Gpt3D_Clone945_0.cs 1 25
Gpt3D_Clone945_0.cs 26 65
----------------------------------------

public void DisableForm (ControlCollection ctrls) {
    foreach (Control ctrl in ctrls) {
        if (ctrl is TextBox)
            ((TextBox) ctrl).Enabled = false;
        if (ctrl is Button)
            ((Button) ctrl).Enabled = false;
        else if (ctrl is DropDownList)
            ((DropDownList) ctrl).Enabled = false;
        else if (ctrl is CheckBox)
            ((CheckBox) ctrl).Enabled = false;
        else if (ctrl is RadioButton)
            ((RadioButton) ctrl).Enabled = false;
        else if (ctrl is HtmlInputButton)
            ((HtmlInputButton) ctrl).Disabled = true;
        else if (ctrl is HtmlInputText)
            ((HtmlInputText) ctrl).Disabled = true;
        else if (ctrl is HtmlSelect)
            ((HtmlSelect) ctrl).Disabled = true;
        else if (ctrl is HtmlInputCheckBox)
            ((HtmlInputCheckBox) ctrl).Disabled = true;
        else if (ctrl is HtmlInputRadioButton)
            ((HtmlInputRadioButton) ctrl).Disabled = true;
        DisableForm (ctrl.Controls);
    }
}
----------------------------------------

 public void DisableForm (ControlCollection ctrls) {
    foreach (Control ctrl in ctrls) {
        switch (ctrl.GetType().ToString())
        {
            case "System.Web.UI.WebControls.TextBox":
                ctrl.Enabled = false;
                break;
            case "System.Web.UI.WebControls.Button":
                ctrl.Enabled = false;
                break;
            case "System.Web.UI.WebControls.DropDownList":
                ctrl.Enabled = false;
                break;
            case "System.Web.UI.WebControls.CheckBox":
                ctrl.Enabled = false;
                break;
            case "System.Web.UI.WebControls.RadioButton":
                ctrl.Enabled = false;
                break;
            case "System.Web.UI.HtmlControls.HtmlInputButton":
                ctrl.Disabled = true;
                break;
            case "System.Web.UI.HtmlControls.HtmlInputText":
                ctrl.Disabled = true;
                break;
            case "System.Web.UI.HtmlControls.HtmlSelect":
                ctrl.Disabled = true;
                break;
            case "System.Web.UI.HtmlControls.HtmlInputCheckBox":
                ctrl.Disabled = true;
                break;
            case "System.Web.UI.HtmlControls.HtmlInputRadioButton":
                ctrl.Disabled = true;
                break;
        }
        DisableForm (ctrl.Controls);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
946
0
Gpt3D_Clone946_0.cs 1 9
Gpt3D_Clone946_0.cs 10 25
----------------------------------------

static String findFirstKeyByValue (Dictionary < string, string > Data_Array, String value) {
    if (Data_Array.ContainsValue (value)) {
        foreach (String key in Data_Array.Keys) {
            if (Data_Array [key].Equals (value))
                return key;
        }
    }
    return null;
}
----------------------------------------

 static String findFirstKeyByValue (Dictionary < string, string > Data_Array, String value) {
    String firstKey = null;
    int i = 0;
    int keyCount = Data_Array.Count;
    while (i < keyCount) {
        String key = Data_Array.Keys.ToArray()[i];
        if (Data_Array[key] == value) {
            firstKey = key;
            break;
        }
        i++;
    }
    return firstKey;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
946
1
Gpt3D_Clone946_1.cs 1 9
Gpt3D_Clone946_1.cs 10 23
----------------------------------------

static String findFirstKeyByValue (Dictionary < string, string > Data_Array, String value) {
    if (Data_Array.ContainsValue (value)) {
        foreach (String key in Data_Array.Keys) {
            if (Data_Array [key].Equals (value))
                return key;
        }
    }
    return null;
}
----------------------------------------

 static String findFirstKeyByValue (Dictionary < string, string > Data_Array, String value) {
    String firstKey = null;
    var dataArrayKeys = Data_Array.Keys;
    for (int i = 0; i < dataArrayKeys.Count; i++) {
        String key = dataArrayKeys.ElementAt(i);
        if (Data_Array[key] == value) {
            firstKey = key;
            break;
        }
    }
    return firstKey;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
946
2
Gpt3D_Clone946_2.cs 1 9
Gpt3D_Clone946_2.cs 10 21
----------------------------------------

static String findFirstKeyByValue (Dictionary < string, string > Data_Array, String value) {
    if (Data_Array.ContainsValue (value)) {
        foreach (String key in Data_Array.Keys) {
            if (Data_Array [key].Equals (value))
                return key;
        }
    }
    return null;
}
----------------------------------------

  static String findFirstKeyByValue (Dictionary < string, string > Data_Array, String value) {
    String firstKey = null;
    foreach (String key in Data_Array.Keys) {
        if (Data_Array[key] == value) {
            firstKey = key;
            break;
        }
    }
    return firstKey;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
946
3
Gpt3D_Clone946_3.cs 1 9
Gpt3D_Clone946_3.cs 10 23
----------------------------------------

static String findFirstKeyByValue (Dictionary < string, string > Data_Array, String value) {
    if (Data_Array.ContainsValue (value)) {
        foreach (String key in Data_Array.Keys) {
            if (Data_Array [key].Equals (value))
                return key;
        }
    }
    return null;
}
----------------------------------------

 static String findFirstKeyByValue (Dictionary < string, string > Data_Array, String value) {
    if (!Data_Array.ContainsValue (value))
        return null;
    foreach (KeyValuePair<string, string> entry in Data_Array) {
        if (entry.Value == value) {
            return entry.Key;
        }
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
946
4
Gpt3D_Clone946_4.cs 1 9
Gpt3D_Clone946_4.cs 10 18
----------------------------------------

static String findFirstKeyByValue (Dictionary < string, string > Data_Array, String value) {
    if (Data_Array.ContainsValue (value)) {
        foreach (String key in Data_Array.Keys) {
            if (Data_Array [key].Equals (value))
                return key;
        }
    }
    return null;
}
----------------------------------------

 static String findFirstKeyByValue (Dictionary < string, string > Data_Array, String value) {
    IEnumerable<KeyValuePair<string, string>> q = Data_Array.Where(p => p.Value == value);
    if (q.Any())
        return q.ElementAt(0).Key;
    else
        return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
946
5
Gpt3D_Clone946_5.cs 1 9
Gpt3D_Clone946_5.cs 10 19
----------------------------------------

static String findFirstKeyByValue (Dictionary < string, string > Data_Array, String value) {
    if (Data_Array.ContainsValue (value)) {
        foreach (String key in Data_Array.Keys) {
            if (Data_Array [key].Equals (value))
                return key;
        }
    }
    return null;
}
----------------------------------------

 static String findFirstKeyByValue (Dictionary < string, string > Data_Array, String value) {
    foreach (string key in Data_Array.Keys) {
        if (Data_Array[key] == value) {
            return key;
        }
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
946
6
Gpt3D_Clone946_6.cs 1 9
Gpt3D_Clone946_6.cs 10 19
----------------------------------------

static String findFirstKeyByValue (Dictionary < string, string > Data_Array, String value) {
    if (Data_Array.ContainsValue (value)) {
        foreach (String key in Data_Array.Keys) {
            if (Data_Array [key].Equals (value))
                return key;
        }
    }
    return null;
}
----------------------------------------

 static String findFirstKeyByValue (Dictionary < string, string > Data_Array, String value) {
    String firstKey = null;
    if (Data_Array.ContainsValue(value)) 
    { 
        firstKey = Data_Array.FirstOrDefault(x => x.Value == value).Key; 
    } 
    return firstKey;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
946
7
Gpt3D_Clone946_7.cs 1 9
Gpt3D_Clone946_7.cs 10 19
----------------------------------------

static String findFirstKeyByValue (Dictionary < string, string > Data_Array, String value) {
    if (Data_Array.ContainsValue (value)) {
        foreach (String key in Data_Array.Keys) {
            if (Data_Array [key].Equals (value))
                return key;
        }
    }
    return null;
}
----------------------------------------

 static String findFirstKeyByValue (Dictionary < string, string > Data_Array, String value) {
    foreach (KeyValuePair<string, string> pair in Data_Array)
    {
        if (pair.Value == value)
            return pair.Key;
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
946
8
Gpt3D_Clone946_8.cs 1 9
Gpt3D_Clone946_8.cs 10 15
----------------------------------------

static String findFirstKeyByValue (Dictionary < string, string > Data_Array, String value) {
    if (Data_Array.ContainsValue (value)) {
        foreach (String key in Data_Array.Keys) {
            if (Data_Array [key].Equals (value))
                return key;
        }
    }
    return null;
}
----------------------------------------

 static String findFirstKeyByValue (Dictionary < string, string > Data_Array, String value) {
    string firstKey = Array.Find(Data_Array.ToArray(), e => e.Value == value).Key;
    return firstKey;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
946
9
Gpt3D_Clone946_9.cs 1 9
Gpt3D_Clone946_9.cs 10 15
----------------------------------------

static String findFirstKeyByValue (Dictionary < string, string > Data_Array, String value) {
    if (Data_Array.ContainsValue (value)) {
        foreach (String key in Data_Array.Keys) {
            if (Data_Array [key].Equals (value))
                return key;
        }
    }
    return null;
}
----------------------------------------

 static String findFirstKeyByValue (Dictionary < string, string > Data_Array, String value) {
    String firstKey = Data_Array.Keys.FirstOrDefault(k => Data_Array[k].Equals(value));
    return firstKey;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
0
Gpt3D_Clone94_0.cs 1 12
Gpt3D_Clone94_0.cs 13 48
----------------------------------------

public RecaptchaValidationResult Validate (string recaptchaResponse) {
    RecaptchaValidationResult result = new RecaptchaValidationResult ();
    HttpWebRequest req = (HttpWebRequest) WebRequest.Create ("https://www.google.com/recaptcha/api/siteverify?secret=" + SecretKey + "&response=" + recaptchaResponse + "&remoteip=" + GetClientIp ());
    using (WebResponse wResponse = req.GetResponse ())
    {
        using (StreamReader readStream = new StreamReader (wResponse.GetResponseStream ()))
        {
            string jsonResponse = readStream.ReadToEnd ();
            JavaScriptSerializer js = new JavaScriptSerializer ();
            result = js.Deserialize < RecaptchaValidationResult > (jsonResponse.Replace ("error-codes", "ErrorMessages").Replace ("success", "Succeeded"));
        }} return result;
}
----------------------------------------

 
public RecaptchaValidationResult Validate (string recaptchaResponse) {
    RecaptchaValidationResult result = new RecaptchaValidationResult ();
    string validationUrl = "https://www.google.com/recaptcha/api/siteverify?secret=" + SecretKey + "&response=" + recaptchaResponse + "&remoteip=" + GetClientIp ();
    HttpWebRequest req = (HttpWebRequest)WebRequest.Create(validationUrl);
    req.Timeout = 3000;
    req.Method = "POST";
    using (HttpWebResponse response = (HttpWebResponse) req.GetResponse ())
    {
        using (StreamReader sr = new StreamReader(response.GetResponseStream ()))
        {
            String jsonResponse = sr.ReadToEnd ();
            String errorCodesString = jsonResponse.Replace("error-codes", "");
            String[] errorCodes = errorCodesString.Split(" ");
            String errorMessages = "";
            foreach (String code in errorCodes)
            {
                switch (code)
                {
                    case "missing-input-response":
                        errorMessages += "The recaptcha response is missing; ";
                        break;
                    case "invalid-input-response":
                        errorMessages += "The recaptcha response is invalid; ";
                        break;
                }
            }
            JavaScriptSerializer js = new JavaScriptSerializer ();
            result = new RecaptchaValidationResult {ErrorMessages=errorMessages, Succeeded=jsonResponse.Contains("success")}; 
        }
    } 
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
1
Gpt3D_Clone94_1.cs 1 12
Gpt3D_Clone94_1.cs 13 43
----------------------------------------

public RecaptchaValidationResult Validate (string recaptchaResponse) {
    RecaptchaValidationResult result = new RecaptchaValidationResult ();
    HttpWebRequest req = (HttpWebRequest) WebRequest.Create ("https://www.google.com/recaptcha/api/siteverify?secret=" + SecretKey + "&response=" + recaptchaResponse + "&remoteip=" + GetClientIp ());
    using (WebResponse wResponse = req.GetResponse ())
    {
        using (StreamReader readStream = new StreamReader (wResponse.GetResponseStream ()))
        {
            string jsonResponse = readStream.ReadToEnd ();
            JavaScriptSerializer js = new JavaScriptSerializer ();
            result = js.Deserialize < RecaptchaValidationResult > (jsonResponse.Replace ("error-codes", "ErrorMessages").Replace ("success", "Succeeded"));
        }} return result;
}
----------------------------------------

 
public RecaptchaValidationResult Validate (string recaptchaResponse) {
    RecaptchaValidationResult result = new RecaptchaValidationResult ();
    string url = "https://www.google.com/recaptcha/api/siteverify?secret=" + SecretKey + "&response=" + recaptchaResponse + "&remoteip=" + GetClientIp ();
    HttpWebRequest req = WebRequest.CreateHttp (url);
    req.Method = "POST";
    req.Timeout = 3000;
    using (HttpWebResponse response = (HttpWebResponse) req.GetResponse ())
    {
        using (StreamReader sr = new StreamReader(response.GetResponseStream ()))
        {
            String jsonResponse = sr.ReadToEnd ();
            String errorCodesString = jsonResponse.Replace("error-codes", "");
            String[] errorCodes = errorCodesString.Split(" ");
            String errorMessages = "";
            foreach (String code in errorCodes)
            {
                if (code == "missing-input-response")
                    errorMessages += "The recaptcha response is missing; ";
                else if (code == "invalid-input-response")
                    errorMessages += "The recaptcha response is invalid; ";
            }
            JavaScriptSerializer js = new JavaScriptSerializer ();
            RecaptchaValidationResult result = 
                  new RecaptchaValidationResult {ErrorMessages=errorMessages, Succeeded=jsonResponse.Contains("success")}; 
            return result;
        }
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
2
Gpt3D_Clone94_2.cs 1 12
Gpt3D_Clone94_2.cs 13 44
----------------------------------------

public RecaptchaValidationResult Validate (string recaptchaResponse) {
    RecaptchaValidationResult result = new RecaptchaValidationResult ();
    HttpWebRequest req = (HttpWebRequest) WebRequest.Create ("https://www.google.com/recaptcha/api/siteverify?secret=" + SecretKey + "&response=" + recaptchaResponse + "&remoteip=" + GetClientIp ());
    using (WebResponse wResponse = req.GetResponse ())
    {
        using (StreamReader readStream = new StreamReader (wResponse.GetResponseStream ()))
        {
            string jsonResponse = readStream.ReadToEnd ();
            JavaScriptSerializer js = new JavaScriptSerializer ();
            result = js.Deserialize < RecaptchaValidationResult > (jsonResponse.Replace ("error-codes", "ErrorMessages").Replace ("success", "Succeeded"));
        }} return result;
}
----------------------------------------

 
public RecaptchaValidationResult Validate (string recaptchaResponse) {
    RecaptchaValidationResult result = new RecaptchaValidationResult ();
    string url = "https://www.google.com/recaptcha/api/siteverify?secret=" + SecretKey + "&response=" + recaptchaResponse + "&remoteip=" + GetClientIp ();
    WebRequest webReq = WebRequest.Create (url);
    webReq.Timeout = 3000;
    webReq.Method = "POST";
    using (HttpWebResponse response = (HttpWebResponse) webReq.GetResponse ())
    {
        using (StreamReader sr = new StreamReader(response.GetResponseStream ()))
        {
            String jsonResponse = sr.ReadToEnd ();
            String errorCodesString = jsonResponse.Replace("error-codes", "");
            String[] errorCodes = errorCodesString.Split(" ");
            String errorMessages = "";
            foreach (String code in errorCodes)
            {
                if (code == "missing-input-response")
                    errorMessages += "The recaptcha response is missing; ";
                else if (code == "invalid-input-response")
                    errorMessages += "The recaptcha response is invalid; ";
            }
            JavaScriptSerializer js = new JavaScriptSerializer ();
            RecaptchaValidationResult result = 
                  new RecaptchaValidationResult {ErrorMessages=errorMessages, Succeeded=jsonResponse.Contains("success")}; 
            return result;
        }
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
3
Gpt3D_Clone94_3.cs 1 12
Gpt3D_Clone94_3.cs 13 44
----------------------------------------

public RecaptchaValidationResult Validate (string recaptchaResponse) {
    RecaptchaValidationResult result = new RecaptchaValidationResult ();
    HttpWebRequest req = (HttpWebRequest) WebRequest.Create ("https://www.google.com/recaptcha/api/siteverify?secret=" + SecretKey + "&response=" + recaptchaResponse + "&remoteip=" + GetClientIp ());
    using (WebResponse wResponse = req.GetResponse ())
    {
        using (StreamReader readStream = new StreamReader (wResponse.GetResponseStream ()))
        {
            string jsonResponse = readStream.ReadToEnd ();
            JavaScriptSerializer js = new JavaScriptSerializer ();
            result = js.Deserialize < RecaptchaValidationResult > (jsonResponse.Replace ("error-codes", "ErrorMessages").Replace ("success", "Succeeded"));
        }} return result;
}
----------------------------------------

 
public RecaptchaValidationResult Validate (string recaptchaResponse) {
    RecaptchaValidationResult result = new RecaptchaValidationResult ();
    Uri validationUri = new Uri("https://www.google.com/recaptcha/api/siteverify?secret=" + SecretKey + "&response=" + recaptchaResponse + "&remoteip=" + GetClientIp ());
    HttpWebRequest request = WebRequest.CreateDefault(validationUri);
    request.Timeout = 3000;
    request.Method = "POST";
    using (HttpWebResponse response = (HttpWebResponse) request.GetResponse ())
    {
        using (StreamReader sr = new StreamReader(response.GetResponseStream ()))
        {
            String jsonResponse = sr.ReadToEnd ();
            String errorCodesString = jsonResponse.Replace("error-codes", "");
            String[] errorCodes = errorCodesString.Split(" ");
            String errorMessages = "";
            foreach (String code in errorCodes)
            {
                if (code == "missing-input-response")
                    errorMessages += "The recaptcha response is missing; ";
                else if (code == "invalid-input-response")
                    errorMessages += "The recaptcha response is invalid; ";
            }
            JavaScriptSerializer js = new JavaScriptSerializer ();
            RecaptchaValidationResult result = 
                  new RecaptchaValidationResult {ErrorMessages=errorMessages, Succeeded=jsonResponse.Contains("success")}; 
            return result;
        }
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
4
Gpt3D_Clone94_4.cs 1 12
Gpt3D_Clone94_4.cs 13 43
----------------------------------------

public RecaptchaValidationResult Validate (string recaptchaResponse) {
    RecaptchaValidationResult result = new RecaptchaValidationResult ();
    HttpWebRequest req = (HttpWebRequest) WebRequest.Create ("https://www.google.com/recaptcha/api/siteverify?secret=" + SecretKey + "&response=" + recaptchaResponse + "&remoteip=" + GetClientIp ());
    using (WebResponse wResponse = req.GetResponse ())
    {
        using (StreamReader readStream = new StreamReader (wResponse.GetResponseStream ()))
        {
            string jsonResponse = readStream.ReadToEnd ();
            JavaScriptSerializer js = new JavaScriptSerializer ();
            result = js.Deserialize < RecaptchaValidationResult > (jsonResponse.Replace ("error-codes", "ErrorMessages").Replace ("success", "Succeeded"));
        }} return result;
}
----------------------------------------

 
public RecaptchaValidationResult Validate (string recaptchaResponse) {
    RecaptchaValidationResult result = new RecaptchaValidationResult ();
    string validationUrl = "https://www.google.com/recaptcha/api/siteverify?secret=" + SecretKey + "&response=" + recaptchaResponse + "&remoteip=" + GetClientIp ();
    HttpWebRequest request = (HttpWebRequest) WebRequest.Create(validationUrl);
    request.Timeout = 3000;
    request.Method = "POST";
    using (HttpWebResponse response = (HttpWebResponse) request.GetResponse ())
    {
        using (StreamReader sr = new StreamReader(response.GetResponseStream ()))
        {
            String jsonResponse = sr.ReadToEnd ();
            String errorCodesString = jsonResponse.Replace("error-codes", "");
            String[] errorCodes = errorCodesString.Split(" ");
            String errorMessages = "";
            foreach (String code in errorCodes)
            {
                if (code == "missing-input-response")
                    errorMessages += "The recaptcha response is missing; ";
                else if (code == "invalid-input-response")
                    errorMessages += "The recaptcha response is invalid; ";
            }
            JavaScriptSerializer js = new JavaScriptSerializer ();
            result = new RecaptchaValidationResult {ErrorMessages=errorMessages, Succeeded=jsonResponse.Contains("success")}; 
        }
    } 
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
5
Gpt3D_Clone94_5.cs 1 12
Gpt3D_Clone94_5.cs 13 44
----------------------------------------

public RecaptchaValidationResult Validate (string recaptchaResponse) {
    RecaptchaValidationResult result = new RecaptchaValidationResult ();
    HttpWebRequest req = (HttpWebRequest) WebRequest.Create ("https://www.google.com/recaptcha/api/siteverify?secret=" + SecretKey + "&response=" + recaptchaResponse + "&remoteip=" + GetClientIp ());
    using (WebResponse wResponse = req.GetResponse ())
    {
        using (StreamReader readStream = new StreamReader (wResponse.GetResponseStream ()))
        {
            string jsonResponse = readStream.ReadToEnd ();
            JavaScriptSerializer js = new JavaScriptSerializer ();
            result = js.Deserialize < RecaptchaValidationResult > (jsonResponse.Replace ("error-codes", "ErrorMessages").Replace ("success", "Succeeded"));
        }} return result;
}
----------------------------------------

 
public RecaptchaValidationResult Validate (string recaptchaResponse) {
    RecaptchaValidationResult result = new RecaptchaValidationResult ();
    HttpWebRequest req = (HttpWebRequest) WebRequest.Create("https://www.google.com/recaptcha/api/siteverify?secret=" + SecretKey + "&response=" + recaptchaResponse + "&remoteip=" + GetClientIp ());
    using (WebResponse wResponse = req.GetResponse ())
    {
        using (StreamReader readStream = new StreamReader (wResponse.GetResponseStream ()))
        {
            string jsonResponse = readStream.ReadToEnd ();
            string errorCodesString = jsonResponse.Replace("error-codes", "");
            string[] errorCodes = errorCodesString.Split(" ");
            string errorMessages = "";
            foreach (string code in errorCodes)
            {
                switch (code)
                {
                    case "missing-input-response":
                        errorMessages += "The recaptcha response is missing; ";
                        break;
                    case "invalid-input-response":
                        errorMessages += "The recaptcha response is invalid; ";
                        break;
                }
            }
            JavaScriptSerializer js = new JavaScriptSerializer ();
            result = new RecaptchaValidationResult {ErrorMessages=errorMessages, Succeeded=jsonResponse.Contains("success")}; 
        }
    } 
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
6
Gpt3D_Clone94_6.cs 1 12
Gpt3D_Clone94_6.cs 13 44
----------------------------------------

public RecaptchaValidationResult Validate (string recaptchaResponse) {
    RecaptchaValidationResult result = new RecaptchaValidationResult ();
    HttpWebRequest req = (HttpWebRequest) WebRequest.Create ("https://www.google.com/recaptcha/api/siteverify?secret=" + SecretKey + "&response=" + recaptchaResponse + "&remoteip=" + GetClientIp ());
    using (WebResponse wResponse = req.GetResponse ())
    {
        using (StreamReader readStream = new StreamReader (wResponse.GetResponseStream ()))
        {
            string jsonResponse = readStream.ReadToEnd ();
            JavaScriptSerializer js = new JavaScriptSerializer ();
            result = js.Deserialize < RecaptchaValidationResult > (jsonResponse.Replace ("error-codes", "ErrorMessages").Replace ("success", "Succeeded"));
        }} return result;
}
----------------------------------------

 
public RecaptchaValidationResult Validate (string recaptchaResponse)
{
    RecaptchaValidationResult result = new RecaptchaValidationResult ();
    HttpWebRequest req = (HttpWebRequest)WebRequest.Create("https://www.google.com/recaptcha/api/siteverify?secret=" + SecretKey + "&response=" + recaptchaResponse + "&remoteip=" + GetClientIp ());
    req.Timeout = 10000;
    req.Method = "POST";
    req.ContentType = "application/json; charset=utf-8";
    using (WebResponse wResponse = req.GetResponse ())
    {
        using (StreamReader readStream = new StreamReader (wResponse.GetResponseStream ()))
        {
            string jsonResponse = readStream.ReadToEnd ();
            string errorCodesString = jsonResponse.Replace("error-codes", "");
            string[] errorCodes = errorCodesString.Split(" ");
            string errorMessages = "";
            foreach (string code in errorCodes)
            {
                if (code == "missing-input-response")
                    errorMessages += "The recaptcha response is missing; ";
                else if (code == "invalid-input-response")
                    errorMessages += "The recaptcha response is invalid; ";
            }
            JavaScriptSerializer js = new JavaScriptSerializer ();
            result = new RecaptchaValidationResult {ErrorMessages=errorMessages, Succeeded=jsonResponse.Contains("success")}; 
        }
    } 
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
7
Gpt3D_Clone94_7.cs 1 12
Gpt3D_Clone94_7.cs 13 43
----------------------------------------

public RecaptchaValidationResult Validate (string recaptchaResponse) {
    RecaptchaValidationResult result = new RecaptchaValidationResult ();
    HttpWebRequest req = (HttpWebRequest) WebRequest.Create ("https://www.google.com/recaptcha/api/siteverify?secret=" + SecretKey + "&response=" + recaptchaResponse + "&remoteip=" + GetClientIp ());
    using (WebResponse wResponse = req.GetResponse ())
    {
        using (StreamReader readStream = new StreamReader (wResponse.GetResponseStream ()))
        {
            string jsonResponse = readStream.ReadToEnd ();
            JavaScriptSerializer js = new JavaScriptSerializer ();
            result = js.Deserialize < RecaptchaValidationResult > (jsonResponse.Replace ("error-codes", "ErrorMessages").Replace ("success", "Succeeded"));
        }} return result;
}
----------------------------------------

 
public RecaptchaValidationResult Validate (string recaptchaResponse) {
    Uri validationUri = new Uri("https://www.google.com/recaptcha/api/siteverify?secret=" + SecretKey + "&response=" + recaptchaResponse + "&remoteip=" + GetClientIp ());
    HttpWebRequest request = (HttpWebRequest) WebRequest.Create(validationUri);
    request.Timeout = 3000;
    request.Method = "POST";
    using (HttpWebResponse response = (HttpWebResponse) request.GetResponse ())
    {
        using (StreamReader sr = new StreamReader(response.GetResponseStream ()))
        {
            String jsonResponse = sr.ReadToEnd ();
            String errorCodesString = jsonResponse.Replace("error-codes", "");
            String[] errorCodes = errorCodesString.Split(" ");
            String errorMessages = "";
            foreach (String code in errorCodes)
            {
                if (code == "missing-input-response")
                    errorMessages += "The recaptcha response is missing; ";
                else if (code == "invalid-input-response")
                    errorMessages += "The recaptcha response is invalid; ";
            }
            JavaScriptSerializer js = new JavaScriptSerializer ();
            RecaptchaValidationResult result = 
                  new RecaptchaValidationResult {ErrorMessages=errorMessages, Succeeded=jsonResponse.Contains("success")}; 
            return result;
        }
    } 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
94
8
Gpt3D_Clone94_8.cs 1 12
Gpt3D_Clone94_8.cs 13 38
----------------------------------------

public RecaptchaValidationResult Validate (string recaptchaResponse) {
    RecaptchaValidationResult result = new RecaptchaValidationResult ();
    HttpWebRequest req = (HttpWebRequest) WebRequest.Create ("https://www.google.com/recaptcha/api/siteverify?secret=" + SecretKey + "&response=" + recaptchaResponse + "&remoteip=" + GetClientIp ());
    using (WebResponse wResponse = req.GetResponse ())
    {
        using (StreamReader readStream = new StreamReader (wResponse.GetResponseStream ()))
        {
            string jsonResponse = readStream.ReadToEnd ();
            JavaScriptSerializer js = new JavaScriptSerializer ();
            result = js.Deserialize < RecaptchaValidationResult > (jsonResponse.Replace ("error-codes", "ErrorMessages").Replace ("success", "Succeeded"));
        }} return result;
}
----------------------------------------

public RecaptchaValidationResult Validate (string recaptchaResponse) {
    RecaptchaValidationResult result = new RecaptchaValidationResult ();
    HttpWebRequest req = (HttpWebRequest) WebRequest.Create ("https://www.google.com/recaptcha/api/siteverify?secret=" + SecretKey + "&response=" + recaptchaResponse);
    using (WebResponse wResponse = req.GetResponse ())
    {
        using (StreamReader readStream = new StreamReader (wResponse.GetResponseStream ()))
        {
            string jsonResponse = readStream.ReadToEnd ();
            string errorCodesString = jsonResponse.Replace("error-codes", "");
            string[] errorCodes = errorCodesString.Split(" ");
            string errorMessages = "";
            foreach (string code in errorCodes)
            {
                if (code == "missing-input-response")
                    errorMessages += "The recaptcha response is missing; ";
                else if (code == "invalid-input-response")
                    errorMessages += "The recaptcha response is invalid; ";
            }
            JavaScriptSerializer js = new JavaScriptSerializer ();
            result = new RecaptchaValidationResult {ErrorMessages=errorMessages, Succeeded=jsonResponse.Contains("success")}; 
        }
    } 
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
950
0
Gpt3D_Clone950_0.cs 1 10
Gpt3D_Clone950_0.cs 11 29
----------------------------------------

private void btnClear_Click (object sender, EventArgs e) {
    for (byte i = 0; i < TextBoxes.Length; i ++) {
        if (this.Controls.ContainsKey ("txt" + TextBoxes [i])) {
            TextBox txtBox = this.Controls ["txt" + TextBoxes [i]] as TextBox;
            if (txtBox != null) {
                txtBox.Text = "";
            }
        }
    }
}
----------------------------------------

 private void btnClear_Click(object sender, EventArgs e)
{
    int i;
    for (i = 0; i < TextBoxes.Length; i++)
    {
        string key = "txt" + TextBoxes[i];
        if (this.Controls.ContainsKey(key))
        {
            TextBox txtBox = (TextBox)this.Controls[key];
            if (txtBox != null)
            {
                txtBox.Clear();
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
950
2
Gpt3D_Clone950_2.cs 1 10
Gpt3D_Clone950_2.cs 11 29
----------------------------------------

private void btnClear_Click (object sender, EventArgs e) {
    for (byte i = 0; i < TextBoxes.Length; i ++) {
        if (this.Controls.ContainsKey ("txt" + TextBoxes [i])) {
            TextBox txtBox = this.Controls ["txt" + TextBoxes [i]] as TextBox;
            if (txtBox != null) {
                txtBox.Text = "";
            }
        }
    }
}
----------------------------------------

private void btnClear_Click(object sender, EventArgs e) 
{ 
    int i; 
    for (i=0; i<TextBoxes.Length; ) 
    { 
        if (this.Controls.ContainsKey("txt" + TextBoxes[i])) 
        { 
            TextBox txtBox = this.Controls["txt" + TextBoxes[i]] as TextBox; 
            if (txtBox != null) 
            { 
                txtBox.Text = string.Empty; 
            } 
            i++; 
        } 
    } 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
950
3
Gpt3D_Clone950_3.cs 1 10
Gpt3D_Clone950_3.cs 11 46
----------------------------------------

private void btnClear_Click (object sender, EventArgs e) {
    for (byte i = 0; i < TextBoxes.Length; i ++) {
        if (this.Controls.ContainsKey ("txt" + TextBoxes [i])) {
            TextBox txtBox = this.Controls ["txt" + TextBoxes [i]] as TextBox;
            if (txtBox != null) {
                txtBox.Text = "";
            }
        }
    }
}
----------------------------------------

private void btnClear_Click(object sender, EventArgs e) 
{ 
    for (int i = 0; i < TextBoxes.Length; ) 
    { 
        string key = "txt" + TextBoxes[i]; 
        if (this.Controls.ContainsKey(key)) 
        { 
            TextBox txtBox = (TextBox) this.Controls[key]; 
            if (txtBox != null) 
            { 
                txtBox.Text=""; 
            } 
            i++; 
        } 
    } 
}   
private void btnClear_Click(object sender, EventArgs e)
{
    for (int i=0; i< TextBoxes.Length;)
    {
        if (this.Controls.ContainsKey("txt" + TextBoxes[i]))
        {
            TextBox txtBox = this.Controls["txt" + TextBoxes[i]] as TextBox;
            if (txtBox != null)
            {
                txtBox.ResetText();
            }
            i++;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
950
5
Gpt3D_Clone950_5.cs 1 10
Gpt3D_Clone950_5.cs 11 28
----------------------------------------

private void btnClear_Click (object sender, EventArgs e) {
    for (byte i = 0; i < TextBoxes.Length; i ++) {
        if (this.Controls.ContainsKey ("txt" + TextBoxes [i])) {
            TextBox txtBox = this.Controls ["txt" + TextBoxes [i]] as TextBox;
            if (txtBox != null) {
                txtBox.Text = "";
            }
        }
    }
}
----------------------------------------

private void btnClear_Click(object sender, EventArgs e)
{
    for (byte i = 0; i < TextBoxes.Length; )
    {
        if (this.Controls.ContainsKey("txt" + TextBoxes[i]))
        {
            TextBox txtBox = (TextBox)this.Controls["txt" + TextBoxes[i]];
            if (txtBox != null)
            {
                txtBox.Clear();
            }
            i++;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
950
7
Gpt3D_Clone950_7.cs 1 10
Gpt3D_Clone950_7.cs 11 27
----------------------------------------

private void btnClear_Click (object sender, EventArgs e) {
    for (byte i = 0; i < TextBoxes.Length; i ++) {
        if (this.Controls.ContainsKey ("txt" + TextBoxes [i])) {
            TextBox txtBox = this.Controls ["txt" + TextBoxes [i]] as TextBox;
            if (txtBox != null) {
                txtBox.Text = "";
            }
        }
    }
}
----------------------------------------

private void btnClear_Click(object sender, EventArgs e)
{
    foreach(string i in TextBoxes)
    {
        if (this.Controls.ContainsKey("txt" + i))
        {
            TextBox txtBox = this.Controls["txt" + i] as TextBox;
            if (txtBox != null)
            {
                txtBox.Text = "";
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
950
8
Gpt3D_Clone950_8.cs 1 10
Gpt3D_Clone950_8.cs 11 26
----------------------------------------

private void btnClear_Click (object sender, EventArgs e) {
    for (byte i = 0; i < TextBoxes.Length; i ++) {
        if (this.Controls.ContainsKey ("txt" + TextBoxes [i])) {
            TextBox txtBox = this.Controls ["txt" + TextBoxes [i]] as TextBox;
            if (txtBox != null) {
                txtBox.Text = "";
            }
        }
    }
}
----------------------------------------

  private void btnClear_Click(object sender, EventArgs e)
{
    foreach (string i in TextBoxes)
    {
        if (this.Controls.ContainsKey("txt" + i))
        {
            TextBox txtBox = this.Controls["txt" + i] as TextBox;
            if (txtBox != null)
            {
                txtBox.Text = "";
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
950
9
Gpt3D_Clone950_9.cs 1 10
Gpt3D_Clone950_9.cs 11 27
----------------------------------------

private void btnClear_Click (object sender, EventArgs e) {
    for (byte i = 0; i < TextBoxes.Length; i ++) {
        if (this.Controls.ContainsKey ("txt" + TextBoxes [i])) {
            TextBox txtBox = this.Controls ["txt" + TextBoxes [i]] as TextBox;
            if (txtBox != null) {
                txtBox.Text = "";
            }
        }
    }
}
----------------------------------------

private void btnClear_Click(object sender, EventArgs e)
{
    for (int i = 0; i < TextBoxes.Length; i++)
    {
        if (this.Controls.ContainsKey("txt" + TextBoxes[i]))
        {
            TextBox txtBox = (TextBox)this.Controls["txt" + TextBoxes[i]];
            if (txtBox != null)
            {
                txtBox.Text = string.Empty;
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
957
0
Gpt3D_Clone957_0.cs 1 18
Gpt3D_Clone957_0.cs 19 51
----------------------------------------

protected static Dictionary < DateTime, String > getDateRange (String lowerDate, String higherDate, String frequency) {
    DateTime startDate, endDate;
    startDate = Convert.ToDateTime (lowerDate);
    endDate = Convert.ToDateTime (higherDate);
    Dictionary < DateTime, String > returnDict = new Dictionary < DateTime, String > ();
    while (frequency.Equals ("weekly") ? (startDate.AddDays (7) <= endDate) : (startDate.AddMonths (1) <= endDate)) {
        if (frequency.Equals ("weekly")) {
            returnDict.Add (startDate, startDate + "-" + startDate.AddDays (7));
            startDate = startDate.AddDays (8);
        }
        if (frequency.Equals ("monthly")) {
            returnDict.Add (startDate, startDate + "-" + startDate.AddMonths (1));
            startDate = startDate.AddMonths (1).AddDays (1);
        }
    }
    returnDict.Add (startDate, startDate + "-" + endDate);
    return returnDict;
}
----------------------------------------

 protected static Dictionary < DateTime, String > getDateRange (String lowerDate, String higherDate, String frequency) {
    DateTime startDate, endDate; 
    startDate = Convert.ToDateTime (lowerDate);
    endDate = Convert.ToDateTime (higherDate);
    
    Dictionary < DateTime, String > returnDict = new Dictionary < DateTime, String > ();
    DateTime currentStart;
    currentStart = startDate;
    int diff;
    
    while (startDate < endDate) {
      if (frequency.Equals("weekly")) {
        diff = (int) (endDate - startDate).TotalDays;
        if (diff <= 7) {
          returnDict.Add(startDate, startDate + "-" + endDate);
          return returnDict;
        } else {
          returnDict.Add(currentStart, currentStart + "-" + startDate.AddDays(7));
          startDate = startDate.AddDays(7);
          currentStart = startDate.AddDays(1);
        }
      } else if (frequency.Equals("monthly")) {
        returnDict.Add(currentStart, currentStart + "-" + startDate.AddMonths(1));
        startDate = startDate.AddMonths(1);
        currentStart = startDate.AddDays(1);
      } 
    }
    
    returnDict.Add(currentStart, currentStart + "-" + endDate);
    return returnDict;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
959
0
Gpt3D_Clone959_0.cs 1 16
Gpt3D_Clone959_0.cs 17 48
----------------------------------------

private void SaveFileToDatabase (string filePath) {
    String strConnection = "Data Source=.\\SQLEXPRESS;AttachDbFilename='C:\\Users\\Hemant\\documents\\visual studio 2010\\Projects\\CRMdata\\CRMdata\\App_Data\\Database1.mdf';Integrated Security=True;User Instance=True";
    String excelConnString = String.Format ("Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};Extended Properties=\"Excel 12.0\"", filePath);
    using (OleDbConnection excelConnection = new OleDbConnection (excelConnString))
    {
        using (OleDbCommand cmd = new OleDbCommand ("Select [ID],[Name],[Designation] from [Sheet1$]", excelConnection))
        {
            excelConnection.Open ();
            using (OleDbDataReader dReader = cmd.ExecuteReader ())
            {
                using (SqlBulkCopy sqlBulk = new SqlBulkCopy (strConnection))
                {
                    sqlBulk.DestinationTableName = "Excel_table";
                    sqlBulk.WriteToServer (dReader);
                }}}}
}
----------------------------------------

 private void SaveFileToDatabase (string filePath) {
    string filePath = @"C:\SomeFolder\MyExcel.xlsx";
    string xConnString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + filePath + ";Extended Properties='Excel 12.0;HDR=YES;';";
    string sConnString = "Data Source=.\\SQLEXPRESS;AttachDbFilename='C:\\Users\\Hemant\\documents\\visual studio 2010\\Projects\\CRMdata\\CRMdata\\App_Data\\Database1.mdf';Integrated Security=True;User Instance=True";
    using (OleDbConnection excConn = new OleDbConnection(xConnString))
    {
        excConn.Open();
        OleDbDataAdapter myDataAdaptor = new OleDbDataAdapter("Select [ID],[Name],[Designation] from [Sheet1$]", excConn);
        DataSet myDataSet = new DataSet();
        myDataAdaptor.Fill(myDataSet);
        using (SqlConnection dbConn = new SqlConnection(sConnString))
        {
            dbConn.Open();
            SqlCommand cmd = new SqlCommand();
            cmd.Connection = dbConn;
            cmd.CommandText = "INSERT INTO Excel_table([ID],[Name],[Designation]) VALUES(@ID, @Name, @Designation)";
            cmd.Parameters.Add("@ID", SqlDbType.Int);
            cmd.Parameters.Add("@Name", SqlDbType.NVarChar);
            cmd.Parameters.Add("@Designation", SqlDbType.NVarChar);
            foreach (DataRow dr in myDataSet.Tables[0].Rows)
            {
                cmd.Parameters["@ID"].Value = dr["ID"];
                cmd.Parameters["@Name"].Value = dr["Name"];
                cmd.Parameters["@Designation"].Value = dr["Designation"];
                cmd.ExecuteNonQuery();
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
959
1
Gpt3D_Clone959_1.cs 1 16
Gpt3D_Clone959_1.cs 17 41
----------------------------------------

private void SaveFileToDatabase (string filePath) {
    String strConnection = "Data Source=.\\SQLEXPRESS;AttachDbFilename='C:\\Users\\Hemant\\documents\\visual studio 2010\\Projects\\CRMdata\\CRMdata\\App_Data\\Database1.mdf';Integrated Security=True;User Instance=True";
    String excelConnString = String.Format ("Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};Extended Properties=\"Excel 12.0\"", filePath);
    using (OleDbConnection excelConnection = new OleDbConnection (excelConnString))
    {
        using (OleDbCommand cmd = new OleDbCommand ("Select [ID],[Name],[Designation] from [Sheet1$]", excelConnection))
        {
            excelConnection.Open ();
            using (OleDbDataReader dReader = cmd.ExecuteReader ())
            {
                using (SqlBulkCopy sqlBulk = new SqlBulkCopy (strConnection))
                {
                    sqlBulk.DestinationTableName = "Excel_table";
                    sqlBulk.WriteToServer (dReader);
                }}}}
}
----------------------------------------

 private void SaveFileToDatabase (string filePath) {
      string filePath = @"C:\SomeFolder\MyExcel.xlsx";
    string xConnString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + filePath + ";Extended Properties='Excel 12.0;HDR=YES;';";
    string sConnString = "Data Source=.\\SQLEXPRESS;AttachDbFilename='C:\\Users\\Hemant\\documents\\visual studio 2010\\Projects\\CRMdata\\CRMdata\\App_Data\\Database1.mdf';Integrated Security=True;User Instance=True";
    using (OleDbConnection excConn = new OleDbConnection(xConnString))
    {
        excConn.Open();
        var command = excConn.CreateCommand();
        command.CommandText = "SELECT [ID],[Name],[Designation] from [Sheet1$]";
        using (var reader = command.ExecuteReader())
        {
            using (SqlConnection dbConnection = new SqlConnection(sConnString))
            {
                dbConnection.Open();
                using (var bulkCopy = new SqlBulkCopy(dbConnection))
                {
                    bulkCopy.DestinationTableName = "Excel_table";
                    bulkCopy.WriteToServer(reader);
                }
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
959
3
Gpt3D_Clone959_3.cs 1 16
Gpt3D_Clone959_3.cs 17 52
----------------------------------------

private void SaveFileToDatabase (string filePath) {
    String strConnection = "Data Source=.\\SQLEXPRESS;AttachDbFilename='C:\\Users\\Hemant\\documents\\visual studio 2010\\Projects\\CRMdata\\CRMdata\\App_Data\\Database1.mdf';Integrated Security=True;User Instance=True";
    String excelConnString = String.Format ("Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};Extended Properties=\"Excel 12.0\"", filePath);
    using (OleDbConnection excelConnection = new OleDbConnection (excelConnString))
    {
        using (OleDbCommand cmd = new OleDbCommand ("Select [ID],[Name],[Designation] from [Sheet1$]", excelConnection))
        {
            excelConnection.Open ();
            using (OleDbDataReader dReader = cmd.ExecuteReader ())
            {
                using (SqlBulkCopy sqlBulk = new SqlBulkCopy (strConnection))
                {
                    sqlBulk.DestinationTableName = "Excel_table";
                    sqlBulk.WriteToServer (dReader);
                }}}}
}
----------------------------------------

 private void SaveFileToDatabase (string filePath) {
     String strConnection = "Data Source=.\\SQLEXPRESS;AttachDbFilename='C:\\Users\\Hemant\\documents\\visual studio 2010\\Projects\\CRMdata\\CRMdata\\App_Data\\Database1.mdf';Integrated Security=True;User Instance=True";
    String excelConnString = String.Format ("Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};Extended Properties=\"Excel 12.0\"", filePath);
    using (OleDbConnection excelConnection = new OleDbConnection (excelConnString))
    {
        // Create an Adaptor and DataSet
        OleDbDataAdapter myDataAdaptor = new OleDbDataAdapter("Select [ID],[Name],[Designation] from [Sheet1$]", excelConnection);
        DataSet myDataSet = new DataSet();
        // Populate the DataSet with the spreadsheet data
        myDataAdaptor.Fill(myDataSet);
        // Create a connection to the database
        using (SqlConnection dbConnection = new SqlConnection(strConnection))
        {
            // Open the connection
            dbConnection.Open();
            // Create a command which will be used to insert the data
             using (SqlCommand cmd = new SqlCommand("INSERT INTO Excel_table([ID],[Name],[Designation]) SELECT [ID], [Name], [Designation] FROM @myDataSet", dbConnection))
            {
                // Create data adapter
                SqlDataAdapter sqlAdaptor = new SqlDataAdapter();
                // Add the parameter to the command's parameter collection
                cmd.Parameters.Add("@myDataSet", SqlDbType.Structured).Value = myDataSet;
                // Execute the insert
                sqlAdaptor.InsertCommand = cmd;
                sqlAdaptor.InsertCommand.ExecuteNonQuery();
            }
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
959
4
Gpt3D_Clone959_4.cs 1 16
Gpt3D_Clone959_4.cs 17 36
----------------------------------------

private void SaveFileToDatabase (string filePath) {
    String strConnection = "Data Source=.\\SQLEXPRESS;AttachDbFilename='C:\\Users\\Hemant\\documents\\visual studio 2010\\Projects\\CRMdata\\CRMdata\\App_Data\\Database1.mdf';Integrated Security=True;User Instance=True";
    String excelConnString = String.Format ("Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};Extended Properties=\"Excel 12.0\"", filePath);
    using (OleDbConnection excelConnection = new OleDbConnection (excelConnString))
    {
        using (OleDbCommand cmd = new OleDbCommand ("Select [ID],[Name],[Designation] from [Sheet1$]", excelConnection))
        {
            excelConnection.Open ();
            using (OleDbDataReader dReader = cmd.ExecuteReader ())
            {
                using (SqlBulkCopy sqlBulk = new SqlBulkCopy (strConnection))
                {
                    sqlBulk.DestinationTableName = "Excel_table";
                    sqlBulk.WriteToServer (dReader);
                }}}}
}
----------------------------------------

 private void SaveFileToDatabase (string filePath) {
     string filePath = @"C:\SomeFolder\MyExcel.xlsx";
    string xConnString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + filePath + ";Extended Properties='Excel 12.0;HDR=YES;';";
    string sConnString = "Data Source=.\\SQLEXPRESS;AttachDbFilename='C:\\Users\\Hemant\\documents\\visual studio 2010\\Projects\\CRMdata\\CRMdata\\App_Data\\Database1.mdf';Integrated Security=True;User Instance=True";
    using (OleDbConnection excConn = new OleDbConnection(xConnString))
    {
        excConn.Open();
        string insertQuery = "INSERT INTO Excel_table([ID],[Name],[Designation]) SELECT [ID],[Name],[Designation] from [Sheet1$]";
        OleDbCommand cmd = new OleDbCommand(insertQuery, excConn);
        cmd.CommandType = CommandType.Text;
        using (SqlConnection dbConn = new SqlConnection(sConnString))
        {
            dbConn.Open();
            cmd.Connection = dbConn;
            int recordsAffected = cmd.ExecuteNonQuery();
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
959
6
Gpt3D_Clone959_6.cs 1 16
Gpt3D_Clone959_6.cs 17 29
----------------------------------------

private void SaveFileToDatabase (string filePath) {
    String strConnection = "Data Source=.\\SQLEXPRESS;AttachDbFilename='C:\\Users\\Hemant\\documents\\visual studio 2010\\Projects\\CRMdata\\CRMdata\\App_Data\\Database1.mdf';Integrated Security=True;User Instance=True";
    String excelConnString = String.Format ("Provider=Microsoft.ACE.OLEDB.12.0;Data Source={0};Extended Properties=\"Excel 12.0\"", filePath);
    using (OleDbConnection excelConnection = new OleDbConnection (excelConnString))
    {
        using (OleDbCommand cmd = new OleDbCommand ("Select [ID],[Name],[Designation] from [Sheet1$]", excelConnection))
        {
            excelConnection.Open ();
            using (OleDbDataReader dReader = cmd.ExecuteReader ())
            {
                using (SqlBulkCopy sqlBulk = new SqlBulkCopy (strConnection))
                {
                    sqlBulk.DestinationTableName = "Excel_table";
                    sqlBulk.WriteToServer (dReader);
                }}}}
}
----------------------------------------

 private void SaveFileToDatabase (string filePath) {
      String connString =  "Data Source=.\\SQLEXPRESS;AttachDbFilename='C:\\Users\\Hemant\\documents\\visual studio 2010\\Projects\\CRMdata\\CRMdata\\App_Data\\Database1.mdf';Integrated Security=True;User Instance=True";
    using (OleDbConnection excelConn = new OleDbConnection("Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + filePath + ";Extended Properties=\"Excel 12.0;HDR=YES;\""))
    {
      excelConn.Open();
      string insertQuery = "INSERT INTO Excel_table([ID],[Name],[Designation]) SELECT [ID],[Name],[Designation] from [Sheet1$]";
      OleDbCommand cmd = new OleDbCommand(insertQuery, excelConn);
      cmd.CommandType = CommandType.Text;
      int recordsAffected = cmd.ExecuteNonQuery();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
95
0
Gpt3D_Clone95_0.cs 1 12
Gpt3D_Clone95_0.cs 13 49
----------------------------------------

public static bool Validate (string encodedResponse) {
    if (string.IsNullOrEmpty (encodedResponse))
        return false;
    var client = new System.Net.WebClient ();
    var secret = ConfigurationManager.AppSettings ["Google.ReCaptcha.Secret"];
    if (string.IsNullOrEmpty (secret))
        return false;
    var googleReply = client.DownloadString (string.Format ("https://www.google.com/recaptcha/api/siteverify?secret={0}&response={1}", secret, encodedResponse));
    var serializer = new System.Web.Script.Serialization.JavaScriptSerializer ();
    var reCaptcha = serializer.Deserialize < ReCaptcha > (googleReply);
    return reCaptcha.Success;
}
----------------------------------------

 public static bool Validate (string encodedResponse)
{
    if (string.IsNullOrWhiteSpace(encodedResponse))
        return false;
    var secret = ConfigurationManager.AppSettings["Google.ReCaptcha.Secret"];
    if (string.IsNullOrEmpty(secret))
        return false;
    var responseString = "";   
    try
    {
        Uri requestUri = new Uri(string.Format("https://www.google.com/recaptcha/api/siteverify?secret={0}&response={1}", secret, encodedResponse));
        HttpWebRequest request = (HttpWebRequest) WebRequest.Create(requestUri);
        request.Method = "GET";
        using (HttpWebResponse response = (HttpWebResponse) request.GetResponse())
        {
            if (response.StatusCode == HttpStatusCode.OK)
            {
                using (Stream stream = response.GetResponseStream())
                {
                    using (StreamReader reader = new StreamReader(stream))
                    {
                        JavaScriptSerializer js = new JavaScriptSerializer();
                        ReCaptcha reCaptcha = js.Deserialize<ReCaptcha>(reader.ReadToEnd());
                        return reCaptcha.Success;
                    }
                }
            }
        }
    }
    catch
    {
        return false;
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
95
1
Gpt3D_Clone95_1.cs 1 12
Gpt3D_Clone95_1.cs 13 44
----------------------------------------

public static bool Validate (string encodedResponse) {
    if (string.IsNullOrEmpty (encodedResponse))
        return false;
    var client = new System.Net.WebClient ();
    var secret = ConfigurationManager.AppSettings ["Google.ReCaptcha.Secret"];
    if (string.IsNullOrEmpty (secret))
        return false;
    var googleReply = client.DownloadString (string.Format ("https://www.google.com/recaptcha/api/siteverify?secret={0}&response={1}", secret, encodedResponse));
    var serializer = new System.Web.Script.Serialization.JavaScriptSerializer ();
    var reCaptcha = serializer.Deserialize < ReCaptcha > (googleReply);
    return reCaptcha.Success;
}
----------------------------------------

 public static bool Validate (string encodedResponse) 
{
    if (string.IsNullOrWhiteSpace(encodedResponse))
        return false;
    HttpWebRequest request = (HttpWebRequest)WebRequest.Create("https://www.google.com/recaptcha/api/siteverify");
    request.Method = "POST";
    request.ContentType = "application/x-www-form-urlencoded";
    string secret = ConfigurationManager.AppSettings["Google.ReCaptcha.Secret"];
    if (String.IsNullOrEmpty(secret))
        return false;
    string captchaData = string.Format("secret={0}{1}&response={2}", secret, Environment.NewLine, encodedResponse);
    ASCIIEncoding encoding = new ASCIIEncoding();
    byte[] captchaBytes = encoding.GetBytes(captchaData);
    request.ContentLength = captchaBytes.Length;
    request.GetRequestStream().Write(captchaBytes, 0, captchaBytes.Length);
    HttpWebResponse response = (HttpWebResponse)request.GetResponse();
    StreamReader reader = new StreamReader(response.GetResponseStream(), Encoding.UTF8);
    string responseString = reader.ReadToEnd();
    reader.Close();
    response.Close();
    JavaScriptSerializer js = new JavaScriptSerializer();
    ReCaptcha reCaptcha = js.Deserialize<ReCaptcha>(responseString);
    return reCaptcha.Success;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
95
2
Gpt3D_Clone95_2.cs 1 12
Gpt3D_Clone95_2.cs 13 42
----------------------------------------

public static bool Validate (string encodedResponse) {
    if (string.IsNullOrEmpty (encodedResponse))
        return false;
    var client = new System.Net.WebClient ();
    var secret = ConfigurationManager.AppSettings ["Google.ReCaptcha.Secret"];
    if (string.IsNullOrEmpty (secret))
        return false;
    var googleReply = client.DownloadString (string.Format ("https://www.google.com/recaptcha/api/siteverify?secret={0}&response={1}", secret, encodedResponse));
    var serializer = new System.Web.Script.Serialization.JavaScriptSerializer ();
    var reCaptcha = serializer.Deserialize < ReCaptcha > (googleReply);
    return reCaptcha.Success;
}
----------------------------------------

 public static bool Validate(string encodedResponse)
{
    if (string.IsNullOrWhiteSpace(encodedResponse))
        return false;
    var secret = ConfigurationManager.AppSettings["Google.ReCaptcha.Secret"];
    if (string.IsNullOrEmpty(secret))
        return false;
    var responseString = "";   
    try
    {
        var httpWebRequest = (HttpWebRequest) WebRequest.Create($"https://www.google.com/recaptcha/api/siteverify?secret={secret}&response={encodedResponse}");
        httpWebRequest.ContentType = "application/json";
        httpWebRequest.Method = "GET";
        var httpResponse = (HttpWebResponse) httpWebRequest.GetResponse();
        using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
        {
            responseString = streamReader.ReadToEnd();
        }
        JavaScriptSerializer js = new JavaScriptSerializer();
        ReCaptcha reCaptcha = js.Deserialize<ReCaptcha>(responseString);
        return reCaptcha.Success;
    }
    catch
    {
        return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
95
3
Gpt3D_Clone95_3.cs 1 12
Gpt3D_Clone95_3.cs 13 41
----------------------------------------

public static bool Validate (string encodedResponse) {
    if (string.IsNullOrEmpty (encodedResponse))
        return false;
    var client = new System.Net.WebClient ();
    var secret = ConfigurationManager.AppSettings ["Google.ReCaptcha.Secret"];
    if (string.IsNullOrEmpty (secret))
        return false;
    var googleReply = client.DownloadString (string.Format ("https://www.google.com/recaptcha/api/siteverify?secret={0}&response={1}", secret, encodedResponse));
    var serializer = new System.Web.Script.Serialization.JavaScriptSerializer ();
    var reCaptcha = serializer.Deserialize < ReCaptcha > (googleReply);
    return reCaptcha.Success;
}
----------------------------------------

 public static bool Validate (string encodedResponse)
{
    if(String.IsNullOrEmpty(encodedResponse))
        return false;
    var secret = ConfigurationManager.AppSettings["Google.ReCaptcha.Secret"];
    if (String.IsNullOrEmpty(secret))
        return false;
    Uri address = new Uri(string.Format("https://www.google.com/recaptcha/api/siteverify?secret={0}&response={1}", secret, encodedResponse));
    HttpWebRequest request = WebRequest.Create(address) as HttpWebRequest;
    request.Method = "GET";
    request.ContentLength = 0;
    request.ContentType = "application/x-www-form-urlencoded";
    using (HttpWebResponse response = request.GetResponse() as HttpWebResponse)
    {
        if (response.StatusCode != HttpStatusCode.OK)
            return false;
        using (StreamReader reader = new StreamReader(response.GetResponseStream()))
        {
            JavaScriptSerializer serializer = new JavaScriptSerializer();
            ReCaptcha reCaptcha = serializer.Deserialize<ReCaptcha>(reader.ReadToEnd());
            return reCaptcha.Success;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
95
4
Gpt3D_Clone95_4.cs 1 12
Gpt3D_Clone95_4.cs 13 44
----------------------------------------

public static bool Validate (string encodedResponse) {
    if (string.IsNullOrEmpty (encodedResponse))
        return false;
    var client = new System.Net.WebClient ();
    var secret = ConfigurationManager.AppSettings ["Google.ReCaptcha.Secret"];
    if (string.IsNullOrEmpty (secret))
        return false;
    var googleReply = client.DownloadString (string.Format ("https://www.google.com/recaptcha/api/siteverify?secret={0}&response={1}", secret, encodedResponse));
    var serializer = new System.Web.Script.Serialization.JavaScriptSerializer ();
    var reCaptcha = serializer.Deserialize < ReCaptcha > (googleReply);
    return reCaptcha.Success;
}
----------------------------------------

 public static bool Validate (string encodedResponse) 
{
    if (string.IsNullOrWhiteSpace(encodedResponse))
        return false;
    var secret = ConfigurationManager.AppSettings["Google.ReCaptcha.Secret"];
    if (string.IsNullOrEmpty(secret))
        return false;
    var responseString = "";   
    try
    {
        HttpClient client = new HttpClient();
        string uri = string.Format("https://www.google.com/recaptcha/api/siteverify?secret={0}&response={1}", secret, encodedResponse);
        client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
        HttpResponseMessage response = client.GetAsync(uri).Result;
        if (response.IsSuccessStatusCode)
        {
            responseString = response.Content.ReadAsStringAsync().Result;
            JavaScriptSerializer js = new JavaScriptSerializer();
            ReCaptcha reCaptcha = js.Deserialize<ReCaptcha>(responseString);
            return reCaptcha.Success;    
        }
    }
    catch
    {
        return false;
    }
    return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
95
5
Gpt3D_Clone95_5.cs 1 12
Gpt3D_Clone95_5.cs 13 38
----------------------------------------

public static bool Validate (string encodedResponse) {
    if (string.IsNullOrEmpty (encodedResponse))
        return false;
    var client = new System.Net.WebClient ();
    var secret = ConfigurationManager.AppSettings ["Google.ReCaptcha.Secret"];
    if (string.IsNullOrEmpty (secret))
        return false;
    var googleReply = client.DownloadString (string.Format ("https://www.google.com/recaptcha/api/siteverify?secret={0}&response={1}", secret, encodedResponse));
    var serializer = new System.Web.Script.Serialization.JavaScriptSerializer ();
    var reCaptcha = serializer.Deserialize < ReCaptcha > (googleReply);
    return reCaptcha.Success;
}
----------------------------------------

 public static bool Validate(string encodedResponse)
{
    if (string.IsNullOrWhiteSpace(encodedResponse))
        return false;
    string secret = ConfigurationManager.AppSettings["Google.ReCaptcha.Secret"];
    if (string.IsNullOrEmpty(secret))
        return false;
    string jsonStr = $"{{\"secret\": \"{secret}\", \"response\": \"{encodedResponse}\"}}";
    using (var httpClient = new HttpClient())
    {
        using (StringContent content = new StringContent(jsonStr, Encoding.UTF8, "application/json"))
        {
            var response = httpClient.PostAsync("https://www.google.com/recaptcha/api/siteverify", content).Result;
            if (!response.IsSuccessStatusCode)
                return false;
            string responseString = response.Content.ReadAsStringAsync().Result;
            JavaScriptSerializer js = new JavaScriptSerializer();
            ReCaptcha reCaptcha = js.Deserialize<ReCaptcha>(responseString);
            return reCaptcha.Success;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
95
6
Gpt3D_Clone95_6.cs 1 12
Gpt3D_Clone95_6.cs 13 39
----------------------------------------

public static bool Validate (string encodedResponse) {
    if (string.IsNullOrEmpty (encodedResponse))
        return false;
    var client = new System.Net.WebClient ();
    var secret = ConfigurationManager.AppSettings ["Google.ReCaptcha.Secret"];
    if (string.IsNullOrEmpty (secret))
        return false;
    var googleReply = client.DownloadString (string.Format ("https://www.google.com/recaptcha/api/siteverify?secret={0}&response={1}", secret, encodedResponse));
    var serializer = new System.Web.Script.Serialization.JavaScriptSerializer ();
    var reCaptcha = serializer.Deserialize < ReCaptcha > (googleReply);
    return reCaptcha.Success;
}
----------------------------------------

 public static bool Validate(string encodedResponse)
{
    if (string.IsNullOrWhiteSpace(encodedResponse))
        return false;
    string secret = ConfigurationManager.AppSettings["Google.ReCaptcha.Secret"];
    if (string.IsNullOrEmpty(secret))
        return false;
    using (var httpClient = new HttpClient())
    {
        using (HttpContent content = new FormUrlEncodedContent(new[] 
        {
            new KeyValuePair<string, string>("secret", secret),
            new KeyValuePair<string, string>("response", encodedResponse),
        }))
        {
            var response = httpClient.PostAsync("https://www.google.com/recaptcha/api/siteverify", content).Result;
            if (!response.IsSuccessStatusCode)
                return false;
            string responseString = response.Content.ReadAsStringAsync().Result;
            JavaScriptSerializer js = new JavaScriptSerializer();
            ReCaptcha reCaptcha = js.Deserialize<ReCaptcha>(responseString);
            return reCaptcha.Success;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
95
7
Gpt3D_Clone95_7.cs 1 12
Gpt3D_Clone95_7.cs 13 37
----------------------------------------

public static bool Validate (string encodedResponse) {
    if (string.IsNullOrEmpty (encodedResponse))
        return false;
    var client = new System.Net.WebClient ();
    var secret = ConfigurationManager.AppSettings ["Google.ReCaptcha.Secret"];
    if (string.IsNullOrEmpty (secret))
        return false;
    var googleReply = client.DownloadString (string.Format ("https://www.google.com/recaptcha/api/siteverify?secret={0}&response={1}", secret, encodedResponse));
    var serializer = new System.Web.Script.Serialization.JavaScriptSerializer ();
    var reCaptcha = serializer.Deserialize < ReCaptcha > (googleReply);
    return reCaptcha.Success;
}
----------------------------------------

 public static bool Validate(string encodedResponse)
{
    if (string.IsNullOrWhiteSpace(encodedResponse))
        return false;
    var secret = ConfigurationManager.AppSettings["Google.ReCaptcha.Secret"];
    if (string.IsNullOrEmpty(secret))
        return false;
    try
    {
        string url = string.Format("https://www.google.com/recaptcha/api/siteverify?secret={0}&response={1}", secret, encodedResponse);
        using (WebClient wc = new WebClient())
        {
            string responseString = wc.DownloadString(url);
            JavaScriptSerializer js = new JavaScriptSerializer();
            ReCaptcha reCaptcha = js.Deserialize<ReCaptcha>(responseString);
            return reCaptcha.Success;
        }
    }
    catch
    {
        return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
95
8
Gpt3D_Clone95_8.cs 1 12
Gpt3D_Clone95_8.cs 13 36
----------------------------------------

public static bool Validate (string encodedResponse) {
    if (string.IsNullOrEmpty (encodedResponse))
        return false;
    var client = new System.Net.WebClient ();
    var secret = ConfigurationManager.AppSettings ["Google.ReCaptcha.Secret"];
    if (string.IsNullOrEmpty (secret))
        return false;
    var googleReply = client.DownloadString (string.Format ("https://www.google.com/recaptcha/api/siteverify?secret={0}&response={1}", secret, encodedResponse));
    var serializer = new System.Web.Script.Serialization.JavaScriptSerializer ();
    var reCaptcha = serializer.Deserialize < ReCaptcha > (googleReply);
    return reCaptcha.Success;
}
----------------------------------------

public static bool Validate (string encodedResponse)
{
    if (string.IsNullOrWhiteSpace(encodedResponse))
        return false;
    var secret = ConfigurationManager.AppSettings["Google.ReCaptcha.Secret"];
    if (string.IsNullOrEmpty(secret))
        return false;
    HttpWebRequest request = WebRequest.CreateHttp($"https://www.google.com/recaptcha/api/siteverify?secret={secret}&response={encodedResponse}");
    request.Method = "GET";
    HttpWebResponse response = (HttpWebResponse) request.GetResponse();
    StreamReader reader = new StreamReader(response.GetResponseStream(), Encoding.UTF8);
    string responseString = reader.ReadToEnd();
    reader.Close();
    response.Close();
    JavaScriptSerializer serializador = new JavaScriptSerializer();
    ReCaptcha recaptcha = serializador.Deserialize<ReCaptcha>(responseString);
    return recaptcha.Success;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
95
9
Gpt3D_Clone95_9.cs 1 12
Gpt3D_Clone95_9.cs 13 35
----------------------------------------

public static bool Validate (string encodedResponse) {
    if (string.IsNullOrEmpty (encodedResponse))
        return false;
    var client = new System.Net.WebClient ();
    var secret = ConfigurationManager.AppSettings ["Google.ReCaptcha.Secret"];
    if (string.IsNullOrEmpty (secret))
        return false;
    var googleReply = client.DownloadString (string.Format ("https://www.google.com/recaptcha/api/siteverify?secret={0}&response={1}", secret, encodedResponse));
    var serializer = new System.Web.Script.Serialization.JavaScriptSerializer ();
    var reCaptcha = serializer.Deserialize < ReCaptcha > (googleReply);
    return reCaptcha.Success;
}
----------------------------------------

 public static bool Validate(string encodedResponse)
{
    if (string.IsNullOrWhiteSpace(encodedResponse))
        return false;
    string secret = ConfigurationManager.AppSettings["Google.ReCaptcha.Secret"];
    if (string.IsNullOrEmpty(secret))
        return false;
    HttpWebRequest request = (HttpWebRequest)WebRequest.Create($"https://www.google.com/recaptcha/api/siteverify?secret={secret}&response={encodedResponse}");
    request.Method = "GET";
    using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())
    {
        StreamReader streamReader = new StreamReader(response.GetResponseStream(), Encoding.UTF8);
        string responseString = streamReader.ReadToEnd();
        JavaScriptSerializer js = new JavaScriptSerializer();
        ReCaptcha reCaptcha = js.Deserialize<ReCaptcha>(responseString);
        return reCaptcha.Success;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
962
0
Gpt3D_Clone962_0.cs 1 17
Gpt3D_Clone962_0.cs 18 33
----------------------------------------

public static long BinomCoefficient (long n, long k) {
    if (k > n) {
        return 0;
    }
    if (n == k) {
        return 1;
    }
    if (k > n - k) {
        k = n - k;
    }
    long c = 1;
    for (long i = 1; i <= k; i ++) {
        c *= n --;
        c /= i;
    }
    return c;
}
----------------------------------------

 public static long BinomCoefficient (long n, long k) {
    if (n == k || k == 0)
        return 1;
    if (k == 1) 
        return n;
    if (k > n - k) 
        k = n - k;
    long num = 1, denom = 1;
    for (long i = 1; i <= k; ++i) {
        num *= (n - i + 1);
        denom *= i;
    }
    return num/denom;
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
962
2
Gpt3D_Clone962_2.cs 1 17
Gpt3D_Clone962_2.cs 18 31
----------------------------------------

public static long BinomCoefficient (long n, long k) {
    if (k > n) {
        return 0;
    }
    if (n == k) {
        return 1;
    }
    if (k > n - k) {
        k = n - k;
    }
    long c = 1;
    for (long i = 1; i <= k; i ++) {
        c *= n --;
        c /= i;
    }
    return c;
}
----------------------------------------

 public static long BinomCoefficient (long n, long k) {
    if (k == 0 || k ==n) 
        return 1;
    if (k == 1) 
        return n;
    if (k > n - k) 
        k = n - k;
    long cnk = 1; 
    for (int i = 0; i < k; i++)
        cnk = cnk * (n - i) / (i + 1);
    return cnk;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
963
0
Gpt3D_Clone963_0.cs 1 12
Gpt3D_Clone963_0.cs 13 41
----------------------------------------

public static byte [] ReadFully (Stream input) {
    byte [] buffer = new byte [16 * 1024];
    input.Position = 0;
    using (MemoryStream ms = new MemoryStream ())
    {
        int read;
        while ((read = input.Read (buffer, 0, buffer.Length)) > 0) {
            ms.Write (buffer, 0, read);
        }
        return ms.ToArray ();
    }
}
----------------------------------------

 public static byte [] ReadFully (Stream input)
    { 
        int bufferSize = 16 * 1024;
        byte[] buffer = new byte[bufferSize];
        int totalBytesRead = 0;
        List<byte> readBytes = new List<byte>();
        using (MemoryStream memoryStream = new MemoryStream())
        {
            int bytesRead;
            while((bytesRead = input.Read(buffer, totalBytesRead, bufferSize-totalBytesRead)) > 0)
            { 
                totalBytesRead += bytesRead;
                if (totalBytesRead == bufferSize)
                { 
                    for (int i=0;i< bufferSize;i++)
                        readBytes.Add(buffer[i]);
                    totalBytesRead = 0;
                }
            } 
            if (totalBytesRead > 0)
            { 
                for(int i = 0;i<totalBytesRead;i++)
                    readBytes.Add(buffer[i]);
            } 
        } 
    return readBytes.ToArray();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
963
1
Gpt3D_Clone963_1.cs 1 12
Gpt3D_Clone963_1.cs 13 42
----------------------------------------

public static byte [] ReadFully (Stream input) {
    byte [] buffer = new byte [16 * 1024];
    input.Position = 0;
    using (MemoryStream ms = new MemoryStream ())
    {
        int read;
        while ((read = input.Read (buffer, 0, buffer.Length)) > 0) {
            ms.Write (buffer, 0, read);
        }
        return ms.ToArray ();
    }
}
----------------------------------------

 public static byte [] ReadFully (Stream input)
    { 
      int bufferSize = 16 * 1024;
      byte[] buffer = new byte[bufferSize];
      byte[] readBuffer;
      int totalBytesRead = 0;
      using (MemoryStream memoryStream = new MemoryStream())
      {
        int bytesRead;
        while((bytesRead = input.Read(buffer, totalBytesRead, bufferSize-totalBytesRead)) > 0)
        { 
          totalBytesRead += bytesRead;
          if (totalBytesRead == bufferSize)
          { 
             memoryStream.Write(buffer, 0, bufferSize);
             totalBytesRead = 0;
          }
        } 
        if (totalBytesRead > 0)
        { 
          memoryStream.Write(buffer, 0, totalBytesRead);
        } 
        readBuffer = memoryStream.ToArray();
      } 
      return readBuffer;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
963
2
Gpt3D_Clone963_2.cs 1 12
Gpt3D_Clone963_2.cs 13 45
----------------------------------------

public static byte [] ReadFully (Stream input) {
    byte [] buffer = new byte [16 * 1024];
    input.Position = 0;
    using (MemoryStream ms = new MemoryStream ())
    {
        int read;
        while ((read = input.Read (buffer, 0, buffer.Length)) > 0) {
            ms.Write (buffer, 0, read);
        }
        return ms.ToArray ();
    }
}
----------------------------------------

 public static byte [] ReadFully (Stream input)
    {
        input.Position = 0;
        MemoryStream memoryStream = new MemoryStream();
        int bufferSize = 16 * 1024;
        byte[] buffer = new byte[bufferSize];
        int totalBytesRead = 0;
        while (true)
        {
            int bytesRead = input.Read(buffer, totalBytesRead, bufferSize - totalBytesRead);
            if (bytesRead == 0)
            {
                break;
            }
            totalBytesRead += bytesRead;
            if (totalBytesRead == bufferSize)
            {
                memoryStream.Write(buffer, 0, bufferSize);
                totalBytesRead = 0;
            }
        }
        if (totalBytesRead > 0)
        {
            memoryStream.Write(buffer, 0, totalBytesRead);
        }
        return memoryStream.ToArray();
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
963
3
Gpt3D_Clone963_3.cs 1 12
Gpt3D_Clone963_3.cs 13 36
----------------------------------------

public static byte [] ReadFully (Stream input) {
    byte [] buffer = new byte [16 * 1024];
    input.Position = 0;
    using (MemoryStream ms = new MemoryStream ())
    {
        int read;
        while ((read = input.Read (buffer, 0, buffer.Length)) > 0) {
            ms.Write (buffer, 0, read);
        }
        return ms.ToArray ();
    }
}
----------------------------------------

 public static byte [] ReadFully (Stream input)
    {
        int bufferSize = 16 * 1024;
        byte[] buffer = new byte[bufferSize];
        byte[] result;
        using (MemoryStream memoryStream = new MemoryStream())
        {
            int read;
            while (true)
            {
                read = input.Read(buffer, 0, bufferSize);
                if (read == 0)
                {
                    break;
                }
                memoryStream.Write(buffer, 0, read);
            }
            result = memoryStream.ToArray();
        }
        return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
963
4
Gpt3D_Clone963_4.cs 1 12
Gpt3D_Clone963_4.cs 13 30
----------------------------------------

public static byte [] ReadFully (Stream input) {
    byte [] buffer = new byte [16 * 1024];
    input.Position = 0;
    using (MemoryStream ms = new MemoryStream ())
    {
        int read;
        while ((read = input.Read (buffer, 0, buffer.Length)) > 0) {
            ms.Write (buffer, 0, read);
        }
        return ms.ToArray ();
    }
}
----------------------------------------

  public static byte [] ReadFully (Stream input)
    {
        int bufferSize = 16 * 1024;
        byte[] buffer = new byte[bufferSize];
        List<byte> result = new List<byte>();
        int readCount;
        do
        {
            readCount = input.Read(buffer, 0, bufferSize);
            for (int i = 0; i < readCount; i++)
            {
                result.Add(buffer[i]);
            }
        } while (readCount == bufferSize);
        return result.ToArray();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
963
5
Gpt3D_Clone963_5.cs 1 12
Gpt3D_Clone963_5.cs 13 31
----------------------------------------

public static byte [] ReadFully (Stream input) {
    byte [] buffer = new byte [16 * 1024];
    input.Position = 0;
    using (MemoryStream ms = new MemoryStream ())
    {
        int read;
        while ((read = input.Read (buffer, 0, buffer.Length)) > 0) {
            ms.Write (buffer, 0, read);
        }
        return ms.ToArray ();
    }
}
----------------------------------------

  public static byte [] ReadFully (Stream input) 
    {
        int bufferSize = 16 * 1024;
        byte[] buffer = new byte[bufferSize];
        int readLength;
        byte[] data = new byte[0];
        using (MemoryStream tmpStream = new MemoryStream())
        {
            while ((readLength = input.Read(buffer, 0, bufferSize)) > 0)
            {
                tmpStream.Write(buffer, 0, readLength);
            }
            data = tmpStream.ToArray();
        }
        return data;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
963
7
Gpt3D_Clone963_7.cs 1 12
Gpt3D_Clone963_7.cs 13 27
----------------------------------------

public static byte [] ReadFully (Stream input) {
    byte [] buffer = new byte [16 * 1024];
    input.Position = 0;
    using (MemoryStream ms = new MemoryStream ())
    {
        int read;
        while ((read = input.Read (buffer, 0, buffer.Length)) > 0) {
            ms.Write (buffer, 0, read);
        }
        return ms.ToArray ();
    }
}
----------------------------------------

  public static byte [] ReadFully (Stream input) 
    {
        using (MemoryStream ms = new MemoryStream())
        {
            byte[] buffer = new byte [16 * 1024];
            while (input.CanRead)
            {
                if (input.Read(buffer, 0, buffer.Length) == 0) break;
                ms.Write(buffer, 0, buffer.Length);
            }
            return ms.ToArray();
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
966
0
Gpt3D_Clone966_0.cs 1 22
Gpt3D_Clone966_0.cs 23 53
----------------------------------------

public static List < Int32 > LocateSubset (Byte [] superSet, Byte [] subSet) {
    if ((superSet == null) || (subSet == null)) {
        throw new ArgumentNullException ();
    }
    if ((superSet.Length < subSet.Length) || (superSet.Length == 0) || (subSet.Length == 0)) {
        return new List < Int32 > ();
    }
    var result = new List < Int32 > ();
    Int32 currentIndex = 0;
    Int32 maxIndex = superSet.Length - subSet.Length;
    while (currentIndex < maxIndex) {
        Int32 matchCount = CountMatches (superSet, currentIndex, subSet);
        if (matchCount == subSet.Length) {
            result.Add (currentIndex);
        }
        currentIndex ++;
        if (matchCount > 0) {
            currentIndex += matchCount - 1;
        }
    }
    return result;
}
----------------------------------------

 public static List<Int32> SearchSubset(Byte[] superSet, Byte[] subSet) 
{ 
    if (superSet == null || subSet == null) 
    { 
        throw new ArgumentNullException(); 
    } 
    if (superSet.Length < subSet.Length || superSet.Length == 0 || subSet.Length == 0) 
    { 
        return new List<Int32>(); 
    } 
    int superSetLen = superSet.Length; 
    int subSetLen = subSet.Length; 
    List<Int32> indices = new List<Int32>(); 
    int maxIndex = superSetLen - subSetLen; 
    for (int currentIndex = 0; currentIndex < maxIndex; currentIndex++) 
    { 
        if (MatchIndices(currentIndex, superSet, subSet)) 
        { 
            indices.Add(currentIndex); 
            if (MaxMatches(superSet, currentIndex, subSet) > 0) 
            { 
                currentIndex += MaxMatches(superSet, currentIndex, subSet) - 1; 
            } 
        } 
    } 
    return indices; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
966
1
Gpt3D_Clone966_1.cs 1 22
Gpt3D_Clone966_1.cs 23 53
----------------------------------------

public static List < Int32 > LocateSubset (Byte [] superSet, Byte [] subSet) {
    if ((superSet == null) || (subSet == null)) {
        throw new ArgumentNullException ();
    }
    if ((superSet.Length < subSet.Length) || (superSet.Length == 0) || (subSet.Length == 0)) {
        return new List < Int32 > ();
    }
    var result = new List < Int32 > ();
    Int32 currentIndex = 0;
    Int32 maxIndex = superSet.Length - subSet.Length;
    while (currentIndex < maxIndex) {
        Int32 matchCount = CountMatches (superSet, currentIndex, subSet);
        if (matchCount == subSet.Length) {
            result.Add (currentIndex);
        }
        currentIndex ++;
        if (matchCount > 0) {
            currentIndex += matchCount - 1;
        }
    }
    return result;
}
----------------------------------------

 public static List<Int32> LocateSubSet(Byte[] superSet, Byte[] subSet) 
{ 
    if(superSet == null || subSet == null) 
    { 
        throw new ArgumentNullException(); 
    } 
    if (superSet.Length < subSet.Length || superSet.Length == 0 || subSet.Length == 0) 
    { 
        return new List<Int32>(); 
    } 
    List<Int32> indexLocations = new List<Int32>(); 
    int superSetLen = superSet.Length; 
    int subSetLen = subSet.Length; 
    int maxIndex = superSetLen - subSetLen; 
    for (int currentIndex = 0; currentIndex < maxIndex; currentIndex++) 
    { 
        if (CompareSubsets(currentIndex, superSet, subSet)) 
        { 
            indexLocations.Add(currentIndex); 
            if (MaxMatches(superSet, currentIndex, subSet) > 0) 
            { 
                currentIndex += MaxMatches(superSet, currentIndex, subSet) - 1; 
            } 
        } 
    } 
    return indexLocations; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
966
2
Gpt3D_Clone966_2.cs 1 22
Gpt3D_Clone966_2.cs 23 51
----------------------------------------

public static List < Int32 > LocateSubset (Byte [] superSet, Byte [] subSet) {
    if ((superSet == null) || (subSet == null)) {
        throw new ArgumentNullException ();
    }
    if ((superSet.Length < subSet.Length) || (superSet.Length == 0) || (subSet.Length == 0)) {
        return new List < Int32 > ();
    }
    var result = new List < Int32 > ();
    Int32 currentIndex = 0;
    Int32 maxIndex = superSet.Length - subSet.Length;
    while (currentIndex < maxIndex) {
        Int32 matchCount = CountMatches (superSet, currentIndex, subSet);
        if (matchCount == subSet.Length) {
            result.Add (currentIndex);
        }
        currentIndex ++;
        if (matchCount > 0) {
            currentIndex += matchCount - 1;
        }
    }
    return result;
}
----------------------------------------

 public static List<Int32> FindSubsets(Byte[] superSet, Byte[] subSet) 
{ 
    if (superSet == null || subSet == null) 
    { 
        throw new ArgumentNullException(); 
    } 
    if (superSet.Length < subSet.Length || superSet.Length == 0 || subSet.Length == 0) 
    { 
        return new List<Int32>(); 
    } 
    List<Int32> indices = new List<Int32>(); 
    int maxIndex = superSet.Length - subSet.Length; 
    for (int currentIndex = 0; currentIndex < maxIndex; currentIndex++) 
    { 
        if (MatchingSubsets(currentIndex, superSet, subSet)) 
        { 
            indices.Add(currentIndex); 
            if (MaxMatches(superSet, currentIndex, subSet) > 0) 
            { 
                currentIndex += MaxMatches(superSet, currentIndex, subSet) - 1; 
            } 
        } 
    } 
    return indices; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
966
3
Gpt3D_Clone966_3.cs 1 22
Gpt3D_Clone966_3.cs 23 51
----------------------------------------

public static List < Int32 > LocateSubset (Byte [] superSet, Byte [] subSet) {
    if ((superSet == null) || (subSet == null)) {
        throw new ArgumentNullException ();
    }
    if ((superSet.Length < subSet.Length) || (superSet.Length == 0) || (subSet.Length == 0)) {
        return new List < Int32 > ();
    }
    var result = new List < Int32 > ();
    Int32 currentIndex = 0;
    Int32 maxIndex = superSet.Length - subSet.Length;
    while (currentIndex < maxIndex) {
        Int32 matchCount = CountMatches (superSet, currentIndex, subSet);
        if (matchCount == subSet.Length) {
            result.Add (currentIndex);
        }
        currentIndex ++;
        if (matchCount > 0) {
            currentIndex += matchCount - 1;
        }
    }
    return result;
}
----------------------------------------

  public static List<Int32> GetSubset(Byte[] superSet, Byte[] subSet) 
{ 
    if (superSet == null || subSet == null) 
    { 
        throw new ArgumentNullException(); 
    } 
    if (superSet.Length < subSet.Length || superSet.Length == 0 || subSet.Length == 0) 
    { 
        return new List<Int32>(); 
    } 
    List<Int32> indices = new List<Int32>(); 
    int maxIndex = superSet.Length - subSet.Length; 
    for (int currentIndex = 0; currentIndex < maxIndex; currentIndex++) 
    { 
        if (CheckSubset(currentIndex, superSet, subSet)) 
        { 
            indices.Add(currentIndex); 
            if (MatchCount(superSet, currentIndex, subSet) > 0) 
            { 
                currentIndex += MatchCount(superSet, currentIndex, subSet) - 1; 
            } 
        } 
    } 
    return indices; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
966
4
Gpt3D_Clone966_4.cs 1 22
Gpt3D_Clone966_4.cs 23 51
----------------------------------------

public static List < Int32 > LocateSubset (Byte [] superSet, Byte [] subSet) {
    if ((superSet == null) || (subSet == null)) {
        throw new ArgumentNullException ();
    }
    if ((superSet.Length < subSet.Length) || (superSet.Length == 0) || (subSet.Length == 0)) {
        return new List < Int32 > ();
    }
    var result = new List < Int32 > ();
    Int32 currentIndex = 0;
    Int32 maxIndex = superSet.Length - subSet.Length;
    while (currentIndex < maxIndex) {
        Int32 matchCount = CountMatches (superSet, currentIndex, subSet);
        if (matchCount == subSet.Length) {
            result.Add (currentIndex);
        }
        currentIndex ++;
        if (matchCount > 0) {
            currentIndex += matchCount - 1;
        }
    }
    return result;
}
----------------------------------------

 public static List<Int32> FindSubsets(Byte[] superSet, Byte[] subSet) 
{ 
    if (superSet == null || subSet == null) 
    { 
        throw new ArgumentNullException(); 
    } 
    if (superSet.Length < subSet.Length || superSet.Length == 0 || subSet.Length == 0) 
    { 
        return new List<Int32>(); 
    } 
    List<Int32> locations = new List<Int32>(); 
    int maxIndex = superSet.Length - subSet.Length; 
    for (int currentIndex = 0; currentIndex < maxIndex; currentIndex++) 
    { 
        if (AnalyzeSubsets(currentIndex, superSet, subSet)) 
        { 
            locations.Add(currentIndex); 
            if (MaxMatches(superSet, currentIndex, subSet) > 0) 
            { 
                currentIndex += MaxMatches(superSet, currentIndex, subSet) - 1; 
            } 
        } 
    } 
    return locations; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
966
5
Gpt3D_Clone966_5.cs 1 22
Gpt3D_Clone966_5.cs 23 79
----------------------------------------

public static List < Int32 > LocateSubset (Byte [] superSet, Byte [] subSet) {
    if ((superSet == null) || (subSet == null)) {
        throw new ArgumentNullException ();
    }
    if ((superSet.Length < subSet.Length) || (superSet.Length == 0) || (subSet.Length == 0)) {
        return new List < Int32 > ();
    }
    var result = new List < Int32 > ();
    Int32 currentIndex = 0;
    Int32 maxIndex = superSet.Length - subSet.Length;
    while (currentIndex < maxIndex) {
        Int32 matchCount = CountMatches (superSet, currentIndex, subSet);
        if (matchCount == subSet.Length) {
            result.Add (currentIndex);
        }
        currentIndex ++;
        if (matchCount > 0) {
            currentIndex += matchCount - 1;
        }
    }
    return result;
}
----------------------------------------

 public static List<Int32> IdentifySubset(Byte[] superSet, Byte[] subSet) 
{ 
    if (superSet == null || subSet == null) 
    { 
        throw new ArgumentNullException(); 
    } 
    if (superSet.Length < subSet.Length || superSet.Length == 0 || subSet.Length == 0) 
    { 
        return new List<Int32>(); 
    } 
    List<Int32> indices = new List<Int32>(); 
    int maxIndex = superSet.Length - subSet.Length; 
    for (int currentIndex = 0; currentIndex < maxIndex; currentIndex++) 
    { 
        if (CheckSubsets(currentIndex, superSet, subSet)) 
        { 
            indices.Add(currentIndex); 
            if (Matches(superSet, currentIndex, subSet) > 0) 
            { 
                currentIndex += Matches(superSet, currentIndex, subSet) - 1; 
            } 
        } 
    } 
    return indices; 
}  
 public static List<Int32> SearchSubsets(Byte[] superSet, Byte[] subSet) 
{ 
    if (superSet == null || subSet == null) 
    { 
        throw new ArgumentNullException(); 
    } 
    if (superSet.Length < subSet.Length || superSet.Length == 0 || subSet.Length == 0) 
    { 
        return new List<Int32>(); 
    } 
    List<Int32> locations = new List<Int32>(); 
    int maxIndex = superSet.Length - subSet.Length; 
    for (int currentIndex = 0; currentIndex < maxIndex; currentIndex++) 
    { 
        if (FindSubsets(currentIndex, superSet, subSet)) 
        { 
            locations.Add(currentIndex); 
            if (MaxMatches(superSet, currentIndex, subSet) > 0) 
            { 
                currentIndex += MaxMatches(superSet, currentIndex, subSet) - 1; 
            } 
        } 
    } 
    return locations; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
966
6
Gpt3D_Clone966_6.cs 1 22
Gpt3D_Clone966_6.cs 23 79
----------------------------------------

public static List < Int32 > LocateSubset (Byte [] superSet, Byte [] subSet) {
    if ((superSet == null) || (subSet == null)) {
        throw new ArgumentNullException ();
    }
    if ((superSet.Length < subSet.Length) || (superSet.Length == 0) || (subSet.Length == 0)) {
        return new List < Int32 > ();
    }
    var result = new List < Int32 > ();
    Int32 currentIndex = 0;
    Int32 maxIndex = superSet.Length - subSet.Length;
    while (currentIndex < maxIndex) {
        Int32 matchCount = CountMatches (superSet, currentIndex, subSet);
        if (matchCount == subSet.Length) {
            result.Add (currentIndex);
        }
        currentIndex ++;
        if (matchCount > 0) {
            currentIndex += matchCount - 1;
        }
    }
    return result;
}
----------------------------------------

 public static List<Int32> IdentifySubset(Byte[] superSet, Byte[] subSet) 
{ 
    if (superSet == null || subSet == null) 
    { 
        throw new ArgumentNullException(); 
    } 
    if (superSet.Length < subSet.Length || superSet.Length == 0 || subSet.Length == 0) 
    { 
        return new List<Int32>(); 
    } 
    List<Int32> indices = new List<Int32>(); 
    int maxIndex = superSet.Length - subSet.Length; 
    for (int currentIndex = 0; currentIndex < maxIndex; currentIndex++) 
    { 
        if (CheckSubsets(currentIndex, superSet, subSet)) 
        { 
            indices.Add(currentIndex); 
            if (Matches(superSet, currentIndex, subSet) > 0) 
            { 
                currentIndex += Matches(superSet, currentIndex, subSet) - 1; 
            } 
        } 
    } 
    return indices; 
}  
 public static List<Int32> SearchSubsets(Byte[] superSet, Byte[] subSet) 
{ 
    if (superSet == null || subSet == null) 
    { 
        throw new ArgumentNullException(); 
    } 
    if (superSet.Length < subSet.Length || superSet.Length == 0 || subSet.Length == 0) 
    { 
        return new List<Int32>(); 
    } 
    List<Int32> locations = new List<Int32>(); 
    int maxIndex = superSet.Length - subSet.Length; 
    for (int currentIndex = 0; currentIndex < maxIndex; currentIndex++) 
    { 
        if (FindSubsets(currentIndex, superSet, subSet)) 
        { 
            locations.Add(currentIndex); 
            if (MaxMatches(superSet, currentIndex, subSet) > 0) 
            { 
                currentIndex += MaxMatches(superSet, currentIndex, subSet) - 1; 
            } 
        } 
    } 
    return locations; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
966
7
Gpt3D_Clone966_7.cs 1 22
Gpt3D_Clone966_7.cs 23 51
----------------------------------------

public static List < Int32 > LocateSubset (Byte [] superSet, Byte [] subSet) {
    if ((superSet == null) || (subSet == null)) {
        throw new ArgumentNullException ();
    }
    if ((superSet.Length < subSet.Length) || (superSet.Length == 0) || (subSet.Length == 0)) {
        return new List < Int32 > ();
    }
    var result = new List < Int32 > ();
    Int32 currentIndex = 0;
    Int32 maxIndex = superSet.Length - subSet.Length;
    while (currentIndex < maxIndex) {
        Int32 matchCount = CountMatches (superSet, currentIndex, subSet);
        if (matchCount == subSet.Length) {
            result.Add (currentIndex);
        }
        currentIndex ++;
        if (matchCount > 0) {
            currentIndex += matchCount - 1;
        }
    }
    return result;
}
----------------------------------------

 public static List<Int32> FindSubset(Byte[] superSet, Byte[] subSet) 
{ 
    if (superSet == null || subSet == null)
    {
        throw new ArgumentNullException();
    }
    if (superSet.Length < subSet.Length || superSet.Length == 0 || subSet.Length == 0)
    {
        return new List<Int32>();
    }
    List<Int32> locations = new List<Int32>();
    int maxIndex = superSet.Length - subSet.Length;
    for (int currentIndex = 0; currentIndex < maxIndex; currentIndex++)
    {
        if (CompareSubsets(currentIndex, superSet, subSet))
        {
            locations.Add(currentIndex);
            if (NumberOfMatches(superSet, currentIndex, subSet) > 0)
            {
                currentIndex += NumberOfMatches(superSet, currentIndex, subSet) - 1;
            }
        }
    }
    return locations;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
966
8
Gpt3D_Clone966_8.cs 1 22
Gpt3D_Clone966_8.cs 23 49
----------------------------------------

public static List < Int32 > LocateSubset (Byte [] superSet, Byte [] subSet) {
    if ((superSet == null) || (subSet == null)) {
        throw new ArgumentNullException ();
    }
    if ((superSet.Length < subSet.Length) || (superSet.Length == 0) || (subSet.Length == 0)) {
        return new List < Int32 > ();
    }
    var result = new List < Int32 > ();
    Int32 currentIndex = 0;
    Int32 maxIndex = superSet.Length - subSet.Length;
    while (currentIndex < maxIndex) {
        Int32 matchCount = CountMatches (superSet, currentIndex, subSet);
        if (matchCount == subSet.Length) {
            result.Add (currentIndex);
        }
        currentIndex ++;
        if (matchCount > 0) {
            currentIndex += matchCount - 1;
        }
    }
    return result;
}
----------------------------------------

 public static List<Int32> FindSubsetsInSuperset(Byte[] superSet, Byte[] subSet) 
{ 
    if (superSet == null || subSet == null) 
    { 
        throw new ArgumentNullException(); 
    } 
    if (superSet.Length < subSet.Length || superSet.Length == 0 || subSet.Length == 0) 
    { 
        return new List<Int32>(); 
    } 
    List<Int32> startingPoints = RetrieveStartingPoints(superSet, subSet); 
    List<Int32> result = new List<Int32>(); 
    foreach (Int32 start in startingPoints) 
    { 
        Int32 matchingPairCount = VerifyMatches(superSet, start, subSet); 
        if (matchingPairCount == subSet.Length) 
        { 
            result.Add(start); 
        } 
    } 
    return result; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
968
4
Gpt3D_Clone968_4.cs 1 13
Gpt3D_Clone968_4.cs 14 30
----------------------------------------

static void doubleNumber (int [] n) {
    int carry = 0;
    for (int i = 0; i < n.Length; i ++) {
        n [i] <<= 1;
        n [i] += carry;
        if (n [i] >= 1000000000) {
            carry = 1;
            n [i] -= 1000000000;
        } else {
            carry = 0;
        }
    }
}
----------------------------------------

 static void doubleNumber (int [] n) {
    int carry = 0;
    for (int i = 0; i < n.Length; i ++) {
        int temp = n[i] ;
        temp <<= 1;
        temp += carry;
        if (temp >= 1000000000) {
            carry = 1;
            n [i] = temp- 1000000000;
        } else {
            carry = 0;
            n[i] = temp;
        }
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
96
0
Gpt3D_Clone96_0.cs 1 11
Gpt3D_Clone96_0.cs 12 33
----------------------------------------

private static void Main (string [] args) {
    const string input = @"[Testing.User]|Info:([Testing.Info]|Name:([System.String]|Matt)|Age:([System.Int32]|21))|Description:([System.String]|This is some description)";
    const string pattern = @"(\[Testing\.User\])\|(Info:.*)\|(Description:.*)";
    var match = Regex.Match (input, pattern);
    if (match.Success) {
        for (int i = 1; i < match.Groups.Count; i ++) {
            Console.WriteLine ("[" + i + "] = " + match.Groups [i]);
        }
    }
    Console.ReadLine ();
}
----------------------------------------

 private static void Main(string[] args)
    {
        const string input = @"[Testing.User]|Info:([Testing.Info]|Name:([System.String]|Matt)|Age:([System.Int32]|21))|Description:([System.String]|This is some description)";
        const string pattern = @"(\[Testing\.User\])\|(Info:.*)\|(Description:.*)";
        int group = 1;
        int groupNum = 1;
        MatchCollection matches = Regex.Matches(input, pattern);
        foreach(Match match in matches)
        {
            for (int i = 1; i < match.Groups.Count; i++)
            {
                Console.WriteLine($"Group{groupNum}|Match{group}: {match.Groups[i]}");
                group++;
            }
            groupNum++;
        }
        Console.ReadLine();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
978
0
Gpt3D_Clone978_0.cs 1 37
Gpt3D_Clone978_0.cs 38 53
----------------------------------------

public static int FastPower (int x, int pow) {
    switch (pow) {
        case 0 :
            return 1;
        case 1 :
            return x;
        case 2 :
            return x * x;
        case 3 :
            return x * x * x;
        case 4 :
            return x * x * x * x;
        case 5 :
            return x * x * x * x * x;
        case 6 :
            return x * x * x * x * x * x;
        case 7 :
            return x * x * x * x * x * x * x;
        case 8 :
            return x * x * x * x * x * x * x * x;
        case 9 :
            return x * x * x * x * x * x * x * x * x;
        case 10 :
            return x * x * x * x * x * x * x * x * x * x;
        case 11 :
            return x * x * x * x * x * x * x * x * x * x * x;
        default :
            int ret = 1;
            while (pow != 0) {
                if ((pow & 1) == 1)
                    ret *= x;
                x *= x;
                pow > >= 1;
            }
            return ret;
    }
}
----------------------------------------

 public static int FastPower(int x, int pow) {
   int result = 1;
   int value = x;
   while (pow != 0) {
      if(pow > 1) {
         result *= value;
         value *= x;
      }
      else 
         result *= x;
      pow -= 1;
   }
   return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
978
1
Gpt3D_Clone978_1.cs 1 37
Gpt3D_Clone978_1.cs 38 49
----------------------------------------

public static int FastPower (int x, int pow) {
    switch (pow) {
        case 0 :
            return 1;
        case 1 :
            return x;
        case 2 :
            return x * x;
        case 3 :
            return x * x * x;
        case 4 :
            return x * x * x * x;
        case 5 :
            return x * x * x * x * x;
        case 6 :
            return x * x * x * x * x * x;
        case 7 :
            return x * x * x * x * x * x * x;
        case 8 :
            return x * x * x * x * x * x * x * x;
        case 9 :
            return x * x * x * x * x * x * x * x * x;
        case 10 :
            return x * x * x * x * x * x * x * x * x * x;
        case 11 :
            return x * x * x * x * x * x * x * x * x * x * x;
        default :
            int ret = 1;
            while (pow != 0) {
                if ((pow & 1) == 1)
                    ret *= x;
                x *= x;
                pow > >= 1;
            }
            return ret;
    }
}
----------------------------------------

 public static int FastPower(int x, int pow) {
   int result;
   if (pow == 0)
      return 1;
   result = FastPower(x, pow / 2);
   result *= result;
   if (pow % 2 == 1)
      result *= x;
   return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
978
2
Gpt3D_Clone978_2.cs 1 37
Gpt3D_Clone978_2.cs 38 51
----------------------------------------

public static int FastPower (int x, int pow) {
    switch (pow) {
        case 0 :
            return 1;
        case 1 :
            return x;
        case 2 :
            return x * x;
        case 3 :
            return x * x * x;
        case 4 :
            return x * x * x * x;
        case 5 :
            return x * x * x * x * x;
        case 6 :
            return x * x * x * x * x * x;
        case 7 :
            return x * x * x * x * x * x * x;
        case 8 :
            return x * x * x * x * x * x * x * x;
        case 9 :
            return x * x * x * x * x * x * x * x * x;
        case 10 :
            return x * x * x * x * x * x * x * x * x * x;
        case 11 :
            return x * x * x * x * x * x * x * x * x * x * x;
        default :
            int ret = 1;
            while (pow != 0) {
                if ((pow & 1) == 1)
                    ret *= x;
                x *= x;
                pow > >= 1;
            }
            return ret;
    }
}
----------------------------------------

 public static int FastPower(int x, int pow) {
   //Base Case 
   if(pow == 0) 
      return 1; 
       
   int temp = FastPower(x, pow/2); 
   
   if (pow%2 == 0) 
      return temp*temp; 
   else
      return x*temp*temp; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
978
3
Gpt3D_Clone978_3.cs 1 37
Gpt3D_Clone978_3.cs 38 48
----------------------------------------

public static int FastPower (int x, int pow) {
    switch (pow) {
        case 0 :
            return 1;
        case 1 :
            return x;
        case 2 :
            return x * x;
        case 3 :
            return x * x * x;
        case 4 :
            return x * x * x * x;
        case 5 :
            return x * x * x * x * x;
        case 6 :
            return x * x * x * x * x * x;
        case 7 :
            return x * x * x * x * x * x * x;
        case 8 :
            return x * x * x * x * x * x * x * x;
        case 9 :
            return x * x * x * x * x * x * x * x * x;
        case 10 :
            return x * x * x * x * x * x * x * x * x * x;
        case 11 :
            return x * x * x * x * x * x * x * x * x * x * x;
        default :
            int ret = 1;
            while (pow != 0) {
                if ((pow & 1) == 1)
                    ret *= x;
                x *= x;
                pow > >= 1;
            }
            return ret;
    }
}
----------------------------------------

 public static int FastPower(int x, int pow){
    int result = x;
    int i = 0;
    while (i < pow-1){
        result = result * x;
        i++;
    }
    return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
978
4
Gpt3D_Clone978_4.cs 1 37
Gpt3D_Clone978_4.cs 38 47
----------------------------------------

public static int FastPower (int x, int pow) {
    switch (pow) {
        case 0 :
            return 1;
        case 1 :
            return x;
        case 2 :
            return x * x;
        case 3 :
            return x * x * x;
        case 4 :
            return x * x * x * x;
        case 5 :
            return x * x * x * x * x;
        case 6 :
            return x * x * x * x * x * x;
        case 7 :
            return x * x * x * x * x * x * x;
        case 8 :
            return x * x * x * x * x * x * x * x;
        case 9 :
            return x * x * x * x * x * x * x * x * x;
        case 10 :
            return x * x * x * x * x * x * x * x * x * x;
        case 11 :
            return x * x * x * x * x * x * x * x * x * x * x;
        default :
            int ret = 1;
            while (pow != 0) {
                if ((pow & 1) == 1)
                    ret *= x;
                x *= x;
                pow > >= 1;
            }
            return ret;
    }
}
----------------------------------------

 public static int FastPower(int x, int pow) {
   int result = x;
   while (pow > 1) {
      pow--;
      result *= x;
   }
   return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
978
5
Gpt3D_Clone978_5.cs 1 37
Gpt3D_Clone978_5.cs 38 47
----------------------------------------

public static int FastPower (int x, int pow) {
    switch (pow) {
        case 0 :
            return 1;
        case 1 :
            return x;
        case 2 :
            return x * x;
        case 3 :
            return x * x * x;
        case 4 :
            return x * x * x * x;
        case 5 :
            return x * x * x * x * x;
        case 6 :
            return x * x * x * x * x * x;
        case 7 :
            return x * x * x * x * x * x * x;
        case 8 :
            return x * x * x * x * x * x * x * x;
        case 9 :
            return x * x * x * x * x * x * x * x * x;
        case 10 :
            return x * x * x * x * x * x * x * x * x * x;
        case 11 :
            return x * x * x * x * x * x * x * x * x * x * x;
        default :
            int ret = 1;
            while (pow != 0) {
                if ((pow & 1) == 1)
                    ret *= x;
                x *= x;
                pow > >= 1;
            }
            return ret;
    }
}
----------------------------------------

 public static int FastPower(int x, int pow) {
   int value = 1;
   while (pow > 0) {
      value *= x;
      pow--;
   }
   return value;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
978
6
Gpt3D_Clone978_6.cs 1 37
Gpt3D_Clone978_6.cs 38 46
----------------------------------------

public static int FastPower (int x, int pow) {
    switch (pow) {
        case 0 :
            return 1;
        case 1 :
            return x;
        case 2 :
            return x * x;
        case 3 :
            return x * x * x;
        case 4 :
            return x * x * x * x;
        case 5 :
            return x * x * x * x * x;
        case 6 :
            return x * x * x * x * x * x;
        case 7 :
            return x * x * x * x * x * x * x;
        case 8 :
            return x * x * x * x * x * x * x * x;
        case 9 :
            return x * x * x * x * x * x * x * x * x;
        case 10 :
            return x * x * x * x * x * x * x * x * x * x;
        case 11 :
            return x * x * x * x * x * x * x * x * x * x * x;
        default :
            int ret = 1;
            while (pow != 0) {
                if ((pow & 1) == 1)
                    ret *= x;
                x *= x;
                pow > >= 1;
            }
            return ret;
    }
}
----------------------------------------

 public static int FastPower(int x, int pow) {
   int result = 1;
    for (int i = 1 ; i <= pow ; i++ ) {
        result *= x; 
    } 
    return result; 
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
978
7
Gpt3D_Clone978_7.cs 1 37
Gpt3D_Clone978_7.cs 38 46
----------------------------------------

public static int FastPower (int x, int pow) {
    switch (pow) {
        case 0 :
            return 1;
        case 1 :
            return x;
        case 2 :
            return x * x;
        case 3 :
            return x * x * x;
        case 4 :
            return x * x * x * x;
        case 5 :
            return x * x * x * x * x;
        case 6 :
            return x * x * x * x * x * x;
        case 7 :
            return x * x * x * x * x * x * x;
        case 8 :
            return x * x * x * x * x * x * x * x;
        case 9 :
            return x * x * x * x * x * x * x * x * x;
        case 10 :
            return x * x * x * x * x * x * x * x * x * x;
        case 11 :
            return x * x * x * x * x * x * x * x * x * x * x;
        default :
            int ret = 1;
            while (pow != 0) {
                if ((pow & 1) == 1)
                    ret *= x;
                x *= x;
                pow > >= 1;
            }
            return ret;
    }
}
----------------------------------------

 public static int FastPower(int x, int pow) {
   int result = 1;
   for (int i = 0; i < pow; i++) {
      result *= x;
   }
   return result;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
978
8
Gpt3D_Clone978_8.cs 1 37
Gpt3D_Clone978_8.cs 38 48
----------------------------------------

public static int FastPower (int x, int pow) {
    switch (pow) {
        case 0 :
            return 1;
        case 1 :
            return x;
        case 2 :
            return x * x;
        case 3 :
            return x * x * x;
        case 4 :
            return x * x * x * x;
        case 5 :
            return x * x * x * x * x;
        case 6 :
            return x * x * x * x * x * x;
        case 7 :
            return x * x * x * x * x * x * x;
        case 8 :
            return x * x * x * x * x * x * x * x;
        case 9 :
            return x * x * x * x * x * x * x * x * x;
        case 10 :
            return x * x * x * x * x * x * x * x * x * x;
        case 11 :
            return x * x * x * x * x * x * x * x * x * x * x;
        default :
            int ret = 1;
            while (pow != 0) {
                if ((pow & 1) == 1)
                    ret *= x;
                x *= x;
                pow > >= 1;
            }
            return ret;
    }
}
----------------------------------------

 public static int FastPower(int x, int pow) {
   if (pow == 0) {
      return 1;
   } 
   else {
      return x * FastPower(x, pow - 1);
   }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
979
0
Gpt3D_Clone979_0.cs 1 9
Gpt3D_Clone979_0.cs 10 24
----------------------------------------

private static object SearchPositionUsingIndex (List < TagType < object > > tagList, string fieldTag) {
    var index = BuildIndex (tagList);
    int i;
    if (! index.TryGetValue (fieldTag, out i))
        return null;
    if (i + 1 >= tagList.Count)
        return null;
    return tagList [i + 1].Position;
}
----------------------------------------

 private static object SearchPositionUsingIndex(List<TagType<object>> tagList, string fieldTag)
{
    Dictionary<string,int> index = BuildIndex(tagList);
    if(index.TryGetValue(fieldTag, out int value))
    {
        if (value + 1 < tagList.Count)
            return tagList[value+1].Position;
        else
            return null;
    }
    else
        return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
979
2
Gpt3D_Clone979_2.cs 1 9
Gpt3D_Clone979_2.cs 10 21
----------------------------------------

private static object SearchPositionUsingIndex (List < TagType < object > > tagList, string fieldTag) {
    var index = BuildIndex (tagList);
    int i;
    if (! index.TryGetValue (fieldTag, out i))
        return null;
    if (i + 1 >= tagList.Count)
        return null;
    return tagList [i + 1].Position;
}
----------------------------------------

 private static object SearchPositionUsingIndex(List<TagType<object>> tagList, string fieldTag) {
    var index = BuildIndex(tagList);
    int i;
    if (index.TryGetValue(fieldTag, out i)) {
        if (i + 1 < tagList.Count) {
            return tagList[i + 1].Position;
        }
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
979
3
Gpt3D_Clone979_3.cs 1 9
Gpt3D_Clone979_3.cs 10 34
----------------------------------------

private static object SearchPositionUsingIndex (List < TagType < object > > tagList, string fieldTag) {
    var index = BuildIndex (tagList);
    int i;
    if (! index.TryGetValue (fieldTag, out i))
        return null;
    if (i + 1 >= tagList.Count)
        return null;
    return tagList [i + 1].Position;
}
----------------------------------------

 private static object SearchPositionUsingIndex (List < TagType < object > >tagList, string fieldTag)
            {
                var index = BuildIndex (tagList);
                if (index.TryGetValue (fieldTag, out int i))
                {
                    if (i + 1< tagList.Count)
                    {
                        return tagList [i + 1].Position;
                    }
                }
                return null;
            }
  private static object SearchPositionUsingIndex(List<TagType<object>> tagList, string fieldTag) {
    var index = BuildIndex(tagList);
    if (index.ContainsKey(fieldTag)) {
        int i = index[fieldTag];
        if (i + 1 < tagList.Count) {
            return tagList[i + 1].Position;
        }
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
979
4
Gpt3D_Clone979_4.cs 1 9
Gpt3D_Clone979_4.cs 10 24
----------------------------------------

private static object SearchPositionUsingIndex (List < TagType < object > > tagList, string fieldTag) {
    var index = BuildIndex (tagList);
    int i;
    if (! index.TryGetValue (fieldTag, out i))
        return null;
    if (i + 1 >= tagList.Count)
        return null;
    return tagList [i + 1].Position;
}
----------------------------------------

 private static object FindPositionUsingIndex (List < TagType < object > > tagList, string fieldTag) {
    Dictionary < string, int > index = BuildIndex (tagList);
    if (index.ContainsKey (fieldTag)) {
        int i = index [fieldTag];
        if (i + 1 < tagList.Count) {
            return tagList [i + 1].Position;
        }
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
979
5
Gpt3D_Clone979_5.cs 1 9
Gpt3D_Clone979_5.cs 10 22
----------------------------------------

private static object SearchPositionUsingIndex (List < TagType < object > > tagList, string fieldTag) {
    var index = BuildIndex (tagList);
    int i;
    if (! index.TryGetValue (fieldTag, out i))
        return null;
    if (i + 1 >= tagList.Count)
        return null;
    return tagList [i + 1].Position;
}
----------------------------------------

 private static object SearchPositionUsingIndex(List<TagType<object>> tagList, string fieldTag)
{
    Dictionary<string,int> index = BuildIndex(tagList);
    int i;
    if(index.TryGetValue(fieldTag, out i))
    {
        if(i + 1 < tagList.Count)
            return tagList[i+1].Position;
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
979
6
Gpt3D_Clone979_6.cs 1 9
Gpt3D_Clone979_6.cs 10 22
----------------------------------------

private static object SearchPositionUsingIndex (List < TagType < object > > tagList, string fieldTag) {
    var index = BuildIndex (tagList);
    int i;
    if (! index.TryGetValue (fieldTag, out i))
        return null;
    if (i + 1 >= tagList.Count)
        return null;
    return tagList [i + 1].Position;
}
----------------------------------------

 private static object SearchPositionUsingIndex (List<TagType<object>> tags, string key)
{
    Dictionary<string,int> index = BuildIndex (tags); 
    if(index.ContainsKey(key))
    {
        int indexValue = index[key];
        if(indexValue + 1 < tags.Count)
            return tags[indexValue + 1].Position;
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
979
7
Gpt3D_Clone979_7.cs 1 9
Gpt3D_Clone979_7.cs 10 20
----------------------------------------

private static object SearchPositionUsingIndex (List < TagType < object > > tagList, string fieldTag) {
    var index = BuildIndex (tagList);
    int i;
    if (! index.TryGetValue (fieldTag, out i))
        return null;
    if (i + 1 >= tagList.Count)
        return null;
    return tagList [i + 1].Position;
}
----------------------------------------

 private static object SearchPositionUsingIndex(List<TagType<object>> tagList, string fieldTag) {
    Dictionary<string, int> index = BuildIndex(tagList);
    if (index.TryGetValue(fieldTag, out int i)) {
        if (i + 1 < tagList.Count) {
            return tagList[i + 1].Position;
        }
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
979
8
Gpt3D_Clone979_8.cs 1 9
Gpt3D_Clone979_8.cs 10 34
----------------------------------------

private static object SearchPositionUsingIndex (List < TagType < object > > tagList, string fieldTag) {
    var index = BuildIndex (tagList);
    int i;
    if (! index.TryGetValue (fieldTag, out i))
        return null;
    if (i + 1 >= tagList.Count)
        return null;
    return tagList [i + 1].Position;
}
----------------------------------------

 private static object SearchPositionUsingIndex (List < TagType < object > >tagList, string fieldTag)
            {
                var index = BuildIndex (tagList);
                if (index.TryGetValue (fieldTag, out int i))
                {
                    if (i + 1< tagList.Count)
                    {
                        return tagList [i + 1].Position;
                    }
                }
                return null;
            }
  private static object SearchPositionUsingIndex(List<TagType<object>> tagList, string fieldTag) {
    var index = BuildIndex(tagList);
    if (index.ContainsKey(fieldTag)) {
        int i = index[fieldTag];
        if (i + 1 < tagList.Count) {
            return tagList[i + 1].Position;
        }
    }
    return null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
981
0
Gpt3D_Clone981_0.cs 1 11
Gpt3D_Clone981_0.cs 12 27
----------------------------------------

public bool Equals (Shape s) {
    int count = 0;
    int [] temp1 = new int [this.coordinate.Length];
    foreach (int x in this.coordinate)
        temp1 [count ++] = x;
    count = 0;
    int [] temp2 = new int [s.coordinate.Length];
    foreach (int x in s.coordinate)
        temp2 [count ++] = x;
    return temp1.SequenceEqual (temp2);
}
----------------------------------------

 public bool Equals (Shape s) 
{
    if (this.coordinate.Length != s.coordinate.Length)
        return false;
    int i = 0;
    while (i < this.coordinate.Length)
    {
        if (this.coordinate[i] != s.coordinate[i])
            return false;
        i++;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
981
1
Gpt3D_Clone981_1.cs 1 11
Gpt3D_Clone981_1.cs 12 25
----------------------------------------

public bool Equals (Shape s) {
    int count = 0;
    int [] temp1 = new int [this.coordinate.Length];
    foreach (int x in this.coordinate)
        temp1 [count ++] = x;
    count = 0;
    int [] temp2 = new int [s.coordinate.Length];
    foreach (int x in s.coordinate)
        temp2 [count ++] = x;
    return temp1.SequenceEqual (temp2);
}
----------------------------------------

 public bool Equals (Shape s) 
{
   for (int i = 0; i < this.coordinate.Length; i++) 
    {
        if (this.coordinate[i] != s.coordinate[i]) 
            return false;
    }
    if (this.coordinate.Length == s.coordinate.Length)
        return true;
    else
        return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
981
2
Gpt3D_Clone981_2.cs 1 11
Gpt3D_Clone981_2.cs 12 29
----------------------------------------

public bool Equals (Shape s) {
    int count = 0;
    int [] temp1 = new int [this.coordinate.Length];
    foreach (int x in this.coordinate)
        temp1 [count ++] = x;
    count = 0;
    int [] temp2 = new int [s.coordinate.Length];
    foreach (int x in s.coordinate)
        temp2 [count ++] = x;
    return temp1.SequenceEqual (temp2);
}
----------------------------------------

 public bool Equals (Shape s) 
{
    if (this.coordinate.Length == s.coordinate.Length)
    {
        for (int i = 0; i < this.coordinate.Length; i++) 
        {
            if (!this.coordinate[i].Equals(s.coordinate[i])) 
                return false;
        }
        return true;
    }
    else 
    {
        return false;
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
981
3
Gpt3D_Clone981_3.cs 1 11
Gpt3D_Clone981_3.cs 12 25
----------------------------------------

public bool Equals (Shape s) {
    int count = 0;
    int [] temp1 = new int [this.coordinate.Length];
    foreach (int x in this.coordinate)
        temp1 [count ++] = x;
    count = 0;
    int [] temp2 = new int [s.coordinate.Length];
    foreach (int x in s.coordinate)
        temp2 [count ++] = x;
    return temp1.SequenceEqual (temp2);
}
----------------------------------------

 public bool Equals (Shape s) 
{
    if (this.coordinate.Length == s.coordinate.Length)
    {
        for (int i = 0; i < this.coordinate.Length; i++) 
            if (this.coordinate[i] != s.coordinate[i]) 
                return false;
        return true;
    }
    else 
        return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
981
4
Gpt3D_Clone981_4.cs 1 11
Gpt3D_Clone981_4.cs 12 25
----------------------------------------

public bool Equals (Shape s) {
    int count = 0;
    int [] temp1 = new int [this.coordinate.Length];
    foreach (int x in this.coordinate)
        temp1 [count ++] = x;
    count = 0;
    int [] temp2 = new int [s.coordinate.Length];
    foreach (int x in s.coordinate)
        temp2 [count ++] = x;
    return temp1.SequenceEqual (temp2);
}
----------------------------------------

 public bool Equals(Shape s) 
{
    if(this.coordinate.Length != s.coordinate.Length) 
        return false;
    
    for(int i = 0; i < this.coordinate.Length; i++) {
        if(this.coordinate[i] != s.coordinate[i])
            return false;
    }
    
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
981
5
Gpt3D_Clone981_5.cs 1 11
Gpt3D_Clone981_5.cs 12 24
----------------------------------------

public bool Equals (Shape s) {
    int count = 0;
    int [] temp1 = new int [this.coordinate.Length];
    foreach (int x in this.coordinate)
        temp1 [count ++] = x;
    count = 0;
    int [] temp2 = new int [s.coordinate.Length];
    foreach (int x in s.coordinate)
        temp2 [count ++] = x;
    return temp1.SequenceEqual (temp2);
}
----------------------------------------

 public bool Equals (Shape s) 
{
    if (this.coordinate.Length != s.coordinate.Length)
        return false;
    
    for (int i = 0; i < this.coordinate.Length; i++) 
        if (this.coordinate[i] != s.coordinate[i]) 
            return false;
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
981
6
Gpt3D_Clone981_6.cs 1 11
Gpt3D_Clone981_6.cs 12 20
----------------------------------------

public bool Equals (Shape s) {
    int count = 0;
    int [] temp1 = new int [this.coordinate.Length];
    foreach (int x in this.coordinate)
        temp1 [count ++] = x;
    count = 0;
    int [] temp2 = new int [s.coordinate.Length];
    foreach (int x in s.coordinate)
        temp2 [count ++] = x;
    return temp1.SequenceEqual (temp2);
}
----------------------------------------

 public bool Equals (Shape s) 
{
    if (this.coordinate.Length == s.coordinate.Length && this.coordinate.Intersect(s.coordinate).Count() == this.coordinate.Length)
        return true;
    else
        return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
981
7
Gpt3D_Clone981_7.cs 1 11
Gpt3D_Clone981_7.cs 12 20
----------------------------------------

public bool Equals (Shape s) {
    int count = 0;
    int [] temp1 = new int [this.coordinate.Length];
    foreach (int x in this.coordinate)
        temp1 [count ++] = x;
    count = 0;
    int [] temp2 = new int [s.coordinate.Length];
    foreach (int x in s.coordinate)
        temp2 [count ++] = x;
    return temp1.SequenceEqual (temp2);
}
----------------------------------------

 public bool Equals (Shape s) 
{
    if (this.coordinate.Length == s.coordinate.Length && this.coordinate.All(x => s.coordinate.Contains(x)))
        return true;
    else
        return false;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
981
8
Gpt3D_Clone981_8.cs 1 11
Gpt3D_Clone981_8.cs 12 17
----------------------------------------

public bool Equals (Shape s) {
    int count = 0;
    int [] temp1 = new int [this.coordinate.Length];
    foreach (int x in this.coordinate)
        temp1 [count ++] = x;
    count = 0;
    int [] temp2 = new int [s.coordinate.Length];
    foreach (int x in s.coordinate)
        temp2 [count ++] = x;
    return temp1.SequenceEqual (temp2);
}
----------------------------------------

 public bool Equals (Shape s) 
{
    return  this.coordinate.Length == s.coordinate.Length && Enumerable.Range(0, this.coordinate.Length).All(x => this.coordinate[x] == s.coordinate[x]);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
982
0
Gpt3D_Clone982_0.cs 1 19
Gpt3D_Clone982_0.cs 20 38
----------------------------------------

public static string GetWord (string input, int position) {
    char s = input [position];
    int sp1 = 0, sp2 = input.Length;
    for (int i = position; i > 0; i --) {
        char ch = input [i];
        if (ch == ' ' || ch == '\n') {
            sp1 = i;
            break;
        }
    }
    for (int i = position; i < input.Length; i ++) {
        char ch = input [i];
        if (ch == ' ' || ch == '\n') {
            sp2 = i;
            break;
        }
    }
    return input.Substring (sp1, sp2 - sp1).Replace ("\n", "");
}
----------------------------------------

  public static string GetWord (string input, int position) {
        int sp1 = position;
        int sp2 = input.Length;
        for (int i = position; i > 0; i --) {
            if (input [i] == ' ' || input [i] == '\n') {
                sp1 -= 1;
            }
            else break;
        }
        for (int i = position; i < input.Length; i ++) {
            if (input [i] == ' ' || input [i] == '\n') {
                sp2 = i;
            }
            else break;
        }
        return input.Substring (sp1, sp2 - sp1).Replace ("\n", "");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
982
1
Gpt3D_Clone982_1.cs 1 19
Gpt3D_Clone982_1.cs 20 44
----------------------------------------

public static string GetWord (string input, int position) {
    char s = input [position];
    int sp1 = 0, sp2 = input.Length;
    for (int i = position; i > 0; i --) {
        char ch = input [i];
        if (ch == ' ' || ch == '\n') {
            sp1 = i;
            break;
        }
    }
    for (int i = position; i < input.Length; i ++) {
        char ch = input [i];
        if (ch == ' ' || ch == '\n') {
            sp2 = i;
            break;
        }
    }
    return input.Substring (sp1, sp2 - sp1).Replace ("\n", "");
}
----------------------------------------

 public static string GetWord (string input, int position) {
        // Check if the position is valid
        if (position < 0 || position >= input.Length) {
            return "";
        }
        int start = position;
        int end = position;
        // Search for the start of the word
        for (int i = position - 1; i >= 0; i--) {
            if (input[i] == '\n' || input[i] == ' ') {
                start = i + 1;
                break;
            }
        }
        // Search for the end of the word
        for (int i = position + 1; i < input.Length; i++) {
            if (input[i] == '\n' || input[i] == ' ') {
                end = i - 1;
                break;
            }
        }
        return input.Substring (start, end - start + 1).Replace ("\n", "");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
982
2
Gpt3D_Clone982_2.cs 1 19
Gpt3D_Clone982_2.cs 20 38
----------------------------------------

public static string GetWord (string input, int position) {
    char s = input [position];
    int sp1 = 0, sp2 = input.Length;
    for (int i = position; i > 0; i --) {
        char ch = input [i];
        if (ch == ' ' || ch == '\n') {
            sp1 = i;
            break;
        }
    }
    for (int i = position; i < input.Length; i ++) {
        char ch = input [i];
        if (ch == ' ' || ch == '\n') {
            sp2 = i;
            break;
        }
    }
    return input.Substring (sp1, sp2 - sp1).Replace ("\n", "");
}
----------------------------------------

 public static string GetWord (string input, int position) {
        int sp1 = position;
        int sp2 = position;
        for (int i = position; i > -1; i --) {
            if (input [i] == ' ' || input [i] == '\n') {
                sp1 -= 1;
            }
            else break;
        }
        for (int i = position; i < input.Length; i ++) {
            if (input [i] == ' ' || input [i] == '\n') {
                sp2 += 1;
            }
            else break;
        }
        return input.Substring (sp1, sp2 - sp1).Replace ("\n", "");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
982
3
Gpt3D_Clone982_3.cs 1 19
Gpt3D_Clone982_3.cs 20 41
----------------------------------------

public static string GetWord (string input, int position) {
    char s = input [position];
    int sp1 = 0, sp2 = input.Length;
    for (int i = position; i > 0; i --) {
        char ch = input [i];
        if (ch == ' ' || ch == '\n') {
            sp1 = i;
            break;
        }
    }
    for (int i = position; i < input.Length; i ++) {
        char ch = input [i];
        if (ch == ' ' || ch == '\n') {
            sp2 = i;
            break;
        }
    }
    return input.Substring (sp1, sp2 - sp1).Replace ("\n", "");
}
----------------------------------------

 public static string GetWord (string input, int position) {
        char s = input[position];
        // Check if position is valid
        if (position < 0 || position >= input.Length)
            return "";
        // Search for the start of the word
        while (position > 0 && (input[position - 1] != '\n' && 
                                            input [position - 1] != ' ')) {
            position--;
        }
        // Search for the end of the word
        int sp2 = position;
        for (int i = position; i < input.Length; i++) {
            if (input[i] == '\n' || input[i] == ' ') {
                sp2 = i;
                break;
            }
        }
        return input.Substring (position, sp2 - position).Replace ("\n", "");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
982
4
Gpt3D_Clone982_4.cs 1 19
Gpt3D_Clone982_4.cs 20 39
----------------------------------------

public static string GetWord (string input, int position) {
    char s = input [position];
    int sp1 = 0, sp2 = input.Length;
    for (int i = position; i > 0; i --) {
        char ch = input [i];
        if (ch == ' ' || ch == '\n') {
            sp1 = i;
            break;
        }
    }
    for (int i = position; i < input.Length; i ++) {
        char ch = input [i];
        if (ch == ' ' || ch == '\n') {
            sp2 = i;
            break;
        }
    }
    return input.Substring (sp1, sp2 - sp1).Replace ("\n", "");
}
----------------------------------------

 public static string GetWord (string input, int position) {
        StringBuilder word = new StringBuilder();
        // Check if position is valid
        if (position >= 0 && position < input.Length) {
            int start = position;
            while (start > 0 && input[start - 1] != '\n' && 
                                            input[start - 1] != ' ') {
                start--;
            }
            int end = position;
            while (end < input.Length && input[end] != '\n' 
                                            && input[end] != ' ') {
                word.Append(input[end]);
                end++;
            }
        }
        return word.ToString().Replace("\n", "");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
982
5
Gpt3D_Clone982_5.cs 1 19
Gpt3D_Clone982_5.cs 20 35
----------------------------------------

public static string GetWord (string input, int position) {
    char s = input [position];
    int sp1 = 0, sp2 = input.Length;
    for (int i = position; i > 0; i --) {
        char ch = input [i];
        if (ch == ' ' || ch == '\n') {
            sp1 = i;
            break;
        }
    }
    for (int i = position; i < input.Length; i ++) {
        char ch = input [i];
        if (ch == ' ' || ch == '\n') {
            sp2 = i;
            break;
        }
    }
    return input.Substring (sp1, sp2 - sp1).Replace ("\n", "");
}
----------------------------------------

 public static string GetWord (string input, int position) {
        if(position < 0 || position >= input.Length) {
            return "";
        }
        int start = position;
        int end = position;
        while(start > 0 && input[start - 1] != '\n' && input[start-1] != ' ') {
            start--;
        }
        while(end < input.Length -1 && input[end + 1] != '\n' && input[end + 1] != ' ') {
            end++;
        }
        return input.Substring(start, end - start + 1).Replace("\n", "");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
982
6
Gpt3D_Clone982_6.cs 1 19
Gpt3D_Clone982_6.cs 20 39
----------------------------------------

public static string GetWord (string input, int position) {
    char s = input [position];
    int sp1 = 0, sp2 = input.Length;
    for (int i = position; i > 0; i --) {
        char ch = input [i];
        if (ch == ' ' || ch == '\n') {
            sp1 = i;
            break;
        }
    }
    for (int i = position; i < input.Length; i ++) {
        char ch = input [i];
        if (ch == ' ' || ch == '\n') {
            sp2 = i;
            break;
        }
    }
    return input.Substring (sp1, sp2 - sp1).Replace ("\n", "");
}
----------------------------------------

 public static string GetWord (string input, int position) {
        int sp1 = position;
        int sp2 = input.Length;
        // Check if position is valid
        if (position < 0 || position >= input.Length)
            return "";
        // Search for the start of the word
        while (sp1 > 0 && (input[sp1 - 1] != '\n' && 
                                         input [sp1 - 1] != ' ')) {
            sp1--;
        }
        // Search for the end of the word
        while (sp2 < input.Length && (input[sp2] != '\n' && 
                                          input [sp2] != ' ')) {
            sp2++;
        }
        return input.Substring (sp1, sp2 - sp1).Replace ("\n", "");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
982
7
Gpt3D_Clone982_7.cs 1 19
Gpt3D_Clone982_7.cs 20 38
----------------------------------------

public static string GetWord (string input, int position) {
    char s = input [position];
    int sp1 = 0, sp2 = input.Length;
    for (int i = position; i > 0; i --) {
        char ch = input [i];
        if (ch == ' ' || ch == '\n') {
            sp1 = i;
            break;
        }
    }
    for (int i = position; i < input.Length; i ++) {
        char ch = input [i];
        if (ch == ' ' || ch == '\n') {
            sp2 = i;
            break;
        }
    }
    return input.Substring (sp1, sp2 - sp1).Replace ("\n", "");
}
----------------------------------------

 public static string GetWord (string input, int position) {
        int sp1 = position;
        int sp2 = input.Length;
        // Check if position is valid
        if (position < 0 || position >= input.Length)
            return "";
        // Search for the start of the word
        while (sp1 > 0 && input[sp1 - 1] != ' ' && input[sp1 - 1] != '\n') {
            sp1--;
        }
        // Search for the end of the word
        while (sp2 < input.Length && input[sp2] != ' ' 
                                 && input[sp2] != '\n') {
            sp2++;
        }
        return input.Substring (sp1, sp2 - sp1).Replace ("\n", "");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
982
8
Gpt3D_Clone982_8.cs 1 19
Gpt3D_Clone982_8.cs 20 39
----------------------------------------

public static string GetWord (string input, int position) {
    char s = input [position];
    int sp1 = 0, sp2 = input.Length;
    for (int i = position; i > 0; i --) {
        char ch = input [i];
        if (ch == ' ' || ch == '\n') {
            sp1 = i;
            break;
        }
    }
    for (int i = position; i < input.Length; i ++) {
        char ch = input [i];
        if (ch == ' ' || ch == '\n') {
            sp2 = i;
            break;
        }
    }
    return input.Substring (sp1, sp2 - sp1).Replace ("\n", "");
}
----------------------------------------

 public static string GetWord (string input, int position) {
        // Check if position is valid
        if (position < 0 || position >= input.Length) {
            return "";
        }
        // Search for the start of the word
        while (position > 0 && (input[position - 1] != '\n' && 
                                            input [position - 1] != ' ')) {
            position--;
        }
        // Search for the end of the word
        int end = position;
        while (end < input.Length && (input[end] != '\n' && 
                                             input [end] != ' ')) {
            end++;
        }
        return input.Substring (position, end - position).Replace ("\n", "");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
982
9
Gpt3D_Clone982_9.cs 1 19
Gpt3D_Clone982_9.cs 20 32
----------------------------------------

public static string GetWord (string input, int position) {
    char s = input [position];
    int sp1 = 0, sp2 = input.Length;
    for (int i = position; i > 0; i --) {
        char ch = input [i];
        if (ch == ' ' || ch == '\n') {
            sp1 = i;
            break;
        }
    }
    for (int i = position; i < input.Length; i ++) {
        char ch = input [i];
        if (ch == ' ' || ch == '\n') {
            sp2 = i;
            break;
        }
    }
    return input.Substring (sp1, sp2 - sp1).Replace ("\n", "");
}
----------------------------------------

 public static string GetWord (string input, int position) {
        int sp1 = position;
        int sp2 = input.Length;
        while (sp1 >= 0 && (input [sp1] == ' ' || input [sp1] == '\n')) {
            sp1--;
        }
        while (sp2 < input.Length && (input [sp2] == ' ' || input [sp2] == '\n')) {
            sp2++;
        }
        return input.Substring (sp1, sp2 - sp1).Replace ("\n", "");
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
983
0
Gpt3D_Clone983_0.cs 1 11
Gpt3D_Clone983_0.cs 12 33
----------------------------------------

public static void Main (string [] args) {
    foreach (string path in args) {
        if (File.Exists (path)) {
            ProcessFile (path);
        } else if (Directory.Exists (path)) {
            ProcessDirectory (path);
        } else {
            Console.WriteLine ("{0} is not a valid file or directory.", path);
        }
    }
}
----------------------------------------

 static void Main (string[] args) {
    Array.ForEach(args, path => {
        try 
        {
            FileAttributes attr = File.GetAttributes(path);
            if ((attr & FileAttributes.Directory) == FileAttributes.Directory)
            {
                ProcessDirectory (path);
            }
            else
            {
                ProcessFile (path);
            }
        }
        catch 
        {
            Console.WriteLine ("{0} is not a valid file or directory.", path);
        }
    });
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
985
1
Gpt3D_Clone985_1.cs 1 14
Gpt3D_Clone985_1.cs 15 29
----------------------------------------

public static bool IsEmpty < T > (this IEnumerable < T > list) {
    if (list == null) {
        throw new ArgumentNullException ("list");
    }
    var genericCollection = list as ICollection < T >;
    if (genericCollection != null) {
        return genericCollection.Count == 0;
    }
    var nonGenericCollection = list as ICollection;
    if (nonGenericCollection != null) {
        return nonGenericCollection.Count == 0;
    }
    return ! list.Any ();
}
----------------------------------------

 public static bool IsEmpty<T> (this IEnumerable<T> list) {
    if (list == null) {
        throw new ArgumentNullException("list");
    }
    int count = 0;
    foreach (var item in list)
    {
        count += 1;
        if (count > 0)
            return false;
    }
    return true;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
985
2
Gpt3D_Clone985_2.cs 1 14
Gpt3D_Clone985_2.cs 15 33
----------------------------------------

public static bool IsEmpty < T > (this IEnumerable < T > list) {
    if (list == null) {
        throw new ArgumentNullException ("list");
    }
    var genericCollection = list as ICollection < T >;
    if (genericCollection != null) {
        return genericCollection.Count == 0;
    }
    var nonGenericCollection = list as ICollection;
    if (nonGenericCollection != null) {
        return nonGenericCollection.Count == 0;
    }
    return ! list.Any ();
}
----------------------------------------

 public static bool IsEmpty<T>(this IEnumerable<T> list) {
    if (list == null) {
        throw new ArgumentNullException("list");
    }
    if (list.GetType().IsArray)
    {
        return ((T[])list).Length == 0;
    }
    else if (list.GetType().IsGenericType)
    {
        return ((List<T>)list).Count == 0;
    }
    else
    {
        return list.Count() == 0;
    }
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
985
3
Gpt3D_Clone985_3.cs 1 14
Gpt3D_Clone985_3.cs 15 29
----------------------------------------

public static bool IsEmpty < T > (this IEnumerable < T > list) {
    if (list == null) {
        throw new ArgumentNullException ("list");
    }
    var genericCollection = list as ICollection < T >;
    if (genericCollection != null) {
        return genericCollection.Count == 0;
    }
    var nonGenericCollection = list as ICollection;
    if (nonGenericCollection != null) {
        return nonGenericCollection.Count == 0;
    }
    return ! list.Any ();
}
----------------------------------------

 public static bool IsEmpty<T> (this IEnumerable<T> list) {
    if (list == null) {
        throw new ArgumentNullException("list");
    }
    if (list is Array)
    {
        return ((Array)list).Length == 0;
    } 
    else
    {
        return !list.Any();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
985
4
Gpt3D_Clone985_4.cs 1 14
Gpt3D_Clone985_4.cs 15 29
----------------------------------------

public static bool IsEmpty < T > (this IEnumerable < T > list) {
    if (list == null) {
        throw new ArgumentNullException ("list");
    }
    var genericCollection = list as ICollection < T >;
    if (genericCollection != null) {
        return genericCollection.Count == 0;
    }
    var nonGenericCollection = list as ICollection;
    if (nonGenericCollection != null) {
        return nonGenericCollection.Count == 0;
    }
    return ! list.Any ();
}
----------------------------------------

 public static bool IsEmpty<T> (this IEnumerable<T> list) {
    if (list == null) {
        throw new ArgumentNullException("list");
    }
    if (list is ICollection<T>)
    {
        return((ICollection<T>)list).Count == 0;
    }
    else 
    { 
        return !list.Any();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
985
5
Gpt3D_Clone985_5.cs 1 14
Gpt3D_Clone985_5.cs 15 29
----------------------------------------

public static bool IsEmpty < T > (this IEnumerable < T > list) {
    if (list == null) {
        throw new ArgumentNullException ("list");
    }
    var genericCollection = list as ICollection < T >;
    if (genericCollection != null) {
        return genericCollection.Count == 0;
    }
    var nonGenericCollection = list as ICollection;
    if (nonGenericCollection != null) {
        return nonGenericCollection.Count == 0;
    }
    return ! list.Any ();
}
----------------------------------------

 public static bool IsEmpty<T>(this IEnumerable<T> list) {
    if (list == null) {
        throw new ArgumentNullException("list");
    }
    if (list is ICollection<T>)
    {
        return ((ICollection<T>)list).IsReadOnly && ((ICollection<T>)list).Count == 0;
    }
    else 
    { 
        return !list.Any();
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
985
6
Gpt3D_Clone985_6.cs 1 14
Gpt3D_Clone985_6.cs 15 23
----------------------------------------

public static bool IsEmpty < T > (this IEnumerable < T > list) {
    if (list == null) {
        throw new ArgumentNullException ("list");
    }
    var genericCollection = list as ICollection < T >;
    if (genericCollection != null) {
        return genericCollection.Count == 0;
    }
    var nonGenericCollection = list as ICollection;
    if (nonGenericCollection != null) {
        return nonGenericCollection.Count == 0;
    }
    return ! list.Any ();
}
----------------------------------------

 public static bool IsEmpty<T> (this IEnumerable<T> list) {
    if (list == null) {
        throw new ArgumentNullException("list");
    }
    return list.SequenceEqual(Enumerable.Empty<T>());
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
985
7
Gpt3D_Clone985_7.cs 1 14
Gpt3D_Clone985_7.cs 15 22
----------------------------------------

public static bool IsEmpty < T > (this IEnumerable < T > list) {
    if (list == null) {
        throw new ArgumentNullException ("list");
    }
    var genericCollection = list as ICollection < T >;
    if (genericCollection != null) {
        return genericCollection.Count == 0;
    }
    var nonGenericCollection = list as ICollection;
    if (nonGenericCollection != null) {
        return nonGenericCollection.Count == 0;
    }
    return ! list.Any ();
}
----------------------------------------

 public static bool IsEmpty<T> (this IEnumerable<T> list) {
    if (list == null) {
        throw new ArgumentNullException("list");
    }
    return list.ToList().Count == 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
985
8
Gpt3D_Clone985_8.cs 1 14
Gpt3D_Clone985_8.cs 15 22
----------------------------------------

public static bool IsEmpty < T > (this IEnumerable < T > list) {
    if (list == null) {
        throw new ArgumentNullException ("list");
    }
    var genericCollection = list as ICollection < T >;
    if (genericCollection != null) {
        return genericCollection.Count == 0;
    }
    var nonGenericCollection = list as ICollection;
    if (nonGenericCollection != null) {
        return nonGenericCollection.Count == 0;
    }
    return ! list.Any ();
}
----------------------------------------

 public static bool IsEmpty<T> (this IEnumerable<T> list) {
    if (list == null) {
        throw new ArgumentNullException("list");
    }
    return list.SingleOrDefault() == null;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
985
9
Gpt3D_Clone985_9.cs 1 14
Gpt3D_Clone985_9.cs 15 22
----------------------------------------

public static bool IsEmpty < T > (this IEnumerable < T > list) {
    if (list == null) {
        throw new ArgumentNullException ("list");
    }
    var genericCollection = list as ICollection < T >;
    if (genericCollection != null) {
        return genericCollection.Count == 0;
    }
    var nonGenericCollection = list as ICollection;
    if (nonGenericCollection != null) {
        return nonGenericCollection.Count == 0;
    }
    return ! list.Any ();
}
----------------------------------------

 public static bool IsEmpty<T> (this IEnumerable<T> list) {
    if (list == null) {
        throw new ArgumentNullException("list");
    }
    return list.Count() == 0;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
989
3
Gpt3D_Clone989_3.cs 1 21
Gpt3D_Clone989_3.cs 22 46
----------------------------------------

public static Double Correlation (Double [] Xs, Double [] Ys) {
    Double sumX = 0;
    Double sumX2 = 0;
    Double sumY = 0;
    Double sumY2 = 0;
    Double sumXY = 0;
    int n = Xs.Length < Ys.Length ? Xs.Length : Ys.Length;
    for (int i = 0; i < n; ++ i) {
        Double x = Xs [i];
        Double y = Ys [i];
        sumX += x;
        sumX2 += x * x;
        sumY += y;
        sumY2 += y * y;
        sumXY += x * y;
    }
    Double stdX = Math.Sqrt (sumX2 / n - sumX * sumX / n / n);
    Double stdY = Math.Sqrt (sumY2 / n - sumY * sumY / n / n);
    Double covariance = (sumXY / n - sumX * sumY / n / n);
    return covariance / stdX / stdY;
}
----------------------------------------

 public static Double Correlation (Double [] Xs, Double [] Ys)
{
    int n = Math.Min(Xs.Length, Ys.Length);
    Double meanX = 0;
    Double meanY = 0;
    Double sumX2 = 0;
    Double sumY2 = 0;
    Double sumXY = 0;
    for (int i = 0; i < n; ++ i)
    {
        meanX += Xs[i] / n;
        meanY += Ys[i] / n;
        sumX2 += Math.Pow(Xs[i], 2) / n;
        sumY2 += Math.Pow(Ys[i], 2) / n;
        sumXY += Xs[i] * Ys[i] / n;
    }
    Double varianceX = sumX2 - Math.Pow(meanX, 2);
    Double varianceY = sumY2 - Math.Pow(meanY, 2);
    Double stdX = Math.Sqrt(varianceX);
    Double stdY = Math.Sqrt(varianceY);
    Double stdDeviation = (sumXY - meanX * meanY) / stdX / stdY;
    return stdDeviation;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
989
7
Gpt3D_Clone989_7.cs 1 21
Gpt3D_Clone989_7.cs 22 42
----------------------------------------

public static Double Correlation (Double [] Xs, Double [] Ys) {
    Double sumX = 0;
    Double sumX2 = 0;
    Double sumY = 0;
    Double sumY2 = 0;
    Double sumXY = 0;
    int n = Xs.Length < Ys.Length ? Xs.Length : Ys.Length;
    for (int i = 0; i < n; ++ i) {
        Double x = Xs [i];
        Double y = Ys [i];
        sumX += x;
        sumX2 += x * x;
        sumY += y;
        sumY2 += y * y;
        sumXY += x * y;
    }
    Double stdX = Math.Sqrt (sumX2 / n - sumX * sumX / n / n);
    Double stdY = Math.Sqrt (sumY2 / n - sumY * sumY / n / n);
    Double covariance = (sumXY / n - sumX * sumY / n / n);
    return covariance / stdX / stdY;
}
----------------------------------------

 public static Double Correlation (Double [] Xs, Double [] Ys) {
    int sampleSize = Xs.Length < Ys.Length ? Xs.Length : Ys.Length;
    Double xSumSquare = 0;
    Double ySumSquare = 0;
    Double xSum = 0;
    Double ySum = 0;
    Double xySum = 0;
    for (int i = 0; i < sampleSize; ++ i)
    {
        xSumSquare += Math.Pow(Xs[i], 2);
        ySumSquare += Math.Pow(Ys[i], 2);
        xSum += Xs[i];
        ySum += Ys[i];
        xySum += Xs[i] * Ys[i];
    }
    Double num = sampleSize * xySum - xSum * ySum;
    Double den = Math.Sqrt(sampleSize * xSumSquare - Math.Pow(xSum, 2)) * Math.Sqrt(sampleSize * ySumSquare - Math.Pow(ySum, 2));
    return num / den;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
989
8
Gpt3D_Clone989_8.cs 1 21
Gpt3D_Clone989_8.cs 22 44
----------------------------------------

public static Double Correlation (Double [] Xs, Double [] Ys) {
    Double sumX = 0;
    Double sumX2 = 0;
    Double sumY = 0;
    Double sumY2 = 0;
    Double sumXY = 0;
    int n = Xs.Length < Ys.Length ? Xs.Length : Ys.Length;
    for (int i = 0; i < n; ++ i) {
        Double x = Xs [i];
        Double y = Ys [i];
        sumX += x;
        sumX2 += x * x;
        sumY += y;
        sumY2 += y * y;
        sumXY += x * y;
    }
    Double stdX = Math.Sqrt (sumX2 / n - sumX * sumX / n / n);
    Double stdY = Math.Sqrt (sumY2 / n - sumY * sumY / n / n);
    Double covariance = (sumXY / n - sumX * sumY / n / n);
    return covariance / stdX / stdY;
}
----------------------------------------

 public static Double Correlation (Double [] Xs, Double [] Ys)
{
    int sampleSize = Xs.Length < Ys.Length ? Xs.Length : Ys.Length;
    Double meanX = 0;
    Double meanY = 0;
    Double meanX2 = 0;
    Double meanY2 = 0;
    Double covariance = 0;
    for (int i = 0; i < sampleSize; ++ i)
    {
        meanX += Xs[i] / sampleSize;
        meanY += Ys[i] / sampleSize;
        meanX2 += Math.Pow(Xs[i], 2) / sampleSize;
        meanY2 += Math.Pow(Ys[i], 2) / sampleSize;
        covariance += Xs[i] * Ys[i] / sampleSize;
    }
    Double stdX = Math.Sqrt(meanX2 - Math.Pow(meanX, 2));
    Double stdY = Math.Sqrt(meanY2 - Math.Pow(meanY, 2));
    
    return (covariance - (meanX * meanY)) / (stdX * stdY);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
989
9
Gpt3D_Clone989_9.cs 1 21
Gpt3D_Clone989_9.cs 22 39
----------------------------------------

public static Double Correlation (Double [] Xs, Double [] Ys) {
    Double sumX = 0;
    Double sumX2 = 0;
    Double sumY = 0;
    Double sumY2 = 0;
    Double sumXY = 0;
    int n = Xs.Length < Ys.Length ? Xs.Length : Ys.Length;
    for (int i = 0; i < n; ++ i) {
        Double x = Xs [i];
        Double y = Ys [i];
        sumX += x;
        sumX2 += x * x;
        sumY += y;
        sumY2 += y * y;
        sumXY += x * y;
    }
    Double stdX = Math.Sqrt (sumX2 / n - sumX * sumX / n / n);
    Double stdY = Math.Sqrt (sumY2 / n - sumY * sumY / n / n);
    Double covariance = (sumXY / n - sumX * sumY / n / n);
    return covariance / stdX / stdY;
}
----------------------------------------

  public static Double Correlation (Double [] Xs, Double [] Ys) {
    Double summationXX = 0;
    Double summationYY = 0;
    Double summationXY = 0;
    int sampleSize = Xs.Length < Ys.Length ? Xs.Length : Ys.Length;
    for (int i = 0; i < sampleSize; ++ i) {
        Double x = Xs [i];
        Double y = Ys [i];
        summationXX += (x * x);
        summationYY += (y * y);
        summationXY += (x * y);
    }
    Double dividend = sampleSize * summationXY - (Math.Sum(Xs) * Math.Sum(Ys));
    Double divisor = Math.Sqrt(sampleSize * summationXX - Math.Pow(Math.Sum(Xs), 2)) * Math.Sqrt(sampleSize * summationYY - Math.Pow(Math.Sum(Ys), 2));
    return dividend / divisor;
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
98
0
Gpt3D_Clone98_0.cs 1 16
Gpt3D_Clone98_0.cs 17 41
----------------------------------------

private static void DownloadRemoteImageFile (string uri, string fileName) {
    HttpWebRequest request = (HttpWebRequest) WebRequest.Create (uri);
    HttpWebResponse response = (HttpWebResponse) request.GetResponse ();
    if ((response.StatusCode == HttpStatusCode.OK || response.StatusCode == HttpStatusCode.Moved || response.StatusCode == HttpStatusCode.Redirect) && response.ContentType.StartsWith ("image", StringComparison.OrdinalIgnoreCase)) {
        using (Stream inputStream = response.GetResponseStream ())
        using (Stream outputStream = File.OpenWrite (fileName))
        {
            byte [] buffer = new byte [4096];
            int bytesRead;
            do
                {
                    bytesRead = inputStream.Read (buffer, 0, buffer.Length);
                    outputStream.Write (buffer, 0, bytesRead);
                } while (bytesRead != 0);
        }}
}
----------------------------------------

 private static void DownloadRemoteImageFile (string uri, string fileName)
{
                HttpWebRequest request = WebRequest.CreateHttp(uri);
                WebResponse response = request.GetResponse();
                if (response.ContentType.StartsWith("image", StringComparison.OrdinalIgnoreCase))
                {
                Stream outputStream = File.OpenWrite(fileName);
                byte[] buffer = new byte[4096];
                int bytesRead;
                Stream responseStream = response.GetResponseStream();
                do
                {
                    bytesRead = responseStream.Read(buffer, 0, buffer.Length);
                    outputStream.Write(buffer, 0, bytesRead);
                } while (bytesRead != 0);
                outputStream.Close();
                responseStream.Close();
                }
                response.Close();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
98
3
Gpt3D_Clone98_3.cs 1 16
Gpt3D_Clone98_3.cs 17 32
----------------------------------------

private static void DownloadRemoteImageFile (string uri, string fileName) {
    HttpWebRequest request = (HttpWebRequest) WebRequest.Create (uri);
    HttpWebResponse response = (HttpWebResponse) request.GetResponse ();
    if ((response.StatusCode == HttpStatusCode.OK || response.StatusCode == HttpStatusCode.Moved || response.StatusCode == HttpStatusCode.Redirect) && response.ContentType.StartsWith ("image", StringComparison.OrdinalIgnoreCase)) {
        using (Stream inputStream = response.GetResponseStream ())
        using (Stream outputStream = File.OpenWrite (fileName))
        {
            byte [] buffer = new byte [4096];
            int bytesRead;
            do
                {
                    bytesRead = inputStream.Read (buffer, 0, buffer.Length);
                    outputStream.Write (buffer, 0, bytesRead);
                } while (bytesRead != 0);
        }}
}
----------------------------------------

 private static void DownloadRemoteImageFile (string uri, string fileName) {
        var request = WebRequest.Create(uri);
        using (var response = request.GetResponse())
        using (var output = File.OpenWrite(fileName))
        using (var input = response.GetResponseStream())
        {
            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = input.Read(buffer, 0, buffer.Length)) > 0)
            {
                output.Write(buffer, 0, bytesRead);
            }
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
98
4
Gpt3D_Clone98_4.cs 1 16
Gpt3D_Clone98_4.cs 17 23
----------------------------------------

private static void DownloadRemoteImageFile (string uri, string fileName) {
    HttpWebRequest request = (HttpWebRequest) WebRequest.Create (uri);
    HttpWebResponse response = (HttpWebResponse) request.GetResponse ();
    if ((response.StatusCode == HttpStatusCode.OK || response.StatusCode == HttpStatusCode.Moved || response.StatusCode == HttpStatusCode.Redirect) && response.ContentType.StartsWith ("image", StringComparison.OrdinalIgnoreCase)) {
        using (Stream inputStream = response.GetResponseStream ())
        using (Stream outputStream = File.OpenWrite (fileName))
        {
            byte [] buffer = new byte [4096];
            int bytesRead;
            do
                {
                    bytesRead = inputStream.Read (buffer, 0, buffer.Length);
                    outputStream.Write (buffer, 0, bytesRead);
                } while (bytesRead != 0);
        }}
}
----------------------------------------

 private static void DownloadRemoteImageFile (string uri, string fileName) {
        using (WebClient client = new WebClient()) {
            client.DownloadFile(uri, fileName);
        }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
98
5
Gpt3D_Clone98_5.cs 1 16
Gpt3D_Clone98_5.cs 17 22
----------------------------------------

private static void DownloadRemoteImageFile (string uri, string fileName) {
    HttpWebRequest request = (HttpWebRequest) WebRequest.Create (uri);
    HttpWebResponse response = (HttpWebResponse) request.GetResponse ();
    if ((response.StatusCode == HttpStatusCode.OK || response.StatusCode == HttpStatusCode.Moved || response.StatusCode == HttpStatusCode.Redirect) && response.ContentType.StartsWith ("image", StringComparison.OrdinalIgnoreCase)) {
        using (Stream inputStream = response.GetResponseStream ())
        using (Stream outputStream = File.OpenWrite (fileName))
        {
            byte [] buffer = new byte [4096];
            int bytesRead;
            do
                {
                    bytesRead = inputStream.Read (buffer, 0, buffer.Length);
                    outputStream.Write (buffer, 0, bytesRead);
                } while (bytesRead != 0);
        }}
}
----------------------------------------

 private static void DownloadRemoteImageFile (string uri, string fileName){
     WebClient webClient = new WebClient();
     webClient.DownloadFile(uri, fileName);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
990
0
Gpt3D_Clone990_0.cs 1 12
Gpt3D_Clone990_0.cs 13 21
----------------------------------------

public static bool HasPropertyExist (dynamic settings, string name) {
    if (settings is System.Dynamic.ExpandoObject)
        return ((IDictionary < string, object >) settings).ContainsKey (name);
    if (settings is System.Web.Helpers.DynamicJsonObject)
        try {
            return settings [name] != null;
        }
        catch (KeyNotFoundException) {
            return false;
        }
    return settings.GetType ().GetProperty (name) != null;
}
----------------------------------------

 public static bool HasPropertyExists(object settings, string name)
    {
        if (settings is System.Dynamic.ExpandoObject || settings is System.Web.Helpers.DynamicJsonObject)
            return ((IDictionary<string, object>)settings).ContainsKey(name);
        return settings.GetType().GetProperty(name) != null;
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
992
0
Gpt3D_Clone992_0.cs 1 12
Gpt3D_Clone992_0.cs 13 39
----------------------------------------

private string DoSomething () {
    int max = 10;
    for (int i = 1; i <= max; i ++) {
        Thread.Sleep (_Random.Next (10, 1000));
        if (_BackgroundWorker.CancellationPending) {
            return "Job aborted!";
        }
        AddMessage (String.Format ("Currently working on item {0} of {1}", i, max));
        _BackgroundWorker.ReportProgress ((i * 100) / max);
    }
    return "Job is done.";
}
----------------------------------------

 private string DoSomething () {
    int max = 10;
    ManualResetEvent doneEvent = new ManualResetEvent (false);
    for (int i = 1; i <= max; i++) {
        BackgroundWorker workerThread = new BackgroundWorker ();
        workerThread.DoWork += new DoWorkEventHandler (delegate (object sender, DoWorkEventArgs e) {
            Thread.Sleep (_Random.Next (10, 1000));
            if (_BackgroundWorker.CancellationPending) {
                e.Cancel = true;
            }
            AddMessage (String.Format ("Currently working on item {0} of {1}", i, max));
            doneEvent.Set ();
            _BackgroundWorker.ReportProgress ((i * 100) / max);
        });
        workerThread.RunWorkerAsync ();
        doneEvent.WaitOne (TimeSpan.FromSeconds (30));
        doneEvent.Reset ();
        if (_BackgroundWorker.CancellationPending) {
            doneEvent.Close ();
            return "Job aborted!";
        }
    }
    doneEvent.Close ();
    return "Job is done.";
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
992
1
Gpt3D_Clone992_1.cs 1 12
Gpt3D_Clone992_1.cs 13 38
----------------------------------------

private string DoSomething () {
    int max = 10;
    for (int i = 1; i <= max; i ++) {
        Thread.Sleep (_Random.Next (10, 1000));
        if (_BackgroundWorker.CancellationPending) {
            return "Job aborted!";
        }
        AddMessage (String.Format ("Currently working on item {0} of {1}", i, max));
        _BackgroundWorker.ReportProgress ((i * 100) / max);
    }
    return "Job is done.";
}
----------------------------------------

  private string DoSomething () {
    int max = 10;
    CountdownEvent countDownEvent = new CountdownEvent (max);
    using (var pool = new ThreadPool (max))
    {
        for (int i = 1; i < max; i++)
        {
            int j = i;
            pool.QueueTask (() =>
            {
                Thread.Sleep (_Random.Next (10, 1000));
                if (_BackgroundWorker.CancellationPending) {
                    countDownEvent.Signal ();
                    return "Job aborted!";
                }
                AddMessage (String.Format ("Currently working on item {0} of {1}", j, max));
                _BackgroundWorker.ReportProgress ((j * 100) / max);
                countDownEvent.Signal ();
            });
        }
    }
    countDownEvent.Wait ();
    return "Job is done.";
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
992
2
Gpt3D_Clone992_2.cs 1 12
Gpt3D_Clone992_2.cs 13 29
----------------------------------------

private string DoSomething () {
    int max = 10;
    for (int i = 1; i <= max; i ++) {
        Thread.Sleep (_Random.Next (10, 1000));
        if (_BackgroundWorker.CancellationPending) {
            return "Job aborted!";
        }
        AddMessage (String.Format ("Currently working on item {0} of {1}", i, max));
        _BackgroundWorker.ReportProgress ((i * 100) / max);
    }
    return "Job is done.";
}
----------------------------------------

 private string DoSomething () {
    int max = 10;
    ConcurrentBag<string> messages = new ConcurrentBag<string> ();
    Parallel.For (1, max + 1, i => {
        Thread.Sleep (_Random.Next (10, 1000));
        if (_BackgroundWorker.CancellationPending) {
            messages.Add ("Job aborted!");
            return;
        }
        AddMessage (String.Format ("Currently working on item {0} of {1}", i, max));
        _BackgroundWorker.ReportProgress ((i * 100) / max);
        messages.Add ("Job is done.");
    });
    return messages.First();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
994
0
Gpt3D_Clone994_0.cs 1 31
Gpt3D_Clone994_0.cs 32 71
----------------------------------------

private void ScaleControls (Control c, ref Graphics g, double s) {
    List < Control > hold = null;
    foreach (Control ctrl in c.Controls) {
        if (ctrl is GroupBox || ctrl is Panel) {
            hold = new List < Control > ();
            foreach (Control gctrl in ctrl.Controls) {
                hold.Add (gctrl);
            }
            ctrl.Controls.Clear ();
        }
        Point oldLoc = ctrl.Location;
        Size oldSize = ctrl.Size;
        Font oldFont = ctrl.Font;
        ctrl.Location = new Point (ctrl.Location.X * s, ctrl.Location.Y * s);
        ctrl.Size = new Size (ctrl.Size.Width * s, ctrl.Height * s);
        ctrl.Font = new Font (ctrl.Font.FontFamily, ctrl.Font.Size * 5, ctrl.Font.Style, ctrl.Font.Unit);
        using (Bitmap bmp = new Bitmap (ctrl.Size.Width, ctrl.Size.Height))
        {
            ctrl.DrawToBitmap (bmp, ctrl.ClientRectangle);
            g.DrawImage (bmp, ctrl.Location);
        } ctrl.Location = oldLoc;
        ctrl.Size = oldSize;
        ctrl.Font = oldFont;
        if (ctrl is GroupBox || ctrl is Panel) {
            foreach (Control gctrl in hold) {
                ctrl.Controls.Add (gctrl);
            }
            ScaleControls (ctrl, g, s);
        }
    }
}
----------------------------------------

 private void ScaleControls (Control c, ref Graphics g, double s) {
                foreach (Control ctrl in c.Controls) {
                    Point oldLoc = ctrl.Location;
                    Size oldSize = ctrl.Size;
                    Font oldFont = ctrl.Font;
                    ctrl.Location = new Point (ctrl.Location.X*s, ctrl.Location.Y*s);
                    ctrl.Size = new Size (ctrl.Size.Width*s, ctrl.Height*s);
                    ctrl.Font = new Font (ctrl.Font.FontFamily, ctrl.Font.Size*5, ctrl.Font.Style, ctrl.Font.Unit);
                    if (ctrl is GroupBox || ctrl is Panel) {
                       ctrl.Size = new Size (ctrl.Size.Width*s, ctrl.Height*s);
                        List<Control> cl = new List<Control>(ctrl.Controls);
                        foreach (Control gctrl in ctrl.Controls) {
                            g.DrawImage (gctrl.Image, ctrl.Location);
                        }
                        foreach (Control gctrl in cl) {
                            gctrl.Location = new Point (gctrl.Location.X*s, gctrl.Location.Y*s);
                            gctrl.Size = new Size (gctrl.Size.Width*s, gctrl.Height*s);
                            gctrl.Font = new Font (gctrl.Font.FontFamily, gctrl.Font.Size*s, gctrl.Font.Style, gctrl.Font.Unit);
                            using (Bitmap bmp = new Bitmap (ctrl.Size.Width, ctrl.Size.Height))
                            {
                                ctrl.DrawToBitmap (bmp, ctrl.ClientRectangle);
                                g.DrawImage (bmp, ctrl.Location);
                            }
                        }
                       ctrl.Size = oldSize;
                        ScaleControls (ctrl, g, s);
                    } else {
                        using (Bitmap bmp = new Bitmap (ctrl.Size.Width, ctrl.Size.Height))
                        {
                            ctrl.DrawToBitmap (bmp, ctrl.ClientRectangle);
                            g.DrawImage (bmp, ctrl.Location);
                        }
                    }
                    ctrl.Location = oldLoc;
                    ctrl.Size = oldSize;
                    ctrl.Font = oldFont;
                }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
997
0
Gpt3D_Clone997_0.cs 1 9
Gpt3D_Clone997_0.cs 10 25
----------------------------------------

protected void OnUpload_Click (object sender, EventArgs e) {
    var path = Server.MapPath ("~/pics");
    var directory = new DirectoryInfo (path);
    if (directory.Exists == false) {
        directory.Create ();
    }
    var file = Path.Combine (path, upload.FileName);
    upload.SaveAs (file);
}
----------------------------------------

 protected void OnUpload_Click(object sender, EventArgs e) 
{
    string targetPath = Server.MapPath(@"~/pics");
    if (!Directory.Exists(targetPath))
    {
        Directory.CreateDirectory(targetPath);
    }
    string[] files = upload.FileName.Split('\\');
    string fileName = files[files.Length - 1];
    fileName = Path.Combine(targetPath, fileName);
    upload.SaveAs(fileName);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
997
2
Gpt3D_Clone997_2.cs 1 9
Gpt3D_Clone997_2.cs 10 23
----------------------------------------

protected void OnUpload_Click (object sender, EventArgs e) {
    var path = Server.MapPath ("~/pics");
    var directory = new DirectoryInfo (path);
    if (directory.Exists == false) {
        directory.Create ();
    }
    var file = Path.Combine (path, upload.FileName);
    upload.SaveAs (file);
}
----------------------------------------

 protected void OnUpload_Click(object sender, EventArgs e) 
{
    string savePath = Server.MapPath($"~/pics");
    if (!Directory.Exists(savePath)) 
    {
        Directory.CreateDirectory(savePath);
    }
    string saveFileName = Path.Combine(savePath, upload.FileName);
    upload.SaveAs(saveFileName);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
997
3
Gpt3D_Clone997_3.cs 1 9
Gpt3D_Clone997_3.cs 10 22
----------------------------------------

protected void OnUpload_Click (object sender, EventArgs e) {
    var path = Server.MapPath ("~/pics");
    var directory = new DirectoryInfo (path);
    if (directory.Exists == false) {
        directory.Create ();
    }
    var file = Path.Combine (path, upload.FileName);
    upload.SaveAs (file);
}
----------------------------------------

 protected void OnUpload_Click(object sender, EventArgs e) 
{
    string serverPath = Server.MapPath("~/pics");
    if (!Directory.Exists(serverPath))
    {
        DirectoryInfo dir = Directory.CreateDirectory(serverPath);
    }
    string filePath = Path.Combine(serverPath, upload.FileName);
    upload.SaveAs(filePath);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
997
4
Gpt3D_Clone997_4.cs 1 9
Gpt3D_Clone997_4.cs 10 22
----------------------------------------

protected void OnUpload_Click (object sender, EventArgs e) {
    var path = Server.MapPath ("~/pics");
    var directory = new DirectoryInfo (path);
    if (directory.Exists == false) {
        directory.Create ();
    }
    var file = Path.Combine (path, upload.FileName);
    upload.SaveAs (file);
}
----------------------------------------

 protected void OnUpload_Click(object sender, EventArgs e) 
{
    string rootFolderLocation = Server.MapPath("~/pics");
    if (!Directory.Exists(rootFolderLocation))
    {
        Directory.CreateDirectory(rootFolderLocation);
    }
    string filePath = Path.Combine(rootFolderLocation, upload.FileName);
    upload.SaveAs(filePath);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
997
5
Gpt3D_Clone997_5.cs 1 9
Gpt3D_Clone997_5.cs 10 22
----------------------------------------

protected void OnUpload_Click (object sender, EventArgs e) {
    var path = Server.MapPath ("~/pics");
    var directory = new DirectoryInfo (path);
    if (directory.Exists == false) {
        directory.Create ();
    }
    var file = Path.Combine (path, upload.FileName);
    upload.SaveAs (file);
}
----------------------------------------

 protected void OnUpload_Click(object sender, EventArgs e) 
{
    string saveDirectory = Server.MapPath(@"~/pics");
    if (!Directory.Exists(saveDirectory))
    {
        Directory.CreateDirectory(saveDirectory);
    }
    
    string saveFileName = Path.Combine(saveDirectory, upload.FileName);
    upload.SaveAs(saveFileName);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
997
6
Gpt3D_Clone997_6.cs 1 9
Gpt3D_Clone997_6.cs 10 22
----------------------------------------

protected void OnUpload_Click (object sender, EventArgs e) {
    var path = Server.MapPath ("~/pics");
    var directory = new DirectoryInfo (path);
    if (directory.Exists == false) {
        directory.Create ();
    }
    var file = Path.Combine (path, upload.FileName);
    upload.SaveAs (file);
}
----------------------------------------

 protected void OnUpload_Click(object sender, EventArgs e) 
{
    string directoryPath = Server.MapPath(@"~/pics");
    if (!Directory.Exists(directoryPath))
    {
        Directory.CreateDirectory(directoryPath);
    }
    string savedFileName = Path.Combine(directoryPath, upload.FileName);
    upload.SaveAs(savedFileName);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
997
7
Gpt3D_Clone997_7.cs 1 9
Gpt3D_Clone997_7.cs 10 22
----------------------------------------

protected void OnUpload_Click (object sender, EventArgs e) {
    var path = Server.MapPath ("~/pics");
    var directory = new DirectoryInfo (path);
    if (directory.Exists == false) {
        directory.Create ();
    }
    var file = Path.Combine (path, upload.FileName);
    upload.SaveAs (file);
}
----------------------------------------

  protected void OnUpload_Click(object sender, EventArgs e) 
{
    var path = HttpContext.Current.Server.MapPath("~/pics");
    if (!Directory.Exists(path))
    {
        DirectoryInfo di = Directory.CreateDirectory(path);
    }
    string saveFileName = Path.Combine(path, upload.FileName);
    upload.SaveAs(saveFileName);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
997
8
Gpt3D_Clone997_8.cs 1 9
Gpt3D_Clone997_8.cs 10 22
----------------------------------------

protected void OnUpload_Click (object sender, EventArgs e) {
    var path = Server.MapPath ("~/pics");
    var directory = new DirectoryInfo (path);
    if (directory.Exists == false) {
        directory.Create ();
    }
    var file = Path.Combine (path, upload.FileName);
    upload.SaveAs (file);
}
----------------------------------------

 protected void OnUpload_Click(object sender, EventArgs e) 
{
    string strFilePath = Server.MapPath("~/pics");
    if (!Directory.Exists(strFilePath))
    {
        Directory.CreateDirectory(strFilePath);
    }
    string _fileName = Path.Combine(strFilePath, upload.FileName);
    upload.SaveAs(_fileName);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
997
9
Gpt3D_Clone997_9.cs 1 9
Gpt3D_Clone997_9.cs 10 20
----------------------------------------

protected void OnUpload_Click (object sender, EventArgs e) {
    var path = Server.MapPath ("~/pics");
    var directory = new DirectoryInfo (path);
    if (directory.Exists == false) {
        directory.Create ();
    }
    var file = Path.Combine (path, upload.FileName);
    upload.SaveAs (file);
}
----------------------------------------

 protected void OnUpload_Click(object sender, EventArgs e) 
{
    var path = HttpContext.Current.Server.MapPath("~/pics");
    if (!Directory.Exists(path))
    {
        Directory.CreateDirectory(path);
    }
    upload.SaveAs(Path.Combine(path, upload.FileName));
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
999
3
Gpt3D_Clone999_3.cs 1 16
Gpt3D_Clone999_3.cs 17 33
----------------------------------------

public static void Move < T > (this List < T > list, int oldIndex, int newIndex) {
    if ((oldIndex == newIndex) || (0 > oldIndex) || (oldIndex >= list.Count) || (0 > newIndex) || (newIndex >= list.Count))
        return;
    var i = 0;
    T tmp = list [oldIndex];
    if (oldIndex < newIndex) {
        for (i = oldIndex; i < newIndex; i ++) {
            list [i] = list [i + 1];
        }
    } else {
        for (i = oldIndex; i > newIndex; i --) {
            list [i] = list [i - 1];
        }
    }
    list [newIndex] = tmp;
}
----------------------------------------

 public static void Move<T>(this List<T> list, int oldIndex, int newIndex) 
{ 
    T value = list[oldIndex]; 
    if(oldIndex > newIndex) 
    { 
        for(; oldIndex > newIndex; oldIndex--) 
            list[oldIndex] = list[oldIndex-1]; 
    } 
    else 
    { 
        for(; oldIndex < newIndex; oldIndex++) 
            list[oldIndex] = list[oldIndex+1]; 
    } 
    list[newIndex] = value; 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
999
4
Gpt3D_Clone999_4.cs 1 16
Gpt3D_Clone999_4.cs 17 48
----------------------------------------

public static void Move < T > (this List < T > list, int oldIndex, int newIndex) {
    if ((oldIndex == newIndex) || (0 > oldIndex) || (oldIndex >= list.Count) || (0 > newIndex) || (newIndex >= list.Count))
        return;
    var i = 0;
    T tmp = list [oldIndex];
    if (oldIndex < newIndex) {
        for (i = oldIndex; i < newIndex; i ++) {
            list [i] = list [i + 1];
        }
    } else {
        for (i = oldIndex; i > newIndex; i --) {
            list [i] = list [i - 1];
        }
    }
    list [newIndex] = tmp;
}
----------------------------------------

 public static void Move<T>(this List<T> list, int oldIndex, int newIndex) 
                { 
                    if (((oldIndex < newIndex) || (oldIndex > newIndex)) && (oldIndex > 0 && oldIndex < list.Count && newIndex > 0 && newIndex < list.Count)) 
                    { 
                        T temp = list[oldIndex]; 
                        list.RemoveAt(oldIndex); 
                        list.Insert(newIndex, temp); // Inserts the element in its new index 
                    } 
                    else 
                    { 
                        return; 
                    } 
                } 
 public static void Move<T>(this List <T> list, int oldIndex, int newIndex) 
{ 
    if (oldIndex > newIndex || oldIndex != newIndex) 
    { 
        T prevVal = list[oldIndex]; 
        for (int i = oldIndex; i > newIndex; i--) 
            list[i] = list[i - 1]; 
        list[newIndex] = prevVal; 
    } 
    else 
    { 
        return; 
    } 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
999
5
Gpt3D_Clone999_5.cs 1 16
Gpt3D_Clone999_5.cs 17 31
----------------------------------------

public static void Move < T > (this List < T > list, int oldIndex, int newIndex) {
    if ((oldIndex == newIndex) || (0 > oldIndex) || (oldIndex >= list.Count) || (0 > newIndex) || (newIndex >= list.Count))
        return;
    var i = 0;
    T tmp = list [oldIndex];
    if (oldIndex < newIndex) {
        for (i = oldIndex; i < newIndex; i ++) {
            list [i] = list [i + 1];
        }
    } else {
        for (i = oldIndex; i > newIndex; i --) {
            list [i] = list [i - 1];
        }
    }
    list [newIndex] = tmp;
}
----------------------------------------

 public static void Move<T>(this List<T> list, int oldIndex, int newIndex)
{ 
   if (oldIndex != newIndex && 0 <= oldIndex && oldIndex < list.Count && 0 <= newIndex && newIndex < list.Count)
   { 
     T temp = list[oldIndex];  
     int num = (newIndex - oldIndex) / Math.Abs(newIndex - oldIndex); 
for (int index = oldIndex; index != newIndex; index += num)
      list[index] = list[index + num]; 
list[newIndex] = temp; 
   } 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
999
6
Gpt3D_Clone999_6.cs 1 16
Gpt3D_Clone999_6.cs 17 48
----------------------------------------

public static void Move < T > (this List < T > list, int oldIndex, int newIndex) {
    if ((oldIndex == newIndex) || (0 > oldIndex) || (oldIndex >= list.Count) || (0 > newIndex) || (newIndex >= list.Count))
        return;
    var i = 0;
    T tmp = list [oldIndex];
    if (oldIndex < newIndex) {
        for (i = oldIndex; i < newIndex; i ++) {
            list [i] = list [i + 1];
        }
    } else {
        for (i = oldIndex; i > newIndex; i --) {
            list [i] = list [i - 1];
        }
    }
    list [newIndex] = tmp;
}
----------------------------------------

 public static void Move<T>(this List<T> list, int oldIndex, int newIndex) 
                { 
                    if (((oldIndex < newIndex) || (oldIndex > newIndex)) && (oldIndex > 0 && oldIndex < list.Count && newIndex > 0 && newIndex < list.Count)) 
                    { 
                        T temp = list[oldIndex]; 
                        list.RemoveAt(oldIndex); 
                        list.Insert(newIndex, temp); // Inserts the element in its new index 
                    } 
                    else 
                    { 
                        return; 
                    } 
                } 
 public static void Move<T>(this List <T> list, int oldIndex, int newIndex) 
{ 
    if (oldIndex > newIndex || oldIndex != newIndex) 
    { 
        T prevVal = list[oldIndex]; 
        for (int i = oldIndex; i > newIndex; i--) 
            list[i] = list[i - 1]; 
        list[newIndex] = prevVal; 
    } 
    else 
    { 
        return; 
    } 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
999
7
Gpt3D_Clone999_7.cs 1 16
Gpt3D_Clone999_7.cs 17 28
----------------------------------------

public static void Move < T > (this List < T > list, int oldIndex, int newIndex) {
    if ((oldIndex == newIndex) || (0 > oldIndex) || (oldIndex >= list.Count) || (0 > newIndex) || (newIndex >= list.Count))
        return;
    var i = 0;
    T tmp = list [oldIndex];
    if (oldIndex < newIndex) {
        for (i = oldIndex; i < newIndex; i ++) {
            list [i] = list [i + 1];
        }
    } else {
        for (i = oldIndex; i > newIndex; i --) {
            list [i] = list [i - 1];
        }
    }
    list [newIndex] = tmp;
}
----------------------------------------

 public static void Move<T>(this List<T> list, int oldIndex, int newIndex) 
{ 
    if (!(newIndex > 0 && newIndex < list.Count && oldIndex > 0 && oldIndex < list.Count) 
        || oldIndex == newIndex) 
        return; 
 
    T temp = list[oldIndex]; 
    list.RemoveAt(oldIndex); 
    list.Insert(newIndex, temp); 
} 
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
999
8
Gpt3D_Clone999_8.cs 1 16
Gpt3D_Clone999_8.cs 17 27
----------------------------------------

public static void Move < T > (this List < T > list, int oldIndex, int newIndex) {
    if ((oldIndex == newIndex) || (0 > oldIndex) || (oldIndex >= list.Count) || (0 > newIndex) || (newIndex >= list.Count))
        return;
    var i = 0;
    T tmp = list [oldIndex];
    if (oldIndex < newIndex) {
        for (i = oldIndex; i < newIndex; i ++) {
            list [i] = list [i + 1];
        }
    } else {
        for (i = oldIndex; i > newIndex; i --) {
            list [i] = list [i - 1];
        }
    }
    list [newIndex] = tmp;
}
----------------------------------------

 public static void Move<T>(this List<T> list, int oldIndex, int newIndex)
{
    if ((oldIndex == newIndex) || (0 > oldIndex) || (oldIndex >= list.Count) || (0 > newIndex) || (newIndex >= list.Count))
        return;
    T item  = list[oldIndex];
    list.RemoveAt(oldIndex);
    list.Insert(newIndex, item);
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
999
9
Gpt3D_Clone999_9.cs 1 16
Gpt3D_Clone999_9.cs 17 27
----------------------------------------

public static void Move < T > (this List < T > list, int oldIndex, int newIndex) {
    if ((oldIndex == newIndex) || (0 > oldIndex) || (oldIndex >= list.Count) || (0 > newIndex) || (newIndex >= list.Count))
        return;
    var i = 0;
    T tmp = list [oldIndex];
    if (oldIndex < newIndex) {
        for (i = oldIndex; i < newIndex; i ++) {
            list [i] = list [i + 1];
        }
    } else {
        for (i = oldIndex; i > newIndex; i --) {
            list [i] = list [i - 1];
        }
    }
    list [newIndex] = tmp;
}
----------------------------------------

 public static void Move<T>(this List<T> list, int oldIndex, int newIndex) 
{ 
    if (oldIndex != newIndex && 0 <= oldIndex && oldIndex < list.Count && 0 <= newIndex && newIndex < list.Count)
    {        
        T tmp = list[oldIndex];
        list.RemoveAt(oldIndex);
        list.Insert(newIndex, tmp);
    }
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
0
Gpt3D_Clone99_0.cs 1 9
Gpt3D_Clone99_0.cs 10 24
----------------------------------------

static void Main (string [] args) {
    List < string > names = new List < string > () {"Sam", "John", "Bob", "Adam", "Kelly", "Nolan", "Carl", "Tim", "Tom", "David"};
    for (int i = 0; i < names.Count; i ++) {
        if (i % 4 == 0 && i > 0)
            Console.WriteLine ();
        Console.Write (names [i] + "\t");
    }
    Console.ReadLine ();
}
----------------------------------------

 static void Main (string [] args) 
{
    string [] names = {"Sam", "John", "Bob", "Adam", "Kelly", "Nolan", "Carl", "Tim", "Tom", "David"};
    int i = 0;
    while (i < names.Length) 
    {
        if (i > 0 && i % 4 == 0)
            Console.WriteLine ();
        Console.Write (names [i] + "\t");
        i ++;
    }
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
1
Gpt3D_Clone99_1.cs 1 9
Gpt3D_Clone99_1.cs 10 24
----------------------------------------

static void Main (string [] args) {
    List < string > names = new List < string > () {"Sam", "John", "Bob", "Adam", "Kelly", "Nolan", "Carl", "Tim", "Tom", "David"};
    for (int i = 0; i < names.Count; i ++) {
        if (i % 4 == 0 && i > 0)
            Console.WriteLine ();
        Console.Write (names [i] + "\t");
    }
    Console.ReadLine ();
}
----------------------------------------

 static void Main (string [] args) 
{
    List < string > names = new List < string > () {"Sam", "John", "Bob", "Adam", "Kelly", "Nolan", "Carl", "Tim", "Tom", "David"};
    int i = 0; 
    while (i < names.Count) 
    {
        Console.Write (names[i] + "\t");
        if (i % 4 == 0 && i != 0)
            Console.WriteLine ();
        i ++;
    }    
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
4
Gpt3D_Clone99_4.cs 1 9
Gpt3D_Clone99_4.cs 10 23
----------------------------------------

static void Main (string [] args) {
    List < string > names = new List < string > () {"Sam", "John", "Bob", "Adam", "Kelly", "Nolan", "Carl", "Tim", "Tom", "David"};
    for (int i = 0; i < names.Count; i ++) {
        if (i % 4 == 0 && i > 0)
            Console.WriteLine ();
        Console.Write (names [i] + "\t");
    }
    Console.ReadLine ();
}
----------------------------------------

 static void Main (string [] args) 
{
    string [] names = {"Sam", "John", "Bob", "Adam", "Kelly", "Nolan", "Carl", "Tim", "Tom", "David"};
    int j = 0; 
    while (j < names.Length) 
    {
        Console.Write (names[j] + "\t");
        j += 4; 
        Console.WriteLine ();
    }    
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
99
5
Gpt3D_Clone99_5.cs 1 9
Gpt3D_Clone99_5.cs 10 23
----------------------------------------

static void Main (string [] args) {
    List < string > names = new List < string > () {"Sam", "John", "Bob", "Adam", "Kelly", "Nolan", "Carl", "Tim", "Tom", "David"};
    for (int i = 0; i < names.Count; i ++) {
        if (i % 4 == 0 && i > 0)
            Console.WriteLine ();
        Console.Write (names [i] + "\t");
    }
    Console.ReadLine ();
}
----------------------------------------

 static void Main (string [] args) 
{
    List < string > names = new List < string > () {"Sam", "John", "Bob", "Adam", "Kelly", "Nolan", "Carl", "Tim", "Tom", "David"};
    int j = 0; 
    while (j < names.Count) 
    {
        Console.Write (names[j] + "\t");
        j += 4; 
        Console.WriteLine ();
    }    
    Console.ReadLine ();
}
----------------------------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
9
1
Gpt3D_Clone9_1.cs 1 9
Gpt3D_Clone9_1.cs 10 25
----------------------------------------

public Image RotateImage (Image img) {
    var bmp = new Bitmap (img);
    using (Graphics gfx = Graphics.FromImage (bmp))
    {
        gfx.Clear (Color.White);
        gfx.DrawImage (img, 0, 0, img.Width, img.Height);
    } bmp.RotateFlip (RotateFlipType.Rotate270FlipNone);
    return bmp;
}
----------------------------------------

 public Image RotateImage (Image img) {
    var bmp = new Bitmap (img);
	GraphicsPath path = new GraphicsPath();
	path.AddRectangle(new RectangleF(0f, 0f, (float)img.Width, (float)img.Height));
	Matrix matrix = new Matrix();
	matrix.Rotate(90);
    using (Graphics gfx = Graphics.FromImage (bmp))
    {
        gfx.Clear (Color.White);
		gfx.Transform = matrix;
		gfx.DrawImage(img, path);
    } 
    return bmp;
}
----------------------------------------

